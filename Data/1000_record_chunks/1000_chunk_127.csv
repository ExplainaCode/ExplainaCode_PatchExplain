record_number,buggy_code,fixed_code,code_similarity
126001,"public IMetadataColumn createNewMetadataColumn(){
  MetadataColumn metadataColumn=new MetadataColumn();
  String columnName=getNextGeneratedColumnName();
  metadataColumn.setLabel(columnName);
  metadataColumn.setNullable(true);
  metadataColumn.setOriginalDbColumnName(columnName);
  IPreferenceStore preferenceStore=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
    IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
    preferenceStore=designerCoreUiService.getPreferenceStore();
  }
  if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
    metadataColumn.setTalendType(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
    if (preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
      metadataColumn.setLength(Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH)));
    }
  }
 else {
    metadataColumn.setTalendType(JavaTypesManager.getDefaultJavaType().getId());
    if (metadataTable.getDbms() != null) {
      metadataColumn.setType(TypesManager.getDBTypeFromTalendType(metadataTable.getDbms(),metadataColumn.getTalendType()));
    }
  }
  return metadataColumn;
}","public IMetadataColumn createNewMetadataColumn(){
  MetadataColumn metadataColumn=new MetadataColumn();
  String columnName=getNextGeneratedColumnName();
  metadataColumn.setLabel(columnName);
  metadataColumn.setNullable(true);
  metadataColumn.setOriginalDbColumnName(columnName);
  IPreferenceStore preferenceStore=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
    IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
    preferenceStore=designerCoreUiService.getPreferenceStore();
  }
  if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE).equals(""String_Node_Str"")) {
    metadataColumn.setTalendType(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_TYPE));
    if (metadataTable.getDbms() != null) {
      metadataColumn.setType(TypesManager.getDBTypeFromTalendType(metadataTable.getDbms(),metadataColumn.getTalendType()));
    }
    if (preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
      metadataColumn.setLength(Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.FIELD_DEFAULT_LENGTH)));
    }
  }
 else {
    metadataColumn.setTalendType(JavaTypesManager.getDefaultJavaType().getId());
    if (metadataTable.getDbms() != null) {
      metadataColumn.setType(TypesManager.getDBTypeFromTalendType(metadataTable.getDbms(),metadataColumn.getTalendType()));
    }
  }
  return metadataColumn;
}",0.9486189486189486
126002,"@Override public boolean isDeleted(){
  return getProperty().getItem().getState().isDeleted();
}","@Override public boolean isDeleted(){
  if (getProperty().getItem() == null) {
    return false;
  }
  return getProperty().getItem().getState().isDeleted();
}",0.7529411764705882
126003,"/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    boolean installed=false;
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (librariesService != null && (librariesService.getLibraryStatus(moduleName) == ELibraryInstallStatus.INSTALLED)) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(url.toURI(),null);
                installed=true;
              }
              break;
            }
          }
        }
      }
 catch (      BusinessException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!installed && !new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  if (!requiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
      }
    }
);
  }
}","/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    boolean installed=false;
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (librariesService != null && (librariesService.getLibraryStatus(moduleName) == ELibraryInstallStatus.INSTALLED)) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(url.toURI(),null);
                installed=true;
              }
              break;
            }
          }
        }
      }
 catch (      BusinessException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!installed && !new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  if (!requiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
      }
    }
);
  }
}",0.9860930836269238
126004,"@Override public void run(){
  ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
  dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
}","@Override public void run(){
  ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
  dialog.showDialog(true,requiredJars.toArray(new String[requiredJars.size()]));
}",0.8939179632248939
126005,"protected MPerspectiveStack getMPerspectiveStack(){
  if (fPerspectiveStack != null) {
    return fPerspectiveStack;
  }
  if (fWindow != null) {
    if (fPerspectiveStack == null) {
      List<MPerspectiveStack> perspStackList=fModelService.findElements(fWindow,null,MPerspectiveStack.class,null);
      if (perspStackList.size() > 0) {
        fPerspectiveStack=perspStackList.get(0);
        return fPerspectiveStack;
      }
    }
    for (    MWindowElement child : fWindow.getChildren()) {
      if (child instanceof MPerspectiveStack) {
        fPerspectiveStack=(MPerspectiveStack)child;
        return fPerspectiveStack;
      }
    }
  }
  return null;
}","protected MPerspectiveStack getMPerspectiveStack(){
  if (fPerspectiveStack != null) {
    return fPerspectiveStack;
  }
  MUIElement baseElement=fWindow;
  if (fWindow == null) {
    baseElement=fApp;
  }
  if (baseElement != null) {
    if (fPerspectiveStack == null) {
      List<MPerspectiveStack> perspStackList=fModelService.findElements(baseElement,null,MPerspectiveStack.class,null);
      if (perspStackList.size() > 0) {
        fPerspectiveStack=perspStackList.get(0);
        return fPerspectiveStack;
      }
    }
    if (fWindow != null) {
      for (      MWindowElement child : fWindow.getChildren()) {
        if (child instanceof MPerspectiveStack) {
          fPerspectiveStack=(MPerspectiveStack)child;
          return fPerspectiveStack;
        }
      }
    }
  }
  return null;
}",0.6716621253405994
126006,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  perspProvider.closeAllEditors();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}",0.9970595648155928
126007,"/** 
 * DOC ldong Comment method ""getCurrentBranchLabel"".
 * @param project
 * @return
 */
public static String getCurrentBranchLabel(Project project){
  String branchSelection=NAME_TRUNK;
  String branchSelectionFromProject=ProjectManager.getInstance().getMainProjectBranch(project);
  if (branchSelectionFromProject != null) {
    branchSelection=branchSelectionFromProject;
  }
  if (!branchSelection.contains(NAME_TAGS) && !branchSelection.contains(NAME_BRANCHES) && !branchSelection.contains(NAME_TRUNK)) {
    branchSelection=NAME_BRANCHES + branchSelection;
  }
  return branchSelection;
}","/** 
 * DOC ldong Comment method ""getCurrentBranchLabel"".
 * @param project
 * @return
 */
public static String getCurrentBranchLabel(Project project){
  String branchSelection=NAME_TRUNK;
  String branchSelectionFromProject=ProjectManager.getInstance().getMainProjectBranch(project);
  if (branchSelectionFromProject != null) {
    branchSelection=branchSelectionFromProject;
  }
  if (!branchSelection.contains(NAME_TAGS) && !branchSelection.contains(NAME_BRANCHES) && !branchSelection.contains(NAME_TRUNK)&& !branchSelection.contains(""String_Node_Str"")) {
    branchSelection=NAME_BRANCHES + branchSelection;
  }
  return branchSelection;
}",0.9620661824051656
126008,"public static boolean isSchemaFromSidOrDatabase(EDatabaseTypeName inType){
  if (EDatabaseTypeName.TERADATA.equals(inType) || EDatabaseTypeName.IMPALA.equals(inType) || EDatabaseTypeName.AS400.equals(inType)|| EDatabaseTypeName.EXASOL.equals(inType)) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean isSchemaFromSidOrDatabase(EDatabaseTypeName inType){
  if (EDatabaseTypeName.TERADATA.equals(inType) || EDatabaseTypeName.IMPALA.equals(inType) || EDatabaseTypeName.AS400.equals(inType)|| EDatabaseTypeName.EXASOL.equals(inType)|| EDatabaseTypeName.HIVE.equals(inType)) {
    return true;
  }
 else {
    return false;
  }
}",0.9384615384615383
126009,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLStringForStandardalone(template,getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID());
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.9899609592861126
126010,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLStringForStandardalone(template,getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID());
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.9899609592861126
126011,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.9779559118236472
126012,"/** 
 * This method is invoked when an item of Hive mode is selected. If the selected is Embedded, it invokes  {@link #handleEmbeddedMode()},   {@link #handleStandaloneMode()} otherwise. Then it invokes the method{@link #doUpdateConnection()} to update connection. Added by Marvin Wang on Aug. 3, 2012.
 */
protected void doHiveModeModify(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  boolean isEmbeddedMode=HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
  getConnection().setURL(getStringConnection());
  if (isEmbeddedMode) {
    handleUIWhenEmbeddedModeSelected();
  }
 else {
    handleUIWhenStandaloneModeSelected();
  }
  fillDefaultsWhenHiveModeChanged(isEmbeddedMode);
  doUpdateConnection();
}","/** 
 * This method is invoked when an item of Hive mode is selected. If the selected is Embedded, it invokes  {@link #handleEmbeddedMode()},   {@link #handleStandaloneMode()} otherwise. Then it invokes the method{@link #doUpdateConnection()} to update connection. Added by Marvin Wang on Aug. 3, 2012.
 */
protected void doHiveModeModify(){
  boolean isEmbeddedMode=isEmbeddedMode();
  getConnection().setURL(getStringConnection());
  if (isEmbeddedMode) {
    urlConnectionStringText.setText(DbConnStrForHive.URL_HIVE_2_TEMPLATE);
    handleUIWhenEmbeddedModeSelected();
  }
 else {
    handleUIWhenStandaloneModeSelected();
  }
  fillDefaultsWhenHiveModeChanged(isEmbeddedMode);
  doUpdateConnection();
}",0.6914584543869843
126013,"@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  ResultSet tables=super.getTables(catalog,schemaPattern,tableNamePattern,types);
  List<String[]> list=getTableList(tables);
  if (list.isEmpty()) {
    String sql=""String_Node_Str"";
    ResultSet rs=null;
    PreparedStatement stmt=null;
    try {
      stmt=connection.prepareStatement(sql);
      if (!StringUtils.isEmpty(tableNamePattern)) {
        stmt.setString(1,tableNamePattern);
      }
      rs=stmt.executeQuery();
      list=getTableList(rs);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
 finally {
      try {
        rs.close();
        stmt.close();
      }
 catch (      Exception e) {
      }
    }
  }
  EXASOLResultSet tableResultSet=new EXASOLResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  ResultSet tables=super.getTables(null,schemaPattern,tableNamePattern,types);
  List<String[]> list=getTableList(tables);
  if (list.isEmpty()) {
    StringBuilder sql=new StringBuilder();
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    ResultSet rs=null;
    PreparedStatement stmt=null;
    try {
      stmt=connection.prepareStatement(sql.toString());
      if (!StringUtils.isEmpty(tableNamePattern)) {
        stmt.setString(1,tableNamePattern);
      }
      rs=stmt.executeQuery();
      list=getTableList(rs);
    }
  finally {
      try {
        if (rs != null) {
          rs.close();
        }
        if (stmt != null) {
          stmt.close();
        }
      }
 catch (      Exception e) {
      }
    }
  }
  EXASOLResultSet tableResultSet=new EXASOLResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.6697556866048863
126014,"private String getStringFromResultSet(ResultSet resultSet,String nameOfString){
  String valueOfString=null;
  try {
    valueOfString=resultSet.getString(nameOfString);
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return valueOfString;
}","private String getStringFromResultSet(ResultSet resultSet,String nameOfString){
  String valueOfString=null;
  try {
    valueOfString=resultSet.getString(nameOfString);
  }
 catch (  SQLException e) {
    logger.warn(e.getMessage(),e);
  }
  return valueOfString;
}",0.9689922480620154
126015,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart)) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}",0.9151611023228708
126016,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.9779559118236472
126017,"/** 
 * This method is invoked when an item of Hive mode is selected. If the selected is Embedded, it invokes  {@link #handleEmbeddedMode()},   {@link #handleStandaloneMode()} otherwise. Then it invokes the method{@link #doUpdateConnection()} to update connection. Added by Marvin Wang on Aug. 3, 2012.
 */
protected void doHiveModeModify(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  boolean isEmbeddedMode=HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
  getConnection().setURL(getStringConnection());
  if (isEmbeddedMode) {
    handleUIWhenEmbeddedModeSelected();
  }
 else {
    handleUIWhenStandaloneModeSelected();
  }
  fillDefaultsWhenHiveModeChanged(isEmbeddedMode);
  doUpdateConnection();
}","/** 
 * This method is invoked when an item of Hive mode is selected. If the selected is Embedded, it invokes  {@link #handleEmbeddedMode()},   {@link #handleStandaloneMode()} otherwise. Then it invokes the method{@link #doUpdateConnection()} to update connection. Added by Marvin Wang on Aug. 3, 2012.
 */
protected void doHiveModeModify(){
  boolean isEmbeddedMode=isEmbeddedMode();
  getConnection().setURL(getStringConnection());
  if (isEmbeddedMode) {
    urlConnectionStringText.setText(DbConnStrForHive.URL_HIVE_2_TEMPLATE);
    handleUIWhenEmbeddedModeSelected();
  }
 else {
    handleUIWhenStandaloneModeSelected();
  }
  fillDefaultsWhenHiveModeChanged(isEmbeddedMode);
  doUpdateConnection();
}",0.6914584543869843
126018,"public static MetadataTable getMetadataTableFromRepository(String metaRepositoryId){
  org.talend.core.model.metadata.builder.connection.Connection connection;
  String[] names=metaRepositoryId.split(""String_Node_Str"");
  if (names.length < 2) {
    return null;
  }
  String linkedRepository=names[0];
  String tableName=null;
  if (names.length == 2) {
    tableName=names[1];
  }
 else   if (names.length > 2) {
    tableName=metaRepositoryId.substring(linkedRepository.length() + 3);
  }
  connection=getConnectionFromRepository(linkedRepository);
  if (connection != null) {
    if (connection instanceof SAPConnection) {
      if (tableName == null) {
        return null;
      }
      if (tableName.contains(""String_Node_Str"")) {
        return getMetadataTableFromSAPFunction((SAPConnection)connection,metaRepositoryId);
      }
    }
    Set tables=ConnectionHelper.getTables(connection);
    for (    Object tableObj : tables) {
      MetadataTable table=(MetadataTable)tableObj;
      if (table.getLabel().equals(tableName)) {
        return table;
      }
    }
  }
  return null;
}","public static MetadataTable getMetadataTableFromRepository(String metaRepositoryId){
  org.talend.core.model.metadata.builder.connection.Connection connection;
  String[] names=metaRepositoryId.split(""String_Node_Str"");
  if (names.length < 2) {
    return null;
  }
  String linkedRepository=names[0];
  String tableName=null;
  if (names.length == 2) {
    tableName=names[1];
  }
 else   if (names.length > 2) {
    tableName=metaRepositoryId.substring(linkedRepository.length() + 3);
  }
  connection=getConnectionFromRepository(linkedRepository);
  if (connection != null) {
    if (connection instanceof SAPConnection) {
      if (tableName == null) {
        return null;
      }
      if (tableName.contains(""String_Node_Str"")) {
        return getMetadataTableFromSAPFunction((SAPConnection)connection,metaRepositoryId);
      }
    }
    Set tables=ConnectionHelper.getTables(connection);
    IGenericWizardService wizardService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericWizardService.class)) {
      wizardService=(IGenericWizardService)GlobalServiceRegister.getDefault().getService(IGenericWizardService.class);
    }
    if (wizardService != null) {
      List<MetadataTable> metadataTables=wizardService.getMetadataTables(connection);
      tables=new HashSet<>(metadataTables);
    }
    for (    Object tableObj : tables) {
      MetadataTable table=(MetadataTable)tableObj;
      if (table.getLabel().equals(tableName)) {
        return table;
      }
    }
  }
  return null;
}",0.8342857142857143
126019,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart)) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}",0.9151611023228708
126020,"private URI getReferenceFileURI(URI itemResourceURI,ReferenceFileItem refFile){
  if (refFile.getName() != null) {
    ByteArray contentByteArray=refFile.getContent();
    URI referenceFileURI=null;
    if (contentByteArray != null) {
      Resource eResource=contentByteArray.eResource();
      if (eResource != null) {
        referenceFileURI=eResource.getURI();
      }
    }
    if (referenceFileURI != null) {
      String fileName=referenceFileURI.segment(referenceFileURI.segmentCount() - 1);
      if (fileName != null && fileName.startsWith(refFile.getName())) {
        return itemResourceURI.trimSegments(1).appendSegment(fileName);
      }
 else {
        CommonExceptionHandler.process(new Exception(""String_Node_Str"" + refFile.getName() + ""String_Node_Str""+ fileName+ ""String_Node_Str""),Priority.INFO);
      }
    }
    return itemResourceURI.trimSegments(1).appendSegment(refFile.getName() + ""String_Node_Str"" + refFile.getExtension());
  }
 else {
    return itemResourceURI.trimFileExtension().appendFileExtension(refFile.getExtension());
  }
}","private URI getReferenceFileURI(URI itemResourceURI,ReferenceFileItem refFile){
  if (refFile.getName() != null) {
    return itemResourceURI.trimSegments(1).appendSegment(refFile.getName() + ""String_Node_Str"" + refFile.getExtension());
  }
 else {
    return itemResourceURI.trimFileExtension().appendFileExtension(refFile.getExtension());
  }
}",0.298083747338538
126021,"private void createOutputSettingArea(){
  Group group=Form.createGroup(this,1,""String_Node_Str"",80);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=150;
  group.setLayoutData(data);
  Composite compositeButton=Form.startNewDimensionnedGridLayout(group,1,WIDTH_GRIDDATA_PIXEL,20);
  noFileButton=new Button(compositeButton,SWT.RADIO);
  noFileButton.setText(""String_Node_Str"");
  useFileButton=new Button(compositeButton,SWT.RADIO);
  useFileButton.setText(""String_Node_Str"");
  Composite compositeOutput=Form.startNewDimensionnedGridLayout(group,3,WIDTH_GRIDDATA_PIXEL,20);
  String[] extensions=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  xmlXsdFilePath=new LabelledFileField(compositeOutput,""String_Node_Str"",extensions);
  xmlXsdFilePath.setText(""String_Node_Str"");
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeOutput,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,1,true,SWT.NONE);
  encodingCombo.setText(""String_Node_Str"");
  Composite limitation=new Composite(compositeOutput,SWT.NONE);
  limitation.setLayout(new GridLayout(2,false));
  labelLimitation=new Label(limitation,SWT.LEFT);
  labelLimitation.setText(""String_Node_Str"");
  commonNodesLimitation=new Text(limitation,SWT.BORDER);
  GridData gd=new GridData(18,12);
  commonNodesLimitation.setLayoutData(gd);
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
}","private void createOutputSettingArea(){
  Group group=Form.createGroup(this,1,""String_Node_Str"",80);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=150;
  group.setLayoutData(data);
  Composite compositeButton=Form.startNewDimensionnedGridLayout(group,1,WIDTH_GRIDDATA_PIXEL,20);
  noFileButton=new Button(compositeButton,SWT.RADIO);
  noFileButton.setText(""String_Node_Str"");
  useFileButton=new Button(compositeButton,SWT.RADIO);
  useFileButton.setText(""String_Node_Str"");
  Composite compositeOutput=Form.startNewDimensionnedGridLayout(group,3,WIDTH_GRIDDATA_PIXEL,20);
  String[] extensions=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  xmlXsdFilePath=new LabelledFileField(compositeOutput,""String_Node_Str"",extensions);
  xmlXsdFilePath.setText(""String_Node_Str"");
  if (creation) {
    useFileButton.setSelection(!isInputModel);
    noFileButton.setSelection(isInputModel);
  }
 else {
    noFileButton.setSelection(!isInputModel);
    useFileButton.setSelection(isInputModel);
  }
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeOutput,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,1,true,SWT.NONE);
  encodingCombo.setText(""String_Node_Str"");
  Composite limitation=new Composite(compositeOutput,SWT.NONE);
  limitation.setLayout(new GridLayout(2,false));
  labelLimitation=new Label(limitation,SWT.LEFT);
  labelLimitation.setText(""String_Node_Str"");
  commonNodesLimitation=new Text(limitation,SWT.BORDER);
  GridData gd=new GridData(18,12);
  commonNodesLimitation.setLayoutData(gd);
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
}",0.9376430205949656
126022,"@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  ResultSet tables=super.getTables(catalog,schemaPattern,tableNamePattern,types);
  List<String[]> list=getTableList(tables);
  if (list.isEmpty()) {
    String sql=""String_Node_Str"";
    ResultSet rs=null;
    PreparedStatement stmt=null;
    try {
      stmt=connection.prepareStatement(sql);
      if (!StringUtils.isEmpty(tableNamePattern)) {
        stmt.setString(1,tableNamePattern);
      }
      rs=stmt.executeQuery();
      list=getTableList(rs);
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
 finally {
      try {
        rs.close();
        stmt.close();
      }
 catch (      Exception e) {
      }
    }
  }
  EXASOLResultSet tableResultSet=new EXASOLResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  ResultSet tables=super.getTables(null,schemaPattern,tableNamePattern,types);
  List<String[]> list=getTableList(tables);
  if (list.isEmpty()) {
    StringBuilder sql=new StringBuilder();
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    ResultSet rs=null;
    PreparedStatement stmt=null;
    try {
      stmt=connection.prepareStatement(sql.toString());
      if (!StringUtils.isEmpty(tableNamePattern)) {
        stmt.setString(1,tableNamePattern);
      }
      rs=stmt.executeQuery();
      list=getTableList(rs);
    }
  finally {
      try {
        if (rs != null) {
          rs.close();
        }
        if (stmt != null) {
          stmt.close();
        }
      }
 catch (      Exception e) {
      }
    }
  }
  EXASOLResultSet tableResultSet=new EXASOLResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.6697556866048863
126023,"private String getStringFromResultSet(ResultSet resultSet,String nameOfString){
  String valueOfString=null;
  try {
    valueOfString=resultSet.getString(nameOfString);
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return valueOfString;
}","private String getStringFromResultSet(ResultSet resultSet,String nameOfString){
  String valueOfString=null;
  try {
    valueOfString=resultSet.getString(nameOfString);
  }
 catch (  SQLException e) {
    logger.warn(e.getMessage(),e);
  }
  return valueOfString;
}",0.9689922480620154
126024,"public static boolean isSchemaFromSidOrDatabase(EDatabaseTypeName inType){
  if (EDatabaseTypeName.TERADATA.equals(inType) || EDatabaseTypeName.IMPALA.equals(inType) || EDatabaseTypeName.AS400.equals(inType)|| EDatabaseTypeName.EXASOL.equals(inType)) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean isSchemaFromSidOrDatabase(EDatabaseTypeName inType){
  if (EDatabaseTypeName.TERADATA.equals(inType) || EDatabaseTypeName.IMPALA.equals(inType) || EDatabaseTypeName.AS400.equals(inType)|| EDatabaseTypeName.EXASOL.equals(inType)|| EDatabaseTypeName.HIVE.equals(inType)) {
    return true;
  }
 else {
    return false;
  }
}",0.9384615384615383
126025,"private void setPomForHDLight(IProgressMonitor monitor){
  IProcessor processor=getJobProcessor();
  IElementParameter param=processor.getProcess().getElementParameter(""String_Node_Str"");
  if (param != null) {
    String distribution=(String)param.getValue();
    if (""String_Node_Str"".equals(distribution)) {
      try {
        Model model=MODEL_MANAGER.readMavenModel(getPomFile());
        List<Plugin> plugins=new ArrayList<Plugin>(model.getBuild().getPlugins());
        out:         for (        Plugin plugin : plugins) {
          if (plugin.getArtifactId().equals(""String_Node_Str"")) {
            List<PluginExecution> pluginExecutions=plugin.getExecutions();
            for (            PluginExecution pluginExecution : pluginExecutions) {
              if (pluginExecution.getId().equals(""String_Node_Str"")) {
                Object object=pluginExecution.getConfiguration();
                if (object instanceof Xpp3Dom) {
                  Xpp3Dom configNode=(Xpp3Dom)object;
                  Xpp3Dom includesNode=configNode.getChild(""String_Node_Str"");
                  Xpp3Dom includeNode=new Xpp3Dom(""String_Node_Str"");
                  includeNode.setValue(""String_Node_Str"");
                  includesNode.addChild(includeNode);
                  model.getBuild().setPlugins(plugins);
                  PomUtil.savePom(monitor,model,getPomFile());
                  break out;
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","private void setPomForHDLight(IProgressMonitor monitor){
  if (ProcessUtils.isHDInsight()) {
    try {
      Model model=MODEL_MANAGER.readMavenModel(getPomFile());
      List<Plugin> plugins=new ArrayList<Plugin>(model.getBuild().getPlugins());
      out:       for (      Plugin plugin : plugins) {
        if (plugin.getArtifactId().equals(""String_Node_Str"")) {
          List<PluginExecution> pluginExecutions=plugin.getExecutions();
          for (          PluginExecution pluginExecution : pluginExecutions) {
            if (pluginExecution.getId().equals(""String_Node_Str"")) {
              Object object=pluginExecution.getConfiguration();
              if (object instanceof Xpp3Dom) {
                Xpp3Dom configNode=(Xpp3Dom)object;
                Xpp3Dom includesNode=configNode.getChild(""String_Node_Str"");
                Xpp3Dom includeNode=new Xpp3Dom(""String_Node_Str"");
                includeNode.setValue(""String_Node_Str"");
                includesNode.addChild(includeNode);
                model.getBuild().setPlugins(plugins);
                PomUtil.savePom(monitor,model,getPomFile());
                break out;
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.8779803646563815
126026,"public static List<MetadataTable> getMetadataTablesFromItem(Item item){
  if (item == null) {
    return null;
  }
  if (item instanceof ConnectionItem) {
    final Connection connection=((ConnectionItem)item).getConnection();
    if (connection != null) {
      if (connection instanceof SAPConnection) {
        final SAPConnection sapConnection=(SAPConnection)connection;
        final EList functions=sapConnection.getFuntions();
        if (functions != null && !functions.isEmpty()) {
          final EList tables=new BasicEList();
          for (int i=0; i < functions.size(); i++) {
            tables.add(((SAPFunctionUnit)functions.get(i)).getMetadataTable());
          }
          return tables;
        }
      }
      final Set<MetadataTable> tableset=ConnectionHelper.getTables(connection);
      if (tableset != null) {
        EList<MetadataTable> tables=new BasicEList<MetadataTable>();
        tables.addAll(tableset);
        return tables;
      }
    }
  }
  return null;
}","public static List<MetadataTable> getMetadataTablesFromItem(Item item){
  if (item == null) {
    return null;
  }
  if (item instanceof ConnectionItem) {
    final Connection connection=((ConnectionItem)item).getConnection();
    if (connection != null) {
      if (connection instanceof SAPConnection) {
        final SAPConnection sapConnection=(SAPConnection)connection;
        final EList functions=sapConnection.getFuntions();
        if (functions != null && !functions.isEmpty()) {
          final EList tables=new BasicEList();
          for (int i=0; i < functions.size(); i++) {
            tables.add(((SAPFunctionUnit)functions.get(i)).getMetadataTable());
          }
          return tables;
        }
      }
      IGenericWizardService wizardService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericWizardService.class)) {
        wizardService=(IGenericWizardService)GlobalServiceRegister.getDefault().getService(IGenericWizardService.class);
      }
      if (wizardService != null) {
        Property property=((ConnectionItem)item).getProperty();
        if (property != null && property.getId() != null) {
          try {
            IRepositoryViewObject repObject=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getLastVersion(ProjectManager.getInstance().getCurrentProject(),property.getId());
            if (repObject != null && wizardService.isGenericType(repObject.getRepositoryObjectType())) {
              List<MetadataTable> metadataTables=wizardService.getMetadataTables(connection);
              EList<MetadataTable> tables=new BasicEList<MetadataTable>();
              if (metadataTables != null) {
                tables.addAll(metadataTables);
                return tables;
              }
            }
          }
 catch (          PersistenceException e) {
            e.printStackTrace();
          }
        }
      }
      final Set<MetadataTable> tableset=ConnectionHelper.getTables(connection);
      if (tableset != null) {
        EList<MetadataTable> tables=new BasicEList<MetadataTable>();
        tables.addAll(tableset);
        return tables;
      }
    }
  }
  return null;
}",0.5474613686534217
126027,"@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(OracleExtractManager.DATABASE_PRODUCT_NAME)) {
    ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
 else     if (table.eContainer() instanceof Schema) {
      Schema schema=(Schema)table.eContainer();
      synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
    }
    Statement sta=extractMeta.getConn().createStatement();
    extractMeta.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        long numPrecRadix=0;
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String label2=label;
        if (coreService != null && coreService.isKeyword(label)) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        try {
          int column_size=columns.getInt(""String_Node_Str"");
          column.setLength(column_size);
          numPrecRadix=columns.getLong(""String_Node_Str"");
          column.setPrecision(numPrecRadix);
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""),extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}","@Override protected void fillSynonyms(IMetadataConnection metadataConnection,List<TdColumn> metadataColumns,NamedColumnSet table,String tableName,DatabaseMetaData dbMetaData) throws SQLException {
  if (metadataConnection == null || dbMetaData == null) {
    return;
  }
  if (dbMetaData.getDatabaseProductName().equals(OracleExtractManager.DATABASE_PRODUCT_NAME)) {
    ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
    String synSQL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str"";
    if (!(""String_Node_Str"").equals(metadataConnection.getSchema())) {
      synSQL+=""String_Node_Str"" + metadataConnection.getSchema() + ""String_Node_Str"";
    }
 else     if (table.eContainer() instanceof Schema) {
      Schema schema=(Schema)table.eContainer();
      synSQL+=""String_Node_Str"" + schema.getName() + ""String_Node_Str"";
    }
    Statement sta=extractMeta.getConn().createStatement();
    extractMeta.setQueryStatementTimeout(sta);
    ResultSet columns=sta.executeQuery(synSQL);
    String typeName=null;
    int index=0;
    List<String> columnLabels=new ArrayList<String>();
    try {
      while (columns.next()) {
        String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        String label=column.getLabel();
        label=ManagementTextUtils.filterSpecialChar(label);
        String label2=label;
        if (coreService != null && coreService.isKeyword(label)) {
          label=""String_Node_Str"" + label;
        }
        label=MetadataToolHelper.validateColumnName(label,index,columnLabels);
        column.setLabel(label);
        column.setOriginalField(label2);
        typeName=columns.getString(GetColumn.DATA_TYPE.name());
        setLengthAndPrecision(column,columns,typeName);
        DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(table);
        String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
        if (dbmsId != null) {
          MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,(int)column.getLength(),(int)column.getPrecision());
          column.setTalendType(talendType);
          String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        try {
          column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
        }
 catch (        Exception e) {
          log.error(e);
        }
        metadataColumns.add(column);
        columnLabels.add(column.getLabel());
        index++;
      }
    }
  finally {
      columns.close();
    }
  }
}",0.7977117432067377
126028,"@Override public int hashCode(){
  int hashCode=31;
  if (this.getModuleName() != null) {
    hashCode*=this.getModuleName().hashCode();
  }
  if (this.getBundleName() != null) {
    hashCode*=this.getBundleName().hashCode();
  }
  if (this.getBundleVersion() != null) {
    hashCode*=this.getBundleVersion().hashCode();
  }
  hashCode*=new Boolean(this.isRequired()).hashCode();
  return hashCode;
}","@Override public int hashCode(){
  int hashCode=31;
  if (this.getModuleName() != null) {
    hashCode*=this.getModuleName().hashCode();
  }
  if (this.getBundleName() != null) {
    hashCode*=this.getBundleName().hashCode();
  }
  if (this.getBundleVersion() != null) {
    hashCode*=this.getBundleVersion().hashCode();
  }
  hashCode*=new Boolean(this.isRequired()).hashCode();
  hashCode*=new Boolean(this.isMrRequired()).hashCode();
  return hashCode;
}",0.9334889148191364
126029,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof ModuleNeeded)) {
    return false;
  }
  ModuleNeeded other=(ModuleNeeded)obj;
  if (other.getModuleName() == null) {
    if (this.getModuleName() != null) {
      return false;
    }
  }
 else {
    if (this.getModuleName() == null) {
      return false;
    }
 else     if (!other.getModuleName().equals(this.getModuleName())) {
      return false;
    }
  }
  if (other.getBundleName() == null) {
    if (this.getBundleName() != null) {
      return false;
    }
  }
 else {
    if (this.getBundleName() == null) {
      return false;
    }
 else     if (!other.getBundleName().equals(this.getBundleName())) {
      return false;
    }
  }
  if (other.getBundleVersion() == null) {
    if (this.getBundleVersion() != null) {
      return false;
    }
  }
 else {
    if (this.getBundleVersion() == null) {
      return false;
    }
 else     if (!other.getBundleVersion().equals(this.getBundleVersion())) {
      return false;
    }
  }
  if (other.getModuleLocaion() == null) {
    if (this.getModuleLocaion() != null) {
      return false;
    }
  }
 else {
    if (this.getModuleLocaion() == null) {
      return false;
    }
 else     if (!other.getModuleLocaion().equals(this.getModuleLocaion())) {
      return false;
    }
  }
  if (other.isRequired() != this.isRequired()) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof ModuleNeeded)) {
    return false;
  }
  ModuleNeeded other=(ModuleNeeded)obj;
  if (other.getModuleName() == null) {
    if (this.getModuleName() != null) {
      return false;
    }
  }
 else {
    if (this.getModuleName() == null) {
      return false;
    }
 else     if (!other.getModuleName().equals(this.getModuleName())) {
      return false;
    }
  }
  if (other.getBundleName() == null) {
    if (this.getBundleName() != null) {
      return false;
    }
  }
 else {
    if (this.getBundleName() == null) {
      return false;
    }
 else     if (!other.getBundleName().equals(this.getBundleName())) {
      return false;
    }
  }
  if (other.getBundleVersion() == null) {
    if (this.getBundleVersion() != null) {
      return false;
    }
  }
 else {
    if (this.getBundleVersion() == null) {
      return false;
    }
 else     if (!other.getBundleVersion().equals(this.getBundleVersion())) {
      return false;
    }
  }
  if (other.getModuleLocaion() == null) {
    if (this.getModuleLocaion() != null) {
      return false;
    }
  }
 else {
    if (this.getModuleLocaion() == null) {
      return false;
    }
 else     if (!other.getModuleLocaion().equals(this.getModuleLocaion())) {
      return false;
    }
  }
  if (other.isRequired() != this.isRequired()) {
    return false;
  }
  if (other.isMrRequired() != this.isMrRequired()) {
    return false;
  }
  return true;
}",0.965025466893039
126030,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=extractMeta.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (extractMeta.isUseAllSynonyms()) {
          typeName=""String_Node_Str"";
        }
        String dbType=extractMeta.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize;
        columnSize=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setLength(columnSize);
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        Integer intMetaDataInfo=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
        boolean isNullable=extractMeta.getBooleanMetaDataInfo(columns,""String_Node_Str"");
        metadataColumn.setNullable(isNullable);
        String commentInfo=extractMeta.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
        if (commentInfo != null && commentInfo.length() > 0) {
          commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
        }
        metadataColumn.setComment(commentInfo);
        addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
        checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        extractMeta.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    Status status=new Status(IStatus.ERROR,""String_Node_Str"",0,""String_Node_Str"",e);
    ErrorDialog errorDialog=new ErrorDialog(null,""String_Node_Str"",null,status,IStatus.ERROR);
    errorDialog.open();
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    EDatabaseTypeName eDatabaseType=EDatabaseTypeName.getTypeFromDisplayName(databaseType);
    boolean isOracleProduct=false;
    if (eDatabaseType != null) {
      isOracleProduct=""String_Node_Str"".equalsIgnoreCase(eDatabaseType.getProduct());
    }
    boolean isUseAllSynonyms=extractMeta.isUseAllSynonyms();
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=extractMeta.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (isUseAllSynonyms) {
          typeName=""String_Node_Str"";
        }
        String dbType=extractMeta.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        dbType=dbType.trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize=new Integer(0);
        Integer intMetaDataInfo=new Integer(0);
        if (isOracleProduct && isUseAllSynonyms) {
          setLengthAndPrecision(metadataColumn,columns,dbType);
          columnSize=(int)metadataColumn.getLength();
          intMetaDataInfo=(int)metadataColumn.getPrecision();
        }
 else {
          columnSize=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
          metadataColumn.setLength(columnSize);
          intMetaDataInfo=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
        }
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=""String_Node_Str"";
        String commentInfo=""String_Node_Str"";
        if (isOracleProduct && isUseAllSynonyms) {
          metadataColumn.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
          String defaultSelectedDbType=mappingTypeRetriever.getDefaultSelectedDbType(talendType);
          metadataColumn.setSourceType(defaultSelectedDbType);
        }
 else {
          metadataColumn.setNullable(extractMeta.getBooleanMetaDataInfo(columns,""String_Node_Str""));
          stringMetaDataInfo=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
          commentInfo=extractMeta.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
          if (commentInfo != null && commentInfo.length() > 0) {
            commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
          }
        }
        metadataColumn.setComment(commentInfo);
        if (isOracleProduct && isUseAllSynonyms) {
          metadataColumn.setName(label2);
        }
 else {
          addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
          checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        }
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        extractMeta.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    Status status=new Status(IStatus.ERROR,""String_Node_Str"",0,""String_Node_Str"",e);
    ErrorDialog errorDialog=new ErrorDialog(null,""String_Node_Str"",null,status,IStatus.ERROR);
    errorDialog.open();
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.8650324867099822
126031,"public boolean hasTalendProjectFile(IProject project){
  URI uri=getProjectResourceUri(project);
  try {
    project.refreshLocal(IResource.DEPTH_ONE,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
  IPath path=URIHelper.convert(uri);
  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
  return file.exists();
}","public boolean hasTalendProjectFile(IProject project){
  URI uri=getProjectResourceUri(project);
  try {
    if (!project.isSynchronized(IResource.DEPTH_ONE)) {
      project.refreshLocal(IResource.DEPTH_ONE,new NullProgressMonitor());
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
  IPath path=URIHelper.convert(uri);
  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
  return file.exists();
}",0.8759124087591241
126032,"public static List<ContextReferenceBean> checkContextFromProcess(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,RepositoryNode currentJobNode){
  IRepositoryViewObject object=currentJobNode.getObject();
  Item nodeItem=null;
  if (object != null && object.getProperty() != null) {
    nodeItem=object.getProperty().getItem();
  }
  boolean contextIsUsed=false;
  if (nodeItem != null && nodeItem instanceof ContextItem) {
    contextIsUsed=true;
  }
  List<ContextReferenceBean> list=new ArrayList<ContextReferenceBean>();
  if (deleteActionCache == null) {
    deleteActionCache=DeleteActionCache.getInstance();
    deleteActionCache.createRecords();
  }
  if (object != null && contextIsUsed) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      Item item=property.getItem();
      if (!(item instanceof ContextItem)) {
        return list;
      }
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> objList=new ArrayList<IRepositoryViewObject>();
          List<IRepositoryViewObject> allJobVersions=new ArrayList<IRepositoryViewObject>();
          ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
          if (jobType != null) {
            List<IRepositoryViewObject> processes=factory.getAll(refP,jobType);
            if (processes != null && processes.size() > 0) {
              for (              IRepositoryViewObject process : processes) {
                allJobVersions.addAll(factory.getAllVersion(process.getId()));
              }
            }
          }
          ERepositoryObjectType jobletType=ERepositoryObjectType.JOBLET;
          if (jobletType != null) {
            List<IRepositoryViewObject> jobletes=factory.getAll(refP,jobletType);
            allJobVersions.addAll(jobletes);
          }
          deleteActionCache.setProcessList(allJobVersions);
          objList.addAll(allJobVersions);
          List<IRepositoryViewObject> connectionc=factory.getAll(refP,ERepositoryObjectType.METADATA_CONNECTIONS);
          objList.addAll(connectionc);
          List<IRepositoryViewObject> edifact=factory.getAll(refP,ERepositoryObjectType.METADATA_EDIFACT);
          objList.addAll(edifact);
          List<IRepositoryViewObject> brms=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_BRMS);
          objList.addAll(brms);
          List<IRepositoryViewObject> delis=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_DELIMITED);
          objList.addAll(delis);
          List<IRepositoryViewObject> ebcdic=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_EBCDIC);
          objList.addAll(ebcdic);
          List<IRepositoryViewObject> excel=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_EXCEL);
          objList.addAll(excel);
          List<IRepositoryViewObject> ftp=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_FTP);
          objList.addAll(ftp);
          List<IRepositoryViewObject> hl7=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_HL7);
          objList.addAll(hl7);
          List<IRepositoryViewObject> ldif=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_LDIF);
          objList.addAll(ldif);
          List<IRepositoryViewObject> positional=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_POSITIONAL);
          objList.addAll(positional);
          List<IRepositoryViewObject> regexp=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_REGEXP);
          objList.addAll(regexp);
          List<IRepositoryViewObject> xmls=factory.getAll(refP,ERepositoryObjectType.METADATA_FILE_XML);
          objList.addAll(xmls);
          List<IRepositoryViewObject> mdms=factory.getAll(refP,ERepositoryObjectType.METADATA_MDMCONNECTION);
          objList.addAll(mdms);
          List<IRepositoryViewObject> wsdl=factory.getAll(refP,ERepositoryObjectType.METADATA_WSDL_SCHEMA);
          objList.addAll(wsdl);
          List<IRepositoryViewObject> saleForces=factory.getAll(refP,ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
          objList.addAll(saleForces);
          for (          IRepositoryViewObject process : objList) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            boolean isJob=true;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            List<IContextParameter> openedContextParameterList=null;
            List<ContextParameterType> closedContextParameterList=null;
            String contextID=null;
            List<IProcess2> openedProcesses=RepositoryManagerHelper.getOpenedProcess();
            boolean isOpenedProcess=false;
            if (openedProcesses != null && openedProcesses.size() > 0) {
              for (              IProcess2 tempPro : openedProcesses) {
                if (process.getId().equals(tempPro.getId())) {
                  isOpenedProcess=true;
                  List<IContext> contextList=tempPro.getContextManager().getListContext();
                  if (contextList != null && !contextList.isEmpty()) {
                    openedContextParameterList=contextList.get(0).getContextParameterList();
                  }
                  break;
                }
              }
            }
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (!isOpenedProcess) {
              if (item2 instanceof ConnectionItem) {
                contextID=((ConnectionItem)item2).getConnection().getContextId();
              }
 else {
                List<?> contextList=null;
                if (item2 instanceof ProcessItem) {
                  contextList=((ProcessItem)item2).getProcess().getContext();
                }
 else                 if (item2 instanceof JobletProcessItem) {
                  contextList=((JobletProcessItem)item2).getJobletProcess().getContext();
                }
                if (contextList != null && !contextList.isEmpty()) {
                  Object obj=contextList.get(0);
                  if (obj instanceof ContextType) {
                    closedContextParameterList=((ContextType)obj).getContextParameter();
                  }
                }
              }
            }
            List<?> contextParameterList=null;
            if (openedContextParameterList != null) {
              contextParameterList=openedContextParameterList;
            }
 else             if (closedContextParameterList != null) {
              contextParameterList=closedContextParameterList;
            }
            if (contextParameterList != null && contextParameterList.size() > 0) {
              for (int i=0; i < contextParameterList.size(); i++) {
                String sourceId=null;
                Object objContextParameter=contextParameterList.get(i);
                if (objContextParameter instanceof IContextParameter) {
                  IContextParameter contextParameter=(IContextParameter)objContextParameter;
                  sourceId=contextParameter.getSource();
                }
 else                 if (objContextParameter instanceof ContextParameterType) {
                  ContextParameterType contextParameter=(ContextParameterType)objContextParameter;
                  sourceId=contextParameter.getRepositoryContextId();
                }
                String contextId=item.getProperty().getId();
                if (contextId != null && contextId.equals(sourceId)) {
                  String processName=process.getLabel();
                  String processVersion=process.getVersion();
                  if (!RepositoryReferenceBeanUtils.hasReferenceBean(list,processName,processVersion)) {
                    String path=item2.getState().getPath();
                    String type=process.getRepositoryObjectType().getType();
                    ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                    bean.setJobFlag(isJob,isDelete);
                    list.add(bean);
                  }
                }
              }
            }
 else             if (contextID != null) {
              if (contextID.equals(item.getProperty().getId())) {
                String path=item2.getState().getPath();
                String type=process.getRepositoryObjectType().getType();
                ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                bean.setJobFlag(isJob,isDelete);
                list.add(bean);
                break;
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            List<IContext> contextList=openedProcess.getContextManager().getListContext();
            for (            IContext context : contextList) {
              if (context.getContextParameterList().size() <= 0) {
                continue;
              }
              String source=context.getContextParameterList().get(0).getSource();
              if (source.equals(item.getProperty().getId())) {
                boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
                boolean isJob=true;
                Property property2=openedProcess.getProperty();
                Item item2=property2.getItem();
                String path=item2.getState().getPath();
                String processName=openedProcess.getLabel();
                String processVersion=openedProcess.getVersion();
                if (!RepositoryReferenceBeanUtils.hasReferenceBean(list,processName,processVersion)) {
                  ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),openedProcess.getRepositoryObjectType().getType(),property2.getVersion(),path,refP.getLabel());
                  bean.setJobFlag(isJob,isDelete);
                  list.add(bean);
                  break;
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return list;
}","public static List<ContextReferenceBean> checkContextFromProcess(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,RepositoryNode currentJobNode){
  IRepositoryViewObject object=currentJobNode.getObject();
  Item nodeItem=null;
  if (object != null && object.getProperty() != null) {
    nodeItem=object.getProperty().getItem();
  }
  boolean contextIsUsed=false;
  if (nodeItem != null && nodeItem instanceof ContextItem) {
    contextIsUsed=true;
  }
  List<ContextReferenceBean> list=new ArrayList<ContextReferenceBean>();
  if (deleteActionCache == null) {
    deleteActionCache=DeleteActionCache.getInstance();
    deleteActionCache.createRecords();
  }
  if (object != null && contextIsUsed) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      Item item=property.getItem();
      if (!(item instanceof ContextItem)) {
        return list;
      }
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> objList=new ArrayList<IRepositoryViewObject>();
          List<IRepositoryViewObject> allJobVersions=new ArrayList<IRepositoryViewObject>();
          ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
          if (jobType != null) {
            List<IRepositoryViewObject> processes=factory.getAll(refP,jobType);
            if (processes != null && processes.size() > 0) {
              for (              IRepositoryViewObject process : processes) {
                allJobVersions.addAll(factory.getAllVersion(process.getId()));
              }
            }
          }
          ERepositoryObjectType jobletType=ERepositoryObjectType.JOBLET;
          if (jobletType != null) {
            List<IRepositoryViewObject> jobletes=factory.getAll(refP,jobletType);
            allJobVersions.addAll(jobletes);
          }
          deleteActionCache.setProcessList(allJobVersions);
          objList.addAll(allJobVersions);
          List<IRepositoryViewObject> metaDatas=factory.getAll(refP,ERepositoryObjectType.METADATA);
          objList.addAll(metaDatas);
          for (          IRepositoryViewObject process : objList) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            boolean isJob=true;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            List<IContextParameter> openedContextParameterList=null;
            List<ContextParameterType> closedContextParameterList=null;
            String contextID=null;
            List<IProcess2> openedProcesses=RepositoryManagerHelper.getOpenedProcess();
            boolean isOpenedProcess=false;
            if (openedProcesses != null && openedProcesses.size() > 0) {
              for (              IProcess2 tempPro : openedProcesses) {
                if (process.getId().equals(tempPro.getId())) {
                  isOpenedProcess=true;
                  List<IContext> contextList=tempPro.getContextManager().getListContext();
                  if (contextList != null && !contextList.isEmpty()) {
                    openedContextParameterList=contextList.get(0).getContextParameterList();
                  }
                  break;
                }
              }
            }
            IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            if (!isOpenedProcess) {
              if (item2 instanceof ConnectionItem) {
                contextID=((ConnectionItem)item2).getConnection().getContextId();
              }
 else {
                List<?> contextList=null;
                if (item2 instanceof ProcessItem) {
                  contextList=((ProcessItem)item2).getProcess().getContext();
                }
 else                 if (item2 instanceof JobletProcessItem) {
                  contextList=((JobletProcessItem)item2).getJobletProcess().getContext();
                }
                if (contextList != null && !contextList.isEmpty()) {
                  Object obj=contextList.get(0);
                  if (obj instanceof ContextType) {
                    closedContextParameterList=((ContextType)obj).getContextParameter();
                  }
                }
              }
            }
            List<?> contextParameterList=null;
            if (openedContextParameterList != null) {
              contextParameterList=openedContextParameterList;
            }
 else             if (closedContextParameterList != null) {
              contextParameterList=closedContextParameterList;
            }
            if (contextParameterList != null && contextParameterList.size() > 0) {
              for (int i=0; i < contextParameterList.size(); i++) {
                String sourceId=null;
                Object objContextParameter=contextParameterList.get(i);
                if (objContextParameter instanceof IContextParameter) {
                  IContextParameter contextParameter=(IContextParameter)objContextParameter;
                  sourceId=contextParameter.getSource();
                }
 else                 if (objContextParameter instanceof ContextParameterType) {
                  ContextParameterType contextParameter=(ContextParameterType)objContextParameter;
                  sourceId=contextParameter.getRepositoryContextId();
                }
                String contextId=item.getProperty().getId();
                if (contextId != null && contextId.equals(sourceId)) {
                  String processName=process.getLabel();
                  String processVersion=process.getVersion();
                  if (!RepositoryReferenceBeanUtils.hasReferenceBean(list,processName,processVersion)) {
                    String path=item2.getState().getPath();
                    String type=process.getRepositoryObjectType().getType();
                    ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                    bean.setJobFlag(isJob,isDelete);
                    list.add(bean);
                  }
                }
              }
            }
 else             if (contextID != null) {
              if (contextID.equals(item.getProperty().getId())) {
                String path=item2.getState().getPath();
                String type=process.getRepositoryObjectType().getType();
                ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),type,property2.getVersion(),path,refP.getLabel());
                bean.setJobFlag(isJob,isDelete);
                list.add(bean);
                break;
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            List<IContext> contextList=openedProcess.getContextManager().getListContext();
            for (            IContext context : contextList) {
              if (context.getContextParameterList().size() <= 0) {
                continue;
              }
              String source=context.getContextParameterList().get(0).getSource();
              if (source.equals(item.getProperty().getId())) {
                boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
                boolean isJob=true;
                Property property2=openedProcess.getProperty();
                Item item2=property2.getItem();
                String path=item2.getState().getPath();
                String processName=openedProcess.getLabel();
                String processVersion=openedProcess.getVersion();
                if (!RepositoryReferenceBeanUtils.hasReferenceBean(list,processName,processVersion)) {
                  ContextReferenceBean bean=new ContextReferenceBean(property2.getLabel(),openedProcess.getRepositoryObjectType().getType(),property2.getVersion(),path,refP.getLabel());
                  bean.setJobFlag(isJob,isDelete);
                  list.add(bean);
                  break;
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return list;
}",0.8935549419059032
126033,"/** 
 * Clear compliance settings from project, and set them into Eclipse compliance settings
 * @param javaProject
 */
private static void clearProjectIndenpendComplianceSettings(IJavaProject javaProject){
  Map<String,String> projectComplianceOptions=javaProject.getOptions(false);
  if (projectComplianceOptions == null || projectComplianceOptions.isEmpty()) {
    return;
  }
  Set<String> keySet=projectComplianceOptions.keySet();
  for (  String key : keySet) {
    javaProject.setOption(key,null);
  }
  IEclipsePreferences runProcessPreferences=InstanceScope.INSTANCE.getNode(DesignerMavenPlugin.PLUGIN_ID);
  boolean isAlreadySetEclipsePreferences=runProcessPreferences.getBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,false);
  IEclipsePreferences eclipsePreferences=InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
  if (!isAlreadySetEclipsePreferences) {
    runProcessPreferences.putBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,true);
    String compilerCompliance=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,false);
    if (compilerCompliance != null) {
      Map<String,String> complianceOptions=new HashMap<String,String>();
      JavaCore.setComplianceOptions(compilerCompliance,complianceOptions);
      if (!complianceOptions.isEmpty()) {
        Set<Entry<String,String>> entrySet=complianceOptions.entrySet();
        for (        Entry<String,String> entry : entrySet) {
          eclipsePreferences.put(entry.getKey(),entry.getValue());
        }
      }
      try {
        eclipsePreferences.flush();
        runProcessPreferences.flush();
      }
 catch (      BackingStoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * Clear compliance settings from project, and set them into Eclipse compliance settings
 * @param javaProject
 */
private static void clearProjectIndenpendComplianceSettings(IJavaProject javaProject){
  Map<String,String> projectComplianceOptions=javaProject.getOptions(false);
  if (projectComplianceOptions == null || projectComplianceOptions.isEmpty()) {
    return;
  }
  String compilerCompliance=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,false);
  Set<String> keySet=projectComplianceOptions.keySet();
  for (  String key : keySet) {
    javaProject.setOption(key,null);
  }
  IEclipsePreferences runProcessPreferences=InstanceScope.INSTANCE.getNode(DesignerMavenPlugin.PLUGIN_ID);
  boolean isAlreadySetEclipsePreferences=runProcessPreferences.getBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,false);
  IEclipsePreferences eclipsePreferences=InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
  if (!isAlreadySetEclipsePreferences) {
    runProcessPreferences.putBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,true);
    if (compilerCompliance != null) {
      Map<String,String> complianceOptions=new HashMap<String,String>();
      JavaCore.setComplianceOptions(compilerCompliance,complianceOptions);
      if (!complianceOptions.isEmpty()) {
        Set<Entry<String,String>> entrySet=complianceOptions.entrySet();
        for (        Entry<String,String> entry : entrySet) {
          eclipsePreferences.put(entry.getKey(),entry.getValue());
        }
      }
      try {
        eclipsePreferences.flush();
        runProcessPreferences.flush();
      }
 catch (      BackingStoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9473684210526316
126034,"/** 
 * Clear compliance settings from project, and set them into Eclipse compliance settings
 * @param javaProject
 */
private static void clearProjectIndenpendComplianceSettings(IJavaProject javaProject){
  Map<String,String> projectComplianceOptions=javaProject.getOptions(false);
  if (projectComplianceOptions == null || projectComplianceOptions.isEmpty()) {
    return;
  }
  String compilerCompliance=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,false);
  Set<String> keySet=projectComplianceOptions.keySet();
  for (  String key : keySet) {
    javaProject.setOption(key,null);
  }
  IEclipsePreferences runProcessPreferences=InstanceScope.INSTANCE.getNode(DesignerMavenPlugin.PLUGIN_ID);
  boolean isAlreadySetEclipsePreferences=runProcessPreferences.getBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,false);
  if (!isAlreadySetEclipsePreferences) {
    IEclipsePreferences eclipsePreferences=InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
    runProcessPreferences.putBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,true);
    if (compilerCompliance != null) {
      Map<String,String> complianceOptions=new HashMap<String,String>();
      JavaCore.setComplianceOptions(compilerCompliance,complianceOptions);
      if (!complianceOptions.isEmpty()) {
        Set<Entry<String,String>> entrySet=complianceOptions.entrySet();
        for (        Entry<String,String> entry : entrySet) {
          eclipsePreferences.put(entry.getKey(),entry.getValue());
        }
      }
      try {
        eclipsePreferences.flush();
        runProcessPreferences.flush();
      }
 catch (      BackingStoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * Clear compliance settings from project, and set them into Eclipse compliance settings
 * @param javaProject
 */
private static void clearProjectIndenpendComplianceSettings(IJavaProject javaProject){
  Map<String,String> projectComplianceOptions=javaProject.getOptions(false);
  if (projectComplianceOptions == null || projectComplianceOptions.isEmpty()) {
    return;
  }
  String compilerCompliance=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,false);
  Set<String> keySet=projectComplianceOptions.keySet();
  for (  String key : keySet) {
    javaProject.setOption(key,null);
  }
  IEclipsePreferences pluginPreferences=InstanceScope.INSTANCE.getNode(DesignerMavenPlugin.PLUGIN_ID);
  boolean isAlreadySetEclipsePreferences=pluginPreferences.getBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,false);
  if (!isAlreadySetEclipsePreferences) {
    pluginPreferences.putBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,true);
    if (compilerCompliance != null) {
      IEclipsePreferences eclipsePreferences=InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
      Map<String,String> complianceOptions=new HashMap<String,String>();
      JavaCore.setComplianceOptions(compilerCompliance,complianceOptions);
      if (!complianceOptions.isEmpty()) {
        Set<Entry<String,String>> entrySet=complianceOptions.entrySet();
        for (        Entry<String,String> entry : entrySet) {
          eclipsePreferences.put(entry.getKey(),entry.getValue());
        }
      }
      try {
        eclipsePreferences.flush();
        pluginPreferences.flush();
      }
 catch (      BackingStoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9255702280912363
126035,"public void close(){
  unRegistOnBoardingManager();
  uiManager.close();
  afterClosed();
}","public void close(){
  if (!isRegisted()) {
    return;
  }
  unRegistOnBoardingManager();
  uiManager.close();
  afterClosed();
}",0.8235294117647058
126036,"@Override public void mouseDown(MouseEvent e){
  if (hlShell.isDisposed()) {
    removeListeners();
  }
  if (e.button == 1) {
    onBoardingManager.close();
  }
}","@Override public void mouseDown(MouseEvent e){
  if (hlShell.isDisposed()) {
    removeListeners();
    return;
  }
  if (e.button == 1) {
    onBoardingManager.close();
  }
}",0.9644970414201184
126037,"@Override public void controlMoved(ControlEvent e){
  if (hlShell.isDisposed()) {
    removeListeners();
  }
  Rectangle clientArea=parentShell.getDisplay().map(parentShell,null,parentShell.getClientArea());
  hlShell.setLocation(clientArea.x,clientArea.y);
}","@Override public void controlMoved(ControlEvent e){
  if (hlShell.isDisposed()) {
    removeListeners();
    return;
  }
  Rectangle clientArea=parentShell.getDisplay().map(parentShell,null,parentShell.getClientArea());
  hlShell.setLocation(clientArea.x,clientArea.y);
}",0.9773584905660376
126038,"@Override public void controlResized(ControlEvent e){
  if (hlShell.isDisposed()) {
    removeListeners();
  }
  if (currentFocusedWidget == null || currentFocusedWidget.isDisposed()) {
    Rectangle clientArea=parentShell.getClientArea();
    Rectangle mappedClientArea=parentShell.getDisplay().map(parentShell,null,clientArea);
    hlShell.setBounds(mappedClientArea);
    hlShell.setRegion(getNewRegion(clientArea,new Rectangle(0,0,0,0)));
  }
}","@Override public void controlResized(ControlEvent e){
  if (hlShell.isDisposed()) {
    removeListeners();
    return;
  }
  if (currentFocusedWidget == null || currentFocusedWidget.isDisposed()) {
    Rectangle clientArea=parentShell.getClientArea();
    Rectangle mappedClientArea=parentShell.getDisplay().map(parentShell,null,clientArea);
    hlShell.setBounds(mappedClientArea);
    hlShell.setRegion(getNewRegion(clientArea,new Rectangle(0,0,0,0)));
  }
}",0.986784140969163
126039,"private void addListeners(){
  controlListenerForParent=new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      if (hlShell.isDisposed()) {
        removeListeners();
      }
      if (currentFocusedWidget == null || currentFocusedWidget.isDisposed()) {
        Rectangle clientArea=parentShell.getClientArea();
        Rectangle mappedClientArea=parentShell.getDisplay().map(parentShell,null,clientArea);
        hlShell.setBounds(mappedClientArea);
        hlShell.setRegion(getNewRegion(clientArea,new Rectangle(0,0,0,0)));
      }
    }
    @Override public void controlMoved(    ControlEvent e){
      if (hlShell.isDisposed()) {
        removeListeners();
      }
      Rectangle clientArea=parentShell.getDisplay().map(parentShell,null,parentShell.getClientArea());
      hlShell.setLocation(clientArea.x,clientArea.y);
    }
  }
;
  parentShell.addControlListener(controlListenerForParent);
  hlShell.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (hlShell.isDisposed()) {
        removeListeners();
      }
      if (e.button == 1) {
        onBoardingManager.close();
      }
    }
  }
);
}","private void addListeners(){
  controlListenerForParent=new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      if (hlShell.isDisposed()) {
        removeListeners();
        return;
      }
      if (currentFocusedWidget == null || currentFocusedWidget.isDisposed()) {
        Rectangle clientArea=parentShell.getClientArea();
        Rectangle mappedClientArea=parentShell.getDisplay().map(parentShell,null,clientArea);
        hlShell.setBounds(mappedClientArea);
        hlShell.setRegion(getNewRegion(clientArea,new Rectangle(0,0,0,0)));
      }
    }
    @Override public void controlMoved(    ControlEvent e){
      if (hlShell.isDisposed()) {
        removeListeners();
        return;
      }
      Rectangle clientArea=parentShell.getDisplay().map(parentShell,null,parentShell.getClientArea());
      hlShell.setLocation(clientArea.x,clientArea.y);
    }
  }
;
  parentShell.addControlListener(controlListenerForParent);
  hlShell.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (hlShell.isDisposed()) {
        removeListeners();
        return;
      }
      if (e.button == 1) {
        onBoardingManager.close();
      }
    }
  }
);
  hlShell.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      onBoardingManager.close();
    }
  }
);
}",0.919566898685228
126040,"public void close(){
  hlShell.setEnabled(false);
  setVisible(false);
  removeListeners();
  hlShell.close();
}","public void close(){
  if (hlShell.isDisposed()) {
    return;
  }
  hlShell.setEnabled(false);
  setVisible(false);
  removeListeners();
  hlShell.close();
}",0.8296296296296296
126041,"public void close(){
  removeListeners();
  obShell.close();
  isOpened=false;
}","public void close(){
  if (obShell.isDisposed()) {
    return;
  }
  removeListeners();
  obShell.close();
  isOpened=false;
}",0.7766990291262136
126042,"private void addListeners(){
  controlListenerForParent=new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      if (!checkAvailable()) {
        return;
      }
      refresh();
    }
    @Override public void controlMoved(    ControlEvent e){
      if (!checkAvailable()) {
        return;
      }
      Rectangle clientArea=parentShell.getDisplay().map(parentShell,null,parentShell.getClientArea());
      obShell.setLocation(clientArea.x,clientArea.y);
    }
    private boolean checkAvailable(){
      if (obShell.isDisposed() || parentShell.isDisposed()) {
        removeListeners();
        return false;
      }
 else {
        return true;
      }
    }
  }
;
  parentShell.addControlListener(controlListenerForParent);
}","private void addListeners(){
  controlListenerForParent=new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      if (!checkAvailable()) {
        return;
      }
      refresh();
    }
    @Override public void controlMoved(    ControlEvent e){
      if (!checkAvailable()) {
        return;
      }
      Rectangle clientArea=parentShell.getDisplay().map(parentShell,null,parentShell.getClientArea());
      obShell.setLocation(clientArea.x,clientArea.y);
    }
    private boolean checkAvailable(){
      if (obShell.isDisposed() || parentShell.isDisposed()) {
        removeListeners();
        return false;
      }
 else {
        return true;
      }
    }
  }
;
  parentShell.addControlListener(controlListenerForParent);
  obShell.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      onBoardingManager.close();
    }
  }
);
}",0.9040284360189572
126043,"/** 
 * Clear compliance settings from project, and set them into Eclipse compliance settings
 * @param javaProject
 */
private static void clearProjectIndenpendComplianceSettings(IJavaProject javaProject){
  Map<String,String> projectComplianceOptions=javaProject.getOptions(false);
  if (projectComplianceOptions == null || projectComplianceOptions.isEmpty()) {
    return;
  }
  String compilerCompliance=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,false);
  Set<String> keySet=projectComplianceOptions.keySet();
  for (  String key : keySet) {
    javaProject.setOption(key,null);
  }
  IEclipsePreferences runProcessPreferences=InstanceScope.INSTANCE.getNode(DesignerMavenPlugin.PLUGIN_ID);
  boolean isAlreadySetEclipsePreferences=runProcessPreferences.getBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,false);
  IEclipsePreferences eclipsePreferences=InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
  if (!isAlreadySetEclipsePreferences) {
    runProcessPreferences.putBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,true);
    if (compilerCompliance != null) {
      Map<String,String> complianceOptions=new HashMap<String,String>();
      JavaCore.setComplianceOptions(compilerCompliance,complianceOptions);
      if (!complianceOptions.isEmpty()) {
        Set<Entry<String,String>> entrySet=complianceOptions.entrySet();
        for (        Entry<String,String> entry : entrySet) {
          eclipsePreferences.put(entry.getKey(),entry.getValue());
        }
      }
      try {
        eclipsePreferences.flush();
        runProcessPreferences.flush();
      }
 catch (      BackingStoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * Clear compliance settings from project, and set them into Eclipse compliance settings
 * @param javaProject
 */
private static void clearProjectIndenpendComplianceSettings(IJavaProject javaProject){
  Map<String,String> projectComplianceOptions=javaProject.getOptions(false);
  if (projectComplianceOptions == null || projectComplianceOptions.isEmpty()) {
    return;
  }
  String compilerCompliance=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,false);
  Set<String> keySet=projectComplianceOptions.keySet();
  for (  String key : keySet) {
    javaProject.setOption(key,null);
  }
  IEclipsePreferences runProcessPreferences=InstanceScope.INSTANCE.getNode(DesignerMavenPlugin.PLUGIN_ID);
  boolean isAlreadySetEclipsePreferences=runProcessPreferences.getBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,false);
  if (!isAlreadySetEclipsePreferences) {
    IEclipsePreferences eclipsePreferences=InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
    runProcessPreferences.putBoolean(IS_ALREADY_SET_ECLIPSE_COMPLIANCE,true);
    if (compilerCompliance != null) {
      Map<String,String> complianceOptions=new HashMap<String,String>();
      JavaCore.setComplianceOptions(compilerCompliance,complianceOptions);
      if (!complianceOptions.isEmpty()) {
        Set<Entry<String,String>> entrySet=complianceOptions.entrySet();
        for (        Entry<String,String> entry : entrySet) {
          eclipsePreferences.put(entry.getKey(),entry.getValue());
        }
      }
      try {
        eclipsePreferences.flush();
        runProcessPreferences.flush();
      }
 catch (      BackingStoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9748803827751196
126044,"/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  IViewPart cheatSheetView=null;
  IViewReference cheatSheetref=null;
  for (  IViewReference ref : activePage.getViewReferences()) {
    cheatSheetView=ref.getView(false);
    if (!view.equals(cheatSheetView)) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
    }
 else     if (cheatSheetView instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    }
 else {
      cheatSheetref=ref;
    }
  }
  for (  IEditorReference ref : activePage.getEditorReferences()) {
    activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
  }
  if (cheatSheetref != null && cheatSheetView != null) {
    activePage.setPartState(cheatSheetref,IWorkbenchPage.STATE_MAXIMIZED);
    activePage.bringToTop(cheatSheetView);
  }
  setMaxCheatSheetHasSHow(true);
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
  partListener2=new PartListener2Adapter(){
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
      super.partDeactivated(partRef);
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
  }
;
  activePage.addPartListener(partListener2);
}","/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  IViewPart cheatSheetView=null;
  for (  IViewReference ref : activePage.getViewReferences()) {
    cheatSheetView=ref.getView(false);
    if (view.equals(cheatSheetView)) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MAXIMIZED);
      activePage.bringToTop(cheatSheetView);
    }
  }
  setMaxCheatSheetHasSHow(true);
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
  partListener2=new PartListener2Adapter(){
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
      super.partDeactivated(partRef);
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
  }
;
  activePage.addPartListener(partListener2);
}",0.7701641684511064
126045,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  boolean isOnBoarding=!PlatformUI.getPreferenceStore().getBoolean(ITalendCorePrefConstants.PREFERENCE_NOT_SHOW_ONBOARDING_AT_STARTUP);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (isOnBoarding && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart)) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}",0.9789637390521404
126046,"private URI getReferenceFileURI(URI itemResourceURI,ReferenceFileItem refFile){
  if (refFile.getName() != null) {
    return itemResourceURI.trimSegments(1).appendSegment(refFile.getName() + ""String_Node_Str"" + refFile.getExtension());
  }
 else {
    return itemResourceURI.trimFileExtension().appendFileExtension(refFile.getExtension());
  }
}","private URI getReferenceFileURI(URI itemResourceURI,ReferenceFileItem refFile){
  if (refFile.getName() != null) {
    ByteArray contentByteArray=refFile.getContent();
    URI referenceFileURI=null;
    if (contentByteArray != null) {
      Resource eResource=contentByteArray.eResource();
      if (eResource != null) {
        referenceFileURI=eResource.getURI();
      }
    }
    if (referenceFileURI != null) {
      String fileName=referenceFileURI.segment(referenceFileURI.segmentCount() - 1);
      if (fileName != null && fileName.startsWith(refFile.getName())) {
        return itemResourceURI.trimSegments(1).appendSegment(fileName);
      }
 else {
        CommonExceptionHandler.process(new Exception(""String_Node_Str"" + refFile.getName() + ""String_Node_Str""+ fileName+ ""String_Node_Str""),Priority.INFO);
      }
    }
    return itemResourceURI.trimSegments(1).appendSegment(refFile.getName() + ""String_Node_Str"" + refFile.getExtension());
  }
 else {
    return itemResourceURI.trimFileExtension().appendFileExtension(refFile.getExtension());
  }
}",0.3023420865862313
126047,"@Override public void perspectivePreDeactivate(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  CheatSheetView cheetSheet=CheatSheetUtils.getInstance().findCheetSheet();
  if (null != cheetSheet) {
    cheetSheetID=cheetSheet.getCheatSheetID();
    CheatSheetUtils.getInstance().hideCheetSheet(cheetSheet);
  }
  cheetSheetInPerspective.put(perspective.getId(),null != cheetSheet);
  super.perspectivePreDeactivate(page,perspective);
}","@Override public void perspectivePreDeactivate(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  CheatSheetView cheetSheet=CheatSheetUtils.getInstance().findCheetSheet(""String_Node_Str"");
  if (null != cheetSheet) {
    cheetSheetID=cheetSheet.getCheatSheetID();
    CheatSheetUtils.getInstance().hideCheetSheet(cheetSheet);
  }
  cheetSheetInPerspective.put(perspective.getId(),null != cheetSheet);
  super.perspectivePreDeactivate(page,perspective);
}",0.9812568908489526
126048,"/** 
 * show the cheet sheet view.
 */
private void restoreCheetSheet(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CheatSheetView view=ViewUtilities.showCheatSheetView();
      IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
      if (null != view) {
        if (null != cheetSheetID) {
          view.setInput(cheetSheetID);
        }
        if (CheatSheetUtils.getInstance().isFirstTime()) {
          CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
        }
      }
      if (null != activePart) {
        activePart.setFocus();
      }
    }
  }
);
}","/** 
 * show the cheet sheet view.
 */
private void restoreCheetSheet(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CheatSheetView view=ViewUtilities.showCheatSheetView();
      IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
      if (null != view) {
        view.setInput(""String_Node_Str"");
        if (CheatSheetUtils.getInstance().isFirstTime()) {
          CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
        }
      }
      if (null != activePart) {
        activePart.setFocus();
      }
    }
  }
);
}",0.6198920585967618
126049,"public void run(){
  CheatSheetView view=ViewUtilities.showCheatSheetView();
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (null != view) {
    if (null != cheetSheetID) {
      view.setInput(cheetSheetID);
    }
    if (CheatSheetUtils.getInstance().isFirstTime()) {
      CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
    }
  }
  if (null != activePart) {
    activePart.setFocus();
  }
}","public void run(){
  CheatSheetView view=ViewUtilities.showCheatSheetView();
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (null != view) {
    view.setInput(""String_Node_Str"");
    if (CheatSheetUtils.getInstance().isFirstTime()) {
      CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
    }
  }
  if (null != activePart) {
    activePart.setFocus();
  }
}",0.5308775731310943
126050,"/** 
 * find And maximum Display CheatSheet.
 */
public void findAndmaxDisplayCheatSheet(){
  CheatSheetView findCheetSheet=findCheetSheet();
  if (findCheetSheet != null) {
    maxDisplayCheatSheetView(findCheetSheet);
  }
}","/** 
 * find And maximum Display CheatSheet.
 */
public void findAndmaxDisplayCheatSheet(String cheatSheetID){
  CheatSheetView findCheetSheet=findCheetSheet(cheatSheetID);
  if (findCheetSheet != null) {
    maxDisplayCheatSheetView(findCheetSheet);
  }
}",0.9355509355509356
126051,"/** 
 * get the cheet sheet view.
 * @return CheatSheetView
 */
public CheatSheetView findCheetSheet(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  CheatSheetView view=(CheatSheetView)page.findView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
  if (view == null && page != null && page.getPerspective().getId().equals(DQ_PERSPECTIVE_ID)) {
    try {
      view=(CheatSheetView)page.showView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
      page.activate(view);
    }
 catch (    PartInitException pie) {
      String message=Messages.LAUNCH_SHEET_ERROR;
      IStatus status=new Status(IStatus.ERROR,ICheatSheetResource.CHEAT_SHEET_PLUGIN_ID,IStatus.OK,message,pie);
      CheatSheetPlugin.getPlugin().getLog().log(status);
      org.eclipse.jface.dialogs.ErrorDialog.openError(window.getShell(),Messages.CHEAT_SHEET_ERROR_OPENING,null,pie.getStatus());
    }
  }
  return view;
}","/** 
 * get the cheet sheet view.
 * @return CheatSheetView
 */
public CheatSheetView findCheetSheet(String cheatSheetID){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  CheatSheetView view=(CheatSheetView)page.findView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
  if (view == null && page != null && page.getPerspective().getId().equals(DQ_PERSPECTIVE_ID)) {
    try {
      view=(CheatSheetView)page.showView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
      view.setInput(cheatSheetID);
      page.activate(view);
    }
 catch (    PartInitException pie) {
      String message=Messages.LAUNCH_SHEET_ERROR;
      IStatus status=new Status(IStatus.ERROR,ICheatSheetResource.CHEAT_SHEET_PLUGIN_ID,IStatus.OK,message,pie);
      CheatSheetPlugin.getPlugin().getLog().log(status);
      org.eclipse.jface.dialogs.ErrorDialog.openError(window.getShell(),Messages.CHEAT_SHEET_ERROR_OPENING,null,pie.getStatus());
    }
  }
  return view;
}",0.9735553379040156
126052,"/** 
 * DOC talend Comment method ""restoreOtherViewAndEditor"".
 * @param part
 */
protected void restoreOtherViewAndEditor(IWorkbenchPart part){
  if (CheatSheetUtils.getInstance().isMaxCheatSheetHasSHow() && part instanceof org.eclipse.ui.internal.cheatsheets.views.CheatSheetView) {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IViewReference ref : activePage.getViewReferences()) {
      if (part != ref.getView(false)) {
        activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
      }
    }
    for (    IEditorReference ref : activePage.getEditorReferences()) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
    }
    CheatSheetUtils.getInstance().setMaxCheatSheetHasSHow(false);
    if (partListener2 != null) {
      activePage.removePartListener(partListener2);
    }
  }
}","/** 
 * DOC talend Comment method ""restoreOtherViewAndEditor"".
 * @param part
 */
protected void restoreOtherViewAndEditor(IWorkbenchPart part){
  if (part instanceof org.eclipse.ui.internal.cheatsheets.views.CheatSheetView) {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IViewReference ref : activePage.getViewReferences()) {
      if (part != ref.getView(false)) {
        activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
      }
    }
    for (    IEditorReference ref : activePage.getEditorReferences()) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
    }
    CheatSheetUtils.getInstance().setMaxCheatSheetHasSHow(false);
    if (partListener2 != null) {
      activePage.removePartListener(partListener2);
    }
  }
}",0.965962441314554
126053,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  boolean isOnBoarding=!PlatformUI.getPreferenceStore().getBoolean(ITalendCorePrefConstants.PREFERENCE_NOT_SHOW_ONBOARDING_AT_STARTUP);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (isOnBoarding && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
    }
  }
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  boolean isOnBoarding=!PlatformUI.getPreferenceStore().getBoolean(ITalendCorePrefConstants.PREFERENCE_NOT_SHOW_ONBOARDING_AT_STARTUP);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (isOnBoarding && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}",0.99861371605643
126054,"/** 
 * after create operation, can do something, like add some natures.
 */
protected void afterCreate(IProgressMonitor monitor,IResource res) throws Exception {
  IProject p=res.getProject();
  if (!p.isOpen()) {
    p.open(monitor);
  }
  convertJavaProjectToPom(monitor,p);
  changeClasspath(monitor,p);
}","/** 
 * after create operation, can do something, like add some natures.
 */
protected void afterCreate(IProgressMonitor monitor,IResource res) throws Exception {
  IProject p=res.getProject();
  if (!p.isOpen()) {
    p.open(monitor);
  }
  convertJavaProjectToPom(monitor,p);
  changeClasspath(monitor,p);
  IJavaProject javaProject=JavaCore.create(p);
  clearProjectIndenpendComplianceSettings(javaProject);
  javaProject.close();
}",0.8306451612903226
126055,"/** 
 * Retruns the Query part of the URL as an instance of a Properties class.
 * @param url
 * @return
 */
public Properties getQueryParameters(URL url){
  Properties properties=new Properties();
  String query=url.getQuery();
  if (query == null) {
    return properties;
  }
  String[] params;
  if (EnvironmentUtils.isWindowsSystem()) {
    params=StringUtil.split(query,""String_Node_Str"");
  }
 else {
    params=StringUtil.split(query,""String_Node_Str"");
  }
  for (  String param : params) {
    String[] keyValuePair=StringUtil.split(param,""String_Node_Str"");
    if (keyValuePair.length != 2) {
      Log.warning(""String_Node_Str"" + param);
      continue;
    }
    String key=urlDecode(keyValuePair[0]);
    if (key == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[0]);
      continue;
    }
    String value=urlDecode(keyValuePair[1]);
    if (value == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[1]);
      continue;
    }
    properties.setProperty(key,value);
  }
  return properties;
}","/** 
 * Retruns the Query part of the URL as an instance of a Properties class.
 * @param url
 * @return
 */
public Properties getQueryParameters(URL url){
  Properties properties=new Properties();
  String query=url.getQuery();
  if (query == null) {
    return properties;
  }
  String[] params;
  if (query.indexOf(""String_Node_Str"") != -1) {
    query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  params=StringUtil.split(query,""String_Node_Str"");
  for (  String param : params) {
    String[] keyValuePair=StringUtil.split(param,""String_Node_Str"");
    if (keyValuePair.length != 2) {
      Log.warning(""String_Node_Str"" + param);
      continue;
    }
    String key=urlDecode(keyValuePair[0]);
    if (key == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[0]);
      continue;
    }
    String value=urlDecode(keyValuePair[1]);
    if (value == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[1]);
      continue;
    }
    properties.setProperty(key,value);
  }
  return properties;
}",0.8500727802037845
126056,"/** 
 * Retruns the Query part of the URL as an instance of a Properties class.
 * @param url
 * @return
 */
public Properties getQueryParameters(URL url){
  Properties properties=new Properties();
  String query=url.getQuery();
  if (query == null) {
    return properties;
  }
  String[] params;
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    params=StringUtil.split(query,""String_Node_Str"");
  }
 else {
    params=StringUtil.split(query,""String_Node_Str"");
  }
  for (  String param : params) {
    String[] keyValuePair=StringUtil.split(param,""String_Node_Str"");
    if (keyValuePair.length != 2) {
      Log.warning(""String_Node_Str"" + param);
      continue;
    }
    String key=urlDecode(keyValuePair[0]);
    if (key == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[0]);
      continue;
    }
    String value=urlDecode(keyValuePair[1]);
    if (value == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[1]);
      continue;
    }
    properties.setProperty(key,value);
  }
  return properties;
}","/** 
 * Retruns the Query part of the URL as an instance of a Properties class.
 * @param url
 * @return
 */
public Properties getQueryParameters(URL url){
  Properties properties=new Properties();
  String query=url.getQuery();
  if (query == null) {
    return properties;
  }
  String[] params;
  if (query.indexOf(""String_Node_Str"") != -1) {
    query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  params=StringUtil.split(query,""String_Node_Str"");
  for (  String param : params) {
    String[] keyValuePair=StringUtil.split(param,""String_Node_Str"");
    if (keyValuePair.length != 2) {
      Log.warning(""String_Node_Str"" + param);
      continue;
    }
    String key=urlDecode(keyValuePair[0]);
    if (key == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[0]);
      continue;
    }
    String value=urlDecode(keyValuePair[1]);
    if (value == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[1]);
      continue;
    }
    properties.setProperty(key,value);
  }
  return properties;
}",0.8490926456542502
126057,"/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  IViewPart cheatSheetView=null;
  IViewReference cheatSheetref=null;
  for (  IViewReference ref : activePage.getViewReferences()) {
    cheatSheetView=ref.getView(false);
    if (!view.equals(cheatSheetView)) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
    }
 else {
      cheatSheetref=ref;
    }
  }
  for (  IEditorReference ref : activePage.getEditorReferences()) {
    activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
  }
  if (cheatSheetref != null && cheatSheetView != null) {
    activePage.setPartState(cheatSheetref,IWorkbenchPage.STATE_MAXIMIZED);
    activePage.bringToTop(cheatSheetView);
  }
  setMaxCheatSheetHasSHow(true);
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
  partListener2=new PartListener2Adapter(){
    @Override public void partHidden(    IWorkbenchPartReference partRef){
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
  }
;
  activePage.addPartListener(partListener2);
}","/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  IViewPart cheatSheetView=null;
  IViewReference cheatSheetref=null;
  for (  IViewReference ref : activePage.getViewReferences()) {
    cheatSheetView=ref.getView(false);
    if (!view.equals(cheatSheetView)) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
    }
 else     if (cheatSheetView instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    }
 else {
      cheatSheetref=ref;
    }
  }
  for (  IEditorReference ref : activePage.getEditorReferences()) {
    activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
  }
  if (cheatSheetref != null && cheatSheetView != null) {
    activePage.setPartState(cheatSheetref,IWorkbenchPage.STATE_MAXIMIZED);
    activePage.bringToTop(cheatSheetView);
  }
  setMaxCheatSheetHasSHow(true);
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
  partListener2=new PartListener2Adapter(){
    @Override public void partHidden(    IWorkbenchPartReference partRef){
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
  }
;
  activePage.addPartListener(partListener2);
}",0.966284074605452
126058,"private void fillDefaultValues(DatabaseConnection connection){
  String distribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  int distributionIndex=HiveConnUtils.getIndexOfDistribution(distribution == null ? null : distribution);
  int hiveVersionIndex=HiveConnUtils.getIndexOfHiveVersion(distribution == null ? null : distribution,hiveVersion == null ? null : hiveVersion);
  HiveConnVersionInfo hiveVersionObj=HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex);
  String[] hiveServerDisplayNames=HiveServerVersionUtils.extractAvailableArrayDisplayNames(hiveVersionObj);
  int indexofHiveServer=HiveServerVersionUtils.getIndexofHiveServer(hiveServerDisplayNames[0]);
  String hiveServer=HiveServerVersionUtils.extractKey(indexofHiveServer);
  connection.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,hiveServer);
  int hiveServerIndex=HiveConnUtils.getIndexOfHiveServer(hiveServer == null ? null : hiveServer);
  String[] hiveModeNames=HiveConnUtils.getHiveModeNames(distributionIndex,hiveVersionIndex,hiveServerIndex);
  String hiveMode=hiveModeNames[0];
  connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveMode);
  int hiveModeIndex=HiveConnUtils.getIndexOfHiveMode(distribution == null ? null : distribution,hiveVersion == null ? null : hiveVersion,hiveMode == null ? null : hiveMode,hiveServer == null ? null : hiveServer);
  boolean isEmbeddedMode=HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
  if (StringUtils.isEmpty(connection.getSID())) {
    String defaultDatabase=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(defaultDatabase)) {
      connection.setSID(defaultDatabase);
    }
  }
  if (StringUtils.isEmpty(connection.getPort())) {
    String defaultPort=null;
    if (isEmbeddedMode) {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveConnVersionInfo.MODE_EMBEDDED.getKey(),EHadoopProperties.PORT.getName());
    }
 else {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveConnVersionInfo.MODE_STANDALONE.getKey(),EHadoopProperties.PORT.getName());
    }
    if (StringUtils.isNotEmpty(defaultPort)) {
      connection.setPort(defaultPort);
    }
  }
  if (StringUtils.isEmpty(connection.getURL())) {
    String template=null;
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServer)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String url=DatabaseConnStrUtil.getHiveURLString(connection,connection.getServerName(),connection.getPort(),connection.getSID(),template);
    if (StringUtils.isNotEmpty(url)) {
      connection.setURL(url);
    }
  }
}","private void fillDefaultValues(DatabaseConnection connection){
  String distribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  int distributionIndex=HiveConnUtils.getIndexOfDistribution(distribution == null ? null : distribution);
  int hiveVersionIndex=HiveConnUtils.getIndexOfHiveVersion(distribution == null ? null : distribution,hiveVersion == null ? null : hiveVersion);
  HiveConnVersionInfo hiveVersionObj=HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex);
  String[] hiveServerDisplayNames=HiveServerVersionUtils.extractAvailableArrayDisplayNames(hiveVersionObj);
  int indexofHiveServer=HiveServerVersionUtils.getIndexofHiveServer(hiveServerDisplayNames[0]);
  String hiveServer=HiveServerVersionUtils.extractKey(indexofHiveServer);
  connection.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,hiveServer);
  int hiveServerIndex=HiveConnUtils.getIndexOfHiveServer(hiveServer == null ? null : hiveServer);
  String[] hiveModeKeys=HiveConnUtils.getHiveModeKeys(distributionIndex,hiveVersionIndex,hiveServerIndex);
  String hiveMode=hiveModeKeys[0];
  connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveMode);
  int hiveModeIndex=HiveConnUtils.getIndexOfHiveMode(distribution == null ? null : distribution,hiveVersion == null ? null : hiveVersion,hiveMode == null ? null : hiveMode,hiveServer == null ? null : hiveServer);
  boolean isEmbeddedMode=HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
  if (StringUtils.isEmpty(connection.getSID())) {
    String defaultDatabase=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(defaultDatabase)) {
      connection.setSID(defaultDatabase);
    }
  }
  if (StringUtils.isEmpty(connection.getPort())) {
    String defaultPort=null;
    if (isEmbeddedMode) {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveConnVersionInfo.MODE_EMBEDDED.getKey(),EHadoopProperties.PORT.getName());
    }
 else {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveConnVersionInfo.MODE_STANDALONE.getKey(),EHadoopProperties.PORT.getName());
    }
    if (StringUtils.isNotEmpty(defaultPort)) {
      connection.setPort(defaultPort);
    }
  }
  if (StringUtils.isEmpty(connection.getURL())) {
    String template=null;
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServer)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String url=DatabaseConnStrUtil.getHiveURLString(connection,connection.getServerName(),connection.getPort(),connection.getSID(),template);
    if (StringUtils.isNotEmpty(url)) {
      connection.setURL(url);
    }
  }
}",0.9966057863261678
126059,"@SuppressWarnings(""String_Node_Str"") private static synchronized ClassLoader getCustomClassLoader(String index,Object customJars,boolean showDownloadIfNotExist){
  if (customJars instanceof Set) {
    return ClassLoaderFactory.getCustomClassLoader(index,(Set<String>)customJars);
  }
  return ClassLoaderFactory.getCustomClassLoader(index,String.valueOf(customJars));
}","@SuppressWarnings(""String_Node_Str"") private static synchronized ClassLoader getCustomClassLoader(String index,Object customJars,boolean showDownloadIfNotExist){
  if (customJars instanceof Set) {
    return ClassLoaderFactory.getCustomClassLoader(index,(Set<String>)customJars);
  }
  String jarString=null;
  if (customJars != null) {
    jarString=String.valueOf(customJars);
  }
  return ClassLoaderFactory.getCustomClassLoader(index,jarString);
}",0.8365853658536585
126060,"/** 
 * show the cheet sheet view.
 */
private void restoreCheetSheet(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CheatSheetView view=ViewUtilities.showCheatSheetView();
      IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
      if (null != view) {
        if (null != cheetSheetID) {
          view.setInput(cheetSheetID);
        }
 else {
          view.setInput(DQ_CHEATSHEET_START_ID);
        }
        if (CheatSheetUtils.getInstance().isFirstTime()) {
          CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
        }
      }
      if (null != activePart) {
        activePart.setFocus();
      }
    }
  }
);
}","/** 
 * show the cheet sheet view.
 */
private void restoreCheetSheet(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CheatSheetView view=ViewUtilities.showCheatSheetView();
      IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
      if (null != view) {
        if (null != cheetSheetID) {
          view.setInput(cheetSheetID);
        }
 else {
          view.setInput(CheatSheetUtils.DQ_CHEATSHEET_START_ID);
        }
        if (CheatSheetUtils.getInstance().isFirstTime()) {
          CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
        }
      }
      if (null != activePart) {
        activePart.setFocus();
      }
    }
  }
);
}",0.9892617449664428
126061,"/** 
 * CheatSheetPerspectiveAdapter constructor.
 */
public CheatSheetPerspectiveAdapter(){
  CheatSheetView cheetSheet=CheatSheetUtils.getInstance().findCheetSheet();
  if (cheetSheet != null) {
    cheetSheet.setInput(CheatSheetPerspectiveAdapter.DQ_CHEATSHEET_START_ID);
  }
}","/** 
 * CheatSheetPerspectiveAdapter constructor.
 */
public CheatSheetPerspectiveAdapter(){
  CheatSheetView cheetSheet=CheatSheetUtils.getInstance().findCheetSheet();
  if (cheetSheet != null) {
    cheetSheet.setInput(CheatSheetUtils.DQ_CHEATSHEET_START_ID);
  }
}",0.9579524680073126
126062,"public void run(){
  CheatSheetView view=ViewUtilities.showCheatSheetView();
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (null != view) {
    if (null != cheetSheetID) {
      view.setInput(cheetSheetID);
    }
 else {
      view.setInput(DQ_CHEATSHEET_START_ID);
    }
    if (CheatSheetUtils.getInstance().isFirstTime()) {
      CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
    }
  }
  if (null != activePart) {
    activePart.setFocus();
  }
}","public void run(){
  CheatSheetView view=ViewUtilities.showCheatSheetView();
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (null != view) {
    if (null != cheetSheetID) {
      view.setInput(cheetSheetID);
    }
 else {
      view.setInput(CheatSheetUtils.DQ_CHEATSHEET_START_ID);
    }
    if (CheatSheetUtils.getInstance().isFirstTime()) {
      CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
    }
  }
  if (null != activePart) {
    activePart.setFocus();
  }
}",0.9853479853479854
126063,"/** 
 * get the cheet sheet view.
 * @return CheatSheetView
 */
public CheatSheetView findCheetSheet(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  return (CheatSheetView)page.findView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
}","/** 
 * get the cheet sheet view.
 * @return CheatSheetView
 */
public CheatSheetView findCheetSheet(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  CheatSheetView view=(CheatSheetView)page.findView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (view == null && activePage != null && activePage.getPerspective().getId().equals(DQ_PERSPECTIVE_ID)) {
    try {
      view=(CheatSheetView)page.showView(ICheatSheetResource.CHEAT_SHEET_VIEW_ID);
      view.setInput(DQ_CHEATSHEET_START_ID);
      page.activate(view);
    }
 catch (    PartInitException pie) {
      String message=Messages.LAUNCH_SHEET_ERROR;
      IStatus status=new Status(IStatus.ERROR,ICheatSheetResource.CHEAT_SHEET_PLUGIN_ID,IStatus.OK,message,pie);
      CheatSheetPlugin.getPlugin().getLog().log(status);
      org.eclipse.jface.dialogs.ErrorDialog.openError(window.getShell(),Messages.CHEAT_SHEET_ERROR_OPENING,null,pie.getStatus());
    }
  }
  return view;
}",0.4535117056856187
126064,"/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  for (  IViewReference ref : activePage.getViewReferences()) {
    if (view.equals(ref.getView(false))) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MAXIMIZED);
      activePage.bringToTop(ref.getView(false));
    }
 else {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
    }
  }
  for (  IEditorReference ref : activePage.getEditorReferences()) {
    activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
  }
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
}","/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  IViewPart cheatSheetView=null;
  IViewReference cheatSheetref=null;
  for (  IViewReference ref : activePage.getViewReferences()) {
    cheatSheetView=ref.getView(false);
    if (!view.equals(cheatSheetView)) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
    }
 else {
      cheatSheetref=ref;
    }
  }
  for (  IEditorReference ref : activePage.getEditorReferences()) {
    activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
  }
  if (cheatSheetref != null && cheatSheetView != null) {
    activePage.setPartState(cheatSheetref,IWorkbenchPage.STATE_MAXIMIZED);
    activePage.bringToTop(cheatSheetView);
  }
  setMaxCheatSheetHasSHow(true);
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
  partListener2=new PartListener2Adapter(){
    @Override public void partHidden(    IWorkbenchPartReference partRef){
      restoreOtherViewAndEditor(partRef.getPart(false));
    }
  }
;
  activePage.addPartListener(partListener2);
}",0.4198746642793196
126065,"@Override public String getInitialWindowPerspectiveId(){
  return ""String_Node_Str"";
}","@Override public String getInitialWindowPerspectiveId(){
  return IBrandingConfiguration.PERSPECTIVE_DI_ID;
}",0.7692307692307693
126066,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  if (!JavaHomeUtil.isJDKSetup()) {
    MessageDialog.openWarning(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  if (!JavaHomeUtil.isJDKSetup()) {
    MessageDialog.openWarning(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  perspProvider.restoreAlwaysVisiblePerspectives();
  boolean isOnBoarding=!PlatformUI.getPreferenceStore().getBoolean(ITalendCorePrefConstants.PREFERENCE_NOT_SHOW_ONBOARDING_AT_STARTUP);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (isOnBoarding && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
    }
  }
}",0.9577441495079798
126067,"private void showStarting(){
  try {
    IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String startingBrowserId=service.getStartingBrowserId();
    if (startingBrowserId == null || startingBrowserId.isEmpty()) {
      return;
    }
    StartingHelper.getHelper().getHtmlContent();
    IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage != null) {
      if (activePage.getPerspective().getId().equals(""String_Node_Str"")) {
        startingBrowser=activePage.openEditor(new StartingEditorInput(service),startingBrowserId);
      }
    }
  }
 catch (  Exception e) {
  }
}","private void showStarting(){
  try {
    IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String startingBrowserId=service.getStartingBrowserId();
    if (startingBrowserId == null || startingBrowserId.isEmpty()) {
      return;
    }
    StartingHelper.getHelper().getHtmlContent();
    IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage != null) {
      if (activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DI_ID)) {
        startingBrowser=activePage.openEditor(new StartingEditorInput(service),startingBrowserId);
      }
    }
  }
 catch (  Exception e) {
  }
}",0.9707283866575902
126068,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Project other=(Project)obj;
  if (this.project == null) {
    if (other.project != null) {
      return false;
    }
  }
 else   if (!this.project.equals(other.project)) {
    if (this.project.getTechnicalLabel().equals(project.getTechnicalLabel()))     return true;
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final Project other=(Project)obj;
  if (this.project == null) {
    if (other.project != null) {
      return false;
    }
  }
 else   if (!this.project.equals(other.project)) {
    if (this.project.getTechnicalLabel().equals(other.project.getTechnicalLabel()))     return true;
    return false;
  }
  return true;
}",0.9940711462450592
126069,"@Override public boolean doSupportHive1(){
  return true;
}","@Override public boolean doSupportHive1(){
  return false;
}",0.9411764705882352
126070,"@Override public boolean doSupportHive1(){
  return true;
}","@Override public boolean doSupportHive1(){
  return false;
}",0.9411764705882352
126071,"@Override public boolean doSupportHive1(){
  return true;
}","@Override public boolean doSupportHive1(){
  return false;
}",0.9411764705882352
126072,"public static IImage getWizardIcon(String jobType,String framework){
  if (HadoopConstants.JOBTYPEBDSTREAMING.equals(jobType)) {
    IStormProcessService stormProcessService=(IStormProcessService)GlobalServiceRegister.getDefault().getService(IStormProcessService.class);
    return stormProcessService.getStormWizardIcon(framework);
  }
 else   if (HadoopConstants.JOBTYPEBDBATCH.equals(jobType)) {
    IMRProcessService mrProcessService=(IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class);
    return mrProcessService.getMRWizardIcon(framework);
  }
  return ECoreImage.PROCESS_WIZ;
}","public static IImage getWizardIcon(String jobType,String framework){
  if (HadoopConstants.JOBTYPEBDSTREAMING.equals(jobType)) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IStormProcessService.class)) {
      IStormProcessService stormProcessService=(IStormProcessService)GlobalServiceRegister.getDefault().getService(IStormProcessService.class);
      return stormProcessService.getStormWizardIcon(framework);
    }
  }
 else   if (HadoopConstants.JOBTYPEBDBATCH.equals(jobType)) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMRProcessService.class)) {
      IMRProcessService mrProcessService=(IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class);
      return mrProcessService.getMRWizardIcon(framework);
    }
  }
  return ECoreImage.PROCESS_WIZ;
}",0.8587181254307374
126073,"public void refresh(){
  getPart();
  if (part != null) {
    boolean modified=updateContextFromRepository();
    if (modified) {
      setEditorDirty(part);
    }
    IEditorInput editorInput=part.getEditorInput();
    setCompositeReadonly(editorInput);
  }
  contextComposite.setPart(part);
}","public void refresh(IWorkbenchPart editorPart){
  part=(EditorPart)editorPart;
  refreshPart();
}",0.1841432225063938
126074,"/** 
 * DOC marvin EditProcessPropertiesWizard constructor comment.
 * @param repositoryViewObject
 * @param path
 * @param useLastVersion
 */
public EditProcessPropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super(repositoryViewObject,path,useLastVersion);
  this.repositoryViewObject=repositoryViewObject;
  setWindowTitle(Messages.getString(""String_Node_Str""));
}","/** 
 * DOC marvin EditProcessPropertiesWizard constructor comment.
 * @param repositoryViewObject
 * @param path
 * @param useLastVersion
 */
public EditProcessPropertiesWizard(IRepositoryViewObject repositoryViewObject,IPath path,boolean useLastVersion){
  super(repositoryViewObject,path,useLastVersion);
  this.repositoryViewObject=repositoryViewObject;
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.PROCESS_WIZ));
}",0.9073064340239912
126075,"@Override public void modifyText(ModifyEvent e){
  updatePageStatus();
}","@Override public void modifyText(ModifyEvent e){
  updatePageStatus();
  updateFrameworkIcon(framework.getText());
}",0.7659574468085106
126076,"@Override protected void addListeners(){
  super.addListeners();
  if (jobTypeCCombo != null) {
    jobTypeCCombo.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      final ModifyEvent e){
        ConvertJobsUtil.updateJobFrameworkPart(jobTypeCCombo.getText(),framework);
        updatePageStatus();
      }
    }
);
  }
  if (framework != null) {
    framework.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        updatePageStatus();
      }
    }
);
  }
}","@Override protected void addListeners(){
  super.addListeners();
  if (jobTypeCCombo != null) {
    jobTypeCCombo.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      final ModifyEvent e){
        ConvertJobsUtil.updateJobFrameworkPart(jobTypeCCombo.getText(),framework);
        updatePageStatus();
        updateFrameworkIcon(framework.getText());
      }
    }
);
  }
  if (framework != null) {
    framework.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        updatePageStatus();
        updateFrameworkIcon(framework.getText());
      }
    }
);
  }
}",0.9159663865546218
126077,"@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  boolean alreadyEditedByUser=((EditProcessPropertiesWizard)this.getWizard()).isAlreadyEditedByUser();
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  if (!PluginChecker.isMapReducePluginLoader() && !PluginChecker.isStormPluginLoader()) {
    super.createControl(container);
  }
 else {
    GridData data;
    Label nameLab=new Label(container,SWT.NONE);
    nameLab.setText(Messages.getString(""String_Node_Str""));
    nameText=new Text(container,SWT.BORDER);
    nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    nameText.setEditable(!readOnly);
    Label jobTypeLabel=new Label(container,SWT.NONE);
    jobTypeLabel.setText(Messages.getString(""String_Node_Str""));
    Composite typeGroup=new Composite(container,SWT.NONE);
    typeGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout typeGroupLayout=new GridLayout(3,false);
    typeGroupLayout.marginHeight=0;
    typeGroupLayout.marginWidth=0;
    typeGroupLayout.horizontalSpacing=0;
    typeGroup.setLayout(typeGroupLayout);
    jobTypeCCombo=new CCombo(typeGroup,SWT.BORDER);
    jobTypeCCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jobTypeCCombo.setEditable(false);
    jobTypeCCombo.setItems(JobType.getJobTypeToDispaly());
    jobTypeCCombo.setText(JobType.STANDARD.getDisplayName());
    Label label=new Label(typeGroup,SWT.NONE);
    label.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
    framework=new CCombo(typeGroup,SWT.BORDER);
    framework.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    framework.setEditable(false);
    framework.setItems(new String[0]);
    Label purposeLab=new Label(container,SWT.NONE);
    purposeLab.setText(Messages.getString(""String_Node_Str""));
    purposeText=new Text(container,SWT.BORDER);
    purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    purposeText.setEditable(!readOnly);
    Label descriptionLab=new Label(container,SWT.NONE);
    descriptionLab.setText(Messages.getString(""String_Node_Str""));
    descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
    descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
    data=new GridData(GridData.FILL_HORIZONTAL);
    data.heightHint=60;
    descriptionText.setLayoutData(data);
    descriptionText.setEditable(!readOnly);
    Label authorLab=new Label(container,SWT.NONE);
    authorLab.setText(Messages.getString(""String_Node_Str""));
    authorText=new Text(container,SWT.BORDER);
    authorText.setEnabled(false);
    authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Label lockerLab=new Label(container,SWT.NONE);
    lockerLab.setText(Messages.getString(""String_Node_Str""));
    lockerText=new Text(container,SWT.BORDER);
    lockerText.setEnabled(false);
    lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
    if (allowVerchange) {
      Label versionLab=new Label(container,SWT.NONE);
      versionLab.setText(Messages.getString(""String_Node_Str""));
      Composite versionContainer=new Composite(container,SWT.NONE);
      versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout versionLayout=new GridLayout(3,false);
      versionLayout.marginHeight=0;
      versionLayout.marginWidth=0;
      versionLayout.horizontalSpacing=0;
      versionContainer.setLayout(versionLayout);
      versionText=new Text(versionContainer,SWT.BORDER);
      versionText.setEnabled(false);
      versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      versionMajorBtn=new Button(versionContainer,SWT.PUSH);
      versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
      versionMajorBtn.setEnabled(!readOnly && allowVerchange);
      versionMinorBtn=new Button(versionContainer,SWT.PUSH);
      versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
      versionMinorBtn.setEnabled(!readOnly && allowVerchange);
    }
    Label statusLab=new Label(container,SWT.NONE);
    statusLab.setText(Messages.getString(""String_Node_Str""));
    statusText=new CCombo(container,SWT.BORDER);
    statusText.setEditable(false);
    List<org.talend.core.model.properties.Status> statusList;
    try {
      if (property != null) {
        statusList=statusHelper.getStatusList(property);
        statusText.setItems(toArray(statusList));
        statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        statusText.setEnabled(!readOnly);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    Label pathLab=new Label(container,SWT.NONE);
    pathLab.setText(Messages.getString(""String_Node_Str""));
    Composite pathContainer=new Composite(container,SWT.NONE);
    pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout pathLayout=new GridLayout(2,false);
    pathLayout.marginHeight=0;
    pathLayout.marginWidth=0;
    pathLayout.horizontalSpacing=0;
    pathContainer.setLayout(pathLayout);
    pathText=new Text(pathContainer,SWT.BORDER);
    pathText.setEnabled(false);
    pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (editPath) {
      Button button=new Button(pathContainer,SWT.PUSH);
      button.setText(Messages.getString(""String_Node_Str""));
      button.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          openFolderSelectionDialog(NEED_CANCEL_BUTTON);
        }
      }
);
      if (destinationPath == null) {
        openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
      }
    }
  }
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}","@Override public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  container.setLayout(layout);
  boolean alreadyEditedByUser=((EditProcessPropertiesWizard)this.getWizard()).isAlreadyEditedByUser();
  if (alreadyEditedByUser) {
    Label label=new Label(container,SWT.NONE);
    label.setForeground(ColorConstants.red);
    label.setText(Messages.getString(""String_Node_Str""));
    GridData gridData=new GridData();
    gridData.horizontalSpan=2;
    label.setLayoutData(gridData);
  }
  if (!PluginChecker.isMapReducePluginLoader() && !PluginChecker.isStormPluginLoader()) {
    super.createControl(container);
  }
 else {
    GridData data;
    Label nameLab=new Label(container,SWT.NONE);
    nameLab.setText(Messages.getString(""String_Node_Str""));
    nameText=new Text(container,SWT.BORDER);
    nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    nameText.setEditable(!readOnly);
    Label jobTypeLabel=new Label(container,SWT.NONE);
    jobTypeLabel.setText(Messages.getString(""String_Node_Str""));
    Composite typeGroup=new Composite(container,SWT.NONE);
    typeGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout typeGroupLayout=new GridLayout(3,false);
    typeGroupLayout.marginHeight=0;
    typeGroupLayout.marginWidth=0;
    typeGroupLayout.horizontalSpacing=0;
    typeGroup.setLayout(typeGroupLayout);
    jobTypeCCombo=new CCombo(typeGroup,SWT.BORDER);
    jobTypeCCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jobTypeCCombo.setEditable(false);
    jobTypeCCombo.setItems(JobType.getJobTypeToDispaly());
    jobTypeCCombo.setText(JobType.STANDARD.getDisplayName());
    Label label=new Label(typeGroup,SWT.NONE);
    label.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
    framework=new CCombo(typeGroup,SWT.BORDER);
    framework.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    framework.setEditable(false);
    framework.setItems(new String[0]);
    framework.setEnabled(false);
    Label purposeLab=new Label(container,SWT.NONE);
    purposeLab.setText(Messages.getString(""String_Node_Str""));
    purposeText=new Text(container,SWT.BORDER);
    purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    purposeText.setEditable(!readOnly);
    Label descriptionLab=new Label(container,SWT.NONE);
    descriptionLab.setText(Messages.getString(""String_Node_Str""));
    descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
    descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
    data=new GridData(GridData.FILL_HORIZONTAL);
    data.heightHint=60;
    descriptionText.setLayoutData(data);
    descriptionText.setEditable(!readOnly);
    Label authorLab=new Label(container,SWT.NONE);
    authorLab.setText(Messages.getString(""String_Node_Str""));
    authorText=new Text(container,SWT.BORDER);
    authorText.setEnabled(false);
    authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Label lockerLab=new Label(container,SWT.NONE);
    lockerLab.setText(Messages.getString(""String_Node_Str""));
    lockerText=new Text(container,SWT.BORDER);
    lockerText.setEnabled(false);
    lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
    if (allowVerchange) {
      Label versionLab=new Label(container,SWT.NONE);
      versionLab.setText(Messages.getString(""String_Node_Str""));
      Composite versionContainer=new Composite(container,SWT.NONE);
      versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout versionLayout=new GridLayout(3,false);
      versionLayout.marginHeight=0;
      versionLayout.marginWidth=0;
      versionLayout.horizontalSpacing=0;
      versionContainer.setLayout(versionLayout);
      versionText=new Text(versionContainer,SWT.BORDER);
      versionText.setEnabled(false);
      versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      versionMajorBtn=new Button(versionContainer,SWT.PUSH);
      versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
      versionMajorBtn.setEnabled(!readOnly && allowVerchange);
      versionMinorBtn=new Button(versionContainer,SWT.PUSH);
      versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
      versionMinorBtn.setEnabled(!readOnly && allowVerchange);
    }
    Label statusLab=new Label(container,SWT.NONE);
    statusLab.setText(Messages.getString(""String_Node_Str""));
    statusText=new CCombo(container,SWT.BORDER);
    statusText.setEditable(false);
    List<org.talend.core.model.properties.Status> statusList;
    try {
      if (property != null) {
        statusList=statusHelper.getStatusList(property);
        statusText.setItems(toArray(statusList));
        statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        statusText.setEnabled(!readOnly);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    Label pathLab=new Label(container,SWT.NONE);
    pathLab.setText(Messages.getString(""String_Node_Str""));
    Composite pathContainer=new Composite(container,SWT.NONE);
    pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout pathLayout=new GridLayout(2,false);
    pathLayout.marginHeight=0;
    pathLayout.marginWidth=0;
    pathLayout.horizontalSpacing=0;
    pathContainer.setLayout(pathLayout);
    pathText=new Text(pathContainer,SWT.BORDER);
    pathText.setEnabled(false);
    pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (editPath) {
      Button button=new Button(pathContainer,SWT.PUSH);
      button.setText(Messages.getString(""String_Node_Str""));
      button.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          openFolderSelectionDialog(NEED_CANCEL_BUTTON);
        }
      }
);
      if (destinationPath == null) {
        openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
      }
    }
  }
  setControl(container);
  updateContent();
  addListeners();
  setPageComplete(false);
}",0.9974066797642436
126078,"public static Set<ModuleNeeded> getCodesModuleNeededs(ERepositoryObjectType type){
  if (type == null) {
    return getRunningModules();
  }
  Set<ModuleNeeded> codesModules=new HashSet<ModuleNeeded>();
  codesModules.addAll(getModulesNeededForRoutines(type));
  if (type.equals(ERepositoryObjectType.ROUTINES)) {
    codesModules.addAll(collectModuleNeeded(new ArrayList<IRepositoryViewObject>(),new HashSet<String>(),true));
  }
  return codesModules;
}","public static Set<ModuleNeeded> getCodesModuleNeededs(ERepositoryObjectType type){
  if (type == null) {
    return Collections.emptySet();
  }
  Set<ModuleNeeded> codesModules=new HashSet<ModuleNeeded>();
  codesModules.addAll(getModulesNeededForRoutines(type));
  if (type.equals(ERepositoryObjectType.ROUTINES)) {
    codesModules.addAll(collectModuleNeeded(new ArrayList<IRepositoryViewObject>(),new HashSet<String>(),true));
  }
  return codesModules;
}",0.95947426067908
126079,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9996258485221016
126080,"private void collectHiveContextParams(){
  if (isHiveDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.NameNode,useHadoopRepositoryParam());
    addContextParams(EDBParamName.JobTrackerOrResourceManager,useHadoopRepositoryParam());
    addContextParams(EDBParamName.Password,!isHiveEmbeddedMode());
    addContextParams(EDBParamName.HivePrincipal,isCurrentDbSupportAuthentication() && useKerberos.getSelection());
    addContextParams(EDBParamName.HiveMetastore,hasAuthentication());
    addContextParams(EDBParamName.HiveDriverJar,hasAuthentication());
    addContextParams(EDBParamName.HiveDriveClass,hasAuthentication());
    addContextParams(EDBParamName.HiveUserName,hasAuthentication());
    addContextParams(EDBParamName.HivePassword,hasAuthentication());
    addContextParams(EDBParamName.HiveKeyTabPrincipal,hasAuthentication() && useKeyTab.getSelection());
    addContextParams(EDBParamName.HiveKeyTab,hasAuthentication() && useKeyTab.getSelection());
  }
}","private void collectHiveContextParams(){
  if (isHiveDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.NameNode,useHadoopRepositoryParam());
    addContextParams(EDBParamName.JobTrackerOrResourceManager,useHadoopRepositoryParam());
    addContextParams(EDBParamName.Password,!isHiveEmbeddedMode());
    addContextParams(EDBParamName.HivePrincipal,isCurrentDbSupportAuthentication() && useKerberos.getSelection());
    addContextParams(EDBParamName.HiveMetastore,hasAuthentication());
    addContextParams(EDBParamName.HiveDriverJar,hasAuthentication());
    addContextParams(EDBParamName.HiveDriveClass,hasAuthentication());
    addContextParams(EDBParamName.HiveUserName,hasAuthentication());
    addContextParams(EDBParamName.HivePassword,hasAuthentication());
    addContextParams(EDBParamName.HiveKeyTabPrincipal,isCurrentDbSupportAuthentication() && useKerberos.getSelection() && useKeyTab.getSelection());
    addContextParams(EDBParamName.HiveKeyTab,isCurrentDbSupportAuthentication() && useKerberos.getSelection() && useKeyTab.getSelection());
  }
}",0.9588377723970944
126081,"@SuppressWarnings(""String_Node_Str"") private static ClassLoader getCustomClassLoader(String index,Object customJars,boolean showDownloadIfNotExist){
  if (customJars instanceof Set) {
    return ClassLoaderFactory.getCustomClassLoader(index,(Set<String>)customJars);
  }
  return ClassLoaderFactory.getCustomClassLoader(index,String.valueOf(customJars));
}","@SuppressWarnings(""String_Node_Str"") private static synchronized ClassLoader getCustomClassLoader(String index,Object customJars,boolean showDownloadIfNotExist){
  if (customJars instanceof Set) {
    return ClassLoaderFactory.getCustomClassLoader(index,(Set<String>)customJars);
  }
  return ClassLoaderFactory.getCustomClassLoader(index,String.valueOf(customJars));
}",0.9820689655172414
126082,"private static ClassLoader getClassLoader(String index,Object extraJars,boolean showDownloadIfNotExist){
  ClassLoader loader=null;
  if (index.startsWith(EHadoopCategory.CUSTOM.getName())) {
    loader=getCustomClassLoader(index,extraJars,showDownloadIfNotExist);
  }
 else {
    loader=ClassLoaderFactory.getClassLoader(index,showDownloadIfNotExist);
  }
  if (loader == null) {
    loader=HadoopClassLoaderFactory2.class.getClassLoader();
  }
  return loader;
}","private static synchronized ClassLoader getClassLoader(String index,Object extraJars,boolean showDownloadIfNotExist){
  ClassLoader loader=null;
  if (index.startsWith(EHadoopCategory.CUSTOM.getName())) {
    loader=getCustomClassLoader(index,extraJars,showDownloadIfNotExist);
  }
 else {
    loader=ClassLoaderFactory.getClassLoader(index,showDownloadIfNotExist);
  }
  if (loader == null) {
    loader=HadoopClassLoaderFactory2.class.getClassLoader();
  }
  return loader;
}",0.9861849096705632
126083,"private void synDuplicatedBean(Item item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createCamelBeanSynchronizer().renameBeanClass(item);
    try {
      codeGenService.createCamelBeanSynchronizer().syncBean(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void synDuplicatedBean(Item item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createCamelBeanSynchronizer().renameBeanClass(item);
    try {
      codeGenService.createCamelBeanSynchronizer().syncRoutine((RoutineItem)item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9717391304347828
126084,"private void synDuplicatedBean(Item item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createCamelBeanSynchronizer().renameBeanClass(item);
    try {
      codeGenService.createCamelBeanSynchronizer().syncBean(item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void synDuplicatedBean(Item item){
  ICodeGeneratorService codeGenService=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  if (codeGenService != null) {
    codeGenService.createCamelBeanSynchronizer().renameBeanClass(item);
    try {
      codeGenService.createCamelBeanSynchronizer().syncRoutine((RoutineItem)item,true);
    }
 catch (    SystemException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9717391304347828
126085,"protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            IEditorInput nameInEditor=editors.getEditorInput();
            if (isRelation(nameInEditor,objToDelete.getId())) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}","protected void deleteElements(final IProxyRepositoryFactory factory,final RepositoryNode currentNode) throws PersistenceException, BusinessException {
  if (!validElement(currentNode)) {
    return;
  }
  final IRepositoryViewObject objToDelete=currentNode.getObject();
  if (objToDelete == null) {
    return;
  }
  if (objToDelete instanceof ISubRepositoryObject) {
    ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)objToDelete;
    if (!isRootNodeDeleted(currentNode)) {
      Item item=subRepositoryObject.getProperty().getItem();
      subRepositoryObject.removeFromParent();
      if (item instanceof ConnectionItem) {
        ProxyRepositoryFactory.getInstance().setSubItemDeleted((ConnectionItem)item,subRepositoryObject.getAbstractMetadataObject(),true);
      }
      factory.save(item);
    }
  }
 else {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        try {
          IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
          for (          IEditorReference editors : page.getEditorReferences()) {
            IEditorInput nameInEditor=editors.getEditorInput();
            if (isRelation(nameInEditor,objToDelete.getId())) {
              page.closeEditor(editors.getEditor(false),false);
            }
          }
          if (objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOB_DOC && objToDelete.getRepositoryObjectType() != ERepositoryObjectType.JOBLET_DOC) {
            if (currentNode.getType() == ENodeType.SIMPLE_FOLDER) {
              for (              IRepositoryNode curNode : currentNode.getChildren()) {
                deleteElements(factory,(RepositoryNode)curNode);
              }
              factory.deleteFolder(ProjectManager.getInstance().getCurrentProject(),currentNode.getContentType(),RepositoryNodeUtilities.getFolderPath(currentNode.getObject().getProperty().getItem()),true);
            }
 else {
              for (              IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
                handler.deleteNode(objToDelete);
              }
              ERepositoryObjectType nodeType=(ERepositoryObjectType)currentNode.getProperties(EProperties.CONTENT_TYPE);
              if (nodeType == ERepositoryObjectType.ROUTINES || nodeType == ERepositoryObjectType.PIG_UDF) {
                forceBuild=true;
              }
              if (!forceBuild) {
                if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
                  ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
                  if (nodeType == camelService.getBeansType()) {
                    forceBuild=true;
                  }
                }
              }
              factory.deleteObjectPhysical(ProjectManager.getInstance().getCurrentProject(),objToDelete,null,true);
            }
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
}",0.968590692320342
126086,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  if (resource.getType() == IResource.ROOT) {
    return true;
  }
 else   if (resource.getType() == IResource.PROJECT) {
    try {
      if (resource.getProject().hasNature(TalendNature.ID)) {
        if (!ProjectManager.getInstance().getCurrentProject().getTechnicalLabel().equals(resource.getProject().getName())) {
          return false;
        }
        return true;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (resource.getType() == IResource.FOLDER) {
    return false;
  }
 else   if (resource.getType() == IResource.FILE) {
    if (resource.getName().equals(RecycleBinManager.TALEND_RECYCLE_BIN_INDEX) || resource.getName().equals(FileConstants.LOCAL_PROJECT_FILENAME)) {
      if (viewer != null && viewer.getControl() != null && !viewer.getTree().isDisposed()) {
        viewer.getControl().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            viewer.refresh(binRepositoryNode);
          }
        }
);
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  if (resource.getType() == IResource.ROOT) {
    return true;
  }
 else   if (resource.getType() == IResource.PROJECT) {
    if (!resource.getProject().isOpen()) {
      return false;
    }
    try {
      if (resource.getProject().hasNature(TalendNature.ID)) {
        if (!ProjectManager.getInstance().getCurrentProject().getTechnicalLabel().equals(resource.getProject().getName())) {
          return false;
        }
        return true;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (resource.getType() == IResource.FOLDER) {
    return false;
  }
 else   if (resource.getType() == IResource.FILE) {
    if (resource.getName().equals(RecycleBinManager.TALEND_RECYCLE_BIN_INDEX) || resource.getName().equals(FileConstants.LOCAL_PROJECT_FILENAME)) {
      if (viewer != null && viewer.getControl() != null && !viewer.getTree().isDisposed()) {
        viewer.getControl().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            viewer.refresh(binRepositoryNode);
          }
        }
);
      }
    }
  }
  return false;
}",0.9714993804213136
126087,"private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    String[] versionPrefix=new String[]{distribution};
    if (HiveConnVersionInfo.AMAZON_EMR.getKey().equals(distribution)) {
      versionPrefix=(String[])ArrayUtils.add(versionPrefix,version);
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=HadoopDefaultConfsManager.getInstance().getDefaultConfValue((String[])ArrayUtils.add(versionPrefix,EHadoopProperties.NAMENODE_URI.getName()));
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=HadoopDefaultConfsManager.getInstance().getDefaultConfValue((String[])ArrayUtils.add(versionPrefix,EHadoopProperties.RESOURCE_MANAGER.getName()));
    }
 else {
      defaultJTORRM=HadoopDefaultConfsManager.getInstance().getDefaultConfValue((String[])ArrayUtils.add(versionPrefix,EHadoopProperties.JOBTRACKER.getName()));
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
    }
  }
}","private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    String[] versionPrefix=new String[]{distribution};
    if (HiveConnVersionInfo.AMAZON_EMR.getKey().equals(distribution)) {
      versionPrefix=(String[])ArrayUtils.add(versionPrefix,version);
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=HadoopDefaultConfsManager.getInstance().getDefaultConfValue((String[])ArrayUtils.add(versionPrefix,EHadoopProperties.NAMENODE_URI.getName()));
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=HadoopDefaultConfsManager.getInstance().getDefaultConfValue((String[])ArrayUtils.add(versionPrefix,EHadoopProperties.RESOURCE_MANAGER.getName()));
    }
 else {
      defaultJTORRM=HadoopDefaultConfsManager.getInstance().getDefaultConfValue((String[])ArrayUtils.add(versionPrefix,EHadoopProperties.JOBTRACKER.getName()));
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
  }
}",0.9914436555616238
126088,"protected void initializeConnectionParameters(DatabaseConnection connection){
  EMap<String,String> parameters=connection.getParameters();
  if (connection.getDatabaseType() == null) {
    connection.setDatabaseType(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE));
  }
  String productId=connection.getProductId();
  if (productId == null) {
    connection.setProductId(productId=parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PRODUCT));
    String mapping=null;
    if (MetadataTalendType.getDefaultDbmsFromProduct(productId) != null) {
      mapping=MetadataTalendType.getDefaultDbmsFromProduct(productId).getId();
    }
    if (mapping == null) {
      mapping=""String_Node_Str"";
    }
    connection.setDbmsId(mapping);
  }
  if (connection.getServerName() == null) {
    connection.setServerName(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER));
  }
  if (connection.getPort() == null) {
    connection.setPort(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PORT));
  }
  if (connection.getUsername() == null) {
    connection.setUsername(parameters.get(ConnParameterKeys.CONN_PARA_KEY_USERNAME));
  }
}","protected void initializeConnectionParameters(Connection conn){
  if (!(conn instanceof DatabaseConnection)) {
    return;
  }
  DatabaseConnection connection=(DatabaseConnection)conn;
  EMap<String,String> parameters=connection.getParameters();
  if (connection.getDatabaseType() == null) {
    connection.setDatabaseType(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE));
  }
  String productId=connection.getProductId();
  if (productId == null) {
    connection.setProductId(productId=parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PRODUCT));
    String mapping=null;
    if (MetadataTalendType.getDefaultDbmsFromProduct(productId) != null) {
      mapping=MetadataTalendType.getDefaultDbmsFromProduct(productId).getId();
    }
    if (mapping == null) {
      mapping=""String_Node_Str"";
    }
    connection.setDbmsId(mapping);
  }
  if (connection.getServerName() == null) {
    connection.setServerName(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER));
  }
  if (connection.getPort() == null) {
    connection.setPort(parameters.get(ConnParameterKeys.CONN_PARA_KEY_DB_PORT));
  }
  if (connection.getUsername() == null) {
    connection.setUsername(parameters.get(ConnParameterKeys.CONN_PARA_KEY_USERNAME));
  }
}",0.944795617361989
126089,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    DeleteActionCache.getInstance().revertParameters();
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(true,true,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
  DeleteActionCache.getInstance().revertParameters();
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  final RepositoryNode node=(RepositoryNode)obj;
  final String title=Messages.getString(""String_Node_Str"");
  String message=null;
  List<IRepositoryNode> originalChildren=node.getChildren();
  final List<IRepositoryNode> children=new ArrayList<IRepositoryNode>(originalChildren);
  if (children.size() == 0) {
    return;
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    List<IRepositoryNode> dependentNodes=resChangeService.getDependentConnNodesInRecycleBin(children);
    if (dependentNodes != null && !dependentNodes.isEmpty()) {
      resChangeService.openDependcesDialog(dependentNodes);
      return;
    }
  }
  if (children.size() > 1) {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
 else {
    message=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
  }
  final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(children,null);
  final Shell shell=getShell();
  if (!(MessageDialog.openQuestion(shell,title,message))) {
    DeleteActionCache.getInstance().revertParameters();
    return;
  }
  for (  IRepositoryNode child : children) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (!tdqRepService.removeAliasInSQLExplorer(child)) {
        MessageDialog.openWarning(shell,title,Messages.getString(""String_Node_Str""));
        try {
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          factory.saveProject(ProjectManager.getInstance().getCurrentProject());
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
        return;
      }
    }
  }
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      for (      IRepositoryNode child : children) {
        try {
          deleteElements(factory,(RepositoryNode)child);
        }
 catch (        Exception e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,true,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  if (unDeleteItems.size() > 0) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
        dialog.open();
      }
    }
);
  }
  DeleteActionCache.getInstance().revertParameters();
}",0.9991298943443132
126090,"/** 
 * Attempts to return the default shell. If it cannot return the default shell, it returns the shell of the first workbench window that has shell.
 * @return The shell
 * @since 1.2
 */
public static Shell getDefaultShell(){
  Shell shell=null;
  try {
    shell=Display.getDefault().getActiveShell();
  }
 catch (  Exception e) {
  }
  try {
    if (shell == null) {
      IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWindow != null)       shell=activeWindow.getShell();
    }
  }
 catch (  Exception e) {
  }
  if (shell == null) {
    IWorkbenchWindow[] windows=PlatformUI.getWorkbench().getWorkbenchWindows();
    for (int i=0; shell == null && i < windows.length; i++) {
      shell=windows[i].getShell();
    }
  }
  return shell;
}","/** 
 * Attempts to return the default shell. If it cannot return the default shell, it returns the shell of the first workbench window that has shell.
 * @return The shell
 * @since 1.2
 */
public static Shell getDefaultShell(){
  Shell shell=null;
  try {
    shell=Display.getDefault().getActiveShell();
  }
 catch (  Exception e) {
  }
  try {
    if (shell == null) {
      if (!PlatformUI.isWorkbenchRunning()) {
        return new Shell();
      }
      IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWindow != null) {
        shell=activeWindow.getShell();
      }
    }
  }
 catch (  Exception e) {
  }
  if (shell == null) {
    if (!PlatformUI.isWorkbenchRunning()) {
      return new Shell();
    }
    IWorkbenchWindow[] windows=PlatformUI.getWorkbench().getWorkbenchWindows();
    for (int i=0; shell == null && i < windows.length; i++) {
      shell=windows[i].getShell();
    }
  }
  return shell;
}",0.6795016987542469
126091,"/** 
 * Clear the event queue
 * @since 1.2
 */
public static void clearEventLoop(){
  while (getDisplay().readAndDispatch())   ;
}","/** 
 * Clear the event queue
 * @since 1.2
 */
public static void clearEventLoop(){
  while (getDisplay().readAndDispatch()) {
    ;
  }
}",0.9703703703703704
126092,"/** 
 * Returns a non-null instance of Display object. Tries to find the Display object for the current thread first and if it fails tries to get: <li> Workbench display if the workbench running <li> Default display object
 * @return non-null Display object
 * @since 1.2
 */
public static Display getDisplay(){
  Display display=Display.getCurrent();
  if (display == null && PlatformUI.isWorkbenchRunning()) {
    display=PlatformUI.getWorkbench().getDisplay();
  }
  return display != null ? display : Display.getDefault();
}","/** 
 * Returns a non-null instance of Display object. Tries to find the Display object for the current thread first and if it fails tries to get: <li>Workbench display if the workbench running <li>Default display object
 * @return non-null Display object
 * @since 1.2
 */
public static Display getDisplay(){
  Display display=Display.getCurrent();
  if (display == null && PlatformUI.isWorkbenchRunning()) {
    display=PlatformUI.getWorkbench().getDisplay();
  }
  return display != null ? display : Display.getDefault();
}",0.9981024667931688
126093,"@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  String parentId=getJobProcessor().getProperty().getId();
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null && child.getFatherJobInfo().getJobId().equals(parentId)) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}",0.984153231362822
126094,"/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=context.getName();
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),contextName,isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN),isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATISTICS));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else         if (value.contains(""String_Node_Str"")) {
          contextParamPart.append(TalendQuoteUtils.addQuotesIfNotExist(value));
        }
 else {
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,windowsScriptAdditionValue.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,unixScriptAdditionValue.toString());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}","/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=context.getName();
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),contextName,isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN),isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATISTICS));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else         if (value.contains(""String_Node_Str"")) {
          contextParamPart.append(TalendQuoteUtils.addQuotesIfNotExist(value));
        }
 else {
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  String[] jvmArgs=jProcessor.getJVMArgs();
  StringBuffer jvmArgsStr=new StringBuffer();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg);
      jvmArgsStr.append(' ');
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobJvmArgs,jvmArgsStr.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,windowsScriptAdditionValue.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,unixScriptAdditionValue.toString());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}",0.9625101274213744
126095,"public boolean CheckConvertProcess(RepositoryNode sourceNode,RepositoryNode targetNode){
  boolean checkConvertProcess=false;
  if (sourceNode.getObject().getRepositoryObjectType() == ERepositoryObjectType.PROCESS || sourceNode.getObject().getRepositoryObjectType() == ERepositoryObjectType.PROCESS_STORM || sourceNode.getObject().getRepositoryObjectType() == ERepositoryObjectType.PROCESS_MR) {
    if (ENodeType.SYSTEM_FOLDER == targetNode.getType() || ENodeType.SIMPLE_FOLDER == targetNode.getType()) {
      if (targetNode.getContentType() == ERepositoryObjectType.PROCESS || targetNode.getContentType() == ERepositoryObjectType.PROCESS_STORM || targetNode.getContentType() == ERepositoryObjectType.PROCESS_MR) {
        checkConvertProcess=true;
      }
    }
  }
  return checkConvertProcess;
}","public boolean CheckConvertProcess(RepositoryNode sourceNode,RepositoryNode targetNode){
  boolean checkConvertProcess=false;
  if (sourceNode.getObject().getRepositoryObjectType() == ERepositoryObjectType.PROCESS || sourceNode.getObject().getRepositoryObjectType() == ERepositoryObjectType.PROCESS_STORM || sourceNode.getObject().getRepositoryObjectType() == ERepositoryObjectType.PROCESS_MR) {
    if (ENodeType.SYSTEM_FOLDER == targetNode.getType() || ENodeType.SIMPLE_FOLDER == targetNode.getType()) {
      if (sourceNode.getObject().getRepositoryObjectType() == targetNode.getContentType()) {
        return false;
      }
      if (targetNode.getContentType() == ERepositoryObjectType.PROCESS || targetNode.getContentType() == ERepositoryObjectType.PROCESS_STORM || targetNode.getContentType() == ERepositoryObjectType.PROCESS_MR) {
        checkConvertProcess=true;
      }
    }
  }
  return checkConvertProcess;
}",0.9286128845037724
126096,"/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 * @return
 */
@Override protected boolean checkFieldsValue(){
  if (isContextMode()) {
    return true;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(false);
  if (""String_Node_Str"".equals(fieldSeparatorText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!fieldSeparatorText.getText().equals(TalendQuoteUtils.addQuotes(getValidateFieldSeparator(fieldSeparatorText.getText())))) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (""String_Node_Str"".equals(rowSeparatorText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (rowSeparatorText.getText().equals(""String_Node_Str"") || rowSeparatorText.getText().endsWith(""String_Node_Str"")) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    if (labelledCheckboxCombo.getCheckbox().getSelection()) {
      if (labelledCheckboxCombo.getText() == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,labelledCheckboxCombo.getLabelText() + ""String_Node_Str"" + Messages.getString(""String_Node_Str""));
        return false;
      }
    }
  }
  previewInformationLabel.setText(""String_Node_Str"");
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(true);
  return true;
}","/** 
 * Ensures that fields are set. Update checkEnable / use to checkConnection().
 * @return
 */
@Override protected boolean checkFieldsValue(){
  if (isContextMode()) {
    updateStatus(IStatus.OK,null);
    return true;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(false);
  if (""String_Node_Str"".equals(fieldSeparatorText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!fieldSeparatorText.getText().equals(TalendQuoteUtils.addQuotes(getValidateFieldSeparator(fieldSeparatorText.getText())))) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (""String_Node_Str"".equals(rowSeparatorText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (rowSeparatorText.getText().equals(""String_Node_Str"") || rowSeparatorText.getText().endsWith(""String_Node_Str"")) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    if (labelledCheckboxCombo.getCheckbox().getSelection()) {
      if (labelledCheckboxCombo.getText() == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,labelledCheckboxCombo.getLabelText() + ""String_Node_Str"" + Messages.getString(""String_Node_Str""));
        return false;
      }
    }
  }
  previewInformationLabel.setText(""String_Node_Str"");
  updateStatus(IStatus.OK,null);
  previewButton.setEnabled(true);
  return true;
}",0.9917002608489448
126097,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (super.isVisible()) {
    try {
      populateLDAPSchemaAttributes();
    }
 catch (    Exception e) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    attributeModel.registerDataList(itemTableNameList);
    EList attributeValueList=getConnection().getValue();
    if (attributeValueList != null && !attributeValueList.isEmpty()) {
      refreshPreview();
      checkTheRightAttributes(attributeValueList);
    }
    if (isReadOnly() != readOnly) {
      adaptFormToReadOnly();
    }
    initialize();
    adaptFormToEditable();
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (super.isVisible()) {
    try {
      populateLDAPSchemaAttributes();
    }
 catch (    Exception e) {
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),e.getMessage());
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    }
    attributeModel.registerDataList(itemTableNameList);
    EList attributeValueList=getConnection().getValue();
    boolean isRefreshingPreview=false;
    if (attributeValueList != null && !attributeValueList.isEmpty()) {
      isRefreshingPreview=true;
      refreshPreview();
      checkTheRightAttributes(attributeValueList);
    }
    if (isReadOnly() != readOnly) {
      adaptFormToReadOnly();
    }
    initialize();
    adaptFormToEditable();
    if (isRefreshingPreview && processor != null && !processor.isStopped()) {
      updateStatus(IStatus.ERROR,null);
    }
  }
}",0.8974224092582851
126098,"/** 
 * DOC nrousseau Comment method ""getFolder"".
 * @param repositoryObjectType
 * @param path
 * @return
 */
private RepositoryNode getFolder(ERepositoryObjectType currentType,String path,List<IRepositoryNode> rootNodes){
  if (path == null || path.isEmpty()) {
    return null;
  }
  RepositoryNode folderNode=null;
  String folderName;
  String remainingPath=path;
  if (path.contains(""String_Node_Str"")) {
    folderName=path.substring(0,path.indexOf(""String_Node_Str""));
    remainingPath=path.substring(path.indexOf(""String_Node_Str"") + 1);
  }
 else {
    folderName=path;
    remainingPath=null;
  }
  for (  IRepositoryNode node : rootNodes) {
    if (node.getType() == ENodeType.SIMPLE_FOLDER && node.getProperties(EProperties.CONTENT_TYPE).equals(currentType)) {
      if (node.getProperties(EProperties.LABEL).equals(folderName)) {
        folderNode=(RepositoryNode)node;
        break;
      }
      if (remainingPath != null && node.getObject().getPath() != null && !node.getObject().getPath().isEmpty()) {
        String fullPath=node.getObject().getPath() + ""String_Node_Str"" + node.getProperties(EProperties.LABEL);
        if (fullPath.equals(path)) {
          folderNode=(RepositoryNode)node;
          remainingPath=null;
        }
 else         if (path.startsWith(fullPath)) {
          folderNode=(RepositoryNode)node;
          remainingPath=path.substring(fullPath.length() + 1);
        }
        break;
      }
    }
  }
  if (folderNode != null) {
    if (remainingPath == null) {
      return folderNode;
    }
    return getFolder(currentType,remainingPath,folderNode.getChildren());
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getFolder"".
 * @param repositoryObjectType
 * @param path
 * @return
 */
private RepositoryNode getFolder(ERepositoryObjectType currentType,String path,List<IRepositoryNode> rootNodes){
  if (path == null || path.isEmpty()) {
    return null;
  }
  RepositoryNode folderNode=null;
  String folderName;
  String remainingPath=path;
  if (path.contains(""String_Node_Str"")) {
    folderName=path.substring(0,path.indexOf(""String_Node_Str""));
    remainingPath=path.substring(path.indexOf(""String_Node_Str"") + 1);
  }
 else {
    folderName=path;
    remainingPath=null;
  }
  for (  IRepositoryNode node : rootNodes) {
    if (node.getType() == ENodeType.SIMPLE_FOLDER && node.getProperties(EProperties.CONTENT_TYPE).equals(currentType)) {
      if (node.getProperties(EProperties.LABEL).equals(folderName)) {
        folderNode=(RepositoryNode)node;
        break;
      }
      if (remainingPath != null && node.getObject().getPath() != null && !node.getObject().getPath().isEmpty()) {
        String fullPath=node.getObject().getPath() + ""String_Node_Str"" + node.getProperties(EProperties.LABEL);
        if (fullPath.equals(path)) {
          folderNode=(RepositoryNode)node;
          remainingPath=null;
          break;
        }
 else         if (path.startsWith(fullPath)) {
          folderNode=(RepositoryNode)node;
          remainingPath=path.substring(fullPath.length() + 1);
          break;
        }
      }
    }
  }
  if (folderNode != null) {
    if (remainingPath == null) {
      return folderNode;
    }
    return getFolder(currentType,remainingPath,folderNode.getChildren());
  }
  return null;
}",0.9851199514120862
126099,"public List<IRepositoryViewObject> getDeletedObjects(Project project){
  loadRecycleBin(project);
  List<IRepositoryViewObject> deletedObjects=new ArrayList<IRepositoryViewObject>();
  for (  TalendItem deletedItem : projectRecyclebins.get(project.getTechnicalLabel()).getDeletedItems()) {
    try {
      IRepositoryViewObject object=ProxyRepositoryFactory.getInstance().getLastVersion(project,deletedItem.getId(),deletedItem.getPath(),ERepositoryObjectType.getType(deletedItem.getType()));
      deletedObjects.add(object);
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return deletedObjects;
}","public List<IRepositoryViewObject> getDeletedObjects(Project project){
  loadRecycleBin(project);
  List<IRepositoryViewObject> deletedObjects=new ArrayList<IRepositoryViewObject>();
  for (  TalendItem deletedItem : projectRecyclebins.get(project.getTechnicalLabel()).getDeletedItems()) {
    try {
      IRepositoryViewObject object=ProxyRepositoryFactory.getInstance().getLastVersion(project,deletedItem.getId(),deletedItem.getPath(),ERepositoryObjectType.getType(deletedItem.getType()));
      if (object == null) {
        object=ProxyRepositoryFactory.getInstance().getLastVersion(project,deletedItem.getId());
      }
      if (object != null) {
        deletedObjects.add(object);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return deletedObjects;
}",0.8823124569855472
126100,"public static String getUpdateJobInfor(Property property){
  StringBuffer infor=new StringBuffer();
  String prefix=UpdatesConstants.JOB;
  String label=null;
  String version=null;
  if (property.getItem() instanceof JobletProcessItem) {
    prefix=UpdatesConstants.JOBLET;
  }
 else   if (GlobalServiceRegister.getDefault().isServiceRegistered(IMRProcessService.class)) {
    IMRProcessService mrProcessService=(IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class);
    if (mrProcessService.isMapReduceItem(property.getItem())) {
      prefix=UpdatesConstants.MAPREDUCE;
    }
  }
  label=property.getLabel();
  version=property.getVersion();
  infor.append(prefix);
  if (label != null) {
    infor.append(UpdatesConstants.SPACE);
    infor.append(label);
    infor.append(UpdatesConstants.SPACE);
    infor.append(version);
  }
  return infor.toString();
}","public static String getUpdateJobInfor(Property property){
  StringBuffer infor=new StringBuffer();
  String prefix=""String_Node_Str"";
  String label=null;
  String version=null;
  if (property.getItem() instanceof JobletProcessItem) {
    prefix=UpdatesConstants.JOBLET;
  }
  Item item=property.getItem();
  if (item != null && prefix.isEmpty() && GlobalServiceRegister.getDefault().isServiceRegistered(IMRProcessService.class)) {
    IMRProcessService mrProcessService=(IMRProcessService)GlobalServiceRegister.getDefault().getService(IMRProcessService.class);
    if (mrProcessService.isMapReduceItem(item)) {
      Object framework=BigDataBasicUtil.getFramework(item);
      if (framework != null) {
        if (HadoopConstants.FRAMEWORK_SPARK.equals(framework)) {
          prefix=UpdatesConstants.SPARK;
        }
      }
      if (prefix == null || prefix.isEmpty()) {
        prefix=UpdatesConstants.MAPREDUCE;
      }
    }
  }
  if (item != null && prefix.isEmpty() && GlobalServiceRegister.getDefault().isServiceRegistered(IStormProcessService.class)) {
    IStormProcessService stormProcessService=(IStormProcessService)GlobalServiceRegister.getDefault().getService(IStormProcessService.class);
    if (stormProcessService.isStormItem(item)) {
      Object framework=BigDataBasicUtil.getFramework(item);
      if (framework != null) {
        if (HadoopConstants.FRAMEWORK_SPARKSTREAMING.equals(framework)) {
          prefix=UpdatesConstants.SPARKSTREAMING;
        }
      }
      if (prefix == null || prefix.isEmpty()) {
        prefix=UpdatesConstants.STORM;
      }
    }
  }
  if (prefix == null || prefix.isEmpty()) {
    prefix=UpdatesConstants.JOB;
  }
  label=property.getLabel();
  version=property.getVersion();
  infor.append(prefix);
  if (label != null) {
    infor.append(UpdatesConstants.SPACE);
    infor.append(label);
    infor.append(UpdatesConstants.SPACE);
    infor.append(version);
  }
  return infor.toString();
}",0.5969101123595506
126101,"/** 
 * show the cheet sheet view.
 */
private void restoreCheetSheet(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CheatSheetView view=ViewUtilities.showCheatSheetView();
      IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
      if (null != view) {
        if (null != cheetSheetID) {
          view.setInput(cheetSheetID);
        }
 else {
          view.setInput(DQ_CHEATSHEET_START_ID);
        }
        CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
      }
      if (null != activePart) {
        activePart.setFocus();
      }
    }
  }
);
}","/** 
 * show the cheet sheet view.
 */
private void restoreCheetSheet(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      CheatSheetView view=ViewUtilities.showCheatSheetView();
      IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
      if (null != view) {
        if (null != cheetSheetID) {
          view.setInput(cheetSheetID);
        }
 else {
          view.setInput(DQ_CHEATSHEET_START_ID);
        }
        if (CheatSheetUtils.getInstance().isFirstTime()) {
          CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
        }
      }
      if (null != activePart) {
        activePart.setFocus();
      }
    }
  }
);
}",0.9493941553813258
126102,"public void run(){
  CheatSheetView view=ViewUtilities.showCheatSheetView();
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (null != view) {
    if (null != cheetSheetID) {
      view.setInput(cheetSheetID);
    }
 else {
      view.setInput(DQ_CHEATSHEET_START_ID);
    }
    CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
  }
  if (null != activePart) {
    activePart.setFocus();
  }
}","public void run(){
  CheatSheetView view=ViewUtilities.showCheatSheetView();
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (null != view) {
    if (null != cheetSheetID) {
      view.setInput(cheetSheetID);
    }
 else {
      view.setInput(DQ_CHEATSHEET_START_ID);
    }
    if (CheatSheetUtils.getInstance().isFirstTime()) {
      CheatSheetUtils.getInstance().maxDisplayCheatSheetView(view);
    }
  }
  if (null != activePart) {
    activePart.setFocus();
  }
}",0.9378084896347484
126103,"/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  if (isFirstTime() && !PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName())) {
    view.getSite().getPage().toggleZoom(((PartSite)view.getSite()).getPartReference());
    view.setFocus();
    setFirstTime(false);
    PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  }
}","/** 
 * maximum display CheatSheetView.
 * @param view
 */
public void maxDisplayCheatSheetView(CheatSheetView view){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  activePage.setEditorAreaVisible(true);
  for (  IViewReference ref : activePage.getViewReferences()) {
    if (view.equals(ref.getView(false))) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MAXIMIZED);
      activePage.bringToTop(ref.getView(false));
    }
 else {
      activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
    }
  }
  for (  IEditorReference ref : activePage.getEditorReferences()) {
    activePage.setPartState(ref,IWorkbenchPage.STATE_MINIMIZED);
  }
  PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getSimpleName(),true);
  setFirstTime(!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getSimpleName()));
}",0.3165791447861965
126104,"/** 
 * DOC amaumont Comment method ""createPreview"".
 * @param configurationElements
 * @return
 * @throws CoreException
 */
private static IPreview createPreview(String type) throws CoreException {
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  forceStopPreview();
  IPreview preview=null;
  if (configurationElements.length > 0) {
    preview=(IPreview)configurationElements[0].createExecutableExtension(""String_Node_Str"");
  }
  for (  IConfigurationElement configurationElement : configurationElements) {
    if (type != null && !type.isEmpty()) {
      String fileType=configurationElement.getAttribute(""String_Node_Str"");
      if (fileType == null || fileType.isEmpty() || !fileType.equals(type)) {
        continue;
      }
    }
    IPreview pre=(IPreview)configurationElement.createExecutableExtension(""String_Node_Str"");
    if (!PluginChecker.isOnlyTopLoaded() && !pre.isTopPreview()) {
      preview=pre;
    }
  }
  if (preview == null) {
    log.error(Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str""));
  }
  currentPreview=preview;
  return preview;
}","/** 
 * DOC amaumont Comment method ""createPreview"".
 * @param configurationElements
 * @return
 * @throws CoreException
 */
private static IPreview createPreview(String type) throws CoreException {
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IConfigurationElement[] configurationElements=registry.getConfigurationElementsFor(""String_Node_Str"");
  forceStopPreview();
  IPreview preview=null;
  if (configurationElements.length > 0) {
    preview=(IPreview)configurationElements[0].createExecutableExtension(""String_Node_Str"");
  }
  for (  IConfigurationElement configurationElement : configurationElements) {
    String fileType=configurationElement.getAttribute(""String_Node_Str"");
    if (type == null && fileType != null) {
      continue;
    }
 else     if (type != null) {
      if (fileType == null) {
        continue;
      }
 else       if (!fileType.equals(type)) {
        continue;
      }
    }
    IPreview pre=(IPreview)configurationElement.createExecutableExtension(""String_Node_Str"");
    if (!PluginChecker.isOnlyTopLoaded() && !pre.isTopPreview()) {
      preview=pre;
    }
  }
  if (preview == null) {
    log.error(Messages.getString(""String_Node_Str"") + Messages.getString(""String_Node_Str""));
  }
  currentPreview=preview;
  return preview;
}",0.6345157433240335
126105,"/** 
 * Show the dialog to the user (if needed). When this method finishes, #getSelection will return the workspace that should be used (whether it was just selected by the user or some previous default has been used. The parameter can be used to override the users preference. For example, this is important in cases where the default selection is already in use and the user is forced to choose a different one.
 * @param force true if the dialog should be opened regardless of the value of the show dialog checkbox
 */
public void prompt(boolean force){
  if (force || launchData.getShowDialog()) {
    open();
    if (getReturnCode() == CANCEL) {
      launchData.workspaceSelected(null);
    }
    return;
  }
  String[] recent=launchData.getRecentWorkspaces();
  String workspace=null;
  if (recent != null && recent.length > 0) {
    workspace=recent[0];
  }
  if (workspace == null || workspace.length() == 0) {
    workspace=launchData.getInitialDefault();
  }
  launchData.workspaceSelected(TextProcessor.deprocess(workspace));
}","/** 
 * Show the dialog to the user (if needed). When this method finishes, #getSelection will return the workspace that should be used (whether it was just selected by the user or some previous default has been used. The parameter can be used to override the users preference. For example, this is important in cases where the default selection is already in use and the user is forced to choose a different one.
 * @param force true if the dialog should be opened regardless of the value of the show dialog checkbox
 */
public void prompt(boolean force){
  if (force || shouldShowDialog()) {
    open();
    if (getReturnCode() == CANCEL) {
      launchData.workspaceSelected(null);
    }
    return;
  }
  String[] recent=launchData.getRecentWorkspaces();
  String workspace=null;
  if (recent != null && recent.length > 0) {
    workspace=recent[0];
  }
  if (workspace == null || workspace.length() == 0) {
    workspace=launchData.getInitialDefault();
  }
  launchData.workspaceSelected(TextProcessor.deprocess(workspace));
}",0.9903381642512076
126106,"/** 
 * Open a workspace selection dialog on the argument shell, populating the argument data with the user's selection. Perform first level validation on the selection by comparing the version information. This method does not examine the runtime state (e.g., is the workspace already locked?).
 * @param shell
 * @param launchData
 * @param force setting to true makes the dialog open regardless of the showDialog value
 * @return An URL storing the selected workspace or null if the user has canceled the launch operation.
 */
private URL promptForWorkspace(Shell shell,ChooseWorkspaceData launchData,boolean force){
  URL url=null;
  boolean doForce=force;
  do {
    new ChooseWorkspaceDialog(shell,launchData,false,true).prompt(doForce);
    String instancePath=launchData.getSelection();
    if (instancePath == null) {
      return null;
    }
    doForce=true;
    if (instancePath.length() <= 0) {
      MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      continue;
    }
    File workspace=new File(instancePath);
    if (!workspace.exists()) {
      workspace.mkdir();
    }
    try {
      String path=workspace.getAbsolutePath().replace(File.separatorChar,'/');
      url=new URL(""String_Node_Str"",null,path);
    }
 catch (    MalformedURLException e) {
      MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      continue;
    }
  }
 while (url == null);
  return url;
}","/** 
 * Open a workspace selection dialog on the argument shell, populating the argument data with the user's selection. Perform first level validation on the selection by comparing the version information. This method does not examine the runtime state (e.g., is the workspace already locked?).
 * @param shell
 * @param launchData
 * @param force setting to true makes the dialog open regardless of the showDialog value
 * @return An URL storing the selected workspace or null if the user has canceled the launch operation.
 */
private URL promptForWorkspace(Shell shell,ChooseWorkspaceData launchData,boolean force){
  URL url=null;
  boolean doForce=force;
  do {
    ChooseWorkspaceDialog chooseWorkspaceDialog=new ChooseWorkspaceDialog(shell,launchData,false,true);
    boolean isDisableLoginDialog=ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND);
    if (isDisableLoginDialog) {
      chooseWorkspaceDialog.setForceHide(true);
    }
    chooseWorkspaceDialog.prompt(doForce);
    String instancePath=launchData.getSelection();
    if (instancePath == null) {
      return null;
    }
    doForce=true;
    if (instancePath.length() <= 0) {
      MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      continue;
    }
    File workspace=new File(instancePath);
    if (!workspace.exists()) {
      workspace.mkdir();
    }
    try {
      String path=workspace.getAbsolutePath().replace(File.separatorChar,'/');
      url=new URL(""String_Node_Str"",null,path);
    }
 catch (    MalformedURLException e) {
      MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      continue;
    }
  }
 while (url == null);
  return url;
}",0.9106280193236715
126107,"public void buildDeletedItemsTree(RepositoryNode rootNode){
  List<String> folders=RecycleBinManager.getInstance().getDeletedFolders(rootNode.getRoot().getProject());
  Collections.sort(folders);
  for (  String fullPath : folders) {
    String folderType=fullPath.substring(0,fullPath.indexOf(""String_Node_Str""));
    String path=fullPath.substring(fullPath.indexOf(""String_Node_Str"") + 1);
    ERepositoryObjectType currentType=null;
    for (    DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
      ERepositoryObjectType objectType=(ERepositoryObjectType)type;
      if (objectType.isResouce() && folderType.equals(objectType.getFolder())) {
        currentType=objectType;
        break;
      }
    }
    if (currentType != null) {
      buildFolders(rootNode,currentType,path,rootNode);
    }
  }
  addDeletedElements(rootNode,rootNode.getChildren());
}","public void buildDeletedItemsTree(RepositoryNode rootNode){
  List<String> folders=RecycleBinManager.getInstance().getDeletedFolders(rootNode.getRoot().getProject());
  Collections.sort(folders);
  for (  String fullPath : folders) {
    String path=null;
    ERepositoryObjectType currentType=null;
    for (    DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
      ERepositoryObjectType objectType=(ERepositoryObjectType)type;
      if (objectType.isResouce() && fullPath.startsWith(objectType.getFolder())) {
        path=fullPath.substring(objectType.getFolder().length() + 1);
        currentType=objectType;
        break;
      }
    }
    if (currentType != null) {
      buildFolders(rootNode,currentType,path,rootNode);
    }
  }
  addDeletedElements(rootNode,rootNode.getChildren());
}",0.854630715123095
126108,"/** 
 * DOC sgandon Comment method ""activateTheProperPerspective"".
 * @param mPerspStack, the stack to look for the perspecive to activate
 * @param initialSelectedPerspective, the perspective that was initialy selected
 */
private void activateTheProperPerspective(final MPerspectiveStack mPerspStack,MPerspective initialSelectedPerspective){
  if (mPerspStack != null) {
    MPerspective perspectiveToSelect=null;
    boolean firstTimeLaunch=wsPreferences.getBoolean(FIRST_TIME_LAUNCH_PREF,true);
    if (mPerspStack.getChildren().contains(initialSelectedPerspective) && !firstTimeLaunch) {
      perspectiveToSelect=initialSelectedPerspective;
    }
 else {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
        IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        String defaultPerspectiveId=service.getBrandingConfiguration().getInitialWindowPerspectiveId();
        List<MPerspective> matchPerspectives=fModelService.findElements(mPerspStack,MPerspective.class,EModelService.IN_ACTIVE_PERSPECTIVE,new ElementMatcher(defaultPerspectiveId,null,(String)null));
        if (!matchPerspectives.isEmpty()) {
          perspectiveToSelect=matchPerspectives.get(0);
        }
      }
 else {
        if (!mPerspStack.getChildren().isEmpty()) {
          perspectiveToSelect=mPerspStack.getChildren().get(0);
        }
      }
    }
    if (perspectiveToSelect != null) {
      mPerspStack.setSelectedElement(perspectiveToSelect);
    }
 else {
      log.info(""String_Node_Str"");
    }
    wsPreferences.putBoolean(FIRST_TIME_LAUNCH_PREF,false);
  }
}","/** 
 * DOC sgandon Comment method ""activateTheProperPerspective"".
 * @param mPerspStack, the stack to look for the perspecive to activate
 * @param initialSelectedPerspective, the perspective that was initialy selected
 */
private void activateTheProperPerspective(final MPerspectiveStack mPerspStack,MPerspective initialSelectedPerspective){
  if (mPerspStack != null) {
    MPerspective perspectiveToSelect=null;
    boolean firstTimeLaunch=wsPreferences.getBoolean(FIRST_TIME_LAUNCH_PREF,true);
    if (mPerspStack.getChildren().contains(initialSelectedPerspective) && !firstTimeLaunch) {
      perspectiveToSelect=initialSelectedPerspective;
    }
 else {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
        IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
        String defaultPerspectiveId=service.getBrandingConfiguration().getInitialWindowPerspectiveId();
        List<MPerspective> matchPerspectives=fModelService.findElements(mPerspStack,MPerspective.class,EModelService.IN_ANY_PERSPECTIVE,new ElementMatcher(defaultPerspectiveId,null,(String)null));
        if (!matchPerspectives.isEmpty()) {
          perspectiveToSelect=matchPerspectives.get(0);
        }
      }
 else {
        if (!mPerspStack.getChildren().isEmpty()) {
          perspectiveToSelect=mPerspStack.getChildren().get(0);
        }
      }
    }
    if (perspectiveToSelect != null) {
      mPerspStack.setSelectedElement(perspectiveToSelect);
    }
 else {
      log.info(""String_Node_Str"");
    }
    wsPreferences.putBoolean(FIRST_TIME_LAUNCH_PREF,false);
  }
}",0.9978934697562444
126109,"@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  if (resource.getType() == IResource.ROOT) {
    return true;
  }
 else   if (resource.getType() == IResource.PROJECT) {
    try {
      if (resource.getProject().hasNature(TalendNature.ID)) {
        if (!ProjectManager.getInstance().getCurrentProject().getTechnicalLabel().equals(resource.getProject().getName())) {
          return false;
        }
        return true;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (resource.getType() == IResource.FOLDER) {
    return false;
  }
 else   if (resource.getType() == IResource.FILE) {
    if (resource.getName().equals(RecycleBinManager.TALEND_RECYCLE_BIN_INDEX) || resource.getName().equals(FileConstants.LOCAL_PROJECT_FILENAME)) {
      if (viewer != null && !viewer.getTree().isDisposed()) {
        viewer.refresh(binRepositoryNode);
      }
    }
  }
  return false;
}","@Override protected boolean visit(IResourceDelta delta,Collection<Runnable> runnables){
  IResource resource=delta.getResource();
  if (resource.getType() == IResource.ROOT) {
    return true;
  }
 else   if (resource.getType() == IResource.PROJECT) {
    try {
      if (resource.getProject().hasNature(TalendNature.ID)) {
        if (!ProjectManager.getInstance().getCurrentProject().getTechnicalLabel().equals(resource.getProject().getName())) {
          return false;
        }
        return true;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (resource.getType() == IResource.FOLDER) {
    return false;
  }
 else   if (resource.getType() == IResource.FILE) {
    if (resource.getName().equals(RecycleBinManager.TALEND_RECYCLE_BIN_INDEX) || resource.getName().equals(FileConstants.LOCAL_PROJECT_FILENAME)) {
      if (viewer != null && viewer.getControl() != null && !viewer.getTree().isDisposed()) {
        viewer.getControl().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            viewer.refresh(binRepositoryNode);
          }
        }
);
      }
    }
  }
  return false;
}",0.9240622140896616
126110,"public static JsonTreeNode getSchemaTree(String jsonString,int numberOfElementsAccessiable){
  JsonTreeNode jsonTreeNode=null;
  try {
    ObjectMapper objMapper=new ObjectMapper();
    JsonNode jsonNode=objMapper.readTree(jsonString);
    jsonTreeNode=new JsonTreeNode();
    jsonTreeNode.addValue(jsonNode);
    jsonTreeNode.setLabel(""String_Node_Str"");
    jsonTreeNode.setJsonPath(""String_Node_Str"");
    fetchTreeNode(jsonTreeNode,numberOfElementsAccessiable - 1);
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  return jsonTreeNode;
}","public static JsonTreeNode getSchemaTree(String jsonString,int numberOfElementsAccessiable){
  JsonTreeNode jsonTreeNode=null;
  try {
    ObjectMapper objMapper=new ObjectMapper();
    JsonNode jsonNode=objMapper.readTree(jsonString);
    jsonTreeNode=new JsonTreeNode();
    jsonTreeNode.addValue(jsonNode);
    String label=""String_Node_Str"";
    if (jsonNode.isArray()) {
      label=label + ""String_Node_Str"";
    }
    jsonTreeNode.setLabel(label);
    jsonTreeNode.setJsonPath(label);
    fetchTreeNode(jsonTreeNode,numberOfElementsAccessiable - 1);
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  return jsonTreeNode;
}",0.848732624693377
126111,"public boolean hasChildren(){
  Object[] children=super.getChildren();
  if (children != null && 0 < children.length) {
    return true;
  }
  Object obj=getValues();
  boolean hasChildren=false;
  if (obj instanceof Set) {
    Iterator<Object> iter=((Set)obj).iterator();
    while (iter.hasNext()) {
      Object jsonObj=iter.next();
      JsonNode jsonNode=(JsonNode)jsonObj;
      hasChildren=SchemaPopulationUtil.hasChildren(jsonNode);
      if (hasChildren) {
        return hasChildren;
      }
    }
  }
  return hasChildren;
}","public boolean hasChildren(){
  if (!retrievedFlag) {
    SchemaPopulationUtil.fetchTreeNode(this,1);
  }
  Object[] children=super.getChildren();
  if (children != null && 0 < children.length) {
    return true;
  }
 else {
    return false;
  }
}",0.3627075351213282
126112,"private TreeItem getTreeItem(TreeItem[] treeItems,String absolutePath){
  if (treeItems == null || treeItems.length == 0) {
    return null;
  }
  for (  TreeItem treeItem : treeItems) {
    Object obj=treeItem.getData();
    if (obj instanceof JsonTreeNode) {
      String jsonPath=((JsonTreeNode)obj).getJsonPath();
      if (absolutePath.equals(jsonPath)) {
        return treeItem;
      }
 else       if (absolutePath.startsWith(jsonPath + ""String_Node_Str"")) {
        return getTreeItem(treeItem.getItems(),absolutePath);
      }
 else {
        continue;
      }
    }
  }
  return null;
}","private TreeItem getTreeItem(TreeItem[] treeItems,String absolutePath){
  if (treeItems == null || treeItems.length == 0) {
    return null;
  }
  for (  TreeItem treeItem : treeItems) {
    Object obj=treeItem.getData();
    if (obj instanceof JsonTreeNode) {
      String jsonPath=SchemaPopulationUtil.getFilteredJsonPath(((JsonTreeNode)obj).getJsonPath());
      if (absolutePath.equals(jsonPath)) {
        return treeItem;
      }
 else       if (absolutePath.startsWith(jsonPath + ""String_Node_Str"")) {
        return getTreeItem(treeItem.getItems(),absolutePath);
      }
 else {
        continue;
      }
    }
  }
  return null;
}",0.9627831715210357
126113,"public static JsonTreeNode getSchemaTree(String jsonString,int numberOfElementsAccessiable){
  JsonTreeNode jsonTreeNode=null;
  try {
    ObjectMapper objMapper=new ObjectMapper();
    JsonNode jsonNode=objMapper.readTree(jsonString);
    jsonTreeNode=new JsonTreeNode();
    jsonTreeNode.addValue(jsonNode);
    String label=""String_Node_Str"";
    if (jsonNode.isArray()) {
      label=label + ""String_Node_Str"";
    }
    jsonTreeNode.setLabel(label);
    jsonTreeNode.setJsonPath(label);
    fetchTreeNode(jsonTreeNode,numberOfElementsAccessiable - 1);
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  return jsonTreeNode;
}","public static JsonTreeNode getSchemaTree(String jsonString,int numberOfElementsAccessiable){
  JsonTreeNode jsonTreeNode=null;
  try {
    ObjectMapper objMapper=new ObjectMapper();
    JsonNode jsonNode=objMapper.readTree(jsonString);
    jsonTreeNode=new JsonTreeNode();
    jsonTreeNode.addValue(jsonNode);
    String label=""String_Node_Str"";
    if (jsonNode != null && jsonNode.isArray()) {
      label=label + getJsonPathArrayWildcard();
    }
    jsonTreeNode.setLabel(label);
    jsonTreeNode.setJsonPath(label);
    fetchTreeNode(jsonTreeNode,numberOfElementsAccessiable - 1);
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  return jsonTreeNode;
}",0.9544436146377894
126114,"public static String getFilteredJsonPath(String jsonPath){
  if (jsonPath == null || jsonPath.isEmpty()) {
    return jsonPath;
  }
  return jsonPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","public static String getFilteredJsonPath(String jsonPath){
  if (jsonPath == null || jsonPath.isEmpty()) {
    return jsonPath;
  }
  String filteredJsonPath=jsonPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return filteredJsonPath.replaceAll(getJsonPathArrayWildcardExpr(),""String_Node_Str"");
}",0.7168316831683168
126115,"public static JsonTreeNode getJsonTreeNodeByJsonPath(Object[] treeNodes,String jsonPath){
  if (treeNodes == null || treeNodes.length <= 0 || jsonPath == null) {
    return null;
  }
  if (jsonPath.isEmpty()) {
    return null;
  }
  for (  Object childObj : treeNodes) {
    if (!(childObj instanceof JsonTreeNode)) {
      continue;
    }
    JsonTreeNode childJsonTreeNode=(JsonTreeNode)childObj;
    String treeNodePath=childJsonTreeNode.getJsonPath();
    if (jsonPath.equals(treeNodePath)) {
      return childJsonTreeNode;
    }
 else     if (jsonPath.startsWith(treeNodePath + ""String_Node_Str"")) {
      return getJsonTreeNodeByJsonPath(childJsonTreeNode.getChildren(),jsonPath);
    }
 else {
      continue;
    }
  }
  return null;
}","public static JsonTreeNode getJsonTreeNodeByJsonPath(Object[] treeNodes,String jsonPath){
  if (treeNodes == null || treeNodes.length <= 0 || jsonPath == null) {
    return null;
  }
  if (jsonPath.isEmpty()) {
    return null;
  }
  for (  Object childObj : treeNodes) {
    if (!(childObj instanceof JsonTreeNode)) {
      continue;
    }
    JsonTreeNode childJsonTreeNode=(JsonTreeNode)childObj;
    String treeNodePath=getFilteredJsonPath(childJsonTreeNode.getJsonPath());
    if (jsonPath.equals(treeNodePath)) {
      return childJsonTreeNode;
    }
 else     if (jsonPath.startsWith(treeNodePath + ""String_Node_Str"")) {
      return getJsonTreeNodeByJsonPath(childJsonTreeNode.getChildren(),jsonPath);
    }
 else {
      continue;
    }
  }
  return null;
}",0.986101919258769
126116,"private static void fetchArrayTreeNode(JsonTreeNode parentNode,JsonNode jsonNode){
  if (parentNode == null || jsonNode == null) {
    return;
  }
  Iterator<Entry<String,JsonNode>> childrenIter=jsonNode.fields();
  while (childrenIter.hasNext()) {
    Entry<String,JsonNode> childEntry=childrenIter.next();
    String name=childEntry.getKey();
    JsonTreeNode childJsonTreeNode=parentNode.getFromValueMap(name);
    if (childJsonTreeNode == null) {
      childJsonTreeNode=new JsonTreeNode();
      childJsonTreeNode.setLabel(name);
      JsonNode value=childEntry.getValue();
      String jsonPath=parentNode.getJsonPath() + ""String_Node_Str"" + name;
      childJsonTreeNode.addValue(value);
      childJsonTreeNode.setJsonPath(jsonPath);
      parentNode.addChild(childJsonTreeNode);
      parentNode.putValueMap(name,childJsonTreeNode);
    }
 else {
      childJsonTreeNode.addValue(childEntry.getValue());
    }
  }
}","private static void fetchArrayTreeNode(JsonTreeNode parentNode,JsonNode jsonNode){
  if (parentNode == null || jsonNode == null) {
    return;
  }
  Iterator<Entry<String,JsonNode>> childrenIter=jsonNode.fields();
  while (childrenIter.hasNext()) {
    Entry<String,JsonNode> childEntry=childrenIter.next();
    addChildJsonTreeNode(parentNode,childEntry);
  }
}",0.5132192846034215
126117,"public static void fetchTreeNode(JsonTreeNode parentNode,int numberOfElementsAccessiable){
  if (parentNode == null || numberOfElementsAccessiable == 0 || !parentNode.hasChildren()) {
    return;
  }
  Set<JsonNode> valueSet=parentNode.getValues();
  if (valueSet == null || valueSet.isEmpty()) {
    return;
  }
  Iterator<JsonNode> valueIter=valueSet.iterator();
  while (valueIter.hasNext()) {
    JsonNode jsonNode=valueIter.next();
    if (jsonNode.isArray()) {
      Iterator<JsonNode> childrenIter=jsonNode.iterator();
      Set<JsonNode> arraySet=new HashSet<JsonNode>();
      while (childrenIter.hasNext()) {
        JsonNode childJsonNode=childrenIter.next();
        arraySet.add(childJsonNode);
      }
      fetchArrayTreeNode(parentNode,arraySet,numberOfElementsAccessiable);
    }
 else {
      Iterator<Entry<String,JsonNode>> childrenIter=jsonNode.fields();
      while (childrenIter.hasNext()) {
        Entry<String,JsonNode> childEntry=childrenIter.next();
        JsonTreeNode childJsonTreeNode=new JsonTreeNode();
        String label=childEntry.getKey();
        JsonNode value=childEntry.getValue();
        if (value != null && value.isArray()) {
          label=label + ""String_Node_Str"";
        }
        String jsonPath=parentNode.getJsonPath() + ""String_Node_Str"" + label;
        childJsonTreeNode.setLabel(label);
        childJsonTreeNode.addValue(value);
        childJsonTreeNode.setJsonPath(jsonPath);
        parentNode.addChild(childJsonTreeNode);
        if (childJsonTreeNode.hasChildren()) {
          fetchTreeNode(childJsonTreeNode,numberOfElementsAccessiable - 1);
        }
      }
    }
  }
}","public static void fetchTreeNode(JsonTreeNode parentNode,int numberOfElementsAccessiable){
  if (parentNode == null || numberOfElementsAccessiable == 0) {
    return;
  }
  parentNode.setRetrieved();
  Set<JsonNode> valueSet=parentNode.getValues();
  if (valueSet == null || valueSet.isEmpty()) {
    return;
  }
  Iterator<JsonNode> valueIter=valueSet.iterator();
  while (valueIter.hasNext()) {
    JsonNode jsonNode=valueIter.next();
    if (jsonNode.isArray()) {
      Iterator<JsonNode> childrenIter=jsonNode.iterator();
      Set<JsonNode> arraySet=new HashSet<JsonNode>();
      while (childrenIter.hasNext()) {
        JsonNode childJsonNode=childrenIter.next();
        if (hasChildren(childJsonNode)) {
          arraySet.add(childJsonNode);
        }
      }
      fetchArrayTreeNode(parentNode,arraySet,numberOfElementsAccessiable);
    }
 else {
      Iterator<Entry<String,JsonNode>> childrenIter=jsonNode.fields();
      while (childrenIter.hasNext()) {
        Entry<String,JsonNode> childEntry=childrenIter.next();
        JsonTreeNode childJsonTreeNode=addChildJsonTreeNode(parentNode,childEntry);
        fetchTreeNode(childJsonTreeNode,numberOfElementsAccessiable - 1);
      }
    }
  }
}",0.7696629213483146
126118,"@Override public void fillCoolBar(ICoolBarManager coolBar){
  this.coolBar=coolBar;
  IToolBarManager toolBar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  coolBar.add(new ToolBarContributionItem(toolBar,Messages.getString(""String_Node_Str"")));
  toolBar.add(ActionFactory.SAVE.create(window));
  if (PluginChecker.isRefProjectLoaded()) {
    IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
    if (service != null) {
      toolBar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
      coolBar.add(new ToolBarContributionItem(toolBar,""String_Node_Str""));
      service.addMergeAction(window,toolBar);
    }
  }
  IToolBarManager toolBarManager=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  toolBarManager.add(new LinksToolbarItem());
  coolBar.add(new ToolBarContributionItem(toolBarManager,LinksToolbarItem.COOLITEM_LINKS_ID));
}","@Override public void fillCoolBar(ICoolBarManager coolBar){
  IToolBarManager toolBar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  coolBar.add(new ToolBarContributionItem(toolBar,Messages.getString(""String_Node_Str"")));
  toolBar.add(ActionFactory.SAVE.create(window));
  IToolBarManager toolBarManager=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  toolBarManager.add(new LinksToolbarItem());
  coolBar.add(new ToolBarContributionItem(toolBarManager,LinksToolbarItem.COOLITEM_LINKS_ID));
}",0.6947819871336669
126119,"@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    System.setProperty(""String_Node_Str"",Boolean.TRUE.toString());
    System.setProperty(""String_Node_Str"",Boolean.FALSE.toString());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}",0.977637899619016
126120,"/** 
 * DOC amaumont Comment method ""initNamespaceContext"".
 */
private void initNamespaceContext(){
  namespaceContext=new NamespaceContext(){
    public String getNamespaceURI(    String prefix){
      String namespaceForPrefix=getNamespaceForPrefix(prefix);
      return namespaceForPrefix;
    }
    public Iterator getPrefixes(    String val){
      return null;
    }
    public String getPrefix(    String uri){
      return null;
    }
  }
;
}","/** 
 * DOC amaumont Comment method ""initNamespaceContext"".
 */
private void initNamespaceContext(){
  namespaceContext=new NamespaceContext(){
    @Override public String getNamespaceURI(    String prefix){
      String namespaceForPrefix=getNamespaceForPrefix(prefix);
      return namespaceForPrefix;
    }
    @Override public Iterator getPrefixes(    String val){
      return null;
    }
    @Override public String getPrefix(    String uri){
      return null;
    }
  }
;
}",0.9678111587982832
126121,"public String getPrefix(String uri){
  return null;
}","@Override public String getPrefix(String uri){
  return null;
}",0.913793103448276
126122,"public String getNamespaceURI(String prefix){
  String namespaceForPrefix=getNamespaceForPrefix(prefix);
  return namespaceForPrefix;
}","@Override public String getNamespaceURI(String prefix){
  String namespaceForPrefix=getNamespaceForPrefix(prefix);
  return namespaceForPrefix;
}",0.9642857142857144
126123,"public Iterator getPrefixes(String val){
  return null;
}","@Override public Iterator getPrefixes(String val){
  return null;
}",0.9193548387096774
126124,"void init(){
  performanceEvaluator.addListener(new IPerformanceEvaluatorListener(){
    public void handleEvent(    PerformanceEvaluatorEvent event){
      boolean previousAntialiasAllowed=antialiasAllowed;
      antialiasAllowed=event.getIndicePerformance() < PerformanceEvaluator.GOOD_PERFORMANCE_INDICE;
      if (previousAntialiasAllowed != antialiasAllowed && !drawableComposite.getBgDrawableComposite().isDisposed() && drawableComposite.getBgDrawableComposite().getDisplay() != null) {
        new AsynchronousThreading(0,false,drawableComposite.getBgDrawableComposite().getDisplay(),new Runnable(){
          public void run(){
            refreshBackground();
          }
        }
).start();
      }
    }
  }
);
}","void init(){
  iPerformanceEvaluatorListener=new IPerformanceEvaluatorListener(){
    public void handleEvent(    PerformanceEvaluatorEvent event){
      boolean previousAntialiasAllowed=antialiasAllowed;
      antialiasAllowed=event.getIndicePerformance() < PerformanceEvaluator.GOOD_PERFORMANCE_INDICE;
      if (previousAntialiasAllowed != antialiasAllowed && !drawableComposite.getBgDrawableComposite().isDisposed() && drawableComposite.getBgDrawableComposite().getDisplay() != null) {
        asynchronousThreading1=new AsynchronousThreading(0,false,drawableComposite.getBgDrawableComposite().getDisplay(),new Runnable(){
          public void run(){
            refreshBackground();
          }
        }
);
        asynchronousThreading1.start();
      }
    }
  }
;
  performanceEvaluator.addListener(iPerformanceEvaluatorListener);
}",0.8748403575989783
126125,"public void handleEvent(PerformanceEvaluatorEvent event){
  boolean previousAntialiasAllowed=antialiasAllowed;
  antialiasAllowed=event.getIndicePerformance() < PerformanceEvaluator.GOOD_PERFORMANCE_INDICE;
  if (previousAntialiasAllowed != antialiasAllowed && !drawableComposite.getBgDrawableComposite().isDisposed() && drawableComposite.getBgDrawableComposite().getDisplay() != null) {
    new AsynchronousThreading(0,false,drawableComposite.getBgDrawableComposite().getDisplay(),new Runnable(){
      public void run(){
        refreshBackground();
      }
    }
).start();
  }
}","public void handleEvent(PerformanceEvaluatorEvent event){
  boolean previousAntialiasAllowed=antialiasAllowed;
  antialiasAllowed=event.getIndicePerformance() < PerformanceEvaluator.GOOD_PERFORMANCE_INDICE;
  if (previousAntialiasAllowed != antialiasAllowed && !drawableComposite.getBgDrawableComposite().isDisposed() && drawableComposite.getBgDrawableComposite().getDisplay() != null) {
    asynchronousThreading1=new AsynchronousThreading(0,false,drawableComposite.getBgDrawableComposite().getDisplay(),new Runnable(){
      public void run(){
        refreshBackground();
      }
    }
);
    asynchronousThreading1.start();
  }
}",0.9448559670781892
126126,"protected void execute(final boolean isFinalExecution,Object data){
  drawableComposite.getBgDrawableComposite().getDisplay().syncExec(new Runnable(){
    public void run(){
      if (isFinalExecution) {
        refreshBackground();
      }
    }
  }
);
}","@Override protected void execute(final boolean isFinalExecution,Object data){
  drawableComposite.getBgDrawableComposite().getDisplay().syncExec(new Runnable(){
    public void run(){
      if (isFinalExecution) {
        refreshBackground();
      }
    }
  }
);
}",0.9807692307692308
126127,"private void initTimeLimitForBackgroundRefresh(){
  (new Object(){
    void init(){
      performanceEvaluator.addListener(new IPerformanceEvaluatorListener(){
        public void handleEvent(        PerformanceEvaluatorEvent event){
          boolean previousAntialiasAllowed=antialiasAllowed;
          antialiasAllowed=event.getIndicePerformance() < PerformanceEvaluator.GOOD_PERFORMANCE_INDICE;
          if (previousAntialiasAllowed != antialiasAllowed && !drawableComposite.getBgDrawableComposite().isDisposed() && drawableComposite.getBgDrawableComposite().getDisplay() != null) {
            new AsynchronousThreading(0,false,drawableComposite.getBgDrawableComposite().getDisplay(),new Runnable(){
              public void run(){
                refreshBackground();
              }
            }
).start();
          }
        }
      }
);
    }
  }
).init();
  new AsynchronousThreading(50,new Runnable(){
    public void run(){
      launchEvaluatingPerformanceLoop();
    }
  }
).start();
}","private void initTimeLimitForBackgroundRefresh(){
  (new Object(){
    void init(){
      iPerformanceEvaluatorListener=new IPerformanceEvaluatorListener(){
        public void handleEvent(        PerformanceEvaluatorEvent event){
          boolean previousAntialiasAllowed=antialiasAllowed;
          antialiasAllowed=event.getIndicePerformance() < PerformanceEvaluator.GOOD_PERFORMANCE_INDICE;
          if (previousAntialiasAllowed != antialiasAllowed && !drawableComposite.getBgDrawableComposite().isDisposed() && drawableComposite.getBgDrawableComposite().getDisplay() != null) {
            asynchronousThreading1=new AsynchronousThreading(0,false,drawableComposite.getBgDrawableComposite().getDisplay(),new Runnable(){
              public void run(){
                refreshBackground();
              }
            }
);
            asynchronousThreading1.start();
          }
        }
      }
;
      performanceEvaluator.addListener(iPerformanceEvaluatorListener);
    }
  }
).init();
  asynchronousThreading2=new AsynchronousThreading(50,new Runnable(){
    public void run(){
      launchEvaluatingPerformanceLoop();
    }
  }
);
  asynchronousThreading2.start();
}",0.9133425034387896
126128,"public void widgetSelected(SelectionEvent event){
  backgroundRefresher.refreshBackgroundWithLimiter();
}","@Override public void widgetSelected(SelectionEvent event){
  backgroundRefresher.refreshBackgroundWithLimiter();
}",0.9545454545454546
126129,"/** 
 * DOC amaumont Comment method ""addListeners"".
 */
private void addListeners(){
  if (WindowSystem.isGTK() && forceDrawLinksGtk) {
    table.addListener(SWT.Paint,new Listener(){
      public void handleEvent(      Event event){
        paintEvent(event);
      }
    }
);
  }
  ControlListener controlListener=new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      backgroundRefresher.refreshBackgroundWithLimiter();
    }
  }
;
  table.addControlListener(controlListener);
  if (tableViewerCreator != null) {
    tableViewerCreator.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
      public void handle(      LineSelectionEvent e){
        controlsLinker.updateLinksStyleAndControlsSelection(table,true);
      }
    }
);
  }
 else {
    table.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        controlsLinker.updateLinksStyleAndControlsSelection(table,true);
      }
    }
);
  }
  ScrollBar vBarTable=table.getVerticalBar();
  SelectionListener scrollListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      backgroundRefresher.refreshBackgroundWithLimiter();
    }
  }
;
  vBarTable.addSelectionListener(scrollListener);
}","/** 
 * DOC amaumont Comment method ""addListeners"".
 */
private void addListeners(){
  if (WindowSystem.isGTK() && forceDrawLinksGtk) {
    tablePaintListener=new Listener(){
      public void handleEvent(      Event event){
        paintEvent(event);
      }
    }
;
    table.addListener(SWT.Paint,tablePaintListener);
  }
  controlListener=new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      backgroundRefresher.refreshBackgroundWithLimiter();
    }
  }
;
  table.addControlListener(controlListener);
  if (tableViewerCreator != null) {
    tableViewerLineSelectionListener=new ILineSelectionListener(){
      public void handle(      LineSelectionEvent e){
        controlsLinker.updateLinksStyleAndControlsSelection(table,true);
      }
    }
;
    tableViewerCreator.getSelectionHelper().addAfterSelectionListener(tableViewerLineSelectionListener);
  }
 else {
    tableSelectionListener=new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        controlsLinker.updateLinksStyleAndControlsSelection(table,true);
      }
    }
;
    table.addSelectionListener(tableSelectionListener);
  }
  ScrollBar vBarTable=table.getVerticalBar();
  scrollListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      backgroundRefresher.refreshBackgroundWithLimiter();
    }
  }
;
  vBarTable.addSelectionListener(scrollListener);
}",0.6572675394427661
126130,"public boolean populateTree(ATreeNode treeNode,Object selectedEntity,File fileValue){
  if (fileValue == null || !fileValue.exists() || !fileValue.isFile()) {
    return false;
  }
  FileReader fileReader=null;
  BufferedReader bufferedReader=null;
  try {
    fileReader=new FileReader(fileValue);
    bufferedReader=new BufferedReader(fileReader);
    String line=null;
    StringBuffer jsonBuffer=new StringBuffer();
    while ((line=bufferedReader.readLine()) != null) {
      jsonBuffer.append(line).append(""String_Node_Str"");
    }
    return populateTree(treeNode,selectedEntity,jsonBuffer.toString());
  }
 catch (  Exception e) {
    CommonExceptionHandler.process(e);
    return false;
  }
 finally {
    if (fileReader != null) {
      try {
        fileReader.close();
      }
 catch (      IOException e) {
      }
    }
    if (bufferedReader != null) {
      try {
        bufferedReader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public boolean populateTree(ATreeNode treeNode,Object selectedEntity,File fileValue){
  if (fileValue == null || !fileValue.exists() || !fileValue.isFile()) {
    return false;
  }
  if (selectedEntity instanceof JsonTreeNode) {
    SchemaPopulationUtil.fetchTreeNode((JsonTreeNode)selectedEntity,1);
    treeNode=(ATreeNode)selectedEntity;
  }
 else {
    treeNode=SchemaPopulationUtil.getSchemaTree(fileValue,limit);
  }
  if (treeNode == null) {
    return false;
  }
 else {
    List<JsonTreeNode> input=new ArrayList<JsonTreeNode>();
    input.add((JsonTreeNode)treeNode);
    treeViewer.setInput(input);
    treeViewer.expandToLevel(3);
  }
  return true;
}",0.2792406613594611
126131,"@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  JavaHomeUtil.initializeJavaHome();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}",0.9937699949486446
126132,"@Override public void postWindowOpen(){
  if (!JavaHomeUtil.isJDKSetup()) {
    MessageDialog.openWarning(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
  boolean alwaysWelcome=preferenceStore.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
  if (alwaysWelcome) {
    getWindowConfigurer().getWindow().getWorkbench().getIntroManager().showIntro(getWindowConfigurer().getWindow(),!alwaysWelcome);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
}","@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  if (!JavaHomeUtil.isJDKSetup()) {
    MessageDialog.openWarning(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
  boolean alwaysWelcome=preferenceStore.getBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME);
  if (alwaysWelcome) {
    getWindowConfigurer().getWindow().getWorkbench().getIntroManager().showIntro(getWindowConfigurer().getWindow(),!alwaysWelcome);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
}",0.9889056536788852
126133,"@Override public int compare(RepositoryNode o1,RepositoryNode o2){
  if (o1.getContentType() == null) {
    return 1;
  }
  return o1.getContentType().compareTo(o2.getContentType());
}","@Override public int compare(RepositoryNode o1,RepositoryNode o2){
  ERepositoryObjectType type1=o1.getContentType();
  ERepositoryObjectType type2=o2.getContentType();
  if (type1 == null || type2 == null) {
    return 1;
  }
  return type1.compareTo(type2);
}",0.5393258426966292
126134,"@Override protected Object[] getSortedChildren(Object parentElementOrTreePath){
  if (parentElementOrTreePath instanceof TalendRepositoryRoot) {
    Object[] objects=(Object[])super.getSortedChildren(parentElementOrTreePath);
    List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
    for (    Object object : objects) {
      if (object instanceof RepositoryNode) {
        nodes.add((RepositoryNode)object);
      }
    }
    Comparator<RepositoryNode> myComparator=new Comparator<RepositoryNode>(){
      @Override public int compare(      RepositoryNode o1,      RepositoryNode o2){
        if (o1.getContentType() == null) {
          return 1;
        }
        return o1.getContentType().compareTo(o2.getContentType());
      }
    }
;
    RepositoryNode[] nodesArray=nodes.toArray(new RepositoryNode[0]);
    Arrays.sort(nodesArray,myComparator);
    return nodesArray;
  }
  return super.getSortedChildren(parentElementOrTreePath);
}","@Override protected Object[] getSortedChildren(Object parentElementOrTreePath){
  if (parentElementOrTreePath instanceof TalendRepositoryRoot) {
    Object[] objects=(Object[])super.getSortedChildren(parentElementOrTreePath);
    List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
    for (    Object object : objects) {
      if (object instanceof RepositoryNode) {
        nodes.add((RepositoryNode)object);
      }
    }
    Comparator<RepositoryNode> myComparator=new Comparator<RepositoryNode>(){
      @Override public int compare(      RepositoryNode o1,      RepositoryNode o2){
        ERepositoryObjectType type1=o1.getContentType();
        ERepositoryObjectType type2=o2.getContentType();
        if (type1 == null || type2 == null) {
          return 1;
        }
        return type1.compareTo(type2);
      }
    }
;
    RepositoryNode[] nodesArray=nodes.toArray(new RepositoryNode[0]);
    Arrays.sort(nodesArray,myComparator);
    return nodesArray;
  }
  return super.getSortedChildren(parentElementOrTreePath);
}",0.8648920140632848
126135,"/** 
 * DOC sgandon Comment method ""updateManualImportedJars"".
 * @param importedJars
 */
private void updateManualImportedJars(AtomicInteger enabledButtonCount,String[] importedJars){
  for (  Entry<ModuleToInstall,Button> moduleAndButton : manualInstallButtonMap.entrySet()) {
    String jarName=moduleAndButton.getKey().getName();
    for (    String importedJar : importedJars) {
      if (importedJar.equals(jarName)) {
        moduleAndButton.getValue().setEnabled(false);
        enabledButtonCount.decrementAndGet();
      }
    }
  }
  if (enabledButtonCount.get() == 0) {
    close();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
  }
}","/** 
 * DOC sgandon Comment method ""updateManualImportedJars"".
 * @param importedJars
 */
private void updateManualImportedJars(AtomicInteger enabledButtonCount,String[] importedJars){
  for (  Entry<ModuleToInstall,Button> moduleAndButton : manualInstallButtonMap.entrySet()) {
    String jarName=moduleAndButton.getKey().getName();
    for (    String importedJar : importedJars) {
      if (importedJar.equals(jarName)) {
        moduleAndButton.getValue().setEnabled(false);
        enabledButtonCount.decrementAndGet();
      }
    }
  }
  if (enabledButtonCount.get() == 0) {
    close();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
    ModulesNeededProvider.fireChangedLibrariesListener();
  }
}",0.96908315565032
126136,"protected void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> toInstall=getModulesToBeInstalled();
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob theJob=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=theJob.getDownloadFailed();
                Set<String> installedModule=theJob.getInstalledModule();
                jarsInstalledSuccuss.addAll(installedModule);
                int installedModules=installedModule.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                if (installedModules > 0) {
                  ImportExternalJarAction.cleanupLib(installedModule);
                }
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
                  IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
                  if (service != null) {
                    service.refreshComponentView();
                  }
                }
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}","protected void addListeners(){
  installAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<ModuleToInstall> toInstall=getModulesToBeInstalled();
      final DownloadModuleJob job=new DownloadModuleJob(toInstall);
      job.addJobChangeListener(new JobChangeAdapter(){
        @Override public void done(        final IJobChangeEvent event){
          Display.getDefault().asyncExec(new Runnable(){
            @Override public void run(){
              if (event.getJob() instanceof DownloadModuleJob) {
                DownloadModuleJob theJob=(DownloadModuleJob)event.getJob();
                Set<String> downloadFialed=theJob.getDownloadFailed();
                Set<String> installedModule=theJob.getInstalledModule();
                jarsInstalledSuccuss.addAll(installedModule);
                int installedModules=installedModule.size();
                String success=installedModules + Messages.getString(""String_Node_Str"");
                String message=success;
                if (!downloadFialed.isEmpty()) {
                  String fail=Messages.getString(""String_Node_Str"");
                  String names=""String_Node_Str"";
                  for (                  String name : downloadFialed) {
                    if (names.length() > 0) {
                      names+=""String_Node_Str"" + name;
                    }
 else {
                      names+=name;
                    }
                  }
                  message=message + fail + names;
                }
                MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
                if (installedModules > 0) {
                  ImportExternalJarAction.cleanupLib(installedModule);
                }
                if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
                  IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
                  if (service != null) {
                    service.refreshComponentView();
                  }
                }
                ModulesNeededProvider.fireChangedLibrariesListener();
              }
            }
          }
);
        }
      }
);
      job.setUser(true);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
      close();
    }
  }
);
}",0.9854469854469856
126137,"public String getMavenUriSnapshot(){
  if (mavenUriSnapshot == null || ""String_Node_Str"".equals(mavenUriSnapshot)) {
    if (mavenUri != null && !""String_Node_Str"".equals(mavenUri)) {
      mavenUriSnapshot=MavenUrlHelper.generateSnapshotMavenUri(mavenUri);
    }
    if (mavenUriSnapshot == null || ""String_Node_Str"".equals(mavenUriSnapshot)) {
      mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName(),false,true);
    }
  }
  return mavenUriSnapshot;
}","public String getMavenUriSnapshot(){
  MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (mavenUriSnapshot == null || ""String_Node_Str"".equals(mavenUriSnapshot)) {
    if (mavenUri != null && !""String_Node_Str"".equals(mavenUri)) {
      mavenUriSnapshot=MavenUrlHelper.generateSnapshotMavenUri(mavenUri);
    }
    if (mavenUriSnapshot == null || ""String_Node_Str"".equals(mavenUriSnapshot)) {
      mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName(),false,true);
    }
  }
  return mavenUriSnapshot;
}",0.8307155322862129
126138,"@Override public void widgetSelected(final SelectionEvent e){
  refreshPreview();
  updateStatus(IStatus.OK,null);
}","@Override public void widgetSelected(final SelectionEvent e){
  refreshPreview();
}",0.8341708542713567
126139,"@Override protected boolean checkFieldsValue(){
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
    return checkJavaFieldsValue();
  }
 else   if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL)) {
    return checkPerlFieldsValue();
  }
 else {
    updateStatus(IStatus.ERROR,null);
    return true;
  }
}","@Override protected boolean checkFieldsValue(){
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
    return checkJavaFieldsValue();
  }
 else   if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL)) {
    return checkPerlFieldsValue();
  }
 else {
    updateStatus(IStatus.ERROR,null);
    return false;
  }
}",0.98989898989899
126140,"@Override protected void addFieldsListeners(){
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
    addJavaFieldsListeners();
  }
 else   if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL)) {
    addPerlFieldsListeners();
  }
  wsdlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setWSDL(wsdlText.getText());
        if (methodText.getText() != null && !methodText.getText().equals(""String_Node_Str"")) {
          updateStatus(IStatus.OK,null);
        }
      }
    }
  }
);
  methodText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setMethodName(methodText.getText());
        if (wsdlText.getText() != null && !wsdlText.getText().equals(""String_Node_Str"")) {
          updateStatus(IStatus.OK,null);
        }
      }
    }
  }
);
  buttonAdd.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String unName=""String_Node_Str"";
      ArrayList hashmap=getConnection().getParameters();
      if (hashmap == null) {
        hashmap=new ArrayList();
      }
      hashmap.add(unName + hashmap.size());
      getConnection().setParameters(hashmap);
      valueTableViewer.setInput(hashmap);
      valueTableViewer.refresh();
    }
  }
);
  buttonRemove.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      ISelection selection=valueTableViewer.getSelection();
      ArrayList hashmap=getConnection().getParameters();
      if (!selection.isEmpty() && selection instanceof StructuredSelection) {
        Object[] vars=((StructuredSelection)selection).toArray();
        for (        Object var : vars) {
          hashmap.remove(var);
          valueTableViewer.refresh();
        }
      }
 else       if (!hashmap.isEmpty()) {
        hashmap.remove(hashmap.size() - 1);
        valueTableViewer.refresh();
      }
      getConnection().setParameters(hashmap);
    }
  }
);
  previewButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      refreshPreview();
      updateStatus(IStatus.OK,null);
    }
  }
);
}","@Override protected void addFieldsListeners(){
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
    addJavaFieldsListeners();
  }
 else   if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.PERL)) {
    addPerlFieldsListeners();
  }
  wsdlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        boolean noError=checkFieldsValue();
        getConnection().setWSDL(wsdlText.getText());
        if (noError && methodText.getText() != null && !methodText.getText().equals(""String_Node_Str"")) {
          updateStatus(IStatus.OK,null);
        }
      }
    }
  }
);
  methodText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        boolean noError=checkFieldsValue();
        getConnection().setMethodName(methodText.getText());
        if (noError && wsdlText.getText() != null && !wsdlText.getText().equals(""String_Node_Str"")) {
          updateStatus(IStatus.OK,null);
        }
      }
    }
  }
);
  buttonAdd.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      String unName=""String_Node_Str"";
      ArrayList hashmap=getConnection().getParameters();
      if (hashmap == null) {
        hashmap=new ArrayList();
      }
      hashmap.add(unName + hashmap.size());
      getConnection().setParameters(hashmap);
      valueTableViewer.setInput(hashmap);
      valueTableViewer.refresh();
    }
  }
);
  buttonRemove.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      ISelection selection=valueTableViewer.getSelection();
      ArrayList hashmap=getConnection().getParameters();
      if (!selection.isEmpty() && selection instanceof StructuredSelection) {
        Object[] vars=((StructuredSelection)selection).toArray();
        for (        Object var : vars) {
          hashmap.remove(var);
          valueTableViewer.refresh();
        }
      }
 else       if (!hashmap.isEmpty()) {
        hashmap.remove(hashmap.size() - 1);
        valueTableViewer.refresh();
      }
      getConnection().setParameters(hashmap);
    }
  }
);
  previewButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      refreshPreview();
    }
  }
);
}",0.980934422794888
126141,"@Override public void modifyText(ModifyEvent e){
  if (!isContextMode()) {
    checkFieldsValue();
    getConnection().setMethodName(methodText.getText());
    if (wsdlText.getText() != null && !wsdlText.getText().equals(""String_Node_Str"")) {
      updateStatus(IStatus.OK,null);
    }
  }
}","@Override public void modifyText(ModifyEvent e){
  if (!isContextMode()) {
    boolean noError=checkFieldsValue();
    getConnection().setMethodName(methodText.getText());
    if (noError && wsdlText.getText() != null && !wsdlText.getText().equals(""String_Node_Str"")) {
      updateStatus(IStatus.OK,null);
    }
  }
}",0.955665024630542
126142,"@Override public boolean canFinish(){
  boolean flag=ProjectManager.getInstance().isInCurrentMainProject(this.connectionItem);
  if (!flag) {
    return false;
  }
  return true;
}","@Override public boolean canFinish(){
  boolean flag=ProjectManager.getInstance().isInCurrentMainProject(this.connectionItem);
  if (!flag) {
    return false;
  }
  if (dynamicWizardPages != null) {
    for (    IWizardPage wizardPage : dynamicWizardPages) {
      if (!wizardPage.isPageComplete()) {
        return false;
      }
    }
  }
  return super.canFinish();
}",0.6134301270417423
126143,"private void deployFile(File file,Map<String,String> customUriToAdd,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
          if (mavenUri == null) {
            mavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
            customUriToAdd.put(jarName,mavenUri);
          }
          sourceAndMavenUri.put(jarFile.getAbsolutePath(),mavenUri);
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      String mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
      if (mavenUri == null) {
        mavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
        customUriToAdd.put(file.getName(),mavenUri);
      }
      deployer.deployToLocalMaven(file.getAbsolutePath(),mavenUri);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}","private void deployFile(File file,String mavenUri,Map<String,String> customUriToAdd,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (mavenUri == null) {
            mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (mavenUri == null) {
              mavenUri=defaultMavenUri;
              customUriToAdd.put(jarName,mavenUri);
            }
          }
          sourceAndMavenUri.put(jarFile.getAbsolutePath(),mavenUri);
          if (!defaultMavenUri.equals(mavenUri)) {
            sourceAndMavenUri.put(jarFile.getAbsolutePath(),defaultMavenUri);
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (mavenUri == null) {
        mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (mavenUri == null) {
          mavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
          customUriToAdd.put(file.getName(),mavenUri);
        }
      }
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      sourceAndMavenUri.put(file.getAbsolutePath(),mavenUri);
      if (!defaultMavenUri.equals(mavenUri)) {
        sourceAndMavenUri.put(file.getAbsolutePath(),defaultMavenUri);
      }
      deployer.deployToLocalMaven(sourceAndMavenUri);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}",0.7542823390431187
126144,"/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  LibrariesIndex index=LibrariesIndexManager.getInstance().getStudioLibIndex();
  EMap<String,String> jarsToRelativePath=index.getJarsToRelativePath();
  List<File> filesToDeploy=new ArrayList<File>();
  for (  ModuleNeeded module : modules) {
    String moduleLocation=module.getModuleLocaion();
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(module.getModuleName());
    if (checkJarInstalledInMaven(mavenUri)) {
      continue;
    }
    if (module.getMavenUriSnapshot() != null && !module.getMavenUriSnapshot().isEmpty()) {
      if (checkJarInstalledInMaven(module.getMavenUriSnapshot())) {
        continue;
      }
    }
    boolean found=false;
    if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
      if (jarsToRelativePath.containsKey(module.getModuleName())) {
        String relativePath=jarsToRelativePath.get(module.getModuleName());
        if (!relativePath.equals(moduleLocation)) {
          if (!urlWarned.contains(moduleLocation)) {
            System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
            urlWarned.add(moduleLocation);
          }
          moduleLocation=relativePath;
        }
      }
      if (checkJarInstalledFromPlatform(moduleLocation)) {
        jarsToRelativePath.put(module.getModuleName(),moduleLocation);
        modified=true;
        found=true;
        filesToDeploy.add(new File(studioJarInstalled.get(moduleLocation)));
      }
    }
    if (!found) {
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(module.getModuleName());
      if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
        found=true;
        filesToDeploy.add(new File(studioJarInstalled.get(relativePath)));
      }
    }
    if (!found) {
      ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
    }
  }
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  for (  File file : filesToDeploy) {
    deployFile(file,customUriToAdd,monitorWrap);
  }
  if (!customUriToAdd.isEmpty()) {
    deployMavenIndex(customUriToAdd,monitorWrap);
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}","/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  LibrariesIndex index=LibrariesIndexManager.getInstance().getStudioLibIndex();
  EMap<String,String> jarsToRelativePath=index.getJarsToRelativePath();
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    String mavenUri=module.getMavenUriSnapshot();
    if (mavenUri == null || ""String_Node_Str"".equals(mavenUri)) {
      EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
      mavenUri=jarsToMavenUri.get(module.getModuleName());
    }
    if (checkJarInstalledInMaven(mavenUri)) {
      continue;
    }
    boolean found=false;
    if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
      if (jarsToRelativePath.containsKey(module.getModuleName())) {
        String relativePath=jarsToRelativePath.get(module.getModuleName());
        if (!relativePath.equals(moduleLocation)) {
          if (!urlWarned.contains(moduleLocation)) {
            System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
            urlWarned.add(moduleLocation);
          }
          moduleLocation=relativePath;
        }
      }
      if (checkJarInstalledFromPlatform(moduleLocation)) {
        jarsToRelativePath.put(module.getModuleName(),moduleLocation);
        modified=true;
        found=true;
        fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
      }
    }
    if (!found) {
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(module.getModuleName());
      if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
        found=true;
        fileToDeploy=new File(studioJarInstalled.get(relativePath));
      }
    }
    if (!found) {
      ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
    }
    if (fileToDeploy != null) {
      deployFile(fileToDeploy,mavenUri,customUriToAdd,monitorWrap);
    }
  }
  if (!customUriToAdd.isEmpty()) {
    deployMavenIndex(customUriToAdd,monitorWrap);
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}",0.8476357267950964
126145,"@Override public String getJarPath(String jarName){
  String libPath=null;
  try {
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(jarName);
    if (mavenUri == null) {
      mavenUri=mavenUriFromExtensions.get(jarName);
    }
    if (mavenUri != null) {
      libPath=mavenJarInstalled.get(mavenUri);
      if (libPath != null) {
        return libPath;
      }
    }
 else {
      mavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
      if (checkJarInstalledInMaven(mavenUri)) {
        libPath=mavenJarInstalled.get(mavenUri);
        if (libPath != null) {
          return libPath;
        }
      }
    }
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarName);
    if (jarFiles.size() > 0) {
      File file=jarFiles.get(0);
      libPath=file.getAbsolutePath();
    }
    EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
    String relativePath=jarsToRelative.get(jarName);
    if (relativePath == null) {
      relativePath=platfromUriFromExtensions.get(jarName);
    }
    if (relativePath != null && relativePath.startsWith(""String_Node_Str"")) {
      boolean jarFound=checkJarInstalledFromPlatform(relativePath);
      if (jarFound) {
        libPath=studioJarInstalled.get(relativePath);
      }
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
  return libPath;
}","@Override public String getJarPath(String jarName){
  String libPath=null;
  try {
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(jarName);
    if (mavenUri == null) {
      mavenUri=mavenUriFromExtensions.get(jarName);
    }
    if (mavenUri == null) {
      mavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
    }
    libPath=mavenJarInstalled.get(mavenUri);
    if (libPath != null) {
      return libPath;
    }
 else     if (checkJarInstalledInMaven(mavenUri)) {
      libPath=mavenJarInstalled.get(mavenUri);
      if (libPath != null) {
        return libPath;
      }
    }
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarName);
    if (jarFiles.size() > 0) {
      File file=jarFiles.get(0);
      libPath=file.getAbsolutePath();
    }
    EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
    String relativePath=jarsToRelative.get(jarName);
    if (relativePath == null) {
      relativePath=platfromUriFromExtensions.get(jarName);
    }
    if (relativePath != null && relativePath.startsWith(""String_Node_Str"")) {
      boolean jarFound=checkJarInstalledFromPlatform(relativePath);
      if (jarFound) {
        libPath=studioJarInstalled.get(relativePath);
      }
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
  return libPath;
}",0.8885370487650411
126146,"/** 
 * Administrator Comment method ""checkParam"".
 * @param connection
 * @return
 */
public static boolean checkParam(LDAPSchemaConnection connection,boolean isStep1Check){
  String hostName=connection.getHost();
  String port=connection.getPort();
  String protocol=connection.getProtocol();
  if (isStep1Check) {
    protocol=EAuthenticationMethod.ANONYMOUS.getName();
  }
  String encryptionMethod=connection.getEncryptionMethodName();
  String userOrBindId=connection.getBindPrincipal();
  String password=connection.getValue(connection.getBindPassword(),false);
  String aliasesDereference=connection.getAliases();
  String referral=connection.getReferrals();
  boolean isAuthUsed=connection.isUseAuthen();
  env=new java.util.Hashtable<String,String>();
  env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,CONTEXT_FACTORY);
  if (protocol.equals(EAuthenticationMethod.SIMPLE.getName())) {
    env.put(javax.naming.Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  }
 else {
    env.put(javax.naming.Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  }
  if (isAuthUsed && userOrBindId != null && userOrBindId.length() > 0) {
    env.put(javax.naming.Context.SECURITY_PRINCIPAL,userOrBindId);
  }
  if (isAuthUsed && password != null && password.length() > 0) {
    env.put(javax.naming.Context.SECURITY_CREDENTIALS,password);
  }
  if (aliasesDereference != null && aliasesDereference.length() > 0) {
    env.put(""String_Node_Str"",aliasesDereference);
  }
  if (referral != null && referral.length() > 0) {
    env.put(javax.naming.Context.REFERRAL,referral);
  }
  String hostUrl=""String_Node_Str"";
  if (encryptionMethod.equals(EEncryptionMethod.SSL_ENCRYPTION_METHOD.getName()) || (encryptionMethod.equals(EEncryptionMethod.STARTTSL_EXTENSION_METHOD.getName()))) {
    hostUrl=LDAPS_URL_PREFIX + hostName + ""String_Node_Str""+ port;
    env.put(javax.naming.Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (encryptionMethod.equals(EEncryptionMethod.NO_ENCRYPTION_METHOD.getName())) {
    hostUrl=LDAP_URL_PREFIX + hostName + ""String_Node_Str""+ port;
    env.remove(javax.naming.Context.SECURITY_PROTOCOL);
  }
  env.put(javax.naming.Context.PROVIDER_URL,hostUrl);
  try {
    ctx=new javax.naming.ldap.InitialLdapContext(env,null);
    if (encryptionMethod.equals(EEncryptionMethod.STARTTSL_EXTENSION_METHOD)) {
      javax.naming.ldap.StartTlsRequest tldsReq=new javax.naming.ldap.StartTlsRequest();
      javax.naming.ldap.StartTlsResponse tls=(javax.naming.ldap.StartTlsResponse)ctx.extendedOperation(tldsReq);
      javax.net.ssl.SSLSession session=tls.negotiate((javax.net.ssl.SSLSocketFactory)AdvancedSocketFactory.getDefault());
    }
    return true;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
}","/** 
 * Administrator Comment method ""checkParam"".
 * @param connection
 * @return
 */
public static boolean checkParam(LDAPSchemaConnection connection,boolean isStep1Check){
  String hostName=connection.getHost();
  String port=connection.getPort();
  String protocol=connection.getProtocol();
  if (isStep1Check) {
    protocol=EAuthenticationMethod.ANONYMOUS.getName();
  }
  String encryptionMethod=connection.getEncryptionMethodName();
  String userOrBindId=connection.getBindPrincipal();
  String password=connection.getValue(connection.getBindPassword(),false);
  String aliasesDereference=connection.getAliases();
  String referral=connection.getReferrals();
  boolean isAuthUsed=connection.isUseAuthen();
  env=new java.util.Hashtable<String,String>();
  env.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,CONTEXT_FACTORY);
  if (protocol.equals(EAuthenticationMethod.SIMPLE.getName())) {
    env.put(javax.naming.Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  }
 else {
    env.put(javax.naming.Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  }
  if (isAuthUsed && userOrBindId != null && userOrBindId.length() > 0) {
    env.put(javax.naming.Context.SECURITY_PRINCIPAL,userOrBindId);
  }
  if (isAuthUsed && password != null && password.length() > 0) {
    env.put(javax.naming.Context.SECURITY_CREDENTIALS,password);
  }
  if (aliasesDereference != null && aliasesDereference.length() > 0) {
    env.put(""String_Node_Str"",aliasesDereference);
  }
  if (referral != null && referral.length() > 0) {
    env.put(javax.naming.Context.REFERRAL,referral);
  }
  String hostUrl=""String_Node_Str"";
  if (encryptionMethod.equals(EEncryptionMethod.SSL_ENCRYPTION_METHOD.getName()) || (encryptionMethod.equals(EEncryptionMethod.STARTTSL_EXTENSION_METHOD.getName()))) {
    hostUrl=LDAPS_URL_PREFIX + hostName + ""String_Node_Str""+ port;
    env.put(javax.naming.Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(""String_Node_Str"",AdvancedSocketFactory.class.getName());
  }
 else   if (encryptionMethod.equals(EEncryptionMethod.NO_ENCRYPTION_METHOD.getName())) {
    hostUrl=LDAP_URL_PREFIX + hostName + ""String_Node_Str""+ port;
    env.remove(javax.naming.Context.SECURITY_PROTOCOL);
  }
  env.put(javax.naming.Context.PROVIDER_URL,hostUrl);
  try {
    ctx=new javax.naming.ldap.InitialLdapContext(env,null);
    if (encryptionMethod.equals(EEncryptionMethod.STARTTSL_EXTENSION_METHOD)) {
      javax.naming.ldap.StartTlsRequest tldsReq=new javax.naming.ldap.StartTlsRequest();
      javax.naming.ldap.StartTlsResponse tls=(javax.naming.ldap.StartTlsResponse)ctx.extendedOperation(tldsReq);
      javax.net.ssl.SSLSession session=tls.negotiate((javax.net.ssl.SSLSocketFactory)AdvancedSocketFactory.getDefault());
    }
    return true;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return false;
  }
}",0.9904829044765596
126147,"@Override public BundleEntry getEntry(String path){
  BundleEntry be=super.getEntry(path);
  if (be == null && path.endsWith(""String_Node_Str"")) {
    File file=getFile(path,false,false);
    if (file == null) {
      URL resourcePathInFragment=findInFragments(generation.getRevision().getBundle(),path);
      if (resourcePathInFragment != null) {
        return null;
      }
      String jarName=new File(path).getName();
      File libJavaFolderFile=MissingJarServices.getLibJavaFolderFile();
      MissingJarServices.getJarMissingObservable().notifyObservers(new JarMissingObservable.JarMissingEvent(jarName,generation,libJavaFolderFile.getAbsolutePath()));
      MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path+ ""String_Node_Str""+ MissingJarServices.getJarMissingObservable().countObservers()+ ""String_Node_Str"");
      MavenResolver mavenResolver=MissingJarServices.getMavenResolver();
      URI mvnUri;
      try {
        mvnUri=URIUtil.getMvnUri(path,generation,true);
        if (mvnUri != null && mavenResolver != null) {
          try {
            File jarFile=mavenResolver.resolve(mvnUri.toASCIIString());
            be=new FileBundleEntry(jarFile,path);
          }
 catch (          IOException e) {
            MissingJarServices.getLogService().log(LogService.LOG_DEBUG,""String_Node_Str"" + mvnUri + ""String_Node_Str""+ generation.getRevision().getSymbolicName()+ ""String_Node_Str""+ path,e);
          }
        }
        if (be == null) {
          File jarFile=new File(libJavaFolderFile,jarName);
          if (jarFile.exists()) {
            be=new FileBundleEntry(jarFile,path);
          }
 else {
            getMissingJars().add(path + '/');
            be=new MissingJarBundleEntry(path);
            MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
          }
        }
      }
 catch (      URISyntaxException e1) {
        MissingJarServices.getLogService().log(LogService.LOG_ERROR,""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path,e1);
      }
    }
 else {
      be=new FileBundleEntry(file,path);
    }
  }
 else {
    if (getMissingJars().contains(path)) {
      be=new MissingJarBundleEntry(path);
      MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
    }
  }
  return be;
}","@Override public BundleEntry getEntry(String path){
  BundleEntry be=super.getEntry(path);
  if (be == null && path.endsWith(""String_Node_Str"") && ((generation.getRevision().getTypes() & ModuleRevision.TYPE_FRAGMENT) == 0)) {
    File file=getFile(path,false,false);
    if (file == null) {
      URL resourcePathInFragment=findInFragments(generation.getRevision().getBundle(),path);
      if (resourcePathInFragment != null) {
        return null;
      }
      String jarName=new File(path).getName();
      File libJavaFolderFile=MissingJarServices.getLibJavaFolderFile();
      MissingJarServices.getJarMissingObservable().notifyObservers(new JarMissingObservable.JarMissingEvent(jarName,generation,libJavaFolderFile.getAbsolutePath()));
      MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path+ ""String_Node_Str""+ MissingJarServices.getJarMissingObservable().countObservers()+ ""String_Node_Str"");
      MavenResolver mavenResolver=MissingJarServices.getMavenResolver();
      URI mvnUri;
      try {
        mvnUri=URIUtil.getMvnUri(path,generation,true);
        if (mvnUri != null && mavenResolver != null) {
          try {
            File jarFile=mavenResolver.resolve(mvnUri.toASCIIString());
            be=new FileBundleEntry(jarFile,path);
          }
 catch (          IOException e) {
            MissingJarServices.getLogService().log(LogService.LOG_DEBUG,""String_Node_Str"" + mvnUri + ""String_Node_Str""+ generation.getRevision().getSymbolicName()+ ""String_Node_Str""+ path,e);
          }
        }
        if (be == null) {
          File jarFile=new File(libJavaFolderFile,jarName);
          if (jarFile.exists()) {
            be=new FileBundleEntry(jarFile,path);
          }
 else {
            getMissingJars().add(path + '/');
            be=new MissingJarBundleEntry(path);
            MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
          }
        }
      }
 catch (      URISyntaxException e1) {
        MissingJarServices.getLogService().log(LogService.LOG_ERROR,""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path,e1);
      }
    }
 else {
      be=new FileBundleEntry(file,path);
    }
  }
 else {
    if (getMissingJars().contains(path)) {
      be=new MissingJarBundleEntry(path);
      MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
    }
  }
  return be;
}",0.9842911115529926
126148,"/** 
 * DOC sgandon Comment method ""getFileBis"".
 * @param path
 * @param nativeCode
 * @return
 */
protected File getFile(String path,boolean nativeCode,boolean notifyMissingJar){
  File file=super.getFile(path,nativeCode);
  if (file == null && path.endsWith(""String_Node_Str"")) {
    URL resourcePathInFragment=findInFragments(generation.getRevision().getBundle(),path);
    if (resourcePathInFragment != null) {
      return null;
    }
    file=MissingJarBundleFileWrapper.lookForMissingJar(path,generation,notifyMissingJar);
  }
  return file;
}","/** 
 * DOC sgandon Comment method ""getFileBis"".
 * @param path
 * @param nativeCode
 * @return
 */
protected File getFile(String path,boolean nativeCode,boolean notifyMissingJar){
  File file=super.getFile(path,nativeCode);
  if (file == null && path.endsWith(""String_Node_Str"") && ((generation.getRevision().getTypes() & ModuleRevision.TYPE_FRAGMENT) == 0)) {
    URL resourcePathInFragment=findInFragments(generation.getRevision().getBundle(),path);
    if (resourcePathInFragment != null) {
      return null;
    }
    file=MissingJarBundleFileWrapper.lookForMissingJar(path,generation,notifyMissingJar);
  }
  return file;
}",0.933107535986452
126149,"private void deployFile(File file,String mavenUri,Map<String,String> customUriToAdd,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (mavenUri == null) {
            mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (mavenUri == null) {
              mavenUri=defaultMavenUri;
              customUriToAdd.put(jarName,mavenUri);
            }
          }
          sourceAndMavenUri.put(jarFile.getAbsolutePath(),mavenUri);
          if (!defaultMavenUri.equals(mavenUri)) {
            sourceAndMavenUri.put(jarFile.getAbsolutePath(),defaultMavenUri);
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (mavenUri == null) {
        mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (mavenUri == null) {
          mavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
          customUriToAdd.put(file.getName(),mavenUri);
        }
      }
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      sourceAndMavenUri.put(file.getAbsolutePath(),mavenUri);
      if (!defaultMavenUri.equals(mavenUri)) {
        sourceAndMavenUri.put(file.getAbsolutePath(),defaultMavenUri);
      }
      deployer.deployToLocalMaven(sourceAndMavenUri);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}","private void deployFile(File file,String mavenUri,Map<String,String> customUriToAdd,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (mavenUri == null) {
            mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (mavenUri == null) {
              mavenUri=defaultMavenUri;
              customUriToAdd.put(jarName,mavenUri);
            }
          }
          sourceAndMavenUri.put(mavenUri,jarFile.getAbsolutePath());
          if (!defaultMavenUri.equals(mavenUri)) {
            sourceAndMavenUri.put(defaultMavenUri,jarFile.getAbsolutePath());
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (mavenUri == null) {
        mavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (mavenUri == null) {
          mavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
          customUriToAdd.put(file.getName(),mavenUri);
        }
      }
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      sourceAndMavenUri.put(mavenUri,file.getAbsolutePath());
      if (!defaultMavenUri.equals(mavenUri)) {
        sourceAndMavenUri.put(defaultMavenUri,file.getAbsolutePath());
      }
      deployer.deployToLocalMaven(sourceAndMavenUri);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}",0.8924302788844621
126150,"private void deployLibForComponentProviders(IComponentsService service,Set<String> libsWithoutUri,Map<String,String> libsToRelativePath,Map<String,String> libsToMavenUri){
  Set<String> needToDeploy=new HashSet<String>();
  Map<String,File> componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
  Set<String> contributeIdSet=componentsFolders.keySet();
  for (  String contributeID : contributeIdSet) {
    try {
      File file=new File(componentsFolders.get(contributeID).toURI());
      if (""String_Node_Str"".contains(contributeID) || ""String_Node_Str"".contains(contributeID)) {
        if (file.isDirectory()) {
          List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
          if (jarFiles.size() > 0) {
            for (            File jarFile : jarFiles) {
              String name=jarFile.getName();
              if (!libsWithoutUri.contains(name)) {
                continue;
              }
              needToDeploy.add(jarFile.getAbsolutePath());
            }
          }
        }
 else {
          if (!libsWithoutUri.contains(file.getName())) {
            continue;
          }
          needToDeploy.add(file.getAbsolutePath());
        }
      }
 else {
        List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
        if (jarFiles.size() > 0) {
          for (          File jarFile : jarFiles) {
            String name=jarFile.getName();
            if (!libsWithoutUri.contains(name)) {
              continue;
            }
            String path=libsToRelativePath.get(name);
            int lengthBasePath=new Path(file.getParentFile().getAbsolutePath()).toPortableString().length();
            String relativePath=new Path(jarFile.getAbsolutePath()).toPortableString().substring(lengthBasePath);
            String moduleLocation=""String_Node_Str"" + contributeID + relativePath;
            if (path != null) {
              if (path.equals(moduleLocation)) {
                continue;
              }
 else {
                CommonExceptionHandler.warn(name + ""String_Node_Str"" + path+ ""String_Node_Str""+ moduleLocation);
                continue;
              }
            }
            libsToRelativePath.put(name,moduleLocation);
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      continue;
    }
  }
  Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  Map<String,String> libsToMavenUriAll=new HashMap<String,String>();
  libsToMavenUriAll.putAll(libsToMavenUri);
  libsToMavenUriAll.putAll(LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().map());
  if (!needToDeploy.isEmpty()) {
    for (    String file : needToDeploy) {
      String jarName=new File(file).getName();
      String mavenUri=libsToMavenUriAll.get(jarName);
      if (mavenUri == null) {
        mavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
        customUriToAdd.put(jarName,mavenUri);
      }
      sourceAndMavenUri.put(file,mavenUri);
    }
    try {
      deployer.deployToLocalMaven(sourceAndMavenUri);
      if (!customUriToAdd.isEmpty()) {
        deployMavenIndex(customUriToAdd);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}","private void deployLibForComponentProviders(IComponentsService service,Set<String> libsWithoutUri,Map<String,String> libsToRelativePath,Map<String,String> libsToMavenUri){
  Set<String> needToDeploy=new HashSet<String>();
  Map<String,File> componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
  Set<String> contributeIdSet=componentsFolders.keySet();
  for (  String contributeID : contributeIdSet) {
    try {
      File file=new File(componentsFolders.get(contributeID).toURI());
      if (""String_Node_Str"".contains(contributeID) || ""String_Node_Str"".contains(contributeID)) {
        if (file.isDirectory()) {
          List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
          if (jarFiles.size() > 0) {
            for (            File jarFile : jarFiles) {
              String name=jarFile.getName();
              if (!libsWithoutUri.contains(name)) {
                continue;
              }
              needToDeploy.add(jarFile.getAbsolutePath());
            }
          }
        }
 else {
          if (!libsWithoutUri.contains(file.getName())) {
            continue;
          }
          needToDeploy.add(file.getAbsolutePath());
        }
      }
 else {
        List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
        if (jarFiles.size() > 0) {
          for (          File jarFile : jarFiles) {
            String name=jarFile.getName();
            if (!libsWithoutUri.contains(name)) {
              continue;
            }
            String path=libsToRelativePath.get(name);
            int lengthBasePath=new Path(file.getParentFile().getAbsolutePath()).toPortableString().length();
            String relativePath=new Path(jarFile.getAbsolutePath()).toPortableString().substring(lengthBasePath);
            String moduleLocation=""String_Node_Str"" + contributeID + relativePath;
            if (path != null) {
              if (path.equals(moduleLocation)) {
                continue;
              }
 else {
                CommonExceptionHandler.warn(name + ""String_Node_Str"" + path+ ""String_Node_Str""+ moduleLocation);
                continue;
              }
            }
            libsToRelativePath.put(name,moduleLocation);
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      continue;
    }
  }
  Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  Map<String,String> libsToMavenUriAll=new HashMap<String,String>();
  libsToMavenUriAll.putAll(libsToMavenUri);
  libsToMavenUriAll.putAll(LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().map());
  if (!needToDeploy.isEmpty()) {
    for (    String file : needToDeploy) {
      String jarName=new File(file).getName();
      String mavenUri=libsToMavenUriAll.get(jarName);
      if (mavenUri == null) {
        mavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
        customUriToAdd.put(jarName,mavenUri);
      }
      sourceAndMavenUri.put(mavenUri,file);
    }
    try {
      deployer.deployToLocalMaven(sourceAndMavenUri);
      if (!customUriToAdd.isEmpty()) {
        deployMavenIndex(customUriToAdd);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9972948602344456
126151,"/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(int distributionIndex,int hiveVersionIndex){
  boolean isSupportHiveServer2=HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex);
  if (isSupportHiveServer2) {
    DatabaseConnection conn=getConnection();
    String hiveServerDisplayNames[]=HiveServerVersionUtils.extractAvailableArrayDisplayNames(HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex));
    hiveServerVersionCombo.getCombo().setItems(hiveServerDisplayNames);
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    int hiveServerIndex=0;
    if (hiveServerDisplayNames != null && hiveServerKey != null) {
      for (hiveServerIndex=0; hiveServerIndex < hiveServerDisplayNames.length; hiveServerIndex++) {
        if (hiveServerKey.equals(hiveServerDisplayNames)) {
          break;
        }
      }
      if (hiveServerDisplayNames.length <= hiveServerIndex) {
        hiveServerIndex=0;
      }
    }
    hiveServerVersionCombo.select(hiveServerIndex);
  }
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  updateHiveModeAndMakeSelection(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}","/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(int distributionIndex,int hiveVersionIndex){
  boolean isSupportHiveServer2=HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex);
  if (isSupportHiveServer2) {
    DatabaseConnection conn=getConnection();
    String hiveServerDisplayNames[]=HiveServerVersionUtils.extractAvailableArrayDisplayNames(HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex));
    hiveServerVersionCombo.getCombo().setItems(hiveServerDisplayNames);
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    int hiveServerIndex=0;
    if (hiveServerDisplayNames != null && hiveServerKey != null) {
      for (hiveServerIndex=0; hiveServerIndex < hiveServerDisplayNames.length; hiveServerIndex++) {
        if (hiveServerKey.equals(HiveServerVersionUtils.extractKey(HiveConnUtils.getIndexOfHiveServerByDisplayName(hiveServerDisplayNames[hiveServerIndex])))) {
          break;
        }
      }
    }
    hiveServerVersionCombo.select(hiveServerIndex);
  }
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  updateHiveModeAndMakeSelection(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}",0.9276315789473684
126152,"private void setHidAuthenticationForHive(boolean hide){
  if (!hide) {
    GridData keytabGridData=(GridData)useKeyTab.getLayoutData();
    GridData keytabDetailGridData=(GridData)keyTabComponent.getLayoutData();
    if (!isHiveEmbeddedMode()) {
      useKeyTab.setVisible(false);
      keyTabComponent.setVisible(false);
      keytabGridData.exclude=true;
      keytabDetailGridData.exclude=true;
      useKeyTab.setSelection(false);
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,""String_Node_Str"");
    }
 else {
      boolean keytabCompositeVisible=useKeyTab.getSelection();
      useKeyTab.setVisible(true);
      keyTabComponent.setVisible(keytabCompositeVisible);
      keytabGridData.exclude=false;
      keytabDetailGridData.exclude=!keytabCompositeVisible;
    }
    useKeyTab.setLayoutData(keytabGridData);
    keyTabComponent.setLayoutData(keytabDetailGridData);
    useKeyTab.getParent().layout();
  }
  GridData hadoopData=(GridData)authenticationGrp.getLayoutData();
  hadoopData.exclude=hide;
  authenticationGrp.setVisible(!hide);
  authenticationGrp.setLayoutData(hadoopData);
  authenticationGrp.layout();
  authenticationGrp.getParent().layout();
}","private void setHidAuthenticationForHive(boolean hide){
  GridData hadoopData=(GridData)authenticationGrp.getLayoutData();
  hadoopData.exclude=hide;
  authenticationGrp.setVisible(!hide);
  authenticationGrp.setLayoutData(hadoopData);
  authenticationGrp.getParent().layout();
}",0.091644204851752
126153,"protected boolean isOptionChecked(String key){
  if (key != null && argumentsMap != null) {
    final Object object=argumentsMap.get(key);
    if (object instanceof Boolean) {
      return (Boolean)object;
    }
 else     if (object instanceof String) {
      return Boolean.parseBoolean((String)object);
    }
  }
  return false;
}","protected boolean isOptionChecked(String key,Object... args){
  return ProcessUtils.isOptionChecked(argumentsMap,key,args);
}",0.3194748358862144
126154,"@SuppressWarnings(""String_Node_Str"") @Override protected Model createModel(){
  Model model=null;
  InputStream inputStream=null;
  try {
    inputStream=getTemplateStream();
    if (inputStream != null) {
      model=MODEL_MANAGER.readMavenModel(inputStream);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (model == null) {
    return null;
  }
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final Property property=jProcessor.getProperty();
  Map<ETalendMavenVariables,String> variablesValuesMap=new HashMap<ETalendMavenVariables,String>();
  variablesValuesMap.put(ETalendMavenVariables.JobGroupId,PomIdsHelper.getJobGroupId(property));
  variablesValuesMap.put(ETalendMavenVariables.JobArtifactId,PomIdsHelper.getJobArtifactId(property));
  variablesValuesMap.put(ETalendMavenVariables.JobVersion,PomIdsHelper.getJobVersion(property));
  final String jobName=JavaResourcesHelper.escapeFileName(process.getName());
  variablesValuesMap.put(ETalendMavenVariables.JobName,jobName);
  if (property != null) {
    Project currentProject=ProjectManager.getInstance().getProject(property);
    variablesValuesMap.put(ETalendMavenVariables.ProjectName,currentProject != null ? currentProject.getTechnicalLabel() : null);
    Item item=property.getItem();
    if (item != null) {
      ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
      if (itemType != null) {
        variablesValuesMap.put(ETalendMavenVariables.JobType,itemType.getLabel());
      }
    }
  }
  this.setGroupId(ETalendMavenVariables.replaceVariables(model.getGroupId(),variablesValuesMap));
  this.setArtifactId(ETalendMavenVariables.replaceVariables(model.getArtifactId(),variablesValuesMap));
  this.setVersion(ETalendMavenVariables.replaceVariables(model.getVersion(),variablesValuesMap));
  this.setName(ETalendMavenVariables.replaceVariables(model.getName(),variablesValuesMap));
  setAttributes(model);
  addProperties(model);
  PomUtil.checkParent(model,this.getPomFile());
  addDependencies(model);
  return model;
}","@Override protected Model createModel(){
  Model model=null;
  InputStream inputStream=null;
  try {
    inputStream=getTemplateStream();
    if (inputStream != null) {
      model=MODEL_MANAGER.readMavenModel(inputStream);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  if (model == null) {
    return null;
  }
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final Property property=jProcessor.getProperty();
  Map<ETalendMavenVariables,String> variablesValuesMap=new HashMap<ETalendMavenVariables,String>();
  variablesValuesMap.put(ETalendMavenVariables.JobGroupId,PomIdsHelper.getJobGroupId(property));
  variablesValuesMap.put(ETalendMavenVariables.JobArtifactId,PomIdsHelper.getJobArtifactId(property));
  variablesValuesMap.put(ETalendMavenVariables.JobVersion,PomIdsHelper.getJobVersion(property));
  final String jobName=JavaResourcesHelper.escapeFileName(process.getName());
  variablesValuesMap.put(ETalendMavenVariables.JobName,jobName);
  if (property != null) {
    Project currentProject=ProjectManager.getInstance().getProject(property);
    variablesValuesMap.put(ETalendMavenVariables.ProjectName,currentProject != null ? currentProject.getTechnicalLabel() : null);
    Item item=property.getItem();
    if (item != null) {
      ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
      if (itemType != null) {
        variablesValuesMap.put(ETalendMavenVariables.JobType,itemType.getLabel());
      }
    }
  }
  this.setGroupId(ETalendMavenVariables.replaceVariables(model.getGroupId(),variablesValuesMap));
  this.setArtifactId(ETalendMavenVariables.replaceVariables(model.getArtifactId(),variablesValuesMap));
  this.setVersion(ETalendMavenVariables.replaceVariables(model.getVersion(),variablesValuesMap));
  this.setName(ETalendMavenVariables.replaceVariables(model.getName(),variablesValuesMap));
  setAttributes(model);
  addProperties(model);
  PomUtil.checkParent(model,this.getPomFile());
  addDependencies(model);
  return model;
}",0.9919161022503824
126155,"/** 
 * add dependencies for pom.
 */
protected void addDependencies(Model model){
  try {
    processorDependenciesManager.updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String parentId=getJobProcessor().getProperty().getId();
    final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
    for (    JobInfo jobInfo : clonedChildrenJobInfors) {
      if (jobInfo.getFatherJobInfo() != null && jobInfo.getFatherJobInfo().getJobId().equals(parentId)) {
        if (jobInfo.isTestContainer()) {
          continue;
        }
        Dependency d=PomUtil.createDependency(model.getGroupId(),PomIdsHelper.getJobArtifactId(jobInfo),PomIdsHelper.getJobVersion(jobInfo),null);
        dependencies.add(d);
      }
    }
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * add dependencies for pom.
 */
protected void addDependencies(Model model){
  try {
    processorDependenciesManager.updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String parentId=getJobProcessor().getProperty().getId();
    final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
    for (    JobInfo jobInfo : clonedChildrenJobInfors) {
      if (jobInfo.getFatherJobInfo() != null && jobInfo.getFatherJobInfo().getJobId().equals(parentId)) {
        if (jobInfo.isTestContainer()) {
          continue;
        }
        Dependency d=PomUtil.createDependency(model.getGroupId(),PomIdsHelper.getJobArtifactId(jobInfo),PomIdsHelper.getJobVersion(jobInfo),null);
        dependencies.add(d);
      }
    }
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.9251305861868834
126156,"@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
  String parentId=getJobProcessor().getProperty().getId();
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null && child.getFatherJobInfo().getJobId().equals(parentId)) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  String parentId=getJobProcessor().getProperty().getId();
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null && child.getFatherJobInfo().getJobId().equals(parentId)) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}",0.9946945993742348
126157,"@SuppressWarnings(""String_Node_Str"") @Override protected Model createModel(){
  Model model=super.createModel();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final String jobName=JavaResourcesHelper.escapeFileName(process.getName());
  String artifact=jobName;
  model.setArtifactId(artifact);
  model.setVersion(process.getVersion());
  Property property=jProcessor.getProperty();
  if (property != null && property.getItem() != null) {
    model.setGroupId(PomIdsHelper.getTestGroupId(property));
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(property.getItem());
    if (itemType != null) {
      model.setName(jobName + '(' + itemType.getLabel()+ ')');
    }
  }
  PomUtil.checkParent(model,this.getPomFile());
  addDependencies(model);
  return model;
}","@Override protected Model createModel(){
  Model model=super.createModel();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final String jobName=JavaResourcesHelper.escapeFileName(process.getName());
  String artifact=jobName;
  model.setArtifactId(artifact);
  model.setVersion(process.getVersion());
  Property property=jProcessor.getProperty();
  if (property != null && property.getItem() != null) {
    model.setGroupId(PomIdsHelper.getTestGroupId(property));
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(property.getItem());
    if (itemType != null) {
      model.setName(jobName + '(' + itemType.getLabel()+ ')');
    }
  }
  PomUtil.checkParent(model,this.getPomFile());
  addDependencies(model);
  return model;
}",0.9773976786805132
126158,"/** 
 * add dependencies for pom.
 */
protected void addDependencies(Model model){
  try {
    processorDependenciesManager.updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String parentId=getJobProcessor().getProperty().getId();
    final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
    for (    JobInfo jobInfo : clonedChildrenJobInfors) {
      if (jobInfo.getFatherJobInfo() != null && jobInfo.getFatherJobInfo().getJobId().equals(parentId)) {
        Dependency d=PomUtil.createDependency(model.getGroupId(),jobInfo.getJobName(),jobInfo.getJobVersion(),null);
        dependencies.add(d);
      }
    }
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * add dependencies for pom.
 */
protected void addDependencies(Model model){
  try {
    processorDependenciesManager.updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String parentId=getJobProcessor().getProperty().getId();
    final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
    for (    JobInfo jobInfo : clonedChildrenJobInfors) {
      if (jobInfo.getFatherJobInfo() != null && jobInfo.getFatherJobInfo().getJobId().equals(parentId)) {
        Dependency d=PomUtil.createDependency(model.getGroupId(),jobInfo.getJobName(),jobInfo.getJobVersion(),null);
        dependencies.add(d);
      }
    }
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.9151873767258384
126159,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  boolean isImpala=visible && ImpalaVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| isImpala|| EDatabaseConnTemplate.PSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.PLUSPSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
        int distributionIndex=distributionCombo.getSelectionIndex();
        int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
        int hiveModeIndex=hiveModeCombo.getSelectionIndex();
        int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
        if (HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex)) {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex)) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
          }
        }
 else {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex)) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
          }
        }
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM) || isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHCLinkSettings(!isHbase && !isHiveDBConnSelected());
    hideHBaseSettings(!isHbase);
    hideImpalaSettings(!isImpala);
    updateHadoopPropertiesFieldsState();
    updateHiveJDBCPropertiesFieldsState();
    showIfAuthentication();
    hideHiveExecutionFields(!isSupportTez());
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase || isImpala) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        if (isImpala) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(""String_Node_Str"");
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        sidOrDatabaseText.setEditable(true);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase || isImpala) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(true);
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED && !isHiveDBConnSelected()) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase || isImpala) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  impalaSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  boolean isImpala=visible && ImpalaVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| isImpala|| EDatabaseConnTemplate.PSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.PLUSPSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
        int distributionIndex=distributionCombo.getSelectionIndex();
        int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
        int hiveModeIndex=hiveModeCombo.getSelectionIndex();
        int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
        if (HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex)) {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex)) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
          }
        }
 else {
          if (HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex)) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
          }
        }
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM) || isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHCLinkSettings(!isHbase && !isHiveDBConnSelected());
    hideHBaseSettings(!isHbase);
    hideImpalaSettings(!isImpala);
    updateHadoopPropertiesFieldsState();
    updateHiveJDBCPropertiesFieldsState();
    showIfAuthentication();
    hideHiveExecutionFields(!isSupportTez());
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase || isImpala) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        if (isImpala) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(""String_Node_Str"");
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        sidOrDatabaseText.setEditable(true);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase || isImpala) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(true);
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED && !isHiveDBConnSelected()) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase || isImpala) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  impalaSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.9977574607555632
126160,"/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(int distributionIndex,int hiveVersionIndex){
  boolean isSupportHiveServer2=HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex);
  if (isSupportHiveServer2) {
    DatabaseConnection conn=getConnection();
    String hiveServerDisplayNames[]=HiveServerVersionUtils.extractAvailableArrayDisplayNames(HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex));
    hiveServerVersionCombo.getCombo().setItems(hiveServerDisplayNames);
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    hiveServerVersionCombo.select(HiveServerVersionUtils.getIndexofHiveServerByKey(hiveServerKey));
  }
  int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  updateHiveModeAndMakeSelection(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}","/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(int distributionIndex,int hiveVersionIndex){
  boolean isSupportHiveServer2=HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex);
  if (isSupportHiveServer2) {
    DatabaseConnection conn=getConnection();
    String hiveServerDisplayNames[]=HiveServerVersionUtils.extractAvailableArrayDisplayNames(HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex));
    hiveServerVersionCombo.getCombo().setItems(hiveServerDisplayNames);
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    int hiveServerIndex=0;
    if (hiveServerDisplayNames != null && hiveServerKey != null) {
      for (hiveServerIndex=0; hiveServerIndex < hiveServerDisplayNames.length; hiveServerIndex++) {
        if (hiveServerKey.equals(hiveServerDisplayNames)) {
          break;
        }
      }
      if (hiveServerDisplayNames.length <= hiveServerIndex) {
        hiveServerIndex=0;
      }
    }
    hiveServerVersionCombo.select(hiveServerIndex);
  }
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  updateHiveModeAndMakeSelection(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}",0.6471705279149259
126161,"protected String getHiveModeKey(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
  return HiveConnUtils.getHiveModeObjKey(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}","protected String getHiveModeKey(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  return HiveConnUtils.getHiveModeObjKey(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}",0.9056152927120668
126162,"private boolean isSupportTez(){
  if (isHiveDBConnSelected()) {
    int distributionIndex=distributionCombo.getSelectionIndex();
    int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
    int hiveModeIndex=hiveModeCombo.getSelectionIndex();
    int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
    if (distributionIndex >= 0 && hiveVersionIndex >= 0 && hiveModeIndex >= 0) {
      boolean supportTez=HiveConnUtils.isSupportTez(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
      return supportTez;
    }
  }
  return false;
}","private boolean isSupportTez(){
  if (isHiveDBConnSelected()) {
    int distributionIndex=distributionCombo.getSelectionIndex();
    int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
    int hiveModeIndex=hiveModeCombo.getSelectionIndex();
    int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
    if (distributionIndex >= 0 && hiveVersionIndex >= 0 && hiveModeIndex >= 0) {
      boolean supportTez=HiveConnUtils.isSupportTez(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
      return supportTez;
    }
  }
  return false;
}",0.9507101086048454
126163,"/** 
 * <pre> Updates the parameter of Hive mode in connection. Put the following parameters in <code>DatabaseConnection</code> .  <li>Hive distribution, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_DISTRIBUTION}</li>  <li>Distro version, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_VERSION}</li>  <li>Hive mode, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_MODE}</li>  <li>Name node URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_NAME_NODE_URL}</li>  <li>Job Tracker URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_JOB_TRACKER_URL}</li> <li>Hive Server version, the key is   {@link ConnParameterKeys#HIVE_SERVER_VERSION}</li>
 */
protected void doUpdateConnection(){
  if (!isContextMode()) {
    int distributionIndex=distributionCombo.getSelectionIndex();
    int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
    int hiveModeIndex=hiveModeCombo.getSelectionIndex();
    int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
    String key=HiveConnUtils.getHiveModeObj(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex).getKey();
    EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(key);
    DatabaseConnection conn=getConnection();
    if (version != null) {
      conn.setDbVersionString(version.getVersionDisplay());
    }
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE,EDatabaseConnTemplate.HIVE.getDBTypeName());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,HiveConnUtils.getDistributionObj(distributionIndex).getKey());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex).getKey());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,HiveConnUtils.getHiveModeObj(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex).getKey());
    conn.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,HiveServerVersionUtils.extractKey(hiveServerIndex));
  }
}","/** 
 * <pre> Updates the parameter of Hive mode in connection. Put the following parameters in <code>DatabaseConnection</code> .  <li>Hive distribution, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_DISTRIBUTION}</li>  <li>Distro version, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_VERSION}</li>  <li>Hive mode, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_MODE}</li>  <li>Name node URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_NAME_NODE_URL}</li>  <li>Job Tracker URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_JOB_TRACKER_URL}</li> <li>Hive Server version, the key is   {@link ConnParameterKeys#HIVE_SERVER_VERSION}</li>
 */
protected void doUpdateConnection(){
  if (!isContextMode()) {
    int distributionIndex=distributionCombo.getSelectionIndex();
    int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
    int hiveModeIndex=hiveModeCombo.getSelectionIndex();
    int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
    String key=HiveConnUtils.getHiveModeObj(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex).getKey();
    EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(key);
    DatabaseConnection conn=getConnection();
    if (version != null) {
      conn.setDbVersionString(version.getVersionDisplay());
    }
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE,EDatabaseConnTemplate.HIVE.getDBTypeName());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,HiveConnUtils.getDistributionObj(distributionIndex).getKey());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex).getKey());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,HiveConnUtils.getHiveModeObj(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex).getKey());
    conn.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,HiveServerVersionUtils.extractKey(hiveServerIndex));
  }
}",0.9777138749101366
126164,"private boolean isSupportSecurity(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
  if (distributionIndex >= 0 && hiveVersionIndex >= 0 && hiveModeIndex >= 0) {
    boolean supportSecurity=HiveConnUtils.isSupportSecurity(distributionIndex,hiveVersionIndex,hiveModeIndex,HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText()),hiveServerIndex);
    if (supportSecurity) {
      return true;
    }
  }
  return false;
}","private boolean isSupportSecurity(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  if (distributionIndex >= 0 && hiveVersionIndex >= 0 && hiveModeIndex >= 0) {
    boolean supportSecurity=HiveConnUtils.isSupportSecurity(distributionIndex,hiveVersionIndex,hiveModeIndex,HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText()),hiveServerIndex);
    if (supportSecurity) {
      return true;
    }
  }
  return false;
}",0.9569028487947406
126165,"/** 
 * This method is invoked when an item of Hive mode is selected. If the selected is Embedded, it invokes  {@link #handleEmbeddedMode()},   {@link #handleStandaloneMode()} otherwise. Then it invokes the method{@link #doUpdateConnection()} to update connection. Added by Marvin Wang on Aug. 3, 2012.
 */
protected void doHiveModeModify(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
  boolean isEmbeddedMode=HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
  getConnection().setURL(getStringConnection());
  if (isEmbeddedMode) {
    handleUIWhenEmbeddedModeSelected();
  }
 else {
    handleUIWhenStandaloneModeSelected();
  }
  fillDefaultsWhenHiveModeChanged(isEmbeddedMode);
  doUpdateConnection();
}","/** 
 * This method is invoked when an item of Hive mode is selected. If the selected is Embedded, it invokes  {@link #handleEmbeddedMode()},   {@link #handleStandaloneMode()} otherwise. Then it invokes the method{@link #doUpdateConnection()} to update connection. Added by Marvin Wang on Aug. 3, 2012.
 */
protected void doHiveModeModify(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int hiveVersionIndex=hiveVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  int hiveServerIndex=getRealHiveServerIndex(distributionIndex,hiveVersionIndex,hiveServerVersionCombo.getSelectionIndex());
  boolean isEmbeddedMode=HiveConnUtils.isEmbeddedMode(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
  getConnection().setURL(getStringConnection());
  if (isEmbeddedMode) {
    handleUIWhenEmbeddedModeSelected();
  }
 else {
    handleUIWhenStandaloneModeSelected();
  }
  fillDefaultsWhenHiveModeChanged(isEmbeddedMode);
  doUpdateConnection();
}",0.9700355510411376
126166,"protected void doHiveServerSelected(){
  if (!isContextMode()) {
    modifyFieldValue();
    getConnection().getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,HiveServerVersionUtils.extractKey(hiveServerVersionCombo.getSelectionIndex()));
  }
  int distributionIndex=distributionCombo.getSelectionIndex();
  int currSelectedIndex=hiveVersionCombo.getSelectionIndex();
  updateHiveServerAndMakeSelection(distributionIndex,currSelectedIndex);
}","protected void doHiveServerSelected(){
  int distributionIndex=distributionCombo.getSelectionIndex();
  int currSelectedIndex=hiveVersionCombo.getSelectionIndex();
  if (!isContextMode()) {
    modifyFieldValue();
    getConnection().getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,HiveServerVersionUtils.extractKey(getRealHiveServerIndex(distributionIndex,currSelectedIndex,hiveServerVersionCombo.getSelectionIndex())));
  }
  updateHiveServerAndMakeSelection(distributionIndex,currSelectedIndex);
}",0.5354166666666667
126167,"public ELibraryInstallStatus getStatus(){
  if (status == ELibraryInstallStatus.UNKNOWN) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
    }
 else {
      String localMavenUri=getMavenUri();
      localMavenUri.replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
      try {
        mavenResolver.resolve(localMavenUri);
        status=ELibraryInstallStatus.INSTALLED;
      }
 catch (      IOException e) {
        status=ELibraryInstallStatus.NOT_INSTALLED;
      }
    }
  }
  return this.status;
}","public ELibraryInstallStatus getStatus(){
  if (status == ELibraryInstallStatus.UNKNOWN) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
    }
 else {
      String localMavenUri=getMavenUri().replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
      try {
        mavenResolver.resolve(localMavenUri);
        status=ELibraryInstallStatus.INSTALLED;
      }
 catch (      IOException e) {
        status=ELibraryInstallStatus.NOT_INSTALLED;
      }
    }
  }
  return this.status;
}",0.9868667917448404
126168,"@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  DelimitedFileConnection originalValueConnection=null;
  if (isContextMode()) {
    boolean found=false;
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),getConnection().getContextName(),false);
    if (contextType != null) {
      if (getContextModeManager() != null) {
        getContextModeManager().setSelectedContextType(contextType);
        filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
        filePath=TalendQuoteUtils.removeQuotes(filePath);
        found=true;
      }
      originalValueConnection=(DelimitedFileConnection)FileConnectionContextUtils.cloneOriginalValueConnection(getConnection(),contextType);
    }
    if (!found) {
      filePath=null;
    }
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  firstRowIsCatption=firstRowIsCaptionCheckbox.getSelection();
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  processDescription=getProcessDescription(originalValueConnection);
  return true;
}","@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  DelimitedFileConnection originalValueConnection=null;
  if (isContextMode()) {
    boolean found=false;
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),getConnection().getContextName(),false);
    if (contextType != null) {
      if (getContextModeManager() != null) {
        getContextModeManager().setSelectedContextType(contextType);
        filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
        filePath=TalendQuoteUtils.removeQuotes(filePath);
        found=true;
      }
      originalValueConnection=(DelimitedFileConnection)FileConnectionContextUtils.cloneOriginalValueConnection(getConnection(),contextType);
    }
    if (!found) {
      filePath=null;
    }
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  firstRowIsCatption=firstRowIsCaptionCheckbox.getSelection();
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  processDescription=getProcessDescription(originalValueConnection);
  updateStatus(IStatus.ERROR,null);
  return true;
}",0.988929889298893
126169,"@Override public void updateUIInThreadIfThreadFinally(){
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}","@Override public void updateUIInThreadIfThreadFinally(){
  checkFieldsValue();
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}",0.9481132075471698
126170,"@Override public void postProcessCancle(){
  previewButton.setEnabled(false);
}","@Override public void postProcessCancle(){
  checkFieldsValue();
  previewButton.setEnabled(false);
}",0.8777777777777778
126171,"/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
}","/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
}",0.9973300106799572
126172,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
126173,"@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  FileExcelConnection originalValueConnection=null;
  if (isContextMode()) {
    boolean found=false;
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),getConnection().getContextName(),false);
    if (contextType != null) {
      if (getContextModeManager() != null) {
        getContextModeManager().setSelectedContextType(contextType);
        filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
        filePath=TalendQuoteUtils.removeQuotes(filePath);
        found=true;
      }
      setConnectionProperties();
      originalValueConnection=(FileExcelConnection)FileConnectionContextUtils.cloneOriginalValueConnection(getConnection(),contextType);
    }
    if (!found) {
      filePath=null;
    }
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  firstRowIsCatption=firstRowIsCaptionCheckbox.getSelection();
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  processDescription=getProcessDescription(originalValueConnection);
  return true;
}","@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  FileExcelConnection originalValueConnection=null;
  if (isContextMode()) {
    boolean found=false;
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),getConnection().getContextName(),false);
    if (contextType != null) {
      if (getContextModeManager() != null) {
        getContextModeManager().setSelectedContextType(contextType);
        filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
        filePath=TalendQuoteUtils.removeQuotes(filePath);
        found=true;
      }
      setConnectionProperties();
      originalValueConnection=(FileExcelConnection)FileConnectionContextUtils.cloneOriginalValueConnection(getConnection(),contextType);
    }
    if (!found) {
      filePath=null;
    }
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  firstRowIsCatption=firstRowIsCaptionCheckbox.getSelection();
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  processDescription=getProcessDescription(originalValueConnection);
  updateStatus(IStatus.ERROR,null);
  return true;
}",0.9890975166565718
126174,"@Override public void updateUIInThreadIfThreadFinally(){
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}","@Override public void updateUIInThreadIfThreadFinally(){
  checkFieldsValue();
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}",0.9481132075471698
126175,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
126176,"/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setEncoding(encodingCombo.getText());
        checkFieldsValue();
      }
    }
  }
);
  advanceSeparatorCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean select=advanceSeparatorCheckbox.getSelection();
      getConnection().setAdvancedSpearator(select);
      if (!isContextMode()) {
        decimalSeparatorText.setEnabled(select);
        thousandSeparaotrText.setEnabled(select);
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  decimalSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  thousandSeparaotrText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        checkFieldsValue();
      }
    }
  }
);
}","/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setEncoding(encodingCombo.getText());
        checkFieldsValue();
      }
    }
  }
);
  advanceSeparatorCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean select=advanceSeparatorCheckbox.getSelection();
      getConnection().setAdvancedSpearator(select);
      if (!isContextMode()) {
        decimalSeparatorText.setEnabled(select);
        thousandSeparaotrText.setEnabled(select);
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  decimalSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setDecimalSeparator(decimalSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  thousandSeparaotrText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setThousandSeparator(thousandSeparaotrText.getText());
        checkFieldsValue();
      }
    }
  }
);
}",0.9900332225913622
126177,"@Override public void postProcessCancle(){
  previewButton.setEnabled(false);
}","@Override public void postProcessCancle(){
  checkFieldsValue();
  previewButton.setEnabled(false);
}",0.8777777777777778
126178,"public void modifyText(ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setThousandSeparator(thousandSeparaotrText.getText());
    checkFieldsValue();
  }
}","@Override public void modifyText(ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setThousandSeparator(thousandSeparaotrText.getText());
    checkFieldsValue();
  }
}",0.971264367816092
126179,"@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray == null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    excelProcessPreview.refreshTablePreview(csvArray,getConnection().isFirstLineCaption(),processDescription);
    previewInformationLabel.setText(""String_Node_Str"");
  }
}","@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray == null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    excelProcessPreview.refreshTablePreview(csvArray,getConnection().isFirstLineCaption(),processDescription);
    previewInformationLabel.setText(""String_Node_Str"");
  }
}",0.9944444444444444
126180,"private void addFieldsListenersDieOnError(){
  firstColumnText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFirstColumn(firstColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
  lastColumnText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setLastColumn(lastColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
}","private void addFieldsListenersDieOnError(){
  firstColumnText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFirstColumn(firstColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
  lastColumnText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setLastColumn(lastColumnText.getText());
        checkFieldsValue();
      }
    }
  }
);
}",0.981981981981982
126181,"@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  LdifFileConnection originalValueConnection=null;
  if (isContextMode() && getContextModeManager() != null) {
    filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
    filePath=TalendQuoteUtils.removeQuotes(filePath);
    originalValueConnection=OtherConnectionContextUtils.cloneOriginalValueLdifFileConnection(getConnection(),getContextModeManager().getSelectedContextType());
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  TableItem[] items=tableEditorView.getTableViewerCreator().getTable().getItems();
  for (  TableItem item : items) {
    if (item.getChecked() && !getConnection().getValue().contains(item.getText())) {
      getConnection().getValue().add(item.getText());
    }
  }
  processDescription=getProcessDescription(originalValueConnection);
  return true;
}","@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  LdifFileConnection originalValueConnection=null;
  if (isContextMode() && getContextModeManager() != null) {
    filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
    filePath=TalendQuoteUtils.removeQuotes(filePath);
    originalValueConnection=OtherConnectionContextUtils.cloneOriginalValueLdifFileConnection(getConnection(),getContextModeManager().getSelectedContextType());
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  TableItem[] items=tableEditorView.getTableViewerCreator().getTable().getItems();
  for (  TableItem item : items) {
    if (item.getChecked() && !getConnection().getValue().contains(item.getText())) {
      getConnection().getValue().add(item.getText());
    }
  }
  processDescription=getProcessDescription(originalValueConnection);
  updateStatus(IStatus.ERROR,null);
  return true;
}",0.9877800407331976
126182,"@Override public void updateUIInThreadIfThreadFinally(){
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}","@Override public void updateUIInThreadIfThreadFinally(){
  checkFieldsValue();
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}",0.9481132075471698
126183,"@Override public void postProcessCancle(){
  previewButton.setEnabled(false);
}","@Override public void postProcessCancle(){
  checkFieldsValue();
  previewButton.setEnabled(false);
}",0.8777777777777778
126184,"/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}","/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}",0.9973944762897342
126185,"/** 
 * add Controls of Group File File Settings.
 */
private void addFieldsListenersGroupFileSettings(){
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        rowSeparatorManager();
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String value=getValidateFieldSeparator(fieldSeparatorText.getText());
        Point selection=fieldSeparatorText.getSelection();
        String temp=TalendQuoteUtils.addQuotes(value);
        if (!(temp.equals(fieldSeparatorText.getText()))) {
          fieldSeparatorText.setText(temp);
        }
        getConnection().setFieldSeparatorValue(temp);
        fieldSeparatorText.forceFocus();
        fieldSeparatorText.setSelection(selection.x);
        checkFieldsValue();
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldSeparatorText.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        String value=getValidateFieldSeparator(fieldSeparatorText.getText());
        value=removeInvalidEndComma(value);
        String temp=TalendQuoteUtils.addQuotes(value);
        if (!(temp.equals(fieldSeparatorText.getText()))) {
          fieldSeparatorText.setText(temp);
        }
        getConnection().setFieldSeparatorValue(temp);
        checkFieldsValue();
      }
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setRowSeparatorValue(rowSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}","/** 
 * add Controls of Group File File Settings.
 */
private void addFieldsListenersGroupFileSettings(){
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        rowSeparatorManager();
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String value=getValidateFieldSeparator(fieldSeparatorText.getText());
        Point selection=fieldSeparatorText.getSelection();
        String temp=TalendQuoteUtils.addQuotes(value);
        if (!(temp.equals(fieldSeparatorText.getText()))) {
          fieldSeparatorText.setText(temp);
        }
        getConnection().setFieldSeparatorValue(temp);
        fieldSeparatorText.forceFocus();
        fieldSeparatorText.setSelection(selection.x);
        checkFieldsValue();
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldSeparatorText.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        String value=getValidateFieldSeparator(fieldSeparatorText.getText());
        value=removeInvalidEndComma(value);
        String temp=TalendQuoteUtils.addQuotes(value);
        if (!(temp.equals(fieldSeparatorText.getText()))) {
          fieldSeparatorText.setText(temp);
        }
        getConnection().setFieldSeparatorValue(temp);
        checkFieldsValue();
      }
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setRowSeparatorValue(rowSeparatorText.getText());
        checkFieldsValue();
      }
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}",0.9932034435885818
126186,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
126187,"public void updateUIInThreadIfThreadIsCanceled(){
  if (!previewInformationLabel.isDisposed()) {
    previewInformationLabel.setText(""String_Node_Str"");
  }
}","@Override public void updateUIInThreadIfThreadIsCanceled(){
  if (!previewInformationLabel.isDisposed()) {
    previewInformationLabel.setText(""String_Node_Str"");
  }
}",0.9693251533742332
126188,"public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  PositionalFileConnection originalValueConnection=null;
  if (isContextMode()) {
    boolean found=false;
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),getConnection().getContextName(),false);
    if (contextType != null) {
      if (getContextModeManager() != null) {
        getContextModeManager().setSelectedContextType(contextType);
        filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
        filePath=TalendQuoteUtils.removeQuotes(filePath);
        found=true;
      }
      originalValueConnection=(PositionalFileConnection)FileConnectionContextUtils.cloneOriginalValueConnection(getConnection(),contextType);
    }
    if (!found) {
      filePath=null;
    }
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  processDescription=getProcessDescription(originalValueConnection);
  return true;
}","@Override public boolean preProcessStart(){
  previewButton.setText(Messages.getString(""String_Node_Str""));
  clearPreview();
  String filePath=getConnection().getFilePath();
  PositionalFileConnection originalValueConnection=null;
  if (isContextMode()) {
    boolean found=false;
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),getConnection().getContextName(),false);
    if (contextType != null) {
      if (getContextModeManager() != null) {
        getContextModeManager().setSelectedContextType(contextType);
        filePath=getContextModeManager().getOriginalValue(getConnection().getFilePath());
        filePath=TalendQuoteUtils.removeQuotes(filePath);
        found=true;
      }
      originalValueConnection=(PositionalFileConnection)FileConnectionContextUtils.cloneOriginalValueConnection(getConnection(),contextType);
    }
    if (!found) {
      filePath=null;
    }
  }
  if (filePath == null || filePath.equals(""String_Node_Str"")) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!checkFieldsValue()) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    return false;
  }
  previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  if (originalValueConnection == null) {
    originalValueConnection=getConnection();
  }
  processDescription=getProcessDescription(originalValueConnection);
  updateStatus(IStatus.ERROR,null);
  return true;
}",0.9852564102564104
126189,"public void updateUIInThreadIfThreadFinally(){
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}","@Override public void updateUIInThreadIfThreadFinally(){
  checkFieldsValue();
  if (!previewButton.isDisposed()) {
    previewButton.setText(Messages.getString(""String_Node_Str""));
    previewButton.setEnabled(true);
  }
}",0.9227053140096618
126190,"protected void collectConnParams(){
  super.collectConnParams();
  addContextParams(EFileParamName.RowSeparator,true);
  addContextParams(EFileParamName.FieldSeparator,true);
  addContextParams(EFileParamName.Header,rowsToSkipHeaderCheckboxCombo.isChecked());
  addContextParams(EFileParamName.Footer,rowsToSkipFooterCheckboxCombo.isChecked());
  addContextParams(EFileParamName.Limit,rowsToSkipLimitCheckboxCombo.isChecked());
}","@Override protected void collectConnParams(){
  super.collectConnParams();
  addContextParams(EFileParamName.RowSeparator,true);
  addContextParams(EFileParamName.FieldSeparator,true);
  addContextParams(EFileParamName.Header,rowsToSkipHeaderCheckboxCombo.isChecked());
  addContextParams(EFileParamName.Footer,rowsToSkipFooterCheckboxCombo.isChecked());
  addContextParams(EFileParamName.Limit,rowsToSkipLimitCheckboxCombo.isChecked());
}",0.988479262672811
126191,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
126192,"public void postProcessCancle(){
  previewButton.setEnabled(false);
}","@Override public void postProcessCancle(){
  checkFieldsValue();
  previewButton.setEnabled(false);
}",0.8117647058823529
126193,"public void nonUIProcessInThread(){
  try {
    csvArray=ShadowProcessHelper.getCsvArray(processDescription,""String_Node_Str"",true);
  }
 catch (  Exception e) {
    setException(e);
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override public void nonUIProcessInThread(){
  try {
    csvArray=ShadowProcessHelper.getCsvArray(processDescription,""String_Node_Str"",true);
  }
 catch (  Exception e) {
    setException(e);
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}",0.9823943661971832
126194,"public void modifyText(final ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    checkFieldsValue();
  }
}","@Override public void modifyText(final ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    checkFieldsValue();
  }
}",0.9714285714285714
126195,"public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray == null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    fileManager.clearTablePreview();
  }
 else {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    fileManager.refreshTablePreview(csvArray,firstRowIsCaptionCheckbox.getSelection());
    previewInformationLabel.setText(""String_Node_Str"");
  }
}","@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray == null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    fileManager.clearTablePreview();
  }
 else {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    fileManager.refreshTablePreview(csvArray,firstRowIsCaptionCheckbox.getSelection());
    previewInformationLabel.setText(""String_Node_Str"");
  }
}",0.9881656804733728
126196,"/** 
 * Constructor.
 * @param parent
 * @param style
 */
public ContextNebulaGridComposite(Composite parent,IContextModelManager manager){
  super(parent,SWT.NONE);
  modelManager=manager;
  buttonList=new ArrayList<Button>();
  this.helper=new ContextManagerHelper(manager.getContextManager());
  this.setBackground(parent.getBackground());
  this.setLayout(GridLayoutFactory.swtDefaults().spacing(0,0).create());
  initializeUI();
  CoreUIPlugin.setCSSClass(this,this.getClass().getSimpleName());
}","/** 
 * Constructor.
 * @param parent
 * @param style
 */
public ContextNebulaGridComposite(Composite parent,IContextModelManager manager){
  super(parent,SWT.NONE);
  modelManager=manager;
  buttonList=new ArrayList<Button>();
  this.helper=new ContextManagerHelper(manager.getContextManager());
  this.setLayout(GridLayoutFactory.swtDefaults().spacing(0,0).create());
  initializeUI();
  if (modelManager instanceof ContextComposite && ((ContextComposite)modelManager).isRepositoryContext()) {
    this.setBackground(parent.getBackground());
  }
 else {
    CoreUIPlugin.setCSSClass(this,this.getClass().getSimpleName());
  }
}",0.8053097345132744
126197,"@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  JavaHomeUtil.initializeJavaHome();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(""String_Node_Str"",null,false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  JavaHomeUtil.initializeJavaHome();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(""String_Node_Str"",null,false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}",0.9975724227221232
126198,"public ILoginTask[] getAllCommandlineTaskListInstance(){
  List<LoginTask> commandlineTask=new ArrayList<LoginTask>();
  ILoginTask[] allTask=getAllTaskListInstance();
  for (  ILoginTask task : allTask) {
    if (task.isCommandlineTask()) {
      commandlineTask.add((LoginTask)task);
    }
  }
  return getAllRunnables(commandlineTask);
}","public ILoginTask[] getAllCommandlineTaskListInstance(){
  List<ILoginTask> commandlineTask=new ArrayList<ILoginTask>();
  ILoginTask[] allTask=getAllTaskListInstance();
  for (  ILoginTask task : allTask) {
    if (task.isCommandlineTask()) {
      commandlineTask.add(task);
    }
  }
  return commandlineTask.toArray(new ILoginTask[0]);
}",0.8781204111600588
126199,"@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        SalesforceSchemaConnection connection2=getConnection();
        connection2.setPassword(connection2.getValue(passwordText.getText(),true));
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        SalesforceSchemaConnection connection2=getConnection();
        connection2.setProxyPassword(connection2.getValue(proxyPasswordText.getText(),true));
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
        collectContextParams(true);
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        SalesforceSchemaConnection connection2=getConnection();
        connection2.setConsumeSecret(connection2.getValue(consumeKeySecretText.getText(),true));
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          Thread.sleep(100);
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            String endpoint=null;
            endpoint=OAuthClient.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              try {
                SforceConnection sforceConn=new SforceSessionConnection.Builder(endpoint,token.getAccess_token()).setTimeout(timeOut).needCompression(false).build();
                result=true;
              }
 catch (              Exception ex) {
              }
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        SalesforceSchemaConnection connection2=getConnection();
        connection2.setPassword(connection2.getValue(passwordText.getText(),true));
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        SalesforceSchemaConnection connection2=getConnection();
        connection2.setProxyPassword(connection2.getValue(proxyPasswordText.getText(),true));
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
        collectContextParams(true);
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        SalesforceSchemaConnection connection2=getConnection();
        connection2.setConsumeSecret(connection2.getValue(consumeKeySecretText.getText(),true));
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHost,proxyPort,proxyUsername,proxyPassword);
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          Thread.sleep(100);
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            String endpoint=null;
            endpoint=OAuthClient.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              try {
                SforceConnection sforceConn=new SforceSessionConnection.Builder(endpoint,token.getAccess_token()).setTimeout(timeOut).needCompression(false).build();
                result=true;
              }
 catch (              Exception ex) {
              }
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}",0.9973736047275116
126200,"private void testSalesforceLogin(){
  endPoint=webServiceUrlText.getText();
  username=userNameText.getText();
  pwd=passwordText.getText();
  timeOut=timeOutText.getText();
  endPointForOAuth=webServiceUrlTextForOAuth.getText();
  apiVersion=apiVersionText.getText();
  consumeKey=consumeKeyText.getText();
  consumeKeySrcret=consumeKeySecretText.getText();
  callbackHost=callbackHostText.getText();
  callbackPort=callbackPortText.getText();
  token=tokenText.getText();
  if (isContextMode() && getContextModeManager() != null) {
    ContextType contextTypeForContextMode=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    getContextModeManager().setSelectedContextType(contextTypeForContextMode);
    endPoint=getContextModeManager().getOriginalValue(endPoint);
    username=getContextModeManager().getOriginalValue(username);
    pwd=getContextModeManager().getOriginalValue(pwd);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    endPointForOAuth=getContextModeManager().getOriginalValue(endPointForOAuth);
    apiVersion=getContextModeManager().getOriginalValue(apiVersion);
    consumeKey=getContextModeManager().getOriginalValue(consumeKey);
    consumeKeySrcret=getContextModeManager().getOriginalValue(consumeKeySrcret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    token=getContextModeManager().getOriginalValue(token);
  }
}","private void testSalesforceLogin(){
  endPoint=webServiceUrlText.getText();
  username=userNameText.getText();
  pwd=passwordText.getText();
  timeOut=timeOutText.getText();
  endPointForOAuth=webServiceUrlTextForOAuth.getText();
  apiVersion=apiVersionText.getText();
  consumeKey=consumeKeyText.getText();
  consumeKeySrcret=consumeKeySecretText.getText();
  callbackHost=callbackHostText.getText();
  callbackPort=callbackPortText.getText();
  token=tokenText.getText();
  if (useHttpBtn.getSelection()) {
    proxyHost=proxyHostText.getText();
    proxyPort=proxyPortText.getText();
    proxyUsername=proxyUsernameText.getText();
    proxyPassword=proxyPasswordText.getText();
  }
  if (isContextMode() && getContextModeManager() != null) {
    ContextType contextTypeForContextMode=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    getContextModeManager().setSelectedContextType(contextTypeForContextMode);
    endPoint=getContextModeManager().getOriginalValue(endPoint);
    username=getContextModeManager().getOriginalValue(username);
    pwd=getContextModeManager().getOriginalValue(pwd);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    endPointForOAuth=getContextModeManager().getOriginalValue(endPointForOAuth);
    apiVersion=getContextModeManager().getOriginalValue(apiVersion);
    consumeKey=getContextModeManager().getOriginalValue(consumeKey);
    consumeKeySrcret=getContextModeManager().getOriginalValue(consumeKeySrcret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    token=getContextModeManager().getOriginalValue(token);
    if (useHttpBtn.getSelection()) {
      proxyHost=getContextModeManager().getOriginalValue(proxyHost);
      proxyPort=getContextModeManager().getOriginalValue(proxyPort);
      proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
      proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
    }
  }
}",0.8459367945823928
126201,"/** 
 * Some code generators use the BuildJobHandler to execute job in the studio. This method is used to correctly generate the stats code if stats are enabled within the studio.
 * @param monitor
 * @param stats
 * @param trace
 * @throws Exception
 */
public void generateJobFiles(IProgressMonitor monitor,boolean stats,boolean trace) throws Exception ;",public void generateJobFiles(IProgressMonitor monitor) throws Exception ;,0.3403263403263403
126202,"/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(TalendMavenConstants.POM_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(TalendMavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  syncRoutinesPom(true);
  ProjectPomManager projectManager=new ProjectPomManager(codeProject.getProject());
  projectManager.update(monitor,null);
  final Map<String,Object> argumentsMap=new HashMap<String,Object>();
  argumentsMap.put(ITalendProcessJavaProject.ARG_GOAL,TalendMavenConstants.GOAL_COMPILE);
  codeProject.buildModules(monitor,null,argumentsMap);
}","/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(TalendMavenConstants.POM_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(TalendMavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  syncRoutinesPom(true);
  ProjectPomManager projectManager=new ProjectPomManager(codeProject.getProject());
  projectManager.update(monitor,null);
  final Map<String,Object> argumentsMap=new HashMap<String,Object>();
  argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_COMPILE);
  codeProject.buildModules(monitor,null,argumentsMap);
}",0.9918032786885246
126203,"/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),context.getName(),isApplyContextToChild(),isAddStat());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,""String_Node_Str"" + jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,this.getWindowsScriptAddition());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,this.getUnixScriptAddition());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}","/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),context.getName(),isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN),isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATISTICS));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,""String_Node_Str"" + jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,this.getWindowsScriptAddition());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,this.getUnixScriptAddition());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}",0.9791892217009504
126204,"@Override String getUrlTemplate(EDatabaseVersion4Drivers version){
switch (version) {
case HIVE:
    return URL_HIVE_1_STANDALONE;
case HIVE_EMBEDDED:
  return URL_HIVE_1_TEMPLATE;
case HIVE_2_EMBEDDED:
return URL_HIVE_2_TEMPLATE;
case HIVE_2_STANDALONE:
return URL_HIVE_2_STANDALONE;
default :
return super.getUrlTemplate(version);
}
}","@Override String getUrlTemplate(EDatabaseVersion4Drivers version){
  if (version == null) {
    return super.getUrlTemplate(version);
  }
switch (version) {
case HIVE:
    return URL_HIVE_1_STANDALONE;
case HIVE_EMBEDDED:
  return URL_HIVE_1_TEMPLATE;
case HIVE_2_EMBEDDED:
return URL_HIVE_2_TEMPLATE;
case HIVE_2_STANDALONE:
return URL_HIVE_2_STANDALONE;
default :
return super.getUrlTemplate(version);
}
}",0.9044414535666218
126205,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
          getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setRawPassword(passwordText.getText());
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      urlConnectionStringText.setEditable(false);
      authenticationGrpForImpala.setVisible(false);
      authenticationGrpForImpala.getParent().layout();
      clearFiledsForDiffDbTypes();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        initHBaseSettings();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        initImpalaSettings();
        getConnection().setDbVersionString(""String_Node_Str"");
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(!isGeneralJDBC());
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
          fillDefaultsWhenHiveVersionChanged();
          fillDefaultsWhenHiveModeChanged(isHiveEmbeddedMode());
        }
 else {
          doHiveDBTypeNotSelected();
        }
        if (isHBaseDBConnSelected()) {
          fillDefaultsWhenHBaseVersionChanged();
        }
        if (isImpalaDBConnSelected()) {
          fillDefaultsWhenImpalaVersionChanged();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else       if (isImpalaDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE) && !isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  addImpalaSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
          getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setRawPassword(passwordText.getText());
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      urlConnectionStringText.setEditable(false);
      authenticationGrpForImpala.setVisible(false);
      authenticationGrpForImpala.getParent().layout();
      clearFiledsForDiffDbTypes();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        hideControl(authenticationGrpForHBase,true);
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        hideControl(authenticationCom,true);
        initHBaseSettings();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        hideControl(authenticationCom,true);
        hideControl(authenticationComForHBase,true);
        initImpalaSettings();
        getConnection().setDbVersionString(""String_Node_Str"");
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(!isGeneralJDBC());
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
          fillDefaultsWhenHiveVersionChanged();
          fillDefaultsWhenHiveModeChanged(isHiveEmbeddedMode());
        }
 else {
          doHiveDBTypeNotSelected();
        }
        if (isHBaseDBConnSelected()) {
          fillDefaultsWhenHBaseVersionChanged();
        }
        if (isImpalaDBConnSelected()) {
          fillDefaultsWhenImpalaVersionChanged();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else       if (isImpalaDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE) && !isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  addImpalaSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.9932544052863436
126206,"private void setHidAuthenticationForHive(boolean hide){
  GridData hadoopData=(GridData)authenticationGrp.getLayoutData();
  hadoopData.exclude=hide;
  authenticationGrp.setVisible(!hide);
  authenticationGrp.setLayoutData(hadoopData);
  authenticationGrp.getParent().layout();
}","private void setHidAuthenticationForHive(boolean hide){
  if (!hide) {
    GridData keytabGridData=(GridData)useKeyTab.getLayoutData();
    GridData keytabDetailGridData=(GridData)keyTabComponent.getLayoutData();
    if (!isHiveEmbeddedMode()) {
      useKeyTab.setVisible(false);
      keyTabComponent.setVisible(false);
      keytabGridData.exclude=true;
      keytabDetailGridData.exclude=true;
      useKeyTab.setSelection(false);
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,""String_Node_Str"");
    }
 else {
      boolean keytabCompositeVisible=useKeyTab.getSelection();
      useKeyTab.setVisible(true);
      keyTabComponent.setVisible(keytabCompositeVisible);
      keytabGridData.exclude=false;
      keytabDetailGridData.exclude=!keytabCompositeVisible;
    }
    useKeyTab.setLayoutData(keytabGridData);
    keyTabComponent.setLayoutData(keytabDetailGridData);
    useKeyTab.getParent().layout();
  }
  GridData hadoopData=(GridData)authenticationGrp.getLayoutData();
  hadoopData.exclude=hide;
  authenticationGrp.setVisible(!hide);
  authenticationGrp.setLayoutData(hadoopData);
  authenticationGrp.layout();
  authenticationGrp.getParent().layout();
}",0.376010781671159
126207,"/** 
 * Set definition for this action and text so that it will be used for File -&gt; Open Workspace in the argument window.
 * @param window the window in which this action should appear
 */
public OpenWorkspaceAction(IWorkbenchWindow window){
  super(Messages.getString(""String_Node_Str""),IAction.AS_DROP_DOWN_MENU);
  if (window == null) {
    throw new IllegalArgumentException();
  }
  this.window=window;
  setToolTipText(Messages.getString(""String_Node_Str""));
  setActionDefinitionId(""String_Node_Str"");
  setMenuCreator(new IMenuCreator(){
    private MenuManager dropDownMenuMgr;
    /** 
 * Creates the menu manager for the drop-down.
 */
    private void createDropDownMenuMgr(){
      if (dropDownMenuMgr == null) {
        dropDownMenuMgr=new MenuManager();
        final ChooseWorkspaceData data=new ChooseWorkspaceData(Platform.getInstanceLocation().getURL());
        data.readPersistedData();
        String current=data.getInitialDefault();
        String[] workspaces=data.getRecentWorkspaces();
        for (int i=0; i < workspaces.length; i++) {
          if (workspaces[i] != null && !workspaces[i].equals(current)) {
            dropDownMenuMgr.add(new WorkspaceMRUAction(workspaces[i],data));
          }
        }
        if (!dropDownMenuMgr.isEmpty()) {
          dropDownMenuMgr.add(new Separator());
        }
        dropDownMenuMgr.add(new OpenDialogAction());
      }
    }
    @Override public Menu getMenu(    Control parent){
      createDropDownMenuMgr();
      return dropDownMenuMgr.createContextMenu(parent);
    }
    @Override public Menu getMenu(    Menu parent){
      createDropDownMenuMgr();
      Menu menu=new Menu(parent);
      IContributionItem[] items=dropDownMenuMgr.getItems();
      for (      IContributionItem item : items) {
        IContributionItem newItem=item;
        if (item instanceof ActionContributionItem) {
          newItem=new ActionContributionItem(((ActionContributionItem)item).getAction());
        }
        newItem.fill(menu,-1);
      }
      return menu;
    }
    @Override public void dispose(){
      if (dropDownMenuMgr != null) {
        dropDownMenuMgr.dispose();
        dropDownMenuMgr=null;
      }
    }
  }
);
}","/** 
 * Set definition for this action and text so that it will be used for File -&gt; Open Workspace in the argument window.
 * @param window the window in which this action should appear
 */
public OpenWorkspaceAction(IWorkbenchWindow window){
  super(Messages.getString(""String_Node_Str""),IAction.AS_DROP_DOWN_MENU);
  if (window == null) {
    throw new IllegalArgumentException();
  }
  this.window=window;
  setToolTipText(Messages.getString(""String_Node_Str""));
  setActionDefinitionId(""String_Node_Str"");
  setMenuCreator(new IMenuCreator(){
    private MenuManager dropDownMenuMgr;
    /** 
 * Creates the menu manager for the drop-down.
 */
    private void createDropDownMenuMgr(){
      if (dropDownMenuMgr == null) {
        dropDownMenuMgr=new MenuManager();
        final ChooseWorkspaceData data=new ChooseWorkspaceData(Platform.getInstanceLocation().getURL());
        data.readPersistedData();
        filterUsefulWorkspaces(data);
        String current=data.getInitialDefault();
        String[] workspaces=data.getRecentWorkspaces();
        for (int i=0; i < workspaces.length; i++) {
          if (workspaces[i] != null && !workspaces[i].equals(current)) {
            dropDownMenuMgr.add(new WorkspaceMRUAction(workspaces[i],data));
          }
        }
        if (!dropDownMenuMgr.isEmpty()) {
          dropDownMenuMgr.add(new Separator());
        }
        dropDownMenuMgr.add(new OpenDialogAction());
      }
    }
    @Override public Menu getMenu(    Control parent){
      createDropDownMenuMgr();
      return dropDownMenuMgr.createContextMenu(parent);
    }
    @Override public Menu getMenu(    Menu parent){
      createDropDownMenuMgr();
      Menu menu=new Menu(parent);
      IContributionItem[] items=dropDownMenuMgr.getItems();
      for (      IContributionItem item : items) {
        IContributionItem newItem=item;
        if (item instanceof ActionContributionItem) {
          newItem=new ActionContributionItem(((ActionContributionItem)item).getAction());
        }
        newItem.fill(menu,-1);
      }
      return menu;
    }
    @Override public void dispose(){
      if (dropDownMenuMgr != null) {
        dropDownMenuMgr.dispose();
        dropDownMenuMgr=null;
      }
    }
  }
);
}",0.9914491449144914
126208,"/** 
 * Creates the menu manager for the drop-down.
 */
private void createDropDownMenuMgr(){
  if (dropDownMenuMgr == null) {
    dropDownMenuMgr=new MenuManager();
    final ChooseWorkspaceData data=new ChooseWorkspaceData(Platform.getInstanceLocation().getURL());
    data.readPersistedData();
    String current=data.getInitialDefault();
    String[] workspaces=data.getRecentWorkspaces();
    for (int i=0; i < workspaces.length; i++) {
      if (workspaces[i] != null && !workspaces[i].equals(current)) {
        dropDownMenuMgr.add(new WorkspaceMRUAction(workspaces[i],data));
      }
    }
    if (!dropDownMenuMgr.isEmpty()) {
      dropDownMenuMgr.add(new Separator());
    }
    dropDownMenuMgr.add(new OpenDialogAction());
  }
}","/** 
 * Creates the menu manager for the drop-down.
 */
private void createDropDownMenuMgr(){
  if (dropDownMenuMgr == null) {
    dropDownMenuMgr=new MenuManager();
    final ChooseWorkspaceData data=new ChooseWorkspaceData(Platform.getInstanceLocation().getURL());
    data.readPersistedData();
    filterUsefulWorkspaces(data);
    String current=data.getInitialDefault();
    String[] workspaces=data.getRecentWorkspaces();
    for (int i=0; i < workspaces.length; i++) {
      if (workspaces[i] != null && !workspaces[i].equals(current)) {
        dropDownMenuMgr.add(new WorkspaceMRUAction(workspaces[i],data));
      }
    }
    if (!dropDownMenuMgr.isEmpty()) {
      dropDownMenuMgr.add(new Separator());
    }
    dropDownMenuMgr.add(new OpenDialogAction());
  }
}",0.977542932628798
126209,"protected JobInfo newJobInfo(JobInfo jobInfo){
  JobInfo newJobInfo=new JobInfo(jobInfo.getJobId(),jobInfo.getContextName(),jobInfo.getJobVersion());
  newJobInfo.setJobName(jobInfo.getJobName());
  newJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
  newJobInfo.setContext(jobInfo.getContext());
  newJobInfo.setProjectFolderName(jobInfo.getProjectFolderName());
  newJobInfo.setProcessItem(jobInfo.getProcessItem());
  ProcessItem processItem=newJobInfo.getProcessItem();
  if (processItem == null) {
    try {
      final IRepositoryViewObject obj=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getSpecificVersion(jobInfo.getJobId(),jobInfo.getJobVersion(),true);
      if (obj != null) {
        final Item item=obj.getProperty().getItem();
        if (item instanceof ProcessItem) {
          processItem=(ProcessItem)item;
          newJobInfo.setProcessItem(processItem);
        }
      }
    }
 catch (    PersistenceException e) {
    }
  }
  if (processItem != null) {
    IProcess process=jobInfo.getProcess();
    if (process == null && GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      process=service.getProcessFromItem(processItem);
      newJobInfo.setProcess(process);
    }
    final String projectFolderName=JavaResourcesHelper.getProjectFolderName(processItem);
    newJobInfo.setProjectFolderName(projectFolderName);
  }
  newJobInfo.setTestContainer(newJobInfo.isTestContainer());
  JobInfo fatherJobInfo=jobInfo.getFatherJobInfo();
  if (fatherJobInfo != null) {
    newJobInfo.setFatherJobInfo(newJobInfo(fatherJobInfo));
  }
  return newJobInfo;
}","protected JobInfo newJobInfo(JobInfo jobInfo){
  JobInfo newJobInfo=new JobInfo(jobInfo.getJobId(),jobInfo.getContextName(),jobInfo.getJobVersion());
  newJobInfo.setJobName(jobInfo.getJobName());
  newJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
  newJobInfo.setContext(jobInfo.getContext());
  newJobInfo.setProjectFolderName(jobInfo.getProjectFolderName());
  newJobInfo.setProcessItem(jobInfo.getProcessItem());
  ProcessItem processItem=newJobInfo.getProcessItem();
  if (processItem == null) {
    try {
      final IRepositoryViewObject obj=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getSpecificVersion(jobInfo.getJobId(),jobInfo.getJobVersion(),true);
      if (obj != null) {
        final Item item=obj.getProperty().getItem();
        if (item instanceof ProcessItem) {
          processItem=(ProcessItem)item;
          newJobInfo.setProcessItem(processItem);
        }
      }
    }
 catch (    PersistenceException e) {
    }
  }
  if (processItem != null) {
    IProcess process=jobInfo.getProcess();
    if (process == null && GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      process=service.getProcessFromItem(processItem);
      newJobInfo.setProcess(process);
    }
    final String projectFolderName=JavaResourcesHelper.getProjectFolderName(processItem);
    newJobInfo.setProjectFolderName(projectFolderName);
  }
  newJobInfo.setTestContainer(jobInfo.isTestContainer());
  JobInfo fatherJobInfo=jobInfo.getFatherJobInfo();
  if (fatherJobInfo != null) {
    newJobInfo.setFatherJobInfo(newJobInfo(fatherJobInfo));
  }
  return newJobInfo;
}",0.9985966881841144
126210,"/** 
 * get the jar name like maven ""artifactId.version""
 */
public static String getJobJarName(String jobName,String version){
  String newJobName=escapeFileName(jobName);
  if (version != null) {
    newJobName+='-' + version;
  }
  return newJobName;
}","/** 
 * get the jar name like maven ""artifactId.version""
 */
public static String getJobJarName(String jobName,String version){
  String newJobName=getJobFolderName(jobName,version);
  return newJobName;
}",0.7913043478260869
126211,"public void execute(IProgressMonitor monitor) throws Exception {
  ILaunchConfiguration launchConfiguration=createLaunchConfiguration();
  if (launchConfiguration == null) {
    throw new Exception(""String_Node_Str"");
  }
  TalendLauncherWaiter talendWaiter=new TalendLauncherWaiter(launchConfiguration);
  final ILaunch launch=buildAndLaunch(launchConfiguration,launcherMode,monitor);
  talendWaiter.waitFinish(launch);
  StringBuffer errors=new StringBuffer();
  for (  IProcess process : launch.getProcesses()) {
    String log=process.getStreamsProxy().getOutputStreamMonitor().getContents();
    TalendDebugHandler.debug(""String_Node_Str"");
    TalendDebugHandler.debug(log);
    TalendDebugHandler.debug(""String_Node_Str"");
    for (    String line : log.split(""String_Node_Str"")) {
      if (line.startsWith(""String_Node_Str"")) {
        errors.append(line + ""String_Node_Str"");
      }
    }
  }
}","public void execute(IProgressMonitor monitor) throws Exception {
  ILaunchConfiguration launchConfiguration=createLaunchConfiguration();
  if (launchConfiguration == null) {
    throw new Exception(""String_Node_Str"");
  }
  TalendLauncherWaiter talendWaiter=new TalendLauncherWaiter(launchConfiguration);
  final ILaunch launch=buildAndLaunch(launchConfiguration,launcherMode,monitor);
  talendWaiter.waitFinish(launch);
  StringBuffer errors=new StringBuffer();
  for (  IProcess process : launch.getProcesses()) {
    String log=process.getStreamsProxy().getOutputStreamMonitor().getContents();
    TalendDebugHandler.debug(""String_Node_Str"");
    TalendDebugHandler.debug(log);
    TalendDebugHandler.debug(""String_Node_Str"");
    for (    String line : log.split(""String_Node_Str"")) {
      if (line.startsWith(""String_Node_Str"")) {
        errors.append(line + ""String_Node_Str"");
      }
    }
  }
  if (errors.length() > 0) {
    ExceptionHandler.process(new Exception(errors.toString()));
  }
}",0.9491347666491872
126212,"/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(TalendMavenConstants.POM_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(TalendMavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  syncRoutinesPom(PomIdsHelper.FLAG_ROUTINES_OVERWRITE_ALWAYS);
  ProjectPomManager projectManager=new ProjectPomManager(codeProject.getProject());
  projectManager.update(monitor,null);
  codeProject.buildModules(TalendMavenConstants.GOAL_COMPILE,null,monitor);
}","/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(TalendMavenConstants.POM_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(TalendMavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  syncRoutinesPom(true);
  ProjectPomManager projectManager=new ProjectPomManager(codeProject.getProject());
  projectManager.update(monitor,null);
  codeProject.buildModules(TalendMavenConstants.GOAL_COMPILE,null,monitor);
}",0.9839535677705702
126213,"/** 
 * If standard job and base job pom file existed, will use the dependences of job pom directly.
 */
protected void updateDependencies(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateDependencies()) {
    return;
  }
  IFile basePomFile=getBasePomFile();
  if (isStandardJob() && basePomFile != null && basePomFile.getLocation().toFile().exists()) {
    if (!basePomFile.exists()) {
      basePomFile.getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
    }
    Model jobModel=MODEL_MANAGER.readMavenModel(basePomFile);
    List<Dependency> withoutChildrenJobDependencies=new ArrayList<Dependency>(jobModel.getDependencies());
    final String jobGroupPrefix=PomIdsHelper.getJobGroupId((String)null);
    Iterator<Dependency> iterator=withoutChildrenJobDependencies.iterator();
    while (iterator.hasNext()) {
      Dependency d=iterator.next();
      if (d.getGroupId().startsWith(jobGroupPrefix)) {
        iterator.remove();
      }
    }
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,withoutChildrenJobDependencies,false);
  }
 else   if (processor != null) {
    ProcessorDependenciesManager processorDependenciesManager=new ProcessorDependenciesManager(processor);
    processorDependenciesManager.updateDependencies(monitor,projectModel);
  }
 else {
    IFile routinesPomFile=projectPomFile.getProject().getFile(PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID));
    Model routinesModel=MavenTemplateManager.getRoutinesTempalteModel();
    if (routinesPomFile.exists()) {
      routinesModel=MODEL_MANAGER.readMavenModel(routinesPomFile);
    }
    List<Dependency> routinesDependencies=routinesModel.getDependencies();
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,routinesDependencies,true);
  }
  PomUtil.installDependencies(projectModel.getDependencies());
}","/** 
 * If standard job and base job pom file existed, will use the dependences of job pom directly.
 */
protected void updateDependencies(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateDependencies()) {
    return;
  }
  IFile basePomFile=getBasePomFile();
  if (isStandardJob() && basePomFile != null && basePomFile.getLocation().toFile().exists()) {
    if (!basePomFile.exists()) {
      basePomFile.getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
    }
    Model jobModel=MODEL_MANAGER.readMavenModel(basePomFile);
    List<Dependency> withoutChildrenJobDependencies=new ArrayList<Dependency>(jobModel.getDependencies());
    final String jobGroupPrefix=PomIdsHelper.getJobGroupId((String)null);
    Iterator<Dependency> iterator=withoutChildrenJobDependencies.iterator();
    while (iterator.hasNext()) {
      Dependency d=iterator.next();
      if (d.getGroupId().startsWith(jobGroupPrefix)) {
        iterator.remove();
      }
    }
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,withoutChildrenJobDependencies,false);
  }
 else   if (processor != null) {
    ProcessorDependenciesManager processorDependenciesManager=new ProcessorDependenciesManager(processor);
    processorDependenciesManager.updateDependencies(monitor,projectModel);
  }
 else {
    IFile routinesPomFile=projectPomFile.getProject().getFile(PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID));
    Model routinesModel=MavenTemplateManager.getRoutinesTempalteModel();
    if (routinesPomFile.exists()) {
      routinesModel=MODEL_MANAGER.readMavenModel(routinesPomFile);
    }
    List<Dependency> routinesDependencies=routinesModel.getDependencies();
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,routinesDependencies,true);
  }
}",0.983231301570402
126214,"/** 
 * update the modules list for project pom. The routines should be added always.
 */
protected void updateModulesList(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateModules()) {
    return;
  }
  List<String> modulesList=new ArrayList<String>();
  String routinesModule=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  modulesList.add(routinesModule);
  if (processor != null) {
    for (    JobInfo childJob : processor.getBuildChildrenJobs()) {
      modulesList.add(PomUtil.getPomFileName(childJob.getJobName()));
    }
    modulesList.add(PomUtil.getPomFileName(processor.getProperty().getLabel()));
  }
  List<String> modules=projectModel.getModules();
  if (modules == null) {
    modules=new ArrayList<String>();
    projectModel.setModules(modules);
  }
 else   if (!modules.isEmpty()) {
    modules.clear();
  }
  modules.addAll(modulesList);
  IProject project=projectPomFile.getProject();
  project.refreshLocal(IResource.DEPTH_ONE,monitor);
  for (  String module : modules) {
    IFile file=project.getFile(module);
    if (file.exists()) {
      Model model=MODEL_MANAGER.readMavenModel(file);
      Parent parent=model.getParent();
      if (parent != null) {
        String projectGroupPrefix=JavaResourcesHelper.getGroupName(TalendMavenConstants.DEFAULT_MASTER);
        if (PomIdsHelper.FLAG_FIXING_GROUP_ID && !parent.getGroupId().equals(projectModel.getGroupId()) || !PomIdsHelper.FLAG_FIXING_GROUP_ID && !parent.getGroupId().startsWith(projectGroupPrefix)) {
          continue;
        }
        if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID && !parent.getArtifactId().equals(projectModel.getArtifactId()) || !PomIdsHelper.FLAG_FIXING_ATIFACT_ID && !parent.getGroupId().startsWith(TalendMavenConstants.DEFAULT_CODE)) {
          continue;
        }
        PomUtil.checkParent(model,file);
        PomUtil.savePom(monitor,model,file);
      }
    }
  }
}","/** 
 * update the modules list for project pom. The routines should be added always.
 */
protected void updateModulesList(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateModules()) {
    return;
  }
  List<String> modulesList=new ArrayList<String>();
  String routinesModule=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  modulesList.add(routinesModule);
  if (processor != null) {
    for (    JobInfo childJob : processor.getBuildChildrenJobs()) {
      modulesList.add(PomUtil.getPomFileName(childJob.getJobName()));
    }
    modulesList.add(PomUtil.getPomFileName(processor.getProperty().getLabel()));
  }
  List<String> modules=projectModel.getModules();
  if (modules == null) {
    modules=new ArrayList<String>();
    projectModel.setModules(modules);
  }
 else   if (!modules.isEmpty()) {
    modules.clear();
  }
  modules.addAll(modulesList);
  IProject project=projectPomFile.getProject();
  project.refreshLocal(IResource.DEPTH_ONE,monitor);
  for (  String module : modules) {
    IFile file=project.getFile(module);
    if (file.exists()) {
      Model model=MODEL_MANAGER.readMavenModel(file);
      Parent parent=model.getParent();
      if (parent != null) {
        if (parent.getGroupId().equals(projectModel.getGroupId())) {
          continue;
        }
        PomUtil.checkParent(model,file);
        PomUtil.savePom(monitor,model,file);
      }
    }
  }
}",0.7611809412452499
126215,"@Override public void create(IProgressMonitor monitor) throws Exception {
  IFile curPomFile=getPomFile();
  if (curPomFile == null) {
    return;
  }
  if (curPomFile.exists()) {
    if (isOverwrite()) {
      curPomFile.delete(true,monitor);
    }
 else {
      return;
    }
  }
  Model model=createModel();
  if (model == null) {
    throw new Exception(""String_Node_Str"" + curPomFile);
  }
  MODEL_MANAGER.createMavenModel(curPomFile,model);
  curPomFile.getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
  PomUtil.installDependencies(model.getDependencies());
}","@Override public void create(IProgressMonitor monitor) throws Exception {
  IFile curPomFile=getPomFile();
  if (curPomFile == null) {
    return;
  }
  if (curPomFile.exists()) {
    if (isOverwrite()) {
      curPomFile.delete(true,monitor);
    }
 else {
      return;
    }
  }
  Model model=createModel();
  if (model == null) {
    throw new Exception(""String_Node_Str"" + curPomFile);
  }
  MODEL_MANAGER.createMavenModel(curPomFile,model);
  curPomFile.getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
}",0.9485294117647058
126216,"/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),context.getName(),isApplyContextToChild(),isAddStat());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID) {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,""String_Node_Str"");
  }
 else {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  }
  if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,jobInfoProp.getProperty(JobInfoProperties.JOB_VERSION,process.getVersion()));
  }
 else {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,""String_Node_Str"" + jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,this.getWindowsScriptAddition());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,this.getUnixScriptAddition());
  String finalNameExp=""String_Node_Str"";
  String finalNameStr=PomUtil.getJobFinalName(property);
  if (PomIdsHelper.FLAG_SPECIAL_FINAL_NAME) {
    finalNameExp=""String_Node_Str"";
  }
 else {
    if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID) {
      if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
        finalNameExp=""String_Node_Str"";
      }
    }
 else {
      if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
        finalNameExp=""String_Node_Str"";
      }
 else {
        finalNameExp=""String_Node_Str"";
      }
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameExp);
}","/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),context.getName(),isApplyContextToChild(),isAddStat());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,""String_Node_Str"" + jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,this.getWindowsScriptAddition());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,this.getUnixScriptAddition());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}",0.8639039855072463
126217,"@Override public void create(IProgressMonitor monitor) throws Exception {
  super.create(monitor);
  generateAssemblyFile(monitor);
  MavenPomSynchronizer pomSync=new MavenPomSynchronizer(this.getJobProcessor().getTalendJavaProject());
  pomSync.syncRoutinesPom(PomIdsHelper.FLAG_ROUTINES_OVERWRITE_ALWAYS);
  pomSync.syncTemplates(true);
  getPomFile().getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
}","@Override public void create(IProgressMonitor monitor) throws Exception {
  super.create(monitor);
  generateAssemblyFile(monitor);
  MavenPomSynchronizer pomSync=new MavenPomSynchronizer(this.getJobProcessor().getTalendJavaProject());
  pomSync.syncRoutinesPom(true);
  pomSync.syncTemplates(true);
  getPomFile().getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
}",0.939820742637644
126218,"@Override public void create(IProgressMonitor monitor) throws Exception {
  super.create(monitor);
  MavenPomSynchronizer pomSync=new MavenPomSynchronizer(this.getJobProcessor().getTalendJavaProject());
  pomSync.syncRoutinesPom(PomIdsHelper.FLAG_ROUTINES_OVERWRITE_ALWAYS);
  getPomFile().getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
}","@Override public void create(IProgressMonitor monitor) throws Exception {
  super.create(monitor);
  MavenPomSynchronizer pomSync=new MavenPomSynchronizer(this.getJobProcessor().getTalendJavaProject());
  pomSync.syncRoutinesPom(true);
  getPomFile().getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
}",0.9280245022970904
126219,"/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),context.getName(),isApplyContextToChild(),isAddStat());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID) {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,""String_Node_Str"");
  }
 else {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  }
  if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,jobInfoProp.getProperty(JobInfoProperties.JOB_VERSION,process.getVersion()));
  }
 else {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,""String_Node_Str"" + jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobScriptAddition,""String_Node_Str"");
  String finalNameExp=""String_Node_Str"";
  String finalNameStr=PomUtil.getJobFinalName(property);
  if (PomIdsHelper.FLAG_SPECIAL_FINAL_NAME) {
    finalNameExp=""String_Node_Str"";
  }
 else {
    if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID) {
      if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
        finalNameExp=""String_Node_Str"";
      }
    }
 else {
      if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
        finalNameExp=""String_Node_Str"";
      }
 else {
        finalNameExp=""String_Node_Str"";
      }
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameExp);
}","/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),context.getName(),isApplyContextToChild(),isAddStat());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID) {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,""String_Node_Str"");
  }
 else {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  }
  if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,jobInfoProp.getProperty(JobInfoProperties.JOB_VERSION,process.getVersion()));
  }
 else {
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,""String_Node_Str"" + jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,this.getWindowsScriptAddition());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,this.getUnixScriptAddition());
  String finalNameExp=""String_Node_Str"";
  String finalNameStr=PomUtil.getJobFinalName(property);
  if (PomIdsHelper.FLAG_SPECIAL_FINAL_NAME) {
    finalNameExp=""String_Node_Str"";
  }
 else {
    if (PomIdsHelper.FLAG_FIXING_ATIFACT_ID) {
      if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
        finalNameExp=""String_Node_Str"";
      }
    }
 else {
      if (PomIdsHelper.FLAG_VERSION_WITH_CLASSIFIER) {
        finalNameExp=""String_Node_Str"";
      }
 else {
        finalNameExp=""String_Node_Str"";
      }
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameExp);
}",0.9818026118604152
126220,"private Set<JobInfo> getClonedJobInfos(){
  if (this.clonedJobInfos.isEmpty()) {
    Set<JobInfo> buildChildrenJobs=getJobProcessor().getBuildChildrenJobs();
    for (    JobInfo jobInfo : buildChildrenJobs) {
      JobInfo newJobInfo=new JobInfo(jobInfo.getJobId(),jobInfo.getContextName(),jobInfo.getJobVersion());
      newJobInfo.setJobName(jobInfo.getJobName());
      newJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
      newJobInfo.setContext(jobInfo.getContext());
      newJobInfo.setProjectFolderName(jobInfo.getProjectFolderName());
      newJobInfo.setProcessItem(jobInfo.getProcessItem());
      ProcessItem processItem=newJobInfo.getProcessItem();
      if (processItem == null) {
        try {
          final IRepositoryViewObject obj=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getSpecificVersion(jobInfo.getJobId(),jobInfo.getJobVersion(),true);
          if (obj != null) {
            final Item item=obj.getProperty().getItem();
            if (item instanceof ProcessItem) {
              processItem=(ProcessItem)item;
              newJobInfo.setProcessItem(processItem);
            }
          }
        }
 catch (        PersistenceException e) {
        }
      }
      if (processItem != null) {
        IProcess process=jobInfo.getProcess();
        if (process == null && GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          process=service.getProcessFromItem(processItem);
          newJobInfo.setProcess(process);
        }
        final String projectFolderName=JavaResourcesHelper.getProjectFolderName(processItem);
        newJobInfo.setProjectFolderName(projectFolderName);
      }
      clonedJobInfos.add(newJobInfo);
    }
  }
  return this.clonedJobInfos;
}","private Set<JobInfo> getClonedJobInfos(){
  if (this.clonedJobInfos.isEmpty()) {
    Set<JobInfo> buildChildrenJobs=getJobProcessor().getBuildChildrenJobs();
    for (    JobInfo jobInfo : buildChildrenJobs) {
      if (!clonedJobInfos.contains(jobInfo)) {
        JobInfo newJobInfo=newJobInfo(jobInfo);
        clonedJobInfos.add(newJobInfo);
        JobInfo fatherJobInfo=newJobInfo.getFatherJobInfo();
        if (fatherJobInfo != null && buildChildrenJobs.contains(fatherJobInfo)) {
          clonedJobInfos.add(fatherJobInfo);
        }
      }
    }
  }
  return this.clonedJobInfos;
}",0.2381521306252489
126221,"/** 
 * add dependencies for pom.
 */
protected void addDependencies(Model model){
  try {
    processorDependenciesManager.updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String parentId=getJobProcessor().getProperty().getId();
    final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
    for (    JobInfo jobInfo : clonedChildrenJobInfors) {
      if (jobInfo.getFatherJobInfo() != null && jobInfo.getFatherJobInfo().getJobId().equals(parentId)) {
        Dependency d=PomUtil.createDependency(model.getGroupId(),jobInfo.getJobName(),jobInfo.getJobVersion(),null);
        dependencies.add(d);
      }
    }
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * add dependencies for pom.
 */
protected void addDependencies(Model model){
  try {
    processorDependenciesManager.updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String parentId=getJobProcessor().getProperty().getId();
    final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
    for (    JobInfo jobInfo : clonedChildrenJobInfors) {
      if (jobInfo.getFatherJobInfo() != null && jobInfo.getFatherJobInfo().getJobId().equals(parentId)) {
        Dependency d=PomUtil.createDependency(model.getGroupId(),PomIdsHelper.getJobArtifactId(jobInfo),PomIdsHelper.getJobVersion(jobInfo),null);
        dependencies.add(d);
      }
    }
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.9437908496732026
126222,"/** 
 * @return ""<jobVersion>-<projectName>[-<refProjectName>]"".
 */
public static String getJobVersion(Property property){
  if (property != null) {
    ProjectManager pManager=ProjectManager.getInstance();
    Project currentProject=pManager.getCurrentProject();
    String version=property.getVersion();
    if (FLAG_VERSION_WITH_CLASSIFIER) {
      if (pManager.isInCurrentMainProject(property)) {
        if (currentProject != null) {
          version=version + '-' + currentProject.getTechnicalLabel();
        }
      }
 else {
        org.talend.core.model.properties.Project project=pManager.getProject(property);
        if (project != null) {
          version=version + '-' + currentProject.getTechnicalLabel()+ '-'+ project.getTechnicalLabel();
        }
      }
    }
    return version;
  }
  return null;
}","public static String getJobVersion(JobInfo jobInfo){
  if (jobInfo != null) {
    ProjectManager pManager=ProjectManager.getInstance();
    Project currentProject=pManager.getCurrentProject();
    String version=jobInfo.getJobVersion();
    if (FLAG_VERSION_WITH_CLASSIFIER) {
      if (currentProject != null) {
        version=version + '-' + currentProject.getTechnicalLabel();
      }
    }
    return version;
  }
  return null;
}",0.5310015898251192
126223,"/** 
 * @return ""<projectName>[.<refProjectName>].<jobName>"".
 */
public static String getJobArtifactId(Property property){
  if (property != null) {
    ProjectManager pManager=ProjectManager.getInstance();
    Project currentProject=pManager.getCurrentProject();
    String artifactId=JavaResourcesHelper.escapeFileName(property.getLabel());
    if (!FLAG_FIXING_ATIFACT_ID) {
      if (pManager.isInCurrentMainProject(property)) {
        if (currentProject != null) {
          artifactId=currentProject.getTechnicalLabel() + '.' + artifactId;
        }
      }
 else {
        org.talend.core.model.properties.Project project=pManager.getProject(property);
        if (project != null) {
          artifactId=currentProject.getTechnicalLabel() + '.' + project.getTechnicalLabel()+ '.'+ artifactId;
        }
      }
    }
    return artifactId;
  }
  return null;
}","public static String getJobArtifactId(JobInfo jobInfo){
  if (jobInfo != null) {
    ProjectManager pManager=ProjectManager.getInstance();
    Project currentProject=pManager.getCurrentProject();
    String artifactId=JavaResourcesHelper.escapeFileName(jobInfo.getJobName());
    if (!FLAG_FIXING_ATIFACT_ID) {
      if (currentProject != null) {
        artifactId=currentProject.getTechnicalLabel() + '.' + artifactId;
      }
    }
    return artifactId;
  }
  return null;
}",0.5667655786350149
126224,"/** 
 * @return ""org.talend.job.<projectName>[.<refProjectName>]"".
 */
public static String getJobGroupId(Property property){
  if (!FLAG_FIXING_GROUP_ID) {
    if (property != null) {
      ProjectManager pManager=ProjectManager.getInstance();
      Project currentProject=pManager.getCurrentProject();
      if (!pManager.isInCurrentMainProject(property)) {
        org.talend.core.model.properties.Project project=pManager.getProject(property);
        if (project != null) {
          return getJobGroupId(currentProject.getTechnicalLabel() + '.' + project.getTechnicalLabel());
        }
      }
      if (currentProject != null) {
        return getJobGroupId(currentProject.getTechnicalLabel());
      }
    }
  }
  return getJobGroupId((String)null);
}","/** 
 * @return ""org.talend.job.<projectName>"".
 */
public static String getJobGroupId(Property property){
  if (!FLAG_FIXING_GROUP_ID) {
    if (property != null) {
      ProjectManager pManager=ProjectManager.getInstance();
      Project currentProject=pManager.getCurrentProject();
      if (currentProject != null) {
        return getJobGroupId(currentProject.getTechnicalLabel());
      }
    }
  }
  return getJobGroupId((String)null);
}",0.7009966777408638
126225,"/** 
 * DOC sgandon Comment method ""createUnavailableModuleToInstall"".
 * @param unavailableModuleName
 * @param contextMap, may be null
 * @return
 */
private ModuleToInstall createUnavailableModuleToInstall(String unavailableModuleName,Map<String,List<ModuleNeeded>> contextMap){
  ModuleToInstall m=new ModuleToInstall();
  m.setName(unavailableModuleName);
  setContext(m,contextMap);
  if (contextMap != null) {
    m.setDescription(getFirstDescription(contextMap.get(unavailableModuleName)));
  }
  return m;
}","/** 
 * DOC sgandon Comment method ""createUnavailableModuleToInstall"".
 * @param unavailableModuleName
 * @param contextMap, may be null
 * @return
 */
private ModuleToInstall createUnavailableModuleToInstall(String unavailableModuleName,Map<String,List<ModuleNeeded>> contextMap){
  ModuleToInstall m=new ModuleToInstall();
  m.setName(unavailableModuleName);
  m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
  setContext(m,contextMap);
  if (contextMap != null) {
    m.setDescription(getFirstDescription(contextMap.get(unavailableModuleName)));
  }
  return m;
}",0.9511520737327188
126226,"public static String getJobTypeFromFramework(Item item){
  Object frameworkObj=ConvertJobsUtil.getFramework(item);
  if (JobBatchFramework.MAPREDUCEFRAMEWORK.getDisplayName().equals(frameworkObj) || JobBatchFramework.SPARKFRAMEWORK.getDisplayName().equals(frameworkObj)) {
    return JobType.BIGDATABATCH.getDisplayName();
  }
 else   if (JobStreamingFramework.STORMFRAMEWORK.getDisplayName().equals(frameworkObj) || JobStreamingFramework.SPARKSTREAMINGFRAMEWORK.getDisplayName().equals(frameworkObj)) {
    return JobType.BIGDATASTREAMING.getDisplayName();
  }
 else {
    return JobType.STANDARD.getDisplayName();
  }
}","/** 
 * DOC nrousseau Comment method ""getJobTypeFromFramework"".
 * @param frameworkObj
 * @return
 */
public static String getJobTypeFromFramework(String frameworkObj){
  if (JobBatchFramework.MAPREDUCEFRAMEWORK.getDisplayName().equals(frameworkObj) || JobBatchFramework.SPARKFRAMEWORK.getDisplayName().equals(frameworkObj)) {
    return JobType.BIGDATABATCH.getDisplayName();
  }
 else   if (JobStreamingFramework.STORMFRAMEWORK.getDisplayName().equals(frameworkObj) || JobStreamingFramework.SPARKSTREAMINGFRAMEWORK.getDisplayName().equals(frameworkObj)) {
    return JobType.BIGDATASTREAMING.getDisplayName();
  }
 else {
    return JobType.STANDARD.getDisplayName();
  }
}",0.8549382716049383
126227,"/** 
 * get the target execution framework from the field in Job properties
 * @param item
 * @return
 */
public static Object getFramework(Item item){
  if (item != null) {
    Property property=item.getProperty();
    if (property != null && property.getAdditionalProperties() != null && property.getAdditionalProperties().containsKey(FRAMEWORK)) {
      return property.getAdditionalProperties().get(FRAMEWORK);
    }
  }
  return null;
}","/** 
 * get the target execution framework from the field in Job properties
 * @param item
 * @return
 */
public static String getFramework(Item item){
  if (item != null) {
    Property property=item.getProperty();
    if (property != null && property.getAdditionalProperties() != null && property.getAdditionalProperties().containsKey(FRAMEWORK)) {
      return (String)property.getAdditionalProperties().get(FRAMEWORK);
    }
  }
  return null;
}",0.9775280898876404
126228,"public static String[] getFrameworkItemsByJobType(Item item){
  String jobType=getJobTypeFromFramework(item);
  if (JobType.BIGDATABATCH.getDisplayName().equals(jobType)) {
    return JobBatchFramework.getFrameworkToDispaly();
  }
 else   if (JobType.BIGDATASTREAMING.getDisplayName().equals(jobType)) {
    return JobStreamingFramework.getFrameworkToDispaly();
  }
 else {
    return new String[0];
  }
}","/** 
 * DOC nrousseau Comment method ""getFrameworkItemsByJobType"".
 * @param repositoryObjectType
 * @return
 */
public static String[] getFrameworkItemsByJobType(ERepositoryObjectType repositoryObjectType){
  if (ERepositoryObjectType.PROCESS_MR.equals(repositoryObjectType)) {
    return JobBatchFramework.getFrameworkToDispaly();
  }
 else   if (ERepositoryObjectType.PROCESS_STORM.equals(repositoryObjectType)) {
    return JobStreamingFramework.getFrameworkToDispaly();
  }
 else {
    return new String[0];
  }
}",0.5785482123510293
126229,"@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
    IRepositoryViewObject object=factory.getLastVersion(project,id,this.path,this.type);
    if (object == null) {
      object=factory.getLastVersion(id);
    }
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.displayName=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (!this.avoidGuiInfos) {
      if (type == ERepositoryObjectType.JOBLET) {
        JobletProcessItem item=(JobletProcessItem)property.getItem();
        if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
          customImage=getJobletCustomIcon(property);
          customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
        }
        IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
        IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null && jobletservice != null) {
          IComponentsFactory factorySingleton=service.getComponentsFactory();
          IComponent component=factorySingleton.get(property.getLabel(),DI);
          if (component != null) {
            try {
              Property tProperty=jobletservice.getJobletComponentItem(component);
              if (!tProperty.getId().equals(this.id)) {
                informationStatus=ERepositoryStatus.WARN;
                property.setDescription(TIP);
              }
            }
 catch (            Exception e) {
            }
          }
        }
      }
 else       if (type == ERepositoryObjectType.DOCUMENTATION) {
        this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
        Item item=property.getItem();
        if (item instanceof DocumentationItem) {
          customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
        }
 else         if (item instanceof LinkDocumentationItem) {
          customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
        }
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
    IRepositoryViewObject object=factory.getLastVersion(project,id,this.path,this.type);
    if (object == null) {
      object=factory.getLastVersion(id);
    }
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.displayName=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (property.getAdditionalProperties() != null && property.getAdditionalProperties().containsKey(""String_Node_Str"")) {
      setFramework((String)property.getAdditionalProperties().get(""String_Node_Str""));
    }
 else {
      setFramework(null);
    }
    if (!this.avoidGuiInfos) {
      if (type == ERepositoryObjectType.JOBLET) {
        JobletProcessItem item=(JobletProcessItem)property.getItem();
        if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
          customImage=getJobletCustomIcon(property);
          customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
        }
        IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
        IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null && jobletservice != null) {
          IComponentsFactory factorySingleton=service.getComponentsFactory();
          IComponent component=factorySingleton.get(property.getLabel(),DI);
          if (component != null) {
            try {
              Property tProperty=jobletservice.getJobletComponentItem(component);
              if (!tProperty.getId().equals(this.id)) {
                informationStatus=ERepositoryStatus.WARN;
                property.setDescription(TIP);
              }
            }
 catch (            Exception e) {
            }
          }
        }
      }
 else       if (type == ERepositoryObjectType.DOCUMENTATION) {
        this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
        Item item=property.getItem();
        if (item instanceof DocumentationItem) {
          customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
        }
 else         if (item instanceof LinkDocumentationItem) {
          customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
        }
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}",0.9660297239915074
126230,public void build(String destinationPath) throws Exception ;,"public void build(String destinationPath,IProgressMonitor monitor) throws Exception ;",0.8275862068965517
126231,"void buildModules(String goals,String[] childrenModules,String programArgs);","void buildModules(String goals,String[] childrenModules,String programArgs,IProgressMonitor monitor) throws Exception ;",0.7794871794871795
126232,"/** 
 * build current job or whole project.
 */
void build();","/** 
 * build current job or whole project.
 */
void build(IProgressMonitor monitor) throws Exception ;",0.7439024390243902
126233,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor,int option) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    CorePlugin.getDefault().getRunProcessService().updateLibraries(neededModules,currentProcess);
    if (codeModified && !BitwiseOptionUtils.containOption(option,GENERATE_WITHOUT_COMPILING)) {
      processor.build();
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor,int option) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    CorePlugin.getDefault().getRunProcessService().updateLibraries(neededModules,currentProcess);
    if (codeModified && !BitwiseOptionUtils.containOption(option,GENERATE_WITHOUT_COMPILING)) {
      try {
        processor.build(progressMonitor);
      }
 catch (      Exception e) {
        throw new ProcessorException(e);
      }
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}",0.9131718842291788
126234,"public void execute(){
  try {
    ILaunchConfiguration launchConfiguration=createLaunchConfiguration();
    if (launchConfiguration == null) {
      throw new Exception(""String_Node_Str"");
    }
    TalendLauncherWaiter talendWaiter=new TalendLauncherWaiter(launchConfiguration);
    final ILaunch launch=buildAndLaunch(launchConfiguration,launcherMode,new NullProgressMonitor());
    talendWaiter.waitFinish(launch);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public void execute(IProgressMonitor monitor) throws Exception {
  ILaunchConfiguration launchConfiguration=createLaunchConfiguration();
  if (launchConfiguration == null) {
    throw new Exception(""String_Node_Str"");
  }
  TalendLauncherWaiter talendWaiter=new TalendLauncherWaiter(launchConfiguration);
  final ILaunch launch=buildAndLaunch(launchConfiguration,launcherMode,monitor);
  talendWaiter.waitFinish(launch);
  StringBuffer errors=new StringBuffer();
  for (  IProcess process : launch.getProcesses()) {
    String log=process.getStreamsProxy().getOutputStreamMonitor().getContents();
    for (    String line : log.split(""String_Node_Str"")) {
      if (line.startsWith(""String_Node_Str"")) {
        errors.append(line + ""String_Node_Str"");
      }
    }
  }
  if (errors.length() != 0) {
    throw new Exception(errors.toString());
  }
}",0.5404191616766467
126235,"@Override public void execute(){
  if (!launcherPomFile.exists()) {
    return;
  }
  if (getGoals().contains(TalendMavenConstants.GOAL_PACKAGE)) {
    try {
      MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
      Model model;
      model=mavenModelManager.readMavenModel(launcherPomFile);
      model.getDependencies().clear();
      if (launcherPomFile.exists()) {
        launcherPomFile.delete(true,null);
      }
      MavenPlugin.getMavenModelManager().createMavenModel(launcherPomFile,model);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  if (!TalendMavenConstants.POM_FILE_NAME.equals(launcherPomFile.getName())) {
    return;
  }
  super.execute();
}","@Override public void execute(IProgressMonitor monitor) throws Exception {
  if (!launcherPomFile.exists()) {
    return;
  }
  if (getGoals().contains(TalendMavenConstants.GOAL_PACKAGE)) {
    try {
      MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
      Model model;
      model=mavenModelManager.readMavenModel(launcherPomFile);
      model.getDependencies().clear();
      if (launcherPomFile.exists()) {
        launcherPomFile.delete(true,null);
      }
      MavenPlugin.getMavenModelManager().createMavenModel(launcherPomFile,model);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  if (!TalendMavenConstants.POM_FILE_NAME.equals(launcherPomFile.getName())) {
    return;
  }
  super.execute(monitor);
}",0.9659773182121414
126236,"/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(TalendMavenConstants.POM_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(TalendMavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  syncRoutinesPom(false);
  IFile projectPomFile=codeProject.getProjectPom();
  File pPomFile=projectPomFile.getLocation().toFile();
  if (pPomFile.exists()) {
    MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
    Model projModel=mavenModelManager.readMavenModel(projectPomFile);
    List<String> modules=projModel.getModules();
    if (modules != null) {
      modules.clear();
    }
    IFile routinesPomFile=codeProject.getProject().getFile(PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID));
    Model routinesModel=PomUtil.getRoutinesTempalteModel();
    if (routinesPomFile.exists()) {
      routinesModel=mavenModelManager.readMavenModel(routinesPomFile);
    }
    modules.add(routinesPomFile.getName());
    List<Dependency> routinesDependencies=routinesModel.getDependencies();
    ProcessorDependenciesManager.updateDependencies(null,projModel,routinesDependencies,true);
    PomUtil.savePom(monitor,projModel,projectPomFile);
    PomUtil.installDependencies(routinesDependencies);
  }
  codeProject.buildModules(TalendMavenConstants.GOAL_COMPILE,null);
}","/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(TalendMavenConstants.POM_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(TalendMavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(TalendMavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  syncRoutinesPom(false);
  IFile projectPomFile=codeProject.getProjectPom();
  File pPomFile=projectPomFile.getLocation().toFile();
  if (pPomFile.exists()) {
    MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
    Model projModel=mavenModelManager.readMavenModel(projectPomFile);
    List<String> modules=projModel.getModules();
    if (modules != null) {
      modules.clear();
    }
    IFile routinesPomFile=codeProject.getProject().getFile(PomUtil.getPomFileName(TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID));
    Model routinesModel=PomUtil.getRoutinesTempalteModel();
    if (routinesPomFile.exists()) {
      routinesModel=mavenModelManager.readMavenModel(routinesPomFile);
    }
    modules.add(routinesPomFile.getName());
    List<Dependency> routinesDependencies=routinesModel.getDependencies();
    ProcessorDependenciesManager.updateDependencies(null,projModel,routinesDependencies,true);
    PomUtil.savePom(monitor,projModel,projectPomFile);
    PomUtil.installDependencies(routinesDependencies);
  }
  codeProject.buildModules(TalendMavenConstants.GOAL_COMPILE,null,monitor);
}",0.9982905982905984
126237,"public void launch() throws Exception {
  MavenArtifact artifact=createArtifact();
  final List<String> properties=createProperties(artifact);
  MavenCommandLauncher launcher=new MavenCommandLauncher(goal){
    @Override protected void setProjectConfiguration(    ILaunchConfigurationWorkingCopy workingCopy,    IContainer basedir){
      super.setProjectConfiguration(workingCopy,basedir);
      workingCopy.setAttribute(MavenLaunchConstants.ATTR_PROPERTIES,properties);
    }
  }
;
  launcher.execute();
}","public void launch() throws Exception {
  MavenArtifact artifact=createArtifact();
  final List<String> properties=createProperties(artifact);
  MavenCommandLauncher launcher=new MavenCommandLauncher(goal){
    @Override protected void setProjectConfiguration(    ILaunchConfigurationWorkingCopy workingCopy,    IContainer basedir){
      super.setProjectConfiguration(workingCopy,basedir);
      workingCopy.setAttribute(MavenLaunchConstants.ATTR_PROPERTIES,properties);
    }
  }
;
  launcher.execute(new NullProgressMonitor());
}",0.9759384023099134
126238,"@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  LibrariesIndex index=LibrariesIndexManager.getInstance().getStudioLibIndex();
  EMap<String,String> jarsToRelativePath=index.getJarsToRelativePath();
  List<File> filesToDeploy=new ArrayList<File>();
  for (  ModuleNeeded module : modules) {
    String moduleLocation=module.getModuleLocaion();
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(module.getModuleName());
    if (checkJarInstalledInMaven(mavenUri)) {
      continue;
    }
    if (module.getMavenUri() != null && !module.getMavenUri().isEmpty()) {
      if (checkJarInstalledInMaven(module.getMavenUri())) {
        continue;
      }
    }
    boolean found=false;
    if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
      if (jarsToRelativePath.containsKey(module.getModuleName())) {
        String relativePath=jarsToRelativePath.get(module.getModuleName());
        if (relativePath.equals(moduleLocation)) {
          continue;
        }
 else {
          if (!urlWarned.contains(moduleLocation)) {
            System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
            urlWarned.add(moduleLocation);
          }
        }
      }
      if (checkJarInstalledFromPlatform(moduleLocation)) {
        jarsToRelativePath.put(module.getModuleName(),moduleLocation);
        modified=true;
        found=true;
        filesToDeploy.add(new File(studioJarInstalled.get(moduleLocation)));
      }
    }
    if (!found) {
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(module.getModuleName());
      if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
        found=true;
        filesToDeploy.add(new File(studioJarInstalled.get(relativePath)));
      }
    }
    if (!found) {
      ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
    }
  }
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  for (  File file : filesToDeploy) {
    deployFile(file,customUriToAdd,monitorWrap);
  }
  if (!customUriToAdd.isEmpty()) {
    deployMavenIndex(customUriToAdd,monitorWrap);
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}","@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  LibrariesIndex index=LibrariesIndexManager.getInstance().getStudioLibIndex();
  EMap<String,String> jarsToRelativePath=index.getJarsToRelativePath();
  List<File> filesToDeploy=new ArrayList<File>();
  for (  ModuleNeeded module : modules) {
    String moduleLocation=module.getModuleLocaion();
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(module.getModuleName());
    if (checkJarInstalledInMaven(mavenUri)) {
      continue;
    }
    if (module.getMavenUri() != null && !module.getMavenUri().isEmpty()) {
      if (checkJarInstalledInMaven(module.getMavenUri())) {
        continue;
      }
    }
    boolean found=false;
    if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
      if (jarsToRelativePath.containsKey(module.getModuleName())) {
        String relativePath=jarsToRelativePath.get(module.getModuleName());
        if (!relativePath.equals(moduleLocation)) {
          if (!urlWarned.contains(moduleLocation)) {
            System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
            urlWarned.add(moduleLocation);
          }
          moduleLocation=relativePath;
        }
      }
      if (checkJarInstalledFromPlatform(moduleLocation)) {
        jarsToRelativePath.put(module.getModuleName(),moduleLocation);
        modified=true;
        found=true;
        filesToDeploy.add(new File(studioJarInstalled.get(moduleLocation)));
      }
    }
    if (!found) {
      EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
      String relativePath=jarsToRelative.get(module.getModuleName());
      if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
        found=true;
        filesToDeploy.add(new File(studioJarInstalled.get(relativePath)));
      }
    }
    if (!found) {
      ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
    }
  }
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  for (  File file : filesToDeploy) {
    deployFile(file,customUriToAdd,monitorWrap);
  }
  if (!customUriToAdd.isEmpty()) {
    deployMavenIndex(customUriToAdd,monitorWrap);
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}",0.9846093133385952
126239,"@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Item item=property.getItem();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + item.getProperty().getDisplayName();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(sourceNode,initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  if (item instanceof ProcessItem) {
    DuplicateDialog jobNewNameDialog=new DuplicateDialog(null,sourceNode,jobNameValue);
    if (jobNewNameDialog.open() != Dialog.OK) {
      return;
    }
    String jobNewName=jobNewNameDialog.getNameValue();
    String jobTypeValue=jobNewNameDialog.getJobTypeValue();
    String frameworkValue=jobNewNameDialog.getFrameworkValue();
    try {
      jobNameValue=getDuplicateName(sourceNode,jobNewName,selectionInClipboard);
    }
 catch (    BusinessException e) {
      jobNameValue=""String_Node_Str"";
    }
    if (JobType.STANDARD.getDisplayName().equals(jobTypeValue)) {
      String sourceJobType=ConvertJobsUtil.getJobTypeFromFramework(item);
      if (JobType.STANDARD.getDisplayName().equals(sourceJobType)) {
        createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
      }
    }
    ConvertJobsUtil.createOperation(jobNameValue,jobTypeValue,frameworkValue,sourceNode.getObject());
  }
 else {
    InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
      @Override public String isValid(      String newText){
        return validJobName(sourceNode,newText,selectionInClipboard);
      }
    }
);
    if (jobNewNameDialog.open() != Dialog.OK) {
      return;
    }
    String jobNewName=jobNewNameDialog.getValue();
    createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
  }
}","@Override protected void doRun(){
  if (sourceNode == null) {
    return;
  }
  Property property=sourceNode.getObject().getProperty();
  Item item=property.getItem();
  Property updatedProperty=null;
  try {
    updatedProperty=ProxyRepositoryFactory.getInstance().getLastVersion(new Project(ProjectManager.getInstance().getProject(item)),property.getId()).getProperty();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  String initNameValue=""String_Node_Str"" + item.getProperty().getDisplayName();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  final TreeSelection selectionInClipboard=(TreeSelection)selection;
  promptForSavingIfNecessary((RepositoryNode)selection.getFirstElement());
  String jobNameValue=null;
  try {
    jobNameValue=getDuplicateName(sourceNode,initNameValue,selectionInClipboard);
  }
 catch (  BusinessException e) {
    jobNameValue=""String_Node_Str"";
  }
  if (item instanceof ProcessItem && PluginChecker.isTIS()) {
    DuplicateDialog jobNewNameDialog=new DuplicateDialog(null,sourceNode,jobNameValue);
    if (jobNewNameDialog.open() != Dialog.OK) {
      return;
    }
    String jobNewName=jobNewNameDialog.getNameValue();
    String jobTypeValue=jobNewNameDialog.getJobTypeValue();
    String frameworkValue=jobNewNameDialog.getFrameworkValue();
    try {
      jobNameValue=getDuplicateName(sourceNode,jobNewName,selectionInClipboard);
    }
 catch (    BusinessException e) {
      jobNameValue=""String_Node_Str"";
    }
    if (JobType.STANDARD.getDisplayName().equals(jobTypeValue)) {
      String sourceJobType=ConvertJobsUtil.getJobTypeFromFramework(item);
      if (JobType.STANDARD.getDisplayName().equals(sourceJobType)) {
        createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
      }
    }
    ConvertJobsUtil.createOperation(jobNameValue,jobTypeValue,frameworkValue,sourceNode.getObject());
  }
 else {
    InputDialog jobNewNameDialog=new InputDialog(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),jobNameValue,new IInputValidator(){
      @Override public String isValid(      String newText){
        return validJobName(sourceNode,newText,selectionInClipboard);
      }
    }
);
    if (jobNewNameDialog.open() != Dialog.OK) {
      return;
    }
    String jobNewName=jobNewNameDialog.getValue();
    createOperation(jobNewName,sourceNode,copyObjectAction,selectionInClipboard);
  }
}",0.994878098750256
126240,"public static String[] getJobTypeToDispaly(){
  String[] dispalyNames=new String[values().length];
  for (int i=0; i < values().length; i++) {
    dispalyNames[i]=values()[i].getDisplayName();
  }
  return dispalyNames;
}","public static String[] getJobTypeToDispaly(){
  String[] dispalyNames=new String[values().length];
  List<String> dispalyNamesList=new ArrayList<String>();
  for (int i=0; i < values().length; i++) {
    dispalyNamesList.add(i,values()[i].getDisplayName());
  }
  if (!PluginChecker.isStormPluginLoader()) {
    dispalyNamesList.remove(JobType.BIGDATASTREAMING.getDisplayName());
  }
  if (!PluginChecker.isMapReducePluginLoader()) {
    dispalyNamesList.remove(JobType.BIGDATABATCH.getDisplayName());
  }
  dispalyNames=new String[dispalyNamesList.size()];
  for (int j=0; j < dispalyNamesList.size(); j++) {
    if (dispalyNamesList.get(j) != null) {
      dispalyNames[j]=dispalyNamesList.get(j);
    }
  }
  return dispalyNames;
}",0.3560209424083769
126241,"public static void updateJobFrameworkPart(String jobTypeValue,CCombo frameworkCombo){
  if (JobType.STANDARD.getDisplayName().equals(jobTypeValue)) {
    frameworkCombo.setItems(new String[0]);
  }
 else   if (JobType.BIGDATABATCH.getDisplayName().equals(jobTypeValue)) {
    String[] items=JobBatchFramework.getFrameworkToDispaly();
    frameworkCombo.setItems(items);
    if (items.length > 0) {
      frameworkCombo.select(0);
    }
  }
 else   if (JobType.BIGDATASTREAMING.getDisplayName().equals(jobTypeValue)) {
    String[] items=JobStreamingFramework.getFrameworkToDispaly();
    frameworkCombo.setItems(items);
    if (items.length > 0) {
      frameworkCombo.select(0);
    }
  }
}","public static void updateJobFrameworkPart(String jobTypeValue,CCombo frameworkCombo){
  frameworkCombo.setEditable(true);
  if (JobType.STANDARD.getDisplayName().equals(jobTypeValue)) {
    frameworkCombo.setItems(new String[0]);
    frameworkCombo.setEditable(false);
  }
 else   if (JobType.BIGDATABATCH.getDisplayName().equals(jobTypeValue)) {
    String[] items=JobBatchFramework.getFrameworkToDispaly();
    frameworkCombo.setItems(items);
    if (items.length > 0) {
      frameworkCombo.select(0);
    }
  }
 else   if (JobType.BIGDATASTREAMING.getDisplayName().equals(jobTypeValue)) {
    String[] items=JobStreamingFramework.getFrameworkToDispaly();
    frameworkCombo.setItems(items);
    if (items.length > 0) {
      frameworkCombo.select(0);
    }
  }
}",0.9485243651338366
126242,"public ProjectPreferenceManager getProjectPreferenceManager(){
  return projectPreferenceManager;
}","public ProjectPreferenceManager getProjectPreferenceManager(){
  if (projectPreferenceManager == null) {
    projectPreferenceManager=new ProjectPreferenceManager(PLUGIN_ID);
  }
  return projectPreferenceManager;
}",0.4394904458598726
126243,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  projectPreferenceManager=new ProjectPreferenceManager(PLUGIN_ID);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}",0.746268656716418
126244,"public void init(String viewId){
  if (viewId == null) {
    return;
  }
  Composite parent=null;
  try {
    parent=new Shell();
    RepositoryContextTypesFilter filter=new RepositoryContextTypesFilter(Arrays.asList(RepositoryMavenSettingManager.REGISTRY.getSupportTypes()));
    RepoCommonViewerProvider provider=new RepoCommonViewerProvider(){
      protected void doPerspecitiveFilterForCommonViewer(      TreeViewer treeViewer,      String specifiedPerspectiveId){
        boolean oldValue=PerspectiveFilterHelper.isActivedPerspectiveFilter();
        PerspectiveFilterHelper.setActivedPerspectiveFilter(false);
        try {
          super.doPerspecitiveFilterForCommonViewer(treeViewer,specifiedPerspectiveId);
        }
  finally {
          PerspectiveFilterHelper.setActivedPerspectiveFilter(oldValue);
        }
      }
    }
;
    provider.setViewId(viewId);
    TreeViewer fakeTreeViewer=provider.createViewer(parent);
    fakeTreeViewer.addFilter(filter);
    fakeTreeViewer.expandAll();
    init(fakeTreeViewer);
  }
  finally {
    if (parent != null) {
      parent.dispose();
    }
  }
}","public void init(String viewId){
  if (viewId == null) {
    return;
  }
  Composite parent=null;
  try {
    parent=new Shell();
    RepositoryContextTypesFilter filter=new RepositoryContextTypesFilter(Arrays.asList(RepositoryMavenSettingManager.REGISTRY.getSupportTypes()));
    RepoCommonViewerProvider provider=new RepoCommonViewerProvider(){
      protected void doPerspecitiveFilterForCommonViewer(      TreeViewer treeViewer,      String specifiedPerspectiveId){
        boolean oldValue=PerspectiveFilterHelper.isActivedPerspectiveFilter();
        PerspectiveFilterHelper.setActivedPerspectiveFilter(false);
        try {
          super.doPerspecitiveFilterForCommonViewer(treeViewer,specifiedPerspectiveId);
        }
  finally {
          PerspectiveFilterHelper.setActivedPerspectiveFilter(oldValue);
        }
      }
    }
;
    provider.setViewId(viewId);
    TreeViewer fakeTreeViewer=provider.createViewer(parent);
    fakeTreeViewer.addFilter(filter);
    fakeTreeViewer.expandAll();
    init(fakeTreeViewer);
  }
  finally {
    if (parent != null) {
      parent.dispose();
    }
    IRepositoryView repoView=RepositoryManagerHelper.findRepositoryView();
    if (repoView != null && repoView instanceof RepoViewCommonNavigator) {
      CommonViewer commonViewer=((RepoViewCommonNavigator)repoView).getCommonViewer();
      RepositoryNodeFilterHelper.filter(commonViewer,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
    }
  }
}",0.848159509202454
126245,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_CLOSE_ICON));
            }
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_OPEN_ICON));
            }
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_CLOSE_ICON));
            }
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_OPEN_ICON));
            }
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  RepositoryNodeFilterHelper.filter(viewer,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}",0.9892666816783008
126246,"public static void filter(final CommonViewer commonViewer,boolean activedFilter,boolean activedPerspectiveFilter){
  processContentExtensions(commonViewer,activedFilter,activedPerspectiveFilter);
  processCommonFilters(commonViewer,activedFilter);
}","public static void filter(final CommonViewer commonViewer,boolean activedFilter,boolean activedPerspectiveFilter){
  processContentExtensions(commonViewer,activedFilter,activedPerspectiveFilter);
  processCommonFilters(commonViewer,activedFilter);
  if (commonViewer instanceof RepoViewCommonViewer) {
    ((RepoViewCommonViewer)commonViewer).fireRefreshNodePerspectiveLisenter();
  }
}",0.784251968503937
126247,"@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  final CommonViewer commonViewer2=getCommonViewer();
  if (commonViewer2 instanceof RepoViewCommonViewer) {
    RepositoryNodeFilterHelper.filter(commonViewer2,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
    ((RepoViewCommonViewer)commonViewer2).fireRefreshNodePerspectiveLisenter();
  }
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  final CommonViewer commonViewer2=getCommonViewer();
  if (commonViewer2 instanceof RepoViewCommonViewer) {
    RepositoryNodeFilterHelper.filter(commonViewer2,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
  }
}",0.9014778325123152
126248,"private static Set<JobInfo> getAllJobInfo(ProcessType ptype,JobInfo parentJobInfo,Set<JobInfo> jobInfos){
  if (ptype == null) {
    return jobInfos;
  }
  EList<NodeType> nodes=ptype.getNode();
  for (  NodeType node : nodes) {
    boolean activate=true;
    for (    Object o : node.getElementParameter()) {
      ElementParameterType param=(ElementParameterType)o;
      if (""String_Node_Str"".equals(param.getName())) {
        activate=""String_Node_Str"".equals(param.getValue());
        break;
      }
    }
    if (!activate) {
      continue;
    }
    if (""String_Node_Str"".equalsIgnoreCase(node.getComponentName())) {
      String jobIds=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobContext=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobVersion=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
      for (      String jobId : jobsArr) {
        if (StringUtils.isNotEmpty(jobId)) {
          ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,jobVersion);
          if (processItem != null) {
            JobInfo jobInfo=new JobInfo(processItem,jobContext);
            if (!jobInfos.contains(jobInfo)) {
              jobInfos.add(jobInfo);
              jobInfo.setFatherJobInfo(parentJobInfo);
              getAllJobInfo(processItem.getProcess(),jobInfo,jobInfos);
            }
          }
        }
      }
    }
 else {
      if (PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null) {
          ProcessType jobletProcess=service.getJobletProcess(node);
          if (jobletProcess != null) {
            getAllJobInfo(jobletProcess,parentJobInfo,jobInfos);
          }
        }
      }
    }
  }
  return jobInfos;
}","private static Set<JobInfo> getAllJobInfo(ProcessType ptype,JobInfo parentJobInfo,Set<JobInfo> jobInfos){
  if (ptype == null) {
    return jobInfos;
  }
  EList<NodeType> nodes=ptype.getNode();
  for (  NodeType node : nodes) {
    boolean activate=true;
    for (    Object o : node.getElementParameter()) {
      ElementParameterType param=(ElementParameterType)o;
      if (""String_Node_Str"".equals(param.getName())) {
        activate=""String_Node_Str"".equals(param.getValue());
        break;
      }
    }
    if (!activate) {
      continue;
    }
    if (""String_Node_Str"".equalsIgnoreCase(node.getComponentName())) {
      String jobIds=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobContext=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobVersion=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
      for (      String jobId : jobsArr) {
        if (StringUtils.isNotEmpty(jobId)) {
          ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,jobVersion);
          if (processItem != null) {
            JobInfo jobInfo=new JobInfo(processItem,jobContext);
            if (!jobInfos.contains(jobInfo)) {
              jobInfos.add(jobInfo);
              jobInfo.setFatherJobInfo(parentJobInfo);
              getAllJobInfo(processItem.getProcess(),jobInfo,jobInfos);
            }
          }
        }
      }
    }
 else {
      if (PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null) {
          ProcessType jobletProcess=service.getJobletProcess(node);
          if (jobletProcess != null) {
            getAllJobInfo(jobletProcess,parentJobInfo,jobInfos);
          }
        }
      }
    }
  }
  if (!parentJobInfo.isTestContainer() && GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    List<ProcessItem> testsItems=testContainerService.getAllTestContainers(parentJobInfo.getProcessItem());
    for (    ProcessItem testItem : testsItems) {
      JobInfo jobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
      jobInfo.setTestContainer(true);
      jobInfos.add(jobInfo);
      jobInfo.setFatherJobInfo(parentJobInfo);
    }
  }
  return jobInfos;
}",0.8461538461538461
126249,"public static Set<JobInfo> getChildrenJobInfo(ProcessItem processItem){
  JobInfo parentJobInfo=new JobInfo(processItem,processItem.getProcess().getDefaultContext());
  return getAllJobInfo(processItem.getProcess(),parentJobInfo,new HashSet<JobInfo>());
}","public static Set<JobInfo> getChildrenJobInfo(ProcessItem processItem){
  JobInfo parentJobInfo=new JobInfo(processItem,processItem.getProcess().getDefaultContext());
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService.isTestContainerItem(processItem)) {
      parentJobInfo.setTestContainer(true);
    }
  }
  return getAllJobInfo(processItem.getProcess(),parentJobInfo,new HashSet<JobInfo>());
}",0.56
126250,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getAllTestContainers(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.4275692074326886
126251,"public void updateLibraries(Set<String> jobModuleList,IProcess process);","public void updateLibraries(Set<ModuleNeeded> jobModuleList,IProcess process);",0.88
126252,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<String> jarList=new HashSet<String>();
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    for (    ModuleNeeded module : neededModules) {
      jarList.add(module.getModuleName());
    }
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    if (codeModified) {
      processor.build();
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
    CorePlugin.getDefault().getRunProcessService().updateLibraries(neededModules,currentProcess);
    if (codeModified) {
      processor.build();
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}",0.7142857142857143
126253,"private static void generatePigudfInfor(JobInfo jobInfo,ProcessItem selectedProcessItem,IProcess currentProcess,IProcessor processor,Set<ModuleNeeded> neededLibraries) throws ProcessorException {
  Set<String> jarList=new HashSet<String>();
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  for (  ModuleNeeded module : neededModules) {
    jarList.add(module.getModuleName());
  }
  Set<String> pigudfNeededWithSubjobPerJob=LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  String pigModuleName=null;
  if (selectedProcessItem != null && !pigudfNeededWithSubjobPerJob.isEmpty()) {
    CorePlugin.getDefault().getRunProcessService().updateLibraries(jarList,currentProcess);
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    pigModuleName=service.exportPigudf(processor,selectedProcessItem.getProperty(),exportConfig);
  }
  Set<ModuleNeeded> test=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  if (test != null && pigModuleName != null) {
    test.add(new ModuleNeeded(null,pigModuleName,null,true));
  }
}","private static void generatePigudfInfor(JobInfo jobInfo,ProcessItem selectedProcessItem,IProcess currentProcess,IProcessor processor,Set<ModuleNeeded> neededLibraries) throws ProcessorException {
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  Set<String> pigudfNeededWithSubjobPerJob=LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  String pigModuleName=null;
  if (selectedProcessItem != null && !pigudfNeededWithSubjobPerJob.isEmpty()) {
    CorePlugin.getDefault().getRunProcessService().updateLibraries(neededModules,currentProcess);
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    pigModuleName=service.exportPigudf(processor,selectedProcessItem.getProperty(),exportConfig);
  }
  Set<ModuleNeeded> test=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  if (test != null && pigModuleName != null) {
    test.add(new ModuleNeeded(null,pigModuleName,null,true));
  }
}",0.3313856427378965
126254,"/** 
 * DOC Talend Comment method ""getLibrariesNexusServer"". get nexus server for libraries
 * @param createTalendIfCustomNotExsit , true : if custom libraries nexus server not configured in tac , return thedefault one. false : if custom libraries nexus server not configured in tac , return null.
 * @return
 */
public static NexusServerBean getLibrariesNexusServer(boolean createTalendIfCustomNotExsit){
  try {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    if (factory.getRepositoryContext() != null && factory.getRepositoryContext().getFields() != null) {
      String adminUrl=factory.getRepositoryContext().getFields().get(RepositoryConstants.REPOSITORY_URL);
      String userName=""String_Node_Str"";
      String password=""String_Node_Str"";
      User user=factory.getRepositoryContext().getUser();
      if (user != null) {
        userName=user.getLogin();
        password=new String(user.getPassword());
      }
      NexusServerBean serverBean=null;
      if (adminUrl != null && !""String_Node_Str"".equals(adminUrl) && GlobalServiceRegister.getDefault().isServiceRegistered(IRemoteService.class)) {
        serverBean=new NexusServerBean();
        IRemoteService remoteService=(IRemoteService)GlobalServiceRegister.getDefault().getService(IRemoteService.class);
        JSONObject updateRepositoryUrl;
        updateRepositoryUrl=remoteService.getLibLocation(userName,password,adminUrl);
        String nexus_url=updateRepositoryUrl.getString(KEY_LIB_RUL);
        String nexus_user=updateRepositoryUrl.getString(KEY_LIB_USER);
        String nexus_pass=updateRepositoryUrl.getString(KEY_LIB_PASS);
        String url=nexus_url;
        if (url.endsWith(NexusConstants.SLASH)) {
          url=url.substring(0,url.length() - 1);
        }
        if (!nexus_url.endsWith(NexusConstants.SLASH)) {
          nexus_url=nexus_url + NexusConstants.SLASH;
        }
        serverBean.setRepositoryUrl(nexus_url);
        String server=url.substring(0,url.indexOf(NexusConstants.CONTENT_REPOSITORIES));
        String repositoryId=url.substring(url.indexOf(NexusConstants.CONTENT_REPOSITORIES) + NexusConstants.CONTENT_REPOSITORIES.length(),url.length());
        serverBean.setServer(server);
        serverBean.setUserName(nexus_user);
        serverBean.setPassword(nexus_pass);
        serverBean.setRepositoryId(repositoryId);
      }
      if (serverBean != null) {
        return serverBean;
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (createTalendIfCustomNotExsit) {
      NexusServerBean serverBean=new NexusServerBean(true);
      serverBean.setServer(TALEND_LIB_SERVER);
      serverBean.setUserName(TALEND_LIB_USER);
      serverBean.setPassword(TALEND_LIB_PASSWORD);
      serverBean.setRepositoryId(TALEND_LIB_REPOSITORY);
      return serverBean;
    }
  }
  return null;
}","/** 
 * DOC Talend Comment method ""getLibrariesNexusServer"". get nexus server for libraries
 * @param createTalendIfCustomNotExsit , true : if custom libraries nexus server not configured in tac , return thedefault one. false : if custom libraries nexus server not configured in tac , return null.
 * @return
 */
public static NexusServerBean getLibrariesNexusServer(boolean createTalendIfCustomNotExsit){
  try {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    RepositoryContext repositoryContext=factory.getRepositoryContext();
    if (repositoryContext != null && repositoryContext.getFields() != null) {
      String adminUrl=repositoryContext.getFields().get(RepositoryConstants.REPOSITORY_URL);
      String userName=""String_Node_Str"";
      String password=""String_Node_Str"";
      User user=repositoryContext.getUser();
      if (user != null) {
        userName=user.getLogin();
        password=repositoryContext.getClearPassword();
      }
      NexusServerBean serverBean=null;
      serverBean=getSoftwareUpdateNexusServer(adminUrl,userName,password);
      if (serverBean != null) {
        return serverBean;
      }
    }
  }
  finally {
    if (createTalendIfCustomNotExsit) {
      NexusServerBean serverBean=new NexusServerBean(true);
      serverBean.setServer(TALEND_LIB_SERVER);
      serverBean.setUserName(TALEND_LIB_USER);
      serverBean.setPassword(TALEND_LIB_PASSWORD);
      serverBean.setRepositoryId(TALEND_LIB_REPOSITORY);
      return serverBean;
    }
  }
  return null;
}",0.4233608336951802
126255,"public void generateTestReports(ProcessItem processItem,IProgressMonitor monitor) throws Exception ;",public void generateTestReports(IProgressMonitor monitor) throws Exception ;,0.8636363636363636
126256,"public void generateItemFiles(ProcessItem processItem,boolean withDependencies,IProgressMonitor monitor) throws Exception ;","public void generateItemFiles(boolean withDependencies,IProgressMonitor monitor) throws Exception ;",0.8918918918918919
126257,"public void generateJobFiles(ProcessItem process,String contextName,String version,IProgressMonitor monitor) throws Exception ;",public void generateJobFiles(IProgressMonitor monitor) throws Exception ;,0.73
126258,public void build() throws Exception ;,public void build(String destinationPath) throws Exception ;,0.7755102040816326
126259,"/** 
 * build the modules jobs with goals(like compile, package, install, etc). if null, will build whole project. if empty (String[0]), willn't build any thing. if goals is not null, will use maven to build. and if childrenModules is null, will try to build project pom. else will build each modules.
 */
void buildModules(String goals,String[] childrenModules);","void buildModules(String goals,String[] childrenModules,String programArgs);",0.2596810933940774
126260,"/** 
 * tests
 */
public IFolder getTestsFolder();","/** 
 * tests
 */
IFolder getTestsFolder();",0.9247311827956988
126261,"@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
    IRepositoryViewObject object=factory.getLastVersion(project,id,this.path,this.type);
    if (object == null) {
      object=factory.getLastVersion(id);
    }
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.displayName=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
      if (service != null && jobletservice != null) {
        IComponentsFactory factorySingleton=service.getComponentsFactory();
        IComponent component=factorySingleton.get(property.getLabel(),DI);
        if (component != null) {
          try {
            Property tProperty=jobletservice.getJobletComponentItem(component);
            if (!tProperty.getId().equals(this.id)) {
              informationStatus=ERepositoryStatus.WARN;
              property.setDescription(TIP);
            }
          }
 catch (          Exception e) {
          }
        }
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
    IRepositoryViewObject object=factory.getLastVersion(project,id,this.path,this.type);
    if (object == null) {
      object=factory.getLastVersion(id);
    }
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.displayName=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (!this.avoidGuiInfos) {
      if (type == ERepositoryObjectType.JOBLET) {
        JobletProcessItem item=(JobletProcessItem)property.getItem();
        if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
          customImage=getJobletCustomIcon(property);
          customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
        }
        IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
        IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null && jobletservice != null) {
          IComponentsFactory factorySingleton=service.getComponentsFactory();
          IComponent component=factorySingleton.get(property.getLabel(),DI);
          if (component != null) {
            try {
              Property tProperty=jobletservice.getJobletComponentItem(component);
              if (!tProperty.getId().equals(this.id)) {
                informationStatus=ERepositoryStatus.WARN;
                property.setDescription(TIP);
              }
            }
 catch (            Exception e) {
            }
          }
        }
      }
 else       if (type == ERepositoryObjectType.DOCUMENTATION) {
        this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
        Item item=property.getItem();
        if (item instanceof DocumentationItem) {
          customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
        }
 else         if (item instanceof LinkDocumentationItem) {
          customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
        }
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}",0.9770034843205576
126262,"public static String trimParameter(String value){
  if (value == null) {
    return null;
  }
  int length=value.length();
  String result=removeQuotes(value);
  if (length > 1 && ((value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str""))) || (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str""))) {
    result=value.substring(1,length - 1);
    if (result.contains(""String_Node_Str"")) {
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return result;
}","public static String trimParameter(String value){
  if (value == null) {
    return null;
  }
  int length=value.length();
  String result=removeQuotes(value);
  if (length > 1 && (((value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str""))) || (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"")))) {
    result=value.substring(1,length - 1);
    if (result.contains(""String_Node_Str"")) {
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
      result=result.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return result;
}",0.9989339019189766
126263,"private static boolean isSupportStandalone(HiveConnVersionInfo hiveVersionObj,int hiveServerIndex){
  boolean isHiveServer1=""String_Node_Str"".equals(HiveServerVersionUtils.extractKey(hiveServerIndex));
  if (isHiveServer1 && HiveConnVersionInfo.Cloudera_CDH5_4.equals(hiveVersionObj)) {
    return false;
  }
  return !(HiveConnVersionInfo.HDP_1_0.equals(hiveVersionObj) || isHiveServer1 && (HiveConnVersionInfo.HDP_1_2.equals(hiveVersionObj) || HiveConnVersionInfo.HDP_1_3.equals(hiveVersionObj) || HiveConnVersionInfo.HDP_2_0.equals(hiveVersionObj)));
}","private static boolean isSupportStandalone(HiveConnVersionInfo hiveVersionObj,int hiveServerIndex){
  boolean isHiveServer1=""String_Node_Str"".equals(HiveServerVersionUtils.extractKey(hiveServerIndex));
  return !(HiveConnVersionInfo.HDP_1_0.equals(hiveVersionObj) || isHiveServer1 && (HiveConnVersionInfo.HDP_1_2.equals(hiveVersionObj) || HiveConnVersionInfo.HDP_1_3.equals(hiveVersionObj) || HiveConnVersionInfo.HDP_2_0.equals(hiveVersionObj)));
}",0.8933200398803589
126264,"/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(int distributionIndex,int hiveVersionIndex){
  boolean isSupportHiveServer2=HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex);
  if (isSupportHiveServer2) {
    DatabaseConnection conn=getConnection();
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    hiveServerVersionCombo.select(HiveServerVersionUtils.getIndexofHiveServerByKey(hiveServerKey));
  }
  int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  updateHiveModeAndMakeSelection(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}","/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(int distributionIndex,int hiveVersionIndex){
  boolean isSupportHiveServer2=HiveConnUtils.isSupportHiveServer2(distributionIndex,hiveVersionIndex);
  if (isSupportHiveServer2) {
    DatabaseConnection conn=getConnection();
    String hiveServerDisplayNames[]=HiveServerVersionUtils.extractAvailableArrayDisplayNames(HiveConnUtils.getHiveVersionObj(distributionIndex,hiveVersionIndex));
    hiveServerVersionCombo.getCombo().setItems(hiveServerDisplayNames);
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    hiveServerVersionCombo.select(HiveServerVersionUtils.getIndexofHiveServerByKey(hiveServerKey));
  }
  int hiveServerIndex=hiveServerVersionCombo.getSelectionIndex();
  int hiveModeIndex=hiveModeCombo.getSelectionIndex();
  updateHiveModeAndMakeSelection(distributionIndex,hiveVersionIndex,hiveModeIndex,hiveServerIndex);
}",0.8822055137844611
126265,"/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenContants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(MavenConstants.POM_NAME + '_') && name.endsWith(MavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(MavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(MavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  IFile projectPomFile=codeProject.getProjectPom();
  File pPomFile=projectPomFile.getLocation().toFile();
  if (pPomFile.exists()) {
    MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
    Model projModel=mavenModelManager.readMavenModel(projectPomFile);
    List<String> modules=projModel.getModules();
    if (modules != null) {
      modules.clear();
    }
    final Model routinesModel=PomUtil.getRoutinesTempalteModel();
    modules.add(PomUtil.getPomFileName(routinesModel.getArtifactId()));
    CreateMavenRoutinePom.addDependencies(projModel);
    PomUtil.savePom(monitor,projModel,projectPomFile);
  }
}","/** 
 * Clean the pom_xxx.xml and assembly_xxx.xml and target folder, also clean the module and dependencies.
 */
public void cleanMavenFiles(IProgressMonitor monitor) throws Exception {
  final String routinesPomFileName=PomUtil.getPomFileName(TalendMavenContants.DEFAULT_ROUTINES_ARTIFACT_ID);
  File[] pomFiles=codeProject.getProject().getLocation().toFile().listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(MavenConstants.POM_NAME + '_') && name.endsWith(MavenConstants.XML_EXT) && !name.equals(routinesPomFileName);
    }
  }
);
  deleteFiles(pomFiles);
  IFolder assembliesFolder=codeProject.getAssembliesFolder();
  if (assembliesFolder != null && assembliesFolder.exists()) {
    File[] assembliesFiles=assembliesFolder.getLocation().toFile().listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith(MavenConstants.ASSEMBLY_NAME + '_') && name.endsWith(MavenConstants.XML_EXT);
      }
    }
);
    deleteFiles(assembliesFiles);
  }
  FilesUtils.deleteFile(codeProject.getOutputFolder().getParent().getLocation().toFile(),true);
  IFile projectPomFile=codeProject.getProjectPom();
  File pPomFile=projectPomFile.getLocation().toFile();
  if (pPomFile.exists()) {
    MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
    Model projModel=mavenModelManager.readMavenModel(projectPomFile);
    List<String> modules=projModel.getModules();
    if (modules != null) {
      modules.clear();
    }
    final Model routinesModel=PomUtil.getRoutinesTempalteModel();
    modules.add(PomUtil.getPomFileName(routinesModel.getArtifactId()));
    CreateMavenRoutinePom.addDependencies(projModel);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
      ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      List<String> jarsNeedRetrieve=new ArrayList<String>();
      for (      Dependency d : projModel.getDependencies()) {
        if (d.getScope() != null && d.getScope().equals(""String_Node_Str"")) {
          jarsNeedRetrieve.add(d.getArtifactId() + FileExtensions.JAR_FILE_SUFFIX);
        }
      }
      libManagerService.retrieve(jarsNeedRetrieve,codeProject.getLibFolder().getLocation().toPortableString(),false);
    }
    PomUtil.savePom(monitor,projModel,projectPomFile);
  }
  codeProject.buildModules(MavenConstants.GOAL_COMPILE,null);
}",0.8203728967712597
126266,"@Override public String getLabel(){
  if (""String_Node_Str"".equals(function.getCategory())) {
    return function.getName();
  }
  return function.getCategory() + ""String_Node_Str"" + function.getName();
}","@Override public String getLabel(){
  return function.getFunctionString();
}",0.5357142857142857
126267,"/** 
 * DOC ggu Comment method ""updateDependencies"". add the job Needed Libraries for current model.
 * @param model the job of pom model
 * @param fresh if true, will remove old dependencies, else will add the new dependencies in the head.
 * @return if there are some changes, will return true
 */
public boolean updateDependencies(IProgressMonitor progressMonitor,Model model,List<Dependency> neededDependencies,boolean fresh) throws ProcessorException {
  boolean changed=false;
  try {
    List<Dependency> existedDependencies=model.getDependencies();
    if (existedDependencies == null) {
      existedDependencies=new ArrayList<Dependency>();
      model.setDependencies(existedDependencies);
    }
    existedDependencies.clear();
    Map<String,Dependency> existedDependenciesMap=new LinkedHashMap<String,Dependency>();
    if (!fresh) {
      for (      Dependency dependency : existedDependencies) {
        if (!PomUtil.isAvailable(dependency)) {
          continue;
        }
        existedDependenciesMap.put(PomUtil.generateMvnUrl(dependency),dependency);
      }
    }
    for (    Dependency dependency : neededDependencies) {
      Dependency cloneDependency=dependency.clone();
      existedDependencies.add(cloneDependency);
      if (fresh) {
        changed=true;
      }
 else {
        String mvnUrl=PomUtil.generateMvnUrl(dependency);
        Dependency existedDependency=existedDependenciesMap.remove(mvnUrl);
        if (existedDependency != null) {
        }
 else {
          changed=true;
        }
      }
    }
    if (!fresh) {
      existedDependencies.addAll(existedDependenciesMap.values());
    }
  }
 catch (  Exception e) {
    throw new ProcessorException(e);
  }
  return changed;
}","/** 
 * DOC ggu Comment method ""updateDependencies"". add the job Needed Libraries for current model.
 * @param model the job of pom model
 * @param fresh if true, will remove old dependencies, else will add the new dependencies in the head.
 * @return if there are some changes, will return true
 */
public boolean updateDependencies(IProgressMonitor progressMonitor,Model model,List<Dependency> neededDependencies,boolean fresh) throws ProcessorException {
  boolean changed=false;
  try {
    List<Dependency> existedDependencies=model.getDependencies();
    if (existedDependencies == null) {
      existedDependencies=new ArrayList<Dependency>();
      model.setDependencies(existedDependencies);
    }
    Map<String,Dependency> existedDependenciesMap=new LinkedHashMap<String,Dependency>();
    if (!fresh) {
      for (      Dependency dependency : existedDependencies) {
        if (!PomUtil.isAvailable(dependency)) {
          continue;
        }
        existedDependenciesMap.put(PomUtil.generateMvnUrl(dependency),dependency);
      }
    }
    existedDependencies.clear();
    for (    Dependency dependency : neededDependencies) {
      Dependency cloneDependency=dependency.clone();
      existedDependencies.add(cloneDependency);
      if (fresh) {
        changed=true;
      }
 else {
        String mvnUrl=PomUtil.generateMvnUrl(dependency);
        Dependency existedDependency=existedDependenciesMap.remove(mvnUrl);
        if (existedDependency != null) {
        }
 else {
          changed=true;
        }
      }
    }
    if (!fresh) {
      existedDependencies.addAll(existedDependenciesMap.values());
    }
  }
 catch (  Exception e) {
    throw new ProcessorException(e);
  }
  return changed;
}",0.9808695652173912
126268,"/** 
 * after create operation, can do something, like add some natures.
 */
protected void afterCreate(IProgressMonitor monitor,IResource res) throws Exception {
  IProject p=res.getProject();
  if (!p.isOpen()) {
    p.open(monitor);
  }
  covertJavaProjectToPom(monitor,p);
  changeClasspath(monitor,p);
}","/** 
 * after create operation, can do something, like add some natures.
 */
protected void afterCreate(IProgressMonitor monitor,IResource res) throws Exception {
  IProject p=res.getProject();
  if (!p.isOpen()) {
    p.open(monitor);
  }
  convertJavaProjectToPom(monitor,p);
  changeClasspath(monitor,p);
}",0.9983792544570502
126269,"public static String[] getCommandLine(String targetPlatform,boolean externalUse,IProcess currentProcess,Property property,String contextName,boolean needContext,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,property,currentContext);
  processor.setTargetPlatform(targetPlatform);
  return processor.getCommandLine(needContext,externalUse,statisticPort,tracePort,codeOptions);
}","public static String[] getCommandLine(boolean oldBuildJob,String targetPlatform,boolean externalUse,IProcess currentProcess,Property property,String contextName,boolean needContext,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  if (currentProcess == null) {
    return new String[]{};
  }
  Property curProperty=property;
  if (curProperty == null && currentProcess instanceof IProcess2) {
    curProperty=((IProcess2)currentProcess).getProperty();
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,curProperty,currentContext);
  processor.setTargetPlatform(targetPlatform);
  processor.setOldBuildJob(oldBuildJob);
  return processor.getCommandLine(needContext,externalUse,statisticPort,tracePort,codeOptions);
}",0.8375706214689266
126270,"@SuppressWarnings(""String_Node_Str"") public ResourcesManager doUnify(boolean interruptable) throws TarException, ZipException, FileNotFoundException, IOException {
  final File originalFile=getOriginalFileResouce();
  Assert.isNotNull(originalFile);
  final String absolutePath=originalFile.getAbsolutePath();
  if (!originalFile.exists()) {
    throw new FileNotFoundException(absolutePath);
  }
  final File tmpWorkFolder=getTmpResWorkFolder();
  if (originalFile.isDirectory()) {
    try {
      FileCopyUtils.copyFolder(originalFile,tmpWorkFolder,interruptable);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (originalFile.isFile()) {
    this.isArchiveFile=true;
    ProviderManager archiveProviderManager=null;
    ILeveledImportStructureProvider importProvider=null;
    if (ArchiveFileManipulations.isTarFile(absolutePath)) {
      TarFile tarFile=new TarFile(originalFile);
      importProvider=new TarLeveledStructureProvider(tarFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
 else     if (ArchiveFileManipulations.isZipFile(absolutePath)) {
      ZipFile zipFile=new ZipFile(originalFile);
      importProvider=new ZipLeveledStructureProvider(zipFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
    if (archiveProviderManager != null && importProvider != null) {
      if (!archiveProviderManager.collectPath2Object(importProvider.getRoot())) {
        throw new IOException(""String_Node_Str"");
      }
      try {
        decompress(archiveProviderManager,tmpWorkFolder,interruptable);
      }
  finally {
        if (archiveProviderManager != null) {
          archiveProviderManager.closeResource();
        }
      }
    }
  }
  collectPath2Object(tmpWorkFolder,interruptable);
  return this;
}","@SuppressWarnings(""String_Node_Str"") public ResourcesManager doUnify(boolean interruptable) throws TarException, ZipException, FileNotFoundException, IOException {
  final File originalFile=getOriginalFileResouce();
  Assert.isNotNull(originalFile);
  final String absolutePath=originalFile.getAbsolutePath();
  if (!originalFile.exists()) {
    throw new FileNotFoundException(absolutePath);
  }
  final File tmpWorkFolder=getTmpResWorkFolder();
  if (originalFile.isDirectory()) {
    try {
      FileCopyUtils.copyFolder(originalFile,tmpWorkFolder,interruptable);
    }
 catch (    Throwable e) {
      if (e instanceof InterruptedException && interruptable) {
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
 else   if (originalFile.isFile()) {
    this.isArchiveFile=true;
    ProviderManager archiveProviderManager=null;
    ILeveledImportStructureProvider importProvider=null;
    if (ArchiveFileManipulations.isTarFile(absolutePath)) {
      TarFile tarFile=new TarFile(originalFile);
      importProvider=new TarLeveledStructureProvider(tarFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
 else     if (ArchiveFileManipulations.isZipFile(absolutePath)) {
      ZipFile zipFile=new ZipFile(originalFile);
      importProvider=new ZipLeveledStructureProvider(zipFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
    if (archiveProviderManager != null && importProvider != null) {
      if (!archiveProviderManager.collectPath2Object(importProvider.getRoot())) {
        throw new IOException(""String_Node_Str"");
      }
      try {
        decompress(archiveProviderManager,tmpWorkFolder,interruptable);
      }
  finally {
        if (archiveProviderManager != null) {
          archiveProviderManager.closeResource();
        }
      }
    }
  }
  collectPath2Object(tmpWorkFolder,interruptable);
  return this;
}",0.9768160741885626
126271,"private void decompress(ResourcesManager srcManager,File destRootFolder,boolean interrupable) throws IOException {
  Set<IPath> paths=srcManager.getPaths();
  Thread currentThread=Thread.currentThread();
  try {
    for (    IPath path : paths) {
      if (interrupable && currentThread.isInterrupted()) {
        throw new InterruptedException();
      }
      InputStream bis=srcManager.getStream(path);
      File destFile=new File(destRootFolder,path.toPortableString());
      File parentFile=destFile.getParentFile();
      if (!parentFile.exists()) {
        parentFile.mkdirs();
      }
      BufferedOutputStream bos=null;
      try {
        bos=new BufferedOutputStream(new FileOutputStream(destFile),BUFFER_SIZE);
        int count;
        byte data[]=new byte[BUFFER_SIZE];
        while ((count=bis.read(data,0,BUFFER_SIZE)) != -1) {
          if (interrupable && currentThread.isInterrupted()) {
            break;
          }
          bos.write(data,0,count);
        }
      }
  finally {
        if (bos != null) {
          bos.flush();
          bos.close();
        }
        bis.close();
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void decompress(ResourcesManager srcManager,File destRootFolder,boolean interrupable) throws IOException {
  Set<IPath> paths=srcManager.getPaths();
  Thread currentThread=Thread.currentThread();
  try {
    for (    IPath path : paths) {
      if (interrupable && currentThread.isInterrupted()) {
        throw new InterruptedException();
      }
      InputStream bis=srcManager.getStream(path);
      File destFile=new File(destRootFolder,path.toPortableString());
      File parentFile=destFile.getParentFile();
      if (!parentFile.exists()) {
        parentFile.mkdirs();
      }
      BufferedOutputStream bos=null;
      try {
        bos=new BufferedOutputStream(new FileOutputStream(destFile),BUFFER_SIZE);
        int count;
        byte data[]=new byte[BUFFER_SIZE];
        while ((count=bis.read(data,0,BUFFER_SIZE)) != -1) {
          if (interrupable && currentThread.isInterrupted()) {
            break;
          }
          bos.write(data,0,count);
        }
      }
  finally {
        if (bos != null) {
          bos.flush();
          bos.close();
        }
        bis.close();
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof InterruptedException && interrupable) {
    }
 else {
      ExceptionHandler.process(e);
    }
  }
}",0.9663831510733092
126272,"@Override public Set<ItemReferenceBean> checkItemReferenceBeans(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,IRepositoryViewObject object){
  Item nodeItem=object.getProperty().getItem();
  boolean needCheckJobIfUsedInProcess=false;
  if (nodeItem instanceof ProcessItem) {
    needCheckJobIfUsedInProcess=true;
  }
  Set<ItemReferenceBean> list=new HashSet<ItemReferenceBean>();
  if (needCheckJobIfUsedInProcess) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      ERepositoryObjectType type=object.getRepositoryObjectType();
      boolean isItemDeleted=factory.getStatus(object) == ERepositoryStatus.DELETED;
      Item item=property.getItem();
      if (!(item instanceof ProcessItem)) {
        return list;
      }
      List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsHaveRelationWith(property.getId());
      if (relations.isEmpty()) {
        return list;
      }
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS,true);
          deleteActionCache.setProcessList(processes);
          for (          IRepositoryViewObject process : deleteActionCache.getProcessList()) {
            Property property2=process.getProperty();
            if (isOpenedItem(property2,deleteActionCache.getOpenProcessMap())) {
              continue;
            }
            Relation current=new Relation();
            current.setId(property2.getId());
            current.setType(RelationshipItemBuilder.JOB_RELATION);
            current.setVersion(property2.getVersion());
            if (!relations.contains(current)) {
              continue;
            }
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            String path=item2.getState().getPath();
            boolean found=false;
            ItemReferenceBean bean=new ItemReferenceBean();
            bean.setItemName(label);
            bean.setItemVersion(version);
            bean.setItemType(type);
            bean.setItemDeleted(isItemDeleted);
            bean.setReferenceItemName(property2.getLabel());
            bean.setReferenceItemVersion(property2.getVersion());
            bean.setReferenceItemType(process.getRepositoryObjectType());
            bean.setReferenceItemPath(path);
            bean.setReferenceProjectName(refP.getLabel());
            bean.setReferenceItemDeleted(isDelete);
            for (            ItemReferenceBean b : list) {
              if (b.equals(bean)) {
                found=true;
                b.addNodeNum();
                break;
              }
            }
            if (!found) {
              list.add(bean);
            }
          }
        }
        for (        IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
          for (          INode node : openedProcess.getGraphicalNodes()) {
            boolean equals=false;
            IElementParameter processTypeParam=node.getElementParameter(PROCESS_TYPE_PROCESS);
            if (processTypeParam != null) {
              IElementParameter isUseDynamicJob=node.getElementParameter(USE_DYNAMIC_JOB);
              if (isUseDynamicJob != null && (Boolean)isUseDynamicJob.getValue()) {
                String[] jobsID=((String)processTypeParam.getValue()).split(""String_Node_Str"");
                for (                String jobID : jobsID) {
                  if (property.getId().equals(jobID)) {
                    equals=true;
                    break;
                  }
                }
              }
 else               if (property.getId().equals(processTypeParam.getValue())) {
                equals=true;
              }
            }
            boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
            Property property2=openedProcess.getProperty();
            Item item2=property2.getItem();
            String path=item2.getState().getPath();
            if (equals) {
              boolean found=false;
              ItemReferenceBean bean=new ItemReferenceBean();
              bean.setItemName(label);
              bean.setItemVersion(version);
              bean.setItemType(type);
              bean.setItemDeleted(isItemDeleted);
              bean.setReferenceItemName(property2.getLabel());
              bean.setReferenceItemVersion(property2.getVersion());
              bean.setReferenceItemType(ERepositoryObjectType.getItemType(item2));
              bean.setReferenceItemPath(path);
              bean.setReferenceProjectName(ProjectManager.getInstance().getProject(property2).getLabel());
              bean.setReferenceItemDeleted(isDelete);
              for (              ItemReferenceBean b : list) {
                if (b.equals(bean)) {
                  found=true;
                  b.addNodeNum();
                  break;
                }
              }
              if (!found) {
                list.add(bean);
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  Iterator<ItemReferenceBean> it=list.iterator();
  while (it.hasNext()) {
    ItemReferenceBean bean=it.next();
    if ((!bean.isItemDeleted() && bean.isReferenceItemDeleted()) || (bean.isItemDeleted() && bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true)) || (!bean.isItemDeleted() && !bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true))) {
      it.remove();
    }
  }
  return list;
}","@Override public Set<ItemReferenceBean> checkItemReferenceBeans(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,IRepositoryViewObject object){
  Item nodeItem=object.getProperty().getItem();
  boolean needCheckJobIfUsedInProcess=false;
  if (nodeItem instanceof ProcessItem) {
    needCheckJobIfUsedInProcess=true;
  }
  Set<ItemReferenceBean> list=new HashSet<ItemReferenceBean>();
  if (needCheckJobIfUsedInProcess) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      ERepositoryObjectType type=object.getRepositoryObjectType();
      boolean isItemDeleted=factory.getStatus(object) == ERepositoryStatus.DELETED;
      Item item=property.getItem();
      if (!(item instanceof ProcessItem)) {
        return list;
      }
      List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsHaveRelationWith(property.getId());
      if (relations.isEmpty()) {
        return list;
      }
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> processes=new LinkedList<IRepositoryViewObject>();
          List<ERepositoryObjectType> allTypesOfProcess=ERepositoryObjectType.getAllTypesOfProcess();
          Iterator<ERepositoryObjectType> processIter=allTypesOfProcess.iterator();
          while (processIter.hasNext()) {
            ERepositoryObjectType process=processIter.next();
            List<IRepositoryViewObject> repositoryViewObjectList=factory.getAll(refP,process,true);
            if (repositoryViewObjectList != null) {
              processes.addAll(repositoryViewObjectList);
            }
          }
          deleteActionCache.setProcessList(processes);
          Iterator<IRepositoryViewObject> processObjectIter=deleteActionCache.getProcessList().iterator();
          while (processObjectIter.hasNext()) {
            IRepositoryViewObject process=processObjectIter.next();
            Property property2=process.getProperty();
            if (isOpenedItem(property2,deleteActionCache.getOpenProcessMap())) {
              continue;
            }
            Relation current=new Relation();
            current.setId(property2.getId());
            current.setType(RelationshipItemBuilder.JOB_RELATION);
            current.setVersion(property2.getVersion());
            if (!relations.contains(current)) {
              continue;
            }
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            String path=item2.getState().getPath();
            boolean found=false;
            ItemReferenceBean bean=new ItemReferenceBean();
            bean.setItemName(label);
            bean.setItemVersion(version);
            bean.setItemType(type);
            bean.setItemDeleted(isItemDeleted);
            bean.setReferenceItemName(property2.getLabel());
            bean.setReferenceItemVersion(property2.getVersion());
            bean.setReferenceItemType(process.getRepositoryObjectType());
            bean.setReferenceItemPath(path);
            bean.setReferenceProjectName(refP.getLabel());
            bean.setReferenceItemDeleted(isDelete);
            for (            ItemReferenceBean b : list) {
              if (b.equals(bean)) {
                found=true;
                b.addNodeNum();
                break;
              }
            }
            if (!found) {
              list.add(bean);
            }
          }
        }
        for (        IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
          for (          INode node : openedProcess.getGraphicalNodes()) {
            boolean equals=false;
            IElementParameter processTypeParam=node.getElementParameter(PROCESS_TYPE_PROCESS);
            if (processTypeParam != null) {
              IElementParameter isUseDynamicJob=node.getElementParameter(USE_DYNAMIC_JOB);
              if (isUseDynamicJob != null && (Boolean)isUseDynamicJob.getValue()) {
                String[] jobsID=((String)processTypeParam.getValue()).split(""String_Node_Str"");
                for (                String jobID : jobsID) {
                  if (property.getId().equals(jobID)) {
                    equals=true;
                    break;
                  }
                }
              }
 else               if (property.getId().equals(processTypeParam.getValue())) {
                equals=true;
              }
            }
            boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
            Property property2=openedProcess.getProperty();
            Item item2=property2.getItem();
            String path=item2.getState().getPath();
            if (equals) {
              boolean found=false;
              ItemReferenceBean bean=new ItemReferenceBean();
              bean.setItemName(label);
              bean.setItemVersion(version);
              bean.setItemType(type);
              bean.setItemDeleted(isItemDeleted);
              bean.setReferenceItemName(property2.getLabel());
              bean.setReferenceItemVersion(property2.getVersion());
              bean.setReferenceItemType(ERepositoryObjectType.getItemType(item2));
              bean.setReferenceItemPath(path);
              bean.setReferenceProjectName(ProjectManager.getInstance().getProject(property2).getLabel());
              bean.setReferenceItemDeleted(isDelete);
              for (              ItemReferenceBean b : list) {
                if (b.equals(bean)) {
                  found=true;
                  b.addNodeNum();
                  break;
                }
              }
              if (!found) {
                list.add(bean);
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  Iterator<ItemReferenceBean> it=list.iterator();
  while (it.hasNext()) {
    ItemReferenceBean bean=it.next();
    if ((!bean.isItemDeleted() && bean.isReferenceItemDeleted()) || (bean.isItemDeleted() && bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true)) || (!bean.isItemDeleted() && !bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true))) {
      it.remove();
    }
  }
  return list;
}",0.9310616816532576
126273,"public static void savePom(IProgressMonitor monitor,Model model,IFile pomFile) throws Exception {
  pomFile.delete(true,monitor);
  MavenPlugin.getMavenModelManager().createMavenModel(pomFile,model);
}","public static void savePom(IProgressMonitor monitor,Model model,IFile pomFile) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  pomFile.delete(true,monitor);
  MavenPlugin.getMavenModelManager().createMavenModel(pomFile,model);
}",0.8553191489361702
126274,"@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  boolean modified=false;
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
  for (  JobInfo child : clonedChildrenJobInfors) {
    modified=true;
    String jobClassPackageFolder=null;
    if (child.getProcessItem() != null) {
      jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
    }
 else {
      String projectName=null;
      String jobId=child.getJobId();
      if (jobId != null) {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
        if (lastVersion != null) {
          Property property=lastVersion.getProperty();
          if (property != null) {
            Project project=ProjectManager.getInstance().getProject(property.getItem());
            projectName=project.getTechnicalLabel();
          }
        }
      }
      if (projectName == null) {
        projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
      }
      jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
    }
    childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));
    childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
  }
  if (modified) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
  }
  if (modified) {
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
  }
}","@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  boolean modified=false;
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
  for (  JobInfo child : clonedChildrenJobInfors) {
    modified=true;
    String jobClassPackageFolder=null;
    if (child.getProcessItem() != null) {
      jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
    }
 else {
      String projectName=null;
      String jobId=child.getJobId();
      if (jobId != null) {
        IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
        if (lastVersion != null) {
          Property property=lastVersion.getProperty();
          if (property != null) {
            Project project=ProjectManager.getInstance().getProject(property.getItem());
            projectName=project.getTechnicalLabel();
          }
        }
      }
      if (projectName == null) {
        projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
      }
      jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
    }
    childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName()));
    childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
  }
  if (modified) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
  }
  if (modified) {
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    for (    String childPomFile : childrenPomsIncludes) {
      IFile childPom=assemblyFile.getProject().getFile(childPomFile);
      Model childModel=MODEL_MANAGER.readMavenModel(childPom);
      List<Plugin> childPlugins=new ArrayList<Plugin>(childModel.getBuild().getPlugins());
      Iterator<Plugin> childIterator=childPlugins.iterator();
      while (childIterator.hasNext()) {
        Plugin p=childIterator.next();
        if (p.getArtifactId().equals(""String_Node_Str"")) {
          childIterator.remove();
        }
      }
      childModel.getBuild().setPlugins(childPlugins);
      PomUtil.savePom(null,childModel,childPom);
    }
  }
}",0.9091165678803274
126275,"@Override public boolean isDirty(){
  ISaveablePart currentEditorSavablePart=getCurrentEditorSavablePart();
  return currentEditorSavablePart != null ? currentEditorSavablePart.isDirty() : false;
}","@Override public boolean isDirty(){
  if (!isShouldCheckRepositoryDirty()) {
    return false;
  }
  ISaveablePart currentEditorSavablePart=getCurrentEditorSavablePart();
  return currentEditorSavablePart != null ? currentEditorSavablePart.isDirty() : false;
}",0.862144420131291
126276,"/** 
 * Generate the avro file associated to the current MetadataTable.
 * @param connectionName The name of the current connection. This parameter will be use to generate the file name.
 */
public void generateAvroFile(String connectionName){
  this.connectionTypeName=connectionName + ""String_Node_Str"";
  schema=generateAvroSchema(connectionName,connectionTypeName);
  try {
    SpecificCompiler compiler=new SpecificCompiler(schema);
    compiler.setTemplateDir(AVRO_TEMPLATE_DIR);
    compiler.setFieldVisibility(FieldVisibility.PUBLIC);
    compiler.setStringType(StringType.String);
    compiler.compileToDestination(null,new File(filePath));
    schema=generateAvroSchema(connectionName,connectionTypeName + ""String_Node_Str"");
    compiler=new SpecificCompiler(schema);
    compiler.setTemplateDir(AVRO_TEMPLATE_BEAN_DIR);
    compiler.setFieldVisibility(FieldVisibility.PUBLIC);
    compiler.setStringType(StringType.String);
    compiler.compileToDestination(null,new File(filePath));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Generate the avro file associated to the current MetadataTable.
 * @param connectionName The name of the current connection. This parameter will be use to generate the file name.
 */
public void generateAvroFile(String connectionName){
  this.connectionTypeName=connectionName + ""String_Node_Str"";
  schema=generateAvroSchema(connectionName,connectionTypeName);
  ClassLoader oldClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(CoreRuntimePlugin.class.getClassLoader());
  try {
    SpecificCompiler compiler=new SpecificCompiler(schema);
    compiler.setTemplateDir(AVRO_TEMPLATE_DIR);
    compiler.setFieldVisibility(FieldVisibility.PUBLIC);
    compiler.setStringType(StringType.String);
    compiler.compileToDestination(null,new File(filePath));
    schema=generateAvroSchema(connectionName,connectionTypeName + ""String_Node_Str"");
    compiler=new SpecificCompiler(schema);
    compiler.setTemplateDir(AVRO_TEMPLATE_BEAN_DIR);
    compiler.setFieldVisibility(FieldVisibility.PUBLIC);
    compiler.setStringType(StringType.String);
    compiler.compileToDestination(null,new File(filePath));
  }
 catch (  Throwable e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoader);
  }
}",0.8733108108108109
126277,"/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem importItem,boolean overwrite){
  try {
    Item item=importItem.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=importItem.getProperty();
      if (property != null) {
        if (isSameName(importItem,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        importItem.setState(State.ID_EXISTED);
        importItem.setExistingItemWithSameId(itemWithSameIdObj);
      }
    }
 else {
      if (idAvailable) {
        importItem.setState(State.NAME_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              importItem.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        importItem.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (!overwrite) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && importItem.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(importItem)) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + importItem.getPath(),e);
  }
  return true;
}","/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem importItem,boolean overwrite){
  try {
    Item item=importItem.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    List<IRepositoryViewObject> repViewObjectList=null;
    List<ERepositoryObjectType> allTypesOfProcess=ERepositoryObjectType.getAllTypesOfProcess();
    if (allTypesOfProcess.contains(itemType)) {
      for (      ERepositoryObjectType curProcessType : allTypesOfProcess) {
        repObjectcache.initialize(curProcessType);
      }
      Map<ERepositoryObjectType,List<IRepositoryViewObject>> itemsMap=repObjectcache.getItemsFromRepository();
      repViewObjectList=new LinkedList<IRepositoryViewObject>();
      for (      ERepositoryObjectType curProcessType : allTypesOfProcess) {
        List<IRepositoryViewObject> itemList=itemsMap.get(curProcessType);
        if (itemList != null) {
          repViewObjectList.addAll(itemList);
        }
      }
    }
 else {
      repObjectcache.initialize(itemType);
      repViewObjectList=repObjectcache.getItemsFromRepository().get(itemType);
    }
    Iterator<IRepositoryViewObject> repoViewObjectIter=repViewObjectList.iterator();
    boolean isSameRepositoryType=true;
    while (repoViewObjectIter.hasNext()) {
      IRepositoryViewObject current=repoViewObjectIter.next();
      final Property property=importItem.getProperty();
      if (property != null) {
        if (isSameName(importItem,current)) {
          itemWithSameNameObj=current;
          if (importItem.getRepositoryType() == current.getRepositoryObjectType()) {
            isSameRepositoryType=true;
          }
 else {
            isSameRepositoryType=false;
          }
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        importItem.setState(State.ID_EXISTED);
        importItem.setExistingItemWithSameId(itemWithSameIdObj);
      }
    }
 else {
      if (idAvailable) {
        importItem.setState(State.NAME_EXISTED);
        if (overwrite && isSameRepositoryType) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              importItem.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        importItem.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (isSameRepositoryType) {
        if (!overwrite) {
          importItem.addError(Messages.getString(""String_Node_Str""));
        }
      }
 else {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && importItem.getState() == State.NAME_AND_ID_EXISTED && isSameRepositoryType) {
      if (checkIfLocked(importItem)) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + importItem.getPath(),e);
  }
  return true;
}",0.6866860732342577
126278,"@Override public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (!(item instanceof SalesforceSchemaConnectionItem)) {
    return false;
  }
  if (ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA == type) {
    String componentName=component.getName();
    if (componentName != null) {
switch (component.getName()) {
case COMPONENT_T_SALSEFORCE_CONNECTION:
case COMPONENT_T_SALSEFORCE_WAVE_BULK_EXEC:
case COMPONENT_T_SALSEFORCE_WAVE_OUTPUT_BULK_EXEC:
        return true;
    }
  }
}
 else if (ERepositoryObjectType.METADATA_SALESFORCE_MODULE == type || ERepositoryObjectType.METADATA_CON_TABLE == type || ERepositoryObjectType.METADATA_CON_COLUMN == type) {
  String componentName=component.getName();
  if (componentName != null) {
switch (component.getName()) {
case COMPONENT_T_SALSEFORCE_INPUT:
case COMPONENT_T_SALSEFORCE_OUTPUT:
      return true;
  }
}
}
return false;
}","@Override public boolean valid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (!(item instanceof SalesforceSchemaConnectionItem)) {
    return false;
  }
  if (ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA == type) {
    String componentName=component.getName();
    if (COMPONENT_T_SALSEFORCE_CONNECTION.equals(componentName) || COMPONENT_T_SALSEFORCE_WAVE_BULK_EXEC.equals(componentName) || COMPONENT_T_SALSEFORCE_WAVE_OUTPUT_BULK_EXEC.equals(componentName)) {
      return true;
    }
  }
 else   if (ERepositoryObjectType.METADATA_SALESFORCE_MODULE == type || ERepositoryObjectType.METADATA_CON_TABLE == type || ERepositoryObjectType.METADATA_CON_COLUMN == type) {
    String componentName=component.getName();
    if (COMPONENT_T_SALSEFORCE_INPUT.equals(componentName) || COMPONENT_T_SALSEFORCE_OUTPUT.equals(componentName)) {
      return true;
    }
  }
  return false;
}",0.8299319727891157
126279,"@Override public boolean except(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (!(item instanceof SalesforceSchemaConnectionItem)) {
    return false;
  }
  if (ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA == type) {
    String componentName=component.getName();
    if (componentName != null) {
switch (component.getName()) {
case COMPONENT_T_SALSEFORCE_INPUT:
case COMPONENT_T_SALSEFORCE_OUTPUT:
        return true;
    }
  }
}
 else if (ERepositoryObjectType.METADATA_SALESFORCE_MODULE == type || ERepositoryObjectType.METADATA_CON_TABLE == type || ERepositoryObjectType.METADATA_CON_COLUMN == type) {
  String componentName=component.getName();
  if (componentName != null) {
switch (component.getName()) {
case COMPONENT_T_SALSEFORCE_CONNECTION:
case COMPONENT_T_SALSEFORCE_WAVE_BULK_EXEC:
case COMPONENT_T_SALSEFORCE_WAVE_OUTPUT_BULK_EXEC:
      return true;
  }
}
}
return false;
}","@Override public boolean except(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (!(item instanceof SalesforceSchemaConnectionItem)) {
    return false;
  }
  if (ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA == type) {
    String componentName=component.getName();
    if (COMPONENT_T_SALSEFORCE_INPUT.equals(componentName) || COMPONENT_T_SALSEFORCE_OUTPUT.equals(componentName)) {
      return true;
    }
  }
 else   if (ERepositoryObjectType.METADATA_SALESFORCE_MODULE == type || ERepositoryObjectType.METADATA_CON_TABLE == type || ERepositoryObjectType.METADATA_CON_COLUMN == type) {
    String componentName=component.getName();
    if (COMPONENT_T_SALSEFORCE_CONNECTION.equals(componentName) || COMPONENT_T_SALSEFORCE_WAVE_BULK_EXEC.equals(componentName) || COMPONENT_T_SALSEFORCE_WAVE_OUTPUT_BULK_EXEC.equals(componentName)) {
      return true;
    }
  }
  return false;
}",0.8301097752221641
126280,"protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing.replace(""String_Node_Str"",""String_Node_Str""));
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}","protected void editItem(ISelection sel){
  IStructuredSelection selection=(IStructuredSelection)sel;
  String existing=(String)selection.getFirstElement();
  String value=getExistingInputObject(existing);
  if (value != null) {
    int indexOf=list.indexOf(existing);
    list.remove(existing);
    list.add(indexOf,value);
    viewer.refresh();
  }
}",0.6398929049531459
126281,"protected void doLoadDefault(){
  if (viewer != null) {
    list.clear();
    String s=getPreferenceStore().getDefaultString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}","@Override protected void doLoadDefault(){
  if (viewer != null) {
    list.clear();
    String s=getPreferenceStore().getDefaultString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}",0.9844236760124612
126282,"protected void doFillIntoGrid(Composite parent,int numColumns){
  Control control=getLabelControl(parent);
  GridData gd=new GridData();
  gd.horizontalSpan=numColumns;
  control.setLayoutData(gd);
  viewer=getTableControl(parent);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.verticalAlignment=GridData.FILL;
  gd.horizontalSpan=numColumns - 1;
  gd.grabExcessHorizontalSpace=true;
  viewer.getTable().setLayoutData(gd);
  buttonBox=getButtonBoxControl(parent);
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  buttonBox.setLayoutData(gd);
}","@Override protected void doFillIntoGrid(Composite parent,int numColumns){
  Control control=getLabelControl(parent);
  GridData gd=new GridData();
  gd.horizontalSpan=numColumns;
  control.setLayoutData(gd);
  viewer=getTableControl(parent);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.verticalAlignment=GridData.FILL;
  gd.horizontalSpan=numColumns - 1;
  gd.grabExcessHorizontalSpace=true;
  viewer.getTable().setLayoutData(gd);
  buttonBox=getButtonBoxControl(parent);
  gd=new GridData();
  gd.verticalAlignment=GridData.BEGINNING;
  buttonBox.setLayoutData(gd);
}",0.9912126537785588
126283,"public int getNumberOfControls(){
  return 2;
}","@Override public int getNumberOfControls(){
  return 2;
}",0.903846153846154
126284,"public void widgetSelected(SelectionEvent event){
  Widget widget=event.widget;
  if (widget == addButton) {
    addPressed();
  }
 else   if (widget == removeButton) {
    removePressed();
  }
 else   if (widget == upButton) {
    upPressed();
  }
 else   if (widget == downButton) {
    downPressed();
  }
}","@Override public void widgetSelected(SelectionEvent event){
  Widget widget=event.widget;
  if (widget == addButton) {
    addPressed();
  }
 else   if (widget == removeButton) {
    removePressed();
  }
 else   if (widget == upButton) {
    upPressed();
  }
 else   if (widget == downButton) {
    downPressed();
  }
}",0.9840764331210192
126285,"public void setFocus(){
  if (viewer != null) {
    viewer.getTable().setFocus();
  }
}","@Override public void setFocus(){
  if (viewer != null) {
    viewer.getTable().setFocus();
  }
}",0.9456521739130436
126286,"/** 
 * Creates a selection listener.
 */
public void createSelectionListener(){
  selectionListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      Widget widget=event.widget;
      if (widget == addButton) {
        addPressed();
      }
 else       if (widget == removeButton) {
        removePressed();
      }
 else       if (widget == upButton) {
        upPressed();
      }
 else       if (widget == downButton) {
        downPressed();
      }
    }
  }
;
}","/** 
 * Creates a selection listener.
 */
public void createSelectionListener(){
  selectionListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      Widget widget=event.widget;
      if (widget == addButton) {
        addPressed();
      }
 else       if (widget == removeButton) {
        removePressed();
      }
 else       if (widget == upButton) {
        upPressed();
      }
 else       if (widget == downButton) {
        downPressed();
      }
    }
  }
;
}",0.9902152641878668
126287,"public void setEnabled(boolean enabled,Composite parent){
  super.setEnabled(enabled,parent);
  setControlEnable(getTableControl(parent).getTable(),enabled);
  setControlEnable(addButton,enabled);
  setControlEnable(removeButton,enabled);
  setControlEnable(upButton,enabled);
  setControlEnable(downButton,enabled);
}","@Override public void setEnabled(boolean enabled,Composite parent){
  super.setEnabled(enabled,parent);
  setControlEnable(getTableControl(parent).getTable(),enabled);
  setControlEnable(addButton,enabled);
  setControlEnable(removeButton,enabled);
  setControlEnable(upButton,enabled);
  setControlEnable(downButton,enabled);
}",0.9845201238390092
126288,"protected void doLoad(){
  if (viewer != null) {
    String s=getPreferenceStore().getString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}","@Override protected void doLoad(){
  if (viewer != null) {
    String s=getPreferenceStore().getString(getPreferenceName());
    if (s != null && !""String_Node_Str"".equals(s)) {
      for (      String tmp : readString(s)) {
        list.add(tmp);
      }
    }
    viewer.setInput(list);
  }
}",0.9826989619377162
126289,"protected void doStore(){
  String s=writeString(list);
  if (s != null) {
    getPreferenceStore().setValue(getPreferenceName(),s);
  }
}","@Override protected void doStore(){
  String s=writeString(list);
  if (s != null) {
    getPreferenceStore().setValue(getPreferenceName(),s);
  }
}",0.965034965034965
126290,"protected void adjustForNumColumns(int numColumns){
  Control control=getLabelControl();
  ((GridData)control.getLayoutData()).horizontalSpan=numColumns;
  ((GridData)viewer.getTable().getLayoutData()).horizontalSpan=numColumns - 1;
}","@Override protected void adjustForNumColumns(int numColumns){
  Control control=getLabelControl();
  ((GridData)control.getLayoutData()).horizontalSpan=numColumns;
  ((GridData)viewer.getTable().getLayoutData()).horizontalSpan=numColumns - 1;
}",0.9790794979079498
126291,"private void parseUrl(String url){
  if (url == null)   return;
  urlInst=null;
  try {
    urlInst=new URL(url);
  }
 catch (  MalformedURLException e) {
    return;
  }
  if (urlInst.getProtocol() != null) {
    hasProtocol=true;
    isIntroUrl=isIntroUrl(urlInst);
    return;
  }
  return;
}","private void parseUrl(String url){
  if (url == null) {
    return;
  }
  urlInst=null;
  try {
    urlInst=new URL(url);
  }
 catch (  MalformedURLException e) {
    return;
  }
  if (urlInst.getProtocol() != null) {
    hasProtocol=true;
    isIntroUrl=isIntroUrl(urlInst);
    return;
  }
  return;
}",0.9565217391304348
126292,"/** 
 * Checks to see if tha passed URL is an Intro URL. An intro URL is an http URL that has the intro plugin id as a host. eg: ""http://org.eclipse.ui.intro/test"".
 * @param url
 * @return true if url is an intro URL.
 */
private boolean isIntroUrl(URL url){
  if (!url.getProtocol().equalsIgnoreCase(IntroURL.INTRO_PROTOCOL))   return false;
  if (url.getHost().equalsIgnoreCase(IntroURL.INTRO_HOST_ID))   return true;
  return false;
}","/** 
 * Checks to see if tha passed URL is an Intro URL. An intro URL is an http URL that has the intro plugin id as a host. eg: ""http://org.eclipse.ui.intro/test"".
 * @param url
 * @return true if url is an intro URL.
 */
private boolean isIntroUrl(URL url){
  if (!url.getProtocol().equalsIgnoreCase(IntroURL.INTRO_PROTOCOL)) {
    return false;
  }
  if (url.getHost().equalsIgnoreCase(IntroURL.INTRO_HOST_ID)) {
    return true;
  }
  return false;
}",0.9820627802690582
126293,"/** 
 * Retruns the Query part of the URL as an instance of a Properties class.
 * @param url
 * @return
 */
public Properties getQueryParameters(URL url){
  Properties properties=new Properties();
  String query=url.getQuery();
  if (query == null)   return properties;
  String[] params=StringUtil.split(query,""String_Node_Str"");
  for (int i=0; i < params.length; i++) {
    String[] keyValuePair=StringUtil.split(params[i],""String_Node_Str"");
    if (keyValuePair.length != 2) {
      Log.warning(""String_Node_Str"" + params[i]);
      continue;
    }
    String key=urlDecode(keyValuePair[0]);
    if (key == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[0]);
      continue;
    }
    String value=urlDecode(keyValuePair[1]);
    if (value == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[1]);
      continue;
    }
    properties.setProperty(key,value);
  }
  return properties;
}","/** 
 * Retruns the Query part of the URL as an instance of a Properties class.
 * @param url
 * @return
 */
public Properties getQueryParameters(URL url){
  Properties properties=new Properties();
  String query=url.getQuery();
  if (query == null) {
    return properties;
  }
  String[] params;
  if (EnvironmentUtils.isWindowsSystem()) {
    params=StringUtil.split(query,""String_Node_Str"");
  }
 else {
    params=StringUtil.split(query,""String_Node_Str"");
  }
  for (  String param : params) {
    String[] keyValuePair=StringUtil.split(param,""String_Node_Str"");
    if (keyValuePair.length != 2) {
      Log.warning(""String_Node_Str"" + param);
      continue;
    }
    String key=urlDecode(keyValuePair[0]);
    if (key == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[0]);
      continue;
    }
    String value=urlDecode(keyValuePair[1]);
    if (value == null) {
      Log.warning(""String_Node_Str"" + keyValuePair[1]);
      continue;
    }
    properties.setProperty(key,value);
  }
  return properties;
}",0.8774459320288363
126294,"/** 
 * Retruns the path attribute of the passed URL, stripped out of the leading ""/"". Returns null if the url does not have a path.
 * @param url
 * @return
 */
private String getPathAsAction(URL url){
  String action=url.getPath();
  if (action != null)   action=action.substring(1);
  return action;
}","/** 
 * Retruns the path attribute of the passed URL, stripped out of the leading ""/"". Returns null if the url does not have a path.
 * @param url
 * @return
 */
private String getPathAsAction(URL url){
  String action=url.getPath();
  if (action != null) {
    action=action.substring(1);
  }
  return action;
}",0.987012987012987
126295,"public void updateDependencies(IFile pomFile,IProgressMonitor progressMonitor) throws ProcessorException {
  try {
    MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
    Model model=mavenModelManager.readMavenModel(pomFile);
    List<Dependency> dependencies=model.getDependencies();
    if (dependencies == null) {
      dependencies=new ArrayList<Dependency>();
      model.setDependencies(dependencies);
    }
    List<String> oldDependencyIds=new ArrayList<String>();
    for (    Dependency dependency : dependencies) {
      oldDependencyIds.add(dependency.getArtifactId());
    }
    dependencies.clear();
    List<String> newDependencyIds=new ArrayList<String>();
    Dependency junitDependency=new Dependency();
    final Model junitModel=TalendCodeProjectUtil.getJunitTempalteModel();
    junitDependency.setVersion(junitModel.getVersion());
    junitDependency.setGroupId(junitModel.getGroupId());
    junitDependency.setArtifactId(junitModel.getArtifactId());
    junitDependency.setScope(TalendMavenContants.DEFAULT_JUNIT_ARTIFACT_SCOPE);
    dependencies.add(junitDependency);
    newDependencyIds.add(junitDependency.getArtifactId());
    Set<String> neededLibraries=processor.getNeededLibraries();
    for (    String lib : neededLibraries) {
      String name=new Path(lib).removeFileExtension().toString();
      Dependency dependency=new Dependency();
      String group=name;
      String artifact=name;
      String version=TalendMavenContants.DEFAULT_VERSION;
      if (TalendCodeProjectUtil.stripVersion) {
      }
      dependency.setGroupId(group);
      dependency.setArtifactId(artifact);
      dependency.setVersion(version);
      dependency.setScope(""String_Node_Str"");
      dependency.setSystemPath(""String_Node_Str"" + lib);
      dependencies.add(dependency);
      newDependencyIds.add(dependency.getArtifactId());
    }
    final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
    for (    JobInfo child : clonedChildrenJobInfors) {
      Dependency dependency=new Dependency();
      final String childJobName=JavaResourcesHelper.escapeFileName(child.getJobName());
      String artifact=childJobName;
      if (TalendCodeProjectUtil.stripVersion) {
        artifact=JavaResourcesHelper.getJobJarName(childJobName,child.getJobVersion());
      }
      dependency.setGroupId(generateGroupId(child));
      dependency.setArtifactId(artifact);
      dependency.setVersion(child.getJobVersion());
      dependencies.add(dependency);
      newDependencyIds.add(dependency.getArtifactId());
    }
    boolean changed=oldDependencyIds.retainAll(newDependencyIds);
    if (!changed) {
      changed=newDependencyIds.retainAll(oldDependencyIds);
    }
    if (changed) {
      PomManager.savePom(progressMonitor,model,pomFile);
    }
  }
 catch (  Exception e) {
    throw new ProcessorException(e);
  }
}","public void updateDependencies(IFile pomFile,IProgressMonitor progressMonitor) throws ProcessorException {
  try {
    MavenModelManager mavenModelManager=MavenPlugin.getMavenModelManager();
    Model model=mavenModelManager.readMavenModel(pomFile);
    List<Dependency> dependencies=model.getDependencies();
    if (dependencies == null) {
      dependencies=new ArrayList<Dependency>();
      model.setDependencies(dependencies);
    }
    List<String> oldDependencyIds=new ArrayList<String>();
    for (    Dependency dependency : dependencies) {
      oldDependencyIds.add(dependency.getArtifactId());
    }
    dependencies.clear();
    List<String> newDependencyIds=new ArrayList<String>();
    Set<String> neededLibraries=processor.getNeededLibraries();
    for (    String lib : neededLibraries) {
      String name=new Path(lib).removeFileExtension().toString();
      Dependency dependency=new Dependency();
      String group=name;
      String artifact=name;
      String version=TalendMavenContants.DEFAULT_VERSION;
      if (TalendCodeProjectUtil.stripVersion) {
      }
      dependency.setGroupId(group);
      dependency.setArtifactId(artifact);
      dependency.setVersion(version);
      dependency.setScope(""String_Node_Str"");
      dependency.setSystemPath(""String_Node_Str"" + lib);
      dependencies.add(dependency);
      newDependencyIds.add(dependency.getArtifactId());
    }
    final Set<JobInfo> clonedChildrenJobInfors=getClonedJobInfos();
    for (    JobInfo child : clonedChildrenJobInfors) {
      Dependency dependency=new Dependency();
      final String childJobName=JavaResourcesHelper.escapeFileName(child.getJobName());
      String artifact=childJobName;
      if (TalendCodeProjectUtil.stripVersion) {
        artifact=JavaResourcesHelper.getJobJarName(childJobName,child.getJobVersion());
      }
      dependency.setGroupId(generateGroupId(child));
      dependency.setArtifactId(artifact);
      dependency.setVersion(child.getJobVersion());
      dependencies.add(dependency);
      newDependencyIds.add(dependency.getArtifactId());
    }
    boolean changed=oldDependencyIds.retainAll(newDependencyIds);
    if (!changed) {
      changed=newDependencyIds.retainAll(oldDependencyIds);
    }
    if (changed) {
      PomManager.savePom(progressMonitor,model,pomFile);
    }
  }
 catch (  Exception e) {
    throw new ProcessorException(e);
  }
}",0.9090909090909092
126296,"public static List<String> getRunningJobFolders(IProcessor processor){
  List<String> jobFolders=new ArrayList<String>();
  IProcess process=processor.getProcess();
  String mainJobFolder=JavaResourcesHelper.getJobFolderName(process.getName(),process.getVersion());
  jobFolders.add(mainJobFolder);
  Set<JobInfo> childrenJobInfos=getClonedChildrenJobInfos(processor);
  for (  JobInfo jobInfo : childrenJobInfos) {
    String jobFolder=JavaResourcesHelper.getJobFolderName(jobInfo.getJobName(),jobInfo.getJobVersion());
    jobFolders.add(jobFolder);
  }
  return jobFolders;
}","public static List<String> getRunningJobFolders(IProcessor processor){
  List<String> jobFolders=new ArrayList<String>();
  IProcess process=processor.getProcess();
  String mainJobFolder=JavaResourcesHelper.getJobFolderName(process.getName(),process.getVersion());
  jobFolders.add(mainJobFolder);
  Set<JobInfo> childrenJobInfos=getClonedChildrenJobInfos(processor);
  for (  JobInfo jobInfo : childrenJobInfos) {
    String jobFolder=JavaResourcesHelper.getJobFolderName(jobInfo.getJobName(),jobInfo.getJobVersion());
    jobFolders.add(jobFolder);
  }
  IProcess baseProcess=ProcessUtils.getTestContainerBaseProcess(process);
  if (baseProcess != null) {
    String parentJobFolder=JavaResourcesHelper.getJobFolderName(baseProcess.getName(),baseProcess.getVersion());
    jobFolders.add(parentJobFolder);
  }
  return jobFolders;
}",0.7926397735314933
126297,"private int getCurrentActiveLinksNbInput(int connectionCategory){
  int nb=0;
  for (  IConnection connection : getIncomingConnections()) {
    if (connection.isActivate() && connection.getLineStyle().hasConnectionCategory(connectionCategory)) {
      nb++;
    }
  }
  return nb;
}","protected int getCurrentActiveLinksNbInput(int connectionCategory){
  int nb=0;
  for (  IConnection connection : getIncomingConnections()) {
    if (connection.isActivate() && connection.getLineStyle().hasConnectionCategory(connectionCategory)) {
      nb++;
    }
  }
  return nb;
}",0.978798586572438
126298,"private void installJarFromPlatformIfExists(String moduleName,String uriPath){
  if (jarsFromExtensions.containsValue(uriPath)) {
    return;
  }
  String jarName=null;
  try {
    if (checkJarInstalledFromPlatform(uriPath)) {
      File file=new File(uriJarInstalled.get(uriPath));
      if (file.exists()) {
        jarName=file.getName();
      }
    }
 else {
      URI uri=new URI(uriPath);
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        jarName=file.getName();
      }
    }
  }
 catch (  Exception e) {
  }
  if (jarName != null) {
    jarsFromExtensions.put(jarName,uriPath);
    jarsFromExtensions.put(moduleName,uriPath);
  }
}","private void installJarFromPlatformIfExists(String moduleName,String uriPath){
  if (jarsFromExtensions.containsValue(uriPath)) {
    return;
  }
  String jarName=null;
  try {
    if (checkJarInstalledFromPlatform(uriPath)) {
      File file=new File(uriJarInstalled.get(uriPath));
      if (file.exists()) {
        jarName=file.getName();
      }
    }
  }
 catch (  Exception e) {
  }
  if (jarName != null) {
    jarsFromExtensions.put(jarName,uriPath);
    jarsFromExtensions.put(moduleName,uriPath);
  }
}",0.8338762214983714
126299,"@Override public BundleEntry getEntry(String path){
  BundleEntry be=super.getEntry(path);
  if (be == null && path.endsWith(""String_Node_Str"")) {
    File file=getFile(path,false);
    if (file == null) {
      URL resourcePathInFragment=findInFragments(generation.getRevision().getBundle(),path);
      if (resourcePathInFragment != null) {
        return null;
      }
      getMissingJars().add(path + '/');
      be=new FileBundleEntry(new File(generation.getBundleFile().getBaseFile(),path),path);
      MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
    }
 else {
      be=new FileBundleEntry(file,path);
    }
  }
 else {
    if (getMissingJars().contains(path)) {
      be=new MissingJarBundleEntry(path);
      MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
    }
  }
  return be;
}","@Override public BundleEntry getEntry(String path){
  BundleEntry be=super.getEntry(path);
  if (be == null && !generation.getRevision().getSymbolicName().endsWith(""String_Node_Str"")) {
    if (path.endsWith(""String_Node_Str"")) {
      if (path.startsWith(""String_Node_Str"")) {
        path=path.substring(1);
      }
      File file=getFile(path,false);
      if (file == null) {
        URL resourcePathInFragment=findInFragments(generation.getRevision().getBundle(),path);
        if (resourcePathInFragment != null) {
          return null;
        }
        getMissingJars().add(path + '/');
        be=new FileBundleEntry(new File(generation.getBundleFile().getBaseFile(),path),path);
        MissingJarServices.logDebugInfo(""String_Node_Str"" + generation.getRevision().getSymbolicName() + ""String_Node_Str""+ path);
      }
 else {
        be=new FileBundleEntry(file,path);
        getMissingJars().remove(path + '/');
      }
    }
 else     if (path.endsWith(""String_Node_Str"") && !getMissingJars().isEmpty()) {
      for (      String jarPath : getMissingJars()) {
        getEntry(jarPath.substring(0,jarPath.length() - 1));
      }
    }
  }
  return be;
}",0.7073863636363636
126300,"/** 
 * DOC ycbai HadoopCustomVersionDefineDialog constructor comment. <p> Create a instance of this dialog and initialise it use   {@code currentLibMap} which form is:<ul> <li>Key: one enumeration name of  {@link ECustomVersionGroup}<li>Value: set of libraries correspond to the key.</li> </ul> </p>
 * @param parentShell
 * @param currentLibMap
 */
public HadoopCustomVersionDefineDialog(Shell parentShell,Map<String,Set<String>> currentLibMap){
  super(parentShell);
  this.currentLibMap=currentLibMap;
  customLibUtil=new HadoopCustomLibrariesUtil();
}","/** 
 * DOC ycbai HadoopCustomVersionDefineDialog constructor comment. <p> Create a instance of this dialog and initialise it use   {@code currentLibMap} which form is:<ul> <li>Key: one enumeration name of  {@link ECustomVersionGroup}<li>Value: set of libraries correspond to the key.</li> </ul> </p>
 * @param parentShell
 * @param currentLibMap
 */
public HadoopCustomVersionDefineDialog(Shell parentShell,Map<String,Set<String>> currentLibMap){
  super(parentShell);
  this.currentLibMap=currentLibMap;
  customLibUtil=new HadoopCustomLibrariesUtil();
  initLibMap();
}",0.9858156028368794
126301,"private void init(){
  libsManager=CustomVersionLibsManager.getInstance();
  if (currentLibMap != null) {
    ECustomVersionGroup[] groups=ECustomVersionGroup.values();
    for (    ECustomVersionGroup group : groups) {
      Set<String> set=currentLibMap.get(group.getName());
      if (set == null) {
        set=new HashSet<String>();
      }
      libMap.put(group.getName(),customLibUtil.convertToLibraryFile(set));
    }
  }
  ECustomVersionGroup selectedType=getSelectedType();
  if (selectedType != null) {
    selectLibFileSet=libMap.get(selectedType.getName());
    viewer.setInput(selectLibFileSet);
  }
}","private void init(){
  libsManager=CustomVersionLibsManager.getInstance();
  ECustomVersionGroup selectedType=getSelectedType();
  if (selectedType != null) {
    selectLibFileSet=libMap.get(selectedType.getName());
    viewer.setInput(selectLibFileSet);
  }
}",0.2420091324200913
126302,"@Override public void updateTopMessages(String messages,int status){
  super.updateTopMessages(messages,status);
  if (actionBtn != null && !actionBtn.isDisposed()) {
    actionBtn.setBackground(backgroundColor);
  }
  setActionButtonVisible(!hidden);
}","@Override public void updateTopMessages(String messages,int status){
  super.updateTopMessages(messages,status);
  if (actionBtn != null && !actionBtn.isDisposed()) {
    actionBtn.setBackground(backgroundColor);
  }
  setActionButtonVisible(!hidden);
  changeBackgroundColor(status);
}",0.9387755102040816
126303,"private MessagesWithActionComposite createMessagesComposite(Composite parent){
  return new MessagesWithActionComposite(parent,SWT.TOP);
}","private MessagesWithActionComposite createMessagesComposite(Composite parent){
  MessagesWithActionComposite messagesComposite=new MessagesWithActionComposite(parent,SWT.TOP){
    @Override protected void changeBackgroundColor(    int status){
switch (status) {
case IStatus.WARNING:
        CoreUIPlugin.setCSSId(this,CSS_MESSAGES_WITH_ACTION_COMPOSITE_WARN);
      break;
case IStatus.ERROR:
    CoreUIPlugin.setCSSId(this,CSS_MESSAGES_WITH_ACTION_COMPOSITE_ERROR);
  break;
default :
}
}
}
;
return messagesComposite;
}",0.396969696969697
126304,"public static String splitQueryData(String oldName,String newName,String value){
  inputString=value;
  final int length=value.length();
  LinkedHashMap<Integer,Integer> quotaStrings=new LinkedHashMap<Integer,Integer>();
  List<FunctionInfo> functions=new ArrayList<FunctionInfo>();
  int start=-1;
  int end=-2;
  char ch;
  for (int i=0; i < length; i++) {
    ch=value.charAt(i);
    if (ch == '\""') {
      if (isEscapeSequence(value,i)) {
        continue;
      }
      if (0 <= start && end < start) {
        end=i;
        quotaStrings.put(start,end);
      }
 else {
        start=i;
      }
    }
  }
{
  }
  StringBuffer strBuffer=new StringBuffer();
  String subString=null;
  int vStart=0;
  int vEnd=0;
  int methodMaxIndex=-1;
  vStart=0;
  vEnd=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart != start) {
      subString=value.substring(vStart,vEnd);
      calcMethodArea(subString,value,vStart,functions);
    }
    vStart=end;
  }
  vStart=0;
  vEnd=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart == start) {
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
 else {
      subString=value.substring(vStart,vEnd);
      if (methodMaxIndex < start) {
        methodMaxIndex=FunctionInfo.getMaxIndexForCurrentParentFunction(start,functions);
      }
      String replacedString=doVaribleReplace(oldName,newName,value,functions,vStart,vEnd);
      strBuffer.append(replacedString);
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        FunctionInfo function=FunctionInfo.getParentFunctionFromList(start,end,functions);
        Point funcNameArea=function.getNameArea();
        String functionName=value.substring(funcNameArea.x,funcNameArea.y);
        if (functionName.matches(""String_Node_Str"")) {
          subString=subString.replaceAll(oldName,newName);
        }
 else {
          if (subString.equals(""String_Node_Str"" + oldName + ""String_Node_Str"")) {
            subString=""String_Node_Str"" + newName + ""String_Node_Str"";
          }
        }
      }
    }
    strBuffer.append(subString);
    vStart=end;
  }
  if (vStart < length) {
    vEnd=length;
    String replacedString=doVaribleReplace(oldName,newName,value,functions,vStart,vEnd);
    strBuffer.append(replacedString);
  }
  return strBuffer.toString();
}","public static String splitQueryData(String oldName,String newName,String value){
  inputString=value;
  final int length=value.length();
  LinkedHashMap<Integer,Integer> quotaStrings=new LinkedHashMap<Integer,Integer>();
  List<FunctionInfo> functions=new ArrayList<FunctionInfo>();
  Set<String> commentStringSet=new HashSet<String>();
  int start=-1;
  int end=-2;
  char ch;
  boolean isInConstString=false;
  boolean isInCommentString=false;
  Character commentType=null;
  for (int i=0; i < length; i++) {
    ch=value.charAt(i);
    if (isInCommentString == false && ch == '\""') {
      if (isEscapeSequence(value,i)) {
        continue;
      }
      isInConstString=!isInConstString;
      if (isInConstString) {
        start=i;
      }
 else {
        end=i;
        quotaStrings.put(start,end);
      }
    }
 else     if (isInConstString == false) {
      if (isInCommentString) {
        if (commentType != null && commentType.equals('/') && (ch == '\r' || ch == '\n')) {
          isInCommentString=false;
          commentType=null;
          end=i;
        }
 else         if (commentType != null && commentType.equals('*') && ch == '/' && value.charAt(i - 1) == '*') {
          isInCommentString=false;
          commentType=null;
          end=i;
        }
        if (isInCommentString == false) {
          quotaStrings.put(start,end);
          commentStringSet.add(start + ""String_Node_Str"" + end);
        }
      }
 else {
        if ((ch == '/' || ch == '*') && 0 < i && (i - 1) != end && value.charAt(i - 1) == '/') {
          isInCommentString=true;
          commentType=ch;
          start=i - 1;
        }
      }
    }
  }
{
  }
  StringBuffer strBuffer=new StringBuffer();
  String subString=null;
  int vStart=0;
  int vEnd=0;
  int methodMaxIndex=-1;
  vStart=0;
  vEnd=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart < vEnd) {
      subString=value.substring(vStart,vEnd);
      calcMethodArea(subString,value,vStart,functions);
    }
    vStart=end;
  }
  vStart=0;
  vEnd=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vEnd <= vStart) {
      subString=value.substring(start,end);
      if (!commentStringSet.contains(start + ""String_Node_Str"" + (end - 1)) && start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
 else {
      subString=value.substring(vStart,vEnd);
      if (methodMaxIndex < start) {
        methodMaxIndex=FunctionInfo.getMaxIndexForCurrentParentFunction(start,functions);
      }
      String replacedString=doVaribleReplace(oldName,newName,value,functions,vStart,vEnd);
      strBuffer.append(replacedString);
      subString=value.substring(start,end);
      if (!commentStringSet.contains(start + ""String_Node_Str"" + (end - 1)) && start < methodMaxIndex) {
        FunctionInfo function=FunctionInfo.getParentFunctionFromList(start,end,functions);
        Point funcNameArea=function.getNameArea();
        String functionName=value.substring(funcNameArea.x,funcNameArea.y);
        if (functionName.matches(""String_Node_Str"")) {
          subString=subString.replaceAll(oldName,newName);
        }
 else {
          if (subString.equals(""String_Node_Str"" + oldName + ""String_Node_Str"")) {
            subString=""String_Node_Str"" + newName + ""String_Node_Str"";
          }
        }
      }
    }
    strBuffer.append(subString);
    vStart=end;
  }
  if (vStart < length) {
    vEnd=length;
    String replacedString=doVaribleReplace(oldName,newName,value,functions,vStart,vEnd);
    strBuffer.append(replacedString);
  }
  return strBuffer.toString();
}",0.7995037990386107
126305,"private static int calcMethodArea(String varibleString,String wholeString,int beginIndex,List<FunctionInfo> functions){
  String regex=""String_Node_Str"";
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(varibleString);
  int i=0;
  int currentMaxIndex=i;
  while (matcher.find()) {
    boolean isInQuota=false;
    int parenthesisNum=0;
    int matchedStart=matcher.start();
    int matchedEnd=matcher.end();
    Point functionNameArea=new Point(beginIndex + matchedStart,beginIndex + matchedEnd);
    FunctionInfo funcInfo=new FunctionInfo(functionNameArea);
    Point functionParamArea=new Point(-1,-1);
    funcInfo.setParamArea(functionParamArea);
    i=beginIndex + matchedEnd;
    functionParamArea.x=i;
    for (; i < wholeString.length(); i++) {
      char ch=wholeString.charAt(i);
      if (ch == '\""' && !isEscapeSequence(wholeString,i)) {
        isInQuota=!isInQuota;
      }
      if (isInQuota) {
        continue;
      }
      if (ch == '(') {
        parenthesisNum++;
      }
 else       if (ch == ')') {
        parenthesisNum--;
      }
      if (parenthesisNum < 0) {
        break;
      }
    }
    functionParamArea.y=i;
    FunctionInfo.addFunctionToList(funcInfo,functions);
    if (currentMaxIndex < i) {
      currentMaxIndex=i;
    }
  }
  return currentMaxIndex;
}","private static int calcMethodArea(String varibleString,String wholeString,int beginIndex,List<FunctionInfo> functions){
  String regex=""String_Node_Str"";
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(varibleString);
  int i=0;
  int currentMaxIndex=i;
  while (matcher.find()) {
    boolean isInQuota=false;
    boolean isInComment=false;
    Character commentType=null;
    int parenthesisNum=0;
    int lastCommentEndIndex=-1;
    int matchedStart=matcher.start();
    int matchedEnd=matcher.end();
    Point functionNameArea=new Point(beginIndex + matchedStart,beginIndex + matchedEnd);
    FunctionInfo funcInfo=new FunctionInfo(functionNameArea);
    Point functionParamArea=new Point(-1,-1);
    funcInfo.setParamArea(functionParamArea);
    i=beginIndex + matchedEnd;
    functionParamArea.x=i;
    for (; i < wholeString.length(); i++) {
      char ch=wholeString.charAt(i);
      if (isInComment == false && ch == '\""' && !isEscapeSequence(wholeString,i)) {
        isInQuota=!isInQuota;
        continue;
      }
 else       if (isInQuota) {
        continue;
      }
 else       if (isInQuota == false) {
        if (isInComment) {
          if (commentType != null && commentType.equals('/') && (ch == '\r' || ch == '\n')) {
            isInComment=false;
            commentType=null;
            lastCommentEndIndex=i;
          }
 else           if (commentType != null && commentType.equals('*') && ch == '/' && wholeString.charAt(i - 1) == '*') {
            isInComment=false;
            commentType=null;
            lastCommentEndIndex=i;
          }
          continue;
        }
 else {
          if ((ch == '/' || ch == '*') && 0 < i && (i - 1) != lastCommentEndIndex && wholeString.charAt(i - 1) == '/') {
            isInComment=true;
            commentType=ch;
            continue;
          }
        }
      }
      if (ch == '(') {
        parenthesisNum++;
      }
 else       if (ch == ')') {
        parenthesisNum--;
      }
      if (parenthesisNum < 0) {
        break;
      }
    }
    functionParamArea.y=i;
    FunctionInfo.addFunctionToList(funcInfo,functions);
    if (currentMaxIndex < i) {
      currentMaxIndex=i;
    }
  }
  return currentMaxIndex;
}",0.7470946319867183
126306,"@SuppressWarnings(""String_Node_Str"") public static boolean isEclipseDebug(){
  boolean debuggerEnabled=false;
  BundleContext bundleContext=FrameworkUtil.getBundle(TalendDebugHandler.class).getBundleContext();
  ServiceReference<DebugOptions> debugOptSR=bundleContext.getServiceReference(DebugOptions.class);
  if (debugOptSR != null) {
    DebugOptions debugOpt=bundleContext.getService(debugOptSR);
    debuggerEnabled=debugOpt.isDebugEnabled();
  }
  return debuggerEnabled;
}","@SuppressWarnings(""String_Node_Str"") public static boolean isEclipseDebug(){
  boolean debuggerEnabled=false;
  BundleContext bundleContext=FrameworkUtil.getBundle(TalendDebugHandler.class).getBundleContext();
  if (bundleContext == null) {
    return false;
  }
  ServiceReference<DebugOptions> debugOptSR=bundleContext.getServiceReference(DebugOptions.class);
  if (debugOptSR != null) {
    DebugOptions debugOpt=bundleContext.getService(debugOptSR);
    debuggerEnabled=debugOpt.isDebugEnabled();
  }
  return debuggerEnabled;
}",0.94757665677547
126307,"@Override public void setKeyList(IBigDataNode bigDataNode,String direction){
  String[] partitionKey=bigDataNode.getComponent().getPartitioning().split(""String_Node_Str"");
  boolean partitionKeyIsValid=partitionKey.length > 1 ? true : false;
  this.keyList=new HashMap<String,List<IMetadataColumn>>();
  List<IMetadataColumn> columnList=new ArrayList<IMetadataColumn>();
  if (partitionKeyIsValid) {
    IElementParameter parTableNode=bigDataNode.getElementParameter(partitionKey[0]);
    if (parTableNode != null) {
      if (parTableNode.getFieldType().equals(EParameterFieldType.TABLE)) {
        String clumnNodeListName=partitionKey[1];
        IElementParameter nodeElemForList=null;
        for (        Object nodeItemList : parTableNode.getListItemsValue()) {
          if (((IElementParameter)nodeItemList).getFieldType().equals(EParameterFieldType.PREV_COLUMN_LIST) || ((IElementParameter)nodeItemList).getFieldType().equals(EParameterFieldType.COLUMN_LIST) || ((IElementParameter)nodeItemList).getFieldType().equals(EParameterFieldType.CHECK)) {
            nodeElemForList=(IElementParameter)nodeItemList;
            break;
          }
        }
        if (nodeElemForList != null) {
          for (          Map nodeColumnListMap : (List<Map>)parTableNode.getValue()) {
            Object value=nodeColumnListMap.get(clumnNodeListName);
            String colName=""String_Node_Str"";
            if (value != null) {
              if (value instanceof String) {
                if (parTableNode.isBasedOnSchema()) {
                  if (""String_Node_Str"".equals(value)) {
                    colName=(String)nodeColumnListMap.get(""String_Node_Str"");
                  }
 else {
                    break;
                  }
                }
 else {
                  colName=(String)value;
                }
              }
 else               if (value instanceof Integer) {
                Integer index=(Integer)value;
                if (nodeElemForList.getListItemsDisplayName().length > index) {
                  colName=nodeElemForList.getListItemsDisplayName()[index];
                }
              }
              columnList.add(bigDataNode.getMetadataList().get(0).getColumn(colName));
            }
 else {
              throw new RuntimeException(""String_Node_Str"" + partitionKey[0] + ""String_Node_Str""+ partitionKey[1]+ ""String_Node_Str""+ this.getComponentName());
            }
          }
          this.keyList.put(direction,columnList);
        }
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"" + partitionKey[0] + ""String_Node_Str""+ EParameterFieldType.TABLE+ ""String_Node_Str"");
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + partitionKey[0] + ""String_Node_Str""+ this.getComponentName());
    }
  }
}","@Override public void setKeyList(IBigDataNode bigDataNode,String direction){
  String[] partitionKey=bigDataNode.getComponent().getPartitioning().split(""String_Node_Str"");
  boolean partitionKeyIsValid=partitionKey.length > 1 ? true : false;
  this.keyList=new HashMap<String,List<IMetadataColumn>>();
  List<IMetadataColumn> columnList=new ArrayList<IMetadataColumn>();
  if (partitionKeyIsValid) {
    IElementParameter parTableNode=bigDataNode.getElementParameter(partitionKey[0]);
    if (parTableNode != null) {
      if (parTableNode.getFieldType().equals(EParameterFieldType.TABLE)) {
        String clumnNodeListName=partitionKey[1];
        IElementParameter nodeElemForList=null;
        for (        Object nodeItemList : parTableNode.getListItemsValue()) {
          if (((IElementParameter)nodeItemList).getFieldType().equals(EParameterFieldType.PREV_COLUMN_LIST) || ((IElementParameter)nodeItemList).getFieldType().equals(EParameterFieldType.COLUMN_LIST) || ((IElementParameter)nodeItemList).getFieldType().equals(EParameterFieldType.CHECK)) {
            nodeElemForList=(IElementParameter)nodeItemList;
            break;
          }
        }
        if (nodeElemForList != null) {
          for (          Map nodeColumnListMap : (List<Map>)parTableNode.getValue()) {
            Object value=nodeColumnListMap.get(clumnNodeListName);
            String colName=""String_Node_Str"";
            if (value != null) {
              if (value instanceof String) {
                if (parTableNode.isBasedOnSchema()) {
                  if (""String_Node_Str"".equals(value)) {
                    colName=(String)nodeColumnListMap.get(""String_Node_Str"");
                  }
 else {
                    continue;
                  }
                }
 else {
                  colName=(String)value;
                }
              }
 else               if (value instanceof Integer) {
                Integer index=(Integer)value;
                if (nodeElemForList.getListItemsDisplayName().length > index) {
                  colName=nodeElemForList.getListItemsDisplayName()[index];
                }
              }
              columnList.add(bigDataNode.getMetadataList().get(0).getColumn(colName));
            }
 else {
              throw new RuntimeException(""String_Node_Str"" + partitionKey[0] + ""String_Node_Str""+ partitionKey[1]+ ""String_Node_Str""+ this.getComponentName());
            }
          }
          this.keyList.put(direction,columnList);
        }
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"" + partitionKey[0] + ""String_Node_Str""+ EParameterFieldType.TABLE+ ""String_Node_Str"");
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + partitionKey[0] + ""String_Node_Str""+ this.getComponentName());
    }
  }
}",0.997681469591582
126308,"@Override public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=node.getComponent().getModulesNeeded();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : list) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
          problem.setKey(""String_Node_Str"" + current.getModuleName());
          toReturn.add(problem);
        }
      }
    }
  }
  return toReturn;
}","@Override public List<Problem> getProblems(INode node,IElement element){
  List<Problem> toReturn=new ArrayList<Problem>();
  List<ModuleNeeded> list=LibrariesManagerUtils.getNotInstalledModules(node);
  for (  ModuleNeeded current : list) {
    Problem problem=new Problem(element,""String_Node_Str"" + current.getModuleName() + ""String_Node_Str"",ProblemStatus.ERROR);
    problem.setKey(""String_Node_Str"" + current.getModuleName());
    toReturn.add(problem);
  }
  return toReturn;
}",0.2698760029175784
126309,"public static List<ModuleNeeded> getNotInstalledModules(List<ModuleNeeded> modules){
  List<ModuleNeeded> updatedModules=new ArrayList<ModuleNeeded>();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  if (modules != null) {
    for (    ModuleNeeded module : modules) {
      for (      ModuleNeeded fromProvider : modulesNeeded) {
        if (fromProvider.getModuleName().equals(module.getModuleName()) && fromProvider.getContext().equals(module.getContext()) && ELibraryInstallStatus.NOT_INSTALLED == fromProvider.getStatus() && (fromProvider.getRequiredIf() != null && fromProvider.getRequiredIf().equals(module.getRequiredIf()))) {
          updatedModules.add(fromProvider);
          break;
        }
      }
    }
  }
  return updatedModules;
}","public static List<ModuleNeeded> getNotInstalledModules(INode node){
  List<ModuleNeeded> updatedModules=new ArrayList<ModuleNeeded>();
  List<ModuleNeeded> nodeModulesList=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    Set<ModuleNeeded> neededLibraries=service.getNeededModules(node,false);
    nodeModulesList=new ArrayList<ModuleNeeded>(neededLibraries);
  }
 else {
    nodeModulesList=node.getModulesNeeded();
  }
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : nodeModulesList) {
      if (current.getContext().equals(module.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          updatedModules.add(current);
          break;
        }
      }
    }
  }
  return updatedModules;
}",0.2636789994788953
126310,"public static List<ModuleNeeded> getNotInstalledModules(INode node){
  List<ModuleNeeded> updatedModules=new ArrayList<ModuleNeeded>();
  List<ModuleNeeded> nodeModulesList=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    Set<ModuleNeeded> neededLibraries=service.getNeededModules(node,false);
    nodeModulesList=new ArrayList<ModuleNeeded>(neededLibraries);
  }
 else {
    nodeModulesList=node.getModulesNeeded();
  }
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : nodeModulesList) {
      if (module.getContext().equals(current.getContext()) && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          updatedModules.add(current);
          break;
        }
      }
    }
  }
  return updatedModules;
}","public static List<ModuleNeeded> getNotInstalledModules(INode node){
  List<ModuleNeeded> updatedModules=new ArrayList<ModuleNeeded>();
  List<ModuleNeeded> nodeModulesList=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    Set<ModuleNeeded> neededLibraries=service.getNeededModules(node,false);
    nodeModulesList=new ArrayList<ModuleNeeded>(neededLibraries);
  }
 else {
    nodeModulesList=node.getModulesNeeded();
  }
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded module : modulesNeeded) {
    for (    ModuleNeeded current : nodeModulesList) {
      if (current.getContext() != null && current.getContext().equals(module.getContext()) && current.getModuleName() != null && current.getModuleName().equals(module.getModuleName())) {
        if (module.getStatus() == ELibraryInstallStatus.NOT_INSTALLED && current.isRequired(node.getElementParameters())) {
          updatedModules.add(current);
          break;
        }
      }
    }
  }
  return updatedModules;
}",0.9466495945369184
126311,"/** 
 * Get Current type name for launching. yzhang Comment method ""getTypeName"".
 */
public String getTypeName();","/** 
 * Get Current type name for launching. yzhang Comment method ""getTypeName"".
 * @deprecated getMainClass instead
 */
@Deprecated public String getTypeName();",0.8260869565217391
126312,"public static String[] getMainCommand(String processName,String processVersion,String contextName,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  IProcess currentProcess=null;
  ProcessItem selectedProcessItem=null;
  selectedProcessItem=ItemCacheManager.getProcessItem(processName,processVersion);
  if (selectedProcessItem != null) {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    currentProcess=service.getProcessFromProcessItem(selectedProcessItem);
  }
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,selectedProcessItem.getProperty(),currentContext);
  String[] cmd=new String[]{processor.getCodePath().removeFirstSegments(1).toString().replace(""String_Node_Str"",""String_Node_Str"")};
  if (codeOptions != null) {
    for (    String string : codeOptions) {
      if (string != null) {
        cmd=(String[])ArrayUtils.add(cmd,string);
      }
    }
  }
  if (needContextInCurrentGeneration && contextName != null && !contextName.equals(""String_Node_Str"")) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + contextName);
  }
  if (statisticPort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + statisticPort);
  }
  if (tracePort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + tracePort);
  }
  return cmd;
}","public static String[] getMainCommand(String processName,String processVersion,String contextName,int statisticPort,int tracePort,String... codeOptions) throws ProcessorException {
  IProcess currentProcess=null;
  ProcessItem selectedProcessItem=null;
  selectedProcessItem=ItemCacheManager.getProcessItem(processName,processVersion);
  if (selectedProcessItem != null) {
    IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
    currentProcess=service.getProcessFromProcessItem(selectedProcessItem);
  }
  if (currentProcess == null) {
    return new String[]{};
  }
  IContext currentContext=getContext(currentProcess,contextName);
  IProcessor processor=getProcessor(currentProcess,selectedProcessItem.getProperty(),currentContext);
  String[] cmd=new String[]{processor.getMainClass()};
  if (codeOptions != null) {
    for (    String string : codeOptions) {
      if (string != null) {
        cmd=(String[])ArrayUtils.add(cmd,string);
      }
    }
  }
  if (needContextInCurrentGeneration && contextName != null && !contextName.equals(""String_Node_Str"")) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + contextName);
  }
  if (statisticPort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + statisticPort);
  }
  if (tracePort != -1) {
    cmd=(String[])ArrayUtils.add(cmd,""String_Node_Str"" + tracePort);
  }
  return cmd;
}",0.6925770308123249
126313,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || type == ERepositoryObjectType.JOBLET || type == ERepositoryObjectType.PROCESS_MR) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.PIG_UDF || ""String_Node_Str"".equals(type.getType())) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || ERepositoryObjectType.getAllTypesOfProcess().contains(type)) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.PIG_UDF || ""String_Node_Str"".equals(type.getType())) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}",0.9732578567245754
126314,"public AvroMetadataTable(String filePath,String technicalProjectName,String jobName,String jobVersion){
  super();
  this.filePath=filePath.substring(1,filePath.length() - 1);
  this.filePath=this.filePath.substring(0,filePath.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
  this.technicalProjectName=technicalProjectName.toLowerCase();
  this.jobName=jobName + ""String_Node_Str"" + jobVersion.replace(""String_Node_Str"",""String_Node_Str"");
  this.jobName=this.jobName.toLowerCase();
}","/** 
 * This constructor use already extracted variable of the current metadata. It will be used by the clone() method.
 * @param filePath the path to the generated sources of the project
 * @param technicalProjectName the name of the project
 * @param jobName the name of the job with version
 */
public AvroMetadataTable(String filePath,String technicalProjectName,String jobName){
  super();
  this.filePath=filePath;
  this.technicalProjectName=technicalProjectName;
  this.jobName=jobName;
}",0.255578093306288
126315,"@Override public IMetadataTable clone(boolean withCustoms){
  AvroMetadataTable clonedMetadata=null;
  try {
    clonedMetadata=new AvroMetadataTable(filePath,technicalProjectName,jobName,filePath);
    List<IMetadataColumn> clonedMetaColumns=new ArrayList<IMetadataColumn>();
    clonedMetadata.setListColumns(clonedMetaColumns);
    for (int i=0; i < super.getListColumns().size(); i++) {
      clonedMetaColumns.add(super.getListColumns().get(i).clone(withCustoms));
    }
    List<IMetadataColumn> clonedMetaUnusedColumns=new ArrayList<IMetadataColumn>();
    clonedMetadata.setUnusedColumns(clonedMetaUnusedColumns);
    for (int i=0; i < super.getListUnusedColumns().size(); i++) {
      clonedMetaColumns.add(super.getListUnusedColumns().get(i).clone(withCustoms));
    }
    clonedMetadata.setTableName(this.getTableName());
    clonedMetadata.setLabel(this.getLabel());
    clonedMetadata.setAdditionalProperties(new HashMap<String,String>(super.getAdditionalProperties()));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return clonedMetadata;
}","@Override public IMetadataTable clone(boolean withCustoms){
  AvroMetadataTable clonedMetadata=null;
  try {
    clonedMetadata=new AvroMetadataTable(filePath,technicalProjectName,jobName);
    List<IMetadataColumn> clonedMetaColumns=new ArrayList<IMetadataColumn>();
    clonedMetadata.setListColumns(clonedMetaColumns);
    for (int i=0; i < super.getListColumns().size(); i++) {
      clonedMetaColumns.add(super.getListColumns().get(i).clone(withCustoms));
    }
    List<IMetadataColumn> clonedMetaUnusedColumns=new ArrayList<IMetadataColumn>();
    clonedMetadata.setUnusedColumns(clonedMetaUnusedColumns);
    for (int i=0; i < super.getListUnusedColumns().size(); i++) {
      clonedMetaColumns.add(super.getListUnusedColumns().get(i).clone(withCustoms));
    }
    clonedMetadata.setTableName(this.getTableName());
    clonedMetadata.setLabel(this.getLabel());
    clonedMetadata.setAdditionalProperties(new HashMap<String,String>(super.getAdditionalProperties()));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return clonedMetadata;
}",0.9958002799813346
126316,"/** 
 * return the folder where to find the missing libraries
 * @param theContext
 */
protected File getLibJavaFolderFile(BundleContext theContext) throws URISyntaxException {
  String libFolderSysProp=System.getProperty(ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP);
  if (libFolderSysProp != null) {
    return new File(libFolderSysProp);
  }
 else {
    Location installLocation=getInstallLocation(theContext);
    File installFolder=URIUtil.toFile(URIUtil.toURI(installLocation.getURL()));
    return new File(installFolder,System.getProperty(""String_Node_Str"",LIB_JAVA_SUB_FOLDER));
  }
}","/** 
 * return the folder where to find the missing libraries
 * @param theContext
 */
protected File getLibJavaFolderFile(BundleContext theContext) throws URISyntaxException {
  String libFolderSysProp=System.getProperty(ORG_TALEND_EXTERNAL_LIB_FOLDER_SYS_PROP);
  if (libFolderSysProp != null) {
    return new File(libFolderSysProp);
  }
 else {
    Location installLocation=getConfigurationLocation(theContext);
    File installFolder=URIUtil.toFile(URIUtil.toURI(installLocation.getURL()));
    return new File(installFolder,System.getProperty(""String_Node_Str"",LIB_JAVA_SUB_FOLDER));
  }
}",0.983108108108108
126317,"/** 
 * Export the resources that were previously specified for export (or if a single resource was specified then export. it recursively)
 */
@Override public void run(IProgressMonitor progressMonitor) throws InvocationTargetException, InterruptedException {
  this.monitor=progressMonitor;
  try {
    initialize();
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e,NLS.bind(""String_Node_Str"",e.getMessage()));
  }
  try {
    int totalWork=IProgressMonitor.UNKNOWN;
    try {
      if (resourcesListToExport == null) {
      }
 else {
        totalWork=countSelectedResources();
      }
    }
 catch (    CoreException e) {
    }
    monitor.beginTask(""String_Node_Str"",totalWork);
    if (resourcesListToExport == null) {
    }
 else {
      exportSpecifiedResources();
    }
    try {
      exporter.finished();
    }
 catch (    IOException e) {
      throw new InvocationTargetException(e,NLS.bind(""String_Node_Str"",e.getMessage()));
    }
  }
  finally {
    monitor.done();
  }
}","/** 
 * Export the resources that were previously specified for export (or if a single resource was specified then export. it recursively)
 */
@Override public void run(IProgressMonitor progressMonitor) throws InvocationTargetException, InterruptedException {
  this.monitor=progressMonitor;
  try {
    initialize();
  }
 catch (  IOException e) {
    MessageBoxExceptionHandler.process(e);
    throw new InvocationTargetException(e,NLS.bind(""String_Node_Str"",e.getMessage()));
  }
  try {
    int totalWork=IProgressMonitor.UNKNOWN;
    try {
      if (resourcesListToExport == null) {
      }
 else {
        totalWork=countSelectedResources();
      }
    }
 catch (    CoreException e) {
    }
    monitor.beginTask(""String_Node_Str"",totalWork);
    if (resourcesListToExport == null) {
    }
 else {
      exportSpecifiedResources();
    }
    try {
      exporter.finished();
    }
 catch (    IOException e) {
      throw new InvocationTargetException(e,NLS.bind(""String_Node_Str"",e.getMessage()));
    }
  }
  finally {
    monitor.done();
  }
}",0.979176755447942
126318,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (type == ERepositoryObjectType.PROCESS || ERepositoryObjectType.getAllTypesOfProcess().contains(type)) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.PIG_UDF || ""String_Node_Str"".equals(type.getType())) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (ERepositoryObjectType.getAllTypesOfProcess().contains(type) || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.PIG_UDF || ""String_Node_Str"".equals(type.getType())) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}",0.9841207606351696
126319,"private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PIG_UDF) {
        item=PropertiesFactory.eINSTANCE.createPigudfItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}","private Item createNewItem(){
  ERepositoryObjectType repositoryType=sourceNode.getObjectType();
  Item item=null;
  if (repositoryType != null) {
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.CONTEXT) {
        item=PropertiesFactory.eINSTANCE.createContextItem();
      }
 else       if (repositoryType == ERepositoryObjectType.DOCUMENTATION) {
        item=PropertiesFactory.eINSTANCE.createDocumentationItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOBLET) {
        item=PropertiesFactory.eINSTANCE.createJobletProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_CONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
        item=PropertiesFactory.eINSTANCE.createDelimitedFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
        item=PropertiesFactory.eINSTANCE.createEbcdicConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_EXCEL) {
        item=PropertiesFactory.eINSTANCE.createExcelFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_HL7) {
        item=PropertiesFactory.eINSTANCE.createHL7ConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LDIF) {
        item=PropertiesFactory.eINSTANCE.createLdifFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
        item=PropertiesFactory.eINSTANCE.createPositionalFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
        item=PropertiesFactory.eINSTANCE.createLinkRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_REGEXP) {
        item=PropertiesFactory.eINSTANCE.createRegExFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_RULES) {
        item=PropertiesFactory.eINSTANCE.createRulesItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_XML) {
        item=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createGenericSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createLDAPSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
        item=PropertiesFactory.eINSTANCE.createMDMConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createSalesforceSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
        item=PropertiesFactory.eINSTANCE.createSAPConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
        item=PropertiesFactory.eINSTANCE.createWSDLSchemaConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PROCESS) {
        item=PropertiesFactory.eINSTANCE.createProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.ROUTINES) {
        item=PropertiesFactory.eINSTANCE.createRoutineItem();
      }
 else       if (repositoryType == ERepositoryObjectType.PIG_UDF) {
        item=PropertiesFactory.eINSTANCE.createPigudfItem();
      }
 else       if (repositoryType == ERepositoryObjectType.JOB_SCRIPT) {
        item=PropertiesFactory.eINSTANCE.createJobScriptItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SNIPPETS) {
        item=PropertiesFactory.eINSTANCE.createSnippetItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SQLPATTERNS) {
        item=PropertiesFactory.eINSTANCE.createSQLPatternItem();
      }
 else       if (repositoryType == ERepositoryObjectType.SVG_BUSINESS_PROCESS) {
        item=PropertiesFactory.eINSTANCE.createSVGBusinessProcessItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_EDIFACT) {
        item=PropertiesFactory.eINSTANCE.createEDIFACTConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        item=PropertiesFactory.eINSTANCE.createValidationRulesConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_HEADER_FOOTER) {
        item=PropertiesFactory.eINSTANCE.createHeaderFooterConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_BRMS) {
        item=PropertiesFactory.eINSTANCE.createBRMSConnectionItem();
      }
 else       if (repositoryType == ERepositoryObjectType.METADATA_FILE_FTP) {
        item=PropertiesFactory.eINSTANCE.createFTPConnectionItem();
      }
      if (item == null) {
        for (        IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
          item=handler.createNewItem(repositoryType);
          if (item != null) {
            break;
          }
        }
      }
    }
  }
  if (item != null) {
    Property property=PropertiesFactory.eINSTANCE.createProperty();
    item.setProperty(property);
  }
  return item;
}",0.9722722362261432
126320,"@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(false);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  if (isRepository) {
    configureUsefulColumn(tableViewerCreator);
  }
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  if (showKeyColumn) {
    configureKeyColumn(tableViewerCreator);
  }
  configureTypeColumns(tableViewerCreator);
  if (showNullableColumn) {
    configureNullableColumn(tableViewerCreator);
  }
  configurePatternColumn(tableViewerCreator);
  if (showLengthColumn) {
    configureLengthColumn(tableViewerCreator);
  }
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  if (showAdditionalFieldColumn) {
    configureAdditionalFieldColumns(tableViewerCreator);
  }
  if (showPrecisionColumn) {
    configurePrecisionColumn(tableViewerCreator);
  }
  if (showDefaultColumn) {
    configureDefaultColumn(tableViewerCreator);
  }
  if (showCommentColumn) {
    configureCommentColumn(tableViewerCreator);
  }
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}","@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(false);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  if (isRepository) {
    configureUsefulColumn(tableViewerCreator);
  }
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  if (showKeyColumn) {
    configureKeyColumn(tableViewerCreator);
  }
  configureTypeColumns(tableViewerCreator);
  if (showNullableColumn) {
    configureNullableColumn(tableViewerCreator);
  }
  configurePatternColumn(tableViewerCreator);
  if (showLengthColumn) {
    configureLengthColumn(tableViewerCreator);
  }
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  if (showAdditionalFieldColumn) {
    configureAdditionalFieldColumns(tableViewerCreator);
  }
  if (showPrecisionColumn) {
    configurePrecisionColumn(tableViewerCreator);
  }
  configureDefaultColumn(tableViewerCreator);
  if (showCommentColumn) {
    configureCommentColumn(tableViewerCreator);
  }
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}",0.9668921324314704
126321,"@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(false);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  if (isRepository) {
    configureUsefulColumn(tableViewerCreator);
  }
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  if (showKeyColumn) {
    configureKeyColumn(tableViewerCreator);
  }
  configureTypeColumns(tableViewerCreator);
  if (showNullableColumn) {
    configureNullableColumn(tableViewerCreator);
  }
  configurePatternColumn(tableViewerCreator);
  if (showLengthColumn) {
    configureLengthColumn(tableViewerCreator);
  }
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  if (showAdditionalFieldColumn) {
    configureAdditionalFieldColumns(tableViewerCreator);
  }
  if (showPrecisionColumn) {
    configurePrecisionColumn(tableViewerCreator);
  }
  configureDefaultColumn(tableViewerCreator);
  if (showCommentColumn) {
    configureCommentColumn(tableViewerCreator);
  }
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}","@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(false);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  if (isRepository) {
    configureUsefulColumn(tableViewerCreator);
  }
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  if (showKeyColumn) {
    configureKeyColumn(tableViewerCreator);
  }
  configureTypeColumns(tableViewerCreator);
  if (showNullableColumn) {
    configureNullableColumn(tableViewerCreator);
  }
  configurePatternColumn(tableViewerCreator);
  if (showLengthColumn) {
    configureLengthColumn(tableViewerCreator);
  }
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  if (showAdditionalFieldColumn) {
    configureAdditionalFieldColumns(tableViewerCreator);
  }
  if (showPrecisionColumn) {
    configurePrecisionColumn(tableViewerCreator);
  }
  if (showDefaultColumn) {
    configureDefaultColumn(tableViewerCreator);
  }
  if (showCommentColumn) {
    configureCommentColumn(tableViewerCreator);
  }
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}",0.9668921324314704
126322,"/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}","/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}",0.9974372116863148
126323,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
126324,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
126325,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  GridData groupLayoutData=(GridData)compositeDelimitedFilePreviewButton.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  groupLayoutData=(GridData)compositeDelimitedFilePreview.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=true;
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.7107438016528925
126326,"/** 
 * fieldSeparator : Adapt Custom Label and set the field Text.
 */
protected void fieldSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  FieldSeparator seperator=FieldSeparator.getByName(fieldSeparatorCombo.getText());
  getConnection().setFieldSeparatorType(seperator);
  if (fieldSeparatorCombo.getSelectionIndex() >= 5) {
    fieldSeparatorText.setLabelText(fieldSeparatorCombo.getText());
    fieldSeparatorText.setEditable(true);
    fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
    fieldSeparatorText.forceFocus();
    fieldSeparatorText.setReadOnly(false);
  }
 else {
switch (fieldSeparatorCombo.getSelectionIndex()) {
case 0:
      fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
    break;
case 1:
  fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 2:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 3:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 4:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
default :
break;
}
getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
fieldSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
fieldSeparatorText.setReadOnly(true);
}
}","/** 
 * fieldSeparator : Adapt Custom Label and set the field Text.
 */
protected void fieldSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  FieldSeparator seperator=FieldSeparator.getByName(fieldSeparatorCombo.getText());
  getConnection().setFieldSeparatorType(seperator);
  if (fieldSeparatorCombo.getSelectionIndex() >= 5) {
    fieldSeparatorText.setLabelText(fieldSeparatorCombo.getText());
    fieldSeparatorText.setEditable(true);
    fieldSeparatorText.setText(getConnection().getFieldSeparatorValue());
    fieldSeparatorText.forceFocus();
    fieldSeparatorText.setReadOnly(false);
  }
 else {
switch (fieldSeparatorCombo.getSelectionIndex()) {
case 0:
      fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
    break;
case 1:
  fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 2:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 3:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
case 4:
fieldSeparatorText.setText(TalendQuoteUtils.addQuotes(""String_Node_Str""));
break;
default :
break;
}
getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
fieldSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
fieldSeparatorText.setReadOnly(true);
fieldSeparatorText.getTextControl().getParent().layout();
}
}",0.9787234042553192
126327,"/** 
 * rowSeparator : Adapt Custom Label and set the field Text.
 */
protected void rowSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  RowSeparator separator=RowSeparator.getByName(rowSeparatorCombo.getText());
  getConnection().setRowSeparatorType(separator);
  if (rowSeparatorCombo.getSelectionIndex() == 1) {
    rowSeparatorText.setLabelText(rowSeparatorCombo.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.forceFocus();
    rowSeparatorText.setReadOnly(false);
  }
 else {
    if (rowSeparatorCombo.getSelectionIndex() == 0) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
 else {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
    }
    rowSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.setReadOnly(true);
  }
}","/** 
 * rowSeparator : Adapt Custom Label and set the field Text.
 */
protected void rowSeparatorManager(){
  if (isContextMode()) {
    return;
  }
  RowSeparator separator=RowSeparator.getByName(rowSeparatorCombo.getText());
  getConnection().setRowSeparatorType(separator);
  if (rowSeparatorCombo.getSelectionIndex() == 1) {
    rowSeparatorText.setLabelText(rowSeparatorCombo.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.forceFocus();
    rowSeparatorText.setReadOnly(false);
  }
 else {
    if (rowSeparatorCombo.getSelectionIndex() == 0) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
 else {
        rowSeparatorText.setText(TalendQuoteUtils.QUOTATION_MARK + ""String_Node_Str"" + TalendQuoteUtils.QUOTATION_MARK);
      }
    }
    rowSeparatorText.setLabelText(Messages.getString(""String_Node_Str""));
    getConnection().setRowSeparatorValue(rowSeparatorText.getText());
    rowSeparatorText.setEditable(true);
    rowSeparatorText.setReadOnly(true);
    rowSeparatorText.getTextControl().getParent().layout();
  }
}",0.974979149291076
126328,"/** 
 * add Controls to group Escape Char.
 */
private void addFieldsListenersGroupsEscapeChar(){
  ArrayList<Button> radio2Control=new ArrayList<Button>();
  radio2Control.add(csvRadio);
  radio2Control.add(delimitedRadio);
  Iterator<Button> iButton;
  Button button;
  for (iButton=radio2Control.iterator(); iButton.hasNext(); ) {
    button=iButton.next();
    button.addSelectionListener(new SelectionListener(){
      String escapeCharComboOldValue=""String_Node_Str"";
      String textEnclosureComboOldValue=""String_Node_Str"";
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        Boolean b=!(csvRadio.getSelection());
        getConnection().setEscapeType(b ? Escape.DELIMITED : Escape.CSV);
        textEnclosureCombo.setEnabled(!b);
        escapeCharCombo.setEnabled(!b);
        splitwayRecordForJavaFID.setEnabled(b);
        if (b) {
          escapeCharComboOldValue=escapeCharCombo.getText();
          textEnclosureComboOldValue=textEnclosureCombo.getText();
          textEnclosureCombo.select(0);
          escapeCharCombo.select(0);
          textEnclosureFlag.setText(""String_Node_Str"");
          escapeCharFlag.setText(""String_Node_Str"");
          checkFieldsValue();
        }
 else {
          if ((!""String_Node_Str"".equals(escapeCharComboOldValue)) && (!escapeCharComboOldValue.equals(EMPTY_VALUE))) {
            escapeCharCombo.setText(escapeCharComboOldValue);
            setCharFlag(escapeCharFlag,escapeCharCombo.getText());
          }
          if ((!""String_Node_Str"".equals(textEnclosureComboOldValue)) && (!textEnclosureComboOldValue.equals(EMPTY_VALUE))) {
            textEnclosureCombo.setText(textEnclosureComboOldValue);
            setCharFlag(textEnclosureFlag,textEnclosureCombo.getText());
          }
        }
      }
    }
);
  }
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
      checkFieldsValue();
    }
  }
);
  escapeCharCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (escapeCharCombo.getText() != null && !(""String_Node_Str"").equals(escapeCharCombo.getText()) && !(EMPTY_VALUE).equals(escapeCharCombo.getText())) {
        getConnection().setEscapeChar(escapeCharCombo.getText());
      }
 else {
        getConnection().setEscapeChar(null);
      }
      checkFieldsValue();
    }
  }
);
  textEnclosureCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (textEnclosureCombo.getText() != null && !(""String_Node_Str"").equals(textEnclosureCombo.getText()) && !(EMPTY_VALUE).equals(textEnclosureCombo.getText())) {
        getConnection().setTextEnclosure(textEnclosureCombo.getText());
      }
 else {
        getConnection().setTextEnclosure(null);
      }
      checkFieldsValue();
    }
  }
);
}","/** 
 * add Controls to group Escape Char.
 */
private void addFieldsListenersGroupsEscapeChar(){
  ArrayList<Button> radio2Control=new ArrayList<Button>();
  radio2Control.add(csvRadio);
  radio2Control.add(delimitedRadio);
  Iterator<Button> iButton;
  Button button;
  for (iButton=radio2Control.iterator(); iButton.hasNext(); ) {
    button=iButton.next();
    button.addSelectionListener(new SelectionListener(){
      String escapeCharComboOldValue=""String_Node_Str"";
      String textEnclosureComboOldValue=""String_Node_Str"";
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
      @Override public void widgetSelected(      SelectionEvent e){
        Boolean b=!(csvRadio.getSelection());
        getConnection().setEscapeType(b ? Escape.DELIMITED : Escape.CSV);
        textEnclosureCombo.setEnabled(!b);
        escapeCharCombo.setEnabled(!b);
        splitwayRecordForJavaFID.setEnabled(b);
        if (b) {
          escapeCharComboOldValue=escapeCharCombo.getText();
          textEnclosureComboOldValue=textEnclosureCombo.getText();
          textEnclosureCombo.select(0);
          escapeCharCombo.select(0);
          textEnclosureFlag.setText(""String_Node_Str"");
          escapeCharFlag.setText(""String_Node_Str"");
          checkFieldsValue();
        }
 else {
          if ((!""String_Node_Str"".equals(escapeCharComboOldValue)) && (!escapeCharComboOldValue.equals(EMPTY_VALUE))) {
            escapeCharCombo.setText(escapeCharComboOldValue);
            setCharFlag(escapeCharFlag,escapeCharCombo.getText());
          }
          if ((!""String_Node_Str"".equals(textEnclosureComboOldValue)) && (!textEnclosureComboOldValue.equals(EMPTY_VALUE))) {
            textEnclosureCombo.setText(textEnclosureComboOldValue);
            setCharFlag(textEnclosureFlag,textEnclosureCombo.getText());
          }
        }
      }
    }
);
  }
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
      checkFieldsValue();
    }
  }
);
  escapeCharCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (escapeCharCombo.getText() != null && !(""String_Node_Str"").equals(escapeCharCombo.getText()) && !(EMPTY_VALUE).equals(escapeCharCombo.getText())) {
        getConnection().setEscapeChar(escapeCharCombo.getText());
      }
 else {
        getConnection().setEscapeChar(null);
      }
      checkFieldsValue();
    }
  }
);
  textEnclosureCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (textEnclosureCombo.getText() != null && !(""String_Node_Str"").equals(textEnclosureCombo.getText()) && !(EMPTY_VALUE).equals(textEnclosureCombo.getText())) {
        getConnection().setTextEnclosure(textEnclosureCombo.getText());
      }
 else {
        getConnection().setTextEnclosure(null);
      }
      checkFieldsValue();
    }
  }
);
}",0.9911359159553512
126329,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
126330,"/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      fieldSeparatorManager();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      rowSeparatorManager();
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparatorValue(rowSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}","/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      fieldSeparatorManager();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      rowSeparatorManager();
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparatorValue(rowSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}",0.9816176470588236
126331,"public void modifyText(final ModifyEvent e){
  getConnection().setRowSeparatorValue(rowSeparatorText.getText());
  checkFieldsValue();
}","@Override public void modifyText(final ModifyEvent e){
  getConnection().setRowSeparatorValue(rowSeparatorText.getText());
  checkFieldsValue();
}",0.9645390070921984
126332,"@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray != null) {
    delimitedFilePreview.refreshTablePreview(csvArray,firstRowIsCatption);
  }
}","@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray != null) {
    delimitedFilePreview.refreshTablePreview(csvArray,firstRowIsCatption);
  }
}",0.9917081260364844
126333,"/** 
 * add Field to Group Escape Char.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupEscapeChar(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeEscapeChar=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeEscapeChar.setLayoutData(null);
  csvRadio=new Button(compositeEscapeChar,SWT.RADIO);
  csvRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setCsvOption(csvRadio.getSelection());
      if (csvRadio.getSelection()) {
        splitwayRecordForJavaFID.setSelection(false);
        getConnection().setSplitRecord(false);
      }
    }
  }
);
  csvRadio.setText(Messages.getString(""String_Node_Str""));
  delimitedRadio=new Button(compositeEscapeChar,SWT.RADIO);
  delimitedRadio.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=2;
  delimitedRadio.setLayoutData(gridData);
  escapeCharCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),ESCAPE_CHAR_DATA,1,false,SWT.READ_ONLY);
  escapeCharFlag=new Label(compositeEscapeChar,SWT.NONE);
  escapeCharFlag.setText(""String_Node_Str"");
  textEnclosureCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),TEXT_ENCLOSURE_DATA,1,false,SWT.READ_ONLY);
  textEnclosureFlag=new Label(compositeEscapeChar,SWT.NONE);
  textEnclosureFlag.setText(""String_Node_Str"");
  splitwayRecordForJavaFID=new Button(compositeEscapeChar,SWT.CHECK);
  splitwayRecordForJavaFID.setText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.setToolTipText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSplitRecord(splitwayRecordForJavaFID.getSelection());
    }
  }
);
  String languageName=LanguageManager.getCurrentLanguage().getName();
  if (languageName.equals(""String_Node_Str"")) {
    splitwayRecordForJavaFID.setVisible(false);
  }
  splitwayRecordForJavaFIDFlag=new Label(compositeEscapeChar,SWT.NONE);
  splitwayRecordForJavaFIDFlag.setText(""String_Node_Str"");
}","/** 
 * add Field to Group Escape Char.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupEscapeChar(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),SWT.DEFAULT);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.minimumWidth=SWT.DEFAULT;
  groupLayoutData.widthHint=SWT.DEFAULT;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeEscapeChar=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeEscapeChar.setLayoutData(null);
  csvRadio=new Button(compositeEscapeChar,SWT.RADIO);
  csvRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setCsvOption(csvRadio.getSelection());
      if (csvRadio.getSelection()) {
        splitwayRecordForJavaFID.setSelection(false);
        getConnection().setSplitRecord(false);
      }
    }
  }
);
  csvRadio.setText(Messages.getString(""String_Node_Str""));
  delimitedRadio=new Button(compositeEscapeChar,SWT.RADIO);
  delimitedRadio.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=2;
  delimitedRadio.setLayoutData(gridData);
  escapeCharCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),ESCAPE_CHAR_DATA,1,false,SWT.READ_ONLY);
  escapeCharFlag=new Label(compositeEscapeChar,SWT.NONE);
  escapeCharFlag.setText(""String_Node_Str"");
  textEnclosureCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),TEXT_ENCLOSURE_DATA,1,false,SWT.READ_ONLY);
  textEnclosureFlag=new Label(compositeEscapeChar,SWT.NONE);
  textEnclosureFlag.setText(""String_Node_Str"");
  splitwayRecordForJavaFID=new Button(compositeEscapeChar,SWT.CHECK);
  splitwayRecordForJavaFID.setText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.setToolTipText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSplitRecord(splitwayRecordForJavaFID.getSelection());
    }
  }
);
  String languageName=LanguageManager.getCurrentLanguage().getName();
  if (languageName.equals(""String_Node_Str"")) {
    splitwayRecordForJavaFID.setVisible(false);
  }
  splitwayRecordForJavaFIDFlag=new Label(compositeEscapeChar,SWT.NONE);
  splitwayRecordForJavaFIDFlag.setText(""String_Node_Str"");
}",0.9744152046783626
126334,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  GridData groupLayoutData=(GridData)compositeDelimitedFilePreviewButton.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  groupLayoutData=(GridData)compositeDelimitedFilePreview.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=true;
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,SWT.DEFAULT,SWT.DEFAULT);
  GridData groupLayoutData=(GridData)compositeDelimitedFilePreviewButton.getLayoutData();
  groupLayoutData.grabExcessVerticalSpace=false;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,SWT.DEFAULT,SWT.DEFAULT);
  groupLayoutData=(GridData)compositeDelimitedFilePreview.getLayoutData();
  groupLayoutData.grabExcessVerticalSpace=true;
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.6242487046632125
126335,"/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeLimit.setLayoutData(null);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}","/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),SWT.DEFAULT);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.minimumWidth=SWT.DEFAULT;
  groupLayoutData.widthHint=SWT.DEFAULT;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeLimit.setLayoutData(null);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}",0.9128397375820057
126336,"/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeFileDelimitor.setLayoutData(null);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  group.pack();
}","/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),SWT.DEFAULT);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.minimumWidth=SWT.DEFAULT;
  groupLayoutData.widthHint=SWT.DEFAULT;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeFileDelimitor.setLayoutData(null);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  group.pack();
}",0.9719438877755512
126337,"private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  compositeRowsToSkip.setLayoutData(null);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
}","private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),SWT.DEFAULT);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.minimumWidth=SWT.DEFAULT;
  groupLayoutData.widthHint=SWT.DEFAULT;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  compositeRowsToSkip.setLayoutData(null);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
}",0.9384513567174056
126338,"public static void process(Throwable ex,Priority priority){
  CommonExceptionHandler.process(ex,priority);
  if (priority == Level.FATAL) {
    ExceptionService service=CommonsPlugin.getDefault().getExceptionService();
    if (service != null) {
      service.showExceptionInMessgeBox(ex);
    }
  }
}","public static void process(Throwable ex,Priority priority){
  CommonExceptionHandler.process(ex,priority);
  if (priority == Level.FATAL && !CommonsPlugin.isHeadless()) {
    ExceptionService service=CommonsPlugin.getDefault().getExceptionService();
    if (service != null) {
      service.showExceptionInMessgeBox(ex);
    }
  }
}",0.9510268562401264
126339,"@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(false);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  if (isRepository) {
    configureUsefulColumn(tableViewerCreator);
  }
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  if (showKeyColumn) {
    configureKeyColumn(tableViewerCreator);
  }
  configureTypeColumns(tableViewerCreator);
  if (showNullableColumn) {
    configureNullableColumn(tableViewerCreator);
  }
  configurePatternColumn(tableViewerCreator);
  if (showLengthColumn) {
    configureLengthColumn(tableViewerCreator);
  }
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  if (showAdditionalFieldColumn) {
    configureAdditionalFieldColumns(tableViewerCreator);
  }
  if (showPrecisionColumn) {
    configurePrecisionColumn(tableViewerCreator);
  }
  configureDefaultColumn(tableViewerCreator);
  if (showCommentColumn) {
    configureCommentColumn(tableViewerCreator);
  }
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}","@Override protected void createColumns(TableViewerCreator<B> tableViewerCreator,Table table){
  tableViewerCreator.setReadOnly(false);
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setDefaultInternalValue(""String_Node_Str"");
  column.setWidth(15);
  if (isRepository) {
    configureUsefulColumn(tableViewerCreator);
  }
  configureNameColumn(tableViewerCreator);
  if (showDbColumnName) {
    configureDbColumnName(tableViewerCreator);
  }
  if (showKeyColumn) {
    configureKeyColumn(tableViewerCreator);
  }
  configureTypeColumns(tableViewerCreator);
  if (showNullableColumn) {
    configureNullableColumn(tableViewerCreator);
  }
  configurePatternColumn(tableViewerCreator);
  if (showLengthColumn) {
    configureLengthColumn(tableViewerCreator);
  }
  if (showOriginalLength) {
    configureOriginalLengthColumn(tableViewerCreator);
  }
  if (showAdditionalFieldColumn) {
    configureAdditionalFieldColumns(tableViewerCreator);
  }
  if (showPrecisionColumn) {
    configurePrecisionColumn(tableViewerCreator);
  }
  if (showDefaultColumn) {
    configureDefaultColumn(tableViewerCreator);
  }
  if (showCommentColumn) {
    configureCommentColumn(tableViewerCreator);
  }
  if (PluginChecker.isDatacertPluginLoaded()) {
    configureRelationshipType(tableViewerCreator);
    configureRelatedEntity(tableViewerCreator);
  }
}",0.9668921324314704
126340,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.958451906659078
126341,"private void init() throws BiffException, IOException {
  if (!isXlsx) {
    WorkbookSettings worksetting=new WorkbookSettings();
    worksetting.setCellValidationDisabled(true);
    worksetting.setSuppressWarnings(true);
    workbook=Workbook.getWorkbook(new File(excelPath),worksetting);
  }
 else {
    File file=new File(excelPath);
    OPCPackage clone=null;
    try {
      FileInputStream in=new FileInputStream(file);
      OPCPackage open=OPCPackage.open(in);
      clone=PackageHelper.clone(open,PackageHelper.createTempFile());
      open.close();
    }
 catch (    InvalidFormatException e) {
      e.printStackTrace();
    }
catch (    OpenXML4JException e) {
      e.printStackTrace();
    }
    if (clone != null) {
      List<String> sheetlist=new ArrayList<String>();
      if (isXlsx && (EVENT_MODE).equals(generationMode)) {
        try {
          XSSFReader xssfReader=new XSSFReader(clone);
          XSSFReader.SheetIterator sheets=(XSSFReader.SheetIterator)xssfReader.getSheetsData();
          while (sheets.hasNext()) {
            sheets.next();
            String sheetName=sheets.getSheetName();
            sheetlist.add(sheetName);
          }
        }
 catch (        OpenXML4JException e) {
          CommonExceptionHandler.process(e);
        }
      }
 else {
        xwb=new XSSFWorkbook(clone);
        for (        XSSFSheet sheet : xwb) {
          sheetlist.add(sheet.getSheetName());
        }
      }
      sheetNamesForXlsx=new String[sheetlist.size()];
      for (int i=0; i < sheetlist.size(); i++) {
        sheetNamesForXlsx[i]=sheetlist.get(i);
      }
      sheetlist.clear();
    }
  }
}","private void init() throws BiffException, IOException {
  if (!isXlsx) {
    WorkbookSettings worksetting=new WorkbookSettings();
    worksetting.setCellValidationDisabled(true);
    worksetting.setSuppressWarnings(true);
    workbook=Workbook.getWorkbook(new File(excelPath),worksetting);
  }
 else {
    File file=new File(excelPath);
    OPCPackage clone=null;
    try {
      FileInputStream in=new FileInputStream(file);
      OPCPackage open=OPCPackage.open(in);
      clone=PackageHelper.clone(open,createTempFile());
      open.close();
    }
 catch (    InvalidFormatException e) {
      e.printStackTrace();
    }
catch (    OpenXML4JException e) {
      e.printStackTrace();
    }
    if (clone != null) {
      List<String> sheetlist=new ArrayList<String>();
      if (isXlsx && (EVENT_MODE).equals(generationMode)) {
        try {
          XSSFReader xssfReader=new XSSFReader(clone);
          XSSFReader.SheetIterator sheets=(XSSFReader.SheetIterator)xssfReader.getSheetsData();
          while (sheets.hasNext()) {
            sheets.next();
            String sheetName=sheets.getSheetName();
            sheetlist.add(sheetName);
          }
        }
 catch (        OpenXML4JException e) {
          CommonExceptionHandler.process(e);
        }
      }
 else {
        xwb=new XSSFWorkbook(clone);
        for (        XSSFSheet sheet : xwb) {
          sheetlist.add(sheet.getSheetName());
        }
      }
      sheetNamesForXlsx=new String[sheetlist.size()];
      for (int i=0; i < sheetlist.size(); i++) {
        sheetNamesForXlsx[i]=sheetlist.get(i);
      }
      sheetlist.clear();
    }
  }
}",0.9957081545064378
126342,"/** 
 * <p> Set JDBC properties to the hive db connection. </p> DOC ycbai Comment method ""setHiveJDBCProperties"".
 * @param metadataConn
 * @param dbConn
 */
private void setHiveJDBCProperties(IMetadataConnection metadataConn,Connection dbConn){
  if (metadataConn == null || dbConn == null) {
    return;
  }
  String jdbcPropertiesStr=String.valueOf(metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES));
  List<Map<String,Object>> jdbcProperties=HadoopRepositoryUtil.getHadoopPropertiesList(jdbcPropertiesStr);
  Statement statement=null;
  try {
    statement=dbConn.createStatement();
    for (    Map<String,Object> propMap : jdbcProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        statement.execute(""String_Node_Str"" + key + ""String_Node_Str""+ value);
      }
    }
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
}","/** 
 * <p> Set JDBC properties to the hive db connection. </p> DOC ycbai Comment method ""setHiveJDBCProperties"".
 * @param metadataConn
 * @param dbConn
 */
private void setHiveJDBCProperties(IMetadataConnection metadataConn,Connection dbConn){
  if (metadataConn == null || dbConn == null) {
    return;
  }
  Object jdbcPropertiesObj=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
  if (jdbcPropertiesObj == null) {
    return;
  }
  String jdbcPropertiesStr=String.valueOf(jdbcPropertiesObj);
  List<Map<String,Object>> jdbcProperties=HadoopRepositoryUtil.getHadoopPropertiesList(jdbcPropertiesStr);
  Statement statement=null;
  try {
    statement=dbConn.createStatement();
    for (    Map<String,Object> propMap : jdbcProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        statement.execute(""String_Node_Str"" + key + ""String_Node_Str""+ value);
      }
    }
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9344945096554336
126343,"public static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  boolean hasSchemaInCatalog=false;
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else   if (s == null && c == null && !isAccess) {
    fillCatalogAndSchemas(iMetadataConnection,connection);
    addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection);
    }
  }
}","private static void addTableForTemCatalogOrSchema(String dbsid,String schema,DatabaseConnection connection,MetadataTable dbtable,IMetadataConnection iMetadataConnection,int stackCount) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  if (3 < stackCount) {
    return;
  }
  boolean hasSchemaInCatalog=false;
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(iMetadataConnection.getDbType());
  Catalog c=(Catalog)ConnectionHelper.getPackage(dbsid,connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(schema,connection,Schema.class);
  List<Schema> subschemas=new ArrayList<Schema>();
  if (c != null) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
  }
  if (c != null && s == null && !hasSchemaInCatalog) {
    PackageHelper.addMetadataTable(dbtable,c);
  }
 else   if (s != null && !hasSchemaInCatalog && c == null) {
    PackageHelper.addMetadataTable(dbtable,s);
  }
 else   if (c != null && hasSchemaInCatalog) {
    subschemas=CatalogHelper.getSchemas(c);
    hasSchemaInCatalog=subschemas.size() > 0;
    if (subschemas.size() > 0) {
      for (      Schema current : subschemas) {
        if (current.getName().equals(schema)) {
          s=current;
          break;
        }
      }
      if (s != null) {
        if (s instanceof SchemaImpl) {
          SchemaImpl schemaElement=(SchemaImpl)s;
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
 else       if (subschemas.size() > 0) {
        for (int i=0; i < subschemas.size(); i++) {
          SchemaImpl schemaElement=(SchemaImpl)subschemas.get(i);
          EList<ModelElement> ownedElement=schemaElement.getOwnedElement();
          ownedElement.add(dbtable);
        }
      }
    }
  }
 else   if (s == null && c == null && !isAccess && stackCount == 1) {
    fillCatalogAndSchemas(iMetadataConnection,connection);
    addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection,stackCount + 1);
  }
 else {
    ProjectNodeHelper.addCatalogOrSchema(iMetadataConnection,connection);
    if (isAccess) {
      addTableForTemCatalogOrSchema(dbsid,connection.getName(),connection,dbtable,iMetadataConnection,stackCount + 1);
    }
 else {
      addTableForTemCatalogOrSchema(dbsid,schema,connection,dbtable,iMetadataConnection,stackCount + 1);
    }
  }
}",0.972837442540744
126344,"private void checkConnection(StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
      if (!isContextMode()) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
    }
  }
  ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  if (dbType.isUseProvider()) {
    IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    databaseSettingIsValide=managerConnection.check(metadataConn,retProposedSchema);
  }
 else   if (isHiveDBConnSelected()) {
    IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    databaseSettingIsValide=managerConnection.checkHiveConnection(metadataConn);
  }
 else {
    databaseSettingIsValide=managerConnection.check(retProposedSchema);
  }
  checkButton.setEnabled(true);
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
  }
}","private void checkConnection(StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
      if (!isContextMode()) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
    }
  }
  ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  if (dbType.isUseProvider()) {
    IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    databaseSettingIsValide=managerConnection.check(metadataConn,retProposedSchema);
  }
 else   if (isHiveDBConnSelected()) {
    IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    databaseSettingIsValide=managerConnection.checkHiveConnection(metadataConn);
  }
 else {
    databaseSettingIsValide=managerConnection.check(retProposedSchema);
  }
  checkButton.setEnabled(true);
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
  }
}",0.9732161540071144
126345,"private RepositoryNode getAndStoreTopLevelNode(RepositoryNode repositoryNode){
  RepositoryNode aTopLevelNode=getInitialTopLevelNode(repositoryNode);
  if (aTopLevelNode != null) {
    boolean isNewTopLevel=topLevelNodes.add(aTopLevelNode);
    if (isNewTopLevel) {
      initilizeContentProviderWithTopLevelNode(aTopLevelNode);
    }
  }
  return aTopLevelNode;
}","protected RepositoryNode getAndStoreTopLevelNode(RepositoryNode repositoryNode){
  RepositoryNode aTopLevelNode=getInitialTopLevelNode(repositoryNode);
  if (aTopLevelNode != null) {
    boolean isNewTopLevel=topLevelNodes.add(aTopLevelNode);
    if (isNewTopLevel) {
      initilizeContentProviderWithTopLevelNode(aTopLevelNode);
    }
  }
  return aTopLevelNode;
}",0.9835616438356164
126346,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getInstance().getDriverClassByDbType(connection.getDatabaseType());
      if (EDatabaseTypeName.VERTICA.equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(connection.getDbVersionString()) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(connection.getDbVersionString()) || EDatabaseVersion4Drivers.VERTICA_6_1_X.getVersionValue().equals(connection.getDbVersionString())|| EDatabaseVersion4Drivers.VERTICA_7.getVersionValue().equals(connection.getDbVersionString()))) {
        driverClass=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
      ((DatabaseConnection)connectionItem.getConnection()).setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    if (!connection.isContextMode()) {
      handleUppercase(connection,metadataConnection);
    }
    try {
      if (creation) {
        handleCreation(connection,metadataConnection,tdqRepService);
      }
 else {
        Boolean isSuccess=handleUpdate(metadataConnection,tdqRepService);
        if (!isSuccess) {
          return false;
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      if (creation) {
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.openConnectionEditor(connectionItem);
      }
 else {
        tdqRepService.updateAliasInSQLExplorer(connectionItem,originaleObjectLabel);
        tdqRepService.refreshConnectionEditor(connectionItem);
      }
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.refresh(node.getParent());
      }
    }
    refreshHadoopCluster();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
@Override public boolean performFinish(){
  if (databaseWizardPage.isPageComplete()) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    if (dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=ExtractMetaDataUtils.getInstance().getDriverClassByDbType(connection.getDatabaseType());
      DatabaseConnection dbConnection=(DatabaseConnection)connectionItem.getConnection();
      if (EDatabaseTypeName.VERTICA.equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(connection.getDbVersionString()) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(connection.getDbVersionString()) || EDatabaseVersion4Drivers.VERTICA_6_1_X.getVersionValue().equals(connection.getDbVersionString())|| EDatabaseVersion4Drivers.VERTICA_7.getVersionValue().equals(connection.getDbVersionString()))) {
        driverClass=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
      if (EDatabaseTypeName.IMPALA.equals(dbType)) {
        String distributionName=dbConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
        EImpalaDistributions distribution=EImpalaDistributions.getDistributionByName(distributionName,false);
        if (null != distribution && EImpalaDistributions.CUSTOM != distribution) {
          dbConnection.setDbVersionString(dbConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION));
        }
      }
      dbConnection.setDriverClass(driverClass);
    }
    String contextName=null;
    if (databaseWizardPage.getSelectedContextType() != null) {
      contextName=databaseWizardPage.getSelectedContextType().getName();
    }
    IMetadataConnection metadataConnection=null;
    if (contextName == null) {
      metadataConnection=ConvertionHelper.convert(connection,true);
    }
 else {
      metadataConnection=ConvertionHelper.convert(connection,false,contextName);
    }
    ITDQRepositoryService tdqRepService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    }
    if (!connection.isContextMode()) {
      handleUppercase(connection,metadataConnection);
    }
    try {
      if (creation) {
        handleCreation(connection,metadataConnection,tdqRepService);
      }
 else {
        Boolean isSuccess=handleUpdate(metadataConnection,tdqRepService);
        if (!isSuccess) {
          return false;
        }
      }
    }
 catch (    Exception e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
    list.add(repositoryObject);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      service.notifySQLBuilder(list);
    }
    if (tdqRepService != null) {
      if (creation) {
        tdqRepService.notifySQLExplorer(connectionItem);
        tdqRepService.openConnectionEditor(connectionItem);
      }
 else {
        tdqRepService.updateAliasInSQLExplorer(connectionItem,originaleObjectLabel);
        tdqRepService.refreshConnectionEditor(connectionItem);
      }
      if (CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
        tdqRepService.refresh(node.getParent());
      }
    }
    refreshHadoopCluster();
    return true;
  }
 else {
    return false;
  }
}",0.9099863201094393
126347,"public static MetadataTable getMetadataTableFromRepository(String metaRepositoryId){
  org.talend.core.model.metadata.builder.connection.Connection connection;
  String[] names=metaRepositoryId.split(""String_Node_Str"");
  if (names.length < 2) {
    return null;
  }
  String linkedRepository=names[0];
  String tableName=null;
  if (names.length == 2) {
    tableName=names[1];
  }
 else   if (names.length > 2) {
    tableName=metaRepositoryId.substring(linkedRepository.length() + 3);
  }
  connection=getConnectionFromRepository(linkedRepository);
  if (connection != null) {
    if (connection instanceof SAPConnection) {
      return getMetadataTableFromSAPFunction((SAPConnection)connection,metaRepositoryId);
    }
    Set tables=ConnectionHelper.getTables(connection);
    for (    Object tableObj : tables) {
      MetadataTable table=(MetadataTable)tableObj;
      if (table.getLabel().equals(tableName)) {
        return table;
      }
    }
  }
  return null;
}","public static MetadataTable getMetadataTableFromRepository(String metaRepositoryId){
  org.talend.core.model.metadata.builder.connection.Connection connection;
  String[] names=metaRepositoryId.split(""String_Node_Str"");
  if (names.length < 2) {
    return null;
  }
  String linkedRepository=names[0];
  String tableName=null;
  if (names.length == 2) {
    tableName=names[1];
  }
 else   if (names.length > 2) {
    tableName=metaRepositoryId.substring(linkedRepository.length() + 3);
  }
  connection=getConnectionFromRepository(linkedRepository);
  if (connection != null) {
    if (connection instanceof SAPConnection) {
      if (tableName == null) {
        return null;
      }
      if (tableName.contains(""String_Node_Str"")) {
        return getMetadataTableFromSAPFunction((SAPConnection)connection,metaRepositoryId);
      }
    }
    Set tables=ConnectionHelper.getTables(connection);
    for (    Object tableObj : tables) {
      MetadataTable table=(MetadataTable)tableObj;
      if (table.getLabel().equals(tableName)) {
        return table;
      }
    }
  }
  return null;
}",0.9415176413726438
126348,"/** 
 * Add a group of child to the tree node.
 * @param children
 */
public void addChild(Object[] children){
  for (  Object element : children) {
    this.children.add(element);
    ((ATreeNode)element).setNodeParent(this);
  }
}","/** 
 * Add a group of child to the tree node.
 * @param children
 */
public void addChild(Object[] children){
  for (  Object element : children) {
    addChild(element);
  }
}",0.8459657701711492
126349,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          boolean namespaceFoundInParent=false;
          ATreeNode node=parentNode;
          do {
            for (            Object child : node.getChildren()) {
              if (child instanceof ATreeNode) {
                ATreeNode childNode=(ATreeNode)child;
                if (childNode.getType() == ATreeNode.NAMESPACE_TYPE && namespace.equals(childNode.getValue())) {
                  namespaceFoundInParent=true;
                  break;
                }
              }
            }
            node=node.getParent();
          }
 while (node != null && !namespaceFoundInParent);
          if (!namespaceFoundInParent) {
            ATreeNode namespaceNode=new ATreeNode();
            namespaceNode.setDataType(""String_Node_Str"");
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            partNode.addChild(namespaceNode);
          }
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=typeDef;
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException, IllegalAccessException, InvocationTargetException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    if (particleToTreeNode.containsKey(xsdElementDeclarationParticle)) {
      ATreeNode originalTreeNode=particleToTreeNode.get(xsdElementDeclarationParticle);
      ATreeNode partNode=new ATreeNode();
      partNode.setCurrentNamespace(originalTreeNode.getCurrentNamespace());
      partNode.setValue(originalTreeNode.getValue());
      partNode.setType(ATreeNode.ELEMENT_TYPE);
      partNode.setDataType(originalTreeNode.getDataType());
      partNode.addChild(originalTreeNode.getChildren());
      parentNode.addChild(partNode);
      return;
    }
    ATreeNode partNode=new ATreeNode();
    particleToTreeNode.put(xsdElementDeclarationParticle,partNode);
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (typeDef == null) {
      XSDSchema schemaFromNamespace=getXSDSchemaFromNamespace(namespace);
      if (schemaFromNamespace == null) {
        schemaFromNamespace=xsdSchema;
      }
      xsdElementDeclarationParticle=schemaFromNamespace.resolveElementDeclarationURI(xsdElementDeclarationParticle.getURI());
      typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    }
    String typeNamespace=typeDef.getTargetNamespace();
    if (typeNamespace != null && !typeNamespace.equals(namespace)) {
      XSDSchema schemaOfType=getXSDSchemaFromNamespace(typeNamespace);
      if (schemaOfType != null) {
        XSDTypeDefinition typeDefinition=schemaOfType.resolveComplexTypeDefinitionURI(typeDef.getURI());
        if (typeDefinition != null && typeDefinition.getContainer() != null) {
          typeDef=typeDefinition;
        }
      }
    }
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          boolean namespaceFoundInParent=false;
          ATreeNode node=parentNode;
          Set<ATreeNode> checkedNodes=new HashSet<ATreeNode>();
          do {
            for (            Object child : node.getChildren()) {
              if (child instanceof ATreeNode) {
                ATreeNode childNode=(ATreeNode)child;
                if (childNode.getType() == ATreeNode.NAMESPACE_TYPE && namespace.equals(childNode.getValue())) {
                  namespaceFoundInParent=true;
                  break;
                }
              }
            }
            checkedNodes.add(node);
            node=node.getParent();
          }
 while (node != null && !namespaceFoundInParent && !checkedNodes.contains(node));
          if (!namespaceFoundInParent) {
            ATreeNode namespaceNode=new ATreeNode();
            namespaceNode.setDataType(""String_Node_Str"");
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            partNode.addChild(namespaceNode);
          }
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      XSDTypeDefinition xsdTypeDefinition=typeDef;
      String path=currentPath + elementName + ""String_Node_Str"";
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        partNode.setDataType(xsdTypeDefinition.getQName());
      }
      addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (!XSDConstants.isSchemaForSchemaNamespace(xsdElementDeclarationParticle.getTypeDefinition().getTargetNamespace()) && xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
    handleOptionalAttribute(partNode,xsdParticle);
    addSubstitutionDetails(xsdSchema,partNode,xsdElementDeclarationParticle,null);
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    ATreeNode node=addChoiceDetails(parentNode,xsdModelGroup);
    handleOptionalAttribute(node,xsdParticle);
    for (    Object element : xsdModelGroup.getParticles()) {
      XSDParticle childParticle=(XSDParticle)element;
      addParticleDetail(xsdSchema,childParticle,node,currentPath);
    }
  }
}",0.9757922535211268
126350,"/** 
 * DOC wchen Comment method ""createMetadataFromXSD"".
 * @param parameter
 * @param connectionLabel
 * @param portTypeName
 * @param operationName
 * @param schemaFile
 * @param selectItems
 * @param zip
 * @param populationUtil
 * @throws IOException
 */
public static void createMetadataFromXSD(QName parameter,String connectionLabel,String portTypeName,String operationName,File schemaFile,Collection<XmlFileConnectionItem> selectItems,File zip,XSDPopulationUtil2 populationUtil) throws IOException {
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (!selectItems.isEmpty()) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite && !isNameValidInXmlFileConnection(parameter,portTypeName,operationName)) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(connectionLabel);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(zip);
  connection.setFileContent(byteArray.getInnerContent());
  String schemaFileName=schemaFile.getName();
  schemaFileName=schemaFileName.substring(0,schemaFileName.lastIndexOf(""String_Node_Str""));
  connection.setXmlFilePath(schemaFileName.concat(""String_Node_Str"").concat(zip.getName()));
  try {
    String filePath=schemaFile.getPath();
    XSDSchema xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=getImportedXmlSchemaPath(parameter.getNamespaceURI(),portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * DOC wchen Comment method ""createMetadataFromXSD"".
 * @param parameter
 * @param connectionLabel
 * @param portTypeName
 * @param operationName
 * @param schemaFile
 * @param selectItems
 * @param zip
 * @param populationUtil
 * @throws IOException
 */
public static void createMetadataFromXSD(QName parameter,String connectionLabel,String portTypeName,String operationName,File schemaFile,Collection<XmlFileConnectionItem> selectItems,File zip,XSDPopulationUtil2 populationUtil) throws IOException {
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (!selectItems.isEmpty()) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite && !isNameValidInXmlFileConnection(parameter,portTypeName,operationName)) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(connectionLabel);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(zip);
  connection.setFileContent(byteArray.getInnerContent());
  String schemaFileName=schemaFile.getName();
  schemaFileName=schemaFileName.substring(0,schemaFileName.lastIndexOf(""String_Node_Str""));
  connection.setXmlFilePath(schemaFileName.concat(""String_Node_Str"").concat(zip.getName()));
  try {
    String filePath=schemaFile.getPath();
    XSDSchema xsdSchema=populationUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    List<FOXTreeNode> foxTreeNodes=TreeUtil.getFoxTreeNodesByRootNode(xsdSchema,node,true);
    if (foxTreeNodes.size() > 0 && false) {
      FOXTreeNode foxTreeNode=foxTreeNodes.get(0);
      EList root=connection.getRoot();
      if (root != null) {
        XMLFileNode xmlFileNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
        String currentPath=""String_Node_Str"" + foxTreeNode.getLabel();
        xmlFileNode.setXMLPath(currentPath);
        xmlFileNode.setRelatedColumn(foxTreeNode.getColumnLabel());
        xmlFileNode.setAttribute(foxTreeNode.isMain() ? ""String_Node_Str"" : ""String_Node_Str"");
        xmlFileNode.setDefaultValue(foxTreeNode.getDefaultValue());
        xmlFileNode.setType(foxTreeNode.getDataType());
        XMLFileNode originalXmlNode=null;
        if (root.size() > 0) {
          originalXmlNode=(XMLFileNode)root.get(0);
        }
        root.clear();
        root.add(xmlFileNode);
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=getImportedXmlSchemaPath(parameter.getNamespaceURI(),portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}",0.9222746461385648
126351,"private static void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop){
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + '/' + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
  MetadataTable metadataTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
String uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
fillRootInfo(connection,(ATreeNode)curNode,path + '/' + node.getValue(),subElementsInLoop);
}
}
}","private static void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop){
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + '/' + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
  MetadataTable metadataTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
String uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
if (!path.contains((String)node.getValue())) {
fillRootInfo(connection,(ATreeNode)curNode,path + '/' + node.getValue(),subElementsInLoop);
}
}
}
}",0.990791204660778
126352,"/** 
 * wzhang Comment method ""addChild"".
 * @param index
 * @param child
 */
public void addChild(int index,FOXTreeNode child){
  if (index < children.size()) {
    children.add(index,child);
  }
 else {
    children.add(child);
  }
  child.setParent(this);
}","/** 
 * wzhang Comment method ""addChild"".
 * @param index
 * @param child
 */
public void addChild(int index,FOXTreeNode child){
  if (index < children.size() && index > 0) {
    children.add(index,child);
  }
 else {
    children.add(child);
  }
  child.setParent(this);
}",0.975609756097561
126353,"private static void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop){
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + '/' + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
  MetadataTable metadataTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
String uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
if (!path.contains((String)node.getValue())) {
fillRootInfo(connection,(ATreeNode)curNode,path + '/' + node.getValue(),subElementsInLoop);
}
}
}
}","private static void fillRootInfo(XmlFileConnection connection,ATreeNode node,String path,boolean inLoop){
  XMLFileNode xmlNode=ConnectionFactory.eINSTANCE.createXMLFileNode();
  xmlNode.setXMLPath(path + '/' + node.getValue());
  xmlNode.setOrder(orderId);
  orderId++;
  MappingTypeRetriever retriever;
  String nameWithoutPrefixForColumn;
  String curName=(String)node.getValue();
  if (curName.contains(""String_Node_Str"")) {
    nameWithoutPrefixForColumn=curName.split(""String_Node_Str"")[1];
  }
 else {
    nameWithoutPrefixForColumn=curName;
  }
  retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  xmlNode.setAttribute(""String_Node_Str"");
  xmlNode.setType(retriever.getDefaultSelectedTalendType(node.getDataType()));
  MetadataColumn column=null;
  MetadataTable metadataTable=ConnectionHelper.getTables(connection).toArray(new MetadataTable[0])[0];
switch (node.getType()) {
case ATreeNode.ATTRIBUTE_TYPE:
    xmlNode.setXMLPath(""String_Node_Str"" + node.getValue());
  column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
String uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
break;
case ATreeNode.ELEMENT_TYPE:
boolean haveElementOrAttributes=false;
for (Object curNode : node.getChildren()) {
if (((ATreeNode)curNode).getType() != ATreeNode.NAMESPACE_TYPE) {
haveElementOrAttributes=true;
break;
}
}
if (!haveElementOrAttributes) {
xmlNode.setAttribute(""String_Node_Str"");
column=ConnectionFactory.eINSTANCE.createMetadataColumn();
column.setTalendType(xmlNode.getType());
uniqueName=extractColumnName(nameWithoutPrefixForColumn,metadataTable.getColumns());
column.setLabel(uniqueName);
xmlNode.setRelatedColumn(uniqueName);
metadataTable.getColumns().add(column);
}
 else {
xmlNode.setAttribute(""String_Node_Str"");
}
break;
case ATreeNode.NAMESPACE_TYPE:
xmlNode.setAttribute(""String_Node_Str"");
xmlNode.setXMLPath(node.getDataType());
xmlNode.setDefaultValue((String)node.getValue());
break;
case ATreeNode.OTHER_TYPE:
break;
}
boolean subElementsInLoop=inLoop;
if ((!loopElementFound && path.split(""String_Node_Str"").length == 2 && node.getType() == ATreeNode.ELEMENT_TYPE) || subElementsInLoop) {
connection.getLoop().add(xmlNode);
loopElementFound=true;
subElementsInLoop=true;
}
 else {
connection.getRoot().add(xmlNode);
}
if (node.getChildren().length > 0) {
for (Object curNode : node.getChildren()) {
if (!path.contains(""String_Node_Str"" + (String)node.getValue() + ""String_Node_Str"")) {
fillRootInfo(connection,(ATreeNode)curNode,path + '/' + node.getValue(),subElementsInLoop);
}
}
}
}",0.9926062846580408
126354,"/** 
 * wzhang Comment method ""addChild"".
 * @param index
 * @param child
 */
public void addChild(int index,FOXTreeNode child){
  if (index < children.size() && index > 0) {
    children.add(index,child);
  }
 else {
    children.add(child);
  }
  child.setParent(this);
}","/** 
 * wzhang Comment method ""addChild"".
 * @param index
 * @param child
 */
public void addChild(int index,FOXTreeNode child){
  if (index < children.size() && index >= 0) {
    children.add(index,child);
  }
 else {
    children.add(child);
  }
  child.setParent(this);
}",0.9981718464351006
126355,"/** 
 * DOC cmeng Comment method ""doVaribleReplace"".
 * @param oldName
 * @param newName
 * @param value
 * @param functionNameAreas
 * @param vStart
 * @param vEnd
 */
private static String doVaribleReplace(String oldName,String newName,String value,List<Point> functionNameAreas,int vStart,int vEnd){
  StringBuffer replacedString=new StringBuffer();
  int replaceableStart=vStart;
  int replaceableEnd=vEnd;
  for (  Point functionNameArea : functionNameAreas) {
    if (vEnd <= functionNameArea.x) {
      break;
    }
    if (functionNameArea.y <= vStart) {
      continue;
    }
    if (replaceableStart < functionNameArea.x) {
      replaceableEnd=functionNameArea.x;
      String replaceableString=value.substring(replaceableStart,replaceableEnd);
      replacedString.append(doReplace(oldName,newName,replaceableString));
      replacedString.append(value.substring(functionNameArea.x,functionNameArea.y));
    }
 else {
      replacedString.append(value.substring(functionNameArea.x,functionNameArea.y));
    }
    replaceableStart=functionNameArea.y;
  }
  if (replaceableStart < vEnd) {
    String replaceableString=value.substring(replaceableStart,vEnd);
    replacedString.append(doReplace(oldName,newName,replaceableString));
  }
  return replacedString.toString();
}","/** 
 * DOC cmeng Comment method ""doVaribleReplace"".
 * @param oldName
 * @param newName
 * @param value
 * @param functionNameAreas
 * @param vStart
 * @param vEnd
 */
private static String doVaribleReplace(String oldName,String newName,String value,List<Point> functionNameAreas,int vStart,int vEnd){
  if (value.trim().isEmpty()) {
    return value;
  }
  StringBuffer replacedString=new StringBuffer();
  int replaceableStart=vStart;
  int replaceableEnd=vEnd;
  for (  Point functionNameArea : functionNameAreas) {
    if (vEnd <= functionNameArea.x) {
      break;
    }
    if (functionNameArea.y <= vStart) {
      continue;
    }
    if (replaceableStart < functionNameArea.x) {
      replaceableEnd=functionNameArea.x;
      String replaceableString=value.substring(replaceableStart,replaceableEnd);
      replacedString.append(doReplace(oldName,newName,replaceableString));
      replacedString.append(doReplace(oldName,newName,value.substring(functionNameArea.x,functionNameArea.y)));
    }
 else {
      replacedString.append(doReplace(oldName,newName,value.substring(functionNameArea.x,functionNameArea.y)));
    }
    replaceableStart=functionNameArea.y;
  }
  if (replaceableStart < vEnd) {
    String replaceableString=value.substring(replaceableStart,vEnd);
    replacedString.append(doReplace(oldName,newName,replaceableString));
  }
  return replacedString.toString();
}",0.9595808383233532
126356,"private static String doReplace(String oldName,String newName,String value){
  String vOldName=oldName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String regex=""String_Node_Str"" + vOldName + ""String_Node_Str""+ vOldName+ ""String_Node_Str"";
  String[] split=value.split(regex);
  Map<String,String> replacedStrings=new HashMap<String,String>();
  StringBuffer returnValue=new StringBuffer();
  for (  String s : split) {
    if (s.contains(oldName)) {
      replacedStrings.put(s,s.replaceAll(""String_Node_Str"" + oldName + ""String_Node_Str"",newName));
    }
 else {
      replacedStrings.put(s,s);
    }
  }
  if (split.length == 1) {
    returnValue.append(replacedStrings.get(split[0]));
  }
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(value);
  if (matcher.find()) {
    int x=matcher.start();
    int y=matcher.end();
    int curPos=0;
    int valueLength=value.length();
    String oldFill=null;
    String newFill=null;
    while (true) {
      if (curPos == valueLength) {
        break;
      }
      if (curPos < x) {
        oldFill=value.substring(curPos,x);
        if ((newFill=replacedStrings.get(oldFill)) != null) {
          returnValue.append(newFill);
        }
 else {
          returnValue.append(oldFill);
        }
        curPos=x;
        continue;
      }
      returnValue.append(matcher.group());
      curPos=y;
      if (!matcher.find()) {
        x=valueLength;
      }
 else {
        x=matcher.start();
        y=matcher.end();
      }
    }
  }
  return returnValue.toString();
}","private static String doReplace(String oldName,String newName,String value){
  if (value.trim().isEmpty()) {
    return value;
  }
  String vOldName=oldName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String regex=""String_Node_Str"" + vOldName + ""String_Node_Str""+ vOldName+ ""String_Node_Str"";
  String[] split=value.split(regex);
  Map<String,String> replacedStrings=new HashMap<String,String>();
  StringBuffer returnValue=new StringBuffer();
  for (  String s : split) {
    if (s.contains(oldName)) {
      replacedStrings.put(s,s.replaceAll(""String_Node_Str"" + oldName + ""String_Node_Str"",newName));
    }
 else {
      replacedStrings.put(s,s);
    }
  }
  if (split.length == 1) {
    returnValue.append(replacedStrings.get(split[0]));
  }
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(value);
  if (matcher.find()) {
    int x=matcher.start();
    int y=matcher.end();
    int curPos=0;
    int valueLength=value.length();
    String oldFill=null;
    String newFill=null;
    String subRegEx=""String_Node_Str"" + vOldName + ""String_Node_Str"";
    java.util.regex.Pattern subPattern=java.util.regex.Pattern.compile(subRegEx);
    while (true) {
      if (curPos == valueLength) {
        break;
      }
      if (curPos < x) {
        oldFill=value.substring(curPos,x);
        if ((newFill=replacedStrings.get(oldFill)) != null) {
          returnValue.append(newFill);
        }
 else {
          returnValue.append(oldFill);
        }
        curPos=x;
        continue;
      }
      String matchedString=matcher.group();
      Matcher subMatcher=subPattern.matcher(matchedString);
      if (subMatcher.find()) {
        returnValue.append(matchedString.replaceFirst(vOldName,newName));
      }
 else {
        returnValue.append(matchedString);
      }
      curPos=y;
      if (!matcher.find()) {
        x=valueLength;
      }
 else {
        x=matcher.start();
        y=matcher.end();
      }
    }
  }
  return returnValue.toString();
}",0.8720510685539828
126357,"@Test public void testExecuteProjectItem(){
  ContextItem jobDocExtItem=PropertiesFactory.eINSTANCE.createContextItem();
  jobDocExtItem.setProperty(PropertiesFactory.eINSTANCE.createProperty());
  JobDocItemMigrationTask jobDocItemMigrationTaskSpy=spy(new JobDocItemMigrationTask());
  jobDocItemMigrationTaskSpy.execute(null,jobDocExtItem);
  verify(jobDocItemMigrationTaskSpy).execute(jobDocExtItem);
}","@Test public void testExecuteProjectItem(){
  ContextItem jobDocExtItem=PropertiesFactory.eINSTANCE.createContextItem();
  jobDocExtItem.setProperty(PropertiesFactory.eINSTANCE.createProperty());
  JobDocItemMigrationTask jobDocItemMigrationTaskSpy=spy(new JobDocItemMigrationTask());
  jobDocItemMigrationTaskSpy.execute(jobDocExtItem);
  verify(jobDocItemMigrationTaskSpy).execute(jobDocExtItem);
}",0.9937888198757764
126358,"@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  String sql;
  String and;
  if (schemaPattern != null) {
    sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
    and=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
    and=""String_Node_Str"";
  }
  sql=addTypesToSql(sql,types,and);
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  PreparedStatement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  Set<String> tablesRetrieved=new HashSet<String>();
  try {
    stmt=connection.prepareStatement(sql);
    if (!StringUtils.isEmpty(tableNamePattern)) {
      stmt.setString(1,tableNamePattern);
    }
    rs=stmt.executeQuery();
    while (rs.next()) {
      String type=rs.getString(""String_Node_Str"");
      String table_name=rs.getString(""String_Node_Str"");
      String system_table_name=rs.getString(""String_Node_Str"");
      tablesRetrieved.add(system_table_name);
      String table_schema=rs.getString(""String_Node_Str"");
      String system_table_schema=rs.getString(""String_Node_Str"");
      String[] r=new String[]{type,table_name,system_table_name,table_schema,system_table_schema};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  ResultSet jdbcRset=super.getTables(catalog,schemaPattern,tableNamePattern,types);
  while (jdbcRset.next()) {
    String table_name=jdbcRset.getString(""String_Node_Str"");
    if (tablesRetrieved.contains(table_name)) {
      continue;
    }
    String type=jdbcRset.getString(""String_Node_Str"");
    String table_schema=jdbcRset.getString(""String_Node_Str"");
    String[] r=new String[]{type,table_name,table_name,table_schema,table_schema};
    list.add(r);
  }
  AS400ResultSet tableResultSet=new AS400ResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  String sql;
  String and;
  if (schemaPattern != null) {
    sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
    and=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
    and=""String_Node_Str"";
  }
  sql=addTypesToSql(sql,types,and);
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  PreparedStatement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.prepareStatement(sql);
    if (!StringUtils.isEmpty(tableNamePattern)) {
      stmt.setString(1,tableNamePattern);
    }
    rs=stmt.executeQuery();
    while (rs.next()) {
      String type=rs.getString(""String_Node_Str"");
      String table_name=rs.getString(""String_Node_Str"");
      String system_table_name=rs.getString(""String_Node_Str"");
      String table_schema=rs.getString(""String_Node_Str"");
      String system_table_schema=rs.getString(""String_Node_Str"");
      String[] r=new String[]{type,table_name,system_table_name,table_schema,system_table_schema};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  AS400ResultSet tableResultSet=new AS400ResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.843940232429441
126359,"private String getTypeName(String typeName){
  String result=typeName;
  if (TABLE.equals(typeName)) {
    result=T;
  }
 else   if (VIEW.equals(typeName)) {
    result=V;
  }
 else   if (SYNONYM.equals(typeName)) {
    result=S;
  }
 else   if (ALIAS.equals(typeName)) {
    result=A;
  }
  return result;
}","private String getTypeName(String typeName){
  String result=typeName;
  if (TABLE.equals(typeName)) {
    result=T;
  }
 else   if (VIEW.equals(typeName)) {
    result=V;
  }
 else   if (SYNONYM.equals(typeName)) {
    result=S;
  }
 else   if (ALIAS.equals(typeName)) {
    result=A;
  }
 else   if (EXTERNAL_TABLE.equals(typeName)) {
    result=P;
  }
  return result;
}",0.9045521292217328
126360,"@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  String sql;
  String and;
  if (schemaPattern != null) {
    sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
    and=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
    and=""String_Node_Str"";
  }
  sql=addTypesToSql(sql,types,and);
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  PreparedStatement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  Set<String> tablesRetrieved=new HashSet<String>();
  try {
    stmt=connection.prepareStatement(sql);
    if (!StringUtils.isEmpty(tableNamePattern)) {
      stmt.setString(1,tableNamePattern);
    }
    rs=stmt.executeQuery();
    while (rs.next()) {
      String type=rs.getString(""String_Node_Str"");
      String table_name=rs.getString(""String_Node_Str"");
      String system_table_name=rs.getString(""String_Node_Str"");
      tablesRetrieved.add(system_table_name);
      String table_schema=rs.getString(""String_Node_Str"");
      String system_table_schema=rs.getString(""String_Node_Str"");
      String[] r=new String[]{type,table_name,system_table_name,table_schema,system_table_schema};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  ResultSet jdbcRset=super.getTables(catalog,schemaPattern,tableNamePattern,types);
  while (jdbcRset.next()) {
    String table_name=jdbcRset.getString(""String_Node_Str"");
    if (tablesRetrieved.contains(table_name)) {
      continue;
    }
    String type=jdbcRset.getString(""String_Node_Str"");
    String table_schema=jdbcRset.getString(""String_Node_Str"");
    String[] r=new String[]{type,table_name,table_name,table_schema,table_schema};
    list.add(r);
  }
  AS400ResultSet tableResultSet=new AS400ResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schemaPattern,String tableNamePattern,String[] types) throws SQLException {
  String sql;
  String and;
  if (schemaPattern != null) {
    sql=""String_Node_Str"" + schemaPattern + ""String_Node_Str"";
    and=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"";
    and=""String_Node_Str"";
  }
  sql=addTypesToSql(sql,types,and);
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  PreparedStatement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.prepareStatement(sql);
    if (!StringUtils.isEmpty(tableNamePattern)) {
      stmt.setString(1,tableNamePattern);
    }
    rs=stmt.executeQuery();
    while (rs.next()) {
      String type=rs.getString(""String_Node_Str"");
      String table_name=rs.getString(""String_Node_Str"");
      String system_table_name=rs.getString(""String_Node_Str"");
      String table_schema=rs.getString(""String_Node_Str"");
      String system_table_schema=rs.getString(""String_Node_Str"");
      String[] r=new String[]{type,table_name,system_table_name,table_schema,system_table_schema};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  AS400ResultSet tableResultSet=new AS400ResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.843940232429441
126361,"private String getTypeName(String typeName){
  String result=typeName;
  if (TABLE.equals(typeName)) {
    result=T;
  }
 else   if (VIEW.equals(typeName)) {
    result=V;
  }
 else   if (SYNONYM.equals(typeName)) {
    result=S;
  }
 else   if (ALIAS.equals(typeName)) {
    result=A;
  }
  return result;
}","private String getTypeName(String typeName){
  String result=typeName;
  if (TABLE.equals(typeName)) {
    result=T;
  }
 else   if (VIEW.equals(typeName)) {
    result=V;
  }
 else   if (SYNONYM.equals(typeName)) {
    result=S;
  }
 else   if (ALIAS.equals(typeName)) {
    result=A;
  }
 else   if (EXTERNAL_TABLE.equals(typeName)) {
    result=P;
  }
  return result;
}",0.9045521292217328
126362,"/** 
 * DOC YeXiaowei Comment method ""createSAPFunctionNodes"".
 * @param metadataConnection
 * @param functionNode
 */
private void createSAPFunctionNodes(final RepositoryNode recBin,IRepositoryViewObject rebObj,Connection metadataConnection,RepositoryNode functionNode,List<IRepositoryViewObject> validationRules){
  EList functions=((SAPConnection)metadataConnection).getFuntions();
  if (functions == null || functions.isEmpty()) {
    return;
  }
  for (int i=0; i < functions.size(); i++) {
    SAPFunctionUnit unit=(SAPFunctionUnit)functions.get(i);
    RepositoryNode tableNode=createSAPNode(rebObj,functionNode,unit);
    RepositoryNode inputNode=new StableRepositoryNode(tableNode,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    tableNode.getChildren().add(inputNode);
    createTables(recBin,inputNode,rebObj,unit.getInputTables(),ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
    RepositoryNode outputNode=new StableRepositoryNode(tableNode,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    tableNode.getChildren().add(outputNode);
    createTables(recBin,outputNode,rebObj,unit.getTables(),ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
    if (SubItemHelper.isDeleted(unit)) {
    }
 else {
      functionNode.getChildren().add(tableNode);
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""createSAPFunctionNodes"".
 * @param metadataConnection
 * @param functionNode
 */
private void createSAPFunctionNodes(final RepositoryNode recBin,IRepositoryViewObject rebObj,Connection metadataConnection,RepositoryNode functionNode,List<IRepositoryViewObject> validationRules){
  EList functions=((SAPConnection)metadataConnection).getFuntions();
  if (functions == null || functions.isEmpty()) {
    return;
  }
  for (int i=0; i < functions.size(); i++) {
    SAPFunctionUnit unit=(SAPFunctionUnit)functions.get(i);
    RepositoryNode tableNode=createSAPNode(rebObj,functionNode,unit);
    RepositoryNode inputNode=new StableRepositoryNode(tableNode,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    inputNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAP_FUNCTION);
    tableNode.getChildren().add(inputNode);
    createTables(recBin,inputNode,rebObj,unit.getInputTables(),ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
    RepositoryNode outputNode=new StableRepositoryNode(tableNode,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    outputNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAP_FUNCTION);
    tableNode.getChildren().add(outputNode);
    createTables(recBin,outputNode,rebObj,unit.getTables(),ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
    if (SubItemHelper.isDeleted(unit)) {
    }
 else {
      functionNode.getChildren().add(tableNode);
    }
  }
}",0.9307344239470936
126363,"/** 
 * hwang Comment method ""isSAPTable"". for sap
 */
private boolean isSAPTable(RepositoryNode theNode){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)theNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
    RepositoryNode node=theNode.getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_FUNCTION || nodeType == ERepositoryObjectType.METADATA_SAP_IDOC || nodeType == ERepositoryObjectType.METADATA_SAP_TABLE) {
      return true;
    }
  }
 else   if (nodeType == ERepositoryObjectType.METADATA_CON_COLUMN) {
    RepositoryNode node=theNode.getParent().getParent().getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_FUNCTION || nodeType == ERepositoryObjectType.METADATA_SAP_IDOC || nodeType == ERepositoryObjectType.METADATA_SAP_TABLE) {
      return true;
    }
  }
  return false;
}","/** 
 * hwang Comment method ""isSAPTable"". for sap
 */
private boolean isSAPTable(RepositoryNode theNode){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)theNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
    RepositoryNode node=theNode.getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_TABLE) {
      return true;
    }
  }
 else   if (nodeType == ERepositoryObjectType.METADATA_CON_COLUMN) {
    RepositoryNode node=theNode.getParent().getParent().getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_TABLE) {
      return true;
    }
  }
  return false;
}",0.8784648187633263
126364,"private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPConnection.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}","private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}",0.9772182254196644
126365,"private static void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<Relation> relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  for (  Relation relation : relations) {
    IRepositoryViewObject obj=null;
    try {
      if (RelationshipItemBuilder.MAPPER_RELATION.equals(relation.getType())) {
        IRepositoryViewObject mapperObj=factory.getLastVersion(relation.getId());
        if (mapperObj != null) {
          if (!repositoryObjects.contains(mapperObj)) {
            repositoryObjects.add(mapperObj);
          }
          for (          IExtendedRepositoryNodeHandler nodeHandler : RepositoryContentManager.getExtendedNodeHandler()) {
            List<IRepositoryViewObject> nodesAndDependencies=nodeHandler.getRepositoryObjectDependencies(mapperObj);
            for (            IRepositoryViewObject refObject : nodesAndDependencies) {
              if (!repositoryObjects.contains(refObject)) {
                repositoryObjects.add(refObject);
              }
            }
          }
        }
      }
 else       if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(relation.getId());
      }
 else {
        obj=factory.getLastVersion(relation.getId());
      }
      if (obj != null) {
        if (!repositoryObjects.contains(obj)) {
          repositoryObjects.add(obj);
          checkAllVerSionLatest(repositoryObjects,obj);
          checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}","private static void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<Relation> relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  for (  Relation relation : relations) {
    IRepositoryViewObject obj=null;
    try {
      if (RelationshipItemBuilder.MAPPER_RELATION.equals(relation.getType())) {
        IRepositoryViewObject mapperObj=factory.getLastVersion(relation.getId());
        if (mapperObj != null) {
          if (!repositoryObjects.contains(mapperObj)) {
            repositoryObjects.add(mapperObj);
          }
          for (          IExtendedRepositoryNodeHandler nodeHandler : RepositoryContentManager.getExtendedNodeHandler()) {
            List<IRepositoryViewObject> nodesAndDependencies=nodeHandler.getRepositoryObjectDependencies(mapperObj);
            for (            IRepositoryViewObject refObject : nodesAndDependencies) {
              if (!repositoryObjects.contains(refObject)) {
                repositoryObjects.add(refObject);
              }
            }
          }
        }
      }
 else       if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(relation.getId());
      }
 else {
        obj=factory.getLastVersion(relation.getId());
      }
      if (obj != null) {
        updateRepositoryObjects(repositoryObjects,obj);
        IRepositoryViewObject clusterObj=getHadoopClusterConnectionIfNeeded(obj,factory);
        if (clusterObj != null) {
          updateRepositoryObjects(repositoryObjects,clusterObj);
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}",0.903325599381284
126366,"public void addItem(ImportItem itemRecord){
  if (itemRecord != null) {
    this.allImportItemRecords.add(itemRecord);
    final Project project=itemRecord.getItemProject();
    if (project == null) {
      return;
    }
    final String technicalLabel=project.getTechnicalLabel();
    ProjectImportNode projectImportNode=this.projectNodesMap.get(technicalLabel);
    if (projectImportNode == null) {
      projectImportNode=new ProjectImportNode(project);
      this.projectNodesMap.put(technicalLabel,projectImportNode);
    }
    final Item item=itemRecord.getItem();
    final ERepositoryObjectType itemType=itemRecord.getRepositoryType();
    ImportNode typeImportNode=findAndCreateParentTypeNode(projectImportNode,itemType);
    ImportNode parentImportNode=typeImportNode;
    if (parentImportNode == null) {
      parentImportNode=projectImportNode;
    }
    String path=item.getState().getPath();
    if (StringUtils.isNotEmpty(path)) {
      parentImportNode=findAndCreateFolderNode(typeImportNode,new Path(path));
    }
    ItemImportNode itemNode=new ItemImportNode(itemRecord);
    parentImportNode.addChild(itemNode);
  }
}","public void addItem(ImportItem itemRecord){
  if (itemRecord != null) {
    this.allImportItemRecords.add(itemRecord);
    final Project project=itemRecord.getItemProject();
    if (project == null) {
      return;
    }
    final String technicalLabel=project.getTechnicalLabel();
    ProjectImportNode projectImportNode=this.projectNodesMap.get(technicalLabel);
    if (projectImportNode == null) {
      projectImportNode=new ProjectImportNode(project);
      this.projectNodesMap.put(technicalLabel,projectImportNode);
    }
    final Item item=itemRecord.getItem();
    if (item != null && hadoopClusterService != null && hadoopClusterService.isHadoopSubItem(item)) {
      return;
    }
    final ERepositoryObjectType itemType=itemRecord.getRepositoryType();
    ImportNode typeImportNode=findAndCreateParentTypeNode(projectImportNode,itemType);
    ImportNode parentImportNode=typeImportNode;
    if (parentImportNode == null) {
      parentImportNode=projectImportNode;
    }
    String path=item.getState().getPath();
    if (StringUtils.isNotEmpty(path)) {
      parentImportNode=findAndCreateFolderNode(typeImportNode,new Path(path));
    }
    ItemImportNode itemNode=new ItemImportNode(itemRecord);
    parentImportNode.addChild(itemNode);
  }
}",0.9490818030050084
126367,"/** 
 * Retrieve and return the dbms from the given id.
 * @param dbmsId
 * @return the dbms from the given id
 */
public static Dbms getDbms(String dbmsId){
  if (dbmsId == null) {
    throw new IllegalArgumentException();
  }
  Dbms[] allDbmsArray=getAllDbmsArray();
  for (  Dbms dbms : allDbmsArray) {
    if (dbmsId.equals(dbms.getId())) {
      return dbms;
    }
  }
  throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",dbmsId));
}","/** 
 * Retrieve and return the dbms from the given id.
 * @param dbmsId
 * @return the dbms from the given id
 */
public static Dbms getDbms(String dbmsId){
  if (dbmsId == null) {
    throw new IllegalArgumentException();
  }
  Dbms[] allDbmsArray=getAllDbmsArray();
  for (  Dbms dbms : allDbmsArray) {
    if (dbmsId.equals(dbms.getId())) {
      return dbms;
    }
  }
  ExceptionHandler.log(Messages.getString(""String_Node_Str"",dbmsId));
  return null;
}",0.9445048966267682
126368,"private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setLabel(label);
  column.setName(columnName);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getInstance().getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getInstance().getIntMetaDataInfo(resutSet,""String_Node_Str""));
    column.setTalendType(talendType);
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}","private static TdColumn addColumnAttribute(String label,String columnName,String typeName,int columnSize,int decimalDigits,String columnRemark,ResultSet resutSet,TdColumn column,java.sql.Connection conn,boolean isMssql) throws SQLException {
  boolean isIBMDB2ZOS=false;
  boolean isTeradataSqlModel=false;
  boolean isSAS=false;
  if (databaseconnection != null) {
    String dbMetaData=databaseconnection.getDatabaseType();
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.IBMDB2ZOS.getDisplayName())) {
      isIBMDB2ZOS=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.TERADATA.getDisplayName()) && databaseconnection.isSQLMode()) {
      isTeradataSqlModel=true;
    }
    if (dbMetaData != null && dbMetaData.equals(EDatabaseTypeName.SAS.getDisplayName())) {
      isSAS=true;
    }
  }
  if (column == null) {
    column=RelationalFactory.eINSTANCE.createTdColumn();
  }
  Object defaultvalue=null;
  try {
    defaultvalue=resutSet.getObject(GetColumn.COLUMN_DEF.name());
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
  TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
  if (columnName == null || ""String_Node_Str"".equals(columnName)) {
    try {
      columnName=resutSet.getString(GetColumn.COLUMN_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
      if (columnName == null) {
        columnName=e1.getMessage();
      }
    }
  }
  column.setLabel(label);
  column.setName(columnName);
  int dataType=0;
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      dataType=resutSet.getInt(GetColumn.TYPE_NAME.name());
    }
 else {
      dataType=resutSet.getInt(GetColumn.DATA_TYPE.name());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  if (typeName == null || ""String_Node_Str"".equals(typeName)) {
    try {
      typeName=resutSet.getString(GetColumn.TYPE_NAME.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  if (typeName != null && isMssql()) {
    if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=91;
    }
 else     if (typeName.toLowerCase().equals(""String_Node_Str"")) {
      dataType=92;
    }
  }
  if (columnSize < 0) {
    try {
      columnSize=resutSet.getInt(GetColumn.COLUMN_SIZE.name());
    }
 catch (    Exception e1) {
      log.warn(e1,e1);
    }
  }
  column.setLength(columnSize);
  if (decimalDigits < 0) {
    try {
      decimalDigits=resutSet.getInt(GetColumn.DECIMAL_DIGITS.name());
    }
 catch (    Exception e) {
      log.warn(e);
    }
  }
  int numPrecRadix=0;
  try {
    if (!isIBMDB2ZOS && !isTeradataSqlModel && !isSAS) {
      numPrecRadix=resutSet.getInt(GetColumn.NUM_PREC_RADIX.name());
    }
  }
 catch (  Exception e) {
    log.warn(e);
  }
  if (columnRemark == null || ""String_Node_Str"".equals(columnRemark)) {
    try {
      columnRemark=resutSet.getString(GetColumn.REMARKS.name());
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    if (columnRemark == null) {
      columnRemark=""String_Node_Str"";
    }
    columnRemark=ManagementTextUtils.filterSpecialChar(columnRemark);
  }
  ColumnHelper.setComment(columnRemark,column);
  TdSqlDataType sqlDataType=createDataType(dataType,typeName,decimalDigits,numPrecRadix);
  column.setSqlDataType(sqlDataType);
  try {
    if (isIBMDB2ZOS || isTeradataSqlModel || isSAS) {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.IS_NULLABLE.name())));
    }
 else {
      column.getSqlDataType().setNullable(NullableType.get(resutSet.getInt(GetColumn.NULLABLE.name())));
    }
  }
 catch (  Exception e1) {
    log.warn(e1,e1);
  }
  column.setInitialValue(defExpression);
  String mapping=databaseconnection == null ? null : databaseconnection.getDbmsId();
  if (databaseconnection != null && mapping != null) {
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(mapping);
    if (mappingTypeRetriever != null) {
      String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getInstance().getIntMetaDataInfo(resutSet,""String_Node_Str""),ExtractMetaDataUtils.getInstance().getIntMetaDataInfo(resutSet,""String_Node_Str""));
      column.setTalendType(talendType);
    }
  }
  try {
    column.setNullable(""String_Node_Str"".equals(resutSet.getString(GetColumn.IS_NULLABLE.name())));
  }
 catch (  Exception e) {
    column.setNullable(false);
  }
  return column;
}",0.9872134038800704
126369,"private void createSAPTableNodes(final RepositoryNode recBin,IRepositoryViewObject repObj,Connection metadataConnection,RepositoryNode node,List<IRepositoryViewObject> validationRules){
  StableRepositoryNode tableContainer=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
  tableContainer.setChildrenObjectType(ERepositoryObjectType.METADATA_CON_TABLE);
  node.getChildren().add(tableContainer);
  List<MetadataTable> tablesWithOrders=ConnectionHelper.getTablesWithOrders(metadataConnection);
  EList tables=new BasicEList();
  tables.addAll(tablesWithOrders);
  createTables(recBin,tableContainer,repObj,tables,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
}","private void createSAPTableNodes(final RepositoryNode recBin,IRepositoryViewObject repObj,Connection metadataConnection,RepositoryNode node,List<IRepositoryViewObject> validationRules){
  StableRepositoryNode tableContainer=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
  tableContainer.setChildrenObjectType(ERepositoryObjectType.METADATA_CON_TABLE);
  tableContainer.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_SAP_TABLE);
  node.getChildren().add(tableContainer);
  List<MetadataTable> tablesWithOrders=ConnectionHelper.getTablesWithOrders(metadataConnection);
  EList tables=new BasicEList();
  tables.addAll(tablesWithOrders);
  createTables(recBin,tableContainer,repObj,tables,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
}",0.9359223300970874
126370,"private void createNewSchema(List<Map<String,Object>> paramValues,IMetadataTable newMetadatTable,String tableType){
  if (newMetadatTable != null && tableType.equals(newMetadatTable.getTableType())) {
    boolean found=false;
    if (paramValues.size() > 0) {
      List<IMetadataTable> metadataList=node.getMetadataList();
      for (      IMetadataTable metadata : metadataList) {
        if (tableType.equals(metadata.getTableType())) {
          if (metadata.getLabel() != null && metadata.getLabel().equals(newMetadatTable.getLabel())) {
            found=true;
            MetadataToolHelper.copyTable(newMetadatTable,metadata);
          }
        }
      }
    }
    if (found) {
      return;
    }
    HashMap valueMap=new HashMap<String,Object>();
    paramValues.add(valueMap);
    String uinqueTableName=node.getProcess().generateUniqueConnectionName(MultiSchemasUtil.getConnectionBaseName(newMetadatTable.getLabel()));
    String paramType=getParamType(newMetadatTable);
    if (paramType == null) {
      return;
    }
    valueMap.put(ISAPConstant.NAME,uinqueTableName);
    valueMap.put(ISAPConstant.TYPE,paramType);
    valueMap.put(ISAPConstant.FIELD_SCHEMA,uinqueTableName);
    if (MetadataSchemaType.INPUT.name().equals(tableType)) {
      valueMap.put(ISAPConstant.PARENT_ROW,""String_Node_Str"");
    }
    if (oldMetadataTable != null) {
      CoreUIPlugin.getDefault().getDesignerCoreService().removeConnection(node,oldMetadataTable.getTableName());
      node.getMetadataList().remove(oldMetadataTable);
    }
    newMetadatTable.setTableName(uinqueTableName);
    node.getProcess().addUniqueConnectionName(uinqueTableName);
    node.getMetadataList().add(newMetadatTable);
  }
}","private void createNewSchema(List<Map<String,Object>> paramValues,IMetadataTable newMetadatTable,String tableType){
  if (newMetadatTable != null && tableType.equals(newMetadatTable.getTableType())) {
    boolean found=false;
    if (paramValues.size() > 0) {
      List<IMetadataTable> metadataList=node.getMetadataList();
      for (      IMetadataTable metadata : metadataList) {
        if (tableType.equals(metadata.getTableType())) {
          if (metadata.getLabel() != null && metadata.getLabel().equals(newMetadatTable.getLabel())) {
            found=true;
            MetadataToolHelper.copyTable(newMetadatTable,metadata);
          }
        }
      }
    }
    if (found) {
      return;
    }
    Boolean isInput=MetadataSchemaType.INPUT.name().equals(tableType);
    HashMap valueMap=new HashMap<String,Object>();
    String uinqueTableName=node.getProcess().generateUniqueConnectionName(MultiSchemasUtil.getConnectionBaseName(newMetadatTable.getLabel()));
    String paramType=getParamType(newMetadatTable,isInput);
    if (paramType == null) {
      return;
    }
    valueMap.put(ISAPConstant.NAME,TalendQuoteUtils.addQuotes(newMetadatTable.getLabel()));
    valueMap.put(ISAPConstant.TYPE,paramType);
    valueMap.put(ISAPConstant.FIELD_SCHEMA,uinqueTableName);
    if (isInput) {
      valueMap.put(ISAPConstant.PARENT_ROW,""String_Node_Str"");
    }
    paramValues.add(valueMap);
    if (oldMetadataTable != null) {
      CoreUIPlugin.getDefault().getDesignerCoreService().removeConnection(node,oldMetadataTable.getTableName());
      node.getMetadataList().remove(oldMetadataTable);
    }
    newMetadatTable.setTableName(uinqueTableName);
    newMetadatTable.setLabel(uinqueTableName);
    node.getProcess().addUniqueConnectionName(uinqueTableName);
    node.getMetadataList().add(newMetadatTable);
  }
}",0.8365902010761824
126371,"private String getParamType(IMetadataTable table){
  if (functionUnit == null) {
    return null;
  }
  SAPFunctionParamData paramData=functionUnit.getParamData();
  if (paramData == null) {
    return null;
  }
  for (  SAPFunctionParameter parameter : paramData.getOutputRoot().getChildren()) {
    if (parameter.getName().equals(table.getTableName())) {
      if (parameter.getType().equals(ISAPConstant.PARAM_STRUCTURE)) {
        return ISAPConstant.PARAM_STRUCTURE.toUpperCase();
      }
 else       if (parameter.getType().equals(ISAPConstant.PARAM_TABLE)) {
        return ISAPConstant.PARAM_TABLE.toUpperCase();
      }
 else {
        return ISAPConstant.PARAM_SINGLE.toUpperCase();
      }
    }
  }
  return null;
}","private String getParamType(IMetadataTable table,boolean isInput){
  if (functionUnit == null) {
    return null;
  }
  SAPFunctionParamData paramData=functionUnit.getParamData();
  if (paramData == null) {
    return null;
  }
  EList<SAPFunctionParameter> parameterChildrenList=null;
  if (isInput) {
    parameterChildrenList=paramData.getInputRoot().getChildren();
  }
 else {
    parameterChildrenList=paramData.getOutputRoot().getChildren();
  }
  for (  SAPFunctionParameter parameter : parameterChildrenList) {
    if (parameter.getName().equals(table.getTableName())) {
      if (parameter.getType().equals(ISAPConstant.PARAM_STRUCTURE)) {
        return ISAPConstant.PARAM_STRUCTURE.toUpperCase();
      }
 else       if (parameter.getType().equals(ISAPConstant.PARAM_TABLE)) {
        return ISAPConstant.PARAM_TABLE.toUpperCase();
      }
 else {
        return ISAPConstant.PARAM_SINGLE.toUpperCase();
      }
    }
  }
  if (ISAPConstant.SINGLE_PARAM_TABLE_NAME.equals(table.getTableName())) {
    return ISAPConstant.PARAM_TABLE.toUpperCase();
  }
  return null;
}",0.7641196013289037
126372,"@Override public void execute(){
  if (node == null) {
    return;
  }
  IElementParameter elementParameter=node.getElementParameter(ISAPConstant.SAP_FUNCTION);
  if (elementParameter != null && functionUnit != null) {
    elementParameter.setValue(TalendQuoteUtils.addQuotes(functionUnit.getName()));
  }
  IElementParameter schemasTableParam=node.getElementParameter(ISAPConstant.TABLE_SCHEMAS);
  if (schemasTableParam != null) {
    List<Map<String,Object>> paramValues=(List<Map<String,Object>>)schemasTableParam.getValue();
    if (paramValues == null) {
      paramValues=new ArrayList<Map<String,Object>>();
      schemasTableParam.setValue(paramValues);
    }
    if (newMetadatTable != null) {
      createNewSchema(paramValues,newMetadatTable,MetadataSchemaType.OUTPUT.name());
    }
 else {
      if (functionUnit != null) {
        EList<MetadataTable> tables=functionUnit.getTables();
        for (        MetadataTable table : tables) {
          createNewSchema(paramValues,ConvertionHelper.convert(table),MetadataSchemaType.OUTPUT.name());
        }
      }
    }
  }
  IElementParameter inputTableParam=node.getElementParameter(ISAPConstant.MAPPING_INPUT);
  if (inputTableParam != null) {
    List<Map<String,Object>> paramValues=(List<Map<String,Object>>)inputTableParam.getValue();
    if (paramValues == null) {
      paramValues=new ArrayList<Map<String,Object>>();
      inputTableParam.setValue(paramValues);
    }
    if (newMetadatTable != null) {
      createNewSchema(paramValues,newMetadatTable,MetadataSchemaType.INPUT.name());
    }
 else {
      if (functionUnit != null) {
        EList<MetadataTable> tables=functionUnit.getInputTables();
        for (        MetadataTable table : tables) {
          createNewSchema(paramValues,ConvertionHelper.convert(table),MetadataSchemaType.INPUT.name());
        }
      }
    }
  }
}","@Override public void execute(){
  if (node == null) {
    return;
  }
  IElementParameter elementParameter=node.getElementParameter(ISAPConstant.SAP_FUNCTION);
  if (elementParameter != null && functionUnit != null) {
    elementParameter.setValue(TalendQuoteUtils.addQuotes(functionUnit.getName()));
  }
  IElementParameter schemasTableParam=node.getElementParameter(ISAPConstant.TABLE_SCHEMAS);
  if (schemasTableParam != null) {
    List<Map<String,Object>> paramValues=(List<Map<String,Object>>)schemasTableParam.getValue();
    if (paramValues == null) {
      paramValues=new ArrayList<Map<String,Object>>();
      schemasTableParam.setValue(paramValues);
    }
    if (newMetadatTable != null) {
      createNewSchema(paramValues,newMetadatTable,MetadataSchemaType.OUTPUT.name());
    }
 else {
      if (functionUnit != null) {
        EList<MetadataTable> tables=functionUnit.getTables();
        for (        MetadataTable table : tables) {
          createNewSchema(paramValues,ConvertionHelper.convert(table),MetadataSchemaType.OUTPUT.name());
        }
      }
    }
  }
  IElementParameter inputTableParam=node.getElementParameter(ISAPConstant.MAPPING_INPUT);
  if (inputTableParam != null) {
    List<Map<String,Object>> paramValues=(List<Map<String,Object>>)inputTableParam.getValue();
    if (paramValues == null) {
      paramValues=new ArrayList<Map<String,Object>>();
      inputTableParam.setValue(paramValues);
    }
    if (newMetadatTable != null) {
      Map<String,String> properties=newMetadatTable.getAdditionalProperties();
      if (properties != null) {
        properties.put(ISINPUT,TRUE);
      }
      createNewSchema(paramValues,newMetadatTable,MetadataSchemaType.INPUT.name());
    }
 else {
      if (functionUnit != null) {
        EList<MetadataTable> tables=functionUnit.getInputTables();
        for (        MetadataTable table : tables) {
          EMap<String,String> properties=table.getAdditionalProperties();
          if (properties != null) {
            properties.put(ISINPUT,TRUE);
          }
          createNewSchema(paramValues,ConvertionHelper.convert(table),MetadataSchemaType.INPUT.name());
        }
      }
    }
  }
}",0.8903736698836922
126373,"/** 
 * hwang Comment method ""isSAPTable"". for sap
 */
private boolean isSAPTable(RepositoryNode theNode){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)theNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
    RepositoryNode node=theNode.getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_FUNCTION || nodeType == ERepositoryObjectType.METADATA_SAP_IDOC) {
      return true;
    }
  }
 else   if (nodeType == ERepositoryObjectType.METADATA_CON_COLUMN) {
    RepositoryNode node=theNode.getParent().getParent().getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_FUNCTION || nodeType == ERepositoryObjectType.METADATA_SAP_IDOC) {
      return true;
    }
  }
  return false;
}","/** 
 * hwang Comment method ""isSAPTable"". for sap
 */
private boolean isSAPTable(RepositoryNode theNode){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)theNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
    RepositoryNode node=theNode.getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_FUNCTION || nodeType == ERepositoryObjectType.METADATA_SAP_IDOC || nodeType == ERepositoryObjectType.METADATA_SAP_TABLE) {
      return true;
    }
  }
 else   if (nodeType == ERepositoryObjectType.METADATA_CON_COLUMN) {
    RepositoryNode node=theNode.getParent().getParent().getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType == ERepositoryObjectType.METADATA_SAP_FUNCTION || nodeType == ERepositoryObjectType.METADATA_SAP_IDOC || nodeType == ERepositoryObjectType.METADATA_SAP_TABLE) {
      return true;
    }
  }
  return false;
}",0.9437751004016064
126374,"/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        boolean promptNeeded=tableItem.getChecked();
        if (promptNeeded) {
          clearTableItem(tableItem);
          tableItem.setText(2,""String_Node_Str"");
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,-1);
        }
 else {
          clearTableItem(tableItem);
          if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
        if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        boolean promptNeeded=tableItem.getChecked();
        if (promptNeeded) {
          clearTableItem(tableItem);
          tableItem.setText(2,""String_Node_Str"");
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
synchronized (countPending) {
            countPending++;
          }
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,-1);
        }
 else {
          String pending=tableItem.getText(3);
          clearTableItem(tableItem);
          if (pending != null && pending.equals(Messages.getString(""String_Node_Str""))) {
synchronized (countPending) {
              countPending--;
            }
          }
        }
        if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}",0.9064354176175262
126375,"/** 
 * createTable.
 * @param tableItem
 */
protected void createTable(TableItem tableItem){
  String tableString=tableItem.getText(0);
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection(),true);
  if (!checkConnectionIsDone) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_TABLE.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
 else     if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_VIEW.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdView();
    }
 else {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
    dbtable.getTaggedValue().add(CoreFactory.eINSTANCE.createTaggedValue());
    List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
    metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,tableItem.getText(0));
    tableItem.setText(2,""String_Node_Str"" + metadataColumns.size());
    tableItem.setText(3,Messages.getString(""String_Node_Str""));
    countSuccess++;
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    initExistingNames();
    String labelName=IndiceHelper.getIndexedLabel(tableString,existingNames);
    if (forTemplate) {
      labelName=MetadataToolHelper.validateValue(labelName);
    }
    dbtable.setLabel(labelName);
    dbtable.setSourceName(tableItem.getText(0));
    dbtable.setId(factory.getNextId());
    dbtable.setTableType(ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString));
    List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
    Iterator iterate=metadataColumns.iterator();
    while (iterate.hasNext()) {
      MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
      metadataColumnsValid.add(metadataColumn);
      dbtable.getColumns().add(metadataColumn);
    }
    if (!ConnectionHelper.getTables(getConnection()).contains(dbtable) && !limitTemplateTable(dbtable)) {
    }
  }
}","/** 
 * createTable.
 * @param tableItem
 */
protected void createTable(TableItem tableItem){
  String tableString=tableItem.getText(0);
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection(),true);
  if (!checkConnectionIsDone) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_TABLE.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
 else     if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_VIEW.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdView();
    }
 else {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
    dbtable.getTaggedValue().add(CoreFactory.eINSTANCE.createTaggedValue());
    List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
    metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,tableItem.getText(0));
    tableItem.setText(2,""String_Node_Str"" + metadataColumns.size());
    tableItem.setText(3,Messages.getString(""String_Node_Str""));
synchronized (countSuccess) {
      countSuccess++;
    }
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    initExistingNames();
    String labelName=IndiceHelper.getIndexedLabel(tableString,existingNames);
    if (forTemplate) {
      labelName=MetadataToolHelper.validateValue(labelName);
    }
    dbtable.setLabel(labelName);
    dbtable.setSourceName(tableItem.getText(0));
    dbtable.setId(factory.getNextId());
    dbtable.setTableType(ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString));
    List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
    Iterator iterate=metadataColumns.iterator();
    while (iterate.hasNext()) {
      MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
      metadataColumnsValid.add(metadataColumn);
      dbtable.getColumns().add(metadataColumn);
    }
    if (!ConnectionHelper.getTables(getConnection()).contains(dbtable) && !limitTemplateTable(dbtable)) {
    }
  }
}",0.9916812609457092
126376,"@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TableItem tableItem=(TableItem)e.item;
    boolean promptNeeded=tableItem.getChecked();
    if (promptNeeded) {
      clearTableItem(tableItem);
      tableItem.setText(2,""String_Node_Str"");
      tableItem.setText(3,Messages.getString(""String_Node_Str""));
      countPending++;
      parentWizardPage.setPageComplete(false);
      refreshTable(tableItem,-1);
    }
 else {
      clearTableItem(tableItem);
      if (tableItem.getText() != null && tableItem.getText().equals(Messages.getString(""String_Node_Str""))) {
        countPending--;
      }
    }
    if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
      parentWizardPage.setPageComplete(false);
    }
  }
}","@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TableItem tableItem=(TableItem)e.item;
    boolean promptNeeded=tableItem.getChecked();
    if (promptNeeded) {
      clearTableItem(tableItem);
      tableItem.setText(2,""String_Node_Str"");
      tableItem.setText(3,Messages.getString(""String_Node_Str""));
synchronized (countPending) {
        countPending++;
      }
      parentWizardPage.setPageComplete(false);
      refreshTable(tableItem,-1);
    }
 else {
      String pending=tableItem.getText(3);
      clearTableItem(tableItem);
      if (pending != null && pending.equals(Messages.getString(""String_Node_Str""))) {
synchronized (countPending) {
          countPending--;
        }
      }
    }
    if (forTemplate && (ConnectionHelper.getTables(getConnection()).size() <= 0)) {
      parentWizardPage.setPageComplete(false);
    }
  }
}",0.8952042628774423
126377,"/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      updateStatus(IStatus.ERROR,null);
      TableItem[] tableItems=table.getItems();
      int size=tableItems.length;
      for (      TableItem tableItem2 : tableItems) {
        TableItem tableItem=tableItem2;
        if (!tableItem.getChecked()) {
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,size);
        }
 else {
          updateStatus(IStatus.OK,null);
        }
        tableItem.setChecked(true);
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(true);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      TableItem[] tableItems=table.getItems();
      for (      TableItem tableItem : tableItems) {
        if (tableItem.getChecked()) {
          clearTableItem(tableItem);
          tableItem.setChecked(false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(false);
      }
    }
  }
);
  addTableListener();
}","/** 
 * addButtonControls.
 */
@Override protected void addUtilsButtonListeners(){
  checkConnectionButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      checkConnection(true);
    }
  }
);
  selectAllTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      updateStatus(IStatus.ERROR,null);
      TableItem[] tableItems=table.getItems();
      int size=tableItems.length;
      for (      TableItem tableItem2 : tableItems) {
        TableItem tableItem=tableItem2;
        if (!tableItem.getChecked()) {
          tableItem.setText(3,Messages.getString(""String_Node_Str""));
synchronized (countPending) {
            countPending++;
          }
          parentWizardPage.setPageComplete(false);
          refreshTable(tableItem,size);
        }
 else {
          updateStatus(IStatus.OK,null);
        }
        tableItem.setChecked(true);
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(true);
      }
    }
  }
);
  selectNoneTablesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      TableItem[] tableItems=table.getItems();
      for (      TableItem tableItem : tableItems) {
        if (tableItem.getChecked()) {
          clearTableItem(tableItem);
          tableItem.setChecked(false);
        }
      }
      if (forTemplate) {
        parentWizardPage.setPageComplete(false);
      }
    }
  }
);
  addTableListener();
}",0.9865607819181428
126378,"public void updateUIInThreadIfThread(){
  if (tableItem.isDisposed()) {
    return;
  }
  if (checkConnectionIsDone) {
    tableItem.setText(2,""String_Node_Str"" + listColumns.size());
    tableItem.setText(3,Messages.getString(""String_Node_Str""));
    countSuccess++;
    ((SalesforceSchemaConnection)connectionItem.getConnection()).setModuleName(tableItem.getText(0));
    temConnection.setModuleName(tableItem.getText(0));
    SalesforceModuleUnit module=ConnectionFactory.eINSTANCE.createSalesforceModuleUnit();
    module.setId(ProxyRepositoryFactory.getInstance().getNextId());
    module.setModuleName(tableItem.getText(0));
    module.setLabel(tableItem.getText(0));
    MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
    String nextId=ProxyRepositoryFactory.getInstance().getNextId();
    table.setId(nextId);
    table.setLabel(tableItem.getText(0));
    if (listColumns.size() > 0) {
      for (int i=0; i < listColumns.size(); i++) {
        MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
        metadataColumn.setNullable(listColumns.get(i).isNullable());
        metadataColumn.setLength(listColumns.get(i).getLength());
        metadataColumn.setPattern(listColumns.get(i).getPattern());
        metadataColumn.setTalendType(listColumns.get(i).getTalendType());
        metadataColumn.setPrecision(listColumns.get(i).getPrecision());
        metadataColumn.setLabel(listColumns.get(i).getLabel());
        table.getColumns().add(i,metadataColumn);
      }
    }
    module.getTables().add(table);
    temConnection.getModules().add(module);
    tableColumnNums.put(tableItem.getText(0),listColumns.size());
  }
 else {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
  count++;
  updateStatus(IStatus.OK,null);
  parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
}","public void updateUIInThreadIfThread(){
  if (tableItem.isDisposed()) {
    return;
  }
  if (checkConnectionIsDone) {
    tableItem.setText(2,""String_Node_Str"" + listColumns.size());
    tableItem.setText(3,Messages.getString(""String_Node_Str""));
synchronized (countSuccess) {
      countSuccess++;
    }
    ((SalesforceSchemaConnection)connectionItem.getConnection()).setModuleName(tableItem.getText(0));
    temConnection.setModuleName(tableItem.getText(0));
    SalesforceModuleUnit module=ConnectionFactory.eINSTANCE.createSalesforceModuleUnit();
    module.setId(ProxyRepositoryFactory.getInstance().getNextId());
    module.setModuleName(tableItem.getText(0));
    module.setLabel(tableItem.getText(0));
    MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
    String nextId=ProxyRepositoryFactory.getInstance().getNextId();
    table.setId(nextId);
    table.setLabel(tableItem.getText(0));
    if (listColumns.size() > 0) {
      for (int i=0; i < listColumns.size(); i++) {
        MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
        metadataColumn.setNullable(listColumns.get(i).isNullable());
        metadataColumn.setLength(listColumns.get(i).getLength());
        metadataColumn.setPattern(listColumns.get(i).getPattern());
        metadataColumn.setTalendType(listColumns.get(i).getTalendType());
        metadataColumn.setPrecision(listColumns.get(i).getPrecision());
        metadataColumn.setLabel(listColumns.get(i).getLabel());
        table.getColumns().add(i,metadataColumn);
      }
    }
    module.getTables().add(table);
    temConnection.getModules().add(module);
    tableColumnNums.put(tableItem.getText(0),listColumns.size());
  }
 else {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
  count++;
  updateStatus(IStatus.OK,null);
  parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
}",0.9909995262908574
126379,"@Override public ExecutionResult execute(Item item){
  if (item instanceof LDAPSchemaConnectionItem) {
    Connection connection=((LDAPSchemaConnectionItem)item).getConnection();
    if (connection instanceof LDAPSchemaConnection) {
      LDAPSchemaConnection ldapConn=(LDAPSchemaConnection)connection;
      try {
        if (!ldapConn.isContextMode()) {
          String pass=ldapConn.getBindPassword();
          ldapConn.setBindPassword(ldapConn.getValue(pass,true));
          factory.save(item,true);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.SUCCESS_NO_ALERT;
}","@Override public ExecutionResult execute(Item item){
  if (item instanceof LDAPSchemaConnectionItem) {
    Connection connection=((LDAPSchemaConnectionItem)item).getConnection();
    if (connection instanceof LDAPSchemaConnection) {
      LDAPSchemaConnection ldapConn=(LDAPSchemaConnection)connection;
      try {
        if (!ldapConn.isContextMode()) {
          String pass=ldapConn.getBindPassword();
          ldapConn.setBindPassword(ldapConn.getValue(pass,true));
          factory.save(item,true);
          return ExecutionResult.SUCCESS_NO_ALERT;
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9497907949790796
126380,"@Override public ExecutionResult execute(Item item){
  if (item instanceof SalesforceSchemaConnectionItem) {
    Connection connection=((SalesforceSchemaConnectionItem)item).getConnection();
    if (connection instanceof SalesforceSchemaConnection) {
      SalesforceSchemaConnection ssConn=(SalesforceSchemaConnection)connection;
      try {
        if (!ssConn.isContextMode()) {
          ssConn.setPassword(ssConn.getValue(ssConn.getPassword(),true));
          ssConn.setProxyPassword(ssConn.getValue(ssConn.getProxyPassword(),true));
          ssConn.setConsumeSecret(ssConn.getValue(ssConn.getConsumeSecret(),true));
          factory.save(item,true);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.SUCCESS_NO_ALERT;
}","@Override public ExecutionResult execute(Item item){
  if (item instanceof SalesforceSchemaConnectionItem) {
    Connection connection=((SalesforceSchemaConnectionItem)item).getConnection();
    if (connection instanceof SalesforceSchemaConnection) {
      SalesforceSchemaConnection ssConn=(SalesforceSchemaConnection)connection;
      try {
        if (!ssConn.isContextMode()) {
          ssConn.setPassword(ssConn.getValue(ssConn.getPassword(),true));
          ssConn.setProxyPassword(ssConn.getValue(ssConn.getProxyPassword(),true));
          ssConn.setConsumeSecret(ssConn.getValue(ssConn.getConsumeSecret(),true));
          factory.save(item,true);
          return ExecutionResult.SUCCESS_NO_ALERT;
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return ExecutionResult.FAILURE;
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.8181818181818182
126381,"@Override Set<String> getDrivers(){
  Set<String> drivers=new HashSet<String>();
  String javaVersion=System.getProperty(""String_Node_Str"");
  if (javaVersion != null) {
    org.talend.commons.utils.Version v=new org.talend.commons.utils.Version(javaVersion);
    if (v.getMajor() == 1 && v.getMinor() > 6) {
      drivers.add(DRIVER_1_6);
    }
 else {
      drivers.add(DRIVER_1_5);
    }
  }
  return drivers;
}","@Override Set<String> getDrivers(){
  Set<String> drivers=new HashSet<String>();
  String javaVersion=System.getProperty(""String_Node_Str"");
  if (javaVersion != null) {
    org.talend.commons.utils.Version v=new org.talend.commons.utils.Version(javaVersion);
    if (v.getMajor() == 1 && v.getMinor() == 5) {
      drivers.add(DRIVER_1_5);
    }
 else {
      drivers.add(DRIVER_1_6);
    }
  }
  return drivers;
}",0.9867310012062728
126382,"public static String getPasswordDisplay(String value){
  if (value != null) {
    if (value.length() == 0) {
      return ""String_Node_Str"";
    }
 else {
      return value.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return value;
}","public static String getPasswordDisplay(String value){
  if (value == null || value.length() == 0) {
    return ""String_Node_Str"";
  }
 else {
    return value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
}",0.4525862068965517
126383,"/** 
 * DOC wzhang Comment method ""setDelimitedFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDelimitedFileValue(DelimitedFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param.isShow(node.getElementParameters())) {
      String value=getParameterValue(connection,node,param);
      if (value != null) {
        RowSeparator rowSeparator=null;
        if (""String_Node_Str"".equals(value)) {
          rowSeparator=RowSeparator.STANDART_EOL_LITERAL;
        }
 else {
          rowSeparator=RowSeparator.CUSTOM_STRING_LITERAL;
          value=getParameterOriginalValue(connection,node,param);
        }
        connection.setRowSeparatorType(rowSeparator);
        connection.setRowSeparatorValue(value);
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param.isShow(node.getElementParameters())) {
      String value=getParameterValue(connection,node,param);
      if (value != null) {
        FieldSeparator separatorType=null;
        if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.SEMICOLON_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.COMMA_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.TABULATION_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.SPACE_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.ALT_65_LITERAL;
        }
 else {
          separatorType=FieldSeparator.CUSTOM_UTF8_LITERAL;
          value=getParameterOriginalValue(connection,node,param);
        }
        connection.setFieldSeparatorType(separatorType);
        connection.setFieldSeparatorValue(value);
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setCsvOption(Boolean.valueOf(value).booleanValue());
    }
    if (connection.isCsvOption()) {
      connection.setEscapeType(Escape.CSV);
    }
 else {
      connection.setEscapeType(Escape.DELIMITED);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterOriginalValue(connection,node,param);
    if (value != null) {
      if (""String_Node_Str"".equals(value)) {
        value=""String_Node_Str"";
      }
      connection.setEscapeChar(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterOriginalValue(connection,node,param);
    if (value != null) {
      if (""String_Node_Str"".equals(value)) {
        value=""String_Node_Str"";
      }
      connection.setTextEnclosure(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSplitRecord(Boolean.valueOf(value).booleanValue());
    }
  }
}","/** 
 * DOC wzhang Comment method ""setDelimitedFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDelimitedFileValue(DelimitedFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param.isShow(node.getElementParameters())) {
      String value=getParameterValue(connection,node,param);
      if (value != null) {
        RowSeparator rowSeparator=null;
        if (""String_Node_Str"".equals(value)) {
          rowSeparator=RowSeparator.STANDART_EOL_LITERAL;
        }
 else {
          rowSeparator=RowSeparator.CUSTOM_STRING_LITERAL;
          value=getParameterOriginalValue(connection,node,param);
        }
        connection.setRowSeparatorType(rowSeparator);
        connection.setRowSeparatorValue(value);
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      FieldSeparator separatorType=null;
      if (""String_Node_Str"".equals(value)) {
        separatorType=FieldSeparator.SEMICOLON_LITERAL;
      }
 else       if (""String_Node_Str"".equals(value)) {
        separatorType=FieldSeparator.COMMA_LITERAL;
      }
 else       if (""String_Node_Str"".equals(value)) {
        separatorType=FieldSeparator.TABULATION_LITERAL;
      }
 else       if (""String_Node_Str"".equals(value)) {
        separatorType=FieldSeparator.SPACE_LITERAL;
      }
 else       if (""String_Node_Str"".equals(value)) {
        separatorType=FieldSeparator.ALT_65_LITERAL;
      }
 else {
        separatorType=FieldSeparator.CUSTOM_UTF8_LITERAL;
        value=getParameterOriginalValue(connection,node,param);
      }
      connection.setFieldSeparatorType(separatorType);
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setCsvOption(Boolean.valueOf(value).booleanValue());
    }
    if (connection.isCsvOption()) {
      connection.setEscapeType(Escape.CSV);
    }
 else {
      connection.setEscapeType(Escape.DELIMITED);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterOriginalValue(connection,node,param);
    if (value != null) {
      if (""String_Node_Str"".equals(value)) {
        value=""String_Node_Str"";
      }
      connection.setEscapeChar(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterOriginalValue(connection,node,param);
    if (value != null) {
      if (""String_Node_Str"".equals(value)) {
        value=""String_Node_Str"";
      }
      connection.setTextEnclosure(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSplitRecord(Boolean.valueOf(value).booleanValue());
    }
  }
}",0.9840716195791188
126384,"/** 
 * DOC wzhang Comment method ""setDelimitedFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDelimitedFileValue(DelimitedFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setCsvOption(Boolean.valueOf(value).booleanValue());
    }
    if (connection.isCsvOption()) {
      connection.setEscapeType(Escape.CSV);
    }
 else {
      connection.setEscapeType(Escape.DELIMITED);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEscapeChar(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setTextEnclosure(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSplitRecord(Boolean.valueOf(value).booleanValue());
    }
  }
}","/** 
 * DOC wzhang Comment method ""setDelimitedFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDelimitedFileValue(DelimitedFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param.isShow(node.getElementParameters())) {
      String value=getParameterValue(connection,node,param);
      if (value != null) {
        RowSeparator rowSeparator=null;
        if (""String_Node_Str"".equals(value)) {
          rowSeparator=RowSeparator.STANDART_EOL_LITERAL;
        }
 else {
          rowSeparator=RowSeparator.CUSTOM_STRING_LITERAL;
          value=getParameterOriginalValue(connection,node,param);
        }
        connection.setRowSeparatorType(rowSeparator);
        connection.setRowSeparatorValue(value);
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param.isShow(node.getElementParameters())) {
      String value=getParameterValue(connection,node,param);
      if (value != null) {
        FieldSeparator separatorType=null;
        if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.SEMICOLON_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.COMMA_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.TABULATION_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.SPACE_LITERAL;
        }
 else         if (""String_Node_Str"".equals(value)) {
          separatorType=FieldSeparator.ALT_65_LITERAL;
        }
 else {
          separatorType=FieldSeparator.CUSTOM_UTF8_LITERAL;
          value=getParameterOriginalValue(connection,node,param);
        }
        connection.setFieldSeparatorType(separatorType);
        connection.setFieldSeparatorValue(value);
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setCsvOption(Boolean.valueOf(value).booleanValue());
    }
    if (connection.isCsvOption()) {
      connection.setEscapeType(Escape.CSV);
    }
 else {
      connection.setEscapeType(Escape.DELIMITED);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterOriginalValue(connection,node,param);
    if (value != null) {
      if (""String_Node_Str"".equals(value)) {
        value=""String_Node_Str"";
      }
      connection.setEscapeChar(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterOriginalValue(connection,node,param);
    if (value != null) {
      if (""String_Node_Str"".equals(value)) {
        value=""String_Node_Str"";
      }
      connection.setTextEnclosure(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSplitRecord(Boolean.valueOf(value).booleanValue());
    }
  }
}",0.780169420913762
126385,"/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(quote)) {
    text=quote + text;
  }
  if (!text.endsWith(quote)) {
    text=text + quote;
  }
  return text;
}","/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (""String_Node_Str"".equals(text)) {
    text=quote + quote;
  }
 else {
    if (!text.startsWith(quote)) {
      text=quote + text;
    }
    if (!text.endsWith(quote)) {
      text=text + quote;
    }
  }
  return text;
}",0.8726790450928382
126386,"private static String getNormalizeParameterValue(String value,IElementParameter ep,boolean itemFromTable){
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA,EParameterFieldType.SCHEMA_XPATH_QUERYS);
  if (escapeQuotation.contains(ep.getFieldType()) && ep.isRaw()) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL,EParameterFieldType.MEMO_IMPORT,EParameterFieldType.MEMO_MESSAGE);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.CONNECTION_LIST,EParameterFieldType.LOOKUP_COLUMN_LIST,EParameterFieldType.CONTEXT_PARAM_NAME_LIST,EParameterFieldType.PROCESS_TYPE,EParameterFieldType.COLOR,EParameterFieldType.TABLE_BY_ROW,EParameterFieldType.HADOOP_JARS_DIALOG);
  List<EParameterFieldType> needQuoteListForItem=itemFromTable ? Arrays.asList(EParameterFieldType.SCHEMA_TYPE,EParameterFieldType.MODULE_LIST) : new ArrayList<EParameterFieldType>();
  List<String> needQuoteListByName=Arrays.asList(""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType()) || needQuoteListForItem.contains(ep.getFieldType()) || needQuoteListByName.contains(ep.getName())|| ep.isRaw()) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value == null || ""String_Node_Str"".equals(value.trim())) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value)) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
  return value;
}","private static String getNormalizeParameterValue(String value,IElementParameter ep,boolean itemFromTable){
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA,EParameterFieldType.SCHEMA_XPATH_QUERYS);
  if (escapeQuotation.contains(ep.getFieldType()) && ep.isRaw()) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL,EParameterFieldType.MEMO_IMPORT,EParameterFieldType.MEMO_MESSAGE);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.CONNECTION_LIST,EParameterFieldType.LOOKUP_COLUMN_LIST,EParameterFieldType.CONTEXT_PARAM_NAME_LIST,EParameterFieldType.PROCESS_TYPE,EParameterFieldType.COLOR,EParameterFieldType.TABLE_BY_ROW,EParameterFieldType.HADOOP_JARS_DIALOG);
  List<EParameterFieldType> needQuoteListForItem=itemFromTable ? Arrays.asList(EParameterFieldType.SCHEMA_TYPE,EParameterFieldType.SAP_SCHEMA_TYPE,EParameterFieldType.MODULE_LIST) : new ArrayList<EParameterFieldType>();
  List<String> needQuoteListByName=Arrays.asList(""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType()) || needQuoteListForItem.contains(ep.getFieldType()) || needQuoteListByName.contains(ep.getName())|| ep.isRaw()) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value == null || ""String_Node_Str"".equals(value.trim())) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value)) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
  return value;
}",0.9922680412371134
126387,"/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (""String_Node_Str"".equals(text)) {
    text=quote + quote;
  }
 else {
    if (!text.startsWith(quote)) {
      text=quote + text;
    }
    if (!text.endsWith(quote)) {
      text=text + quote;
    }
  }
  return text;
}","/** 
 * DOC ycbai Comment method ""addQuotesIfNotExist"".
 * @param text
 * @return
 */
public static String addQuotesIfNotExist(String text,String quote){
  if (text == null) {
    return null;
  }
  if (!text.startsWith(quote)) {
    text=quote + text;
  }
  if (!text.endsWith(quote) || (quote != null && quote.equals(text))) {
    text=text + quote;
  }
  return text;
}",0.6389937106918239
126388,"protected void switchSettingsView(String oldName,String newName){
}","public void switchSettingsView(String oldName,String newName){
}",0.916030534351145
126389,"@Override public void execute(){
  boolean modified=false;
  if (modelManager.getContextManager() != null) {
    originalName=param.getName();
    for (    IContext context : modelManager.getContextManager().getListContext()) {
      for (      IContextParameter contextParameter : context.getContextParameterList()) {
        String tempSourceId=contextParameter.getSource();
        if (originalName.equals(contextParameter.getName()) && tempSourceId.equals(sourceId)) {
          contextParameter.setName(newName);
          if (contextParameter.getPrompt().equals(originalName + ""String_Node_Str"")) {
            contextParameter.setPrompt(newName + ""String_Node_Str"");
          }
          modified=true;
        }
      }
    }
    param.setName(newName);
    if (param.getPrompt().equals(originalName + ""String_Node_Str"")) {
      param.setPrompt(newName + ""String_Node_Str"");
    }
  }
  if (modified) {
    updateRelation();
  }
}","@Override public void execute(){
  boolean modified=false;
  if (modelManager.getContextManager() != null) {
    originalName=param.getName();
    for (    IContext context : modelManager.getContextManager().getListContext()) {
      for (      IContextParameter contextParameter : context.getContextParameterList()) {
        String tempSourceId=contextParameter.getSource();
        if (originalName.equals(contextParameter.getName()) && tempSourceId.equals(sourceId)) {
          contextParameter.setName(newName);
          if (contextParameter.getPrompt().equals(originalName + ""String_Node_Str"")) {
            contextParameter.setPrompt(newName + ""String_Node_Str"");
          }
          modified=true;
        }
      }
    }
    param.setName(newName);
    if (param.getPrompt().equals(originalName + ""String_Node_Str"")) {
      param.setPrompt(newName + ""String_Node_Str"");
    }
  }
  if (modified) {
    updateRelation(originalName,newName);
  }
}",0.9894736842105264
126390,"@Override public void undo(){
  boolean modified=false;
  if (modelManager.getContextManager() != null) {
    for (    IContext context : modelManager.getContextManager().getListContext()) {
      for (      IContextParameter contextParameter : context.getContextParameterList()) {
        if (newName.equals(contextParameter.getName())) {
          contextParameter.setName(originalName);
          if (contextParameter.getPrompt().equals(newName + ""String_Node_Str"")) {
            contextParameter.setPrompt(originalName + ""String_Node_Str"");
          }
          modified=true;
        }
      }
    }
  }
  if (modified) {
    updateRelation();
  }
}","@Override public void undo(){
  boolean modified=false;
  if (modelManager.getContextManager() != null) {
    for (    IContext context : modelManager.getContextManager().getListContext()) {
      for (      IContextParameter contextParameter : context.getContextParameterList()) {
        if (newName.equals(contextParameter.getName())) {
          contextParameter.setName(originalName);
          if (contextParameter.getPrompt().equals(newName + ""String_Node_Str"")) {
            contextParameter.setPrompt(originalName + ""String_Node_Str"");
          }
          modified=true;
        }
      }
    }
  }
  if (modified) {
    updateRelation(newName,originalName);
  }
}",0.984984984984985
126391,"private void updateRelation(){
  if (param != null) {
    IContextManager manager=modelManager.getContextManager();
    if (manager != null && manager instanceof JobContextManager) {
      JobContextManager jobContextManager=(JobContextManager)manager;
      if (!modelManager.isRepositoryContext() || modelManager.isRepositoryContext() && jobContextManager.isOriginalParameter(param.getName())) {
        jobContextManager.setModified(true);
        manager.fireContextsChangedEvent();
      }
    }
  }
}","private void updateRelation(String _oldName,String _newName){
  if (param != null) {
    IContextManager manager=modelManager.getContextManager();
    if (manager != null && manager instanceof JobContextManager) {
      JobContextManager jobContextManager=(JobContextManager)manager;
      if (!modelManager.isRepositoryContext() || modelManager.isRepositoryContext() && jobContextManager.isOriginalParameter(param.getName())) {
        jobContextManager.setModified(true);
        manager.fireContextsChangedEvent();
      }
    }
  }
  if (modelManager instanceof ContextComposite) {
    ((ContextComposite)modelManager).switchSettingsView(_oldName,_newName);
    modelManager.refresh();
  }
}",0.8426311407160699
126392,"private void setButtonEnableState(){
  boolean enableState=!modelManager.isReadOnly();
  if (this.addButton != null) {
    this.addButton.setEnabled(enableState);
  }
  if (this.removeButton != null) {
    this.removeButton.setEnabled(enableState);
  }
  if (this.moveUpButton != null) {
    this.moveUpButton.setEnabled(enableState);
  }
  if (this.moveDownButton != null) {
    this.moveDownButton.setEnabled(enableState);
  }
  if (contextConfigButton != null) {
    this.contextConfigButton.setEnabled(enableState);
  }
  if (contextsCombo != null) {
    this.contextsCombo.setEnabled(enableState);
  }
}","private void setButtonEnableState(){
  boolean enableState=!modelManager.isReadOnly();
  if (this.addButton != null) {
    this.addButton.setEnabled(enableState);
  }
  if (this.removeButton != null) {
    this.removeButton.setEnabled(enableState);
  }
  if (this.moveUpButton != null) {
    this.moveUpButton.setEnabled(enableState);
  }
  if (this.moveDownButton != null) {
    this.moveDownButton.setEnabled(enableState);
  }
  if (this.selectContextVariablesButton != null) {
    this.selectContextVariablesButton.setEnabled(enableState);
  }
  if (contextConfigButton != null) {
    this.contextConfigButton.setEnabled(enableState);
  }
  if (contextsCombo != null) {
    this.contextsCombo.setEnabled(enableState);
  }
}",0.823088455772114
126393,"private void createButtonsGroup(Composite parentComposite){
  buttonsComp=new Composite(parentComposite,SWT.NULL);
  buttonsComp.setLayout(GridLayoutFactory.swtDefaults().spacing(0,0).margins(0,0).numColumns(7).create());
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.DOWN).grab(true,false).applyTo(buttonsComp);
  buttonList.clear();
  addButton=createAddPushButton(buttonsComp);
  buttonList.add(addButton);
  removeButton=createRemovePushButton(buttonsComp);
  buttonList.add(removeButton);
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  if (!isRepositoryContext) {
    moveUpButton=createMoveUpPushButton(buttonsComp);
    buttonList.add(moveUpButton);
    moveDownButton=createMoveDownPushButton(buttonsComp);
    buttonList.add(moveDownButton);
  }
  if ((modelManager instanceof ContextComposite) && !((ContextComposite)modelManager).isRepositoryContext()) {
    Button selectContextVariablesButton=createSelectContextVariablesPushButton(buttonsComp);
    buttonList.add(selectContextVariablesButton);
  }
  Composite layoutComposite=new Composite(buttonsComp,SWT.NULL);
  layoutComposite.setLayout(GridLayoutFactory.swtDefaults().spacing(0,0).numColumns(1).create());
  GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.DOWN).grab(true,false).applyTo(layoutComposite);
  createContextsGroup(layoutComposite);
}","private void createButtonsGroup(Composite parentComposite){
  buttonsComp=new Composite(parentComposite,SWT.NULL);
  buttonsComp.setLayout(GridLayoutFactory.swtDefaults().spacing(0,0).margins(0,0).numColumns(7).create());
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.DOWN).grab(true,false).applyTo(buttonsComp);
  buttonList.clear();
  addButton=createAddPushButton(buttonsComp);
  buttonList.add(addButton);
  removeButton=createRemovePushButton(buttonsComp);
  buttonList.add(removeButton);
  boolean isRepositoryContext=(modelManager instanceof ContextComposite) && ((ContextComposite)modelManager).isRepositoryContext();
  if (!isRepositoryContext) {
    moveUpButton=createMoveUpPushButton(buttonsComp);
    buttonList.add(moveUpButton);
    moveDownButton=createMoveDownPushButton(buttonsComp);
    buttonList.add(moveDownButton);
  }
  if ((modelManager instanceof ContextComposite) && !((ContextComposite)modelManager).isRepositoryContext()) {
    selectContextVariablesButton=createSelectContextVariablesPushButton(buttonsComp);
    buttonList.add(selectContextVariablesButton);
  }
  Composite layoutComposite=new Composite(buttonsComp,SWT.NULL);
  layoutComposite.setLayout(GridLayoutFactory.swtDefaults().spacing(0,0).numColumns(1).create());
  GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.DOWN).grab(true,false).applyTo(layoutComposite);
  createContextsGroup(layoutComposite);
}",0.9975133214920072
126394,"@Override public List<? extends IElementParameter> getElementParametersWithChildrens(){
  List<IElementParameter> fullListParam=new ArrayList<IElementParameter>(this.elementParameters);
  for (  IElementParameter curParam : elementParameters) {
    if (curParam.getChildParameters() != null) {
      for (      String key : curParam.getChildParameters().keySet()) {
        IElementParameter childParam=curParam.getChildParameters().get(key);
        fullListParam.add(childParam);
      }
    }
  }
  return fullListParam;
}","@Override public List<? extends IElementParameter> getElementParametersWithChildrens(){
  if (this.elementParameters == null) {
    return new ArrayList<IElementParameter>();
  }
  List<IElementParameter> fullListParam=new ArrayList<IElementParameter>(this.elementParameters);
  for (  IElementParameter curParam : elementParameters) {
    if (curParam.getChildParameters() != null) {
      for (      String key : curParam.getChildParameters().keySet()) {
        IElementParameter childParam=curParam.getChildParameters().get(key);
        fullListParam.add(childParam);
      }
    }
  }
  return fullListParam;
}",0.8781770376862401
126395,"private static String getNormalizeParameterValue(String value,IElementParameter ep,boolean itemFromTable){
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA,EParameterFieldType.SCHEMA_XPATH_QUERYS);
  if (escapeQuotation.contains(ep.getFieldType()) && ep.isRaw()) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL,EParameterFieldType.MEMO_IMPORT,EParameterFieldType.MEMO_MESSAGE);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.CONNECTION_LIST,EParameterFieldType.LOOKUP_COLUMN_LIST,EParameterFieldType.CONTEXT_PARAM_NAME_LIST,EParameterFieldType.PROCESS_TYPE,EParameterFieldType.COLOR,EParameterFieldType.TABLE_BY_ROW,EParameterFieldType.HADOOP_JARS_DIALOG);
  List<EParameterFieldType> needQuoteListForItem=itemFromTable ? Arrays.asList(EParameterFieldType.SCHEMA_TYPE,EParameterFieldType.MODULE_LIST) : new ArrayList<EParameterFieldType>();
  List<String> needQuoteListByName=Arrays.asList(""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType()) || needQuoteListForItem.contains(ep.getFieldType()) || needQuoteListByName.contains(ep.getName())|| ep.isRaw()) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value == null || ""String_Node_Str"".equals(value.trim())) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value)) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
  return value;
}","private static String getNormalizeParameterValue(String value,IElementParameter ep,boolean itemFromTable){
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA,EParameterFieldType.SCHEMA_XPATH_QUERYS);
  if (escapeQuotation.contains(ep.getFieldType()) && ep.isRaw()) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL,EParameterFieldType.MEMO_IMPORT,EParameterFieldType.MEMO_MESSAGE);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.CONNECTION_LIST,EParameterFieldType.LOOKUP_COLUMN_LIST,EParameterFieldType.CONTEXT_PARAM_NAME_LIST,EParameterFieldType.PROCESS_TYPE,EParameterFieldType.COLOR,EParameterFieldType.TABLE_BY_ROW,EParameterFieldType.HADOOP_JARS_DIALOG);
  List<EParameterFieldType> needQuoteListForItem=itemFromTable ? Arrays.asList(EParameterFieldType.SCHEMA_TYPE,EParameterFieldType.MODULE_LIST) : new ArrayList<EParameterFieldType>();
  List<String> needQuoteListByName=Arrays.asList(""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType()) || needQuoteListForItem.contains(ep.getFieldType()) || needQuoteListByName.contains(ep.getName())|| ep.isRaw()) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value == null || ""String_Node_Str"".equals(value.trim())) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value)) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(ep.getName())) {
    value=value.toLowerCase();
  }
  return value;
}",0.9755786791250796
126396,"public static IEditorReference[] getOpenedEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
        IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
        list.addAll(Arrays.asList(reference));
      }
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}","public static IEditorReference[] getOpenedEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
        IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
        list.addAll(Arrays.asList(reference));
      }
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}",0.9917491749174916
126397,"public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}","public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
 else           if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID,null,IWorkbenchPage.VIEW_CREATE);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}",0.8831318364997122
126398,"public void run(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
    IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
    list.addAll(Arrays.asList(reference));
  }
}","@Override public void run(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
    IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
    list.addAll(Arrays.asList(reference));
  }
}",0.98567335243553
126399,"public static IEditorReference[] getOpenedEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
        IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
        list.addAll(Arrays.asList(reference));
      }
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}","public static IEditorReference[] getOpenedEditors(){
  final List<IEditorReference> list=new ArrayList<IEditorReference>();
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
        IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
        list.addAll(Arrays.asList(reference));
      }
    }
  }
);
  return list.toArray(new IEditorReference[0]);
}",0.9917491749174916
126400,"public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}","public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
 else           if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID,null,IWorkbenchPage.VIEW_CREATE);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}",0.8831318364997122
126401,"public void run(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
    IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
    list.addAll(Arrays.asList(reference));
  }
}","@Override public void run(){
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
    IEditorReference[] reference=activeWorkbenchWindow.getActivePage().getEditorReferences();
    list.addAll(Arrays.asList(reference));
  }
}",0.98567335243553
126402,"private String getAppArgValue(String arg,String defaultValue){
  String value=defaultValue;
  int index=ArrayUtils.indexOf(Platform.getApplicationArgs(),arg);
  if (index > 0) {
    if (index + 1 < Platform.getApplicationArgs().length) {
      value=Platform.getApplicationArgs()[index + 1];
    }
  }
  return value;
}","private String getAppArgValue(String arg,String defaultValue){
  String value=defaultValue;
  int index=ArrayUtils.indexOf(Platform.getApplicationArgs(),arg);
  if (index > -1) {
    if (index + 1 < Platform.getApplicationArgs().length) {
      value=Platform.getApplicationArgs()[index + 1];
    }
  }
  return value;
}",0.9953051643192488
126403,"/** 
 * DOC xqliu Comment method ""forceRefreshContextsView"".
 */
public static void forceRefreshContextsView(){
  AbstractContextView cxtView=forceGetView(AbstractContextView.CTX_ID_DESIGNER);
  if (cxtView != null) {
    refreshView(cxtView);
  }
}","/** 
 * DOC xqliu Comment method ""forceRefreshContextsView"".
 */
public static void forceRefreshContextsView(){
  refreshContextsView();
}",0.6770025839793282
126404,"public static void refreshContextsView(){
  Set<String> perspIDs=new HashSet<String>();
  perspIDs.add(PERSPECTIVE_DI_ID);
  perspIDs.add(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  AbstractContextView cxtView=getView(perspIDs,AbstractContextView.CTX_ID_DESIGNER);
  if (cxtView != null) {
    refreshView(cxtView);
  }
}","public static void refreshContextsView(){
  Set<String> perspIDs=new HashSet<String>();
  perspIDs.add(PERSPECTIVE_DI_ID);
  perspIDs.add(IBrandingConfiguration.PERSPECTIVE_CAMEL_ID);
  AbstractContextView cxtView=getView(perspIDs,AbstractContextView.CTX_ID_DESIGNER);
  if (cxtView != null) {
    refreshView(cxtView);
  }
 else {
    perspIDs=new HashSet<String>();
    perspIDs.add(IBrandingConfiguration.PERSPECTIVE_DQ_ID);
    cxtView=getView(perspIDs,AbstractContextView.CTX_ID_TDQ);
    if (cxtView != null) {
      refreshView(cxtView);
    }
 else {
      cxtView=forceGetView(AbstractContextView.CTX_ID_DESIGNER);
      if (cxtView != null) {
        refreshView(cxtView);
      }
    }
  }
}",0.6329113924050633
126405,"@Override public void removeFromParent(){
  if (table.eContainer() instanceof SAPFunctionUnit) {
    SAPFunctionUnit funUnit=(SAPFunctionUnit)table.eContainer();
    funUnit.getTables().remove(table);
    return;
  }
  if (table.eContainer() instanceof SalesforceModuleUnit) {
    SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)table.eContainer();
    moduleUnit.getTables().remove(table);
    return;
  }
  if (table.getNamespace() instanceof Package) {
    Package pkg=(Package)table.getNamespace();
    if (pkg.getOwnedElement().contains(table)) {
      pkg.getOwnedElement().remove(table);
    }
  }
  Property property=getProperty();
  if (property == null) {
    return;
  }
  Connection connection=null;
  Item item=property.getItem();
  if (item instanceof ConnectionItem) {
    ConnectionItem cItem=(ConnectionItem)item;
    connection=cItem.getConnection();
  }
  if (connection instanceof MDMConnection) {
    EList schemas=((MDMConnection)connection).getSchemas();
    Iterator iterator2=schemas.iterator();
    while (iterator2.hasNext()) {
      Object object=iterator2.next();
      if (object instanceof Concept) {
        Concept concept=(Concept)object;
        if (concept.getLabel() != null && concept.getLabel().equals(table.getLabel())) {
          iterator2.remove();
          break;
        }
      }
    }
  }
  return;
}","@Override public void removeFromParent(){
  if (table.eContainer() instanceof SAPFunctionUnit) {
    SAPFunctionUnit funUnit=(SAPFunctionUnit)table.eContainer();
    String tableType=table.getTableType();
    if (""String_Node_Str"".endsWith(tableType)) {
      funUnit.getInputTables().remove(table);
    }
 else {
      funUnit.getTables().remove(table);
    }
    return;
  }
  if (table.eContainer() instanceof SalesforceModuleUnit) {
    SalesforceModuleUnit moduleUnit=(SalesforceModuleUnit)table.eContainer();
    moduleUnit.getTables().remove(table);
    return;
  }
  if (table.getNamespace() instanceof Package) {
    Package pkg=(Package)table.getNamespace();
    if (pkg.getOwnedElement().contains(table)) {
      pkg.getOwnedElement().remove(table);
    }
  }
  Property property=getProperty();
  if (property == null) {
    return;
  }
  Connection connection=null;
  Item item=property.getItem();
  if (item instanceof ConnectionItem) {
    ConnectionItem cItem=(ConnectionItem)item;
    connection=cItem.getConnection();
  }
  if (connection instanceof MDMConnection) {
    EList schemas=((MDMConnection)connection).getSchemas();
    Iterator iterator2=schemas.iterator();
    while (iterator2.hasNext()) {
      Object object=iterator2.next();
      if (object instanceof Concept) {
        Concept concept=(Concept)object;
        if (concept.getLabel() != null && concept.getLabel().equals(table.getLabel())) {
          iterator2.remove();
          break;
        }
      }
    }
  }
  return;
}",0.9442119944211994
126406,"public static ConnectionBean writeFromString(String s){
  ConnectionBean toReturn=new ConnectionBean();
  try {
    String[] st=s.split(FIELDS_SEPARATOR,-1);
    int i=0;
    toReturn.setRepositoryId(st[i++]);
    toReturn.setName(st[i++]);
    toReturn.setDescription(st[i++]);
    toReturn.setUser(st[i++]);
    toReturn.setPassword(st[i++]);
    i++;
    toReturn.setComplete(new Boolean(st[i++]));
    JSONObject dynamicJson=new JSONObject();
    toReturn.getConDetails().put(DYNAMICFIELDS,dynamicJson);
    while (i < st.length) {
      String[] st2=st[i++].split(DYN_FIELDS_SEPARATOR,-1);
      dynamicJson.put(st2[0],st2[1]);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    ExceptionHandler.process(e);
  }
catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return toReturn;
}","public static ConnectionBean writeFromString(String s){
  ConnectionBean toReturn=new ConnectionBean();
  try {
    String[] st=s.split(FIELDS_SEPARATOR,-1);
    int i=0;
    toReturn.setRepositoryId(st[i++]);
    toReturn.setName(st[i++]);
    toReturn.setDescription(st[i++]);
    toReturn.setUser(st[i++]);
    toReturn.setPassword(st[i++]);
    toReturn.setComplete(new Boolean(st[i++]));
    JSONObject dynamicJson=new JSONObject();
    toReturn.getConDetails().put(DYNAMICFIELDS,dynamicJson);
    while (i < st.length) {
      String[] st2=st[i++].split(DYN_FIELDS_SEPARATOR,-1);
      dynamicJson.put(st2[0],st2[1]);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    ExceptionHandler.process(e);
  }
catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return toReturn;
}",0.9944203347799132
126407,"@Override public boolean contains(String jarName){
  return jarList.contains(jarName);
}","@Override public boolean contains(String jarName){
  return list().contains(jarName);
}",0.96
126408,"public static Map<String,ContextItem> getRepositoryContextItemIdMapping(){
  List<ContextItem> contextItemList=getAllContextItem();
  if (checkObject(contextItemList)) {
    return Collections.emptyMap();
  }
  Map<String,ContextItem> itemMap=new HashMap<String,ContextItem>();
  for (  ContextItem item : contextItemList) {
    itemMap.put(item.getProperty().getId(),item);
  }
  return itemMap;
}","public static Map<String,Item> getRepositoryContextItemIdMapping(){
  List<ContextItem> contextItemList=getAllContextItem();
  Map<String,Item> itemMap=new HashMap<String,Item>();
  if (checkObject(contextItemList)) {
    return itemMap;
  }
  for (  ContextItem item : contextItemList) {
    itemMap.put(item.getProperty().getId(),item);
  }
  return itemMap;
}",0.5
126409,"@Override public void saveToEmf(EList contextTypeList){
  ContextType contextType;
  IContext context;
  EList contextTypeParamList;
  ContextParameterType contextParamType;
  IContextParameter contextParam;
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  for (int i=0; i < listContext.size(); i++) {
    contextType=TalendFileFactory.eINSTANCE.createContextType();
    context=listContext.get(i);
    contextType.setName(context.getName());
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    contextTypeParamList=contextType.getContextParameter();
    if (context.getContextParameterList() != null) {
      for (int j=0; j < context.getContextParameterList().size(); j++) {
        contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
        contextParam=context.getContextParameterList().get(j);
        contextParamType.setName(contextParam.getName());
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        if (PasswordEncryptUtil.isPasswordType(contextParamType.getType())) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(contextParam.getValue());
            contextParamType.setValue(password);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          contextParamType.setValue(contextParam.getValue());
        }
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          ContextItem item=ContextUtils.getContextItemById2(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
        contextTypeParamList.add(contextParamType);
      }
    }
    contextTypeList.add(contextType);
  }
}","@Override public void saveToEmf(EList contextTypeList){
  ContextType contextType;
  IContext context;
  EList contextTypeParamList;
  ContextParameterType contextParamType;
  IContextParameter contextParam;
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  for (int i=0; i < listContext.size(); i++) {
    contextType=TalendFileFactory.eINSTANCE.createContextType();
    context=listContext.get(i);
    contextType.setName(context.getName());
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    contextTypeParamList=contextType.getContextParameter();
    if (context.getContextParameterList() != null) {
      for (int j=0; j < context.getContextParameterList().size(); j++) {
        contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
        contextParam=context.getContextParameterList().get(j);
        contextParamType.setName(contextParam.getName());
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        if (PasswordEncryptUtil.isPasswordType(contextParamType.getType())) {
          try {
            String password=PasswordEncryptUtil.encryptPassword(contextParam.getValue());
            contextParamType.setValue(password);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          contextParamType.setValue(contextParam.getValue());
        }
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getContextItemById3(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
        contextTypeParamList.add(contextParamType);
      }
    }
    contextTypeList.add(contextType);
  }
}",0.9977116704805492
126410,"@Override public void loadFromEmf(EList contextTypeList,String defaultContextName){
  IContext context;
  ContextType contextType;
  List<IContextParameter> contextParamList;
  EList contextTypeParamList;
  ContextParameterType contextParamType;
  JobContextParameter contextParam;
  lostParameters.clear();
  listContext.clear();
  if (contextTypeList == null || contextTypeList.isEmpty()) {
    retrieveDefaultContext();
    return;
  }
  List<ContextItem> contextItemList=ContextUtils.getAllContextItem();
  boolean setDefault=false;
  for (int i=0; i < contextTypeList.size(); i++) {
    contextType=(ContextType)contextTypeList.get(i);
    String name=contextType.getName();
    if (name == null) {
      name=IContext.DEFAULT;
    }
    context=new JobContext(name);
    context.setConfirmationNeeded(contextType.isConfirmationNeeded());
    contextParamList=new ArrayList<IContextParameter>();
    contextTypeParamList=contextType.getContextParameter();
    Set<String> paramNamesInCurrentContext=new HashSet<String>();
    for (int j=0; j < contextTypeParamList.size(); j++) {
      contextParamType=(ContextParameterType)contextTypeParamList.get(j);
      if (paramNamesInCurrentContext.contains(contextParamType.getName())) {
        continue;
      }
      paramNamesInCurrentContext.add(contextParamType.getName());
      contextParam=new JobContextParameter();
      contextParam.setContext(context);
      contextParam.setName(contextParamType.getName());
      contextParam.setPrompt(contextParamType.getPrompt());
      originalParamerters.add(contextParam.getName());
      boolean exists=false;
      ECodeLanguage curLanguage=LanguageManager.getCurrentLanguage();
      if (curLanguage == ECodeLanguage.JAVA) {
        exists=true;
        try {
          ContextParameterJavaTypeManager.getJavaTypeFromId(contextParamType.getType());
        }
 catch (        IllegalArgumentException e) {
          exists=false;
        }
      }
 else {
        String[] existingTypes;
        existingTypes=ContextParameterJavaTypeManager.getPerlTypesLabels();
        for (        String existingType : existingTypes) {
          if (existingType.equals(contextParamType.getType())) {
            exists=true;
          }
        }
      }
      if (exists) {
        contextParam.setType(contextParamType.getType());
      }
 else {
        contextParam.setType(MetadataTalendType.getDefaultTalendType());
      }
      contextParam.setValue(contextParamType.getValue());
      contextParam.setPromptNeeded(contextParamType.isPromptNeeded());
      contextParam.setComment(contextParamType.getComment());
      String repositoryContextId=contextParamType.getRepositoryContextId();
      String source=IContextParameter.BUILT_IN;
      if (repositoryContextId != null && !""String_Node_Str"".equals(repositoryContextId)) {
        ContextItem item=ContextUtils.getContextItemById(contextItemList,repositoryContextId);
        if (item != null) {
          source=item.getProperty().getId();
        }
 else {
          lostParameters.add(contextParam.getName());
        }
      }
      contextParam.setSource(source);
      contextParamList.add(contextParam);
    }
    context.setContextParameterList(contextParamList);
    if (context.getName().equals(defaultContextName)) {
      setDefaultContext(context);
      setDefault=true;
    }
    listContext.add(context);
  }
  if (!setDefault) {
    setDefaultContext(listContext.get(0));
  }
}","@Override public void loadFromEmf(EList contextTypeList,String defaultContextName){
  IContext context;
  ContextType contextType;
  List<IContextParameter> contextParamList;
  EList contextTypeParamList;
  ContextParameterType contextParamType;
  JobContextParameter contextParam;
  lostParameters.clear();
  listContext.clear();
  if (contextTypeList == null || contextTypeList.isEmpty()) {
    retrieveDefaultContext();
    return;
  }
  List<ContextItem> contextItemList=ContextUtils.getAllContextItem();
  boolean setDefault=false;
  for (int i=0; i < contextTypeList.size(); i++) {
    contextType=(ContextType)contextTypeList.get(i);
    String name=contextType.getName();
    if (name == null) {
      name=IContext.DEFAULT;
    }
    context=new JobContext(name);
    context.setConfirmationNeeded(contextType.isConfirmationNeeded());
    contextParamList=new ArrayList<IContextParameter>();
    contextTypeParamList=contextType.getContextParameter();
    Set<String> paramNamesInCurrentContext=new HashSet<String>();
    for (int j=0; j < contextTypeParamList.size(); j++) {
      contextParamType=(ContextParameterType)contextTypeParamList.get(j);
      if (paramNamesInCurrentContext.contains(contextParamType.getName())) {
        continue;
      }
      paramNamesInCurrentContext.add(contextParamType.getName());
      contextParam=new JobContextParameter();
      contextParam.setContext(context);
      contextParam.setName(contextParamType.getName());
      contextParam.setPrompt(contextParamType.getPrompt());
      originalParamerters.add(contextParam.getName());
      boolean exists=false;
      ECodeLanguage curLanguage=LanguageManager.getCurrentLanguage();
      if (curLanguage == ECodeLanguage.JAVA) {
        exists=true;
        try {
          ContextParameterJavaTypeManager.getJavaTypeFromId(contextParamType.getType());
        }
 catch (        IllegalArgumentException e) {
          exists=false;
        }
      }
 else {
        String[] existingTypes;
        existingTypes=ContextParameterJavaTypeManager.getPerlTypesLabels();
        for (        String existingType : existingTypes) {
          if (existingType.equals(contextParamType.getType())) {
            exists=true;
          }
        }
      }
      if (exists) {
        contextParam.setType(contextParamType.getType());
      }
 else {
        contextParam.setType(MetadataTalendType.getDefaultTalendType());
      }
      contextParam.setValue(contextParamType.getValue());
      contextParam.setPromptNeeded(contextParamType.isPromptNeeded());
      contextParam.setComment(contextParamType.getComment());
      String repositoryContextId=contextParamType.getRepositoryContextId();
      String source=IContextParameter.BUILT_IN;
      if (repositoryContextId != null && !""String_Node_Str"".equals(repositoryContextId)) {
        Item item=ContextUtils.getContextItemById(contextItemList,repositoryContextId);
        if (item == null) {
          item=ContextUtils.getContextItemById3(repositoryContextId);
        }
        if (item != null) {
          source=item.getProperty().getId();
        }
 else {
          lostParameters.add(contextParam.getName());
        }
      }
      contextParam.setSource(source);
      contextParamList.add(contextParam);
    }
    context.setContextParameterList(contextParamList);
    if (context.getName().equals(defaultContextName)) {
      setDefaultContext(context);
      setDefault=true;
    }
    listContext.add(context);
  }
  if (!setDefault) {
    setDefaultContext(listContext.get(0));
  }
}",0.983573775174975
126411,"private void checkVisibleTopMessages(){
  missModulesNeeded.clear();
  boolean allInstalled=true;
  List<String> updatedModules=new ArrayList<String>();
  if (libUiService != null) {
    updatedModules=libUiService.getNeedInstallModuleForBundle(REQUIRE_BUNDLE_NAME);
    allInstalled=libUiService.isModuleInstalledForBundle(REQUIRE_BUNDLE_NAME);
  }
  missModulesNeeded.addAll(updatedModules);
  setVisibleTopMessage(!allInstalled);
}","private void checkVisibleTopMessages(){
  missModulesNeeded.clear();
  boolean allInstalled=true;
  List<String> updatedModules=new ArrayList<String>();
  if (libUiService != null) {
    allInstalled=libUiService.isModuleInstalledForBundle(REQUIRE_BUNDLE_NAME);
    if (!allInstalled) {
      updatedModules=libUiService.getNeedInstallModuleForBundle(REQUIRE_BUNDLE_NAME);
    }
  }
  missModulesNeeded.addAll(updatedModules);
  setVisibleTopMessage(!allInstalled);
}",0.6082130965593785
126412,"@Override public List<String> getNeedInstallModuleForBundle(String bundleName){
  List<ModuleNeeded> allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(bundleName,allModulesNeededExtensionsForPlugin);
  List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    if (!new File(getLibrariesPath(ECodeLanguage.JAVA),moduleName).exists()) {
      requiredJars.add(moduleName);
    }
  }
  return requiredJars;
}","@Override public List<String> getNeedInstallModuleForBundle(String bundleName){
  List<ModuleNeeded> allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(bundleName,allModulesNeededExtensionsForPlugin);
  List<String> requiredJars=new ArrayList<String>(requiredModulesForBundle.size());
  ILibraryManagerService service;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    service=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    for (    ModuleNeeded module : requiredModulesForBundle) {
      String moduleName=module.getModuleName();
      if (!service.contains(moduleName)) {
        requiredJars.add(moduleName);
      }
    }
  }
  return requiredJars;
}",0.7021943573667712
126413,"@Override public boolean isModuleInstalledForBundle(String bundleName){
  if (LibManagerUiPlugin.getDefault().getBundle().getBundleContext().getProperty(""String_Node_Str"") != null) {
    return true;
  }
  List<ModuleNeeded> allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(bundleName,allModulesNeededExtensionsForPlugin);
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    if (!new File(getLibrariesPath(ECodeLanguage.JAVA),moduleName).exists()) {
      return false;
    }
  }
  return true;
}","@Override public boolean isModuleInstalledForBundle(String bundleName){
  if (LibManagerUiPlugin.getDefault().getBundle().getBundleContext().getProperty(""String_Node_Str"") != null) {
    return true;
  }
  List<ModuleNeeded> allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(bundleName,allModulesNeededExtensionsForPlugin);
  ILibraryManagerService service;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    service=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    for (    ModuleNeeded module : requiredModulesForBundle) {
      String moduleName=module.getModuleName();
      if (!service.contains(moduleName)) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.7829787234042553
126414,"@Override public boolean checkJarInstalledFromPlatform(String uriPath){
  if (uriJarInstalled.containsKey(uriPath)) {
    return uriJarInstalled.get(uriPath) != null;
  }
  String absolutePath=null;
  boolean jarFound=false;
  try {
    if (uriPath.startsWith(""String_Node_Str"")) {
      String plugin=uriPath.substring(17);
      plugin=plugin.substring(0,plugin.indexOf(""String_Node_Str""));
      String path=uriPath.substring(17 + plugin.length());
      URL url=FileLocator.find(Platform.getBundle(plugin),new Path(path),null);
      if (url != null) {
        URL url2=FileLocator.toFileURL(url);
        File file=new File(url2.getFile());
        if (file.exists()) {
          jarFound=true;
          absolutePath=file.getAbsolutePath();
        }
      }
    }
  }
 catch (  Exception e) {
  }
  if (!jarFound) {
    try {
      URI uri=new URI(uriPath);
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        jarFound=true;
        absolutePath=file.getAbsolutePath();
      }
    }
 catch (    Exception e) {
    }
  }
  uriJarInstalled.put(uriPath,absolutePath);
  return jarFound;
}","@Override public boolean checkJarInstalledFromPlatform(String uriPath){
  if (uriJarInstalled.containsKey(uriPath)) {
    return uriJarInstalled.get(uriPath) != null;
  }
  String absolutePath=null;
  boolean jarFound=false;
  try {
    if (uriPath.startsWith(ExtensionModuleManager.URIPATH_PREFIX)) {
      String plugin=uriPath.substring(17);
      plugin=plugin.substring(0,plugin.indexOf(""String_Node_Str""));
      String path=uriPath.substring(17 + plugin.length());
      URL url=FileLocator.find(Platform.getBundle(plugin),new Path(path),null);
      if (url != null) {
        URL url2=FileLocator.toFileURL(url);
        File file=new File(url2.getFile());
        if (file.exists()) {
          jarFound=true;
          absolutePath=file.getAbsolutePath();
        }
      }
    }
  }
 catch (  Exception e) {
  }
  if (!jarFound) {
    try {
      URI uri=new URI(uriPath);
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        jarFound=true;
        absolutePath=file.getAbsolutePath();
      }
    }
 catch (    Exception e) {
    }
  }
  uriJarInstalled.put(uriPath,absolutePath);
  return jarFound;
}",0.9779099405267628
126415,"private void installJarFromPlatformIfExists(String moduleName,String uriPath){
  if (jarsFromExtensions.containsValue(uriPath)) {
    return;
  }
  String jarName=null;
  try {
    if (uriJarInstalled.containsKey(uriPath)) {
      File file=new File(uriJarInstalled.get(uriPath));
      if (file.exists()) {
        jarName=file.getName();
      }
    }
 else {
      URI uri=new URI(uriPath);
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        jarName=file.getName();
      }
    }
  }
 catch (  Exception e) {
  }
  if (jarName != null) {
    jarsFromExtensions.put(jarName,uriPath);
    jarsFromExtensions.put(moduleName,uriPath);
  }
}","private void installJarFromPlatformIfExists(String moduleName,String uriPath){
  if (jarsFromExtensions.containsValue(uriPath)) {
    return;
  }
  String jarName=null;
  try {
    if (checkJarInstalledFromPlatform(uriPath)) {
      File file=new File(uriJarInstalled.get(uriPath));
      if (file.exists()) {
        jarName=file.getName();
      }
    }
 else {
      URI uri=new URI(uriPath);
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        jarName=file.getName();
      }
    }
  }
 catch (  Exception e) {
  }
  if (jarName != null) {
    jarsFromExtensions.put(jarName,uriPath);
    jarsFromExtensions.put(moduleName,uriPath);
  }
}",0.9776223776223776
126416,"private static Object getFTPValue(FTPConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getPort();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystoreFile())) {
      return connection.getKeystoreFile();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystoreFile());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystorePassword())) {
      return connection.getKeystorePassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystorePassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getMethod())) {
      return connection.getMethod();
    }
 else {
      if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return TalendQuoteUtils.addQuotes(connection.getMethod());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSFTP();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isFTPS();
  }
  if (value.equals(""String_Node_Str"")) {
    if (connection.getMode() == null) {
      return ""String_Node_Str"";
    }
    return connection.getMode().toUpperCase();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getCustomEncode())) {
      return connection.getCustomEncode();
    }
 else {
      if (connection.getCustomEncode() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getCustomEncode());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isUsesocks();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyhost())) {
      return connection.getProxyhost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyhost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyport())) {
      return connection.getProxyport();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyport());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyuser())) {
      return connection.getProxyuser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyuser());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxypassword())) {
      return connection.getProxypassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxypassword());
    }
  }
  return null;
}","private static Object getFTPValue(FTPConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getPort();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystoreFile())) {
      return connection.getKeystoreFile();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystoreFile());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystorePassword())) {
      return connection.getKeystorePassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystorePassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPrivatekey())) {
      return connection.getPrivatekey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPrivatekey());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassphrase())) {
      return connection.getPassphrase();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassphrase());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getMethod())) {
      return connection.getMethod();
    }
 else {
      if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return TalendQuoteUtils.addQuotes(connection.getMethod());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSFTP();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isFTPS();
  }
  if (value.equals(""String_Node_Str"")) {
    if (connection.getMode() == null) {
      return ""String_Node_Str"";
    }
    return connection.getMode().toUpperCase();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getCustomEncode())) {
      return connection.getCustomEncode();
    }
 else {
      if (connection.getCustomEncode() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getCustomEncode());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isUsesocks();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyhost())) {
      return connection.getProxyhost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyhost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyport())) {
      return connection.getProxyport();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyport());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyuser())) {
      return connection.getProxyuser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyuser());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxypassword())) {
      return connection.getProxypassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxypassword());
    }
  }
  return null;
}",0.937597911227154
126417,"private static Object getFTPValue(FTPConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getPort();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystoreFile())) {
      return connection.getKeystoreFile();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystoreFile());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystorePassword())) {
      return connection.getKeystorePassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystorePassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPrivatekey())) {
      return connection.getPrivatekey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPrivatekey());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassphrase())) {
      return connection.getPassphrase();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassphrase());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getMethod())) {
      return connection.getMethod();
    }
 else {
      if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return TalendQuoteUtils.addQuotes(connection.getMethod());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSFTP();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isFTPS();
  }
  if (value.equals(""String_Node_Str"")) {
    if (connection.getMode() == null) {
      return ""String_Node_Str"";
    }
    return connection.getMode().toUpperCase();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getCustomEncode())) {
      return connection.getCustomEncode();
    }
 else {
      if (connection.getCustomEncode() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getCustomEncode());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isUsesocks();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyhost())) {
      return connection.getProxyhost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyhost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyport())) {
      return connection.getProxyport();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyport());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyuser())) {
      return connection.getProxyuser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyuser());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxypassword())) {
      return connection.getProxypassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxypassword());
    }
  }
  return null;
}","private static Object getFTPValue(FTPConnection connection,String value){
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.getPort();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      try {
        return TalendQuoteUtils.addQuotes(PasswordEncryptUtil.decryptPassword(connection.getPassword()));
      }
 catch (      Exception e) {
        String pwd=ConnectionHelper.getDecryptPassword(connection.getPassword());
        return pwd == null ? TalendQuoteUtils.addQuotes(connection.getPassword()) : TalendQuoteUtils.addQuotes(pwd);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystoreFile())) {
      return connection.getKeystoreFile();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getKeystoreFile());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getKeystorePassword())) {
      return connection.getKeystorePassword();
    }
 else {
      try {
        return TalendQuoteUtils.addQuotes(PasswordEncryptUtil.decryptPassword(connection.getKeystorePassword()));
      }
 catch (      Exception e) {
        String pwd=ConnectionHelper.getDecryptPassword(connection.getKeystorePassword());
        return pwd == null ? TalendQuoteUtils.addQuotes(connection.getKeystorePassword()) : TalendQuoteUtils.addQuotes(pwd);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPrivatekey())) {
      return connection.getPrivatekey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPrivatekey());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassphrase())) {
      return connection.getPassphrase();
    }
 else {
      try {
        return TalendQuoteUtils.addQuotes(PasswordEncryptUtil.decryptPassword(connection.getPassphrase()));
      }
 catch (      Exception e) {
        String pwd=ConnectionHelper.getDecryptPassword(connection.getPassphrase());
        return pwd == null ? TalendQuoteUtils.addQuotes(connection.getPassphrase()) : TalendQuoteUtils.addQuotes(pwd);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getMethod())) {
      return connection.getMethod();
    }
 else {
      if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else       if (connection.getMethod().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      return TalendQuoteUtils.addQuotes(connection.getMethod());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isSFTP();
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isFTPS();
  }
  if (value.equals(""String_Node_Str"")) {
    if (connection.getMode() == null) {
      return ""String_Node_Str"";
    }
    return connection.getMode().toUpperCase();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getCustomEncode())) {
      return connection.getCustomEncode();
    }
 else {
      if (connection.getCustomEncode() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getCustomEncode());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return connection.isUsesocks();
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyhost())) {
      return connection.getProxyhost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyhost());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyport())) {
      return connection.getProxyport();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyport());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxyuser())) {
      return connection.getProxyuser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyuser());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getProxypassword())) {
      return connection.getProxypassword();
    }
 else {
      try {
        return TalendQuoteUtils.addQuotes(PasswordEncryptUtil.decryptPassword(connection.getProxypassword()));
      }
 catch (      Exception e) {
        String pwd=ConnectionHelper.getDecryptPassword(connection.getProxypassword());
        return pwd == null ? TalendQuoteUtils.addQuotes(connection.getProxypassword()) : TalendQuoteUtils.addQuotes(pwd);
      }
    }
  }
  return null;
}",0.8630723149336756
126418,"private static void setDatabaseValueForAccess(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(value);
      if (version != null) {
        connection.setDbVersionString(version.getVersionValue());
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFileFieldName(value);
    }
  }
}","private static void setDatabaseValueForAccess(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersion(value);
      if (version != null) {
        connection.setDbVersionString(version.getVersionValue());
      }
    }
  }
}",0.7515583259127337
126419,"/** 
 * DOC wzhang Comment method ""setDelimitedFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDelimitedFileValue(DelimitedFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setCsvOption(Boolean.valueOf(value).booleanValue());
    }
    if (connection.isCsvOption()) {
      connection.setEscapeType(Escape.CSV);
    }
 else {
      connection.setEscapeType(Escape.DELIMITED);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterOriginalValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEscapeChar(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterOriginalValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setTextEnclosure(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSplitRecord(Boolean.valueOf(value).booleanValue());
    }
  }
}","/** 
 * DOC wzhang Comment method ""setDelimitedFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDelimitedFileValue(DelimitedFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setCsvOption(Boolean.valueOf(value).booleanValue());
    }
    if (connection.isCsvOption()) {
      connection.setEscapeType(Escape.CSV);
    }
 else {
      connection.setEscapeType(Escape.DELIMITED);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEscapeChar(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setTextEnclosure(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSplitRecord(Boolean.valueOf(value).booleanValue());
    }
  }
}",0.5537493445201888
126420,"private static void setDatabaseValueForNetezza(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDatasourceName(value);
    }
  }
}","private static void setDatabaseValueForNetezza(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDatasourceName(value);
    }
  }
}",0.8726114649681529
126421,"/** 
 * DOC wzhang Comment method ""setDatabaseValueForOracleSid"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValueForOracleSid(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.ORACLEFORSID,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null && ""String_Node_Str"".equals(param.getValue())) {
      String value=getParameterValue(connection,node,""String_Node_Str"");
      if (value != null) {
        connection.setSID(value);
      }
    }
 else {
      String value=getParameterValue(connection,node,""String_Node_Str"");
      if (value != null) {
        connection.setSID(value);
      }
    }
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseValueForOracleSid"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValueForOracleSid(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.ORACLEFORSID,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param != null && ""String_Node_Str"".equals(param.getValue())) {
      String value=getParameterValue(connection,node,node.getElementParameter(""String_Node_Str""));
      if (value != null) {
        connection.setSID(value);
      }
    }
 else {
      String value=getParameterValue(connection,node,node.getElementParameter(""String_Node_Str""));
      if (value != null) {
        connection.setSID(value);
      }
    }
  }
}",0.6720075400565504
126422,"private static void setDatabaseValueForjavadb(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
}","private static void setDatabaseValueForjavadb(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSID(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
}",0.5668341708542713
126423,"private static void setHL7Value(HL7Connection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    final String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setStartChar(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    final String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEndChar(value);
    }
  }
}","private static void setHL7Value(HL7Connection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setStartChar(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEndChar(value);
    }
  }
}",0.4023494860499266
126424,"private static void setFileExcelValue(FileExcelConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSelectAllSheets(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setAdvancedSpearator(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFirstColumn(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setLastColumn(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setThousandSeparator(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDecimalSeparator(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}","private static void setFileExcelValue(FileExcelConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSelectAllSheets(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setAdvancedSpearator(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFirstColumn(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLastColumn(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setThousandSeparator(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDecimalSeparator(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}",0.4946695095948827
126425,"private static void setDatabaseValueForAs400(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.AS400,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setAdditionalParams(value);
    }
  }
}","private static void setDatabaseValueForAs400(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.AS400,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
}",0.7293666026871402
126426,"/** 
 * DOC wzhang Comment method ""setRegexpFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setRegexpFileValue(RegexpFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      String value=(String)param.getValue();
      if (value != null) {
        connection.setFieldSeparatorValue(value);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}","/** 
 * DOC wzhang Comment method ""setRegexpFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setRegexpFileValue(RegexpFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}",0.4897959183673469
126427,"/** 
 * DOC wzhang Comment method ""setSalesforceSchema"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setSalesforceSchema(SalesforceSchemaConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setWebServiceUrl(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUserName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPassword(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setModuleName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setQueryCondition(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    connection.setBatchSize(getParameterValue(connection,node,""String_Node_Str""));
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String parameterValue=getParameterValue(connection,node,""String_Node_Str"");
    connection.setUseProxy(Boolean.valueOf(parameterValue));
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyHost(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyPort(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyUsername(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyPassword(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setTimeOut(value);
    }
  }
}","/** 
 * DOC wzhang Comment method ""setSalesforceSchema"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setSalesforceSchema(SalesforceSchemaConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setWebServiceUrl(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUserName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPassword(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setModuleName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setQueryCondition(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    connection.setBatchSize(value);
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    connection.setUseProxy(Boolean.valueOf(value));
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyHost(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyPort(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyUsername(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyPassword(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setTimeOut(value);
    }
  }
}",0.640615748963884
126428,"/** 
 * DOC wzhang Comment method ""setXmlFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setXmlFileValue(XmlFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setXmlFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  EList emfSchemaList=connection.getSchema();
  if (emfSchemaList.size() < 1) {
    emfSchemaList.add(ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor());
  }
  XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)emfSchemaList.get(0);
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      xmlDesc.setAbsoluteXPathQuery(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && value.trim().length() > 0) {
      xmlDesc.setLimitBoucle(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      EList schemaTargets=xmlDesc.getSchemaTargets();
      List<Map<String,Object>> tableInfo=(List<Map<String,Object>>)param.getValue();
      for (      Map<String,Object> mapObject : tableInfo) {
        String schema=(String)mapObject.get(""String_Node_Str"");
        if (schema != null) {
          String query=(String)mapObject.get(""String_Node_Str"");
          SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
          schemaTargets.add(schemaTarget);
          schemaTarget.setTagName(schema);
          schemaTarget.setRelativeXPathQuery(TalendQuoteUtils.removeQuotes(query));
        }
      }
    }
  }
}","/** 
 * DOC wzhang Comment method ""setXmlFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setXmlFileValue(XmlFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setXmlFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
  EList emfSchemaList=connection.getSchema();
  if (emfSchemaList.size() < 1) {
    emfSchemaList.add(ConnectionFactory.eINSTANCE.createXmlXPathLoopDescriptor());
  }
  XmlXPathLoopDescriptor xmlDesc=(XmlXPathLoopDescriptor)emfSchemaList.get(0);
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      xmlDesc.setAbsoluteXPathQuery(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,node.getElementParameter(""String_Node_Str""));
    if (value != null && value.trim().length() > 0) {
      xmlDesc.setLimitBoucle(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param != null) {
      EList schemaTargets=xmlDesc.getSchemaTargets();
      List<Map<String,Object>> tableInfo=(List<Map<String,Object>>)param.getValue();
      for (      Map<String,Object> mapObject : tableInfo) {
        String schema=(String)mapObject.get(""String_Node_Str"");
        if (schema != null) {
          String query=(String)mapObject.get(""String_Node_Str"");
          SchemaTarget schemaTarget=ConnectionFactory.eINSTANCE.createSchemaTarget();
          schemaTargets.add(schemaTarget);
          schemaTarget.setTagName(schema);
          schemaTarget.setRelativeXPathQuery(TalendQuoteUtils.removeQuotes(query));
        }
      }
    }
  }
}",0.7379061371841156
126429,"private static void setLdifFileValue(LdifFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
    }
  }
}","private static void setLdifFileValue(LdifFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
}",0.6342281879194631
126430,"/** 
 * DOC wzhang Comment method ""setPositionalFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setPositionalFileValue(PositionalFileConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
}","/** 
 * DOC wzhang Comment method ""setPositionalFileValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setPositionalFileValue(PositionalFileConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilePath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRowSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFieldSeparatorValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setRemoveEmptyRow(Boolean.valueOf(value).booleanValue());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHeaderValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFooterValue(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLimitValue(value);
    }
  }
}",0.565844858689116
126431,"private static void setDatabaseValueForVertica(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.VERTICA,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
}","private static void setDatabaseValueForVertica(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.VERTICA,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
}",0.9056603773584906
126432,"/** 
 * DOC wzhang Comment method ""getParameterValue"".
 * @param node
 * @param paramName
 * @return
 */
public static String getParameterValue(Connection connection,INode node,String paramName){
  String originalValue=getParameterOriginalValue(connection,node,paramName);
  if (originalValue != null) {
    return TalendQuoteUtils.removeQuotes(originalValue);
  }
  return null;
}","/** 
 * DOC wzhang Comment method ""getParameterValue"".
 * @param node
 * @param paramName
 * @return
 */
public static String getParameterValue(Connection connection,INode node,IElementParameter param){
  String originalValue=getParameterOriginalValue(connection,node,param);
  if (originalValue != null) {
    return TalendQuoteUtils.removeQuotes(originalValue);
  }
  return null;
}",0.9437908496732026
126433,"/** 
 * DOC wzhang Comment method ""setLDAPSchemaValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setLDAPSchemaValue(LDAPSchemaConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setHost(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setSelectedDN(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncryptionMethodName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null) {
      Object o=param.getValue();
      if (o != null && o instanceof Boolean) {
        connection.setUseAuthen((Boolean)o);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setBindPrincipal(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setBindPassword(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setFilter(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setAliases(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setReferrals(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setCountLimit(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setTimeOutLimit(value);
    }
  }
}","/** 
 * DOC wzhang Comment method ""setLDAPSchemaValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setLDAPSchemaValue(LDAPSchemaConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=(getParameterValue(connection,node,param)).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setHost(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPort(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=(getParameterValue(connection,node,param)).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setSelectedDN(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncryptionMethodName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    Object o=param.getValue();
    if (o != null && o instanceof Boolean) {
      connection.setUseAuthen((Boolean)o);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=(getParameterValue(connection,node,param)).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setBindPrincipal(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=(getParameterValue(connection,node,param)).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (value != null) {
      connection.setBindPassword(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFilter(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setAliases(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setReferrals(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setCountLimit(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setTimeOutLimit(value);
    }
  }
}",0.804120049724738
126434,"private static void setBRMSValue(BRMSConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setXmlField(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUrlName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setTacWebappName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setClassName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPackage(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setModuleUsed(value);
    }
  }
}","private static void setBRMSValue(BRMSConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setXmlField(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUrlName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setTacWebappName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setClassName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPackage(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setModuleUsed(value);
    }
  }
}",0.4954491491887614
126435,"/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        String pwd=TalendQuoteUtils.checkAndRemoveBackslashes(value);
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(pwd)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUsername(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      try {
        String pwd=TalendQuoteUtils.checkAndRemoveBackslashes(value);
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(pwd)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setServerName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPort(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSID(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setAdditionalParams(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setFileFieldName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDatasourceName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setServerName(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,param);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,param);
  }
}",0.6820522979397782
126436,"private static void setSAPValue(SAPConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setClient(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPassword(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setLanguage(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setHost(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSystemNumber(value);
    }
  }
}","private static void setSAPValue(SAPConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setClient(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPassword(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setLanguage(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHost(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUsername(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setSystemNumber(value);
    }
  }
}",0.4970083765456721
126437,"private static String getParameterOriginalValue(Connection connection,INode node,String paramName){
  if (node != null || paramName != null) {
    IElementParameter param=node.getElementParameter(paramName);
    if (param != null) {
      Object o=param.getValue();
      if (o instanceof String || o instanceof Boolean || o instanceof Integer|| o instanceof Long|| o instanceof Character) {
        String value=String.valueOf(o);
        if (isConetxtParaMode(connection,value)) {
          value=getContextOriginalValue(connection,node,value);
        }
        return value;
      }
 else       if (o instanceof List && paramName.equals(""String_Node_Str"")) {
        List<Map<String,Object>> list=(List<Map<String,Object>>)o;
        String userDir=System.getProperty(""String_Node_Str"");
        String pathSeparator=System.getProperty(""String_Node_Str"");
        String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
        Character comma=';';
        String symbol=""String_Node_Str"";
        String jarspath=""String_Node_Str"";
        for (int i=0; i < list.size(); i++) {
          jarspath=jarspath + defaultPath + symbol+ list.get(i).get(""String_Node_Str"");
          if (i < list.size() - 1) {
            jarspath=jarspath + comma.toString();
          }
        }
        return jarspath;
      }
    }
  }
  return null;
}","private static String getParameterOriginalValue(Connection connection,INode node,IElementParameter param){
  if (node != null || param != null) {
    if (param != null) {
      Object o=param.getValue();
      if (o instanceof String || o instanceof Boolean || o instanceof Integer|| o instanceof Long|| o instanceof Character) {
        String value=String.valueOf(o);
        if (isConetxtParaMode(connection,value)) {
          value=getContextOriginalValue(connection,node,value);
        }
        return value;
      }
 else       if (o instanceof List && param.getName().equals(""String_Node_Str"")) {
        List<Map<String,Object>> list=(List<Map<String,Object>>)o;
        String userDir=System.getProperty(""String_Node_Str"");
        String pathSeparator=System.getProperty(""String_Node_Str"");
        String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
        Character comma=';';
        String symbol=""String_Node_Str"";
        String jarspath=""String_Node_Str"";
        for (int i=0; i < list.size(); i++) {
          jarspath=jarspath + defaultPath + symbol+ list.get(i).get(""String_Node_Str"");
          if (i < list.size() - 1) {
            jarspath=jarspath + comma.toString();
          }
        }
        return jarspath;
      }
    }
  }
  return null;
}",0.9578713968957872
126438,"private static void setDatabaseValueForJdbc(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setURL(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDriverJarPath(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDriverClass(value);
    }
  }
}","private static void setDatabaseValueForJdbc(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setURL(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDriverJarPath(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDriverClass(value);
    }
  }
}",0.5323741007194245
126439,"private static void setEbcdicValue(EbcdicConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDataFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setMidFile(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}","private static void setEbcdicValue(EbcdicConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDataFile(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setMidFile(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEncoding(value);
    }
  }
}",0.4058823529411764
126440,"private static void setMDMValue(MDMConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      ConnectionHelper.setPassword(connection,value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      String[] values=value.split(""String_Node_Str"");
      String server=values[1].substring(values[1].indexOf(""String_Node_Str"") + 2);
      String port=values[2].substring(0,values[2].indexOf(""String_Node_Str""));
      connection.setServer(server);
      connection.setPort(port);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUniverse(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDatamodel(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDatacluster(value);
    }
  }
}","private static void setMDMValue(MDMConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUsername(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      ConnectionHelper.setPassword(connection,value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      String[] values=value.split(""String_Node_Str"");
      String server=values[1].substring(values[1].indexOf(""String_Node_Str"") + 2);
      String port=values[2].substring(0,values[2].indexOf(""String_Node_Str""));
      connection.setServer(server);
      connection.setPort(port);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUniverse(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDatamodel(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDatacluster(value);
    }
  }
}",0.7830653101411225
126441,"/** 
 * DOC wzhang Comment method ""setDatabaseType"".
 * @param connection
 * @param node
 */
private static void setDatabaseType(DatabaseConnection connection,INode node){
  IElementParameter parameter=node.getElementParameter(""String_Node_Str"");
  if (parameter == null) {
    IElementParameter para=node.getElementParameter(""String_Node_Str"");
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GREENPLUM.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GREENPLUM.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GREENPLUM.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.PLUSPSQL.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
      connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GENERAL_JDBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GENERAL_JDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GENERAL_JDBC.getProduct());
    }
    if (para.getRepositoryValue().endsWith(EDatabaseTypeName.VERTICA.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.VERTICA.getDisplayName());
      connection.setProductId(EDatabaseTypeName.VERTICA.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.MYSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MYSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MYSQL.getProduct());
  }
 else   if (EDatabaseTypeName.MSSQL.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MSSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MSSQL.getProduct());
  }
 else   if (EDatabaseTypeName.EXASOL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.EXASOL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.EXASOL.getProduct());
  }
 else   if (EDatabaseTypeName.PSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PSQL.getProduct());
  }
 else   if (EDatabaseTypeName.PLUSPSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
  }
 else   if (EDatabaseTypeName.IBMDB2.getProduct().equalsIgnoreCase(((String)parameter.getValue()).replace(' ','_'))) {
    connection.setDatabaseType(EDatabaseTypeName.IBMDB2.getDisplayName());
    connection.setProductId(EDatabaseTypeName.IBMDB2.getProduct());
  }
 else   if (EDatabaseTypeName.INGRES.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INGRES.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INGRES.getProduct());
  }
 else   if (EDatabaseTypeName.INTERBASE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INTERBASE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INTERBASE.getProduct());
  }
 else   if (EDatabaseTypeName.SQLITE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.SQLITE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.SQLITE.getProduct());
  }
 else   if (EDatabaseTypeName.FIREBIRD.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.FIREBIRD.getDisplayName());
    connection.setProductId(EDatabaseTypeName.FIREBIRD.getProduct());
  }
 else   if (EDatabaseTypeName.INFORMIX.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INFORMIX.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INFORMIX.getProduct());
  }
 else   if (EDatabaseTypeName.ACCESS.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.ACCESS.getDisplayName());
    connection.setProductId(EDatabaseTypeName.ACCESS.getProduct());
  }
 else   if (EDatabaseTypeName.TERADATA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.TERADATA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.TERADATA.getProduct());
  }
 else   if (EDatabaseTypeName.AS400.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.AS400.getDisplayName());
    connection.setProductId(EDatabaseTypeName.AS400.getProduct());
  }
 else   if (EDatabaseTypeName.VERTICA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.VERTICA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.VERTICA.getProduct());
  }
 else   if (EDatabaseTypeName.MAXDB.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MAXDB.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MAXDB.getProduct());
  }
 else   if (EDatabaseTypeName.PARACCEL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PARACCEL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PARACCEL.getProduct());
  }
 else   if (EDatabaseTypeName.REDSHIFT.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.REDSHIFT.getDisplayName());
    connection.setProductId(EDatabaseTypeName.REDSHIFT.getProduct());
  }
 else   if (EDatabaseTypeName.NETEZZA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.NETEZZA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.NETEZZA.getProduct());
  }
 else   if (((String)parameter.getValue()).toLowerCase().startsWith(EDatabaseTypeName.SYBASEASE.getProduct().toLowerCase())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.SYBASEASE.getDisplayName());
      connection.setProductId(EDatabaseTypeName.SYBASEASE.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.ORACLEFORSID.getProduct().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLEFORSID.getXmlName().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLESN.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_OCI.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_CUSTOM.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLESN.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLEFORSID.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLE_CUSTOM.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.HSQLDB_SERVER.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_SERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_WEBSERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.JAVADB_EMBEDED.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_EMBEDED.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_JCCJDBC.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_DERBYCLIENT.getProduct());
    }
    return;
  }
 else   if (node.getComponent().getName().startsWith(""String_Node_Str"") || node.getComponent().getName().startsWith(""String_Node_Str"")) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (parameter.getRepositoryValue().endsWith(EDatabaseTypeName.GODBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GODBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GODBC.getProduct());
    }
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseType"".
 * @param connection
 * @param node
 */
private static void setDatabaseType(DatabaseConnection connection,INode node){
  IElementParameter parameter=node.getElementParameter(""String_Node_Str"");
  if (parameter == null) {
    IElementParameter para=node.getElementParameter(""String_Node_Str"");
    if (para != null) {
      if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GREENPLUM.getProduct())) {
        connection.setDatabaseType(EDatabaseTypeName.GREENPLUM.getDisplayName());
        connection.setProductId(EDatabaseTypeName.GREENPLUM.getProduct());
      }
      if (para.getRepositoryValue().endsWith(EDatabaseTypeName.PLUSPSQL.getProduct())) {
        connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
        connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
      }
      if (para.getRepositoryValue().endsWith(EDatabaseTypeName.GENERAL_JDBC.getProduct())) {
        connection.setDatabaseType(EDatabaseTypeName.GENERAL_JDBC.getDisplayName());
        connection.setProductId(EDatabaseTypeName.GENERAL_JDBC.getProduct());
      }
      if (para.getRepositoryValue().endsWith(EDatabaseTypeName.VERTICA.getProduct())) {
        connection.setDatabaseType(EDatabaseTypeName.VERTICA.getDisplayName());
        connection.setProductId(EDatabaseTypeName.VERTICA.getProduct());
      }
    }
    return;
  }
 else   if (EDatabaseTypeName.MYSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MYSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MYSQL.getProduct());
  }
 else   if (EDatabaseTypeName.MSSQL.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MSSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MSSQL.getProduct());
  }
 else   if (EDatabaseTypeName.EXASOL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.EXASOL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.EXASOL.getProduct());
  }
 else   if (EDatabaseTypeName.PSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PSQL.getProduct());
  }
 else   if (EDatabaseTypeName.PLUSPSQL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PLUSPSQL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PLUSPSQL.getProduct());
  }
 else   if (EDatabaseTypeName.IBMDB2.getProduct().equalsIgnoreCase(((String)parameter.getValue()).replace(' ','_'))) {
    connection.setDatabaseType(EDatabaseTypeName.IBMDB2.getDisplayName());
    connection.setProductId(EDatabaseTypeName.IBMDB2.getProduct());
  }
 else   if (EDatabaseTypeName.INGRES.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INGRES.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INGRES.getProduct());
  }
 else   if (EDatabaseTypeName.INTERBASE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INTERBASE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INTERBASE.getProduct());
  }
 else   if (EDatabaseTypeName.SQLITE.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.SQLITE.getDisplayName());
    connection.setProductId(EDatabaseTypeName.SQLITE.getProduct());
  }
 else   if (EDatabaseTypeName.FIREBIRD.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.FIREBIRD.getDisplayName());
    connection.setProductId(EDatabaseTypeName.FIREBIRD.getProduct());
  }
 else   if (EDatabaseTypeName.INFORMIX.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.INFORMIX.getDisplayName());
    connection.setProductId(EDatabaseTypeName.INFORMIX.getProduct());
  }
 else   if (EDatabaseTypeName.ACCESS.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.ACCESS.getDisplayName());
    connection.setProductId(EDatabaseTypeName.ACCESS.getProduct());
  }
 else   if (EDatabaseTypeName.TERADATA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.TERADATA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.TERADATA.getProduct());
  }
 else   if (EDatabaseTypeName.AS400.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.AS400.getDisplayName());
    connection.setProductId(EDatabaseTypeName.AS400.getProduct());
  }
 else   if (EDatabaseTypeName.VERTICA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.VERTICA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.VERTICA.getProduct());
  }
 else   if (EDatabaseTypeName.MAXDB.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.MAXDB.getDisplayName());
    connection.setProductId(EDatabaseTypeName.MAXDB.getProduct());
  }
 else   if (EDatabaseTypeName.PARACCEL.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.PARACCEL.getDisplayName());
    connection.setProductId(EDatabaseTypeName.PARACCEL.getProduct());
  }
 else   if (EDatabaseTypeName.REDSHIFT.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.REDSHIFT.getDisplayName());
    connection.setProductId(EDatabaseTypeName.REDSHIFT.getProduct());
  }
 else   if (EDatabaseTypeName.NETEZZA.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    connection.setDatabaseType(EDatabaseTypeName.NETEZZA.getDisplayName());
    connection.setProductId(EDatabaseTypeName.NETEZZA.getProduct());
  }
 else   if (((String)parameter.getValue()).toLowerCase().startsWith(EDatabaseTypeName.SYBASEASE.getProduct().toLowerCase())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.SYBASEASE.getDisplayName());
      connection.setProductId(EDatabaseTypeName.SYBASEASE.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.ORACLEFORSID.getProduct().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLEFORSID.getXmlName().equalsIgnoreCase((String)parameter.getValue()) || EDatabaseTypeName.ORACLESN.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_OCI.getXmlName().equalsIgnoreCase((String)parameter.getValue())|| EDatabaseTypeName.ORACLE_CUSTOM.getXmlName().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLESN.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLEFORSID.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue()) || ""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.ORACLE_CUSTOM.getDisplayName());
      connection.setProductId(EDatabaseTypeName.ORACLESN.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.HSQLDB_SERVER.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_SERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_WEBSERVER.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName());
      connection.setProductId(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getProduct());
    }
    return;
  }
 else   if (EDatabaseTypeName.JAVADB_EMBEDED.getProduct().equalsIgnoreCase((String)parameter.getValue())) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_EMBEDED.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_JCCJDBC.getProduct());
    }
 else     if (""String_Node_Str"".equals(parameter.getValue())) {
      connection.setDatabaseType(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName());
      connection.setProductId(EDatabaseTypeName.JAVADB_DERBYCLIENT.getProduct());
    }
    return;
  }
 else   if (node.getComponent().getName().startsWith(""String_Node_Str"") || node.getComponent().getName().startsWith(""String_Node_Str"")) {
    parameter=node.getElementParameter(""String_Node_Str"");
    if (parameter.getRepositoryValue().endsWith(EDatabaseTypeName.GODBC.getProduct())) {
      connection.setDatabaseType(EDatabaseTypeName.GODBC.getDisplayName());
      connection.setProductId(EDatabaseTypeName.GODBC.getProduct());
    }
  }
}",0.9969373641572812
126442,"/** 
 * DOC wzhang Comment method ""setValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
public static void setValue(Connection connection,INode node,String repositoryValue){
  if (connection == null || node == null || repositoryValue == null) {
    return;
  }
 else   if (connection instanceof XmlFileConnection) {
    setXmlFileValue((XmlFileConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof DatabaseConnection) {
    setDatabaseValue((DatabaseConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof EbcdicConnection) {
    setEbcdicValue((EbcdicConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof DelimitedFileConnection) {
    setDelimitedFileValue((DelimitedFileConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof LDAPSchemaConnection) {
    setLDAPSchemaValue((LDAPSchemaConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof WSDLSchemaConnection) {
    setWSDLSchemaValue((WSDLSchemaConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof LdifFileConnection) {
    setLdifFileValue((LdifFileConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof RegexpFileConnection) {
    setRegexpFileValue((RegexpFileConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof PositionalFileConnection) {
    setPositionalFileValue((PositionalFileConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof FileExcelConnection) {
    setFileExcelValue((FileExcelConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof SAPConnection) {
    setSAPValue((SAPConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof SalesforceSchemaConnection) {
    setSalesforceSchema((SalesforceSchemaConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof MDMConnection) {
    setMDMValue((MDMConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof BRMSConnection) {
    setBRMSValue((BRMSConnection)connection,node,repositoryValue);
  }
 else   if (connection instanceof HL7Connection) {
    setHL7Value((HL7Connection)connection,node,repositoryValue);
  }
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      handler.setComponentValue(connection,node,repositoryValue);
    }
  }
}","/** 
 * DOC wzhang Comment method ""setValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
public static void setValue(Connection connection,INode node,IElementParameter param){
  if (connection == null || node == null || param == null) {
    return;
  }
 else   if (connection instanceof XmlFileConnection) {
    setXmlFileValue((XmlFileConnection)connection,node,param);
  }
 else   if (connection instanceof DatabaseConnection) {
    setDatabaseValue((DatabaseConnection)connection,node,param);
  }
 else   if (connection instanceof EbcdicConnection) {
    setEbcdicValue((EbcdicConnection)connection,node,param);
  }
 else   if (connection instanceof DelimitedFileConnection) {
    setDelimitedFileValue((DelimitedFileConnection)connection,node,param);
  }
 else   if (connection instanceof LDAPSchemaConnection) {
    setLDAPSchemaValue((LDAPSchemaConnection)connection,node,param);
  }
 else   if (connection instanceof WSDLSchemaConnection) {
    setWSDLSchemaValue((WSDLSchemaConnection)connection,node,param);
  }
 else   if (connection instanceof LdifFileConnection) {
    setLdifFileValue((LdifFileConnection)connection,node,param);
  }
 else   if (connection instanceof RegexpFileConnection) {
    setRegexpFileValue((RegexpFileConnection)connection,node,param);
  }
 else   if (connection instanceof PositionalFileConnection) {
    setPositionalFileValue((PositionalFileConnection)connection,node,param);
  }
 else   if (connection instanceof FileExcelConnection) {
    setFileExcelValue((FileExcelConnection)connection,node,param);
  }
 else   if (connection instanceof SAPConnection) {
    setSAPValue((SAPConnection)connection,node,param);
  }
 else   if (connection instanceof SalesforceSchemaConnection) {
    setSalesforceSchema((SalesforceSchemaConnection)connection,node,param);
  }
 else   if (connection instanceof MDMConnection) {
    setMDMValue((MDMConnection)connection,node,param);
  }
 else   if (connection instanceof BRMSConnection) {
    setBRMSValue((BRMSConnection)connection,node,param);
  }
 else   if (connection instanceof HL7Connection) {
    setHL7Value((HL7Connection)connection,node,param);
  }
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      handler.setComponentValue(connection,node,param);
    }
  }
}",0.7346351490236382
126443,"private static void setWSDLSchemaValue(WSDLSchemaConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setWSDL(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setEndpointURI(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setNeedAuth(Boolean.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUserName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPassword(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUseProxy(Boolean.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyHost(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyPort(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyUser(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setProxyPassword(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setMethodName(value);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setTimeOut(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    Object value=getParameterObjectValue(node,""String_Node_Str"");
    if (value != null && value instanceof ArrayList) {
      ArrayList<HashMap<String,String>> list=(ArrayList<HashMap<String,String>>)value;
      ArrayList<String> result=new ArrayList<String>();
      for (      HashMap<String,String> m : list) {
        Iterator<Map.Entry<String,String>> it=m.entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry<String,String> entry=it.next();
          result.add(entry.getValue());
        }
      }
      connection.setParameters(result);
    }
  }
}","private static void setWSDLSchemaValue(WSDLSchemaConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setWSDL(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setEndpointURI(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setNeedAuth(Boolean.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUserName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPassword(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUseProxy(Boolean.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyHost(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyPort(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyUser(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setProxyPassword(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setMethodName(value);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    if (value != null) {
      connection.setTimeOut(Integer.valueOf(value));
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    Object value=param.getValue();
    if (value != null && value instanceof ArrayList) {
      ArrayList<HashMap<String,String>> list=(ArrayList<HashMap<String,String>>)value;
      ArrayList<String> result=new ArrayList<String>();
      for (      HashMap<String,String> m : list) {
        Iterator<Map.Entry<String,String>> it=m.entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry<String,String> entry=it.next();
          result.add(entry.getValue());
        }
      }
      connection.setParameters(result);
    }
  }
}",0.6308508927135275
126444,"private static void setDatabaseValueForOracleSeverName(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.ORACLESN,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(""String_Node_Str"");
    if (param != null && ""String_Node_Str"".equals(param.getValue())) {
      String value=getParameterValue(connection,node,""String_Node_Str"");
      if (value != null) {
        connection.setSID(value);
      }
    }
 else {
      String value=getParameterValue(connection,node,""String_Node_Str"");
      if (value != null) {
        connection.setSID(value);
      }
    }
  }
}","private static void setDatabaseValueForOracleSeverName(DatabaseConnection connection,INode node,IElementParameter param){
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    String value=getParameterValue(connection,node,param);
    String dbVersionName=EDatabaseVersion4Drivers.getDbVersionName(EDatabaseTypeName.ORACLESN,value);
    if (value != null) {
      connection.setDbVersionString(dbVersionName);
    }
  }
  if (""String_Node_Str"".equals(param.getRepositoryValue())) {
    if (param != null && ""String_Node_Str"".equals(param.getValue())) {
      String value=getParameterValue(connection,node,node.getElementParameter(""String_Node_Str""));
      if (value != null) {
        connection.setSID(value);
      }
    }
 else {
      String value=getParameterValue(connection,node,node.getElementParameter(""String_Node_Str""));
      if (value != null) {
        connection.setSID(value);
      }
    }
  }
}",0.7894736842105263
126445,"/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateFileConnection(ConnectionItem connectionItem,boolean show,boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.NODE_SCHEMA);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.NODE_SAP_IDOC);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateFileConnection(ConnectionItem connectionItem,boolean show,boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.NODE_SCHEMA);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.NODE_SAP_IDOC);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.9915074309978767
126446,"/** 
 * DOC ycbai Comment method ""updateValidationRuleConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateValidationRuleConnection(ConnectionItem connectionItem,boolean show,boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.VALIDATION_RULE_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_VALIDATION_RULE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","/** 
 * DOC ycbai Comment method ""updateValidationRuleConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateValidationRuleConnection(ConnectionItem connectionItem,boolean show,boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.VALIDATION_RULE_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_VALIDATION_RULE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.9922779922779924
126447,"/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateDBConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      types.add(EUpdateItemType.JOB_PROPERTY_STORM);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateDBConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      types.add(EUpdateItemType.JOB_PROPERTY_STORM);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9935483870967742
126448,"/** 
 * hwang Comment method ""updateServices"". if show is false, will work for context menu action.
 */
public static boolean updateServices(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.SERVICES_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * hwang Comment method ""updateServices"". if show is false, will work for context menu action.
 */
public static boolean updateServices(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.SERVICES_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9929266136162688
126449,"public static boolean updateWSDLConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.NODE_SCHEMA);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","public static boolean updateWSDLConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.NODE_SCHEMA);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9911894273127754
126450,"@SuppressWarnings(""String_Node_Str"") private boolean filterForType(UpdateResult result){
  if (result == null || parameter == null) {
    return false;
  }
  Object object=result.getParameter();
  if (object == null) {
    return false;
  }
  if (object == parameter) {
    return true;
  }
  if (object instanceof List) {
    List list=((List)object);
    if (!list.isEmpty()) {
      Object firstObj=list.get(0);
      if (parameter == firstObj) {
        return true;
      }
      if (checkResultSchema(result,firstObj,parameter)) {
        return true;
      }
    }
  }
  if (checkResultSchema(result,object,parameter)) {
    return true;
  }
  if (parameter instanceof QueriesConnection && object instanceof Query) {
    for (    Query query : ((QueriesConnection)parameter).getQuery()) {
      if (query.getId().equals(((Query)object).getId())) {
        return true;
      }
    }
  }
  if ((object instanceof Query) && (parameter instanceof Query)) {
    if (((Query)object).getId().equals(((Query)parameter).getId())) {
      return true;
    }
  }
  if (checkHadoopRelevances(object)) {
    return true;
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") private boolean filterForType(UpdateResult result){
  if (result == null || parameter == null) {
    return false;
  }
  Object object=result.getParameter();
  if (object == null) {
    return false;
  }
  if (object == parameter) {
    return true;
  }
  if (object instanceof ConnectionItem) {
    if (((ConnectionItem)object).getConnection() == parameter) {
      return true;
    }
  }
  if (object instanceof List) {
    List list=((List)object);
    if (!list.isEmpty()) {
      Object firstObj=list.get(0);
      if (parameter == firstObj) {
        return true;
      }
      if (checkResultSchema(result,firstObj,parameter)) {
        return true;
      }
    }
  }
  if (checkResultSchema(result,object,parameter)) {
    return true;
  }
  if (parameter instanceof QueriesConnection && object instanceof Query) {
    for (    Query query : ((QueriesConnection)parameter).getQuery()) {
      if (query.getId().equals(((Query)object).getId())) {
        return true;
      }
    }
  }
  if ((object instanceof Query) && (parameter instanceof Query)) {
    if (((Query)object).getId().equals(((Query)parameter).getId())) {
      return true;
    }
  }
  if (checkHadoopRelevances(object)) {
    return true;
  }
  return false;
}",0.9435684647302904
126451,"/** 
 * DOC zwzhao Comment method ""setComponentValue"". set parameter value of the connection
 * @param connection - connection
 * @param node - node
 * @param repositoryValue - repositoryValue
 */
public void setComponentValue(Connection connection,INode node,String repositoryValue);","/** 
 * DOC zwzhao Comment method ""setComponentValue"". set parameter value of the connection
 * @param connection - connection
 * @param node - node
 * @param param - param
 */
public void setComponentValue(Connection connection,INode node,IElementParameter param);",0.8451730418943534
126452,"@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    if (relatedWizard == null) {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isRepObjType(objectType)) {
          relatedWizard=handler.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
          if (relatedWizard != null) {
            break;
          }
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem.getConnection(),node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}","@Override public ConnectionItem openMetadataConnection(boolean creation,IRepositoryNode repoNode,INode node){
  RepositoryNode realNode;
  if (repoNode instanceof RepositoryNode) {
    realNode=(RepositoryNode)repoNode;
    IWizard relatedWizard=null;
    ERepositoryObjectType objectType=null;
    if (creation) {
      objectType=realNode.getContentType();
    }
 else {
      objectType=realNode.getObjectType();
    }
    if (objectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS)) {
      relatedWizard=new DatabaseWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_DELIMITED)) {
      relatedWizard=new DelimitedFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_LDIF)) {
      relatedWizard=new LdifFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_POSITIONAL)) {
      relatedWizard=new FilePositionalWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_REGEXP)) {
      relatedWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_XML)) {
      relatedWizard=new XmlFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_GENERIC_SCHEMA)) {
      relatedWizard=new GenericSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,true);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_WSDL_SCHEMA)) {
      relatedWizard=new WSDLSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_LDAP_SCHEMA)) {
      relatedWizard=new LDAPSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EXCEL)) {
      relatedWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,realNode,null);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA)) {
      relatedWizard=new SalesforceSchemaWizard(PlatformUI.getWorkbench(),creation,realNode,null,false);
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_EBCDIC)) {
      if (PluginChecker.isEBCDICPluginLoaded()) {
        IProviderService iebcdicService=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (iebcdicService != null) {
          relatedWizard=iebcdicService.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_HL7)) {
      if (PluginChecker.isHL7PluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_MDMCONNECTION)) {
      if (PluginChecker.isMDMPluginLoaded()) {
        IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_SAPCONNECTIONS)) {
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_HEADER_FOOTER)) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IHeaderFooterProviderService.class)) {
        IHeaderFooterProviderService service=(IHeaderFooterProviderService)GlobalServiceRegister.getDefault().getService(IHeaderFooterProviderService.class);
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_FTP)) {
      if (PluginChecker.isFTPPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
 else     if (objectType.equals(ERepositoryObjectType.METADATA_FILE_BRMS)) {
      if (PluginChecker.isBRMSPluginLoaded()) {
        IProviderService service=GlobalServiceRegister.getDefault().findService(""String_Node_Str"");
        if (service != null) {
          relatedWizard=service.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
        }
      }
    }
    if (relatedWizard == null) {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isRepObjType(objectType)) {
          relatedWizard=handler.newWizard(PlatformUI.getWorkbench(),creation,realNode,null);
          if (relatedWizard != null) {
            break;
          }
        }
      }
    }
    boolean changed=false;
    if (relatedWizard != null) {
      ConnectionItem connItem=null;
      if (node != null && relatedWizard instanceof RepositoryWizard) {
        connItem=((RepositoryWizard)relatedWizard).getConnectionItem();
        if (connItem != null) {
          changed=ComponentToRepositoryProperty.setValue(connItem,node);
        }
      }
      if (connItem != null && changed) {
        WizardDialog wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),relatedWizard);
        wizardDialog.setPageSize(600,540);
        wizardDialog.create();
        if (wizardDialog.open() == wizardDialog.OK) {
          return connItem;
        }
      }
    }
  }
  return null;
}",0.9987253027405992
126453,"/** 
 * DOC zhao Comment method ""handleCreation"".
 * @param dbConn
 * @param metadataConnection
 * @param tdqRepService
 * @throws PersistenceException
 */
private void handleCreation(DatabaseConnection dbConn,IMetadataConnection metadataConnection,ITDQRepositoryService tdqRepService) throws PersistenceException {
  connectionProperty.setId(propertyId);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
    if (equals && !c.isContextMode()) {
      if (c.getUiSchema() == null) {
        c.setUiSchema(""String_Node_Str"");
      }
 else {
        c.setUiSchema(c.getUiSchema().toUpperCase());
      }
    }
  }
  EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
  String displayName=connectionProperty.getDisplayName();
  this.connection.setName(displayName);
  this.connection.setLabel(displayName);
  if (tdqRepService != null) {
    tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
  }
  repFactory.create(connectionItem,propertiesWizardPage.getDestinationPath());
  ConnectionHelper.setIsConnNeedReload(connection,Boolean.FALSE);
  ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
  String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
    JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
  }
  MetadataConnectionUtils.fillConnectionInformation(connectionItem,metadataConnection);
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
  List<Schema> schemas=ConnectionHelper.getSchema(connection);
  if (catalogs.isEmpty() && schemas.isEmpty()) {
    IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
    if (extractor != null && type.isUseProvider()) {
      extractor.fillConnection(connection);
      repFactory.save(connectionItem);
    }
  }
  if (tdqRepService != null) {
    tdqRepService.publishSoftwareSystemUpdateEvent(dbConn);
  }
}","/** 
 * DOC zhao Comment method ""handleCreation"".
 * @param dbConn
 * @param metadataConnection
 * @param tdqRepService
 * @throws PersistenceException
 */
private void handleCreation(DatabaseConnection dbConn,IMetadataConnection metadataConnection,ITDQRepositoryService tdqRepService) throws PersistenceException {
  connectionProperty.setId(propertyId);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    final boolean equals=c.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
    if (equals && !c.isContextMode()) {
      if (c.getUiSchema() == null) {
        c.setUiSchema(""String_Node_Str"");
      }
 else {
        c.setUiSchema(c.getUiSchema().toUpperCase());
      }
    }
  }
  EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
  String displayName=connectionProperty.getDisplayName();
  this.connection.setName(displayName);
  this.connection.setLabel(displayName);
  if (tdqRepService != null) {
    tdqRepService.checkUsernameBeforeSaveConnection(connectionItem);
  }
  repFactory.create(connectionItem,propertiesWizardPage.getDestinationPath());
  ConnectionHelper.setIsConnNeedReload(connection,Boolean.FALSE);
  ConnectionHelper.setPackageFilter(connection,""String_Node_Str"");
  String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType()) && HiveConnVersionInfo.MODE_EMBEDDED.getKey().equals(hiveMode)) {
    JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
  }
  if (false) {
    MetadataConnectionUtils.fillConnectionInformation(connectionItem,metadataConnection);
  }
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
  List<Schema> schemas=ConnectionHelper.getSchema(connection);
  if (catalogs.isEmpty() && schemas.isEmpty()) {
    IDBMetadataProvider extractor=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
    if (extractor != null && type.isUseProvider()) {
      extractor.fillConnection(connection);
      repFactory.save(connectionItem);
    }
  }
  if (tdqRepService != null) {
    tdqRepService.publishSoftwareSystemUpdateEvent(dbConn);
  }
}",0.9955195220823556
126454,"@Override public void setComponentValue(Connection connection,INode node,String repositoryValue){
  if (node != null && canHandle(connection)) {
    ExampleDemoConnection demoConn=(ExampleDemoConnection)connection;
  }
}","@Override public void setComponentValue(Connection connection,INode node,IElementParameter param){
  if (node != null && canHandle(connection)) {
    ExampleDemoConnection demoConn=(ExampleDemoConnection)connection;
  }
}",0.8979591836734694
126455,"private File getJarFile(String jarNeeded) throws MalformedURLException {
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarNeeded);
  if (jarFiles.size() > 0) {
    File jarFile=jarFiles.get(0);
    return jarFile;
  }
  if (jarsFromExtensions.containsKey(jarNeeded)) {
    return new File(jarsFromExtensions.get(jarNeeded));
  }
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  String uriPath=jarsToRelative.get(jarNeeded);
  if (uriPath != null && uriPath.startsWith(""String_Node_Str"")) {
    if (checkJarInstalledFromPlatform(uriPath)) {
      return new File(uriJarInstalled.get(uriPath));
    }
  }
  return null;
}","private File getJarFile(String jarNeeded) throws MalformedURLException {
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarNeeded);
  if (jarFiles.size() > 0) {
    File jarFile=jarFiles.get(0);
    return jarFile;
  }
  String uriPath;
  if (jarsFromExtensions.containsKey(jarNeeded)) {
    uriPath=jarsFromExtensions.get(jarNeeded);
  }
 else {
    EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
    uriPath=jarsToRelative.get(jarNeeded);
  }
  if (uriPath != null && uriPath.startsWith(""String_Node_Str"")) {
    if (checkJarInstalledFromPlatform(uriPath)) {
      return new File(uriJarInstalled.get(uriPath));
    }
  }
  return null;
}",0.955617198335645
126456,"private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        if (type != null && type.hasChildrenType()) {
          for (          ERepositoryObjectType childType : type.getChildrenTypesArray()) {
            RepositoryNode childRootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(childType,true);
            if (childRootNode != null && childRootNode.hasChildren() && !rootNode.getChildren().contains(childRootNode)) {
              rootNode.getChildren().add(childRootNode);
            }
          }
        }
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}","private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        IRepositoryView viewPart=RepositoryManagerHelper.getRepositoryView();
        if (viewPart != null) {
          RepositoryNodeUtilities.expandParentNode(viewPart,rootNode);
        }
        if (type != null && type.hasChildrenType()) {
          for (          ERepositoryObjectType childType : type.getChildrenTypesArray()) {
            RepositoryNode childRootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(childType,true);
            if (childRootNode != null && childRootNode.hasChildren() && !rootNode.getChildren().contains(childRootNode)) {
              rootNode.getChildren().add(childRootNode);
            }
          }
        }
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}",0.912103083294984
126457,"/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}","/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product) || EDatabaseTypeName.VERTICA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}",0.9886229894076108
126458,"/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}","/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product) || EDatabaseTypeName.VERTICA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}",0.9886229894076108
126459,"private File getJarFile(String jarNeeded) throws MalformedURLException {
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarNeeded);
  if (jarFiles.size() > 0) {
    File jarFile=jarFiles.get(0);
    return jarFile;
  }
  if (jarsFromExtensions.containsKey(jarNeeded)) {
    return new File(jarsFromExtensions.get(jarNeeded));
  }
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  String uriPath=jarsToRelative.get(jarNeeded);
  if (uriPath.startsWith(""String_Node_Str"")) {
    if (checkJarInstalledFromPlatform(uriPath)) {
      return new File(uriJarInstalled.get(uriPath));
    }
  }
  return null;
}","private File getJarFile(String jarNeeded) throws MalformedURLException {
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarNeeded);
  if (jarFiles.size() > 0) {
    File jarFile=jarFiles.get(0);
    return jarFile;
  }
  if (jarsFromExtensions.containsKey(jarNeeded)) {
    return new File(jarsFromExtensions.get(jarNeeded));
  }
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  String uriPath=jarsToRelative.get(jarNeeded);
  if (uriPath != null && uriPath.startsWith(""String_Node_Str"")) {
    if (checkJarInstalledFromPlatform(uriPath)) {
      return new File(uriJarInstalled.get(uriPath));
    }
  }
  return null;
}",0.986476868327402
126460,"public static String encryptPasswordHex(String input) throws Exception {
  if (input == null || input.length() == 0) {
    return input;
  }
  SecretKey key=getSecretKeyUTF8();
  Cipher c=Cipher.getInstance(""String_Node_Str"");
  c.init(Cipher.ENCRYPT_MODE,key,secureRandom);
  byte[] cipherByte=c.doFinal(input.getBytes(CHARSET));
  String dec=Hex.encodeHexString(cipherByte);
  return dec;
}","public static String encryptPasswordHex(String input) throws Exception {
  if (input == null) {
    return input;
  }
  SecretKey key=getSecretKeyUTF8();
  Cipher c=Cipher.getInstance(""String_Node_Str"");
  c.init(Cipher.ENCRYPT_MODE,key,secureRandom);
  byte[] cipherByte=c.doFinal(input.getBytes(CHARSET));
  String dec=Hex.encodeHexString(cipherByte);
  return dec;
}",0.9697766097240472
126461,"public static String encryptPassword(String input) throws Exception {
  if (input == null || input.length() == 0) {
    return input;
  }
  SecretKey key=getSecretKey();
  Cipher c=Cipher.getInstance(""String_Node_Str"");
  c.init(Cipher.ENCRYPT_MODE,key,secureRandom);
  byte[] cipherByte=c.doFinal(input.getBytes(CHARSET));
  String dec=Hex.encodeHexString(cipherByte);
  return dec;
}","public static String encryptPassword(String input) throws Exception {
  if (input == null) {
    return input;
  }
  SecretKey key=getSecretKey();
  Cipher c=Cipher.getInstance(""String_Node_Str"");
  c.init(Cipher.ENCRYPT_MODE,key,secureRandom);
  byte[] cipherByte=c.doFinal(input.getBytes(CHARSET));
  String dec=Hex.encodeHexString(cipherByte);
  return dec;
}",0.9692101740294512
126462,"private File getJarFile(String jarNeeded) throws MalformedURLException {
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarNeeded);
  if (jarFiles.size() > 0) {
    File jarFile=jarFiles.get(0);
    return jarFile;
  }
  if (jarsFromExtensions.containsKey(jarNeeded)) {
    return new File(jarsFromExtensions.get(jarNeeded));
  }
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  String uriPath=jarsToRelative.get(jarNeeded);
  if (uriPath.startsWith(""String_Node_Str"")) {
    if (checkJarInstalledFromPlatform(uriPath)) {
      return new File(uriJarInstalled.get(uriPath));
    }
  }
  return null;
}","private File getJarFile(String jarNeeded) throws MalformedURLException {
  List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),jarNeeded);
  if (jarFiles.size() > 0) {
    File jarFile=jarFiles.get(0);
    return jarFile;
  }
  if (jarsFromExtensions.containsKey(jarNeeded)) {
    return new File(jarsFromExtensions.get(jarNeeded));
  }
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  String uriPath=jarsToRelative.get(jarNeeded);
  if (uriPath != null && uriPath.startsWith(""String_Node_Str"")) {
    if (checkJarInstalledFromPlatform(uriPath)) {
      return new File(uriJarInstalled.get(uriPath));
    }
  }
  return null;
}",0.986476868327402
126463,"public static List<ModuleNeeded> getNotInstalledModules(List<ModuleNeeded> modules){
  List<ModuleNeeded> updatedModules=new ArrayList<ModuleNeeded>();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  if (modules != null) {
    for (    ModuleNeeded module : modules) {
      for (      ModuleNeeded fromProvider : modulesNeeded) {
        if (fromProvider.getModuleName().equals(module.getModuleName()) && fromProvider.getContext().equals(module.getContext()) && ELibraryInstallStatus.NOT_INSTALLED == fromProvider.getStatus()) {
          updatedModules.add(fromProvider);
          break;
        }
      }
    }
  }
  return updatedModules;
}","public static List<ModuleNeeded> getNotInstalledModules(List<ModuleNeeded> modules){
  List<ModuleNeeded> updatedModules=new ArrayList<ModuleNeeded>();
  List<ModuleNeeded> modulesNeeded=ModulesNeededProvider.getModulesNeeded();
  if (modules != null) {
    for (    ModuleNeeded module : modules) {
      for (      ModuleNeeded fromProvider : modulesNeeded) {
        if (fromProvider.getModuleName().equals(module.getModuleName()) && fromProvider.getContext().equals(module.getContext()) && ELibraryInstallStatus.NOT_INSTALLED == fromProvider.getStatus() && fromProvider.getRequiredIf().equals(module.getRequiredIf())) {
          updatedModules.add(fromProvider);
          break;
        }
      }
    }
  }
  return updatedModules;
}",0.9554770318021202
126464,"@Override public void handleTableRelevantParameters(IElement ele,IMetadataTable metadataTable){
}","@Override public void handleTableRelevantParameters(Connection connection,IElement ele,IMetadataTable metadataTable){
}",0.8981481481481481
126465,"@Override public String getLabel(){
  return this.label;
}","@Override public String getLabel(){
  return this.displayName;
}",0.918032786885246
126466,"@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
    IRepositoryViewObject object=factory.getLastVersion(project,id,this.path,this.type);
    if (object == null) {
      object=factory.getLastVersion(id);
    }
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
      if (service != null && jobletservice != null) {
        IComponentsFactory factorySingleton=service.getComponentsFactory();
        IComponent component=factorySingleton.get(property.getLabel(),DI);
        if (component != null) {
          try {
            Property tProperty=jobletservice.getJobletComponentItem(component);
            if (!tProperty.getId().equals(this.id)) {
              informationStatus=ERepositoryStatus.WARN;
              property.setDescription(TIP);
            }
          }
 catch (          Exception e) {
          }
        }
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}","@Override public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    Project project=ProjectManager.getInstance().getProjectFromProjectLabel(this.projectLabel);
    IRepositoryViewObject object=factory.getLastVersion(project,id,this.path,this.type);
    if (object == null) {
      object=factory.getLastVersion(id);
    }
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    modified=factory.isModified(property);
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.displayName=property.getDisplayName();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length != 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IJobletProviderService jobletservice=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
      if (service != null && jobletservice != null) {
        IComponentsFactory factorySingleton=service.getComponentsFactory();
        IComponent component=factorySingleton.get(property.getLabel(),DI);
        if (component != null) {
          try {
            Property tProperty=jobletservice.getJobletComponentItem(component);
            if (!tProperty.getId().equals(this.id)) {
              informationStatus=ERepositoryStatus.WARN;
              property.setDescription(TIP);
            }
          }
 catch (          Exception e) {
          }
        }
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
  }
  return null;
}",0.99402390438247
126467,"/** 
 * item with same name.
 */
protected boolean isSameName(ImportItem importItem,IRepositoryViewObject repObject){
  final Property property=importItem.getProperty();
  if ((property.getLabel() != null && property.getLabel().equalsIgnoreCase(repObject.getLabel()))) {
    ERepositoryObjectType importType=importItem.getRepositoryType();
    ERepositoryObjectType repType=repObject.getRepositoryObjectType();
    if (importType != null && importType.equals(repType) && importType.isAllowMultiName()) {
      String importPath=importItem.getProperty().getItem().getState().getPath();
      String repPath=repObject.getPath();
      if (importPath == null && repPath == null || importPath != null && importPath.equals(repPath)) {
        return true;
      }
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * item with same name.
 */
protected boolean isSameName(ImportItem importItem,IRepositoryViewObject repObject){
  final Property property=importItem.getProperty();
  String currentLabel=null;
  if (repObject instanceof RepositoryViewObject) {
    RepositoryViewObject object=(RepositoryViewObject)repObject;
    currentLabel=object.getTechnicalLabel();
  }
 else {
    currentLabel=repObject.getLabel();
  }
  if ((property.getLabel() != null && property.getLabel().equalsIgnoreCase(currentLabel))) {
    ERepositoryObjectType importType=importItem.getRepositoryType();
    ERepositoryObjectType repType=repObject.getRepositoryObjectType();
    if (importType != null && importType.equals(repType) && importType.isAllowMultiName()) {
      String importPath=importItem.getProperty().getItem().getState().getPath();
      String repPath=repObject.getPath();
      if (importPath == null && repPath == null || importPath != null && importPath.equals(repPath)) {
        return true;
      }
      return false;
    }
    return true;
  }
  return false;
}",0.8597236981934112
126468,"private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}","private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        if (type != null && type.hasChildrenType()) {
          for (          ERepositoryObjectType childType : type.getChildrenTypesArray()) {
            RepositoryNode childRootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(childType,true);
            if (childRootNode != null && childRootNode.hasChildren() && !rootNode.getChildren().contains(childRootNode)) {
              rootNode.getChildren().add(childRootNode);
            }
          }
        }
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}",0.6653333333333333
126469,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (salesforceAPI == null) {
    try {
      salesforceAPI=new SalesforceModuleParseAPI();
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  try {
    ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
    if (loginList != null) {
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceServiceStub) {
          bindingPartner=(SforceServiceStub)loginList.get(i);
        }
      }
    }
    salesforceAPI.setLogin(true);
  }
 catch (  Throwable e) {
    errors.add(e.getMessage());
    ExceptionHandler.process(e);
  }
 finally {
    salesforceAPI.resetAllProxy();
  }
  monitor.done();
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (salesforceAPI == null) {
    try {
      salesforceAPI=new SalesforceModuleParseAPI();
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  try {
    ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
    if (loginList != null) {
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceManagement) {
          sforceMgr=(SforceManagement)loginList.get(i);
        }
      }
    }
    salesforceAPI.setLogin(true);
  }
 catch (  Throwable e) {
    errors.add(e.getMessage());
    ExceptionHandler.process(e);
  }
 finally {
    salesforceAPI.resetAllProxy();
  }
  monitor.done();
}",0.9754621848739496
126470,"private IMetadataTable getMetadataTableBySalesforceServerAPI(final String endPoint,final String user,final String pass,final String timeOut,final String moduleName,final String proxy,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (user == null || pass == null || user.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  if (!salesforceAPI.isLogin()) {
    try {
      ArrayList loginList=salesforceAPI.login(endPoint,user,pass,timeOut);
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
 else {
          bindingPartner=new SforceServiceStub(endPoint);
        }
      }
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  salesforceAPI.fetchMetaDataColumns(moduleName);
  salesforceAPI.resetAllProxy();
  if (salesforceAPI.getCurrentMetadataColumns() == null) {
    return null;
  }
  metadataTable.setListColumns(salesforceAPI.getCurrentMetadataColumns());
  return metadataTable;
}","private IMetadataTable getMetadataTableBySalesforceServerAPI(final String endPoint,final String user,final String pass,final String timeOut,final String moduleName,final String proxy,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (user == null || pass == null || user.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  salesforceAPI.resetAllProxy();
  salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
  if (!salesforceAPI.isLogin()) {
    try {
      ArrayList loginList=salesforceAPI.login(endPoint,user,pass,timeOut);
      for (int i=0; i < loginList.size(); i++) {
        if (loginList.get(i) instanceof SoapBindingStub) {
          binding=(SoapBindingStub)loginList.get(i);
        }
        if (loginList.get(i) instanceof SforceManagement) {
          sforceMgr=(SforceManagement)loginList.get(i);
        }
      }
    }
 catch (    Throwable e) {
      ExceptionHandler.process(e);
    }
  }
  salesforceAPI.fetchMetaDataColumns(moduleName);
  salesforceAPI.resetAllProxy();
  if (salesforceAPI.getCurrentMetadataColumns() == null) {
    return null;
  }
  metadataTable.setListColumns(salesforceAPI.getCurrentMetadataColumns());
  return metadataTable;
}",0.9597989949748744
126471,"protected com.salesforce.soap.partner.DescribeGlobalResult describeGlobalPartner() throws RemoteException {
  if (salesforceAPI.isLogin()) {
    ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
    if (currentAPI instanceof SalesforceModuleParserPartner) {
      SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
      try {
        DescribeSObjectsResponse describeSObjects=bindingPartner.describeSObjects(null,null,null,null,null);
      }
 catch (      InvalidSObjectFault e) {
        e.printStackTrace();
      }
catch (      com.salesforce.soap.partner.UnexpectedErrorFault e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}","protected com.salesforce.soap.partner.DescribeGlobalResult describeGlobalPartner() throws RemoteException {
  if (salesforceAPI.isLogin()) {
    ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
    if (currentAPI instanceof SalesforceModuleParserPartner) {
      SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
      try {
        sforceMgr.describeSObjects(null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return null;
}",0.7778695293146161
126472,"private IMetadataTable getMetadataTableBySalesforceServerAPIForOauth(final String endPoint,final String consumeKey,final String consumeSecret,final String callbackHost,final String callbackPort,final String salesforceVersion,final String token,final String timeOut,final String moduleName){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (consumeKey == null || consumeSecret == null || consumeKey.equals(""String_Node_Str"") || consumeSecret.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  org.talend.salesforce.SforceManagement sforceManagement=new org.talend.salesforce.SforceManagementImpl();
  try {
    OAuthClient client=new OAuthClient();
    client.setBaseOAuthURL(endPoint);
    client.setCallbackHost(callbackHost);
    client.setCallbackPort(Integer.parseInt(callbackPort));
    client.setClientID(consumeKey);
    client.setClientSecret(consumeSecret);
    Token tokenFile=salesforceAPI.login(endPoint,consumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut);
    String url=client.getSOAPEndpoint(tokenFile,salesforceVersion);
    boolean result=sforceManagement.login(tokenFile.getAccess_token(),url,Integer.parseInt(timeOut),false);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  Field[] fields=fetchSFDescriptionField(moduleName,sforceManagement);
  List<IMetadataColumn> res=new ArrayList<IMetadataColumn>();
  for (  Field field : fields) {
    res.add(parseFieldToMetadataColumn(field));
  }
  if (res.size() == 0) {
    return null;
  }
  metadataTable.setListColumns(res);
  return metadataTable;
}","private IMetadataTable getMetadataTableBySalesforceServerAPIForOauth(final String endPoint,final String consumeKey,final String consumeSecret,final String callbackHost,final String callbackPort,final String salesforceVersion,final String token,final String timeOut,final String moduleName){
  IMetadataTable metadataTable=new org.talend.core.model.metadata.MetadataTable();
  if (consumeKey == null || consumeSecret == null || consumeKey.equals(""String_Node_Str"") || consumeSecret.equals(""String_Node_Str"") || moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  org.talend.salesforce.SforceManagement sforceManagement=null;
  try {
    OAuthClient client=new OAuthClient();
    client.setBaseOAuthURL(endPoint);
    client.setCallbackHost(callbackHost);
    client.setCallbackPort(Integer.parseInt(callbackPort));
    client.setClientID(consumeKey);
    client.setClientSecret(consumeSecret);
    Token tokenFile=salesforceAPI.login(endPoint,consumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut);
    String url=OAuthClient.getSOAPEndpoint(tokenFile,salesforceVersion);
    SforceConnection sforceConn=new SforceSessionConnection.Builder(url,tokenFile.getAccess_token()).setTimeout(Integer.parseInt(timeOut)).needCompression(false).build();
    sforceManagement=new org.talend.salesforce.SforceManagementImpl(sforceConn);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  Field[] fields=fetchSFDescriptionField(moduleName,sforceManagement);
  List<IMetadataColumn> res=new ArrayList<IMetadataColumn>();
  for (  Field field : fields) {
    res.add(parseFieldToMetadataColumn(field));
  }
  if (res.size() == 0) {
    return null;
  }
  metadataTable.setListColumns(res);
  return metadataTable;
}",0.8947521020585677
126473,"private Field[] fetchSFDescriptionField(String module,org.talend.salesforce.SforceManagement sforceManagement){
  DescribeSObject d=new DescribeSObject();
  d.setSObjectType(module);
  SessionHeader sh=sforceManagement.getSessionHeader();
  DescribeSObjectResult r;
  try {
    r=sforceManagement.getStub().describeSObject(d,sh,null,null,null).getResult();
    Field[] fields=r.getFields();
    return fields;
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
catch (  InvalidSObjectFault e) {
    e.printStackTrace();
  }
catch (  com.salesforce.soap.partner.UnexpectedErrorFault e) {
    e.printStackTrace();
  }
  return null;
}","private Field[] fetchSFDescriptionField(String module,org.talend.salesforce.SforceManagement sforceManagement){
  DescribeSObjectResult r;
  try {
    r=sforceManagement.describeSObject(module);
    Field[] fields=r.getFields();
    return fields;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.5377456049638056
126474,"protected SalesforceModuleParseAPI checkSalesfoceLogin(final String proxy,final String endPoint,final String username,final String password,final String timeOut,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  final List<String> errors=new ArrayList<String>();
  salesforceAPI.setLogin(false);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (salesforceAPI == null) {
          try {
            salesforceAPI=new SalesforceModuleParseAPI();
          }
 catch (          Throwable e) {
            ExceptionHandler.process(e);
          }
        }
        boolean socksProxy=false;
        boolean httpProxy=false;
        boolean httpsProxy=false;
        if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
          socksProxy=true;
        }
        if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
          if (endPoint.startsWith(""String_Node_Str"")) {
            httpsProxy=true;
          }
 else {
            httpProxy=true;
          }
        }
        salesforceAPI.resetAllProxy();
        salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
        try {
          ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
          if (loginList != null) {
            for (int i=0; i < loginList.size(); i++) {
              if (loginList.get(i) instanceof SoapBindingStub) {
                binding=(SoapBindingStub)loginList.get(i);
              }
              if (loginList.get(i) instanceof SforceServiceStub) {
                bindingPartner=(SforceServiceStub)loginList.get(i);
              }
            }
          }
          salesforceAPI.setLogin(true);
        }
 catch (        Throwable e) {
          errors.add(e.getMessage());
          ExceptionHandler.process(e);
        }
 finally {
          salesforceAPI.resetAllProxy();
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e2) {
    ExceptionHandler.process(e2);
  }
  if (salesforceAPI.isLogin()) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String error=errors.size() > 0 ? errors.get(0) : ""String_Node_Str"";
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,error);
  }
  return salesforceAPI;
}","protected SalesforceModuleParseAPI checkSalesfoceLogin(final String proxy,final String endPoint,final String username,final String password,final String timeOut,final String proxyHost,final String proxyPort,final String proxyUsername,final String proxyPassword){
  final List<String> errors=new ArrayList<String>();
  salesforceAPI.setLogin(false);
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
        if (salesforceAPI == null) {
          try {
            salesforceAPI=new SalesforceModuleParseAPI();
          }
 catch (          Throwable e) {
            ExceptionHandler.process(e);
          }
        }
        boolean socksProxy=false;
        boolean httpProxy=false;
        boolean httpsProxy=false;
        if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
          socksProxy=true;
        }
        if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
          if (endPoint.startsWith(""String_Node_Str"")) {
            httpsProxy=true;
          }
 else {
            httpProxy=true;
          }
        }
        salesforceAPI.resetAllProxy();
        salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
        try {
          ArrayList loginList=salesforceAPI.login(endPoint,username,password,timeOut);
          if (loginList != null) {
            for (int i=0; i < loginList.size(); i++) {
              if (loginList.get(i) instanceof SoapBindingStub) {
                binding=(SoapBindingStub)loginList.get(i);
              }
              if (loginList.get(i) instanceof SforceManagement) {
                sforceMgr=(SforceManagement)loginList.get(i);
              }
            }
          }
          salesforceAPI.setLogin(true);
        }
 catch (        Throwable e) {
          errors.add(e.getMessage());
          ExceptionHandler.process(e);
        }
 finally {
          salesforceAPI.resetAllProxy();
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e1) {
    ExceptionHandler.process(e1);
  }
catch (  InterruptedException e2) {
    ExceptionHandler.process(e2);
  }
  if (salesforceAPI.isLogin()) {
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
    String error=errors.size() > 0 ? errors.get(0) : ""String_Node_Str"";
    new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,error);
  }
  return salesforceAPI;
}",0.98731978461004
126475,"@Override public ArrayList login(String endPoint,String username,String password,String timeOut) throws Exception {
  if (endPoint == null) {
    throw new RemoteException(Messages.getString(""String_Node_Str""));
  }
  if (username == null || password == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  int time=Integer.valueOf(timeOut);
  ArrayList doLoginList=null;
  sforceManagement=new SforceManagementImpl();
  boolean login=false;
  if (name != null && pwd != null && url != null) {
    if (!url.equals(endPoint) || !name.equals(username) || !pwd.equals(password)) {
      login=sforceManagement.login(endPoint,username,password,time,false);
    }
 else {
      if (isLogin()) {
        return doLoginList;
      }
    }
  }
 else {
    login=sforceManagement.login(endPoint,username,password,time,false);
    doLoginList=new ArrayList();
    doLoginList.add(sforceManagement.getStub());
  }
  setLogin(login);
  setSforceManagement(sforceManagement);
  this.name=username;
  this.pwd=password;
  this.url=endPoint;
  return doLoginList;
}","@Override public ArrayList login(String endPoint,String username,String password,String timeOut) throws Exception {
  if (endPoint == null) {
    throw new RemoteException(Messages.getString(""String_Node_Str""));
  }
  if (username == null || password == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  int time=Integer.valueOf(timeOut);
  ArrayList doLoginList=null;
  sforceManagement=null;
  boolean login=false;
  if (name != null && pwd != null && url != null) {
    if (!url.equals(endPoint) || !name.equals(username) || !pwd.equals(password)) {
      try {
        SforceConnection sforceConn=new SforceBasicConnection.Builder(endPoint,username,password).setTimeout(time).needCompression(false).build();
        login=true;
        sforceManagement=new SforceManagementImpl(sforceConn);
      }
 catch (      Exception ex) {
      }
    }
 else {
      if (isLogin()) {
        return doLoginList;
      }
    }
  }
 else {
    try {
      SforceConnection sforceConn=new SforceBasicConnection.Builder(endPoint,username,password).setTimeout(time).needCompression(false).build();
      login=true;
      sforceManagement=new SforceManagementImpl(sforceConn);
    }
 catch (    Exception ex) {
    }
    doLoginList=new ArrayList();
    doLoginList.add(sforceManagement);
  }
  setLogin(login);
  setSforceManagement(sforceManagement);
  this.name=username;
  this.pwd=password;
  this.url=endPoint;
  return doLoginList;
}",0.6864139020537124
126476,"/** 
 * Fetch module fields from SF service. Make sure login sucess before do this. <p> DOC YeXiaowei Comment method ""fetchSFDescriptionField"".
 * @param module
 * @return
 */
private Field[] fetchSFDescriptionField(String module){
  DescribeSObject d=new DescribeSObject();
  d.setSObjectType(module);
  SessionHeader sh=sforceManagement.getSessionHeader();
  DescribeSObjectResult r;
  try {
    r=sforceManagement.getStub().describeSObject(d,sh,null,null,null).getResult();
    Field[] fields=r.getFields();
    setCurrentModuleName(module);
    return fields;
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
catch (  InvalidSObjectFault e) {
    e.printStackTrace();
  }
catch (  UnexpectedErrorFault e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Fetch module fields from SF service. Make sure login sucess before do this. <p> DOC YeXiaowei Comment method ""fetchSFDescriptionField"".
 * @param module
 * @return
 */
private Field[] fetchSFDescriptionField(String module){
  DescribeSObjectResult r;
  try {
    r=sforceManagement.describeSObject(module);
    Field[] fields=r.getFields();
    setCurrentModuleName(module);
    return fields;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.6639935846030474
126477,"protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(e.getMessage());
      logError(e);
    }
  }
}","protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          Resource resource=ProjectManager.getInstance().getCurrentProject().getEmfProject().eResource();
          if (resource != null && resource.getContents() != null) {
            resource.getContents().add(author);
          }
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(e.getMessage());
      logError(e);
    }
  }
}",0.9771974642823352
126478,"/** 
 * Something like PROPERTY:REPOSITORY_PROPERTY_TYPE
 */
protected abstract String getRepositoryTypeValueName();","/** 
 * Something like REPOSITORY_PROPERTY_TYPE
 */
protected abstract String getRepositoryTypeValueName();",0.9596412556053812
126479,"@Override protected Set<Relation> collect(Map<String,ElementParameterType> parametersMap,Map<?,?> options){
  Set<Relation> relationSet=new HashSet<Relation>();
  ElementParameterType repositoryTypeParam=getParameterTypeByNames(parametersMap,getRepositoryTypeName(),getRepositoryTypeNameN());
  if (repositoryTypeParam != null && IN_REPOSITORY.equals(repositoryTypeParam.getValue())) {
    ElementParameterType repositoryTypeValueParam=getParameterTypeByNames(parametersMap,getRepositoryTypeValueName(),getRepositoryTypeValueNameN());
    if (repositoryTypeValueParam != null) {
      String repositoryIdOrValue=repositoryTypeValueParam.getValue();
      if (StringUtils.isNotEmpty(repositoryIdOrValue)) {
        Relation addedRelation=new Relation();
        addedRelation.setId(repositoryIdOrValue);
        addedRelation.setType(getRepositoryRelationType());
        addedRelation.setVersion(RelationshipItemBuilder.LATEST_VERSION);
        relationSet.add(addedRelation);
      }
    }
  }
  return relationSet;
}","@Override protected Set<Relation> collect(Map<String,ElementParameterType> parametersMap,Map<?,?> options){
  Set<Relation> relationSet=new HashSet<Relation>();
  for (  ElementParameterType paramType : parametersMap.values()) {
    if (paramType.getName().endsWith(""String_Node_Str"" + getRepositoryTypeName())) {
      String name=paramType.getName().split(""String_Node_Str"")[0];
      ElementParameterType repositoryTypeParam=parametersMap.get(name + ""String_Node_Str"" + getRepositoryTypeName());
      if (repositoryTypeParam != null && IN_REPOSITORY.equals(repositoryTypeParam.getValue())) {
        ElementParameterType repositoryTypeValueParam=parametersMap.get(name + ""String_Node_Str"" + getRepositoryTypeValueName());
        if (repositoryTypeValueParam != null) {
          String repositoryIdOrValue=repositoryTypeValueParam.getValue();
          if (StringUtils.isNotEmpty(repositoryIdOrValue)) {
            Relation addedRelation=new Relation();
            addedRelation.setId(repositoryIdOrValue);
            addedRelation.setType(getRepositoryRelationType());
            addedRelation.setVersion(RelationshipItemBuilder.LATEST_VERSION);
            relationSet.add(addedRelation);
          }
        }
      }
    }
  }
  return relationSet;
}",0.7672073651907059
126480,"/** 
 * Something like PROPERTY:PROPERTY_TYPE
 */
protected abstract String getRepositoryTypeName();","/** 
 * Something like PROPERTY_TYPE
 */
protected abstract String getRepositoryTypeName();",0.9528795811518324
126481,"public static routines.system.Document parseTo_Document(String s,boolean ignoreDTD,String encoding) throws org.dom4j.DocumentException {
  if (s == null) {
    return null;
  }
  routines.system.Document theDoc=new routines.system.Document();
  org.dom4j.io.SAXReader reader=new org.dom4j.io.SAXReader();
  if (ignoreDTD) {
    reader.setEntityResolver(new EntityResolver(){
      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
      }
    }
);
  }
  org.dom4j.Document document=reader.read(new java.io.StringReader(s));
  if (encoding != null && !(""String_Node_Str"".equals(encoding))) {
    document.setXMLEncoding(encoding);
  }
  theDoc.setDocument(document);
  return theDoc;
}","public static routines.system.Document parseTo_Document(String s,boolean ignoreDTD,String encoding) throws org.dom4j.DocumentException {
  if (s == null) {
    return null;
  }
  routines.system.Document theDoc=new routines.system.Document();
  org.dom4j.io.SAXReader reader=new org.dom4j.io.SAXReader();
  if (ignoreDTD) {
    reader.setEntityResolver(new EntityResolver(){
      public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
      }
    }
);
  }
  org.dom4j.Document document=reader.read(new java.io.StringReader(s));
  if (encoding != null && !(""String_Node_Str"".equals(encoding))) {
    document.setXMLEncoding(encoding);
  }
  theDoc.setDocument(document);
  return theDoc;
}",0.994186046511628
126482,"@Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
}","public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
}",0.9760765550239234
126483,"/** 
 * Method ""createConnection"" returns the connection with   {@link ReturnCode#getObject()} if {@link ReturnCode#isOk()}is true. This is the behaviour when everything goes ok. <p> When something goes wrong,   {@link ReturnCode#isOk()} is false and {@link ReturnCode#getMessage()} gives the errormessage. <p> The created connection must be closed by the caller. (use  {@link ConnectionUtils#closeConnection(Connection)})
 * @param connection the connection (DatabaseConnection MDMConnection or others)
 * @return a ReturnCode (never null)
 */
public static TypedReturnCode<java.sql.Connection> createConnection(Connection connection){
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>(false);
  String url=getURL(connection);
  if (url == null) {
    rc.setMessage(Messages.getString(""String_Node_Str""));
    rc.setOk(false);
    return rc;
  }
  java.sql.Connection sqlConnection=null;
  if (connection instanceof DatabaseConnection) {
    sqlConnection=MetadataConnectionUtils.createConnection((DatabaseConnection)connection).getObject();
  }
  rc.setObject(sqlConnection);
  rc.setOk(sqlConnection != null);
  return rc;
}","/** 
 * Method ""createConnection"" returns the connection with   {@link ReturnCode#getObject()} if {@link ReturnCode#isOk()}is true. This is the behaviour when everything goes ok. <p> When something goes wrong,   {@link ReturnCode#isOk()} is false and {@link ReturnCode#getMessage()} gives the errormessage. <p> The created connection must be closed by the caller. (use  {@link ConnectionUtils#closeConnection(Connection)})
 * @param connection the connection (DatabaseConnection MDMConnection or others)
 * @return a ReturnCode (never null)
 */
public static TypedReturnCode<java.sql.Connection> createConnection(Connection connection){
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>(false);
  String url=getURL(connection);
  if (url == null || !(connection instanceof DatabaseConnection)) {
    rc.setMessage(Messages.getString(""String_Node_Str""));
    rc.setOk(false);
    return rc;
  }
  return MetadataConnectionUtils.createConnection((DatabaseConnection)connection);
}",0.8152924919391985
126484,"public static Byte parseTo_Byte(String s){
  if (s == null) {
    return null;
  }
  return Byte.decode(s).byteValue();
}","public static Byte parseTo_Byte(String s,boolean isDecode){
  if (s == null) {
    return null;
  }
  if (isDecode) {
    return Byte.decode(s).byteValue();
  }
 else {
    return Byte.parseByte(s);
  }
}",0.7384615384615385
126485,"public static routines.system.Document parseTo_Document(String s,boolean ignoreDTD,String encoding) throws org.dom4j.DocumentException {
  if (s == null) {
    return null;
  }
  routines.system.Document theDoc=new routines.system.Document();
  org.dom4j.io.SAXReader reader=new org.dom4j.io.SAXReader();
  if (ignoreDTD) {
    reader.setEntityResolver(new EntityResolver(){
      public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
      }
    }
);
  }
  org.dom4j.Document document=reader.read(new java.io.StringReader(s));
  if (encoding != null && !(""String_Node_Str"".equals(encoding))) {
    document.setXMLEncoding(encoding);
  }
  theDoc.setDocument(document);
  return theDoc;
}","public static routines.system.Document parseTo_Document(String s,boolean ignoreDTD,String encoding) throws org.dom4j.DocumentException {
  if (s == null) {
    return null;
  }
  routines.system.Document theDoc=new routines.system.Document();
  org.dom4j.io.SAXReader reader=new org.dom4j.io.SAXReader();
  if (ignoreDTD) {
    reader.setEntityResolver(new EntityResolver(){
      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
      }
    }
);
  }
  org.dom4j.Document document=reader.read(new java.io.StringReader(s));
  if (encoding != null && !(""String_Node_Str"".equals(encoding))) {
    document.setXMLEncoding(encoding);
  }
  theDoc.setDocument(document);
  return theDoc;
}",0.994186046511628
126486,"public static int parseTo_int(String s){
  return Integer.parseInt(s);
}","public static int parseTo_int(String s,boolean isDecode){
  if (isDecode) {
    return Integer.decode(s).intValue();
  }
 else {
    return Integer.parseInt(s);
  }
}",0.6050420168067226
126487,"public static Integer parseTo_Integer(String s){
  if (s == null) {
    return null;
  }
  return parseTo_int(s);
}","public static Integer parseTo_Integer(String s,boolean isDecode){
  if (s == null) {
    return null;
  }
  return parseTo_int(s,isDecode);
}",0.8984375
126488,"public static Short parseTo_Short(String s){
  if (s == null) {
    return null;
  }
  return parseTo_short(s);
}","public static Short parseTo_Short(String s,boolean isDecode){
  if (s == null) {
    return null;
  }
  return parseTo_short(s,isDecode);
}",0.8968253968253969
126489,"public static long parseTo_long(String s){
  return Long.parseLong(s);
}","public static long parseTo_long(String s,boolean isDecode){
  if (isDecode) {
    return Long.decode(s).longValue();
  }
 else {
    return Long.parseLong(s);
  }
}",0.6101694915254238
126490,"public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
}","@Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  return new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(""String_Node_Str"".getBytes()));
}",0.9760765550239234
126491,"public static Long parseTo_Long(String s){
  if (s == null) {
    return null;
  }
  return parseTo_long(s);
}","public static Long parseTo_Long(String s,boolean isDecode){
  if (s == null) {
    return null;
  }
  return parseTo_long(s,isDecode);
}",0.8943089430894309
126492,"public static short parseTo_short(String s){
  return Short.parseShort(s);
}","public static short parseTo_short(String s,boolean isDecode){
  if (isDecode) {
    return Short.decode(s).shortValue();
  }
 else {
    return Short.parseShort(s);
  }
}",0.6178861788617886
126493,"public static byte parseTo_byte(String s){
  return parseTo_Byte(s);
}","public static byte parseTo_byte(String s,boolean isDecode){
  return parseTo_Byte(s,isDecode);
}",0.8433734939759037
126494,"private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      return;
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
}","private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      continue;
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9971250598945856
126495,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                return;
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9993166287015944
126496,"@Override public FolderItem getFolderItem(Project project,ERepositoryObjectType itemType,IPath path){
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem folderItem=folderHelper.getFolder(ERepositoryObjectType.getFolderName(itemType) + IPath.SEPARATOR + path);
  if (folderItem == null && itemType != null) {
    folderItem=folderHelper.createFolder(ERepositoryObjectType.getFolderName(itemType) + IPath.SEPARATOR + path);
  }
  return folderItem;
}","@Override public FolderItem getFolderItem(Project project,ERepositoryObjectType itemType,IPath path){
  if (project == null) {
    return null;
  }
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem folderItem=folderHelper.getFolder(ERepositoryObjectType.getFolderName(itemType) + IPath.SEPARATOR + path);
  if (folderItem == null && itemType != null) {
    folderItem=folderHelper.createFolder(ERepositoryObjectType.getFolderName(itemType) + IPath.SEPARATOR + path);
  }
  return folderItem;
}",0.9542743538767396
126497,"@SuppressWarnings(""String_Node_Str"") public static boolean isUseData(final ElementParameterType param,final String name){
  if (param == null || name == null) {
    return false;
  }
  if (param.getField().equals(EParameterFieldType.TABLE.getName())) {
    EList elementValue=param.getElementValue();
    if (elementValue != null) {
      for (      ElementValueType valueType : (List<ElementValueType>)elementValue) {
        if (valueType.getValue() != null) {
          if (ParameterValueUtil.valueContains((String)valueType.getValue(),name)) {
            return true;
          }
        }
      }
    }
  }
 else {
    String value=param.getValue();
    if (value != null && ParameterValueUtil.valueContains(value,name)) {
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") public static boolean isUseData(final ElementParameterType param,final String name){
  if (param == null || name == null) {
    return false;
  }
  if (param.getField().equals(EParameterFieldType.TABLE.getName())) {
    EList elementValue=param.getElementValue();
    if (elementValue != null) {
      for (      ElementValueType valueType : (List<ElementValueType>)elementValue) {
        if (valueType.getValue() != null) {
          if (ParameterValueUtil.valueContains(valueType.getValue(),name)) {
            return true;
          }
        }
      }
    }
  }
 else {
    String value=param.getValue();
    if (value != null && ParameterValueUtil.valueContains(value,name)) {
      return true;
    }
  }
  return false;
}",0.9948119325551232
126498,"public static String splitQueryData(String oldName,String newName,String value){
  String regex=""String_Node_Str"";
  String[] split=value.split(regex);
  Map<String,String> replacedStrings=new HashMap<String,String>();
  String returnValue=""String_Node_Str"";
  for (  String s : split) {
    if (s.contains(oldName)) {
      replacedStrings.put(s,s.replaceAll(""String_Node_Str"" + oldName + ""String_Node_Str"",newName));
    }
  }
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(value);
  if (matcher.find()) {
    int x=matcher.start();
    int y=matcher.end();
    int curPos=0;
    int valueLength=value.length();
    String oldFill=null;
    String newFill=null;
    while (true) {
      if (curPos == valueLength) {
        break;
      }
      if (curPos < x) {
        oldFill=value.substring(curPos,x);
        if ((newFill=replacedStrings.get(oldFill)) != null) {
          returnValue+=newFill;
        }
 else {
          returnValue+=oldFill;
        }
        curPos=x;
        continue;
      }
      returnValue+=matcher.group();
      curPos=y;
      if (!matcher.find()) {
        x=valueLength;
      }
 else {
        x=matcher.start();
        y=matcher.end();
      }
    }
  }
  return returnValue;
}","public static String splitQueryData(String oldName,String newName,String value){
  final int length=value.length();
  LinkedHashMap<Integer,Integer> quotaStrings=new LinkedHashMap<Integer,Integer>();
  List<Point> functionNameAreas=new ArrayList<Point>();
  int start=-1;
  int end=-2;
  char ch;
  for (int i=0; i < length; i++) {
    ch=value.charAt(i);
    if (ch == '\""') {
      if (isEscapeSequence(value,i)) {
        continue;
      }
      if (0 <= start && end < start) {
        end=i;
        quotaStrings.put(start,end);
      }
 else {
        start=i;
      }
    }
  }
{
  }
  StringBuffer strBuffer=new StringBuffer();
  String subString=null;
  int vStart=0;
  int vEnd=0;
  int methodMaxIndex=0;
  int calcMaxIndex=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart == start) {
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
 else {
      subString=value.substring(vStart,vEnd);
      calcMaxIndex=calcMethodArea(subString,value,vStart,functionNameAreas,methodMaxIndex);
      if (methodMaxIndex < calcMaxIndex) {
        methodMaxIndex=calcMaxIndex;
      }
      String replacedString=doVaribleReplace(oldName,newName,value,functionNameAreas,vStart,vEnd);
      strBuffer.append(replacedString);
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
    strBuffer.append(subString);
    vStart=end;
  }
  if (vStart < length) {
    vEnd=length;
    String replacedString=doVaribleReplace(oldName,newName,value,functionNameAreas,vStart,vEnd);
    strBuffer.append(replacedString);
  }
  return strBuffer.toString();
}",0.0846055979643766
126499,"private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        if (ERepositoryObjectType.PROCESS.equals(type) && type.hasChildrenType()) {
          RepositoryNode childRootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type.getChildrenTypesArray()[0],true);
          if (childRootNode != null && childRootNode.hasChildren() && !rootNode.getChildren().contains(childRootNode)) {
            rootNode.getChildren().add(childRootNode);
          }
        }
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}","private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        if (type != null && type.hasChildrenType()) {
          for (          ERepositoryObjectType childType : type.getChildrenTypesArray()) {
            RepositoryNode childRootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(childType,true);
            if (childRootNode != null && childRootNode.hasChildren() && !rootNode.getChildren().contains(childRootNode)) {
              rootNode.getChildren().add(childRootNode);
            }
          }
        }
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}",0.6500260010400416
126500,"public static String getNormalizeParameterValue(INode node,IElementParameter ep){
  String value=""String_Node_Str"";
  value=ElementParameterParser.getValue(node,""String_Node_Str"" + ep.getName() + ""String_Node_Str"");
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA);
  if (escapeQuotation.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.OPENED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.MEMO_JAVA);
  if (needQuoteList.contains(ep.getFieldType())) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (EParameterFieldType.TABLE.equals(ep.getFieldType())) {
    value=ElementParameterParser.getObjectValue(node,""String_Node_Str"" + ep.getName() + ""String_Node_Str"").toString();
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  return value;
}","private static String getNormalizeParameterValue(String value,IElementParameter ep){
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA);
  if (escapeQuotation.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.OPENED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.MEMO_JAVA);
  List<String> needQuoteListByName=Arrays.asList(""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType()) || needQuoteListByName.contains(ep.getName())) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value == null || ""String_Node_Str"".equals(value.trim())) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value)) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
  return value;
}",0.6337854500616523
126501,"private void helpPressed(){
  Program.launch(Messages.getString(""String_Node_Str""));
}","private void helpPressed(){
  openURL(Messages.getString(""String_Node_Str""));
}",0.896969696969697
126502,"@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator<ModuleToInstall>(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  createJarNameColumn();
  createModuleNameColumn();
  createContextColumn();
  createRequiredColumn();
  createLicenseColumn();
  urlcolumn=createMoreInformationColumn();
  installcolumn=createActionColumn();
  tableViewerCreator.init(inputList);
  addInstallButtons();
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Program.launch(Messages.getString(""String_Node_Str""));
    }
  }
);
  setupColumnSortListener();
  createFooter(composite);
  setTitle(title);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  Composite composite=new Composite(parent,SWT.BORDER);
  GridLayout layout=new GridLayout();
  composite.setLayout(layout);
  composite.setLayoutData(layoutData);
  tableViewerCreator=new TableViewerCreator<ModuleToInstall>(composite);
  tableViewerCreator.setCheckboxInFirstColumn(false);
  tableViewerCreator.setColumnsResizableByDefault(true);
  tableViewerCreator.setLinesVisible(true);
  tableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  tableViewerCreator.createTable();
  createJarNameColumn();
  createModuleNameColumn();
  createContextColumn();
  createRequiredColumn();
  createLicenseColumn();
  urlcolumn=createMoreInformationColumn();
  installcolumn=createActionColumn();
  tableViewerCreator.init(inputList);
  addInstallButtons();
  layoutData=new GridData(GridData.FILL_BOTH);
  tableViewerCreator.getTable().setLayoutData(layoutData);
  tableViewerCreator.getTable().pack();
  Composite footComposite=new Composite(composite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  footComposite.setLayoutData(layoutData);
  layout=new GridLayout();
  layout.numColumns=2;
  footComposite.setLayout(layout);
  final Link moreInfor=new Link(footComposite,SWT.NONE);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.widthHint=200;
  moreInfor.setText(Messages.getString(""String_Node_Str""));
  moreInfor.setLayoutData(layoutData);
  moreInfor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openURL(Messages.getString(""String_Node_Str""));
    }
  }
);
  setupColumnSortListener();
  createFooter(composite);
  setTitle(title);
  return composite;
}",0.994138989673458
126503,"/** 
 * DOC YeXiaowei Comment method ""getJavaLibPath"".
 * @return
 */
public String getJavaLibPath(){
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject physProject;
  String tmpFolder=System.getProperty(""String_Node_Str"");
  try {
    physProject=ResourceModelUtils.getProject(project);
    tmpFolder=physProject.getFolder(""String_Node_Str"").getLocation().toPortableString();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  tmpFolder=tmpFolder + ""String_Node_Str"";
  File file=new File(tmpFolder);
  if (!file.exists()) {
    file.mkdirs();
  }
  return tmpFolder + ""String_Node_Str"";
}","/** 
 * DOC YeXiaowei Comment method ""getJavaLibPath"".
 * @return
 */
public String getJavaLibPath(){
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject physProject;
  String tmpFolder=System.getProperty(""String_Node_Str"");
  try {
    physProject=ResourceModelUtils.getProject(project);
    if (physProject != null) {
      tmpFolder=physProject.getFolder(""String_Node_Str"").getLocation().toPortableString();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  tmpFolder=tmpFolder + ""String_Node_Str"";
  File file=new File(tmpFolder);
  if (!file.exists()) {
    file.mkdirs();
  }
  return tmpFolder + ""String_Node_Str"";
}",0.9564553093964858
126504,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_6_1_X.getVersionValue().equals(dbVersion)|| EDatabaseVersion4Drivers.VERTICA_7.getVersionValue().equals(dbVersion))) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (!checkFileCRCCode(new File(getJavaLibPath() + path.lastSegment()),new File(jar))) {
            String librariesPath=getLibrariesPath(ECodeLanguage.JAVA);
            File existJar=new File(librariesPath + File.separator + path.lastSegment());
            if (existJar.exists()) {
              existJar.delete();
              FilesUtils.copyFile(new File(jar),existJar);
            }
          }
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if (librairesManagerService != null) {
    if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
      List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
      if (driverNames != null) {
        librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : driverNames) {
          jarPathList.add(getJavaLibPath() + jar);
        }
        driverClassName=getDriverClassByDbType(dbType);
        if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_6_1_X.getVersionValue().equals(dbVersion)|| EDatabaseVersion4Drivers.VERTICA_7.getVersionValue().equals(dbVersion))) {
          driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
        }
      }
    }
 else {
      Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
      if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          List<String> jarsToRetreive=new ArrayList<String>();
          for (          String jar : jars) {
            Path path=new Path(jar);
            if (!checkFileCRCCode(new File(getJavaLibPath() + path.lastSegment()),new File(jar))) {
              String librariesPath=getLibrariesPath(ECodeLanguage.JAVA);
              File existJar=new File(librariesPath + File.separator + path.lastSegment());
              if (existJar.exists()) {
                existJar.delete();
                FilesUtils.copyFile(new File(jar),existJar);
              }
            }
            if (jarsAvailable.contains(path.lastSegment())) {
              if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
                jarsToRetreive.add(path.lastSegment());
              }
              jarPathList.add(getJavaLibPath() + path.lastSegment());
            }
 else {
              jarsToRetreive.add(path.lastSegment());
              jarPathList.add(jar);
            }
          }
          librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
        }
 else {
          Path path=new Path(driverJarPathArg);
          File driverFile=new File(driverJarPathArg);
          boolean isExist=driverFile.exists();
          if (!isExist) {
            jarPathList.add(""String_Node_Str"");
          }
 else {
            jarPathList.add(driverJarPathArg);
          }
        }
      }
 else {
        if (driverJarPathArg.contains(""String_Node_Str"")) {
          String jars[]=driverJarPathArg.split(""String_Node_Str"");
          librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
          for (          String jar : jars) {
            jarPathList.add(getJavaLibPath() + jar);
          }
        }
 else {
          if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
            librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
          }
          jarPathList.add(getJavaLibPath() + driverJarPathArg);
        }
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}",0.9891482267353744
126505,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IRepositoryViewObject folderObj=node.getObject();
ERepositoryStatus statusFolder=folderObj.getRepositoryStatus();
boolean isDeletedFolder=statusFolder == ERepositoryStatus.DELETED;
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
RepositoryNode parent=node.getParent().getParent();
if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE == parent.getObjectType()) {
enabled=false;
visible=false;
break;
}
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IPath path=RepositoryNodeUtilities.getPath(node);
ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
boolean isDeletedFolder=folderItem.getState().isDeleted();
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
RepositoryNode parent=node.getParent().getParent();
if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE == parent.getObjectType()) {
enabled=false;
visible=false;
break;
}
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.946443030653557
126506,"private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}","private List<RepositoryNode> getRepositoryNodesByTypes(IProjectRepositoryNode projectRepoNode){
  List<RepositoryNode> rootNodes=new ArrayList<RepositoryNode>();
  List<ERepositoryObjectType> prcessTypes=getTypes();
  if (prcessTypes != null) {
    for (    ERepositoryObjectType type : prcessTypes) {
      RepositoryNode rootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type,true);
      if (rootNode != null) {
        if (ERepositoryObjectType.PROCESS.equals(type) && type.hasChildrenType()) {
          RepositoryNode childRootNode=((ProjectRepositoryNode)projectRepoNode).getRootRepositoryNode(type.getChildrenTypesArray()[0],true);
          if (childRootNode != null && childRootNode.hasChildren() && !rootNode.getChildren().contains(childRootNode)) {
            rootNode.getChildren().add(childRootNode);
          }
        }
        rootNodes.add(rootNode);
      }
    }
  }
  return rootNodes;
}",0.6786953504510757
126507,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
IPath path=RepositoryNodeUtilities.getPath(node);
ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
boolean isDeletedFolder=folderItem.getState().isDeleted();
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
RepositoryNode parent=node.getParent().getParent();
if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE == parent.getObjectType()) {
enabled=false;
visible=false;
break;
}
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  visible=!selection.isEmpty();
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  boolean enabled=true;
  this.setText(null);
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    visible=false;
  }
  if (factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    visible=false;
  }
  for (  Object o : (selection).toArray()) {
    if (visible) {
      RepositoryNode node=(RepositoryNode)o;
      if (!ProjectManager.getInstance().isInCurrentMainProject(node)) {
        visible=false;
        break;
      }
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
        visible=false;
case SYSTEM_FOLDER:
      visible=false;
    break;
case SIMPLE_FOLDER:
  Object obj=node.getProperties(EProperties.LABEL);
String label=null;
boolean isDeletedFolder=node.getObject().isDeleted();
if (obj instanceof String) {
label=(String)obj;
}
if (node.getContentType() == ERepositoryObjectType.JOB_DOC || node.getContentType() == ERepositoryObjectType.JOBLET_DOC || RepositoryConstants.USER_DEFINED.equals(label)) {
visible=false;
}
 else {
if (isDeletedFolder) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
}
if (node.hasChildren()) {
visible=true;
enabled=true;
}
}
String selectName=selection.getFirstElement().toString();
if (node.getContentType() == ERepositoryObjectType.SQLPATTERNS && selectName.equals(label) && !selectName.contains(""String_Node_Str"")) {
visible=false;
}
break;
case REPOSITORY_ELEMENT:
Object contentType=node.getProperties(EProperties.CONTENT_TYPE);
if (contentType == ERepositoryObjectType.JOB_DOC || contentType == ERepositoryObjectType.JOBLET_DOC) {
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_CDC) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESOPERATION) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.SERVICESPORT) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_CON_TABLE) {
enabled=false;
visible=false;
break;
}
if (contentType == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
RepositoryNode parent=node.getParent().getParent();
if (parent != null && ERepositoryObjectType.METADATA_CON_TABLE == parent.getObjectType()) {
enabled=false;
visible=false;
break;
}
}
IRepositoryViewObject repObj=node.getObject();
ERepositoryStatus status=repObj.getRepositoryStatus();
boolean isEditable=status.isPotentiallyEditable() || status.isEditable();
boolean isDeleted=status == ERepositoryStatus.DELETED;
ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
if (nodeType.isSubItem() && repObj instanceof ISubRepositoryObject) {
ISubRepositoryObject subRepositoryObject=(ISubRepositoryObject)repObj;
isDeleted=SubItemHelper.isDeleted(subRepositoryObject.getAbstractMetadataObject());
}
if (isDeleted) {
if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
visible=false;
break;
}
if (ERepositoryObjectType.METADATA_CON_QUERY.equals(nodeType)) {
visible=false;
break;
}
if (getText() == null || DELETE_FOREVER_TITLE.equals(getText())) {
this.setText(DELETE_FOREVER_TITLE);
this.setToolTipText(DELETE_FOREVER_TOOLTIP);
}
 else {
visible=false;
}
}
 else {
ERepositoryObjectType repositoryObjectType=repObj.getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
visible=false;
}
 else {
if (getText() == null || DELETE_LOGICAL_TITLE.equals(getText())) {
this.setText(DELETE_LOGICAL_TITLE);
this.setToolTipText(DELETE_LOGICAL_TOOLTIP);
if (!isEditable) {
visible=true;
enabled=false;
}
}
 else {
visible=false;
}
}
}
break;
default :
break;
}
}
}
setEnabled(enabled);
}",0.960554120685607
126508,"public static String getNormalizeParameterValue(INode node,IElementParameter ep){
  String value=""String_Node_Str"";
  value=ElementParameterParser.getValue(node,""String_Node_Str"" + ep.getName() + ""String_Node_Str"");
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA);
  if (escapeQuotation.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.OPENED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.MEMO_JAVA);
  if (needQuoteList.contains(ep.getFieldType())) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (EParameterFieldType.TABLE.equals(ep.getFieldType())) {
    value=ElementParameterParser.getObjectValue(node,""String_Node_Str"" + ep.getName() + ""String_Node_Str"").toString();
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    value=value.replace(""String_Node_Str"",""String_Node_Str"");
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  return value;
}","private static String getNormalizeParameterValue(String value,IElementParameter ep){
  List<EParameterFieldType> escapeQuotation=Arrays.asList(EParameterFieldType.MEMO_JAVA);
  if (escapeQuotation.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.OPENED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST,EParameterFieldType.MEMO_JAVA);
  List<String> needQuoteListByName=Arrays.asList(""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType()) || needQuoteListByName.contains(ep.getName())) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  if (value == null || ""String_Node_Str"".equals(value.trim())) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value)) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(value)) {
    value=""String_Node_Str"";
  }
  return value;
}",0.6337854500616523
126509,"@Override public IRepositoryViewObject getLastVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,false,false,false,true);
  if (serializableAllVersion.isEmpty()) {
    serializableAllVersion=getSerializable(project,id,true,false);
  }
  int size=serializableAllVersion.size();
  if (size > 1) {
    String message=getItemsMessages(serializableAllVersion,size);
    throw new PersistenceException(Messages.getString(""String_Node_Str"",message));
  }
 else   if (size == 1) {
    return serializableAllVersion.get(0);
  }
 else {
    return null;
  }
}","@Override public IRepositoryViewObject getLastVersion(Project project,String id,String relativeFolder,ERepositoryObjectType type) throws PersistenceException {
  List<IRepositoryViewObject> serializableAllVersion=null;
  Object fullFolder=getFullFolder(project,type,relativeFolder);
  serializableAllVersion=getSerializableFromFolder(project,fullFolder,id,type,false,false,true,true);
  if (serializableAllVersion.isEmpty()) {
    serializableAllVersion=getSerializable(project,id,false,false);
  }
  int size=serializableAllVersion.size();
  if (size > 1) {
    String message=getItemsMessages(serializableAllVersion,size);
    throw new PersistenceException(Messages.getString(""String_Node_Str"",message));
  }
 else   if (size == 1) {
    return serializableAllVersion.get(0);
  }
 else {
    return null;
  }
}",0.991389913899139
126510,"/** 
 * The repository view selection.
 * @return the selection
 */
public ISelection getSelection(){
  if (specialSelectionProvider != null) {
    return specialSelectionProvider.getSelection();
  }
  IWorkbenchPart activePart=getActivePage().getActivePart();
  if (activePart instanceof PropertySheet) {
    return getActivePage().getSelection();
  }
  if (activePart instanceof IJobSettingsView) {
    ISelection selection=((IJobSettingsView)activePart).getSelection();
    if (selection == null) {
      selection=getRepositorySelection();
    }
    return selection;
  }
  if (activePart instanceof IRepositoryView) {
    workbenchPart=activePart;
    ISelection selection=((IRepositoryView)activePart).getViewer().getSelection();
    if (!selection.isEmpty()) {
      return ((IRepositoryView)activePart).getViewer().getSelection();
    }
 else {
      selection=new StructuredSelection(node);
      return selection;
    }
  }
  if (workbenchPart != null) {
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
  }
  if (getActivePage().getActiveEditor() == null) {
    workbenchPart=activePart;
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
    return null;
  }
  IWorkbenchPartSite site=getActivePage().getActiveEditor().getSite();
  ISelectionProvider selectionProvider=site.getSelectionProvider();
  return selectionProvider == null ? null : selectionProvider.getSelection();
}","/** 
 * The repository view selection.
 * @return the selection
 */
public ISelection getSelection(){
  if (specialSelectionProvider != null) {
    return specialSelectionProvider.getSelection();
  }
  IWorkbenchPart activePart=getActivePage().getActivePart();
  if (activePart instanceof PropertySheet) {
    return getActivePage().getSelection();
  }
  if (activePart instanceof IJobSettingsView) {
    ISelection selection=((IJobSettingsView)activePart).getSelection();
    if (selection == null) {
      selection=getRepositorySelection();
    }
    return selection;
  }
  if (activePart instanceof IRepositoryView) {
    workbenchPart=activePart;
    ISelection selection=((IRepositoryView)activePart).getViewer().getSelection();
    if (!selection.isEmpty()) {
      return ((IRepositoryView)activePart).getViewer().getSelection();
    }
 else {
      if (node != null) {
        selection=new StructuredSelection(node);
      }
      return selection;
    }
  }
  if (workbenchPart != null) {
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
  }
  if (getActivePage().getActiveEditor() == null) {
    workbenchPart=activePart;
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
    return null;
  }
  IWorkbenchPartSite site=getActivePage().getActiveEditor().getSite();
  ISelectionProvider selectionProvider=site.getSelectionProvider();
  return selectionProvider == null ? null : selectionProvider.getSelection();
}",0.9657072872014696
126511,"/** 
 * The repository view selection.
 * @return the selection
 */
public ISelection getSelection(){
  if (specialSelectionProvider != null) {
    return specialSelectionProvider.getSelection();
  }
  IWorkbenchPart activePart=getActivePage().getActivePart();
  if (activePart instanceof PropertySheet) {
    return getActivePage().getSelection();
  }
  if (activePart instanceof IJobSettingsView) {
    ISelection selection=((IJobSettingsView)activePart).getSelection();
    if (selection == null) {
      selection=getRepositorySelection();
    }
    return selection;
  }
  if (activePart instanceof IRepositoryView) {
    workbenchPart=activePart;
    ISelection selection=((IRepositoryView)activePart).getViewer().getSelection();
    if (!selection.isEmpty()) {
      return ((IRepositoryView)activePart).getViewer().getSelection();
    }
 else {
      selection=new StructuredSelection(node);
      return selection;
    }
  }
  if (workbenchPart != null) {
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
  }
  if (getActivePage().getActiveEditor() == null) {
    workbenchPart=activePart;
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
    return null;
  }
  IWorkbenchPartSite site=getActivePage().getActiveEditor().getSite();
  ISelectionProvider selectionProvider=site.getSelectionProvider();
  return selectionProvider == null ? null : selectionProvider.getSelection();
}","/** 
 * The repository view selection.
 * @return the selection
 */
public ISelection getSelection(){
  if (specialSelectionProvider != null) {
    return specialSelectionProvider.getSelection();
  }
  IWorkbenchPart activePart=getActivePage().getActivePart();
  if (activePart instanceof PropertySheet) {
    return getActivePage().getSelection();
  }
  if (activePart instanceof IJobSettingsView) {
    ISelection selection=((IJobSettingsView)activePart).getSelection();
    if (selection == null) {
      selection=getRepositorySelection();
    }
    return selection;
  }
  if (activePart instanceof IRepositoryView) {
    workbenchPart=activePart;
    ISelection selection=((IRepositoryView)activePart).getViewer().getSelection();
    if (!selection.isEmpty()) {
      return ((IRepositoryView)activePart).getViewer().getSelection();
    }
 else {
      if (node != null) {
        selection=new StructuredSelection(node);
      }
      return selection;
    }
  }
  if (workbenchPart != null) {
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
  }
  if (getActivePage().getActiveEditor() == null) {
    workbenchPart=activePart;
    if (workbenchPart instanceof IRepositoryView) {
      IRepositoryView view=(IRepositoryView)workbenchPart;
      return view.getViewer().getSelection();
    }
    return null;
  }
  IWorkbenchPartSite site=getActivePage().getActiveEditor().getSite();
  ISelectionProvider selectionProvider=site.getSelectionProvider();
  return selectionProvider == null ? null : selectionProvider.getSelection();
}",0.9657072872014696
126512,"public IDesignerXMLMapperService getHMapperService(){
  return (IDesignerHMapperService)GlobalServiceRegister.getDefault().getService(IDesignerHMapperService.class);
}","public IDesignerHMapperService getHMapperService(){
  return (IDesignerHMapperService)GlobalServiceRegister.getDefault().getService(IDesignerHMapperService.class);
}",0.9879518072289156
126513,"protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(e.getMessage());
      logError(e);
    }
  }
}","protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          Resource resource=ProjectManager.getInstance().getCurrentProject().getEmfProject().eResource();
          resource.getContents().add(author);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(e.getMessage());
      logError(e);
    }
  }
}",0.9848383713168684
126514,"public synchronized void addRepositoryChangedListener(IRepositoryChangedListener listener){
  if (listeners.contains(listener)) {
    return;
  }
  listeners.add(listener);
}","public synchronized void addRepositoryChangedListener(IRepositoryChangedListener listener){
  if (listener == null || listeners.contains(listener)) {
    return;
  }
  listeners.add(listener);
}",0.9456521739130436
126515,"/** 
 * qzhang Comment method ""registerRepositoryChangedListenerAsFirst"".
 * @param listener
 */
public void registerRepositoryChangedListenerAsFirst(IRepositoryChangedListener listener){
  if (listeners.contains(listener)) {
    return;
  }
  listeners.add(0,listener);
}","/** 
 * qzhang Comment method ""registerRepositoryChangedListenerAsFirst"".
 * @param listener
 */
public void registerRepositoryChangedListenerAsFirst(IRepositoryChangedListener listener){
  if (listener == null || listeners.contains(listener)) {
    return;
  }
  listeners.add(0,listener);
}",0.9645390070921984
126516,"public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(page.getPerspective().getId())) {
            part=((WorkbenchPage)page).getViewFactory().createView(IRepositoryView.VIEW_ID).getView(true);
          }
 else           if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}","public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}",0.8740740740740741
126517,"public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          String perId=page.getPerspective().getId();
          if ((!""String_Node_Str"".equals(perId) || null != perId) && perId.equalsIgnoreCase(PERSPECTIVE_DI_ID)) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}","public static IRepositoryView getRepositoryView(){
  if (CommonsPlugin.isHeadless()) {
    return null;
  }
  IViewPart part=null;
  IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (activeWorkbenchWindow != null) {
    IWorkbenchPage page=activeWorkbenchWindow.getActivePage();
    if (page != null) {
      part=findRepositoryView();
      if (part == null) {
        try {
          if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(page.getPerspective().getId())) {
            part=((WorkbenchPage)page).getViewFactory().createView(IRepositoryView.VIEW_ID).getView(true);
          }
 else           if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(page.getPerspective().getId())) {
            part=page.showView(IRepositoryView.VIEW_ID);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      return (IRepositoryView)part;
    }
  }
  return (IRepositoryView)part;
}",0.7739463601532567
126518,"/** 
 * DOC amaumont Comment method ""executePreviewHandlerEvent"".
 * @param event
 */
private void executePreviewHandlerEvent(final PreviewHandlerEvent<R> event){
  final PreviewHandlerEvent.TYPE eventType=event.getType();
  final AsynchronousPreviewHandler<R> source=event.getSource();
  if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_STARTED) {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor){
        infoLabel.getDisplay().asyncExec(new Runnable(){
          public void run(){
            monitorWrap=SubMonitor.convert(monitor);
            monitorWrap.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
            breakInfiniteLoop=false;
            while (true) {
              if (monitorWrap.isCanceled() || breakInfiniteLoop) {
                break;
              }
            }
            if (monitorWrap.isCanceled()) {
              source.stopPreviewProcess();
            }
 else {
              monitorWrap.done();
            }
          }
        }
);
      }
    }
;
    infoLabel.getDisplay().syncExec(new Runnable(){
      public void run(){
        try {
          new ProgressMonitorDialog(infoLabel.getShell()).run(true,true,op);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
 else   if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_INTERRUPTED) {
    breakInfiniteLoop=true;
    infoLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else   if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_ENDED) {
    breakInfiniteLoop=true;
    infoLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    infoLabel.getParent().layout();
    R result=source.getResult();
    previewEnded(result);
  }
 else   if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_IN_ERROR) {
    breakInfiniteLoop=true;
    final CoreException e=event.getException();
    previewInError(e);
  }
}","/** 
 * DOC amaumont Comment method ""executePreviewHandlerEvent"".
 * @param event
 */
private void executePreviewHandlerEvent(final PreviewHandlerEvent<R> event){
  final PreviewHandlerEvent.TYPE eventType=event.getType();
  final AsynchronousPreviewHandler<R> source=event.getSource();
  if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_STARTED) {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor){
        infoLabel.getDisplay().asyncExec(new Runnable(){
          public void run(){
            monitorWrap=new EventLoopProgressMonitor(monitor);
            monitorWrap.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
            breakInfiniteLoop=false;
            while (true) {
              if (monitorWrap.isCanceled() || breakInfiniteLoop) {
                break;
              }
            }
            if (monitorWrap.isCanceled()) {
              source.stopPreviewProcess();
            }
 else {
              monitorWrap.done();
            }
          }
        }
);
      }
    }
;
    infoLabel.getDisplay().syncExec(new Runnable(){
      public void run(){
        try {
          new ProgressMonitorDialog(infoLabel.getShell()).run(true,true,op);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
          ExceptionHandler.process(e);
        }
      }
    }
);
  }
 else   if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_INTERRUPTED) {
    breakInfiniteLoop=true;
    infoLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
  }
 else   if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_ENDED) {
    breakInfiniteLoop=true;
    infoLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    infoLabel.getParent().layout();
    R result=source.getResult();
    previewEnded(result);
  }
 else   if (eventType == PreviewHandlerEvent.TYPE.PREVIEW_IN_ERROR) {
    breakInfiniteLoop=true;
    final CoreException e=event.getException();
    previewInError(e);
  }
}",0.9923882017126546
126519,"@Override public void run(IProgressMonitor monitor){
  monitorWrap=SubMonitor.convert(monitor);
  List<ConceptTarget> addedObjects=new ArrayList<ConceptTarget>(event.addedObjects);
  MDMLinker.this.createFieldsLinkWithProgressMonitor(monitorWrap,addedObjects.size(),addedObjects,event.index,addedObjects.size());
  monitorWrap.done();
}","@Override public void run(IProgressMonitor monitor){
  monitorWrap=new EventLoopProgressMonitor(monitor);
  List<ConceptTarget> addedObjects=new ArrayList<ConceptTarget>(event.addedObjects);
  MDMLinker.this.createFieldsLinkWithProgressMonitor(monitorWrap,addedObjects.size(),addedObjects,event.index,addedObjects.size());
  monitorWrap.done();
}",0.9325513196480938
126520,"/** 
 * DOC amaumont Comment method ""createLinks"".
 */
public void createLinks(){
  removeAllLinks();
  getBackgroundRefresher().refreshBackground();
  ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
    private IProgressMonitor monitorWrap;
    @Override public void run(    IProgressMonitor monitor){
      TableItem[] loopTableItems=loopTableEditorView.getTable().getItems();
      TableItem[] fieldsTableItems=fieldsTableEditorView.getTable().getItems();
      monitorWrap=SubMonitor.convert(monitor);
      String taskName=Messages.getString(""String_Node_Str"");
      int totalWork=loopTableItems.length + fieldsTableItems.length;
      monitorWrap.beginTask(taskName,totalWork);
      List<Concept> conceptList=loopTableEditorView.getModel().getBeansList();
      for (int i=0; i < loopTableItems.length; i++) {
        if (monitorWrap.isCanceled()) {
          return;
        }
        TableItem tableItem=loopTableItems[i];
        Concept concept=conceptList.get(i);
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(concept.getConnection(),true);
        String originalValue=concept.getLoopExpression();
        if (contextType != null) {
          originalValue=ConnectionContextHelper.getOriginalValue(contextType,concept.getLoopExpression());
          originalValue=TalendQuoteUtils.removeQuotes(originalValue);
        }
        if (originalValue != null) {
          createLoopLinks(originalValue,tableItem,monitorWrap);
        }
        monitorWrap.worked(1);
      }
      List<ConceptTarget> schemaTargetList=fieldsTableEditorView.getModel().getBeansList();
      createFieldsLinkWithProgressMonitor(monitorWrap,schemaTargetList.size() + loopTableItems.length,schemaTargetList,0,fieldsTableItems.length);
      monitorWrap.done();
    }
  }
;
  try {
    progressDialog.executeProcess();
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","/** 
 * DOC amaumont Comment method ""createLinks"".
 */
public void createLinks(){
  removeAllLinks();
  getBackgroundRefresher().refreshBackground();
  ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
    private IProgressMonitor monitorWrap;
    @Override public void run(    IProgressMonitor monitor){
      TableItem[] loopTableItems=loopTableEditorView.getTable().getItems();
      TableItem[] fieldsTableItems=fieldsTableEditorView.getTable().getItems();
      monitorWrap=new EventLoopProgressMonitor(monitor);
      String taskName=Messages.getString(""String_Node_Str"");
      int totalWork=loopTableItems.length + fieldsTableItems.length;
      monitorWrap.beginTask(taskName,totalWork);
      List<Concept> conceptList=loopTableEditorView.getModel().getBeansList();
      for (int i=0; i < loopTableItems.length; i++) {
        if (monitorWrap.isCanceled()) {
          return;
        }
        TableItem tableItem=loopTableItems[i];
        Concept concept=conceptList.get(i);
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(concept.getConnection(),true);
        String originalValue=concept.getLoopExpression();
        if (contextType != null) {
          originalValue=ConnectionContextHelper.getOriginalValue(contextType,concept.getLoopExpression());
          originalValue=TalendQuoteUtils.removeQuotes(originalValue);
        }
        if (originalValue != null) {
          createLoopLinks(originalValue,tableItem,monitorWrap);
        }
        monitorWrap.worked(1);
      }
      List<ConceptTarget> schemaTargetList=fieldsTableEditorView.getModel().getBeansList();
      createFieldsLinkWithProgressMonitor(monitorWrap,schemaTargetList.size() + loopTableItems.length,schemaTargetList,0,fieldsTableItems.length);
      monitorWrap.done();
    }
  }
;
  try {
    progressDialog.executeProcess();
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9920039980009996
126521,"public void handleListenableListAfterTableViewerRefreshedEvent(final ListenableListEvent<ConceptTarget> event){
  if (event.type == ListenableListEvent.TYPE.ADDED) {
    ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
      private IProgressMonitor monitorWrap;
      @Override public void run(      IProgressMonitor monitor){
        monitorWrap=SubMonitor.convert(monitor);
        List<ConceptTarget> addedObjects=new ArrayList<ConceptTarget>(event.addedObjects);
        MDMLinker.this.createFieldsLinkWithProgressMonitor(monitorWrap,addedObjects.size(),addedObjects,event.index,addedObjects.size());
        monitorWrap.done();
      }
    }
;
    try {
      progressDialog.executeProcess();
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == ListenableListEvent.TYPE.SWAPED) {
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == TYPE.REMOVED) {
    getBackgroundRefresher().refreshBackground();
  }
}","public void handleListenableListAfterTableViewerRefreshedEvent(final ListenableListEvent<ConceptTarget> event){
  if (event.type == ListenableListEvent.TYPE.ADDED) {
    ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
      private IProgressMonitor monitorWrap;
      @Override public void run(      IProgressMonitor monitor){
        monitorWrap=new EventLoopProgressMonitor(monitor);
        List<ConceptTarget> addedObjects=new ArrayList<ConceptTarget>(event.addedObjects);
        MDMLinker.this.createFieldsLinkWithProgressMonitor(monitorWrap,addedObjects.size(),addedObjects,event.index,addedObjects.size());
        monitorWrap.done();
      }
    }
;
    try {
      progressDialog.executeProcess();
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == ListenableListEvent.TYPE.SWAPED) {
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == TYPE.REMOVED) {
    getBackgroundRefresher().refreshBackground();
  }
}",0.9858532272325377
126522,"@Override public void run(IProgressMonitor monitor){
  TreeItem root=xmlViewer.getTree().getItem(0);
  List<TreeItem> allItems=TreeUtils.collectAllItems(root);
  monitorWrap=SubMonitor.convert(monitor);
  String taskName=Messages.getString(""String_Node_Str"");
  int totalWork=allItems.size();
  monitorWrap.beginTask(taskName,totalWork);
  for (int i=0; i < totalWork; i++) {
    if (monitorWrap.isCanceled()) {
      return;
    }
    TreeItem treeItem=allItems.get(i);
    FOXTreeNode node=(FOXTreeNode)treeItem.getData();
    if (node.getColumn() == null) {
      continue;
    }
    createLoopLinks(node.getColumn().getLabel(),treeItem,monitorWrap,i == totalWork - 1);
    monitorWrap.worked(1);
  }
  monitorWrap.done();
}","@Override public void run(IProgressMonitor monitor){
  TreeItem root=xmlViewer.getTree().getItem(0);
  List<TreeItem> allItems=TreeUtils.collectAllItems(root);
  monitorWrap=new EventLoopProgressMonitor(monitor);
  String taskName=Messages.getString(""String_Node_Str"");
  int totalWork=allItems.size();
  monitorWrap.beginTask(taskName,totalWork);
  for (int i=0; i < totalWork; i++) {
    if (monitorWrap.isCanceled()) {
      return;
    }
    TreeItem treeItem=allItems.get(i);
    FOXTreeNode node=(FOXTreeNode)treeItem.getData();
    if (node.getColumn() == null) {
      continue;
    }
    createLoopLinks(node.getColumn().getLabel(),treeItem,monitorWrap,i == totalWork - 1);
    monitorWrap.worked(1);
  }
  monitorWrap.done();
}",0.9781420765027322
126523,"public void createLinks(){
  removeAllLinks();
  getBackgroundRefresher().refreshBackground();
  ProgressDialog progressDialog=new ProgressDialog(getSource().getShell(),1000){
    private IProgressMonitor monitorWrap;
    @Override public void run(    IProgressMonitor monitor){
      TreeItem root=xmlViewer.getTree().getItem(0);
      List<TreeItem> allItems=TreeUtils.collectAllItems(root);
      monitorWrap=SubMonitor.convert(monitor);
      String taskName=Messages.getString(""String_Node_Str"");
      int totalWork=allItems.size();
      monitorWrap.beginTask(taskName,totalWork);
      for (int i=0; i < totalWork; i++) {
        if (monitorWrap.isCanceled()) {
          return;
        }
        TreeItem treeItem=allItems.get(i);
        FOXTreeNode node=(FOXTreeNode)treeItem.getData();
        if (node.getColumn() == null) {
          continue;
        }
        createLoopLinks(node.getColumn().getLabel(),treeItem,monitorWrap,i == totalWork - 1);
        monitorWrap.worked(1);
      }
      monitorWrap.done();
    }
  }
;
  try {
    progressDialog.executeProcess();
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.process(e);
  }
}","public void createLinks(){
  removeAllLinks();
  getBackgroundRefresher().refreshBackground();
  ProgressDialog progressDialog=new ProgressDialog(getSource().getShell(),1000){
    private IProgressMonitor monitorWrap;
    @Override public void run(    IProgressMonitor monitor){
      TreeItem root=xmlViewer.getTree().getItem(0);
      List<TreeItem> allItems=TreeUtils.collectAllItems(root);
      monitorWrap=new EventLoopProgressMonitor(monitor);
      String taskName=Messages.getString(""String_Node_Str"");
      int totalWork=allItems.size();
      monitorWrap.beginTask(taskName,totalWork);
      for (int i=0; i < totalWork; i++) {
        if (monitorWrap.isCanceled()) {
          return;
        }
        TreeItem treeItem=allItems.get(i);
        FOXTreeNode node=(FOXTreeNode)treeItem.getData();
        if (node.getColumn() == null) {
          continue;
        }
        createLoopLinks(node.getColumn().getLabel(),treeItem,monitorWrap,i == totalWork - 1);
        monitorWrap.worked(1);
      }
      monitorWrap.done();
    }
  }
;
  try {
    progressDialog.executeProcess();
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.process(e);
  }
}",0.9874015748031496
126524,"/** 
 * DOC amaumont Comment method ""createLinks"".
 */
public void createLinks(){
  removeAllLinks();
  getBackgroundRefresher().refreshBackground();
  ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
    private IProgressMonitor monitorWrap;
    @Override public void run(    IProgressMonitor monitor){
      TableItem[] loopTableItems=loopTableEditorView.getTable().getItems();
      TableItem[] fieldsTableItems=fieldsTableEditorView.getTable().getItems();
      monitorWrap=SubMonitor.convert(monitor);
      String taskName=Messages.getString(""String_Node_Str"");
      int totalWork=loopTableItems.length + fieldsTableItems.length;
      monitorWrap.beginTask(taskName,totalWork);
      List<XmlXPathLoopDescriptor> xpathLoopDescriptorList=loopTableEditorView.getModel().getBeansList();
      for (int i=0; i < loopTableItems.length; i++) {
        if (monitorWrap.isCanceled()) {
          return;
        }
        TableItem tableItem=loopTableItems[i];
        XmlXPathLoopDescriptor xpathLoopDescriptor=xpathLoopDescriptorList.get(i);
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(xpathLoopDescriptor.getConnection(),xpathLoopDescriptor.getConnection().getContextName());
        String originalValue=xpathLoopDescriptor.getAbsoluteXPathQuery();
        if (contextType != null) {
          originalValue=ConnectionContextHelper.getOriginalValue(contextType,xpathLoopDescriptor.getAbsoluteXPathQuery());
          originalValue=TalendQuoteUtils.removeQuotes(originalValue);
        }
        if (originalValue != null) {
          createLoopLinks(originalValue,tableItem,monitorWrap);
        }
        monitorWrap.worked(1);
      }
      List<SchemaTarget> schemaTargetList=fieldsTableEditorView.getModel().getBeansList();
      createFieldsLinkWithProgressMonitor(monitorWrap,schemaTargetList.size() + loopTableItems.length,schemaTargetList,0,fieldsTableItems.length);
      monitorWrap.done();
    }
  }
;
  try {
    progressDialog.executeProcess();
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","/** 
 * DOC amaumont Comment method ""createLinks"".
 */
public void createLinks(){
  removeAllLinks();
  getBackgroundRefresher().refreshBackground();
  ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
    private IProgressMonitor monitorWrap;
    @Override public void run(    IProgressMonitor monitor){
      TableItem[] loopTableItems=loopTableEditorView.getTable().getItems();
      TableItem[] fieldsTableItems=fieldsTableEditorView.getTable().getItems();
      monitorWrap=new EventLoopProgressMonitor(monitor);
      String taskName=Messages.getString(""String_Node_Str"");
      int totalWork=loopTableItems.length + fieldsTableItems.length;
      monitorWrap.beginTask(taskName,totalWork);
      List<XmlXPathLoopDescriptor> xpathLoopDescriptorList=loopTableEditorView.getModel().getBeansList();
      for (int i=0; i < loopTableItems.length; i++) {
        if (monitorWrap.isCanceled()) {
          return;
        }
        TableItem tableItem=loopTableItems[i];
        XmlXPathLoopDescriptor xpathLoopDescriptor=xpathLoopDescriptorList.get(i);
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(xpathLoopDescriptor.getConnection(),xpathLoopDescriptor.getConnection().getContextName());
        String originalValue=xpathLoopDescriptor.getAbsoluteXPathQuery();
        if (contextType != null) {
          originalValue=ConnectionContextHelper.getOriginalValue(contextType,xpathLoopDescriptor.getAbsoluteXPathQuery());
          originalValue=TalendQuoteUtils.removeQuotes(originalValue);
        }
        if (originalValue != null) {
          createLoopLinks(originalValue,tableItem,monitorWrap);
        }
        monitorWrap.worked(1);
      }
      List<SchemaTarget> schemaTargetList=fieldsTableEditorView.getModel().getBeansList();
      createFieldsLinkWithProgressMonitor(monitorWrap,schemaTargetList.size() + loopTableItems.length,schemaTargetList,0,fieldsTableItems.length);
      monitorWrap.done();
    }
  }
;
  try {
    progressDialog.executeProcess();
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.9925857275254866
126525,"public void handleListenableListAfterTableViewerRefreshedEvent(final ListenableListEvent<SchemaTarget> event){
  if (event.type == ListenableListEvent.TYPE.ADDED) {
    ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
      private IProgressMonitor monitorWrap;
      @Override public void run(      IProgressMonitor monitor){
        monitorWrap=SubMonitor.convert(monitor);
        List<SchemaTarget> addedObjects=new ArrayList<SchemaTarget>(event.addedObjects);
        XmlToXPathLinker.this.createFieldsLinkWithProgressMonitor(monitorWrap,addedObjects.size(),addedObjects,event.index,addedObjects.size());
        monitorWrap.done();
      }
    }
;
    try {
      progressDialog.executeProcess();
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == ListenableListEvent.TYPE.SWAPED) {
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == TYPE.REMOVED) {
    getBackgroundRefresher().refreshBackground();
  }
}","public void handleListenableListAfterTableViewerRefreshedEvent(final ListenableListEvent<SchemaTarget> event){
  if (event.type == ListenableListEvent.TYPE.ADDED) {
    ProgressDialog progressDialog=new ProgressDialog(getTree().getShell(),1000){
      private IProgressMonitor monitorWrap;
      @Override public void run(      IProgressMonitor monitor){
        monitorWrap=new EventLoopProgressMonitor(monitor);
        List<SchemaTarget> addedObjects=new ArrayList<SchemaTarget>(event.addedObjects);
        XmlToXPathLinker.this.createFieldsLinkWithProgressMonitor(monitorWrap,addedObjects.size(),addedObjects,event.index,addedObjects.size());
        monitorWrap.done();
      }
    }
;
    try {
      progressDialog.executeProcess();
    }
 catch (    InvocationTargetException e) {
      ExceptionHandler.process(e);
    }
catch (    InterruptedException e) {
    }
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == ListenableListEvent.TYPE.SWAPED) {
    getBackgroundRefresher().refreshBackground();
  }
 else   if (event.type == TYPE.REMOVED) {
    getBackgroundRefresher().refreshBackground();
  }
}",0.9859030837004406
126526,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  Timer timer=Timer.getTimer(""String_Node_Str"");
  timer.start();
  if (needInitialize) {
    monitorWrap=SubMonitor.convert(monitor);
    try {
      final ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      factory.initialize();
    }
 catch (    Exception e) {
      throw new InvocationTargetException(e);
    }
  }
  viewer.refresh();
  viewer.setSelection(new TreeSelection());
  expandTreeRootIfOnlyOneRoot();
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
  timer.stop();
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  Timer timer=Timer.getTimer(""String_Node_Str"");
  timer.start();
  if (needInitialize) {
    monitorWrap=new EventLoopProgressMonitor(monitor);
    try {
      final ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      factory.initialize();
    }
 catch (    Exception e) {
      throw new InvocationTargetException(e);
    }
  }
  viewer.refresh();
  viewer.setSelection(new TreeSelection());
  expandTreeRootIfOnlyOneRoot();
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
  timer.stop();
}",0.981242672919109
126527,"/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  fileField.hide();
  directoryField.hide();
  Composite unionBtnsCompsite=new Composite(dbConnectionArea,SWT.NONE);
  FormLayout formLayout=new FormLayout();
  unionBtnsCompsite.setLayout(formLayout);
  moveButton=new Button(unionBtnsCompsite,SWT.PUSH);
  moveButton.setText(DOWN);
  moveButton.setToolTipText(Messages.getString(""String_Node_Str""));
  addMoveButtonListener();
  FormData moveButtonFormData=new FormData();
  moveButtonFormData.right=new FormAttachment(100,0);
  moveButton.setLayoutData(moveButtonFormData);
  Composite checkGroup=new Composite(unionBtnsCompsite,SWT.NONE);
  moveButtonFormData.top=new FormAttachment(checkGroup,0,SWT.CENTER);
  FormData checkGroupFormData=new FormData();
  checkGroupFormData.left=new FormAttachment(0,0);
  checkGroupFormData.right=new FormAttachment(100,0);
  checkGroup.setLayoutData(checkGroupFormData);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  unionBtnsCompsite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  hidableArea=new Composite(sash,SWT.NONE);
  GridLayout hidableAreaLayout=new GridLayout(1,false);
  hidableArea.setLayout(hidableAreaLayout);
  Group group1=Form.createGroup(hidableArea,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=80;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,8,width,50);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  hiveModeCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  fileField.hide();
  directoryField.hide();
  Composite unionBtnsCompsite=new Composite(dbConnectionArea,SWT.NONE);
  FormLayout formLayout=new FormLayout();
  unionBtnsCompsite.setLayout(formLayout);
  moveButton=new Button(unionBtnsCompsite,SWT.PUSH);
  moveButton.setText(DOWN);
  moveButton.setToolTipText(Messages.getString(""String_Node_Str""));
  addMoveButtonListener();
  FormData moveButtonFormData=new FormData();
  moveButtonFormData.right=new FormAttachment(100,0);
  moveButton.setLayoutData(moveButtonFormData);
  Composite checkGroup=new Composite(unionBtnsCompsite,SWT.NONE);
  moveButtonFormData.top=new FormAttachment(checkGroup,0,SWT.CENTER);
  FormData checkGroupFormData=new FormData();
  checkGroupFormData.left=new FormAttachment(0,0);
  checkGroupFormData.right=new FormAttachment(100,0);
  checkGroup.setLayoutData(checkGroupFormData);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  unionBtnsCompsite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  hidableArea=new Composite(sash,SWT.NONE);
  GridLayout hidableAreaLayout=new GridLayout(1,false);
  hidableArea.setLayout(hidableAreaLayout);
  Group group1=Form.createGroup(hidableArea,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=80;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,8,width,50);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  hiveModeCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
  isDbPropertiesVisible=group1.getVisible();
}",0.994354535190064
126528,"/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection(),true);
  originalUischema=metadataconnection.getUiSchema() == null ? ""String_Node_Str"" : metadataconnection.getUiSchema();
  originalURL=metadataconnection.getUrl();
  originalIsNeedReload=ConnectionHelper.getIsConnNeedReload(getConnection());
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  exportContextBtn.getControl().getParent().getParent().setParent(hidableArea);
  sash.setSashWidth(2);
  sash.setWeights(new int[]{21,12});
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}","/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection(),true);
  originalUischema=metadataconnection.getUiSchema() == null ? ""String_Node_Str"" : metadataconnection.getUiSchema();
  originalURL=metadataconnection.getUrl();
  originalIsNeedReload=ConnectionHelper.getIsConnNeedReload(getConnection());
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  refreshHidableArea();
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}",0.8404831320283215
126529,"/** 
 * Checks if Hive can be connected, if yes, then return <code>true</code> for {  {@link #isValide} with successfulmessage  {@link #messageException}. Otherwise, return <code>false</code>. In fact, in this method it invokes  {@link HiveConnectionManager#checkHiveConnection(IMetadataConnection)} to check hive connection. Added by MarvinWang on Mar 18, 2013.
 * @param metadataConn
 * @return
 */
public boolean checkHiveConnection(IMetadataConnection metadataConn){
  try {
    HiveConnectionManager.getInstance().checkConnection(metadataConn);
    isValide=true;
    messageException=Messages.getString(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    isValide=false;
    messageException=ExceptionUtils.getFullStackTrace(e);
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    isValide=false;
    messageException=ExceptionUtils.getFullStackTrace(e);
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    isValide=false;
    messageException=ExceptionUtils.getFullStackTrace(e);
    CommonExceptionHandler.process(e);
  }
catch (  SQLException e) {
    isValide=false;
    messageException=ExceptionUtils.getFullStackTrace(e);
    CommonExceptionHandler.process(e);
  }
  return isValide;
}","/** 
 * Checks if Hive can be connected, if yes, then return <code>true</code> for {  {@link #isValide} with successfulmessage  {@link #messageException}. Otherwise, return <code>false</code>. In fact, in this method it invokes  {@link HiveConnectionManager#checkHiveConnection(IMetadataConnection)} to check hive connection. Added by MarvinWang on Mar 18, 2013.
 * @param metadataConn
 * @return
 */
public boolean checkHiveConnection(IMetadataConnection metadataConn){
  try {
    HiveConnectionManager.getInstance().checkConnection(metadataConn);
    isValide=true;
    messageException=Messages.getString(""String_Node_Str"");
  }
 catch (  Exception e) {
    isValide=false;
    messageException=ExceptionUtils.getFullStackTrace(e);
    CommonExceptionHandler.process(e);
  }
  return isValide;
}",0.7624096385542168
126530,"/** 
 * Only work with one element.
 * @param element
 * @param text
 * @return
 */
public static Object getObjectValue(final IElement element,final String text){
  if (text == null) {
    return null;
  }
  IElementParameter param;
  List<IElementParameter> params=(List<IElementParameter>)element.getElementParametersWithChildrens();
  if (params != null && !params.isEmpty()) {
    for (int i=0; i < params.size(); i++) {
      param=params.get(i);
      if (text.indexOf(param.getVariableName()) != -1 || (param.getVariableName() != null && param.getVariableName().contains(text))) {
        if (param.getFieldType() == EParameterFieldType.TABLE) {
          return createTableValues((List<Map<String,Object>>)param.getValue(),param);
        }
        return param.getValue();
      }
    }
  }
  return null;
}","/** 
 * Only work with one element.
 * @param element
 * @param text
 * @return
 */
public static Object getObjectValue(final IElement element,final String text){
  if (text == null || element == null) {
    return null;
  }
  IElementParameter param;
  List<IElementParameter> params=(List<IElementParameter>)element.getElementParametersWithChildrens();
  if (params != null && !params.isEmpty()) {
    for (int i=0; i < params.size(); i++) {
      param=params.get(i);
      if (text.indexOf(param.getVariableName()) != -1 || (param.getVariableName() != null && param.getVariableName().contains(text))) {
        if (param.getFieldType() == EParameterFieldType.TABLE) {
          return createTableValues((List<Map<String,Object>>)param.getValue(),param);
        }
        return param.getValue();
      }
    }
  }
  return null;
}",0.9884918231374924
126531,public void update();,public boolean update();,0.8
126532,"/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  fileField.hide();
  directoryField.hide();
  Composite unionBtnsCompsite=new Composite(dbConnectionArea,SWT.NONE);
  FormLayout formLayout=new FormLayout();
  unionBtnsCompsite.setLayout(formLayout);
  moveButton=new Button(unionBtnsCompsite,SWT.PUSH);
  moveButton.setText(DOWN);
  moveButton.setToolTipText(Messages.getString(""String_Node_Str""));
  addMoveButtonListener();
  FormData moveButtonFormData=new FormData();
  moveButtonFormData.right=new FormAttachment(100,0);
  moveButton.setLayoutData(moveButtonFormData);
  Composite checkGroup=new Composite(unionBtnsCompsite,SWT.NONE);
  moveButtonFormData.top=new FormAttachment(checkGroup,0,SWT.CENTER);
  FormData checkGroupFormData=new FormData();
  checkGroupFormData.left=new FormAttachment(0,0);
  checkGroupFormData.right=new FormAttachment(100,0);
  checkGroup.setLayoutData(checkGroupFormData);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  unionBtnsCompsite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  hidableArea=new Composite(sash,SWT.NONE);
  GridLayout hidableAreaLayout=new GridLayout(1,false);
  hidableArea.setLayout(hidableAreaLayout);
  Group group1=Form.createGroup(hidableArea,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=80;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,8,width,50);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  hiveModeCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""addCheckAndStandardButtons"".
 * @param width
 * @param compositeGroupDbSettings
 */
private void addCheckAndStandardButtons(int width,Composite compositeGroupDbSettings){
  fileField.hide();
  directoryField.hide();
  Composite unionBtnsCompsite=new Composite(dbConnectionArea,SWT.NONE);
  FormLayout formLayout=new FormLayout();
  unionBtnsCompsite.setLayout(formLayout);
  moveButton=new Button(unionBtnsCompsite,SWT.PUSH);
  moveButton.setText(DOWN);
  moveButton.setToolTipText(Messages.getString(""String_Node_Str""));
  addMoveButtonListener();
  FormData moveButtonFormData=new FormData();
  moveButtonFormData.right=new FormAttachment(100,0);
  moveButton.setLayoutData(moveButtonFormData);
  Composite checkGroup=new Composite(unionBtnsCompsite,SWT.NONE);
  moveButtonFormData.top=new FormAttachment(checkGroup,0,SWT.CENTER);
  FormData checkGroupFormData=new FormData();
  checkGroupFormData.left=new FormAttachment(0,0);
  checkGroupFormData.right=new FormAttachment(100,0);
  checkGroup.setLayoutData(checkGroupFormData);
  GridLayout gridLayout=new GridLayout(1,false);
  checkGroup.setLayout(gridLayout);
  Composite compositeCheckButton=Form.startNewGridLayout(checkGroup,1,false,SWT.CENTER,SWT.BOTTOM);
  unionBtnsCompsite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  checkButton=new UtilsButton(compositeCheckButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  checkButton.setEnabled(false);
  hidableArea=new Composite(sash,SWT.NONE);
  GridLayout hidableAreaLayout=new GridLayout(1,false);
  hidableArea.setLayout(hidableAreaLayout);
  Group group1=Form.createGroup(hidableArea,1,Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=80;
  group1.setLayoutData(gridData);
  Composite compositeGroupDbProperties=Form.startNewDimensionnedGridLayout(group1,8,width,50);
  String[] item={""String_Node_Str""};
  sqlSyntaxCombo=new LabelledCombo(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),null,item,3);
  stringQuoteText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  nullCharText=new LabelledText(compositeGroupDbProperties,Messages.getString(""String_Node_Str""),false);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  standardButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  standardButton.setText(Messages.getString(""String_Node_Str""));
  standardButton.setLayoutData(gridData);
  systemButton=new Button(compositeGroupDbProperties,SWT.RADIO);
  systemButton.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData();
  gridData.horizontalSpan=2;
  systemButton.setLayoutData(gridData);
  Composite c=new Composite(compositeGroupDbProperties,SWT.NONE);
  GridLayout layout=new GridLayout(4,false);
  layout.horizontalSpacing=15;
  layout.verticalSpacing=0;
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.horizontalSpan=4;
  c.setLayoutData(layoutData);
  c.setLayout(layout);
  sqlModeLabel=new Label(c,SWT.NONE);
  sqlModeLabel.setText(Messages.getString(""String_Node_Str""));
  button1=new Button(c,SWT.RADIO);
  button1.setText(Messages.getString(""String_Node_Str""));
  button2=new Button(c,SWT.RADIO);
  button2.setText(Messages.getString(""String_Node_Str""));
  sqlModeLabel.setVisible(false);
  button1.setVisible(false);
  button2.setVisible(false);
  sqlSyntaxCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  hiveModeCombo.setVisible(!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected());
  group1.setVisible(!isTOPStandaloneMode());
  if (metadataconnection != null) {
    IDBMetadataProviderObject providerObj=ExtractMetaDataFromDataBase.getProviderObjectByDbType(metadataconnection.getDbType());
    if (providerObj != null && !providerObj.isSupportJDBC()) {
      group1.setVisible(false);
    }
  }
  isDbPropertiesVisible=group1.getVisible();
}",0.994354535190064
126533,"/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection(),true);
  originalUischema=metadataconnection.getUiSchema() == null ? ""String_Node_Str"" : metadataconnection.getUiSchema();
  originalURL=metadataconnection.getUrl();
  originalIsNeedReload=ConnectionHelper.getIsConnNeedReload(getConnection());
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  exportContextBtn.getControl().getParent().getParent().setParent(hidableArea);
  sash.setSashWidth(2);
  sash.setWeights(new int[]{21,12});
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}","/** 
 * Constructor to use by a Wizard to create a new database connection.
 * @param existingNames
 * @param Composite
 * @param Wizard
 * @param ISelection
 */
public DatabaseForm(Composite parent,ConnectionItem connectionItem,String[] existingNames,boolean isCreation){
  super(parent,SWT.NONE,existingNames);
  this.connectionItem=connectionItem;
  this.isCreation=isCreation;
  setConnectionItem(connectionItem);
  this.metadataconnection=ConvertionHelper.convert(getConnection(),true);
  originalUischema=metadataconnection.getUiSchema() == null ? ""String_Node_Str"" : metadataconnection.getUiSchema();
  originalURL=metadataconnection.getUrl();
  originalIsNeedReload=ConnectionHelper.getIsConnNeedReload(getConnection());
  this.typeName=EDatabaseTypeName.getTypeFromDbType(metadataconnection.getDbType());
  if (typeName != null && typeName.isUseProvider()) {
    this.provider=ExtractMetaDataFromDataBase.getProviderByDbType(metadataconnection.getDbType());
  }
  setupForm(true);
  refreshHidableArea();
  addStringConnectionControls();
  GridLayout layout2=(GridLayout)getLayout();
  layout2.marginHeight=0;
  setLayout(layout2);
}",0.8404831320283215
126534,public void update();,public boolean update();,0.8
126535,"/** 
 * Only work with one element.
 * @param element
 * @param text
 * @return
 */
public static Object getObjectValue(final IElement element,final String text){
  if (text == null) {
    return null;
  }
  IElementParameter param;
  List<IElementParameter> params=(List<IElementParameter>)element.getElementParametersWithChildrens();
  if (params != null && !params.isEmpty()) {
    for (int i=0; i < params.size(); i++) {
      param=params.get(i);
      if (text.indexOf(param.getVariableName()) != -1 || (param.getVariableName() != null && param.getVariableName().contains(text))) {
        if (param.getFieldType() == EParameterFieldType.TABLE) {
          return createTableValues((List<Map<String,Object>>)param.getValue(),param);
        }
        return param.getValue();
      }
    }
  }
  return null;
}","/** 
 * Only work with one element.
 * @param element
 * @param text
 * @return
 */
public static Object getObjectValue(final IElement element,final String text){
  if (text == null || element == null) {
    return null;
  }
  IElementParameter param;
  List<IElementParameter> params=(List<IElementParameter>)element.getElementParametersWithChildrens();
  if (params != null && !params.isEmpty()) {
    for (int i=0; i < params.size(); i++) {
      param=params.get(i);
      if (text.indexOf(param.getVariableName()) != -1 || (param.getVariableName() != null && param.getVariableName().contains(text))) {
        if (param.getFieldType() == EParameterFieldType.TABLE) {
          return createTableValues((List<Map<String,Object>>)param.getValue(),param);
        }
        return param.getValue();
      }
    }
  }
  return null;
}",0.9884918231374924
126536,public void update();,public boolean update();,0.8
126537,"protected void addInstallButtons(){
  final AtomicInteger enabledButtonCount=new AtomicInteger(0);
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  manualInstallButtonMap=new HashMap<ModuleToInstall,Button>();
  ILibrariesService librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  disposePreviousEditors();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    installButtonsEditors.add(editor);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      boolean isInstalled=false;
      try {
        isInstalled=librariesService.getLibraryStatus(data.getName()) == ELibraryInstallStatus.INSTALLED;
      }
 catch (      BusinessException e1) {
        log.error(e1);
      }
      boolean hasDownloadUrl=data.getUrl_description() != null;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        enabledButtonCount.incrementAndGet();
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            table.select(table.indexOf(item));
            launchIndividualDownload(enabledButtonCount,data,button);
          }
        }
);
        button.setEnabled(!isInstalled);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout(hasDownloadUrl ? 2 : 1,false);
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        if (hasDownloadUrl) {
          Link openLink=new Link(composite,SWT.NONE);
          GridDataFactory.fillDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(openLink);
          openLink.setBackground(color);
          openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
          openLink.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            final SelectionEvent e){
              Program.launch(data.getUrl_description());
            }
          }
);
        }
        enabledButtonCount.incrementAndGet();
        Button importButton=new Button(composite,SWT.FLAT);
        importButton.setImage(ImageProvider.getImage(ECoreImage.IMPORT_JAR));
        importButton.setToolTipText(Messages.getString(""String_Node_Str""));
        importButton.addSelectionListener(new ImportButtonSelectionListener(enabledButtonCount,item));
        manualInstallButtonMap.put(data,importButton);
        GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).grab(true,false).applyTo(importButton);
        importButton.setEnabled(!isInstalled);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installcolumn));
      editor.layout();
      editor=new TableEditor(table);
      installButtonsEditors.add(editor);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + (hasDownloadUrl ? data.getUrl_description() : ""String_Node_Str"") + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlcolumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}","protected void addInstallButtons(){
  final AtomicInteger enabledButtonCount=new AtomicInteger(0);
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  manualInstallButtonMap=new HashMap<ModuleToInstall,Button>();
  ILibrariesService librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  disposePreviousEditors();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    installButtonsEditors.add(editor);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      boolean isInstalled=false;
      try {
        isInstalled=librariesService.getLibraryStatus(data.getName()) == ELibraryInstallStatus.INSTALLED;
      }
 catch (      BusinessException e1) {
        log.error(e1);
      }
      boolean hasDownloadUrl=data.getUrl_description() != null;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        enabledButtonCount.incrementAndGet();
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            table.select(table.indexOf(item));
            launchIndividualDownload(enabledButtonCount,data,button);
          }
        }
);
        button.setEnabled(!isInstalled);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout(hasDownloadUrl ? 2 : 1,false);
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        if (hasDownloadUrl) {
          Link openLink=new Link(composite,SWT.NONE);
          GridDataFactory.fillDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(openLink);
          openLink.setBackground(color);
          openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
          openLink.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            final SelectionEvent e){
              openURL(data.getUrl_description());
            }
          }
);
        }
        enabledButtonCount.incrementAndGet();
        Button importButton=new Button(composite,SWT.FLAT);
        importButton.setImage(ImageProvider.getImage(ECoreImage.IMPORT_JAR));
        importButton.setToolTipText(Messages.getString(""String_Node_Str""));
        importButton.addSelectionListener(new ImportButtonSelectionListener(enabledButtonCount,item));
        manualInstallButtonMap.put(data,importButton);
        GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).grab(true,false).applyTo(importButton);
        importButton.setEnabled(!isInstalled);
      }
      editor.grabHorizontal=true;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installcolumn));
      editor.layout();
      editor=new TableEditor(table);
      installButtonsEditors.add(editor);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      FormLayout layout=new FormLayout();
      layout.marginHeight=0;
      layout.marginWidth=0;
      composite.setLayout(layout);
      FormData gData=new FormData();
      gData.left=new FormAttachment(0);
      gData.right=new FormAttachment(100);
      gData.top=new FormAttachment(composite,0,SWT.CENTER);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      gData.height=new GC(composite).stringExtent(""String_Node_Str"").y;
      openLink.setText(""String_Node_Str"" + (hasDownloadUrl ? data.getUrl_description() : ""String_Node_Str"") + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          openURL(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlcolumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}",0.9438452129434004
126538,"/** 
 * Only work with one element.
 * @param element
 * @param text
 * @return
 */
public static Object getObjectValue(final IElement element,final String text){
  if (text == null) {
    return null;
  }
  IElementParameter param;
  List<IElementParameter> params=(List<IElementParameter>)element.getElementParametersWithChildrens();
  if (params != null && !params.isEmpty()) {
    for (int i=0; i < params.size(); i++) {
      param=params.get(i);
      if (text.indexOf(param.getVariableName()) != -1 || (param.getVariableName() != null && param.getVariableName().contains(text))) {
        if (param.getFieldType() == EParameterFieldType.TABLE) {
          return createTableValues((List<Map<String,Object>>)param.getValue(),param);
        }
        return param.getValue();
      }
    }
  }
  return null;
}","/** 
 * Only work with one element.
 * @param element
 * @param text
 * @return
 */
public static Object getObjectValue(final IElement element,final String text){
  if (text == null || element == null) {
    return null;
  }
  IElementParameter param;
  List<IElementParameter> params=(List<IElementParameter>)element.getElementParametersWithChildrens();
  if (params != null && !params.isEmpty()) {
    for (int i=0; i < params.size(); i++) {
      param=params.get(i);
      if (text.indexOf(param.getVariableName()) != -1 || (param.getVariableName() != null && param.getVariableName().contains(text))) {
        if (param.getFieldType() == EParameterFieldType.TABLE) {
          return createTableValues((List<Map<String,Object>>)param.getValue(),param);
        }
        return param.getValue();
      }
    }
  }
  return null;
}",0.9884918231374924
126539,"public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type || ECustomVersionType.PIG_HBASE == type || ECustomVersionType.PIG_HCATALOG == type) {
                  hadoopLibraries=getLibrariesForPig(type);
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}","public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type || ECustomVersionType.PIG_HBASE == type || ECustomVersionType.PIG_HCATALOG == type) {
                  hadoopLibraries=getLibrariesForPig(type);
                }
 else                 if (ECustomVersionType.MAP_REDUCE == type) {
                  hadoopLibraries=getLibrariesForMapReduce(type);
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}",0.9671238841715656
126540,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(580,450);
  setHelpAvailable(false);
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(700,450);
  setHelpAvailable(false);
}",0.9903381642512076
126541,public INode getRefrenceNode(String componentName);,"public INode getRefrenceNode(String componentName,String paletteType);",0.8429752066115702
126542,"/** 
 * For hive embedded mode if tables can be fetched from metastore db without any exceptions, then return <code>true</code>. If there is any exceptions thrown, then that indicates it is failed to connection to hive. Added by Marvin Wang on Mar 12, 2013.
 * @return
 * @throws SQLException
 */
public boolean checkConnection() throws SQLException {
  getTables(this.metadataConn.getDatabase(),null,null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return true;
}","/** 
 * For hive embedded mode if tables can be fetched from metastore db without any exceptions, then return <code>true</code>. If there is any exceptions thrown, then that indicates it is failed to connection to hive. Added by Marvin Wang on Mar 12, 2013.
 * @return
 * @throws SQLException
 */
public boolean checkConnection() throws SQLException {
  boolean isWindows=EnvironmentUtils.isWindowsSystem();
  String hive_version=(String)this.metadataConn.getParameter(""String_Node_Str"");
  List<HiveConnVersionInfo> hiveEmbeddedNotSupportOnWindows=new ArrayList<HiveConnVersionInfo>();
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.HDP_2_0);
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.HDP_2_1);
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.Cloudera_CDH5);
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.PIVOTAL_HD_2_0);
  boolean isSupportEmbedded=hiveEmbeddedNotSupportOnWindows.contains(HiveConnVersionInfo.valueOf(hive_version));
  if (isWindows && isSupportEmbedded) {
    throw new SQLException(""String_Node_Str"");
  }
  getTables(this.metadataConn.getDatabase(),null,null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return true;
}",0.5761124121779859
126543,"public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value != null && value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}",0.9736434108527132
126544,"public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value != null && value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}",0.9736434108527132
126545,"private void init(){
  if (hiveObject == null) {
    ClassLoader currCL=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(classLoader);
    try {
      Class calss=Class.forName(""String_Node_Str"",true,classLoader);
      Method closeCurrentMethod=calss.getDeclaredMethod(""String_Node_Str"");
      closeCurrentMethod.invoke(null);
      Method hiveGetMethod=calss.getDeclaredMethod(""String_Node_Str"");
      hiveObject=hiveGetMethod.invoke(null);
      boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_USEKEYTAB));
      if (useKerberos) {
        Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
        ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{conf});
        if (useKeytab) {
          String principal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_PRINCIPLA);
          String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_KEYTAB);
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
}","private void init(){
  if (hiveObject == null) {
    ClassLoader currCL=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(classLoader);
    try {
      Class calss=Class.forName(""String_Node_Str"",true,classLoader);
      Method closeCurrentMethod=calss.getDeclaredMethod(""String_Node_Str"");
      closeCurrentMethod.invoke(null);
      Method hiveGetMethod=calss.getDeclaredMethod(""String_Node_Str"");
      hiveObject=hiveGetMethod.invoke(null);
      boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_USEKEYTAB));
      if (useKerberos) {
        Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
        ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{conf});
        if (useKeytab) {
          String principal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_PRINCIPLA);
          String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_KEYTAB);
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
      }
    }
 catch (    UnsupportedClassVersionError e) {
      isSupportJRE=false;
    }
catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
}",0.9767862526379258
126546,"/** 
 * For hive embedded mode if tables can be fetched from metastore db without any exceptions, then return <code>true</code>. If there is any exceptions thrown, then that indicates it is failed to connection to hive. Added by Marvin Wang on Mar 12, 2013.
 * @return
 * @throws SQLException
 */
public boolean checkConnection() throws SQLException {
  boolean isWindows=EnvironmentUtils.isWindowsSystem();
  String hive_version=(String)this.metadataConn.getParameter(""String_Node_Str"");
  boolean isSupportEmbedded=ArrayUtils.contains(HiveConnVersionInfo.getHiveVersionsNotSupportOnWindows(),HiveConnVersionInfo.valueOf(hive_version));
  if (isWindows && isSupportEmbedded) {
    throw new SQLException(""String_Node_Str"");
  }
  getTables(this.metadataConn.getDatabase(),null,null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return true;
}","/** 
 * For hive embedded mode if tables can be fetched from metastore db without any exceptions, then return <code>true</code>. If there is any exceptions thrown, then that indicates it is failed to connection to hive. Added by Marvin Wang on Mar 12, 2013.
 * @return
 * @throws SQLException
 */
public boolean checkConnection() throws SQLException {
  if (!isSupportJRE) {
    throw new SQLException(""String_Node_Str"");
  }
  boolean isWindows=EnvironmentUtils.isWindowsSystem();
  String hive_version=(String)this.metadataConn.getParameter(""String_Node_Str"");
  boolean isSupportEmbedded=ArrayUtils.contains(HiveConnVersionInfo.getHiveVersionsNotSupportOnWindows(),HiveConnVersionInfo.valueOf(hive_version));
  if (isWindows && isSupportEmbedded) {
    throw new SQLException(""String_Node_Str"");
  }
  getTables(this.metadataConn.getDatabase(),null,null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return true;
}",0.6070640176600441
126547,"public EmbeddedHiveDataBaseMetadata(IMetadataConnection metadataConn){
  super();
  this.metadataConn=metadataConn;
  this.classLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
  init();
}","public EmbeddedHiveDataBaseMetadata(IMetadataConnection metadataConn){
  super();
  this.metadataConn=metadataConn;
  this.classLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
  this.isSupportJRE=true;
  init();
}",0.9424778761061948
126548,"public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type || ECustomVersionType.PIG_HBASE == type || ECustomVersionType.PIG_HCATALOG == type) {
                  hadoopLibraries=getLibrariesForPig(type);
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}","public Map<ECustomVersionGroup,Set<LibraryFile>> getImportLibLibraries(){
  Map<ECustomVersionGroup,Set<LibraryFile>> libMap=new HashMap<ECustomVersionGroup,Set<LibraryFile>>();
  if (isFromExistVersion) {
    IHadoopService hadoopService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopService.class)) {
      hadoopService=(IHadoopService)GlobalServiceRegister.getDefault().getService(IHadoopService.class);
    }
    if (hadoopService != null) {
      for (      ECustomVersionGroup group : existVersionSelectionMap.keySet()) {
        if (existVersionSelectionMap.get(group)) {
          if (types != null) {
            HashSet libInSameGroup=new HashSet<LibraryFile>();
            boolean commonGroupCalculated=false;
            for (            ECustomVersionType type : types) {
              if (type.getGroup() == group) {
                Set<String> hadoopLibraries=new HashSet<String>();
                if (ECustomVersionType.PIG == type || ECustomVersionType.PIG_HBASE == type || ECustomVersionType.PIG_HCATALOG == type) {
                  hadoopLibraries=getLibrariesForPig(type);
                }
 else                 if (ECustomVersionType.MAP_REDUCE == type) {
                  hadoopLibraries=getLibrariesForMapReduce(type);
                }
 else {
                  if (!commonGroupCalculated && (ECustomVersionType.HCATALOG == type || ECustomVersionType.OOZIE == type)) {
                    type=ECustomVersionType.HDFS;
                  }
                  if (type == ECustomVersionType.HDFS) {
                    commonGroupCalculated=true;
                  }
                  hadoopLibraries=hadoopService.getHadoopLibrariesByType(type,getDistribution(),getVersion());
                }
                Set<LibraryFile> convertToLibraryFile=customLibUtil.convertToLibraryFile(hadoopLibraries);
                libInSameGroup.addAll(convertToLibraryFile);
              }
            }
            libMap.put(group,libInSameGroup);
          }
        }
      }
    }
  }
 else   if (isFromZip) {
    Set<ECustomVersionGroup> groups=new HashSet<ECustomVersionGroup>();
    for (    ECustomVersionGroup group : fromZipSelectionMap.keySet()) {
      if (fromZipSelectionMap.get(group)) {
        groups.add(group);
      }
    }
    return customLibUtil.readZipFile(zipLocation,groups);
  }
  return libMap;
}",0.9671238841715656
126549,"@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(580,450);
  setHelpAvailable(false);
}","@Override protected void configureShell(Shell newShell){
  super.configureShell(newShell);
  newShell.setText(Messages.getString(""String_Node_Str""));
  newShell.setSize(700,450);
  setHelpAvailable(false);
}",0.9903381642512076
126550,public INode getRefrenceNode(String componentName);,"public INode getRefrenceNode(String componentName,String paletteType);",0.8429752066115702
126551,"public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value != null && value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}",0.9736434108527132
126552,"@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    String kind=""String_Node_Str"";
    if (types[0].equalsIgnoreCase(CONST_VIEW)) {
      kind=""String_Node_Str"";
    }
 else     if (types[0].equalsIgnoreCase(CONST_SYNONYM)) {
      kind=""String_Node_Str"";
    }
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ kind+ ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ addTypesToSql(types)+ ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.8911290322580645
126553,"/** 
 * For hive embedded mode if tables can be fetched from metastore db without any exceptions, then return <code>true</code>. If there is any exceptions thrown, then that indicates it is failed to connection to hive. Added by Marvin Wang on Mar 12, 2013.
 * @return
 * @throws SQLException
 */
public boolean checkConnection() throws SQLException {
  boolean isWindows=EnvironmentUtils.isWindowsSystem();
  String hive_version=(String)this.metadataConn.getParameter(""String_Node_Str"");
  List<HiveConnVersionInfo> hiveEmbeddedNotSupportOnWindows=new ArrayList<HiveConnVersionInfo>();
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.HDP_2_0);
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.HDP_2_1);
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.Cloudera_CDH5);
  hiveEmbeddedNotSupportOnWindows.add(HiveConnVersionInfo.PIVOTAL_HD_2_0);
  boolean isSupportEmbedded=hiveEmbeddedNotSupportOnWindows.contains(HiveConnVersionInfo.valueOf(hive_version));
  if (isWindows && isSupportEmbedded) {
    throw new SQLException(""String_Node_Str"");
  }
  getTables(this.metadataConn.getDatabase(),null,null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return true;
}","/** 
 * For hive embedded mode if tables can be fetched from metastore db without any exceptions, then return <code>true</code>. If there is any exceptions thrown, then that indicates it is failed to connection to hive. Added by Marvin Wang on Mar 12, 2013.
 * @return
 * @throws SQLException
 */
public boolean checkConnection() throws SQLException {
  boolean isWindows=EnvironmentUtils.isWindowsSystem();
  String hive_version=(String)this.metadataConn.getParameter(""String_Node_Str"");
  boolean isSupportEmbedded=ArrayUtils.contains(HiveConnVersionInfo.getHiveVersionsNotSupportOnWindows(),HiveConnVersionInfo.valueOf(hive_version));
  if (isWindows && isSupportEmbedded) {
    throw new SQLException(""String_Node_Str"");
  }
  getTables(this.metadataConn.getDatabase(),null,null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  return true;
}",0.7712230215827338
126554,"@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  boolean inuse=false;
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    if (checkUnSupportJavaVersion(shell)) {
      shell.dispose();
      return EXIT_OK;
    }
    if (!Boolean.getBoolean(""String_Node_Str"")) {
      inuse=!acquireWorkspaceLock(shell);
    }
    if (inuse) {
      MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      shell.dispose();
      return EXIT_OK;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    if (!inuse) {
      releaseWorkspaceLock();
    }
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  boolean inuse=false;
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    if (checkUnSupportJavaVersion(shell)) {
      shell.dispose();
      return EXIT_OK;
    }
    inuse=!acquireWorkspaceLock(shell);
    if (inuse) {
      MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      shell.dispose();
      return EXIT_OK;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    if (!inuse) {
      releaseWorkspaceLock();
    }
  }
}",0.991254523522316
126555,"/** 
 * Return <code>true</code> if the lock could be acquired.
 * @param shell
 * @throws IOException
 */
private boolean acquireWorkspaceLock(Shell shell){
  Location instanceLoc=Platform.getInstanceLocation();
  ConnectionUserPerReader perReader=ConnectionUserPerReader.getInstance();
  if (perReader.isHaveUserPer() && instanceLoc != null && !instanceLoc.isSet()) {
    try {
      String lastWorkSpacePath=perReader.readLastWorkSpace();
      if (!""String_Node_Str"".equals(lastWorkSpacePath) && lastWorkSpacePath != null) {
        File file=new File(lastWorkSpacePath);
        boolean needSet=true;
        if (instanceLoc.isSet()) {
          File curWorkspace=URIUtil.toFile(URIUtil.toURI(instanceLoc.getURL()));
          if (file.equals(curWorkspace)) {
            needSet=false;
          }
        }
        if (needSet) {
          if (!file.exists()) {
            boolean mkdirs=file.mkdirs();
            if (!mkdirs) {
              MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              perReader.saveConnections(null);
              return true;
            }
          }
          instanceLoc.set(file.toURL(),false);
        }
      }
    }
 catch (    MalformedURLException e) {
      ExceptionHandler.process(e);
    }
catch (    URISyntaxException e) {
      ExceptionHandler.process(e);
    }
catch (    IllegalStateException e) {
      ExceptionHandler.process(e);
    }
catch (    IOException e) {
      ExceptionHandler.process(e);
    }
  }
  if (instanceLoc == null || instanceLoc.getURL() == null) {
    return true;
  }
  if (instanceLoc.isSet()) {
    try {
      if (instanceLoc.lock()) {
        return true;
      }
    }
 catch (    Throwable t) {
    }
  }
  return false;
}","/** 
 * Return <code>true</code> if the lock could be acquired.
 * @param shell
 * @throws IOException if lock acquisition fails somehow
 */
private boolean acquireWorkspaceLock(Shell shell) throws IOException {
  Location instanceLoc=Platform.getInstanceLocation();
  ConnectionUserPerReader perReader=ConnectionUserPerReader.getInstance();
  if (perReader.isHaveUserPer() && instanceLoc != null && !instanceLoc.isSet()) {
    try {
      String lastWorkSpacePath=perReader.readLastWorkSpace();
      if (!""String_Node_Str"".equals(lastWorkSpacePath) && lastWorkSpacePath != null) {
        File file=new File(lastWorkSpacePath);
        boolean needSet=true;
        if (instanceLoc.isSet()) {
          File curWorkspace=URIUtil.toFile(URIUtil.toURI(instanceLoc.getURL()));
          if (file.equals(curWorkspace)) {
            needSet=false;
          }
        }
        if (needSet) {
          if (!file.exists()) {
            boolean mkdirs=file.mkdirs();
            if (!mkdirs) {
              MessageDialog.openError(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              perReader.saveConnections(null);
              return true;
            }
          }
          instanceLoc.set(file.toURL(),false);
        }
      }
    }
 catch (    MalformedURLException e) {
      ExceptionHandler.process(e);
    }
catch (    URISyntaxException e) {
      ExceptionHandler.process(e);
    }
catch (    IllegalStateException e) {
      ExceptionHandler.process(e);
    }
  }
  if (instanceLoc == null || instanceLoc.getURL() == null) {
    return true;
  }
  if (!instanceLoc.isSet()) {
    try {
      instanceLoc.set(instanceLoc.getDefault(),false);
    }
 catch (    IllegalStateException e) {
      ExceptionHandler.process(e);
    }
  }
  if (instanceLoc.isLocked()) {
    return false;
  }
 else {
    return instanceLoc.lock();
  }
}",0.8762942779291553
126556,"/** 
 * DOC ycbai Comment method ""hasDiffsFromClusterToProcess"". <p> Check whether there is any change of hadoop related parameters from Process to Hadoop cluster. </p>
 * @param hcConnection
 * @param process
 * @return true if there are some changes from them, otherwise return false.
 */
public boolean hasDiffsFromClusterToProcess(Connection hcConnection,IProcess process);","/** 
 * DOC ycbai Comment method ""hasDiffsFromClusterToProcess"". <p> Check whether there is any change of hadoop related parameters from Process to Hadoop cluster. </p>
 * @param hcConnection
 * @param process
 * @return true if there are some changes from them, otherwise return false.
 */
public boolean hasDiffsFromClusterToProcess(Item item,IProcess process);",0.9567567567567568
126557,"/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateDBConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateDBConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9755679382768968
126558,"@Override protected void addFields(){
  int leftCompositeWidth=80;
  int rightCompositeWidth=WIDTH_GRIDDATA_PIXEL - leftCompositeWidth;
  int headerCompositeHeight=60;
  int tableSettingsCompositeHeight=90;
  int tableCompositeHeight=200;
  int height=headerCompositeHeight + tableSettingsCompositeHeight + tableCompositeHeight;
  Composite mainComposite=Form.startNewDimensionnedGridLayout(this,1,leftCompositeWidth + rightCompositeWidth,height);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  Composite rightComposite=Form.startNewDimensionnedGridLayout(mainComposite,1,rightCompositeWidth,height);
  Group groupTableSettings=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""),tableSettingsCompositeHeight);
  Composite compositeTableSettings=Form.startNewDimensionnedGridLayout(groupTableSettings,1,rightCompositeWidth,tableSettingsCompositeHeight);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=rightCompositeWidth;
  gridData.horizontalSpan=3;
  Composite filterComposite=new Composite(compositeTableSettings,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  filterComposite.setLayout(gridLayout);
  GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
  filterComposite.setLayoutData(gridData2);
  Label label=new Label(filterComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  nameFilter=new Text(filterComposite,SWT.BORDER);
  nameFilter.setToolTipText(Messages.getString(""String_Node_Str""));
  nameFilter.setEditable(true);
  gridData2=new GridData(GridData.FILL_HORIZONTAL);
  nameFilter.setLayoutData(gridData2);
  scrolledCompositeFileViewer=new ScrolledComposite(compositeTableSettings,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NONE);
  scrolledCompositeFileViewer.setExpandHorizontal(true);
  scrolledCompositeFileViewer.setExpandVertical(true);
  GridData gridData1=new GridData(GridData.FILL_BOTH);
  int width=700;
  int hight=325;
  if (forTemplate) {
    width=375;
    hight=300;
  }
  gridData1.widthHint=width;
  gridData1.heightHint=hight;
  gridData1.horizontalSpan=2;
  scrolledCompositeFileViewer.setLayoutData(gridData1);
  createTable();
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(compositeTableSettings,3,false,SWT.CENTER,SWT.BOTTOM);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  selectAllTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  selectNoneTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  checkConnectionButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  gc.dispose();
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  parentWizardPage.setPageComplete(false);
  if (this.typeName != null && this.typeName.getProduct().equals(EDatabaseTypeName.HBASE.getProduct())) {
    selectAllTablesButton.setEnabled(false);
    selectAllTablesButton.setToolTipText(Messages.getString(""String_Node_Str""));
    selectNoneTablesButton.setEnabled(false);
    selectNoneTablesButton.setToolTipText(Messages.getString(""String_Node_Str""));
  }
}","@Override protected void addFields(){
  int width=getSize().x;
  Composite mainComposite=Form.startNewGridLayout(this,1);
  mainComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_BOTH);
  mainComposite.setLayoutData(gridData);
  Composite rightComposite=Form.startNewGridLayout(mainComposite,1);
  Group groupTableSettings=Form.createGroup(rightComposite,1,Messages.getString(""String_Node_Str""));
  scrolledComposite=new ScrolledComposite(groupTableSettings,SWT.V_SCROLL | SWT.H_SCROLL);
  scrolledComposite.setExpandHorizontal(true);
  scrolledComposite.setExpandVertical(true);
  scrolledComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  newParent=new Composite(scrolledComposite,SWT.NONE);
  newParent.setLayout(new GridLayout());
  scrolledComposite.setContent(newParent);
  Composite compositeTableSettings=Form.startNewGridLayout(newParent,1);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=3;
  Composite filterComposite=new Composite(compositeTableSettings,SWT.NONE);
  GridLayout gridLayout=new GridLayout(2,false);
  filterComposite.setLayout(gridLayout);
  GridData gridData2=new GridData(GridData.FILL_HORIZONTAL);
  filterComposite.setLayoutData(gridData2);
  Label label=new Label(filterComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  nameFilter=new Text(filterComposite,SWT.BORDER);
  nameFilter.setToolTipText(Messages.getString(""String_Node_Str""));
  nameFilter.setEditable(true);
  gridData2=new GridData(GridData.FILL_HORIZONTAL);
  nameFilter.setLayoutData(gridData2);
  scrolledCompositeFileViewer=new ScrolledComposite(compositeTableSettings,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NONE);
  scrolledCompositeFileViewer.setExpandHorizontal(true);
  scrolledCompositeFileViewer.setExpandVertical(true);
  GridData gridData1=new GridData(GridData.FILL_BOTH);
  int hight=290;
  if (forTemplate) {
    width=375;
    hight=300;
  }
  gridData1.widthHint=width;
  gridData1.heightHint=hight;
  gridData1.horizontalSpan=2;
  scrolledCompositeFileViewer.setLayoutData(gridData1);
  createTable();
  Composite compositeRetreiveSchemaButton=Form.startNewGridLayout(compositeTableSettings,3,false,SWT.CENTER,SWT.BOTTOM);
  GC gc=new GC(compositeRetreiveSchemaButton);
  String displayStr=Messages.getString(""String_Node_Str"");
  Point buttonSize=gc.stringExtent(displayStr);
  selectAllTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  selectNoneTablesButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  displayStr=Messages.getString(""String_Node_Str"");
  buttonSize=gc.stringExtent(displayStr);
  checkConnectionButton=new UtilsButton(compositeRetreiveSchemaButton,displayStr,buttonSize.x + 12,HEIGHT_BUTTON_PIXEL);
  gc.dispose();
  metadataEditor=new MetadataEmfTableEditor(""String_Node_Str"");
  parentWizardPage.setPageComplete(false);
  if (this.typeName != null && this.typeName.getProduct().equals(EDatabaseTypeName.HBASE.getProduct())) {
    selectAllTablesButton.setEnabled(false);
    selectAllTablesButton.setToolTipText(Messages.getString(""String_Node_Str""));
    selectNoneTablesButton.setEnabled(false);
    selectNoneTablesButton.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  scrolledComposite.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
    }
  }
);
}",0.8180305131761443
126559,"/** 
 * DOC ycbai Comment method ""hasDiffsFromClusterToProcess"". <p> Check whether there is any change of hadoop related parameters from Process to Hadoop cluster. </p>
 * @param hcConnection
 * @param process
 * @return true if there are some changes from them, otherwise return false.
 */
public boolean hasDiffsFromClusterToProcess(Connection hcConnection,IProcess process);","/** 
 * DOC ycbai Comment method ""hasDiffsFromClusterToProcess"". <p> Check whether there is any change of hadoop related parameters from Process to Hadoop cluster. </p>
 * @param hcConnection
 * @param process
 * @return true if there are some changes from them, otherwise return false.
 */
public boolean hasDiffsFromClusterToProcess(Item item,IProcess process);",0.9567567567567568
126560,"/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateDBConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * ggu Comment method ""updateQuery"". if show is false, will work for context menu action.
 */
public static boolean updateDBConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_EXTRA);
      types.add(EUpdateItemType.JOB_PROPERTY_STATS_LOGS);
      types.add(EUpdateItemType.JOB_PROPERTY_HEADERFOOTER);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9755679382768968
126561,"/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}","/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}",0.9857188194224056
126562,"@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    String kind=""String_Node_Str"";
    if (types[0].equalsIgnoreCase(CONST_VIEW)) {
      kind=""String_Node_Str"";
    }
 else     if (types[0].equalsIgnoreCase(CONST_SYNONYM)) {
      kind=""String_Node_Str"";
    }
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ kind+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    String kind=""String_Node_Str"";
    if (types[0].equalsIgnoreCase(CONST_VIEW)) {
      kind=""String_Node_Str"";
    }
 else     if (types[0].equalsIgnoreCase(CONST_SYNONYM)) {
      kind=""String_Node_Str"";
    }
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ kind+ ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.9761290322580644
126563,"/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}","/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}",0.9857188194224056
126564,"public void executeProcess() throws InvocationTargetException, InterruptedException {
  Display display2=null;
  if (parentShell != null) {
    display2=parentShell.getDisplay();
  }
  final Display display=display2;
  final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
  try {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder1=new InvocationTargetException[1];
        display.syncExec(new Runnable(){
          public void run(){
            try {
              ProgressDialog.this.run(monitor);
            }
 catch (            InvocationTargetException e) {
              iteHolder1[0]=e;
            }
catch (            InterruptedException e) {
              throw new OperationCanceledException(e.getMessage());
            }
          }
        }
);
        if (iteHolder1[0] != null) {
          throw iteHolder1[0];
        }
      }
    }
;
    display.syncExec(new Runnable(){
      public void run(){
        final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
        if (timeBeforeShowDialog > 0) {
          progressMonitorDialog.setOpenOnRun(false);
          AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
            public void run(){
              progressMonitorDialog.open();
            }
          }
);
          asynchronousThreading.start();
        }
        try {
          progressMonitorDialog.run(false,true,op);
        }
 catch (        InvocationTargetException e) {
          iteHolder[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
      }
    }
);
  }
 catch (  OperationCanceledException e) {
    throw new InterruptedException(e.getMessage());
  }
  if (iteHolder[0] != null) {
    throw iteHolder[0];
  }
}","public void executeProcess(boolean useAsync) throws InvocationTargetException, InterruptedException {
  Display display2=null;
  if (parentShell != null) {
    display2=parentShell.getDisplay();
  }
  final Display display=display2;
  final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
  try {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder1=new InvocationTargetException[1];
        try {
          ProgressDialog.this.run(monitor);
        }
 catch (        InvocationTargetException e) {
          iteHolder1[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
        if (iteHolder1[0] != null) {
          throw iteHolder1[0];
        }
      }
    }
;
    if (useAsync) {
      display.asyncExec(new Runnable(){
        public void run(){
          final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
          if (timeBeforeShowDialog > 0) {
            progressMonitorDialog.setOpenOnRun(false);
            AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
              public void run(){
                progressMonitorDialog.open();
              }
            }
);
            asynchronousThreading.start();
          }
          try {
            progressMonitorDialog.run(false,true,op);
          }
 catch (          InvocationTargetException e) {
            iteHolder[0]=e;
          }
catch (          InterruptedException e) {
            throw new OperationCanceledException(e.getMessage());
          }
        }
      }
);
    }
 else {
      display.syncExec(new Runnable(){
        public void run(){
          final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
          if (timeBeforeShowDialog > 0) {
            progressMonitorDialog.setOpenOnRun(false);
            AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
              public void run(){
                progressMonitorDialog.open();
              }
            }
);
            asynchronousThreading.start();
          }
          try {
            progressMonitorDialog.run(false,true,op);
          }
 catch (          InvocationTargetException e) {
            iteHolder[0]=e;
          }
catch (          InterruptedException e) {
            throw new OperationCanceledException(e.getMessage());
          }
        }
      }
);
    }
  }
 catch (  OperationCanceledException e) {
    throw new InterruptedException(e.getMessage());
  }
  if (iteHolder[0] != null) {
    throw iteHolder[0];
  }
}",0.7355255194674198
126565,"@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
    }
  }
);
}","@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
  CommonsPlugin.setWorkbenchCreated(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
    }
  }
);
}",0.9585342333654774
126566,"/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}","/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}",0.9857188194224056
126567,"/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}","/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  String result=""String_Node_Str"";
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result+=original.substring(leftPrev,leftQuotes);
    }
    if (leftQuotes < rightQuotes) {
      result+=original.substring(leftQuotes,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=original.indexOf(""String_Node_Str"",fakeRightQuotes + 1);
    }
  }
  result+=original.substring(leftPrev);
  return result;
}",0.9857188194224056
126568,"@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
  Job myJob=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      rwu.setUnloadResourcesAfterRun(true);
      rwu.setFilesModifiedOutsideOfRWU(true);
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
      return org.eclipse.core.runtime.Status.OK_STATUS;
    }
  }
;
  myJob.schedule();
}","@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
  CommonsPlugin.setWorkbenchCreated(true);
  Job myJob=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      rwu.setUnloadResourcesAfterRun(true);
      rwu.setFilesModifiedOutsideOfRWU(true);
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
      return org.eclipse.core.runtime.Status.OK_STATUS;
    }
  }
;
  myJob.schedule();
}",0.975964225824483
126569,"@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
  Job myJob=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      rwu.setUnloadResourcesAfterRun(true);
      rwu.setFilesModifiedOutsideOfRWU(true);
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
      return org.eclipse.core.runtime.Status.OK_STATUS;
    }
  }
;
  myJob.schedule();
}","@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
  CommonsPlugin.setWorkbenchCreated(true);
  Job myJob=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      rwu.setUnloadResourcesAfterRun(true);
      rwu.setFilesModifiedOutsideOfRWU(true);
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
      return org.eclipse.core.runtime.Status.OK_STATUS;
    }
  }
;
  myJob.schedule();
}",0.975964225824483
126570,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list(false);
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  Set<String> existLibraries=repositoryBundleService.list(false);
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.918013856812933
126571,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list(false);
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  Set<String> existLibraries=repositoryBundleService.list(false);
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.918013856812933
126572,"private boolean isRepository(INode node){
  IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    String schemaType=(String)schemaParam.getValue();
    if (schemaType.equals(""String_Node_Str"")) {
      return true;
    }
  }
  schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    List schemaType=(List)schemaParam.getValue();
    for (int i=0; i < schemaType.size(); i++) {
      HashMap map=(HashMap)schemaType.get(i);
      Set set=map.keySet();
      Iterator it=set.iterator();
      while (it.hasNext()) {
        String key=(String)it.next();
        if (key.equals(""String_Node_Str"")) {
          String value=(String)map.get(key);
          if (this.outputMetaTable.getLabel().equals(TalendQuoteUtils.removeQuotes(value))) {
            if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}","private boolean isRepository(INode node,IMetadataTable currentTable){
  boolean nodeModeFlag=false;
  for (  IElementParameter param : node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE && (param.getContext() == null || param.getContext().equals(currentTable.getAttachedConnector()))) {
      IElementParameter schemaParam=param.getChildParameters().get(""String_Node_Str"");
      if (schemaParam.getValue() != null) {
        if (schemaParam.getValue().equals(""String_Node_Str"")) {
          nodeModeFlag=true;
          break;
        }
      }
    }
  }
  if (!nodeModeFlag) {
    IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
    if (schemaParam != null) {
      List schemaType=(List)schemaParam.getValue();
      for (int i=0; i < schemaType.size(); i++) {
        HashMap map=(HashMap)schemaType.get(i);
        Set set=map.keySet();
        Iterator it=set.iterator();
        while (it.hasNext()) {
          String key=(String)it.next();
          if (key.equals(""String_Node_Str"")) {
            String value=(String)map.get(key);
            if (this.outputMetaTable.getLabel().equals(TalendQuoteUtils.removeQuotes(value))) {
              if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
                nodeModeFlag=true;
              }
            }
          }
        }
      }
    }
  }
  return nodeModeFlag;
}",0.2423500611995104
126573,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData(),true);
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      @Override public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      boolean enabledForAll=false;
      copySelectionToOutput.setEnabled(false);
      if (outputNode.getComponent().isSchemaAutoPropagated() && !outputMetaTable.sameMetadataAs(inputMetaTable,IMetadataColumn.OPTIONS_IGNORE_KEY | IMetadataColumn.OPTIONS_IGNORE_NULLABLE | IMetadataColumn.OPTIONS_IGNORE_COMMENT| IMetadataColumn.OPTIONS_IGNORE_PATTERN| IMetadataColumn.OPTIONS_IGNORE_DBCOLUMNNAME| IMetadataColumn.OPTIONS_IGNORE_DBTYPE| IMetadataColumn.OPTIONS_IGNORE_DEFAULT| IMetadataColumn.OPTIONS_IGNORE_BIGGER_SIZE)) {
        enabledForAll=true;
      }
      copyToOutput.setEnabled(enabledForAll);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    @Override public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode,outputMetaTable)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode,outputMetaTable));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData(),true);
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode,outputMetaTable)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode,outputMetaTable));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      @Override public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      boolean enabledForAll=false;
      copySelectionToOutput.setEnabled(false);
      if (outputNode.getComponent().isSchemaAutoPropagated() && !outputMetaTable.sameMetadataAs(inputMetaTable,IMetadataColumn.OPTIONS_IGNORE_KEY | IMetadataColumn.OPTIONS_IGNORE_NULLABLE | IMetadataColumn.OPTIONS_IGNORE_COMMENT| IMetadataColumn.OPTIONS_IGNORE_PATTERN| IMetadataColumn.OPTIONS_IGNORE_DBCOLUMNNAME| IMetadataColumn.OPTIONS_IGNORE_DBTYPE| IMetadataColumn.OPTIONS_IGNORE_DEFAULT| IMetadataColumn.OPTIONS_IGNORE_BIGGER_SIZE)) {
        enabledForAll=true;
      }
      copyToOutput.setEnabled(enabledForAll);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    @Override public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.9971356963838168
126574,"private boolean isRepository(INode node){
  IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    String schemaType=(String)schemaParam.getValue();
    if (schemaType.equals(""String_Node_Str"")) {
      return true;
    }
  }
  schemaParam=node.getElementParameter(""String_Node_Str"");
  if (schemaParam != null) {
    List schemaType=(List)schemaParam.getValue();
    for (int i=0; i < schemaType.size(); i++) {
      HashMap map=(HashMap)schemaType.get(i);
      Set set=map.keySet();
      Iterator it=set.iterator();
      while (it.hasNext()) {
        String key=(String)it.next();
        if (key.equals(""String_Node_Str"")) {
          String value=(String)map.get(key);
          if (this.outputMetaTable.getLabel().equals(TalendQuoteUtils.removeQuotes(value))) {
            if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}","private boolean isRepository(INode node,IMetadataTable currentTable){
  boolean nodeModeFlag=false;
  for (  IElementParameter param : node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE && (param.getContext() == null || param.getContext().equals(currentTable.getAttachedConnector()))) {
      IElementParameter schemaParam=param.getChildParameters().get(""String_Node_Str"");
      if (schemaParam.getValue() != null) {
        if (schemaParam.getValue().equals(""String_Node_Str"")) {
          nodeModeFlag=true;
          break;
        }
      }
    }
  }
  if (!nodeModeFlag) {
    IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
    if (schemaParam != null) {
      List schemaType=(List)schemaParam.getValue();
      for (int i=0; i < schemaType.size(); i++) {
        HashMap map=(HashMap)schemaType.get(i);
        Set set=map.keySet();
        Iterator it=set.iterator();
        while (it.hasNext()) {
          String key=(String)it.next();
          if (key.equals(""String_Node_Str"")) {
            String value=(String)map.get(key);
            if (this.outputMetaTable.getLabel().equals(TalendQuoteUtils.removeQuotes(value))) {
              if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
                nodeModeFlag=true;
              }
            }
          }
        }
      }
    }
  }
  return nodeModeFlag;
}",0.2423500611995104
126575,"@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData(),true);
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      @Override public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      boolean enabledForAll=false;
      copySelectionToOutput.setEnabled(false);
      if (outputNode.getComponent().isSchemaAutoPropagated() && !outputMetaTable.sameMetadataAs(inputMetaTable,IMetadataColumn.OPTIONS_IGNORE_KEY | IMetadataColumn.OPTIONS_IGNORE_NULLABLE | IMetadataColumn.OPTIONS_IGNORE_COMMENT| IMetadataColumn.OPTIONS_IGNORE_PATTERN| IMetadataColumn.OPTIONS_IGNORE_DBCOLUMNNAME| IMetadataColumn.OPTIONS_IGNORE_DBTYPE| IMetadataColumn.OPTIONS_IGNORE_DEFAULT| IMetadataColumn.OPTIONS_IGNORE_BIGGER_SIZE)) {
        enabledForAll=true;
      }
      copyToOutput.setEnabled(enabledForAll);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    @Override public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  MetadataTableEditor metadataTableEditor;
  if (inputMetaTable == null) {
    composite.setLayout(new FillLayout());
    if (isRepository(outputNode,outputMetaTable)) {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput,true);
    }
 else {
      metadataTableEditor=new MetadataTableEditor(outputMetaTable,titleOutput);
    }
    outputMetaView=new DialogMetadataTableEditorView(composite,SWT.NONE,metadataTableEditor,outputReadOnly,true,true,false);
    if (outputNode != null && outputNode.getComponent() != null && outputNode.getComponent().getPaletteType() != null && outputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      outputMetaView.setMapreduce(true);
    }
    outputMetaView.setIsRepository(isRepository(outputNode,outputMetaTable));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
  }
 else {
    compositesSachForm=new ThreeCompositesSashForm(composite,SWT.NONE);
    GridLayout gridLayout=new GridLayout(1,false);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    gridLayout.horizontalSpacing=0;
    composite.setLayout(gridLayout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    composite.setLayoutData(gridData);
    metadataTableEditor=new MetadataTableEditor(inputMetaTable,titleInput);
    inputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getLeftComposite(),SWT.NONE,metadataTableEditor,inputReadOnly,true,true,false);
    if (inputNode != null && inputNode.getComponent() != null && inputNode.getComponent().getPaletteType() != null && inputNode.getComponent().getPaletteType().equals(""String_Node_Str"")) {
      inputMetaView.setMapreduce(true);
    }
    initializeMetadataTableView(inputMetaView,inputNode,inputMetaTable);
    inputMetaView.initGraphicComponents();
    inputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    inputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    Label label1=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,18).applyTo(label1);
    Composite buttonComposite=new Composite(compositesSachForm.getMidComposite(),SWT.BORDER);
    Label label2=new Label(compositesSachForm.getMidComposite(),SWT.NONE);
    GridDataFactory.swtDefaults().hint(42,36).applyTo(label2);
    gridLayout=new GridLayout(1,true);
    buttonComposite.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    buttonComposite.setLayoutData(gridData);
    Composite buttonComposite2=new Composite(buttonComposite,SWT.NONE);
    gridLayout=new GridLayout(1,true);
    gridLayout.marginBottom=0;
    gridLayout.marginHeight=0;
    gridLayout.marginLeft=0;
    gridLayout.marginRight=0;
    gridLayout.marginTop=0;
    gridLayout.marginWidth=0;
    buttonComposite2.setLayout(gridLayout);
    gridData=new GridData(GridData.FILL_BOTH);
    gridData.verticalAlignment=GridData.CENTER;
    buttonComposite2.setLayoutData(gridData);
    Button copySelectionToOutput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToOutput.setImage(ImageProvider.getImage(EImage.RIGHT_ICON));
    copySelectionToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copySelectionToOutput);
    copySelectionToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=inputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getOutputMetaData());
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToOutput=new Button(buttonComposite2,SWT.NONE);
    copyToOutput.setImage(ImageProvider.getImage(EImage.RIGHTX_ICON));
    copyToOutput.setToolTipText(Messages.getString(""String_Node_Str""));
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(copyToOutput);
    copyToOutput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getInputMetaData(),getOutputMetaData(),true);
          outputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Label lable1=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable1);
    Label lable2=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable2);
    Label lable3=new Label(buttonComposite2,SWT.NONE);
    GridDataFactory.swtDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(lable3);
    Button copySelectionToInput=new Button(buttonComposite2,SWT.NONE);
    copySelectionToInput.setImage(ImageProvider.getImage(EImage.LEFT_ICON));
    copySelectionToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copySelectionToInput.setLayoutData(gridData);
    copySelectionToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        tableItem=outputMetaView.getTable().getSelection();
        List list=new ArrayList<IMetadataColumn>();
        for (        TableItem element : tableItem) {
          column=(IMetadataColumn)element.getData();
          list.add(column);
        }
        if (tableItem.length > 0) {
          MetadataToolHelper.copyTable(list,getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    Button copyToInput=new Button(buttonComposite2,SWT.NONE);
    copyToInput.setImage(ImageProvider.getImage(EImage.LEFTX_ICON));
    copyToInput.setToolTipText(Messages.getString(""String_Node_Str""));
    gridData.verticalAlignment=GridData.CENTER;
    copyToInput.setLayoutData(gridData);
    copyToInput.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        MessageBox messageBox=new MessageBox(parent.getShell(),SWT.APPLICATION_MODAL | SWT.OK | SWT.CANCEL);
        messageBox.setText(Messages.getString(""String_Node_Str""));
        messageBox.setMessage(Messages.getString(""String_Node_Str""));
        if (messageBox.open() == SWT.OK) {
          MetadataToolHelper.copyTable(getOutputMetaData(),getInputMetaData());
          inputMetaView.getTableViewerCreator().refresh();
        }
      }
    }
);
    if (inputReadOnly || inputMetaTable.isReadOnly()) {
      copyToInput.setEnabled(false);
      copySelectionToInput.setEnabled(false);
    }
    MetadataTableEditor metadataTableEditorForOutput;
    if (isRepository(outputNode,outputMetaTable)) {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"",true);
    }
 else {
      metadataTableEditorForOutput=new MetadataTableEditor(outputMetaTable,titleOutput + ""String_Node_Str"");
    }
    outputMetaView=new DialogMetadataTableEditorView(compositesSachForm.getRightComposite(),SWT.NONE,metadataTableEditorForOutput,outputReadOnly,true,true,false);
    outputMetaView.setIsRepository(isRepository(outputNode,outputMetaTable));
    initializeMetadataTableView(outputMetaView,outputNode,outputMetaTable);
    outputMetaView.initGraphicComponents();
    outputMetaView.getExtendedTableViewer().setCommandStack(commandStack);
    outputMetaView.setGridDataSize(size.x / 2 - 50,size.y - 150);
    outputMetaView.getMetadataTableEditor().addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
      @Override public void handleEvent(      ModifiedBeanEvent<IMetadataColumn> event){
        if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
          IMetadataColumn modifiedObject=event.bean;
          if (modifiedObject != null) {
            String originalLabel=changeNameOutColumns.get(modifiedObject);
            if (originalLabel == null) {
              changeNameOutColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
            }
          }
        }
      }
    }
);
    if (outputReadOnly || outputMetaTable.isReadOnly()) {
      boolean enabledForAll=false;
      copySelectionToOutput.setEnabled(false);
      if (outputNode.getComponent().isSchemaAutoPropagated() && !outputMetaTable.sameMetadataAs(inputMetaTable,IMetadataColumn.OPTIONS_IGNORE_KEY | IMetadataColumn.OPTIONS_IGNORE_NULLABLE | IMetadataColumn.OPTIONS_IGNORE_COMMENT| IMetadataColumn.OPTIONS_IGNORE_PATTERN| IMetadataColumn.OPTIONS_IGNORE_DBCOLUMNNAME| IMetadataColumn.OPTIONS_IGNORE_DBTYPE| IMetadataColumn.OPTIONS_IGNORE_DEFAULT| IMetadataColumn.OPTIONS_IGNORE_BIGGER_SIZE)) {
        enabledForAll=true;
      }
      copyToOutput.setEnabled(enabledForAll);
    }
    compositesSachForm.setGridDatas();
    CustomTableManager.addCustomManagementToTable(inputMetaView,inputReadOnly);
    CustomTableManager.addCustomManagementToToolBar(inputMetaView,inputMetaTable,inputReadOnly,outputMetaView,outputMetaTable,outputNode.getComponent().isSchemaAutoPropagated());
  }
  CustomTableManager.addCustomManagementToTable(outputMetaView,outputReadOnly);
  CustomTableManager.addCustomManagementToToolBar(outputMetaView,outputMetaTable,outputReadOnly,inputMetaView,inputMetaTable,false);
  metadataTableEditor.addModifiedBeanListener(new IModifiedBeanListener<IMetadataColumn>(){
    @Override public void handleEvent(    ModifiedBeanEvent<IMetadataColumn> event){
      if ((inputMetaTable != null) && outputMetaTable.isReadOnly() && outputNode.getComponent().isSchemaAutoPropagated()) {
        MetadataToolHelper.copyTable(inputMetaTable,outputMetaTable);
        outputMetaView.getTableViewerCreator().refresh();
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_NAME.equals(event.column.getId())) {
        IMetadataColumn modifiedObject=event.bean;
        if (modifiedObject != null) {
          String originalLabel=changedNameColumns.get(modifiedObject);
          if (originalLabel == null) {
            changedNameColumns.put(modifiedObject,(String)event.previousValue);
            changeNameInColumns.put(modifiedObject.getLabel(),(String)event.previousValue);
          }
        }
      }
      if (AbstractMetadataTableEditorView.ID_COLUMN_USEFUL.equals(event.column.getId())) {
        isUsefulChange=true;
      }
    }
  }
);
  return composite;
}",0.9971356963838168
126576,"@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          id=EcoreUtil.generateUUID();
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        itemRecord.getProperty().setId(id);
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
}","@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          id=EcoreUtil.generateUUID();
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        itemRecord.getProperty().setId(id);
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      if (Platform.inDebugMode()) {
        ExceptionHandler.process(e);
      }
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
}",0.9709605361131796
126577,"private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      return;
    }
    final IImportItemsHandler importHandler=itemRecord.getImportHandler();
    if (importHandler != null && itemRecord.isValid()) {
      List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
      if (importHandler.isPriorImportRelatedItem()) {
        if (!relatedItemRecord.isEmpty()) {
          importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        }
      }
      if (monitor.isCanceled()) {
        return;
      }
      importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
      if (monitor.isCanceled()) {
        return;
      }
      if (!importHandler.isPriorImportRelatedItem()) {
        if (!relatedItemRecord.isEmpty()) {
          importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        }
      }
      importHandler.afterImportingItems(monitor,manager,itemRecord);
      ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
      monitor.worked(1);
    }
  }
}","private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      return;
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
}",0.925849639546859
126578,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                return;
              }
              final IImportItemsHandler importHandler=itemRecord.getImportHandler();
              if (importHandler != null && itemRecord.isValid()) {
                List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                if (importHandler.isPriorImportRelatedItem()) {
                  if (!relatedItemRecord.isEmpty()) {
                    importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  }
                }
                if (monitor.isCanceled()) {
                  return;
                }
                importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                if (monitor.isCanceled()) {
                  return;
                }
                if (!importHandler.isPriorImportRelatedItem()) {
                  if (!relatedItemRecord.isEmpty()) {
                    importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  }
                }
                importHandler.afterImportingItems(monitor,manager,itemRecord);
                ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                monitor.worked(1);
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                return;
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9555080629492908
126579,"protected Project computeProject(ResourcesManager manager,ImportItem itemRecord,IPath path){
  InputStream stream=null;
  Map<IPath,Project> pathWithProjects=ImportCacheHelper.getInstance().getPathWithProjects();
  try {
    if (!pathWithProjects.containsKey(path)) {
      stream=manager.getStream(path);
      Resource resource=createResource(itemRecord,path,false);
      resource.load(stream,null);
      pathWithProjects.put(path,(Project)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProject()));
    }
    return pathWithProjects.get(path);
  }
 catch (  IOException e) {
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}","protected Project computeProject(ResourcesManager manager,ImportItem itemRecord,IPath path){
  InputStream stream=null;
  Map<IPath,Project> pathWithProjects=ImportCacheHelper.getInstance().getPathWithProjects();
  try {
    if (!pathWithProjects.containsKey(path)) {
      stream=manager.getStream(path);
      Resource resource=createResource(itemRecord,path,false);
      resource.load(stream,null);
      pathWithProjects.put(path,(Project)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProject()));
    }
    return pathWithProjects.get(path);
  }
 catch (  IOException e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}",0.95315427857589
126580,"/** 
 * mzhao load resource with item record.
 * @param manager
 * @param itemRecord
 * @param resource
 * @return
 */
protected Resource loadResource(ResourcesManager manager,ImportItem itemRecord){
  InputStream stream=null;
  try {
    final Resource resource=createResource(itemRecord,itemRecord.getPath(),false);
    stream=manager.getStream(itemRecord.getPath());
    URIConverter uriConverter=resource.getResourceSet().getURIConverter();
    resource.getResourceSet().setURIConverter(new ExtensibleURIConverterImpl(){
      @Override public InputStream createInputStream(      URI uri,      Map<?,?> options) throws IOException {
        InputStream inputStream=null;
        EPackage ePackage=resource.getResourceSet().getPackageRegistry().getEPackage(uri.toString());
        if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
          inputStream=super.createInputStream(uri,options);
        }
 else {
          inputStream=null;
        }
        return inputStream;
      }
    }
);
    resource.load(stream,null);
    resource.getResourceSet().setURIConverter(uriConverter);
    return resource;
  }
 catch (  Exception e) {
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}","/** 
 * mzhao load resource with item record.
 * @param manager
 * @param itemRecord
 * @param resource
 * @return
 */
protected Resource loadResource(ResourcesManager manager,ImportItem itemRecord){
  InputStream stream=null;
  try {
    final Resource resource=createResource(itemRecord,itemRecord.getPath(),false);
    stream=manager.getStream(itemRecord.getPath());
    final ResourceSet resourceSet=resource.getResourceSet();
    URIConverter uriConverter=resourceSet.getURIConverter();
    resourceSet.setURIConverter(new ExtensibleURIConverterImpl(){
      @Override public InputStream createInputStream(      URI uri,      Map<?,?> options) throws IOException {
        InputStream inputStream=null;
        EPackage ePackage=resourceSet.getPackageRegistry().getEPackage(uri.toString());
        if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
          inputStream=super.createInputStream(uri,options);
        }
 else {
          inputStream=null;
        }
        return inputStream;
      }
    }
);
    resource.load(stream,null);
    resourceSet.setURIConverter(uriConverter);
    return resource;
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        if (Platform.inDebugMode()) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return null;
}",0.8816120906801007
126581,"@Override public InputStream createInputStream(URI uri,Map<?,?> options) throws IOException {
  InputStream inputStream=null;
  EPackage ePackage=resource.getResourceSet().getPackageRegistry().getEPackage(uri.toString());
  if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
    inputStream=super.createInputStream(uri,options);
  }
 else {
    inputStream=null;
  }
  return inputStream;
}","@Override public InputStream createInputStream(URI uri,Map<?,?> options) throws IOException {
  InputStream inputStream=null;
  EPackage ePackage=resourceSet.getPackageRegistry().getEPackage(uri.toString());
  if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
    inputStream=super.createInputStream(uri,options);
  }
 else {
    inputStream=null;
  }
  return inputStream;
}",0.974937343358396
126582,"/** 
 * load the resource
 */
public static Resource loadResource(ResourcesManager manager,ImportItem importItem){
  InputStream stream=null;
  try {
    final Resource resource=createResource(importItem,importItem.getPath(),false);
    stream=manager.getStream(importItem.getPath());
    URIConverter uriConverter=resource.getResourceSet().getURIConverter();
    resource.getResourceSet().setURIConverter(new ExtensibleURIConverterImpl(){
      @Override public InputStream createInputStream(      URI uri,      Map<?,?> options) throws IOException {
        InputStream inputStream=null;
        EPackage ePackage=resource.getResourceSet().getPackageRegistry().getEPackage(uri.toString());
        if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
          inputStream=super.createInputStream(uri,options);
        }
 else {
          inputStream=null;
        }
        return inputStream;
      }
    }
);
    resource.load(stream,null);
    resource.getResourceSet().setURIConverter(uriConverter);
    return resource;
  }
 catch (  Exception e) {
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}","/** 
 * load the resource
 */
public static Resource loadResource(ResourcesManager manager,ImportItem importItem){
  InputStream stream=null;
  try {
    final Resource resource=createResource(importItem,importItem.getPath(),false);
    stream=manager.getStream(importItem.getPath());
    final ResourceSet resourceSet=resource.getResourceSet();
    URIConverter uriConverter=resourceSet.getURIConverter();
    resourceSet.setURIConverter(new ExtensibleURIConverterImpl(){
      @Override public InputStream createInputStream(      URI uri,      Map<?,?> options) throws IOException {
        InputStream inputStream=null;
        EPackage ePackage=resourceSet.getPackageRegistry().getEPackage(uri.toString());
        if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
          inputStream=super.createInputStream(uri,options);
        }
 else {
          inputStream=null;
        }
        return inputStream;
      }
    }
);
    resource.load(stream,null);
    resourceSet.setURIConverter(uriConverter);
    return resource;
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        if (Platform.inDebugMode()) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return null;
}",0.8738980452280567
126583,"@Override public InputStream createInputStream(URI uri,Map<?,?> options) throws IOException {
  InputStream inputStream=null;
  EPackage ePackage=resource.getResourceSet().getPackageRegistry().getEPackage(uri.toString());
  if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
    inputStream=super.createInputStream(uri,options);
  }
 else {
    inputStream=null;
  }
  return inputStream;
}","@Override public InputStream createInputStream(URI uri,Map<?,?> options) throws IOException {
  InputStream inputStream=null;
  EPackage ePackage=resourceSet.getPackageRegistry().getEPackage(uri.toString());
  if (ePackage != null || !""String_Node_Str"".equals(uri.scheme())) {
    inputStream=super.createInputStream(uri,options);
  }
 else {
    inputStream=null;
  }
  return inputStream;
}",0.974937343358396
126584,"@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          id=EcoreUtil.generateUUID();
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        itemRecord.getProperty().setId(id);
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
}","@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          id=EcoreUtil.generateUUID();
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        itemRecord.getProperty().setId(id);
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      if (Platform.inDebugMode()) {
        ExceptionHandler.process(e);
      }
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
}",0.9709605361131796
126585,"private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      return;
    }
    final IImportItemsHandler importHandler=itemRecord.getImportHandler();
    if (importHandler != null && itemRecord.isValid()) {
      List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
      if (importHandler.isPriorImportRelatedItem()) {
        if (!relatedItemRecord.isEmpty()) {
          importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        }
      }
      if (monitor.isCanceled()) {
        return;
      }
      importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
      if (monitor.isCanceled()) {
        return;
      }
      if (!importHandler.isPriorImportRelatedItem()) {
        if (!relatedItemRecord.isEmpty()) {
          importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        }
      }
      importHandler.afterImportingItems(monitor,manager,itemRecord);
      ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
      monitor.worked(1);
    }
  }
}","private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      return;
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
}",0.925849639546859
126586,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                return;
              }
              final IImportItemsHandler importHandler=itemRecord.getImportHandler();
              if (importHandler != null && itemRecord.isValid()) {
                List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                if (importHandler.isPriorImportRelatedItem()) {
                  if (!relatedItemRecord.isEmpty()) {
                    importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  }
                }
                if (monitor.isCanceled()) {
                  return;
                }
                importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                if (monitor.isCanceled()) {
                  return;
                }
                if (!importHandler.isPriorImportRelatedItem()) {
                  if (!relatedItemRecord.isEmpty()) {
                    importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  }
                }
                importHandler.afterImportingItems(monitor,manager,itemRecord);
                ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                monitor.worked(1);
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                return;
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9555080629492908
126587,"protected Project computeProject(ResourcesManager manager,ImportItem importItem,IPath path){
  InputStream stream=null;
  Map<IPath,Project> pathWithProjects=ImportCacheHelper.getInstance().getPathWithProjects();
  try {
    if (!pathWithProjects.containsKey(path)) {
      stream=manager.getStream(path);
      Resource resource=createResource(importItem,path,false);
      resource.load(stream,null);
      pathWithProjects.put(path,(Project)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProject()));
    }
    return pathWithProjects.get(path);
  }
 catch (  IOException e) {
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}","protected Project computeProject(ResourcesManager manager,ImportItem importItem,IPath path){
  InputStream stream=null;
  Map<IPath,Project> pathWithProjects=ImportCacheHelper.getInstance().getPathWithProjects();
  try {
    if (!pathWithProjects.containsKey(path)) {
      stream=manager.getStream(path);
      Resource resource=createResource(importItem,path,false);
      resource.load(stream,null);
      pathWithProjects.put(path,(Project)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProject()));
    }
    return pathWithProjects.get(path);
  }
 catch (  IOException e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return null;
}",0.95315427857589
126588,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list(false);
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.9971048060220036
126589,"@Override public Set<String> list(IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
 else {
    }
  }
 catch (  MalformedURLException e) {
    CommonExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  Map<String,File> componentsFolders=null;
  Set<String> contributeIdSet=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
    contributeIdSet=componentsFolders.keySet();
  }
  for (  String jarName : jarsToRelative.keySet()) {
    String relativePath=jarsToRelative.get(jarName);
    boolean jarFound=false;
    if (relativePath != null) {
      if (relativePath.startsWith(""String_Node_Str"")) {
        jarFound=checkJarInstalledFromPlatform(relativePath);
      }
 else {
        if (componentsFolders != null && contributeIdSet != null) {
          for (          String contributor : contributeIdSet) {
            if (relativePath.contains(contributor)) {
              String bundleLocation=componentsFolders.get(contributor).getAbsolutePath();
              int index=bundleLocation.indexOf(contributor);
              String jarLocation=new Path(bundleLocation.substring(0,index)).append(relativePath).toPortableString();
              File file=new File(jarLocation);
              if (file.exists()) {
                jarFound=true;
              }
              break;
            }
          }
        }
      }
    }
    if (jarFound) {
      names.add(jarName);
    }
  }
  return names;
}","@Override public Set<String> list(boolean withComponent,IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
  }
 catch (  MalformedURLException e) {
    CommonExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  Map<String,File> componentsFolders=null;
  Set<String> contributeIdSet=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
    contributeIdSet=componentsFolders.keySet();
  }
  for (  String jarName : jarsToRelative.keySet()) {
    String relativePath=jarsToRelative.get(jarName);
    boolean jarFound=false;
    if (relativePath != null) {
      if (relativePath.startsWith(""String_Node_Str"")) {
        jarFound=checkJarInstalledFromPlatform(relativePath);
      }
 else {
        if (componentsFolders != null && contributeIdSet != null) {
          for (          String contributor : contributeIdSet) {
            if (relativePath.contains(contributor)) {
              String bundleLocation=componentsFolders.get(contributor).getAbsolutePath();
              int index=bundleLocation.indexOf(contributor);
              String jarLocation=new Path(bundleLocation.substring(0,index)).append(relativePath).toPortableString();
              File file=new File(jarLocation);
              if (file.exists()) {
                jarFound=true;
              }
              break;
            }
          }
        }
      }
    }
    if (jarFound) {
      if (!withComponent) {
        if (ModulesNeededProvider.getModulesNeededNames().contains(jarName)) {
          names.add(jarName);
        }
      }
 else {
        names.add(jarName);
      }
    }
  }
  return names;
}",0.940791013339574
126590,"@Override protected void afterCreatedItem(ResourcesManager resManager,ImportItem selectedItemRecord) throws Exception {
  final Item tmpItem=selectedItemRecord.getItem();
  boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !selectedItemRecord.getMigrationTasksToApply().isEmpty();
  if (isConnectionEmptyBeforeMigration) {
    InputStream is=resManager.getStream(selectedItemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
    try {
      URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
      URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
      URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
      OutputStream os=new FileOutputStream(fileURL.getFile());
      try {
        FileCopyUtils.copyStreams(is,os);
      }
  finally {
        os.close();
      }
    }
  finally {
      is.close();
    }
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    repFactory.unloadResources(tmpItem.getProperty());
  }
 else {
    super.afterCreatedItem(resManager,selectedItemRecord);
  }
}","@Override protected void afterCreatedItem(ResourcesManager resManager,ImportItem selectedItemRecord) throws Exception {
  final Item tmpItem=selectedItemRecord.getItem();
  if (isConnectionEmptyBeforeMigration) {
    InputStream is=resManager.getStream(selectedItemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
    try {
      URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
      URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
      URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
      OutputStream os=new FileOutputStream(fileURL.getFile());
      try {
        FileCopyUtils.copyStreams(is,os);
      }
  finally {
        os.close();
      }
    }
  finally {
      is.close();
    }
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    repFactory.unloadResources(tmpItem.getProperty());
  }
 else {
    super.afterCreatedItem(resManager,selectedItemRecord);
  }
}",0.9169054441260746
126591,"@Override protected void afterCreatedItem(ResourcesManager resManager,ImportItem importItem) throws Exception {
  final Item tmpItem=importItem.getItem();
  boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !importItem.getMigrationTasksToApply().isEmpty();
  if (isConnectionEmptyBeforeMigration) {
    InputStream is=resManager.getStream(importItem.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
    try {
      URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
      URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
      URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
      OutputStream os=new FileOutputStream(fileURL.getFile());
      try {
        FileCopyUtils.copyStreams(is,os);
      }
  finally {
        os.close();
      }
    }
  finally {
      is.close();
    }
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    repFactory.unloadResources(tmpItem.getProperty());
  }
 else {
    super.afterCreatedItem(resManager,importItem);
  }
}","@Override protected void afterCreatedItem(ResourcesManager resManager,ImportItem importItem) throws Exception {
  final Item tmpItem=importItem.getItem();
  if (isConnectionEmptyBeforeMigration) {
    InputStream is=resManager.getStream(importItem.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
    try {
      URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
      URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
      URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
      OutputStream os=new FileOutputStream(fileURL.getFile());
      try {
        FileCopyUtils.copyStreams(is,os);
      }
  finally {
        os.close();
      }
    }
  finally {
      is.close();
    }
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    repFactory.unloadResources(tmpItem.getProperty());
  }
 else {
    super.afterCreatedItem(resManager,importItem);
  }
}",0.9177562210037958
126592,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list(false);
  Set<String> existDllLibraries=repositoryBundleService.listAllDllFiles();
  existLibraries.addAll(existDllLibraries);
  List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
  for (  ModuleNeeded current : toCheck) {
    if (existLibraries.contains(current.getModuleName())) {
      current.setStatus(ELibraryInstallStatus.INSTALLED);
    }
 else {
      current.setStatus(ELibraryInstallStatus.NOT_INSTALLED);
    }
  }
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.9971048060220036
126593,"@Override public Set<String> list(IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
 else {
    }
  }
 catch (  MalformedURLException e) {
    CommonExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  Map<String,File> componentsFolders=null;
  Set<String> contributeIdSet=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
    contributeIdSet=componentsFolders.keySet();
  }
  for (  String jarName : jarsToRelative.keySet()) {
    String relativePath=jarsToRelative.get(jarName);
    boolean jarFound=false;
    if (relativePath != null) {
      if (relativePath.startsWith(""String_Node_Str"")) {
        jarFound=checkJarInstalledFromPlatform(relativePath);
      }
 else {
        if (componentsFolders != null && contributeIdSet != null) {
          for (          String contributor : contributeIdSet) {
            if (relativePath.contains(contributor)) {
              String bundleLocation=componentsFolders.get(contributor).getAbsolutePath();
              int index=bundleLocation.indexOf(contributor);
              String jarLocation=new Path(bundleLocation.substring(0,index)).append(relativePath).toPortableString();
              File file=new File(jarLocation);
              if (file.exists()) {
                jarFound=true;
              }
              break;
            }
          }
        }
      }
    }
    if (jarFound) {
      names.add(jarName);
    }
  }
  return names;
}","@Override public Set<String> list(boolean withComponent,IProgressMonitor... monitorWrap){
  Set<String> names=new HashSet<String>();
  try {
    List<File> jarFiles=FilesUtils.getJarFilesFromFolder(getStorageDirectory(),null);
    if (jarFiles.size() > 0) {
      for (      File file : jarFiles) {
        names.add(file.getName());
      }
    }
  }
 catch (  MalformedURLException e) {
    CommonExceptionHandler.process(e);
  }
  LibrariesIndexManager.getInstance().loadResource();
  EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getIndex().getJarsToRelativePath();
  Map<String,File> componentsFolders=null;
  Set<String> contributeIdSet=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
    componentsFolders=service.getComponentsFactory().getComponentsProvidersFolder();
    contributeIdSet=componentsFolders.keySet();
  }
  for (  String jarName : jarsToRelative.keySet()) {
    String relativePath=jarsToRelative.get(jarName);
    boolean jarFound=false;
    if (relativePath != null) {
      if (relativePath.startsWith(""String_Node_Str"")) {
        jarFound=checkJarInstalledFromPlatform(relativePath);
      }
 else {
        if (componentsFolders != null && contributeIdSet != null) {
          for (          String contributor : contributeIdSet) {
            if (relativePath.contains(contributor)) {
              String bundleLocation=componentsFolders.get(contributor).getAbsolutePath();
              int index=bundleLocation.indexOf(contributor);
              String jarLocation=new Path(bundleLocation.substring(0,index)).append(relativePath).toPortableString();
              File file=new File(jarLocation);
              if (file.exists()) {
                jarFound=true;
              }
              break;
            }
          }
        }
      }
    }
    if (jarFound) {
      if (!withComponent) {
        if (ModulesNeededProvider.getModulesNeededNames().contains(jarName)) {
          names.add(jarName);
        }
      }
 else {
        names.add(jarName);
      }
    }
  }
  return names;
}",0.940791013339574
126594,"public void executeProcess() throws InvocationTargetException, InterruptedException {
  Display display2=null;
  if (parentShell != null) {
    display2=parentShell.getDisplay();
  }
  final Display display=display2;
  final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
  try {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder1=new InvocationTargetException[1];
        try {
          ProgressDialog.this.run(monitor);
        }
 catch (        InvocationTargetException e) {
          iteHolder1[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
        if (iteHolder1[0] != null) {
          throw iteHolder1[0];
        }
      }
    }
;
    display.syncExec(new Runnable(){
      public void run(){
        final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
        if (timeBeforeShowDialog > 0) {
          progressMonitorDialog.setOpenOnRun(false);
          AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
            public void run(){
              progressMonitorDialog.open();
            }
          }
);
          asynchronousThreading.start();
        }
        try {
          progressMonitorDialog.run(false,true,op);
        }
 catch (        InvocationTargetException e) {
          iteHolder[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
      }
    }
);
  }
 catch (  OperationCanceledException e) {
    throw new InterruptedException(e.getMessage());
  }
  if (iteHolder[0] != null) {
    throw iteHolder[0];
  }
}","public void executeProcess(boolean useAsync) throws InvocationTargetException, InterruptedException {
  Display display2=null;
  if (parentShell != null) {
    display2=parentShell.getDisplay();
  }
  final Display display=display2;
  final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
  try {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder1=new InvocationTargetException[1];
        try {
          ProgressDialog.this.run(monitor);
        }
 catch (        InvocationTargetException e) {
          iteHolder1[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
        if (iteHolder1[0] != null) {
          throw iteHolder1[0];
        }
      }
    }
;
    if (useAsync) {
      display.asyncExec(new Runnable(){
        public void run(){
          final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
          if (timeBeforeShowDialog > 0) {
            progressMonitorDialog.setOpenOnRun(false);
            AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
              public void run(){
                progressMonitorDialog.open();
              }
            }
);
            asynchronousThreading.start();
          }
          try {
            progressMonitorDialog.run(false,true,op);
          }
 catch (          InvocationTargetException e) {
            iteHolder[0]=e;
          }
catch (          InterruptedException e) {
            throw new OperationCanceledException(e.getMessage());
          }
        }
      }
);
    }
 else {
      display.syncExec(new Runnable(){
        public void run(){
          final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
          if (timeBeforeShowDialog > 0) {
            progressMonitorDialog.setOpenOnRun(false);
            AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
              public void run(){
                progressMonitorDialog.open();
              }
            }
);
            asynchronousThreading.start();
          }
          try {
            progressMonitorDialog.run(false,true,op);
          }
 catch (          InvocationTargetException e) {
            iteHolder[0]=e;
          }
catch (          InterruptedException e) {
            throw new OperationCanceledException(e.getMessage());
          }
        }
      }
);
    }
  }
 catch (  OperationCanceledException e) {
    throw new InterruptedException(e.getMessage());
  }
  if (iteHolder[0] != null) {
    throw iteHolder[0];
  }
}",0.7973476999585578
126595,"@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  String sql;
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=rs.getString(""String_Node_Str"").trim();
      String typeName=rs.getString(""String_Node_Str"");
      String columnSize=rs.getString(""String_Node_Str"");
      String decimalDigits=rs.getString(""String_Node_Str"");
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  String sql;
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=rs.getString(""String_Node_Str"").trim();
      String typeName=rs.getString(""String_Node_Str"");
      String columnSize=rs.getString(""String_Node_Str"");
      String decimalDigits=rs.getString(""String_Node_Str"");
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      if (decimalDigits == null) {
        decimalDigits=""String_Node_Str"";
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.9745916515426496
126596,"public static boolean isOracle(DatabaseMetaData metadata){
  if (metadata != null) {
    try {
      String name=metadata.getDatabaseProductName().toUpperCase();
      if (name != null && name.equals(EDatabaseTypeName.ORACLEFORSID.getProduct().toUpperCase())) {
        return true;
      }
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}","public static boolean isOracle(DatabaseMetaData metadata){
  if (metadata != null) {
    try {
      String name=metadata.getDatabaseProductName();
      if (name != null && name.toUpperCase().equals(EDatabaseTypeName.ORACLEFORSID.getProduct().toUpperCase())) {
        return true;
      }
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}",0.9640102827763496
126597,"/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  if (password.startsWith(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX)) {
    String variableName=password.substring(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX.length(),password.length());
    if (!ContextUtils.isJavaKeyWords(variableName)) {
      return password;
    }
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}","/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  String testPassword=password.trim();
  if (testPassword.startsWith(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX)) {
    String variableName=testPassword.substring(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX.length(),testPassword.length());
    if (!ContextUtils.isJavaKeyWords(variableName)) {
      return password;
    }
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}",0.958904109589041
126598,"@Test public void testIsSame4DiffId(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ItemRecord itemRecord2=mock(ItemRecord.class);
  Property property2=mock(Property.class);
  when(itemRecord2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(itemRecord1,itemRecord2));
}","@Test public void testIsSame4DiffId(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ImportItem ImportItem2=mock(ImportItem.class);
  Property property2=mock(Property.class);
  when(ImportItem2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(ImportItem1,ImportItem2));
}",0.8607954545454546
126599,"@Test public void testIsSameName(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSameName(itemRecord1,repViewObj));
}","@Test public void testIsSameName(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSameName(ImportItem1,repViewObj));
}",0.903353057199211
126600,"@Test public void testIsSame4DiffVersion(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ItemRecord itemRecord2=mock(ItemRecord.class);
  Property property2=mock(Property.class);
  when(itemRecord2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(itemRecord1,itemRecord2));
}","@Test public void testIsSame4DiffVersion(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ImportItem ImportItem2=mock(ImportItem.class);
  Property property2=mock(Property.class);
  when(ImportItem2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(ImportItem1,ImportItem2));
}",0.8617771509167842
126601,"@Test public void testLoadItemResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  Resource resource=basicHandler.loadResource(resManager,itemRecord);
  Assert.assertNull(resource);
}","@Test public void testLoadItemResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  Resource resource=basicHandler.loadResource(resManager,ImportItem);
  Assert.assertNull(resource);
}",0.9203778677462888
126602,"@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,ImportItem);
  Assert.assertFalse(ImportItem.getErrors().isEmpty());
  Assert.assertFalse(ImportItem.isValid());
  Assert.assertTrue(ImportItem.getErrors().size() == 1);
}",0.8763693270735524
126603,"@Test public void testCreateResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord processItemRecord=new ItemRecord(processItemPath1);
  Resource processItemResource=basicHandler.createResource(processItemRecord,processItemPath1,false);
  Assert.assertTrue(processItemResource != null);
  Assert.assertTrue(processItemResource.getURI().fileExtension().equals(""String_Node_Str""));
  ItemRecord propertyRecord=new ItemRecord(processPropPath1);
  Resource propertyResource=basicHandler.createResource(propertyRecord,processPropPath1,false);
  Assert.assertTrue(propertyResource != null);
  Assert.assertTrue(propertyResource.getURI().fileExtension().equals(""String_Node_Str""));
}","@Test public void testCreateResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem processImportItem=new ImportItem(processItemPath1);
  Resource processItemResource=basicHandler.createResource(processImportItem,processItemPath1,false);
  Assert.assertTrue(processItemResource != null);
  Assert.assertTrue(processItemResource.getURI().fileExtension().equals(""String_Node_Str""));
  ImportItem propertyRecord=new ImportItem(processPropPath1);
  Resource propertyResource=basicHandler.createResource(propertyRecord,processPropPath1,false);
  Assert.assertTrue(propertyResource != null);
  Assert.assertTrue(propertyResource.getURI().fileExtension().equals(""String_Node_Str""));
}",0.9129834254143646
126604,"@Test public void testIsSame(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  ItemRecord itemRecord2=mock(ItemRecord.class);
  Property property2=mock(Property.class);
  when(itemRecord2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSame(itemRecord1,itemRecord2));
}","@Test public void testIsSame(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  ImportItem ImportItem2=mock(ImportItem.class);
  Property property2=mock(Property.class);
  when(ImportItem2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSame(ImportItem1,ImportItem2));
}",0.4060693641618497
126605,"@Test public void testCheckItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  Assert.assertFalse(basicHandler.checkItem(resManager,itemRecord,false));
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  item.setState(itemState);
  Assert.assertTrue(basicHandler.checkItem(resManager,itemRecord,false));
  itemRecord.setState(State.NAME_AND_ID_EXISTED);
  Assert.assertTrue(basicHandler.checkItem(resManager,itemRecord,true));
  Assert.assertTrue(basicHandler.checkItem(resManager,itemRecord,true));
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testCheckItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  Assert.assertFalse(basicHandler.checkItem(resManager,ImportItem,false));
  Assert.assertFalse(ImportItem.getErrors().isEmpty());
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  item.setState(itemState);
  Assert.assertTrue(basicHandler.checkItem(resManager,ImportItem,false));
  ImportItem.setState(State.NAME_AND_ID_EXISTED);
  Assert.assertTrue(basicHandler.checkItem(resManager,ImportItem,true));
  Assert.assertTrue(basicHandler.checkItem(resManager,ImportItem,true));
  Assert.assertTrue(ImportItem.getErrors().size() == 1);
}",0.9048760991207034
126606,"@Test public void testResolveItem4ValidItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem processItem=createTempProcessItem();
  when(property.getItem()).thenReturn(processItem);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  when(resManager.getStream(processItemPath1)).thenReturn(new InputStream(){
    @Override public int read() throws IOException {
      return 1;
    }
  }
);
  basicHandler.resolveItem(resManager,itemRecord);
  Assert.assertTrue(itemRecord.getErrors().isEmpty());
  Assert.assertTrue(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 0);
}","@Test public void testResolveItem4ValidItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem processItem=createTempProcessItem();
  when(property.getItem()).thenReturn(processItem);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  when(resManager.getStream(processItemPath1)).thenReturn(new InputStream(){
    @Override public int read() throws IOException {
      return 1;
    }
  }
);
  basicHandler.resolveItem(resManager,ImportItem);
  Assert.assertTrue(ImportItem.getErrors().isEmpty());
  Assert.assertTrue(ImportItem.isValid());
  Assert.assertTrue(ImportItem.getErrors().size() == 0);
}",0.9200359389038636
126607,"@Test public void testIsSameName4DiffLabel(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSameName(itemRecord1,repViewObj));
}","@Test public void testIsSameName4DiffLabel(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSameName(ImportItem1,repViewObj));
}",0.9054054054054054
126608,"@Test public void testResolveItem4MissItemFile() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  basicHandler.resolveItem(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testResolveItem4MissItemFile() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  basicHandler.resolveItem(resManager,ImportItem);
  Assert.assertFalse(ImportItem.getErrors().isEmpty());
  Assert.assertFalse(ImportItem.isValid());
  Assert.assertTrue(ImportItem.getErrors().size() == 1);
}",0.9050160085378868
126609,"/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}","/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  if (password.startsWith(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX)) {
    String variableName=password.substring(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX.length(),password.length());
    if (!ContextUtils.isJavaKeyWords(variableName)) {
      return password;
    }
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}",0.7336492890995261
126610,"/** 
 * Removes the column from metadatatable by the name identified, created by Marvin Wang on May 21, 2012.
 * @param orignalColumnName
 * @return the index removed. If no need to remove, return -1.
 */
protected synchronized int removeOriginalColumn(String orignalColumnName){
  int index=-1;
  EList<MetadataColumn> columns=metadataTable.getColumns();
  if (columns != null && !columns.isEmpty()) {
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn mdColumn=columns.get(i);
      String name=mdColumn.getLabel();
      if (name != null && name.equals(orignalColumnName)) {
        metadataTable.getColumns().remove(i);
        index=i;
      }
    }
  }
  return index;
}","/** 
 * Removes the column from metadatatable by the name identified, created by Marvin Wang on May 21, 2012.
 * @param orignalColumnName
 * @return the index removed. If no need to remove, return -1.
 */
protected synchronized int removeOriginalColumn(String orignalColumnName){
  int index=-1;
  EList<MetadataColumn> columns=metadataTable.getColumns();
  if (columns != null && !columns.isEmpty()) {
    for (int i=columns.size() - 1; 0 <= i; i--) {
      MetadataColumn mdColumn=columns.get(i);
      String name=mdColumn.getLabel();
      if (name != null && name.equals(orignalColumnName)) {
        metadataTable.getColumns().remove(i);
        index=i;
      }
    }
  }
  return index;
}",0.9632299927901946
126611,"/** 
 * Removes the column from metadatatable by the name identified, created by Marvin Wang on May 21, 2012.
 * @param orignalColumnName
 * @return the index removed. If no need to remove, return -1.
 */
protected synchronized int removeOriginalColumn(String orignalColumnName){
  int index=-1;
  EList<MetadataColumn> columns=metadataTable.getColumns();
  if (columns != null && !columns.isEmpty()) {
    for (int i=columns.size() - 1; 0 <= i; i--) {
      MetadataColumn mdColumn=columns.get(i);
      String name=mdColumn.getLabel();
      if (name != null && name.equals(orignalColumnName)) {
        metadataTable.getColumns().remove(i);
        index=i;
      }
    }
  }
  return index;
}","/** 
 * Removes the column from metadatatable by the name identified, created by Marvin Wang on May 21, 2012.
 * @param orignalColumnName
 * @return the index removed. If no need to remove, return -1.
 */
protected synchronized int removeOriginalColumn(String orignalColumnName){
  int index=-1;
  EList<MetadataColumn> columns=metadataTable.getColumns();
  if (columns != null && !columns.isEmpty()) {
    Iterator<MetadataColumn> imc=columns.iterator();
    int i=-1;
    while (imc.hasNext()) {
      if (i < 0) {
        i=0;
      }
      MetadataColumn mdColumn=imc.next();
      String name=mdColumn.getLabel();
      if (name != null && name.equals(orignalColumnName)) {
        imc.remove();
        if (index < 0) {
          index=i;
        }
      }
      i++;
    }
  }
  return index;
}",0.8042752171008684
126612,"public MetadataTable getMetadataTable(){
  return null;
}","@Override public MetadataTable getMetadataTable(){
  return null;
}",0.9193548387096774
126613,"public void setSelectedText(String label){
}","@Override public void setSelectedText(String label){
}",0.8979591836734694
126614,"public void updateConnection(){
}","@Override public void updateConnection(){
}",0.868421052631579
126615,"public void redrawLinkers(){
}","@Override public void redrawLinkers(){
}",0.8571428571428571
126616,"public List<FOXTreeNode> getTreeData(){
  return null;
}","@Override public List<FOXTreeNode> getTreeData(){
  return null;
}",0.918032786885246
126617,"/** 
 * Removes the column from metadatatable by the name identified, created by Marvin Wang on May 21, 2012.
 * @param orignalColumnName
 * @return the index removed. If no need to remove, return -1.
 */
protected synchronized int removeOriginalColumn(String orignalColumnName){
  int index=-1;
  EList<MetadataColumn> columns=metadataTable.getColumns();
  if (columns != null && !columns.isEmpty()) {
    for (int i=0; i < columns.size(); i++) {
      MetadataColumn mdColumn=columns.get(i);
      String name=mdColumn.getLabel();
      if (name != null && name.equals(orignalColumnName)) {
        metadataTable.getColumns().remove(i);
        index=i;
      }
    }
  }
  return index;
}","/** 
 * Removes the column from metadatatable by the name identified, created by Marvin Wang on May 21, 2012.
 * @param orignalColumnName
 * @return the index removed. If no need to remove, return -1.
 */
protected synchronized int removeOriginalColumn(String orignalColumnName){
  int index=-1;
  EList<MetadataColumn> columns=metadataTable.getColumns();
  if (columns != null && !columns.isEmpty()) {
    Iterator<MetadataColumn> imc=columns.iterator();
    int i=-1;
    while (imc.hasNext()) {
      if (i < 0) {
        i=0;
      }
      MetadataColumn mdColumn=imc.next();
      String name=mdColumn.getLabel();
      if (name != null && name.equals(orignalColumnName)) {
        imc.remove();
        if (index < 0) {
          index=i;
        }
      }
      i++;
    }
  }
  return index;
}",0.5670241286863271
126618,"public TableViewer getSchemaViewer(){
  return null;
}","@Override public TableViewer getSchemaViewer(){
  return null;
}",0.9152542372881356
126619,"public void updateStatus(){
}","@Override public void updateStatus(){
}",0.8529411764705882
126620,"/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem itemRecord,boolean overwrite){
  try {
    Item item=itemRecord.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=itemRecord.getProperty();
      if (property != null) {
        if (isSameName(itemRecord,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        itemRecord.setState(State.ID_EXISTED);
        itemRecord.setExistingItemWithSameId(itemWithSameIdObj);
        if (!overwrite) {
          itemRecord.addError(Messages.getString(""String_Node_Str""));
        }
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              itemRecord.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        itemRecord.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (!overwrite) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return true;
}","/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem itemRecord,boolean overwrite){
  try {
    Item item=itemRecord.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=itemRecord.getProperty();
      if (property != null) {
        if (isSameName(itemRecord,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        itemRecord.setState(State.ID_EXISTED);
        itemRecord.setExistingItemWithSameId(itemWithSameIdObj);
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              itemRecord.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        itemRecord.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (!overwrite) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return true;
}",0.9798785117691724
126621,"public void executeProcess() throws InvocationTargetException, InterruptedException {
  Display display2=null;
  if (parentShell != null) {
    display2=parentShell.getDisplay();
  }
  final Display display=display2;
  final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
  try {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder1=new InvocationTargetException[1];
        try {
          ProgressDialog.this.run(monitor);
        }
 catch (        InvocationTargetException e) {
          iteHolder1[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
        if (iteHolder1[0] != null) {
          throw iteHolder1[0];
        }
      }
    }
;
    display.syncExec(new Runnable(){
      public void run(){
        final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
        if (timeBeforeShowDialog > 0) {
          progressMonitorDialog.setOpenOnRun(false);
          AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
            public void run(){
              progressMonitorDialog.open();
            }
          }
);
          asynchronousThreading.start();
        }
        try {
          progressMonitorDialog.run(false,true,op);
        }
 catch (        InvocationTargetException e) {
          iteHolder[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
      }
    }
);
  }
 catch (  OperationCanceledException e) {
    throw new InterruptedException(e.getMessage());
  }
  if (iteHolder[0] != null) {
    throw iteHolder[0];
  }
}","public void executeProcess(boolean useAsync) throws InvocationTargetException, InterruptedException {
  Display display2=null;
  if (parentShell != null) {
    display2=parentShell.getDisplay();
  }
  final Display display=display2;
  final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
  try {
    final IRunnableWithProgress op=new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder1=new InvocationTargetException[1];
        try {
          ProgressDialog.this.run(monitor);
        }
 catch (        InvocationTargetException e) {
          iteHolder1[0]=e;
        }
catch (        InterruptedException e) {
          throw new OperationCanceledException(e.getMessage());
        }
        if (iteHolder1[0] != null) {
          throw iteHolder1[0];
        }
      }
    }
;
    if (useAsync) {
      display.asyncExec(new Runnable(){
        public void run(){
          final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
          if (timeBeforeShowDialog > 0) {
            progressMonitorDialog.setOpenOnRun(false);
            AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
              public void run(){
                progressMonitorDialog.open();
              }
            }
);
            asynchronousThreading.start();
          }
          try {
            progressMonitorDialog.run(false,true,op);
          }
 catch (          InvocationTargetException e) {
            iteHolder[0]=e;
          }
catch (          InterruptedException e) {
            throw new OperationCanceledException(e.getMessage());
          }
        }
      }
);
    }
 else {
      display.syncExec(new Runnable(){
        public void run(){
          final ProgressMonitorDialog progressMonitorDialog=new ProgressMonitorDialog(parentShell);
          if (timeBeforeShowDialog > 0) {
            progressMonitorDialog.setOpenOnRun(false);
            AsynchronousThreading asynchronousThreading=new AsynchronousThreading(timeBeforeShowDialog,true,display,new Runnable(){
              public void run(){
                progressMonitorDialog.open();
              }
            }
);
            asynchronousThreading.start();
          }
          try {
            progressMonitorDialog.run(false,true,op);
          }
 catch (          InvocationTargetException e) {
            iteHolder[0]=e;
          }
catch (          InterruptedException e) {
            throw new OperationCanceledException(e.getMessage());
          }
        }
      }
);
    }
  }
 catch (  OperationCanceledException e) {
    throw new InterruptedException(e.getMessage());
  }
  if (iteHolder[0] != null) {
    throw iteHolder[0];
  }
}",0.7973476999585578
126622,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI(),(((Property)object).getItem()).isNeedVersion(),(((Property)object).getItem()).getFileExtension()));
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          if (!(((Property)object).getItem()).isNeedVersion()) {
            possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI(),(((Property)object).getItem()).isNeedVersion(),(((Property)object).getItem()).getFileExtension()));
          }
 else {
            possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
          }
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.9822843407816256
126623,"/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem importItem,boolean overwrite){
  try {
    Item item=importItem.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=importItem.getProperty();
      if (property != null) {
        if (isSameName(importItem,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        importItem.setState(State.ID_EXISTED);
        importItem.setExistingItemWithSameId(itemWithSameIdObj);
        if (!overwrite) {
          importItem.addError(Messages.getString(""String_Node_Str""));
        }
      }
    }
 else {
      if (idAvailable) {
        importItem.setState(State.NAME_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              importItem.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        importItem.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (!overwrite) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && importItem.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(importItem)) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + importItem.getPath(),e);
  }
  return true;
}","/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem importItem,boolean overwrite){
  try {
    Item item=importItem.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    repObjectcache.initialize(itemType);
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    for (    IRepositoryViewObject current : repObjectcache.getItemsFromRepository().get(itemType)) {
      final Property property=importItem.getProperty();
      if (property != null) {
        if (isSameName(importItem,current)) {
          itemWithSameNameObj=current;
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        importItem.setState(State.ID_EXISTED);
        importItem.setExistingItemWithSameId(itemWithSameIdObj);
      }
    }
 else {
      if (idAvailable) {
        importItem.setState(State.NAME_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              importItem.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        importItem.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (!overwrite) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && importItem.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(importItem)) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + importItem.getPath(),e);
  }
  return true;
}",0.9798785117691724
126624,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI(),(((Property)object).getItem()).isNeedVersion(),(((Property)object).getItem()).getFileExtension()));
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          if (!(((Property)object).getItem()).isNeedVersion()) {
            possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI(),(((Property)object).getItem()).isNeedVersion(),(((Property)object).getItem()).getFileExtension()));
          }
 else {
            possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
          }
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.9822843407816256
126625,"/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}","/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  String testPassword=password.trim();
  if (testPassword.startsWith(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX)) {
    String variableName=testPassword.substring(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX.length(),testPassword.length());
    if (!ContextUtils.isJavaKeyWords(variableName)) {
      return password;
    }
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}",0.6998191681735986
126626,"@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  String sql;
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=rs.getString(""String_Node_Str"").trim();
      String typeName=rs.getString(""String_Node_Str"");
      String columnSize=rs.getString(""String_Node_Str"");
      String decimalDigits=rs.getString(""String_Node_Str"");
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  String sql;
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=rs.getString(""String_Node_Str"").trim();
      String typeName=rs.getString(""String_Node_Str"");
      String columnSize=rs.getString(""String_Node_Str"");
      String decimalDigits=rs.getString(""String_Node_Str"");
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      if (decimalDigits == null) {
        decimalDigits=""String_Node_Str"";
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.9745916515426496
126627,"public static boolean isOracle(DatabaseMetaData metadata){
  if (metadata != null) {
    try {
      String name=metadata.getDatabaseProductName().toUpperCase();
      if (name != null && name.equals(EDatabaseTypeName.ORACLEFORSID.getProduct().toUpperCase())) {
        return true;
      }
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}","public static boolean isOracle(DatabaseMetaData metadata){
  if (metadata != null) {
    try {
      String name=metadata.getDatabaseProductName();
      if (name != null && name.toUpperCase().equals(EDatabaseTypeName.ORACLEFORSID.getProduct().toUpperCase())) {
        return true;
      }
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}",0.9640102827763496
126628,"@Test public void testIsSame4DiffId(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ItemRecord itemRecord2=mock(ItemRecord.class);
  Property property2=mock(Property.class);
  when(itemRecord2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(itemRecord1,itemRecord2));
}","@Test public void testIsSame4DiffId(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ImportItem ImportItem2=mock(ImportItem.class);
  Property property2=mock(Property.class);
  when(ImportItem2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(ImportItem1,ImportItem2));
}",0.8607954545454546
126629,"@Test public void testIsSameName(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSameName(itemRecord1,repViewObj));
}","@Test public void testIsSameName(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSameName(ImportItem1,repViewObj));
}",0.903353057199211
126630,"@Test public void testIsSame4DiffVersion(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ItemRecord itemRecord2=mock(ItemRecord.class);
  Property property2=mock(Property.class);
  when(itemRecord2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(itemRecord1,itemRecord2));
}","@Test public void testIsSame4DiffVersion(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getVersion()).thenReturn(""String_Node_Str"");
  ImportItem ImportItem2=mock(ImportItem.class);
  Property property2=mock(Property.class);
  when(ImportItem2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getVersion()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSame(ImportItem1,ImportItem2));
}",0.8617771509167842
126631,"@Test public void testLoadItemResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  Resource resource=basicHandler.loadResource(resManager,itemRecord);
  Assert.assertNull(resource);
}","@Test public void testLoadItemResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  Resource resource=basicHandler.loadResource(resManager,ImportItem);
  Assert.assertNull(resource);
}",0.9203778677462888
126632,"@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testCheckAndSetProject4NoProject(){
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  basicHandler.checkAndSetProject(resManager,ImportItem);
  Assert.assertFalse(ImportItem.getErrors().isEmpty());
  Assert.assertFalse(ImportItem.isValid());
  Assert.assertTrue(ImportItem.getErrors().size() == 1);
}",0.8763693270735524
126633,"@Test public void testCreateResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord processItemRecord=new ItemRecord(processItemPath1);
  Resource processItemResource=basicHandler.createResource(processItemRecord,processItemPath1,false);
  Assert.assertTrue(processItemResource != null);
  Assert.assertTrue(processItemResource.getURI().fileExtension().equals(""String_Node_Str""));
  ItemRecord propertyRecord=new ItemRecord(processPropPath1);
  Resource propertyResource=basicHandler.createResource(propertyRecord,processPropPath1,false);
  Assert.assertTrue(propertyResource != null);
  Assert.assertTrue(propertyResource.getURI().fileExtension().equals(""String_Node_Str""));
}","@Test public void testCreateResource() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem processImportItem=new ImportItem(processItemPath1);
  Resource processItemResource=basicHandler.createResource(processImportItem,processItemPath1,false);
  Assert.assertTrue(processItemResource != null);
  Assert.assertTrue(processItemResource.getURI().fileExtension().equals(""String_Node_Str""));
  ImportItem propertyRecord=new ImportItem(processPropPath1);
  Resource propertyResource=basicHandler.createResource(propertyRecord,processPropPath1,false);
  Assert.assertTrue(propertyResource != null);
  Assert.assertTrue(propertyResource.getURI().fileExtension().equals(""String_Node_Str""));
}",0.9129834254143646
126634,"@Test public void testIsSame(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  ItemRecord itemRecord2=mock(ItemRecord.class);
  Property property2=mock(Property.class);
  when(itemRecord2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSame(itemRecord1,itemRecord2));
}","@Test public void testIsSame(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getId()).thenReturn(""String_Node_Str"");
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  ImportItem ImportItem2=mock(ImportItem.class);
  Property property2=mock(Property.class);
  when(ImportItem2.getProperty()).thenReturn(property2);
  when(property2.getId()).thenReturn(""String_Node_Str"");
  when(property2.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertTrue(basicHandler.isSame(ImportItem1,ImportItem2));
}",0.4060693641618497
126635,"@Test public void testCheckItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  Assert.assertFalse(basicHandler.checkItem(resManager,itemRecord,false));
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  item.setState(itemState);
  Assert.assertTrue(basicHandler.checkItem(resManager,itemRecord,false));
  itemRecord.setState(State.NAME_AND_ID_EXISTED);
  Assert.assertTrue(basicHandler.checkItem(resManager,itemRecord,true));
  Assert.assertTrue(basicHandler.checkItem(resManager,itemRecord,true));
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testCheckItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  Assert.assertFalse(basicHandler.checkItem(resManager,ImportItem,false));
  Assert.assertFalse(ImportItem.getErrors().isEmpty());
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  item.setState(itemState);
  Assert.assertTrue(basicHandler.checkItem(resManager,ImportItem,false));
  ImportItem.setState(State.NAME_AND_ID_EXISTED);
  Assert.assertTrue(basicHandler.checkItem(resManager,ImportItem,true));
  Assert.assertTrue(basicHandler.checkItem(resManager,ImportItem,true));
  Assert.assertTrue(ImportItem.getErrors().size() == 1);
}",0.9048760991207034
126636,"@Test public void testResolveItem4ValidItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem processItem=createTempProcessItem();
  when(property.getItem()).thenReturn(processItem);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  when(resManager.getStream(processItemPath1)).thenReturn(new InputStream(){
    @Override public int read() throws IOException {
      return 1;
    }
  }
);
  basicHandler.resolveItem(resManager,itemRecord);
  Assert.assertTrue(itemRecord.getErrors().isEmpty());
  Assert.assertTrue(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 0);
}","@Test public void testResolveItem4ValidItem() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem processItem=createTempProcessItem();
  when(property.getItem()).thenReturn(processItem);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  pathes.add(processItemPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  when(resManager.getStream(processItemPath1)).thenReturn(new InputStream(){
    @Override public int read() throws IOException {
      return 1;
    }
  }
);
  basicHandler.resolveItem(resManager,ImportItem);
  Assert.assertTrue(ImportItem.getErrors().isEmpty());
  Assert.assertTrue(ImportItem.isValid());
  Assert.assertTrue(ImportItem.getErrors().size() == 0);
}",0.9200359389038636
126637,"@Test public void testIsSameName4DiffLabel(){
  ItemRecord itemRecord1=mock(ItemRecord.class);
  Property property1=mock(Property.class);
  when(itemRecord1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSameName(itemRecord1,repViewObj));
}","@Test public void testIsSameName4DiffLabel(){
  ImportItem ImportItem1=mock(ImportItem.class);
  Property property1=mock(Property.class);
  when(ImportItem1.getProperty()).thenReturn(property1);
  when(property1.getLabel()).thenReturn(""String_Node_Str"");
  IRepositoryViewObject repViewObj=mock(IRepositoryViewObject.class);
  when(repViewObj.getLabel()).thenReturn(""String_Node_Str"");
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  Assert.assertFalse(basicHandler.isSameName(ImportItem1,repViewObj));
}",0.9054054054054054
126638,"@Test public void testResolveItem4MissItemFile() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ItemRecord itemRecord=new ItemRecord(processPropPath1);
  itemRecord.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  itemRecord.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  basicHandler.resolveItem(resManager,itemRecord);
  Assert.assertFalse(itemRecord.getErrors().isEmpty());
  Assert.assertFalse(itemRecord.isValid());
  Assert.assertTrue(itemRecord.getErrors().size() == 1);
}","@Test public void testResolveItem4MissItemFile() throws Exception {
  ImportBasicHandler basicHandler=new ImportBasicHandler();
  ImportItem ImportItem=new ImportItem(processPropPath1);
  ImportItem.setItemName(processPropPath1.lastSegment());
  Property property=mock(Property.class);
  ImportItem.setProperty(property);
  ProcessItem item=PropertiesFactory.eINSTANCE.createProcessItem();
  when(property.getItem()).thenReturn(item);
  ResourcesManager resManager=mock(ResourcesManager.class);
  Set<IPath> pathes=new HashSet<IPath>();
  IPath projPath=new Path(""String_Node_Str"" + FileConstants.LOCAL_PROJECT_FILENAME);
  pathes.add(projPath);
  pathes.add(processPropPath1);
  when(resManager.getPaths()).thenReturn(pathes);
  basicHandler.resolveItem(resManager,ImportItem);
  Assert.assertFalse(ImportItem.getErrors().isEmpty());
  Assert.assertFalse(ImportItem.isValid());
  Assert.assertTrue(ImportItem.getErrors().size() == 1);
}",0.9050160085378868
126639,"/** 
 * DOC sgandon ImportButtonSelectionListener constructor comment.
 * @param item
 */
public ImportButtonSelectionListener(TableItem item){
  this.item=item;
}","/** 
 * DOC sgandon ImportButtonSelectionListener constructor comment.
 * @param item
 */
public ImportButtonSelectionListener(AtomicInteger enabledButtonCount,TableItem item){
  this.item=item;
  this.enabledButtonCount=enabledButtonCount;
}",0.8049382716049382
126640,"@Override public void widgetSelected(SelectionEvent e){
  showImportJarDialog(item);
}","@Override public void widgetSelected(SelectionEvent e){
  showImportJarDialog(enabledButtonCount,item);
}",0.900523560209424
126641,"/** 
 * DOC sgandon Comment method ""updateManualImportedJars"".
 * @param importedJars
 */
private void updateManualImportedJars(String[] importedJars){
  for (  Entry<ModuleToInstall,Button> moduleAndButton : manualInstallButtonMap.entrySet()) {
    String jarName=moduleAndButton.getKey().getName();
    for (    String importedJar : importedJars) {
      if (importedJar.equals(jarName)) {
        moduleAndButton.getValue().setEnabled(false);
      }
    }
  }
}","/** 
 * DOC sgandon Comment method ""updateManualImportedJars"".
 * @param importedJars
 */
private void updateManualImportedJars(AtomicInteger enabledButtonCount,String[] importedJars){
  for (  Entry<ModuleToInstall,Button> moduleAndButton : manualInstallButtonMap.entrySet()) {
    String jarName=moduleAndButton.getKey().getName();
    for (    String importedJar : importedJars) {
      if (importedJar.equals(jarName)) {
        moduleAndButton.getValue().setEnabled(false);
        enabledButtonCount.decrementAndGet();
      }
    }
  }
  if (enabledButtonCount.get() == 0) {
    close();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
  }
}",0.6768558951965066
126642,"protected void addInstallButtons(){
  final AtomicInteger enabledButtonCount=new AtomicInteger(0);
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  manualInstallButtonMap=new HashMap<ModuleToInstall,Button>();
  ILibrariesService librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  disposePreviousEditors();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    installButtonsEditors.add(editor);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      boolean isInstalled=false;
      try {
        isInstalled=librariesService.getLibraryStatus(data.getName()) == ELibraryInstallStatus.INSTALLED;
      }
 catch (      BusinessException e1) {
        log.error(e1);
      }
      boolean hasDownloadUrl=data.getUrl_description() != null;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        enabledButtonCount.incrementAndGet();
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            table.select(table.indexOf(item));
            launchIndividualDownload(enabledButtonCount,data,button);
          }
        }
);
        button.setEnabled(!isInstalled);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout(hasDownloadUrl ? 2 : 1,false);
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        if (hasDownloadUrl) {
          Link openLink=new Link(composite,SWT.NONE);
          GridDataFactory.fillDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(openLink);
          openLink.setBackground(color);
          openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
          openLink.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            final SelectionEvent e){
              Program.launch(data.getUrl_description());
            }
          }
);
        }
        Button importButton=new Button(composite,SWT.FLAT);
        importButton.setImage(ImageProvider.getImage(ECoreImage.IMPORT_JAR));
        importButton.setToolTipText(Messages.getString(""String_Node_Str""));
        importButton.addSelectionListener(new ImportButtonSelectionListener(item));
        manualInstallButtonMap.put(data,importButton);
        GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).grab(true,false).applyTo(importButton);
        importButton.setEnabled(!isInstalled);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installcolumn));
      editor.layout();
      editor=new TableEditor(table);
      installButtonsEditors.add(editor);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + (hasDownloadUrl ? data.getUrl_description() : ""String_Node_Str"") + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlcolumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}","protected void addInstallButtons(){
  final AtomicInteger enabledButtonCount=new AtomicInteger(0);
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  manualInstallButtonMap=new HashMap<ModuleToInstall,Button>();
  ILibrariesService librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  disposePreviousEditors();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    installButtonsEditors.add(editor);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      boolean isInstalled=false;
      try {
        isInstalled=librariesService.getLibraryStatus(data.getName()) == ELibraryInstallStatus.INSTALLED;
      }
 catch (      BusinessException e1) {
        log.error(e1);
      }
      boolean hasDownloadUrl=data.getUrl_description() != null;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        enabledButtonCount.incrementAndGet();
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            table.select(table.indexOf(item));
            launchIndividualDownload(enabledButtonCount,data,button);
          }
        }
);
        button.setEnabled(!isInstalled);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout(hasDownloadUrl ? 2 : 1,false);
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        if (hasDownloadUrl) {
          Link openLink=new Link(composite,SWT.NONE);
          GridDataFactory.fillDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(openLink);
          openLink.setBackground(color);
          openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
          openLink.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            final SelectionEvent e){
              Program.launch(data.getUrl_description());
            }
          }
);
        }
        enabledButtonCount.incrementAndGet();
        Button importButton=new Button(composite,SWT.FLAT);
        importButton.setImage(ImageProvider.getImage(ECoreImage.IMPORT_JAR));
        importButton.setToolTipText(Messages.getString(""String_Node_Str""));
        importButton.addSelectionListener(new ImportButtonSelectionListener(enabledButtonCount,item));
        manualInstallButtonMap.put(data,importButton);
        GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).grab(true,false).applyTo(importButton);
        importButton.setEnabled(!isInstalled);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installcolumn));
      editor.layout();
      editor=new TableEditor(table);
      installButtonsEditors.add(editor);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + (hasDownloadUrl ? data.getUrl_description() : ""String_Node_Str"") + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlcolumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}",0.9926512153759186
126643,"/** 
 * DOC sgandon Comment method ""showImportJarDialog"".
 * @param item
 */
public void showImportJarDialog(TableItem item){
  String[] importedJars=new ImportExternalJarAction().handleImportJarDialog(getShell());
  updateManualImportedJars(importedJars);
}","/** 
 * DOC sgandon Comment method ""showImportJarDialog"".
 * @param item
 */
public void showImportJarDialog(AtomicInteger enabledButtonCount,TableItem item){
  String[] importedJars=new ImportExternalJarAction().handleImportJarDialog(getShell());
  updateManualImportedJars(enabledButtonCount,importedJars);
}",0.908450704225352
126644,"@Override public void setParameters(IElement element,IMetadataTable metadataTable,String schema,String realTableName,boolean isJdbc){
  super.setParameters(element,metadataTable,schema,realTableName,isJdbc);
  standardSyntax=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.AS400_SQL_SEG);
  if (getElement() != null) {
    IElementParameter parentParam=getElement().getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (parentParam != null && parentParam.getChildParameters() != null) {
      IElementParameter param=parentParam.getChildParameters().get(""String_Node_Str"");
      if (param != null && ""String_Node_Str"".equals(param.getValue())) {
        param=parentParam.getChildParameters().get(""String_Node_Str"");
        if (param != null && param.getValue() != null) {
          try {
            IRepositoryViewObject lastVersion=CorePlugin.getDefault().getProxyRepositoryFactory().getLastVersion((String)param.getValue());
            if (lastVersion != null) {
              Item item=lastVersion.getProperty().getItem();
              if (item != null && item instanceof DatabaseConnectionItem) {
                standardSyntax=((DatabaseConnection)((DatabaseConnectionItem)item).getConnection()).isStandardSQL();
              }
            }
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}","@Override public void setParameters(IElement element,IMetadataTable metadataTable,String schema,String realTableName,boolean isJdbc){
  super.setParameters(element,metadataTable,schema,realTableName,isJdbc);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
    ICoreUIService service=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
    standardSyntax=service.getPreferenceStore().getBoolean(ITalendCorePrefConstants.AS400_SQL_SEG);
  }
  if (getElement() != null) {
    IElementParameter parentParam=getElement().getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (parentParam != null && parentParam.getChildParameters() != null) {
      IElementParameter param=parentParam.getChildParameters().get(""String_Node_Str"");
      if (param != null && ""String_Node_Str"".equals(param.getValue())) {
        param=parentParam.getChildParameters().get(""String_Node_Str"");
        if (param != null && param.getValue() != null) {
          try {
            IRepositoryViewObject lastVersion=CorePlugin.getDefault().getProxyRepositoryFactory().getLastVersion((String)param.getValue());
            if (lastVersion != null) {
              Item item=lastVersion.getProperty().getItem();
              if (item != null && item instanceof DatabaseConnectionItem) {
                standardSyntax=((DatabaseConnection)((DatabaseConnectionItem)item).getConnection()).isStandardSQL();
              }
            }
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}",0.923927178153446
126645,"public static String getEncryptedValue(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  try {
    String removeQuotes=TalendQuoteUtils.removeQuotes(value);
    removeQuotes=TalendQuoteUtils.checkSlashAndRemoveQuotation(removeQuotes);
    removeQuotes=TalendQuoteUtils.checkAndRemoveBackslashes(removeQuotes);
    value=PasswordEncryptUtil.encryptPassword(removeQuotes);
    value=TalendQuoteUtils.addQuotes(value,TalendQuoteUtils.QUOTATION_MARK);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return value;
}","public static String getEncryptedValue(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  try {
    String removeQuotes=TalendQuoteUtils.removeQuotes(value);
    removeQuotes=TalendQuoteUtils.checkSlashAndRemoveQuotation(removeQuotes);
    removeQuotes=TalendQuoteUtils.checkAndRemoveBackslashes(removeQuotes);
    value=PasswordEncryptUtil.encryptPasswordHex(removeQuotes);
    value=TalendQuoteUtils.addQuotes(value,TalendQuoteUtils.QUOTATION_MARK);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return value;
}",0.9974070872947276
126646,"/** 
 * Getter for linksManager.
 * @return the linksManager
 */
protected LinksManager<TableItem,D1,Table,D2> getLinksManager(){
  return this.linksManager;
}","/** 
 * Getter for linksManager.
 * @return the linksManager
 */
public LinksManager<TableItem,D1,Table,D2> getLinksManager(){
  return this.linksManager;
}",0.9650793650793652
126647,"private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId() + ""String_Node_Str"" + ((Query)parameter).getLabel();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations,true){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  List<Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.7608100711548987
126648,"public RepositoryUpdateManager(Object parameter,List<Relation> relations,boolean isDetectAndUpdate){
  super();
  this.parameter=parameter;
  this.relations=relations;
  this.isDetectAndUpdate=isDetectAndUpdate;
}","public RepositoryUpdateManager(Object parameter,List<Relation> relations){
  this.parameter=parameter;
  this.relations=relations;
}",0.7652173913043478
126649,"public List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types){
  if (types == null || types.isEmpty()) {
    return null;
  }
  List<IProcess2> openedProcessList=CoreRuntimePlugin.getInstance().getDesignerCoreService().getOpenedProcess(RepositoryUpdateManager.getEditors());
  try {
    List<UpdateResult> resultList=new ArrayList<UpdateResult>();
    if (enableCheckItem()) {
      checkJobItems(parentMonitor,types,openedProcessList);
    }
    for (    IProcess2 process : openedProcessList) {
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(RepositoryUpdateManager.getUpdateJobInfor(process.getProperty()));
      List<UpdateResult> resultFromProcess=getResultFromProcess(process,types);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
    List<UpdateResult> otherUpdateResults=getOtherUpdateResults(parentMonitor,openedProcessList,types);
    if (otherUpdateResults != null) {
      resultList.addAll(otherUpdateResults);
    }
    parentMonitor.done();
    return resultList;
  }
 catch (  PersistenceException e) {
  }
  return null;
}","public List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types){
  if (types == null || types.isEmpty()) {
    return null;
  }
  List<IProcess2> openedProcessList=CoreRuntimePlugin.getInstance().getDesignerCoreService().getOpenedProcess(RepositoryUpdateManager.getEditors());
  try {
    List<UpdateResult> resultList=new ArrayList<UpdateResult>();
    if (enableCheckItem()) {
      resultList.addAll(checkJobItems(parentMonitor,types,openedProcessList));
    }
    for (    IProcess2 process : openedProcessList) {
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(RepositoryUpdateManager.getUpdateJobInfor(process.getProperty()));
      List<UpdateResult> resultFromProcess=getResultFromProcess(process,types);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
    List<UpdateResult> otherUpdateResults=getOtherUpdateResults(parentMonitor,openedProcessList,types);
    if (otherUpdateResults != null) {
      resultList.addAll(otherUpdateResults);
    }
    parentMonitor.done();
    return resultList;
  }
 catch (  PersistenceException e) {
  }
  return null;
}",0.9921390153082332
126650,"private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  List<IRepositoryViewObject> updateList=new ArrayList<IRepositoryViewObject>();
  List<Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId() + ""String_Node_Str"" + ((Query)parameter).getLabel();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations,true){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","private static boolean updateQueryObject(Object parameter,boolean show,boolean onlySimpleShow,RepositoryNode node){
  Item item=node.getObject().getProperty().getItem();
  List<Relation> relations=null;
  if (parameter instanceof Query) {
    String id=item.getProperty().getId();
    relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(id,RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.QUERY_RELATION);
  }
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(parameter,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_QUERY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.7608100711548987
126651,"public RepositoryUpdateManager(Object parameter,List<Relation> relations,boolean isDetectAndUpdate){
  super();
  this.parameter=parameter;
  this.relations=relations;
  this.isDetectAndUpdate=isDetectAndUpdate;
}","public RepositoryUpdateManager(Object parameter,List<Relation> relations){
  this.parameter=parameter;
  this.relations=relations;
}",0.7652173913043478
126652,"public List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types){
  if (types == null || types.isEmpty()) {
    return null;
  }
  List<IProcess2> openedProcessList=CoreRuntimePlugin.getInstance().getDesignerCoreService().getOpenedProcess(RepositoryUpdateManager.getEditors());
  try {
    List<UpdateResult> resultList=new ArrayList<UpdateResult>();
    if (enableCheckItem()) {
      checkJobItems(parentMonitor,types,openedProcessList);
    }
    for (    IProcess2 process : openedProcessList) {
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(RepositoryUpdateManager.getUpdateJobInfor(process.getProperty()));
      List<UpdateResult> resultFromProcess=getResultFromProcess(process,types);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
    List<UpdateResult> otherUpdateResults=getOtherUpdateResults(parentMonitor,openedProcessList,types);
    if (otherUpdateResults != null) {
      resultList.addAll(otherUpdateResults);
    }
    parentMonitor.done();
    return resultList;
  }
 catch (  PersistenceException e) {
  }
  return null;
}","public List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types){
  if (types == null || types.isEmpty()) {
    return null;
  }
  List<IProcess2> openedProcessList=CoreRuntimePlugin.getInstance().getDesignerCoreService().getOpenedProcess(RepositoryUpdateManager.getEditors());
  try {
    List<UpdateResult> resultList=new ArrayList<UpdateResult>();
    if (enableCheckItem()) {
      resultList.addAll(checkJobItems(parentMonitor,types,openedProcessList));
    }
    for (    IProcess2 process : openedProcessList) {
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(RepositoryUpdateManager.getUpdateJobInfor(process.getProperty()));
      List<UpdateResult> resultFromProcess=getResultFromProcess(process,types);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
    List<UpdateResult> otherUpdateResults=getOtherUpdateResults(parentMonitor,openedProcessList,types);
    if (otherUpdateResults != null) {
      resultList.addAll(otherUpdateResults);
    }
    parentMonitor.done();
    return resultList;
  }
 catch (  PersistenceException e) {
  }
  return null;
}",0.9921390153082332
126653,"public static String renameValues(final String value,final String oldName,final String newName,boolean flag){
  if (value == null || oldName == null || newName == null) {
    return value;
  }
  PatternCompiler compiler=new Perl5Compiler();
  Perl5Matcher matcher=new Perl5Matcher();
  matcher.setMultiline(true);
  Perl5Substitution substitution=new Perl5Substitution(newName + ""String_Node_Str"",Perl5Substitution.INTERPOLATE_ALL);
  Pattern pattern;
  try {
    pattern=compiler.compile(getQuotePattern(oldName));
  }
 catch (  MalformedPatternException e) {
    return value;
  }
  if (matcher.contains(value,pattern)) {
    String returnValue=""String_Node_Str"";
    if (value.contains(TalendQuoteUtils.getQuoteChar()) && !flag) {
      returnValue=splitQueryData(matcher,pattern,substitution,value,Util.SUBSTITUTE_ALL);
    }
 else {
      returnValue=Util.substitute(matcher,pattern,substitution,value,Util.SUBSTITUTE_ALL);
    }
    return returnValue;
  }
  return value;
}","public static String renameValues(final String value,final String oldName,final String newName,boolean flag){
  if (value == null || oldName == null || newName == null) {
    return value;
  }
  PatternCompiler compiler=new Perl5Compiler();
  Perl5Matcher matcher=new Perl5Matcher();
  matcher.setMultiline(true);
  Perl5Substitution substitution=new Perl5Substitution(newName + ""String_Node_Str"",Perl5Substitution.INTERPOLATE_ALL);
  Pattern pattern;
  try {
    pattern=compiler.compile(getQuotePattern(oldName));
  }
 catch (  MalformedPatternException e) {
    return value;
  }
  if (matcher.contains(value,pattern)) {
    String returnValue=""String_Node_Str"";
    if (value.contains(TalendQuoteUtils.getQuoteChar()) && !flag) {
      returnValue=splitQueryData(oldName,newName,value);
    }
 else {
      returnValue=Util.substitute(matcher,pattern,substitution,value,Util.SUBSTITUTE_ALL);
    }
    return returnValue;
  }
  return value;
}",0.881162428645563
126654,"public static String splitQueryData(PatternMatcher matcher,Pattern pattern,Substitution sub,String value,int numSubs){
  String[] split=value.split(""String_Node_Str"");
  int i=0;
  String replace=""String_Node_Str"";
  for (  String s : split) {
    if (i % 2 == 0) {
      replace=s;
      if (i != 0) {
        if (matcher.contains(value,pattern)) {
          replace=split[i].toString();
          split[i]=Util.substitute(matcher,pattern,sub,replace,numSubs);
        }
      }
    }
    i++;
  }
  String returnValue=""String_Node_Str"";
  for (int t=1; t < split.length; t++) {
    if (t % 2 == 0) {
      returnValue+=split[t];
    }
 else {
      returnValue+=""String_Node_Str"" + split[t] + ""String_Node_Str"";
    }
  }
  return returnValue;
}","public static String splitQueryData(String oldName,String newName,String value){
  String regex=""String_Node_Str"";
  String[] split=value.split(regex);
  Map<String,String> replacedStrings=new HashMap<String,String>();
  String returnValue=""String_Node_Str"";
  for (  String s : split) {
    if (s.contains(oldName)) {
      replacedStrings.put(s,s.replaceAll(""String_Node_Str"" + oldName + ""String_Node_Str"",newName));
    }
  }
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(value);
  if (matcher.find()) {
    int x=matcher.start();
    int y=matcher.end();
    int curPos=0;
    int valueLength=value.length();
    String oldFill=null;
    String newFill=null;
    while (true) {
      if (curPos == valueLength) {
        break;
      }
      if (curPos < x) {
        oldFill=value.substring(curPos,x);
        if ((newFill=replacedStrings.get(oldFill)) != null) {
          returnValue+=newFill;
        }
 else {
          returnValue+=oldFill;
        }
        curPos=x;
        continue;
      }
      returnValue+=matcher.group();
      curPos=y;
      if (!matcher.find()) {
        x=valueLength;
      }
 else {
        x=matcher.start();
        y=matcher.end();
      }
    }
  }
  return returnValue;
}",0.1677355698075974
126655,"public static String getEncryptedValue(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  try {
    value=PasswordEncryptUtil.encryptPasswordHex(TalendQuoteUtils.removeQuotes(value));
    value=TalendQuoteUtils.addQuotes(value,TalendQuoteUtils.QUOTATION_MARK);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return value;
}","public static String getEncryptedValue(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  try {
    String removeQuotes=TalendQuoteUtils.removeQuotes(value);
    removeQuotes=TalendQuoteUtils.checkSlashAndRemoveQuotation(removeQuotes);
    removeQuotes=TalendQuoteUtils.checkAndRemoveBackslashes(removeQuotes);
    value=PasswordEncryptUtil.encryptPasswordHex(removeQuotes);
    value=TalendQuoteUtils.addQuotes(value,TalendQuoteUtils.QUOTATION_MARK);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return value;
}",0.7285861713106295
126656,"public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (StringUtils.countMatches(value,""String_Node_Str"") == 2 && value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}",0.6729857819905213
126657,"/** 
 * DOC ycbai Comment method ""applyMigrationTasks"".
 * @param itemRecord
 * @param monitor
 */
private void applyMigrationTasks(ItemRecord itemRecord,IProgressMonitor monitor){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
    IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    Context ctx=CoreRuntimePlugin.getInstance().getContext();
    RepositoryContext repositoryContext=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
    org.talend.core.model.general.Project project=repositoryContext.getProject();
    ERepositoryObjectType repositoryType=itemRecord.getRepositoryType();
    Item item=null;
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(ProjectManager.getInstance().getCurrentProject(),itemRecord.getItemId(),itemRecord.getImportPath(),repositoryType);
      for (      IRepositoryViewObject repositoryObject : allVersion) {
        if (repositoryObject.getProperty().getVersion().equals(itemRecord.getItemVersion())) {
          item=repositoryObject.getProperty().getItem();
        }
      }
      if (item == null) {
        return;
      }
      migrationService.executeMigrationTasksForImport(project,item,itemRecord.getMigrationTasksToApply(),monitor);
      itemRecord.setExistingItemWithSameId(null);
      itemRecord.clear();
      itemRecord.setProperty(item.getProperty());
    }
 catch (    Exception e) {
      logError(e);
    }
  }
}","/** 
 * DOC ycbai Comment method ""applyMigrationTasks"".
 * @param itemRecord
 * @param monitor
 */
protected void applyMigrationTasks(ItemRecord itemRecord,IProgressMonitor monitor){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
    IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    Context ctx=CoreRuntimePlugin.getInstance().getContext();
    RepositoryContext repositoryContext=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
    org.talend.core.model.general.Project project=repositoryContext.getProject();
    ERepositoryObjectType repositoryType=itemRecord.getRepositoryType();
    Item item=null;
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(ProjectManager.getInstance().getCurrentProject(),itemRecord.getItemId(),itemRecord.getImportPath(),repositoryType);
      for (      IRepositoryViewObject repositoryObject : allVersion) {
        if (repositoryObject.getProperty().getVersion().equals(itemRecord.getItemVersion())) {
          item=repositoryObject.getProperty().getItem();
        }
      }
      if (item == null) {
        return;
      }
      migrationService.executeMigrationTasksForImport(project,item,itemRecord.getMigrationTasksToApply(),monitor);
      itemRecord.setExistingItemWithSameId(null);
      itemRecord.clear();
      itemRecord.setProperty(item.getProperty());
    }
 catch (    Exception e) {
      logError(e);
    }
  }
}",0.9962025316455696
126658,"@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  if (!selectedItemRecord.isValid()) {
    return;
  }
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=selectedItemRecord.getLabel();
  for (  Resource resource : selectedItemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  if (!selectedItemRecord.isValid()) {
    return;
  }
  doImportItem(monitor,resManager,selectedItemRecord,overwrite,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  String label=selectedItemRecord.getLabel();
  for (  Resource resource : selectedItemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.1706484641638225
126659,"@Override public void setParameters(IElement element,IMetadataTable metadataTable,String schema,String realTableName,boolean isJdbc){
  super.setParameters(element,metadataTable,schema,realTableName,isJdbc);
  standardSyntax=CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.AS400_SQL_SEG);
  if (getElement() != null) {
    IElementParameter parentParam=getElement().getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (parentParam != null && parentParam.getChildParameters() != null) {
      IElementParameter param=parentParam.getChildParameters().get(""String_Node_Str"");
      if (param != null && ""String_Node_Str"".equals(param.getValue())) {
        param=parentParam.getChildParameters().get(""String_Node_Str"");
        if (param != null && param.getValue() != null) {
          try {
            IRepositoryViewObject lastVersion=CorePlugin.getDefault().getProxyRepositoryFactory().getLastVersion((String)param.getValue());
            if (lastVersion != null) {
              Item item=lastVersion.getProperty().getItem();
              if (item != null && item instanceof DatabaseConnectionItem) {
                standardSyntax=((DatabaseConnection)((DatabaseConnectionItem)item).getConnection()).isStandardSQL();
              }
            }
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}","@Override public void setParameters(IElement element,IMetadataTable metadataTable,String schema,String realTableName,boolean isJdbc){
  super.setParameters(element,metadataTable,schema,realTableName,isJdbc);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
    ICoreUIService service=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
    standardSyntax=service.getPreferenceStore().getBoolean(ITalendCorePrefConstants.AS400_SQL_SEG);
  }
  if (getElement() != null) {
    IElementParameter parentParam=getElement().getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (parentParam != null && parentParam.getChildParameters() != null) {
      IElementParameter param=parentParam.getChildParameters().get(""String_Node_Str"");
      if (param != null && ""String_Node_Str"".equals(param.getValue())) {
        param=parentParam.getChildParameters().get(""String_Node_Str"");
        if (param != null && param.getValue() != null) {
          try {
            IRepositoryViewObject lastVersion=CorePlugin.getDefault().getProxyRepositoryFactory().getLastVersion((String)param.getValue());
            if (lastVersion != null) {
              Item item=lastVersion.getProperty().getItem();
              if (item != null && item instanceof DatabaseConnectionItem) {
                standardSyntax=((DatabaseConnection)((DatabaseConnectionItem)item).getConnection()).isStandardSQL();
              }
            }
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}",0.923927178153446
126660,"/** 
 * Get DatabaseConnection Instance
 * @param dbUrlType the type of you want to fill database
 * @return
 */
public static MetadataFillFactory getDBInstance(SupportDBUrlType dbUrlType){
  if (instance == null) {
    instance=new MetadataFillFactory();
  }
switch (dbUrlType) {
case SYBASEDEFAULTURL:
    metadataFiller=new SybaseConnectionFillerImpl();
  break;
default :
metadataFiller=DBmetadataFiller;
}
return instance;
}","/** 
 * Get DatabaseConnection Instance
 * @param eDatabaseType the type of you want to fill database
 * @return
 */
public static MetadataFillFactory getDBInstance(EDatabaseTypeName eDatabaseType){
  if (instance == null) {
    instance=new MetadataFillFactory();
  }
switch (eDatabaseType) {
case SYBASEASE:
case SYBASEIQ:
    metadataFiller=new SybaseConnectionFillerImpl();
  break;
default :
metadataFiller=DBmetadataFiller;
}
return instance;
}",0.89419795221843
126661,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      SupportDBUrlType currentDBUrlType=SupportDBUrlType.getDBTypeByKey(metaConnection.getDbType());
      MetadataFillFactory.getDBInstance(currentDBUrlType).fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.createConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData databaseMetaData=null;
        if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metaConnection.getDbType())) {
          databaseMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
        }
 else {
          databaseMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
        }
        if (sqlConn != null) {
          MetadataFillFactory.getDBInstance(currentDBUrlType).fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
          MetadataFillFactory.getDBInstance(currentDBUrlType).fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    closeDerbyDriver();
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metaConnection.getDbType());
      if (currentEDatabaseType != null) {
        MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(currentEDatabaseType);
        dbInstance.fillUIConnParams(metaConnection,dbConn);
        sqlConn=MetadataConnectionUtils.createConnection(metaConnection).getObject();
        if (sqlConn != null) {
          DatabaseMetaData databaseMetaData=null;
          if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metaConnection.getDbType())) {
            databaseMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
          }
 else {
            databaseMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
          }
          if (sqlConn != null) {
            MetadataFillFactory.getDBInstance(currentEDatabaseType).fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
            MetadataFillFactory.getDBInstance(currentEDatabaseType).fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
          }
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    closeDerbyDriver();
  }
  return dbConn;
}",0.8946041351487645
126662,"/** 
 * DOC sgandon ImportButtonSelectionListener constructor comment.
 * @param item
 */
public ImportButtonSelectionListener(TableItem item){
  this.item=item;
}","/** 
 * DOC sgandon ImportButtonSelectionListener constructor comment.
 * @param item
 */
public ImportButtonSelectionListener(AtomicInteger enabledButtonCount,TableItem item){
  this.item=item;
  this.enabledButtonCount=enabledButtonCount;
}",0.8049382716049382
126663,"@Override public void widgetSelected(SelectionEvent e){
  showImportJarDialog(item);
}","@Override public void widgetSelected(SelectionEvent e){
  showImportJarDialog(enabledButtonCount,item);
}",0.900523560209424
126664,"/** 
 * DOC sgandon Comment method ""updateManualImportedJars"".
 * @param importedJars
 */
private void updateManualImportedJars(String[] importedJars){
  for (  Entry<ModuleToInstall,Button> moduleAndButton : manualInstallButtonMap.entrySet()) {
    String jarName=moduleAndButton.getKey().getName();
    for (    String importedJar : importedJars) {
      if (importedJar.equals(jarName)) {
        moduleAndButton.getValue().setEnabled(false);
      }
    }
  }
}","/** 
 * DOC sgandon Comment method ""updateManualImportedJars"".
 * @param importedJars
 */
private void updateManualImportedJars(AtomicInteger enabledButtonCount,String[] importedJars){
  for (  Entry<ModuleToInstall,Button> moduleAndButton : manualInstallButtonMap.entrySet()) {
    String jarName=moduleAndButton.getKey().getName();
    for (    String importedJar : importedJars) {
      if (importedJar.equals(jarName)) {
        moduleAndButton.getValue().setEnabled(false);
        enabledButtonCount.decrementAndGet();
      }
    }
  }
  if (enabledButtonCount.get() == 0) {
    close();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
  }
}",0.6768558951965066
126665,"protected void addInstallButtons(){
  final AtomicInteger enabledButtonCount=new AtomicInteger(0);
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  manualInstallButtonMap=new HashMap<ModuleToInstall,Button>();
  ILibrariesService librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  disposePreviousEditors();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    installButtonsEditors.add(editor);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      boolean isInstalled=false;
      try {
        isInstalled=librariesService.getLibraryStatus(data.getName()) == ELibraryInstallStatus.INSTALLED;
      }
 catch (      BusinessException e1) {
        log.error(e1);
      }
      boolean hasDownloadUrl=data.getUrl_description() != null;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        enabledButtonCount.incrementAndGet();
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            table.select(table.indexOf(item));
            launchIndividualDownload(enabledButtonCount,data,button);
          }
        }
);
        button.setEnabled(!isInstalled);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout(hasDownloadUrl ? 2 : 1,false);
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        if (hasDownloadUrl) {
          Link openLink=new Link(composite,SWT.NONE);
          GridDataFactory.fillDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(openLink);
          openLink.setBackground(color);
          openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
          openLink.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            final SelectionEvent e){
              Program.launch(data.getUrl_description());
            }
          }
);
        }
        Button importButton=new Button(composite,SWT.FLAT);
        importButton.setImage(ImageProvider.getImage(ECoreImage.IMPORT_JAR));
        importButton.setToolTipText(Messages.getString(""String_Node_Str""));
        importButton.addSelectionListener(new ImportButtonSelectionListener(item));
        manualInstallButtonMap.put(data,importButton);
        GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).grab(true,false).applyTo(importButton);
        importButton.setEnabled(!isInstalled);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installcolumn));
      editor.layout();
      editor=new TableEditor(table);
      installButtonsEditors.add(editor);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + (hasDownloadUrl ? data.getUrl_description() : ""String_Node_Str"") + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlcolumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}","protected void addInstallButtons(){
  final AtomicInteger enabledButtonCount=new AtomicInteger(0);
  tableViewerCreator.getTableViewer().getControl().setRedraw(false);
  final Table table=tableViewerCreator.getTable();
  manualInstallButtonMap=new HashMap<ModuleToInstall,Button>();
  ILibrariesService librariesService=LibManagerUiPlugin.getDefault().getLibrariesService();
  disposePreviousEditors();
  for (  final TableItem item : table.getItems()) {
    TableEditor editor=new TableEditor(table);
    installButtonsEditors.add(editor);
    Control control=null;
    Object obj=item.getData();
    if (obj instanceof ModuleToInstall) {
      final ModuleToInstall data=(ModuleToInstall)obj;
      boolean isInstalled=false;
      try {
        isInstalled=librariesService.getLibraryStatus(data.getName()) == ELibraryInstallStatus.INSTALLED;
      }
 catch (      BusinessException e1) {
        log.error(e1);
      }
      boolean hasDownloadUrl=data.getUrl_description() != null;
      if (data.getUrl_download() != null) {
        final Button button=new Button(table,SWT.FLAT);
        control=button;
        enabledButtonCount.incrementAndGet();
        button.setText(Messages.getString(""String_Node_Str""));
        button.setData(item);
        button.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            table.select(table.indexOf(item));
            launchIndividualDownload(enabledButtonCount,data,button);
          }
        }
);
        button.setEnabled(!isInstalled);
      }
 else {
        Composite composite=new Composite(table,SWT.NONE);
        composite.setBackground(color);
        control=composite;
        GridLayout layout=new GridLayout(hasDownloadUrl ? 2 : 1,false);
        layout.marginHeight=0;
        layout.verticalSpacing=1;
        composite.setLayout(layout);
        if (hasDownloadUrl) {
          Link openLink=new Link(composite,SWT.NONE);
          GridDataFactory.fillDefaults().align(SWT.CENTER,SWT.CENTER).applyTo(openLink);
          openLink.setBackground(color);
          openLink.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str"") + ""String_Node_Str"");
          openLink.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            final SelectionEvent e){
              Program.launch(data.getUrl_description());
            }
          }
);
        }
        enabledButtonCount.incrementAndGet();
        Button importButton=new Button(composite,SWT.FLAT);
        importButton.setImage(ImageProvider.getImage(ECoreImage.IMPORT_JAR));
        importButton.setToolTipText(Messages.getString(""String_Node_Str""));
        importButton.addSelectionListener(new ImportButtonSelectionListener(enabledButtonCount,item));
        manualInstallButtonMap.put(data,importButton);
        GridDataFactory.fillDefaults().align(SWT.RIGHT,SWT.CENTER).grab(true,false).applyTo(importButton);
        importButton.setEnabled(!isInstalled);
      }
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(control,item,tableViewerCreator.getColumns().indexOf(installcolumn));
      editor.layout();
      editor=new TableEditor(table);
      installButtonsEditors.add(editor);
      Composite composite=new Composite(table,SWT.NONE);
      composite.setBackground(color);
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginRight=0;
      layout.verticalSpacing=1;
      composite.setLayout(layout);
      GridData gData=new GridData(GridData.FILL_HORIZONTAL);
      final Link openLink=new Link(composite,SWT.NONE);
      openLink.setLayoutData(gData);
      openLink.setBackground(color);
      openLink.setText(""String_Node_Str"" + (hasDownloadUrl ? data.getUrl_description() : ""String_Node_Str"") + ""String_Node_Str"");
      openLink.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        final SelectionEvent e){
          Program.launch(data.getUrl_description());
        }
      }
);
      editor.grabHorizontal=true;
      editor.minimumHeight=20;
      editor.setEditor(composite,item,tableViewerCreator.getColumns().indexOf(urlcolumn));
      editor.layout();
    }
  }
  tableViewerCreator.getTableViewer().getTable().layout();
  tableViewerCreator.getTableViewer().refresh(true);
  tableViewerCreator.getTableViewer().getControl().setRedraw(true);
}",0.9926512153759186
126666,"/** 
 * DOC sgandon Comment method ""showImportJarDialog"".
 * @param item
 */
public void showImportJarDialog(TableItem item){
  String[] importedJars=new ImportExternalJarAction().handleImportJarDialog(getShell());
  updateManualImportedJars(importedJars);
}","/** 
 * DOC sgandon Comment method ""showImportJarDialog"".
 * @param item
 */
public void showImportJarDialog(AtomicInteger enabledButtonCount,TableItem item){
  String[] importedJars=new ImportExternalJarAction().handleImportJarDialog(getShell());
  updateManualImportedJars(enabledButtonCount,importedJars);
}",0.908450704225352
126667,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataFillFactory#getDBInstance(org.talend.core.database.EDatabaseTypeName)}.
 */
@Test public void testGetDBInstance(){
  MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(EDatabaseTypeName.SYBASEASE);
  Assert.assertTrue(""String_Node_Str"",dbInstance.getMetadataFiller() instanceof SybaseConnectionFillerImpl);
  dbInstance=MetadataFillFactory.getDBInstance(EDatabaseTypeName.SYBASEIQ);
  Assert.assertTrue(""String_Node_Str"",dbInstance.getMetadataFiller() instanceof SybaseConnectionFillerImpl);
  for (  EDatabaseConnTemplate databaseType : EDatabaseConnTemplate.values()) {
    dbInstance=MetadataFillFactory.getDBInstance(EDatabaseTypeName.getTypeFromDbType(databaseType.getDBTypeName()));
    Assert.assertNotNull(dbInstance);
  }
  dbInstance=MetadataFillFactory.getDBInstance(null);
  Assert.assertNull(dbInstance);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataFillFactory#getDBInstance(org.talend.core.database.EDatabaseTypeName)}.
 */
@Test public void testGetDBInstance(){
  MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(EDatabaseTypeName.SYBASEASE);
  Assert.assertTrue(""String_Node_Str"",dbInstance.getMetadataFiller() instanceof SybaseConnectionFillerImpl);
  dbInstance=MetadataFillFactory.getDBInstance(EDatabaseTypeName.SYBASEIQ);
  Assert.assertTrue(""String_Node_Str"",dbInstance.getMetadataFiller() instanceof SybaseConnectionFillerImpl);
  for (  EDatabaseConnTemplate databaseType : EDatabaseConnTemplate.values()) {
    dbInstance=MetadataFillFactory.getDBInstance(EDatabaseTypeName.getTypeFromDbType(databaseType.getDBTypeName()));
    Assert.assertNotNull(dbInstance);
  }
}",0.9494479953515398
126668,"public static String getEncryptedValue(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  try {
    value=PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(value));
    value=TalendQuoteUtils.addQuotes(value,TalendQuoteUtils.QUOTATION_MARK);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return value;
}","public static String getEncryptedValue(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  try {
    String removeQuotes=TalendQuoteUtils.removeQuotes(value);
    removeQuotes=TalendQuoteUtils.checkSlashAndRemoveQuotation(removeQuotes);
    removeQuotes=TalendQuoteUtils.checkAndRemoveBackslashes(removeQuotes);
    value=PasswordEncryptUtil.encryptPassword(removeQuotes);
    value=TalendQuoteUtils.addQuotes(value,TalendQuoteUtils.QUOTATION_MARK);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return value;
}",0.726895119418484
126669,"public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (StringUtils.countMatches(value,""String_Node_Str"") == 2 && value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean canEncrypt(final IElement node,final String parameterName){
  String value=getValue(node,parameterName);
  if (value.startsWith(""String_Node_Str"") && value.endsWith(""String_Node_Str"") && TalendQuoteUtils.filterQuote(value).length() == 0) {
    return true;
  }
 else {
    return false;
  }
}",0.6729857819905213
126670,"@SuppressWarnings(""String_Node_Str"") public static boolean isUseData(final ElementParameterType param,final String name){
  if (param == null || name == null) {
    return false;
  }
  if (param.getField().equals(EParameterFieldType.TABLE.getName())) {
    EList elementValue=param.getElementValue();
    if (elementValue != null) {
      for (      ElementValueType valueType : (List<ElementValueType>)elementValue) {
        if (valueType.getValue() != null) {
          if (ParameterValueUtil.valueContains((String)valueType.getValue(),name)) {
            return true;
          }
        }
      }
    }
  }
 else {
    String value=param.getValue();
    if (value != null && ParameterValueUtil.valueContains(value,name)) {
      return true;
    }
  }
  return false;
}","@SuppressWarnings(""String_Node_Str"") public static boolean isUseData(final ElementParameterType param,final String name){
  if (param == null || name == null) {
    return false;
  }
  if (param.getField().equals(EParameterFieldType.TABLE.getName())) {
    EList elementValue=param.getElementValue();
    if (elementValue != null) {
      for (      ElementValueType valueType : (List<ElementValueType>)elementValue) {
        if (valueType.getValue() != null) {
          if (ParameterValueUtil.valueContains(valueType.getValue(),name)) {
            return true;
          }
        }
      }
    }
  }
 else {
    String value=param.getValue();
    if (value != null && ParameterValueUtil.valueContains(value,name)) {
      return true;
    }
  }
  return false;
}",0.9948119325551232
126671,"public static String renameValues(final String value,final String oldName,final String newName,boolean flag){
  if (value == null || oldName == null || newName == null) {
    return value;
  }
  PatternCompiler compiler=new Perl5Compiler();
  Perl5Matcher matcher=new Perl5Matcher();
  matcher.setMultiline(true);
  Perl5Substitution substitution=new Perl5Substitution(newName + ""String_Node_Str"",Perl5Substitution.INTERPOLATE_ALL);
  Pattern pattern;
  try {
    pattern=compiler.compile(getQuotePattern(oldName));
  }
 catch (  MalformedPatternException e) {
    return value;
  }
  if (matcher.contains(value,pattern)) {
    String returnValue=""String_Node_Str"";
    if (value.contains(TalendQuoteUtils.getQuoteChar()) && !flag) {
      returnValue=splitQueryData(matcher,pattern,substitution,value,Util.SUBSTITUTE_ALL);
    }
 else {
      returnValue=Util.substitute(matcher,pattern,substitution,value,Util.SUBSTITUTE_ALL);
    }
    return returnValue;
  }
  return value;
}","public static String renameValues(final String value,final String oldName,final String newName,boolean flag){
  if (value == null || oldName == null || newName == null) {
    return value;
  }
  PatternCompiler compiler=new Perl5Compiler();
  Perl5Matcher matcher=new Perl5Matcher();
  matcher.setMultiline(true);
  Perl5Substitution substitution=new Perl5Substitution(newName + ""String_Node_Str"",Perl5Substitution.INTERPOLATE_ALL);
  Pattern pattern;
  try {
    pattern=compiler.compile(getQuotePattern(oldName));
  }
 catch (  MalformedPatternException e) {
    return value;
  }
  if (matcher.contains(value,pattern)) {
    String returnValue=""String_Node_Str"";
    if (value.contains(TalendQuoteUtils.getQuoteChar()) && !flag) {
      returnValue=splitQueryData(oldName,newName,value);
    }
 else {
      returnValue=Util.substitute(matcher,pattern,substitution,value,Util.SUBSTITUTE_ALL);
    }
    return returnValue;
  }
  return value;
}",0.881162428645563
126672,"public static String splitQueryData(PatternMatcher matcher,Pattern pattern,Substitution sub,String value,int numSubs){
  String[] split=value.split(""String_Node_Str"");
  int i=0;
  String replace=""String_Node_Str"";
  for (  String s : split) {
    if (i % 2 == 0) {
      replace=s;
      if (i != 0) {
        if (matcher.contains(value,pattern)) {
          replace=split[i].toString();
          split[i]=Util.substitute(matcher,pattern,sub,replace,numSubs);
        }
      }
    }
    i++;
  }
  String returnValue=""String_Node_Str"";
  for (int t=1; t < split.length; t++) {
    if (t % 2 == 0) {
      returnValue+=split[t];
    }
 else {
      returnValue+=""String_Node_Str"" + split[t] + ""String_Node_Str"";
    }
  }
  return returnValue;
}","public static String splitQueryData(String oldName,String newName,String value){
  String regex=""String_Node_Str"";
  String[] split=value.split(regex);
  Map<String,String> replacedStrings=new HashMap<String,String>();
  String returnValue=""String_Node_Str"";
  for (  String s : split) {
    if (s.contains(oldName)) {
      replacedStrings.put(s,s.replaceAll(""String_Node_Str"" + oldName + ""String_Node_Str"",newName));
    }
  }
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(value);
  if (matcher.find()) {
    int x=matcher.start();
    int y=matcher.end();
    int curPos=0;
    int valueLength=value.length();
    String oldFill=null;
    String newFill=null;
    while (true) {
      if (curPos == valueLength) {
        break;
      }
      if (curPos < x) {
        oldFill=value.substring(curPos,x);
        if ((newFill=replacedStrings.get(oldFill)) != null) {
          returnValue+=newFill;
        }
 else {
          returnValue+=oldFill;
        }
        curPos=x;
        continue;
      }
      returnValue+=matcher.group();
      curPos=y;
      if (!matcher.find()) {
        x=valueLength;
      }
 else {
        x=matcher.start();
        y=matcher.end();
      }
    }
  }
  return returnValue;
}",0.1677355698075974
126673,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  if (hiveObject == null) {
    throw new SQLException(""String_Node_Str"");
  }
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  try {
    Class hiveClass=hiveObject.getClass();
    Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
    Object hiveConf=method.invoke(hiveObject);
    Class hiveConfClass=hiveConf.getClass();
    Class confVarClass=null;
    for (    Class curClass : hiveConfClass.getClasses()) {
      if (curClass.getSimpleName().equals(""String_Node_Str"")) {
        confVarClass=curClass;
        break;
      }
    }
    if (confVarClass != null) {
      Object confVar=null;
      for (      Object curConfVar : confVarClass.getEnumConstants()) {
        if (curConfVar.toString().equals(""String_Node_Str"")) {
          confVar=curConfVar;
          break;
        }
      }
      if (confVar != null) {
        Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
        int timeout=15;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          timeout=designerService.getDBConnectionTimeout();
        }
        setIntVarMethod.invoke(hiveConf,confVar,timeout);
      }
    }
    Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat});
    if (tables instanceof List) {
      List<String> tableList=(List<String>)tables;
      for (      String tableName : tableList) {
        String tableType=getTableType(hiveCat,tableName);
        if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
          String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
          list.add(array);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(currCL);
  }
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  if (hiveObject == null) {
    throw new SQLException(""String_Node_Str"");
  }
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  try {
    Class hiveClass=hiveObject.getClass();
    Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
    Object hiveConf=method.invoke(hiveObject);
    Class hiveConfClass=hiveConf.getClass();
    Class confVarClass=null;
    for (    Class curClass : hiveConfClass.getClasses()) {
      if (curClass.getSimpleName().equals(""String_Node_Str"")) {
        confVarClass=curClass;
        break;
      }
    }
    if (confVarClass != null) {
      Object confVar=null;
      for (      Object curConfVar : confVarClass.getEnumConstants()) {
        if (curConfVar.toString().equals(""String_Node_Str"")) {
          confVar=curConfVar;
          break;
        }
      }
      if (confVar != null) {
        Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
        int timeout=15;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          timeout=designerService.getDBConnectionTimeout();
        }
        setIntVarMethod.invoke(hiveConf,confVar,timeout);
      }
    }
    Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat,tableNamePattern});
    if (tables instanceof List) {
      List<String> tableList=(List<String>)tables;
      for (      String tableName : tableList) {
        String tableType=getTableType(hiveCat,tableName);
        if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
          String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
          list.add(array);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(currCL);
  }
  return tableResultSet;
}",0.9967760288260952
126674,"public static FileFilter getAcceptModuleFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"")|| pathname.toString().toLowerCase().endsWith(""String_Node_Str"");
    }
  }
;
  return filter;
}","public static FileFilter getAcceptModuleFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isFile();
    }
  }
;
  return filter;
}",0.6212121212121212
126675,"public static List<File> getJarFilesFromFolder(File file,String fileName) throws MalformedURLException {
  return getFilesFromFolderByName(file,fileName,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},null,true);
}","public static List<File> getJarFilesFromFolder(File file,String fileName) throws MalformedURLException {
  return getFilesFromFolderByName(file,fileName,new String[]{ANY_FILE_EXT},null,true);
}",0.8571428571428571
126676,"public static List<File> getFilesFromFolderByName(File file,String searchFileName,String[] extensions,String excludedFolder,boolean nested){
  List<File> results=new ArrayList<File>();
  if (file.isFile()) {
    boolean consideredExt=false;
    boolean consideredName=false;
    if (extensions == null || extensions.length == 0) {
      consideredExt=true;
    }
 else {
      for (      String ext : extensions) {
        if (file.getName().endsWith(ext)) {
          consideredExt=true;
          break;
        }
      }
    }
    if (searchFileName == null) {
      consideredName=true;
    }
 else {
      if (searchFileName.equals(file.getName())) {
        consideredName=true;
      }
    }
    if (consideredExt && consideredName) {
      results.add(file);
    }
  }
 else   if (nested && file.isDirectory() && !isSVNFolder(file)) {
    if (excludedFolder != null && excludedFolder.equals(file.getName())) {
      return results;
    }
    File[] files=file.listFiles();
    for (    File file2 : files) {
      results.addAll(getFilesFromFolderByName(file2,searchFileName,extensions,excludedFolder,nested));
    }
  }
  return results;
}","public static List<File> getFilesFromFolderByName(File file,String searchFileName,String[] extensions,String excludedFolder,boolean nested){
  List<File> results=new ArrayList<File>();
  if (file.isFile()) {
    boolean consideredExt=false;
    boolean consideredName=false;
    if (extensions == null || extensions.length == 0) {
      consideredExt=true;
    }
 else {
      for (      String ext : extensions) {
        if (file.getName().endsWith(ext) || ext.endsWith(""String_Node_Str"")) {
          consideredExt=true;
          break;
        }
      }
    }
    if (searchFileName == null) {
      consideredName=true;
    }
 else {
      if (searchFileName.equals(file.getName())) {
        consideredName=true;
      }
    }
    if (consideredExt && consideredName) {
      results.add(file);
    }
  }
 else   if (nested && file.isDirectory() && !isSVNFolder(file)) {
    if (excludedFolder != null && excludedFolder.equals(file.getName())) {
      return results;
    }
    File[] files=file.listFiles();
    for (    File file2 : files) {
      results.addAll(getFilesFromFolderByName(file2,searchFileName,extensions,excludedFolder,nested));
    }
  }
  return results;
}",0.984984984984985
126677,"public static FileFilter getAcceptJARFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"");
    }
  }
;
  return filter;
}","public static FileFilter getAcceptJARFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isFile();
    }
  }
;
  return filter;
}",0.6847457627118644
126678,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isLengthIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsLengthIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  if (isExtensionLengthIgnored(dbmsId,dbType)) {
    assertTrue(true);
  }
  Dbms dbms=MetadataTalendType.getDbms(dbmsId);
  List ignoreLP=dbms.getIgnoreLengthPrecision();
  String ignore=new String(""String_Node_Str"");
  for (int i=0; i < ignoreLP.size(); i++) {
    DbIgnoreLengthAndPrecision dbIgnore=(DbIgnoreLengthAndPrecision)ignoreLP.get(i);
    if (dbIgnore.getDbType().equalsIgnoreCase(dbType)) {
      ignore=dbIgnore.getIgnoreLength();
      if (ignore == null) {
        assertFalse(false);
      }
 else       if (ignore.equals(""String_Node_Str"")) {
        assertTrue(true);
      }
 else {
        assertFalse(false);
      }
    }
  }
  assertFalse(false);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isLengthIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsLengthIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  MappingTypeRetriever mappingType=MetadataTalendType.getMappingTypeRetriever(dbmsId);
  assertTrue(mappingType.isLengthIgnored(dbmsId,dbType));
}",0.4520030234315949
126679,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isPrecisionIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsPrecisionIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  if (isExtensionPrecisionIgnored(dbmsId,dbType)) {
    assertTrue(true);
  }
  Dbms dbms=MetadataTalendType.getDbms(dbmsId);
  List ignoreLP=dbms.getIgnoreLengthPrecision();
  String ignore=new String(""String_Node_Str"");
  for (int i=0; i < ignoreLP.size(); i++) {
    DbIgnoreLengthAndPrecision dbIgnore=(DbIgnoreLengthAndPrecision)ignoreLP.get(i);
    if (dbIgnore.getDbType().equalsIgnoreCase(dbType)) {
      ignore=dbIgnore.getIgnorePrecision();
      if (ignore == null) {
        assertFalse(false);
      }
 else       if (ignore.equals(""String_Node_Str"")) {
        assertTrue(true);
      }
 else {
        assertFalse(false);
      }
    }
  }
  assertFalse(false);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isPrecisionIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsPrecisionIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  MappingTypeRetriever mappingType=MetadataTalendType.getMappingTypeRetriever(dbmsId);
  assertTrue(mappingType.isPrecisionIgnored(dbmsId,dbType));
}",0.4404761904761904
126680,"/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}","/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}",0.989240506329114
126681,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.9975008149516462
126682,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  if (hiveObject == null) {
    throw new SQLException(""String_Node_Str"");
  }
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  try {
    Class hiveClass=hiveObject.getClass();
    Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
    Object hiveConf=method.invoke(hiveObject);
    Class hiveConfClass=hiveConf.getClass();
    Class confVarClass=null;
    for (    Class curClass : hiveConfClass.getClasses()) {
      if (curClass.getSimpleName().equals(""String_Node_Str"")) {
        confVarClass=curClass;
        break;
      }
    }
    if (confVarClass != null) {
      Object confVar=null;
      for (      Object curConfVar : confVarClass.getEnumConstants()) {
        if (curConfVar.toString().equals(""String_Node_Str"")) {
          confVar=curConfVar;
          break;
        }
      }
      if (confVar != null) {
        Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
        int timeout=15;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          timeout=designerService.getDBConnectionTimeout();
        }
        setIntVarMethod.invoke(hiveConf,confVar,timeout);
      }
    }
    Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat,tableNamePattern});
    if (tables instanceof List) {
      List<String> tableList=(List<String>)tables;
      for (      String tableName : tableList) {
        String tableType=getTableType(hiveCat,tableName);
        if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
          String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
          list.add(array);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(currCL);
  }
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  if (hiveObject == null) {
    throw new SQLException(""String_Node_Str"");
  }
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  try {
    Class hiveClass=hiveObject.getClass();
    Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
    Object hiveConf=method.invoke(hiveObject);
    Class hiveConfClass=hiveConf.getClass();
    Class confVarClass=null;
    for (    Class curClass : hiveConfClass.getClasses()) {
      if (curClass.getSimpleName().equals(""String_Node_Str"")) {
        confVarClass=curClass;
        break;
      }
    }
    if (confVarClass != null) {
      Object confVar=null;
      for (      Object curConfVar : confVarClass.getEnumConstants()) {
        if (curConfVar.toString().equals(""String_Node_Str"")) {
          confVar=curConfVar;
          break;
        }
      }
      if (confVar != null) {
        Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
        int timeout=15;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          timeout=designerService.getDBConnectionTimeout();
        }
        setIntVarMethod.invoke(hiveConf,confVar,timeout);
      }
    }
    String tempTableNamepattern=tableNamePattern;
    if (StringUtils.isEmpty(tempTableNamepattern)) {
      tempTableNamepattern=""String_Node_Str"";
    }
    Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat,tempTableNamepattern});
    if (tables instanceof List) {
      List<String> tableList=(List<String>)tables;
      for (      String tableName : tableList) {
        String tableType=getTableType(hiveCat,tableName);
        if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
          String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
          list.add(array);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(currCL);
  }
  return tableResultSet;
}",0.9704532941824188
126683,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat,tableNamePattern});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(hiveCat,tableName);
          if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
            String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      String tempTableNamePattern=tableNamePattern;
      if (StringUtils.isEmpty(tempTableNamePattern)) {
        tempTableNamePattern=""String_Node_Str"";
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat,tempTableNamePattern});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(hiveCat,tableName);
          if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
            String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}",0.9706451045878012
126684,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_EXCEL) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_EXCEL);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    ExcelFileWizard excelFileWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    excelFileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),excelFileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_EXCEL) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_EXCEL);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    ExcelFileWizard excelFileWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    excelFileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),excelFileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH + 140,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}",0.9971181556195964
126685,"@Override protected void doRun(){
  if (repositoryNode == null) {
    RepositoryNode repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_REGEXP) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_REGEXP);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    RegexpFileWizard regexpfileWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    regexpfileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),regexpfileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    RepositoryNode repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_REGEXP) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_REGEXP);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    RegexpFileWizard regexpfileWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    regexpfileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),regexpfileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT + 40);
  wizardDialog.create();
  wizardDialog.open();
}",0.997649271274095
126686,"/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}","/** 
 * add Controls to group Row To Skip and Limit.
 */
private void addFieldsListenersGroupsRowToSkipAndLimit(){
  ArrayList<LabelledCheckboxCombo> labelledCheckboxCombo2Control=new ArrayList<LabelledCheckboxCombo>();
  labelledCheckboxCombo2Control.add(rowsToSkipHeaderCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipLimitCheckboxCombo);
  labelledCheckboxCombo2Control.add(rowsToSkipFooterCheckboxCombo);
  Iterator<LabelledCheckboxCombo> iCheckboxCombo;
  LabelledCheckboxCombo labelledCheckboxCombo;
  for (iCheckboxCombo=labelledCheckboxCombo2Control.iterator(); iCheckboxCombo.hasNext(); ) {
    labelledCheckboxCombo=iCheckboxCombo.next();
    labelledCheckboxCombo.addKeyListener(new KeyAdapter(){
      @Override public void keyPressed(      KeyEvent e){
        if (!isContextMode()) {
          String string=String.valueOf(e.character);
          if (!(string.matches(""String_Node_Str"")) && e.keyCode != 8 && e.keyCode != SWT.DEL) {
            e.doit=false;
          }
        }
      }
    }
);
  }
  rowsToSkipHeaderCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipHeaderCheckboxCombo.isEmpty()) {
          if (!rowsToSkipHeaderCheckboxCombo.isInteger() || rowsToSkipHeaderCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipHeaderCheckboxCombo.deselectAll();
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            getConnection().setHeaderValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipHeaderCheckboxCombo.getCombo().setFocus();
            firstRowIsCaptionCheckbox.setSelection(false);
            getConnection().setFirstLineCaption(false);
            return;
          }
 else {
            getConnection().setHeaderValue(rowsToSkipHeaderCheckboxCombo.getText().trim());
            getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
            checkFieldsValue();
          }
        }
 else {
          getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
          getConnection().setHeaderValue(""String_Node_Str"" + 0);
          checkFieldsValue();
        }
      }
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipFooterCheckboxCombo.isEmpty()) {
          if (!rowsToSkipFooterCheckboxCombo.isInteger() || rowsToSkipFooterCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipFooterCheckboxCombo.deselectAll();
            getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
            getConnection().setFooterValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipFooterCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setFooterValue(rowsToSkipFooterCheckboxCombo.getText().trim());
          }
        }
 else {
          getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
          getConnection().setFooterValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!rowsToSkipLimitCheckboxCombo.isEmpty()) {
          if (!rowsToSkipLimitCheckboxCombo.isInteger() || rowsToSkipLimitCheckboxCombo.getText().trim().equals(""String_Node_Str"")) {
            rowsToSkipLimitCheckboxCombo.deselectAll();
            getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
            getConnection().setLimitValue(""String_Node_Str"" + 0);
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
            rowsToSkipLimitCheckboxCombo.getCombo().setFocus();
          }
 else {
            getConnection().setLimitValue(rowsToSkipLimitCheckboxCombo.getText());
          }
        }
 else {
          getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
          getConnection().setLimitValue(""String_Node_Str"" + 0);
        }
        checkFieldsValue();
      }
    }
  }
);
  rowsToSkipHeaderCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      String text=rowsToSkipHeaderCheckboxCombo.getText();
      if (isContextMode() && getContextModeManager() != null) {
        text=getContextModeManager().getOriginalValue(text);
      }
      if ((!rowsToSkipHeaderCheckboxCombo.isChecked()) || text.trim().equals(""String_Node_Str"")) {
        firstRowIsCaptionCheckbox.setSelection(false);
        getConnection().setFirstLineCaption(false);
      }
      getConnection().setUseHeader(rowsToSkipHeaderCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipFooterCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseFooter(rowsToSkipFooterCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  rowsToSkipLimitCheckboxCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setUseLimit(rowsToSkipLimitCheckboxCombo.isChecked());
      checkRowToSkip();
    }
  }
);
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
    }
  }
);
}",0.9974372116863148
126687,"/** 
 * add Field to Group Escape Char.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupEscapeChar(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeEscapeChar=Form.startNewDimensionnedGridLayout(group,3,width,height);
  csvRadio=new Button(compositeEscapeChar,SWT.RADIO);
  csvRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setCsvOption(csvRadio.getSelection());
      if (csvRadio.getSelection()) {
        splitwayRecordForJavaFID.setSelection(false);
        getConnection().setSplitRecord(false);
      }
    }
  }
);
  csvRadio.setText(Messages.getString(""String_Node_Str""));
  delimitedRadio=new Button(compositeEscapeChar,SWT.RADIO);
  delimitedRadio.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=2;
  delimitedRadio.setLayoutData(gridData);
  escapeCharCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),ESCAPE_CHAR_DATA,1,false,SWT.READ_ONLY);
  escapeCharFlag=new Label(compositeEscapeChar,SWT.NONE);
  escapeCharFlag.setText(""String_Node_Str"");
  textEnclosureCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),TEXT_ENCLOSURE_DATA,1,false,SWT.READ_ONLY);
  textEnclosureFlag=new Label(compositeEscapeChar,SWT.NONE);
  textEnclosureFlag.setText(""String_Node_Str"");
  splitwayRecordForJavaFID=new Button(compositeEscapeChar,SWT.CHECK);
  splitwayRecordForJavaFID.setText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.setToolTipText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSplitRecord(splitwayRecordForJavaFID.getSelection());
    }
  }
);
  String languageName=LanguageManager.getCurrentLanguage().getName();
  if (languageName.equals(""String_Node_Str"")) {
    splitwayRecordForJavaFID.setVisible(false);
  }
  splitwayRecordForJavaFIDFlag=new Label(compositeEscapeChar,SWT.NONE);
  splitwayRecordForJavaFIDFlag.setText(""String_Node_Str"");
}","/** 
 * add Field to Group Escape Char.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupEscapeChar(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeEscapeChar=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeEscapeChar.setLayoutData(null);
  csvRadio=new Button(compositeEscapeChar,SWT.RADIO);
  csvRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setCsvOption(csvRadio.getSelection());
      if (csvRadio.getSelection()) {
        splitwayRecordForJavaFID.setSelection(false);
        getConnection().setSplitRecord(false);
      }
    }
  }
);
  csvRadio.setText(Messages.getString(""String_Node_Str""));
  delimitedRadio=new Button(compositeEscapeChar,SWT.RADIO);
  delimitedRadio.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=2;
  delimitedRadio.setLayoutData(gridData);
  escapeCharCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),ESCAPE_CHAR_DATA,1,false,SWT.READ_ONLY);
  escapeCharFlag=new Label(compositeEscapeChar,SWT.NONE);
  escapeCharFlag.setText(""String_Node_Str"");
  textEnclosureCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),TEXT_ENCLOSURE_DATA,1,false,SWT.READ_ONLY);
  textEnclosureFlag=new Label(compositeEscapeChar,SWT.NONE);
  textEnclosureFlag.setText(""String_Node_Str"");
  splitwayRecordForJavaFID=new Button(compositeEscapeChar,SWT.CHECK);
  splitwayRecordForJavaFID.setText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.setToolTipText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSplitRecord(splitwayRecordForJavaFID.getSelection());
    }
  }
);
  String languageName=LanguageManager.getCurrentLanguage().getName();
  if (languageName.equals(""String_Node_Str"")) {
    splitwayRecordForJavaFID.setVisible(false);
  }
  splitwayRecordForJavaFIDFlag=new Label(compositeEscapeChar,SWT.NONE);
  splitwayRecordForJavaFIDFlag.setText(""String_Node_Str"");
  group.pack();
}",0.9234018045690152
126688,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,170);
  GridLayout mainCompositeLayout=(GridLayout)mainComposite.getLayout();
  mainCompositeLayout.marginBottom=10;
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.9060773480662984
126689,"public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}","@Override public void run(){
  handleErrorOutput(outputComposite,tabFolder,outputTabItem);
}",0.942528735632184
126690,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
126691,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9727431857964493
126692,"/** 
 * add Controls to group Escape Char.
 */
private void addFieldsListenersGroupsEscapeChar(){
  ArrayList<Button> radio2Control=new ArrayList<Button>();
  radio2Control.add(csvRadio);
  radio2Control.add(delimitedRadio);
  Iterator<Button> iButton;
  Button button;
  for (iButton=radio2Control.iterator(); iButton.hasNext(); ) {
    button=iButton.next();
    button.addSelectionListener(new SelectionListener(){
      String escapeCharComboOldValue=""String_Node_Str"";
      String textEnclosureComboOldValue=""String_Node_Str"";
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        Boolean b=!(csvRadio.getSelection());
        getConnection().setEscapeType(b ? Escape.DELIMITED : Escape.CSV);
        textEnclosureCombo.setEnabled(!b);
        escapeCharCombo.setEnabled(!b);
        splitwayRecordForJavaFID.setEnabled(b);
        if (b) {
          escapeCharComboOldValue=escapeCharCombo.getText();
          textEnclosureComboOldValue=textEnclosureCombo.getText();
          textEnclosureCombo.select(0);
          escapeCharCombo.select(0);
          textEnclosureFlag.setText(""String_Node_Str"");
          escapeCharFlag.setText(""String_Node_Str"");
          checkFieldsValue();
        }
 else {
          if ((!""String_Node_Str"".equals(escapeCharComboOldValue)) && (!escapeCharComboOldValue.equals(EMPTY_VALUE))) {
            escapeCharCombo.setText(escapeCharComboOldValue);
            setCharFlag(escapeCharFlag,escapeCharCombo.getText());
          }
          if ((!""String_Node_Str"".equals(textEnclosureComboOldValue)) && (!textEnclosureComboOldValue.equals(EMPTY_VALUE))) {
            textEnclosureCombo.setText(textEnclosureComboOldValue);
            setCharFlag(textEnclosureFlag,textEnclosureCombo.getText());
          }
        }
      }
    }
);
  }
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
      checkFieldsValue();
    }
  }
);
  escapeCharCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (escapeCharCombo.getText() != null && !(""String_Node_Str"").equals(escapeCharCombo.getText()) && !(EMPTY_VALUE).equals(escapeCharCombo.getText())) {
        getConnection().setEscapeChar(escapeCharCombo.getText());
      }
 else {
        getConnection().setEscapeChar(null);
      }
      checkFieldsValue();
    }
  }
);
  textEnclosureCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (textEnclosureCombo.getText() != null && !(""String_Node_Str"").equals(textEnclosureCombo.getText()) && !(EMPTY_VALUE).equals(textEnclosureCombo.getText())) {
        getConnection().setTextEnclosure(textEnclosureCombo.getText());
      }
 else {
        getConnection().setTextEnclosure(null);
      }
      checkFieldsValue();
    }
  }
);
}","/** 
 * add Controls to group Escape Char.
 */
private void addFieldsListenersGroupsEscapeChar(){
  ArrayList<Button> radio2Control=new ArrayList<Button>();
  radio2Control.add(csvRadio);
  radio2Control.add(delimitedRadio);
  Iterator<Button> iButton;
  Button button;
  for (iButton=radio2Control.iterator(); iButton.hasNext(); ) {
    button=iButton.next();
    button.addSelectionListener(new SelectionListener(){
      String escapeCharComboOldValue=""String_Node_Str"";
      String textEnclosureComboOldValue=""String_Node_Str"";
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
      @Override public void widgetSelected(      SelectionEvent e){
        Boolean b=!(csvRadio.getSelection());
        getConnection().setEscapeType(b ? Escape.DELIMITED : Escape.CSV);
        textEnclosureCombo.setEnabled(!b);
        escapeCharCombo.setEnabled(!b);
        splitwayRecordForJavaFID.setEnabled(b);
        if (b) {
          escapeCharComboOldValue=escapeCharCombo.getText();
          textEnclosureComboOldValue=textEnclosureCombo.getText();
          textEnclosureCombo.select(0);
          escapeCharCombo.select(0);
          textEnclosureFlag.setText(""String_Node_Str"");
          escapeCharFlag.setText(""String_Node_Str"");
          checkFieldsValue();
        }
 else {
          if ((!""String_Node_Str"".equals(escapeCharComboOldValue)) && (!escapeCharComboOldValue.equals(EMPTY_VALUE))) {
            escapeCharCombo.setText(escapeCharComboOldValue);
            setCharFlag(escapeCharFlag,escapeCharCombo.getText());
          }
          if ((!""String_Node_Str"".equals(textEnclosureComboOldValue)) && (!textEnclosureComboOldValue.equals(EMPTY_VALUE))) {
            textEnclosureCombo.setText(textEnclosureComboOldValue);
            setCharFlag(textEnclosureFlag,textEnclosureCombo.getText());
          }
        }
      }
    }
);
  }
  emptyRowsToSkipCheckbox.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setRemoveEmptyRow(emptyRowsToSkipCheckbox.getSelection());
      checkFieldsValue();
    }
  }
);
  escapeCharCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (escapeCharCombo.getText() != null && !(""String_Node_Str"").equals(escapeCharCombo.getText()) && !(EMPTY_VALUE).equals(escapeCharCombo.getText())) {
        getConnection().setEscapeChar(escapeCharCombo.getText());
      }
 else {
        getConnection().setEscapeChar(null);
      }
      checkFieldsValue();
    }
  }
);
  textEnclosureCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (textEnclosureCombo.getText() != null && !(""String_Node_Str"").equals(textEnclosureCombo.getText()) && !(EMPTY_VALUE).equals(textEnclosureCombo.getText())) {
        getConnection().setTextEnclosure(textEnclosureCombo.getText());
      }
 else {
        getConnection().setTextEnclosure(null);
      }
      checkFieldsValue();
    }
  }
);
}",0.9911359159553512
126693,"public void refresh(){
  refreshPreview();
}","@Override public void refresh(){
  refreshPreview();
}",0.8979591836734694
126694,"/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      fieldSeparatorManager();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      rowSeparatorManager();
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparatorValue(rowSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}","/** 
 * add Controls of Group Delimited File Settings.
 */
private void addFieldsListenersGroupDelimitedFileSettings(){
  encodingCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      fieldSeparatorManager();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      rowSeparatorManager();
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparatorValue(fieldSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparatorValue(rowSeparatorText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
    }
  }
);
}",0.9816176470588236
126695,"/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}","/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeLimit.setLayoutData(null);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  group.pack();
}",0.8208955223880597
126696,"public void modifyText(final ModifyEvent e){
  getConnection().setRowSeparatorValue(rowSeparatorText.getText());
  checkFieldsValue();
}","@Override public void modifyText(final ModifyEvent e){
  getConnection().setRowSeparatorValue(rowSeparatorText.getText());
  checkFieldsValue();
}",0.9645390070921984
126697,"@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray != null) {
    delimitedFilePreview.refreshTablePreview(csvArray,firstRowIsCatption);
  }
}","@Override public void updateUIInThreadIfThreadIsNotCanceled(){
  if (previewInformationLabel.isDisposed()) {
    return;
  }
  previewInformationLabel.setText(previewInformationLabelMsg);
  if (getException() != null) {
    previewInformationLabel.setText(""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        handleErrorOutput(outputComposite,tabFolder,outputTabItem);
      }
    }
);
    return;
  }
  if (csvArray != null) {
    delimitedFilePreview.refreshTablePreview(csvArray,firstRowIsCatption);
  }
}",0.9917081260364844
126698,"/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
}","/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeFileDelimitor.setLayoutData(null);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  group.pack();
}",0.9068760151597184
126699,"private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
}","private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  compositeRowsToSkip.setLayoutData(null);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
  group.pack();
}",0.8764044943820225
126700,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isLengthIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsLengthIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  if (isExtensionLengthIgnored(dbmsId,dbType)) {
    assertTrue(true);
  }
  Dbms dbms=MetadataTalendType.getDbms(dbmsId);
  List ignoreLP=dbms.getIgnoreLengthPrecision();
  String ignore=new String(""String_Node_Str"");
  for (int i=0; i < ignoreLP.size(); i++) {
    DbIgnoreLengthAndPrecision dbIgnore=(DbIgnoreLengthAndPrecision)ignoreLP.get(i);
    if (dbIgnore.getDbType().equalsIgnoreCase(dbType)) {
      ignore=dbIgnore.getIgnoreLength();
      if (ignore == null) {
        assertFalse(false);
      }
 else       if (ignore.equals(""String_Node_Str"")) {
        assertTrue(true);
      }
 else {
        assertFalse(false);
      }
    }
  }
  assertFalse(false);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isLengthIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsLengthIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  MappingTypeRetriever mappingType=MetadataTalendType.getMappingTypeRetriever(dbmsId);
  assertTrue(mappingType.isLengthIgnored(dbmsId,dbType));
}",0.4520030234315949
126701,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isPrecisionIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsPrecisionIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  if (isExtensionPrecisionIgnored(dbmsId,dbType)) {
    assertTrue(true);
  }
  Dbms dbms=MetadataTalendType.getDbms(dbmsId);
  List ignoreLP=dbms.getIgnoreLengthPrecision();
  String ignore=new String(""String_Node_Str"");
  for (int i=0; i < ignoreLP.size(); i++) {
    DbIgnoreLengthAndPrecision dbIgnore=(DbIgnoreLengthAndPrecision)ignoreLP.get(i);
    if (dbIgnore.getDbType().equalsIgnoreCase(dbType)) {
      ignore=dbIgnore.getIgnorePrecision();
      if (ignore == null) {
        assertFalse(false);
      }
 else       if (ignore.equals(""String_Node_Str"")) {
        assertTrue(true);
      }
 else {
        assertFalse(false);
      }
    }
  }
  assertFalse(false);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MappingTypeRetriever#isPrecisionIgnored(java.lang.String,java.lang.String)}.
 */
@Test public void testIsPrecisionIgnored(){
  String dbmsId=""String_Node_Str"";
  String dbType=""String_Node_Str"";
  MappingTypeRetriever mappingType=MetadataTalendType.getMappingTypeRetriever(dbmsId);
  assertTrue(mappingType.isPrecisionIgnored(dbmsId,dbType));
}",0.4404761904761904
126702,"/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}","/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}",0.989240506329114
126703,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (option != GENERATE_MAIN_ONLY) {
    List<? extends INode> graphicalNodes=currentProcess.getGeneratingNodes();
    for (    INode node : graphicalNodes) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str""))) {
        if (""String_Node_Str"".equals(componentName)) {
          IElementParameter fromExternal=node.getElementParameter(""String_Node_Str"");
          Object value=fromExternal.getValue();
          if (value != null && ""String_Node_Str"".equals(value.toString())) {
            continue;
          }
        }
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        String jobIds=(String)processIdparam.getValue();
        String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
        for (        String jobId : jobsArr) {
          if (StringUtils.isNotEmpty(jobId)) {
            ProcessItem processItem=null;
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            JobInfo subJobInfo=null;
            subJobInfo=new JobInfo(jobId,context,version);
            processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (option == GENERATE_WITH_FIRST_CHILD) {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
              }
 else {
                generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (exportAsOSGI) {
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId() + ""String_Node_Str"",jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId() + ""String_Node_Str"",subJobInfo.getJobVersion()));
            }
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}",0.9975008149516462
126704,"/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}","/** 
 * Parse SF field to Talend data type <p> DOC YeXiaowei Comment method ""parseFieldToMetadataColumn"".
 * @param field
 * @return
 */
private IMetadataColumn parseFieldToMetadataColumn(Field field){
  if (field == null) {
    return null;
  }
  IMetadataColumn mdColumn=new org.talend.core.model.metadata.MetadataColumn();
  mdColumn.setLabel(field.getName());
  mdColumn.setKey(false);
  String type=field.getType().toString();
  String talendType=""String_Node_Str"";
  if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    talendType=""String_Node_Str"";
  }
 else {
    talendType=""String_Node_Str"";
  }
  mdColumn.setTalendType(""String_Node_Str"" + talendType);
  mdColumn.setNullable(field.getNillable());
  if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    mdColumn.setPattern(""String_Node_Str"");
  }
 else {
    mdColumn.setPattern(null);
  }
  if (""String_Node_Str"".equals(talendType)) {
    mdColumn.setLength(field.getLength());
    mdColumn.setPrecision(field.getPrecision());
  }
 else {
    mdColumn.setLength(field.getPrecision());
    mdColumn.setPrecision(field.getScale());
  }
  mdColumn.setDefault(field.getDefaultValueFormula());
  return mdColumn;
}",0.989240506329114
126705,"public static FileFilter getAcceptModuleFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"")|| pathname.toString().toLowerCase().endsWith(""String_Node_Str"");
    }
  }
;
  return filter;
}","public static FileFilter getAcceptModuleFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isFile();
    }
  }
;
  return filter;
}",0.6212121212121212
126706,"public static List<File> getJarFilesFromFolder(File file,String fileName) throws MalformedURLException {
  return getFilesFromFolderByName(file,fileName,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},null,true);
}","public static List<File> getJarFilesFromFolder(File file,String fileName) throws MalformedURLException {
  return getFilesFromFolderByName(file,fileName,new String[]{ANY_FILE_EXT},null,true);
}",0.8571428571428571
126707,"public static List<File> getFilesFromFolderByName(File file,String searchFileName,String[] extensions,String excludedFolder,boolean nested){
  List<File> results=new ArrayList<File>();
  if (file.isFile()) {
    boolean consideredExt=false;
    boolean consideredName=false;
    if (extensions == null || extensions.length == 0) {
      consideredExt=true;
    }
 else {
      for (      String ext : extensions) {
        if (file.getName().endsWith(ext)) {
          consideredExt=true;
          break;
        }
      }
    }
    if (searchFileName == null) {
      consideredName=true;
    }
 else {
      if (searchFileName.equals(file.getName())) {
        consideredName=true;
      }
    }
    if (consideredExt && consideredName) {
      results.add(file);
    }
  }
 else   if (nested && file.isDirectory() && !isSVNFolder(file)) {
    if (excludedFolder != null && excludedFolder.equals(file.getName())) {
      return results;
    }
    File[] files=file.listFiles();
    for (    File file2 : files) {
      results.addAll(getFilesFromFolderByName(file2,searchFileName,extensions,excludedFolder,nested));
    }
  }
  return results;
}","public static List<File> getFilesFromFolderByName(File file,String searchFileName,String[] extensions,String excludedFolder,boolean nested){
  List<File> results=new ArrayList<File>();
  if (file.isFile()) {
    boolean consideredExt=false;
    boolean consideredName=false;
    if (extensions == null || extensions.length == 0) {
      consideredExt=true;
    }
 else {
      for (      String ext : extensions) {
        if (file.getName().endsWith(ext) || ext.endsWith(""String_Node_Str"")) {
          consideredExt=true;
          break;
        }
      }
    }
    if (searchFileName == null) {
      consideredName=true;
    }
 else {
      if (searchFileName.equals(file.getName())) {
        consideredName=true;
      }
    }
    if (consideredExt && consideredName) {
      results.add(file);
    }
  }
 else   if (nested && file.isDirectory() && !isSVNFolder(file)) {
    if (excludedFolder != null && excludedFolder.equals(file.getName())) {
      return results;
    }
    File[] files=file.listFiles();
    for (    File file2 : files) {
      results.addAll(getFilesFromFolderByName(file2,searchFileName,extensions,excludedFolder,nested));
    }
  }
  return results;
}",0.984984984984985
126708,"public static FileFilter getAcceptJARFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"") || pathname.toString().toLowerCase().endsWith(""String_Node_Str"");
    }
  }
;
  return filter;
}","public static FileFilter getAcceptJARFilesFilter(){
  FileFilter filter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isFile();
    }
  }
;
  return filter;
}",0.6847457627118644
126709,"/** 
 * DOC ycbai Comment method ""applyMigrationTasks"".
 * @param itemRecord
 * @param monitor
 */
private void applyMigrationTasks(ItemRecord itemRecord,IProgressMonitor monitor){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
    IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    Context ctx=CoreRuntimePlugin.getInstance().getContext();
    RepositoryContext repositoryContext=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
    org.talend.core.model.general.Project project=repositoryContext.getProject();
    ERepositoryObjectType repositoryType=itemRecord.getRepositoryType();
    Item item=null;
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(ProjectManager.getInstance().getCurrentProject(),itemRecord.getItemId(),itemRecord.getImportPath(),repositoryType);
      for (      IRepositoryViewObject repositoryObject : allVersion) {
        if (repositoryObject.getProperty().getVersion().equals(itemRecord.getItemVersion())) {
          item=repositoryObject.getProperty().getItem();
        }
      }
      if (item == null) {
        return;
      }
      migrationService.executeMigrationTasksForImport(project,item,itemRecord.getMigrationTasksToApply(),monitor);
      itemRecord.setExistingItemWithSameId(null);
      itemRecord.clear();
      itemRecord.setProperty(item.getProperty());
    }
 catch (    Exception e) {
      logError(e);
    }
  }
}","/** 
 * DOC ycbai Comment method ""applyMigrationTasks"".
 * @param itemRecord
 * @param monitor
 */
protected void applyMigrationTasks(ItemRecord itemRecord,IProgressMonitor monitor){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
    IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    Context ctx=CoreRuntimePlugin.getInstance().getContext();
    RepositoryContext repositoryContext=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
    org.talend.core.model.general.Project project=repositoryContext.getProject();
    ERepositoryObjectType repositoryType=itemRecord.getRepositoryType();
    Item item=null;
    try {
      List<IRepositoryViewObject> allVersion=ProxyRepositoryFactory.getInstance().getAllVersion(ProjectManager.getInstance().getCurrentProject(),itemRecord.getItemId(),itemRecord.getImportPath(),repositoryType);
      for (      IRepositoryViewObject repositoryObject : allVersion) {
        if (repositoryObject.getProperty().getVersion().equals(itemRecord.getItemVersion())) {
          item=repositoryObject.getProperty().getItem();
        }
      }
      if (item == null) {
        return;
      }
      migrationService.executeMigrationTasksForImport(project,item,itemRecord.getMigrationTasksToApply(),monitor);
      itemRecord.setExistingItemWithSameId(null);
      itemRecord.clear();
      itemRecord.setProperty(item.getProperty());
    }
 catch (    Exception e) {
      logError(e);
    }
  }
}",0.9962025316455696
126710,"@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  if (!selectedItemRecord.isValid()) {
    return;
  }
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  EList<Resource> resources=selectedItemRecord.getResourceSet().getResources();
  Iterator<Resource> iterator=resources.iterator();
  while (iterator.hasNext()) {
    Resource res=iterator.next();
    if (res != null && !(res instanceof ByteArrayResource)) {
      res.unload();
      iterator.remove();
    }
  }
  String label=selectedItemRecord.getLabel();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  if (!selectedItemRecord.isValid()) {
    return;
  }
  doImportItem(monitor,resManager,selectedItemRecord,overwrite,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  EList<Resource> resources=selectedItemRecord.getResourceSet().getResources();
  Iterator<Resource> iterator=resources.iterator();
  while (iterator.hasNext()) {
    Resource res=iterator.next();
    if (res != null && !(res instanceof ByteArrayResource)) {
      res.unload();
      iterator.remove();
    }
  }
  String label=selectedItemRecord.getLabel();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.1665006403870784
126711,"@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(hiveCat,tableName);
          if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
            String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String schema,String tableNamePattern,String[] types) throws SQLException {
  String hiveCat=catalog;
  if (StringUtils.isBlank(hiveCat)) {
    hiveCat=HIVE_SCHEMA_DEFAULT;
  }
  String[] hiveTypes=types;
  if (hiveTypes == null) {
    hiveTypes=new String[0];
  }
  ClassLoader currCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(classLoader);
  EmbeddedHiveResultSet tableResultSet=new EmbeddedHiveResultSet();
  tableResultSet.setMetadata(TABLE_META);
  List<String[]> list=new ArrayList<String[]>();
  tableResultSet.setData(list);
  if (hiveObject != null) {
    try {
      Class hiveClass=hiveObject.getClass();
      Method method=hiveClass.getDeclaredMethod(""String_Node_Str"");
      Object hiveConf=method.invoke(hiveObject);
      Class hiveConfClass=hiveConf.getClass();
      Class confVarClass=null;
      for (      Class curClass : hiveConfClass.getClasses()) {
        if (curClass.getSimpleName().equals(""String_Node_Str"")) {
          confVarClass=curClass;
          break;
        }
      }
      if (confVarClass != null) {
        Object confVar=null;
        for (        Object curConfVar : confVarClass.getEnumConstants()) {
          if (curConfVar.toString().equals(""String_Node_Str"")) {
            confVar=curConfVar;
            break;
          }
        }
        if (confVar != null) {
          Method setIntVarMethod=hiveConfClass.getDeclaredMethod(""String_Node_Str"",confVarClass,int.class);
          int timeout=15;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
            IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
            timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
          }
          setIntVarMethod.invoke(hiveConf,confVar,timeout);
        }
      }
      Object tables=ReflectionUtils.invokeMethod(hiveObject,""String_Node_Str"",new Object[]{hiveCat,tableNamePattern});
      if (tables instanceof List) {
        List<String> tableList=(List<String>)tables;
        for (        String tableName : tableList) {
          String tableType=getTableType(hiveCat,tableName);
          if (tableType != null && ArrayUtils.contains(hiveTypes,tableType)) {
            String[] array=new String[]{""String_Node_Str"",hiveCat,tableName,tableType,""String_Node_Str""};
            list.add(array);
          }
        }
      }
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(currCL);
    }
  }
  return tableResultSet;
}",0.996911898274296
126712,"@Override public boolean canModify(Object element,String property){
  if (element instanceof IMetadataColumn) {
    IMetadataColumn column=(IMetadataColumn)element;
    if (column.isReadOnly() || (column.isCustom() && property.equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME))) {
      return false;
    }
  }
  return super.canModify(element,property);
}","@Override public boolean canModify(Object element,String property){
  if (element instanceof IMetadataColumn) {
    IMetadataColumn column=(IMetadataColumn)element;
    if (column.isReadOnly()) {
      return false;
    }
    if (column.isCustom()) {
      if (property.equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
        return false;
      }
 else {
        return true;
      }
    }
  }
  return super.canModify(element,property);
}",0.8631319358816276
126713,"@Override public Color getBackground(Object element,int columnIndex){
  if (!(element instanceof IMetadataColumn)) {
    return null;
  }
  IMetadataColumn column=(IMetadataColumn)element;
  TableViewerCreatorColumnNotModifiable tableColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(columnIndex);
  if (column.isCustom()) {
    if (column.isReadOnly() || readOnly || tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
      return CELL_READ_ONLY_COLOR;
    }
 else {
      return CUSTOM_CELL_BG_COLOR;
    }
  }
  if (column.isReadOnly()) {
    return TABLE_READ_ONLY_COLOR;
  }
  if (tableEditorView.isShowTalendTypeColumn() && tableEditorView.getCurrentDbms() != null) {
    if (tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_DBTYPE) && !""String_Node_Str"".equals(column.getType()) && !TypesManager.checkDBType(tableEditorView.getCurrentDbms(),column.getTalendType(),column.getType())) {
      return CELL_WRONG_DB_TYPE_COLOR;
    }
  }
  return super.getBackground(element,columnIndex);
}","@Override public Color getBackground(Object element,int columnIndex){
  if (!(element instanceof IMetadataColumn)) {
    return null;
  }
  IMetadataColumn column=(IMetadataColumn)element;
  TableViewerCreatorColumnNotModifiable tableColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(columnIndex);
  if (column.isCustom()) {
    if (column.isReadOnly() || tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
      return CELL_READ_ONLY_COLOR;
    }
 else {
      return CUSTOM_CELL_BG_COLOR;
    }
  }
  if (column.isReadOnly()) {
    return TABLE_READ_ONLY_COLOR;
  }
  if (tableEditorView.isShowTalendTypeColumn() && tableEditorView.getCurrentDbms() != null) {
    if (tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_DBTYPE) && !""String_Node_Str"".equals(column.getType()) && !TypesManager.checkDBType(tableEditorView.getCurrentDbms(),column.getTalendType(),column.getType())) {
      return CELL_WRONG_DB_TYPE_COLOR;
    }
  }
  return super.getBackground(element,columnIndex);
}",0.9943714821763602
126714,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) & !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9858990944372574
126715,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_EXCEL) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_EXCEL);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    ExcelFileWizard excelFileWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    excelFileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),excelFileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_EXCEL) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_EXCEL);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    ExcelFileWizard excelFileWizard=new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    excelFileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),excelFileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new ExcelFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH + 140,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}",0.9971181556195964
126716,"@Override protected void doRun(){
  if (repositoryNode == null) {
    RepositoryNode repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_REGEXP) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_REGEXP);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    RegexpFileWizard regexpfileWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    regexpfileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),regexpfileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  wizardDialog.open();
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    RepositoryNode repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != ERepositoryObjectType.METADATA_FILE_REGEXP) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(ERepositoryObjectType.METADATA_FILE_REGEXP);
    }
  }
  WizardDialog wizardDialog;
  if (isToolbar()) {
    init(repositoryNode);
    RegexpFileWizard regexpfileWizard=new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
    regexpfileWizard.setToolbar(true);
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),regexpfileWizard);
  }
 else {
    wizardDialog=new WizardDialog(Display.getCurrent().getActiveShell(),new RegexpFileWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames()));
  }
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT + 40);
  wizardDialog.create();
  wizardDialog.open();
}",0.997649271274095
126717,"/** 
 * add Field to Group Escape Char.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupEscapeChar(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeEscapeChar=Form.startNewDimensionnedGridLayout(group,3,width,height);
  csvRadio=new Button(compositeEscapeChar,SWT.RADIO);
  csvRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setCsvOption(csvRadio.getSelection());
      if (csvRadio.getSelection()) {
        splitwayRecordForJavaFID.setSelection(false);
        getConnection().setSplitRecord(false);
      }
    }
  }
);
  csvRadio.setText(Messages.getString(""String_Node_Str""));
  delimitedRadio=new Button(compositeEscapeChar,SWT.RADIO);
  delimitedRadio.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=2;
  delimitedRadio.setLayoutData(gridData);
  escapeCharCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),ESCAPE_CHAR_DATA,1,false,SWT.READ_ONLY);
  escapeCharFlag=new Label(compositeEscapeChar,SWT.NONE);
  escapeCharFlag.setText(""String_Node_Str"");
  textEnclosureCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),TEXT_ENCLOSURE_DATA,1,false,SWT.READ_ONLY);
  textEnclosureFlag=new Label(compositeEscapeChar,SWT.NONE);
  textEnclosureFlag.setText(""String_Node_Str"");
  splitwayRecordForJavaFID=new Button(compositeEscapeChar,SWT.CHECK);
  splitwayRecordForJavaFID.setText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.setToolTipText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSplitRecord(splitwayRecordForJavaFID.getSelection());
    }
  }
);
  String languageName=LanguageManager.getCurrentLanguage().getName();
  if (languageName.equals(""String_Node_Str"")) {
    splitwayRecordForJavaFID.setVisible(false);
  }
  splitwayRecordForJavaFIDFlag=new Label(compositeEscapeChar,SWT.NONE);
  splitwayRecordForJavaFIDFlag.setText(""String_Node_Str"");
}","/** 
 * add Field to Group Escape Char.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupEscapeChar(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeEscapeChar=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeEscapeChar.setLayoutData(null);
  csvRadio=new Button(compositeEscapeChar,SWT.RADIO);
  csvRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setCsvOption(csvRadio.getSelection());
      if (csvRadio.getSelection()) {
        splitwayRecordForJavaFID.setSelection(false);
        getConnection().setSplitRecord(false);
      }
    }
  }
);
  csvRadio.setText(Messages.getString(""String_Node_Str""));
  delimitedRadio=new Button(compositeEscapeChar,SWT.RADIO);
  delimitedRadio.setText(Messages.getString(""String_Node_Str""));
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=2;
  delimitedRadio.setLayoutData(gridData);
  escapeCharCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),ESCAPE_CHAR_DATA,1,false,SWT.READ_ONLY);
  escapeCharFlag=new Label(compositeEscapeChar,SWT.NONE);
  escapeCharFlag.setText(""String_Node_Str"");
  textEnclosureCombo=new LabelledCombo(compositeEscapeChar,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),TEXT_ENCLOSURE_DATA,1,false,SWT.READ_ONLY);
  textEnclosureFlag=new Label(compositeEscapeChar,SWT.NONE);
  textEnclosureFlag.setText(""String_Node_Str"");
  splitwayRecordForJavaFID=new Button(compositeEscapeChar,SWT.CHECK);
  splitwayRecordForJavaFID.setText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.setToolTipText(Messages.getString(""String_Node_Str""));
  splitwayRecordForJavaFID.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSplitRecord(splitwayRecordForJavaFID.getSelection());
    }
  }
);
  String languageName=LanguageManager.getCurrentLanguage().getName();
  if (languageName.equals(""String_Node_Str"")) {
    splitwayRecordForJavaFID.setVisible(false);
  }
  splitwayRecordForJavaFIDFlag=new Label(compositeEscapeChar,SWT.NONE);
  splitwayRecordForJavaFIDFlag.setText(""String_Node_Str"");
}",0.9262468707875988
126718,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,400,105);
  addGroupRowsToSkip(mainComposite,300,105);
  addGroupEscapeChar(mainComposite,400,110);
  addGroupLimit(mainComposite,300,110);
  addGroupFileViewer(this,700,170);
  GridLayout mainCompositeLayout=(GridLayout)mainComposite.getLayout();
  mainCompositeLayout.marginBottom=10;
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.9060773480662984
126719,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  delimitedFilePreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  delimitedFilePreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9727431857964493
126720,"/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}","/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeLimit.setLayoutData(null);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}",0.8279569892473119
126721,"/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
}","/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeFileDelimitor.setLayoutData(null);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  group.pack();
}",0.9068760151597184
126722,"private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
}","private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  compositeRowsToSkip.setLayoutData(null);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
}",0.8815165876777251
126723,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,120);
  addGroupRowsToSkip(mainComposite,300,120);
  addGroupDieOnErrorSettings(mainComposite,280,67);
  addGroupLimit(mainComposite,300,67);
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupDelimitedFileSettings(mainComposite,280,120);
  addGroupRowsToSkip(mainComposite,300,120);
  addGroupDieOnErrorSettings(mainComposite,280,67);
  addGroupLimit(mainComposite,300,67);
  GridLayout mainCompositeLayout=(GridLayout)mainComposite.getLayout();
  mainCompositeLayout.marginBottom=5;
  Composite mainComposite2=Form.startNewGridLayout(this,1);
  addGroupFileViewer(mainComposite2,600,200);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.922425952045134
126724,"/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  excelProcessPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  excelProcessPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}","/** 
 * add Field to Group File Viewer.
 * @param parent
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileViewer(final Composite parent,final int width,int height){
  tabFolder=new CTabFolder(parent,SWT.BORDER);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridData tabFolderLayoutData=(GridData)tabFolder.getLayoutData();
  tabFolderLayoutData.heightHint=height;
  previewTabItem=new CTabItem(tabFolder,SWT.BORDER);
  previewTabItem.setText(Messages.getString(""String_Node_Str""));
  outputTabItem=new CTabItem(tabFolder,SWT.BORDER);
  outputTabItem.setText(Messages.getString(""String_Node_Str""));
  Composite previewComposite=Form.startNewGridLayout(tabFolder,1);
  outputComposite=Form.startNewGridLayout(tabFolder,1);
  Composite compositeDelimitedFilePreviewButton=Form.startNewDimensionnedGridLayout(previewComposite,4,width,HEIGHT_BUTTON_PIXEL);
  height=height - HEIGHT_BUTTON_PIXEL - 15;
  firstRowIsCaptionCheckbox=new Button(compositeDelimitedFilePreviewButton,SWT.CHECK);
  firstRowIsCaptionCheckbox.setText(Messages.getString(""String_Node_Str""));
  firstRowIsCaptionCheckbox.setAlignment(SWT.LEFT);
  previewButton=new Button(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setSize(WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel=new Label(compositeDelimitedFilePreviewButton,SWT.NONE);
  previewInformationLabel.setText(""String_Node_Str"");
  previewInformationLabel.setForeground(getDisplay().getSystemColor(SWT.COLOR_BLUE));
  Composite compositeDelimitedFilePreview=Form.startNewDimensionnedGridLayout(previewComposite,1,width,height);
  excelProcessPreview=new ShadowProcessPreview(compositeDelimitedFilePreview,null,width,height - 10);
  excelProcessPreview.newTablePreview();
  previewTabItem.setControl(previewComposite);
  outputTabItem.setControl(outputComposite);
  tabFolder.setSelection(previewTabItem);
  tabFolder.pack();
}",0.9727158948685858
126725,"private void addGroupDieOnErrorSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""));
  Composite compositeExt=Form.startNewDimensionnedGridLayout(group,4,width,height);
  firstColumnText=new LabelledText(compositeExt,Messages.getString(""String_Node_Str""),3);
  firstColumnText.setText(""String_Node_Str"");
  lastColumnText=new LabelledText(compositeExt,Messages.getString(""String_Node_Str""),3);
}","private void addGroupDieOnErrorSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""));
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeExt=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeExt.setLayoutData(null);
  firstColumnText=new LabelledText(compositeExt,Messages.getString(""String_Node_Str""),3);
  firstColumnText.setText(""String_Node_Str"");
  lastColumnText=new LabelledText(compositeExt,Messages.getString(""String_Node_Str""),3);
  group.pack();
}",0.750373692077728
126726,"/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}","/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeLimit.setLayoutData(null);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  group.pack();
}",0.8208955223880597
126727,"/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  advanceSeparatorCheckbox=new Button(compositeFileDelimitor,SWT.CHECK);
  advanceSeparatorCheckbox.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  advanceSeparatorCheckbox.setLayoutData(data);
  thousandSeparaotrText=new LabelledText(compositeFileDelimitor,Messages.getString(""String_Node_Str""),3);
  decimalSeparatorText=new LabelledText(compositeFileDelimitor,Messages.getString(""String_Node_Str""),3);
  advanceSeparatorCheckbox.setVisible(!isPerlProject());
  thousandSeparaotrText.setVisible(!isPerlProject());
  decimalSeparatorText.setVisible(!isPerlProject());
}","/** 
 * add Field to Group Delimited File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupDelimitedFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeFileDelimitor.setLayoutData(null);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  advanceSeparatorCheckbox=new Button(compositeFileDelimitor,SWT.CHECK);
  advanceSeparatorCheckbox.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  advanceSeparatorCheckbox.setLayoutData(data);
  thousandSeparaotrText=new LabelledText(compositeFileDelimitor,Messages.getString(""String_Node_Str""),3);
  decimalSeparatorText=new LabelledText(compositeFileDelimitor,Messages.getString(""String_Node_Str""),3);
  advanceSeparatorCheckbox.setVisible(!isPerlProject());
  thousandSeparaotrText.setVisible(!isPerlProject());
  decimalSeparatorText.setVisible(!isPerlProject());
  group.pack();
}",0.8930348258706468
126728,"private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}","private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 100,height);
  compositeRowsToSkip.setLayoutData(null);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  group.pack();
}",0.8375416865173892
126729,"/** 
 * add Field to Group File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,Messages.getString(""String_Node_Str""),3,true,SWT.RIGHT);
  fieldSeparatorText.setToolTipText(Messages.getString(""String_Node_Str""));
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
}","/** 
 * add Field to Group File Settings.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupFileSettings(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeFileDelimitor=Form.startNewDimensionnedGridLayout(group,4,width,height);
  compositeFileDelimitor.setLayoutData(null);
  fieldSeparatorText=new LabelledText(compositeFileDelimitor,Messages.getString(""String_Node_Str""),3,true,SWT.RIGHT);
  fieldSeparatorText.setToolTipText(Messages.getString(""String_Node_Str""));
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(compositeFileDelimitor,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(compositeFileDelimitor,""String_Node_Str"",1,true,SWT.RIGHT);
  group.pack();
}",0.8531169940222032
126730,"@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupFileSettings(mainComposite,400,110);
  addGroupRowsToSkip(mainComposite,300,110);
  addGroupLimit(mainComposite,300,85);
  addGroupFileViewer(this,700,200);
  Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  if (!isInWizard()) {
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}","@Override protected void addFields(){
  Composite mainComposite=Form.startNewGridLayout(this,2);
  addGroupFileSettings(mainComposite,400,110);
  addGroupRowsToSkip(mainComposite,300,110);
  addGroupLimit(mainComposite,300,85);
  addGroupFileViewer(this,700,200);
  GridLayout mainCompositeLayout=(GridLayout)mainComposite.getLayout();
  mainCompositeLayout.marginBottom=5;
  Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  if (!isInWizard()) {
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
}",0.9045138888888888
126731,"/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
}","/** 
 * add field to Group Limit.
 * @param mainComposite
 * @param form
 * @param width
 * @param height
 */
private void addGroupLimit(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,2,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeLimit=Form.startNewDimensionnedGridLayout(group,3,width,height);
  compositeLimit.setLayoutData(null);
  Label info=new Label(compositeLimit,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipLimitCheckboxCombo=new LabelledCheckboxCombo(compositeLimit,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  group.pack();
}",0.8208955223880597
126732,"private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 20,height);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
}","private void addGroupRowsToSkip(final Composite mainComposite,final int width,final int height){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),height);
  group.setLayout(new FillLayout());
  GridData groupLayoutData=(GridData)group.getLayoutData();
  groupLayoutData.heightHint=-1;
  groupLayoutData.minimumHeight=-1;
  groupLayoutData.minimumWidth=-1;
  groupLayoutData.widthHint=-1;
  groupLayoutData.grabExcessVerticalSpace=false;
  Composite compositeRowsToSkip=Form.startNewDimensionnedGridLayout(group,3,width - 20,height);
  compositeRowsToSkip.setLayoutData(null);
  Label info=new Label(compositeRowsToSkip,SWT.NONE);
  GridData gridData=new GridData();
  gridData.horizontalSpan=3;
  info.setLayoutData(gridData);
  info.setText(Messages.getString(""String_Node_Str""));
  rowsToSkipHeaderCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  rowsToSkipFooterCheckboxCombo=new LabelledCheckboxCombo(compositeRowsToSkip,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),STRING_NUMBERS_DATA,1,true,SWT.NONE);
  emptyRowsToSkipCheckbox=new Button(compositeRowsToSkip,SWT.CHECK);
  emptyRowsToSkipCheckbox.setText(Messages.getString(""String_Node_Str""));
  emptyRowsToSkipCheckbox.setAlignment(SWT.LEFT);
  gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.horizontalSpan=3;
  emptyRowsToSkipCheckbox.setLayoutData(gridData);
  group.pack();
}",0.8763148349655423
126733,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) & !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9999362204222207
126734,"public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}","public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}",0.9928098935864252
126735,"static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equalsIgnoreCase(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.UserName;
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.Password;
    ssConn.setPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyHost;
    ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPort;
    ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyUsername;
    ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPassword;
    ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerKey;
    ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerSecret;
    ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackHost;
    ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackPort;
    ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SalesforceVersion;
    ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.token;
    ssConn.setToken(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
}","static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EParamName) {
      EParamName saleforceParam=(EParamName)param;
      originalVariableName=prefixName + saleforceParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
      originalVariableName=getCorrectVariableName(contextItem,originalVariableName,saleforceParam);
switch (saleforceParam) {
case WebServiceUrl:
        ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case UserName:
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Password:
ssConn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case WebServiceUrlForOauth:
ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ConsumerKey:
ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ConsumerSecret:
ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case CallbackHost:
ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case CallbackPort:
ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SalesforceVersion:
ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case token:
ssConn.setToken(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case BatchSize:
ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case TimeOut:
ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case QueryCondition:
ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyHost:
ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyPort:
ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyUsername:
ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyPassword:
ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}",0.3698249059073801
126736,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    initialize();
    adaptFormToEditable();
  }
  if (!isContextMode()) {
    checkFieldsValue();
    setCheckEnable();
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    initialize();
    adaptFormToEditable();
    collectContextParams(visible);
  }
  if (!isContextMode()) {
    checkFieldsValue();
    setCheckEnable();
  }
}",0.9427168576104746
126737,"@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeSecret(consumeKeySecretText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          Thread.sleep(100);
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
            String endpoint=null;
            endpoint=client.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  webServiceUrlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrl(webServiceUrlText.getText());
        setCheckEnable();
      }
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setUserName(userNameText.getText());
        setCheckEnable();
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setPassword(passwordText.getText());
        setCheckEnable();
      }
    }
  }
);
  batchSizeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setBatchSize(batchSizeText.getText());
        setCheckEnable();
      }
    }
  }
);
  timeOutText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        String timeOutStr=timeOutText.getText();
        if (!""String_Node_Str"".equals(timeOutStr)) {
          try {
            Integer.parseInt(timeOutStr);
            getConnection().setTimeOut(timeOutStr);
          }
 catch (          NumberFormatException e1) {
            updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
          }
        }
        setCheckEnable();
      }
    }
  }
);
  useProxyBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useProxyBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseProxy(selection);
      if (selection && useHttpBtn.getSelection()) {
        getConnection().setUseHttpProxy(false);
        useHttpBtn.setSelection(false);
      }
    }
  }
);
  useHttpBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean selection=useHttpBtn.getSelection();
      checkFieldsValue();
      enableProxyParameters(selection);
      getConnection().setUseHttpProxy(selection);
      if (selection && useProxyBtn.getSelection()) {
        getConnection().setUseProxy(false);
        useProxyBtn.setSelection(false);
      }
    }
  }
);
  proxyHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyHost(proxyHostText.getText());
      }
    }
  }
);
  proxyPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPort(proxyPortText.getText());
      }
    }
  }
);
  proxyUsernameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyUsername(proxyUsernameText.getText());
      }
    }
  }
);
  proxyPasswordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        getConnection().setProxyPassword(proxyPasswordText.getText());
      }
    }
  }
);
  authBtn.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setLoginType(authBtn.getItem(authBtn.getSelectionIndex()));
        setCheckEnable();
        collectContextParams(true);
      }
    }
  }
);
  webServiceUrlTextForOAuth.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setWebServiceUrlTextForOAuth(webServiceUrlTextForOAuth.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeyText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeKey(consumeKeyText.getText());
        setCheckEnable();
      }
    }
  }
);
  consumeKeySecretText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setConsumeSecret(consumeKeySecretText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackHostText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackHost(callbackHostText.getText());
        setCheckEnable();
      }
    }
  }
);
  callbackPortText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setCallbackPort(callbackPortText.getText());
        setCheckEnable();
      }
    }
  }
);
  apiVersionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setSalesforceVersion(apiVersionText.getText());
        setCheckEnable();
      }
    }
  }
);
  tokenText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        loginOk=false;
        checkFieldsValue();
        getConnection().setToken(tokenText.getText());
        setCheckEnable();
      }
    }
  }
);
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
      }
      testSalesforceLogin();
      if (authBtn.getSelectionIndex() == 0) {
        String proxy=null;
        if (useProxyBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_SOCKS_PROXY;
        }
 else         if (useHttpBtn.getSelection()) {
          proxy=SalesforceModuleParseAPI.USE_HTTP_PROXY;
        }
        SalesforceModuleParseAPI checkSalesfoceLogin=checkSalesfoceLogin(proxy,endPoint,username,pwd,timeOut,proxyHostText.getText(),proxyPortText.getText(),proxyUsernameText.getText(),proxyPasswordText.getText());
        if (checkSalesfoceLogin != null) {
          setSalesforceModuleParseAPI(checkSalesfoceLogin);
          loginOk=checkSalesfoceLogin.getCurrentAPI().isLogin();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
 else {
        String errors=null;
        final OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForOAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumeKey);
        client.setClientSecret(consumeKeySrcret);
        boolean result=false;
        try {
          client.startServer();
          Token token=null;
          if (TalendPropertiesUtil.isEnabledUseBrowser()) {
            Display.getDefault().syncExec(new Runnable(){
              @Override public void run(){
                BrowerDialog brower;
                try {
                  Shell shell=new Shell(Display.getDefault(),SWT.ON_TOP);
                  brower=new BrowerDialog(shell,client.getUrl());
                  if (Window.OK == brower.open()) {
                    code=client.getServer().getCode();
                  }
 else {
                    return;
                  }
                }
 catch (                Exception e2) {
                  ExceptionHandler.process(e2);
                }
              }
            }
);
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          Thread.sleep(100);
          client.stopServer();
          if (code != null && !code.equals(""String_Node_Str"")) {
            token=client.getTokenForWizard(code);
            org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
            String endpoint=null;
            endpoint=client.getSOAPEndpoint(token,apiVersion);
            if (token != null) {
              java.util.Properties properties=new java.util.Properties();
              FileOutputStream outputStream=new FileOutputStream(tokenText.getText());
              properties.setProperty(""String_Node_Str"",token.getRefresh_token());
              FileWriter w=new FileWriter(tokenText.getText());
              properties.store(w,""String_Node_Str"");
              w.close();
              result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
            }
            if (!result) {
              String mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
              new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,errors);
            }
 else {
              loginOk=true;
              MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            }
          }
 else {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        Exception e1) {
          errors=e1.getMessage();
        }
        if (loginOk) {
          checkFieldsValue();
        }
      }
    }
  }
);
}",0.9982278231761348
126738,"/** 
 * Test filling catalogs for odbc teredata .
 * @throws SQLException
 */
@Test public void testFillCatalogs_OdbcTeradata() throws SQLException {
  DatabaseMetaData dbJDBCMetadata=mock(DatabaseMetaData.class);
  when(dbJDBCMetadata.getDatabaseProductName()).thenReturn(""String_Node_Str"");
  stub(method(ConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(true);
  List<String> catalogFilter=new ArrayList<String>();
  Connection connection=mock(Connection.class);
  when(connection.isContextMode()).thenReturn(false);
  List<Catalog> fillCatalogs=this.dBConnectionFillerImpl.fillCatalogs(connection,dbJDBCMetadata,catalogFilter);
  assertTrue(fillCatalogs.isEmpty());
}","/** 
 * Test filling catalogs for odbc teredata .
 * @throws SQLException
 */
@Test public void testFillCatalogs_OdbcTeradata() throws SQLException {
  DatabaseMetaData dbJDBCMetadata=mock(DatabaseMetaData.class);
  when(dbJDBCMetadata.getDatabaseProductName()).thenReturn(""String_Node_Str"");
  stub(method(ConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(true);
  List<String> catalogFilter=new ArrayList<String>();
  DatabaseConnection dbConnection=mock(DatabaseConnection.class);
  when(dbConnection.isContextMode()).thenReturn(false);
  List<Catalog> fillCatalogs=this.dBConnectionFillerImpl.fillCatalogs(dbConnection,dbJDBCMetadata,catalogFilter);
  assertTrue(fillCatalogs.isEmpty());
}",0.9645892351274789
126739,"@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  java.sql.Connection sqlConnection=null;
  try {
    sqlConnection=MetadataConnectionUtils.createConnection(metadataBean).getObject();
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}","@Override public DatabaseConnection fillUIConnParams(IMetadataConnection metadataBean,DatabaseConnection connection){
  DatabaseConnection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=newConnection;
  }
 else {
    dbconn=connection;
  }
  if (newConnection != null && dbconn != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    for (    Map.Entry<String,Object> parameter : metadataBean.getOtherParameters().entrySet()) {
      dbconn.getParameters().put(parameter.getKey(),parameter.getValue() == null ? StringUtils.EMPTY : parameter.getValue().toString());
    }
  }
  java.sql.Connection sqlConnection=null;
  try {
    sqlConnection=MetadataConnectionUtils.createConnection(metadataBean).getObject();
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}",0.8914561381236511
126740,"/** 
 * fill the catalog and schemas into Postgresql database connection.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalogList
 * @return
 */
private List<Catalog> fillPostgresqlCatalogs(IMetadataConnection metaConnection,Connection dbConn,DatabaseMetaData dbJDBCMetadata,List<Catalog> catalogList){
  DatabaseConnection databaseConnection=(DatabaseConnection)dbConn;
  String catalogName=databaseConnection.getSID();
  if (StringUtils.isEmpty(catalogName)) {
    catalogName=databaseConnection.getUsername();
  }
  if (StringUtils.isNotEmpty(catalogName)) {
    List<String> filterList=new ArrayList<String>();
    filterList.addAll(postFillCatalog(metaConnection,catalogList,filterList,TalendCWMService.getReadableName(dbConn,catalogName),dbConn));
    for (    Catalog catalog : catalogList) {
      List<Schema> schemaList=new ArrayList<Schema>();
      try {
        schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
        if (!schemaList.isEmpty() && schemaList.size() > 0) {
          CatalogHelper.addSchemas(schemaList,catalog);
        }
      }
 catch (      Throwable e) {
        log.info(e);
      }
      ConnectionHelper.addCatalog(catalog,dbConn);
    }
  }
  return catalogList;
}","/** 
 * fill the catalog and schemas into Postgresql database connection.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalogList
 * @return
 */
private List<Catalog> fillPostgresqlCatalogs(IMetadataConnection metaConnection,DatabaseConnection dbConn,DatabaseMetaData dbJDBCMetadata,List<Catalog> catalogList){
  String catalogName=dbConn.getSID();
  if (StringUtils.isEmpty(catalogName)) {
    catalogName=dbConn.getUsername();
  }
  if (StringUtils.isNotEmpty(catalogName)) {
    List<String> filterList=new ArrayList<String>();
    filterList.addAll(postFillCatalog(metaConnection,catalogList,filterList,TalendCWMService.getReadableName(dbConn,catalogName),dbConn));
    for (    Catalog catalog : catalogList) {
      List<Schema> schemaList=new ArrayList<Schema>();
      try {
        schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
        if (!schemaList.isEmpty() && schemaList.size() > 0) {
          CatalogHelper.addSchemas(schemaList,catalog);
        }
      }
 catch (      Throwable e) {
        log.info(e);
      }
      ConnectionHelper.addCatalog(catalog,dbConn);
    }
  }
  return catalogList;
}",0.9354568315171836
126741,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(DatabaseConnection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(dbConn.getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(dbConn.getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(dbConn.getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(dbConn.getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !dbConn.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !dbConn.getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !dbConn.getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) && !dbConn.getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=dbConn.getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.979728857327308
126742,"public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
        schemaRs=((SybaseDatabaseMetaData)dbJDBCMetadata).getSchemas(catalog.getName(),null);
      }
 else       if (dbJDBCMetadata instanceof AS400DatabaseMetaData) {
        schemaRs=dbJDBCMetadata.getSchemas(catalog.getName(),null);
      }
 else {
        schemaRs=dbJDBCMetadata.getSchemas();
      }
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  if (schemaRs == null) {
    log.error(""String_Node_Str"");
  }
 else {
    try {
      while (schemaRs.next()) {
        String schemaName=getSchemaName(schemaRs,dbJDBCMetadata,catalog);
        if (schemaName == null) {
          continue;
        }
        if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
          if (dbConn != null && !isNullUiSchema(dbConn)) {
            Schema createByUiSchema=createSchemaByUiSchema((DatabaseConnection)dbConn);
            schemaList.add(createByUiSchema);
            break;
          }
 else           if (isCreateElement(schemaFilter,schemaName)) {
            Schema schema=SchemaHelper.createSchema(schemaName);
            schemaList.add(schema);
            schemaNameCacheTmp.add(schemaName);
          }
        }
      }
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
 finally {
      schemaRs.close();
    }
  }
  return schemaList;
}","public List<Schema> fillSchemaToCatalog(DatabaseConnection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable {
  ResultSet schemaRs=null;
  try {
    if (dbJDBCMetadata.getDriverName().equals(DatabaseConstant.MSSQL_DRIVER_NAME_JDBC2_0)) {
      Method getSchemaMethod=dbJDBCMetadata.getClass().getMethod(""String_Node_Str"",String.class,String.class);
      schemaRs=(ResultSet)getSchemaMethod.invoke(dbJDBCMetadata,catalog.getName(),null);
    }
  }
 catch (  SecurityException e) {
  }
catch (  NoSuchMethodException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
    if (e.getTargetException().getClass().toString().equals(""String_Node_Str"")) {
      throw e.getTargetException();
    }
  }
catch (  SQLException e) {
    log.error(e,e);
  }
  if (schemaRs == null) {
    try {
      if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
        schemaRs=((SybaseDatabaseMetaData)dbJDBCMetadata).getSchemas(catalog.getName(),null);
      }
 else       if (dbJDBCMetadata instanceof AS400DatabaseMetaData) {
        schemaRs=dbJDBCMetadata.getSchemas(catalog.getName(),null);
      }
 else {
        schemaRs=dbJDBCMetadata.getSchemas();
      }
    }
 catch (    SQLException e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
  }
  List<String> schemaNameCacheTmp=new ArrayList<String>();
  List<Schema> schemaList=new ArrayList<Schema>();
  if (schemaRs == null) {
    log.error(""String_Node_Str"");
  }
 else {
    try {
      while (schemaRs.next()) {
        String schemaName=getSchemaName(schemaRs,dbJDBCMetadata,catalog);
        if (schemaName == null) {
          continue;
        }
        if (!schemaNameCacheTmp.contains(schemaName) && !MetadataConnectionUtils.isMysql(dbJDBCMetadata)) {
          if (dbConn != null && !isNullUiSchema(dbConn)) {
            Schema createByUiSchema=createSchemaByUiSchema(dbConn);
            schemaList.add(createByUiSchema);
            break;
          }
 else           if (isCreateElement(schemaFilter,schemaName)) {
            Schema schema=SchemaHelper.createSchema(schemaName);
            schemaList.add(schema);
            schemaNameCacheTmp.add(schemaName);
          }
        }
      }
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.debug(e,e);
      }
    }
 finally {
      schemaRs.close();
    }
  }
  return schemaList;
}",0.9943775100401606
126743,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean isHive2=HiveConnectionManager.getInstance().isHive2(metaConnection);
    if (schemas != null && !ConnectionUtils.isOdbcHyperFileSQL(dbJDBCMetadata)) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !isHive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          if (isHive2) {
            uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(DatabaseConnection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(dbConn.getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=dbConn.getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(dbConn.getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(dbConn.getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(dbConn.getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean isHive2=HiveConnectionManager.getInstance().isHive2(metaConnection);
    if (schemas != null && !ConnectionUtils.isOdbcHyperFileSQL(dbJDBCMetadata)) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !isHive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=dbConn.getUiSchema();
          if (isHive2) {
            uiSchemaOnConnWizard=dbConn.getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9723471223021584
126744,"/** 
 * zshen Comment method ""fillUIConnParams"".
 * @param metadataBean sotre information of the connection which you will get.
 * @param connection which you want to be fill Connection.
 * @return connection which have be fill by the information store on the metadataBean.null when the information isnot right or the parameter of connection is null;
 */
public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection);","/** 
 * zshen Comment method ""fillUIConnParams"".
 * @param metadataBean sotre information of the connection which you will get.
 * @param connection which you want to be fill Connection.
 * @return connection which have be fill by the information store on the metadataBean.null when the information isnot right or the parameter of connection is null;
 */
public T fillUIConnParams(IMetadataConnection metadataBean,T connection);",0.9748283752860412
126745,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter);","public List<Catalog> fillCatalogs(T dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter);",0.9614035087719298
126746,"/** 
 * DOC mzhao Fill catalog with schema children.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalog
 * @param schemaFilter
 * @return
 * @throws Throwable
 */
public List<Schema> fillSchemaToCatalog(Connection dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable ;","/** 
 * DOC mzhao Fill catalog with schema children.
 * @param dbConn
 * @param dbJDBCMetadata
 * @param catalog
 * @param schemaFilter
 * @return
 * @throws Throwable
 */
public List<Schema> fillSchemaToCatalog(T dbConn,DatabaseMetaData dbJDBCMetadata,Catalog catalog,List<String> schemaFilter) throws Throwable ;",0.9827315541601256
126747,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> Filter);","public List<Package> fillSchemas(T dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> Filter);",0.9591078066914498
126748,"public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}","public static void setPropertiesForContextMode(ConnectionItem connectionItem,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (connectionItem == null || contextItem == null) {
    return;
  }
  final String label=contextItem.getProperty().getLabel();
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    DBConnectionContextUtils.setPropertiesForContextMode(label,(DatabaseConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof FileConnection) {
    FileConnectionContextUtils.setPropertiesForContextMode(label,(FileConnection)conn,paramSet);
  }
 else   if (conn instanceof LdifFileConnection) {
    OtherConnectionContextUtils.setLdifFilePropertiesForContextMode(label,(LdifFileConnection)conn);
  }
 else   if (conn instanceof XmlFileConnection) {
    OtherConnectionContextUtils.setXmlFilePropertiesForContextMode(label,(XmlFileConnection)conn);
  }
 else   if (conn instanceof LDAPSchemaConnection) {
    OtherConnectionContextUtils.setLDAPSchemaPropertiesForContextMode(label,(LDAPSchemaConnection)conn);
  }
 else   if (conn instanceof WSDLSchemaConnection) {
    OtherConnectionContextUtils.setWSDLSchemaPropertiesForContextMode(label,(WSDLSchemaConnection)conn);
  }
 else   if (conn instanceof SalesforceSchemaConnection) {
    OtherConnectionContextUtils.setSalesforcePropertiesForContextMode(label,(SalesforceSchemaConnection)conn,contextItem,paramSet,map);
  }
 else   if (conn instanceof GenericSchemaConnection) {
  }
  connectionItem.getConnection().setContextMode(true);
  connectionItem.getConnection().setContextId(contextItem.getProperty().getId());
  connectionItem.getConnection().setContextName(contextItem.getDefaultContext());
}",0.9928098935864252
126749,"static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equalsIgnoreCase(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.UserName;
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.Password;
    ssConn.setPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyHost;
    ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPort;
    ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyUsername;
    ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPassword;
    ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerKey;
    ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerSecret;
    ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackHost;
    ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackPort;
    ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SalesforceVersion;
    ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.token;
    ssConn.setToken(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
}","static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn,ContextItem contextItem,Set<IConnParamName> paramSet,Map<String,String> map){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String originalVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EParamName) {
      EParamName saleforceParam=(EParamName)param;
      originalVariableName=prefixName + saleforceParam;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<String,String> entry : map.entrySet()) {
          if (originalVariableName.equals(entry.getValue())) {
            originalVariableName=entry.getKey();
            break;
          }
        }
      }
      originalVariableName=getCorrectVariableName(contextItem,originalVariableName,saleforceParam);
switch (saleforceParam) {
case WebServiceUrl:
        ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
      break;
case UserName:
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Password:
ssConn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case WebServiceUrlForOauth:
ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ConsumerKey:
ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ConsumerSecret:
ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case CallbackHost:
ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case CallbackPort:
ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SalesforceVersion:
ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case token:
ssConn.setToken(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case BatchSize:
ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case TimeOut:
ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case QueryCondition:
ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyHost:
ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyPort:
ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyUsername:
ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case SFProxyPassword:
ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}
}
}",0.3698249059073801
126750,"private static SSLContext getSSLContext(String userDir) throws Exception {
  if (sslcontext == null) {
    String keystorePath=System.getProperty(TAC_SSL_CLIENT_KEY);
    String trustStorePath=System.getProperty(TAC_SSL_CLIENT_TRUST_KEY);
    String keystorePass=System.getProperty(TAC_SSL_KEYSTORE_PASS);
    String truststorePass=System.getProperty(TAC_SSL_TRUSTSTORE_PASS);
    if (keystorePath == null) {
      File keystorePathFile=new File(userDir + TAC_SSL_KEYSTORE);
      if (keystorePathFile.exists()) {
        keystorePath=keystorePathFile.getAbsolutePath();
      }
    }
    if (trustStorePath == null) {
      File trustStorePathFile=new File(userDir + TAC_SSL_TRUSTSTORE);
      if (trustStorePathFile.exists()) {
        trustStorePath=trustStorePathFile.getAbsolutePath();
      }
    }
    if (keystorePass == null) {
      keystorePass=""String_Node_Str"";
    }
    if (truststorePass == null) {
      truststorePass=""String_Node_Str"";
    }
    sslcontext=SSLContext.getInstance(""String_Node_Str"");
    KeyManager[] keystoreManagers=null;
    if (keystorePath != null) {
      KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
      KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
      ks.load(new FileInputStream(keystorePath),keystorePass.toCharArray());
      kmf.init(ks,keystorePass.toCharArray());
      keystoreManagers=kmf.getKeyManagers();
    }
    TrustManager[] truststoreManagers=null;
    if (trustStorePath != null) {
      TrustManagerFactory tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
      KeyStore tks=KeyStore.getInstance(KeyStore.getDefaultType());
      tks.load(new FileInputStream(trustStorePath),truststorePass.toCharArray());
      tmf.init(tks);
      truststoreManagers=tmf.getTrustManagers();
    }
 else {
      truststoreManagers=new TrustManager[]{new TrustAnyTrustManager()};
    }
    sslcontext.init(keystoreManagers,truststoreManagers,null);
  }
  return sslcontext;
}","public static SSLContext getSSLContext(String userDir) throws Exception {
  if (sslcontext == null) {
    String keystorePath=System.getProperty(TAC_SSL_CLIENT_KEY);
    String trustStorePath=System.getProperty(TAC_SSL_CLIENT_TRUST_KEY);
    String keystorePass=System.getProperty(TAC_SSL_KEYSTORE_PASS);
    String truststorePass=System.getProperty(TAC_SSL_TRUSTSTORE_PASS);
    if (keystorePath == null) {
      File keystorePathFile=new File(userDir + TAC_SSL_KEYSTORE);
      if (keystorePathFile.exists()) {
        keystorePath=keystorePathFile.getAbsolutePath();
      }
    }
    if (trustStorePath == null) {
      File trustStorePathFile=new File(userDir + TAC_SSL_TRUSTSTORE);
      if (trustStorePathFile.exists()) {
        trustStorePath=trustStorePathFile.getAbsolutePath();
      }
    }
    if (keystorePass == null) {
      keystorePass=""String_Node_Str"";
    }
    if (truststorePass == null) {
      truststorePass=""String_Node_Str"";
    }
    sslcontext=SSLContext.getInstance(""String_Node_Str"");
    KeyManager[] keystoreManagers=null;
    if (keystorePath != null) {
      KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
      KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());
      ks.load(new FileInputStream(keystorePath),keystorePass.toCharArray());
      kmf.init(ks,keystorePass.toCharArray());
      keystoreManagers=kmf.getKeyManagers();
    }
    TrustManager[] truststoreManagers=null;
    if (trustStorePath != null) {
      TrustManagerFactory tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
      KeyStore tks=KeyStore.getInstance(KeyStore.getDefaultType());
      tks.load(new FileInputStream(trustStorePath),truststorePass.toCharArray());
      tmf.init(tks);
      truststoreManagers=tmf.getTrustManagers();
    }
 else {
      truststoreManagers=new TrustManager[]{new TrustAnyTrustManager()};
    }
    sslcontext.init(keystoreManagers,truststoreManagers,null);
  }
  return sslcontext;
}",0.997211660329531
126751,"@Override public boolean canModify(Object element,String property){
  if (element instanceof IMetadataColumn) {
    IMetadataColumn column=(IMetadataColumn)element;
    if (column.isReadOnly() || (column.isCustom() && property.equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME))) {
      return false;
    }
  }
  return super.canModify(element,property);
}","@Override public boolean canModify(Object element,String property){
  if (element instanceof IMetadataColumn) {
    IMetadataColumn column=(IMetadataColumn)element;
    if (column.isReadOnly()) {
      return false;
    }
    if (column.isCustom()) {
      if (property.equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
        return false;
      }
 else {
        return true;
      }
    }
  }
  return super.canModify(element,property);
}",0.8631319358816276
126752,"@Override public Color getBackground(Object element,int columnIndex){
  if (!(element instanceof IMetadataColumn)) {
    return null;
  }
  IMetadataColumn column=(IMetadataColumn)element;
  TableViewerCreatorColumnNotModifiable tableColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(columnIndex);
  if (column.isCustom()) {
    if (column.isReadOnly() || readOnly || tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
      return CELL_READ_ONLY_COLOR;
    }
 else {
      return CUSTOM_CELL_BG_COLOR;
    }
  }
  if (column.isReadOnly()) {
    return TABLE_READ_ONLY_COLOR;
  }
  if (tableEditorView.isShowTalendTypeColumn() && tableEditorView.getCurrentDbms() != null) {
    if (tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_DBTYPE) && !""String_Node_Str"".equals(column.getType()) && !TypesManager.checkDBType(tableEditorView.getCurrentDbms(),column.getTalendType(),column.getType())) {
      return CELL_WRONG_DB_TYPE_COLOR;
    }
  }
  return super.getBackground(element,columnIndex);
}","@Override public Color getBackground(Object element,int columnIndex){
  if (!(element instanceof IMetadataColumn)) {
    return null;
  }
  IMetadataColumn column=(IMetadataColumn)element;
  TableViewerCreatorColumnNotModifiable tableColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(columnIndex);
  if (column.isCustom()) {
    if (column.isReadOnly() || tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
      return CELL_READ_ONLY_COLOR;
    }
 else {
      return CUSTOM_CELL_BG_COLOR;
    }
  }
  if (column.isReadOnly()) {
    return TABLE_READ_ONLY_COLOR;
  }
  if (tableEditorView.isShowTalendTypeColumn() && tableEditorView.getCurrentDbms() != null) {
    if (tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_DBTYPE) && !""String_Node_Str"".equals(column.getType()) && !TypesManager.checkDBType(tableEditorView.getCurrentDbms(),column.getTalendType(),column.getType())) {
      return CELL_WRONG_DB_TYPE_COLOR;
    }
  }
  return super.getBackground(element,columnIndex);
}",0.9943714821763602
126753,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) & !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9999362204222207
126754,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
126755,"public static void addCustomManagementToToolBar(final MetadataTableEditorView tableEditorView,final IMetadataTable table,final boolean readOnly,final MetadataTableEditorView linkedTableEditorView,final IMetadataTable linkedTable,final boolean toPropagate){
  tableEditorView.getTableViewerCreator().getTableViewer().addPostSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateToolBarButtonsOnSelection(event.getSelection(),tableEditorView,table,linkedTableEditorView,linkedTable,readOnly);
    }
  }
);
  boolean isThereCustom=false;
  for (  IMetadataColumn column : table.getListColumns()) {
    if (column.isCustom()) {
      isThereCustom=true;
    }
  }
  if (isThereCustom) {
    tableEditorView.getToolBar().getImportButton().getButton().setEnabled(false);
  }
  if (table.isReadOnly()) {
    tableEditorView.getToolBar().getAddButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getMoveDownButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getMoveUpButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getRemoveButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getPasteButton().getButton().setEnabled(false);
    ResetDBTypesPushButton resetDBTypesButton=tableEditorView.getToolBar().getResetDBTypesButton();
    if (resetDBTypesButton != null) {
      resetDBTypesButton.getButton().setEnabled(false);
    }
  }
 else {
    tableEditorView.getToolBar().getAddButton().getButton().addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      SelectionEvent e){
      }
      public void widgetSelected(      SelectionEvent e){
        table.sortCustomColumns();
        tableEditorView.getTableViewerCreator().getTableViewer().refresh();
      }
    }
);
  }
  SelectionListener customListener=new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      updateToolBarButtonsOnSelection(tableEditorView.getTableViewerCreator().getTableViewer().getSelection(),tableEditorView,table,linkedTableEditorView,linkedTable,readOnly);
    }
  }
;
  tableEditorView.getToolBar().getRemoveButton().getButton().addSelectionListener(customListener);
  tableEditorView.getToolBar().getCopyButton().getButton().addSelectionListener(customListener);
  if (toPropagate) {
    if (linkedTable.isReadOnly()) {
      SelectionListener updateLinkedTableListener=new SelectionListener(){
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          MetadataToolHelper.copyTable(table,linkedTable);
          linkedTableEditorView.getTableViewerCreator().refresh();
          if (linkedTableEditorView != null) {
            linkedTableEditorView.getTableViewerCreator().getTableViewer().refresh();
          }
        }
      }
;
      tableEditorView.getToolBar().getButtons();
      for (      Object element2 : tableEditorView.getToolBar().getButtons()) {
        ExtendedPushButton element=(ExtendedPushButton)element2;
        element.getButton().addSelectionListener(updateLinkedTableListener);
      }
    }
  }
}","public static void addCustomManagementToToolBar(final MetadataTableEditorView tableEditorView,final IMetadataTable table,final boolean readOnly,final MetadataTableEditorView linkedTableEditorView,final IMetadataTable linkedTable,final boolean toPropagate){
  tableEditorView.getTableViewerCreator().getTableViewer().addPostSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      updateToolBarButtonsOnSelection(event.getSelection(),tableEditorView,table,linkedTableEditorView,linkedTable,readOnly);
    }
  }
);
  boolean isThereCustom=false;
  for (  IMetadataColumn column : table.getListColumns()) {
    if (column.isCustom()) {
      isThereCustom=true;
    }
  }
  if (isThereCustom) {
    tableEditorView.getToolBar().getImportButton().getButton().setEnabled(false);
  }
  if (table.isReadOnly()) {
    tableEditorView.getToolBar().getAddButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getMoveDownButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getMoveUpButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getRemoveButton().getButton().setEnabled(false);
    tableEditorView.getToolBar().getPasteButton().getButton().setEnabled(false);
    ResetDBTypesPushButton resetDBTypesButton=tableEditorView.getToolBar().getResetDBTypesButton();
    if (resetDBTypesButton != null) {
      resetDBTypesButton.getButton().setEnabled(false);
    }
  }
 else {
    tableEditorView.getToolBar().getAddButton().getButton().addSelectionListener(new SelectionListener(){
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
      @Override public void widgetSelected(      SelectionEvent e){
        table.sortCustomColumns();
        tableEditorView.getTableViewerCreator().getTableViewer().refresh();
      }
    }
);
  }
  SelectionListener customListener=new SelectionListener(){
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
    @Override public void widgetSelected(    SelectionEvent e){
      updateToolBarButtonsOnSelection(tableEditorView.getTableViewerCreator().getTableViewer().getSelection(),tableEditorView,table,linkedTableEditorView,linkedTable,readOnly);
    }
  }
;
  tableEditorView.getToolBar().getRemoveButton().getButton().addSelectionListener(customListener);
  tableEditorView.getToolBar().getCopyButton().getButton().addSelectionListener(customListener);
  if (toPropagate) {
    if (linkedTable.isReadOnly()) {
      SelectionListener updateLinkedTableListener=new SelectionListener(){
        @Override public void widgetDefaultSelected(        SelectionEvent e){
        }
        @Override public void widgetSelected(        SelectionEvent e){
          MetadataToolHelper.copyTable(table,linkedTable);
          linkedTableEditorView.getTableViewerCreator().refresh();
          if (linkedTableEditorView != null) {
            linkedTableEditorView.getTableViewerCreator().getTableViewer().refresh();
          }
        }
      }
;
      tableEditorView.getToolBar().getButtons();
      for (      Object element2 : tableEditorView.getToolBar().getButtons()) {
        ExtendedPushButton element=(ExtendedPushButton)element2;
        element.getButton().addSelectionListener(updateLinkedTableListener);
      }
    }
  }
}",0.9894705174488568
126756,"public void widgetSelected(SelectionEvent e){
  MetadataToolHelper.copyTable(table,linkedTable);
  linkedTableEditorView.getTableViewerCreator().refresh();
  if (linkedTableEditorView != null) {
    linkedTableEditorView.getTableViewerCreator().getTableViewer().refresh();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  MetadataToolHelper.copyTable(table,linkedTable);
  linkedTableEditorView.getTableViewerCreator().refresh();
  if (linkedTableEditorView != null) {
    linkedTableEditorView.getTableViewerCreator().getTableViewer().refresh();
  }
}",0.9823321554770318
126757,"public void selectionChanged(SelectionChangedEvent event){
  updateToolBarButtonsOnSelection(event.getSelection(),tableEditorView,table,linkedTableEditorView,linkedTable,readOnly);
}","@Override public void selectionChanged(SelectionChangedEvent event){
  updateToolBarButtonsOnSelection(event.getSelection(),tableEditorView,table,linkedTableEditorView,linkedTable,readOnly);
}",0.9732620320855616
126758,"@Override public boolean canModify(Object element,String property){
  if (element instanceof IMetadataColumn) {
    IMetadataColumn column=(IMetadataColumn)element;
    if (column.isReadOnly() || (column.isCustom() && property.equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME))) {
      return false;
    }
  }
  return super.canModify(element,property);
}","@Override public boolean canModify(Object element,String property){
  if (element instanceof IMetadataColumn) {
    IMetadataColumn column=(IMetadataColumn)element;
    if (column.isReadOnly()) {
      return false;
    }
    if (column.isCustom()) {
      if (property.equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
        return false;
      }
 else {
        return true;
      }
    }
  }
  return super.canModify(element,property);
}",0.8631319358816276
126759,"@Override public Color getBackground(Object element,int columnIndex){
  if (!(element instanceof IMetadataColumn)) {
    return null;
  }
  IMetadataColumn column=(IMetadataColumn)element;
  TableViewerCreatorColumnNotModifiable tableColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(columnIndex);
  if (column.isCustom()) {
    if (column.isReadOnly() || readOnly || tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
      return CELL_READ_ONLY_COLOR;
    }
 else {
      return CUSTOM_CELL_BG_COLOR;
    }
  }
  if (column.isReadOnly()) {
    return TABLE_READ_ONLY_COLOR;
  }
  if (tableEditorView.isShowTalendTypeColumn() && tableEditorView.getCurrentDbms() != null) {
    if (tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_DBTYPE) && !""String_Node_Str"".equals(column.getType()) && !TypesManager.checkDBType(tableEditorView.getCurrentDbms(),column.getTalendType(),column.getType())) {
      return CELL_WRONG_DB_TYPE_COLOR;
    }
  }
  return super.getBackground(element,columnIndex);
}","@Override public Color getBackground(Object element,int columnIndex){
  if (!(element instanceof IMetadataColumn)) {
    return null;
  }
  IMetadataColumn column=(IMetadataColumn)element;
  TableViewerCreatorColumnNotModifiable tableColumn=(TableViewerCreatorColumnNotModifiable)tableViewerCreator.getColumns().get(columnIndex);
  if (column.isCustom()) {
    if (column.isReadOnly() || tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_NAME)) {
      return CELL_READ_ONLY_COLOR;
    }
 else {
      return CUSTOM_CELL_BG_COLOR;
    }
  }
  if (column.isReadOnly()) {
    return TABLE_READ_ONLY_COLOR;
  }
  if (tableEditorView.isShowTalendTypeColumn() && tableEditorView.getCurrentDbms() != null) {
    if (tableColumn.getId().equals(AbstractMetadataTableEditorView.ID_COLUMN_DBTYPE) && !""String_Node_Str"".equals(column.getType()) && !TypesManager.checkDBType(tableEditorView.getCurrentDbms(),column.getTalendType(),column.getType())) {
      return CELL_WRONG_DB_TYPE_COLOR;
    }
  }
  return super.getBackground(element,columnIndex);
}",0.9943714821763602
126760,"@Override public Set<ItemReferenceBean> checkItemReferenceBeans(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,IRepositoryViewObject object){
  Item nodeItem=object.getProperty().getItem();
  boolean needCheckJobIfUsedInProcess=false;
  if (nodeItem instanceof ProcessItem) {
    needCheckJobIfUsedInProcess=true;
  }
  Set<ItemReferenceBean> list=new HashSet<ItemReferenceBean>();
  if (needCheckJobIfUsedInProcess) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      ERepositoryObjectType type=object.getRepositoryObjectType();
      boolean isItemDeleted=factory.getStatus(object) == ERepositoryStatus.DELETED;
      Item item=property.getItem();
      if (!(item instanceof ProcessItem)) {
        return list;
      }
      EList<?> nodesList=null;
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS,true);
          deleteActionCache.setProcessList(processes);
          for (          IRepositoryViewObject process : deleteActionCache.getProcessList()) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            if (!isOpenedItem(item2,deleteActionCache.getOpenProcessMap())) {
              if (item2 instanceof ProcessItem) {
                nodesList=((ProcessItem)item2).getProcess().getNode();
              }
            }
            if (nodesList != null) {
              for (              Object object2 : nodesList) {
                if (object2 instanceof NodeType) {
                  NodeType nodeType=(NodeType)object2;
                  boolean equals=false;
                  if (""String_Node_Str"".equals(nodeType.getComponentName())) {
                    for (                    Object obj : nodeType.getElementParameter()) {
                      if (obj != null && obj instanceof ElementParameterType) {
                        ElementParameterType param=(ElementParameterType)obj;
                        if (""String_Node_Str"".equals(param.getName())) {
                          if (property.getId().equals(param.getValue())) {
                            equals=true;
                          }
                        }
                      }
                    }
                  }
                  if (equals) {
                    String path=item2.getState().getPath();
                    boolean found=false;
                    ItemReferenceBean bean=new ItemReferenceBean();
                    bean.setItemName(label);
                    bean.setItemVersion(version);
                    bean.setItemType(type);
                    bean.setItemDeleted(isItemDeleted);
                    bean.setReferenceItemName(property2.getLabel());
                    bean.setReferenceItemVersion(property2.getVersion());
                    bean.setReferenceItemType(process.getRepositoryObjectType());
                    bean.setReferenceItemPath(path);
                    bean.setReferenceProjectName(refP.getLabel());
                    bean.setReferenceItemDeleted(isDelete);
                    for (                    ItemReferenceBean b : list) {
                      if (b.equals(bean)) {
                        found=true;
                        b.addNodeNum();
                        break;
                      }
                    }
                    if (!found) {
                      list.add(bean);
                    }
                  }
                }
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            for (            INode node : openedProcess.getGraphicalNodes()) {
              boolean equals=false;
              IElementParameter processTypeParam=node.getElementParameter(PROCESS_TYPE_PROCESS);
              if (processTypeParam != null && property.getId().equals(processTypeParam.getValue())) {
                equals=true;
              }
              boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
              Property property2=openedProcess.getProperty();
              Item item2=property2.getItem();
              String path=item2.getState().getPath();
              if (equals) {
                boolean found=false;
                ItemReferenceBean bean=new ItemReferenceBean();
                bean.setItemName(label);
                bean.setItemVersion(version);
                bean.setItemType(type);
                bean.setItemDeleted(isItemDeleted);
                bean.setReferenceItemName(property2.getLabel());
                bean.setReferenceItemVersion(property2.getVersion());
                bean.setReferenceItemType(ERepositoryObjectType.getItemType(item2));
                bean.setReferenceItemPath(path);
                bean.setReferenceProjectName(refP.getLabel());
                bean.setReferenceItemDeleted(isDelete);
                for (                ItemReferenceBean b : list) {
                  if (b.equals(bean)) {
                    found=true;
                    b.addNodeNum();
                    break;
                  }
                }
                if (!found) {
                  list.add(bean);
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  Iterator<ItemReferenceBean> it=list.iterator();
  while (it.hasNext()) {
    ItemReferenceBean bean=it.next();
    if ((!bean.isItemDeleted() && bean.isReferenceItemDeleted()) || (bean.isItemDeleted() && bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true)) || (!bean.isItemDeleted() && !bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true))) {
      it.remove();
    }
  }
  return list;
}","@Override public Set<ItemReferenceBean> checkItemReferenceBeans(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,IRepositoryViewObject object){
  Item nodeItem=object.getProperty().getItem();
  boolean needCheckJobIfUsedInProcess=false;
  if (nodeItem instanceof ProcessItem) {
    needCheckJobIfUsedInProcess=true;
  }
  Set<ItemReferenceBean> list=new HashSet<ItemReferenceBean>();
  if (needCheckJobIfUsedInProcess) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      ERepositoryObjectType type=object.getRepositoryObjectType();
      boolean isItemDeleted=factory.getStatus(object) == ERepositoryStatus.DELETED;
      Item item=property.getItem();
      if (!(item instanceof ProcessItem)) {
        return list;
      }
      EList<?> nodesList=null;
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS,true);
          deleteActionCache.setProcessList(processes);
          for (          IRepositoryViewObject process : deleteActionCache.getProcessList()) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            if (!isOpenedItem(item2,deleteActionCache.getOpenProcessMap())) {
              if (item2 instanceof ProcessItem) {
                nodesList=((ProcessItem)item2).getProcess().getNode();
              }
            }
            if (nodesList != null) {
              for (              Object object2 : nodesList) {
                if (object2 instanceof NodeType) {
                  NodeType nodeType=(NodeType)object2;
                  boolean equals=false;
                  if (""String_Node_Str"".equals(nodeType.getComponentName())) {
                    boolean isUseDynamicJob=false;
                    for (                    Object obj : nodeType.getElementParameter()) {
                      if (obj != null && obj instanceof ElementParameterType) {
                        ElementParameterType param=(ElementParameterType)obj;
                        if (USE_DYNAMIC_JOB.equals(param.getName())) {
                          isUseDynamicJob=Boolean.parseBoolean(param.getValue());
                        }
                        if (""String_Node_Str"".equals(param.getName())) {
                          if (isUseDynamicJob) {
                            String[] jobIDs=param.getValue().split(""String_Node_Str"");
                            for (                            String jobID : jobIDs) {
                              if (property.getId().equals(jobID)) {
                                equals=true;
                                break;
                              }
                            }
                          }
 else                           if (property.getId().equals(param.getValue())) {
                            equals=true;
                          }
                        }
                      }
                    }
                  }
                  if (equals) {
                    String path=item2.getState().getPath();
                    boolean found=false;
                    ItemReferenceBean bean=new ItemReferenceBean();
                    bean.setItemName(label);
                    bean.setItemVersion(version);
                    bean.setItemType(type);
                    bean.setItemDeleted(isItemDeleted);
                    bean.setReferenceItemName(property2.getLabel());
                    bean.setReferenceItemVersion(property2.getVersion());
                    bean.setReferenceItemType(process.getRepositoryObjectType());
                    bean.setReferenceItemPath(path);
                    bean.setReferenceProjectName(refP.getLabel());
                    bean.setReferenceItemDeleted(isDelete);
                    for (                    ItemReferenceBean b : list) {
                      if (b.equals(bean)) {
                        found=true;
                        b.addNodeNum();
                        break;
                      }
                    }
                    if (!found) {
                      list.add(bean);
                    }
                  }
                }
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            for (            INode node : openedProcess.getGraphicalNodes()) {
              boolean equals=false;
              IElementParameter processTypeParam=node.getElementParameter(PROCESS_TYPE_PROCESS);
              if (processTypeParam != null) {
                IElementParameter isUseDynamicJob=node.getElementParameter(USE_DYNAMIC_JOB);
                if (isUseDynamicJob != null && (Boolean)isUseDynamicJob.getValue()) {
                  String[] jobsID=((String)processTypeParam.getValue()).split(""String_Node_Str"");
                  for (                  String jobID : jobsID) {
                    if (property.getId().equals(jobID)) {
                      equals=true;
                      break;
                    }
                  }
                }
 else                 if (property.getId().equals(processTypeParam.getValue())) {
                  equals=true;
                }
              }
              boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
              Property property2=openedProcess.getProperty();
              Item item2=property2.getItem();
              String path=item2.getState().getPath();
              if (equals) {
                boolean found=false;
                ItemReferenceBean bean=new ItemReferenceBean();
                bean.setItemName(label);
                bean.setItemVersion(version);
                bean.setItemType(type);
                bean.setItemDeleted(isItemDeleted);
                bean.setReferenceItemName(property2.getLabel());
                bean.setReferenceItemVersion(property2.getVersion());
                bean.setReferenceItemType(ERepositoryObjectType.getItemType(item2));
                bean.setReferenceItemPath(path);
                bean.setReferenceProjectName(refP.getLabel());
                bean.setReferenceItemDeleted(isDelete);
                for (                ItemReferenceBean b : list) {
                  if (b.equals(bean)) {
                    found=true;
                    b.addNodeNum();
                    break;
                  }
                }
                if (!found) {
                  list.add(bean);
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  Iterator<ItemReferenceBean> it=list.iterator();
  while (it.hasNext()) {
    ItemReferenceBean bean=it.next();
    if ((!bean.isItemDeleted() && bean.isReferenceItemDeleted()) || (bean.isItemDeleted() && bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true)) || (!bean.isItemDeleted() && !bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true))) {
      it.remove();
    }
  }
  return list;
}",0.909038860659844
126761,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_SERVER.getDisplayName()) & !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_WEBSERVER.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9858990944372574
126762,"private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
 else   if (!item.isNeedVersion()) {
    Property property=item.getProperty();
    URI uri=property.eResource().getURI();
    IPath fullPath=URIHelper.convert(uri);
    fullPath=fullPath.removeLastSegments(1);
    fullPath=fullPath.append(property.getLabel()).addFileExtension(FileConstants.PROPERTIES_EXTENSION);
    return URIHelper.convert(fullPath);
  }
  return item.getProperty().eResource().getURI();
}","private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
 else   if (!item.isNeedVersion()) {
    IPath fullPath=null;
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType != null && project != null && project.equals(pManager.getCurrentProject())) {
      fullPath=new Path(project.getTechnicalLabel());
      fullPath=fullPath.append(itemType.getFolder());
      fullPath=fullPath.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      fullPath=fullPath.append(itemStr);
    }
 else {
      Property property=item.getProperty();
      URI uri=property.eResource().getURI();
      fullPath=URIHelper.convert(uri);
      if (fullPath == null) {
        fullPath=new Path(uri.devicePath());
      }
      fullPath=fullPath.removeLastSegments(1);
      fullPath=fullPath.append(property.getLabel()).addFileExtension(FileConstants.PROPERTIES_EXTENSION);
    }
    return URIHelper.convert(fullPath);
  }
  return item.getProperty().eResource().getURI();
}",0.7469967236985803
126763,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI(),(((Property)object).getItem()).isNeedVersion(),(((Property)object).getItem()).getFileExtension()));
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.991131023132486
126764,"public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (    LogCatcherMessage lcm : messages) {
      messagesToSend.add(lcm);
    }
    messages.clear();
  }
  return messagesToSend;
}","public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (int index=0; index < messages.size(); index++) {
      LogCatcherMessage lcm=messages.get(index);
      if (Thread.currentThread().getId() == lcm.getThreadId()) {
        messagesToSend.add(lcm);
        messages.remove(index);
      }
    }
  }
  return messagesToSend;
}",0.7361647361647362
126765,"public LogCatcherMessage(String type,String origin,int priority,String message,int code){
  this.type=type;
  this.origin=origin;
  this.priority=priority;
  this.message=message;
  this.code=code;
}","public LogCatcherMessage(String type,String origin,int priority,String message,int code){
  this.type=type;
  this.origin=origin;
  this.priority=priority;
  this.message=message;
  this.code=code;
  this.threadId=Thread.currentThread().getId();
}",0.8923766816143498
126766,"/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}","/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return TalendQuoteUtils.addQuotesIfNotExist(connection.getWSDL());
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}",0.9987562189054726
126767,"public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (int index=0; index < messages.size(); index++) {
      LogCatcherMessage lcm=messages.get(index);
      if (Thread.currentThread().getId() == lcm.getThreadId()) {
        messagesToSend.add(lcm);
        messages.remove(index);
      }
    }
    if (messages.size() == 0) {
      messages.clear();
    }
  }
  return messagesToSend;
}","public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (int index=0; index < messages.size(); index++) {
      LogCatcherMessage lcm=messages.get(index);
      if (Thread.currentThread().getId() == lcm.getThreadId()) {
        messagesToSend.add(lcm);
        messages.remove(index);
      }
    }
  }
  return messagesToSend;
}",0.890020366598778
126768,"@Override public Set<ItemReferenceBean> checkItemReferenceBeans(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,IRepositoryViewObject object){
  Item nodeItem=object.getProperty().getItem();
  boolean needCheckJobIfUsedInProcess=false;
  if (nodeItem instanceof ProcessItem) {
    needCheckJobIfUsedInProcess=true;
  }
  Set<ItemReferenceBean> list=new HashSet<ItemReferenceBean>();
  if (needCheckJobIfUsedInProcess) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      ERepositoryObjectType type=object.getRepositoryObjectType();
      boolean isItemDeleted=factory.getStatus(object) == ERepositoryStatus.DELETED;
      Item item=property.getItem();
      if (!(item instanceof ProcessItem)) {
        return list;
      }
      EList<?> nodesList=null;
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS,true);
          deleteActionCache.setProcessList(processes);
          for (          IRepositoryViewObject process : deleteActionCache.getProcessList()) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            if (!isOpenedItem(item2,deleteActionCache.getOpenProcessMap())) {
              if (item2 instanceof ProcessItem) {
                nodesList=((ProcessItem)item2).getProcess().getNode();
              }
            }
            if (nodesList != null) {
              for (              Object object2 : nodesList) {
                if (object2 instanceof NodeType) {
                  NodeType nodeType=(NodeType)object2;
                  boolean equals=false;
                  if (""String_Node_Str"".equals(nodeType.getComponentName())) {
                    for (                    Object obj : nodeType.getElementParameter()) {
                      if (obj != null && obj instanceof ElementParameterType) {
                        ElementParameterType param=(ElementParameterType)obj;
                        if (""String_Node_Str"".equals(param.getName())) {
                          if (property.getId().equals(param.getValue())) {
                            equals=true;
                          }
                        }
                      }
                    }
                  }
                  if (equals) {
                    String path=item2.getState().getPath();
                    boolean found=false;
                    ItemReferenceBean bean=new ItemReferenceBean();
                    bean.setItemName(label);
                    bean.setItemVersion(version);
                    bean.setItemType(type);
                    bean.setItemDeleted(isItemDeleted);
                    bean.setReferenceItemName(property2.getLabel());
                    bean.setReferenceItemVersion(property2.getVersion());
                    bean.setReferenceItemType(process.getRepositoryObjectType());
                    bean.setReferenceItemPath(path);
                    bean.setReferenceProjectName(refP.getLabel());
                    bean.setReferenceItemDeleted(isDelete);
                    for (                    ItemReferenceBean b : list) {
                      if (b.equals(bean)) {
                        found=true;
                        b.addNodeNum();
                        break;
                      }
                    }
                    if (!found) {
                      list.add(bean);
                    }
                  }
                }
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            for (            INode node : openedProcess.getGraphicalNodes()) {
              boolean equals=false;
              IElementParameter processTypeParam=node.getElementParameter(PROCESS_TYPE_PROCESS);
              if (processTypeParam != null && property.getId().equals(processTypeParam.getValue())) {
                equals=true;
              }
              boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
              Property property2=openedProcess.getProperty();
              Item item2=property2.getItem();
              String path=item2.getState().getPath();
              if (equals) {
                boolean found=false;
                ItemReferenceBean bean=new ItemReferenceBean();
                bean.setItemName(label);
                bean.setItemVersion(version);
                bean.setItemType(type);
                bean.setItemDeleted(isItemDeleted);
                bean.setReferenceItemName(property2.getLabel());
                bean.setReferenceItemVersion(property2.getVersion());
                bean.setReferenceItemType(ERepositoryObjectType.getItemType(item2));
                bean.setReferenceItemPath(path);
                bean.setReferenceProjectName(refP.getLabel());
                bean.setReferenceItemDeleted(isDelete);
                for (                ItemReferenceBean b : list) {
                  if (b.equals(bean)) {
                    found=true;
                    b.addNodeNum();
                    break;
                  }
                }
                if (!found) {
                  list.add(bean);
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  Iterator<ItemReferenceBean> it=list.iterator();
  while (it.hasNext()) {
    ItemReferenceBean bean=it.next();
    if ((!bean.isItemDeleted() && bean.isReferenceItemDeleted()) || (bean.isItemDeleted() && bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true)) || (!bean.isItemDeleted() && !bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true))) {
      it.remove();
    }
  }
  return list;
}","@Override public Set<ItemReferenceBean> checkItemReferenceBeans(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,IRepositoryViewObject object){
  Item nodeItem=object.getProperty().getItem();
  boolean needCheckJobIfUsedInProcess=false;
  if (nodeItem instanceof ProcessItem) {
    needCheckJobIfUsedInProcess=true;
  }
  Set<ItemReferenceBean> list=new HashSet<ItemReferenceBean>();
  if (needCheckJobIfUsedInProcess) {
    Property property=object.getProperty();
    if (property != null) {
      String label=property.getLabel();
      String version=property.getVersion();
      ERepositoryObjectType type=object.getRepositoryObjectType();
      boolean isItemDeleted=factory.getStatus(object) == ERepositoryStatus.DELETED;
      Item item=property.getItem();
      if (!(item instanceof ProcessItem)) {
        return list;
      }
      EList<?> nodesList=null;
      Set<Project> refParentProjects=new HashSet<Project>();
      try {
        refParentProjects.add(ProjectManager.getInstance().getCurrentProject());
        refParentProjects.addAll(ProjectManager.getInstance().getReferencedProjects());
        for (        Project refP : refParentProjects) {
          List<IRepositoryViewObject> processes=factory.getAll(refP,ERepositoryObjectType.PROCESS,true);
          deleteActionCache.setProcessList(processes);
          for (          IRepositoryViewObject process : deleteActionCache.getProcessList()) {
            Property property2=process.getProperty();
            boolean isDelete=factory.getStatus(process) == ERepositoryStatus.DELETED;
            Item item2=property2.getItem();
            if (item == item2) {
              continue;
            }
            if (!isOpenedItem(item2,deleteActionCache.getOpenProcessMap())) {
              if (item2 instanceof ProcessItem) {
                nodesList=((ProcessItem)item2).getProcess().getNode();
              }
            }
            if (nodesList != null) {
              for (              Object object2 : nodesList) {
                if (object2 instanceof NodeType) {
                  NodeType nodeType=(NodeType)object2;
                  boolean equals=false;
                  if (""String_Node_Str"".equals(nodeType.getComponentName())) {
                    boolean isUseDynamicJob=false;
                    for (                    Object obj : nodeType.getElementParameter()) {
                      if (obj != null && obj instanceof ElementParameterType) {
                        ElementParameterType param=(ElementParameterType)obj;
                        if (USE_DYNAMIC_JOB.equals(param.getName())) {
                          isUseDynamicJob=Boolean.parseBoolean(param.getValue());
                        }
                        if (""String_Node_Str"".equals(param.getName())) {
                          if (isUseDynamicJob) {
                            String[] jobIDs=param.getValue().split(""String_Node_Str"");
                            for (                            String jobID : jobIDs) {
                              if (property.getId().equals(jobID)) {
                                equals=true;
                                break;
                              }
                            }
                          }
 else                           if (property.getId().equals(param.getValue())) {
                            equals=true;
                          }
                        }
                      }
                    }
                  }
                  if (equals) {
                    String path=item2.getState().getPath();
                    boolean found=false;
                    ItemReferenceBean bean=new ItemReferenceBean();
                    bean.setItemName(label);
                    bean.setItemVersion(version);
                    bean.setItemType(type);
                    bean.setItemDeleted(isItemDeleted);
                    bean.setReferenceItemName(property2.getLabel());
                    bean.setReferenceItemVersion(property2.getVersion());
                    bean.setReferenceItemType(process.getRepositoryObjectType());
                    bean.setReferenceItemPath(path);
                    bean.setReferenceProjectName(refP.getLabel());
                    bean.setReferenceItemDeleted(isDelete);
                    for (                    ItemReferenceBean b : list) {
                      if (b.equals(bean)) {
                        found=true;
                        b.addNodeNum();
                        break;
                      }
                    }
                    if (!found) {
                      list.add(bean);
                    }
                  }
                }
              }
            }
          }
          for (          IProcess2 openedProcess : deleteActionCache.getOpenedProcessList()) {
            for (            INode node : openedProcess.getGraphicalNodes()) {
              boolean equals=false;
              IElementParameter processTypeParam=node.getElementParameter(PROCESS_TYPE_PROCESS);
              if (processTypeParam != null) {
                IElementParameter isUseDynamicJob=node.getElementParameter(USE_DYNAMIC_JOB);
                if (isUseDynamicJob != null && (Boolean)isUseDynamicJob.getValue()) {
                  String[] jobsID=((String)processTypeParam.getValue()).split(""String_Node_Str"");
                  for (                  String jobID : jobsID) {
                    if (property.getId().equals(jobID)) {
                      equals=true;
                      break;
                    }
                  }
                }
 else                 if (property.getId().equals(processTypeParam.getValue())) {
                  equals=true;
                }
              }
              boolean isDelete=factory.getStatus(openedProcess) == ERepositoryStatus.DELETED;
              Property property2=openedProcess.getProperty();
              Item item2=property2.getItem();
              String path=item2.getState().getPath();
              if (equals) {
                boolean found=false;
                ItemReferenceBean bean=new ItemReferenceBean();
                bean.setItemName(label);
                bean.setItemVersion(version);
                bean.setItemType(type);
                bean.setItemDeleted(isItemDeleted);
                bean.setReferenceItemName(property2.getLabel());
                bean.setReferenceItemVersion(property2.getVersion());
                bean.setReferenceItemType(ERepositoryObjectType.getItemType(item2));
                bean.setReferenceItemPath(path);
                bean.setReferenceProjectName(refP.getLabel());
                bean.setReferenceItemDeleted(isDelete);
                for (                ItemReferenceBean b : list) {
                  if (b.equals(bean)) {
                    found=true;
                    b.addNodeNum();
                    break;
                  }
                }
                if (!found) {
                  list.add(bean);
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  Iterator<ItemReferenceBean> it=list.iterator();
  while (it.hasNext()) {
    ItemReferenceBean bean=it.next();
    if ((!bean.isItemDeleted() && bean.isReferenceItemDeleted()) || (bean.isItemDeleted() && bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true)) || (!bean.isItemDeleted() && !bean.isReferenceItemDeleted() && isItemInDeleteList(bean,true))) {
      it.remove();
    }
  }
  return list;
}",0.909038860659844
126769,"/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}","/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath,datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}",0.9973484848484848
126770,"public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (    LogCatcherMessage lcm : messages) {
      messagesToSend.add(lcm);
    }
    messages.clear();
  }
  return messagesToSend;
}","public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (int index=0; index < messages.size(); index++) {
      LogCatcherMessage lcm=messages.get(index);
      if (Thread.currentThread().getId() == lcm.getThreadId()) {
        messagesToSend.add(lcm);
        messages.remove(index);
      }
    }
  }
  return messagesToSend;
}",0.7361647361647362
126771,"public LogCatcherMessage(String type,String origin,int priority,String message,int code){
  this.type=type;
  this.origin=origin;
  this.priority=priority;
  this.message=message;
  this.code=code;
}","public LogCatcherMessage(String type,String origin,int priority,String message,int code){
  this.type=type;
  this.origin=origin;
  this.priority=priority;
  this.message=message;
  this.code=code;
  this.threadId=Thread.currentThread().getId();
}",0.8923766816143498
126772,"public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isHsql=ConnectionUtils.isHsql(url);
          if (isHsql && !ConnectionUtils.isServerModeHsql(url)) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}","public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isInProcessModeHsql=ConnectionUtils.isInProcessModeHsql(url);
          if (isInProcessModeHsql) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.9376443418013856
126773,"/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}","/** 
 * ggu Comment method ""getUrlConnectionString"". if display is false, the string connection will be returned by default context.
 */
public static String getUrlConnectionString(ConnectionItem connectionItem,boolean defaultContext){
  if (connectionItem == null) {
    return null;
  }
  DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn,defaultContext);
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String jdbcUrl=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String driverJar=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  String mappingFile=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String template=null;
    if (dbConn.getURL() != null && dbConn.getURL().startsWith(DbConnStrForHive.URL_HIVE_2_TEMPLATE)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    return DatabaseConnStrUtil.getHiveURLString(dbConn,server,port,sidOrDatabase,template);
  }
  String newUrl=DatabaseConnStrUtil.getURLString(dbConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath,datasource,dbRootPath,additionParam,jdbcUrl,driverJar,className,mappingFile);
  return newUrl;
}",0.9973484848484848
126774,"public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (    LogCatcherMessage lcm : messages) {
      messagesToSend.add(lcm);
    }
    messages.clear();
  }
  return messagesToSend;
}","public java.util.List<LogCatcherMessage> getMessages(){
  java.util.List<LogCatcherMessage> messagesToSend=new java.util.ArrayList<LogCatcherMessage>();
synchronized (messages) {
    for (int index=0; index < messages.size(); index++) {
      LogCatcherMessage lcm=messages.get(index);
      if (Thread.currentThread().getId() == lcm.getThreadId()) {
        messagesToSend.add(lcm);
        messages.remove(index);
      }
    }
    if (messages.size() == 0) {
      messages.clear();
    }
  }
  return messagesToSend;
}",0.6817640047675805
126775,"public LogCatcherMessage(String type,String origin,int priority,String message,int code){
  this.type=type;
  this.origin=origin;
  this.priority=priority;
  this.message=message;
  this.code=code;
}","public LogCatcherMessage(String type,String origin,int priority,String message,int code){
  this.type=type;
  this.origin=origin;
  this.priority=priority;
  this.message=message;
  this.code=code;
  this.threadId=Thread.currentThread().getId();
}",0.8923766816143498
126776,"/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}","/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return TalendQuoteUtils.addQuotesIfNotExist(connection.getWSDL());
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}",0.9987562189054726
126777,"public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isHsql=ConnectionUtils.isHsql(url);
          if (isHsql && !ConnectionUtils.isServerModeHsql(url)) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}","public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isInProcessModeHsql=ConnectionUtils.isInProcessModeHsql(url);
          if (isInProcessModeHsql) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.9376443418013856
126778,"private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
 else   if (!item.isNeedVersion()) {
    Property property=item.getProperty();
    URI uri=property.eResource().getURI();
    IPath fullPath=URIHelper.convert(uri);
    fullPath=fullPath.removeLastSegments(1);
    fullPath=fullPath.append(property.getLabel()).addFileExtension(FileConstants.PROPERTIES_EXTENSION);
    return URIHelper.convert(fullPath);
  }
  return item.getProperty().eResource().getURI();
}","private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
 else   if (!item.isNeedVersion()) {
    IPath fullPath=null;
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType != null && project != null && project.equals(pManager.getCurrentProject())) {
      fullPath=new Path(project.getTechnicalLabel());
      fullPath=fullPath.append(itemType.getFolder());
      fullPath=fullPath.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      fullPath=fullPath.append(itemStr);
    }
 else {
      Property property=item.getProperty();
      URI uri=property.eResource().getURI();
      fullPath=URIHelper.convert(uri);
      if (fullPath == null) {
        fullPath=new Path(uri.devicePath());
      }
      fullPath=fullPath.removeLastSegments(1);
      fullPath=fullPath.append(property.getLabel()).addFileExtension(FileConstants.PROPERTIES_EXTENSION);
    }
    return URIHelper.convert(fullPath);
  }
  return item.getProperty().eResource().getURI();
}",0.7469967236985803
126779,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
synchronized (kaka) {
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      if (!resource.isLoaded()) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (object instanceof Property) {
          if (((Property)object).getItem() instanceof FolderItem) {
            continue;
          }
          Resource itemResource=xmiResourceManager.getItemResource(((Property)object).getItem(),false);
          if (itemResource == null || !itemResource.isLoaded()) {
            continue;
          }
          if (((Property)object).getItem() instanceof RoutineItem) {
            RoutineItem item=(RoutineItem)((Property)object).getItem();
            if (item.isBuiltIn()) {
              continue;
            }
          }
          if (((Property)object).getItem() instanceof SQLPatternItem) {
            SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
            if (item.isSystem()) {
              continue;
            }
          }
          ERepositoryStatus status=getStatus(((Property)object).getItem());
          if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
            continue;
          }
          resourceToUnload.add(resource);
          if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
            boolean toKeepInMemorySinceDeleted=false;
            if (((Property)object).getItem().getState().isDeleted()) {
              toKeepInMemorySinceDeleted=true;
            }
 else             if (((Property)object).getItem() instanceof ConnectionItem) {
              Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
              boolean haveTableDeleted=false;
              for (              MetadataTable table : ConnectionHelper.getTables(connection)) {
                if (SubItemHelper.isDeleted(table)) {
                  haveTableDeleted=true;
                  break;
                }
              }
              if (!haveTableDeleted && connection != null) {
                QueriesConnection queriesConnection=connection.getQueries();
                if (queriesConnection != null) {
                  for (                  Query query : queriesConnection.getQuery()) {
                    if (SubItemHelper.isDeleted(query)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (connection instanceof SAPConnection) {
                  SAPConnection sapConn=(SAPConnection)connection;
                  if (!haveTableDeleted) {
                    EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                    for (                    SAPFunctionUnit unit : funtions) {
                      if (SubItemHelper.isDeleted(unit)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                  if (!haveTableDeleted) {
                    EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                    for (                    SAPIDocUnit iDoc : iDocs) {
                      if (SubItemHelper.isDeleted(iDoc)) {
                        haveTableDeleted=true;
                        break;
                      }
                    }
                  }
                }
              }
              if (haveTableDeleted) {
                toKeepInMemorySinceDeleted=true;
              }
            }
            if (!toKeepInMemorySinceDeleted) {
              ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
              ((Property)object).getItem().setParent(null);
            }
          }
          possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI(),(((Property)object).getItem()).isNeedVersion(),(((Property)object).getItem()).getFileExtension()));
        }
      }
    }
    for (int i=0; i < kaka.size(); i++) {
      Resource resource=kaka.get(i);
      if (resource == null) {
        continue;
      }
      final EList<EObject> contents=resource.getContents();
      for (int j=0; j < contents.size(); j++) {
        EObject object=contents.get(j);
        if (!(object instanceof Property)) {
          if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
            resourceToUnload.add(resource);
          }
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.991131023132486
126780,"/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      String pwd=TalendQuoteUtils.checkAndAddBackslashes(connection.getPassword());
      return TalendQuoteUtils.addQuotes(pwd);
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}",0.9554492826579412
126781,"/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      String pwd=TalendQuoteUtils.checkAndAddBackslashes(connection.getPassword());
      return TalendQuoteUtils.addQuotes(pwd);
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}",0.9554492826579412
126782,"/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getWSDL();
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}","/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}",0.9965008747813048
126783,"/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  outputStream.setEncoding(""String_Node_Str"");
  useCompression=compress;
}","/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  useCompression=compress;
}",0.866571018651363
126784,"/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getWSDL();
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}","/** 
 * DOC qzhang Comment method ""getWSDLValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getWSDLValue(WSDLSchemaConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
    if (isContextMode(connection,connection.getWSDL())) {
      return connection.getWSDL();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getWSDL());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isNeedAuth());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return new Boolean(connection.isUseProxy());
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUser())) {
      return connection.getProxyUser();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUser());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (!connection.isIsInputModel()) {
      return connection.getMethodName();
    }
    if (isContextMode(connection,connection.getMethodName())) {
      return connection.getMethodName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getMethodName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    Integer timeOut=new Integer(connection.getTimeOut());
    return timeOut.toString();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getEndpointURI())) {
      return connection.getEndpointURI();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getEndpointURI());
    }
  }
 else   if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getEncoding())) {
      return connection.getEncoding();
    }
 else {
      if (connection.getEncoding() == null) {
        return TalendQuoteUtils.addQuotes(EMetadataEncoding.getMetadataEncoding(""String_Node_Str"").getName());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getEncoding());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getParameters();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getServerName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortNameSpace();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getPortName();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getParameterValue());
  }
 else   if (""String_Node_Str"".equals(value)) {
    return getOutputWSDLValue(connection.getOutputParameter());
  }
  return null;
}",0.9965008747813048
126785,"/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  outputStream.setEncoding(""String_Node_Str"");
  useCompression=compress;
}","/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  useCompression=compress;
}",0.866571018651363
126786,"@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  ERepositoryObjectType mrRepObjType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (mrRepObjType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(mrRepObjType,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  if (ERepositoryObjectType.ROUTINES != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(ERepositoryObjectType.ROUTINES,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  return list;
}","@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  ERepositoryObjectType mrRepObjType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (mrRepObjType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(mrRepObjType,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  if (ERepositoryObjectType.ROUTINES != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(ERepositoryObjectType.ROUTINES,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  ERepositoryObjectType routeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (routeType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> routeList=service.getProxyRepositoryFactory().getAll(routeType,true,false);
      if (routeList != null && routeList.size() > 0) {
        list.addAll(routeList);
      }
    }
  }
  return list;
}",0.8085106382978723
126787,"/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(value)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        String pwd=TalendQuoteUtils.checkAndRemoveBackslashes(value);
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(pwd)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}",0.9929065114587122
126788,"@Override public void undo(){
  List<IContext> removeList=new ArrayList<IContext>();
  for (  IContext con : manager.getListContext()) {
    if (nameSet.contains(con.getName())) {
      removeList.add(con);
    }
  }
  manager.getListContext().removeAll(removeList);
  for (  ContextParameterType defaultContextParamType : newAddParameter) {
    ContextItem contextItem=(ContextItem)helper.getParentContextItem(defaultContextParamType);
    if (contextItem == null) {
      continue;
    }
    IContextParameter paramExisted=helper.getExistedContextParameter(defaultContextParamType.getName());
    if (paramExisted != null) {
      new ContextRemoveParameterCommand(manager,defaultContextParamType.getName(),paramExisted.getSource()).execute();
    }
  }
  helper.refreshContextView();
}","@Override public void undo(){
  List<IContext> removeList=new ArrayList<IContext>();
  for (  IContext con : manager.getListContext()) {
    if (nameSet.contains(con.getName())) {
      removeList.add(con);
    }
  }
  manager.getListContext().removeAll(removeList);
  cmds.clear();
  for (  ContextParameterType defaultContextParamType : newAddParameter) {
    ContextItem contextItem=(ContextItem)helper.getParentContextItem(defaultContextParamType);
    if (contextItem == null) {
      continue;
    }
    IContextParameter paramExisted=helper.getExistedContextParameter(defaultContextParamType.getName());
    if (paramExisted != null) {
      ContextRemoveParameterCommand contextRemoveParameterCommand=new ContextRemoveParameterCommand(manager,defaultContextParamType.getName(),paramExisted.getSource());
      contextRemoveParameterCommand.execute();
      cmds.add(contextRemoveParameterCommand);
    }
  }
  helper.refreshContextView();
}",0.8974654377880185
126789,"@Override public void redo(){
  execute();
  helper.refreshContextView();
}","@Override public void redo(){
  for (  ContextRemoveParameterCommand cmd : cmds) {
    if (cmd.canUndo()) {
      cmd.undo();
    }
  }
  List<IContext> removeList=new ArrayList<IContext>();
  for (  IContext con : manager.getListContext()) {
    if (nameSet.contains(con.getName())) {
      removeList.add(con);
    }
  }
  manager.getListContext().addAll(removeList);
  helper.refreshContextView();
}",0.2851153039832285
126790,"@Override public void initializeDefaultPreferences(){
}","@Override public void initializeDefaultPreferences(){
  CoreUIPlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
}",0.5092592592592593
126791,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    Display display=getDisplay();
    if (display != null) {
      display.syncExec(new Runnable(){
        @Override public void run(){
          initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
        }
      }
);
    }
 else {
      initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
    }
  }
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.AS400_SQL_SEG,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  initializeUpdatePreference();
  final String perlEditorBundleName=""String_Node_Str"";
  final String editorsBundleName=""String_Node_Str"";
  final String editorLineNumberRuler=""String_Node_Str"";
  if (!CommonsPlugin.isHeadless()) {
    Display display=getDisplay();
    if (display != null) {
      display.syncExec(new Runnable(){
        @Override public void run(){
          initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
        }
      }
);
    }
 else {
      initPreference(perlEditorBundleName,editorsBundleName,editorLineNumberRuler);
    }
  }
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.COMMAND_STR,ITalendCorePrefConstants.DEFAULT_COMMAND_STR);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9824797843665768
126792,"public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true);
    }
  }
}","public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true,false,false);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true,false,false);
    }
  }
}",0.979966611018364
126793,"@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if (""String_Node_Str"".equals(proxyUri.scheme()) && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
    }
  }
 else {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}","@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if ((proxyUri.isPlatform() && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) || proxyUri.isFile()) {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
    }
  }
 else {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}",0.9603500136724092
126794,"@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  ERepositoryObjectType mrRepObjType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (mrRepObjType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(mrRepObjType,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  if (ERepositoryObjectType.ROUTINES != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(ERepositoryObjectType.ROUTINES,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  return list;
}","@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  ERepositoryObjectType mrRepObjType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (mrRepObjType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(mrRepObjType,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  if (ERepositoryObjectType.ROUTINES != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(ERepositoryObjectType.ROUTINES,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  ERepositoryObjectType routeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (routeType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> routeList=service.getProxyRepositoryFactory().getAll(routeType,true,false);
      if (routeList != null && routeList.size() > 0) {
        list.addAll(routeList);
      }
    }
  }
  return list;
}",0.8085106382978723
126795,"public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true,false,false);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true,false,false);
    }
  }
}","public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true);
    }
  }
}",0.979966611018364
126796,"@Override public void undo(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String name=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (name.equals(newName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(oldName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(newName,oldName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(newName + ""String_Node_Str"")) {
          contextParameter.setPrompt(oldName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  this.helper.refreshContextView();
}","@Override public void undo(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String name=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (name.equals(newName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(oldName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(newName,oldName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(newName + ""String_Node_Str"")) {
          contextParameter.setPrompt(oldName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  this.helper.refreshContextViewForRename();
}",0.9952953476215368
126797,"/** 
 * qzhang Comment method ""refreshContextView"".
 */
@Override public void execute(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String tempName=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (tempName.equals(oldName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(newName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(oldName,newName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(oldName + ""String_Node_Str"")) {
          contextParameter.setPrompt(newName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  contextManager.fireContextsChangedEvent();
  this.helper.refreshContextView();
}","/** 
 * qzhang Comment method ""refreshContextView"".
 */
@Override public void execute(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String tempName=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (tempName.equals(oldName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(newName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(oldName,newName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(oldName + ""String_Node_Str"")) {
          contextParameter.setPrompt(newName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  contextManager.fireContextsChangedEvent();
  this.helper.refreshContextViewForRename();
}",0.99578848853533
126798,"private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
  return item.getProperty().eResource().getURI();
}","private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
 else   if (!item.isNeedVersion()) {
    Property property=item.getProperty();
    URI uri=property.eResource().getURI();
    IPath fullPath=URIHelper.convert(uri);
    fullPath=fullPath.removeLastSegments(1);
    fullPath=fullPath.append(property.getLabel()).addFileExtension(FileConstants.PROPERTIES_EXTENSION);
    return URIHelper.convert(fullPath);
  }
  return item.getProperty().eResource().getURI();
}",0.9062788550323176
126799,"private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
  return item.getProperty().eResource().getURI();
}","private URI getItemURI(Item item){
  ProjectManager pManager=ProjectManager.getInstance();
  org.talend.core.model.general.Project project=new org.talend.core.model.general.Project(pManager.getProject(item));
  if (project != null && !project.equals(pManager.getCurrentProject())) {
    String folder=null;
    if (item instanceof JobDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOB_DOC);
    }
 else     if (item instanceof JobletDocumentationItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.JOBLET_DOC);
    }
 else     if (item instanceof DatabaseConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS);
    }
 else     if (item instanceof DelimitedFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_DELIMITED);
    }
 else     if (item instanceof EbcdicConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_EBCDIC);
    }
 else     if (item instanceof PositionalFileConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
    }
 else     if (item instanceof ValidationRulesConnectionItem) {
      folder=ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_VALIDATION_RULES);
    }
    if (folder != null) {
      IPath path=new Path(project.getTechnicalLabel());
      path=path.append(folder);
      path=path.append(item.getState().getPath());
      Property property=item.getProperty();
      String version=""String_Node_Str"";
      if (item.isNeedVersion()) {
        version=""String_Node_Str"" + property.getVersion();
      }
      String itemStr=property.getLabel() + version + ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
      path=path.append(itemStr);
      return URIHelper.convert(path);
    }
  }
 else   if (!item.isNeedVersion()) {
    Property property=item.getProperty();
    URI uri=property.eResource().getURI();
    IPath fullPath=URIHelper.convert(uri);
    fullPath=fullPath.removeLastSegments(1);
    fullPath=fullPath.append(property.getLabel()).addFileExtension(FileConstants.PROPERTIES_EXTENSION);
    return URIHelper.convert(fullPath);
  }
  return item.getProperty().eResource().getURI();
}",0.9062788550323176
126800,"@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if (""String_Node_Str"".equals(proxyUri.scheme()) && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
    }
  }
 else {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}","@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if ((proxyUri.isPlatform() && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) || proxyUri.isFile()) {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
    }
  }
 else {
    List<Resource> resources=resourceSet.getResources();
synchronized (resources) {
      for (      Resource resource : resources) {
        if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
          byteArrayResource=(ByteArrayResource)resource;
          break;
        }
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}",0.9603500136724092
126801,"public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true,false,false);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true,false,false);
    }
  }
}","public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true);
    }
  }
}",0.979966611018364
126802,"@Override public void undo(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String name=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (name.equals(newName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(oldName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(newName,oldName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(newName + ""String_Node_Str"")) {
          contextParameter.setPrompt(oldName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  this.helper.refreshContextView();
}","@Override public void undo(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String name=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (name.equals(newName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(oldName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(newName,oldName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(newName + ""String_Node_Str"")) {
          contextParameter.setPrompt(oldName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  this.helper.refreshContextViewForRename();
}",0.9952953476215368
126803,"/** 
 * qzhang Comment method ""refreshContextView"".
 */
@Override public void execute(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String tempName=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (tempName.equals(oldName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(newName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(oldName,newName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(oldName + ""String_Node_Str"")) {
          contextParameter.setPrompt(newName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  contextManager.fireContextsChangedEvent();
  this.helper.refreshContextView();
}","/** 
 * qzhang Comment method ""refreshContextView"".
 */
@Override public void execute(){
  boolean found;
  List<IContextParameter> listParams;
  for (int i=0; i < contextManager.getListContext().size(); i++) {
    listParams=contextManager.getListContext().get(i).getContextParameterList();
    found=false;
    for (int j=0; j < listParams.size() && !found; j++) {
      IContextParameter contextParameter=listParams.get(j);
      String tempName=contextParameter.getName();
      String tempSourceId=contextParameter.getSource();
      if (tempName.equals(oldName) && tempSourceId.equals(sourceId)) {
        contextParameter.setName(newName);
        String scriptCode=contextParameter.getScriptCode().replaceAll(oldName,newName);
        contextParameter.setScriptCode(scriptCode);
        if (contextParameter.getPrompt().equals(oldName + ""String_Node_Str"")) {
          contextParameter.setPrompt(newName + ""String_Node_Str"");
        }
        found=true;
      }
    }
  }
  contextManager.fireContextsChangedEvent();
  this.helper.refreshContextViewForRename();
}",0.99578848853533
126804,"/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(value)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        String pwd=TalendQuoteUtils.checkAndRemoveBackslashes(value);
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(pwd)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}",0.9929065114587122
126805,"/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      String pwd=TalendQuoteUtils.checkAndAddBackslashes(connection.getPassword());
      return TalendQuoteUtils.addQuotes(pwd);
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}",0.9670274351875158
126806,"public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true);
    }
  }
}","public void refreshContextView(){
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart view=page.findView(AbstractContextView.CTX_ID_DESIGNER);
  if (view instanceof AbstractContextView) {
    ((AbstractContextView)view).updateContextView(true,false,false);
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqUiService.class)) {
    ITdqUiService tdqUiService=(ITdqUiService)GlobalServiceRegister.getDefault().getService(ITdqUiService.class);
    if (tdqUiService != null) {
      tdqUiService.updateContextView(true,false,false);
    }
  }
}",0.979966611018364
126807,"@Override public void undo(){
  List<IContext> removeList=new ArrayList<IContext>();
  for (  IContext con : manager.getListContext()) {
    if (nameSet.contains(con.getName())) {
      removeList.add(con);
    }
  }
  manager.getListContext().removeAll(removeList);
  for (  ContextParameterType defaultContextParamType : newAddParameter) {
    ContextItem contextItem=(ContextItem)helper.getParentContextItem(defaultContextParamType);
    if (contextItem == null) {
      continue;
    }
    IContextParameter paramExisted=helper.getExistedContextParameter(defaultContextParamType.getName());
    if (paramExisted != null) {
      new ContextRemoveParameterCommand(manager,defaultContextParamType.getName(),paramExisted.getSource()).execute();
    }
  }
  this.helper.refreshContextView();
}","@Override public void undo(){
  List<IContext> removeList=new ArrayList<IContext>();
  for (  IContext con : manager.getListContext()) {
    if (nameSet.contains(con.getName())) {
      removeList.add(con);
    }
  }
  manager.getListContext().removeAll(removeList);
  cmds.clear();
  for (  ContextParameterType defaultContextParamType : newAddParameter) {
    ContextItem contextItem=(ContextItem)helper.getParentContextItem(defaultContextParamType);
    if (contextItem == null) {
      continue;
    }
    IContextParameter paramExisted=helper.getExistedContextParameter(defaultContextParamType.getName());
    if (paramExisted != null) {
      ContextRemoveParameterCommand contextRemoveParameterCommand=new ContextRemoveParameterCommand(manager,defaultContextParamType.getName(),paramExisted.getSource());
      contextRemoveParameterCommand.execute();
      cmds.add(contextRemoveParameterCommand);
    }
  }
  this.helper.refreshContextView();
}",0.8980526918671249
126808,"@Override public void redo(){
  execute();
  this.helper.refreshContextView();
}","@Override public void redo(){
  for (  ContextRemoveParameterCommand cmd : cmds) {
    if (cmd.canUndo()) {
      cmd.undo();
    }
  }
  List<IContext> removeList=new ArrayList<IContext>();
  for (  IContext con : manager.getListContext()) {
    if (nameSet.contains(con.getName())) {
      removeList.add(con);
    }
  }
  manager.getListContext().addAll(removeList);
  this.helper.refreshContextView();
}",0.2997946611909651
126809,"/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  useCompression=compress;
}","/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  outputStream.setEncoding(""String_Node_Str"");
  useCompression=compress;
}",0.932568149210904
126810,"/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(value)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}","/** 
 * DOC wzhang Comment method ""setDatabaseValue"".
 * @param connection
 * @param node
 * @param repositoryValue
 */
private static void setDatabaseValue(DatabaseConnection connection,INode node,String repositoryValue){
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setUsername(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      try {
        String pwd=TalendQuoteUtils.checkAndRemoveBackslashes(value);
        connection.setPassword(PasswordEncryptUtil.encryptPassword(TalendQuoteUtils.removeQuotes(pwd)));
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setServerName(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setPort(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setSID(TalendQuoteUtils.removeQuotes(value));
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getValueFromRepositoryName(connection,node,""String_Node_Str"");
    if (value != null) {
      if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value.toUpperCase()));
      }
 else {
        connection.setUiSchema(TalendQuoteUtils.removeQuotes(value));
      }
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null && Boolean.valueOf(value).booleanValue()) {
      connection.setCdcTypeMode(CDCTypeMode.LOG_MODE.getName());
    }
  }
  if (""String_Node_Str"".equals(repositoryValue)) {
    String value=getParameterValue(connection,node,""String_Node_Str"");
    if (value != null) {
      connection.setDBRootPath(value);
    }
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
    setDatabaseValueForOracleSid(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
    setDatabaseValueForOracleSeverName(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MYSQL.getDisplayName())) {
    setDatabaseValueForMysql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.EXASOL.getDisplayName())) {
    setDatabaseValueForEXASolution(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEASE.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.SYBASEIQ.getDisplayName())) {
    setDatabaseValueForSysbase(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.ACCESS.getDisplayName())) {
    setDatabaseValueForAccess(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
    setDatabaseValueForSqlite(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.FIREBIRD.getDisplayName())) {
    setDatabaseValueForFileBird(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    setDatabaseValueForAs400(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.VERTICA.getDisplayName())) {
    setDatabaseValueForVertica(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
    setDatabaseValueForMSSql(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GODBC.getDisplayName())) {
    setDatabaseValueForDB(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INGRES.getDisplayName())) {
    setDatabaseValueForIngres(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.INFORMIX.getDisplayName())) {
    setDatabaseValueForInformix(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| connection.getDatabaseType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())) {
    setDatabaseValueForjavadb(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.NETEZZA.getDisplayName())) {
    setDatabaseValueForNetezza(connection,node,repositoryValue);
  }
  if (connection.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    setDatabaseValueForJdbc(connection,node,repositoryValue);
  }
}",0.9929065114587122
126811,"/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""getSAPValue"".
 * @param connection
 * @param value
 * @return
 */
public static Object getSAPValue(SAPConnection connection,String value){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getClient())) {
      return connection.getClient();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getClient());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      String pwd=TalendQuoteUtils.checkAndAddBackslashes(connection.getPassword());
      return TalendQuoteUtils.addQuotes(pwd);
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLanguage())) {
      return connection.getLanguage();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getLanguage());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getHost())) {
      return connection.getHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSystemNumber())) {
      return connection.getSystemNumber();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSystemNumber());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    String version=connection.getJcoVersion();
    if (SapJcoVersion.SAP2.name().equals(version)) {
      version=SapJcoVersion.SAP2.getModulName();
    }
 else     if (SapJcoVersion.SAP3.name().equals(version)) {
      version=SapJcoVersion.SAP3.getModulName();
    }
    return version;
  }
  return null;
}",0.9670274351875158
126812,"public ContextChangeDefaultCommand(IContextManager contextManager,IContext newDefault){
  this.newDefault=newDefault;
  this.contextManager=contextManager;
  this.oldDefault=contextManager.getDefaultContext();
  this.setLabel(Messages.getString(""String_Node_Str""));
}","public ContextChangeDefaultCommand(IContextManager contextManager,IContext newDefault){
  this.newDefault=newDefault;
  this.contextManager=contextManager;
  this.oldDefault=contextManager.getDefaultContext();
  this.helper=new ContextManagerHelper(contextManager);
  this.setLabel(Messages.getString(""String_Node_Str""));
}",0.905084745762712
126813,"/** 
 * Extracts all convert services which are registed by the extension point <b> <code>org.talend.designer.core.process_convert</code> </b>. Added by Marvin Wang on Mar 19, 2013.
 * @return
 */
public List<IProcessConvertService> extractAllConvertServices(){
  List<IProcessConvertService> processConvertServices=new ArrayList<IProcessConvertService>();
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(EXTENSION_POINT_FOR_CONVERT);
  if (extensionPoint != null) {
    IExtension[] extensions=extensionPoint.getExtensions();
    for (    IExtension extension : extensions) {
      IConfigurationElement[] configurationElements=extension.getConfigurationElements();
      for (      IConfigurationElement configurationElement : configurationElements) {
        try {
          Object service=configurationElement.createExecutableExtension(""String_Node_Str"");
          if (service instanceof IProcessConvertService) {
            processConvertServices.add((IProcessConvertService)service);
          }
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return processConvertServices;
}","/** 
 * Extracts all convert services which are registed by the extension point <b> <code>org.talend.designer.core.process_convert</code> </b>. Added by Marvin Wang on Mar 19, 2013.
 * @return
 */
public List<IProcessConvertService> extractAllConvertServices(){
  if (processConvertServices.size() > 0) {
    return processConvertServices;
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(EXTENSION_POINT_FOR_CONVERT);
  if (extensionPoint != null) {
    IExtension[] extensions=extensionPoint.getExtensions();
    for (    IExtension extension : extensions) {
      IConfigurationElement[] configurationElements=extension.getConfigurationElements();
      for (      IConfigurationElement configurationElement : configurationElements) {
        try {
          Object service=configurationElement.createExecutableExtension(""String_Node_Str"");
          if (service instanceof IProcessConvertService) {
            processConvertServices.add((IProcessConvertService)service);
          }
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return processConvertServices;
}",0.96724625960372
126814,"/** 
 * DOC liuwu find all the tRecollectors which match to tPartitioner
 * @param node : should be tPartitioner
 * @param recollectors
 */
public static void getRecollectorsFromPartitioner(INode node,List<String> recollectors){
  List<? extends INode> listRecollectors=node.getProcess().getNodesOfType(""String_Node_Str"");
  if (listRecollectors != null && listRecollectors.size() > 0) {
    for (    INode recNode : listRecollectors) {
      String departitionerName=ElementParameterParser.getValue(recNode,""String_Node_Str"");
      List<? extends INode> listDepartitioner=node.getProcess().getNodesOfType(""String_Node_Str"");
      if (listDepartitioner == null) {
        return;
      }
      for (      INode tnode : listDepartitioner) {
        if (tnode.getUniqueName().equals(departitionerName)) {
          INode startNode=tnode.getDesignSubjobStartNode();
          List<? extends IConnection> inConns=startNode.getIncomingConnections(EConnectionType.STARTS);
          if (inConns != null && inConns.size() > 0) {
            if (inConns.get(0).getSource() == node) {
              recollectors.add(recNode.getUniqueName());
            }
          }
          break;
        }
      }
    }
  }
}","/** 
 * DOC liuwu find all the tRecollectors which match to tPartitioner
 * @param node : should be tPartitioner
 * @param recollectors
 */
public static void getRecollectorsFromPartitioner(INode node,List<String> recollectors){
  List<? extends INode> listRecollectors=node.getProcess().getNodesOfType(""String_Node_Str"");
  if (listRecollectors != null && listRecollectors.size() > 0) {
    for (    INode recNode : listRecollectors) {
      String departitionerName=ElementParameterParser.getValue(recNode,""String_Node_Str"");
      List<? extends INode> listDepartitioner=node.getProcess().getNodesOfType(""String_Node_Str"");
      if (listDepartitioner == null) {
        return;
      }
      for (      INode tnode : listDepartitioner) {
        if (tnode.getUniqueName().equals(departitionerName)) {
          INode startNode=getSubProcessStartNode(tnode);
          List<? extends IConnection> inConns=startNode.getIncomingConnections(EConnectionType.STARTS);
          if (inConns != null && inConns.size() > 0) {
            if (inConns.get(0).getSource() == node) {
              recollectors.add(recNode.getUniqueName());
            }
          }
          break;
        }
      }
    }
  }
}",0.9863127333056824
126815,"private List<UpdateResult> updateAllProcess(IProgressMonitor parentMonitor,List<UpdateResult> resultList,List<IProcess2> openedProcessList,final Set<EUpdateItemType> types,final boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  if (factory == null) {
    return resultList;
  }
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService == null) {
    return resultList;
  }
  List<IRepositoryViewObject> processRep=new ArrayList<IRepositoryViewObject>();
  List<IProcess> processList=new ArrayList<IProcess>();
  try {
    ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
    if (jobType != null) {
      processRep.addAll(factory.getAll(jobType,true));
    }
    ERepositoryObjectType jobletType=ERepositoryObjectType.JOBLET;
    if (jobletType != null) {
      processRep.addAll(factory.getAll(jobletType,true));
    }
    for (    IRepositoryViewObject obj : processRep) {
      Item item=obj.getProperty().getItem();
      IProcess process=null;
      if (item instanceof ProcessItem) {
        process=designerCoreService.getProcessFromProcessItem((ProcessItem)item);
      }
 else       if (item instanceof JobletProcessItem) {
        process=designerCoreService.getProcessFromJobletProcessItem((JobletProcessItem)item);
      }
      processList.add(process);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  for (  IProcess process : processList) {
    if (process instanceof IProcess2) {
      IProcess2 ip2=(IProcess2)process;
      boolean found=false;
      for (      IProcess2 open : openedProcessList) {
        if (open.getId().equals(ip2.getId())) {
          found=true;
        }
      }
      if (found) {
        continue;
      }
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(getUpdateJobInfor(ip2.getProperty()));
      List<UpdateResult> resultFromProcess=getUpdatesNeededFromItems(parentMonitor,((IProcess2)process).getProperty().getItem(),types,onlySimpleShow);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
  }
  return resultList;
}","private List<UpdateResult> updateAllProcess(IProgressMonitor parentMonitor,List<UpdateResult> resultList,List<IProcess2> openedProcessList,final Set<EUpdateItemType> types,final boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  if (factory == null) {
    return resultList;
  }
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService == null) {
    return resultList;
  }
  List<IRepositoryViewObject> processRep=new ArrayList<IRepositoryViewObject>();
  List<IProcess> processList=new ArrayList<IProcess>();
  try {
    ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
    if (jobType != null) {
      processRep.addAll(factory.getAll(jobType,true));
    }
    ERepositoryObjectType jobletType=ERepositoryObjectType.JOBLET;
    if (jobletType != null) {
      processRep.addAll(factory.getAll(jobletType,true));
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  for (  IRepositoryViewObject process : processRep) {
    Item item=process.getProperty().getItem();
    boolean found=false;
    for (    IProcess2 open : openedProcessList) {
      if (open.getId().equals(item.getProperty().getId())) {
        found=true;
      }
    }
    if (found) {
      continue;
    }
    checkMonitorCanceled(parentMonitor);
    parentMonitor.subTask(getUpdateJobInfor(item.getProperty()));
    List<UpdateResult> resultFromProcess=getUpdatesNeededFromItems(parentMonitor,item,types,onlySimpleShow);
    if (resultFromProcess != null) {
      resultList.addAll(resultFromProcess);
    }
    parentMonitor.worked(1);
  }
  return resultList;
}",0.6879396984924623
126816,"private List<UpdateResult> updateAllProcess(IProgressMonitor parentMonitor,List<UpdateResult> resultList,List<IProcess2> openedProcessList,final Set<EUpdateItemType> types,final boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  if (factory == null) {
    return resultList;
  }
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService == null) {
    return resultList;
  }
  List<IRepositoryViewObject> processRep=new ArrayList<IRepositoryViewObject>();
  List<IProcess> processList=new ArrayList<IProcess>();
  try {
    ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
    if (jobType != null) {
      processRep.addAll(factory.getAll(jobType,true));
    }
    ERepositoryObjectType jobletType=ERepositoryObjectType.JOBLET;
    if (jobletType != null) {
      processRep.addAll(factory.getAll(jobletType,true));
    }
    for (    IRepositoryViewObject obj : processRep) {
      Item item=obj.getProperty().getItem();
      IProcess process=null;
      if (item instanceof ProcessItem) {
        process=designerCoreService.getProcessFromProcessItem((ProcessItem)item);
      }
 else       if (item instanceof JobletProcessItem) {
        process=designerCoreService.getProcessFromJobletProcessItem((JobletProcessItem)item);
      }
      processList.add(process);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  for (  IProcess process : processList) {
    if (process instanceof IProcess2) {
      IProcess2 ip2=(IProcess2)process;
      boolean found=false;
      for (      IProcess2 open : openedProcessList) {
        if (open.getId().equals(ip2.getId())) {
          found=true;
        }
      }
      if (found) {
        continue;
      }
      checkMonitorCanceled(parentMonitor);
      parentMonitor.subTask(getUpdateJobInfor(ip2.getProperty()));
      List<UpdateResult> resultFromProcess=getUpdatesNeededFromItems(parentMonitor,((IProcess2)process).getProperty().getItem(),types,onlySimpleShow);
      if (resultFromProcess != null) {
        resultList.addAll(resultFromProcess);
      }
      parentMonitor.worked(1);
    }
  }
  return resultList;
}","private List<UpdateResult> updateAllProcess(IProgressMonitor parentMonitor,List<UpdateResult> resultList,List<IProcess2> openedProcessList,final Set<EUpdateItemType> types,final boolean onlySimpleShow){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  if (factory == null) {
    return resultList;
  }
  IDesignerCoreService designerCoreService=CoreRuntimePlugin.getInstance().getDesignerCoreService();
  if (designerCoreService == null) {
    return resultList;
  }
  List<IRepositoryViewObject> processRep=new ArrayList<IRepositoryViewObject>();
  List<IProcess> processList=new ArrayList<IProcess>();
  try {
    ERepositoryObjectType jobType=ERepositoryObjectType.PROCESS;
    if (jobType != null) {
      processRep.addAll(factory.getAll(jobType,true));
    }
    ERepositoryObjectType jobletType=ERepositoryObjectType.JOBLET;
    if (jobletType != null) {
      processRep.addAll(factory.getAll(jobletType,true));
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  for (  IRepositoryViewObject process : processRep) {
    Item item=process.getProperty().getItem();
    boolean found=false;
    for (    IProcess2 open : openedProcessList) {
      if (open.getId().equals(item.getProperty().getId())) {
        found=true;
      }
    }
    if (found) {
      continue;
    }
    checkMonitorCanceled(parentMonitor);
    parentMonitor.subTask(getUpdateJobInfor(item.getProperty()));
    List<UpdateResult> resultFromProcess=getUpdatesNeededFromItems(parentMonitor,item,types,onlySimpleShow);
    if (resultFromProcess != null) {
      resultList.addAll(resultFromProcess);
    }
    parentMonitor.worked(1);
  }
  return resultList;
}",0.6879396984924623
126817,"@Override public boolean isChecked(Object element){
  if (element instanceof TableNode) {
    TableNode node=(TableNode)element;
    if (node.getType() == TableNode.TABLE) {
      if (isExistTable(node)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return false;
}","public boolean isChecked(Object element){
  if (element instanceof TableNode) {
    TableNode node=(TableNode)element;
    if (node.getType() == TableNode.TABLE) {
      if (isExistTable(node)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return false;
}",0.9830508474576272
126818,"@Override public boolean isGrayed(Object element){
  return false;
}","public boolean isGrayed(Object element){
  return false;
}",0.9206349206349206
126819,"@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersion.getId(),false);
            for (            IRepositoryViewObject currentVersion : allVersionToDelete) {
              repFactory.forceDeleteObjectPhysical(lastVersion,currentVersion.getVersion());
            }
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  EList<Resource> resources=selectedItemRecord.getResourceSet().getResources();
  Iterator<Resource> iterator=resources.iterator();
  while (iterator.hasNext()) {
    Resource res=iterator.next();
    if (res != null && !(res instanceof ByteArrayResource)) {
      res.unload();
      iterator.remove();
    }
  }
  String label=selectedItemRecord.getLabel();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  EList<Resource> resources=selectedItemRecord.getResourceSet().getResources();
  Iterator<Resource> iterator=resources.iterator();
  while (iterator.hasNext()) {
    Resource res=iterator.next();
    if (res != null && !(res instanceof ByteArrayResource)) {
      res.unload();
      iterator.remove();
    }
  }
  String label=selectedItemRecord.getLabel();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.9026911423988594
126820,"/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  useCompression=compress;
}","/** 
 * Create an instance of this class.
 * @param filename java.lang.String
 * @param compress boolean
 * @exception java.io.IOException
 */
public ZipFileExporterFullPath(String filename,boolean compress) throws IOException {
  outputStream=new ZipOutputStream(new FileOutputStream(filename));
  outputStream.setEncoding(""String_Node_Str"");
  useCompression=compress;
}",0.932568149210904
126821,public Property getProperty(Object nodeObject);,"/** 
 * DOC wchen Comment method ""getProperty"".
 * @param repository nodeObject
 * @return property of this repository object
 */
public Property getProperty(Object nodeObject);",0.4196428571428571
126822,public ERepositoryObjectType getObjectType(Object repositoryNode);,"/** 
 * DOC get ERepositoryObjectType for repository selection
 * @param repository selected object
 * @return
 */
public ERepositoryObjectType getObjectType(Object repositoryNode);",0.5344129554655871
126823,"private void createItemsListButtonsArea(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=25;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Button refresh=new Button(buttonsComposite,SWT.PUSH);
  refresh.setText(Messages.getString(""String_Node_Str""));
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemFromDirectoryRadio.getSelection()) {
        updateItemsList(directoryPathField.getText().trim(),true,true);
      }
 else {
        updateItemsList(archivePathField.getText().trim(),false,true);
      }
    }
  }
);
  setButtonLayoutData(refresh);
  new Label(buttonsComposite,SWT.NONE);
  Button selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(Messages.getString(""String_Node_Str""));
  selectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final CheckboxTreeViewer viewer=filteredCheckboxTree.getViewer();
      if (viewer.getTree().getItemCount() > 0) {
        for (int i=0; i < viewer.getTree().getItemCount(); i++) {
          TreeItem topItem=viewer.getTree().getItem(i);
          if (topItem != null) {
            viewer.setSubtreeChecked(topItem.getData(),true);
          }
        }
        filteredCheckboxTree.calculateCheckedLeafNodes();
        checkSelectedItemErrors();
      }
    }
  }
);
  setButtonLayoutData(selectAll);
  Button deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(Messages.getString(""String_Node_Str""));
  deselectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().setCheckedElements(new Object[0]);
      filteredCheckboxTree.calculateCheckedLeafNodes();
      checkSelectedItemErrors();
    }
  }
);
  setButtonLayoutData(deselectAll);
  new Label(buttonsComposite,SWT.NONE);
  Button expandAll=new Button(buttonsComposite,SWT.PUSH);
  expandAll.setText(Messages.getString(""String_Node_Str""));
  expandAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().expandAll();
    }
  }
);
  setButtonLayoutData(expandAll);
  Button collapseAll=new Button(buttonsComposite,SWT.PUSH);
  collapseAll.setText(Messages.getString(""String_Node_Str""));
  collapseAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().collapseAll();
    }
  }
);
  setButtonLayoutData(collapseAll);
}","private void createItemsListButtonsArea(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=25;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Button refresh=new Button(buttonsComposite,SWT.PUSH);
  refresh.setText(Messages.getString(""String_Node_Str""));
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemFromDirectoryRadio.getSelection()) {
        updateItemsList(directoryPathField.getText().trim(),true,true);
      }
 else {
        updateItemsList(archivePathField.getText().trim(),false,true);
      }
    }
  }
);
  setButtonLayoutData(refresh);
  refresh.setVisible(false);
  new Label(buttonsComposite,SWT.NONE);
  Button selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(Messages.getString(""String_Node_Str""));
  selectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final CheckboxTreeViewer viewer=filteredCheckboxTree.getViewer();
      if (viewer.getTree().getItemCount() > 0) {
        for (int i=0; i < viewer.getTree().getItemCount(); i++) {
          TreeItem topItem=viewer.getTree().getItem(i);
          if (topItem != null) {
            viewer.setSubtreeChecked(topItem.getData(),true);
          }
        }
        filteredCheckboxTree.calculateCheckedLeafNodes();
        checkSelectedItemErrors();
      }
    }
  }
);
  setButtonLayoutData(selectAll);
  Button deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(Messages.getString(""String_Node_Str""));
  deselectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().setCheckedElements(new Object[0]);
      filteredCheckboxTree.calculateCheckedLeafNodes();
      checkSelectedItemErrors();
    }
  }
);
  setButtonLayoutData(deselectAll);
  new Label(buttonsComposite,SWT.NONE);
  Button expandAll=new Button(buttonsComposite,SWT.PUSH);
  expandAll.setText(Messages.getString(""String_Node_Str""));
  expandAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().expandAll();
    }
  }
);
  setButtonLayoutData(expandAll);
  Button collapseAll=new Button(buttonsComposite,SWT.PUSH);
  collapseAll.setText(Messages.getString(""String_Node_Str""));
  collapseAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().collapseAll();
    }
  }
);
  setButtonLayoutData(collapseAll);
}",0.9948663480261992
126824,"private void logError(Exception e){
  ImportCacheHelper.getInstance().setImportingError(true);
  ExceptionHandler.process(e);
}","protected void logError(Exception e){
  ImportCacheHelper.getInstance().setImportingError(true);
  ExceptionHandler.process(e);
}",0.96875
126825,"public String getLabel(){
  if (label == null) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    boolean allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
    if (allowVerchange) {
      label=property.getLabel() + ""String_Node_Str"" + property.getVersion();
    }
 else {
      label=property.getLabel();
    }
  }
  return label;
}","public String getLabel(){
  if (label == null) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    boolean allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
    if (allowVerchange && property.getItem().isNeedVersion()) {
      label=property.getLabel() + ""String_Node_Str"" + property.getVersion();
    }
 else {
      label=property.getLabel();
    }
  }
  return label;
}",0.9591397849462364
126826,"/** 
 * DOC ggu Comment method ""findRealContextType"". Find the context type for the node. If element, return element type. If other, return content type. Also, if the type is sub type, need find out the item type.
 * @param node
 * @return
 */
private ERepositoryObjectType findRealContextType(final RepositoryNode node){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null && hadoopClusterService.isHadoopSubnode(node)) {
    return hadoopClusterService.getHadoopClusterType();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITransformService.class)) {
    ITransformService transformService=(ITransformService)GlobalServiceRegister.getDefault().getService(ITransformService.class);
    if (transformService.isTransformNode(node)) {
      return transformService.getTransformRootType();
    }
  }
  ERepositoryObjectType contentType=null;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
    contentType=node.getObjectType();
  }
  if (contentType == null) {
    contentType=node.getContentType();
  }
  if (contentType != null) {
    if (contentType.isSubItem()) {
      ERepositoryObjectType itemType=null;
      if (node.getObject() != null) {
        Property property=node.getObject().getProperty();
        if (property != null) {
          try {
            itemType=ERepositoryObjectType.getItemType(property.getItem());
          }
 catch (          IllegalStateException e) {
          }
        }
      }
      contentType=itemType;
    }
  }
  return contentType;
}","/** 
 * DOC ggu Comment method ""findRealContextType"". Find the context type for the node. If element, return element type. If other, return content type. Also, if the type is sub type, need find out the item type.
 * @param node
 * @return
 */
private ERepositoryObjectType findRealContextType(final RepositoryNode node){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null && hadoopClusterService.isHadoopSubnode(node)) {
    return hadoopClusterService.getHadoopClusterType();
  }
  for (  IExtendedRepositoryNodeHandler nodeHandler : RepositoryContentManager.getExtendedNodeHandler()) {
    ERepositoryObjectType objectType=nodeHandler.getRootType(node);
    if (objectType != null) {
      return objectType;
    }
  }
  ERepositoryObjectType contentType=null;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
    contentType=node.getObjectType();
  }
  if (contentType == null) {
    contentType=node.getContentType();
  }
  if (contentType != null) {
    if (contentType.isSubItem()) {
      ERepositoryObjectType itemType=null;
      if (node.getObject() != null) {
        Property property=node.getObject().getProperty();
        if (property != null) {
          try {
            itemType=ERepositoryObjectType.getItemType(property.getItem());
          }
 catch (          IllegalStateException e) {
          }
        }
      }
      contentType=itemType;
    }
  }
  return contentType;
}",0.8477943324569092
126827,"/** 
 * Download file from specific url.
 * @param componentUrl The file url to download
 * @param destination The local file to be saved
 * @throws IOException
 * @throws Exception
 */
public void download(URL componentUrl,File destination) throws IOException {
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  try {
    URLConnection connection=componentUrl.openConnection();
    bis=new BufferedInputStream(connection.getInputStream());
    bos=new BufferedOutputStream(new FileOutputStream(destination));
    fireDownloadStart(connection.getContentLength());
    byte[] buf=new byte[BUFFER_SIZE];
    int bytesDownloaded=0;
    int bytesRead=-1;
    while ((bytesRead=bis.read(buf)) != -1) {
      bos.write(buf,0,bytesRead);
      bytesDownloaded+=bytesRead;
      fireDownloadProgress(bytesRead);
      if (isCancel()) {
        return;
      }
    }
    bos.flush();
    fireDownloadComplete();
  }
  finally {
    IOException e=null;
    if (bis != null) {
      try {
        bis.close();
      }
 catch (      IOException ioe) {
        e=ioe;
      }
    }
    if (bos != null) {
      try {
        bos.close();
      }
 catch (      IOException ioe) {
        e=ioe;
      }
    }
    if (e != null) {
      throw e;
    }
  }
}","/** 
 * Download file from specific url.
 * @param componentUrl The file url to download
 * @param destination The local file to be saved
 * @throws IOException
 * @throws Exception
 */
public void download(URL componentUrl,File destination) throws IOException {
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  try {
    if (destination.exists()) {
      destination.delete();
    }
    File destParentFile=destination.getParentFile();
    if (!destParentFile.exists()) {
      destParentFile.mkdirs();
    }
    URLConnection connection=componentUrl.openConnection();
    bis=new BufferedInputStream(connection.getInputStream());
    bos=new BufferedOutputStream(new FileOutputStream(destination));
    fireDownloadStart(connection.getContentLength());
    byte[] buf=new byte[BUFFER_SIZE];
    int bytesDownloaded=0;
    int bytesRead=-1;
    while ((bytesRead=bis.read(buf)) != -1) {
      bos.write(buf,0,bytesRead);
      bytesDownloaded+=bytesRead;
      fireDownloadProgress(bytesRead);
      if (isCancel()) {
        return;
      }
    }
    bos.flush();
    fireDownloadComplete();
  }
  finally {
    IOException e=null;
    if (bis != null) {
      try {
        bis.close();
      }
 catch (      IOException ioe) {
        e=ioe;
      }
    }
    if (bos != null) {
      try {
        bos.close();
      }
 catch (      IOException ioe) {
        e=ioe;
      }
    }
    if (e != null) {
      throw e;
    }
  }
}",0.9291512915129152
126828,"private void populateItems(final boolean overwrite){
  setPageComplete(true);
  this.selectedItemRecords.clear();
  nodesBuilder.clear();
  errors.clear();
  updateErrorListViewer();
  IRunnableWithProgress op=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      ImportExportHandlersManager.getInstance().preImport(resManager);
      List<ItemRecord> items=ImportExportHandlersManager.getInstance().populateImportingItems(resManager,overwrite,monitor);
      nodesBuilder.addItems(items);
    }
  }
;
  try {
    new ProgressMonitorDialog(getShell()).run(true,true,op);
  }
 catch (  Exception e) {
  }
  ItemRecord[] allImportItemRecords=nodesBuilder.getAllImportItemRecords();
  for (  ItemRecord itemRecord : allImportItemRecords) {
    if (itemRecord.getExistingItemWithSameId() != null && itemRecord.getExistingItemWithSameId() instanceof RepositoryViewObject) {
      RepositoryViewObject reObject=(RepositoryViewObject)itemRecord.getExistingItemWithSameId();
      if (itemRecord.getProperty() != null && reObject != null) {
        if (itemRecord.getProperty().getId().equals(reObject.getId()) && itemRecord.getProperty().getLabel().equals(reObject.getLabel())) {
          if (itemRecord.getProperty().getVersion().equals(reObject.getVersion())) {
            for (            String error : itemRecord.getErrors()) {
              errors.add(""String_Node_Str"" + itemRecord.getItemName() + ""String_Node_Str""+ error);
            }
          }
 else {
            errors.add(Messages.getString(""String_Node_Str"",itemRecord.getItemName(),reObject.getVersion()));
          }
        }
 else {
          ERepositoryStatus status=reObject.getRepositoryStatus();
          if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
            for (            String error : itemRecord.getErrors()) {
              errors.add(""String_Node_Str"" + itemRecord.getItemName() + ""String_Node_Str""+ error);
            }
          }
        }
      }
    }
 else {
      if (itemRecord.getProperty() != null) {
        for (        String error : itemRecord.getErrors()) {
          errors.add(""String_Node_Str"" + itemRecord.getItemName() + ""String_Node_Str""+ error);
        }
      }
    }
  }
  updateErrorListViewer();
  selectedItemRecords.addAll(Arrays.asList(allImportItemRecords));
  final CheckboxTreeViewer viewer=this.filteredCheckboxTree.getViewer();
  viewer.setInput(nodesBuilder.getProjectNodes());
  viewer.refresh(true);
  viewer.expandAll();
  filteredCheckboxTree.resetCheckedElements();
  checkValidItemRecords();
  if (this.isPageComplete()) {
    checkSelectedItemErrors();
  }
}","private void populateItems(final boolean overwrite){
  setPageComplete(true);
  this.selectedItemRecords.clear();
  nodesBuilder.clear();
  errors.clear();
  updateErrorListViewer();
  if (resManager != null) {
    IRunnableWithProgress op=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        ImportExportHandlersManager.getInstance().preImport(resManager);
        List<ItemRecord> items=ImportExportHandlersManager.getInstance().populateImportingItems(resManager,overwrite,monitor);
        nodesBuilder.addItems(items);
      }
    }
;
    try {
      new ProgressMonitorDialog(getShell()).run(true,true,op);
    }
 catch (    Exception e) {
    }
  }
  ItemRecord[] allImportItemRecords=nodesBuilder.getAllImportItemRecords();
  for (  ItemRecord itemRecord : allImportItemRecords) {
    if (itemRecord.getExistingItemWithSameId() != null && itemRecord.getExistingItemWithSameId() instanceof RepositoryViewObject) {
      RepositoryViewObject reObject=(RepositoryViewObject)itemRecord.getExistingItemWithSameId();
      if (itemRecord.getProperty() != null && reObject != null) {
        if (itemRecord.getProperty().getId().equals(reObject.getId()) && itemRecord.getProperty().getLabel().equals(reObject.getLabel())) {
          if (itemRecord.getProperty().getVersion().equals(reObject.getVersion())) {
            for (            String error : itemRecord.getErrors()) {
              errors.add(""String_Node_Str"" + itemRecord.getItemName() + ""String_Node_Str""+ error);
            }
          }
 else {
            errors.add(Messages.getString(""String_Node_Str"",itemRecord.getItemName(),reObject.getVersion()));
          }
        }
 else {
          ERepositoryStatus status=reObject.getRepositoryStatus();
          if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
            for (            String error : itemRecord.getErrors()) {
              errors.add(""String_Node_Str"" + itemRecord.getItemName() + ""String_Node_Str""+ error);
            }
          }
        }
      }
    }
 else {
      if (itemRecord.getProperty() != null) {
        for (        String error : itemRecord.getErrors()) {
          errors.add(""String_Node_Str"" + itemRecord.getItemName() + ""String_Node_Str""+ error);
        }
      }
    }
  }
  updateErrorListViewer();
  selectedItemRecords.addAll(Arrays.asList(allImportItemRecords));
  final CheckboxTreeViewer viewer=this.filteredCheckboxTree.getViewer();
  viewer.setInput(nodesBuilder.getProjectNodes());
  viewer.refresh(true);
  viewer.expandAll();
  filteredCheckboxTree.resetCheckedElements();
  checkValidItemRecords();
  if (this.isPageComplete()) {
    checkSelectedItemErrors();
  }
}",0.9894965592176748
126829,"/** 
 * DOC ggu Comment method ""createArchiveSelectionArea"".
 * @param selectionArea
 */
private void createArchiveSelectionArea(Composite selectionArea){
  this.itemFromArchiveRadio=new Button(selectionArea,SWT.RADIO);
  this.itemFromArchiveRadio.setText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(this.itemFromArchiveRadio);
  this.itemFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleArchiveRadioSelected();
    }
  }
);
  this.archivePathField=new Text(selectionArea,SWT.BORDER);
  this.archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  this.archivePathField.addTraverseListener(new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        updateItemsList(archivePathField.getText().trim(),false,false);
      }
    }
  }
);
  this.archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      updateItemsList(archivePathField.getText().trim(),false,false);
    }
  }
);
  this.browseArchivesButton=new Button(selectionArea,SWT.PUSH);
  this.browseArchivesButton.setText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(this.browseArchivesButton);
  this.browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleArchiveButtonPressed();
    }
  }
);
  if (isEnableForExchange()) {
    this.fromExchangeButton=new Button(selectionArea,SWT.PUSH);
    this.fromExchangeButton.setText(Messages.getString(""String_Node_Str""));
    this.fromExchangeButton.setToolTipText(Messages.getString(""String_Node_Str""));
    setButtonLayoutData(fromExchangeButton);
    this.fromExchangeButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IExchangeService.class)) {
          archivePathField.setEditable(false);
          IExchangeService service=(IExchangeService)GlobalServiceRegister.getDefault().getService(IExchangeService.class);
          String selectedArchive=service.openExchangeDialog();
          if (selectedArchive != null) {
            archivePathField.setText(previouslyBrowsedArchivePath);
            previouslyBrowsedArchivePath=selectedArchive;
            updateItemsList(selectedArchive,false,false);
          }
        }
 else {
          MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
      }
    }
);
  }
}","/** 
 * DOC ggu Comment method ""createArchiveSelectionArea"".
 * @param selectionArea
 */
private void createArchiveSelectionArea(Composite selectionArea){
  this.itemFromArchiveRadio=new Button(selectionArea,SWT.RADIO);
  this.itemFromArchiveRadio.setText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(this.itemFromArchiveRadio);
  this.itemFromArchiveRadio.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleArchiveRadioSelected();
    }
  }
);
  this.archivePathField=new Text(selectionArea,SWT.BORDER);
  this.archivePathField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL));
  this.archivePathField.addTraverseListener(new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
        updateItemsList(archivePathField.getText().trim(),false,false);
      }
    }
  }
);
  this.archivePathField.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    org.eclipse.swt.events.FocusEvent e){
      updateItemsList(archivePathField.getText().trim(),false,false);
    }
  }
);
  this.browseArchivesButton=new Button(selectionArea,SWT.PUSH);
  this.browseArchivesButton.setText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(this.browseArchivesButton);
  this.browseArchivesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleArchiveButtonPressed();
    }
  }
);
  if (isEnableForExchange()) {
    this.fromExchangeButton=new Button(selectionArea,SWT.PUSH);
    this.fromExchangeButton.setText(Messages.getString(""String_Node_Str""));
    this.fromExchangeButton.setToolTipText(Messages.getString(""String_Node_Str""));
    setButtonLayoutData(fromExchangeButton);
    this.fromExchangeButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IExchangeService.class)) {
          archivePathField.setEditable(false);
          IExchangeService service=(IExchangeService)GlobalServiceRegister.getDefault().getService(IExchangeService.class);
          String selectedArchive=service.openExchangeDialog();
          if (selectedArchive != null) {
            previouslyBrowsedArchivePath=selectedArchive;
            archivePathField.setText(selectedArchive);
            updateItemsList(selectedArchive,false,false);
          }
        }
 else {
          MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        }
      }
    }
);
  }
}",0.9755301794453508
126830,public Property getProperty(Object nodeObject);,"/** 
 * DOC wchen Comment method ""getProperty"".
 * @param repository nodeObject
 * @return property of this repository object
 */
public Property getProperty(Object nodeObject);",0.4196428571428571
126831,public ERepositoryObjectType getObjectType(Object repositoryNode);,"/** 
 * DOC get ERepositoryObjectType for repository selection
 * @param repository selected object
 * @return
 */
public ERepositoryObjectType getObjectType(Object repositoryNode);",0.5344129554655871
126832,"private void createItemsListButtonsArea(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=25;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Button refresh=new Button(buttonsComposite,SWT.PUSH);
  refresh.setText(Messages.getString(""String_Node_Str""));
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemFromDirectoryRadio.getSelection()) {
        updateItemsList(directoryPathField.getText().trim(),true,true);
      }
 else {
        updateItemsList(archivePathField.getText().trim(),false,true);
      }
    }
  }
);
  setButtonLayoutData(refresh);
  new Label(buttonsComposite,SWT.NONE);
  Button selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(Messages.getString(""String_Node_Str""));
  selectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final CheckboxTreeViewer viewer=filteredCheckboxTree.getViewer();
      if (viewer.getTree().getItemCount() > 0) {
        for (int i=0; i < viewer.getTree().getItemCount(); i++) {
          TreeItem topItem=viewer.getTree().getItem(i);
          if (topItem != null) {
            viewer.setSubtreeChecked(topItem.getData(),true);
          }
        }
        filteredCheckboxTree.calculateCheckedLeafNodes();
        checkSelectedItemErrors();
      }
    }
  }
);
  setButtonLayoutData(selectAll);
  Button deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(Messages.getString(""String_Node_Str""));
  deselectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().setCheckedElements(new Object[0]);
      filteredCheckboxTree.calculateCheckedLeafNodes();
      checkSelectedItemErrors();
    }
  }
);
  setButtonLayoutData(deselectAll);
  new Label(buttonsComposite,SWT.NONE);
  Button expandAll=new Button(buttonsComposite,SWT.PUSH);
  expandAll.setText(Messages.getString(""String_Node_Str""));
  expandAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().expandAll();
    }
  }
);
  setButtonLayoutData(expandAll);
  Button collapseAll=new Button(buttonsComposite,SWT.PUSH);
  collapseAll.setText(Messages.getString(""String_Node_Str""));
  collapseAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().collapseAll();
    }
  }
);
  setButtonLayoutData(collapseAll);
}","private void createItemsListButtonsArea(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=25;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Button refresh=new Button(buttonsComposite,SWT.PUSH);
  refresh.setText(Messages.getString(""String_Node_Str""));
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (itemFromDirectoryRadio.getSelection()) {
        updateItemsList(directoryPathField.getText().trim(),true,true);
      }
 else {
        updateItemsList(archivePathField.getText().trim(),false,true);
      }
    }
  }
);
  setButtonLayoutData(refresh);
  refresh.setVisible(false);
  new Label(buttonsComposite,SWT.NONE);
  Button selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(Messages.getString(""String_Node_Str""));
  selectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      final CheckboxTreeViewer viewer=filteredCheckboxTree.getViewer();
      if (viewer.getTree().getItemCount() > 0) {
        for (int i=0; i < viewer.getTree().getItemCount(); i++) {
          TreeItem topItem=viewer.getTree().getItem(i);
          if (topItem != null) {
            viewer.setSubtreeChecked(topItem.getData(),true);
          }
        }
        filteredCheckboxTree.calculateCheckedLeafNodes();
        checkSelectedItemErrors();
      }
    }
  }
);
  setButtonLayoutData(selectAll);
  Button deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(Messages.getString(""String_Node_Str""));
  deselectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().setCheckedElements(new Object[0]);
      filteredCheckboxTree.calculateCheckedLeafNodes();
      checkSelectedItemErrors();
    }
  }
);
  setButtonLayoutData(deselectAll);
  new Label(buttonsComposite,SWT.NONE);
  Button expandAll=new Button(buttonsComposite,SWT.PUSH);
  expandAll.setText(Messages.getString(""String_Node_Str""));
  expandAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().expandAll();
    }
  }
);
  setButtonLayoutData(expandAll);
  Button collapseAll=new Button(buttonsComposite,SWT.PUSH);
  collapseAll.setText(Messages.getString(""String_Node_Str""));
  collapseAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      filteredCheckboxTree.getViewer().collapseAll();
    }
  }
);
  setButtonLayoutData(collapseAll);
}",0.9948663480261992
126833,"private void logError(Exception e){
  ImportCacheHelper.getInstance().setImportingError(true);
  ExceptionHandler.process(e);
}","protected void logError(Exception e){
  ImportCacheHelper.getInstance().setImportingError(true);
  ExceptionHandler.process(e);
}",0.96875
126834,"public String getLabel(){
  if (label == null) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    boolean allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
    if (allowVerchange) {
      label=property.getLabel() + ""String_Node_Str"" + property.getVersion();
    }
 else {
      label=property.getLabel();
    }
  }
  return label;
}","public String getLabel(){
  if (label == null) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    boolean allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
    if (allowVerchange && property.getItem().isNeedVersion()) {
      label=property.getLabel() + ""String_Node_Str"" + property.getVersion();
    }
 else {
      label=property.getLabel();
    }
  }
  return label;
}",0.9591397849462364
126835,"/** 
 * DOC ggu Comment method ""findRealContextType"". Find the context type for the node. If element, return element type. If other, return content type. Also, if the type is sub type, need find out the item type.
 * @param node
 * @return
 */
private ERepositoryObjectType findRealContextType(final RepositoryNode node){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null && hadoopClusterService.isHadoopSubnode(node)) {
    return hadoopClusterService.getHadoopClusterType();
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITransformService.class)) {
    ITransformService transformService=(ITransformService)GlobalServiceRegister.getDefault().getService(ITransformService.class);
    if (transformService.isTransformNode(node)) {
      return transformService.getTransformRootType();
    }
  }
  ERepositoryObjectType contentType=null;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
    contentType=node.getObjectType();
  }
  if (contentType == null) {
    contentType=node.getContentType();
  }
  if (contentType != null) {
    if (contentType.isSubItem()) {
      ERepositoryObjectType itemType=null;
      if (node.getObject() != null) {
        Property property=node.getObject().getProperty();
        if (property != null) {
          try {
            itemType=ERepositoryObjectType.getItemType(property.getItem());
          }
 catch (          IllegalStateException e) {
          }
        }
      }
      contentType=itemType;
    }
  }
  return contentType;
}","/** 
 * DOC ggu Comment method ""findRealContextType"". Find the context type for the node. If element, return element type. If other, return content type. Also, if the type is sub type, need find out the item type.
 * @param node
 * @return
 */
private ERepositoryObjectType findRealContextType(final RepositoryNode node){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null && hadoopClusterService.isHadoopSubnode(node)) {
    return hadoopClusterService.getHadoopClusterType();
  }
  for (  IExtendedRepositoryNodeHandler nodeHandler : RepositoryContentManager.getExtendedNodeHandler()) {
    ERepositoryObjectType objectType=nodeHandler.getRootType(node);
    if (objectType != null) {
      return objectType;
    }
  }
  ERepositoryObjectType contentType=null;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
    contentType=node.getObjectType();
  }
  if (contentType == null) {
    contentType=node.getContentType();
  }
  if (contentType != null) {
    if (contentType.isSubItem()) {
      ERepositoryObjectType itemType=null;
      if (node.getObject() != null) {
        Property property=node.getObject().getProperty();
        if (property != null) {
          try {
            itemType=ERepositoryObjectType.getItemType(property.getItem());
          }
 catch (          IllegalStateException e) {
          }
        }
      }
      contentType=itemType;
    }
  }
  return contentType;
}",0.8477943324569092
126836,"/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      deleteRepositoryNode(repositoryNode,factory);
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}","/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      boolean ret=deleteRepositoryNode(repositoryNode,factory);
      if (!ret) {
        return;
      }
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}",0.994882486732373
126837,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
        Item item=objToDelete.getProperty().getItem();
        IProcess iProcess=coreService.getProcessFromItem(item);
        if (iProcess != null && iProcess instanceof IProcess2) {
          IProcess2 process=(IProcess2)iProcess;
          process.removeProblems4ProcessDeleted();
        }
      }
    }
    factory.deleteObjectLogical(objToDelete);
    removeConnFromSQLExplorer(repositoryNode);
  }
}","private boolean deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        boolean ret=deleteRepositoryNode(repositoryNode2,factory);
        if (!ret) {
          return false;
        }
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
    return true;
  }
 else {
    final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
    deleteActionCache.setGetAlways(false);
    deleteActionCache.setDocRefresh(false);
    deleteActionCache.createRecords();
    final IRepositoryViewObject objToDelete=repositoryNode.getObject();
    final boolean[] enableDeleting=new boolean[1];
    enableDeleting[0]=true;
    final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,(RepositoryNode)repositoryNode);
    if (checkContext.size() > 0) {
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
          int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
            enableDeleting[0]=true;
          break;
case Window.CANCEL:
        enableDeleting[0]=false;
      break;
  }
}
}
);
}
if (!enableDeleting[0]) {
return false;
}
if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
Item item=objToDelete.getProperty().getItem();
IProcess iProcess=coreService.getProcessFromItem(item);
if (iProcess != null && iProcess instanceof IProcess2) {
  IProcess2 process=(IProcess2)iProcess;
  process.removeProblems4ProcessDeleted();
}
}
}
factory.deleteObjectLogical(objToDelete);
removeConnFromSQLExplorer(repositoryNode);
return true;
}
}",0.8045937607130613
126838,"@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersion.getId(),false);
            for (            IRepositoryViewObject currentVersion : allVersionToDelete) {
              repFactory.forceDeleteObjectPhysical(lastVersion,currentVersion.getVersion());
            }
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=selectedItemRecord.getLabel();
  for (  Resource resource : selectedItemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","@Override public void importItemRecord(IProgressMonitor monitor,ResourcesManager resManager,ItemRecord selectedItemRecord,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  monitor.subTask(Messages.getString(""String_Node_Str"",selectedItemRecord.getItemName()));
  resolveItem(resManager,selectedItemRecord);
  final Item item=selectedItemRecord.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedItemRecord,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedItemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedItemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !selectedItemRecord.isLocked() && (selectedItemRecord.getState() == State.ID_EXISTED || selectedItemRecord.getState() == State.NAME_EXISTED || selectedItemRecord.getState() == State.NAME_AND_ID_EXISTED) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedItemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || selectedItemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedItemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedItemRecord);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedItemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedItemRecord);
        selectedItemRecord.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedItemRecord.addError(e.getMessage());
        logError(e);
      }
      if (selectedItemRecord.isImported()) {
        selectedItemRecord.setImportPath(path.toPortableString());
        selectedItemRecord.setRepositoryType(itemType);
        selectedItemRecord.setItemId(selectedItemRecord.getProperty().getId());
        selectedItemRecord.setItemVersion(selectedItemRecord.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedItemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=selectedItemRecord.getLabel();
  for (  Resource resource : selectedItemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(selectedItemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.9001280409731114
126839,"/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      deleteRepositoryNode(repositoryNode,factory);
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}","/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      boolean ret=deleteRepositoryNode(repositoryNode,factory);
      if (!ret) {
        return;
      }
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}",0.994882486732373
126840,"private void deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        deleteRepositoryNode(repositoryNode2,factory);
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
  }
 else {
    IRepositoryViewObject objToDelete=repositoryNode.getObject();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
        Item item=objToDelete.getProperty().getItem();
        IProcess iProcess=coreService.getProcessFromItem(item);
        if (iProcess != null && iProcess instanceof IProcess2) {
          IProcess2 process=(IProcess2)iProcess;
          process.removeProblems4ProcessDeleted();
        }
      }
    }
    factory.deleteObjectLogical(objToDelete);
    removeConnFromSQLExplorer(repositoryNode);
  }
}","private boolean deleteRepositoryNode(IRepositoryNode repositoryNode,IProxyRepositoryFactory factory) throws PersistenceException, BusinessException {
  if (repositoryNode.getType() == ENodeType.SIMPLE_FOLDER) {
    IPath path=RepositoryNodeUtilities.getPath((RepositoryNode)repositoryNode);
    ERepositoryObjectType objectType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    List<IRepositoryNode> repositoryList=repositoryNode.getChildren();
    PersistenceException pex=null;
    BusinessException bex=null;
    for (    IRepositoryNode repositoryNode2 : repositoryList) {
      try {
        boolean ret=deleteRepositoryNode(repositoryNode2,factory);
        if (!ret) {
          return false;
        }
      }
 catch (      PersistenceException e) {
        pex=e;
      }
catch (      BusinessException e) {
        bex=e;
      }
    }
    if (pex != null) {
      throw pex;
    }
    if (bex != null) {
      throw bex;
    }
    FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
    folderItem.getState().setDeleted(true);
    String fullPath=""String_Node_Str"";
    FolderItem curItem=folderItem;
    while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)curItem.getParent();
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=parentFolder.getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=parentFolder;
    }
    folderItem.getState().setPath(fullPath);
    return true;
  }
 else {
    final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
    deleteActionCache.setGetAlways(false);
    deleteActionCache.setDocRefresh(false);
    deleteActionCache.createRecords();
    final IRepositoryViewObject objToDelete=repositoryNode.getObject();
    final boolean[] enableDeleting=new boolean[1];
    enableDeleting[0]=true;
    final List<ContextReferenceBean> checkContext=checkContextFromProcess(factory,deleteActionCache,(RepositoryNode)repositoryNode);
    if (checkContext.size() > 0) {
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          ContextReferenceDialog dialog=new ContextReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),objToDelete,checkContext);
          int returnCode=dialog.open();
switch (returnCode) {
case Window.OK:
            enableDeleting[0]=true;
          break;
case Window.CANCEL:
        enableDeleting[0]=false;
      break;
  }
}
}
);
}
if (!enableDeleting[0]) {
return false;
}
if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
if (coreService != null && objToDelete != null && objToDelete.getProperty() != null) {
Item item=objToDelete.getProperty().getItem();
IProcess iProcess=coreService.getProcessFromItem(item);
if (iProcess != null && iProcess instanceof IProcess2) {
  IProcess2 process=(IProcess2)iProcess;
  process.removeProblems4ProcessDeleted();
}
}
}
factory.deleteObjectLogical(objToDelete);
removeConnFromSQLExplorer(repositoryNode);
return true;
}
}",0.8045937607130613
126841,"/** 
 * Extracts all convert services which are registed by the extension point <b> <code>org.talend.designer.core.process_convert</code> </b>. Added by Marvin Wang on Mar 19, 2013.
 * @return
 */
public List<IProcessConvertService> extractAllConvertServices(){
  List<IProcessConvertService> processConvertServices=new ArrayList<IProcessConvertService>();
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(EXTENSION_POINT_FOR_CONVERT);
  if (extensionPoint != null) {
    IExtension[] extensions=extensionPoint.getExtensions();
    for (    IExtension extension : extensions) {
      IConfigurationElement[] configurationElements=extension.getConfigurationElements();
      for (      IConfigurationElement configurationElement : configurationElements) {
        try {
          Object service=configurationElement.createExecutableExtension(""String_Node_Str"");
          if (service instanceof IProcessConvertService) {
            processConvertServices.add((IProcessConvertService)service);
          }
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return processConvertServices;
}","/** 
 * Extracts all convert services which are registed by the extension point <b> <code>org.talend.designer.core.process_convert</code> </b>. Added by Marvin Wang on Mar 19, 2013.
 * @return
 */
public List<IProcessConvertService> extractAllConvertServices(){
  if (processConvertServices.size() > 0) {
    return processConvertServices;
  }
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(EXTENSION_POINT_FOR_CONVERT);
  if (extensionPoint != null) {
    IExtension[] extensions=extensionPoint.getExtensions();
    for (    IExtension extension : extensions) {
      IConfigurationElement[] configurationElements=extension.getConfigurationElements();
      for (      IConfigurationElement configurationElement : configurationElements) {
        try {
          Object service=configurationElement.createExecutableExtension(""String_Node_Str"");
          if (service instanceof IProcessConvertService) {
            processConvertServices.add((IProcessConvertService)service);
          }
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return processConvertServices;
}",0.96724625960372
126842,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=contextManager.getListContext().size() != 0;
  if (formIsPerformed) {
    try {
      if (creation) {
        String nextId=factory.getNextId();
        contextProperty.setId(nextId);
        contextProperty.setLabel(contextProperty.getDisplayName());
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        final IPath path=contextWizardPage0.getDestinationPath();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(contextItem,path);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        contextProperty.setLabel(contextProperty.getDisplayName());
        contextItem.getContext().clear();
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        if (contextManager instanceof JobContextManager) {
          JobContextManager manager=(JobContextManager)contextManager;
          if (manager.isModified()) {
            Map<String,String> contextGroupRenamedMap=new HashMap<String,String>();
            Map<IContext,String> renameGroupContextMap=manager.getRenameGroupContext();
            for (            IContext context : renameGroupContextMap.keySet()) {
              String oldContextGroupName=renameGroupContextMap.get(context);
              contextGroupRenamedMap.put(oldContextGroupName,context.getName());
            }
            RepositoryUpdateManager.updateContext((JobContextManager)contextManager,contextItem);
            if (!contextGroupRenamedMap.isEmpty()) {
              SwitchContextGroupNameImpl.getInstance().updateContextForConnectionItems(contextGroupRenamedMap,contextItem);
            }
          }
        }
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(contextItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        updateRelatedView();
      }
      closeLockStrategy();
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=contextManager.getListContext().size() != 0;
  if (formIsPerformed) {
    try {
      if (creation) {
        String nextId=factory.getNextId();
        contextProperty.setId(nextId);
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        final IPath path=contextWizardPage0.getDestinationPath();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(contextItem,path);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        contextItem.getContext().clear();
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        if (contextManager instanceof JobContextManager) {
          JobContextManager manager=(JobContextManager)contextManager;
          if (manager.isModified()) {
            Map<String,String> contextGroupRenamedMap=new HashMap<String,String>();
            Map<IContext,String> renameGroupContextMap=manager.getRenameGroupContext();
            for (            IContext context : renameGroupContextMap.keySet()) {
              String oldContextGroupName=renameGroupContextMap.get(context);
              contextGroupRenamedMap.put(oldContextGroupName,context.getName());
            }
            RepositoryUpdateManager.updateContext((JobContextManager)contextManager,contextItem);
            if (!contextGroupRenamedMap.isEmpty()) {
              SwitchContextGroupNameImpl.getInstance().updateContextForConnectionItems(contextGroupRenamedMap,contextItem);
            }
          }
        }
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(contextItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        updateRelatedView();
      }
      closeLockStrategy();
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9856084656084656
126843,"/** 
 * This method is used when export job , check if one of the database component node use dynamic metadata
 */
private static void checkMetadataDynamic(ProcessItem selectedProcessItem,JobInfo jobInfo){
  if (exportConfig && !LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
    boolean hasDynamicMetadata=false;
    final ProcessType process=selectedProcessItem.getProcess();
    if (process != null) {
      out:       for (      NodeType node : (List<NodeType>)process.getNode()) {
        boolean isDbNode=false;
        for (        ElementParameterType param : (List<ElementParameterType>)node.getElementParameter()) {
          if (""String_Node_Str"".equals(param.getName()) && ""String_Node_Str"".equals(param.getField()) && param.getValue() != null && !""String_Node_Str"".equals(param.getValue())) {
            isDbNode=true;
            break;
          }
        }
        if (isDbNode) {
          for (          MetadataType metadataType : (List<MetadataType>)node.getMetadata()) {
            for (            ColumnType column : (List<ColumnType>)metadataType.getColumn()) {
              if (""String_Node_Str"".equals(column.getType())) {
                hasDynamicMetadata=true;
                break out;
              }
            }
          }
        }
      }
    }
    LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),hasDynamicMetadata);
  }
}","/** 
 * This method is used when export job or joblet , check if one of the database component node use dynamic metadata
 */
private static void checkMetadataDynamic(IProcess currentProcess,JobInfo jobInfo){
  if (exportConfig && !LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
    boolean hasDynamicMetadata=false;
    out:     for (    INode node : (List<? extends INode>)currentProcess.getGeneratingNodes()) {
      boolean isDbNode=false;
      for (      IElementParameter param : (List<? extends IElementParameter>)node.getElementParameters()) {
        if (""String_Node_Str"".equals(param.getName()) && ""String_Node_Str"".equals(param.getFieldType().getName()) && param.getValue() != null && !""String_Node_Str"".equals(param.getValue())) {
          isDbNode=true;
          break;
        }
      }
      if (isDbNode) {
        for (        IMetadataTable metadataTable : node.getMetadataList()) {
          for (          IMetadataColumn column : metadataTable.getListColumns()) {
            if (""String_Node_Str"".equals(column.getTalendType())) {
              hasDynamicMetadata=true;
              break out;
            }
          }
        }
      }
    }
    LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),hasDynamicMetadata);
  }
}",0.4497847919655667
126844,"public static void fillConnectionsForStat(List<String> connsName,INode currentNode){
  for (  IConnection conn : currentNode.getOutgoingConnections()) {
    if (conn.getLineStyle() == EConnectionType.FLOW_MAIN) {
      connsName.add(conn.getUniqueName());
      fillConnectionsForStat(connsName,conn.getTarget());
    }
 else     if (conn.getLineStyle() == EConnectionType.FLOW_MERGE) {
      connsName.add(conn.getUniqueName());
      continue;
    }
 else     if (conn.getLineStyle() == EConnectionType.ON_ROWS_END) {
      connsName.add(conn.getUniqueName());
      fillConnectionsForStat(connsName,conn.getTarget());
    }
  }
}","public static void fillConnectionsForStat(List<String> connsName,INode currentNode){
  for (  IConnection conn : currentNode.getOutgoingConnections()) {
    if (conn.getLineStyle() == EConnectionType.FLOW_MAIN) {
      if (!(currentNode.isVirtualGenerateNode() && currentNode.getVirtualLinkTo() != null)) {
        connsName.add(conn.getUniqueName());
      }
      fillConnectionsForStat(connsName,conn.getTarget());
    }
 else     if (conn.getLineStyle() == EConnectionType.FLOW_MERGE) {
      connsName.add(conn.getUniqueName());
      continue;
    }
 else     if (conn.getLineStyle() == EConnectionType.ON_ROWS_END) {
      fillConnectionsForStat(connsName,conn.getTarget());
    }
  }
}",0.8316981132075472
126845,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=contextManager.getListContext().size() != 0;
  if (formIsPerformed) {
    try {
      if (creation) {
        String nextId=factory.getNextId();
        contextProperty.setId(nextId);
        contextProperty.setLabel(contextProperty.getDisplayName());
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        final IPath path=contextWizardPage0.getDestinationPath();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(contextItem,path);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        contextProperty.setLabel(contextProperty.getDisplayName());
        contextItem.getContext().clear();
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        if (contextManager instanceof JobContextManager) {
          JobContextManager manager=(JobContextManager)contextManager;
          if (manager.isModified()) {
            Map<String,String> contextGroupRenamedMap=new HashMap<String,String>();
            Map<IContext,String> renameGroupContextMap=manager.getRenameGroupContext();
            for (            IContext context : renameGroupContextMap.keySet()) {
              String oldContextGroupName=renameGroupContextMap.get(context);
              contextGroupRenamedMap.put(oldContextGroupName,context.getName());
            }
            RepositoryUpdateManager.updateContext((JobContextManager)contextManager,contextItem);
            if (!contextGroupRenamedMap.isEmpty()) {
              SwitchContextGroupNameImpl.getInstance().updateContextForConnectionItems(contextGroupRenamedMap,contextItem);
            }
          }
        }
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(contextItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        updateRelatedView();
      }
      closeLockStrategy();
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=contextManager.getListContext().size() != 0;
  if (formIsPerformed) {
    try {
      if (creation) {
        String nextId=factory.getNextId();
        contextProperty.setId(nextId);
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        final IPath path=contextWizardPage0.getDestinationPath();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(contextItem,path);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        contextItem.getContext().clear();
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        if (contextManager instanceof JobContextManager) {
          JobContextManager manager=(JobContextManager)contextManager;
          if (manager.isModified()) {
            Map<String,String> contextGroupRenamedMap=new HashMap<String,String>();
            Map<IContext,String> renameGroupContextMap=manager.getRenameGroupContext();
            for (            IContext context : renameGroupContextMap.keySet()) {
              String oldContextGroupName=renameGroupContextMap.get(context);
              contextGroupRenamedMap.put(oldContextGroupName,context.getName());
            }
            RepositoryUpdateManager.updateContext((JobContextManager)contextManager,contextItem);
            if (!contextGroupRenamedMap.isEmpty()) {
              SwitchContextGroupNameImpl.getInstance().updateContextForConnectionItems(contextGroupRenamedMap,contextItem);
            }
          }
        }
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(contextItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        updateRelatedView();
      }
      closeLockStrategy();
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9856084656084656
126846,"/** 
 * This method is used when export job , check if one of the database component node use dynamic metadata
 */
private static void checkMetadataDynamic(ProcessItem selectedProcessItem,JobInfo jobInfo){
  if (exportConfig && !LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
    boolean hasDynamicMetadata=false;
    final ProcessType process=selectedProcessItem.getProcess();
    if (process != null) {
      out:       for (      NodeType node : (List<NodeType>)process.getNode()) {
        boolean isDbNode=false;
        for (        ElementParameterType param : (List<ElementParameterType>)node.getElementParameter()) {
          if (""String_Node_Str"".equals(param.getName()) && ""String_Node_Str"".equals(param.getField()) && param.getValue() != null && !""String_Node_Str"".equals(param.getValue())) {
            isDbNode=true;
            break;
          }
        }
        if (isDbNode) {
          for (          MetadataType metadataType : (List<MetadataType>)node.getMetadata()) {
            for (            ColumnType column : (List<ColumnType>)metadataType.getColumn()) {
              if (""String_Node_Str"".equals(column.getType())) {
                hasDynamicMetadata=true;
                break out;
              }
            }
          }
        }
      }
    }
    LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),hasDynamicMetadata);
  }
}","/** 
 * This method is used when export job or joblet , check if one of the database component node use dynamic metadata
 */
private static void checkMetadataDynamic(IProcess currentProcess,JobInfo jobInfo){
  if (exportConfig && !LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
    boolean hasDynamicMetadata=false;
    out:     for (    INode node : (List<? extends INode>)currentProcess.getGeneratingNodes()) {
      boolean isDbNode=false;
      for (      IElementParameter param : (List<? extends IElementParameter>)node.getElementParameters()) {
        if (""String_Node_Str"".equals(param.getName()) && ""String_Node_Str"".equals(param.getFieldType().getName()) && param.getValue() != null && !""String_Node_Str"".equals(param.getValue())) {
          isDbNode=true;
          break;
        }
      }
      if (isDbNode) {
        for (        IMetadataTable metadataTable : node.getMetadataList()) {
          for (          IMetadataColumn column : metadataTable.getListColumns()) {
            if (""String_Node_Str"".equals(column.getTalendType())) {
              hasDynamicMetadata=true;
              break out;
            }
          }
        }
      }
    }
    LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),hasDynamicMetadata);
  }
}",0.4497847919655667
126847,"public static void fillConnectionsForStat(List<String> connsName,INode currentNode){
  for (  IConnection conn : currentNode.getOutgoingConnections()) {
    if (conn.getLineStyle() == EConnectionType.FLOW_MAIN) {
      connsName.add(conn.getUniqueName());
      fillConnectionsForStat(connsName,conn.getTarget());
    }
 else     if (conn.getLineStyle() == EConnectionType.FLOW_MERGE) {
      connsName.add(conn.getUniqueName());
      continue;
    }
 else     if (conn.getLineStyle() == EConnectionType.ON_ROWS_END) {
      connsName.add(conn.getUniqueName());
      fillConnectionsForStat(connsName,conn.getTarget());
    }
  }
}","public static void fillConnectionsForStat(List<String> connsName,INode currentNode){
  for (  IConnection conn : currentNode.getOutgoingConnections()) {
    if (conn.getLineStyle() == EConnectionType.FLOW_MAIN) {
      if (!(currentNode.isVirtualGenerateNode() && currentNode.getVirtualLinkTo() != null)) {
        connsName.add(conn.getUniqueName());
      }
      fillConnectionsForStat(connsName,conn.getTarget());
    }
 else     if (conn.getLineStyle() == EConnectionType.FLOW_MERGE) {
      connsName.add(conn.getUniqueName());
      continue;
    }
 else     if (conn.getLineStyle() == EConnectionType.ON_ROWS_END) {
      fillConnectionsForStat(connsName,conn.getTarget());
    }
  }
}",0.8316981132075472
126848,"@Override public void drawBackground(GC gc){
  if (gc == null) {
    return;
  }
  List<LinkDescriptor<Item,D1,Tree,D2>> links=linksManager.getLinks();
  int lstSize=links.size();
  if (xStartBezierLink == null || xStartBezierLink < 10) {
    xStartBezierLink=findXRightStartBezierLink(source.getItems(),0);
  }
  Point sourceToCommonPoint=display.map(source,getBgDrawableComposite(),new Point(0,0));
  int treeItemHeight=source.getItemHeight();
  Rectangle tableBounds=source.getBounds();
  if (WindowSystem.isGTK()) {
    gc.setAdvanced(false);
  }
 else {
    gc.fillRectangle(sourceToCommonPoint.x,sourceToCommonPoint.y,tableBounds.width - source.getBorderWidth(),tableBounds.height - source.getBorderWidth());
    if (backgroundRefresher.isAntialiasAllowed()) {
      gc.setAntialias(SWT.ON);
    }
 else {
      gc.setAntialias(SWT.OFF);
    }
  }
  Point pointStartStraight=new Point(0,0);
  Point pointEndStraight=new Point(0,0);
  for (int i=0; i < lstSize; i++) {
    LinkDescriptor<Item,D1,Tree,D2> link=links.get(i);
    Tree tree=link.getExtremity2().getGraphicalObject();
    Point tableToCommonPoint=display.map(tree,getBgDrawableComposite(),new Point(0,0));
    IDrawableLink drawableLink=link.getStyleLink().getDrawableLink();
    if (drawableLink == null) {
      drawableLink=getDefaultStyleLink().getDrawableLink();
    }
    drawableLink.getStyle().apply(gc);
    IExtremityLink<Item,D1> extremity1=link.getExtremity1();
    IExtremityLink<Tree,D2> extremity2=link.getExtremity2();
    dataToTableItemCache.clear();
    TableItem tableItem=dataToTableItemCache.getTableItem(extremity1.getDataItem());
    Rectangle tableItemBounds=tableItem.getBounds();
    int yStraight=sourceToCommonPoint.y + treeItemHeight / 2 + tableItemBounds.y;
    pointStartStraight.x=sourceToCommonPoint.x + tableItemBounds.x + tableItemBounds.width;
    pointStartStraight.y=yStraight;
    pointEndStraight.x=sourceToCommonPoint.x + xStartBezierLink;
    pointEndStraight.y=yStraight;
    TreeItem treeItem=getFirstVisibleTreeItemOfPath(extremity2.getDataItem());
    Rectangle treeItemBounds=treeItem.getBounds();
    Rectangle treeBounds=tree.getBounds();
    int pointY=treeItemBounds.y + tree.getItemHeight() / 2 + tree.getBorderWidth();
    if (tree.getHeaderVisible()) {
      pointY+=tree.getHeaderHeight();
    }
    Point pointEndCentralCurve=null;
    pointEndCentralCurve=backgroundRefresher.convertPointToCommonParentOrigin(new Point(treeBounds.x - 10,pointY),tree);
    Point point=display.map(source,getBgDrawableComposite(),new Point(0,0));
    Point offset=getOffset();
    int yStartStraight=pointStartStraight.y + offset.y;
    boolean isStartOutOfView=false;
    boolean isEndOutOfView=false;
    if (yStraight < point.y || yStraight > point.y + tableBounds.height) {
      isStartOutOfView=true;
    }
 else {
    }
    if (pointEndCentralCurve.y < tableToCommonPoint.y) {
      pointEndCentralCurve.y=tableToCommonPoint.y;
      isEndOutOfView=true;
    }
    if (pointEndCentralCurve.y > tableToCommonPoint.y + treeBounds.height) {
      pointEndCentralCurve.y=tableToCommonPoint.y + treeBounds.height - 2 * tree.getBorderWidth();
      isEndOutOfView=true;
    }
    if (!(isStartOutOfView && isEndOutOfView)) {
      boolean lineStyleDot=isStartOutOfView || isEndOutOfView;
      if ((treeItem.getData() == extremity2.getDataItem()) && !lineStyleDot) {
        gc.setLineStyle(SWT.LINE_SOLID);
      }
 else {
        gc.setLineStyle(SWT.LINE_DOT);
      }
      gc.drawLine(pointStartStraight.x + offset.x,yStartStraight,pointEndStraight.x + offset.x,yStartStraight);
      if (WindowSystem.isGTK()) {
        pointStartStraight.x+=-15;
      }
      pointEndStraight.x+=offset.x;
      pointEndStraight.y+=offset.y;
      pointEndCentralCurve.x+=offset.x - 6;
      pointEndCentralCurve.y+=offset.y;
      if (Platform.OS_LINUX.equals(Platform.getOS())) {
        pointEndCentralCurve.y=pointEndCentralCurve.y - tableItem.getBounds().height;
      }
      drawableLink.setPoint1(pointEndStraight);
      drawableLink.setPoint2(pointEndCentralCurve);
      drawableLink.draw(gc);
    }
  }
}","@Override public void drawBackground(GC gc){
  if (gc == null) {
    return;
  }
  List<LinkDescriptor<Item,D1,Tree,D2>> links=linksManager.getLinks();
  int lstSize=links.size();
  if (xStartBezierLink == null || xStartBezierLink < 10) {
    xStartBezierLink=findXRightStartBezierLink(source.getItems(),0);
  }
  Point sourceToCommonPoint=display.map(source,getBgDrawableComposite(),new Point(0,0));
  int treeItemHeight=source.getItemHeight();
  Rectangle tableBounds=source.getBounds();
  if (WindowSystem.isGTK()) {
    gc.setAdvanced(false);
  }
 else {
    gc.fillRectangle(sourceToCommonPoint.x,sourceToCommonPoint.y,tableBounds.width - source.getBorderWidth(),tableBounds.height - source.getBorderWidth());
    if (backgroundRefresher.isAntialiasAllowed()) {
      gc.setAntialias(SWT.ON);
    }
 else {
      gc.setAntialias(SWT.OFF);
    }
  }
  Point pointStartStraight=new Point(0,0);
  Point pointEndStraight=new Point(0,0);
  for (int i=0; i < lstSize; i++) {
    LinkDescriptor<Item,D1,Tree,D2> link=links.get(i);
    Tree tree=link.getExtremity2().getGraphicalObject();
    Point tableToCommonPoint=display.map(tree,getBgDrawableComposite(),new Point(0,0));
    IDrawableLink drawableLink=link.getStyleLink().getDrawableLink();
    if (drawableLink == null) {
      drawableLink=getDefaultStyleLink().getDrawableLink();
    }
    drawableLink.getStyle().apply(gc);
    IExtremityLink<Item,D1> extremity1=link.getExtremity1();
    IExtremityLink<Tree,D2> extremity2=link.getExtremity2();
    dataToTableItemCache.clear();
    TableItem tableItem=dataToTableItemCache.getTableItem(extremity1.getDataItem());
    Rectangle tableItemBounds=tableItem.getBounds();
    int yStraight=sourceToCommonPoint.y + treeItemHeight / 2 + tableItemBounds.y;
    pointStartStraight.x=sourceToCommonPoint.x + tableItemBounds.x + tableItemBounds.width;
    pointStartStraight.y=yStraight;
    pointEndStraight.x=sourceToCommonPoint.x + xStartBezierLink;
    pointEndStraight.y=yStraight;
    TreeItem treeItem=getFirstVisibleTreeItemOfPath(extremity2.getDataItem());
    Rectangle treeItemBounds;
    if (treeItem != null) {
      treeItemBounds=treeItem.getBounds();
    }
 else {
      treeItemBounds=new Rectangle(0,0,0,0);
    }
    Rectangle treeBounds=tree.getBounds();
    int pointY=treeItemBounds.y + tree.getItemHeight() / 2 + tree.getBorderWidth();
    if (tree.getHeaderVisible()) {
      pointY+=tree.getHeaderHeight();
    }
    Point pointEndCentralCurve=null;
    pointEndCentralCurve=backgroundRefresher.convertPointToCommonParentOrigin(new Point(treeBounds.x - 10,pointY),tree);
    Point point=display.map(source,getBgDrawableComposite(),new Point(0,0));
    Point offset=getOffset();
    int yStartStraight=pointStartStraight.y + offset.y;
    boolean isStartOutOfView=false;
    boolean isEndOutOfView=false;
    if (yStraight < point.y || yStraight > point.y + tableBounds.height) {
      isStartOutOfView=true;
    }
 else {
    }
    if (pointEndCentralCurve.y < tableToCommonPoint.y) {
      pointEndCentralCurve.y=tableToCommonPoint.y;
      isEndOutOfView=true;
    }
    if (pointEndCentralCurve.y > tableToCommonPoint.y + treeBounds.height) {
      pointEndCentralCurve.y=tableToCommonPoint.y + treeBounds.height - 2 * tree.getBorderWidth();
      isEndOutOfView=true;
    }
    if (!(isStartOutOfView && isEndOutOfView)) {
      boolean lineStyleDot=isStartOutOfView || isEndOutOfView;
      if ((treeItem != null && treeItem.getData() == extremity2.getDataItem()) && !lineStyleDot) {
        gc.setLineStyle(SWT.LINE_SOLID);
      }
 else {
        gc.setLineStyle(SWT.LINE_DOT);
      }
      gc.drawLine(pointStartStraight.x + offset.x,yStartStraight,pointEndStraight.x + offset.x,yStartStraight);
      if (WindowSystem.isGTK()) {
        pointStartStraight.x+=-15;
      }
      pointEndStraight.x+=offset.x;
      pointEndStraight.y+=offset.y;
      pointEndCentralCurve.x+=offset.x - 6;
      pointEndCentralCurve.y+=offset.y;
      if (Platform.OS_LINUX.equals(Platform.getOS())) {
        pointEndCentralCurve.y=pointEndCentralCurve.y - tableItem.getBounds().height;
      }
      drawableLink.setPoint1(pointEndStraight);
      drawableLink.setPoint2(pointEndCentralCurve);
      drawableLink.draw(gc);
    }
  }
}",0.9819485953377168
126849,"public static void fillConnectionsForStat(List<String> connsName,INode currentNode){
  for (  IConnection conn : currentNode.getOutgoingConnections()) {
    if (conn.getLineStyle() == EConnectionType.FLOW_MAIN) {
      connsName.add(conn.getUniqueName());
      fillConnectionsForStat(connsName,conn.getTarget());
    }
 else     if (conn.getLineStyle() == EConnectionType.FLOW_MERGE) {
      connsName.add(conn.getUniqueName());
      continue;
    }
 else     if (conn.getLineStyle() == EConnectionType.ON_ROWS_END) {
      connsName.add(conn.getUniqueName());
      fillConnectionsForStat(connsName,conn.getTarget());
    }
  }
}","public static void fillConnectionsForStat(List<String> connsName,INode currentNode){
  for (  IConnection conn : currentNode.getOutgoingConnections()) {
    if (conn.getLineStyle() == EConnectionType.FLOW_MAIN) {
      if (!(currentNode.isVirtualGenerateNode() && currentNode.getVirtualLinkTo() != null)) {
        connsName.add(conn.getUniqueName());
      }
      fillConnectionsForStat(connsName,conn.getTarget());
    }
 else     if (conn.getLineStyle() == EConnectionType.FLOW_MERGE) {
      connsName.add(conn.getUniqueName());
      continue;
    }
 else     if (conn.getLineStyle() == EConnectionType.ON_ROWS_END) {
      fillConnectionsForStat(connsName,conn.getTarget());
    }
  }
}",0.8316981132075472
126850,"/** 
 * This method is used when export job , check if one of the database component node use dynamic metadata
 */
private static void checkMetadataDynamic(ProcessItem selectedProcessItem,JobInfo jobInfo){
  if (exportConfig && !LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
    boolean hasDynamicMetadata=false;
    final ProcessType process=selectedProcessItem.getProcess();
    if (process != null) {
      out:       for (      NodeType node : (List<NodeType>)process.getNode()) {
        boolean isDbNode=false;
        for (        ElementParameterType param : (List<ElementParameterType>)node.getElementParameter()) {
          if (""String_Node_Str"".equals(param.getName()) && ""String_Node_Str"".equals(param.getField()) && param.getValue() != null && !""String_Node_Str"".equals(param.getValue())) {
            isDbNode=true;
            break;
          }
        }
        if (isDbNode) {
          for (          MetadataType metadataType : (List<MetadataType>)node.getMetadata()) {
            for (            ColumnType column : (List<ColumnType>)metadataType.getColumn()) {
              if (""String_Node_Str"".equals(column.getType())) {
                hasDynamicMetadata=true;
                break out;
              }
            }
          }
        }
      }
    }
    LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),hasDynamicMetadata);
  }
}","/** 
 * This method is used when export job or joblet , check if one of the database component node use dynamic metadata
 */
private static void checkMetadataDynamic(IProcess currentProcess,JobInfo jobInfo){
  if (exportConfig && !LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
    boolean hasDynamicMetadata=false;
    out:     for (    INode node : (List<? extends INode>)currentProcess.getGeneratingNodes()) {
      boolean isDbNode=false;
      for (      IElementParameter param : (List<? extends IElementParameter>)node.getElementParameters()) {
        if (""String_Node_Str"".equals(param.getName()) && ""String_Node_Str"".equals(param.getFieldType().getName()) && param.getValue() != null && !""String_Node_Str"".equals(param.getValue())) {
          isDbNode=true;
          break;
        }
      }
      if (isDbNode) {
        for (        IMetadataTable metadataTable : node.getMetadataList()) {
          for (          IMetadataColumn column : metadataTable.getListColumns()) {
            if (""String_Node_Str"".equals(column.getTalendType())) {
              hasDynamicMetadata=true;
              break out;
            }
          }
        }
      }
    }
    LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),hasDynamicMetadata);
  }
}",0.4497847919655667
126851,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  TableNode parentNode=(TableNode)treeItem.getData();
  if (parentNode.getType() == TableNode.CATALOG || parentNode.getType() == TableNode.SCHEMA) {
    needUpdate=false;
    treeItem.setChecked(false);
  }
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == TableNode.COLUMN_FAMILY) {
          if (firstExpand && needUpdate && item.getData() != null) {
            updateLeafItem(item,true,TableNode.COLUMN);
          }
 else           if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
 else         if (node.getType() == provider.getRunnableAccessNodeType()) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  TableNode parentNode=(TableNode)treeItem.getData();
  if (parentNode.getType() == TableNode.CATALOG || parentNode.getType() == TableNode.SCHEMA) {
    needUpdate=false;
  }
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == TableNode.COLUMN_FAMILY) {
          if (firstExpand && needUpdate && item.getData() != null) {
            updateLeafItem(item,true,TableNode.COLUMN);
          }
 else           if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
 else         if (node.getType() == provider.getRunnableAccessNodeType()) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}",0.9914938862307284
126852,"@Override public RootContainer<String,IRepositoryViewObject> getTdqRepositoryViewObjects(Project project,ERepositoryObjectType type,String folderName,boolean[] options) throws PersistenceException {
  String relativeFolder=folderName;
  if (type != null && type.hasFolder()) {
    String baseFolder=ERepositoryObjectType.getFolderName(type);
    relativeFolder=StringUtils.removeStart(relativeFolder,baseFolder);
  }
  return getObjectFromFolder(project,type,relativeFolder,true,options);
}","@Override public RootContainer<String,IRepositoryViewObject> getTdqRepositoryViewObjects(Project project,ERepositoryObjectType type,String folderName,boolean[] options) throws PersistenceException {
  String relativeFolder=folderName;
  if (type != null && type.hasFolder()) {
    String baseFolder=ERepositoryObjectType.getFolderName(type);
    relativeFolder=StringUtils.removeStart(relativeFolder,baseFolder);
  }
  return getObjectFromFolder(project,type,relativeFolder,OPTION_ONLY_LAST_VERSION | OPTION_DYNAMIC_OBJECTS);
}",0.9400196656833824
126853,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      String tempVlaue=ContextParameterUtils.getVariableFromCode(paramValue);
      if (tempVlaue == null) {
        return ""String_Node_Str"";
      }
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(tempVlaue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  return paramValue;
}",0.9401900503074344
126854,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getUniqueName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getUniqueName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}",0.9932810750279956
126855,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == TableNode.COLUMN_FAMILY) {
          if (firstExpand && needUpdate && item.getData() != null) {
            updateLeafItem(item,true,TableNode.COLUMN);
          }
 else           if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
 else         if (node.getType() == provider.getRunnableAccessNodeType()) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  TableNode parentNode=(TableNode)treeItem.getData();
  if (parentNode.getType() == TableNode.CATALOG || parentNode.getType() == TableNode.SCHEMA) {
    needUpdate=false;
    treeItem.setChecked(false);
  }
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == TableNode.COLUMN_FAMILY) {
          if (firstExpand && needUpdate && item.getData() != null) {
            updateLeafItem(item,true,TableNode.COLUMN);
          }
 else           if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
 else         if (node.getType() == provider.getRunnableAccessNodeType()) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}",0.9422916085865626
126856,"/** 
 * test fill columns for method ""fillColumns(ColumnSet colSet, DatabaseMetaData dbJDBCMetadata, List<String> columnFilter, String columnPattern)""
 * @throws SQLException
 */
@Test public void testFillColumns_1() throws SQLException {
  ColumnSet columnSet=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createColumnSet();
  columnSet.setName(""String_Node_Str"");
  DatabaseMetaData dbJDBCMetadata=mock(DatabaseMetaData.class);
  List<String> columnFilter=new ArrayList<String>();
  Schema schema=mock(Schema.class);
  when(schema.getName()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(CatalogHelper.class);
  when(CatalogHelper.getParentCatalog(columnSet)).thenReturn(null);
  PowerMockito.mockStatic(SchemaHelper.class);
  when(SchemaHelper.getParentSchema(columnSet)).thenReturn(schema);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  ResultSet rs=mock(ResultSet.class);
  when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(rs.getString(GetColumn.COLUMN_NAME.name())).thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.TYPE_NAME.name())).thenReturn(""String_Node_Str"");
  when(rs.getInt(GetColumn.NULLABLE.name())).thenReturn(0);
  when(rs.getInt(GetColumn.DATA_TYPE.name())).thenReturn(1);
  when(rs.getString(GetColumn.REMARKS.name())).thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.IS_NULLABLE.name())).thenReturn(""String_Node_Str"");
  when(dbJDBCMetadata.getColumns(anyString(),anyString(),anyString(),anyString())).thenReturn(rs);
  dbConnection.setDbmsId(null);
  PowerMockito.mockStatic(ConnectionHelper.class);
  when(ConnectionHelper.getConnection(columnSet)).thenReturn(dbConnection);
  stub(method(MetadataToolHelper.class,""String_Node_Str"",String.class)).toReturn(""String_Node_Str"");
  PowerMockito.mockStatic(ColumnSetHelper.class);
  stub(method(ColumnSetHelper.class,""String_Node_Str"")).toReturn(true);
  List<TdColumn> fillColumns=dBConnectionFillerImpl.fillColumns(columnSet,dbJDBCMetadata,columnFilter,null);
  assertNotNull(fillColumns);
  assertTrue(fillColumns.size() == 2);
}","/** 
 * test fill columns for method ""fillColumns(ColumnSet colSet, DatabaseMetaData dbJDBCMetadata, List<String> columnFilter, String columnPattern)""
 * @throws SQLException
 */
@Test public void testFillColumns_1() throws SQLException {
  ColumnSet columnSet=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createColumnSet();
  columnSet.setName(""String_Node_Str"");
  DatabaseMetaData dbJDBCMetadata=mock(DatabaseMetaData.class);
  List<String> columnFilter=new ArrayList<String>();
  Schema schema=mock(Schema.class);
  when(schema.getName()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(CatalogHelper.class);
  when(CatalogHelper.getParentCatalog(columnSet)).thenReturn(null);
  PowerMockito.mockStatic(SchemaHelper.class);
  when(SchemaHelper.getParentSchema(columnSet)).thenReturn(schema);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(true);
  ResultSet rs=mock(ResultSet.class);
  when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(rs.getString(GetColumn.COLUMN_NAME.name())).thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.TYPE_NAME.name())).thenReturn(""String_Node_Str"");
  when(rs.getInt(GetColumn.NULLABLE.name())).thenReturn(0);
  when(rs.getInt(GetColumn.DATA_TYPE.name())).thenReturn(1);
  when(rs.getString(GetColumn.REMARKS.name())).thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.IS_NULLABLE.name())).thenReturn(""String_Node_Str"");
  when(dbJDBCMetadata.getColumns(anyString(),anyString(),anyString(),anyString())).thenReturn(rs);
  dbConnection.setDbmsId(null);
  PowerMockito.mockStatic(ConnectionHelper.class);
  when(ConnectionHelper.getConnection(columnSet)).thenReturn(dbConnection);
  stub(method(MetadataToolHelper.class,""String_Node_Str"",String.class)).toReturn(""String_Node_Str"");
  PowerMockito.mockStatic(ColumnSetHelper.class);
  stub(method(ColumnSetHelper.class,""String_Node_Str"")).toReturn(true);
  List<TdColumn> fillColumns=dBConnectionFillerImpl.fillColumns(columnSet,dbJDBCMetadata,columnFilter,null);
  assertNotNull(fillColumns);
  assertTrue(fillColumns.size() == 2);
}",0.977806507218272
126857,"/** 
 * test fill columns for odbc teradata in method ""fillColumns(ColumnSet colSet, DatabaseMetaData dbJDBCMetadata, List<String> columnFilter, String columnPattern)"".
 * @param columnSet
 * @throws SQLException
 */
private void testFillColumnCommon_TeraOdbc(ColumnSet columnSet) throws SQLException {
  columnSet.setName(""String_Node_Str"");
  DatabaseMetaData dbJDBCMetadata=mock(DatabaseMetaData.class);
  List<String> columnFilter=new ArrayList<String>();
  Schema schema=mock(Schema.class);
  when(schema.getName()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(CatalogHelper.class);
  when(CatalogHelper.getParentCatalog(columnSet)).thenReturn(null);
  PowerMockito.mockStatic(SchemaHelper.class);
  when(SchemaHelper.getParentSchema(columnSet)).thenReturn(schema);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  PowerMockito.mockStatic(ConnectionUtils.class);
  when(ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)).thenReturn(true);
  ResultSet rs=mock(ResultSet.class);
  when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(rs.getString(GetColumn.COLUMN_NAME.name())).thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.TYPE_NAME.name())).thenReturn(""String_Node_Str"");
  when(rs.getInt(GetColumn.NULLABLE.name())).thenReturn(0);
  when(rs.getInt(GetColumn.DATA_TYPE.name())).thenReturn(1);
  when(rs.getString(GetColumn.REMARKS.name())).thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.IS_NULLABLE.name())).thenReturn(""String_Node_Str"");
  when(dbJDBCMetadata.getColumns(anyString(),anyString(),anyString(),anyString())).thenReturn(rs);
  PowerMockito.mockStatic(ConnectionHelper.class);
  when(ConnectionHelper.getConnection(columnSet)).thenReturn(dbConnection);
  stub(method(MetadataToolHelper.class,""String_Node_Str"",String.class)).toReturn(""String_Node_Str"");
  PowerMockito.mockStatic(ColumnSetHelper.class);
  stub(method(ColumnSetHelper.class,""String_Node_Str"")).toReturn(true);
  List<TdColumn> fillColumns=dBConnectionFillerImpl.fillColumns(columnSet,dbJDBCMetadata,columnFilter,null);
  assertNotNull(fillColumns);
  assertTrue(fillColumns.size() == 2);
  for (  TdColumn tdColumn : fillColumns) {
    assertEquals(tdColumn.getSqlDataType().getNumericPrecision(),0);
    assertEquals(tdColumn.getSqlDataType().getNumericPrecisionRadix(),0);
    assertEquals(tdColumn.getLength(),0);
    assertNull(null,tdColumn.getInitialValue().getBody());
  }
}","/** 
 * test fill columns for odbc teradata in method ""fillColumns(ColumnSet colSet, DatabaseMetaData dbJDBCMetadata, List<String> columnFilter, String columnPattern)"".
 * @param columnSet
 * @throws SQLException
 */
private void testFillColumnCommon_TeraOdbc(ColumnSet columnSet) throws SQLException {
  columnSet.setName(""String_Node_Str"");
  DatabaseMetaData dbJDBCMetadata=mock(DatabaseMetaData.class);
  List<String> columnFilter=new ArrayList<String>();
  Schema schema=mock(Schema.class);
  when(schema.getName()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(CatalogHelper.class);
  when(CatalogHelper.getParentCatalog(columnSet)).thenReturn(null);
  PowerMockito.mockStatic(SchemaHelper.class);
  when(SchemaHelper.getParentSchema(columnSet)).thenReturn(schema);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(false);
  stub(method(MetadataConnectionUtils.class,""String_Node_Str"",DatabaseMetaData.class)).toReturn(true);
  PowerMockito.mockStatic(ConnectionUtils.class);
  when(ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)).thenReturn(true);
  ResultSet rs=mock(ResultSet.class);
  when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(false);
  when(rs.getString(GetColumn.COLUMN_NAME.name())).thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.TYPE_NAME.name())).thenReturn(""String_Node_Str"");
  when(rs.getInt(GetColumn.NULLABLE.name())).thenReturn(0);
  when(rs.getInt(GetColumn.DATA_TYPE.name())).thenReturn(1);
  when(rs.getString(GetColumn.REMARKS.name())).thenReturn(""String_Node_Str"");
  when(rs.getString(GetColumn.IS_NULLABLE.name())).thenReturn(""String_Node_Str"");
  when(dbJDBCMetadata.getColumns(anyString(),anyString(),anyString(),anyString())).thenReturn(rs);
  PowerMockito.mockStatic(ConnectionHelper.class);
  when(ConnectionHelper.getConnection(columnSet)).thenReturn(dbConnection);
  stub(method(MetadataToolHelper.class,""String_Node_Str"",String.class)).toReturn(""String_Node_Str"");
  PowerMockito.mockStatic(ColumnSetHelper.class);
  stub(method(ColumnSetHelper.class,""String_Node_Str"")).toReturn(true);
  List<TdColumn> fillColumns=dBConnectionFillerImpl.fillColumns(columnSet,dbJDBCMetadata,columnFilter,null);
  assertNotNull(fillColumns);
  assertTrue(fillColumns.size() == 2);
  for (  TdColumn tdColumn : fillColumns) {
    assertEquals(tdColumn.getSqlDataType().getNumericPrecision(),0);
    assertEquals(tdColumn.getSqlDataType().getNumericPrecisionRadix(),0);
    assertEquals(tdColumn.getLength(),0);
    assertNull(null,tdColumn.getInitialValue().getBody());
  }
}",0.9806935332708528
126858,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getColumns(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.ColumnSet,java.lang.String,boolean)}.
 * @throws SQLException
 */
@Test public void testGetColumns(){
  ColumnSet columnSet=RelationalPackage.eINSTANCE.getRelationalFactory().createTdTable();
  TdColumn column1=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column1.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column1,columnSet);
  TdColumn column2=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column2.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column2,columnSet);
  String connFailedMessage=""String_Node_Str"";
  try {
    List<TdColumn> columns=DqRepositoryViewService.getColumns(null,columnSet,null,false);
    assertEquals(2,columns.size());
    DatabaseConnection dbConn=createDatabaseConn();
    TypedReturnCode<java.sql.Connection> retCode=new TypedReturnCode<java.sql.Connection>();
    retCode.setOk(Boolean.FALSE);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.createConnection(dbConn)).thenReturn(retCode);
    retCode.setMessage(connFailedMessage);
    DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    List<TdColumn> columnsExpected=new ArrayList<TdColumn>(3);
    java.sql.Connection sqlConn=null;
    DatabaseMetaData databaseMetaData=mock(DatabaseMetaData.class);
    when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn)).thenReturn(databaseMetaData);
    MetadataFillFactory metadataFactory=mock(MetadataFillFactory.class);
    when(metadataFactory.fillColumns(columnSet,databaseMetaData,null,null)).thenReturn(columnsExpected);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    when(MetadataFillFactory.getDBInstance()).thenReturn(metadataFactory);
    List<TdColumn> columnsActual=DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    assertEquals(columnsExpected.size(),columnsActual.size());
  }
 catch (  Exception e) {
    assertEquals(connFailedMessage,e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getColumns(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.ColumnSet,java.lang.String,boolean)}.
 * @throws SQLException
 */
@Test public void testGetColumns(){
  ColumnSet columnSet=RelationalPackage.eINSTANCE.getRelationalFactory().createTdTable();
  TdColumn column1=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column1.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column1,columnSet);
  TdColumn column2=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column2.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column2,columnSet);
  String connFailedMessage=""String_Node_Str"";
  try {
    List<TdColumn> columns=DqRepositoryViewService.getColumns(null,columnSet,null,false);
    assertEquals(2,columns.size());
    DatabaseConnection dbConn=createDatabaseConn();
    TypedReturnCode<java.sql.Connection> retCode=new TypedReturnCode<java.sql.Connection>();
    retCode.setOk(Boolean.FALSE);
    retCode.setMessage(connFailedMessage);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.createConnection(dbConn)).thenReturn(retCode);
    DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    List<TdColumn> columnsExpected=new ArrayList<TdColumn>(3);
    java.sql.Connection sqlConn=Mockito.mock(java.sql.Connection.class);
    DatabaseMetaData databaseMetaData=mock(DatabaseMetaData.class);
    TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
    rc.setOk(Boolean.TRUE);
    rc.setObject(sqlConn);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.createConnection(dbConn)).thenReturn(rc);
    when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn)).thenReturn(databaseMetaData);
    MetadataFillFactory metadataFactory=mock(MetadataFillFactory.class);
    when(metadataFactory.fillColumns(columnSet,databaseMetaData,null,null)).thenReturn(columnsExpected);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    when(MetadataFillFactory.getDBInstance()).thenReturn(metadataFactory);
    List<TdColumn> columnsActual=DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    assertEquals(columnsExpected.size(),columnsActual.size());
  }
 catch (  Exception e) {
    assertEquals(connFailedMessage,e.getMessage());
  }
}",0.9133489461358314
126859,"public static String addShutDownForHSQLUrl(String url,String AdditionalParams){
  String dbUrl=url;
  boolean isHSQL=ConnectionUtils.isHsql(dbUrl);
  if (isHSQL && AdditionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
    dbUrl=dbUrl + SHUTDOWN_PARAM;
  }
  return dbUrl;
}","/** 
 * add "";shutdown=true"" to the end of the hsql url when the url don't contain it.
 * @param url
 * @param AdditionalParams
 * @return String the url after added
 */
public static String addShutDownForHSQLUrl(String url,String AdditionalParams){
  String dbUrl=url;
  boolean isHSQL=ConnectionUtils.isHsql(dbUrl);
  if (isHSQL && AdditionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
    dbUrl=dbUrl + SHUTDOWN_PARAM;
  }
  return dbUrl;
}",0.7598870056497176
126860,"public static boolean isServerModeHsql(String url){
  return url != null && url.startsWith(""String_Node_Str"");
}","/** 
 * from the url to check whether the hsql is Server Mode.
 * @param url
 * @return
 */
public static boolean isServerModeHsql(String url){
  return url != null && url.startsWith(""String_Node_Str"");
}",0.7088607594936709
126861,"public static boolean isHsql(String url){
  return url != null && url.startsWith(""String_Node_Str"");
}","/** 
 * from the url to check whether it is hsql.
 * @param url
 * @return
 */
public static boolean isHsql(String url){
  return url != null && url.startsWith(""String_Node_Str"");
}",0.7208480565371025
126862,"public static void executeShutDownForHSQL(java.sql.Connection connection) throws SQLException {
  Statement statement=connection.createStatement();
  statement.executeUpdate(""String_Node_Str"");
  statement.close();
}","/** 
 * execute ShutDown For HSQL connection.
 * @param connection
 * @throws SQLException
 */
public static void executeShutDownForHSQL(java.sql.Connection connection) throws SQLException {
  Statement statement=connection.createStatement();
  statement.executeUpdate(""String_Node_Str"");
  statement.close();
}",0.8197343453510436
126863,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == TableNode.COLUMN_FAMILY) {
          if (firstExpand && needUpdate && item.getData() != null) {
            updateLeafItem(item,true,TableNode.COLUMN);
          }
 else           if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
 else         if (node.getType() == provider.getRunnableAccessNodeType()) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  String itemText=treeItem.getText();
  boolean needUpdate=treeItem.getChecked();
  TableNode parentNode=(TableNode)treeItem.getData();
  if (parentNode.getType() == TableNode.CATALOG || parentNode.getType() == TableNode.SCHEMA) {
    needUpdate=false;
  }
  boolean firstExpand=false;
  if (mapCheckState.containsKey(itemText)) {
    firstExpand=mapCheckState.get(itemText);
  }
 else {
    firstExpand=true;
  }
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      TableNode node=(TableNode)item.getData();
      if (useProvider()) {
        if (node.getType() == TableNode.COLUMN_FAMILY) {
          if (firstExpand && needUpdate && item.getData() != null) {
            updateLeafItem(item,true,TableNode.COLUMN);
          }
 else           if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
 else         if (node.getType() == provider.getRunnableAccessNodeType()) {
          if (isExistTable(node)) {
            item.setChecked(true);
          }
 else {
            item.setChecked(false);
          }
        }
      }
 else       if (node.getType() == TableNode.TABLE) {
        if (firstExpand && needUpdate && item.getData() != null) {
          updateItem(item,true,true);
        }
 else         if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          item.setChecked(false);
        }
      }
 else       if (firstExpand && needUpdate && node.getType() == TableNode.SCHEMA) {
        item.setChecked(true);
        mapCheckState.put(item.getText(),firstExpand);
      }
 else {
        item.setGrayed(item.getChecked());
      }
    }
  }
  if (firstExpand) {
    mapCheckState.put(itemText,false);
  }
}",0.9507735583684952
126864,"public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isHsql=ConnectionUtils.isHsql(url);
          if (isHsql) {
            Statement statement=conn.createStatement();
            statement.executeUpdate(""String_Node_Str"");
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}","public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isHsql=ConnectionUtils.isHsql(url);
          if (isHsql && !ConnectionUtils.isServerModeHsql(url)) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.8447488584474886
126865,"/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=getHotClassLoaderFromCache(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=new HotClassLoader();
  }
  for (  String element : jarPath) {
    if (element.contains(""String_Node_Str"")) {
      String[] splittedPath=element.split(""String_Node_Str"");
      for (      String element2 : splittedPath) {
        loader.addPath(element2);
      }
    }
 else {
      loader.addPath(element);
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      if (driverClassName != null && driverClassName.equals(EDatabase4DriverClassName.HSQLDB.getDriverClass()) && additionalParams.indexOf(SHUTDOWN_PARAM) == -1) {
        url=url + SHUTDOWN_PARAM;
      }
      if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
        ExtractMetaDataUtils.getInstance().setDriverCache(wapperDriver);
      }
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType)) {
        Thread.currentThread().setContextClassLoader(loader);
      }
      connection=wapperDriver.connect(url,info);
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","/** 
 * DOC YeXiaowei Comment method ""getConnection"".
 * @param jarPath
 * @param driverClassName
 * @param url
 * @param username
 * @param password
 * @return
 */
public List getConnection(String[] jarPath,String driverClassName,String url,String username,String password,String dbType,String dbVersion,String additionalParams) throws Exception {
  List list=new ArrayList();
  HotClassLoader loader;
  boolean flog=EDatabaseVersion4Drivers.containTypeAndVersion(dbType,dbVersion);
  if (flog) {
    loader=getHotClassLoaderFromCache(dbType,dbVersion);
    if (loader == null) {
      loader=new HotClassLoader();
      classLoadersMap.put(dbType,dbVersion,loader);
    }
  }
 else {
    loader=new HotClassLoader();
  }
  for (  String element : jarPath) {
    if (element.contains(""String_Node_Str"")) {
      String[] splittedPath=element.split(""String_Node_Str"");
      for (      String element2 : splittedPath) {
        loader.addPath(element2);
      }
    }
 else {
      loader.addPath(element);
    }
  }
  DriverShim wapperDriver=null;
  Connection connection=null;
  try {
    Class<?> driver=Class.forName(driverClassName,true,loader);
    wapperDriver=new DriverShim((Driver)(driver.newInstance()));
    Properties info=new Properties();
    username=username != null ? username : ""String_Node_Str"";
    password=password != null ? password : ""String_Node_Str"";
    info.put(""String_Node_Str"",username);
    info.put(""String_Node_Str"",password);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
      Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
      if (systemCharset != null && systemCharset.displayName() != null) {
        info.put(""String_Node_Str"",systemCharset.displayName());
      }
    }
    if (additionalParams != null && !""String_Node_Str"".equals(additionalParams) && dbType.toUpperCase().contains(""String_Node_Str"")) {
      additionalParams=additionalParams.replaceAll(""String_Node_Str"",""String_Node_Str"");
      info.load(new java.io.ByteArrayInputStream(additionalParams.getBytes()));
      connection=wapperDriver.connect(url,info);
    }
 else {
      url=ConnectionUtils.addShutDownForHSQLUrl(url,additionalParams);
      if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
        ExtractMetaDataUtils.getInstance().setDriverCache(wapperDriver);
      }
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType)) {
        Thread.currentThread().setContextClassLoader(loader);
      }
      connection=wapperDriver.connect(url,info);
    }
    list.add(connection);
    list.add(wapperDriver);
    return list;
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.9617065920615492
126866,"public boolean getEnabledState(){
  return super.getEnabledState() && this.enableStateHandler.getEnabledState();
}","@Override public boolean getEnabledState(){
  return super.getEnabledState() && this.enableStateHandler.getEnabledState();
}",0.957983193277311
126867,"protected Command getCommandToExecute(){
  AbstractExtendedTableViewer extendedTableViewer=(AbstractExtendedTableViewer)extendedControlViewer;
  TableViewer tableViewer=extendedTableViewer.getTableViewerCreator().getTableViewer();
  ISelection selection=tableViewer.getSelection();
  StructuredSelection structuredSelection=(StructuredSelection)selection;
  Object[] objects=structuredSelection.toArray();
  colNum=getExtendedTableViewer().getTableViewerCreator().getTable().getColumnCount();
  return new ExtendedTableCopyCommand(Arrays.asList(objects));
}","@Override protected Command getCommandToExecute(){
  AbstractExtendedTableViewer extendedTableViewer=(AbstractExtendedTableViewer)extendedControlViewer;
  TableViewer tableViewer=extendedTableViewer.getTableViewerCreator().getTableViewer();
  ISelection selection=tableViewer.getSelection();
  StructuredSelection structuredSelection=(StructuredSelection)selection;
  Object[] objects=structuredSelection.toArray();
  return new ExtendedTableCopyCommand(Arrays.asList(objects));
}",0.9064609450337512
126868,"public boolean getEnabledState(){
  Object data=SimpleClipboard.getInstance().getData();
  boolean flag=true;
  int a=CopyPushButtonForExtendedTable.colNum;
  int colNum=getExtendedTableViewer().getTableViewerCreator().getTable().getColumnCount();
  if (data != null) {
    if (colNum == a) {
      flag=true;
    }
 else {
      flag=false;
    }
  }
  return super.getEnabledState() && data != null && data instanceof List && !getExtendedControlViewer().isReadOnly() && flag;
}","@Override public boolean getEnabledState(){
  Object data=SimpleClipboard.getInstance().getData();
  return super.getEnabledState() && data != null && data instanceof List && !getExtendedControlViewer().isReadOnly();
}",0.3558106169296987
126869,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      String tempVlaue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(tempVlaue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  return paramValue;
}",0.959771754636234
126870,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      String tempVlaue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(tempVlaue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  return paramValue;
}",0.959771754636234
126871,"/** 
 * test TDQ-6569, it should be empty String even dbMetadata.getDatabaseProductName()/dbMetadata.getDatabaseProductName() is null .
 * @throws Exception
 */
@Test public void testfillUIConnParams_DB2ZOS() throws Exception {
  java.sql.Connection sqlConnection=mock(java.sql.Connection.class);
  IMetadataConnection metadataBean=mock(IMetadataConnection.class);
  DatabaseConnection connection=mock(DatabaseConnection.class);
  EList<TaggedValue> taggedValues=new BasicEList<TaggedValue>();
  when(connection.getTaggedValue()).thenReturn(taggedValues);
  when(connection.getDatabaseType()).thenReturn(""String_Node_Str"");
  when(connection.getDriverClass()).thenReturn(EDatabase4DriverClassName.IBMDB2ZOS.getDriverClass());
  when(connection.isContextMode()).thenReturn(Boolean.FALSE);
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
  rc.setOk(true);
  PowerMockito.mockStatic(MetadataConnectionUtils.class);
  when(MetadataConnectionUtils.checkConnection(metadataBean)).thenReturn(rc);
  when(MetadataConnectionUtils.isDerbyRelatedDb(anyString(),anyString())).thenReturn(false);
  DatabaseMetaData dbMetadata=mock(DatabaseMetaData.class);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  when(extract.getDatabaseMetaData(sqlConnection,connection,false)).thenReturn(dbMetadata);
  when(extract.getDatabaseMetaData(null,connection,false)).thenReturn(dbMetadata);
  PowerMockito.mockStatic(ConnectionUtils.class);
  ReturnCode ret=new ReturnCode();
  ret.setOk(true);
  when(ConnectionUtils.closeConnection(sqlConnection)).thenReturn(ret);
  DBConnectionFillerImpl dBConnectionFillerImp_mock=PowerMockito.spy(dBConnectionFillerImpl);
  PowerMockito.doNothing().when(dBConnectionFillerImp_mock,""String_Node_Str"",metadataBean,connection);
  dBConnectionFillerImp_mock.fillUIConnParams(metadataBean,connection);
  String producetName=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,connection);
  String version=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_VERSION,connection);
  assertNotNull(producetName);
  assertNotNull(version);
  assertEquals(producetName,PluginConstant.EMPTY_STRING);
  assertEquals(version,PluginConstant.EMPTY_STRING);
}","/** 
 * test TDQ-6569, it should be empty String even dbMetadata.getDatabaseProductName()/dbMetadata.getDatabaseProductName() is null .
 * @throws Exception
 */
@Test public void testfillUIConnParams_DB2ZOS() throws Exception {
  java.sql.Connection sqlConnection=mock(java.sql.Connection.class);
  IMetadataConnection metadataBean=mock(IMetadataConnection.class);
  DatabaseConnection connection=mock(DatabaseConnection.class);
  EList<TaggedValue> taggedValues=new BasicEList<TaggedValue>();
  when(connection.getTaggedValue()).thenReturn(taggedValues);
  when(connection.getDatabaseType()).thenReturn(""String_Node_Str"");
  when(connection.getDriverClass()).thenReturn(EDatabase4DriverClassName.IBMDB2ZOS.getDriverClass());
  when(connection.isContextMode()).thenReturn(Boolean.FALSE);
  TypedReturnCode<java.sql.Connection> rc=new TypedReturnCode<java.sql.Connection>();
  rc.setOk(true);
  rc.setObject(sqlConnection);
  PowerMockito.mockStatic(MetadataConnectionUtils.class);
  when(MetadataConnectionUtils.checkConnection(metadataBean)).thenReturn(rc);
  when(MetadataConnectionUtils.createConnection(metadataBean)).thenReturn(rc);
  when(MetadataConnectionUtils.createConnection(metadataBean,true)).thenReturn(rc);
  when(MetadataConnectionUtils.createConnection(metadataBean,false)).thenReturn(rc);
  when(MetadataConnectionUtils.isDerbyRelatedDb(anyString(),anyString())).thenReturn(false);
  DatabaseMetaData dbMetadata=mock(DatabaseMetaData.class);
  when(dbMetadata.getDatabaseProductName()).thenReturn(null);
  when(dbMetadata.getDatabaseProductVersion()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  when(extract.getDatabaseMetaData(sqlConnection,connection,false)).thenReturn(dbMetadata);
  when(extract.getDatabaseMetaData(null,connection,false)).thenReturn(dbMetadata);
  PowerMockito.mockStatic(ConnectionUtils.class);
  ReturnCode ret=new ReturnCode();
  ret.setOk(true);
  when(ConnectionUtils.closeConnection(sqlConnection)).thenReturn(ret);
  DBConnectionFillerImpl dBConnectionFillerImp_mock=PowerMockito.spy(dBConnectionFillerImpl);
  PowerMockito.doNothing().when(dBConnectionFillerImp_mock,""String_Node_Str"",metadataBean,connection);
  dBConnectionFillerImp_mock.fillUIConnParams(metadataBean,connection);
  String producetName=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,connection);
  String version=TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_VERSION,connection);
  assertNotNull(producetName);
  assertNotNull(version);
  assertEquals(producetName,PluginConstant.EMPTY_STRING);
  assertEquals(version,PluginConstant.EMPTY_STRING);
}",0.9450132726583238
126872,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getColumns(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.ColumnSet,java.lang.String,boolean)}.
 * @throws SQLException
 */
@Test public void testGetColumns(){
  ColumnSet columnSet=RelationalPackage.eINSTANCE.getRelationalFactory().createTdTable();
  TdColumn column1=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column1.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column1,columnSet);
  TdColumn column2=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column2.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column2,columnSet);
  String connFailedMessage=""String_Node_Str"";
  try {
    List<TdColumn> columns=DqRepositoryViewService.getColumns(null,columnSet,null,false);
    assertEquals(2,columns.size());
    DatabaseConnection dbConn=createDatabaseConn();
    TypedReturnCode<java.sql.Connection> retCode=new TypedReturnCode<java.sql.Connection>();
    retCode.setOk(Boolean.FALSE);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.checkConnection(dbConn)).thenReturn(retCode);
    retCode.setMessage(connFailedMessage);
    DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    List<TdColumn> columnsExpected=new ArrayList<TdColumn>(3);
    java.sql.Connection sqlConn=null;
    DatabaseMetaData databaseMetaData=mock(DatabaseMetaData.class);
    when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn)).thenReturn(databaseMetaData);
    MetadataFillFactory metadataFactory=mock(MetadataFillFactory.class);
    when(metadataFactory.fillColumns(columnSet,databaseMetaData,null,null)).thenReturn(columnsExpected);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    when(MetadataFillFactory.getDBInstance()).thenReturn(metadataFactory);
    List<TdColumn> columnsActual=DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    assertEquals(columnsExpected.size(),columnsActual.size());
  }
 catch (  Exception e) {
    assertEquals(connFailedMessage,e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getColumns(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.ColumnSet,java.lang.String,boolean)}.
 * @throws SQLException
 */
@Test public void testGetColumns(){
  ColumnSet columnSet=RelationalPackage.eINSTANCE.getRelationalFactory().createTdTable();
  TdColumn column1=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column1.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column1,columnSet);
  TdColumn column2=RelationalPackage.eINSTANCE.getRelationalFactory().createTdColumn();
  column2.setName(""String_Node_Str"");
  ColumnSetHelper.addColumn(column2,columnSet);
  String connFailedMessage=""String_Node_Str"";
  try {
    List<TdColumn> columns=DqRepositoryViewService.getColumns(null,columnSet,null,false);
    assertEquals(2,columns.size());
    DatabaseConnection dbConn=createDatabaseConn();
    TypedReturnCode<java.sql.Connection> retCode=new TypedReturnCode<java.sql.Connection>();
    retCode.setOk(Boolean.FALSE);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    when(MetadataConnectionUtils.createConnection(dbConn)).thenReturn(retCode);
    retCode.setMessage(connFailedMessage);
    DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    List<TdColumn> columnsExpected=new ArrayList<TdColumn>(3);
    java.sql.Connection sqlConn=null;
    DatabaseMetaData databaseMetaData=mock(DatabaseMetaData.class);
    when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn)).thenReturn(databaseMetaData);
    MetadataFillFactory metadataFactory=mock(MetadataFillFactory.class);
    when(metadataFactory.fillColumns(columnSet,databaseMetaData,null,null)).thenReturn(columnsExpected);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    when(MetadataFillFactory.getDBInstance()).thenReturn(metadataFactory);
    List<TdColumn> columnsActual=DqRepositoryViewService.getColumns(dbConn,columnSet,null,true);
    assertEquals(columnsExpected.size(),columnsActual.size());
  }
 catch (  Exception e) {
    assertEquals(connFailedMessage,e.getMessage());
  }
}",0.997946611909651
126873,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#hasChildren(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isSchemaHasChildren(dataProvider,schema,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}",0.9523809523809524
126874,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getTables(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(catalog,Mockito.times(2)).getName();
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getTables(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(catalog,Mockito.times(2)).getName();
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9987532899293532
126875,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getViews(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionCatalogStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String catalogName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(catalog)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getViews(catalog)).thenReturn(retableList);
    resultList1=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,catalog,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(catalog),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,catalog,sqlConn,metaData,metadataMock);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.998703356865005
126876,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getTables(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getTables(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetTablesConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdTable> tableList=new ArrayList<TdTable>();
  List<TdTable> retableList=new ArrayList<TdTable>();
  List<TdTable> resultList1=null;
  List<TdTable> resultList2=null;
  List<TdTable> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdTable tableMock=Mockito.mock(TdTable.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getTables(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any())).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getTables(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getTables(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillTables((orgomg.cwm.objectmodel.core.Package)Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),(String[])Mockito.any());
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9987789987789988
126877,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsView(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsView(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#hasChildren(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsViewConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isCatalogHasChildren(dataProvider,catalog,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.VIEW_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}",0.9510346240524484
126878,"@Test public void testIsContainsTableConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,schema,tablePattern);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}","@Test public void testIsContainsTableConnectionSchemaString(){
  String schemaName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Schema schema=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    schema=Mockito.mock(Schema.class);
    Mockito.when(schema.getName()).thenReturn(schemaName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(schema)).thenReturn(schema);
    Mockito.when(PackageHelper.getParentPackage(schema)).thenReturn(null);
    containsTable=DqRepositoryViewService.isSchemaHasChildren(dataProvider,schema,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(metaData).getTables(null,schemaName,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(schema).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,schema);
  assertTrue(containsTable);
}",0.9520441988950276
126879,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsTable(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsTableConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isContainsTable(dataProvider,catalog,tablePattern);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#isContainsTable(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Catalog,java.lang.String)}.
 */
@Test public void testIsContainsTableConnectionCatalogString(){
  String catalogName=""String_Node_Str"";
  String tablePattern=null;
  boolean containsTable=false;
  Connection dataProvider=null;
  DatabaseMetaData metaData=null;
  java.sql.Connection sqlConn=null;
  Catalog catalog=null;
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Mockito.when(tables.next()).thenReturn(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    Mockito.when(metaData.getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES)).thenReturn(tables);
    dataProvider=Mockito.mock(DatabaseConnection.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    Mockito.when(sqlConn.getMetaData()).thenReturn(metaData);
    Mockito.when(sqlConn.isClosed()).thenReturn(true);
    catalog=Mockito.mock(Catalog.class);
    Mockito.when(catalog.getName()).thenReturn(catalogName);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getCatalogOrSchema(catalog)).thenReturn(catalog);
    containsTable=DqRepositoryViewService.isCatalogHasChildren(dataProvider,catalog,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(metaData).getTables(catalogName,null,tablePattern,DqRepositoryViewService.TABLE_TYPES);
    Mockito.verify(tables).next();
    Mockito.verify(sqlConn).isClosed();
    Mockito.verify(catalog).getName();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  Mockito.verifyZeroInteractions(metaData,tables,dataProvider,sqlConn,catalog);
  assertTrue(containsTable);
}",0.9558643236616264
126880,"/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.checkConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getViews(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.builder.database.DqRepositoryViewService#getViews(org.talend.core.model.metadata.builder.connection.Connection,orgomg.cwm.resource.relational.Schema,java.lang.String,boolean)}.
 */
@Test public void testGetViewsConnectionSchemaStringBoolean(){
  java.sql.Connection sqlConn=null;
  DatabaseMetaData metaData=null;
  String schemaName=""String_Node_Str"";
  List<TdView> tableList=new ArrayList<TdView>();
  List<TdView> retableList=new ArrayList<TdView>();
  List<TdView> resultList1=null;
  List<TdView> resultList2=null;
  List<TdView> resultList3=null;
  String tablePattern=null;
  boolean loadFromDB=true;
  TdView tableMock=Mockito.mock(TdView.class);
  retableList.add(tableMock);
  ResultSet tables=Mockito.mock(ResultSet.class);
  try {
    Connection dataProvider=Mockito.mock(DatabaseConnection.class);
    Catalog catalog=Mockito.mock(Catalog.class);
    Schema schema=Mockito.mock(Schema.class);
    TypedReturnCode<java.sql.Connection> reConn=new TypedReturnCode<java.sql.Connection>();
    sqlConn=Mockito.mock(java.sql.Connection.class);
    reConn.setOk(true);
    reConn.setObject(sqlConn);
    ReturnCode rc=new ReturnCode(true);
    metaData=Mockito.mock(DatabaseMetaData.class);
    PowerMockito.mockStatic(MetadataConnectionUtils.class);
    Mockito.when(MetadataConnectionUtils.createConnection((DatabaseConnection)dataProvider)).thenReturn(reConn);
    PowerMockito.mockStatic(ExtractMetaDataUtils.class);
    ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
    Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
    Mockito.when(extract.getDatabaseMetaData(sqlConn,(DatabaseConnection)dataProvider,false)).thenReturn(metaData);
    PowerMockito.mockStatic(PackageHelper.class);
    Mockito.when(PackageHelper.getViews(schema)).thenReturn(tableList);
    MetadataFillFactory metadataMock=Mockito.mock(MetadataFillFactory.class);
    Mockito.when(metadataMock.fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES))).thenReturn(retableList).thenReturn(retableList);
    PowerMockito.mockStatic(MetadataFillFactory.class);
    Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(metadataMock);
    PowerMockito.mockStatic(ConnectionUtils.class);
    Mockito.when(ConnectionUtils.closeConnection(sqlConn)).thenReturn(rc);
    PowerMockito.mockStatic(SchemaHelper.class);
    Mockito.when(SchemaHelper.getViews(schema)).thenReturn(retableList);
    PowerMockito.mockStatic(CatalogHelper.class);
    Mockito.when(CatalogHelper.getParentCatalog(schema)).thenReturn(catalog);
    resultList1=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    tableList.add(tableMock);
    resultList2=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    loadFromDB=false;
    resultList3=DqRepositoryViewService.getViews(dataProvider,schema,tablePattern,loadFromDB);
    Mockito.verify(metadataMock,Mockito.times(2)).fillViews(Mockito.eq(schema),Mockito.eq(metaData),Mockito.anyList(),Mockito.eq(tablePattern),Mockito.eq(DqRepositoryViewService.VIEW_TYPES));
    Mockito.verify(metadataMock).setLinked(true);
    Mockito.verify(metadataMock).setLinked(false);
    Mockito.verifyZeroInteractions(tableMock,tables,dataProvider,schema,sqlConn,metaData,metadataMock,catalog);
    assertTrue(resultList1.size() == 1);
    assertTrue(resultList2.size() == 1);
    assertTrue(resultList3.size() == 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}",0.9987635664239594
126881,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getUniqueName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getUniqueName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}",0.9932810750279956
126882,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  try {
    temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
    sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
      temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
    }
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
      temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
    }
    String dbType=iMetadataConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    MetadataConnectionUtils.closeDerbyDriver();
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  try {
    temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
    sqlConn=MetadataConnectionUtils.createConnection(iMetadataConnection).getObject();
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
      temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
    }
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
      temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
    }
    String dbType=iMetadataConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    MetadataConnectionUtils.closeDerbyDriver();
  }
}",0.9976082912569758
126883,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else                     if (""String_Node_Str"".equals(type.getValue())) {
                      paramValue=type.getValue();
                    }
 else {
                      paramValue=tempVlaue;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.7764390896921017
126884,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean isHive2=HiveConnectionManager.getInstance().isHive2(metaConnection);
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !isHive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          if (isHive2) {
            uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean isHive2=HiveConnectionManager.getInstance().isHive2(metaConnection);
    if (schemas != null && !ConnectionUtils.isOdbcHyperFileSQL(dbJDBCMetadata)) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !isHive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          if (isHive2) {
            uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9938800489596084
126885,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else                     if (""String_Node_Str"".equals(type.getValue())) {
                      paramValue=type.getValue();
                    }
 else {
                      paramValue=tempVlaue;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.7764390896921017
126886,"protected void createSystemSQLPatterns() throws PersistenceException {
  ERepositoryObjectType sqlpatternsType=ERepositoryObjectType.SQLPATTERNS;
  if (sqlpatternsType == null) {
    return;
  }
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemSQLPatterns();
  List<IRepositoryViewObject> repositoryObjects=getAll(project,sqlpatternsType,false,false);
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    Path relativePath=new Path(url.getFile());
    String fileName=relativePath.segment(relativePath.segmentCount() - 1);
    String categoryName=relativePath.segment(relativePath.segmentCount() - 2);
    tmp=fileName.split(""String_Node_Str"");
    String sqlPatternLabel=tmp[0];
    SQLPatternItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(sqlPatternLabel) && object.getProperty().getItem() instanceof SQLPatternItem && ((SQLPatternItem)object.getProperty().getItem()).getEltName().equals(categoryName)) {
        existingItem=(SQLPatternItem)object.getProperty().getItem();
        break;
      }
    }
    IPath categoryPath=new Path(categoryName);
    IPath systemPath=categoryPath.append(RepositoryConstants.SYSTEM_DIRECTORY);
    IPath userPath=categoryPath.append(RepositoryConstants.USER_DEFINED);
    IPath parentPath=new Path(ERepositoryObjectType.getFolderName(sqlpatternsType));
    if (folderHelper.getFolder(parentPath.append(categoryPath)) == null) {
      createFolder(getRepositoryContext().getProject(),sqlpatternsType,new Path(""String_Node_Str""),categoryPath.lastSegment());
    }
    FolderItem systemFolder=folderHelper.getFolder(parentPath.append(systemPath));
    if (systemFolder == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,systemPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (folderHelper.getFolder(parentPath.append(userPath)) == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,userPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (existingItem == null) {
      createSQLPattern(url,sqlPatternLabel,categoryName);
    }
 else {
      updateSQLPattern(url,existingItem);
      existingItem.setParent(systemFolder);
    }
  }
}","protected void createSystemSQLPatterns() throws PersistenceException {
  ERepositoryObjectType sqlpatternsType=ERepositoryObjectType.SQLPATTERNS;
  if (sqlpatternsType == null) {
    return;
  }
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemSQLPatterns();
  List<IRepositoryViewObject> repositoryObjects=getAll(project,sqlpatternsType,false,false);
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    Path relativePath=new Path(url.getFile());
    String fileName=relativePath.segment(relativePath.segmentCount() - 1);
    String categoryName=relativePath.segment(relativePath.segmentCount() - 2);
    tmp=fileName.split(""String_Node_Str"");
    String sqlPatternLabel=tmp[0];
    SQLPatternItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(sqlPatternLabel) && object.getProperty().getItem() instanceof SQLPatternItem && ((SQLPatternItem)object.getProperty().getItem()).getEltName().equals(categoryName)) {
        existingItem=(SQLPatternItem)object.getProperty().getItem();
        break;
      }
    }
    IPath categoryPath=new Path(categoryName);
    IPath systemPath=categoryPath.append(RepositoryConstants.SYSTEM_DIRECTORY);
    IPath userPath=categoryPath.append(RepositoryConstants.USER_DEFINED);
    IPath parentPath=new Path(ERepositoryObjectType.getFolderName(sqlpatternsType));
    if (folderHelper.getFolder(parentPath.append(categoryPath)) == null) {
      createFolder(getRepositoryContext().getProject(),sqlpatternsType,new Path(""String_Node_Str""),categoryPath.lastSegment());
    }
    FolderItem systemFolder=folderHelper.getFolder(parentPath.append(systemPath));
    if (systemFolder == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,systemPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.FOLDER_LITERAL);
    }
    if (folderHelper.getFolder(parentPath.append(userPath)) == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,userPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.FOLDER_LITERAL);
    }
    if (existingItem == null) {
      createSQLPattern(url,sqlPatternLabel,categoryName);
    }
 else {
      updateSQLPattern(url,existingItem);
      existingItem.setParent(systemFolder);
    }
  }
}",0.9975903614457832
126887,"private String getFolderPath(FolderItem folder,String path){
  if (FolderType.FOLDER_LITERAL.equals(folder.getType())) {
    final EObject parent=folder.getParent();
    if (parent instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)parent;
      if (parentFolder.getParent() instanceof Project) {
        if (path == null) {
          path=""String_Node_Str"";
        }
        return path;
      }
      if (path == null || ""String_Node_Str"".equals(path)) {
        path=parentFolder.getProperty().getLabel();
      }
 else {
        path=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + path;
      }
      return getFolderPath(parentFolder,path);
    }
    return path;
  }
 else {
    return path;
  }
}","private String getFolderPath(FolderItem folder,String path){
  if (FolderType.FOLDER_LITERAL.equals(folder.getType())) {
    final EObject parent=folder.getParent();
    if (parent instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)parent;
      if (FolderType.SYSTEM_FOLDER_LITERAL.equals(parentFolder.getType())) {
        if (path == null) {
          path=""String_Node_Str"";
        }
        return path;
      }
      if (path == null || ""String_Node_Str"".equals(path)) {
        path=parentFolder.getProperty().getLabel();
      }
 else {
        path=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + path;
      }
      return getFolderPath(parentFolder,path);
    }
    return path;
  }
 else {
    return path;
  }
}",0.930013458950202
126888,"protected void createSystemSQLPatterns() throws PersistenceException {
  ERepositoryObjectType sqlpatternsType=ERepositoryObjectType.SQLPATTERNS;
  if (sqlpatternsType == null) {
    return;
  }
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemSQLPatterns();
  List<IRepositoryViewObject> repositoryObjects=getAll(project,sqlpatternsType,false,false);
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    Path relativePath=new Path(url.getFile());
    String fileName=relativePath.segment(relativePath.segmentCount() - 1);
    String categoryName=relativePath.segment(relativePath.segmentCount() - 2);
    tmp=fileName.split(""String_Node_Str"");
    String sqlPatternLabel=tmp[0];
    SQLPatternItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(sqlPatternLabel) && object.getProperty().getItem() instanceof SQLPatternItem && ((SQLPatternItem)object.getProperty().getItem()).getEltName().equals(categoryName)) {
        existingItem=(SQLPatternItem)object.getProperty().getItem();
        break;
      }
    }
    IPath categoryPath=new Path(categoryName);
    IPath systemPath=categoryPath.append(RepositoryConstants.SYSTEM_DIRECTORY);
    IPath userPath=categoryPath.append(RepositoryConstants.USER_DEFINED);
    IPath parentPath=new Path(ERepositoryObjectType.getFolderName(sqlpatternsType));
    if (folderHelper.getFolder(parentPath.append(categoryPath)) == null) {
      createFolder(getRepositoryContext().getProject(),sqlpatternsType,new Path(""String_Node_Str""),categoryPath.lastSegment());
    }
    FolderItem systemFolder=folderHelper.getFolder(parentPath.append(systemPath));
    if (systemFolder == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,systemPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (folderHelper.getFolder(parentPath.append(userPath)) == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,userPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.SYSTEM_FOLDER_LITERAL);
    }
    if (existingItem == null) {
      createSQLPattern(url,sqlPatternLabel,categoryName);
    }
 else {
      updateSQLPattern(url,existingItem);
      existingItem.setParent(systemFolder);
    }
  }
}","protected void createSystemSQLPatterns() throws PersistenceException {
  ERepositoryObjectType sqlpatternsType=ERepositoryObjectType.SQLPATTERNS;
  if (sqlpatternsType == null) {
    return;
  }
  ILibrariesService service=null;
  if (!GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
    return;
  }
  service=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  Project project=getRepositoryContext().getProject();
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  List<URL> routines=service.getSystemSQLPatterns();
  List<IRepositoryViewObject> repositoryObjects=getAll(project,sqlpatternsType,false,false);
  for (  URL url : routines) {
    String[] fragments=url.toString().split(""String_Node_Str"");
    String label=fragments[fragments.length - 1];
    String[] tmp=label.split(""String_Node_Str"");
    Path relativePath=new Path(url.getFile());
    String fileName=relativePath.segment(relativePath.segmentCount() - 1);
    String categoryName=relativePath.segment(relativePath.segmentCount() - 2);
    tmp=fileName.split(""String_Node_Str"");
    String sqlPatternLabel=tmp[0];
    SQLPatternItem existingItem=null;
    for (    IRepositoryViewObject object : repositoryObjects) {
      if (object.getLabel().equals(sqlPatternLabel) && object.getProperty().getItem() instanceof SQLPatternItem && ((SQLPatternItem)object.getProperty().getItem()).getEltName().equals(categoryName)) {
        existingItem=(SQLPatternItem)object.getProperty().getItem();
        break;
      }
    }
    IPath categoryPath=new Path(categoryName);
    IPath systemPath=categoryPath.append(RepositoryConstants.SYSTEM_DIRECTORY);
    IPath userPath=categoryPath.append(RepositoryConstants.USER_DEFINED);
    IPath parentPath=new Path(ERepositoryObjectType.getFolderName(sqlpatternsType));
    if (folderHelper.getFolder(parentPath.append(categoryPath)) == null) {
      createFolder(getRepositoryContext().getProject(),sqlpatternsType,new Path(""String_Node_Str""),categoryPath.lastSegment());
    }
    FolderItem systemFolder=folderHelper.getFolder(parentPath.append(systemPath));
    if (systemFolder == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,systemPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.FOLDER_LITERAL);
    }
    if (folderHelper.getFolder(parentPath.append(userPath)) == null) {
      Folder folder=createFolder(getRepositoryContext().getProject(),sqlpatternsType,categoryPath,userPath.lastSegment());
      ((FolderItem)folder.getProperty().getItem()).setType(FolderType.FOLDER_LITERAL);
    }
    if (existingItem == null) {
      createSQLPattern(url,sqlPatternLabel,categoryName);
    }
 else {
      updateSQLPattern(url,existingItem);
      existingItem.setParent(systemFolder);
    }
  }
}",0.9975903614457832
126889,"private String getFolderPath(FolderItem folder,String path){
  if (FolderType.FOLDER_LITERAL.equals(folder.getType())) {
    final EObject parent=folder.getParent();
    if (parent instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)parent;
      if (parentFolder.getParent() instanceof Project) {
        if (path == null) {
          path=""String_Node_Str"";
        }
        return path;
      }
      if (path == null || ""String_Node_Str"".equals(path)) {
        path=parentFolder.getProperty().getLabel();
      }
 else {
        path=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + path;
      }
      return getFolderPath(parentFolder,path);
    }
    return path;
  }
 else {
    return path;
  }
}","private String getFolderPath(FolderItem folder,String path){
  if (FolderType.FOLDER_LITERAL.equals(folder.getType())) {
    if (folder.getProperty().getLabel().equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
    }
    final EObject parent=folder.getParent();
    if (parent instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)parent;
      if (FolderType.SYSTEM_FOLDER_LITERAL.equals(parentFolder.getType())) {
        if (path == null) {
          path=""String_Node_Str"";
        }
        return path;
      }
      if (path == null || ""String_Node_Str"".equals(path)) {
        path=parentFolder.getProperty().getLabel();
      }
 else {
        path=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + path;
      }
      return getFolderPath(parentFolder,path);
    }
    return path;
  }
 else {
    return path;
  }
}",0.8605230386052304
126890,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(dbVersion))) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (!checkFileCRCCode(new File(getJavaLibPath() + path.lastSegment()),new File(jar))) {
            String librariesPath=getLibrariesPath(ECodeLanguage.JAVA);
            File existJar=new File(librariesPath + File.separator + path.lastSegment());
            if (existJar.exists()) {
              existJar.delete();
              FilesUtils.copyFile(new File(jar),existJar);
            }
          }
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_6_1_X.getVersionValue().equals(dbVersion))) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (!checkFileCRCCode(new File(getJavaLibPath() + path.lastSegment()),new File(jar))) {
            String librariesPath=getLibrariesPath(ECodeLanguage.JAVA);
            File existJar=new File(librariesPath + File.separator + path.lastSegment());
            if (existJar.exists()) {
              existJar.delete();
              FilesUtils.copyFile(new File(jar),existJar);
            }
          }
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}",0.9951528709917972
126891,"private String getFolderPath(FolderItem folder,String path){
  if (FolderType.FOLDER_LITERAL.equals(folder.getType())) {
    if (folder.getProperty().getLabel().equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
    }
    final EObject parent=folder.getParent();
    if (parent instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)parent;
      if (FolderType.SYSTEM_FOLDER_LITERAL.equals(parentFolder.getType())) {
        if (path == null) {
          path=""String_Node_Str"";
        }
        return path;
      }
      if (path == null || ""String_Node_Str"".equals(path)) {
        path=parentFolder.getProperty().getLabel();
      }
 else {
        path=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + path;
      }
      return getFolderPath(parentFolder,path);
    }
    return path;
  }
 else {
    return path;
  }
}","private String getFolderPath(FolderItem folder,String path){
  if (FolderType.FOLDER_LITERAL.equals(folder.getType())) {
    final EObject parent=folder.getParent();
    if (parent instanceof FolderItem) {
      FolderItem parentFolder=(FolderItem)parent;
      if (FolderType.SYSTEM_FOLDER_LITERAL.equals(parentFolder.getType())) {
        if (path == null) {
          path=""String_Node_Str"";
        }
        return path;
      }
      if (path == null || ""String_Node_Str"".equals(path)) {
        path=parentFolder.getProperty().getLabel();
      }
 else {
        path=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + path;
      }
      return getFolderPath(parentFolder,path);
    }
    return path;
  }
 else {
    return path;
  }
}",0.92619926199262
126892,"public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean isHive2=HiveConnectionManager.getInstance().isHive2(metaConnection);
    if (schemas != null) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !isHive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          if (isHive2) {
            uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}","public List<Package> fillSchemas(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> schemaFilter){
  List<Schema> returnSchemas=new ArrayList<Schema>();
  if (dbJDBCMetadata == null || (dbConn != null && ConnectionHelper.getCatalogs(dbConn).size() > 0) || ConnectionUtils.isSybase(dbJDBCMetadata)) {
    return null;
  }
  ResultSet schemas=null;
  if (dbConn != null && EDatabaseTypeName.TERADATA.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
    if (!dbConn.isContextMode()) {
      String sid=((DatabaseConnection)dbConn).getSID();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
 else {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      String sid=iMetadataCon.getDatabase();
      if (sid != null && sid.length() > 0) {
        schemaFilter.add(sid);
      }
    }
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.IBMDB2.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String schemaTemp=iMetadataCon.getSchema();
        if (""String_Node_Str"".equals(schemaTemp)) {
          schemaFilter.clear();
        }
      }
    }
  }
  try {
    if (dbConn != null && EDatabaseTypeName.ACCESS.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      return null;
    }
    schemas=dbJDBCMetadata.getSchemas();
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"");
  }
  boolean hasSchema=false;
  try {
    boolean isHive2=HiveConnectionManager.getInstance().isHive2(metaConnection);
    if (schemas != null && !ConnectionUtils.isOdbcHyperFileSQL(dbJDBCMetadata)) {
      String schemaName=null;
      while (schemas.next()) {
        if (!ConnectionUtils.isOdbcTeradata(dbJDBCMetadata) && !isHive2) {
          schemaName=schemas.getString(MetaDataConstants.TABLE_SCHEM.name());
          if (schemaName == null) {
            schemaName=schemas.getString(DatabaseConstant.ODBC_ORACLE_SCHEMA_NAME);
          }
          if (schemaName == null) {
            schemaName=schemas.getString(1);
          }
        }
 else {
          schemaName=schemas.getString(1);
        }
        hasSchema=true;
        String uiSchemaOnConnWizard=null;
        if (dbConn != null) {
          uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getUiSchema();
          if (isHive2) {
            uiSchemaOnConnWizard=((DatabaseConnection)dbConn).getSID();
          }
        }
        if ((!isEmptyString(uiSchemaOnConnWizard) || !isNullUiSchema(dbConn)) && dbConn != null) {
          Schema schema=SchemaHelper.createSchema(TalendCWMService.getReadableName(dbConn,uiSchemaOnConnWizard));
          returnSchemas.add(schema);
          break;
        }
 else         if (isCreateElement(schemaFilter,schemaName)) {
          Schema schema=SchemaHelper.createSchema(schemaName);
          returnSchemas.add(schema);
        }
      }
      schemas.close();
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (!hasSchema) {
    Schema schema=SchemaHelper.createSchema(""String_Node_Str"");
    returnSchemas.add(schema);
  }
  Set<MetadataTable> tableSet=new HashSet<MetadataTable>();
  if (dbConn != null) {
    tableSet.addAll(ConnectionHelper.getTables(dbConn));
  }
  List<Schema> oldSchemas=new ArrayList<Schema>();
  for (  MetadataTable table : tableSet) {
    EObject eContainer=table.eContainer();
    if (eContainer != null && eContainer instanceof Schema && !oldSchemas.contains(eContainer)) {
      oldSchemas.add((Schema)eContainer);
    }
  }
  if (isLinked() && !returnSchemas.isEmpty()) {
    ConnectionHelper.addSchemas(returnSchemas,dbConn);
  }
  for (  Schema schema : oldSchemas) {
    List<Schema> list=new ArrayList<Schema>();
    String name=schema.getName();
    Schema s=(Schema)ConnectionHelper.getPackage(name,dbConn,Schema.class);
    if (s != null) {
      list.add(s);
      ConnectionHelper.removeSchemas(list,dbConn);
      ConnectionHelper.addSchema(schema,dbConn);
    }
 else {
      ConnectionHelper.addSchema(schema,dbConn);
    }
  }
  return ListUtils.castList(Package.class,returnSchemas);
}",0.9938800489596084
126893,"public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else                     if (""String_Node_Str"".equals(type.getValue())) {
                      paramValue=type.getValue();
                    }
 else {
                      paramValue=tempVlaue;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}","public static String getContextTrueValue(DatabaseConnection conn,String paramValue){
  String trueSchemaName=null;
  String tempVlaue=paramValue;
  if (conn.isContextMode()) {
    if (conn.getContextId() != null && !""String_Node_Str"".equals(conn.getContextId())) {
      String contextID=conn.getContextId();
      paramValue=ContextParameterUtils.getVariableFromCode(paramValue);
      IRepositoryViewObject repObj;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(contextID);
        if (repObj != null && repObj.getProperty() != null && repObj.getProperty().getItem() instanceof ContextItem) {
          ContextItem contextItem=(ContextItem)repObj.getProperty().getItem();
          List list=contextItem.getContext();
          Iterator it=list.iterator();
          while (it.hasNext()) {
            Object o=it.next();
            if (o instanceof ContextType) {
              ContextType contextType=(ContextType)o;
              List contextList=contextType.getContextParameter();
              for (int i=0; i < contextList.size(); i++) {
                Object obj=contextList.get(i);
                if (obj instanceof ContextParameterType) {
                  ContextParameterType type=(ContextParameterType)obj;
                  if (type.getName().equals(paramValue)) {
                    if (type.getValue() == null) {
                      paramValue=""String_Node_Str"";
                    }
 else {
                      paramValue=type.getValue();
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
  trueSchemaName=paramValue;
  return trueSchemaName;
}",0.7764390896921017
126894,"/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(dbVersion))) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (!checkFileCRCCode(new File(getJavaLibPath() + path.lastSegment()),new File(jar))) {
            String librariesPath=getLibrariesPath(ECodeLanguage.JAVA);
            File existJar=new File(librariesPath + File.separator + path.lastSegment());
            if (existJar.exists()) {
              existJar.delete();
              FilesUtils.copyFile(new File(jar),existJar);
            }
          }
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}","/** 
 * DOC xye Comment method ""connect"".
 * @param dbType
 * @param url
 * @param username
 * @param pwd
 * @param driverClassName
 * @param driverJarPath
 * @param dbVersionString
 * @return
 * @throws Exception
 */
public List connect(String dbType,String url,String username,String pwd,final String driverClassNameArg,final String driverJarPathArg,String dbVersion,String additionalParams) throws Exception {
  Connection connection=null;
  DriverShim wapperDriver=null;
  List conList=new ArrayList();
  String driverClassName=driverClassNameArg;
  List<String> jarPathList=new ArrayList<String>();
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  if ((driverJarPathArg == null || driverJarPathArg.equals(""String_Node_Str""))) {
    List<String> driverNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    if (driverNames != null) {
      librairesManagerService.retrieve(driverNames,getJavaLibPath(),new NullProgressMonitor());
      for (      String jar : driverNames) {
        jarPathList.add(getJavaLibPath() + jar);
      }
      driverClassName=getDriverClassByDbType(dbType);
      if (EDatabaseTypeName.VERTICA.getXmlName().equals(dbType) && (EDatabaseVersion4Drivers.VERTICA_6.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_5_1.getVersionValue().equals(dbVersion) || EDatabaseVersion4Drivers.VERTICA_6_1_X.getVersionValue().equals(dbVersion))) {
        driverClassName=EDatabase4DriverClassName.VERTICA2.getDriverClass();
      }
    }
  }
 else {
    Set<String> jarsAvailable=librairesManagerService.list(new NullProgressMonitor());
    if (driverJarPathArg.contains(""String_Node_Str"") || driverJarPathArg.startsWith(""String_Node_Str"")) {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        List<String> jarsToRetreive=new ArrayList<String>();
        for (        String jar : jars) {
          Path path=new Path(jar);
          if (!checkFileCRCCode(new File(getJavaLibPath() + path.lastSegment()),new File(jar))) {
            String librariesPath=getLibrariesPath(ECodeLanguage.JAVA);
            File existJar=new File(librariesPath + File.separator + path.lastSegment());
            if (existJar.exists()) {
              existJar.delete();
              FilesUtils.copyFile(new File(jar),existJar);
            }
          }
          if (jarsAvailable.contains(path.lastSegment())) {
            if (!new File(getJavaLibPath() + path.lastSegment()).exists()) {
              jarsToRetreive.add(path.lastSegment());
            }
            jarPathList.add(getJavaLibPath() + path.lastSegment());
          }
 else {
            jarsToRetreive.add(path.lastSegment());
            jarPathList.add(jar);
          }
        }
        librairesManagerService.retrieve(jarsToRetreive,getJavaLibPath(),new NullProgressMonitor());
      }
 else {
        Path path=new Path(driverJarPathArg);
        File driverFile=new File(driverJarPathArg);
        boolean isExist=driverFile.exists();
        if (!isExist) {
          jarPathList.add(""String_Node_Str"");
        }
 else {
          jarPathList.add(driverJarPathArg);
        }
      }
    }
 else {
      if (driverJarPathArg.contains(""String_Node_Str"")) {
        String jars[]=driverJarPathArg.split(""String_Node_Str"");
        librairesManagerService.retrieve(Arrays.asList(jars),getJavaLibPath(),new NullProgressMonitor());
        for (        String jar : jars) {
          jarPathList.add(getJavaLibPath() + jar);
        }
      }
 else {
        if (!new File(getJavaLibPath() + driverJarPathArg).exists()) {
          librairesManagerService.retrieve(driverJarPathArg,getJavaLibPath(),new NullProgressMonitor());
        }
        jarPathList.add(getJavaLibPath() + driverJarPathArg);
      }
    }
  }
  final String[] driverJarPath=jarPathList.toArray(new String[0]);
  if (driverClassName == null || driverClassName.equals(""String_Node_Str"")) {
    driverClassName=getDriverClassByDbType(dbType);
    if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName())) {
      checkAccessDbq(url);
    }
  }
  List list=new ArrayList();
  checkDBConnectionTimeout();
  if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.GENERAL_JDBC.getXmlName())) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else   if (dbType != null && dbType.equalsIgnoreCase(EDatabaseTypeName.MSSQL.getDisplayName()) && ""String_Node_Str"".equals(username)) {
    if (DRIVER_CACHE.containsKey(EDatabase4DriverClassName.MSSQL.getDriverClass())) {
      wapperDriver=DRIVER_CACHE.get(EDatabase4DriverClassName.MSSQL.getDriverClass());
      Properties info=new Properties();
      username=username != null ? username : ""String_Node_Str"";
      pwd=pwd != null ? pwd : ""String_Node_Str"";
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      connection=wapperDriver.connect(url,info);
    }
 else {
      JDBCDriverLoader loader=new JDBCDriverLoader();
      list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            connection=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
  }
 else   if (dbType != null && (isValidJarFile(driverJarPath) || dbType.equalsIgnoreCase(EDatabaseTypeName.GODBC.getXmlName()))) {
    JDBCDriverLoader loader=new JDBCDriverLoader();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbType) && ""String_Node_Str"".equalsIgnoreCase(dbVersion)) {
      loadJarRequiredByDriver(dbType,dbVersion);
    }
    list=loader.getConnection(driverJarPath,driverClassName,url,username,pwd,dbType,dbVersion,additionalParams);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
  }
 else {
    try {
      Class<?> klazz=Class.forName(driverClassName);
      Properties info=new Properties();
      info.put(""String_Node_Str"",username);
      info.put(""String_Node_Str"",pwd);
      if (dbType.equals(EDatabaseTypeName.ACCESS.getXmlName()) || dbType.equals(EDatabaseTypeName.GODBC.getXmlName())) {
        Charset systemCharset=CharsetToolkit.getInternalSystemCharset();
        if (systemCharset != null && systemCharset.displayName() != null) {
          info.put(""String_Node_Str"",systemCharset.displayName());
        }
      }
      connection=((Driver)klazz.newInstance()).connect(url,info);
    }
 catch (    ClassNotFoundException e) {
      String errorMessage=Messages.getString(""String_Node_Str"") + driverClassName;
      if (driverJarPath != null && driverJarPath.length > 0) {
        errorMessage=errorMessage + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
        for (        String jarName : driverJarPath) {
          errorMessage=errorMessage + ""String_Node_Str"" + new Path(jarName).lastSegment();
        }
      }
      throw new MissingDriverException(errorMessage);
    }
  }
  if (connection == null) {
    throw new Exception(Messages.getString(""String_Node_Str""));
  }
  conList.add(connection);
  if (wapperDriver != null) {
    conList.add(wapperDriver);
  }
  return conList;
}",0.9951528709917972
126895,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
  boolean inputModel=((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel();
  metadataNameText.setReadOnly(!inputModel);
}",0.785824345146379
126896,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
  boolean inputModel=((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel();
  metadataNameText.setReadOnly(!inputModel);
}",0.785824345146379
126897,"@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  try {
    if (sqlConnection == null || sqlConnection.isClosed()) {
      this.checkConnection(metadataBean);
    }
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}","@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  java.sql.Connection sqlConnection=null;
  try {
    sqlConnection=MetadataConnectionUtils.createConnection(metadataBean).getObject();
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}",0.9815651324624588
126898,"/** 
 * zshen Comment method ""checkConnection"".
 * @param metadataBean connection information.can not be null.
 * @return the object of TypedReturnCode if connected have be build the object will take a java.sql.connection elseit will take a error message.
 */
public ReturnCode checkConnection(IMetadataConnection metadataBean);","/** 
 * this is used to check a Connection and at last the connection will be closed at once.
 * @param metadataBean
 * @return
 */
public ReturnCode checkConnection(IMetadataConnection metadataBean);",0.4583333333333333
126899,"@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  if (connection == null) {
    connection=ConnectionHelper.createMDMConnection(metadataBean.getDataSourceName());
  }
  if (super.fillUIConnParams(metadataBean,connection) == null) {
    return null;
  }
  TypedReturnCode<Object> rc=this.checkConnection(metadataBean);
  if (rc.isOk()) {
    TdSoftwareSystem softwareSystem=SoftwaredeploymentFactory.eINSTANCE.createTdSoftwareSystem();
    softwareSystem.setName(metadataBean.getDatabase());
    softwareSystem.setType(SoftwareSystemConstants.DBMS.toString());
    softwareSystem.setVersion(metadataBean.getVersion());
    Component component=orgomg.cwm.foundation.softwaredeployment.SoftwaredeploymentFactory.eINSTANCE.createComponent();
    softwareSystem.getOwnedElement().add(component);
    ConnectionHelper.setSoftwareSystem(connection,softwareSystem);
    ConnectionHelper.setDataFilter(metadataBean.getDatafilter(),(MDMConnection)connection);
    ConnectionHelper.setUniverse(metadataBean.getUniverse(),connection);
    fillMetadataParams(metadataBean,connection);
  }
  return connection;
}","@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  if (connection == null) {
    connection=ConnectionHelper.createMDMConnection(metadataBean.getDataSourceName());
  }
  if (super.fillUIConnParams(metadataBean,connection) == null) {
    return null;
  }
  ReturnCode rc=checkConnection(metadataBean);
  if (rc.isOk()) {
    TdSoftwareSystem softwareSystem=SoftwaredeploymentFactory.eINSTANCE.createTdSoftwareSystem();
    softwareSystem.setName(metadataBean.getDatabase());
    softwareSystem.setType(SoftwareSystemConstants.DBMS.toString());
    softwareSystem.setVersion(metadataBean.getVersion());
    Component component=orgomg.cwm.foundation.softwaredeployment.SoftwaredeploymentFactory.eINSTANCE.createComponent();
    softwareSystem.getOwnedElement().add(component);
    ConnectionHelper.setSoftwareSystem(connection,softwareSystem);
    ConnectionHelper.setDataFilter(metadataBean.getDatafilter(),(MDMConnection)connection);
    ConnectionHelper.setUniverse(metadataBean.getUniverse(),connection);
    fillMetadataParams(metadataBean,connection);
  }
  return connection;
}",0.9921259842519684
126900,"/** 
 * zshen Comment method ""checkConnection"".
 * @param metadataBean connection information.can not be null.
 * @return the object of TypedReturnCode if connected have be build the object will take a java.sql.connection elseit will take a error message.
 * @deprecated use {@link #createConnection(IMetadataConnection)} instead.
 */
@Deprecated public ReturnCode checkConnection(IMetadataConnection metadataBean){
  return metadataFiller.checkConnection(metadataBean);
}","/** 
 * check a Connection and at last will close connection.
 * @param metadataBean
 * @return
 */
public ReturnCode checkConnection(IMetadataConnection metadataBean){
  return metadataFiller.checkConnection(metadataBean);
}",0.3988522238163558
126901,"/** 
 * @param metadataBean connection information.can not be null.
 * @return the object of TypedReturnCode if the connection is established. The object will be a instance ofjava.sql.Connection if success, otherwise an error message will be returned.
 */
public ReturnCode createConnection(IMetadataConnection metadataBean){
  return metadataFiller.checkConnection(metadataBean);
}","/** 
 * create a Connection and at last will not close connection.
 * @param metadataBean
 * @return
 */
public ReturnCode createConnection(IMetadataConnection metadataBean){
  return metadataFiller.createConnection(metadataBean);
}",0.5374592833876222
126902,"/** 
 * zshen Comment method ""checkConnection"".
 * @param metadataBean connection information.can not be null.
 * @return the object of TypedReturnCode if connected have be build the object will take a java.sql.connection elseit will take a error message.
 */
public ReturnCode checkConnection(IMetadataConnection metadataBean){
  ReturnCode rc=new ReturnCode();
  if (EDataBaseType.MDM.getProductName().equalsIgnoreCase(metadataBean.getDbType())) {
    try {
      XtentisBindingStub stub=MetadataConnectionUtils.getXtentisBindingStub(metadataBean);
      stub.ping(new WSPing());
      rc.setOk(true);
      rc.setMessage(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.warn(e,e);
      rc.setOk(false);
      rc.setMessage(e.getMessage());
    }
  }
 else {
    rc=MetadataConnectionUtils.checkConnection(metadataBean);
  }
  return rc;
}","public ReturnCode checkConnection(IMetadataConnection metadataBean){
  return createConnection(metadataBean,true);
}",0.2201646090534979
126903,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
  boolean inputModel=((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel();
  metadataNameText.setReadOnly(!inputModel);
}",0.785824345146379
126904,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
  boolean inputModel=((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel();
  metadataNameText.setReadOnly(!inputModel);
}",0.785824345146379
126905,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
  boolean inputModel=((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel();
  metadataNameText.setReadOnly(!inputModel);
}",0.785824345146379
126906,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  guessButton.setEnabled(!isReadOnly());
  metadataNameText.setReadOnly(isReadOnly());
  metadataCommentText.setReadOnly(isReadOnly());
  tableEditorView.setReadOnly(isReadOnly());
  boolean inputModel=((WSDLSchemaConnection)connectionItem.getConnection()).isIsInputModel();
  metadataNameText.setReadOnly(!inputModel);
}",0.785824345146379
126907,"@Override public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}","public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9766355140186916
126908,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT || (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES && node.getParent().getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER)) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}",0.9636745722005404
126909,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS || (target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES && target.getParent().getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER)) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.9656019656019657
126910,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9936832162465316
126911,"/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getUniqueName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getUniqueName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}","/** 
 * DOC wliu <p> get the original connection instance className of the pamameter:conn.\n It is used to help optimize the code to avoid 65535 bytes in a method </p> Notice: It is used in tFileOutputMSXML in TDI-21606
 * @param connection
 * @return
 */
public static String getPrivateConnClassName(final IConnection conn){
  if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    INode node=conn.getSource();
    if (node.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(node))) {
      return conn.getName();
    }
    List<? extends IConnection> listInConns=node.getIncomingConnections();
    if (listInConns != null && listInConns.size() > 0) {
      String retResult=getPrivateConnClassName(listInConns.get(0));
      if (retResult == null) {
        return conn.getName();
      }
 else {
        return retResult;
      }
    }
  }
  return null;
}",0.9932810750279956
126912,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9925309009187652
126913,"public static List<String> getPackageFilter(Connection connection,DatabaseMetaData dbMetaData,boolean isCatalog){
  List<String> packageFilter=new ArrayList<String>();
  try {
    if (isMdmConnection(connection)) {
    }
 else {
      DatabaseConnection dbConnection=(DatabaseConnection)connection;
      IRepositoryContextService repositoryContextService=null;
      DatabaseConnection origValueConn=null;
      if (dbConnection.isContextMode()) {
        repositoryContextService=CoreRuntimePlugin.getInstance().getRepositoryContextService();
        if (repositoryContextService != null) {
          String contextName=dbConnection.getContextName();
          origValueConn=repositoryContextService.cloneOriginalValueConnection(dbConnection,contextName == null ? true : false,contextName);
        }
      }
      if (isCatalog) {
        if (dbMetaData.supportsCatalogsInIndexDefinitions() || dbConnection.getDatabaseType().equalsIgnoreCase(EDatabaseTypeName.INFORMIX.name())) {
          String sid=dbConnection.getSID();
          if (origValueConn != null) {
            sid=origValueConn.getSID();
          }
          if (!StringUtils.isEmpty(sid) && !packageFilter.contains(sid)) {
            packageFilter.add(sid);
          }
        }
      }
 else {
        if (dbMetaData.supportsSchemasInIndexDefinitions()) {
          String uiSchema=dbConnection.getUiSchema();
          if (origValueConn != null) {
            uiSchema=origValueConn.getUiSchema();
          }
          if (!StringUtils.isEmpty(uiSchema) && !packageFilter.contains(uiSchema)) {
            packageFilter.add(uiSchema);
          }
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return packageFilter;
}","public static List<String> getPackageFilter(Connection connection,DatabaseMetaData dbMetaData,boolean isCatalog){
  List<String> packageFilter=new ArrayList<String>();
  try {
    if (isMdmConnection(connection)) {
    }
 else {
      DatabaseConnection dbConnection=(DatabaseConnection)connection;
      IRepositoryContextService repositoryContextService=null;
      DatabaseConnection origValueConn=null;
      if (dbConnection.isContextMode()) {
        repositoryContextService=CoreRuntimePlugin.getInstance().getRepositoryContextService();
        if (repositoryContextService != null) {
          String contextName=dbConnection.getContextName();
          origValueConn=repositoryContextService.cloneOriginalValueConnection(dbConnection,contextName == null ? true : false,contextName);
        }
      }
      if (isCatalog) {
        boolean isHsql=dbConnection.getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName());
        boolean isInformix=dbConnection.getDatabaseType().equalsIgnoreCase(EDatabaseTypeName.INFORMIX.name());
        if (dbMetaData.supportsCatalogsInIndexDefinitions() && !isHsql || isInformix) {
          String sid=dbConnection.getSID();
          if (origValueConn != null) {
            sid=origValueConn.getSID();
          }
          if (!StringUtils.isEmpty(sid) && !packageFilter.contains(sid)) {
            packageFilter.add(sid);
          }
        }
      }
 else {
        if (dbMetaData.supportsSchemasInIndexDefinitions()) {
          String uiSchema=dbConnection.getUiSchema();
          if (origValueConn != null) {
            uiSchema=origValueConn.getUiSchema();
          }
          if (!StringUtils.isEmpty(uiSchema) && !packageFilter.contains(uiSchema)) {
            packageFilter.add(uiSchema);
          }
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return packageFilter;
}",0.9246064623032312
126914,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName()) && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9925309009187652
126915,"public static List<String> getPackageFilter(Connection connection,DatabaseMetaData dbMetaData,boolean isCatalog){
  List<String> packageFilter=new ArrayList<String>();
  try {
    if (isMdmConnection(connection)) {
    }
 else {
      DatabaseConnection dbConnection=(DatabaseConnection)connection;
      IRepositoryContextService repositoryContextService=null;
      DatabaseConnection origValueConn=null;
      if (dbConnection.isContextMode()) {
        repositoryContextService=CoreRuntimePlugin.getInstance().getRepositoryContextService();
        if (repositoryContextService != null) {
          String contextName=dbConnection.getContextName();
          origValueConn=repositoryContextService.cloneOriginalValueConnection(dbConnection,contextName == null ? true : false,contextName);
        }
      }
      if (isCatalog) {
        if (dbMetaData.supportsCatalogsInIndexDefinitions() || dbConnection.getDatabaseType().equalsIgnoreCase(EDatabaseTypeName.INFORMIX.name())) {
          String sid=dbConnection.getSID();
          if (origValueConn != null) {
            sid=origValueConn.getSID();
          }
          if (!StringUtils.isEmpty(sid) && !packageFilter.contains(sid)) {
            packageFilter.add(sid);
          }
        }
      }
 else {
        if (dbMetaData.supportsSchemasInIndexDefinitions()) {
          String uiSchema=dbConnection.getUiSchema();
          if (origValueConn != null) {
            uiSchema=origValueConn.getUiSchema();
          }
          if (!StringUtils.isEmpty(uiSchema) && !packageFilter.contains(uiSchema)) {
            packageFilter.add(uiSchema);
          }
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return packageFilter;
}","public static List<String> getPackageFilter(Connection connection,DatabaseMetaData dbMetaData,boolean isCatalog){
  List<String> packageFilter=new ArrayList<String>();
  try {
    if (isMdmConnection(connection)) {
    }
 else {
      DatabaseConnection dbConnection=(DatabaseConnection)connection;
      IRepositoryContextService repositoryContextService=null;
      DatabaseConnection origValueConn=null;
      if (dbConnection.isContextMode()) {
        repositoryContextService=CoreRuntimePlugin.getInstance().getRepositoryContextService();
        if (repositoryContextService != null) {
          String contextName=dbConnection.getContextName();
          origValueConn=repositoryContextService.cloneOriginalValueConnection(dbConnection,contextName == null ? true : false,contextName);
        }
      }
      if (isCatalog) {
        boolean isHsql=dbConnection.getDatabaseType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName());
        boolean isInformix=dbConnection.getDatabaseType().equalsIgnoreCase(EDatabaseTypeName.INFORMIX.name());
        if (dbMetaData.supportsCatalogsInIndexDefinitions() && !isHsql || isInformix) {
          String sid=dbConnection.getSID();
          if (origValueConn != null) {
            sid=origValueConn.getSID();
          }
          if (!StringUtils.isEmpty(sid) && !packageFilter.contains(sid)) {
            packageFilter.add(sid);
          }
        }
      }
 else {
        if (dbMetaData.supportsSchemasInIndexDefinitions()) {
          String uiSchema=dbConnection.getUiSchema();
          if (origValueConn != null) {
            uiSchema=origValueConn.getUiSchema();
          }
          if (!StringUtils.isEmpty(uiSchema) && !packageFilter.contains(uiSchema)) {
            packageFilter.add(uiSchema);
          }
        }
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return packageFilter;
}",0.9246064623032312
126916,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    if (MetadataConnectionUtils.isSybase(dbJDBCMetadata)) {
      schemaPattern=ColumnSetHelper.getTableOwner(colSet);
    }
    boolean isOracle=MetadataConnectionUtils.isOracle(dbJDBCMetadata);
    if (isOracle && tablePattern.contains(""String_Node_Str"")) {
      tablePattern=tablePattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String columnName=columns.getString(GetColumn.COLUMN_NAME.name());
      TdColumn column=ColumnHelper.createTdColumn(columnName);
      int dataType=0;
      try {
        typeName=columns.getString(GetColumn.TYPE_NAME.name());
        typeName=typeName.toUpperCase().trim();
        typeName=ManagementTextUtils.filterSpecialChar(typeName);
        if (typeName.startsWith(""String_Node_Str"") && typeName.endsWith(""String_Node_Str"")) {
          typeName=""String_Node_Str"";
        }
        typeName=MetadataToolHelper.validateValueForDBType(typeName);
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
          dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
          decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
        }
 else         if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
          dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
          typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
        }
 else {
          dataType=columns.getInt(GetColumn.DATA_TYPE.name());
          if (!isOdbcTeradata) {
            numPrecRadix=columns.getInt(GetColumn.NUM_PREC_RADIX.name());
            decimalDigits=columns.getInt(GetColumn.DECIMAL_DIGITS.name());
          }
        }
        if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
          if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=91;
          }
 else           if (typeName.toLowerCase().equals(""String_Node_Str"")) {
            dataType=92;
          }
        }
        if (!isOdbcTeradata) {
          int column_size=columns.getInt(GetColumn.COLUMN_SIZE.name());
          column.setLength(column_size);
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
      column.setSqlDataType(sqlDataType);
      int nullable=0;
      if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
        String isNullable=columns.getString(""String_Node_Str"");
        if (!isNullable.equals(""String_Node_Str"")) {
          nullable=1;
        }
      }
 else {
        nullable=columns.getInt(GetColumn.NULLABLE.name());
      }
      column.getSqlDataType().setNullable(NullableType.get(nullable));
      String colComment=columns.getString(GetColumn.REMARKS.name());
      if (colComment == null) {
        colComment=""String_Node_Str"";
      }
      ColumnHelper.setComment(colComment,column);
      Object defaultvalue=null;
      try {
        if (!isOdbcTeradata) {
          defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
        }
      }
 catch (      Exception e1) {
        log.warn(e1,e1);
      }
      String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
      TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
      column.setInitialValue(defExpression);
      ExtractMetaDataUtils.handleDefaultValue(column,dbJDBCMetadata);
      DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
      String dbmsId=dbConnection == null ? null : dbConnection.getDbmsId();
      if (dbmsId != null) {
        MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
        String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : ExtractMetaDataUtils.getIntMetaDataInfo(columns,""String_Node_Str""));
        column.setTalendType(talendType);
        String defaultSelectedDbType=MetadataTalendType.getMappingTypeRetriever(dbConnection.getDbmsId()).getDefaultSelectedDbType(talendType);
        column.setSourceType(defaultSelectedDbType);
      }
      try {
        column.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.IS_NULLABLE.name())));
      }
 catch (      Exception e) {
      }
      returnColumns.add(column);
      columnMap.put(columnName,column);
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9808620689655172
126917,"protected ResultSet getColumnsResultSet(DatabaseMetaData dbMetaData,String catalogName,String schemaName,String tableName) throws SQLException {
  ResultSet columns=null;
  if (dbMetaData != null) {
    columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
  }
  return columns;
}","protected ResultSet getColumnsResultSet(DatabaseMetaData dbMetaData,String catalogName,String schemaName,String tableName) throws SQLException {
  ResultSet columns=null;
  if (dbMetaData != null) {
    if (tableName.contains(""String_Node_Str"")) {
      tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    columns=dbMetaData.getColumns(catalogName,schemaName,tableName,null);
  }
  return columns;
}",0.8005540166204986
126918,"/** 
 * DOC qzhang Comment method ""getMetadataTables"".
 * @param medataTables
 * @param rsTables
 * @throws SQLException
 */
protected void getMetadataTables(List<IMetadataTable> medataTables,ResultSet rsTables,boolean supportSchema,List<String> tablesToFilter,int... limit) throws SQLException {
  if (rsTables == null) {
    return;
  }
  int limitNum=-1;
  long index=0;
  if (limit != null && limit.length > 0) {
    limitNum=limit[0];
  }
  while (rsTables.next()) {
    index++;
    if (limitNum > 0 && index > limitNum) {
      break;
    }
    boolean isSynonym=false;
    MetadataTable medataTable=new MetadataTable();
    medataTable.setId(index + ""String_Node_Str"");
    String tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.TABLE_NAME,null);
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,3);
    }
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.SYNONYM_NAME,null);
      isSynonym=true;
    }
    if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
      continue;
    }
    medataTable.setLabel(tableName);
    medataTable.setTableName(medataTable.getLabel());
    medataTable.setComment(ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.REMARKS,null));
    String schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.TABLE_SCHEMA,null);
    if (schema == null) {
      schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,2);
    }
    String tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.TABLE_TYPE,null);
    if (tableType == null) {
      tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,4);
    }
    if (ExtractManager.TABLETYPE_TABLE.equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_TABLE.getName();
    }
    if (ExtractManager.TABLETYPE_VIEW.equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_VIEW.getName();
    }
    if (isSynonym) {
      tableType=""String_Node_Str"";
    }
    try {
      tableTypeMap.put(medataTable.getLabel(),tableType);
    }
 catch (    Exception e) {
      tableTypeMap.put(medataTable.getLabel(),ETableTypes.TABLETYPE_TABLE.getName());
    }
    medataTables.add(medataTable);
  }
}","/** 
 * DOC qzhang Comment method ""getMetadataTables"".
 * @param medataTables
 * @param rsTables
 * @throws SQLException
 */
protected void getMetadataTables(List<IMetadataTable> medataTables,ResultSet rsTables,boolean supportSchema,List<String> tablesToFilter,int... limit) throws SQLException {
  if (rsTables == null) {
    return;
  }
  int limitNum=-1;
  long index=0;
  if (limit != null && limit.length > 0) {
    limitNum=limit[0];
  }
  while (rsTables.next()) {
    index++;
    if (limitNum > 0 && index > limitNum) {
      break;
    }
    boolean isSynonym=false;
    MetadataTable medataTable=new MetadataTable();
    medataTable.setId(index + ""String_Node_Str"");
    String tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.TABLE_NAME,null);
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,3);
    }
    if (tableName == null) {
      tableName=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.SYNONYM_NAME,null);
      isSynonym=true;
    }
    if (tableName == null || tablesToFilter.contains(tableName)) {
      continue;
    }
    medataTable.setLabel(tableName);
    medataTable.setTableName(medataTable.getLabel());
    medataTable.setComment(ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.REMARKS,null));
    String schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.TABLE_SCHEMA,null);
    if (schema == null) {
      schema=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,2);
    }
    String tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,ExtractManager.TABLE_TYPE,null);
    if (tableType == null) {
      tableType=ExtractMetaDataUtils.getStringMetaDataInfo(rsTables,4);
    }
    if (ExtractManager.TABLETYPE_TABLE.equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_TABLE.getName();
    }
    if (ExtractManager.TABLETYPE_VIEW.equals(tableType)) {
      tableType=ETableTypes.TABLETYPE_VIEW.getName();
    }
    if (isSynonym) {
      tableType=""String_Node_Str"";
    }
    try {
      tableTypeMap.put(medataTable.getLabel(),tableType);
    }
 catch (    Exception e) {
      tableTypeMap.put(medataTable.getLabel(),ETableTypes.TABLETYPE_TABLE.getName());
    }
    medataTables.add(medataTable);
  }
}",0.9907187567450896
126919,"public static boolean isOracle(Connection connection){
  if (connection != null && connection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)connection;
    if (EDatabaseTypeName.ORACLEFORSID.getDisplayName().equals(dbConn.getDatabaseType()) || EDatabaseTypeName.ORACLESN.getDisplayName().equals(dbConn.getDatabaseType()) || EDatabaseTypeName.ORACLE_RAC.getDisplayName().equals(dbConn.getDatabaseType())|| EDatabaseTypeName.ORACLE_OCI.getDisplayName().equals(dbConn.getDatabaseType())) {
      return true;
    }
  }
  return false;
}","public static boolean isOracle(DatabaseMetaData metadata){
  if (metadata != null) {
    try {
      String name=metadata.getDatabaseProductName().toUpperCase();
      if (name != null && name.equals(EDatabaseTypeName.ORACLEFORSID.getProduct().toUpperCase())) {
        return true;
      }
    }
 catch (    SQLException e) {
      ExceptionHandler.process(e);
    }
  }
  return false;
}",0.2523461939520334
126920,"@Override public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}","public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9766355140186916
126921,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}",0.9681774349083896
126922,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9936832162465316
126923,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}",0.9681774349083896
126924,"public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
              while (iterator.hasNext()) {
                IRepositoryViewObject repObj=iterator.next();
                Item selectedItem=repObj.getProperty().getItem();
                if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                  copyHadoopClusterItem(selectedItem,path);
                  return;
                }
              }
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                factory.save(copy);
              }
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
catch (            BusinessException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}","public void execute(RepositoryNode sourceNode,RepositoryNode targetNode) throws Exception {
  if (!validateAction(sourceNode,targetNode)) {
    return;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    targetNode=targetNode.getParent();
  }
  final IPath path=RepositoryNodeUtilities.getPath(targetNode);
  if (sourceNode.getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
    final Item originalItem=sourceNode.getObject().getProperty().getItem();
    List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
    if (allVersion.size() == 1) {
      copySingleVersionItem(originalItem,path);
    }
 else     if (allVersion.size() > 1) {
      PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
      if (dialog.open() == Window.OK) {
        final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
              while (iterator.hasNext()) {
                IRepositoryViewObject repObj=iterator.next();
                Item selectedItem=repObj.getProperty().getItem();
                if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                  copyHadoopClusterItem(selectedItem,path);
                  return;
                }
              }
              String id=null;
              String label=null;
              boolean isfirst=true;
              boolean needSys=true;
              List newItems=new ArrayList();
              for (              IRepositoryViewObject object : selectedVersionItems) {
                Item selectedItem=object.getProperty().getItem();
                Item copy=null;
                if (isfirst) {
                  copy=factory.copy(selectedItem,path);
                  id=copy.getProperty().getId();
                  label=copy.getProperty().getLabel();
                  isfirst=false;
                }
 else {
                  copy=factory.copy(selectedItem,path,label);
                }
                copy.getProperty().setId(id);
                if (needSys && originalItem instanceof RoutineItem) {
                  String lastestVersion=getLastestVersion(selectedVersionItems);
                  if (lastestVersion.equals(copy.getProperty().getVersion())) {
                    synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                    needSys=false;
                  }
                }
                if (copy instanceof ProcessItem) {
                  RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                }
                newItems.add(copy);
                factory.save(copy);
              }
              if (newItems.size() > 0) {
                Collections.sort(newItems,new Comparator(){
                  @Override public int compare(                  Object o1,                  Object o2){
                    Item i1=(Item)o1;
                    Item i2=(Item)o2;
                    return i1.getProperty().getVersion().compareTo(i2.getProperty().getVersion());
                  }
                }
);
                Item item=(Item)newItems.get(newItems.size() - 1);
                copyDataServiceRelateJob(item);
              }
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
catch (            BusinessException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
}",0.9245810055865922
126925,"private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            if (isHadoopClusterItem(item)) {
              copyHadoopClusterItem(item,path);
              return;
            }
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}","private void copySingleVersionItem(final Item item,final IPath path){
  final RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          try {
            if (isHadoopClusterItem(item)) {
              copyHadoopClusterItem(item,path);
              return;
            }
            Item newItem=factory.copy(item,path,true);
            if (newItem instanceof RoutineItem) {
              synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
            }
            ICamelDesignerCoreService service=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
              service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
            }
            if (service != null && service.isInstanceofCamelBeans(item)) {
              synDuplicatedBean(newItem);
            }
            if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
              RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
            }
            if (newItem instanceof ConnectionItem) {
              ConnectionItem connectionItem=(ConnectionItem)newItem;
              connectionItem.getConnection().getSupplierDependency().clear();
            }
            factory.save(newItem);
            copyDataServiceRelateJob(newItem);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
      }
 catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  factory.executeRepositoryWorkUnit(workUnit);
}",0.9885144040670308
126926,"private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              try {
                Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
                while (iterator.hasNext()) {
                  IRepositoryViewObject repObj=iterator.next();
                  Item selectedItem=repObj.getProperty().getItem();
                  if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                    copyHadoopClusterItem(selectedItem,path,newJobName);
                    return;
                  }
                }
                String id=null;
                boolean isfirst=true;
                boolean needSys=true;
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem || copy instanceof JobletProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void createOperation(final String newJobName,final RepositoryNode target,CopyObjectAction copyObjectAction,final TreeSelection selectionInClipboard){
  Object currentSource=selectionInClipboard.toArray()[0];
  try {
    final IPath path=RepositoryNodeUtilities.getPath(target);
    if (((RepositoryNode)currentSource).getType().equals(ENodeType.REPOSITORY_ELEMENT)) {
      Item originalItem=((RepositoryNode)currentSource).getObject().getProperty().getItem();
      List<IRepositoryViewObject> allVersion=factory.getAllVersion(originalItem.getProperty().getId());
      for (      IRepositoryViewObject obj : allVersion) {
        if (obj.getVersion().equals(originalItem.getProperty().getVersion())) {
          originalItem=obj.getProperty().getItem();
          break;
        }
      }
      if (allVersion.size() == 1) {
        duplicateSingleVersionItem(originalItem,path,newJobName);
      }
 else       if (allVersion.size() > 1) {
        final PastSelectorDialog dialog=new PastSelectorDialog(Display.getCurrent().getActiveShell(),allVersion,sourceNode);
        final Item item=originalItem;
        if (dialog.open() == Window.OK) {
          final Set<IRepositoryViewObject> selectedVersionItems=dialog.getSelectedVersionItems();
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            @Override public void run(            IProgressMonitor monitor) throws CoreException {
              try {
                Iterator<IRepositoryViewObject> iterator=selectedVersionItems.iterator();
                while (iterator.hasNext()) {
                  IRepositoryViewObject repObj=iterator.next();
                  Item selectedItem=repObj.getProperty().getItem();
                  if (!iterator.hasNext() && isHadoopClusterItem(selectedItem)) {
                    copyHadoopClusterItem(selectedItem,path,newJobName);
                    return;
                  }
                }
                String id=null;
                boolean isfirst=true;
                boolean needSys=true;
                List newItems=new ArrayList();
                for (                IRepositoryViewObject object : selectedVersionItems) {
                  Item selectedItem=object.getProperty().getItem();
                  Item copy;
                  copy=factory.copy(selectedItem,path,newJobName);
                  newItems.add(copy);
                  if (isfirst) {
                    id=copy.getProperty().getId();
                    isfirst=false;
                  }
                  copy.getProperty().setId(id);
                  if (needSys && item instanceof RoutineItem) {
                    String lastestVersion=getLastestVersion(selectedVersionItems);
                    if (lastestVersion.equals(copy.getProperty().getVersion())) {
                      synDuplicatedRoutine((RoutineItem)copy,selectedItem.getProperty().getLabel());
                      needSys=false;
                    }
                  }
                  if (copy instanceof ProcessItem || copy instanceof JobletProcessItem) {
                    RelationshipItemBuilder.getInstance().addOrUpdateItem(copy);
                  }
                  if (copy instanceof ConnectionItem) {
                    Connection connection=((ConnectionItem)copy).getConnection();
                    if (connection != null) {
                      connection.getSupplierDependency().clear();
                      connection.setLabel(newJobName);
                      connection.setName(newJobName);
                    }
                  }
                  factory.save(copy);
                  notifySQLExplorer(copy);
                }
                if (newItems.size() > 0) {
                  Collections.sort(newItems,new Comparator(){
                    @Override public int compare(                    Object o1,                    Object o2){
                      Item i1=(Item)o1;
                      Item i2=(Item)o2;
                      return i1.getProperty().getVersion().compareTo(i2.getProperty().getVersion());
                    }
                  }
);
                  Item item=(Item)newItems.get(newItems.size() - 1);
                  copyDataServiceRelateJob(item);
                }
              }
 catch (              PersistenceException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
catch (              BusinessException e) {
                throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
              }
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            @Override public void run(            IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.93684610994864
126927,"private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        if (isHadoopClusterItem(item)) {
          copyHadoopClusterItem(item,path,newName);
          return;
        }
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}","private void duplicateSingleVersionItem(final Item item,final IPath path,final String newName){
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      try {
        if (isHadoopClusterItem(item)) {
          copyHadoopClusterItem(item,path,newName);
          return;
        }
        final Item newItem=factory.copy(item,path,newName);
        if (newItem instanceof RoutineItem) {
          synDuplicatedRoutine((RoutineItem)newItem,item.getProperty().getLabel());
        }
        ICamelDesignerCoreService service=null;
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
          service=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
        }
        if (service != null && service.isInstanceofCamelBeans(item)) {
          synDuplicatedBean(newItem);
        }
        if (newItem instanceof ProcessItem || newItem instanceof JobletProcessItem) {
          RelationshipItemBuilder.getInstance().addOrUpdateItem(newItem);
        }
        if (newItem instanceof ConnectionItem) {
          Connection connection=((ConnectionItem)newItem).getConnection();
          if (connection != null) {
            connection.setLabel(newName);
            connection.setName(newName);
            connection.getSupplierDependency().clear();
          }
        }
        factory.save(newItem);
        notifySQLExplorer(newItem);
        copyDataServiceRelateJob(newItem);
      }
 catch (      PersistenceException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
catch (      BusinessException e) {
        throw new CoreException(new Status(IStatus.ERROR,""String_Node_Str"",""String_Node_Str"",e));
      }
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(null).run(false,false,iRunnableWithProgress);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
  }
}",0.991642371234208
126928,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          selectNodes.add((RepositoryNode)obj);
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      for (      RepositoryNode node : selectNodes) {
        try {
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            if (needReturn) {
              return;
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            boolean isSqlTemplate=false;
            if (node.getObject() instanceof Folder) {
              Object label=node.getProperties(EProperties.LABEL);
              if (ENodeType.SIMPLE_FOLDER.equals(node.getType()) && ERepositoryObjectType.SQLPATTERNS.equals(node.getContentType()) && (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")|| label.equals(""String_Node_Str"")) || label.equals(""String_Node_Str"")) {
                isSqlTemplate=true;
              }
            }
            if (!isSqlTemplate) {
              types.add(node.getContentType());
              if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
                types.add(ERepositoryObjectType.DOCUMENTATION);
              }
              deletedFolder.add(node);
              deleteFolder(node,factory,deleteActionCache);
            }
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9936832162465316
126929,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  Object firstElement=selection.getFirstElement();
  if (!(firstElement instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode node=(RepositoryNode)firstElement;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  ERepositoryObjectType objectType=null;
  for (  Object obj : ((StructuredSelection)selection).toArray()) {
    if (canWork) {
      RepositoryNode sourceNode=(RepositoryNode)obj;
      ERepositoryObjectType type=sourceNode.getObjectType();
      if (objectType != null && objectType != type) {
        canWork=false;
        break;
      }
 else {
        objectType=type;
      }
      if (!CopyObjectAction.getInstance().validateAction(sourceNode,null)) {
        canWork=false;
      }
 else       if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESOPERATION || node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.SERVICESPORT || (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES && node.getParent().getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER)) {
        canWork=false;
      }
    }
 else {
      break;
    }
  }
  setEnabled(canWork);
}",0.9636745722005404
126930,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean enabled=true;
  Object targetObject=selection.getFirstElement();
  if (!(targetObject instanceof RepositoryNode)) {
    setEnabled(false);
    return;
  }
  RepositoryNode target=(RepositoryNode)targetObject;
  if (!(LocalSelectionTransfer.getTransfer().getSelection() instanceof TreeSelection)) {
    setEnabled(false);
    return;
  }
  if (target.isBin()) {
    setEnabled(false);
    return;
  }
  if (target.getObject() != null && target.getObject().getProperty() != null && target.getObject().getProperty().getItem() != null) {
    Item item=target.getObject().getProperty().getItem();
    if (item.getState() != null && item.getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  }
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  IProxyRepositoryFactory proxyFactory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject object=target.getObject();
  if (target.getContentType() == ERepositoryObjectType.JOBS || target.getContentType() == ERepositoryObjectType.JOBLETS || target.getContentType() == ERepositoryObjectType.GENERATED || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC || target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.REFERENCED_PROJECTS || (target.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATION_RULES && target.getParent().getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER)) {
    visible=false;
    enabled=false;
  }
 else   if (object != null) {
    if (target != null && proxyFactory.getStatus(object) == ERepositoryStatus.READ_ONLY) {
      enabled=false;
      visible=false;
    }
 else     if (target != null && object instanceof Folder && enabled) {
      visible=true;
    }
  }
 else   if (isReferencedProject(target)) {
    visible=false;
    enabled=false;
  }
  if (enabled && selectionInClipboard != null && !((StructuredSelection)selectionInClipboard).isEmpty()) {
    visible=true;
    ERepositoryObjectType objectType=null;
    for (    Object obj : ((StructuredSelection)selectionInClipboard).toArray()) {
      if (enabled) {
        if (!(obj instanceof RepositoryNode)) {
          enabled=false;
          break;
        }
        RepositoryNode sourceNode=(RepositoryNode)obj;
        ERepositoryObjectType type=sourceNode.getObjectType();
        if (objectType != null && objectType != type) {
          enabled=false;
          break;
        }
 else {
          objectType=type;
        }
        if (CopyObjectAction.getInstance().validateAction(sourceNode,target)) {
          enabled=true;
        }
 else {
          enabled=false;
        }
      }
 else {
        break;
      }
    }
  }
 else {
    enabled=false;
    visible=false;
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICDCProviderService.class)) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && cdcService.isSubscriberTableNode(target)) {
      enabled=false;
      visible=false;
    }
  }
  setEnabled(enabled);
}",0.9656019656019657
126931,"@Override public boolean equals(TraceBean traceBean){
  return false;
}","public boolean equals(TraceBean traceBean){
  return false;
}",0.9242424242424242
126932,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              String curFile=current.getFullPath().toPortableString();
              if (!invalidFiles.contains(curFile)) {
                invalidFiles.add(curFile);
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                deleteResource(current);
              }
 catch (              PersistenceException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          IFolder existFolder=physicalFolder.getFolder(subFolder.getProperty().getLabel());
          if (existFolder != null && existFolder.exists()) {
            Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
            subFolder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
            folderNamesFounds.add(curItem.getProperty().getLabel());
          }
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              String curFile=current.getFullPath().toPortableString();
              if (!invalidFiles.contains(curFile)) {
                invalidFiles.add(curFile);
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                deleteResource(current);
              }
 catch (              PersistenceException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9891083625623038
126933,"@Override public boolean equals(TraceBean traceBean){
  return false;
}","public boolean equals(TraceBean traceBean){
  return false;
}",0.9242424242424242
126934,"/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  String uniqueName=node.getUniqueName();
  if (node.isVirtualGenerateNode()) {
    List<? extends INode> nodeList=node.getProcess().getGraphicalNodes();
    for (    INode graphicnode : nodeList) {
      if (graphicnode.isGeneratedAsVirtualComponent()) {
        String nodeUniqueName=graphicnode.getUniqueName();
        if (uniqueName.indexOf(nodeUniqueName + ""String_Node_Str"") == 0) {
          uniqueName=nodeUniqueName;
          break;
        }
      }
    }
  }
  return uniqueName;
}","/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  return getVirtualNode(node).getUniqueName();
}",0.4939271255060729
126935,"/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  String uniqueName=node.getUniqueName();
  if (node.isVirtualGenerateNode()) {
    List<? extends INode> nodeList=node.getProcess().getGraphicalNodes();
    for (    INode graphicnode : nodeList) {
      if (graphicnode.isGeneratedAsVirtualComponent()) {
        String nodeUniqueName=graphicnode.getUniqueName();
        if (uniqueName.indexOf(nodeUniqueName + ""String_Node_Str"") == 0) {
          uniqueName=nodeUniqueName;
          break;
        }
      }
    }
  }
  return uniqueName;
}","/** 
 * @author jyhu
 * @aim Get unique name of the graphica node from generating node.
 * @param node: Generated node
 * @return unique name of the graphica node.
 */
public static String getVirtualUniqueName(INode node){
  return getVirtualNode(node).getUniqueName();
}",0.4939271255060729
126936,"public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode){
  if (sourceNode == null) {
    return false;
  }
  if (sourceNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (objectToCopy.getId() == null) {
    return false;
  }
  try {
    if (ProxyRepositoryFactory.getInstance().getLastVersion(objectToCopy.getId()) == null) {
      return false;
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (objectToCopy != null && objectToCopy.getId() == null) {
    return false;
  }
  if (objectToCopy == null || objectToCopy.getRepositoryStatus() == ERepositoryStatus.DELETED || ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
    Property property=objectToCopy.getProperty();
    RoutineItem item=(RoutineItem)property.getItem();
    return !item.isBuiltIn();
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
    Property property=objectToCopy.getProperty();
    SQLPatternItem item=(SQLPatternItem)property.getItem();
    return !item.isSystem();
  }
  if (PluginChecker.isCDCPluginLoaded()) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && (cdcService.isSubscriberTableNode(sourceNode) || cdcService.isSystemSubscriberTable(sourceNode))) {
      return false;
    }
  }
  if (targetNode == null) {
    return true;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT || targetNode.getType() == ENodeType.SIMPLE_FOLDER || targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    return ((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
  }
  return false;
}","public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode){
  if (sourceNode == null) {
    return false;
  }
  if (targetNode != null && targetNode.getType() == ENodeType.REPOSITORY_ELEMENT && targetNode.getContentType() != ERepositoryObjectType.METADATA_VALIDATION_RULES) {
    targetNode=targetNode.getParent();
  }
  if (sourceNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (objectToCopy.getId() == null) {
    return false;
  }
  try {
    if (ProxyRepositoryFactory.getInstance().getLastVersion(objectToCopy.getId()) == null) {
      return false;
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (objectToCopy != null && objectToCopy.getId() == null) {
    return false;
  }
  if (objectToCopy == null || objectToCopy.getRepositoryStatus() == ERepositoryStatus.DELETED || ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
    Property property=objectToCopy.getProperty();
    RoutineItem item=(RoutineItem)property.getItem();
    return !item.isBuiltIn();
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
    Property property=objectToCopy.getProperty();
    SQLPatternItem item=(SQLPatternItem)property.getItem();
    return !item.isSystem();
  }
  if (PluginChecker.isCDCPluginLoaded()) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && (cdcService.isSubscriberTableNode(sourceNode) || cdcService.isSystemSubscriberTable(sourceNode))) {
      return false;
    }
  }
  if (targetNode == null) {
    return true;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT || targetNode.getType() == ENodeType.SIMPLE_FOLDER || targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    return ((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
  }
  return false;
}",0.9502025256135336
126937,"/** 
 * DOC YeXiaowei Comment method ""getSalesforceSchemaValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getSalesforceSchemaValue(SalesforceSchemaConnection connection,String value,IMetadataTable table){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getWebServiceUrl()) || isContextMode(connection,connection.getWebServiceUrlTextForOAuth())) {
      if (connection.getLoginType().equals(""String_Node_Str"")) {
        return connection.getWebServiceUrl();
      }
 else {
        return connection.getWebServiceUrlTextForOAuth();
      }
    }
 else {
      if (connection.getLoginType().equals(""String_Node_Str"")) {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrl());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrlTextForOAuth());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (connection.isUseCustomModuleName()) {
      return ""String_Node_Str"";
    }
 else {
      if (table != null) {
        EList<SalesforceModuleUnit> moduleList=connection.getModules();
        for (        SalesforceModuleUnit unit : moduleList) {
          if (table.getLabel().equals(unit.getModuleName())) {
            return unit.getModuleName();
          }
        }
      }
      return connection.getModuleName();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getQueryCondition())) {
      return connection.getQueryCondition();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getQueryCondition());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getBatchSize();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.isUseProxy();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUsername())) {
      return connection.getProxyUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getTimeOut())) {
      return connection.getTimeOut();
    }
 else {
      return connection.getTimeOut();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSalesforceVersion())) {
      return connection.getSalesforceVersion();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSalesforceVersion());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeKey())) {
      return connection.getConsumeKey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeKey());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeSecret())) {
      return connection.getConsumeSecret();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeSecret());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackHost())) {
      return connection.getCallbackHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getCallbackHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackPort())) {
      return connection.getCallbackPort();
    }
 else {
      return connection.getCallbackPort();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLoginType())) {
      return connection.getLoginType();
    }
 else {
      if (connection.getLoginType().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""getSalesforceSchemaValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getSalesforceSchemaValue(SalesforceSchemaConnection connection,String value,IMetadataTable table){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getWebServiceUrl()) || isContextMode(connection,connection.getWebServiceUrlTextForOAuth())) {
      if (connection.getLoginType().equalsIgnoreCase(""String_Node_Str"")) {
        return connection.getWebServiceUrl();
      }
 else {
        return connection.getWebServiceUrlTextForOAuth();
      }
    }
 else {
      if (connection.getLoginType().equalsIgnoreCase(""String_Node_Str"")) {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrl());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrlTextForOAuth());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (connection.isUseCustomModuleName()) {
      return ""String_Node_Str"";
    }
 else {
      if (table != null) {
        EList<SalesforceModuleUnit> moduleList=connection.getModules();
        for (        SalesforceModuleUnit unit : moduleList) {
          if (table.getLabel().equals(unit.getModuleName())) {
            return unit.getModuleName();
          }
        }
      }
      return connection.getModuleName();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getQueryCondition())) {
      return connection.getQueryCondition();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getQueryCondition());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getBatchSize();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.isUseProxy();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUsername())) {
      return connection.getProxyUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getTimeOut())) {
      return connection.getTimeOut();
    }
 else {
      return connection.getTimeOut();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSalesforceVersion())) {
      return connection.getSalesforceVersion();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSalesforceVersion());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeKey())) {
      return connection.getConsumeKey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeKey());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeSecret())) {
      return connection.getConsumeSecret();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeSecret());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackHost())) {
      return connection.getCallbackHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getCallbackHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackPort())) {
      return connection.getCallbackPort();
    }
 else {
      return connection.getCallbackPort();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLoginType())) {
      return connection.getLoginType();
    }
 else {
      if (connection.getLoginType().equalsIgnoreCase(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
  return null;
}",0.9970478252312536
126938,"static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equals(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.UserName;
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.Password;
    ssConn.setPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyHost;
    ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPort;
    ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyUsername;
    ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPassword;
    ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerKey;
    ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerSecret;
    ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackHost;
    ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackPort;
    ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SalesforceVersion;
    ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.token;
    ssConn.setToken(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
}","static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equalsIgnoreCase(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.UserName;
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.Password;
    ssConn.setPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyHost;
    ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPort;
    ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyUsername;
    ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPassword;
    ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerKey;
    ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerSecret;
    ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackHost;
    ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackPort;
    ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SalesforceVersion;
    ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.token;
    ssConn.setToken(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
}",0.9983839689722044
126939,"static List<IContextParameter> getSalesforceVariables(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equals(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrl());
    paramName=prefixName + EParamName.UserName;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getUserName());
    paramName=prefixName + EParamName.Password;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getPassword(),JavaTypesManager.PASSWORD);
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
    paramName=prefixName + EParamName.SFProxyHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyHost());
    paramName=prefixName + EParamName.SFProxyPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPort());
    paramName=prefixName + EParamName.SFProxyUsername;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyUsername());
    paramName=prefixName + EParamName.SFProxyPassword;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPassword());
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrlTextForOAuth());
    paramName=prefixName + EParamName.ConsumerKey;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeKey());
    paramName=prefixName + EParamName.ConsumerSecret;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeSecret());
    paramName=prefixName + EParamName.CallbackHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackHost());
    paramName=prefixName + EParamName.CallbackPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackPort(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.SalesforceVersion;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getSalesforceVersion());
    paramName=prefixName + EParamName.token;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getToken());
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
  }
  return varList;
}","static List<IContextParameter> getSalesforceVariables(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equalsIgnoreCase(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrl());
    paramName=prefixName + EParamName.UserName;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getUserName());
    paramName=prefixName + EParamName.Password;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getPassword(),JavaTypesManager.PASSWORD);
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
    paramName=prefixName + EParamName.SFProxyHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyHost());
    paramName=prefixName + EParamName.SFProxyPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPort());
    paramName=prefixName + EParamName.SFProxyUsername;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyUsername());
    paramName=prefixName + EParamName.SFProxyPassword;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPassword());
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrlTextForOAuth());
    paramName=prefixName + EParamName.ConsumerKey;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeKey());
    paramName=prefixName + EParamName.ConsumerSecret;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeSecret());
    paramName=prefixName + EParamName.CallbackHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackHost());
    paramName=prefixName + EParamName.CallbackPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackPort(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.SalesforceVersion;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getSalesforceVersion());
    paramName=prefixName + EParamName.token;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getToken());
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
  }
  return varList;
}",0.9985079080871382
126940,"/** 
 * DOC zli Comment method ""readMetadataDetail"".
 */
public IMetadataTable readMetadataDetail(){
  String moduleName=getConnection().getModuleName();
  if (moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  String webServiceUrl=getConnection().getWebServiceUrl();
  String userName=getConnection().getUserName();
  String password=getConnection().getPassword();
  String timeOut=getConnection().getTimeOut();
  String betchSize=getConnection().getBatchSize();
  boolean useProxy=getConnection().isUseProxy();
  boolean useHttp=getConnection().isUseHttpProxy();
  String proxyHost=getConnection().getProxyHost();
  String proxyPort=getConnection().getProxyPort();
  String proxyUsername=getConnection().getProxyUsername();
  String proxyPassword=getConnection().getProxyPassword();
  String webServiceUrlForOauth=getConnection().getWebServiceUrlTextForOAuth();
  String comsumeKey=getConnection().getConsumeKey();
  String consumeSecret=getConnection().getConsumeSecret();
  String callbackHost=getConnection().getCallbackHost();
  String callbackPort=getConnection().getCallbackPort();
  String salesforceVersion=getConnection().getSalesforceVersion();
  String token=getConnection().getToken();
  String loginType=getConnection().getLoginType();
  if (isContextMode() && getContextModeManager() != null) {
    webServiceUrl=getContextModeManager().getOriginalValue(webServiceUrl);
    userName=getContextModeManager().getOriginalValue(userName);
    password=getContextModeManager().getOriginalValue(password);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    betchSize=getContextModeManager().getOriginalValue(betchSize);
    useProxy=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useProxy)));
    useHttp=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useHttp)));
    proxyHost=getContextModeManager().getOriginalValue(proxyHost);
    proxyPort=getContextModeManager().getOriginalValue(proxyPort);
    proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
    proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
    webServiceUrlForOauth=getContextModeManager().getOriginalValue(webServiceUrlForOauth);
    comsumeKey=getContextModeManager().getOriginalValue(comsumeKey);
    consumeSecret=getContextModeManager().getOriginalValue(consumeSecret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    salesforceVersion=getContextModeManager().getOriginalValue(salesforceVersion);
    token=getContextModeManager().getOriginalValue(token);
    loginType=getContextModeManager().getOriginalValue(loginType);
  }
  if (loginType.equals(BASIC)) {
    metadataTableOrder=getMetadatasForSalesforce(webServiceUrl,userName,password,timeOut,moduleName,betchSize,useProxy,useHttp,proxyHost,proxyPort,proxyUsername,proxyPassword,true);
  }
 else {
    metadataTableOrder=getMetadataTableBySalesforceServerAPIForOauth(webServiceUrlForOauth,comsumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut,moduleName);
    if (metadataTableOrder == null) {
      metadataTableOrder=getMetadataTableFromConfigFile(moduleName);
    }
  }
  return metadataTableOrder;
}","/** 
 * DOC zli Comment method ""readMetadataDetail"".
 */
public IMetadataTable readMetadataDetail(){
  String moduleName=getConnection().getModuleName();
  if (moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  String webServiceUrl=getConnection().getWebServiceUrl();
  String userName=getConnection().getUserName();
  String password=getConnection().getPassword();
  String timeOut=getConnection().getTimeOut();
  String betchSize=getConnection().getBatchSize();
  boolean useProxy=getConnection().isUseProxy();
  boolean useHttp=getConnection().isUseHttpProxy();
  String proxyHost=getConnection().getProxyHost();
  String proxyPort=getConnection().getProxyPort();
  String proxyUsername=getConnection().getProxyUsername();
  String proxyPassword=getConnection().getProxyPassword();
  String webServiceUrlForOauth=getConnection().getWebServiceUrlTextForOAuth();
  String comsumeKey=getConnection().getConsumeKey();
  String consumeSecret=getConnection().getConsumeSecret();
  String callbackHost=getConnection().getCallbackHost();
  String callbackPort=getConnection().getCallbackPort();
  String salesforceVersion=getConnection().getSalesforceVersion();
  String token=getConnection().getToken();
  String loginType=getConnection().getLoginType();
  if (isContextMode() && getContextModeManager() != null) {
    webServiceUrl=getContextModeManager().getOriginalValue(webServiceUrl);
    userName=getContextModeManager().getOriginalValue(userName);
    password=getContextModeManager().getOriginalValue(password);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    betchSize=getContextModeManager().getOriginalValue(betchSize);
    useProxy=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useProxy)));
    useHttp=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useHttp)));
    proxyHost=getContextModeManager().getOriginalValue(proxyHost);
    proxyPort=getContextModeManager().getOriginalValue(proxyPort);
    proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
    proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
    webServiceUrlForOauth=getContextModeManager().getOriginalValue(webServiceUrlForOauth);
    comsumeKey=getContextModeManager().getOriginalValue(comsumeKey);
    consumeSecret=getContextModeManager().getOriginalValue(consumeSecret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    salesforceVersion=getContextModeManager().getOriginalValue(salesforceVersion);
    token=getContextModeManager().getOriginalValue(token);
    loginType=getContextModeManager().getOriginalValue(loginType);
  }
  if (loginType.equalsIgnoreCase(BASIC)) {
    metadataTableOrder=getMetadatasForSalesforce(webServiceUrl,userName,password,timeOut,moduleName,betchSize,useProxy,useHttp,proxyHost,proxyPort,proxyUsername,proxyPassword,true);
  }
 else {
    metadataTableOrder=getMetadataTableBySalesforceServerAPIForOauth(webServiceUrlForOauth,comsumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut,moduleName);
    if (metadataTableOrder == null) {
      metadataTableOrder=getMetadataTableFromConfigFile(moduleName);
    }
  }
  return metadataTableOrder;
}",0.9984930681133212
126941,"@Override protected void initialize(){
  if (getConnection() == null) {
    return;
  }
  if (getConnection().getWebServiceUrl() != null && !getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(getConnection().getWebServiceUrl());
  }
  if (getConnection().getWebServiceUrl() == null || getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    getConnection().setWebServiceUrl(TSALESFORCE_INPUT_URL);
  }
  if (webServiceUrlText.getText() == null || webServiceUrlText.getText().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(TSALESFORCE_INPUT_URL);
  }
  setTextValue(getConnection().getUserName(),userNameText);
  setTextValue(getConnection().getPassword(),passwordText);
  String batchSize2=getConnection().getBatchSize();
  setTextValue((batchSize2 != null && !""String_Node_Str"".equals(batchSize2)) ? batchSize2 : String.valueOf(SalesforceSchemaBean.DEFAULT_BATCH_SIZE),batchSizeText);
  useProxyBtn.setSelection(getConnection().isUseProxy());
  useHttpBtn.setSelection(getConnection().isUseHttpProxy());
  setTextValue(getConnection().getProxyHost(),proxyHostText);
  setTextValue(getConnection().getProxyPort(),proxyPortText);
  setTextValue(getConnection().getProxyUsername(),proxyUsernameText);
  setTextValue(getConnection().getProxyPassword(),proxyPasswordText);
  String timeOutStr=getConnection().getTimeOut();
  String value=(timeOutStr != null && !""String_Node_Str"".equals(timeOutStr)) ? timeOutStr : String.valueOf(SalesforceSchemaBean.DEFAULT_TIME_OUT);
  timeOut=value;
  setTextValue(value,timeOutText);
  if (getConnection().getLoginType() != null && !getConnection().getLoginType().equals(""String_Node_Str"")) {
    authBtn.setText(getConnection().getLoginType());
    if (getConnection().getLoginType().equals(BASIC)) {
      authBtn.select(0);
      stackLayout.topControl=basicComposite;
      stackComposite.layout();
    }
 else {
      authBtn.select(1);
      stackLayout.topControl=oauthComposite;
      stackComposite.layout();
    }
  }
 else {
    getConnection().setLoginType(BASIC);
  }
  setTextValue(getConnection().getWebServiceUrlTextForOAuth(),webServiceUrlTextForOAuth);
  if (webServiceUrlTextForOAuth.getText() == null || webServiceUrlTextForOAuth.getText().equals(""String_Node_Str"")) {
    webServiceUrlTextForOAuth.setText(TSALESFORCE_INPUT_URL_OAUTH);
    getConnection().setWebServiceUrlTextForOAuth(TSALESFORCE_INPUT_URL_OAUTH);
  }
  setTextValue(getConnection().getSalesforceVersion(),apiVersionText);
  if (apiVersionText.getText() == null || apiVersionText.getText().equals(""String_Node_Str"")) {
    apiVersionText.setText(TSALESFORCE_VERSION);
    getConnection().setSalesforceVersion(TSALESFORCE_VERSION);
  }
  setTextValue(getConnection().getConsumeKey(),consumeKeyText);
  setTextValue(getConnection().getConsumeSecret(),consumeKeySecretText);
  setTextValue(getConnection().getCallbackHost(),callbackHostText);
  setTextValue(getConnection().getCallbackPort(),callbackPortText);
  setTextValue(getConnection().getToken(),tokenText);
}","@Override protected void initialize(){
  if (getConnection() == null) {
    return;
  }
  if (getConnection().getWebServiceUrl() != null && !getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(getConnection().getWebServiceUrl());
  }
  if (getConnection().getWebServiceUrl() == null || getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    getConnection().setWebServiceUrl(TSALESFORCE_INPUT_URL);
  }
  if (webServiceUrlText.getText() == null || webServiceUrlText.getText().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(TSALESFORCE_INPUT_URL);
  }
  setTextValue(getConnection().getUserName(),userNameText);
  setTextValue(getConnection().getPassword(),passwordText);
  String batchSize2=getConnection().getBatchSize();
  setTextValue((batchSize2 != null && !""String_Node_Str"".equals(batchSize2)) ? batchSize2 : String.valueOf(SalesforceSchemaBean.DEFAULT_BATCH_SIZE),batchSizeText);
  useProxyBtn.setSelection(getConnection().isUseProxy());
  useHttpBtn.setSelection(getConnection().isUseHttpProxy());
  setTextValue(getConnection().getProxyHost(),proxyHostText);
  setTextValue(getConnection().getProxyPort(),proxyPortText);
  setTextValue(getConnection().getProxyUsername(),proxyUsernameText);
  setTextValue(getConnection().getProxyPassword(),proxyPasswordText);
  String timeOutStr=getConnection().getTimeOut();
  String value=(timeOutStr != null && !""String_Node_Str"".equals(timeOutStr)) ? timeOutStr : String.valueOf(SalesforceSchemaBean.DEFAULT_TIME_OUT);
  timeOut=value;
  setTextValue(value,timeOutText);
  if (getConnection().getLoginType() != null && !getConnection().getLoginType().equals(""String_Node_Str"")) {
    authBtn.setText(getConnection().getLoginType());
    if (getConnection().getLoginType().equalsIgnoreCase(BASIC)) {
      authBtn.select(0);
      stackLayout.topControl=basicComposite;
      stackComposite.layout();
    }
 else {
      authBtn.select(1);
      stackLayout.topControl=oauthComposite;
      stackComposite.layout();
    }
  }
 else {
    getConnection().setLoginType(BASIC);
  }
  setTextValue(getConnection().getWebServiceUrlTextForOAuth(),webServiceUrlTextForOAuth);
  if (webServiceUrlTextForOAuth.getText() == null || webServiceUrlTextForOAuth.getText().equals(""String_Node_Str"")) {
    webServiceUrlTextForOAuth.setText(TSALESFORCE_INPUT_URL_OAUTH);
    getConnection().setWebServiceUrlTextForOAuth(TSALESFORCE_INPUT_URL_OAUTH);
  }
  setTextValue(getConnection().getSalesforceVersion(),apiVersionText);
  if (apiVersionText.getText() == null || apiVersionText.getText().equals(""String_Node_Str"")) {
    apiVersionText.setText(TSALESFORCE_VERSION);
    getConnection().setSalesforceVersion(TSALESFORCE_VERSION);
  }
  setTextValue(getConnection().getConsumeKey(),consumeKeyText);
  setTextValue(getConnection().getConsumeSecret(),consumeKeySecretText);
  setTextValue(getConnection().getCallbackHost(),callbackHostText);
  setTextValue(getConnection().getCallbackPort(),callbackPortText);
  setTextValue(getConnection().getToken(),tokenText);
}",0.9983644095518482
126942,"public List<String> connectFromCustomModuleName(String proxy){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  try {
    if (loginType.equals(BASIC)) {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      salesforceAPI.login(endPoint,username,pwd,timeOut);
      ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
      if (currentAPI instanceof SalesforceModuleParseEnterprise) {
        describeGlobalResult=describeGlobal();
        if (describeGlobalResult != null) {
          types=describeGlobalResult.getTypes();
        }
      }
 else {
        if (currentAPI instanceof SalesforceModuleParserPartner) {
          SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
          SforceManagementImpl sforceManagement=partner.getSforceManagement();
          SessionHeader sessionHeader=sforceManagement.getSessionHeader();
          DescribeGlobal dg=new DescribeGlobal();
          com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
          dgsrs=dgr.getSobjects();
        }
      }
    }
 else {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      Token token=salesforceAPI.login(endPointForAuth,consumerKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,tokenProperties,timeOut);
      if (token != null) {
        org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
        OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumerKey);
        client.setClientSecret(consumeSecret);
        String endpoint=client.getSOAPEndpoint(token,salesforceVersion);
        boolean result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
        SessionHeader sessionHeader=sfMgr.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sfMgr.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetAllProxy();
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}","public List<String> connectFromCustomModuleName(String proxy){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  try {
    if (loginType.equalsIgnoreCase(BASIC)) {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      salesforceAPI.login(endPoint,username,pwd,timeOut);
      ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
      if (currentAPI instanceof SalesforceModuleParseEnterprise) {
        describeGlobalResult=describeGlobal();
        if (describeGlobalResult != null) {
          types=describeGlobalResult.getTypes();
        }
      }
 else {
        if (currentAPI instanceof SalesforceModuleParserPartner) {
          SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
          SforceManagementImpl sforceManagement=partner.getSforceManagement();
          SessionHeader sessionHeader=sforceManagement.getSessionHeader();
          DescribeGlobal dg=new DescribeGlobal();
          com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
          dgsrs=dgr.getSobjects();
        }
      }
    }
 else {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      Token token=salesforceAPI.login(endPointForAuth,consumerKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,tokenProperties,timeOut);
      if (token != null) {
        org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
        OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumerKey);
        client.setClientSecret(consumeSecret);
        String endpoint=client.getSOAPEndpoint(token,salesforceVersion);
        boolean result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
        SessionHeader sessionHeader=sfMgr.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sfMgr.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetAllProxy();
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}",0.9987222080245336
126943,"private synchronized Connection getConnection(String dbDriver,String url,String dbConnectionName) throws ClassNotFoundException, SQLException {
  debugSharedConnections();
  Connection connection=sharedConnections.get(dbConnectionName);
  if (connection == null) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str""+ ""String_Node_Str"");
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbDriver+ ""String_Node_Str"");
    Class.forName(dbDriver);
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    connection=DriverManager.getConnection(url);
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    sharedConnections.put(dbConnectionName,connection);
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str"");
  }
 else   if (connection.isClosed()) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str""+ ""String_Node_Str"");
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    connection=DriverManager.getConnection(url);
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    sharedConnections.put(dbConnectionName,connection);
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str"");
  }
 else {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  return connection;
}","private synchronized Connection getConnection(String dbDriver,String url,String dbConnectionName) throws ClassNotFoundException, SQLException {
  if (DEBUG) {
    Set<String> keySet=sharedConnections.keySet();
    System.out.print(""String_Node_Str"");
    for (    String key : keySet) {
      System.out.print(""String_Node_Str"" + key);
    }
    System.out.println();
  }
  Connection connection=sharedConnections.get(dbConnectionName);
  if (connection == null) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    Class.forName(dbDriver);
    connection=DriverManager.getConnection(url);
    sharedConnections.put(dbConnectionName,connection);
  }
 else   if (connection.isClosed()) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    connection=DriverManager.getConnection(url);
    sharedConnections.put(dbConnectionName,connection);
  }
 else {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  return connection;
}",0.2373553719008264
126944,"public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  boolean check=Pattern.matches(""String_Node_Str"",fieldName);
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  if (name.equals(EDatabaseTypeName.MYSQL) && fieldName.contains(JAVA_END_STRING)) {
    String newFieldName=TalendQuoteUtils.addQuotes(fieldName);
    return newFieldName;
  }
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name) && check) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}","public static String addQuotesWithSpaceField(String fieldName,String dbType){
  if (fieldName == null) {
    fieldName=""String_Node_Str"";
  }
  if (fieldName.startsWith(""String_Node_Str"") && fieldName.endsWith(""String_Node_Str"")) {
    return fieldName;
  }
  boolean b=true;
  for (int i=0; i < fieldName.length(); i++) {
    char c=fieldName.charAt(i);
    b=b && c >= '0' && c <= '9';
  }
  boolean check=Pattern.matches(""String_Node_Str"",fieldName);
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  boolean isCheck=!CorePlugin.getDefault().getPreferenceStore().getBoolean(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  if (!b) {
    if (isCheck && isPSQLSimilar(name) && check) {
      return fieldName;
    }
  }
  String newFieldName=fieldName;
  String quote=getQuoteByDBType(name);
  if (!newFieldName.contains(quote)) {
    newFieldName=addQuotes(newFieldName,quote);
  }
  return newFieldName;
}",0.9125925925925926
126945,"private synchronized Connection getConnection(String dbDriver,String url,String dbConnectionName) throws ClassNotFoundException, SQLException {
  if (DEBUG) {
    Set<String> keySet=sharedConnections.keySet();
    System.out.print(""String_Node_Str"");
    for (    String key : keySet) {
      System.out.print(""String_Node_Str"" + key);
    }
    System.out.println();
  }
  Connection connection=sharedConnections.get(dbConnectionName);
  if (connection == null) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    Class.forName(dbDriver);
    connection=DriverManager.getConnection(url);
    sharedConnections.put(dbConnectionName,connection);
  }
 else   if (connection.isClosed()) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    connection=DriverManager.getConnection(url);
    sharedConnections.put(dbConnectionName,connection);
  }
 else {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  return connection;
}","private synchronized Connection getConnection(String dbDriver,String url,String dbConnectionName) throws ClassNotFoundException, SQLException {
  debugSharedConnections();
  Connection connection=sharedConnections.get(dbConnectionName);
  if (connection == null) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str""+ ""String_Node_Str"");
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbDriver+ ""String_Node_Str"");
    Class.forName(dbDriver);
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    connection=DriverManager.getConnection(url);
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    sharedConnections.put(dbConnectionName,connection);
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str"");
  }
 else   if (connection.isClosed()) {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str""+ ""String_Node_Str"");
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    connection=DriverManager.getConnection(url);
    logMessage(Level.INFO,cid + ""String_Node_Str"" + url+ ""String_Node_Str"");
    sharedConnections.put(dbConnectionName,connection);
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str"");
  }
 else {
    if (DEBUG) {
      System.out.println(""String_Node_Str"" + dbConnectionName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    logMessage(Level.DEBUG,cid + ""String_Node_Str"" + dbConnectionName+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  return connection;
}",0.2909090909090909
126946,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  try {
    temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
    sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
      temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
    }
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
      temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
    }
    String dbType=iMetadataConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    ConnectionUtils.closeConnection(sqlConn);
    MetadataConnectionUtils.closeDerbyDriver();
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  try {
    temConnection=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(iMetadataConnection,temConnection);
    sqlConn=MetadataConnectionUtils.checkConnection(iMetadataConnection).getObject();
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
      temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
    }
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
      temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
    }
    String dbType=iMetadataConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    MetadataConnectionUtils.closeDerbyDriver();
  }
}",0.9906090689562652
126947,"@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  try {
    if (sqlConnection == null || sqlConnection.isClosed()) {
      this.checkConnection(metadataBean);
    }
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    ConnectionUtils.closeConnection(sqlConnection);
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}","@Override public Connection fillUIConnParams(IMetadataConnection metadataBean,Connection connection){
  Connection newConnection=null;
  if (connection == null) {
    newConnection=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  }
  if (super.fillUIConnParams(metadataBean,newConnection == null ? connection : newConnection) == null) {
    return null;
  }
  DatabaseConnection dbconn=null;
  if (newConnection != null) {
    dbconn=(DatabaseConnection)newConnection;
  }
 else {
    dbconn=(DatabaseConnection)connection;
  }
  if (newConnection != null) {
    dbconn.setDriverJarPath(metadataBean.getDriverJarPath());
    dbconn.setProductId(metadataBean.getProduct());
    dbconn.setDbmsId(metadataBean.getMapping());
    dbconn.setAdditionalParams(metadataBean.getAdditionalParams());
    dbconn.setDriverClass(metadataBean.getDriverClass());
    dbconn.setDatabaseType(metadataBean.getDbType());
    dbconn.setName(metadataBean.getLabel());
    dbconn.setLabel(metadataBean.getLabel());
    dbconn.setVersion(metadataBean.getVersion());
    dbconn.setUiSchema(metadataBean.getUiSchema());
    dbconn.setSQLMode(metadataBean.isSqlMode());
    dbconn.setSID(metadataBean.getDatabase());
    String distro=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String distroVersion=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    String hiveModel=(String)metadataBean.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,distro);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,distroVersion);
    dbconn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveModel);
  }
  try {
    if (sqlConnection == null || sqlConnection.isClosed()) {
      this.checkConnection(metadataBean);
    }
    if (newConnection != null) {
      fillMetadataParams(metadataBean,newConnection);
    }
    DatabaseMetaData dbMetadata=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
      dbMetadata=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataBean);
    }
 else {
      dbMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,dbconn,false);
    }
    String productName=dbMetadata.getDatabaseProductName() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductName();
    String productVersion=dbMetadata.getDatabaseProductVersion() == null ? PluginConstant.EMPTY_STRING : dbMetadata.getDatabaseProductVersion();
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_NAME,productName);
    TaggedValueHelper.setTaggedValue(dbconn,TaggedValueHelper.DB_PRODUCT_VERSION,productVersion);
    boolean isHive=dbconn.getDatabaseType().equals(EDatabaseTypeName.HIVE.getDisplayName());
    boolean isHiveJdbc=dbconn.getDatabaseType().equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName()) && dbconn.getDriverClass() != null && dbconn.getDriverClass().equals(EDatabase4DriverClassName.HIVE.getDriverClass());
    if (!isHive && !isHiveJdbc) {
      String identifierQuote=dbMetadata.getIdentifierQuoteString();
      ConnectionHelper.setIdentifierQuoteString(identifierQuote == null ? ""String_Node_Str"" : identifierQuote,dbconn);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
catch (  ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
  }
catch (  InstantiationException e) {
    CommonExceptionHandler.process(e);
  }
catch (  IllegalAccessException e) {
    CommonExceptionHandler.process(e);
  }
 finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
    if (driver != null && MetadataConnectionUtils.isDerbyRelatedDb(metadataBean.getDriverClass(),metadataBean.getDbType())) {
      try {
        driver.connect(""String_Node_Str"",null);
      }
 catch (      SQLException e) {
      }
    }
  }
  if (newConnection != null) {
    return newConnection;
  }
 else {
    return connection;
  }
}",0.9949575697946133
126948,"/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    ConnectionUtils.closeConnection(connection);
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}","/** 
 * DOC cantoine. Method to test DataBaseConnection.
 * @param dbVersionString
 * @param String driverClass
 * @param String urlString pwd
 * @param String username
 * @param String pwd
 * @return ConnectionStatus : the result of connection(boolean Result, String messageException)
 */
public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}",0.9924030387844862
126949,"public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}","public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isHsql=ConnectionUtils.isHsql(url);
          if (isHsql) {
            Statement statement=conn.createStatement();
            statement.executeUpdate(""String_Node_Str"");
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.7025440313111546
126950,"/** 
 * DOC cantoine. Method to connect to DataBase.
 * @param String driverClass
 * @param String urlString pwdT
 * @param String username
 * @param String pwd
 * @param String schemaBase
 */
public List getConnection(String dbType,String url,String username,String pwd,String dataBase,String schemaBase,final String driverClassName,final String driverJarPath,String dbVersion,String additionalParams){
  boolean isColsed=false;
  List conList=new ArrayList();
  try {
    if (conn != null) {
      isColsed=conn.isClosed();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
  }
  List list=new ArrayList();
  DriverShim wapperDriver=null;
  if (isReconnect || conn == null || isColsed) {
    try {
      ConnectionUtils.closeConnection(conn);
      checkDBConnectionTimeout();
      list=connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            conn=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
      if (schemaBase != null && !schemaBase.equals(""String_Node_Str"")) {
        final boolean equals=EDatabaseTypeName.getTypeFromDbType(dbType).getProduct().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
        if (!ExtractMetaDataFromDataBase.checkSchemaConnection(schemaBase,conn,equals,dbType)) {
          schema=null;
        }
      }
 else {
        boolean teradata=EDatabaseTypeName.getTypeFromDbType(dbType).getProduct().equals(EDatabaseTypeName.TERADATA.getProduct());
        boolean as400=EDatabaseTypeName.getTypeFromDbType(dbType).getProduct().equals(EDatabaseTypeName.AS400.getProduct());
        if (teradata) {
          schema=dataBase;
        }
 else         if (as400) {
          schema=retrieveSchemaPatternForAS400(url);
        }
 else         if (EDatabaseTypeName.SAS.getProduct().equals(EDatabaseTypeName.getTypeFromDbType(dbType).getProduct())) {
          schema=dataBase;
        }
 else {
          schema=null;
        }
      }
      conList.add(conn);
      if (wapperDriver != null) {
        conList.add(wapperDriver);
      }
    }
 catch (    MissingDriverException e) {
      throw e;
    }
catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return conList;
}","/** 
 * DOC cantoine. Method to connect to DataBase.
 * @param String driverClass
 * @param String urlString pwdT
 * @param String username
 * @param String pwd
 * @param String schemaBase
 */
public List getConnection(String dbType,String url,String username,String pwd,String dataBase,String schemaBase,final String driverClassName,final String driverJarPath,String dbVersion,String additionalParams){
  boolean isColsed=false;
  List conList=new ArrayList();
  try {
    if (conn != null) {
      isColsed=conn.isClosed();
    }
  }
 catch (  Exception e) {
    log.error(e.toString());
  }
  List list=new ArrayList();
  DriverShim wapperDriver=null;
  if (isReconnect || conn == null || isColsed) {
    try {
      closeConnection(true);
      checkDBConnectionTimeout();
      list=connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersion,additionalParams);
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof Connection) {
            conn=(Connection)list.get(i);
          }
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
      if (schemaBase != null && !schemaBase.equals(""String_Node_Str"")) {
        final boolean equals=EDatabaseTypeName.getTypeFromDbType(dbType).getProduct().equals(EDatabaseTypeName.ORACLEFORSID.getProduct());
        if (!ExtractMetaDataFromDataBase.checkSchemaConnection(schemaBase,conn,equals,dbType)) {
          schema=null;
        }
      }
 else {
        boolean teradata=EDatabaseTypeName.getTypeFromDbType(dbType).getProduct().equals(EDatabaseTypeName.TERADATA.getProduct());
        boolean as400=EDatabaseTypeName.getTypeFromDbType(dbType).getProduct().equals(EDatabaseTypeName.AS400.getProduct());
        if (teradata) {
          schema=dataBase;
        }
 else         if (as400) {
          schema=retrieveSchemaPatternForAS400(url);
        }
 else         if (EDatabaseTypeName.SAS.getProduct().equals(EDatabaseTypeName.getTypeFromDbType(dbType).getProduct())) {
          schema=dataBase;
        }
 else {
          schema=null;
        }
      }
      conList.add(conn);
      if (wapperDriver != null) {
        conList.add(wapperDriver);
      }
    }
 catch (    MissingDriverException e) {
      throw e;
    }
catch (    SQLException e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
      throw new RuntimeException(e);
    }
  }
  return conList;
}",0.993025958930647
126951,"/** 
 * DOC ggu Comment method ""returnMetadataColumnsFormTable"".
 * @param metadataConnection
 * @param tableLabel
 * @param dontCreateClose
 * @return
 * @deprecated because still use it
 */
@Deprecated public synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection metadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbType=metadataConnection.getDbType();
    boolean isHive=EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType);
    if (!isHive && (needCreateAndClose || extractMeta.getConn() == null || extractMeta.getConn().isClosed())) {
      List list=extractMeta.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    DatabaseMetaData dbMetaData=null;
    if (isHive) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      dbMetaData=extractMeta.getDatabaseMetaData(extractMeta.getConn(),dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    tableLabel=checkTableLabel(tableLabel);
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)metadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,metadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    if (needCreateAndClose) {
      ConnectionUtils.closeConnection(extractMeta.getConn());
    }
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnMetadataColumnsFormTable"".
 * @param metadataConnection
 * @param tableLabel
 * @param dontCreateClose
 * @return
 * @deprecated because still use it
 */
@Deprecated public synchronized List<TdColumn> returnMetadataColumnsFormTable(IMetadataConnection metadataConnection,String tableLabel,boolean... dontCreateClose){
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbType=metadataConnection.getDbType();
    boolean isHive=EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType);
    if (!isHive && (needCreateAndClose || extractMeta.getConn() == null || extractMeta.getConn().isClosed())) {
      List list=extractMeta.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
      if (list != null && list.size() > 0) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof DriverShim) {
            wapperDriver=(DriverShim)list.get(i);
          }
        }
      }
    }
    DatabaseMetaData dbMetaData=null;
    if (isHive) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      dbMetaData=extractMeta.getDatabaseMetaData(extractMeta.getConn(),dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    tableLabel=checkTableLabel(tableLabel);
    List<String> cataAndShema=getTableCatalogAndSchema((DatabaseConnection)metadataConnection.getCurrentConnection(),tableLabel);
    metadataColumns=extractColumns(dbMetaData,metadataConnection,dbType,cataAndShema.get(0),cataAndShema.get(1),tableLabel);
  }
 catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
 finally {
    if (needCreateAndClose && extractMeta.getConn() != null) {
      ConnectionUtils.closeConnection(extractMeta.getConn());
    }
  }
  return metadataColumns;
}",0.9930247305009512
126952,"/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      if (needCreateAndClose || extractMeta.getConn() == null || extractMeta.getConn().isClosed()) {
        List list=extractMeta.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
        }
      }
      dbMetaData=extractMeta.getDatabaseMetaData(extractMeta.getConn(),dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(extractMeta.getConn(),newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      extractMeta.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    ConnectionUtils.closeConnection(extractMeta.getConn());
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      if (needCreateAndClose || extractMeta.getConn() == null || extractMeta.getConn().isClosed()) {
        List list=extractMeta.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
        }
      }
      dbMetaData=extractMeta.getDatabaseMetaData(extractMeta.getConn(),dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(extractMeta.getConn(),newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      if (tableLabel.contains(""String_Node_Str"")) {
        tableLabel=tableLabel.replace(""String_Node_Str"",""String_Node_Str"");
      }
      newNode.setValue(tableLabel);
      metadataColumns=MetadataFillFactory.getDBInstance().fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      extractMeta.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (extractMeta.getConn() != null) {
      ConnectionUtils.closeConnection(extractMeta.getConn());
    }
  }
  return metadataColumns;
}",0.9924742743050222
126953,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData databaseMetaData=null;
        if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metaConnection.getDbType())) {
          databaseMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
        }
 else {
          databaseMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
        }
        if (sqlConn != null) {
          MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    boolean hsql=ConnectionUtils.isHsql(metadataConnection.getUrl());
    if (hsql) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    closeDerbyDriver();
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @param dbConn
 * @return
 */
public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metadataConnection){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=metadataConnection;
      if (metadataConnection == null) {
        metaConnection=ConvertionHelper.convert(dbConn);
      }
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData databaseMetaData=null;
        if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metaConnection.getDbType())) {
          databaseMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
        }
 else {
          databaseMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
        }
        if (sqlConn != null) {
          MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,true));
          MetadataFillFactory.getDBInstance().fillSchemas(dbConn,databaseMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,databaseMetaData,false));
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    boolean hsql=ConnectionUtils.isHsql(metadataConnection.getUrl());
    if (hsql && sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    closeDerbyDriver();
  }
  return dbConn;
}",0.9948745616401404
126954,"private String checkDBVersion(){
  String msg=null;
  EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  DatabaseConnection connection=getConnection();
  List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connection.getDatabaseType());
  if (version != null && dbTypeList.size() > 1) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(getConnection().getDatabaseType());
    if (dbType == null || dbType.equals(EDatabaseTypeName.ACCESS) || dbType.equals(EDatabaseTypeName.PSQL) || dbType.equals(EDatabaseTypeName.PLUSPSQL)) {
      return null;
    }
    if (connection.getDriverClass() == null && dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=extractMeta.getDriverClassByDbType(connection.getDatabaseType());
      connection.setDriverClass(driverClass);
    }
    java.sql.Connection sqlConn=MetadataConnectionUtils.checkConnection(connection).getObject();
    if (sqlConn != null) {
      try {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,connection);
        int versionNum=dm.getDatabaseMajorVersion();
        String[] strArray=version.getVersionValue().split(""String_Node_Str"");
        if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
          msg=null;
        }
 else {
          msg=""String_Node_Str"" + strArray[0] + ""String_Node_Str""+ versionNum+ ""String_Node_Str"";
        }
      }
 catch (      SQLException exp) {
        ExceptionHandler.process(exp);
      }
 finally {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
  return msg;
}","private String checkDBVersion(){
  String msg=null;
  EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  DatabaseConnection connection=getConnection();
  List<EDatabaseVersion4Drivers> dbTypeList=EDatabaseVersion4Drivers.indexOfByDbType(connection.getDatabaseType());
  if (version != null && dbTypeList.size() > 1) {
    EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(getConnection().getDatabaseType());
    if (dbType == null || dbType.equals(EDatabaseTypeName.ACCESS) || dbType.equals(EDatabaseTypeName.PSQL) || dbType.equals(EDatabaseTypeName.PLUSPSQL)) {
      return null;
    }
    if (connection.getDriverClass() == null && dbType != EDatabaseTypeName.GENERAL_JDBC) {
      String driverClass=extractMeta.getDriverClassByDbType(connection.getDatabaseType());
      connection.setDriverClass(driverClass);
    }
    java.sql.Connection sqlConn=MetadataConnectionUtils.checkConnection(connection).getObject();
    if (sqlConn != null) {
      try {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,connection);
        int versionNum=dm.getDatabaseMajorVersion();
        String[] strArray=version.getVersionValue().split(""String_Node_Str"");
        if (strArray.length > 1 && strArray[1].startsWith(Integer.toString(versionNum))) {
          msg=null;
        }
 else {
          msg=""String_Node_Str"" + strArray[0] + ""String_Node_Str""+ versionNum+ ""String_Node_Str"";
        }
      }
 catch (      SQLException exp) {
        ExceptionHandler.process(exp);
      }
 finally {
        if (sqlConn != null) {
          ConnectionUtils.closeConnection(sqlConn);
        }
      }
    }
  }
  return msg;
}",0.9877388080980896
126955,"/** 
 * DOC Comment method ""updateConnectionInformation"".
 * @param dbConn
 * @throws SQLException
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
private void updateConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metaConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  String dbType=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
    sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
    dbType=metaConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
      }
 else {
        dbMetaData=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metaConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,false));
    }
  }
  finally {
    ConnectionUtils.closeConnection(sqlConn);
    MetadataConnectionUtils.closeDerbyDriver();
  }
}","/** 
 * DOC Comment method ""updateConnectionInformation"".
 * @param dbConn
 * @throws SQLException
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
private void updateConnectionInformation(DatabaseConnection dbConn,IMetadataConnection metaConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  String dbType=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
    sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
    dbType=metaConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metaConnection);
      }
 else {
        dbMetaData=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metaConnection.getDatabase());
      }
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dbMetaData,metaConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dbMetaData,false));
    }
  }
  finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    MetadataConnectionUtils.closeDerbyDriver();
  }
}",0.9889205444761
126956,"private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      ConnectionUtils.closeConnection(sqlConn);
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}","private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}",0.9918358802595773
126957,"@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=extractMeta.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=extractMeta.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=extractMeta.getConn().createStatement();
          extractMeta.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      for (      String filter : tableNameFilter) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    String driverClass=metadataConn.getDriverClass();
    ConnectionUtils.closeConnection(conn);
    if (driver != null) {
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=extractMeta.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=extractMeta.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=extractMeta.getConn().createStatement();
          extractMeta.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      for (      String filter : tableNameFilter) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=MetadataFillFactory.getDBInstance().fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    String driverClass=metadataConn.getDriverClass();
    if (conn != null) {
      ConnectionUtils.closeConnection(conn);
    }
    if (driver != null) {
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}",0.9968895800933126
126958,"/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
          subFolder.setParent(currentFolderItem);
          cont.setProperty(property);
          cont.setId(property.getId());
          addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
          folderNamesFounds.add(curItem.getProperty().getLabel());
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              String curFile=current.getFullPath().toPortableString();
              if (!invalidFiles.contains(curFile)) {
                invalidFiles.add(curFile);
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                deleteResource(current);
              }
 catch (              PersistenceException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}","/** 
 * DOC smallet Comment method ""addFolderMembers"".
 * @param < T > - DOC smallet
 * @param type - DOC smallet
 * @param toReturn - DOC smallet
 * @param objectFolder - DOC smallet
 * @param onlyLastVersion specify <i>true</i> if only the last version of an object must be returned, false for allversion
 * @throws PersistenceException - DOC smallet
 */
@Override protected <K,T>void addFolderMembers(Project project,ERepositoryObjectType type,Container<K,T> toReturn,Object objectFolder,boolean onlyLastVersion,boolean... options) throws PersistenceException {
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  FolderItem currentFolderItem=null;
  IFolder physicalFolder;
  if (objectFolder instanceof IFolder) {
    if (!((IFolder)objectFolder).getName().equals(BIN)) {
      currentFolderItem=folderHelper.getFolder(((IFolder)objectFolder).getProjectRelativePath());
      if (currentFolderItem == null) {
        currentFolderItem=folderHelper.createFolder(((IFolder)objectFolder).getProjectRelativePath().toPortableString());
      }
    }
    physicalFolder=(IFolder)objectFolder;
  }
 else {
    currentFolderItem=(FolderItem)objectFolder;
    physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
  }
  List<String> propertyFounds=new ArrayList<String>();
  List<String> folderNamesFounds=new ArrayList<String>();
  List<Item> invalidItems=new ArrayList<Item>();
  if (currentFolderItem != null) {
    for (    Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
      Property property=curItem.getProperty();
      if (property != null) {
        if (curItem instanceof FolderItem) {
          FolderItem subFolder=(FolderItem)curItem;
          IFolder existFolder=physicalFolder.getFolder(subFolder.getProperty().getLabel());
          if (existFolder != null && existFolder.exists()) {
            Container<K,T> cont=toReturn.addSubContainer(subFolder.getProperty().getLabel());
            subFolder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,curItem,onlyLastVersion,options);
            folderNamesFounds.add(curItem.getProperty().getLabel());
          }
        }
 else {
          if (property.eResource() != null) {
            property.getItem().setParent(currentFolderItem);
            IRepositoryViewObject currentObject;
            if (options.length > 0 && options[0] == true) {
              currentObject=new RepositoryViewObject(property);
            }
 else {
              currentObject=new RepositoryObject(property);
            }
            propertyFounds.add(property.eResource().getURI().lastSegment());
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
            addToHistory(property.getId(),type,property.getItem().getState().getPath());
          }
 else {
            invalidItems.add(curItem);
          }
        }
      }
 else {
        invalidItems.add(curItem);
      }
    }
    for (    Item item : invalidItems) {
      item.setParent(null);
    }
    currentFolderItem.getChildren().removeAll(invalidItems);
  }
  if (physicalFolder.exists()) {
    List<String> physicalPropertyFounds=new ArrayList<String>();
    List<String> physicalDirectoryFounds=new ArrayList<String>();
    for (    IResource current : ResourceUtils.getMembers(physicalFolder)) {
      if (current instanceof IFile) {
        try {
          String fileName=((IFile)current).getName();
          IRepositoryViewObject currentObject=null;
          physicalPropertyFounds.add(fileName);
          if (xmiResourceManager.isPropertyFile((IFile)current) && !propertyFounds.contains(fileName)) {
            Property property=null;
            try {
              property=xmiResourceManager.loadProperty(current);
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            if (property != null) {
              if (property.getItem() == null || property.getItem().getState() == null) {
                if (type != null) {
                  log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                }
 else {
                  log.error(""String_Node_Str"" + property.getLabel());
                }
                continue;
              }
              if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                currentFolderItem.getChildren().add(property.getItem());
                property.getItem().setParent(currentFolderItem);
              }
              if (options.length > 0 && options[0] == true) {
                currentObject=new RepositoryViewObject(property);
              }
 else {
                currentObject=new RepositoryObject(property);
              }
            }
 else {
              String curFile=current.getFullPath().toPortableString();
              if (!invalidFiles.contains(curFile)) {
                invalidFiles.add(curFile);
                log.error(Messages.getString(""String_Node_Str"") + current);
              }
            }
            addItemToContainer(toReturn,currentObject,onlyLastVersion);
          }
        }
 catch (        IncorrectFileException e) {
          ExceptionHandler.process(e);
        }
catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
 else       if (current instanceof IFolder) {
        if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current)) {
          physicalDirectoryFounds.add(((IFolder)current).getName());
          if (!folderNamesFounds.contains(((IFolder)current).getName())) {
            Container<K,T> cont=toReturn.addSubContainer(current.getName());
            FolderItem folder=folderHelper.getFolder(current.getProjectRelativePath());
            Property property=null;
            if (folder == null) {
              folder=folderHelper.createFolder(current.getProjectRelativePath().toString());
            }
            property=folder.getProperty();
            folder.setParent(currentFolderItem);
            cont.setProperty(property);
            cont.setId(property.getId());
            addFolderMembers(project,type,cont,current,onlyLastVersion,options);
          }
          if (current.getName().equals(BIN)) {
            IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
            if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
              try {
                deleteResource(current);
              }
 catch (              PersistenceException e) {
              }
            }
          }
        }
      }
    }
    if (currentFolderItem != null) {
      List<Item> itemsDeleted=new ArrayList<Item>();
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        if (!(curItem instanceof FolderItem)) {
          String name;
          if (curItem.eResource() != null) {
            name=curItem.eResource().getURI().lastSegment();
          }
 else {
            name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
          }
          if (!physicalPropertyFounds.contains(name)) {
            itemsDeleted.add(curItem);
          }
        }
 else {
          if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
            itemsDeleted.add(curItem);
          }
        }
      }
      for (      Item item : itemsDeleted) {
        item.setParent(null);
        Iterator<IRepositoryViewObject> it=(Iterator<IRepositoryViewObject>)toReturn.getMembers().iterator();
        while (it.hasNext()) {
          IRepositoryViewObject object=it.next();
          if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
            it.remove();
          }
        }
      }
      currentFolderItem.getChildren().removeAll(itemsDeleted);
    }
  }
}",0.9891083625623038
126959,"/** 
 * DOC YeXiaowei Comment method ""getSalesforceSchemaValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getSalesforceSchemaValue(SalesforceSchemaConnection connection,String value,IMetadataTable table){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getWebServiceUrl()) || isContextMode(connection,connection.getWebServiceUrlTextForOAuth())) {
      if (connection.getLoginType().equals(""String_Node_Str"")) {
        return connection.getWebServiceUrl();
      }
 else {
        return connection.getWebServiceUrlTextForOAuth();
      }
    }
 else {
      if (connection.getLoginType().equals(""String_Node_Str"")) {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrl());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrlTextForOAuth());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (connection.isUseCustomModuleName()) {
      return ""String_Node_Str"";
    }
 else {
      if (table != null) {
        EList<SalesforceModuleUnit> moduleList=connection.getModules();
        for (        SalesforceModuleUnit unit : moduleList) {
          if (table.getLabel().equals(unit.getModuleName())) {
            return unit.getModuleName();
          }
        }
      }
      return connection.getModuleName();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getQueryCondition())) {
      return connection.getQueryCondition();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getQueryCondition());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getBatchSize();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.isUseProxy();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUsername())) {
      return connection.getProxyUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getTimeOut())) {
      return connection.getTimeOut();
    }
 else {
      return connection.getTimeOut();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSalesforceVersion())) {
      return connection.getSalesforceVersion();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSalesforceVersion());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeKey())) {
      return connection.getConsumeKey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeKey());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeSecret())) {
      return connection.getConsumeSecret();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeSecret());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackHost())) {
      return connection.getCallbackHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getCallbackHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackPort())) {
      return connection.getCallbackPort();
    }
 else {
      return connection.getCallbackPort();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLoginType())) {
      return connection.getLoginType();
    }
 else {
      if (connection.getLoginType().equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""getSalesforceSchemaValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getSalesforceSchemaValue(SalesforceSchemaConnection connection,String value,IMetadataTable table){
  if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getWebServiceUrl()) || isContextMode(connection,connection.getWebServiceUrlTextForOAuth())) {
      if (connection.getLoginType().equalsIgnoreCase(""String_Node_Str"")) {
        return connection.getWebServiceUrl();
      }
 else {
        return connection.getWebServiceUrlTextForOAuth();
      }
    }
 else {
      if (connection.getLoginType().equalsIgnoreCase(""String_Node_Str"")) {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrl());
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getWebServiceUrlTextForOAuth());
      }
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getUserName())) {
      return connection.getUserName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUserName());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (connection.isUseCustomModuleName()) {
      return ""String_Node_Str"";
    }
 else {
      if (table != null) {
        EList<SalesforceModuleUnit> moduleList=connection.getModules();
        for (        SalesforceModuleUnit unit : moduleList) {
          if (table.getLabel().equals(unit.getModuleName())) {
            return unit.getModuleName();
          }
        }
      }
      return connection.getModuleName();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getQueryCondition())) {
      return connection.getQueryCondition();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getQueryCondition());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.getBatchSize();
  }
 else   if (""String_Node_Str"".equals(value)) {
    return connection.isUseProxy();
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyHost())) {
      return connection.getProxyHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPort())) {
      return connection.getProxyPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPort());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyUsername())) {
      return connection.getProxyUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyUsername());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getProxyPassword())) {
      return connection.getProxyPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getProxyPassword());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getTimeOut())) {
      return connection.getTimeOut();
    }
 else {
      return connection.getTimeOut();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getSalesforceVersion())) {
      return connection.getSalesforceVersion();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getSalesforceVersion());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeKey())) {
      return connection.getConsumeKey();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeKey());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getConsumeSecret())) {
      return connection.getConsumeSecret();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getConsumeSecret());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackHost())) {
      return connection.getCallbackHost();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getCallbackHost());
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getCallbackPort())) {
      return connection.getCallbackPort();
    }
 else {
      return connection.getCallbackPort();
    }
  }
 else   if (""String_Node_Str"".equals(value)) {
    if (isContextMode(connection,connection.getLoginType())) {
      return connection.getLoginType();
    }
 else {
      if (connection.getLoginType().equalsIgnoreCase(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
  return null;
}",0.9970478252312536
126960,"static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equals(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.UserName;
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.Password;
    ssConn.setPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyHost;
    ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPort;
    ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyUsername;
    ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPassword;
    ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerKey;
    ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerSecret;
    ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackHost;
    ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackPort;
    ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SalesforceVersion;
    ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.token;
    ssConn.setToken(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
}","static void setSalesforcePropertiesForContextMode(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return;
  }
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equalsIgnoreCase(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ssConn.setWebServiceUrl(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.UserName;
    ssConn.setUserName(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.Password;
    ssConn.setPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyHost;
    ssConn.setProxyHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPort;
    ssConn.setProxyPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyUsername;
    ssConn.setProxyUsername(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SFProxyPassword;
    ssConn.setProxyPassword(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ssConn.setWebServiceUrlTextForOAuth(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerKey;
    ssConn.setConsumeKey(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.ConsumerSecret;
    ssConn.setConsumeSecret(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackHost;
    ssConn.setCallbackHost(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.CallbackPort;
    ssConn.setCallbackPort(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.SalesforceVersion;
    ssConn.setSalesforceVersion(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.token;
    ssConn.setToken(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.BatchSize;
    ssConn.setBatchSize(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.TimeOut;
    ssConn.setTimeOut(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
    paramName=prefixName + EParamName.QueryCondition;
    ssConn.setQueryCondition(ContextParameterUtils.getNewScriptCode(paramName,LANGUAGE));
  }
}",0.9983839689722044
126961,"static List<IContextParameter> getSalesforceVariables(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equals(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrl());
    paramName=prefixName + EParamName.UserName;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getUserName());
    paramName=prefixName + EParamName.Password;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getPassword(),JavaTypesManager.PASSWORD);
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
    paramName=prefixName + EParamName.SFProxyHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyHost());
    paramName=prefixName + EParamName.SFProxyPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPort());
    paramName=prefixName + EParamName.SFProxyUsername;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyUsername());
    paramName=prefixName + EParamName.SFProxyPassword;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPassword());
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrlTextForOAuth());
    paramName=prefixName + EParamName.ConsumerKey;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeKey());
    paramName=prefixName + EParamName.ConsumerSecret;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeSecret());
    paramName=prefixName + EParamName.CallbackHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackHost());
    paramName=prefixName + EParamName.CallbackPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackPort(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.SalesforceVersion;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getSalesforceVersion());
    paramName=prefixName + EParamName.token;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getToken());
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
  }
  return varList;
}","static List<IContextParameter> getSalesforceVariables(String prefixName,SalesforceSchemaConnection ssConn){
  if (ssConn == null || prefixName == null) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  prefixName=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  if (ssConn.getLoginType().equalsIgnoreCase(BASIC)) {
    paramName=prefixName + EParamName.WebServiceUrl;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrl());
    paramName=prefixName + EParamName.UserName;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getUserName());
    paramName=prefixName + EParamName.Password;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getPassword(),JavaTypesManager.PASSWORD);
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
    paramName=prefixName + EParamName.SFProxyHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyHost());
    paramName=prefixName + EParamName.SFProxyPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPort());
    paramName=prefixName + EParamName.SFProxyUsername;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyUsername());
    paramName=prefixName + EParamName.SFProxyPassword;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getProxyPassword());
  }
 else {
    paramName=prefixName + EParamName.WebServiceUrlForOauth;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getWebServiceUrlTextForOAuth());
    paramName=prefixName + EParamName.ConsumerKey;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeKey());
    paramName=prefixName + EParamName.ConsumerSecret;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getConsumeSecret());
    paramName=prefixName + EParamName.CallbackHost;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackHost());
    paramName=prefixName + EParamName.CallbackPort;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getCallbackPort(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.SalesforceVersion;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getSalesforceVersion());
    paramName=prefixName + EParamName.token;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getToken());
    paramName=prefixName + EParamName.BatchSize;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getBatchSize());
    paramName=prefixName + EParamName.TimeOut;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getTimeOut(),JavaTypesManager.INTEGER);
    paramName=prefixName + EParamName.QueryCondition;
    ConnectionContextHelper.createParameters(varList,paramName,ssConn.getQueryCondition());
  }
  return varList;
}",0.9985079080871382
126962,"/** 
 * DOC zli Comment method ""readMetadataDetail"".
 */
public IMetadataTable readMetadataDetail(){
  String moduleName=getConnection().getModuleName();
  if (moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  String webServiceUrl=getConnection().getWebServiceUrl();
  String userName=getConnection().getUserName();
  String password=getConnection().getPassword();
  String timeOut=getConnection().getTimeOut();
  String betchSize=getConnection().getBatchSize();
  boolean useProxy=getConnection().isUseProxy();
  boolean useHttp=getConnection().isUseHttpProxy();
  String proxyHost=getConnection().getProxyHost();
  String proxyPort=getConnection().getProxyPort();
  String proxyUsername=getConnection().getProxyUsername();
  String proxyPassword=getConnection().getProxyPassword();
  String webServiceUrlForOauth=getConnection().getWebServiceUrlTextForOAuth();
  String comsumeKey=getConnection().getConsumeKey();
  String consumeSecret=getConnection().getConsumeSecret();
  String callbackHost=getConnection().getCallbackHost();
  String callbackPort=getConnection().getCallbackPort();
  String salesforceVersion=getConnection().getSalesforceVersion();
  String token=getConnection().getToken();
  String loginType=getConnection().getLoginType();
  if (isContextMode() && getContextModeManager() != null) {
    webServiceUrl=getContextModeManager().getOriginalValue(webServiceUrl);
    userName=getContextModeManager().getOriginalValue(userName);
    password=getContextModeManager().getOriginalValue(password);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    betchSize=getContextModeManager().getOriginalValue(betchSize);
    useProxy=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useProxy)));
    useHttp=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useHttp)));
    proxyHost=getContextModeManager().getOriginalValue(proxyHost);
    proxyPort=getContextModeManager().getOriginalValue(proxyPort);
    proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
    proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
    webServiceUrlForOauth=getContextModeManager().getOriginalValue(webServiceUrlForOauth);
    comsumeKey=getContextModeManager().getOriginalValue(comsumeKey);
    consumeSecret=getContextModeManager().getOriginalValue(consumeSecret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    salesforceVersion=getContextModeManager().getOriginalValue(salesforceVersion);
    token=getContextModeManager().getOriginalValue(token);
    loginType=getContextModeManager().getOriginalValue(loginType);
  }
  if (loginType.equals(BASIC)) {
    metadataTableOrder=getMetadatasForSalesforce(webServiceUrl,userName,password,timeOut,moduleName,betchSize,useProxy,useHttp,proxyHost,proxyPort,proxyUsername,proxyPassword,true);
  }
 else {
    metadataTableOrder=getMetadataTableBySalesforceServerAPIForOauth(webServiceUrlForOauth,comsumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut,moduleName);
    if (metadataTableOrder == null) {
      metadataTableOrder=getMetadataTableFromConfigFile(moduleName);
    }
  }
  return metadataTableOrder;
}","/** 
 * DOC zli Comment method ""readMetadataDetail"".
 */
public IMetadataTable readMetadataDetail(){
  String moduleName=getConnection().getModuleName();
  if (moduleName == null || moduleName.equals(""String_Node_Str"")) {
    return null;
  }
  String webServiceUrl=getConnection().getWebServiceUrl();
  String userName=getConnection().getUserName();
  String password=getConnection().getPassword();
  String timeOut=getConnection().getTimeOut();
  String betchSize=getConnection().getBatchSize();
  boolean useProxy=getConnection().isUseProxy();
  boolean useHttp=getConnection().isUseHttpProxy();
  String proxyHost=getConnection().getProxyHost();
  String proxyPort=getConnection().getProxyPort();
  String proxyUsername=getConnection().getProxyUsername();
  String proxyPassword=getConnection().getProxyPassword();
  String webServiceUrlForOauth=getConnection().getWebServiceUrlTextForOAuth();
  String comsumeKey=getConnection().getConsumeKey();
  String consumeSecret=getConnection().getConsumeSecret();
  String callbackHost=getConnection().getCallbackHost();
  String callbackPort=getConnection().getCallbackPort();
  String salesforceVersion=getConnection().getSalesforceVersion();
  String token=getConnection().getToken();
  String loginType=getConnection().getLoginType();
  if (isContextMode() && getContextModeManager() != null) {
    webServiceUrl=getContextModeManager().getOriginalValue(webServiceUrl);
    userName=getContextModeManager().getOriginalValue(userName);
    password=getContextModeManager().getOriginalValue(password);
    timeOut=getContextModeManager().getOriginalValue(timeOut);
    betchSize=getContextModeManager().getOriginalValue(betchSize);
    useProxy=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useProxy)));
    useHttp=Boolean.valueOf(getContextModeManager().getOriginalValue(String.valueOf(useHttp)));
    proxyHost=getContextModeManager().getOriginalValue(proxyHost);
    proxyPort=getContextModeManager().getOriginalValue(proxyPort);
    proxyUsername=getContextModeManager().getOriginalValue(proxyUsername);
    proxyPassword=getContextModeManager().getOriginalValue(proxyPassword);
    webServiceUrlForOauth=getContextModeManager().getOriginalValue(webServiceUrlForOauth);
    comsumeKey=getContextModeManager().getOriginalValue(comsumeKey);
    consumeSecret=getContextModeManager().getOriginalValue(consumeSecret);
    callbackHost=getContextModeManager().getOriginalValue(callbackHost);
    callbackPort=getContextModeManager().getOriginalValue(callbackPort);
    salesforceVersion=getContextModeManager().getOriginalValue(salesforceVersion);
    token=getContextModeManager().getOriginalValue(token);
    loginType=getContextModeManager().getOriginalValue(loginType);
  }
  if (loginType.equalsIgnoreCase(BASIC)) {
    metadataTableOrder=getMetadatasForSalesforce(webServiceUrl,userName,password,timeOut,moduleName,betchSize,useProxy,useHttp,proxyHost,proxyPort,proxyUsername,proxyPassword,true);
  }
 else {
    metadataTableOrder=getMetadataTableBySalesforceServerAPIForOauth(webServiceUrlForOauth,comsumeKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,token,timeOut,moduleName);
    if (metadataTableOrder == null) {
      metadataTableOrder=getMetadataTableFromConfigFile(moduleName);
    }
  }
  return metadataTableOrder;
}",0.9984930681133212
126963,"@Override protected void initialize(){
  if (getConnection() == null) {
    return;
  }
  if (getConnection().getWebServiceUrl() != null && !getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(getConnection().getWebServiceUrl());
  }
  if (getConnection().getWebServiceUrl() == null || getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    getConnection().setWebServiceUrl(TSALESFORCE_INPUT_URL);
  }
  if (webServiceUrlText.getText() == null || webServiceUrlText.getText().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(TSALESFORCE_INPUT_URL);
  }
  setTextValue(getConnection().getUserName(),userNameText);
  setTextValue(getConnection().getPassword(),passwordText);
  String batchSize2=getConnection().getBatchSize();
  setTextValue((batchSize2 != null && !""String_Node_Str"".equals(batchSize2)) ? batchSize2 : String.valueOf(SalesforceSchemaBean.DEFAULT_BATCH_SIZE),batchSizeText);
  useProxyBtn.setSelection(getConnection().isUseProxy());
  useHttpBtn.setSelection(getConnection().isUseHttpProxy());
  setTextValue(getConnection().getProxyHost(),proxyHostText);
  setTextValue(getConnection().getProxyPort(),proxyPortText);
  setTextValue(getConnection().getProxyUsername(),proxyUsernameText);
  setTextValue(getConnection().getProxyPassword(),proxyPasswordText);
  String timeOutStr=getConnection().getTimeOut();
  String value=(timeOutStr != null && !""String_Node_Str"".equals(timeOutStr)) ? timeOutStr : String.valueOf(SalesforceSchemaBean.DEFAULT_TIME_OUT);
  timeOut=value;
  setTextValue(value,timeOutText);
  if (getConnection().getLoginType() != null && !getConnection().getLoginType().equals(""String_Node_Str"")) {
    authBtn.setText(getConnection().getLoginType());
    if (getConnection().getLoginType().equals(BASIC)) {
      authBtn.select(0);
      stackLayout.topControl=basicComposite;
      stackComposite.layout();
    }
 else {
      authBtn.select(1);
      stackLayout.topControl=oauthComposite;
      stackComposite.layout();
    }
  }
 else {
    getConnection().setLoginType(BASIC);
  }
  setTextValue(getConnection().getWebServiceUrlTextForOAuth(),webServiceUrlTextForOAuth);
  if (webServiceUrlTextForOAuth.getText() == null || webServiceUrlTextForOAuth.getText().equals(""String_Node_Str"")) {
    webServiceUrlTextForOAuth.setText(TSALESFORCE_INPUT_URL_OAUTH);
    getConnection().setWebServiceUrlTextForOAuth(TSALESFORCE_INPUT_URL_OAUTH);
  }
  setTextValue(getConnection().getSalesforceVersion(),apiVersionText);
  if (apiVersionText.getText() == null || apiVersionText.getText().equals(""String_Node_Str"")) {
    apiVersionText.setText(TSALESFORCE_VERSION);
    getConnection().setSalesforceVersion(TSALESFORCE_VERSION);
  }
  setTextValue(getConnection().getConsumeKey(),consumeKeyText);
  setTextValue(getConnection().getConsumeSecret(),consumeKeySecretText);
  setTextValue(getConnection().getCallbackHost(),callbackHostText);
  setTextValue(getConnection().getCallbackPort(),callbackPortText);
  setTextValue(getConnection().getToken(),tokenText);
}","@Override protected void initialize(){
  if (getConnection() == null) {
    return;
  }
  if (getConnection().getWebServiceUrl() != null && !getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(getConnection().getWebServiceUrl());
  }
  if (getConnection().getWebServiceUrl() == null || getConnection().getWebServiceUrl().equals(""String_Node_Str"")) {
    getConnection().setWebServiceUrl(TSALESFORCE_INPUT_URL);
  }
  if (webServiceUrlText.getText() == null || webServiceUrlText.getText().equals(""String_Node_Str"")) {
    webServiceUrlText.setText(TSALESFORCE_INPUT_URL);
  }
  setTextValue(getConnection().getUserName(),userNameText);
  setTextValue(getConnection().getPassword(),passwordText);
  String batchSize2=getConnection().getBatchSize();
  setTextValue((batchSize2 != null && !""String_Node_Str"".equals(batchSize2)) ? batchSize2 : String.valueOf(SalesforceSchemaBean.DEFAULT_BATCH_SIZE),batchSizeText);
  useProxyBtn.setSelection(getConnection().isUseProxy());
  useHttpBtn.setSelection(getConnection().isUseHttpProxy());
  setTextValue(getConnection().getProxyHost(),proxyHostText);
  setTextValue(getConnection().getProxyPort(),proxyPortText);
  setTextValue(getConnection().getProxyUsername(),proxyUsernameText);
  setTextValue(getConnection().getProxyPassword(),proxyPasswordText);
  String timeOutStr=getConnection().getTimeOut();
  String value=(timeOutStr != null && !""String_Node_Str"".equals(timeOutStr)) ? timeOutStr : String.valueOf(SalesforceSchemaBean.DEFAULT_TIME_OUT);
  timeOut=value;
  setTextValue(value,timeOutText);
  if (getConnection().getLoginType() != null && !getConnection().getLoginType().equals(""String_Node_Str"")) {
    authBtn.setText(getConnection().getLoginType());
    if (getConnection().getLoginType().equalsIgnoreCase(BASIC)) {
      authBtn.select(0);
      stackLayout.topControl=basicComposite;
      stackComposite.layout();
    }
 else {
      authBtn.select(1);
      stackLayout.topControl=oauthComposite;
      stackComposite.layout();
    }
  }
 else {
    getConnection().setLoginType(BASIC);
  }
  setTextValue(getConnection().getWebServiceUrlTextForOAuth(),webServiceUrlTextForOAuth);
  if (webServiceUrlTextForOAuth.getText() == null || webServiceUrlTextForOAuth.getText().equals(""String_Node_Str"")) {
    webServiceUrlTextForOAuth.setText(TSALESFORCE_INPUT_URL_OAUTH);
    getConnection().setWebServiceUrlTextForOAuth(TSALESFORCE_INPUT_URL_OAUTH);
  }
  setTextValue(getConnection().getSalesforceVersion(),apiVersionText);
  if (apiVersionText.getText() == null || apiVersionText.getText().equals(""String_Node_Str"")) {
    apiVersionText.setText(TSALESFORCE_VERSION);
    getConnection().setSalesforceVersion(TSALESFORCE_VERSION);
  }
  setTextValue(getConnection().getConsumeKey(),consumeKeyText);
  setTextValue(getConnection().getConsumeSecret(),consumeKeySecretText);
  setTextValue(getConnection().getCallbackHost(),callbackHostText);
  setTextValue(getConnection().getCallbackPort(),callbackPortText);
  setTextValue(getConnection().getToken(),tokenText);
}",0.9983644095518482
126964,"public List<String> connectFromCustomModuleName(String proxy){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  try {
    if (loginType.equals(BASIC)) {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      salesforceAPI.login(endPoint,username,pwd,timeOut);
      ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
      if (currentAPI instanceof SalesforceModuleParseEnterprise) {
        describeGlobalResult=describeGlobal();
        if (describeGlobalResult != null) {
          types=describeGlobalResult.getTypes();
        }
      }
 else {
        if (currentAPI instanceof SalesforceModuleParserPartner) {
          SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
          SforceManagementImpl sforceManagement=partner.getSforceManagement();
          SessionHeader sessionHeader=sforceManagement.getSessionHeader();
          DescribeGlobal dg=new DescribeGlobal();
          com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
          dgsrs=dgr.getSobjects();
        }
      }
    }
 else {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      Token token=salesforceAPI.login(endPointForAuth,consumerKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,tokenProperties,timeOut);
      if (token != null) {
        org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
        OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumerKey);
        client.setClientSecret(consumeSecret);
        String endpoint=client.getSOAPEndpoint(token,salesforceVersion);
        boolean result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
        SessionHeader sessionHeader=sfMgr.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sfMgr.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetAllProxy();
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}","public List<String> connectFromCustomModuleName(String proxy){
  preparModuleInit();
  SalesforceModuleParseAPI salesforceAPI=new SalesforceModuleParseAPI();
  String[] types=null;
  DescribeGlobalSObjectResult[] dgsrs=null;
  DescribeGlobalResult describeGlobalResult=null;
  boolean socksProxy=false;
  boolean httpProxy=false;
  boolean httpsProxy=false;
  if (SalesforceModuleParseAPI.USE_SOCKS_PROXY.equals(proxy)) {
    socksProxy=true;
  }
  if (SalesforceModuleParseAPI.USE_HTTP_PROXY.equals(proxy)) {
    if (endPoint.startsWith(""String_Node_Str"")) {
      httpsProxy=true;
    }
 else {
      httpProxy=true;
    }
  }
  try {
    if (loginType.equalsIgnoreCase(BASIC)) {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      salesforceAPI.login(endPoint,username,pwd,timeOut);
      ISalesforceModuleParser currentAPI=salesforceAPI.getCurrentAPI();
      if (currentAPI instanceof SalesforceModuleParseEnterprise) {
        describeGlobalResult=describeGlobal();
        if (describeGlobalResult != null) {
          types=describeGlobalResult.getTypes();
        }
      }
 else {
        if (currentAPI instanceof SalesforceModuleParserPartner) {
          SalesforceModuleParserPartner partner=(SalesforceModuleParserPartner)currentAPI;
          SforceManagementImpl sforceManagement=partner.getSforceManagement();
          SessionHeader sessionHeader=sforceManagement.getSessionHeader();
          DescribeGlobal dg=new DescribeGlobal();
          com.salesforce.soap.partner.DescribeGlobalResult dgr=sforceManagement.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
          dgsrs=dgr.getSobjects();
        }
      }
    }
 else {
      salesforceAPI.resetAllProxy();
      salesforceAPI.setProxy(proxyHost,proxyPort,proxyUsername,proxyPassword,httpProxy,socksProxy,httpsProxy);
      Token token=salesforceAPI.login(endPointForAuth,consumerKey,consumeSecret,callbackHost,callbackPort,salesforceVersion,tokenProperties,timeOut);
      if (token != null) {
        org.talend.salesforce.SforceManagement sfMgr=new org.talend.salesforce.SforceManagementImpl();
        OAuthClient client=new OAuthClient();
        client.setBaseOAuthURL(endPointForAuth);
        client.setCallbackHost(callbackHost);
        client.setCallbackPort(Integer.parseInt(callbackPort));
        client.setClientID(consumerKey);
        client.setClientSecret(consumeSecret);
        String endpoint=client.getSOAPEndpoint(token,salesforceVersion);
        boolean result=sfMgr.login(token.getAccess_token(),endpoint,Integer.parseInt(timeOut),false);
        SessionHeader sessionHeader=sfMgr.getSessionHeader();
        DescribeGlobal dg=new DescribeGlobal();
        com.salesforce.soap.partner.DescribeGlobalResult dgr=sfMgr.getStub().describeGlobal(dg,sessionHeader,null,null).getResult();
        dgsrs=dgr.getSobjects();
      }
    }
    salesforceAPI.resetAllProxy();
    INode node=getSalesforceNode();
    List list=new ArrayList();
    IElementParameter modulesNameParam=node.getElementParameter(""String_Node_Str"");
    Object[] modulename=modulesNameParam.getListItemsValue();
    if (modulename != null && modulename.length > 1) {
      for (int i=0; i < modulename.length - 1; i++) {
        list.add(i,modulename[i]);
      }
    }
    if (types != null && types.length > 0) {
      for (int j=0; j < types.length; j++) {
        if (!list.contains(types[j])) {
          list.add(types[j]);
        }
      }
    }
    if (dgsrs != null && dgsrs.length > 0) {
      for (int k=0; k < dgsrs.length; k++) {
        DescribeGlobalSObjectResult dsResult=dgsrs[k];
        String name=dsResult.getName();
        if (!list.contains(name)) {
          list.add(name);
        }
      }
    }
    return list;
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return null;
  }
}",0.9987222080245336
126965,"public static String getNormalizeParameterValue(INode node,IElementParameter ep){
  String value=""String_Node_Str"";
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.OPENED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST);
  value=ElementParameterParser.getValue(node,""String_Node_Str"" + ep.getName() + ""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType())) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return value;
}","public static String getNormalizeParameterValue(INode node,IElementParameter ep){
  String value=""String_Node_Str"";
  List<EParameterFieldType> needQuoteList=Arrays.asList(EParameterFieldType.CLOSED_LIST,EParameterFieldType.OPENED_LIST,EParameterFieldType.COMPONENT_LIST,EParameterFieldType.COLUMN_LIST,EParameterFieldType.PREV_COLUMN_LIST);
  value=ElementParameterParser.getValue(node,""String_Node_Str"" + ep.getName() + ""String_Node_Str"");
  if (needQuoteList.contains(ep.getFieldType())) {
    value=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  List<EParameterFieldType> needRemoveCRLFList=Arrays.asList(EParameterFieldType.MEMO,EParameterFieldType.MEMO_JAVA,EParameterFieldType.MEMO_SQL);
  if (needRemoveCRLFList.contains(ep.getFieldType())) {
    value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return value;
}",0.9775621588841722
126966,"public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode){
  if (sourceNode == null) {
    return false;
  }
  if (sourceNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (objectToCopy.getId() == null) {
    return false;
  }
  try {
    if (ProxyRepositoryFactory.getInstance().getLastVersion(objectToCopy.getId()) == null) {
      return false;
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (objectToCopy != null && objectToCopy.getId() == null) {
    return false;
  }
  if (objectToCopy == null || objectToCopy.getRepositoryStatus() == ERepositoryStatus.DELETED || ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
    Property property=objectToCopy.getProperty();
    RoutineItem item=(RoutineItem)property.getItem();
    return !item.isBuiltIn();
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
    Property property=objectToCopy.getProperty();
    SQLPatternItem item=(SQLPatternItem)property.getItem();
    return !item.isSystem();
  }
  if (PluginChecker.isCDCPluginLoaded()) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && (cdcService.isSubscriberTableNode(sourceNode) || cdcService.isSystemSubscriberTable(sourceNode))) {
      return false;
    }
  }
  if (targetNode == null) {
    return true;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT || targetNode.getType() == ENodeType.SIMPLE_FOLDER || targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    return ((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
  }
  return false;
}","public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode){
  if (sourceNode == null) {
    return false;
  }
  if (targetNode != null && targetNode.getType() == ENodeType.REPOSITORY_ELEMENT && targetNode.getContentType() != ERepositoryObjectType.METADATA_VALIDATION_RULES) {
    targetNode=targetNode.getParent();
  }
  if (sourceNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (objectToCopy.getId() == null) {
    return false;
  }
  try {
    if (ProxyRepositoryFactory.getInstance().getLastVersion(objectToCopy.getId()) == null) {
      return false;
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (objectToCopy != null && objectToCopy.getId() == null) {
    return false;
  }
  if (objectToCopy == null || objectToCopy.getRepositoryStatus() == ERepositoryStatus.DELETED || ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.ROUTINES) {
    Property property=objectToCopy.getProperty();
    RoutineItem item=(RoutineItem)property.getItem();
    return !item.isBuiltIn();
  }
  if (objectToCopy.getRepositoryObjectType() == ERepositoryObjectType.SQLPATTERNS) {
    Property property=objectToCopy.getProperty();
    SQLPatternItem item=(SQLPatternItem)property.getItem();
    return !item.isSystem();
  }
  if (PluginChecker.isCDCPluginLoaded()) {
    ICDCProviderService cdcService=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
    if (cdcService != null && (cdcService.isSubscriberTableNode(sourceNode) || cdcService.isSystemSubscriberTable(sourceNode))) {
      return false;
    }
  }
  if (targetNode == null) {
    return true;
  }
  if (targetNode.getType() == ENodeType.REPOSITORY_ELEMENT || targetNode.getType() == ENodeType.SIMPLE_FOLDER || targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    return ((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
  }
  return false;
}",0.9502025256135336
126967,"public void startThreadTrace(String clientHost,int portTraces) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    return;
  }
  System.out.println(""String_Node_Str"" + portTraces);
  s=new java.net.Socket(clientHost,portTraces);
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(s.getOutputStream())),true);
  System.out.println(""String_Node_Str"");
  t=new Thread(this);
  t.start();
}","public void startThreadTrace(String clientHost,int portTraces) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    return;
  }
  System.out.println(""String_Node_Str"" + portTraces);
  s=new java.net.Socket(clientHost,portTraces);
  oos=new NoHeaderObjectOutputStream(s.getOutputStream());
  System.out.println(""String_Node_Str"");
  t=new Thread(this);
  t.start();
}",0.8935672514619883
126968,"public void stopThreadTrace(){
  if (!openSocket) {
    return;
  }
  jobIsFinished=true;
  try {
    pred.close();
    s.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  java.io.IOException ie) {
  }
}","public void stopThreadTrace(){
  if (!openSocket) {
    return;
  }
  jobIsFinished=true;
  try {
    oos.close();
    s.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  java.io.IOException ie) {
  }
}",0.9839816933638444
126969,"public void sendTrace(String componentId,String startNodeCid,String datas){
  if (!openSocket) {
    return;
  }
  subjobMap.put(componentId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(componentId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (componentId.equals(componentName)) {
      return;
    }
  }
  TraceBean bean;
  if (processTraces.containsKey(componentId)) {
    bean=processTraces.get(componentId);
  }
 else {
    bean=new TraceBean(componentId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(componentId,bean);
  str=bean.getComponentId() + ""String_Node_Str"" + bean.getNbLine()+ ""String_Node_Str""+ datas;
  pred.println(str);
  componentName=componentId;
}","public void sendTrace(String connectionId,String startNodeCid,LinkedHashMap datas) throws IOException {
  if (!openSocket) {
    return;
  }
  subjobMap.put(connectionId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(connectionId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (connectionId.equals(this.connectionId)) {
      return;
    }
  }
  TraceDataBean bean;
  if (processTraces.containsKey(connectionId)) {
    bean=processTraces.get(connectionId);
  }
 else {
    bean=new TraceDataBean(connectionId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(connectionId,bean);
  bean.setData(datas);
  oos.writeUnshared(bean);
  oos.flush();
  this.connectionId=connectionId;
}",0.520618556701031
126970,"public void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  InputStream in;
  try {
    boolean action=false;
    pred.println(""String_Node_Str"");
    do {
      in=s.getInputStream();
      LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
      String line=reader.readLine();
      if (""String_Node_Str"".equals(line)) {
        pred.println(""String_Node_Str"");
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  try {
    boolean action=false;
    oos.writeObject(TraceStatusBean.UI_STATUS);
    do {
      ois=new NoHeaderObjectInputStream(s.getInputStream());
      TraceBean traceBean=(TraceBean)ois.readObject();
      if (traceBean.equals(TraceStatusBean.STATUS_WAITING)) {
        oos.writeObject(TraceStatusBean.UI_STATUS);
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.4922575387123064
126971,"public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}","@Override public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9766355140186916
126972,"public boolean isPause(){
  if (!openSocket) {
    return false;
  }
  InputStream in;
  try {
    askForStatus();
    in=s.getInputStream();
    LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
    return ""String_Node_Str"".equals(reader.readLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean isPause(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.PAUSE);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.5424164524421594
126973,"public boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  InputStream in;
  try {
    askForStatus();
    in=s.getInputStream();
    LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
    return ""String_Node_Str"".equals(reader.readLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_BREAKPOINT);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.5310173697270472
126974,"private void askForStatus(){
  pred.println(""String_Node_Str"");
}","private void askForStatus() throws IOException {
  oos.writeObject(TraceStatusBean.ID_STATUS);
}",0.5590062111801242
126975,"public boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  InputStream in;
  try {
    askForStatus();
    in=s.getInputStream();
    LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
    return ""String_Node_Str"".equals(reader.readLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_ROW);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.5248407643312102
126976,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else   if (other.object == null) {
    if (this.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}",0.9596968653117464
126977,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  scrolledCompositeFileViewer.getHorizontalBar().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      int hSelection=scrolledCompositeFileViewer.getHorizontalBar().getSelection();
      graphicRule.setBounds(5 - hSelection,5,filePositionalViewer.getText().getSize().x,graphicRule.getSize().y);
    }
  }
);
  scrolledCompositeFileViewer.addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      int compositeXsize=filePositionalViewer.getText().getSize().x;
      int compositeYsize=graphicRule.getSize().y;
      if (compositeXsize <= 10000) {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(10000,compositeYsize);
      }
 else {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(compositeXsize,compositeYsize);
      }
    }
  }
);
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        checkFilePathAndManageIt(true);
      }
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFilePathAndManageIt(true);
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
      if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
        if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
 else {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
      }
      checkFilePathAndManageIt(false);
    }
  }
);
  filePositionalViewer.getFieldSeparatorValue().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String value=filePositionalViewer.getFieldSeparatorValue().getText();
        String valueToField=value;
        if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
          if (value.equals(""String_Node_Str"")) {
            valueToField=""String_Node_Str"";
          }
 else {
            valueToField=value + ""String_Node_Str"";
          }
        }
        if (!fieldSeparatorText.getText().equals(valueToField)) {
          fieldSeparatorText.setEditable(false);
          fieldSeparatorText.setText(valueToField);
          fieldSeparatorText.setEditable(true);
          fieldPositionText.setEditable(false);
          fieldPositionText.setText(filePositionalViewer.calculatePositionX());
          fieldPositionText.setEditable(true);
          checkFieldsValue();
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String separatorValue=TalendQuoteUtils.addQuotes(fieldSeparatorText.getText());
        getConnection().setFieldSeparatorValue(separatorValue);
        if (fieldSeparatorText.getEditable() && getConnection().getFieldSeparatorValue().equals(separatorValue)) {
          if (!checkFieldSeparatorValue()) {
            fieldPositionText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.cleanAllMarkers();
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
            }
          }
 else {
            String value=getValidateFieldSeparator(separatorValue);
            Point selection=fieldSeparatorText.getSelection();
            if ((!value.equals(TalendQuoteUtils.removeQuotes(getConnection().getFieldSeparatorValue())))) {
              fieldPositionText.setEditable(false);
              if (filePositionalViewer.getVisible()) {
                filePositionalViewer.setEnabled(false);
                graphicRule.setEnabled(false);
                filePositionalViewer.cleanAllMarkers();
              }
            }
 else {
              filePositionalViewer.setEnabled(true);
              graphicRule.setEnabled(true);
              filePositionalViewer.setSeparatorValue(value,filePositionalViewer.getVisible());
              String newPosition=filePositionalViewer.calculatePositionX();
              if (!fieldPositionText.getText().equals(newPosition)) {
                fieldPositionText.setEditable(false);
                fieldPositionText.setText(newPosition);
              }
              fieldPositionText.setEditable(true);
            }
            fieldSeparatorText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldPositionText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (fieldPositionText.getEditable()) {
          if (!checkFieldPositionValue()) {
            fieldSeparatorText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
              filePositionalViewer.cleanAllMarkers();
            }
          }
 else {
            filePositionalViewer.setEnabled(true);
            graphicRule.setEnabled(true);
            String value=getValidateFieldPosition(fieldPositionText.getText());
            Point selection=fieldPositionText.getSelection();
            filePositionalViewer.setPositionValue(value,filePositionalViewer.getVisible());
            fieldSeparatorText.setEditable(true);
            value=filePositionalViewer.getSeparatorValue();
            if (fieldSeparatorText.getText().equals(""String_Node_Str"")) {
              fieldSeparatorText.setText(""String_Node_Str"");
            }
 else             if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
              fieldSeparatorText.setText(value + ""String_Node_Str"");
            }
 else {
              fieldSeparatorText.setText(value);
            }
            fieldPositionText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldPositionText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldPosition(fieldPositionText.getText(),e.character,fieldPositionText.getSelection().x);
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  scrolledCompositeFileViewer.getHorizontalBar().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      int hSelection=scrolledCompositeFileViewer.getHorizontalBar().getSelection();
      graphicRule.setBounds(5 - hSelection,5,filePositionalViewer.getText().getSize().x,graphicRule.getSize().y);
    }
  }
);
  scrolledCompositeFileViewer.addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      int compositeXsize=filePositionalViewer.getText().getSize().x;
      int compositeYsize=graphicRule.getSize().y;
      if (compositeXsize <= 10000) {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(10000,compositeYsize);
      }
 else {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(compositeXsize,compositeYsize);
      }
    }
  }
);
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        checkFilePathAndManageIt(true);
      }
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFilePathAndManageIt(false);
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
      if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
        if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
 else {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
      }
      checkFilePathAndManageIt(false);
    }
  }
);
  filePositionalViewer.getFieldSeparatorValue().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String value=filePositionalViewer.getFieldSeparatorValue().getText();
        String valueToField=value;
        if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
          if (value.equals(""String_Node_Str"")) {
            valueToField=""String_Node_Str"";
          }
 else {
            valueToField=value + ""String_Node_Str"";
          }
        }
        if (!fieldSeparatorText.getText().equals(valueToField)) {
          fieldSeparatorText.setEditable(false);
          fieldSeparatorText.setText(valueToField);
          fieldSeparatorText.setEditable(true);
          fieldPositionText.setEditable(false);
          fieldPositionText.setText(filePositionalViewer.calculatePositionX());
          fieldPositionText.setEditable(true);
          checkFieldsValue();
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String separatorValue=TalendQuoteUtils.addQuotes(fieldSeparatorText.getText());
        getConnection().setFieldSeparatorValue(separatorValue);
        if (fieldSeparatorText.getEditable() && getConnection().getFieldSeparatorValue().equals(separatorValue)) {
          if (!checkFieldSeparatorValue()) {
            fieldPositionText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.cleanAllMarkers();
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
            }
          }
 else {
            String value=getValidateFieldSeparator(separatorValue);
            Point selection=fieldSeparatorText.getSelection();
            if ((!value.equals(TalendQuoteUtils.removeQuotes(getConnection().getFieldSeparatorValue())))) {
              fieldPositionText.setEditable(false);
              if (filePositionalViewer.getVisible()) {
                filePositionalViewer.setEnabled(false);
                graphicRule.setEnabled(false);
                filePositionalViewer.cleanAllMarkers();
              }
            }
 else {
              filePositionalViewer.setEnabled(true);
              graphicRule.setEnabled(true);
              filePositionalViewer.setSeparatorValue(value,filePositionalViewer.getVisible());
              String newPosition=filePositionalViewer.calculatePositionX();
              if (!fieldPositionText.getText().equals(newPosition)) {
                fieldPositionText.setEditable(false);
                fieldPositionText.setText(newPosition);
              }
              fieldPositionText.setEditable(true);
            }
            fieldSeparatorText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldPositionText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (fieldPositionText.getEditable()) {
          if (!checkFieldPositionValue()) {
            fieldSeparatorText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
              filePositionalViewer.cleanAllMarkers();
            }
          }
 else {
            filePositionalViewer.setEnabled(true);
            graphicRule.setEnabled(true);
            String value=getValidateFieldPosition(fieldPositionText.getText());
            Point selection=fieldPositionText.getSelection();
            filePositionalViewer.setPositionValue(value,filePositionalViewer.getVisible());
            fieldSeparatorText.setEditable(true);
            value=filePositionalViewer.getSeparatorValue();
            if (fieldSeparatorText.getText().equals(""String_Node_Str"")) {
              fieldSeparatorText.setText(""String_Node_Str"");
            }
 else             if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
              fieldSeparatorText.setText(value + ""String_Node_Str"");
            }
 else {
              fieldSeparatorText.setText(value);
            }
            fieldPositionText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldPositionText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldPosition(fieldPositionText.getText(),e.character,fieldPositionText.getSelection().x);
      }
    }
  }
);
}",0.9995235826584088
126978,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else   if (other.object == null) {
    if (this.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}",0.9596968653117464
126979,"/** 
 * DOC bqian DB2ForZosDataBaseMetadata constructor comment.
 * @param metaData
 */
public DB2ForZosDataBaseMetadata(Connection connection){
  this.connection=connection;
}","/** 
 * DOC bqian DB2ForZosDataBaseMetadata constructor comment.
 * @param metaData
 * @throws SQLException
 */
public DB2ForZosDataBaseMetadata(Connection connection) throws SQLException {
  super(connection);
}",0.7731958762886598
126980,"/** 
 * only for db2 on z/os right now.
 * @param conn2
 * @return
 */
public static DatabaseMetaData createDB2ForZosFakeDatabaseMetaData(Connection conn){
  DB2ForZosDataBaseMetadata dmd=new DB2ForZosDataBaseMetadata(conn);
  return dmd;
}","/** 
 * only for db2 on z/os right now.
 * @param conn2
 * @return
 * @throws SQLException
 */
public static DatabaseMetaData createDB2ForZosFakeDatabaseMetaData(Connection conn) throws SQLException {
  DB2ForZosDataBaseMetadata dmd=new DB2ForZosDataBaseMetadata(conn);
  return dmd;
}",0.9142857142857144
126981,"/** 
 * only for db2 on z/os right now. 2009-07-13 bug 7888.
 * @param conn2
 * @return
 */
private static DatabaseMetaData createFakeDatabaseMetaData(java.sql.Connection conn){
  DB2ForZosDataBaseMetadata dmd=new DB2ForZosDataBaseMetadata(conn);
  return dmd;
}","/** 
 * only for db2 on z/os right now. 2009-07-13 bug 7888.
 * @param conn2
 * @return
 * @throws SQLException
 */
private static DatabaseMetaData createFakeDatabaseMetaData(java.sql.Connection conn) throws SQLException {
  DB2ForZosDataBaseMetadata dmd=new DB2ForZosDataBaseMetadata(conn);
  return dmd;
}",0.92091388400703
126982,"public void startThreadTrace(String clientHost,int portTraces) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    return;
  }
  System.out.println(""String_Node_Str"" + portTraces);
  s=new java.net.Socket(clientHost,portTraces);
  pred=new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(s.getOutputStream())),true);
  System.out.println(""String_Node_Str"");
  t=new Thread(this);
  t.start();
}","public void startThreadTrace(String clientHost,int portTraces) throws java.io.IOException, java.net.UnknownHostException {
  if (!openSocket) {
    return;
  }
  System.out.println(""String_Node_Str"" + portTraces);
  s=new java.net.Socket(clientHost,portTraces);
  oos=new NoHeaderObjectOutputStream(s.getOutputStream());
  System.out.println(""String_Node_Str"");
  t=new Thread(this);
  t.start();
}",0.8935672514619883
126983,"public void stopThreadTrace(){
  if (!openSocket) {
    return;
  }
  jobIsFinished=true;
  try {
    pred.close();
    s.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  java.io.IOException ie) {
  }
}","public void stopThreadTrace(){
  if (!openSocket) {
    return;
  }
  jobIsFinished=true;
  try {
    oos.close();
    s.close();
    System.out.println(""String_Node_Str"");
  }
 catch (  java.io.IOException ie) {
  }
}",0.9839816933638444
126984,"public void sendTrace(String componentId,String startNodeCid,String datas){
  if (!openSocket) {
    return;
  }
  subjobMap.put(componentId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(componentId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (componentId.equals(componentName)) {
      return;
    }
  }
  TraceBean bean;
  if (processTraces.containsKey(componentId)) {
    bean=processTraces.get(componentId);
  }
 else {
    bean=new TraceBean(componentId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(componentId,bean);
  str=bean.getComponentId() + ""String_Node_Str"" + bean.getNbLine()+ ""String_Node_Str""+ datas;
  pred.println(str);
  componentName=componentId;
}","public void sendTrace(String connectionId,String startNodeCid,LinkedHashMap datas) throws IOException {
  if (!openSocket) {
    return;
  }
  subjobMap.put(connectionId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(connectionId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (connectionId.equals(this.connectionId)) {
      return;
    }
  }
  TraceDataBean bean;
  if (processTraces.containsKey(connectionId)) {
    bean=processTraces.get(connectionId);
  }
 else {
    bean=new TraceDataBean(connectionId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(connectionId,bean);
  bean.setData(datas);
  oos.writeUnshared(bean);
  oos.flush();
  this.connectionId=connectionId;
}",0.520618556701031
126985,"public void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  InputStream in;
  try {
    boolean action=false;
    pred.println(""String_Node_Str"");
    do {
      in=s.getInputStream();
      LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
      String line=reader.readLine();
      if (""String_Node_Str"".equals(line)) {
        pred.println(""String_Node_Str"");
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void waitForUserAction() throws InterruptedException {
  if (!openSocket) {
    return;
  }
  try {
    boolean action=false;
    oos.writeObject(TraceStatusBean.UI_STATUS);
    do {
      ois=new NoHeaderObjectInputStream(s.getInputStream());
      TraceBean traceBean=(TraceBean)ois.readObject();
      if (traceBean.equals(TraceStatusBean.STATUS_WAITING)) {
        oos.writeObject(TraceStatusBean.UI_STATUS);
        Thread.sleep(100);
      }
 else {
        action=true;
      }
    }
 while (!action);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.4922575387123064
126986,"public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}","@Override public void run(){
synchronized (this) {
    try {
      while (!jobIsFinished) {
        wait(100);
      }
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9766355140186916
126987,"public boolean isPause(){
  if (!openSocket) {
    return false;
  }
  InputStream in;
  try {
    askForStatus();
    in=s.getInputStream();
    LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
    return ""String_Node_Str"".equals(reader.readLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean isPause(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.PAUSE);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.5424164524421594
126988,"public boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  InputStream in;
  try {
    askForStatus();
    in=s.getInputStream();
    LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
    return ""String_Node_Str"".equals(reader.readLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean isNextBreakpoint(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_BREAKPOINT);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.5310173697270472
126989,"private void askForStatus(){
  pred.println(""String_Node_Str"");
}","private void askForStatus() throws IOException {
  oos.writeObject(TraceStatusBean.ID_STATUS);
}",0.5590062111801242
126990,"public boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  InputStream in;
  try {
    askForStatus();
    in=s.getInputStream();
    LineNumberReader reader=new LineNumberReader(new InputStreamReader(in));
    return ""String_Node_Str"".equals(reader.readLine());
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_ROW);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.5248407643312102
126991,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final RepositoryNode other=(RepositoryNode)obj;
  if (this.type != ENodeType.SIMPLE_FOLDER) {
    if (null != this.id && null != other.id && !this.id.equals(other.id)) {
      return false;
    }
  }
  if (this.properties == null) {
    if (other.properties != null) {
      return false;
    }
  }
 else   if (!this.properties.equals(other.properties)) {
    return false;
  }
  if (this.type == null) {
    if (other.type != null) {
      return false;
    }
  }
 else   if (!this.type.equals(other.type)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  if (this.object == null) {
    if (other.object != null) {
      return false;
    }
  }
 else   if (other.object == null) {
    if (this.object != null) {
      return false;
    }
  }
 else {
    if (object.getVersion() == null) {
      if (other.object.getVersion() != null) {
        return false;
      }
    }
 else     if (!object.getVersion().equals(other.object.getVersion())) {
      return false;
    }
  }
  if (this.getLabel() == null) {
    if (other.getLabel() != null) {
      return false;
    }
  }
 else   if (!this.getLabel().equals(other.getLabel())) {
    return false;
  }
  return true;
}",0.9596968653117464
126992,"public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> filterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(metaConnection,catalogList,filterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(metaConnection,catalogList,filterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,filterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (filterList != null) {
                    if (filterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}","public List<Catalog> fillCatalogs(Connection dbConn,DatabaseMetaData dbJDBCMetadata,IMetadataConnection metaConnection,List<String> catalogFilter){
  List<Catalog> catalogList=new ArrayList<Catalog>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  if (ConnectionUtils.isPostgresql(dbJDBCMetadata)) {
    return fillPostgresqlCatalogs(metaConnection,dbConn,dbJDBCMetadata,catalogList);
  }
  if (dbConn != null && dbConn.isContextMode()) {
    if (EDatabaseTypeName.MYSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL.getProduct().equals(((DatabaseConnection)dbConn).getProductId()) || EDatabaseTypeName.MSSQL05_08.getProduct().equals(((DatabaseConnection)dbConn).getProductId())) {
      IMetadataConnection iMetadataCon=metaConnection;
      if (iMetadataCon == null) {
        iMetadataCon=ConvertionHelper.convert(dbConn);
      }
      if (iMetadataCon != null) {
        String catalogTemp=iMetadataCon.getDatabase();
        if (""String_Node_Str"".equals(catalogTemp)) {
          catalogFilter.clear();
        }
      }
    }
  }
  try {
    if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().indexOf(EDatabaseTypeName.ORACLEFORSID.getProduct()) > -1) {
      return catalogList;
    }
    if (ConnectionUtils.isOdbcTeradata(dbJDBCMetadata)) {
      return catalogList;
    }
    ResultSet catalogNames=null;
    if (dbJDBCMetadata instanceof SybaseDatabaseMetaData) {
      catalogNames=((SybaseDatabaseMetaData)dbJDBCMetadata).getCatalogs(((DatabaseConnection)dbConn).getUsername());
    }
 else {
      catalogNames=dbJDBCMetadata.getCatalogs();
    }
    List<String> schemaFilterList=new ArrayList<String>();
    if (catalogNames != null) {
      boolean isHive=MetadataConnectionUtils.isHive(dbJDBCMetadata);
      boolean isSybase=MetadataConnectionUtils.isSybase(dbJDBCMetadata);
      while (catalogNames.next()) {
        String catalogName=null;
        try {
          String temp=null;
          if (isHive) {
            temp=MetaDataConstants.TABLE_CAT.name();
          }
 else {
            temp=MetadataConnectionUtils.isOdbcPostgresql(dbJDBCMetadata) ? DatabaseConstant.ODBC_POSTGRESQL_CATALOG_NAME : MetaDataConstants.TABLE_CAT.name();
          }
          catalogName=catalogNames.getString(temp);
          if (!isHive && !MetadataConnectionUtils.isODBCCatalog(catalogName,dbJDBCMetadata)) {
            continue;
          }
        }
 catch (        Exception e) {
          log.warn(e,e);
          if (dbJDBCMetadata.getDatabaseProductName() != null && dbJDBCMetadata.getDatabaseProductName().toLowerCase().indexOf(DatabaseConstant.POSTGRESQL_PRODUCT_NAME) > -1) {
            catalogName=""String_Node_Str"";
          }
        }
        if (catalogName != null) {
          if (!isNullSID(dbConn) && dbConn != null && !((DatabaseConnection)dbConn).getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
            String databaseOnConnWizard=((DatabaseConnection)dbConn).getSID();
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,TalendCWMService.getReadableName(dbConn,databaseOnConnWizard),dbConn);
            break;
          }
 else           if (isCreateElement(catalogFilter,catalogName)) {
            postFillCatalog(catalogList,catalogFilter,schemaFilterList,catalogName,dbConn);
          }
        }
      }
      catalogNames.close();
      if (!isHive) {
        List<Catalog> removeCatalogList=new ArrayList<Catalog>();
        for (        Catalog catalog : catalogList) {
          List<Schema> schemaList=new ArrayList<Schema>();
          try {
            schemaList=fillSchemaToCatalog(dbConn,dbJDBCMetadata,catalog,schemaFilterList);
            if (!schemaList.isEmpty() && schemaList.size() > 0) {
              CatalogHelper.addSchemas(schemaList,catalog);
            }
          }
 catch (          Throwable e) {
            removeCatalogList.add(catalog);
          }
        }
        if (isSybase && catalogFilter != null && !catalogFilter.isEmpty() && catalogFilter.size() > 0 && catalogList.isEmpty() && catalogList.size() == 0) {
          catalogFilter.clear();
          return fillCatalogs(dbConn,dbJDBCMetadata,catalogFilter);
        }
        catalogList.removeAll(removeCatalogList);
      }
      Set<MetadataTable> tableSet=ConnectionHelper.getTables(dbConn);
      List<Catalog> replaceCatalogs=new ArrayList<Catalog>();
      List<String> catalogName=new ArrayList<String>();
      for (      MetadataTable table : tableSet) {
        EObject eContainer=table.eContainer();
        if (eContainer != null) {
          if (eContainer instanceof Catalog) {
            Catalog c=(Catalog)eContainer;
            String name=c.getName();
            if (!catalogName.contains(name)) {
              replaceCatalogs.add(c);
              catalogName.add(name);
            }
          }
 else           if (eContainer instanceof Schema) {
            EObject parent=eContainer.eContainer();
            if (parent != null && parent instanceof Catalog) {
              Catalog c=(Catalog)parent;
              String name=c.getName();
              if (!catalogName.contains(name)) {
                List<Schema> filterSchemas=new ArrayList<Schema>();
                List<String> schemaName=new ArrayList<String>();
                List<Schema> schemas=CatalogHelper.getSchemas(c);
                for (                Schema schema : schemas) {
                  if (schemaFilterList != null) {
                    if (schemaFilterList.contains(schema.getName())) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
 else                     if (schema.getOwnedElement() != null && !schema.getOwnedElement().isEmpty()) {
                      filterSchemas.add(schema);
                      schemaName.add(schema.getName());
                    }
                  }
                }
                for (                Catalog catalog : catalogList) {
                  if (catalog.getName().equals(name)) {
                    boolean added=false;
                    for (                    Schema schema : CatalogHelper.getSchemas(catalog)) {
                      if (!schemaName.contains(schema.getName())) {
                        filterSchemas.add(schema);
                        added=true;
                      }
                    }
                    if (added) {
                      break;
                    }
                  }
                }
                c.getOwnedElement().clear();
                CatalogHelper.addSchemas(filterSchemas,c);
                replaceCatalogs.add(c);
                catalogName.add(name);
              }
            }
          }
        }
      }
      if (this.isLinked() && !catalogList.isEmpty()) {
        ConnectionHelper.addCatalogs(catalogList,dbConn);
      }
      for (      Catalog catalog : replaceCatalogs) {
        List<Catalog> list=new ArrayList<Catalog>();
        String name=catalog.getName();
        Catalog c=(Catalog)ConnectionHelper.getPackage(name,dbConn,Catalog.class);
        if (c != null) {
          list.add(c);
          ConnectionHelper.removeCatalogs(list,dbConn);
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
 else {
          ConnectionHelper.addCatalog(catalog,dbConn);
        }
      }
    }
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"",e);
  }
  return catalogList;
}",0.9921238819917234
126993,"private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.getInstance().retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getInstance().getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}","@Deprecated private List<String> postFillCatalog(IMetadataConnection metaConnection,List<Catalog> catalogList,List<String> filterList,String catalogName,Connection dbConn){
  Catalog catalog=CatalogHelper.createCatalog(catalogName);
  catalogList.add(catalog);
  DatabaseConnection dbConnection=(DatabaseConnection)dbConn;
  if (dbConnection.getDatabaseType() != null && dbConnection.getDatabaseType().equals(EDatabaseTypeName.AS400.getDisplayName())) {
    IMetadataConnection iMetadataCon=ConvertionHelper.convert(dbConnection);
    if (iMetadataCon != null) {
      if (!StringUtils.isEmpty(iMetadataCon.getDatabase()) && !filterList.contains(iMetadataCon.getDatabase())) {
        filterList.add(iMetadataCon.getDatabase());
      }
      String pattern=ExtractMetaDataUtils.getInstance().retrieveSchemaPatternForAS400(iMetadataCon.getAdditionalParams());
      if (pattern != null && !""String_Node_Str"".equals(pattern)) {
        String[] multiSchems=ExtractMetaDataUtils.getInstance().getMultiSchems(pattern);
        if (multiSchems != null) {
          for (          String s : multiSchems) {
            if (!StringUtils.isEmpty(s) && !filterList.contains(s)) {
              filterList.add(s);
            }
          }
        }
      }
    }
  }
 else {
    String uiSchema=dbConnection.getUiSchema();
    if (uiSchema != null) {
      uiSchema=TalendCWMService.getReadableName(dbConn,uiSchema);
    }
    if (!StringUtils.isBlank(uiSchema) && !filterList.contains(uiSchema)) {
      filterList.add(uiSchema);
    }
  }
  return filterList;
}",0.9961265332472564
126994,"public Map<String,String> getTraceData();","public Map<String,TraceData> getTraceData();",0.8470588235294118
126995,"public void setTraceData(Map<String,String> traceData);","public void setTraceData(Map<String,TraceData> traceData);",0.8849557522123894
126996,"public void setTraceData(Map<String,String> traceData){
}","public void setTraceData(Map<String,TraceData> traceData){
}",0.8888888888888888
126997,"public Map<String,String> getTraceData(){
  return null;
}","public Map<String,TraceData> getTraceData(){
  return null;
}",0.8907563025210085
126998,"private void askForStatus() throws IOException {
  oos.writeObject(TraceStatusBean.ID_STATUS);
}","private synchronized void askForStatus() throws IOException {
  oos.writeObject(TraceStatusBean.ID_STATUS);
}",0.9365853658536586
126999,"public boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_ROW);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}","public synchronized boolean isNextRow(){
  if (!openSocket) {
    return false;
  }
  try {
    askForStatus();
    ois=new NoHeaderObjectInputStream(s.getInputStream());
    TraceBean traceBean=(TraceBean)ois.readObject();
    return traceBean.equals(TraceStatusBean.NEXT_ROW);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    return false;
  }
}",0.9850746268656716
127000,"public void sendTrace(String connectionId,String startNodeCid,LinkedHashMap datas) throws IOException {
  if (!openSocket) {
    return;
  }
  subjobMap.put(connectionId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(connectionId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (connectionId.equals(this.connectionId)) {
      return;
    }
  }
  TraceDataBean bean;
  if (processTraces.containsKey(connectionId)) {
    bean=processTraces.get(connectionId);
  }
 else {
    bean=new TraceDataBean(connectionId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(connectionId,bean);
  bean.setData(datas);
  oos.writeUnshared(bean);
  oos.flush();
  this.connectionId=connectionId;
}","public synchronized void sendTrace(String connectionId,String startNodeCid,LinkedHashMap datas) throws IOException {
  if (!openSocket) {
    return;
  }
  subjobMap.put(connectionId,startNodeCid);
  Iterator<Entry<String,String>> ite=subjobMap.entrySet().iterator();
  boolean sameSub=false;
  while (ite.hasNext()) {
    Entry<String,String> en=ite.next();
    if (en.getKey().equals(connectionId)) {
      continue;
    }
    if (en.getValue().equals(startNodeCid)) {
      sameSub=true;
      break;
    }
  }
  if (sameSub && processTraces.size() > 1) {
    if (connectionId.equals(this.connectionId)) {
      return;
    }
  }
  TraceDataBean bean;
  if (processTraces.containsKey(connectionId)) {
    bean=processTraces.get(connectionId);
  }
 else {
    bean=new TraceDataBean(connectionId);
  }
  bean.setNbLine(bean.getNbLine() + 1);
  processTraces.put(connectionId,bean);
  bean.setData(datas);
  oos.writeUnshared(bean);
  oos.flush();
  this.connectionId=connectionId;
}",0.9933503836317136
