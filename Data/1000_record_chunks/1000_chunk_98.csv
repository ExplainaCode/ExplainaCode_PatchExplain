record_number,buggy_code,fixed_code,code_similarity
97001,"private Artifact createArtifact(IProgressMonitor monitor,RoughArtifact roughArtifact,Artifact realParent) throws OseeCoreException {
  Artifact realArtifact=roughToRealArtifact.get(roughArtifact);
  if (realArtifact != null) {
    return realArtifact;
  }
  realArtifact=artifactResolver.resolve(roughArtifact,transaction.getBranch(),realParent,destinationArtifact);
  unmatchedArtifacts.remove(realArtifact);
  for (  RoughArtifact childRoughArtifact : roughArtifact.getDescendants()) {
    Artifact childArtifact=createArtifact(monitor,childRoughArtifact,realArtifact);
    if (areValid(realArtifact,childArtifact)) {
      removeOtherParent(childArtifact,realArtifact);
      if (!childArtifact.hasParent()) {
        realArtifact.addChild(importArtifactOrder,childArtifact);
      }
    }
    if ((extractor != null) && (extractor.artifactCreated(childArtifact))) {
      childArtifact.persist(transaction);
    }
  }
  if (realArtifact != null) {
    realArtifact.persist(transaction);
  }
  return realArtifact;
}","private Artifact createArtifact(IProgressMonitor monitor,RoughArtifact roughArtifact,Artifact realParent) throws OseeCoreException {
  Artifact realArtifact=roughToRealArtifact.get(roughArtifact);
  if (realArtifact != null) {
    return realArtifact;
  }
  realArtifact=artifactResolver.resolve(roughArtifact,transaction.getBranch(),realParent,destinationArtifact);
  unmatchedArtifacts.remove(realArtifact);
  for (  RoughArtifact childRoughArtifact : roughArtifact.getDescendants()) {
    Artifact childArtifact=createArtifact(monitor,childRoughArtifact,realArtifact);
    if (areValid(realArtifact,childArtifact)) {
      removeOtherParent(childArtifact,realArtifact);
      if (!childArtifact.hasParent()) {
        realArtifact.addChild(importArtifactOrder,childArtifact);
      }
    }
    if ((extractor != null) && (extractor.artifactCreated(childArtifact,childRoughArtifact))) {
      childArtifact.persist(transaction);
    }
  }
  if (realArtifact != null) {
    realArtifact.persist(transaction);
  }
  return realArtifact;
}",0.9907632474477396
97002,"/** 
 * Called after the rough artifact is converted to a real artifact
 * @param theArtifact The artifact that has been created
 * @return true if theArtifact has been modified
 */
@Override public boolean artifactCreated(Artifact theArtifact){
  return false;
}","/** 
 * Called after the rough artifact is converted to a real artifact
 * @param theArtifact The artifact that has been created
 * @param source The rough artifact source for the created artifact
 * @return true if the artifact has been modified
 */
@Override public boolean artifactCreated(Artifact theArtifact,RoughArtifact source){
  return false;
}",0.7922077922077922
97003,"public void handleRequirement(String rowValue,RoughArtifact roughArtifact){
  StringBuffer imageFileList=new StringBuffer(""String_Node_Str"");
  appendToImageList(rowValue,imageFileList);
  rowValue=normalizeHtml(rowValue);
  String imageFile=imageFileList.toString();
  if (!imageFile.isEmpty()) {
    String theImage;
    int comma=0;
    int imageNumber=0;
    do {
      String replaceName=""String_Node_Str"";
      comma=imageFile.indexOf(',');
      if (comma == -1) {
        theImage=uriDirectoryName + imageFile;
        replaceName=imageFile;
        imageFile=""String_Node_Str"";
      }
 else {
        theImage=uriDirectoryName + imageFile.substring(0,comma);
        replaceName=imageFile.substring(0,comma);
        imageFile=imageFile.substring(comma + 1);
      }
      try {
        URI imageURI=new URI(theImage);
        roughArtifact.addAttribute(CoreAttributeTypes.ImageContent.getName(),imageURI);
        rowValue=rowValue.replace(replaceName,IMAGE_BASE_NAME + Integer.toString(imageNumber));
        imageNumber++;
        postProcessGuids.add(roughArtifact.getGuid());
      }
 catch (      URISyntaxException e) {
        if (logger != null) {
          logger.log(e);
        }
      }
    }
 while (comma != -1);
  }
  if (Strings.isValid(rowValue)) {
    roughArtifact.addAttribute(CoreAttributeTypes.HTMLContent,rowValue);
  }
}","public void handleRequirement(String rowValue,RoughArtifact roughArtifact){
  StringBuffer imageFileList=new StringBuffer(""String_Node_Str"");
  appendToImageList(rowValue,imageFileList);
  rowValue=normalizeHtml(rowValue);
  String imageFile=imageFileList.toString();
  if (!imageFile.isEmpty()) {
    String theImage;
    int comma=0;
    int imageNumber=0;
    do {
      String replaceName=""String_Node_Str"";
      comma=imageFile.indexOf(',');
      if (comma == -1) {
        theImage=uriDirectoryName + imageFile;
        replaceName=imageFile;
        imageFile=""String_Node_Str"";
      }
 else {
        theImage=uriDirectoryName + imageFile.substring(0,comma);
        replaceName=imageFile.substring(0,comma);
        imageFile=imageFile.substring(comma + 1);
      }
      try {
        URI imageURI=new URI(theImage);
        roughArtifact.addAttribute(CoreAttributeTypes.ImageContent.getName(),imageURI);
        rowValue=rowValue.replace(replaceName,IMAGE_BASE_NAME + Integer.toString(imageNumber));
        imageNumber++;
        postProcessImages.add(imageURI.toASCIIString());
      }
 catch (      URISyntaxException e) {
        if (logger != null) {
          logger.log(e);
        }
      }
    }
 while (comma != -1);
  }
  if (Strings.isValid(rowValue)) {
    roughArtifact.addAttribute(CoreAttributeTypes.HTMLContent,rowValue);
  }
}",0.9771554900515844
97004,"@Override public boolean artifactCreated(Artifact theArtifact){
  String artifactGuid=theArtifact.getGuid();
  boolean toReturn=false;
  if (postProcessGuids.contains(artifactGuid)) {
    try {
      List<Integer> Ids=theArtifact.getAttributeIds(CoreAttributeTypes.ImageContent);
      List<String> HTML=theArtifact.getAttributeValues(CoreAttributeTypes.HTMLContent);
      for (      String htmlVal : HTML) {
        int iCount=0;
        for (        Integer imageNumber : Ids) {
          htmlVal=htmlVal.replaceAll(IMAGE_BASE_NAME + Integer.toString(iCount),imageNumber.toString());
          iCount++;
        }
        if (iCount > 0 || toReturn) {
          theArtifact.deleteAttributes(CoreAttributeTypes.HTMLContent);
          theArtifact.addAttribute(CoreAttributeTypes.HTMLContent,htmlVal);
          toReturn=true;
        }
      }
    }
 catch (    OseeCoreException e) {
      if (logger != null) {
        logger.log(e);
      }
    }
  }
  return toReturn;
}","@Override public boolean artifactCreated(Artifact theArtifact,RoughArtifact source){
  boolean toReturn=false;
  String content=""String_Node_Str"";
  Collection<URI> imageURIs=source.getURIAttributes();
  if (imageURIs.size() > 0) {
    URI uri=source.getURIAttributes().iterator().next();
    if (uri != null) {
      content=uri.toASCIIString();
    }
    if (postProcessImages.contains(content)) {
      try {
        List<Integer> Ids=theArtifact.getAttributeIds(CoreAttributeTypes.ImageContent);
        List<String> HTML=theArtifact.getAttributeValues(CoreAttributeTypes.HTMLContent);
        theArtifact.deleteAttributes(CoreAttributeTypes.HTMLContent);
        for (        String htmlVal : HTML) {
          int iCount=0;
          for (          Integer imageNumber : Ids) {
            htmlVal=htmlVal.replaceAll(IMAGE_BASE_NAME + Integer.toString(iCount),imageNumber.toString());
            iCount++;
            toReturn=true;
          }
          theArtifact.addAttribute(CoreAttributeTypes.HTMLContent,htmlVal);
        }
      }
 catch (      OseeCoreException e) {
        if (logger != null) {
          logger.log(e);
        }
      }
    }
  }
  return toReturn;
}",0.6401480111008325
97005,"public void doExtraction(OperationLogger logger,URI source,RoughArtifactCollector collector,String documentApplicabilty) throws IOException {
  InputStream htmlStream=null;
  try {
    String fileName=""String_Node_Str"" + source.getPath();
    uriDirectoryName=fileName.substring(0,fileName.lastIndexOf('/') + 1);
    postProcessGuids.clear();
    this.logger=logger;
    htmlStream=source.toURL().openStream();
    DoorsTableRowCollector rowCollector=new DoorsTableRowCollector(this);
    Document doc=Jsoup.parse(htmlStream,""String_Node_Str"",""String_Node_Str"");
    Element body=doc.body();
    for (    Node cNodes : body.childNodes()) {
      for (      Node subNodes : cNodes.childNodes()) {
        if (subNodes.nodeName().compareTo(""String_Node_Str"") == 0) {
          for (          Node tableRow : subNodes.childNodes()) {
            if (tableRow instanceof Element) {
              rowCollector.addRawRow(tableRow);
            }
          }
        }
      }
    }
    rowCollector.createArtifacts(collector);
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    Lib.close(htmlStream);
  }
}","public void doExtraction(OperationLogger logger,URI source,RoughArtifactCollector collector,String documentApplicabilty) throws IOException {
  InputStream htmlStream=null;
  try {
    String fileName=""String_Node_Str"" + source.getPath();
    uriDirectoryName=fileName.substring(0,fileName.lastIndexOf('/') + 1);
    postProcessImages.clear();
    this.logger=logger;
    htmlStream=source.toURL().openStream();
    DoorsTableRowCollector rowCollector=new DoorsTableRowCollector(this);
    Document doc=Jsoup.parse(htmlStream,""String_Node_Str"",""String_Node_Str"");
    Element body=doc.body();
    for (    Node cNodes : body.childNodes()) {
      for (      Node subNodes : cNodes.childNodes()) {
        if (subNodes.nodeName().compareTo(""String_Node_Str"") == 0) {
          for (          Node tableRow : subNodes.childNodes()) {
            if (tableRow instanceof Element) {
              rowCollector.addRawRow(tableRow);
            }
          }
        }
      }
    }
    rowCollector.createArtifacts(collector);
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    Lib.close(htmlStream);
  }
}",0.9959767545820296
97006,public boolean artifactCreated(Artifact theArtifact);,"public boolean artifactCreated(Artifact theArtifact,RoughArtifact source);",0.8346456692913385
97007,"@Test public void testHistoricalRelation() throws OseeCoreException {
  ArtifactId[] theArtifacts={null,null};
  int[] transactions=setupHistory(theArtifacts);
  ArtifactId artifact1=theArtifacts[0];
  ArtifactId artifact2=theArtifacts[1];
  QueryBuilder builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact2,artifact1);
  builder.includeDeletedAttributes();
  ResultSet<ArtifactReadable> artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,artifact2);
  Iterator<ArtifactReadable> iter=artifacts.iterator();
  ArtifactReadable artifactActual=iter.next();
  ArtifactReadable artifact1Actual=iter.next();
  builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact1,artifact2);
  builder.includeDeletedArtifacts();
  builder.includeDeletedAttributes();
  builder.andRelatedTo(Default_Hierarchical__Parent,artifact1Actual);
  artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,null);
}","@Test public void testHistoricalRelation() throws OseeCoreException {
  ArtifactId[] theArtifacts={null,null};
  int[] transactions=setupHistory(theArtifacts);
  ArtifactId artifact1=theArtifacts[0];
  ArtifactId artifact2=theArtifacts[1];
  QueryBuilder builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact2,artifact1);
  builder.includeDeletedAttributes();
  ResultSet<ArtifactReadable> artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,artifact2);
  Iterator<ArtifactReadable> iter=artifacts.iterator();
  ArtifactReadable artifact1Actual=iter.next();
  if (!artifact1Actual.equals(artifact2)) {
    artifact1Actual=iter.next();
  }
  builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact1,artifact2);
  builder.includeDeletedArtifacts();
  builder.includeDeletedAttributes();
  builder.andRelatedTo(Default_Hierarchical__Parent,artifact1Actual);
  artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,null);
}",0.972972972972973
97008,"@Test public void testHistoricalDeletedRelation() throws OseeCoreException {
  ArtifactId[] theArtifacts={null,null};
  int[] transactions=setupHistory(theArtifacts);
  ArtifactId artifact1=theArtifacts[0];
  ArtifactId artifact2=theArtifacts[1];
  QueryBuilder builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact2,artifact1);
  builder.includeDeletedAttributes();
  ResultSet<ArtifactReadable> artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,artifact2);
  Iterator<ArtifactReadable> iter=artifacts.iterator();
  ArtifactReadable artifactActual=iter.next();
  ArtifactReadable artifact1Actual=iter.next();
  builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[2]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact1,artifact2);
  builder.includeDeletedArtifacts();
  builder.includeDeletedAttributes();
  builder.andRelatedTo(Default_Hierarchical__Parent,artifact1Actual);
  artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,null,null);
}","@Test public void testHistoricalDeletedRelation() throws OseeCoreException {
  ArtifactId[] theArtifacts={null,null};
  int[] transactions=setupHistory(theArtifacts);
  ArtifactId artifact1=theArtifacts[0];
  ArtifactId artifact2=theArtifacts[1];
  QueryBuilder builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact2,artifact1);
  builder.includeDeletedAttributes();
  ResultSet<ArtifactReadable> artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,artifact2);
  Iterator<ArtifactReadable> iter=artifacts.iterator();
  ArtifactReadable artifact1Actual=iter.next();
  if (!artifact1Actual.equals(artifact2)) {
    artifact1Actual=iter.next();
  }
  builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[2]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact1,artifact2);
  builder.includeDeletedArtifacts();
  builder.includeDeletedAttributes();
  builder.andRelatedTo(Default_Hierarchical__Parent,artifact1Actual);
  artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,null,null);
}",0.973015873015873
97009,"@Test public void testHistoricalAllowDeletedRelation() throws OseeCoreException {
  ArtifactId[] theArtifacts={null,null};
  int[] transactions=setupHistory(theArtifacts);
  ArtifactId artifact1=theArtifacts[0];
  ArtifactId artifact2=theArtifacts[1];
  QueryBuilder builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact2,artifact1);
  builder.includeDeletedAttributes();
  ResultSet<ArtifactReadable> artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,artifact2);
  Iterator<ArtifactReadable> iter=artifacts.iterator();
  ArtifactReadable artifactActual=iter.next();
  ArtifactReadable artifact1Actual=iter.next();
  builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[2]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact1,artifact2);
  builder.includeDeletedArtifacts();
  builder.includeDeletedAttributes();
  builder.includeDeletedRelations();
  builder.andRelatedTo(Default_Hierarchical__Parent,artifact1Actual);
  artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,null);
}","@Test public void testHistoricalAllowDeletedRelation() throws OseeCoreException {
  ArtifactId[] theArtifacts={null,null};
  int[] transactions=setupHistory(theArtifacts);
  ArtifactId artifact1=theArtifacts[0];
  ArtifactId artifact2=theArtifacts[1];
  QueryBuilder builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[1]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact2,artifact1);
  builder.includeDeletedAttributes();
  ResultSet<ArtifactReadable> artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,artifact2);
  Iterator<ArtifactReadable> iter=artifacts.iterator();
  ArtifactReadable artifact1Actual=iter.next();
  if (!artifact1Actual.equals(artifact2)) {
    artifact1Actual=iter.next();
  }
  builder=query.fromBranch(CoreBranches.COMMON);
  builder.fromTransaction(transactions[2]);
  builder.andExists(CoreAttributeTypes.GeneralStringData,CoreAttributeTypes.Annotation);
  builder.andIds(artifact1,artifact2);
  builder.includeDeletedArtifacts();
  builder.includeDeletedAttributes();
  builder.includeDeletedRelations();
  builder.andRelatedTo(Default_Hierarchical__Parent,artifact1Actual);
  artifacts=builder.getResults();
  verifyHistoricalArtifacts(artifacts,artifact1,null);
}",0.9739862280030605
97010,"private DispoItemData createNewItemWithCopiedAnnotations(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report){
  DispoItemData toReturn=null;
  try {
    boolean isSameDiscrepancies=matchAllDiscrepancies(destItem,sourceItem);
    if (isSameDiscrepancies) {
      toReturn=buildNewItem(destItem,sourceItem,isCoverageCopy,report);
    }
 else {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceItem.getGuid());
    }
  }
 catch (  JSONException ex) {
    report.addOtherMessage(""String_Node_Str"",sourceItem.getName(),ex.getMessage());
  }
  return toReturn;
}","private DispoItemData createNewItemWithCopiedAnnotations(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report){
  DispoItemData toReturn=null;
  try {
    boolean isSameDiscrepancies=matchAllDiscrepancies(destItem,sourceItem);
    if (isSameDiscrepancies || isCoverageCopy) {
      toReturn=buildNewItem(destItem,sourceItem,isCoverageCopy,report,isSameDiscrepancies);
    }
 else {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceItem.getGuid());
    }
  }
 catch (  JSONException ex) {
    report.addOtherMessage(""String_Node_Str"",sourceItem.getName(),ex.getMessage());
  }
  return toReturn;
}",0.970266040688576
97011,"private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report) throws JSONException {
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  JSONArray newAnnotations=newItem.getAnnotationsList();
  JSONArray sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  for (int i=0; i < sourceAnnotations.length(); i++) {
    JSONObject annotationJson=sourceAnnotations.getJSONObject(i);
    DispoAnnotationData sourceAnnotation=DispoUtil.jsonObjToDispoAnnotationData(annotationJson);
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnntoation(sourceAnnotation)) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
      }
    }
 else     if (isCoverageCopy && destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid());
    }
 else {
      DispoAnnotationData newAnnotation=sourceAnnotation;
      if (destDefaultAnntationLocations.contains(sourceLocation)) {
        String locationRefs=sourceAnnotation.getLocationRefs();
        Integer locationRefAsInt=Integer.valueOf(locationRefs);
        if (locationRefAsInt > 0) {
          newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
        }
        report.addMessageForItem(destItem.getName(),""String_Node_Str"",locationRefs);
      }
      connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
      isChangesMade=true;
      int nextIndex=newAnnotations.length();
      newAnnotation.setIndex(nextIndex);
      newAnnotations.put(nextIndex,DispoUtil.annotationToJsonObj(newAnnotation));
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else {
    report.addMessageForItem(destItem.getName(),""String_Node_Str"");
    newItem=null;
  }
  return newItem;
}","private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies) throws JSONException {
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  JSONArray newAnnotations=newItem.getAnnotationsList();
  JSONArray sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  for (int i=0; i < sourceAnnotations.length(); i++) {
    JSONObject annotationJson=sourceAnnotations.getJSONObject(i);
    DispoAnnotationData sourceAnnotation=DispoUtil.jsonObjToDispoAnnotationData(annotationJson);
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnntoation(sourceAnnotation)) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
      }
    }
 else     if (isCoverageCopy && destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid());
    }
 else {
      if (isSameDiscrepancies || (isCoverageCopy && isCoveredDiscrepanciesExistInDest(destItem,sourceItem,sourceAnnotation,report))) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addMessageForItem(destItem.getName(),""String_Node_Str"",locationRefs);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex=newAnnotations.length();
        newAnnotation.setIndex(nextIndex);
        newAnnotations.put(nextIndex,DispoUtil.annotationToJsonObj(newAnnotation));
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addMessageForItem(destItem.getName(),""String_Node_Str"");
    newItem=null;
  }
  return newItem;
}",0.9375484871993792
97012,"private List<DispoItem> createItems(Map<String,DispoItem> exisitingItems,OperationReport report){
  List<DispoItem> toReturn;
  Collection<DispoItemData> values=datIdToItem.values();
  for (  DispoItemData item : values) {
    dataFactory.initDispoItem(item);
    item.setTotalPoints(String.valueOf(item.getAnnotationsList().length() + item.getDiscrepanciesList().length()));
  }
  if (!exisitingItems.isEmpty()) {
    DispoSetCopier copier=new DispoSetCopier(dispoConnector);
    List<DispoItemData> itemsFromImport=new ArrayList<>();
    itemsFromImport.addAll(values);
    Map<String,DispoItemData> nameToItem=new HashMap<>();
    for (    DispoItemData item : itemsFromImport) {
      nameToItem.put(item.getName(),item);
    }
    toReturn=copier.copyAllDispositions(nameToItem,exisitingItems.values(),false,report);
  }
 else {
    toReturn=new ArrayList<>();
    toReturn.addAll(values);
  }
  for (  DispoItem item : toReturn) {
    if (item.getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      createPlaceHolderAnnotations((DispoItemData)item);
    }
  }
  return toReturn;
}","private List<DispoItem> createItems(Map<String,DispoItem> exisitingItems,OperationReport report){
  List<DispoItem> toReturn;
  Collection<DispoItemData> values=datIdToItem.values();
  for (  DispoItemData item : values) {
    dataFactory.initDispoItem(item);
    item.setTotalPoints(String.valueOf(item.getAnnotationsList().length() + item.getDiscrepanciesList().length()));
  }
  if (!exisitingItems.isEmpty()) {
    DispoSetCopier copier=new DispoSetCopier(dispoConnector);
    List<DispoItemData> itemsFromImport=new ArrayList<>();
    itemsFromImport.addAll(values);
    Map<String,DispoItemData> nameToItem=new HashMap<>();
    for (    DispoItemData item : itemsFromImport) {
      nameToItem.put(item.getName(),item);
    }
    toReturn=copier.copyAllDispositions(nameToItem,exisitingItems.values(),true,report);
  }
 else {
    toReturn=new ArrayList<>();
    toReturn.addAll(values);
  }
  for (  DispoItem item : toReturn) {
    if (item.getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      createPlaceHolderAnnotations((DispoItemData)item);
    }
  }
  return toReturn;
}",0.9967816091954024
97013,"@Test public void testUnrelateFromAll() throws OseeCoreException {
  ArtifactReadable artifact1;
  ArtifactReadable artifact2;
  ArtifactReadable artifact3;
  ArtifactReadable artifact4;
  TransactionBuilder tx1=createTx();
  ArtifactId art1=tx1.createArtifact(Component,""String_Node_Str"");
  ArtifactId art2=tx1.createArtifact(Component,""String_Node_Str"");
  ArtifactId art3=tx1.createArtifact(Component,""String_Node_Str"");
  tx1.addChildren(art1,art2,art3);
  ArtifactId art4=tx1.createArtifact(GeneralDocument,""String_Node_Str"");
  tx1.relate(art1,Dependency__Dependency,art4);
  tx1.commit();
  artifact4=query.fromBranch(COMMON).andIds(art4).getResults().getExactlyOne();
  assertEquals(art4,artifact4);
  artifact1=artifact4.getRelated(Dependency__Artifact).getExactlyOne();
  assertEquals(art1,artifact1);
  Iterator<ArtifactReadable> iterator=artifact1.getChildren().iterator();
  assertEquals(art3,iterator.next());
  assertEquals(art2,iterator.next());
  TransactionBuilder tx2=createTx();
  tx2.unrelateFromAll(art1);
  tx2.commit();
  ResultSet<ArtifactReadable> arts=query.fromBranch(COMMON).andIds(art1,art2,art3,art4).includeDeletedArtifacts().getResults();
  Iterator<ArtifactReadable> iterator2=arts.iterator();
  artifact1=iterator2.next();
  artifact2=iterator2.next();
  artifact3=iterator2.next();
  artifact4=iterator2.next();
  assertEquals(art1,artifact1);
  assertEquals(art2,artifact2);
  assertEquals(art3,artifact3);
  assertEquals(art4,artifact4);
  assertEquals(true,artifact1.getChildren().isEmpty());
  assertEquals(true,artifact1.getRelated(Dependency__Dependency).isEmpty());
  assertNull(artifact2.getParent());
  assertNull(artifact3.getParent());
  assertEquals(true,artifact4.getRelated(Dependency__Artifact).isEmpty());
}","@Test public void testUnrelateFromAll() throws OseeCoreException {
  ArtifactReadable artifact1=null;
  ArtifactReadable artifact2=null;
  ArtifactReadable artifact3=null;
  ArtifactReadable artifact4=null;
  TransactionBuilder tx1=createTx();
  ArtifactId art1=tx1.createArtifact(Component,""String_Node_Str"");
  ArtifactId art2=tx1.createArtifact(Component,""String_Node_Str"");
  ArtifactId art3=tx1.createArtifact(Component,""String_Node_Str"");
  tx1.addChildren(art1,art2,art3);
  ArtifactId art4=tx1.createArtifact(GeneralDocument,""String_Node_Str"");
  tx1.relate(art1,Dependency__Dependency,art4);
  TransactionReadable rec1=tx1.commit();
  assertNotNull(rec1);
  artifact4=query.fromBranch(COMMON).andIds(art4).getResults().getExactlyOne();
  assertEquals(art4,artifact4);
  artifact1=artifact4.getRelated(Dependency__Artifact).getExactlyOne();
  assertEquals(art1,artifact1);
  Iterator<ArtifactReadable> iterator=artifact1.getChildren().iterator();
  assertEquals(art2,iterator.next());
  assertEquals(art3,iterator.next());
  TransactionBuilder tx2=createTx();
  tx2.unrelateFromAll(art1);
  TransactionReadable rec2=tx2.commit();
  assertNotNull(rec2);
  artifact1=query.fromBranch(COMMON).andUuid(art1.getUuid()).includeDeletedArtifacts().getResults().getAtMostOneOrNull();
  assertNotNull(artifact1);
  artifact2=query.fromBranch(COMMON).andUuid(art2.getUuid()).getResults().getAtMostOneOrNull();
  assertNotNull(artifact2);
  artifact3=query.fromBranch(COMMON).andUuid(art3.getUuid()).getResults().getAtMostOneOrNull();
  assertNotNull(artifact3);
  artifact4=query.fromBranch(COMMON).andUuid(art4.getUuid()).getResults().getAtMostOneOrNull();
  assertNotNull(artifact4);
  assertEquals(true,artifact1.getChildren().isEmpty());
  assertEquals(true,artifact1.getRelated(Dependency__Dependency).isEmpty());
  assertNull(artifact2.getParent());
  assertNull(artifact3.getParent());
  assertEquals(true,artifact4.getRelated(Dependency__Artifact).isEmpty());
}",0.7831454643048846
97014,"private void createPlaceHolderAnnotations(DispoItemData item){
  JSONObject discrepanciesList=item.getDiscrepanciesList();
  @SuppressWarnings(""String_Node_Str"") Iterator keys=discrepanciesList.keys();
  while (keys.hasNext()) {
    String key=(String)keys.next();
    try {
      Discrepancy discrepancy=DispoUtil.jsonObjToDiscrepancy(discrepanciesList.getJSONObject(key));
      addBlankAnnotationForForUncoveredLine(item,Integer.toString(discrepancy.getLocation()),discrepancy.getText());
    }
 catch (    JSONException ex) {
      throw new OseeCoreException(ex);
    }
  }
}","private void createPlaceHolderAnnotations(DispoItemData item,OperationReport report){
  DispoConnector connetor=new DispoConnector();
  try {
    List<Integer> uncovered=connetor.getAllUncoveredDiscprepancies(item);
    if (!uncovered.isEmpty()) {
      JSONObject discrepanciesList=item.getDiscrepanciesList();
      @SuppressWarnings(""String_Node_Str"") Iterator keys=discrepanciesList.keys();
      while (keys.hasNext()) {
        String key=(String)keys.next();
        Discrepancy discrepancy=DispoUtil.jsonObjToDiscrepancy(discrepanciesList.getJSONObject(key));
        if (uncovered.contains(discrepancy.getLocation())) {
          addBlankAnnotationForForUncoveredLine(item,Integer.toString(discrepancy.getLocation()),discrepancy.getText());
        }
      }
    }
  }
 catch (  JSONException ex) {
    report.addMessageForItem(item.getName(),""String_Node_Str"",ex.getCause());
  }
}",0.7246770904146839
97015,"private List<DispoItem> createItems(Map<String,DispoItem> exisitingItems,OperationReport report){
  List<DispoItem> toReturn;
  Collection<DispoItemData> values=datIdToItem.values();
  for (  DispoItemData item : values) {
    dataFactory.initDispoItem(item);
    item.setTotalPoints(String.valueOf(item.getAnnotationsList().length() + item.getDiscrepanciesList().length()));
  }
  if (!exisitingItems.isEmpty()) {
    DispoSetCopier copier=new DispoSetCopier(dispoConnector);
    List<DispoItemData> itemsFromImport=new ArrayList<>();
    itemsFromImport.addAll(values);
    Map<String,DispoItemData> nameToItem=new HashMap<>();
    for (    DispoItemData item : itemsFromImport) {
      nameToItem.put(item.getName(),item);
    }
    toReturn=copier.copyAllDispositions(nameToItem,exisitingItems.values(),true,report);
  }
 else {
    toReturn=new ArrayList<>();
    toReturn.addAll(values);
  }
  for (  DispoItem item : toReturn) {
    if (item.getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      createPlaceHolderAnnotations((DispoItemData)item);
    }
  }
  return toReturn;
}","private List<DispoItem> createItems(Map<String,DispoItem> exisitingItems,OperationReport report){
  List<DispoItem> toReturn;
  Collection<DispoItemData> values=datIdToItem.values();
  for (  DispoItemData item : values) {
    dataFactory.initDispoItem(item);
    item.setTotalPoints(String.valueOf(item.getAnnotationsList().length() + item.getDiscrepanciesList().length()));
  }
  if (!exisitingItems.isEmpty()) {
    DispoSetCopier copier=new DispoSetCopier(dispoConnector);
    List<DispoItemData> itemsFromImport=new ArrayList<>();
    itemsFromImport.addAll(values);
    Map<String,DispoItemData> nameToItem=new HashMap<>();
    for (    DispoItemData item : itemsFromImport) {
      nameToItem.put(item.getName(),item);
    }
    toReturn=copier.copyAllDispositions(nameToItem,exisitingItems.values(),true,report);
  }
 else {
    toReturn=new ArrayList<>();
    toReturn.addAll(values);
  }
  for (  DispoItem item : toReturn) {
    if (item.getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      createPlaceHolderAnnotations((DispoItemData)item,report);
    }
  }
  return toReturn;
}",0.9967904630903256
97016,"@Override public void runOperation(VariableMap variableMap,final IProgressMonitor monitor) throws Exception {
  if (!blamReadyToExecute()) {
    monitor.setCanceled(true);
    return;
  }
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch scriptsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch procedureBranch=variableMap.getBranch(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  versions=new ArrayList<>();
  for (  IAtsVersion version : variableMap.getCollection(IAtsVersion.class,""String_Node_Str"")) {
    versions.add(version);
  }
  init();
  loadTestRunArtifacts(scriptsBranch);
  Collection<TraceHandler> traceHandlers=new LinkedList<>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  TraceabilityProviderOperation provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,traceHandlers);
  RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(procedureBranch,provider);
  IStatus status=traceabilityData.initialize(monitor);
switch (status.getSeverity()) {
case IStatus.OK:
    requirementToCodeUnitsMap=traceabilityData.getRequirementsToCodeUnits();
  loadReqTaskMap();
writeStatusSheet(traceabilityData.getAllSwRequirements());
writeTestScriptSheet(traceabilityData.getCodeUnits());
excelWriter.endWorkbook();
IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
AIFile.writeToFile(iFile,charBak);
Program.launch(iFile.getLocation().toOSString());
break;
case IStatus.CANCEL:
monitor.setCanceled(true);
break;
default :
throw new OseeCoreException(status.getMessage(),status.getException());
}
}","@Override public void runOperation(VariableMap variableMap,final IProgressMonitor monitor) throws Exception {
  if (!blamReadyToExecute()) {
    monitor.setCanceled(true);
    return;
  }
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch scriptsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch procedureBranch=variableMap.getBranch(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  versions=new ArrayList<>();
  for (  IAtsVersion version : variableMap.getCollection(IAtsVersion.class,""String_Node_Str"")) {
    versions.add(version);
  }
  init();
  loadTestRunArtifacts(scriptsBranch);
  Collection<TraceHandler> traceHandlers=new LinkedList<>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  TraceabilityProviderOperation provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,traceHandlers,false);
  RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(procedureBranch,provider);
  IStatus status=traceabilityData.initialize(monitor);
switch (status.getSeverity()) {
case IStatus.OK:
    requirementToCodeUnitsMap=traceabilityData.getRequirementsToCodeUnits();
  loadReqTaskMap();
writeStatusSheet(traceabilityData.getAllSwRequirements());
writeTestScriptSheet(traceabilityData.getCodeUnits());
excelWriter.endWorkbook();
IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
AIFile.writeToFile(iFile,charBak);
Program.launch(iFile.getLocation().toOSString());
break;
case IStatus.CANCEL:
monitor.setCanceled(true);
break;
default :
throw new OseeCoreException(status.getMessage(),status.getException());
}
}",0.9984152139461172
97017,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  List<Artifact> artifacts=variableMap.getArtifacts(""String_Node_Str"");
  if (artifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IOseeBranch branch=artifacts.get(0).getBranch();
  init();
  String scriptDir=variableMap.getString(SCRIPT_ROOT_DIR);
  Boolean checked=variableMap.getBoolean(USE_TRACE_IN_OSEE);
  Collection<TraceHandler> traceHandlers=new LinkedList<>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  if (!checked) {
    File dir=new File(scriptDir);
    if (dir.exists()) {
      ScriptTraceabilityOperation traceOperation=new ScriptTraceabilityOperation(dir.getParentFile(),branch,false,traceHandlers);
      Operations.executeWorkAndCheckStatus(traceOperation,monitor);
      requirementsToCodeUnits=traceOperation.getRequirementToCodeUnitsMap();
    }
  }
  writeMainSheet(prepareSubsystemRequirements(artifacts));
  writer.endWorkbook();
  IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
  AIFile.writeToFile(iFile,charBak);
  Program.launch(iFile.getLocation().toOSString());
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  List<Artifact> artifacts=variableMap.getArtifacts(""String_Node_Str"");
  if (artifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IOseeBranch branch=artifacts.get(0).getBranch();
  init();
  String scriptDir=variableMap.getString(SCRIPT_ROOT_DIR);
  Boolean checked=variableMap.getBoolean(USE_TRACE_IN_OSEE);
  Boolean isGitCodeStructure=variableMap.getBoolean(USE_GIT_CODE_STRUCTURE);
  Collection<TraceHandler> traceHandlers=new LinkedList<>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  if (!checked) {
    File dir=new File(scriptDir);
    if (dir.exists()) {
      ScriptTraceabilityOperation traceOperation=new ScriptTraceabilityOperation(dir.getParentFile(),branch,false,traceHandlers,isGitCodeStructure);
      Operations.executeWorkAndCheckStatus(traceOperation,monitor);
      requirementsToCodeUnits=traceOperation.getRequirementToCodeUnitsMap();
    }
  }
  writeMainSheet(prepareSubsystemRequirements(artifacts));
  writer.endWorkbook();
  IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
  AIFile.writeToFile(iFile,charBak);
  Program.launch(iFile.getLocation().toOSString());
}",0.9665505226480836
97018,"@Override public String getXWidgetsXml() throws OseeCoreException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + USE_TRACE_IN_OSEE + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + SCRIPT_ROOT_DIR + ""String_Node_Str"");
  availableTraceHandlers=new LinkedList<>();
  sb.append(""String_Node_Str"");
  Collection<String> traceHandlerNames=TraceUnitExtensionManager.getInstance().getAllTraceHandlerNames();
  for (  String handler : traceHandlerNames) {
    sb.append(String.format(TRACE_HANDLER_CHECKBOX,handler));
    availableTraceHandlers.add(handler);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String getXWidgetsXml() throws OseeCoreException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + USE_TRACE_IN_OSEE + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + USE_GIT_CODE_STRUCTURE + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + SCRIPT_ROOT_DIR + ""String_Node_Str"");
  availableTraceHandlers=new LinkedList<>();
  sb.append(""String_Node_Str"");
  Collection<String> traceHandlerNames=TraceUnitExtensionManager.getInstance().getAllTraceHandlerNames();
  for (  String handler : traceHandlerNames) {
    sb.append(String.format(TRACE_HANDLER_CHECKBOX,handler));
    availableTraceHandlers.add(handler);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9484259879437374
97019,"public ImportTraceabilityPage(IStructuredSelection selection){
  super(PAGE_NAME);
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  traceUnitHandlers=new HashMap<>();
  if (selection != null && selection.size() == 1) {
    Object firstElement=selection.getFirstElement();
    if (firstElement instanceof IAdaptable) {
      currentResourceSelection=(IResource)((IAdaptable)firstElement).getAdapter(IResource.class);
    }
  }
}","public ImportTraceabilityPage(IStructuredSelection selection){
  super(PAGE_NAME);
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  traceUnitHandlers=new HashMap<>();
  if (selection != null && selection.size() == 1) {
    Object firstElement=selection.getFirstElement();
    if (firstElement instanceof IAdaptable) {
      currentResourceSelection=((IAdaptable)firstElement).getAdapter(IResource.class);
    }
  }
}",0.903954802259887
97020,"@Override public void createControl(Composite parent){
  initializeDialogUnits(parent);
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_FILL | GridData.HORIZONTAL_ALIGN_FILL));
  composite.setSize(composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  composite.setFont(parent.getFont());
  createSourceGroup(composite);
  createParserSelectArea(composite);
  restoreWidgetValues();
  updateWidgetEnablements();
  setPageComplete(determinePageCompletion());
  setControl(composite);
}","@Override public void createControl(Composite parent){
  initializeDialogUnits(parent);
  Composite composite=new Composite(parent,SWT.NULL);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_FILL | GridData.HORIZONTAL_ALIGN_FILL));
  composite.setSize(composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  composite.setFont(parent.getFont());
  createSourceGroup(composite);
  createParserSelectArea(composite);
  createGitStructureCheckbox(composite);
  restoreWidgetValues();
  updateWidgetEnablements();
  setPageComplete(determinePageCompletion());
  setControl(composite);
}",0.9664209664209664
97021,"@Override public boolean performFinish(){
  try {
    IOseeBranch branch=mainPage.getSelectedBranch();
    File file=mainPage.getImportFile();
    Collection<TraceHandler> handlers=new LinkedList<>();
    for (    String handlerId : mainPage.getTraceUnitHandlerIds()) {
      handlers.add(TraceUnitExtensionManager.getInstance().getTraceUnitHandlerById(handlerId));
    }
    Operations.executeWorkAndCheckStatus(new ScriptTraceabilityOperation(file,branch,true,handlers));
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"",ex);
  }
  return true;
}","@Override public boolean performFinish(){
  try {
    IOseeBranch branch=mainPage.getSelectedBranch();
    File file=mainPage.getImportFile();
    boolean isGitBased=mainPage.isGitBased();
    Collection<TraceHandler> handlers=new LinkedList<>();
    for (    String handlerId : mainPage.getTraceUnitHandlerIds()) {
      handlers.add(TraceUnitExtensionManager.getInstance().getTraceUnitHandlerById(handlerId));
    }
    Operations.executeWorkAndCheckStatus(new ScriptTraceabilityOperation(file,branch,true,handlers,isGitBased));
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"",ex);
  }
  return true;
}",0.9547977795400476
97022,"private void handelReqTrace(String path,TraceMark traceMark,File sourceFile) throws OseeCoreException, IOException {
  Artifact reqArtifact=null;
  String foundStr;
  String subSystem=null;
  String textContent=null;
  boolean traceMatch=false;
  subsystemMatcher.reset(sourceFile.getPath());
  if (subsystemMatcher.find()) {
    subSystem=subsystemMatcher.group();
    subSystem=subSystem.replace(""String_Node_Str"",""String_Node_Str"");
    subSystem=subSystem.toUpperCase();
  }
 else {
    subSystem=""String_Node_Str"";
  }
  if (traceMark.getTraceType().equals(""String_Node_Str"")) {
    foundStr=""String_Node_Str"";
  }
 else {
    reqArtifact=requirementData.getRequirementFromTraceMark(traceMark.getRawTraceMark());
    if (reqArtifact == null) {
      Pair<String,String> structuredRequirement=getStructuredRequirement(traceMark.getRawTraceMark());
      if (structuredRequirement != null) {
        reqArtifact=requirementData.getRequirementFromTraceMark(structuredRequirement.getFirst());
        if (reqArtifact == null) {
          foundStr=""String_Node_Str"";
        }
 else {
          if (reqArtifact.getAttributeCount(CoreAttributeTypes.WordTemplateContent) > 0) {
            textContent=WordUtil.textOnly(reqArtifact.getSoleAttributeValue(CoreAttributeTypes.WordTemplateContent,""String_Node_Str"")).toUpperCase();
          }
 else {
            List<Attribute<?>> attributes=reqArtifact.getAttributes();
            for (            Attribute<?> attribute : attributes) {
              textContent=textContent + attribute.toString();
            }
          }
          if (textContent.contains(structuredRequirement.getSecond()) || textContent.contains(getCanonicalRequirementName(structuredRequirement.getSecond()))) {
            foundStr=""String_Node_Str"";
          }
 else {
            foundStr=""String_Node_Str"";
          }
        }
      }
 else {
        foundStr=""String_Node_Str"";
      }
    }
 else {
      foundStr=fullMatch(reqArtifact);
      List<String> partitions=reqArtifact.getAttributesToStringList(CoreAttributeTypes.Partition);
      if (partitions.contains(subSystem)) {
        traceMatch=true;
      }
    }
  }
  String name=null;
  if (reqArtifact != null) {
    name=reqArtifact.getName();
    String inspection=getInspectionQual(reqArtifact);
    if (Strings.isValid(inspection)) {
      requirementToCodeUnitsMap.put(reqArtifact,inspection);
    }
    requirementToCodeUnitsMap.put(reqArtifact,path);
  }
  if (writeOutResults) {
    excelWriter.writeRow(foundStr,subSystem,path,name,traceMark,traceMatch);
  }
}","private void handelReqTrace(String path,TraceMark traceMark,File sourceFile) throws OseeCoreException, IOException {
  Artifact reqArtifact=null;
  String foundStr;
  String subSystem=null;
  String textContent=null;
  boolean traceMatch=false;
  subSystem=(isGitBased) ? getSubsystem(sourceFile.getPath(),gitSubsystemMatcher) : getSubsystem(sourceFile.getPath(),subsystemMatcher);
  if (traceMark.getTraceType().equals(""String_Node_Str"")) {
    foundStr=""String_Node_Str"";
  }
 else {
    reqArtifact=requirementData.getRequirementFromTraceMark(traceMark.getRawTraceMark());
    if (reqArtifact == null) {
      Pair<String,String> structuredRequirement=getStructuredRequirement(traceMark.getRawTraceMark());
      if (structuredRequirement != null) {
        reqArtifact=requirementData.getRequirementFromTraceMark(structuredRequirement.getFirst());
        if (reqArtifact == null) {
          foundStr=""String_Node_Str"";
        }
 else {
          if (reqArtifact.getAttributeCount(CoreAttributeTypes.WordTemplateContent) > 0) {
            textContent=WordUtil.textOnly(reqArtifact.getSoleAttributeValue(CoreAttributeTypes.WordTemplateContent,""String_Node_Str"")).toUpperCase();
          }
 else {
            List<Attribute<?>> attributes=reqArtifact.getAttributes();
            for (            Attribute<?> attribute : attributes) {
              textContent=textContent + attribute.toString();
            }
          }
          if (textContent.contains(structuredRequirement.getSecond()) || textContent.contains(getCanonicalRequirementName(structuredRequirement.getSecond()))) {
            foundStr=""String_Node_Str"";
          }
 else {
            foundStr=""String_Node_Str"";
          }
        }
      }
 else {
        foundStr=""String_Node_Str"";
      }
    }
 else {
      foundStr=fullMatch(reqArtifact);
      List<String> partitions=reqArtifact.getAttributesToStringList(CoreAttributeTypes.Partition);
      if (partitions.contains(subSystem)) {
        traceMatch=true;
      }
    }
  }
  String name=null;
  if (reqArtifact != null) {
    name=reqArtifact.getName();
    String inspection=getInspectionQual(reqArtifact);
    if (Strings.isValid(inspection)) {
      requirementToCodeUnitsMap.put(reqArtifact,inspection);
    }
    requirementToCodeUnitsMap.put(reqArtifact,path);
  }
  if (writeOutResults) {
    excelWriter.writeRow(foundStr,subSystem,path,name,traceMark,traceMatch);
  }
}",0.9385295299316996
97023,"public ScriptTraceabilityOperation(File file,IOseeBranch branch,boolean writeOutResults,Collection<? extends IArtifactType> types,boolean withInheritance,Collection<TraceHandler> traceHandlers) throws IOException {
  this(new RequirementData(branch,types,withInheritance),file,writeOutResults,traceHandlers);
}","public ScriptTraceabilityOperation(File file,IOseeBranch branch,boolean writeOutResults,Collection<? extends IArtifactType> types,boolean withInheritance,Collection<TraceHandler> traceHandlers,boolean isGitBased) throws IOException {
  this(new RequirementData(branch,types,withInheritance),file,writeOutResults,traceHandlers,isGitBased);
}",0.953846153846154
97024,"@Override public void addMenuCommandDefinitions(ArrayList<MenuCmdDef> commands,Artifact artifact){
  commands.add(new MenuCmdDef(CommandGroup.EDIT,SPECIALIZED_EDIT,""String_Node_Str"",AtsImage.ACTION));
}","@Override public void addMenuCommandDefinitions(ArrayList<MenuCmdDef> commands,Artifact artifact){
  commands.add(new MenuCmdDef(CommandGroup.EDIT,SPECIALIZED_EDIT,""String_Node_Str"",AtsImage.ACTION,OPEN_OPTION,Option_WORKFLOW_EDITOR));
}",0.9202733485193622
97025,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!aArtifact.isHistorical() && !presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE) && aArtifact.isOfType(AtsArtifactTypes.AtsArtifact)) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  VariableMap options=new VariableMap();
  options.setValues(objects);
  if (!aArtifact.isHistorical() && !presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE) && aArtifact.isOfType(AtsArtifactTypes.AtsArtifact)) {
    if (Option_WORKFLOW_EDITOR.equals(options.getString(OPEN_OPTION)) && !UserManager.getBooleanSetting(UserManager.DOUBLE_CLICK_SETTING_KEY_EDIT) && !UserManager.getBooleanSetting(UserManager.DOUBLE_CLICK_SETTING_KEY_ART_EDIT)) {
      return SPECIALIZED_MATCH;
    }
 else {
      return PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return NO_MATCH;
}",0.6753472222222222
97026,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.Task) && !aArtifact.isHistorical() && !presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE)) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.Task) && !aArtifact.isHistorical() && !presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE)) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}",0.9769820971867008
97027,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.RuleDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.RuleDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}",0.9740634005763688
97028,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}",0.9740634005763688
97029,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}",0.9740634005763688
97030,"@Override public void addMenuCommandDefinitions(ArrayList<MenuCmdDef> commands,Artifact artifact){
  commands.add(new MenuCmdDef(CommandGroup.EDIT,SPECIALIZED_EDIT,""String_Node_Str"",AtsImage.GLOBE));
}","@Override public void addMenuCommandDefinitions(ArrayList<MenuCmdDef> commands,Artifact artifact){
  commands.add(new MenuCmdDef(CommandGroup.EDIT,SPECIALIZED_EDIT,""String_Node_Str"",AtsImage.GLOBE,OPEN_OPTION,Option_WORLD_EDITOR));
}",0.9262672811059908
97031,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isHistorical() || presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE)) {
    return NO_MATCH;
  }
  if (aArtifact.isOfType(AtsArtifactTypes.AtsArtifact)) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  if (aArtifact.isOfType(CoreArtifactTypes.UniversalGroup)) {
    if (aArtifact.getRelatedArtifactsCount(CoreRelationTypes.Universal_Grouping__Members) == 0) {
      return NO_MATCH;
    }
    for (    Artifact childArt : aArtifact.getRelatedArtifacts(CoreRelationTypes.Universal_Grouping__Members)) {
      if (childArt.isOfType(AtsArtifactTypes.AtsArtifact)) {
        return PRESENTATION_SUBTYPE_MATCH;
      }
    }
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isHistorical() || presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE)) {
    return NO_MATCH;
  }
  VariableMap options=new VariableMap();
  options.setValues(objects);
  if (aArtifact.isOfType(AtsArtifactTypes.AtsArtifact)) {
    if (Option_WORLD_EDITOR.equals(options.getString(OPEN_OPTION))) {
      return SPECIALIZED_KEY_MATCH;
    }
 else {
      return PRESENTATION_SUBTYPE_MATCH;
    }
  }
  if (aArtifact.isOfType(CoreArtifactTypes.UniversalGroup)) {
    if (aArtifact.getRelatedArtifactsCount(CoreRelationTypes.Universal_Grouping__Members) == 0) {
      return NO_MATCH;
    }
    for (    Artifact childArt : aArtifact.getRelatedArtifacts(CoreRelationTypes.Universal_Grouping__Members)) {
      if (childArt.isOfType(AtsArtifactTypes.AtsArtifact)) {
        return PRESENTATION_SUBTYPE_MATCH;
      }
    }
  }
  return NO_MATCH;
}",0.8858495528669121
97032,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE) && !aArtifact.isHistorical()) {
    if (aArtifact.isOfType(getArtifactTypeMatches())) {
      return ARTIFACT_TYPE_MATCH;
    }
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(GENERALIZED_EDIT,PRODUCE_ATTRIBUTE) && !aArtifact.isHistorical()) {
    if (aArtifact.isOfType(getArtifactTypeMatches())) {
      return ARTIFACT_TYPE_MATCH;
    }
  }
  return NO_MATCH;
}",0.977667493796526
97033,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  int rating=IRenderer.NO_MATCH;
  if (artifact.getArtifactType().inheritsFrom(CoreArtifactTypes.ModelDiagram)) {
    if (presentationType.matches(RENDER_AS_HUMAN_READABLE_TEXT,PREVIEW,DEFAULT_OPEN,SPECIALIZED_EDIT)) {
      rating=IRenderer.PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return rating;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  int rating=IRenderer.NO_MATCH;
  if (artifact.getArtifactType().inheritsFrom(CoreArtifactTypes.ModelDiagram)) {
    if (presentationType.matches(RENDER_AS_HUMAN_READABLE_TEXT,PREVIEW,DEFAULT_OPEN,SPECIALIZED_EDIT)) {
      rating=IRenderer.PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return rating;
}",0.9791666666666666
97034,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  if (presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED,PRODUCE_ATTRIBUTE)) {
    return PRESENTATION_TYPE;
  }
  if (presentationType.matches(SPECIALIZED_EDIT,DEFAULT_OPEN)) {
    return GENERAL_MATCH;
  }
  if (presentationType.matches(PREVIEW,RENDER_AS_HUMAN_READABLE_TEXT)) {
    return BASE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... options) throws OseeCoreException {
  if (presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED,PRODUCE_ATTRIBUTE)) {
    return PRESENTATION_TYPE;
  }
  if (presentationType.matches(SPECIALIZED_EDIT,DEFAULT_OPEN)) {
    return GENERAL_MATCH;
  }
  if (presentationType.matches(PREVIEW,RENDER_AS_HUMAN_READABLE_TEXT)) {
    return BASE_MATCH;
  }
  return NO_MATCH;
}",0.9808917197452228
97035,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  int toReturn=NO_MATCH;
  if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.HTMLContent)) {
    if (presentationType.matches(PresentationType.PREVIEW,PresentationType.DIFF)) {
      toReturn=PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return toReturn;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  int toReturn=NO_MATCH;
  if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.HTMLContent)) {
    if (presentationType.matches(PresentationType.PREVIEW,PresentationType.DIFF)) {
      toReturn=PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return toReturn;
}",0.9794050343249427
97036,"public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException ;","public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException ;",0.926829268292683
97037,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  int toReturn=NO_MATCH;
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(CoreArtifactTypes.TestCase)) {
    if (presentationType.matches(PresentationType.SPECIALIZED_EDIT,PresentationType.DEFAULT_OPEN)) {
      toReturn=PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return toReturn;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  int toReturn=NO_MATCH;
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(CoreArtifactTypes.TestCase)) {
    if (presentationType.matches(PresentationType.SPECIALIZED_EDIT,PresentationType.DEFAULT_OPEN)) {
      toReturn=PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return toReturn;
}",0.9794520547945206
97038,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.NativeContent)) {
    if (presentationType.matches(SPECIALIZED_EDIT,PREVIEW,DEFAULT_OPEN)) {
      return PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.NativeContent)) {
    if (presentationType.matches(SPECIALIZED_EDIT,PREVIEW,DEFAULT_OPEN)) {
      return PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return NO_MATCH;
}",0.977667493796526
97039,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact){
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects){
  return NO_MATCH;
}",0.9296875
97040,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.PlainTextContent)) {
    if (presentationType.matches(SPECIALIZED_EDIT,PREVIEW,DEFAULT_OPEN,PRODUCE_ATTRIBUTE,DIFF)) {
      return PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.PlainTextContent)) {
    if (presentationType.matches(SPECIALIZED_EDIT,PREVIEW,DEFAULT_OPEN,PRODUCE_ATTRIBUTE,DIFF)) {
      return PRESENTATION_SUBTYPE_MATCH;
    }
  }
  return NO_MATCH;
}",0.9790209790209792
97041,"private static IRenderer getBestRendererPrototype(PresentationType presentationType,Artifact artifact) throws OseeCoreException {
  if (presentationType == DEFAULT_OPEN && UserManager.getBooleanSetting(UserManager.DOUBLE_CLICK_SETTING_KEY_ART_EDIT)) {
    presentationType=GENERAL_REQUESTED;
  }
  IRenderer bestRendererPrototype=null;
  int bestRating=IRenderer.NO_MATCH;
  ensurePopulated();
  for (  IRenderer renderer : renderers) {
    int rating=renderer.getApplicabilityRating(presentationType,artifact);
    if (rating > bestRating) {
      bestRendererPrototype=renderer;
      bestRating=rating;
    }
  }
  if (bestRendererPrototype == null) {
    throw new OseeStateException(""String_Node_Str"",presentationType,artifact);
  }
  return bestRendererPrototype;
}","private static IRenderer getBestRendererPrototype(PresentationType presentationType,Artifact artifact,Object... options) throws OseeCoreException {
  if (presentationType == DEFAULT_OPEN && UserManager.getBooleanSetting(UserManager.DOUBLE_CLICK_SETTING_KEY_ART_EDIT)) {
    presentationType=GENERAL_REQUESTED;
  }
  IRenderer bestRendererPrototype=null;
  int bestRating=IRenderer.NO_MATCH;
  ensurePopulated();
  for (  IRenderer renderer : renderers) {
    int rating=renderer.getApplicabilityRating(presentationType,artifact,options);
    if (rating > bestRating) {
      bestRendererPrototype=renderer;
      bestRating=rating;
    }
  }
  if (bestRendererPrototype == null) {
    throw new OseeStateException(""String_Node_Str"",presentationType,artifact);
  }
  return bestRendererPrototype;
}",0.9834183673469388
97042,"public static IRenderer getBestRenderer(PresentationType presentationType,Artifact artifact,Object... options) throws OseeCoreException {
  IRenderer bestRenderer=getBestRendererPrototype(presentationType,artifact).newInstance();
  bestRenderer.setOptions(options);
  return bestRenderer;
}","public static IRenderer getBestRenderer(PresentationType presentationType,Artifact artifact,Object... options) throws OseeCoreException {
  IRenderer bestRenderer=getBestRendererPrototype(presentationType,artifact,options).newInstance();
  bestRenderer.setOptions(options);
  return bestRenderer;
}",0.9863945578231292
97043,"public static HashCollection<IRenderer,Artifact> createRenderMap(PresentationType presentationType,Collection<Artifact> artifacts,Object... options) throws OseeCoreException {
  HashCollection<IRenderer,Artifact> prototypeRendererArtifactMap=new HashCollection<IRenderer,Artifact>(false,LinkedList.class);
  for (  Artifact artifact : artifacts) {
    IRenderer renderer=getBestRendererPrototype(presentationType,artifact);
    prototypeRendererArtifactMap.put(renderer,artifact);
  }
  HashCollection<IRenderer,Artifact> rendererArtifactMap=new HashCollection<IRenderer,Artifact>(false,LinkedList.class);
  for (  IRenderer prototypeRenderer : prototypeRendererArtifactMap.keySet()) {
    IRenderer renderer=prototypeRenderer.newInstance();
    renderer.setOptions(options);
    rendererArtifactMap.put(renderer,prototypeRendererArtifactMap.getValues(prototypeRenderer));
  }
  return rendererArtifactMap;
}","public static HashCollection<IRenderer,Artifact> createRenderMap(PresentationType presentationType,Collection<Artifact> artifacts,Object... options) throws OseeCoreException {
  HashCollection<IRenderer,Artifact> prototypeRendererArtifactMap=new HashCollection<IRenderer,Artifact>(false,LinkedList.class);
  for (  Artifact artifact : artifacts) {
    IRenderer renderer=getBestRendererPrototype(presentationType,artifact,options);
    prototypeRendererArtifactMap.put(renderer,artifact);
  }
  HashCollection<IRenderer,Artifact> rendererArtifactMap=new HashCollection<IRenderer,Artifact>(false,LinkedList.class);
  for (  IRenderer prototypeRenderer : prototypeRendererArtifactMap.keySet()) {
    IRenderer renderer=prototypeRenderer.newInstance();
    renderer.setOptions(options);
    rendererArtifactMap.put(renderer,prototypeRendererArtifactMap.getValues(prototypeRenderer));
  }
  return rendererArtifactMap;
}",0.9956140350877192
97044,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  if (artifact.getArtifactType().inheritsFrom(CoreArtifactTypes.TestInformationSheet) && presentationType.matches(DEFAULT_OPEN,PREVIEW)) {
    return SPECIALIZED_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  if (artifact.getArtifactType().inheritsFrom(CoreArtifactTypes.TestInformationSheet) && presentationType.matches(DEFAULT_OPEN,PREVIEW)) {
    return SPECIALIZED_MATCH;
  }
  return NO_MATCH;
}",0.9724770642201837
97045,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED,PRODUCE_ATTRIBUTE) && aArtifact.isAttributeTypeValid(ContentUrl)) {
    return SUBTYPE_TYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED,PRODUCE_ATTRIBUTE) && aArtifact.isAttributeTypeValid(ContentUrl)) {
    return SUBTYPE_TYPE_MATCH;
  }
  return NO_MATCH;
}",0.9758713136729222
97046,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED,PRODUCE_ATTRIBUTE) && aArtifact.isAttributeTypeValid(WholeWordContent)) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED,PRODUCE_ATTRIBUTE) && aArtifact.isAttributeTypeValid(WholeWordContent)) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}",0.9767441860465116
97047,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact) throws OseeCoreException {
  int rating=NO_MATCH;
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(PresentationType.GENERALIZED_EDIT,PresentationType.GENERAL_REQUESTED)) {
    if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.WordTemplateContent)) {
      rating=PRESENTATION_SUBTYPE_MATCH;
    }
 else     if (presentationType.matches(PresentationType.PREVIEW,PresentationType.DIFF)) {
      rating=BASE_MATCH;
    }
  }
  return rating;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  int rating=NO_MATCH;
  Artifact aArtifact=artifact.getFullArtifact();
  if (!presentationType.matches(PresentationType.GENERALIZED_EDIT,PresentationType.GENERAL_REQUESTED)) {
    if (aArtifact.isAttributeTypeValid(CoreAttributeTypes.WordTemplateContent)) {
      rating=PRESENTATION_SUBTYPE_MATCH;
    }
 else     if (presentationType.matches(PresentationType.PREVIEW,PresentationType.DIFF)) {
      rating=BASE_MATCH;
    }
  }
  return rating;
}",0.9845626072041166
97048,"@Override public void addMenuCommandDefinitions(ArrayList<MenuCmdDef> commands,Artifact artifact){
  commands.add(new MenuCmdDef(CommandGroup.EDIT,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.ARTIFACT_EDITOR));
  commands.add(new MenuCmdDef(CommandGroup.EDIT,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.ARTIFACT_MASS_EDITOR,OPEN_OPTION,OPEN_IN_TABLE_EDITOR));
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.ARTIFACT_EXPLORER,OPEN_OPTION,OPEN_IN_EXPLORER));
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.DB_ICON_BLUE,OPEN_OPTION,OPEN_IN_HISTORY));
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.SKYWALKER,OPEN_OPTION,OPEN_IN_GRAPH));
}","@Override public void addMenuCommandDefinitions(ArrayList<MenuCmdDef> commands,Artifact artifact){
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.ARTIFACT_EDITOR));
  commands.add(new MenuCmdDef(CommandGroup.EDIT,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.ARTIFACT_MASS_EDITOR,OPEN_OPTION,OPEN_IN_TABLE_EDITOR));
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.ARTIFACT_EXPLORER,OPEN_OPTION,OPEN_IN_EXPLORER));
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.DB_ICON_BLUE,OPEN_OPTION,OPEN_IN_HISTORY));
  commands.add(new MenuCmdDef(CommandGroup.SHOW,GENERALIZED_EDIT,""String_Node_Str"",FrameworkImage.SKYWALKER,OPEN_OPTION,OPEN_IN_GRAPH));
}",0.9949937421777222
97049,"@Override public void toXml(XMLStreamWriter writer) throws XMLStreamException {
  writer.writeStartElement(getLevel().getName());
  writeLocationCheckLocationLoggingOn(writer);
  writeMessage(writer);
  writer.writeEndElement();
}","@Override public void toXml(XMLStreamWriter writer) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeAttribute(""String_Node_Str"",getLevel().getName());
  writeMessage(writer);
  writeLocationCheckLocationLoggingOn(writer);
  writer.writeEndElement();
}",0.789272030651341
97050,"@Override public void run(){
  ByteBuffer buffer=ByteBuffer.allocate(DATA_SIZE);
  DatagramChannel channel=null;
  try {
    while (run) {
      try {
        channel=DatagramChannel.open();
        channel.socket().setReuseAddress(true);
        channel.socket().bind(address);
        channel.socket().setSoTimeout(UDP_TIMEOUT);
        channel.socket().setReceiveBufferSize(ONE_MEG);
        channel.configureBlocking(true);
        while (run) {
          buffer.clear();
          channel.receive(buffer);
          buffer.flip();
          processBuffer(buffer);
        }
      }
 catch (      BindException ex) {
        if (debugOutput) {
          OseeLog.log(logger,Level.FINEST,ex);
        }
        channel.close();
        Thread.sleep(1000);
      }
    }
  }
 catch (  InterruptedIOException ex) {
    Thread.interrupted();
    if (run && debugOutput) {
      OseeLog.log(logger,Level.WARNING,""String_Node_Str"",ex);
    }
  }
catch (  ClosedByInterruptException ie) {
    Thread.interrupted();
    if (run && debugOutput) {
      OseeLog.log(logger,Level.WARNING,""String_Node_Str"",ie);
    }
  }
catch (  Throwable t) {
    throw new OTEException(t);
  }
 finally {
    try {
      if (channel != null) {
        channel.close();
      }
    }
 catch (    IOException ex) {
      if (debugOutput) {
        ex.printStackTrace();
      }
    }
  }
}","@Override public void run(){
  ByteBuffer buffer=ByteBuffer.allocate(DATA_SIZE);
  DatagramChannel channel=null;
  try {
    while (run) {
      try {
        channel=DatagramChannel.open();
        channel.socket().setReuseAddress(true);
        channel.socket().bind(address);
        channel.socket().setSoTimeout(UDP_TIMEOUT);
        channel.socket().setReceiveBufferSize(ONE_MEG);
        channel.configureBlocking(true);
        while (run) {
          try {
            buffer.clear();
            channel.receive(buffer);
            buffer.flip();
            processBuffer(buffer);
          }
 catch (          Throwable th) {
            th.printStackTrace();
          }
        }
      }
 catch (      BindException ex) {
        if (debugOutput) {
          OseeLog.log(logger,Level.FINEST,ex);
        }
        channel.close();
        Thread.sleep(1000);
      }
    }
  }
 catch (  InterruptedIOException ex) {
    Thread.interrupted();
    if (run && debugOutput) {
      OseeLog.log(logger,Level.WARNING,""String_Node_Str"",ex);
    }
  }
catch (  ClosedByInterruptException ie) {
    Thread.interrupted();
    if (run && debugOutput) {
      OseeLog.log(logger,Level.WARNING,""String_Node_Str"",ie);
    }
  }
catch (  Throwable t) {
    throw new OTEException(t);
  }
 finally {
    try {
      if (channel != null) {
        channel.close();
      }
    }
 catch (    IOException ex) {
      if (debugOutput) {
        ex.printStackTrace();
      }
    }
  }
}",0.9592410400562192
97051,"public boolean isSortByTransaction(){
  CustomizeData generateCustDataFromTable=xHistoryViewer.getXViewer().getCustomizeMgr().generateCustDataFromTable();
  return generateCustDataFromTable.getSortingData().getSortingIds().contains(HistoryXViewerFactory.transaction.getId());
}","public boolean isSortByTransaction(){
  return xHistoryViewer.getXViewer().getCustomizeMgr().getCurrentCustomizeData().getSortingData().getSortingIds().contains(HistoryXViewerFactory.transaction.getId());
}",0.7536231884057971
97052,"@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  IOseeBranch branch=TokenFactory.createBranch(branchUuid,""String_Node_Str"");
  QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
  ResultSet<ArtifactReadable> arts=factory.fromBranch(branch).andGuid(artifactUuid).getResults();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(arts);
}","@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  IOseeBranch branch=TokenFactory.createBranch(branchUuid,""String_Node_Str"");
  QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
  ResultSet<ArtifactReadable> arts=factory.fromBranch(branch).andUuid(artifactUuid).getResults();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(arts);
}",0.9684466019417476
97053,"public ArtifactResource(UriInfo uriInfo,Request request,Long branchUuid,String artifactUuid){
  this.uriInfo=uriInfo;
  this.request=request;
  this.branchUuid=branchUuid;
  this.artifactUuid=artifactUuid;
}","public ArtifactResource(UriInfo uriInfo,Request request,Long branchUuid,Long artifactUuid){
  this.uriInfo=uriInfo;
  this.request=request;
  this.branchUuid=branchUuid;
  this.artifactUuid=artifactUuid;
}",0.9854368932038836
97054,"@Path(""String_Node_Str"") public ArtifactResource getArtifact(@PathParam(""String_Node_Str"") String artifactUuid){
  return new ArtifactResource(uriInfo,request,branchUuid,artifactUuid);
}","@Path(""String_Node_Str"") public ArtifactResource getArtifact(@PathParam(""String_Node_Str"") Long artifactUuid){
  return new ArtifactResource(uriInfo,request,branchUuid,artifactUuid);
}",0.9837837837837838
97055,"public AttributeResource(UriInfo uriInfo,Request request,Long branchUuid,String artifactUuid,int attributeId,int transactionId){
  this.uriInfo=uriInfo;
  this.request=request;
  this.branchUuid=branchUuid;
  this.artifactUuid=artifactUuid;
  this.attrId=attributeId;
  this.transactionId=transactionId;
}","public AttributeResource(UriInfo uriInfo,Request request,Long branchUuid,Long artifactUuid,int attributeId,int transactionId){
  this.uriInfo=uriInfo;
  this.request=request;
  this.branchUuid=branchUuid;
  this.artifactUuid=artifactUuid;
  this.attrId=attributeId;
  this.transactionId=transactionId;
}",0.9901315789473684
97056,"@GET @Produces(MediaType.TEXT_PLAIN) public String getAsText() throws OseeCoreException {
  IOseeBranch branch=TokenFactory.createBranch(branchUuid,""String_Node_Str"");
  QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
  QueryBuilder queryBuilder=factory.fromBranch(branch).andGuid(artifactUuid);
  if (transactionId > 0) {
    queryBuilder.fromTransaction(transactionId);
  }
  ArtifactReadable exactlyOne=queryBuilder.getResults().getExactlyOne();
  Optional<? extends AttributeReadable<Object>> item=Iterables.tryFind(exactlyOne.getAttributes(),new Predicate<AttributeReadable<Object>>(){
    @Override public boolean apply(    AttributeReadable<Object> attribute){
      return attribute.getLocalId() == attrId;
    }
  }
);
  String toReturn=""String_Node_Str"";
  if (item.isPresent()) {
    Object value=item.get().getValue();
    if (value != null) {
      toReturn=value.toString();
    }
  }
  return toReturn;
}","@GET @Produces(MediaType.TEXT_PLAIN) public String getAsText() throws OseeCoreException {
  IOseeBranch branch=TokenFactory.createBranch(branchUuid,""String_Node_Str"");
  QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
  QueryBuilder queryBuilder=factory.fromBranch(branch).andUuid(artifactUuid);
  if (transactionId > 0) {
    queryBuilder.fromTransaction(transactionId);
  }
  ArtifactReadable exactlyOne=queryBuilder.getResults().getExactlyOne();
  Optional<? extends AttributeReadable<Object>> item=Iterables.tryFind(exactlyOne.getAttributes(),new Predicate<AttributeReadable<Object>>(){
    @Override public boolean apply(    AttributeReadable<Object> attribute){
      return attribute.getLocalId() == attrId;
    }
  }
);
  String toReturn=""String_Node_Str"";
  if (item.isPresent()) {
    Object value=item.get().getValue();
    if (value != null) {
      toReturn=value.toString();
    }
  }
  return toReturn;
}",0.998936170212766
97057,"@GET @Produces(MediaType.TEXT_HTML) public String getAllAttributes() throws OseeCoreException {
  IOseeBranch branch=TokenFactory.createBranch(branchUuid,""String_Node_Str"");
  QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
  ArtifactReadable artifact=factory.fromBranch(branch).andGuid(artifactUuid).getResults().getExactlyOne();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(artifact.getAttributes());
}","@GET @Produces(MediaType.TEXT_HTML) public String getAllAttributes() throws OseeCoreException {
  IOseeBranch branch=TokenFactory.createBranch(branchUuid,""String_Node_Str"");
  QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
  ArtifactReadable artifact=factory.fromBranch(branch).andUuid(artifactUuid).getResults().getExactlyOne();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(artifact.getAttributes());
}",0.9977678571428572
97058,"public AttributesResource(UriInfo uriInfo,Request request,Long branchUuid,String artifactUuid){
  this.uriInfo=uriInfo;
  this.request=request;
  this.branchUuid=branchUuid;
  this.artifactUuid=artifactUuid;
}","public AttributesResource(UriInfo uriInfo,Request request,Long branchUuid,Long artifactUuid){
  this.uriInfo=uriInfo;
  this.request=request;
  this.branchUuid=branchUuid;
  this.artifactUuid=artifactUuid;
}",0.9855769230769232
97059,"public Map<String,Object> toData(TransactionReadable txRecord) throws OseeCoreException {
  Map<String,Object> data=new LinkedHashMap<>();
  data.put(""String_Node_Str"",txRecord.getLocalId());
  data.put(""String_Node_Str"",txRecord.getTxType());
  data.put(""String_Node_Str"",txRecord.getDate());
  data.put(""String_Node_Str"",txRecord.getComment());
  data.put(""String_Node_Str"",txRecord.getAuthorId());
  IOseeBranch branch=getBranchFromUuid(txRecord.getBranchId());
  URI uri;
  if (isAtEndOfPath(uriInfo.getPath(),""String_Node_Str"")) {
    uri=uriInfo.getAbsolutePathBuilder().path(""String_Node_Str"").build(branch.getUuid());
  }
 else {
    uri=uriInfo.getAbsolutePathBuilder().path(""String_Node_Str"").build(branch.getUuid());
  }
  data.put(""String_Node_Str"",asLink(uri.toASCIIString(),branch.getName()));
  return data;
}","public Map<String,Object> toData(TransactionReadable txRecord) throws OseeCoreException {
  Map<String,Object> data=new LinkedHashMap<>();
  data.put(""String_Node_Str"",txRecord.getLocalId());
  data.put(""String_Node_Str"",txRecord.getTxType());
  data.put(""String_Node_Str"",txRecord.getDate());
  data.put(""String_Node_Str"",txRecord.getComment());
  data.put(""String_Node_Str"",txRecord.getAuthorId());
  IOseeBranch branch=getBranchFromUuid(txRecord.getBranchId());
  URI uri;
  if (isAtEndOfPath(uriInfo.getPath(),""String_Node_Str"")) {
    uri=uriInfo.getAbsolutePathBuilder().path(""String_Node_Str"").build(branch.getUuid());
  }
 else {
    uri=uriInfo.getAbsolutePathBuilder().path(""String_Node_Str"").build(branch.getUuid());
  }
  data.put(""String_Node_Str"",asLink(uri.getPath(),branch.getName()));
  return data;
}",0.9878197320341048
97060,"public static ArtifactTypeSearch getPrimitive(String storageString){
  IArtifactType type=TokenFactory.createArtifactType(Long.parseLong(storageString),""String_Node_Str"");
  return new ArtifactTypeSearch(type);
}","public static ArtifactTypeSearch getPrimitive(String storageString){
  ArrayList<IArtifactType> artifactTypes=new ArrayList<>();
  for (  String artifactTypeId : storageString.split(""String_Node_Str"")) {
    artifactTypes.add(TokenFactory.createArtifactType(Long.parseLong(artifactTypeId),""String_Node_Str""));
  }
  return new ArtifactTypeSearch(artifactTypes);
}",0.6608695652173913
97061,"@Override public String getStorageString(){
  return artifactType.getGuid().toString();
}","@Override public String getStorageString(){
  StringBuilder storageString=new StringBuilder();
  for (  IArtifactType a : artifactTypes) {
    storageString.append(a.getGuid().toString());
    storageString.append(""String_Node_Str"");
  }
  storageString.deleteCharAt(storageString.length() - 1);
  return storageString.toString();
}",0.3752969121140142
97062,"@Override public String toString(){
  return ""String_Node_Str"" + artifactType;
}","@Override public String toString(){
  return ""String_Node_Str"" + artifactTypes.toString();
}",0.9302325581395348
97063,"@Override public void addToQuery(QueryBuilderArtifact builder){
  builder.andIsOfType(artifactType);
}","@Override public void addToQuery(QueryBuilderArtifact builder){
  builder.andIsOfType(artifactTypes);
}",0.9951219512195122
97064,"public ArtifactTypeSearch(IArtifactType type){
  super();
  this.artifactType=type;
}","public ArtifactTypeSearch(List<IArtifactType> artifactTypes){
  super();
  this.artifactTypes=artifactTypes;
}",0.8717948717948718
97065,"@Override public void addFilterTo(FilterTableViewer filterViewer){
  for (  String type : searchTypeList.getList().getSelection()) {
    IArtifactType artType=(IArtifactType)searchTypeList.getData(type);
    ISearchPrimitive primitive=new ArtifactTypeSearch(artType);
    filterViewer.addItem(primitive,getFilterName(),type,""String_Node_Str"");
  }
}","@Override public void addFilterTo(FilterTableViewer filterViewer){
  List<?> artifactTypesObj=searchTypeList.getStructuredSelection().toList();
  List<IArtifactType> artifactTypes=Collections.castAll(artifactTypesObj);
  ISearchPrimitive primitive=new ArtifactTypeSearch(artifactTypes);
  filterViewer.addItem(primitive,getFilterName(),artifactTypes.toString(),""String_Node_Str"");
}",0.615595075239398
97066,"/** 
 * @param task - if null, returned WorkDefinition will be proposed; else returned will be actual
 */
private IWorkDefinitionMatch getWorkDefinitionForTask(IAtsTeamWorkflow teamWf,IAtsTask task) throws OseeCoreException {
  IWorkDefinitionMatch match=new WorkDefinitionMatch();
  for (  ITeamWorkflowProvider provider : TeamWorkflowProviders.getTeamWorkflowProviders()) {
    String workFlowDefId=provider.getRelatedTaskWorkflowDefinitionId(teamWf);
    if (Strings.isValid(workFlowDefId)) {
      match=getWorkDefinition(workFlowDefId);
      match.addTrace((String.format(""String_Node_Str"",provider.getClass().getSimpleName(),workFlowDefId)));
      break;
    }
  }
  if (!match.isMatched() && task != null) {
    match=getWorkDefinitionFromArtifactsAttributeValue(task);
  }
  if (!match.isMatched()) {
    IWorkDefinitionMatch match2=getTaskWorkDefinitionFromArtifactsAttributeValue(teamWf);
    if (match2.isMatched()) {
      match2.addTrace(String.format(""String_Node_Str"",teamWf));
      match=match2;
    }
  }
  if (!match.isMatched()) {
    match=getTaskWorkDefinitionFromArtifactsAttributeValue(teamWf.getTeamDefinition());
  }
  if (!match.isMatched()) {
    match=getWorkDefinition(TaskWorkflowDefinitionId);
    match.addTrace(""String_Node_Str"");
  }
  return match;
}","/** 
 * @param task - if null, returned WorkDefinition will be proposed; else returned will be actual
 */
private IWorkDefinitionMatch getWorkDefinitionForTask(IAtsTeamWorkflow teamWf,IAtsTask task) throws OseeCoreException {
  IWorkDefinitionMatch match=task == null ? new WorkDefinitionMatch() : getWorkDefinitionFromArtifactsAttributeValue(task);
  if (!match.isMatched() && task != null) {
    for (    ITeamWorkflowProvider provider : TeamWorkflowProviders.getTeamWorkflowProviders()) {
      String workFlowDefId=provider.getRelatedTaskWorkflowDefinitionId(teamWf);
      attributeResolver.getSoleAttributeValue(task.getStoreObject(),AtsAttributeTypes.WorkflowDefinition,null);
      if (Strings.isValid(workFlowDefId)) {
        match=getWorkDefinition(workFlowDefId);
        match.addTrace((String.format(""String_Node_Str"",provider.getClass().getSimpleName(),workFlowDefId)));
        break;
      }
    }
  }
  if (!match.isMatched()) {
    IWorkDefinitionMatch match2=getTaskWorkDefinitionFromArtifactsAttributeValue(teamWf);
    if (match2.isMatched()) {
      match2.addTrace(String.format(""String_Node_Str"",teamWf));
      match=match2;
    }
  }
  if (!match.isMatched()) {
    match=getTaskWorkDefinitionFromArtifactsAttributeValue(teamWf.getTeamDefinition());
  }
  if (!match.isMatched()) {
    match=getWorkDefinition(TaskWorkflowDefinitionId);
    match.addTrace(""String_Node_Str"");
  }
  return match;
}",0.8584070796460177
97067,"private void add(Collection<TaskArtifact> newTasks){
  this.taskArts.addAll(newTasks);
  if (Widgets.isAccessible(getTaskXViewer().getControl())) {
    if (getTaskXViewer().getInput() != this.taskArts) {
      getTaskXViewer().setInputXViewer(this.taskArts);
    }
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        taskXViewer.refresh();
      }
    }
);
  }
}","private void add(Collection<TaskArtifact> newTasks){
  this.taskArts.addAll(newTasks);
  if (Widgets.isAccessible(getTaskXViewer().getControl())) {
    if (getTaskXViewer().getInput() != this.taskArts) {
      getTaskXViewer().setInputXViewer(this.taskArts);
    }
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        taskXViewer.refresh(taskXViewer.getInput());
      }
    }
);
  }
}",0.9734939759036144
97068,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxNewInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertion=atsServer.getArtifactByUuid(insertionUuid);
  if (insertion == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertion.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newActivity.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newActivity.getUuid());
  }
  IAtsInsertionActivity created=atsServer.getConfigItemFactory().createInsertionActivity(insertion,newActivity);
  return getResponse(created);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertion=atsServer.getArtifactByUuid(insertionUuid);
  if (insertion == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertion.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newActivity.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newActivity.getUuid());
  }
  IAtsInsertionActivity created=atsServer.getConfigItemFactory().createInsertionActivity(insertion,newActivity);
  return getResponse(created);
}",0.9983489268024216
97069,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxNewInsertion newInsertion) throws Exception {
  ArtifactReadable programArt=atsServer.getArtifactByUuid(programUuid);
  if (programArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!programArt.isOfType(AtsArtifactTypes.Program)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newInsertion.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newInsertion.getUuid());
  }
  IAtsInsertion created=atsServer.getConfigItemFactory().createInsertion(programArt,newInsertion);
  return getResponse(created);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxInsertion newInsertion) throws Exception {
  ArtifactReadable programArt=atsServer.getArtifactByUuid(programUuid);
  if (programArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!programArt.isOfType(AtsArtifactTypes.Program)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newInsertion.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newInsertion.getUuid());
  }
  IAtsInsertion created=atsServer.getConfigItemFactory().createInsertion(programArt,newInsertion);
  return getResponse(created);
}",0.9981960312687912
97070,"@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxNewInsertion insertion){
  ArtifactReadable insertionArt=atsServer.getArtifactByUuid(insertion.getUuid());
  if (insertionArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionArt.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionArt.getName().equals(insertion.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertion(insertion);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}","@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxInsertion insertion){
  ArtifactReadable insertionArt=atsServer.getArtifactByUuid(insertion.getUuid());
  if (insertionArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionArt.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionArt.getName().equals(insertion.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertion(insertion);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}",0.9981378026070764
97071,"@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxNewInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertionActivityArt=atsServer.getArtifactByUuid(newActivity.getUuid());
  if (insertionActivityArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionActivityArt.isOfType(AtsArtifactTypes.InsertionActivity)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionActivityArt.getName().equals(newActivity.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertionActivity(newActivity);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}","@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertionActivityArt=atsServer.getArtifactByUuid(newActivity.getUuid());
  if (insertionActivityArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionActivityArt.isOfType(AtsArtifactTypes.InsertionActivity)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionActivityArt.getName().equals(newActivity.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertionActivity(newActivity);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}",0.9984118581259924
97072,String getAtsId(IAtsAction action);,String getAtsId(IAtsObject atsObject);,0.7671232876712328
97073,"public final String toStringWithId(){
  return String.format(""String_Node_Str"",getSafeName(),getUuid());
}","@Override public final String toStringWithId(){
  return String.format(""String_Node_Str"",getSafeName(),getUuid());
}",0.954954954954955
97074,"public static void cleanupBranchTest(IOseeBranch branch) throws Exception {
  String namespace=""String_Node_Str"" + branch.getName().toLowerCase();
  Artifact aArt=ArtifactQuery.checkArtifactFromTypeAndName(AtsArtifactTypes.Action,branch.getName() + ""String_Node_Str"",AtsUtilCore.getAtsBranch());
  if (aArt != null) {
    SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
    for (    TeamWorkFlowArtifact teamArt : ActionManager.getTeams(aArt)) {
      SMAEditor.close(Collections.singleton(teamArt),false);
      teamArt.deleteAndPersist(transaction,true);
    }
    aArt.deleteAndPersist(transaction,true);
    transaction.execute();
  }
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  for (  IAtsVersion version : AtsClientService.get().getConfig().get(IAtsVersion.class)) {
    if (version.getName().contains(branch.getName())) {
      Artifact artifact=AtsClientService.get().getConfigArtifact(version);
      if (artifact != null) {
        artifact.deleteAndPersist(transaction);
      }
    }
    AtsClientService.get().getConfig().invalidate(version);
  }
  transaction.execute();
  transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  for (  Artifact teamDefArt : ArtifactQuery.getArtifactListFromTypeAndName(AtsArtifactTypes.TeamDefinition,branch.getName(),AtsUtilCore.getAtsBranch())) {
    teamDefArt.deleteAndPersist(transaction,false);
    AtsClientService.get().getConfig().invalidate(AtsClientService.get().getConfig().getSoleByUuid(teamDefArt.getUuid(),IAtsTeamDefinition.class));
  }
  transaction.execute();
  transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  for (  Artifact aiaArt : ArtifactQuery.getArtifactListFromTypeAndName(AtsArtifactTypes.ActionableItem,branch.getName(),AtsUtilCore.getAtsBranch())) {
    for (    Artifact childArt : aiaArt.getChildren()) {
      childArt.deleteAndPersist(transaction,false);
      AtsClientService.get().getConfig().invalidate(AtsClientService.get().getConfig().getSoleByUuid(childArt.getUuid(),IAtsActionableItem.class));
    }
    aiaArt.deleteAndPersist(transaction,false);
    AtsClientService.get().getConfig().invalidate(AtsClientService.get().getConfig().getSoleByUuid(aiaArt.getUuid(),IAtsActionableItem.class));
    transaction.execute();
  }
  Collection<Artifact> arts=ArtifactQuery.getArtifactListFromType(AtsArtifactTypes.WorkDefinition,AtsUtilCore.getAtsBranch());
  if (arts.size() > 0) {
    transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
    for (    Artifact workArt : arts) {
      if (workArt.getName().startsWith(namespace)) {
        workArt.deleteAndPersist(transaction,true);
      }
    }
    transaction.execute();
  }
  try {
    BranchManager.refreshBranches();
    for (    Branch workingBranch : BranchManager.getBranches(BranchArchivedState.ALL,BranchType.WORKING)) {
      if (workingBranch.getName().contains(branch.getName())) {
        BranchManager.purgeBranch(workingBranch);
        TestUtil.sleep(2000);
      }
    }
    if (BranchManager.branchExists(branch)) {
      BranchManager.purgeBranch(branch);
    }
    TestUtil.sleep(2000);
  }
 catch (  BranchDoesNotExist ex) {
  }
}","public static void cleanupBranchTest(IOseeBranch branch) throws Exception {
  String namespace=""String_Node_Str"" + branch.getName().toLowerCase();
  Artifact aArt=ArtifactQuery.checkArtifactFromTypeAndName(AtsArtifactTypes.Action,branch.getName() + ""String_Node_Str"",AtsUtilCore.getAtsBranch());
  if (aArt != null) {
    SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
    for (    TeamWorkFlowArtifact teamArt : ActionManager.getTeams(aArt)) {
      SMAEditor.close(Collections.singleton(teamArt),false);
      teamArt.deleteAndPersist(transaction,true);
    }
    aArt.deleteAndPersist(transaction,true);
    transaction.execute();
  }
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  for (  IAtsVersion version : AtsClientService.get().getConfig().get(IAtsVersion.class)) {
    if (version.getName().contains(branch.getName())) {
      Artifact artifact=AtsClientService.get().getConfigArtifact(version);
      if (artifact != null) {
        artifact.deleteAndPersist(transaction);
      }
    }
    AtsClientService.get().getConfig().invalidate(version);
  }
  transaction.execute();
  transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  for (  Artifact teamDefArt : ArtifactQuery.getArtifactListFromTypeAndName(AtsArtifactTypes.TeamDefinition,branch.getName(),AtsUtilCore.getAtsBranch())) {
    teamDefArt.deleteAndPersist(transaction,false);
    IAtsTeamDefinition soleByUuid=AtsClientService.get().getConfig().getSoleByUuid(teamDefArt.getUuid(),IAtsTeamDefinition.class);
    if (soleByUuid != null) {
      AtsClientService.get().getConfig().invalidate(soleByUuid);
    }
  }
  transaction.execute();
  transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  for (  Artifact aiaArt : ArtifactQuery.getArtifactListFromTypeAndName(AtsArtifactTypes.ActionableItem,branch.getName(),AtsUtilCore.getAtsBranch())) {
    for (    Artifact childArt : aiaArt.getChildren()) {
      childArt.deleteAndPersist(transaction,false);
      IAtsActionableItem soleByUuid=AtsClientService.get().getConfig().getSoleByUuid(childArt.getUuid(),IAtsActionableItem.class);
      if (soleByUuid != null) {
        AtsClientService.get().getConfig().invalidate(soleByUuid);
      }
    }
    aiaArt.deleteAndPersist(transaction,false);
    AtsClientService.get().getConfig().invalidate(AtsClientService.get().getConfig().getSoleByUuid(aiaArt.getUuid(),IAtsActionableItem.class));
    transaction.execute();
  }
  Collection<Artifact> arts=ArtifactQuery.getArtifactListFromType(AtsArtifactTypes.WorkDefinition,AtsUtilCore.getAtsBranch());
  if (arts.size() > 0) {
    transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
    for (    Artifact workArt : arts) {
      if (workArt.getName().startsWith(namespace)) {
        workArt.deleteAndPersist(transaction,true);
      }
    }
    transaction.execute();
  }
  try {
    BranchManager.refreshBranches();
    for (    Branch workingBranch : BranchManager.getBranches(BranchArchivedState.ALL,BranchType.WORKING)) {
      if (workingBranch.getName().contains(branch.getName())) {
        BranchManager.purgeBranch(workingBranch);
        TestUtil.sleep(2000);
      }
    }
    if (BranchManager.branchExists(branch)) {
      BranchManager.purgeBranch(branch);
    }
    TestUtil.sleep(2000);
  }
 catch (  BranchDoesNotExist ex) {
  }
}",0.9211136890951276
97075,"public void cache(IAtsConfigObject configObject){
  configObjects.add(configObject);
  cacheById(configObject.getUuid(),configObject);
}","public void cache(IAtsConfigObject configObject){
  Conditions.checkNotNull(configObject,""String_Node_Str"");
  configObjects.add(configObject);
  cacheById(configObject.getUuid(),configObject);
}",0.8217522658610272
97076,"public void cacheByTag(String tag,IAtsConfigObject configObject){
  tagToConfigObject.put(tag,configObject);
}","public void cacheByTag(String tag,IAtsConfigObject configObject){
  Conditions.checkNotNull(tag,""String_Node_Str"");
  Conditions.checkNotNull(configObject,""String_Node_Str"");
  tagToConfigObject.put(tag,configObject);
}",0.668693009118541
97077,"public void invalidateByTag(String tag){
  tagToConfigObject.removeValues(tag);
}","public void invalidateByTag(String tag){
  Conditions.checkNotNull(tag,""String_Node_Str"");
  tagToConfigObject.removeValues(tag);
}",0.7641509433962265
97078,"/** 
 * Clear out all values cached by tag and add sole tag to this configObject
 */
public void cacheSoleByTag(String tag,IAtsConfigObject configObject){
  Collection<IAtsConfigObject> values=tagToConfigObject.getValues(tag);
  if (values != null) {
    values.clear();
  }
  cacheByTag(tag,configObject);
}","/** 
 * Clear out all values cached by tag and add sole tag to this configObject
 */
public void cacheSoleByTag(String tag,IAtsConfigObject configObject){
  Conditions.checkNotNull(tag,""String_Node_Str"");
  Conditions.checkNotNull(configObject,""String_Node_Str"");
  Collection<IAtsConfigObject> values=tagToConfigObject.getValues(tag);
  if (values != null) {
    values.clear();
  }
  cacheByTag(tag,configObject);
}",0.8496551724137931
97079,"@Override public void invalidate(IAtsConfigObject atsObject){
  configObjects.remove(atsObject);
  List<String> keysToRemove=new ArrayList<String>();
  for (  Entry<String,Collection<IAtsConfigObject>> entry : tagToConfigObject.entrySet()) {
    if (entry.getValue().contains(atsObject)) {
      keysToRemove.add(entry.getKey());
    }
  }
  for (  String key : keysToRemove) {
    tagToConfigObject.removeValue(key,atsObject);
  }
}","@Override public void invalidate(IAtsConfigObject atsObject){
  Conditions.checkNotNull(atsObject,""String_Node_Str"");
  configObjects.remove(atsObject);
  List<String> keysToRemove=new ArrayList<String>();
  for (  Entry<String,Collection<IAtsConfigObject>> entry : tagToConfigObject.entrySet()) {
    if (entry.getValue().contains(atsObject)) {
      keysToRemove.add(entry.getKey());
    }
  }
  invalidateByUuid(atsObject.getUuid());
  for (  String key : keysToRemove) {
    tagToConfigObject.removeValue(key,atsObject);
  }
}",0.8992731048805815
97080,"public void cacheById(long id,IAtsConfigObject configObject){
  idToConfigObject.put(id,configObject);
}","public void cacheById(long id,IAtsConfigObject configObject){
  Conditions.checkNotNull(configObject,""String_Node_Str"");
  idToConfigObject.put(id,configObject);
}",0.7790262172284644
97081,"@Override @SuppressWarnings(""String_Node_Str"") public final <A extends IAtsConfigObject>List<A> getByTag(String tag,Class<A> clazz){
  List<A> objs=new ArrayList<A>();
  Collection<IAtsConfigObject> values=tagToConfigObject.getValues(tag);
  if (values != null) {
    for (    IAtsConfigObject obj : values) {
      if (clazz.isInstance(obj)) {
        objs.add((A)obj);
      }
    }
  }
  return objs;
}","@Override @SuppressWarnings(""String_Node_Str"") public final <A extends IAtsConfigObject>List<A> getByTag(String tag,Class<A> clazz){
  Conditions.checkNotNull(tag,""String_Node_Str"");
  List<A> objs=new ArrayList<A>();
  Collection<IAtsConfigObject> values=tagToConfigObject.getValues(tag);
  if (values != null) {
    for (    IAtsConfigObject obj : values) {
      if (clazz.isInstance(obj)) {
        objs.add((A)obj);
      }
    }
  }
  return objs;
}",0.9418604651162792
97082,"@Override @SuppressWarnings(""String_Node_Str"") public final <A extends IAtsConfigObject>A getSoleByTag(String tag,Class<A> clazz){
  Collection<IAtsConfigObject> values=tagToConfigObject.getValues(tag);
  if (values != null) {
    for (    IAtsConfigObject obj : values) {
      if (clazz.isInstance(obj)) {
        return (A)obj;
      }
    }
  }
  return null;
}","@Override @SuppressWarnings(""String_Node_Str"") public final <A extends IAtsConfigObject>A getSoleByTag(String tag,Class<A> clazz){
  Conditions.checkNotNull(tag,""String_Node_Str"");
  Collection<IAtsConfigObject> values=tagToConfigObject.getValues(tag);
  if (values != null) {
    for (    IAtsConfigObject obj : values) {
      if (clazz.isInstance(obj)) {
        return (A)obj;
      }
    }
  }
  return null;
}",0.935897435897436
97083,"/** 
 * @return html5 action entry page
 * @throws Exception
 */
@Path(""String_Node_Str"") @GET @Produces(MediaType.TEXT_HTML) public ViewModel getNewSource() throws Exception ;","/** 
 * @return html5 action entry page
 * @throws Exception
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public ViewModel getNewSource() throws Exception ;",0.9715909090909092
97084,"/** 
 * Create new ATS configuration branch and ATS config object on Common branch
 * @param form containing information to configure new ATS branch
 * @param form.fromBranchUuid of branch to get config artifacts from
 * @param form.newBranchName of new branch
 * @param form.userId - userId of user performing transition
 * @param uriInfo
 * @return json object with new branchUuid
 */
@POST @Consumes(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public AtsConfiguration createConfig(MultivaluedMap<String,String> form,@Context UriInfo uriInfo);","/** 
 * Create new ATS configuration branch and ATS config object on Common branch
 * @param form containing information to configure new ATS branch
 * @param form.fromBranchUuid of branch to get config artifacts from
 * @param form.newBranchName of new branch
 * @param form.userId - userId of user performing transition
 * @param uriInfo
 * @return json object with new branchUuid
 */
@POST @Path(""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public AtsConfiguration createConfig(MultivaluedMap<String,String> form,@Context UriInfo uriInfo);",0.9780893952673094
97085,"private static JaxRsWebTarget getTarget(){
  if (target == null) {
    String appServer=OseeClientProperties.getOseeApplicationServer();
    String atsUri=String.format(""String_Node_Str"",appServer);
    JaxRsClient jaxRsClient=JaxRsClient.newBuilder().build();
    target=jaxRsClient.target(atsUri);
  }
  return target;
}","private static JaxRsWebTarget getTarget(){
  if (target == null) {
    String appServer=OseeClientProperties.getOseeApplicationServer();
    String atsUri=String.format(""String_Node_Str"",appServer);
    JaxRsClient jaxRsClient=JaxRsClient.newBuilder().createThreadSafeProxyClients(true).build();
    target=jaxRsClient.target(atsUri);
  }
  return target;
}",0.9484536082474226
97086,"private static JaxRsWebTarget getTarget(){
  if (target == null) {
    String appServer=OseeClientProperties.getOseeApplicationServer();
    String atsUri=String.format(""String_Node_Str"",appServer);
    JaxRsClient jaxRsClient=JaxRsClient.newBuilder().build();
    target=jaxRsClient.target(atsUri);
  }
  return target;
}","private static JaxRsWebTarget getTarget(){
  if (target == null) {
    String appServer=OseeClientProperties.getOseeApplicationServer();
    String atsUri=String.format(""String_Node_Str"",appServer);
    JaxRsClient jaxRsClient=JaxRsClient.newBuilder().createThreadSafeProxyClients(true).build();
    target=jaxRsClient.target(atsUri);
  }
  return target;
}",0.9484536082474226
97087,"@Override protected IStatus run(IProgressMonitor monitor){
  AtsJaxRsService.get().getNotify().sendNotifications(notifications);
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  AtsClientService.getNotifyEndpoint().sendNotifications(notifications);
  return Status.OK_STATUS;
}",0.9211356466876972
97088,"@Override public void sendNotifications(final AtsNotificationCollector notifications){
  if (AtsUtilClient.isEmailEnabled()) {
    Jobs.startJob(new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        AtsJaxRsService.get().getNotify().sendNotifications(notifications);
        return Status.OK_STATUS;
      }
    }
,false);
  }
}","@Override public void sendNotifications(final AtsNotificationCollector notifications){
  if (AtsUtilClient.isEmailEnabled()) {
    Jobs.startJob(new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        AtsClientService.getNotifyEndpoint().sendNotifications(notifications);
        return Status.OK_STATUS;
      }
    }
,false);
  }
}",0.9673202614379084
97089,"private static JaxRsWebTarget getTarget(){
  if (target == null) {
    String appServer=OseeClientProperties.getOseeApplicationServer();
    String atsUri=String.format(""String_Node_Str"",appServer);
    JaxRsClient jaxRsClient=JaxRsClient.newBuilder().build();
    target=jaxRsClient.target(atsUri);
  }
  return target;
}","private static JaxRsWebTarget getTarget(){
  if (target == null) {
    String appServer=OseeClientProperties.getOseeApplicationServer();
    String atsUri=String.format(""String_Node_Str"",appServer);
    JaxRsClient jaxRsClient=JaxRsClient.newBuilder().createThreadSafeProxyClients(true).build();
    target=jaxRsClient.target(atsUri);
  }
  return target;
}",0.9484536082474226
97090,"@Test public void testGetDispoPrograms(){
  ResultSet<IOseeBranch> programsSet=ResultSets.singleton(mockBranch);
  when(storage.getDispoBranches()).thenAnswer(newAnswer(programsSet));
  ResultSet<IOseeBranch> actual=dispoApi.getDispoPrograms();
  assertEquals(programsSet.iterator().next(),actual.iterator().next());
}","@Test public void testGetDispoPrograms(){
  List<IOseeBranch> programsSet=Collections.singletonList(mockBranch);
  when(storage.getDispoBranches()).thenAnswer(newAnswer(programsSet));
  List<IOseeBranch> actual=dispoApi.getDispoPrograms();
  assertEquals(programsSet.iterator().next(),actual.iterator().next());
}",0.8938193343898574
97091,"@Test public void testGetAll() throws JSONException {
  ResultSet<IOseeBranch> emptyResultSet=ResultSets.emptyResultSet();
  when(dispoApi.getDispoPrograms()).thenReturn(emptyResultSet);
  Response noProgramsResponse=resource.getAllPrograms();
  String messageActual=(String)noProgramsResponse.getEntity();
  assertEquals(Response.Status.NOT_FOUND.getStatusCode(),noProgramsResponse.getStatus());
  assertEquals(""String_Node_Str"",messageActual);
  IOseeBranch branch=TokenFactory.createBranch(id1.getUuid(),""String_Node_Str"");
  ResultSet<IOseeBranch> branchList=ResultSets.singleton(branch);
  when(dispoApi.getDispoPrograms()).thenReturn(branchList);
  Response oneSetResponse=resource.getAllPrograms();
  JSONArray entity=new JSONArray((String)oneSetResponse.getEntity());
  JSONObject programFromEntity=entity.getJSONObject(0);
  assertEquals(Response.Status.OK.getStatusCode(),oneSetResponse.getStatus());
  assertEquals(String.valueOf(id1.getUuid()),programFromEntity.getString(""String_Node_Str""));
}","@Test public void testGetAll() throws JSONException {
  List<IOseeBranch> emptyResultSet=Collections.emptyList();
  when(dispoApi.getDispoPrograms()).thenReturn(emptyResultSet);
  Response noProgramsResponse=resource.getAllPrograms();
  String messageActual=(String)noProgramsResponse.getEntity();
  assertEquals(Response.Status.NOT_FOUND.getStatusCode(),noProgramsResponse.getStatus());
  assertEquals(""String_Node_Str"",messageActual);
  IOseeBranch branch=TokenFactory.createBranch(id1.getUuid(),""String_Node_Str"");
  List<IOseeBranch> branchList=Collections.singletonList(branch);
  when(dispoApi.getDispoPrograms()).thenReturn(branchList);
  Response oneSetResponse=resource.getAllPrograms();
  JSONArray entity=new JSONArray((String)oneSetResponse.getEntity());
  JSONObject programFromEntity=entity.getJSONObject(0);
  assertEquals(Response.Status.OK.getStatusCode(),oneSetResponse.getStatus());
  assertEquals(String.valueOf(id1.getUuid()),programFromEntity.getString(""String_Node_Str""));
}",0.944583125312032
97092,ResultSet<IOseeBranch> getDispoPrograms();,List<IOseeBranch> getDispoPrograms();,0.8860759493670886
97093,"@Override public ResultSet<IOseeBranch> getDispoPrograms(){
  return getQuery().getDispoBranches();
}","@Override public List<IOseeBranch> getDispoPrograms(){
  return getQuery().getDispoBranches();
}",0.9543147208121828
97094,ResultSet<IOseeBranch> getDispoBranches();,List<IOseeBranch> getDispoBranches();,0.8860759493670886
97095,"@Override public ResultSet<IOseeBranch> getDispoBranches(){
  ResultSet<BranchReadable> baselineBranches=getQuery().branchQuery().andIsOfType(BranchType.BASELINE).getResults();
  String configContents=getDispoConfigContents();
  List<IOseeBranch> results=new ArrayList<IOseeBranch>();
  for (  BranchReadable baselineBranch : baselineBranches) {
    IOseeBranch dispoBranch=convertToDispoBranch(configContents,baselineBranch);
    if (dispoBranch != null) {
      results.add(dispoBranch);
    }
  }
  return ResultSets.newResultSet(results);
}","@Override public List<IOseeBranch> getDispoBranches(){
  List<IOseeBranch> dispoBranchesNormalized=new ArrayList<IOseeBranch>();
  BranchReadable dispoBranch=getQuery().branchQuery().andNameEquals(""String_Node_Str"").getResults().getExactlyOne();
  ResultSet<BranchReadable> dispoBranches=getQuery().branchQuery().andIsOfType(BranchType.WORKING).andIsChildOf(dispoBranch).getResults();
  for (  BranchReadable branch : dispoBranches) {
    IOseeBranch newName=TokenFactory.createBranch(branch.getUuid(),branch.getName().replaceFirst(""String_Node_Str"",""String_Node_Str""));
    dispoBranchesNormalized.add(newName);
  }
  return dispoBranchesNormalized;
}",0.245819397993311
97096,"private static String getName(TransactionDelta txDelta) throws OseeCoreException {
  Artifact associatedArtifact=BranchManager.getAssociatedArtifact(txDelta);
  String name=associatedArtifact == null ? ""String_Node_Str"" : associatedArtifact.getName();
  return name.substring(0,Math.min(name.length(),15));
}","private static String getName(TransactionDelta txDelta) throws OseeCoreException {
  Artifact associatedArtifact=BranchManager.getAssociatedArtifact(txDelta);
  String name=associatedArtifact == null ? ""String_Node_Str"" : associatedArtifact.getName();
  name=name.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return name.substring(0,Math.min(name.length(),15));
}",0.9098966026587888
97097,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxNewInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertion=atsServer.getArtifactByUuid(insertionUuid);
  if (insertion == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertion.getArtifactType().equals(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newActivity.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newActivity.getUuid());
  }
  IAtsInsertionActivity created=atsServer.getConfigItemFactory().createInsertionActivity(insertion,newActivity);
  return getResponse(created);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxNewInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertion=atsServer.getArtifactByUuid(insertionUuid);
  if (insertion == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertion.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newActivity.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newActivity.getUuid());
  }
  IAtsInsertionActivity created=atsServer.getConfigItemFactory().createInsertionActivity(insertion,newActivity);
  return getResponse(created);
}",0.9880174291938998
97098,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getProgramInsertions(@PathParam(""String_Node_Str"") long uuid) throws Exception {
  ArtifactReadable programArt=atsServer.getArtifactByUuid(uuid);
  if (programArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!programArt.getArtifactType().equals(AtsArtifactTypes.Program)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<ArtifactReadable> results=programArt.getRelated(AtsRelationTypes.ProgramToInsertion_Insertion);
  List<IAtsConfigObject> insertions=new LinkedList<IAtsConfigObject>();
  for (  ArtifactReadable insertion : results) {
    insertions.add(atsServer.getConfigItemFactory().getInsertion(insertion));
  }
  GenericEntity<List<IAtsConfigObject>> entity=new GenericEntity<List<IAtsConfigObject>>(insertions){
  }
;
  return Response.ok(entity).build();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getProgramInsertions(@PathParam(""String_Node_Str"") long uuid) throws Exception {
  ArtifactReadable programArt=atsServer.getArtifactByUuid(uuid);
  if (programArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!programArt.isOfType(AtsArtifactTypes.Program)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<ArtifactReadable> results=programArt.getRelated(AtsRelationTypes.ProgramToInsertion_Insertion);
  List<IAtsConfigObject> insertions=new LinkedList<IAtsConfigObject>();
  for (  ArtifactReadable insertion : results) {
    insertions.add(atsServer.getConfigItemFactory().getInsertion(insertion));
  }
  GenericEntity<List<IAtsConfigObject>> entity=new GenericEntity<List<IAtsConfigObject>>(insertions){
  }
;
  return Response.ok(entity).build();
}",0.9865470852017936
97099,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getInsertionActivitys(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid) throws Exception {
  ArtifactReadable insertion=atsServer.getArtifactByUuid(insertionUuid);
  if (insertion == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertion.getArtifactType().equals(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<ArtifactReadable> results=insertion.getRelated(AtsRelationTypes.InsertionToInsertionActivity_InsertionActivity);
  List<IAtsConfigObject> insertionActivitys=new LinkedList<IAtsConfigObject>();
  for (  ArtifactReadable insertionActivity : results) {
    insertionActivitys.add(atsServer.getConfigItemFactory().getInsertionActivity(insertionActivity));
  }
  GenericEntity<List<IAtsConfigObject>> entity=new GenericEntity<List<IAtsConfigObject>>(insertionActivitys){
  }
;
  return Response.ok(entity).build();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getInsertionActivitys(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid) throws Exception {
  ArtifactReadable insertion=atsServer.getArtifactByUuid(insertionUuid);
  if (insertion == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertion.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<ArtifactReadable> results=insertion.getRelated(AtsRelationTypes.InsertionToInsertionActivity_InsertionActivity);
  List<IAtsConfigObject> insertionActivitys=new LinkedList<IAtsConfigObject>();
  for (  ArtifactReadable insertionActivity : results) {
    insertionActivitys.add(atsServer.getConfigItemFactory().getInsertionActivity(insertionActivity));
  }
  GenericEntity<List<IAtsConfigObject>> entity=new GenericEntity<List<IAtsConfigObject>>(insertionActivitys){
  }
;
  return Response.ok(entity).build();
}",0.9882583170254404
97100,"@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxNewInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertionActivityArt=atsServer.getArtifactByUuid(newActivity.getUuid());
  if (insertionActivityArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionActivityArt.getArtifactType().equals(AtsArtifactTypes.InsertionActivity)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionActivityArt.getName().equals(newActivity.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertionActivity(newActivity);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}","@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertionActivity(@PathParam(""String_Node_Str"") long programUuid,@PathParam(""String_Node_Str"") long insertionUuid,JaxNewInsertionActivity newActivity) throws Exception {
  ArtifactReadable insertionActivityArt=atsServer.getArtifactByUuid(newActivity.getUuid());
  if (insertionActivityArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionActivityArt.isOfType(AtsArtifactTypes.InsertionActivity)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionActivityArt.getName().equals(newActivity.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertionActivity(newActivity);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}",0.9884696016771488
97101,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxNewInsertion newInsertion) throws Exception {
  ArtifactReadable programArt=atsServer.getArtifactByUuid(programUuid);
  if (programArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!programArt.getArtifactType().equals(AtsArtifactTypes.Program)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newInsertion.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newInsertion.getUuid());
  }
  IAtsInsertion created=atsServer.getConfigItemFactory().createInsertion(programArt,newInsertion);
  return getResponse(created);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response createInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxNewInsertion newInsertion) throws Exception {
  ArtifactReadable programArt=atsServer.getArtifactByUuid(programUuid);
  if (programArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!programArt.isOfType(AtsArtifactTypes.Program)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  ResultSet<?> results=atsServer.getQuery().andUuid(newInsertion.getUuid()).getResults();
  if (results.size() != 0) {
    throw new OseeStateException(""String_Node_Str"",newInsertion.getUuid());
  }
  IAtsInsertion created=atsServer.getConfigItemFactory().createInsertion(programArt,newInsertion);
  return getResponse(created);
}",0.9869203329369798
97102,"@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxNewInsertion insertion){
  ArtifactReadable insertionArt=atsServer.getArtifactByUuid(insertion.getUuid());
  if (insertionArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionArt.getArtifactType().equals(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionArt.getName().equals(insertion.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertion(insertion);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}","@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response updateInsertion(@PathParam(""String_Node_Str"") long programUuid,JaxNewInsertion insertion){
  ArtifactReadable insertionArt=atsServer.getArtifactByUuid(insertion.getUuid());
  if (insertionArt == null) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  if (!insertionArt.isOfType(AtsArtifactTypes.Insertion)) {
    throw new OseeCoreException(""String_Node_Str"");
  }
  Response response=null;
  if (!insertionArt.getName().equals(insertion.getName())) {
    IAtsConfigObject updated=atsServer.getConfigItemFactory().updateInsertion(insertion);
    response=Response.ok().entity(updated).build();
  }
 else {
    response=Response.notModified().build();
  }
  return response;
}",0.985276073619632
97103,"private void setGuid(Element pictElement){
  Node imageData=getElement(pictElement,IMAGE);
  if (imageData != null) {
    Node srcAttribute=imageData.getAttributes().getNamedItem(TITLE);
    guid=srcAttribute.getNodeValue();
  }
}","private void setGuid(Element pictElement){
  Node imageData=getElement(pictElement,IMAGE);
  if (imageData != null) {
    Node srcAttribute=imageData.getAttributes().getNamedItem(TITLE);
    if (srcAttribute != null) {
      guid=srcAttribute.getNodeValue();
    }
  }
}",0.92
97104,"private String getImageId(Element pictElement){
  String imgId=null;
  Node imageData=getElement(pictElement,IMAGE);
  if (imageData != null) {
    Node srcAttribute=imageData.getAttributes().getNamedItem(SRC);
    imgId=srcAttribute.getNodeValue();
  }
  return imgId;
}","private String getImageId(Element pictElement){
  String imgId=null;
  Node imageData=getElement(pictElement,IMAGE);
  if (imageData != null) {
    Node srcAttribute=imageData.getAttributes().getNamedItem(SRC);
    if (srcAttribute != null) {
      imgId=srcAttribute.getNodeValue();
    }
  }
  return imgId;
}",0.8831615120274914
97105,"@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<String>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}","@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<String>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}",0.978538283062645
97106,"@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response postDispoSetExport(@QueryParam(""String_Node_Str"") String primarySet,@QueryParam(""String_Node_Str"") String option){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final ExportSet writer=new ExportSet(dispoApi);
  final String options=option;
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,options,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response postDispoSetExport(@Encoded @QueryParam(""String_Node_Str"") String primarySet,@QueryParam(""String_Node_Str"") String option){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final ExportSet writer=new ExportSet(dispoApi);
  final String options=option;
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,options,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}",0.9953295277633628
97107,"@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=dispoApi.copyDispoSet(program,destination,source,params);
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}","@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@Encoded @QueryParam(""String_Node_Str"") String destinationSet,@Encoded @QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=dispoApi.copyDispoSet(program,destination,source,params);
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}",0.989117291414752
97108,"@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoSetReport(@QueryParam(""String_Node_Str"") String primarySet,@QueryParam(""String_Node_Str"") String secondarySet){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final DispoSet dispoSet2=dispoApi.getDispoSetById(program,secondarySet);
  final STRSReport writer=new STRSReport(dispoApi);
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,dispoSet2,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoSetReport(@Encoded @QueryParam(""String_Node_Str"") String primarySet,@Encoded @QueryParam(""String_Node_Str"") String secondarySet){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final DispoSet dispoSet2=dispoApi.getDispoSetById(program,secondarySet);
  final STRSReport writer=new STRSReport(dispoApi);
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,dispoSet2,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}",0.991185112634672
97109,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof IAgileFeatureGroup)) {
    return false;
  }
  IAgileFeatureGroup other=(IAgileFeatureGroup)obj;
  if (uuid != other.getUuid()) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof AbstractAgileObject)) {
    return false;
  }
  AbstractAgileObject other=(AbstractAgileObject)obj;
  if (uuid != other.getUuid()) {
    return false;
  }
  return true;
}",0.7844961240310078
97110,"@Override public void writeCellText(Object cellData,int cellIndex) throws IOException {
  if (cellData == null) {
    rowBuffer[cellIndex]=null;
  }
 else   if (cellIndex >= numColumns) {
    throw new OseeCoreException(""String_Node_Str"",numColumns,cellIndex);
  }
 else {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    if (cellData instanceof Date) {
      sb.append(""String_Node_Str"");
    }
 else     if (applyStyle) {
      applyStyleToCell(sb,cellIndex);
    }
    if (previouslyWrittenCellIndex + 1 != cellIndex) {
      sb.append(""String_Node_Str"" + (cellIndex + 1) + ""String_Node_Str"");
    }
    previouslyWrittenCellIndex=cellIndex;
    if (cellData instanceof String) {
      String cellDataStr=(String)cellData;
      if (!cellDataStr.equals(""String_Node_Str"") && cellDataStr.charAt(0) == '=') {
        String value=cellDataStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
        sb.append(""String_Node_Str"" + value + ""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        if (cellDataStr.equals(""String_Node_Str"")) {
          sb.append(emptyStringRepresentation);
        }
 else {
          if (cellDataStr.length() > 32767) {
            sb.append(blobMessage);
          }
 else {
            Xml.writeWhileHandlingCdata(sb,cellDataStr);
          }
        }
        sb.append(""String_Node_Str"");
        if (cellDataStr.length() > 32767) {
          sb.append(""String_Node_Str"");
          Xml.writeWhileHandlingCdata(sb,cellDataStr);
          sb.append(""String_Node_Str"");
        }
      }
    }
 else     if (cellData instanceof Number) {
      Number cellDataNum=(Number)cellData;
      sb.append(""String_Node_Str"");
      Xml.writeWhileHandlingCdata(sb,cellDataNum.toString());
      sb.append(""String_Node_Str"");
    }
 else     if (cellData instanceof Date) {
      Date cellDataDate=(Date)cellData;
      sb.append(""String_Node_Str"");
      String dateString=DateUtil.get(cellDataDate,""String_Node_Str"") + ""String_Node_Str"";
      Xml.writeWhileHandlingCdata(sb,dateString);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      Xml.writeWhileHandlingCdata(sb,cellData.toString());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    rowBuffer[cellIndex]=sb.toString();
  }
}","@Override public void writeCellText(Object cellData,int cellIndex) throws IOException {
  if (cellIndex >= numColumns) {
    throw new OseeCoreException(""String_Node_Str"",numColumns,cellIndex);
  }
 else   if (cellData == null) {
    rowBuffer[cellIndex]=null;
  }
 else {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    if (cellData instanceof Date) {
      sb.append(""String_Node_Str"");
    }
 else     if (applyStyle) {
      applyStyleToCell(sb,cellIndex);
    }
    if (previouslyWrittenCellIndex + 1 != cellIndex) {
      sb.append(""String_Node_Str"" + (cellIndex + 1) + ""String_Node_Str"");
    }
    previouslyWrittenCellIndex=cellIndex;
    if (cellData instanceof String) {
      String cellDataStr=(String)cellData;
      if (!cellDataStr.equals(""String_Node_Str"") && cellDataStr.charAt(0) == '=') {
        String value=cellDataStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
        sb.append(""String_Node_Str"" + value + ""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        if (cellDataStr.equals(""String_Node_Str"")) {
          sb.append(emptyStringRepresentation);
        }
 else {
          if (cellDataStr.length() > 32767) {
            sb.append(blobMessage);
          }
 else {
            Xml.writeWhileHandlingCdata(sb,cellDataStr);
          }
        }
        sb.append(""String_Node_Str"");
        if (cellDataStr.length() > 32767) {
          sb.append(""String_Node_Str"");
          Xml.writeWhileHandlingCdata(sb,cellDataStr);
          sb.append(""String_Node_Str"");
        }
      }
    }
 else     if (cellData instanceof Number) {
      Number cellDataNum=(Number)cellData;
      sb.append(""String_Node_Str"");
      Xml.writeWhileHandlingCdata(sb,cellDataNum.toString());
      sb.append(""String_Node_Str"");
    }
 else     if (cellData instanceof Date) {
      Date cellDataDate=(Date)cellData;
      sb.append(""String_Node_Str"");
      String dateString=DateUtil.get(cellDataDate,""String_Node_Str"") + ""String_Node_Str"";
      Xml.writeWhileHandlingCdata(sb,dateString);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      Xml.writeWhileHandlingCdata(sb,cellData.toString());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    rowBuffer[cellIndex]=sb.toString();
  }
}",0.9503211991434688
97111,"@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response postDispoSetExport(@Encoded @QueryParam(""String_Node_Str"") String primarySet,@QueryParam(""String_Node_Str"") String option){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final ExportSet writer=new ExportSet(dispoApi);
  final String options=option;
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,options,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response postDispoSetExport(@QueryParam(""String_Node_Str"") String primarySet,@QueryParam(""String_Node_Str"") String option){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final ExportSet writer=new ExportSet(dispoApi);
  final String options=option;
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,options,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}",0.9953295277633628
97112,"@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@Encoded @QueryParam(""String_Node_Str"") String destinationSet,@Encoded @QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=dispoApi.copyDispoSet(program,destination,source,params);
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}","@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=dispoApi.copyDispoSet(program,destination,source,params);
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}",0.9262394195888756
97113,"@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoSetReport(@Encoded @QueryParam(""String_Node_Str"") String primarySet,@Encoded @QueryParam(""String_Node_Str"") String secondarySet){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final DispoSet dispoSet2=dispoApi.getDispoSetById(program,secondarySet);
  final STRSReport writer=new STRSReport(dispoApi);
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,dispoSet2,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @GET @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoSetReport(@QueryParam(""String_Node_Str"") String primarySet,@QueryParam(""String_Node_Str"") String secondarySet){
  final DispoSet dispoSet=dispoApi.getDispoSetById(program,primarySet);
  final DispoSet dispoSet2=dispoApi.getDispoSetById(program,secondarySet);
  final STRSReport writer=new STRSReport(dispoApi);
  final String fileName=String.format(""String_Node_Str"",System.currentTimeMillis());
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException, IOException {
      writer.runReport(program,dispoSet,dispoSet2,outputStream);
      outputStream.flush();
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}",0.991185112634672
97114,"@Override public Object getRelatedOrNull(Object object,IRelationTypeSide relationType){
  Object related=null;
  ArtifactReadable artifact=atsServer.getArtifact(object);
  if (artifact != null) {
    try {
      related=artifact.getRelated(relationType);
    }
 catch (    ArtifactDoesNotExist ex) {
    }
  }
  return related;
}","@Override public Object getRelatedOrNull(Object object,IRelationTypeSide relationType){
  Object related=null;
  ArtifactReadable artifact=atsServer.getArtifact(object);
  if (artifact != null) {
    try {
      related=artifact.getRelated(relationType).getAtMostOneOrNull();
    }
 catch (    ArtifactDoesNotExist ex) {
    }
  }
  return related;
}",0.9690721649484536
97115,"private void processAttributes(Artifact artifact,WordMLProducer wordMl,PresentationType presentationType,boolean publishInLine,String footer) throws OseeCoreException {
  for (  AttributeElement attributeElement : attributeElements) {
    String attributeName=attributeElement.getAttributeName();
    if (renderer.getBooleanOption(ALL_ATTRIBUTES) || (attributeName.equals(""String_Node_Str""))) {
      for (      IAttributeType attributeType : RendererManager.getAttributeTypeOrderList(artifact)) {
        if (!outlining || !attributeType.equals(headingAttributeType)) {
          processAttribute(artifact,wordMl,attributeElement,attributeType,true,presentationType,publishInLine,footer);
        }
      }
    }
 else {
      AttributeType attributeType=AttributeTypeManager.getType(attributeName);
      if (artifact.isAttributeTypeValid(attributeType)) {
        processAttribute(artifact,wordMl,attributeElement,attributeType,false,presentationType,publishInLine,footer);
      }
    }
  }
  wordMl.setPageLayout(artifact,footer);
}","private void processAttributes(Artifact artifact,WordMLProducer wordMl,PresentationType presentationType,boolean publishInLine,String footer) throws OseeCoreException {
  for (  AttributeElement attributeElement : attributeElements) {
    String attributeName=attributeElement.getAttributeName();
    if (renderer.getBooleanOption(ALL_ATTRIBUTES) || (attributeName.equals(""String_Node_Str""))) {
      for (      IAttributeType attributeType : RendererManager.getAttributeTypeOrderList(artifact)) {
        if (!outlining || !attributeType.equals(headingAttributeType)) {
          processAttribute(artifact,wordMl,attributeElement,attributeType,true,presentationType,publishInLine,footer);
        }
      }
    }
 else {
      AttributeType attributeType=AttributeTypeManager.getType(attributeName);
      if (artifact.isAttributeTypeValid(attributeType)) {
        processAttribute(artifact,wordMl,attributeElement,attributeType,false,presentationType,publishInLine,footer);
      }
    }
  }
}",0.9798327594687654
97116,"/** 
 * Process old format: http://127.0.0.1:<port>/get/guid/<guid>/<ats,Define> old format should be removed once all legacy references are change to new format
 */
private boolean parseOldSchoolStyleLinks(String link){
  boolean wasHandled=false;
  Matcher oldMatcher=LEGACY_MATCHER;
  oldMatcher.reset(link);
  if (oldMatcher.find()) {
    wasHandled=true;
    String guid=oldMatcher.group(2);
    if (oldMatcher.groupCount() > 2) {
      String processType=oldMatcher.group(3);
      if (processType.equals(""String_Node_Str"")) {
        parameterMap.put(""String_Node_Str"",guid);
      }
 else       if (processType.equals(""String_Node_Str"") || processType.equals(""String_Node_Str"")) {
        parameterMap.put(""String_Node_Str"",guid);
      }
    }
  }
  return wasHandled;
}","/** 
 * Process old format: http://127.0.0.1:<port>/get/guid/<guid>/<ats,Define> old format should be removed once all legacy references are change to new format
 */
private boolean parseOldSchoolStyleLinks(String link){
  boolean wasHandled=false;
  Matcher oldMatcher=LEGACY_MATCHER;
  oldMatcher.reset(link);
  if (oldMatcher.find()) {
    wasHandled=true;
    String guid=oldMatcher.group(2);
    if (oldMatcher.groupCount() > 2) {
      String processType=oldMatcher.group(3);
      if (processType.equals(""String_Node_Str"")) {
        parameterMap.put(""String_Node_Str"",guid);
      }
 else       if (processType.equals(""String_Node_Str"") || processType.equals(""String_Node_Str"")) {
        parameterMap.put(""String_Node_Str"",guid);
      }
 else       if (GUID.isValid(guid)) {
        parameterMap.put(""String_Node_Str"",guid);
      }
    }
  }
  return wasHandled;
}",0.9419588875453446
97117,"/** 
 * Find WordML links locations in content grouped by GUID
 * @return locations where WordMlLinks were found grouped by GUID
 */
public static HashCollection<String,MatchRange> parseOseeWordMLLinks(String content) throws OseeCoreException {
  HashCollection<String,MatchRange> matchMap=new HashCollection<String,MatchRange>();
  OseeLinkParser linkParser=new OseeLinkParser();
  WORDML_LINK.reset(content);
  while (WORDML_LINK.find()) {
    String link=WORDML_LINK.group(1);
    if (Strings.isValid(link)) {
      linkParser.parse(link);
      String guid=linkParser.getGuid();
      if (Strings.isValid(guid)) {
        matchMap.put(guid,new MatchRange(WORDML_LINK.start(),WORDML_LINK.end()));
      }
    }
  }
  WORDML_LINK.reset();
  return matchMap;
}","/** 
 * Find WordML links locations in content grouped by GUID
 * @return locations where WordMlLinks were found grouped by GUID
 */
public static HashCollection<String,MatchRange> parseOseeWordMLLinks(String content) throws OseeCoreException {
  HashCollection<String,MatchRange> matchMap=new HashCollection<String,MatchRange>();
  OseeLinkParser linkParser=new OseeLinkParser();
  WORDML_LINK.reset(content);
  while (WORDML_LINK.find()) {
    String link=WORDML_LINK.group(1);
    if (Strings.isValid(link)) {
      linkParser.parse(link);
      String guid=linkParser.getGuid();
      if (Strings.isValid(guid)) {
        matchMap.put(guid,new MatchRange(WORDML_LINK.start(),WORDML_LINK.end()));
      }
    }
  }
  WORDML_LINK.reset();
  HYPERLINK_PATTERN.reset(content);
  while (HYPERLINK_PATTERN.find()) {
    String link=HYPERLINK_PATTERN.group(2);
    if (Strings.isValid(link)) {
      linkParser.parse(link);
      String guid=linkParser.getGuid();
      if (Strings.isValid(guid)) {
        matchMap.put(guid,new MatchRange(HYPERLINK_PATTERN.start(),HYPERLINK_PATTERN.end()));
      }
    }
  }
  HYPERLINK_PATTERN.reset();
  return matchMap;
}",0.7851929092805006
97118,"@org.junit.Test public void getChangeTypeStrAndImage() throws Exception {
  SevereLoggingMonitor loggingMonitor=TestUtil.severeLoggingStart();
  TeamWorkFlowArtifact codeArt=(TeamWorkFlowArtifact)DemoTestUtil.getUncommittedActionWorkflow(DemoWorkType.Code);
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(codeArt));
  Assert.assertNotNull(ChangeTypeColumn.getInstance().getColumnImage(codeArt,ChangeTypeColumn.getInstance(),0));
  Artifact actionArt=codeArt.getParentActionArtifact();
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(actionArt));
  TeamWorkFlowArtifact reqArt=(TeamWorkFlowArtifact)DemoTestUtil.getUncommittedActionWorkflow(DemoWorkType.Requirements);
  ChangeTypeUtil.setChangeType(reqArt,ChangeType.None);
  reqArt.persist(CategoryColumnTest.class.getSimpleName());
  Assert.assertEquals(ChangeType.None,ChangeTypeUtil.getChangeType(reqArt));
  Assert.assertNull(ChangeTypeColumn.getInstance().getColumnImage(reqArt,ChangeTypeColumn.getInstance(),0));
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(actionArt));
  Assert.assertEquals(""String_Node_Str"",ChangeTypeColumn.getInstance().getColumnText(actionArt,ChangeTypeColumn.getInstance(),0));
  ChangeTypeUtil.setChangeType(reqArt,ChangeType.Improvement);
  reqArt.persist(CategoryColumnTest.class.getSimpleName());
  Assert.assertEquals(ChangeType.Improvement,ChangeTypeUtil.getChangeType(reqArt));
  Assert.assertNotNull(ChangeTypeColumn.getInstance().getColumnImage(reqArt,ChangeTypeColumn.getInstance(),0));
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(actionArt));
  Assert.assertEquals(""String_Node_Str"",ChangeTypeColumn.getInstance().getColumnText(actionArt,ChangeTypeColumn.getInstance(),0));
  TestUtil.severeLoggingEnd(loggingMonitor);
}","@org.junit.Test public void getChangeTypeStrAndImage() throws Exception {
  SevereLoggingMonitor loggingMonitor=TestUtil.severeLoggingStart();
  TeamWorkFlowArtifact codeArt=(TeamWorkFlowArtifact)DemoTestUtil.getUncommittedActionWorkflow(DemoWorkType.Code);
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(codeArt));
  Assert.assertNotNull(ChangeTypeColumn.getInstance().getColumnImage(codeArt,ChangeTypeColumn.getInstance(),0));
  Artifact actionArt=codeArt.getParentActionArtifact();
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(actionArt));
  TeamWorkFlowArtifact reqArt=(TeamWorkFlowArtifact)DemoTestUtil.getUncommittedActionWorkflow(DemoWorkType.Requirements);
  ChangeTypeUtil.setChangeType(reqArt,ChangeType.None);
  reqArt.persist(CategoryColumnTest.class.getSimpleName());
  Assert.assertEquals(ChangeType.None,ChangeTypeUtil.getChangeType(reqArt));
  Assert.assertNull(ChangeTypeColumn.getInstance().getColumnImage(reqArt,ChangeTypeColumn.getInstance(),0));
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(actionArt));
  Assert.assertEquals(""String_Node_Str"",ChangeTypeColumn.getInstance().getColumnText(actionArt,ChangeTypeColumn.getInstance(),0));
  ChangeTypeUtil.setChangeType(reqArt,ChangeType.Improvement);
  reqArt.persist(CategoryColumnTest.class.getSimpleName());
  Assert.assertEquals(ChangeType.Improvement,ChangeTypeUtil.getChangeType(reqArt));
  Assert.assertNotNull(ChangeTypeColumn.getInstance().getColumnImage(reqArt,ChangeTypeColumn.getInstance(),0));
  Assert.assertEquals(ChangeType.Problem,ChangeTypeUtil.getChangeType(actionArt));
  String columnText=ChangeTypeColumn.getInstance().getColumnText(actionArt,ChangeTypeColumn.getInstance(),0);
  Assert.assertTrue(columnText.equals(""String_Node_Str"") || columnText.equals(""String_Node_Str""));
  TestUtil.severeLoggingEnd(loggingMonitor);
}",0.9285327558202492
97119,"/** 
 * Returns non-archived sibling branches that this artifact's attributes have been edited on
 */
private static boolean addBranchesWhereArtifactHasBeenModified(Artifact artifact,Set<String> otherBranches) throws OseeCoreException {
  boolean wasModified=false;
  if (artifact.isInDb()) {
    JdbcStatement chStmt=ConnectionHandler.getStatement();
    try {
      Branch branch=artifact.getFullBranch();
      chStmt.runPreparedQuery(OTHER_EDIT_SQL,artifact.getArtId(),branch.getUuid(),branch.getParentBranch().getUuid(),BranchType.WORKING.getValue());
      while (chStmt.next()) {
        long modifiedOnBranchId=chStmt.getLong(""String_Node_Str"");
        int modType=chStmt.getInt(""String_Node_Str"");
        StringBuilder branches=new StringBuilder();
        branches.append(""String_Node_Str"");
        branches.append(""String_Node_Str"");
        branches.append(ModificationType.getMod(modType).getDisplayName());
        branches.append(""String_Node_Str"");
        branches.append(BranchManager.getBranch(modifiedOnBranchId).getShortName(BRANCH_NAME_LENGTH));
        otherBranches.add(branches.toString());
        wasModified=true;
      }
    }
  finally {
      chStmt.close();
    }
  }
  return wasModified;
}","/** 
 * Returns non-archived sibling branches that this artifact's attributes have been edited on
 */
private static boolean addBranchesWhereArtifactHasBeenModified(Artifact artifact,Set<String> otherBranches) throws OseeCoreException {
  boolean wasModified=false;
  if (artifact.isInDb()) {
    JdbcStatement chStmt=ConnectionHandler.getStatement();
    try {
      Branch branch=artifact.getFullBranch();
      chStmt.runPreparedQuery(OTHER_EDIT_SQL,artifact.getArtId(),branch.getUuid(),branch.getParentBranch().getUuid(),BranchType.WORKING.getValue());
      while (chStmt.next()) {
        long modifiedOnBranchId=chStmt.getLong(""String_Node_Str"");
        int modType=chStmt.getInt(""String_Node_Str"");
        StringBuilder branches=new StringBuilder();
        branches.append(""String_Node_Str"");
        branches.append(BranchManager.getBranch(modifiedOnBranchId).getShortName(BRANCH_NAME_LENGTH));
        otherBranches.add(branches.toString());
        wasModified=true;
      }
    }
  finally {
      chStmt.close();
    }
  }
  return wasModified;
}",0.9283216783216784
97120,"public ArtifactReadable introduceArtifact(TxData txData,IOseeBranch fromBranch,ArtifactReadable source,ArtifactReadable destination) throws OseeCoreException {
  checkChangesAllowed(txData);
  Artifact src=getSourceArtifact(txData,fromBranch,source);
  Artifact dest=null;
  if (destination == null) {
    dest=artifactFactory.createArtifact(txData.getSession(),txData.getBranch(),src.getArtifactType(),src.getGuid());
    dest.setGraph(loader.createGraph(txData.getSession(),txData.getBranch()));
  }
 else {
    dest=getSourceArtifact(txData,fromBranch,destination);
  }
  artifactFactory.introduceArtifact(txData.getSession(),src,dest,txData.getBranch());
  relationManager.introduce(txData.getSession(),txData.getBranch(),src,dest);
  addNodeAndAdjacencies(txData,dest);
  return asExternalArtifact(txData,dest);
}","public ArtifactReadable introduceArtifact(TxData txData,IOseeBranch fromBranch,ArtifactReadable source,ArtifactReadable destination) throws OseeCoreException {
  checkChangesAllowed(txData);
  Artifact src=getSourceArtifact(txData,fromBranch,source);
  Artifact dest=null;
  if (destination == null) {
    dest=artifactFactory.createArtifact(txData.getSession(),txData.getBranch(),src.getArtifactType(),src.getGuid());
    dest.setGraph(loader.createGraph(txData.getSession(),txData.getBranch()));
  }
 else {
    dest=getSourceArtifact(txData,fromBranch,destination);
  }
  artifactFactory.introduceArtifact(txData.getSession(),src,dest,txData.getBranch());
  relationManager.introduce(txData.getSession(),txData.getBranch(),src,dest);
  addAdjacencies(txData,dest);
  return asExternalArtifact(txData,dest);
}",0.9957028852056476
97121,"private void safelyProcessHandler(final ArtifactEvent artifactEvent,final ISMAEditorEventHandler handler) throws OseeCoreException {
  final AbstractWorkflowArtifact awa=handler.getSMAEditor().getAwa();
  boolean refreshed=false;
  if (artifactEvent.isDeletedPurged(awa)) {
    handler.getSMAEditor().closeEditor();
  }
 else   if (workflowModifiedOrReloaded(artifactEvent,awa) || workflowRelationIsAddedChangedOrDeleted(artifactEvent,awa) || workflowActionIsModifedOrReloaded(artifactEvent,awa)|| workflowActionRelationIsAddedChangedOrDeleted(artifactEvent,awa)|| teamWorkflowParallelConfigurationChanged(artifactEvent,awa)) {
    refreshed=true;
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        handler.getSMAEditor().refreshPages();
      }
    }
);
  }
 else   if (isReloaded(artifactEvent,awa)) {
    SMAEditor.close(Collections.singleton(awa),false);
    if (!awa.isDeleted()) {
      SMAEditor.editArtifact(awa);
    }
  }
  if (!refreshed && awa.isTeamWorkflow() && ReviewManager.hasReviews((TeamWorkFlowArtifact)awa)) {
    try {
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews((TeamWorkFlowArtifact)awa)) {
        if (artifactEvent.isHasEvent(reviewArt)) {
          refreshed=true;
          Displays.ensureInDisplayThread(new Runnable(){
            @Override public void run(){
              handler.getSMAEditor().refreshPages();
            }
          }
);
          break;
        }
      }
    }
 catch (    Exception ex) {
    }
  }
  if (!refreshed && awa.isTeamWorkflow() && ((TeamWorkFlowArtifact)awa).hasTaskArtifacts()) {
    try {
      for (      TaskArtifact taskArt : ((TeamWorkFlowArtifact)awa).getTaskArtifactsFromCurrentState()) {
        if (artifactEvent.isHasEvent(taskArt)) {
          refreshed=true;
          Displays.ensureInDisplayThread(new Runnable(){
            @Override public void run(){
              handler.getSMAEditor().refreshPages();
            }
          }
);
          break;
        }
      }
    }
 catch (    Exception ex) {
    }
  }
  if (!refreshed) {
    try {
      for (      TeamWorkFlowArtifact teamWf : ActionManager.getTeams(awa.getParentActionArtifact())) {
        ActionArtifact parentAction=teamWf.getParentActionArtifact();
        if (!awa.equals(teamWf) && (artifactEvent.isHasEvent(teamWf) || (parentAction != null && artifactEvent.isRelAddedChangedDeleted(parentAction)))) {
          refreshed=true;
          Displays.ensureInDisplayThread(new Runnable(){
            @Override public void run(){
              handler.getSMAEditor().refreshPages();
            }
          }
);
          return;
        }
      }
    }
 catch (    Exception ex) {
    }
  }
}","private void safelyProcessHandler(final ArtifactEvent artifactEvent,final ISMAEditorEventHandler handler) throws OseeCoreException {
  final AbstractWorkflowArtifact awa=handler.getSMAEditor().getAwa();
  boolean refreshed=false;
  if (artifactEvent.isDeletedPurged(awa)) {
    handler.getSMAEditor().closeEditor();
  }
 else   if (workflowModifiedOrReloaded(artifactEvent,awa) || workflowRelationIsAddedChangedOrDeleted(artifactEvent,awa) || workflowActionIsModifedOrReloaded(artifactEvent,awa)|| workflowActionRelationIsAddedChangedOrDeleted(artifactEvent,awa)|| teamWorkflowParallelConfigurationChanged(artifactEvent,awa)) {
    refreshed=true;
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        handler.getSMAEditor().refreshPages();
      }
    }
);
  }
 else   if (isReloaded(artifactEvent,awa)) {
    SMAEditor.close(Collections.singleton(awa),false);
    if (!awa.isDeleted()) {
      SMAEditor.editArtifact(awa);
    }
  }
  if (!refreshed && awa.isTeamWorkflow() && ReviewManager.hasReviews((TeamWorkFlowArtifact)awa)) {
    try {
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews((TeamWorkFlowArtifact)awa)) {
        if (artifactEvent.isHasEvent(reviewArt)) {
          refreshed=true;
          Displays.ensureInDisplayThread(new Runnable(){
            @Override public void run(){
              handler.getSMAEditor().refreshPages();
            }
          }
);
          break;
        }
      }
    }
 catch (    Exception ex) {
    }
  }
  if (!refreshed && awa.isTeamWorkflow() && ((TeamWorkFlowArtifact)awa).hasTaskArtifacts()) {
    try {
      for (      TaskArtifact taskArt : ((TeamWorkFlowArtifact)awa).getTaskArtifactsFromCurrentState()) {
        if (artifactEvent.isHasEvent(taskArt)) {
          refreshed=true;
          Displays.ensureInDisplayThread(new Runnable(){
            @Override public void run(){
              handler.getSMAEditor().refreshPages();
            }
          }
);
          break;
        }
      }
    }
 catch (    Exception ex) {
    }
  }
  if (!refreshed) {
    try {
      for (      TeamWorkFlowArtifact teamWf : ActionManager.getTeams(awa.getParentActionArtifact())) {
        ActionArtifact parentAction=teamWf.getParentActionArtifact();
        if (!awa.equals(teamWf) && (artifactEvent.isHasEvent(teamWf) && (parentAction != null && artifactEvent.isRelAddedChangedDeleted(parentAction)))) {
          refreshed=true;
          Displays.ensureInDisplayThread(new Runnable(){
            @Override public void run(){
              handler.getSMAEditor().refreshPages();
            }
          }
);
          return;
        }
      }
    }
 catch (    Exception ex) {
    }
  }
}",0.999263894000736
97122,"public void refresh(){
  if (editor != null) {
    for (    SMAWorkFlowSection section : sections) {
      section.dispose();
    }
    refreshData();
  }
}","public void refresh(){
  if (editor != null) {
    if (isXWidgetDirty().isTrue()) {
      saveXWidgetToArtifact();
    }
    for (    SMAWorkFlowSection section : sections) {
      section.dispose();
    }
    refreshData();
  }
}",0.8082901554404145
97123,"private void processAttributes(Artifact artifact,WordMLProducer wordMl,PresentationType presentationType,boolean publishInLine,String footer) throws OseeCoreException {
  for (  AttributeElement attributeElement : attributeElements) {
    String attributeName=attributeElement.getAttributeName();
    if (renderer.getBooleanOption(ALL_ATTRIBUTES) || (attributeName.equals(""String_Node_Str""))) {
      for (      IAttributeType attributeType : RendererManager.getAttributeTypeOrderList(artifact)) {
        if (!outlining || !attributeType.equals(headingAttributeType)) {
          processAttribute(artifact,wordMl,attributeElement,attributeType,true,presentationType,publishInLine,footer);
        }
      }
    }
 else {
      AttributeType attributeType=AttributeTypeManager.getType(attributeName);
      if (artifact.isAttributeTypeValid(attributeType)) {
        processAttribute(artifact,wordMl,attributeElement,attributeType,false,presentationType,publishInLine,footer);
      }
    }
  }
}","private void processAttributes(Artifact artifact,WordMLProducer wordMl,PresentationType presentationType,boolean publishInLine,String footer) throws OseeCoreException {
  for (  AttributeElement attributeElement : attributeElements) {
    String attributeName=attributeElement.getAttributeName();
    if (renderer.getBooleanOption(ALL_ATTRIBUTES) || (attributeName.equals(""String_Node_Str""))) {
      for (      IAttributeType attributeType : RendererManager.getAttributeTypeOrderList(artifact)) {
        if (!outlining || !attributeType.equals(headingAttributeType)) {
          processAttribute(artifact,wordMl,attributeElement,attributeType,true,presentationType,publishInLine,footer);
        }
      }
    }
 else {
      AttributeType attributeType=AttributeTypeManager.getType(attributeName);
      if (artifact.isAttributeTypeValid(attributeType)) {
        processAttribute(artifact,wordMl,attributeElement,attributeType,false,presentationType,publishInLine,footer);
      }
    }
  }
  wordMl.setPageLayout(artifact,footer);
}",0.9798327594687654
97124,"public void setTextToClipboard(Collection<String> textTransferData){
  if (textTransferData == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (textTransferData.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  clipboard.setContents(new Object[]{Collections.toString(textTransferData,null,""String_Node_Str"",null)},new Transfer[]{TextTransfer.getInstance()});
}","public void setTextToClipboard(Collection<String> textTransferData){
  if (textTransferData == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (textTransferData.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (clipboard.isDisposed()) {
    this.clipboard=new Clipboard(null);
  }
  clipboard.setContents(new Object[]{Collections.toString(textTransferData,null,""String_Node_Str"",null)},new Transfer[]{TextTransfer.getInstance()});
}",0.9162995594713657
97125,"public void setArtifactsToClipboard(AccessPolicy policyHandlerService,List<Artifact> artifactTransferData) throws OseeCoreException {
  if (artifactTransferData == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (artifactTransferData.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Artifact> authFailedList=new ArrayList<Artifact>(artifactTransferData);
  List<Artifact> authorizedArtifacts=getArtifactsWithPermission(policyHandlerService,PermissionEnum.READ,artifactTransferData);
  authFailedList.removeAll(authorizedArtifacts);
  if (authorizedArtifacts.size() > 0) {
    ArrayList<String> textTransferData=new ArrayList<String>();
    for (    Artifact cur : authorizedArtifacts) {
      textTransferData.add(cur.getName());
    }
    Artifact[] artifacts=authorizedArtifacts.toArray(new Artifact[authorizedArtifacts.size()]);
    clipboard.setContents(new Object[]{new ArtifactData(artifacts,STATUS,viewId),HTMLTransferFormatter.getHtml(artifacts),Collections.toString(textTransferData,null,""String_Node_Str"",null)},new Transfer[]{ArtifactTransfer.getInstance(),HTMLTransfer.getInstance(),TextTransfer.getInstance()});
  }
  if (authFailedList.size() > 0) {
    String failed=Collections.toString(""String_Node_Str"",authFailedList) + ""String_Node_Str"";
    MessageDialog.openError(Displays.getActiveShell(),""String_Node_Str"",""String_Node_Str"" + failed);
  }
}","public void setArtifactsToClipboard(AccessPolicy policyHandlerService,List<Artifact> artifactTransferData) throws OseeCoreException {
  if (artifactTransferData == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (artifactTransferData.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (clipboard.isDisposed()) {
    this.clipboard=new Clipboard(null);
  }
  List<Artifact> authFailedList=new ArrayList<Artifact>(artifactTransferData);
  List<Artifact> authorizedArtifacts=getArtifactsWithPermission(policyHandlerService,PermissionEnum.READ,artifactTransferData);
  authFailedList.removeAll(authorizedArtifacts);
  if (authorizedArtifacts.size() > 0) {
    ArrayList<String> textTransferData=new ArrayList<String>();
    for (    Artifact cur : authorizedArtifacts) {
      textTransferData.add(cur.getName());
    }
    Artifact[] artifacts=authorizedArtifacts.toArray(new Artifact[authorizedArtifacts.size()]);
    clipboard.setContents(new Object[]{new ArtifactData(artifacts,STATUS,viewId),HTMLTransferFormatter.getHtml(artifacts),Collections.toString(textTransferData,null,""String_Node_Str"",null)},new Transfer[]{ArtifactTransfer.getInstance(),HTMLTransfer.getInstance(),TextTransfer.getInstance()});
  }
  if (authFailedList.size() > 0) {
    String failed=Collections.toString(""String_Node_Str"",authFailedList) + ""String_Node_Str"";
    MessageDialog.openError(Displays.getActiveShell(),""String_Node_Str"",""String_Node_Str"" + failed);
  }
}",0.9740437158469946
97126,"public List<AbstractExportItem> createTaskList(int joinId,PropertyStore options) throws OseeCoreException {
  List<AbstractExportItem> items=new ArrayList<AbstractExportItem>();
  processTxOptions(options);
  int gammaJoinId=createGammaJoin(getDbService(),joinId,options);
  items.add(new ManifestExportItem(logger,preferences,items,options));
  items.add(new MetadataExportItem(logger,items,getMetaData(getDbService())));
  items.add(new OseeTypeModelExportItem(logger,getOrcsTypes()));
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_BRANCH_DATA,BRANCH_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_TX_DETAILS_DATA,TX_DETAILS_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_TXS_DATA,TXS_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_TXS_ARCHIVED_DATA,TXS_ARCHIVE_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_ARTIFACT_DATA,ARTIFACT_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_ATTRIBUTE_DATA,ATTRIBUTE_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_RELATION_LINK_DATA,RELATION_LINK_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_MERGE_DATA,MERGE_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_CONFLICT_DATA,CONFLICT_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_BRANCH_ACL_DATA,BRANCH_ACL_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_ARTIFACT_ACL_DATA,ARTIFACT_ACL_QUERY);
  return items;
}","public List<AbstractExportItem> createTaskList(int joinId,PropertyStore options) throws OseeCoreException {
  List<AbstractExportItem> items=new ArrayList<AbstractExportItem>();
  processTxOptions(options);
  int gammaJoinId=createGammaJoin(getDbService(),joinId,options);
  items.add(new ManifestExportItem(logger,preferences,items,options));
  items.add(new MetadataExportItem(logger,items,getDbService()));
  items.add(new OseeTypeModelExportItem(logger,getOrcsTypes()));
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_BRANCH_DATA,BRANCH_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_TX_DETAILS_DATA,TX_DETAILS_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_TXS_DATA,TXS_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_TXS_ARCHIVED_DATA,TXS_ARCHIVE_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_ARTIFACT_DATA,ARTIFACT_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_ATTRIBUTE_DATA,ATTRIBUTE_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_RELATION_LINK_DATA,RELATION_LINK_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_MERGE_DATA,MERGE_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_CONFLICT_DATA,CONFLICT_TABLE_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_BRANCH_ACL_DATA,BRANCH_ACL_QUERY);
  addItem(items,joinId,options,gammaJoinId,ExportItem.OSEE_ARTIFACT_ACL_DATA,ARTIFACT_ACL_QUERY);
  return items;
}",0.9958266452648477
97127,"public MetadataExportItem(Log logger,List<AbstractExportItem> exportItems,DatabaseMetaData metaData){
  super(logger,ExportItem.EXPORT_DB_SCHEMA);
  this.exportItems=exportItems;
  this.metaData=metaData;
}","public MetadataExportItem(Log logger,List<AbstractExportItem> exportItems,JdbcClient jdbcClient){
  super(logger,ExportItem.EXPORT_DB_SCHEMA);
  this.exportItems=exportItems;
  this.jdbcClient=jdbcClient;
}",0.8009708737864077
97128,"@Override protected void doWork(Appendable appendable) throws Exception {
  ExportImportXml.openXmlNode(appendable,ExportImportXml.METADATA);
  try {
    String[] tableTypes=getTypes(metaData);
    String schema=getSchema(metaData);
    for (    AbstractExportItem item : exportItems) {
      if (!item.equals(this) && Strings.isValid(item.getSource())) {
        processMetaData(appendable,metaData,schema,tableTypes,item.getSource());
      }
    }
  }
  finally {
    ExportImportXml.closeXmlNode(appendable,ExportImportXml.METADATA);
  }
}","@Override protected void doWork(Appendable appendable) throws Exception {
  ExportImportXml.openXmlNode(appendable,ExportImportXml.METADATA);
  try {
    JdbcConnection connection=jdbcClient.getConnection();
    try {
      DatabaseMetaData metaData=connection.getMetaData();
      String[] tableTypes=getTypes(metaData);
      String schema=getSchema(metaData);
      for (      AbstractExportItem item : exportItems) {
        if (!item.equals(this) && Strings.isValid(item.getSource())) {
          processMetaData(appendable,metaData,schema,tableTypes,item.getSource());
        }
      }
    }
  finally {
      connection.close();
    }
  }
  finally {
    ExportImportXml.closeXmlNode(appendable,ExportImportXml.METADATA);
  }
}",0.8497652582159625
97129,"public int getId(){
  return (Integer)backingData.get(BRANCH_ID);
}","public long getId(){
  return asLong(backingData.get(BRANCH_ID));
}",0.8507462686567164
97130,"public void setParentBranchId(int nextSeqVal){
  this.backingData.put(PARENT_BRANCH_ID,nextSeqVal);
}","public void setParentBranchId(long nextSeqVal){
  this.backingData.put(PARENT_BRANCH_ID,nextSeqVal);
}",0.9753694581280788
97131,"public void setBranchId(int nextSeqVal){
  this.backingData.put(BRANCH_ID,nextSeqVal);
}","public void setBranchId(long nextSeqVal){
  this.backingData.put(BRANCH_ID,nextSeqVal);
}",0.9717514124293786
97132,"public int getParentBranchId(){
  return (Integer)backingData.get(PARENT_BRANCH_ID);
}","public long getParentBranchId(){
  return asLong(backingData.get(PARENT_BRANCH_ID));
}",0.8837209302325582
97133,"private BranchDataSaxHandler(Log logger,JdbcClient service,boolean isCacheAll,int cacheLimit){
  super(logger,service,isCacheAll,cacheLimit);
  this.idToImportFileBranchData=new HashMap<Integer,BranchData>();
  this.connection=null;
}","private BranchDataSaxHandler(Log logger,JdbcClient service,boolean isCacheAll,int cacheLimit){
  super(logger,service,isCacheAll,cacheLimit);
  this.idToImportFileBranchData=new HashMap<Long,BranchData>();
  this.connection=null;
}",0.9763440860215054
97134,"private Collection<BranchData> checkTargetDbBranches(JdbcConnection connection,Collection<BranchData> selectedBranches) throws OseeCoreException {
  Map<String,BranchData> guidToImportFileBranchData=new HashMap<String,BranchData>();
  for (  BranchData data : selectedBranches) {
    guidToImportFileBranchData.put(data.getBranchGuid(),data);
  }
  JdbcStatement chStmt=getDatabaseService().getStatement(connection);
  try {
    chStmt.runPreparedQuery(""String_Node_Str"");
    while (chStmt.next()) {
      String branchGuid=chStmt.getString(BranchData.BRANCH_GUID);
      Long branchUuid=chStmt.getLong(BranchData.BRANCH_ID);
      BranchData branchData=guidToImportFileBranchData.get(branchGuid);
      if (branchData != null) {
        getTranslator().checkIdMapping(""String_Node_Str"",(long)branchData.getId(),branchUuid);
        guidToImportFileBranchData.remove(branchGuid);
      }
    }
  }
  finally {
    chStmt.close();
  }
  return guidToImportFileBranchData.values();
}","private Collection<BranchData> checkTargetDbBranches(JdbcConnection connection,Collection<BranchData> selectedBranches) throws OseeCoreException {
  Map<Long,BranchData> idToBranchData=new HashMap<Long,BranchData>();
  for (  BranchData data : selectedBranches) {
    idToBranchData.put(data.getId(),data);
  }
  JdbcStatement chStmt=getDatabaseService().getStatement(connection);
  try {
    chStmt.runPreparedQuery(""String_Node_Str"");
    while (chStmt.next()) {
      Long branchUuid=chStmt.getLong(BranchData.BRANCH_ID);
      BranchData branchData=idToBranchData.get(branchUuid);
      if (branchData != null) {
        getTranslator().checkIdMapping(""String_Node_Str"",branchData.getId(),branchUuid);
        idToBranchData.remove(branchUuid);
      }
    }
  }
  finally {
    chStmt.close();
  }
  return idToBranchData.values();
}",0.7395604395604396
97135,"public void updateBaselineAndParentTransactionId(long[] branchesStored) throws OseeCoreException {
  List<BranchData> branches=getSelectedBranchesToImport(branchesStored);
  List<Object[]> data=new ArrayList<Object[]>();
  for (  BranchData branchData : branches) {
    int branchUuid=branchData.getId();
    int parentTransactionId=translateId(ExchangeDb.TRANSACTION_ID,branchData.getParentTransactionId());
    if (parentTransactionId == 0) {
      parentTransactionId=1;
    }
    int baselineTransactionId=translateId(ExchangeDb.TRANSACTION_ID,branchData.getBaselineTransactionId());
    if (baselineTransactionId == 0) {
      baselineTransactionId=1;
    }
    data.add(new Object[]{parentTransactionId,baselineTransactionId,branchUuid});
  }
  if (!data.isEmpty()) {
    String query=""String_Node_Str"";
    int updateCount=getDatabaseService().runBatchUpdate(query,data);
    getLogger().info(""String_Node_Str"",updateCount,Arrays.toString(branchesStored));
  }
 else {
    getLogger().info(""String_Node_Str"",Arrays.toString(branchesStored));
  }
}","public void updateBaselineAndParentTransactionId(long[] branchesStored) throws OseeCoreException {
  List<BranchData> branches=getSelectedBranchesToImport(branchesStored);
  List<Object[]> data=new ArrayList<Object[]>();
  for (  BranchData branchData : branches) {
    long branchUuid=branchData.getId();
    int parentTransactionId=translateIntId(ExchangeDb.TRANSACTION_ID,branchData.getParentTransactionId());
    if (parentTransactionId == 0) {
      parentTransactionId=1;
    }
    int baselineTransactionId=translateIntId(ExchangeDb.TRANSACTION_ID,branchData.getBaselineTransactionId());
    if (baselineTransactionId == 0) {
      baselineTransactionId=1;
    }
    data.add(new Object[]{parentTransactionId,baselineTransactionId,branchUuid});
  }
  if (!data.isEmpty()) {
    String query=""String_Node_Str"";
    int updateCount=getDatabaseService().runBatchUpdate(query,data);
    getLogger().info(""String_Node_Str"",updateCount,Arrays.toString(branchesStored));
  }
 else {
    getLogger().info(""String_Node_Str"",Arrays.toString(branchesStored));
  }
}",0.9938534278959812
97136,"private Object[] buildSetData(){
  Object[] data=new Object[values.length];
  for (int i=0; i < values.length; ++i) {
    Map<String,Object> element=new HashMap<String,Object>();
    element.put(""String_Node_Str"",values[i]);
    element.put(innerName[0],innerName[1]);
    Set<Map<String,Object>> dataset=new LinkedHashSet<Map<String,Object>>();
    dataset.add(element);
    data[i]=dataset;
  }
  return data;
}","private Object[] buildSetData(){
  Object[] data=new Object[values.length];
  for (int i=0; i < values.length; ++i) {
    Map<String,Object> element=new LinkedHashMap<String,Object>();
    element.put(""String_Node_Str"",values[i]);
    element.put(innerName[0],innerName[1]);
    Set<Map<String,Object>> dataset=new LinkedHashSet<Map<String,Object>>();
    dataset.add(element);
    data[i]=dataset;
  }
  return data;
}",0.9927884615384616
97137,"@Test public void testSetData(){
  buildTestStructure(buildSetData(),false);
  buildResultData(context);
  String result=resultBuffer.toString();
  assertTrue(countCells(result) == headings.length);
  for (int i=0; i < values.length; ++i) {
    assertTrue(result.contains(""String_Node_Str"" + values[i]));
  }
}","@Test public void testSetData(){
  buildTestStructure(buildSetData(),false);
  buildResultData(context);
  String result=resultBuffer.toString();
  assertTrue(countCells(result) == headings.length);
  assertTrue(result.contains(innerName[1]));
  for (int i=0; i < values.length; ++i) {
    assertTrue(result.contains(values[i]));
  }
}",0.8992248062015504
97138,"@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  when(context.getAttribute(OUTPUT_DEBUG)).thenAnswer(answer(""String_Node_Str""));
  when(context.getAttribute(OUTPUT_SCRIPT)).thenAnswer(answer(""String_Node_Str""));
  when(context.getWriter()).thenAnswer(answer(resultBuffer));
}","@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  top=new LinkedHashMap<String,Object>();
  resultBuffer=new StringWriter();
  when(context.getAttribute(OUTPUT_DEBUG)).thenAnswer(answer(""String_Node_Str""));
  when(context.getAttribute(OUTPUT_SCRIPT)).thenAnswer(answer(""String_Node_Str""));
  when(context.getWriter()).thenAnswer(answer(resultBuffer));
}",0.8845577211394303
97139,"private void buildTestStructure(Object[] data,boolean deeper){
  Map<String,Object> groupContainer=new HashMap<String,Object>();
  for (int j=groups.length - 1; j >= 0; --j) {
    Map<String,Object> inner=new HashMap<String,Object>();
    for (int i=headings.length - 1; i >= 0; --i) {
      if (i == 2 && deeper) {
        Map<String,Object> bottom=new HashMap<String,Object>();
        bottom.put(innerName[0],data[i]);
        inner.put(headings[i],bottom);
      }
 else {
        inner.put(headings[i],data[i]);
      }
    }
    groupContainer.put(groups[j],inner);
  }
  top.put(""String_Node_Str"",groupContainer);
}","private void buildTestStructure(Object[] data,boolean deeper){
  Map<String,Object> groupContainer=new LinkedHashMap<String,Object>();
  for (int j=groups.length - 1; j >= 0; --j) {
    Map<String,Object> inner=new LinkedHashMap<String,Object>();
    for (int i=headings.length - 1; i >= 0; --i) {
      if (i == 2 && deeper) {
        Map<String,Object> bottom=new LinkedHashMap<String,Object>();
        bottom.put(innerName[0],data[i]);
        inner.put(headings[i],bottom);
      }
 else {
        inner.put(headings[i],data[i]);
      }
    }
    groupContainer.put(groups[j],inner);
  }
  top.put(""String_Node_Str"",groupContainer);
}",0.9857369255150554
97140,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  OseeClient client=ServiceUtil.getOseeClient();
  TransactionEndpoint txEndpoint=client.getTransactionEndpoint();
  DeleteTransaction deleteTxs=new DeleteTransaction();
  deleteTxs.setTransactions(txIdsToDelete);
  try {
    Response result=txEndpoint.deleteTxs(deleteTxs);
    if (Status.OK.getStatusCode() == result.getStatus()) {
      for (      PurgeTransactionListener listener : listeners) {
        listener.onPurgeTransactionSuccess(changedTransactions);
      }
    }
  }
 catch (  Exception ex) {
    throw JaxRsExceptions.asOseeException(ex);
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  OseeClient client=ServiceUtil.getOseeClient();
  TransactionEndpoint txEndpoint=client.getTransactionEndpoint();
  String deleteTxs=Collections.toString(""String_Node_Str"",txIdsToDelete);
  try {
    Response result=txEndpoint.purgeTxs(deleteTxs);
    if (Status.OK.getStatusCode() == result.getStatus()) {
      for (      PurgeTransactionListener listener : listeners) {
        listener.onPurgeTransactionSuccess(changedTransactions);
      }
    }
  }
 catch (  Exception ex) {
    throw JaxRsExceptions.asOseeException(ex);
  }
}",0.8064
97141,"@Override public String toString(){
  return ""String_Node_Str"" + authorId + ""String_Node_Str""+ branchUuid+ ""String_Node_Str""+ comment+ ""String_Node_Str""+ commitId+ ""String_Node_Str""+ date+ ""String_Node_Str""+ type+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + getGuid() + ""String_Node_Str""+ authorId+ ""String_Node_Str""+ branchUuid+ ""String_Node_Str""+ comment+ ""String_Node_Str""+ commitId+ ""String_Node_Str""+ date+ ""String_Node_Str""+ type+ ""String_Node_Str"";
}",0.9357429718875502
97142,"@Override public Collection<ITransaction> getCommittedArtifactTransactionIds(IAtsTeamWorkflow teamWf){
  ArtifactReadable artifactReadable=(ArtifactReadable)teamWf;
  List<ITransaction> transactionIds=commitArtifactIdMap.get(artifactReadable.getLocalId());
  if (transactionIds == null) {
    transactionIds=new ArrayList<ITransaction>(5);
    TransactionQuery txQuery=orcsApi.getQueryFactory(null).transactionQuery();
    txQuery.andCommitIds(artifactReadable.getLocalId());
    for (    TransactionReadable tx : txQuery.getResults()) {
      transactionIds.add(tx);
    }
    commitArtifactIdMap.put(artifactReadable.getLocalId(),transactionIds);
  }
  return transactionIds;
}","@Override public Collection<ITransaction> getCommittedArtifactTransactionIds(IAtsTeamWorkflow teamWf){
  ArtifactReadable artifactReadable=(ArtifactReadable)teamWf.getStoreObject();
  List<ITransaction> transactionIds=commitArtifactIdMap.get(artifactReadable.getLocalId());
  if (transactionIds == null) {
    transactionIds=new ArrayList<ITransaction>(5);
    TransactionQuery txQuery=orcsApi.getQueryFactory(null).transactionQuery();
    txQuery.andCommitIds(artifactReadable.getLocalId());
    for (    TransactionReadable tx : txQuery.getResults()) {
      transactionIds.add(tx);
    }
    commitArtifactIdMap.put(artifactReadable.getLocalId(),transactionIds);
  }
  return transactionIds;
}",0.9876363636363636
97143,"public void reload(){
  if (isTableDisposed()) {
    return;
  }
  Job job=new Job(String.format(""String_Node_Str"",provider.getItemName())){
    @Override protected IStatus run(    IProgressMonitor monitor){
      if (isTableDisposed()) {
        return Status.OK_STATUS;
      }
      try {
        final List<Artifact> artifacts=provider.getMembers();
        try {
          AtsBulkLoad.bulkLoadArtifacts(artifacts);
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            if (isTableDisposed()) {
              return;
            }
            worldComposite.load(provider.getItemName(),artifacts,(CustomizeData)null,TableLoadOption.None);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
        return new Status(IStatus.ERROR,Activator.PLUGIN_ID,String.format(""String_Node_Str"",provider.getItemName()),ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,false);
}","public void reload(){
  if (isTableDisposed()) {
    return;
  }
  Job job=new Job(String.format(""String_Node_Str"",provider.getItemName())){
    @Override protected IStatus run(    IProgressMonitor monitor){
      if (isTableDisposed()) {
        return Status.OK_STATUS;
      }
      try {
        final List<Artifact> artifacts=provider.getMembers();
        worldComposite.load(provider.getItemName(),artifacts,(CustomizeData)null,TableLoadOption.None);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
        return new Status(IStatus.ERROR,Activator.PLUGIN_ID,String.format(""String_Node_Str"",provider.getItemName()),ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,false);
}",0.7088607594936709
97144,"public void load(final String name,final Collection<? extends Artifact> arts,final CustomizeData customizeData,TableLoadOption... tableLoadOption){
  Displays.pendInDisplayThread(new Runnable(){
    @Override public void run(){
      if (Widgets.isAccessible(worldXViewer.getTree())) {
        worldArts.clear();
        otherArts.clear();
        for (        Artifact art : arts) {
          if (AtsUtil.isAtsArtifact(art)) {
            worldArts.add(art);
          }
 else {
            otherArts.add(art);
          }
        }
        if (customizeData != null && !worldXViewer.getCustomizeMgr().generateCustDataFromTable().equals(customizeData)) {
          setCustomizeData(customizeData);
        }
        if (arts.isEmpty()) {
          setTableTitle(""String_Node_Str"" + name,true);
        }
 else {
          setTableTitle(name,false);
        }
        try {
          AtsBulkLoad.bulkLoadArtifacts(worldArts);
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
        worldXViewer.setInput(worldArts);
        worldXViewer.updateStatusLabel();
        if (otherArts.size() > 0 && MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",otherArts.size() + ""String_Node_Str"")) {
          RendererManager.openInJob(otherArts,PresentationType.GENERALIZED_EDIT);
        }
        worldXViewer.getTree().setFocus();
      }
    }
  }
);
  iWorldEditor.reflow();
}","public void load(final String name,final Collection<? extends Artifact> arts,final CustomizeData customizeData,final TableLoadOption... tableLoadOptions){
  Set<TableLoadOption> loadOptions=Collections.asHashSet(tableLoadOptions);
  boolean forcePend=loadOptions.contains(TableLoadOption.ForcePend);
  if (!forcePend && Displays.isDisplayThread()) {
    Jobs.startJob(new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          load(name,arts,customizeData,tableLoadOptions);
        }
 catch (        Exception ex) {
          OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
        }
        return Status.OK_STATUS;
      }
    }
,true);
    return;
  }
  worldArts.clear();
  otherArts.clear();
  for (  Artifact art : arts) {
    if (AtsUtil.isAtsArtifact(art)) {
      worldArts.add(art);
    }
 else {
      otherArts.add(art);
    }
  }
  try {
    AtsBulkLoad.bulkLoadArtifacts(worldArts);
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  Displays.pendInDisplayThread(new Runnable(){
    @Override public void run(){
      if (Widgets.isAccessible(worldXViewer.getTree())) {
        if (customizeData != null && !worldXViewer.getCustomizeMgr().generateCustDataFromTable().equals(customizeData)) {
          setCustomizeData(customizeData);
        }
        if (arts.isEmpty()) {
          setTableTitle(""String_Node_Str"" + name,true);
        }
 else {
          setTableTitle(name,false);
        }
        worldXViewer.setInput(worldArts);
        worldXViewer.updateStatusLabel();
        if (otherArts.size() > 0 && MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",otherArts.size() + ""String_Node_Str"")) {
          RendererManager.openInJob(otherArts,PresentationType.GENERALIZED_EDIT);
        }
        worldXViewer.getTree().setFocus();
      }
    }
  }
);
  iWorldEditor.reflow();
}",0.4790807307012374
97145,"@Override public void load(Collection<Object> objects){
  Set<Artifact> arts=new HashSet<Artifact>();
  for (  Object obj : objects) {
    if (AtsUtil.isAtsArtifact(obj)) {
      arts.add((Artifact)obj);
    }
  }
  try {
    AtsBulkLoad.bulkLoadArtifacts(arts);
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  setInput(arts);
}","@Override public void load(Collection<Object> objects){
  Set<Artifact> arts=new HashSet<Artifact>();
  for (  Object obj : objects) {
    if (AtsUtil.isAtsArtifact(obj)) {
      arts.add((Artifact)obj);
    }
  }
  setInput(arts);
}",0.7677100494233937
97146,"@Override public void run(){
  worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    final Set<Artifact> arts=new HashSet<Artifact>();
    for (    Artifact art : artifacts) {
      if (art.isOfType(AtsArtifactTypes.Action)) {
        for (        TeamWorkFlowArtifact team : ActionManager.getTeams(art)) {
          arts.addAll(ReviewManager.getReviews(team));
        }
      }
 else       if (art.isOfType(AtsArtifactTypes.TeamWorkflow)) {
        arts.addAll(ReviewManager.getReviews((TeamWorkFlowArtifact)art));
      }
    }
    worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return Status.OK_STATUS;
}",0.250289687137891
97147,"public void redisplayAsReviews(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            for (            TeamWorkFlowArtifact team : ActionManager.getTeams(art)) {
              arts.addAll(ReviewManager.getReviews(team));
            }
          }
 else           if (art.isOfType(AtsArtifactTypes.TeamWorkflow)) {
            arts.addAll(ReviewManager.getReviews((TeamWorkFlowArtifact)art));
          }
        }
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}","public void redisplayAsReviews(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            for (            TeamWorkFlowArtifact team : ActionManager.getTeams(art)) {
              arts.addAll(ReviewManager.getReviews(team));
            }
          }
 else           if (art.isOfType(AtsArtifactTypes.TeamWorkflow)) {
            arts.addAll(ReviewManager.getReviews((TeamWorkFlowArtifact)art));
          }
        }
        worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}",0.9432918395573996
97148,"public void redisplayAsGoals(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> goals=new HashSet<Artifact>();
        new GoalManager().getCollectors(artifacts,goals,true);
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),goals);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}","public void redisplayAsGoals(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> goals=new HashSet<Artifact>();
        new GoalManager().getCollectors(artifacts,goals,true);
        worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),goals);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}",0.9125799573560768
97149,"public void redisplayAsAction(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            arts.add(art);
          }
 else           if (art instanceof AbstractWorkflowArtifact) {
            Artifact parentArt=((AbstractWorkflowArtifact)art).getParentActionArtifact();
            if (parentArt != null) {
              arts.add(parentArt);
            }
          }
        }
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}","public void redisplayAsAction(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            arts.add(art);
          }
 else           if (art instanceof AbstractWorkflowArtifact) {
            Artifact parentArt=((AbstractWorkflowArtifact)art).getParentActionArtifact();
            if (parentArt != null) {
              arts.add(parentArt);
            }
          }
        }
        worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}",0.9410637278390034
97150,"public void redisplayAsWorkFlow(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            arts.addAll(ActionManager.getTeams(art));
          }
 else           if (art instanceof AbstractWorkflowArtifact) {
            Artifact parentArt=((AbstractWorkflowArtifact)art).getParentTeamWorkflow();
            if (parentArt != null) {
              arts.add(parentArt);
            }
          }
        }
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}","public void redisplayAsWorkFlow(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            arts.addAll(ActionManager.getTeams(art));
          }
 else           if (art instanceof AbstractWorkflowArtifact) {
            Artifact parentArt=((AbstractWorkflowArtifact)art).getParentTeamWorkflow();
            if (parentArt != null) {
              arts.add(parentArt);
            }
          }
        }
        worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}",0.942550210182158
97151,"public void redisplayAsTask(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            for (            TeamWorkFlowArtifact team : ActionManager.getTeams(art)) {
              arts.addAll(team.getTaskArtifacts());
            }
          }
 else           if (art instanceof AbstractTaskableArtifact) {
            arts.addAll(((AbstractTaskableArtifact)art).getTaskArtifacts());
          }
        }
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}","public void redisplayAsTask(){
  final List<Artifact> artifacts=worldComposite.getXViewer().getLoadedArtifacts();
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final Set<Artifact> arts=new HashSet<Artifact>();
        for (        Artifact art : artifacts) {
          if (art.isOfType(AtsArtifactTypes.Action)) {
            for (            TeamWorkFlowArtifact team : ActionManager.getTeams(art)) {
              arts.addAll(team.getTaskArtifacts());
            }
          }
 else           if (art instanceof AbstractTaskableArtifact) {
            arts.addAll(((AbstractTaskableArtifact)art).getTaskArtifacts());
          }
        }
        worldComposite.load(worldEditor.getWorldXWidgetActionPage().getCurrentTitleLabel(),arts);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}",0.9424964936886396
97152,"@Override public void run(){
  try {
    iRefreshActionHandler.refreshActionHandler();
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    iRefreshActionHandler.refreshActionHandler();
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return Status.OK_STATUS;
}",0.1235154394299287
97153,"/** 
 * Get file extension from the file path
 * @return file extension
 */
public static String getExtension(String filepath){
  filepath=filepath.trim();
  String separatorRegEx=File.separator;
  if (Lib.isWindows()) {
    separatorRegEx=""String_Node_Str"";
  }
  String[] pathsArray=filepath.split(separatorRegEx);
  String fileName=pathsArray[0];
  if (pathsArray.length > 0) {
    fileName=pathsArray[pathsArray.length - 1];
  }
  int index=fileName.lastIndexOf('.');
  if (index >= 0 && index + 1 < fileName.length()) {
    return fileName.substring(index + 1);
  }
 else {
    return ""String_Node_Str"";
  }
}","/** 
 * Get file extension from the file path
 * @return file extension
 */
public static String getExtension(String filepath){
  String toReturn=""String_Node_Str"";
  if (Strings.isValid(filepath)) {
    String toProcess=filepath.trim();
    toProcess=toProcess.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String[] pathsArray=toProcess.split(""String_Node_Str"");
    String fileName=pathsArray[0];
    if (pathsArray.length > 0) {
      fileName=pathsArray[pathsArray.length - 1];
    }
    int index=fileName.lastIndexOf('.');
    if (index >= 0 && index + 1 < fileName.length()) {
      toReturn=fileName.substring(index + 1);
    }
  }
  return toReturn;
}",0.6791569086651054
97154,"@Override protected Control createDialogArea(Composite container){
  Control comp=super.createDialogArea(container);
  try {
    getTreeViewer().getViewer().setInput(selectable);
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return comp;
}","@Override protected Control createDialogArea(Composite container){
  return super.createDialogArea(container);
}",0.5336658354114713
97155,"public FilteredCheckboxTreeDialog(String title,Set<Artifact> artifacts){
  this(title,title,new ArtifactContentProvider(),new ArtifactLabelProvider(),new ArtifactViewerSorter());
}","public FilteredCheckboxTreeDialog(String dialogTitle,String dialogMessage,Set<Artifact> artifacts,IContentProvider contentProvider,IBaseLabelProvider labelProvider,ViewerSorter viewerSorter){
  this(dialogTitle,dialogMessage,contentProvider,labelProvider,viewerSorter);
  this.selectables=artifacts;
}",0.340956340956341
97156,"protected FilterableCheckboxTreeViewer getCheckboxTreeViewer(){
  return (FilterableCheckboxTreeViewer)treeViewer.getViewer();
}","protected FilterableCheckboxTreeViewer getCheckboxTreeViewer(){
  return treeViewer.getCheckboxTreeViewer();
}",0.8403361344537815
97157,"@Override protected Control createCustomArea(Composite parent){
  statusLabel=new Label(parent,SWT.NONE);
  statusLabel.setForeground(Displays.getSystemColor(SWT.COLOR_RED));
  createPreCustomArea(parent);
  Composite aiComp=new Composite(parent,SWT.NONE);
  aiComp.setLayout(ALayout.getZeroMarginLayout());
  aiComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  treeViewer=new FilteredCheckboxTree(aiComp,SWT.CHECK | (multiSelect ? SWT.MULTI : SWT.NONE) | SWT.READ_ONLY| SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER,patternFilter);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  gd.heightHint=500;
  treeViewer.getViewer().getTree().setLayoutData(gd);
  treeViewer.getViewer().setContentProvider(contentProvider);
  treeViewer.getViewer().setLabelProvider(labelProvider);
  treeViewer.getViewer().setAutoExpandLevel(0);
  if (viewerSorter != null) {
    treeViewer.getViewer().setSorter(viewerSorter);
  }
  treeViewer.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      updateStatusLabel();
    }
  }
);
  if (input != null) {
    treeViewer.getViewer().setInput(input);
  }
  if (initialSelections != null) {
    getCheckboxTreeViewer().setCheckedElements(initialSelections.toArray());
  }
  updateStatusLabel();
  if (showSelectButtons) {
    Composite comp=new Composite(parent,SWT.NONE);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData());
    Button selectAllButton=new Button(comp,SWT.PUSH);
    selectAllButton.setText(""String_Node_Str"");
    selectAllButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        treeViewer.setCheckAll(true);
        updateStatusLabel();
      }
    }
);
    Button deSelectAllButton=new Button(comp,SWT.PUSH);
    deSelectAllButton.setText(""String_Node_Str"");
    deSelectAllButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        treeViewer.setCheckAll(false);
        updateStatusLabel();
      }
    }
);
  }
  if (expandChecked) {
    getCheckboxTreeViewer().expandChecked();
  }
  createPostCustomArea(parent);
  return parent;
}","@Override protected Control createCustomArea(Composite parent){
  statusLabel=new Label(parent,SWT.NONE);
  statusLabel.setForeground(Displays.getSystemColor(SWT.COLOR_RED));
  createPreCustomArea(parent);
  Composite aiComp=new Composite(parent,SWT.NONE);
  aiComp.setLayout(ALayout.getZeroMarginLayout());
  aiComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  treeViewer=new FilteredCheckboxTree(aiComp,SWT.CHECK | (multiSelect ? SWT.MULTI : SWT.NONE) | SWT.READ_ONLY| SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER,patternFilter);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  gd.heightHint=500;
  treeViewer.getViewer().getTree().setLayoutData(gd);
  treeViewer.getViewer().setContentProvider(contentProvider);
  treeViewer.getViewer().setLabelProvider(labelProvider);
  treeViewer.getViewer().setAutoExpandLevel(0);
  if (viewerSorter != null) {
    treeViewer.getViewer().setSorter(viewerSorter);
  }
  treeViewer.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      updateStatusLabel();
    }
  }
);
  if (selectables != null && !selectables.isEmpty()) {
    setInput(selectables);
    for (    Artifact selectable : selectables) {
      treeViewer.getCheckboxTreeViewer().getOrCreateItem(selectable);
    }
  }
  if (input != null) {
    treeViewer.getViewer().setInput(input);
  }
  if (initialSelections != null) {
    treeViewer.setInitalChecked(initialSelections);
  }
  updateStatusLabel();
  if (showSelectButtons) {
    Composite comp=new Composite(parent,SWT.NONE);
    comp.setLayout(new GridLayout(2,false));
    comp.setLayoutData(new GridData());
    Button selectAllButton=new Button(comp,SWT.PUSH);
    selectAllButton.setText(""String_Node_Str"");
    selectAllButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        treeViewer.setCheckAll(true);
        updateStatusLabel();
      }
    }
);
    Button deSelectAllButton=new Button(comp,SWT.PUSH);
    deSelectAllButton.setText(""String_Node_Str"");
    deSelectAllButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        treeViewer.setCheckAll(false);
        updateStatusLabel();
      }
    }
);
  }
  if (expandChecked) {
    getCheckboxTreeViewer().expandChecked();
  }
  createPostCustomArea(parent);
  return parent;
}",0.9175323298706806
97158,"private boolean hasExtension(String path){
  String extension=Lib.getExtension(path);
  return Strings.isValid(extension);
}","private boolean hasExtension(String path){
  String extension=null;
  if (Strings.isValid(path)) {
    int index=path.lastIndexOf(""String_Node_Str"");
    String toProcess=path;
    if (index > 0 && index + 1 < path.length()) {
      toProcess=path.substring(index + 1);
    }
    extension=Lib.getExtension(toProcess);
  }
  return Strings.isValid(extension);
}",0.4865979381443299
97159,"private String addExtension(String path,MediaType mediaType){
  String extension=mediaType.getSubtype();
  if (extension.contains(""String_Node_Str"")) {
    int index=extension.lastIndexOf(""String_Node_Str"");
    if (index > 0 && index + 1 < extension.length()) {
      extension=extension.substring(index + 1);
    }
  }
 else   if (extension.contains(""String_Node_Str"")) {
    extension=Lib.getExtension(extension);
  }
  String toReturn=null;
  if (Strings.isValid(extension)) {
    StringBuilder builder=new StringBuilder(path);
    builder.append(""String_Node_Str"");
    builder.append(extension);
    toReturn=builder.toString();
  }
  return toReturn;
}","private String addExtension(String path,MediaType mediaType){
  String extension=mediaType.getSubtype();
  if (""String_Node_Str"".equals(extension)) {
    extension=""String_Node_Str"";
  }
 else   if (extension.contains(""String_Node_Str"")) {
    int index=extension.lastIndexOf(""String_Node_Str"");
    if (index > 0 && index + 1 < extension.length()) {
      extension=extension.substring(index + 1);
    }
  }
 else   if (extension.contains(""String_Node_Str"")) {
    extension=Lib.getExtension(extension);
  }
  String toReturn=null;
  if (Strings.isValid(extension)) {
    StringBuilder builder=new StringBuilder(path);
    builder.append(""String_Node_Str"");
    builder.append(extension);
    toReturn=builder.toString();
  }
  return toReturn;
}",0.937411095305832
97160,"public static void computeXTextSize(XText xText){
  int height=xText.getStyledText().getLineCount() * xText.getStyledText().getLineHeight();
  GridData formTextGd=new GridData(SWT.FILL,SWT.FILL,true,true);
  if (xText.isFillVertically() && height < 60) {
    formTextGd.heightHint=60;
  }
 else {
    formTextGd.heightHint=height;
  }
  formTextGd.widthHint=200;
  xText.getStyledText().setLayoutData(formTextGd);
}","public static void computeXTextSize(XText xText){
  if (Widgets.isAccessible(xText.getStyledText())) {
    int height=xText.getStyledText().getLineCount() * xText.getStyledText().getLineHeight();
    GridData formTextGd=new GridData(SWT.FILL,SWT.FILL,true,true);
    if (xText.isFillVertically() && height < 60) {
      formTextGd.heightHint=60;
    }
 else {
      formTextGd.heightHint=height;
    }
    formTextGd.widthHint=200;
    xText.getStyledText().setLayoutData(formTextGd);
  }
}",0.9171270718232044
97161,"public void saveState(IMemento memento){
  for (  String option : optionsMap.keySet()) {
    memento.putString(OPTIONS_KEY_ID + option.replaceAll(""String_Node_Str"",""String_Node_Str""),optionsMap.get(option).toString());
  }
  for (  Entry<String,IOptionConfigurationHandler<?>> entry : configurableOptionSet.entrySet()) {
    IOptionConfigurationHandler<?> handler=entry.getValue();
    String[] config=handler.toStore();
    if (config != null && config.length > 0) {
      memento.putString(OPTION_CONFIGS_KEY_ID + entry.getKey().replaceAll(""String_Node_Str"",""String_Node_Str""),StringUtils.join(config,ENTRY_SEPARATOR));
    }
  }
}","public void saveState(IMemento memento){
  for (  SearchOption option : optionsMap.keySet()) {
    memento.putString(OPTIONS_KEY_ID + option.name(),optionsMap.get(option).toString());
  }
  for (  Entry<SearchOption,IOptionConfigurationHandler<?>> entry : configurableOptionSet.entrySet()) {
    IOptionConfigurationHandler<?> handler=entry.getValue();
    String[] config=handler.toStore();
    if (config != null && config.length > 0) {
      memento.putString(OPTION_CONFIGS_KEY_ID + entry.getKey().name(),StringUtils.join(config,ENTRY_SEPARATOR));
    }
  }
}",0.8879598662207357
97162,"public boolean isArtifactTypeFilterEnabled(){
  return isOptionSelected(SearchOption.Artifact_Types.asLabel());
}","public boolean isArtifactTypeFilterEnabled(){
  return isOptionSelected(SearchOption.Artifact_Types);
}",0.9537037037037036
97163,"public static Map<String,IOptionConfigurationHandler<?>> getConfigurableOptions(){
  if (configurable == null) {
    configurable=new HashMap<String,IOptionConfigurationHandler<?>>();
    for (    SearchOption option : SearchOption.values()) {
      if (option.isConfigurable()) {
        configurable.put(option.asLabel(),option.getConfigHandler());
      }
    }
  }
  return configurable;
}","public static Map<SearchOption,IOptionConfigurationHandler<?>> getConfigurableOptions(){
  if (configurable == null) {
    configurable=new HashMap<SearchOption,IOptionConfigurationHandler<?>>();
    for (    SearchOption option : SearchOption.values()) {
      if (option.isConfigurable()) {
        configurable.put(option,option.getConfigHandler());
      }
    }
  }
  return configurable;
}",0.9289340101522844
97164,"public boolean isAttributeTypeFilterEnabled(){
  return isOptionSelected(SearchOption.Attribute_Types.asLabel());
}","public boolean isAttributeTypeFilterEnabled(){
  return isOptionSelected(SearchOption.Attribute_Types);
}",0.9545454545454546
97165,"private void updateExactMatchOptions(){
  Button caseBtn=optionsButtons.get(SearchOption.Case_Sensitive.asLabel());
  Button mwoBtn=optionsButtons.get(SearchOption.Match_Word_Order.asLabel());
  boolean exactMatch=isExactMatchEnabled();
  caseBtn.setEnabled(!exactMatch);
  mwoBtn.setEnabled(!exactMatch);
}","private void updateExactMatchOptions(){
  Button caseBtn=optionsButtons.get(SearchOption.Case_Sensitive);
  Button mwoBtn=optionsButtons.get(SearchOption.Match_Word_Order);
  boolean exactMatch=isExactMatchEnabled();
  caseBtn.setEnabled(!exactMatch);
  mwoBtn.setEnabled(!exactMatch);
}",0.9663299663299664
97166,"public QuickSearchOptionComposite(Composite parent,int style){
  super(parent,style);
  this.optionsButtons=new LinkedHashMap<String,Button>();
  this.textAreas=new HashMap<String,Text>();
  this.optionsMap=new LinkedHashMap<String,Boolean>();
  this.configurableOptionSet=new HashMap<String,IOptionConfigurationHandler<?>>();
  for (  String option : SearchOption.asLabels()) {
    this.optionsMap.put(option,false);
  }
  for (  String option : SearchOption.getConfigurableOptions().keySet()) {
    this.optionsMap.put(option,false);
    this.configurableOptionSet.put(option,SearchOption.getConfigurableOptions().get(option));
  }
  createControl(this);
}","public QuickSearchOptionComposite(Composite parent,int style){
  super(parent,style);
  this.optionsButtons=new LinkedHashMap<SearchOption,Button>();
  this.textAreas=new HashMap<SearchOption,Text>();
  this.optionsMap=new LinkedHashMap<SearchOption,Boolean>();
  this.configurableOptionSet=new HashMap<SearchOption,IOptionConfigurationHandler<?>>();
  for (  SearchOption option : SearchOption.values()) {
    this.optionsMap.put(option,false);
  }
  for (  SearchOption option : SearchOption.getConfigurableOptions().keySet()) {
    this.optionsMap.put(option,false);
    this.configurableOptionSet.put(option,SearchOption.getConfigurableOptions().get(option));
  }
  createControl(this);
}",0.5881481481481482
97167,"public IOptionConfigurationHandler<?> getConfiguration(String key){
  return this.configurableOptionSet.get(key);
}","public IOptionConfigurationHandler<?> getConfiguration(SearchOption option){
  return this.configurableOptionSet.get(option);
}",0.8842975206611571
97168,"public IArtifactType[] getArtifactTypeFilter(){
  IOptionConfigurationHandler<?> handler=getConfiguration(SearchOption.Artifact_Types.asLabel());
  IArtifactType[] types=(IArtifactType[])handler.getConfigData();
  return isArtifactTypeFilterEnabled() ? types : new IArtifactType[0];
}","public IArtifactType[] getArtifactTypeFilter(){
  IOptionConfigurationHandler<?> handler=getConfiguration(SearchOption.Artifact_Types);
  IArtifactType[] types=(IArtifactType[])handler.getConfigData();
  return isArtifactTypeFilterEnabled() ? types : new IArtifactType[0];
}",0.4982078853046595
97169,"public IAttributeType[] getAttributeTypeFilter(){
  IOptionConfigurationHandler<?> handler=getConfiguration(SearchOption.Attribute_Types.asLabel());
  IAttributeType[] types=(IAttributeType[])handler.getConfigData();
  return isAttributeTypeFilterEnabled() ? types : new IAttributeType[0];
}","public IAttributeType[] getAttributeTypeFilter(){
  IOptionConfigurationHandler<?> handler=getConfiguration(SearchOption.Attribute_Types);
  IAttributeType[] types=(IAttributeType[])handler.getConfigData();
  return isAttributeTypeFilterEnabled() ? types : new IAttributeType[0];
}",0.506993006993007
97170,"private Button createButton(Composite parent,String option){
  final IOptionConfigurationHandler<?> configHandler=configurableOptionSet.get(option);
  Composite mainComposite=parent;
  if (configHandler != null) {
    mainComposite=new Composite(parent,SWT.NONE);
    mainComposite.setLayout(ALayout.getZeroMarginLayout(4,false));
    mainComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  }
  Button toReturn=new Button(mainComposite,SWT.CHECK);
  toReturn.setData(option);
  toReturn.setFont(getFont());
  toReturn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object object=e.getSource();
      if (object instanceof Button) {
        Button button=(Button)object;
        optionsMap.put((String)button.getData(),button.getSelection());
        updateExactMatchOptions();
      }
    }
  }
);
  if (configHandler != null) {
    Label label=new Label(mainComposite,SWT.NONE);
    label.setText(option + ""String_Node_Str"");
    Button filterConfig=new Button(mainComposite,SWT.PUSH);
    String configToolTip=configHandler.getConfigToolTip();
    filterConfig.setToolTipText(Strings.isValid(configToolTip) ? configToolTip : CONFIG_BUTTON_TOOLTIP);
    filterConfig.setImage(ImageManager.getImage(FrameworkImage.GEAR));
    filterConfig.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        configHandler.configure();
        searchText.setText(configHandler.toString());
      }
    }
);
    searchText=new Text(mainComposite,SWT.READ_ONLY | SWT.BORDER);
    searchText.setText(configHandler.toString());
    GridData data=new GridData(SWT.FILL,SWT.FILL,true,false);
    data.minimumWidth=100;
    searchText.setLayoutData(data);
    textAreas.put(option,searchText);
  }
 else {
    toReturn.setText(option);
  }
  return toReturn;
}","private Button createButton(Composite parent,SearchOption option){
  final IOptionConfigurationHandler<?> configHandler=configurableOptionSet.get(option);
  Composite mainComposite=parent;
  if (configHandler != null) {
    mainComposite=new Composite(parent,SWT.NONE);
    mainComposite.setLayout(ALayout.getZeroMarginLayout(4,false));
    mainComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  }
  Button toReturn=new Button(mainComposite,SWT.CHECK);
  toReturn.setData(option);
  toReturn.setFont(getFont());
  toReturn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object object=e.getSource();
      if (object instanceof Button) {
        Button button=(Button)object;
        optionsMap.put((SearchOption)button.getData(),button.getSelection());
        updateExactMatchOptions();
      }
    }
  }
);
  if (configHandler != null) {
    Label label=new Label(mainComposite,SWT.NONE);
    label.setText(option.asLabel() + ""String_Node_Str"");
    Button filterConfig=new Button(mainComposite,SWT.PUSH);
    String configToolTip=configHandler.getConfigToolTip();
    filterConfig.setToolTipText(Strings.isValid(configToolTip) ? configToolTip : CONFIG_BUTTON_TOOLTIP);
    filterConfig.setImage(ImageManager.getImage(FrameworkImage.GEAR));
    filterConfig.addSelectionListener(new TypeSelectionFilter(option,configHandler));
    Text searchText=new Text(mainComposite,SWT.READ_ONLY | SWT.BORDER);
    searchText.setText(configHandler.toString());
    GridData data=new GridData(SWT.FILL,SWT.FILL,true,false);
    data.minimumWidth=100;
    searchText.setLayoutData(data);
    if (option.equals(SearchOption.Attribute_Types)) {
      attributeSearchText=searchText;
    }
 else     if (option.equals(SearchOption.Artifact_Types)) {
      artifactSearchText=searchText;
    }
    textAreas.put(option,searchText);
  }
 else {
    toReturn.setText(option.asLabel());
  }
  return toReturn;
}",0.8783260139498837
97171,"private void initializeOptions(Map<String,Boolean> options){
  for (  String option : options.keySet()) {
    Boolean isSelected=options.get(option);
    Button button=getOrCreateOptionsButton(option);
    button.setSelection(isSelected);
    this.optionsMap.put(option,isSelected);
  }
  updateExactMatchOptions();
}","private void initializeOptions(Map<SearchOption,Boolean> options){
  for (  SearchOption option : options.keySet()) {
    Boolean isSelected=options.get(option);
    Button button=getOrCreateOptionsButton(option);
    button.setSelection(isSelected);
    this.optionsMap.put(option,isSelected);
  }
  updateExactMatchOptions();
}",0.9504643962848296
97172,"private void setHelpContextForOption(String optionId,HelpContext helpContext){
  Control control=getOrCreateOptionsButton(optionId);
  if (Widgets.isAccessible(control)) {
    HelpUtil.setHelp(control,helpContext);
  }
}","private void setHelpContextForOption(SearchOption option,HelpContext helpContext){
  Control control=getOrCreateOptionsButton(option);
  if (Widgets.isAccessible(control)) {
    HelpUtil.setHelp(control,helpContext);
  }
}",0.9230769230769232
97173,"private void createControl(Composite parent){
  this.optionGroup=new Group(parent,SWT.NONE);
  this.optionGroup.setLayout(new GridLayout());
  this.optionGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  this.optionGroup.setText(""String_Node_Str"");
  initializeOptions(optionsMap);
  for (  SearchOption option : SearchOption.values()) {
    setHelpContextForOption(option.asLabel(),option.getHelpContext());
    setToolTipForOption(option.asLabel(),option.getToolTip());
  }
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(ALayout.getZeroMarginLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
}","private void createControl(Composite parent){
  this.optionGroup=new Group(parent,SWT.NONE);
  this.optionGroup.setLayout(new GridLayout());
  this.optionGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  this.optionGroup.setText(""String_Node_Str"");
  initializeOptions(optionsMap);
  for (  SearchOption option : SearchOption.values()) {
    setHelpContextForOption(option,option.getHelpContext());
    setToolTipForOption(option,option.getToolTip());
  }
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(ALayout.getZeroMarginLayout());
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
}",0.9848942598187312
97174,"public boolean isExactMatchEnabled(){
  return isOptionSelected(SearchOption.Exact_Match.asLabel());
}","public boolean isExactMatchEnabled(){
  return isOptionSelected(SearchOption.Exact_Match);
}",0.9484536082474226
97175,"public void loadState(IMemento memento){
  Map<String,String[]> configs=new HashMap<String,String[]>();
  Map<String,Boolean> options=new HashMap<String,Boolean>();
  for (  SearchOption option : SearchOption.values()) {
    options.put(option.asLabel(),new Boolean(memento.getString(OPTIONS_KEY_ID + option.name())));
    if (option.isConfigurable()) {
      String configuration=memento.getString(OPTION_CONFIGS_KEY_ID + option.name());
      if (Strings.isValid(configuration)) {
        String[] values=configuration.split(ENTRY_SEPARATOR);
        configs.put(option.asLabel(),values);
      }
    }
  }
  initializeOptions(options);
  initializeConfigurations(configs);
}","public void loadState(IMemento memento){
  Map<SearchOption,String[]> configs=new HashMap<SearchOption,String[]>();
  Map<SearchOption,Boolean> options=new HashMap<SearchOption,Boolean>();
  for (  SearchOption option : SearchOption.values()) {
    options.put(option,new Boolean(memento.getString(OPTIONS_KEY_ID + option.name())));
    if (option.isConfigurable()) {
      String configuration=memento.getString(OPTION_CONFIGS_KEY_ID + option.name());
      if (Strings.isValid(configuration)) {
        String[] values=configuration.split(ENTRY_SEPARATOR);
        configs.put(option,values);
      }
    }
  }
  initializeOptions(options);
  initializeConfigurations(configs);
}",0.9381443298969072
97176,"@Override public void widgetSelected(SelectionEvent e){
  configHandler.configure();
  searchText.setText(configHandler.toString());
}","@Override public void widgetSelected(SelectionEvent e){
  configHandler.configure();
  if (option.equals(SearchOption.Attribute_Types)) {
    attributeSearchText.setText(configHandler.toString());
  }
 else   if (option.equals(SearchOption.Artifact_Types)) {
    artifactSearchText.setText(configHandler.toString());
  }
}",0.5833333333333334
97177,"private Button getOrCreateOptionsButton(String option){
  Button toReturn=this.optionsButtons.get(option);
  if (toReturn == null) {
    toReturn=createButton(this.optionGroup,option);
    this.optionsButtons.put(option,toReturn);
  }
  return toReturn;
}","private Button getOrCreateOptionsButton(SearchOption option){
  Button toReturn=this.optionsButtons.get(option);
  if (toReturn == null) {
    toReturn=createButton(this.optionGroup,option);
    this.optionsButtons.put(option,toReturn);
  }
  return toReturn;
}",0.9689922480620154
97178,"public boolean isOptionSelected(String key){
  Boolean value=optionsMap.get(key);
  return value != null ? value.booleanValue() : false;
}","public boolean isOptionSelected(SearchOption option){
  Boolean value=optionsMap.get(option);
  return value != null ? value.booleanValue() : false;
}",0.9027777777777778
97179,"private void setToolTipForOption(String optionId,String toolTip){
  Control control=getOrCreateOptionsButton(optionId);
  if (Widgets.isAccessible(control)) {
    control.setToolTipText(toolTip);
  }
}","private void setToolTipForOption(SearchOption option,String toolTip){
  Control control=getOrCreateOptionsButton(option);
  if (Widgets.isAccessible(control)) {
    control.setToolTipText(toolTip);
  }
}",0.915841584158416
97180,"public boolean isMatchWordOrderEnabled(){
  return isOptionSelected(SearchOption.Match_Word_Order.asLabel());
}","public boolean isMatchWordOrderEnabled(){
  return isOptionSelected(SearchOption.Match_Word_Order);
}",0.9528301886792452
97181,"public boolean isCaseSensitiveEnabled(){
  return isOptionSelected(SearchOption.Case_Sensitive.asLabel());
}","public boolean isCaseSensitiveEnabled(){
  return isOptionSelected(SearchOption.Case_Sensitive);
}",0.9514563106796116
97182,"private void initializeConfigurations(Map<String,String[]> items){
  for (  String key : items.keySet()) {
    IOptionConfigurationHandler<?> handler=configurableOptionSet.get(key);
    if (handler != null) {
      handler.loadFrom(items.get(key));
      Text text=textAreas.get(key);
      if (text != null) {
        text.setText(handler.toString());
      }
    }
  }
}","private void initializeConfigurations(Map<SearchOption,String[]> items){
  for (  SearchOption option : items.keySet()) {
    IOptionConfigurationHandler<?> handler=configurableOptionSet.get(option);
    if (handler != null) {
      handler.loadFrom(items.get(option));
      Text text=textAreas.get(option);
      if (text != null) {
        text.setText(handler.toString());
      }
    }
  }
}",0.9088541666666666
97183,"private void diff(List<Change> changes,Collection<Artifact> endArtifacts,String diffPrefix,TransactionDelta txDelta) throws OseeCoreException {
  Collection<ArtifactDelta> artifactDeltas=new ArrayList<ArtifactDelta>();
  Set<Integer> addedIds=new HashSet<Integer>();
  Set<Integer> changeIds=new HashSet<Integer>(changes.size());
  for (  Change change : changes) {
    changeIds.add(change.getArtId());
  }
  for (  Artifact art : endArtifacts) {
    Integer artId=art.getArtId();
    if (changeIds.contains(artId)) {
      Change newChange=findChange(artId,changes);
      if (newChange != null && !(newChange.getChangeItem() instanceof RelationChangeItem) && !addedIds.contains(artId)) {
        artifactDeltas.add(newChange.getDelta());
        addedIds.add(artId);
      }
    }
 else {
      Artifact wasArt=ArtifactQuery.getArtifactFromId(artId,txDelta.getEndTx().getBranch());
      artifactDeltas.add(new ArtifactDelta(txDelta,wasArt,wasArt,wasArt));
      addedIds.add(artId);
    }
  }
  if (!artifactDeltas.isEmpty()) {
    RendererManager.diffWithRenderer(artifactDeltas,diffPrefix,renderer,renderer.getValues());
  }
}","private void diff(List<Change> changes,Collection<Artifact> endArtifacts,String diffPrefix,TransactionDelta txDelta) throws OseeCoreException {
  Collection<ArtifactDelta> artifactDeltas=new ArrayList<ArtifactDelta>();
  Set<Integer> addedIds=new HashSet<Integer>();
  Set<Integer> changeIds=new HashSet<Integer>(changes.size());
  for (  Change change : changes) {
    changeIds.add(change.getArtId());
  }
  IOseeBranch endBranch=txDelta.getEndTx().getBranch();
  for (  Artifact art : endArtifacts) {
    Integer artId=art.getArtId();
    if (changeIds.contains(artId)) {
      Change newChange=findChange(artId,changes);
      if (newChange != null && !(newChange.getChangeItem() instanceof RelationChangeItem) && !addedIds.contains(artId)) {
        artifactDeltas.add(newChange.getDelta());
        addedIds.add(artId);
      }
    }
 else     if (ArtifactQuery.checkArtifactFromId(artId,endBranch,DeletionFlag.EXCLUDE_DELETED) == null) {
      artifactDeltas.add(new ArtifactDelta(txDelta,null,art));
      addedIds.add(artId);
    }
 else {
      Artifact wasArt=ArtifactQuery.getArtifactFromId(artId,endBranch);
      artifactDeltas.add(new ArtifactDelta(txDelta,wasArt,wasArt,wasArt));
      addedIds.add(artId);
    }
  }
  if (!artifactDeltas.isEmpty()) {
    RendererManager.diffWithRenderer(artifactDeltas,diffPrefix,renderer,renderer.getValues());
  }
}",0.8704
97184,"@Override protected Control createDialogArea(Composite container){
  Control c=super.createDialogArea(container);
  getTreeViewer().setSorter(new ViewerSorter(){
    @SuppressWarnings(""String_Node_Str"") @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      User user1=(User)e1;
      User user2=(User)e2;
      try {
        if (UserManager.getUser().equals(user1)) {
          return -1;
        }
        if (UserManager.getUser().equals(user2)) {
          return 1;
        }
        Collection<? extends Object> initialSel=getInitialSelections();
        if (initialSel != null) {
          if (initialSel.contains(user1) && initialSel.contains(user2)) {
            return getComparator().compare(user1.getName(),user2.getName());
          }
          if (initialSel.contains(user1)) {
            return -1;
          }
          if (initialSel.contains(user2)) {
            return 1;
          }
        }
        if (teamMembers != null) {
          if (teamMembers.contains(user1) && teamMembers.contains(user2)) {
            return getComparator().compare(user1.getName(),user2.getName());
          }
          if (teamMembers.contains(user1)) {
            return -1;
          }
          if (teamMembers.contains(user2)) {
            return 1;
          }
        }
        return getComparator().compare(user1.getName(),user2.getName());
      }
 catch (      OseeCoreException ex) {
        return -1;
      }
    }
  }
);
  return c;
}","@Override protected Control createDialogArea(Composite container){
  Control c=super.createDialogArea(container);
  if (teamMembers != null) {
    ((UserCheckTreeLabelProvider)getTreeViewer().getViewer().getLabelProvider()).setTeamMembers(teamMembers);
  }
  getTreeViewer().setSorter(new ViewerSorter(){
    @SuppressWarnings(""String_Node_Str"") @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      User user1=(User)e1;
      User user2=(User)e2;
      try {
        if (UserManager.getUser().equals(user1)) {
          return -1;
        }
        if (UserManager.getUser().equals(user2)) {
          return 1;
        }
        Collection<? extends Object> initialSel=getInitialSelections();
        if (initialSel != null) {
          if (initialSel.contains(user1) && initialSel.contains(user2)) {
            return getComparator().compare(user1.getName(),user2.getName());
          }
          if (initialSel.contains(user1)) {
            return -1;
          }
          if (initialSel.contains(user2)) {
            return 1;
          }
        }
        if (teamMembers != null) {
          if (teamMembers.contains(user1) && teamMembers.contains(user2)) {
            return getComparator().compare(user1.getName(),user2.getName());
          }
          if (teamMembers.contains(user1)) {
            return -1;
          }
          if (teamMembers.contains(user2)) {
            return 1;
          }
        }
        return getComparator().compare(user1.getName(),user2.getName());
      }
 catch (      OseeCoreException ex) {
        return -1;
      }
    }
  }
);
  return c;
}",0.9540930979133226
97185,"@Override public Pair<IAtsAction,Collection<IAtsTeamWorkflow>> createAction(IAtsUser user,String title,String desc,ChangeType changeType,String priority,boolean validationRequired,Date needByDate,Collection<IAtsActionableItem> actionableItems,Date createdDate,IAtsUser createdBy,INewActionListener newActionListener,IAtsChangeSet changes) throws OseeCoreException {
  Conditions.checkNotNullOrEmptyOrContainNull(actionableItems,""String_Node_Str"");
  Object actionArt=changes.createArtifact(AtsArtifactTypes.Action,title);
  IAtsAction action=workItemFactory.getAction(actionArt);
  changes.add(action);
  setArtifactIdentifyData(action,title,desc,changeType,priority,validationRequired,needByDate,changes);
  IAtsTeamDefinition topTeamDefinition=TeamDefinitions.getTopTeamDefinition(config);
  utilService.setAtsId(sequenceProvider,action,topTeamDefinition,changes);
  Collection<IAtsTeamDefinition> teamDefs=TeamDefinitions.getImpactedTeamDefs(actionableItems);
  if (teamDefs.isEmpty()) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    for (    IAtsActionableItem aia : actionableItems) {
      sb.append(""String_Node_Str"" + aia + ""String_Node_Str""+ aia.getGuid()+ ""String_Node_Str"");
    }
    throw new OseeStateException(sb.toString());
  }
  List<IAtsTeamWorkflow> teamWfs=new ArrayList<IAtsTeamWorkflow>();
  for (  IAtsTeamDefinition teamDef : teamDefs) {
    List<IAtsUser> leads=new LinkedList<IAtsUser>(teamDef.getLeads(actionableItems));
    IAtsTeamWorkflow teamWf=createTeamWorkflow(action,teamDef,actionableItems,leads,changes,createdDate,createdBy,newActionListener);
    teamWfs.add(teamWf);
    changes.add(teamWf);
  }
  if (newActionListener != null) {
    newActionListener.actionCreated(action);
  }
  changes.add(action);
  return new Pair<IAtsAction,Collection<IAtsTeamWorkflow>>(action,teamWfs);
}","@Override public Pair<IAtsAction,Collection<IAtsTeamWorkflow>> createAction(IAtsUser user,String title,String desc,ChangeType changeType,String priority,boolean validationRequired,Date needByDate,Collection<IAtsActionableItem> actionableItems,Date createdDate,IAtsUser createdBy,INewActionListener newActionListener,IAtsChangeSet changes) throws OseeCoreException {
  Conditions.checkNotNullOrEmptyOrContainNull(actionableItems,""String_Node_Str"");
  Object actionArt=changes.createArtifact(AtsArtifactTypes.Action,title);
  IAtsAction action=workItemFactory.getAction(actionArt);
  IAtsTeamDefinition topTeamDefinition=TeamDefinitions.getTopTeamDefinition(config);
  utilService.setAtsId(sequenceProvider,action,topTeamDefinition,changes);
  changes.add(action);
  setArtifactIdentifyData(action,title,desc,changeType,priority,validationRequired,needByDate,changes);
  Collection<IAtsTeamDefinition> teamDefs=TeamDefinitions.getImpactedTeamDefs(actionableItems);
  if (teamDefs.isEmpty()) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    for (    IAtsActionableItem aia : actionableItems) {
      sb.append(""String_Node_Str"" + aia + ""String_Node_Str""+ aia.getGuid()+ ""String_Node_Str"");
    }
    throw new OseeStateException(sb.toString());
  }
  List<IAtsTeamWorkflow> teamWfs=new ArrayList<IAtsTeamWorkflow>();
  for (  IAtsTeamDefinition teamDef : teamDefs) {
    List<IAtsUser> leads=new LinkedList<IAtsUser>(teamDef.getLeads(actionableItems));
    IAtsTeamWorkflow teamWf=createTeamWorkflow(action,teamDef,actionableItems,leads,changes,createdDate,createdBy,newActionListener);
    teamWfs.add(teamWf);
    changes.add(teamWf);
  }
  if (newActionListener != null) {
    newActionListener.actionCreated(action);
  }
  changes.add(action);
  return new Pair<IAtsAction,Collection<IAtsTeamWorkflow>>(action,teamWfs);
}",0.9128540305010894
97186,"public final T get() throws OseeCoreException {
  T object=instanceReference.get();
  if (object == null) {
    FutureTask<T> task;
synchronized (lock) {
      if (lastLoader != null) {
        task=lastLoader;
      }
 else {
        task=createLoaderTask();
        lastLoader=task;
        task.run();
      }
    }
    try {
      object=task.get();
      instanceReference.set(object);
    }
 catch (    Exception ex) {
      throw new OseeCoreException(ex);
    }
  }
  return object;
}","public final T get() throws OseeCoreException {
  T object=instanceReference.get();
  if (object == null) {
    FutureTask<T> task;
synchronized (lock) {
      if (lastLoader != null) {
        task=lastLoader;
      }
 else {
        task=createLoaderTask();
        lastLoader=task;
        task.run();
      }
    }
    try {
      object=task.get();
      instanceReference.set(object);
    }
 catch (    Exception ex) {
      Throwable cause=ex.getCause();
      if (cause == null) {
        cause=ex;
      }
      throw new OseeCoreException(cause);
    }
  }
  return object;
}",0.9099350046425256
97187,"@Override public ITaskEditorProvider getTaskEditorProviderCopy(){
  return new ITaskEditorProvider(){
    @Override public void setTableLoadOptions(    TableLoadOption... tableLoadOptions){
    }
    @Override public void setCustomizeData(    CustomizeData customizeData){
    }
    @Override public Collection<? extends Artifact> getTaskEditorTaskArtifacts() throws OseeCoreException {
      AtsChangeSet changes=new AtsChangeSet(getClass().getSimpleName());
      Set<TaskArtifact> arts=Collections.singleton(AtsTestUtil.getOrCreateTaskOffTeamWf1(changes));
      changes.execute();
      return arts;
    }
    @Override public String getTaskEditorLabel(    SearchType searchType){
      return ""String_Node_Str"";
    }
    @Override public Collection<TableLoadOption> getTableLoadOptions(){
      return Collections.singleton(TableLoadOption.NoUI);
    }
    @Override public String getName(){
      return ""String_Node_Str"";
    }
    @Override public ITaskEditorProvider copyProvider(){
      return null;
    }
  }
;
}","@Override public ITaskEditorProvider getTaskEditorProviderCopy(){
  return new ITaskEditorProvider(){
    @Override public void setTableLoadOptions(    TableLoadOption... tableLoadOptions){
    }
    @Override public void setCustomizeData(    CustomizeData customizeData){
    }
    @Override public Collection<? extends Artifact> getTaskEditorTaskArtifacts() throws OseeCoreException {
      AtsChangeSet changes=new AtsChangeSet(OpenNewAtsTaskEditorActionTest.class.getName());
      Set<TaskArtifact> arts=Collections.singleton(AtsTestUtil.getOrCreateTaskOffTeamWf1(changes));
      changes.execute();
      return arts;
    }
    @Override public String getTaskEditorLabel(    SearchType searchType){
      return ""String_Node_Str"";
    }
    @Override public Collection<TableLoadOption> getTableLoadOptions(){
      return Collections.singleton(TableLoadOption.NoUI);
    }
    @Override public String getName(){
      return ""String_Node_Str"";
    }
    @Override public ITaskEditorProvider copyProvider(){
      return null;
    }
  }
;
}",0.9719806763285024
97188,"@Override public Collection<? extends Artifact> getTaskEditorTaskArtifacts() throws OseeCoreException {
  AtsChangeSet changes=new AtsChangeSet(getClass().getSimpleName());
  Set<TaskArtifact> arts=Collections.singleton(AtsTestUtil.getOrCreateTaskOffTeamWf1(changes));
  changes.execute();
  return arts;
}","@Override public Collection<? extends Artifact> getTaskEditorTaskArtifacts() throws OseeCoreException {
  AtsChangeSet changes=new AtsChangeSet(OpenNewAtsTaskEditorActionTest.class.getName());
  Set<TaskArtifact> arts=Collections.singleton(AtsTestUtil.getOrCreateTaskOffTeamWf1(changes));
  changes.execute();
  return arts;
}",0.9082278481012658
97189,"@Override public Action createAction(){
  return new OpenNewAtsTaskEditorAction(new IOpenNewAtsTaskEditorHandler(){
    @Override public ITaskEditorProvider getTaskEditorProviderCopy(){
      return new ITaskEditorProvider(){
        @Override public void setTableLoadOptions(        TableLoadOption... tableLoadOptions){
        }
        @Override public void setCustomizeData(        CustomizeData customizeData){
        }
        @Override public Collection<? extends Artifact> getTaskEditorTaskArtifacts() throws OseeCoreException {
          AtsChangeSet changes=new AtsChangeSet(getClass().getSimpleName());
          Set<TaskArtifact> arts=Collections.singleton(AtsTestUtil.getOrCreateTaskOffTeamWf1(changes));
          changes.execute();
          return arts;
        }
        @Override public String getTaskEditorLabel(        SearchType searchType){
          return ""String_Node_Str"";
        }
        @Override public Collection<TableLoadOption> getTableLoadOptions(){
          return Collections.singleton(TableLoadOption.NoUI);
        }
        @Override public String getName(){
          return ""String_Node_Str"";
        }
        @Override public ITaskEditorProvider copyProvider(){
          return null;
        }
      }
;
    }
    @Override public CustomizeData getCustomizeDataCopy(){
      return null;
    }
  }
);
}","@Override public Action createAction(){
  return new OpenNewAtsTaskEditorAction(new IOpenNewAtsTaskEditorHandler(){
    @Override public ITaskEditorProvider getTaskEditorProviderCopy(){
      return new ITaskEditorProvider(){
        @Override public void setTableLoadOptions(        TableLoadOption... tableLoadOptions){
        }
        @Override public void setCustomizeData(        CustomizeData customizeData){
        }
        @Override public Collection<? extends Artifact> getTaskEditorTaskArtifacts() throws OseeCoreException {
          AtsChangeSet changes=new AtsChangeSet(OpenNewAtsTaskEditorActionTest.class.getName());
          Set<TaskArtifact> arts=Collections.singleton(AtsTestUtil.getOrCreateTaskOffTeamWf1(changes));
          changes.execute();
          return arts;
        }
        @Override public String getTaskEditorLabel(        SearchType searchType){
          return ""String_Node_Str"";
        }
        @Override public Collection<TableLoadOption> getTableLoadOptions(){
          return Collections.singleton(TableLoadOption.NoUI);
        }
        @Override public String getName(){
          return ""String_Node_Str"";
        }
        @Override public ITaskEditorProvider copyProvider(){
          return null;
        }
      }
;
    }
    @Override public CustomizeData getCustomizeDataCopy(){
      return null;
    }
  }
);
}",0.9786764705882351
97190,"/** 
 * Cleanup all artifacts and confirm that ArtifactCache has no dirty artifacts. Should be called at beginning at end of each test.
 */
public static void cleanup() throws OseeCoreException {
  WorldEditor.closeAll();
  SMAEditor.closeAll();
  TaskEditor.closeAll();
  AtsChangeSet changes=new AtsChangeSet(AtsTestUtil.class.getSimpleName() + ""String_Node_Str"");
  delete(changes,peerRevArt);
  delete(changes,decRevArt);
  delete(changes,taskArtWf1);
  delete(changes,taskArtWf2);
  delete(changes,actionArt);
  delete(changes,actionArt2);
  delete(changes,actionArt3);
  delete(changes,actionArt4);
  if (!changes.isEmpty()) {
    changes.execute();
  }
  deleteTeamWf(teamArt);
  deleteTeamWf(teamArt2);
  deleteTeamWf(teamArt3);
  deleteTeamWf(teamArt4);
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),AtsTestUtil.class.getSimpleName() + ""String_Node_Str"");
  for (  IAtsConfigObject config : Arrays.asList(teamDef,testAi,testAi2,testAi3,testAi4)) {
    if (config != null && config.getStoreObject() instanceof Artifact) {
      Artifact art=(Artifact)config.getStoreObject();
      art.deleteAndPersist(transaction);
    }
  }
  transaction.execute();
  clearCaches();
  AtsTestUtil.validateArtifactCache();
}","/** 
 * Cleanup all artifacts and confirm that ArtifactCache has no dirty artifacts. Should be called at beginning at end of each test.
 */
public static void cleanup() throws OseeCoreException {
  WorldEditor.closeAll();
  SMAEditor.closeAll();
  TaskEditor.closeAll();
  if (teamArt != null) {
    Branch workingBranch=teamArt.getWorkingBranch();
    if (workingBranch != null) {
      BranchManager.deleteBranchAndPend(workingBranch);
    }
  }
  AtsChangeSet changes=new AtsChangeSet(AtsTestUtil.class.getSimpleName() + ""String_Node_Str"");
  delete(changes,peerRevArt);
  delete(changes,decRevArt);
  delete(changes,taskArtWf1);
  delete(changes,taskArtWf2);
  delete(changes,actionArt);
  delete(changes,actionArt2);
  delete(changes,actionArt3);
  delete(changes,actionArt4);
  if (!changes.isEmpty()) {
    changes.execute();
  }
  deleteTeamWf(teamArt);
  deleteTeamWf(teamArt2);
  deleteTeamWf(teamArt3);
  deleteTeamWf(teamArt4);
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),AtsTestUtil.class.getSimpleName() + ""String_Node_Str"");
  for (  IAtsConfigObject config : Arrays.asList(teamDef,testAi,testAi2,testAi3,testAi4)) {
    if (config != null && config.getStoreObject() instanceof Artifact) {
      Artifact art=(Artifact)config.getStoreObject();
      art.deleteAndPersist(transaction);
    }
  }
  transaction.execute();
  clearCaches();
  AtsTestUtil.validateArtifactCache();
}",0.934710438952416
97191,"private static List<Integer> getCommonArtifactIds() throws OseeCoreException {
  OseeConnection connection=ConnectionHandler.getConnection();
  IOseeStatement chStmt=ConnectionHandler.getStatement(connection);
  List<Integer> artIds=new ArrayList<Integer>();
  ElapsedTime time=new ElapsedTime(""String_Node_Str"");
  try {
    chStmt.runPreparedQuery(SELECT_COMMON_ART_IDS,new Object[]{AtsUtilCore.getAtsBranch().getUuid()});
    while (chStmt.next()) {
      artIds.add(chStmt.getInt(1));
    }
  }
  finally {
    chStmt.close();
    connection.close();
  }
  time.end();
  return artIds;
}","private static List<Integer> getCommonArtifactIds(XResultData xResultData) throws OseeCoreException {
  OseeConnection connection=ConnectionHandler.getConnection();
  IOseeStatement chStmt=ConnectionHandler.getStatement(connection);
  List<Integer> artIds=new ArrayList<Integer>();
  xResultData.log(null,""String_Node_Str"" + DateUtil.getMMDDYYHHMM());
  try {
    chStmt.runPreparedQuery(SELECT_COMMON_ART_IDS,new Object[]{AtsUtilCore.getAtsBranch().getUuid()});
    while (chStmt.next()) {
      artIds.add(chStmt.getInt(1));
    }
  }
  finally {
    chStmt.close();
    connection.close();
    xResultData.log(null,""String_Node_Str"" + DateUtil.getMMDDYYHHMM());
  }
  return artIds;
}",0.8513302034428795
97192,"public static List<Collection<Integer>> loadAtsBranchArtifactIds(XResultData xResultData,IProgressMonitor monitor) throws OseeCoreException {
  if (xResultData == null) {
    xResultData=new XResultData();
  }
  xResultData.log(monitor,""String_Node_Str"" + DateUtil.getMMDDYYHHMM());
  List<Integer> artIds=getCommonArtifactIds();
  if (artIds.isEmpty()) {
    xResultData.logError(""String_Node_Str"");
  }
  xResultData.log(monitor,""String_Node_Str"" + DateUtil.getMMDDYYHHMM());
  return Collections.subDivide(artIds,4000);
}","public static List<Collection<Integer>> loadAtsBranchArtifactIds(XResultData xResultData,IProgressMonitor monitor) throws OseeCoreException {
  if (xResultData == null) {
    xResultData=new XResultData();
  }
  xResultData.log(monitor,""String_Node_Str"" + DateUtil.getMMDDYYHHMM());
  List<Integer> artIds=getCommonArtifactIds(xResultData);
  if (artIds.isEmpty()) {
    xResultData.logError(""String_Node_Str"");
  }
  xResultData.log(monitor,""String_Node_Str"" + DateUtil.getMMDDYYHHMM());
  return Collections.subDivide(artIds,4000);
}",0.9896128423040604
97193,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Artifact associatedArtifact=null;
  TransactionDelta txDelta=changeData.getTxDelta();
  if (changeData.getCompareType().areSpecificTxs()) {
    TransactionRecord txRecord=txDelta.getEndTx();
    int commitId=txRecord.getCommit();
    if (commitId != 0) {
      associatedArtifact=ArtifactQuery.getArtifactFromId(commitId,BranchManager.getCommonBranch());
    }
  }
 else {
    Branch sourceBranch=txDelta.getStartTx().getFullBranch();
    associatedArtifact=BranchManager.getAssociatedArtifact(sourceBranch);
  }
  monitor.worked(calculateWork(0.80));
  changeData.setAssociatedArtifact(associatedArtifact);
  monitor.worked(calculateWork(0.20));
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Artifact associatedArtifact=null;
  TransactionDelta txDelta=changeData.getTxDelta();
  if (changeData.getCompareType().areSpecificTxs()) {
    TransactionRecord txRecord=txDelta.getEndTx();
    int commitId=txRecord.getCommit();
    if (commitId != 0) {
      associatedArtifact=ArtifactQuery.getArtifactFromId(commitId,BranchManager.getCommonBranch());
    }
  }
 else {
    Branch sourceBranch=txDelta.getStartTx().getFullBranch();
    if (!sourceBranch.isDeleted()) {
      associatedArtifact=BranchManager.getAssociatedArtifact(sourceBranch);
    }
  }
  monitor.worked(calculateWork(0.80));
  changeData.setAssociatedArtifact(associatedArtifact);
  monitor.worked(calculateWork(0.20));
}",0.969979986657772
97194,"@Test public void testMap(){
  IRelationTypeSide relTypeSide1=create(uuid1,sideA,uuid1 + ""String_Node_Str"");
  IRelationTypeSide relTypeSide2=create(uuid1,sideB,uuid1 + ""String_Node_Str"");
  IRelationTypeSide relTypeSide3=create(uuid2,sideA,uuid2 + ""String_Node_Str"");
  IRelationTypeSide relTypeSide4=create(uuid2,sideB,uuid2 + ""String_Node_Str"");
  Map<IRelationType,String> data=new HashMap<IRelationType,String>();
  data.put(relTypeSide1,""String_Node_Str"");
  data.put(relTypeSide2,""String_Node_Str"");
  data.put(relTypeSide3,""String_Node_Str"");
  data.put(relTypeSide4,""String_Node_Str"");
  Assert.assertEquals(4,data.size());
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide1));
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide2));
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide3));
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide4));
  IRelationType relType1=TokenFactory.createRelationType(uuid1,""String_Node_Str"");
  String removed=data.put(relType1,""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",removed);
  String value=data.get(relType1);
  Assert.assertEquals(""String_Node_Str"",value);
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide1));
  Assert.assertEquals(4,data.size());
}","@Test public void testMap(){
  IRelationTypeSide relTypeSide1=create(uuid1,sideA,uuid1 + ""String_Node_Str"");
  IRelationTypeSide relTypeSide2=create(uuid1,sideB,uuid1 + ""String_Node_Str"");
  IRelationTypeSide relTypeSide3=create(uuid2,sideA,uuid2 + ""String_Node_Str"");
  IRelationTypeSide relTypeSide4=create(uuid2,sideB,uuid2 + ""String_Node_Str"");
  Map<IRelationType,String> data=new HashMap<IRelationType,String>();
  data.put(relTypeSide1,""String_Node_Str"");
  data.put(relTypeSide2,""String_Node_Str"");
  data.put(relTypeSide3,""String_Node_Str"");
  data.put(relTypeSide4,""String_Node_Str"");
  Assert.assertEquals(4,data.size());
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide1));
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide2));
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide3));
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide4));
  IRelationType relType1=create(uuid1,sideB,""String_Node_Str"");
  String removed=data.put(relType1,""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",removed);
  String value=data.get(relType1);
  Assert.assertEquals(""String_Node_Str"",value);
  Assert.assertEquals(""String_Node_Str"",data.get(relTypeSide1));
  Assert.assertEquals(4,data.size());
}",0.9845053635280095
97195,"@Test public void testMissingArguments(){
  String messageFormat=""String_Node_Str"";
  Exception ex=new OseeCoreException(messageFormat,1,0);
  Assert.assertEquals(""String_Node_Str"" + messageFormat + ""String_Node_Str"",ex.getMessage());
}","@Test public void testMissingArguments(){
  String messageFormat=""String_Node_Str"";
  Exception ex=new OseeCoreException(messageFormat,1,0);
  Assert.assertTrue(ex.getMessage(),ex.getMessage().contains(""String_Node_Str"" + messageFormat + ""String_Node_Str""));
}",0.875
97196,"public String toXml(RelationOrderData data) throws OseeArgumentException {
  if (data == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder();
  openRoot(sb);
  for (  Entry<Pair<String,String>,Pair<String,List<String>>> entry : data.entrySet()) {
    writeEntry(sb,entry);
    sb.append(""String_Node_Str"");
  }
  closeRoot(sb);
  return sb.toString();
}","public String toXml(RelationOrderData data) throws OseeArgumentException {
  if (data == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  StringBuilder sb=new StringBuilder();
  openRoot(sb);
  for (  Entry<Pair<String,String>,Pair<String,List<String>>> entry : data.getOrderedEntrySet()) {
    writeEntry(sb,entry);
    sb.append(""String_Node_Str"");
  }
  closeRoot(sb);
  return sb.toString();
}",0.9854721549636803
97197,"@Test public void testHandleRelationTypeSideMultiples() throws OseeCoreException {
  ExistsTypePredicateHandler handler=new ExistsTypePredicateHandler();
  List<String> typeParameters=Collections.singletonList(""String_Node_Str"");
  String relationValue1=""String_Node_Str"";
  String relationValue2=""String_Node_Str"";
  List<String> values=Arrays.asList(relationValue1,relationValue2);
  Predicate testPredicate=new Predicate(SearchMethod.EXISTS_TYPE,typeParameters,values);
  handler.handle(builder,testPredicate);
  verify(builder,times(2)).andExists(relationTypeCaptor.capture());
  Assert.assertEquals(2,relationTypeCaptor.getAllValues().size());
  IRelationType type=relationTypeCaptor.getAllValues().get(0);
  Assert.assertTrue(34567L == type.getGuid());
  type=relationTypeCaptor.getAllValues().get(1);
  Assert.assertTrue(12345L == type.getGuid());
}","@Test public void testHandleRelationTypeSideMultiples() throws OseeCoreException {
  ExistsTypePredicateHandler handler=new ExistsTypePredicateHandler();
  List<String> typeParameters=Collections.singletonList(""String_Node_Str"");
  String relationValue1=""String_Node_Str"";
  String relationValue2=""String_Node_Str"";
  List<String> values=Arrays.asList(relationValue1,relationValue2);
  Predicate testPredicate=new Predicate(SearchMethod.EXISTS_TYPE,typeParameters,values);
  handler.handle(builder,testPredicate);
  verify(builder,times(2)).andExists(relationTypeCaptor.capture());
  Assert.assertEquals(2,relationTypeCaptor.getAllValues().size());
  IRelationType type=relationTypeCaptor.getAllValues().get(0);
  Assert.assertTrue(12345L == type.getGuid());
  type=relationTypeCaptor.getAllValues().get(1);
  Assert.assertTrue(34567L == type.getGuid());
}",0.8878504672897196
97198,"@Test public void testHandleAttrTypeMultiple() throws OseeCoreException {
  ExistsTypePredicateHandler handler=new ExistsTypePredicateHandler();
  List<String> typeParameters=Collections.singletonList(""String_Node_Str"");
  String attrType1=""String_Node_Str"";
  String attrType2=""String_Node_Str"";
  List<String> values=Arrays.asList(attrType1,attrType2);
  Predicate testPredicate=new Predicate(SearchMethod.EXISTS_TYPE,typeParameters,values,QueryOption.TOKEN_DELIMITER__ANY);
  handler.handle(builder,testPredicate);
  verify(builder).andExists(attrTypeSideCaptor.capture());
  Assert.assertEquals(1,attrTypeSideCaptor.getAllValues().size());
  List<IAttributeType> attrTypes=new ArrayList<IAttributeType>(attrTypeSideCaptor.getValue());
  Assert.assertTrue(34567L == attrTypes.get(0).getGuid());
  Assert.assertTrue(12345L == attrTypes.get(1).getGuid());
}","@Test public void testHandleAttrTypeMultiple() throws OseeCoreException {
  ExistsTypePredicateHandler handler=new ExistsTypePredicateHandler();
  List<String> typeParameters=Collections.singletonList(""String_Node_Str"");
  String attrType1=""String_Node_Str"";
  String attrType2=""String_Node_Str"";
  List<String> values=Arrays.asList(attrType1,attrType2);
  Predicate testPredicate=new Predicate(SearchMethod.EXISTS_TYPE,typeParameters,values,QueryOption.TOKEN_DELIMITER__ANY);
  handler.handle(builder,testPredicate);
  verify(builder).andExists(attrTypeSideCaptor.capture());
  Assert.assertEquals(1,attrTypeSideCaptor.getAllValues().size());
  Iterator<IAttributeType> iterator=attrTypeSideCaptor.getValue().iterator();
  Assert.assertEquals(Long.valueOf(12345L),iterator.next().getGuid());
  Assert.assertEquals(Long.valueOf(34567L),iterator.next().getGuid());
}",0.8009286128845038
97199,"@Test public void testHandleMultiple() throws OseeCoreException {
  IsOfTypePredicateHandler handler=new IsOfTypePredicateHandler();
  String id1=""String_Node_Str"";
  String id2=""String_Node_Str"";
  List<String> values=Arrays.asList(id1,id2);
  Predicate testPredicate=new Predicate(SearchMethod.IS_OF_TYPE,null,values);
  handler.handle(builder,testPredicate);
  verify(builder).andIsOfType(artifactTypesCaptor.capture());
  Assert.assertEquals(2,artifactTypesCaptor.getValue().size());
  List<IArtifactType> types=new LinkedList<IArtifactType>(artifactTypesCaptor.getValue());
  Assert.assertEquals(id2,types.get(0).getGuid().toString());
  Assert.assertEquals(id1,types.get(1).getGuid().toString());
}","@Test public void testHandleMultiple() throws OseeCoreException {
  IsOfTypePredicateHandler handler=new IsOfTypePredicateHandler();
  String id1=""String_Node_Str"";
  String id2=""String_Node_Str"";
  Predicate testPredicate=new Predicate(SearchMethod.IS_OF_TYPE,null,Arrays.asList(id1,id2));
  handler.handle(builder,testPredicate);
  verify(builder).andIsOfType(artifactTypesCaptor.capture());
  Assert.assertEquals(2,artifactTypesCaptor.getValue().size());
  Iterator<IArtifactType> iterator=artifactTypesCaptor.getValue().iterator();
  Assert.assertEquals(id1,iterator.next().getGuid().toString());
  Assert.assertEquals(id2,iterator.next().getGuid().toString());
}",0.787746170678337
97200,"@Test public void testHandleMultiple() throws OseeCoreException {
  String id1=""String_Node_Str"";
  String id2=""String_Node_Str"";
  List<String> values=Arrays.asList(id1,id2);
  Predicate testPredicate=new Predicate(SearchMethod.TYPE_EQUALS,null,values);
  handler.handle(builder,testPredicate);
  verify(builder).andTypeEquals(artifactTypesCaptor.capture());
  assertEquals(2,artifactTypesCaptor.getValue().size());
  Iterator<IArtifactType> iterator=artifactTypesCaptor.getValue().iterator();
  assertEquals(id2,iterator.next().getGuid().toString());
  assertEquals(id1,iterator.next().getGuid().toString());
}","@Test public void testHandleMultiple() throws OseeCoreException {
  String id1=""String_Node_Str"";
  String id2=""String_Node_Str"";
  List<String> values=Arrays.asList(id1,id2);
  Predicate testPredicate=new Predicate(SearchMethod.TYPE_EQUALS,null,values);
  handler.handle(builder,testPredicate);
  verify(builder).andTypeEquals(artifactTypesCaptor.capture());
  assertEquals(2,artifactTypesCaptor.getValue().size());
  Iterator<IArtifactType> iterator=artifactTypesCaptor.getValue().iterator();
  assertEquals(id1,iterator.next().getGuid().toString());
  assertEquals(id2,iterator.next().getGuid().toString());
}",0.9052287581699346
97201,"public static Collection<IRelationType> getIRelationTypes(Collection<String> rels) throws OseeCoreException {
  Collection<IRelationType> types=new HashSet<IRelationType>();
  for (  String value : rels) {
    long longUuid=parseUuid(value);
    if (longUuid != -1L) {
      types.add(TokenFactory.createRelationType(longUuid,""String_Node_Str""));
    }
  }
  return types;
}","public static Collection<IRelationType> getIRelationTypes(Collection<String> rels) throws OseeCoreException {
  Collection<IRelationType> types=new LinkedHashSet<IRelationType>();
  for (  String value : rels) {
    long longUuid=parseUuid(value);
    if (longUuid != -1L) {
      types.add(TokenFactory.createRelationType(longUuid,""String_Node_Str""));
    }
  }
  return types;
}",0.9920424403183024
97202,"public static Collection<IAttributeType> getIAttributeTypes(Collection<String> types) throws OseeCoreException {
  Collection<IAttributeType> attrTypes=new HashSet<IAttributeType>();
  for (  String value : types) {
    long uuid=parseUuid(value);
    if (uuid != -1L) {
      attrTypes.add(TokenFactory.createAttributeType(uuid,""String_Node_Str""));
    }
  }
  return attrTypes;
}","public static Collection<IAttributeType> getIAttributeTypes(Collection<String> types) throws OseeCoreException {
  Collection<IAttributeType> attrTypes=new LinkedHashSet<IAttributeType>();
  for (  String value : types) {
    long uuid=parseUuid(value);
    if (uuid != -1L) {
      attrTypes.add(TokenFactory.createAttributeType(uuid,""String_Node_Str""));
    }
  }
  return attrTypes;
}",0.9921875
97203,"public static Collection<IArtifactType> getIArtifactTypes(Collection<String> types) throws OseeCoreException {
  Collection<IArtifactType> artTypes=new HashSet<IArtifactType>();
  for (  String value : types) {
    long uuid=parseUuid(value);
    if (uuid != -1L) {
      artTypes.add(TokenFactory.createArtifactType(uuid,""String_Node_Str""));
    }
  }
  return artTypes;
}","public static Collection<IArtifactType> getIArtifactTypes(Collection<String> types) throws OseeCoreException {
  Collection<IArtifactType> artTypes=new LinkedHashSet<IArtifactType>();
  for (  String value : types) {
    long uuid=parseUuid(value);
    if (uuid != -1L) {
      artTypes.add(TokenFactory.createArtifactType(uuid,""String_Node_Str""));
    }
  }
  return artTypes;
}",0.9920212765957448
97204,"public static Collection<IRelationTypeSide> getIRelationTypeSides(Collection<String> rels) throws OseeCoreException {
  Collection<IRelationTypeSide> relSides=new HashSet<IRelationTypeSide>();
  for (  String value : rels) {
    char sideChar=value.charAt(0);
    String uuid=value.substring(1);
    RelationSide side=RelationSide.SIDE_A;
    if (sideChar == 'B') {
      side=RelationSide.SIDE_B;
    }
    long longUuid=parseUuid(uuid);
    if (longUuid != -1L) {
      relSides.add(TokenFactory.createRelationTypeSide(side,longUuid,""String_Node_Str""));
    }
  }
  return relSides;
}","public static Collection<IRelationTypeSide> getIRelationTypeSides(Collection<String> rels) throws OseeCoreException {
  Collection<IRelationTypeSide> relSides=new LinkedHashSet<IRelationTypeSide>();
  for (  String value : rels) {
    char sideChar=value.charAt(0);
    String uuid=value.substring(1);
    RelationSide side=RelationSide.SIDE_A;
    if (sideChar == 'B') {
      side=RelationSide.SIDE_B;
    }
    long longUuid=parseUuid(uuid);
    if (longUuid != -1L) {
      relSides.add(TokenFactory.createRelationTypeSide(side,longUuid,""String_Node_Str""));
    }
  }
  return relSides;
}",0.99490662139219
97205,"@BeforeClass @AfterClass public static void testCleanup() throws Exception {
  AtsTestUtil.cleanupSimpleTest(AtsPeerToPeerReviewReviewStateItemTest.class.getSimpleName());
}","@AfterClass public static void testCleanup() throws Exception {
  AtsTestUtil.cleanup();
}",0.6844106463878327
97206,"@Before public void setUp() throws Exception {
  assertFalse(""String_Node_Str"",AtsUtil.isProductionDb());
  if (peerRevArt == null) {
    AtsChangeSet changes=new AtsChangeSet(getClass().getSimpleName());
    peerRevArt=PeerToPeerReviewManager.createNewPeerToPeerReview(AtsClientService.get().getWorkDefinitionAdmin().getDefaultPeerToPeerWorkflowDefinitionMatch().getWorkDefinition(),null,getClass().getName(),""String_Node_Str"",changes);
    peerRevArt.setName(getClass().getSimpleName());
    changes.add(peerRevArt);
    changes.execute();
  }
}","@Before public void setUp() throws Exception {
  assertFalse(""String_Node_Str"",AtsUtil.isProductionDb());
  if (peerRevArt == null) {
    AtsTestUtil.cleanupAndReset(getClass().getSimpleName());
    AtsChangeSet changes=new AtsChangeSet(getClass().getSimpleName());
    peerRevArt=AtsTestUtil.getOrCreatePeerReview(ReviewBlockType.None,AtsTestUtilState.Analyze,changes);
    changes.execute();
  }
}",0.547568710359408
97207,"public static DecisionReviewArtifact createNewDecisionReview(TeamWorkFlowArtifact teamArt,ReviewBlockType reviewBlockType,String title,String relatedToState,String description,Collection<IAtsDecisionReviewOption> options,List<? extends IAtsUser> assignees,Date createdDate,IAtsUser createdBy,IAtsChangeSet changes) throws OseeCoreException {
  DecisionReviewArtifact decRev=(DecisionReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.DecisionReview,AtsUtilCore.getAtsBranch(),title);
  decRev.initializeNewStateMachine(assignees,createdDate,createdBy,changes);
  teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,decRev);
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),decRev,decRev.getParentTeamWorkflow().getTeamDefinition(),changes);
  if (Strings.isValid(relatedToState)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,relatedToState);
  }
  if (Strings.isValid(description)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.Description,description);
  }
  decRev.setSoleAttributeValue(AtsAttributeTypes.DecisionReviewOptions,getDecisionReviewOptionsString(options));
  if (reviewBlockType != null) {
    decRev.setSoleAttributeFromString(AtsAttributeTypes.ReviewBlocks,reviewBlockType.name());
  }
  AtsReviewCache.decache(teamArt);
  changes.add(decRev);
  return decRev;
}","public static DecisionReviewArtifact createNewDecisionReview(TeamWorkFlowArtifact teamArt,ReviewBlockType reviewBlockType,String title,String relatedToState,String description,Collection<IAtsDecisionReviewOption> options,List<? extends IAtsUser> assignees,Date createdDate,IAtsUser createdBy,IAtsChangeSet changes) throws OseeCoreException {
  DecisionReviewArtifact decRev=(DecisionReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.DecisionReview,AtsUtilCore.getAtsBranch(),title);
  teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,decRev);
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),decRev,decRev.getParentTeamWorkflow().getTeamDefinition(),changes);
  decRev.initializeNewStateMachine(assignees,createdDate,createdBy,changes);
  if (Strings.isValid(relatedToState)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,relatedToState);
  }
  if (Strings.isValid(description)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.Description,description);
  }
  decRev.setSoleAttributeValue(AtsAttributeTypes.DecisionReviewOptions,getDecisionReviewOptionsString(options));
  if (reviewBlockType != null) {
    decRev.setSoleAttributeFromString(AtsAttributeTypes.ReviewBlocks,reviewBlockType.name());
  }
  AtsReviewCache.decache(teamArt);
  changes.add(decRev);
  return decRev;
}",0.8262128892107169
97208,"public static PeerToPeerReviewArtifact createNewPeerToPeerReview(IAtsWorkDefinition workDefinition,TeamWorkFlowArtifact teamArt,String reviewTitle,String againstState,Date createdDate,IAtsUser createdBy,IAtsChangeSet changes) throws OseeCoreException {
  PeerToPeerReviewArtifact peerToPeerRev=(PeerToPeerReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.PeerToPeerReview,AtsUtilCore.getAtsBranch(),reviewTitle == null ? ""String_Node_Str"" : reviewTitle);
  if (teamArt != null) {
    teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,peerToPeerRev);
  }
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.WorkflowDefinition,workDefinition.getId());
  peerToPeerRev.initializeNewStateMachine(null,new Date(),createdBy,changes);
  if (teamArt != null && againstState != null) {
    peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,againstState);
    AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),peerToPeerRev,teamArt.getParentTeamWorkflow().getTeamDefinition(),changes);
  }
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
  changes.add(peerToPeerRev);
  AtsReviewCache.decache(teamArt);
  return peerToPeerRev;
}","private static PeerToPeerReviewArtifact createNewPeerToPeerReview(IAtsWorkDefinition workDefinition,TeamWorkFlowArtifact teamArt,IAtsTeamDefinition teamDef,String reviewTitle,String againstState,Date createdDate,IAtsUser createdBy,IAtsChangeSet changes) throws OseeCoreException {
  PeerToPeerReviewArtifact peerToPeerRev=(PeerToPeerReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.PeerToPeerReview,AtsUtilCore.getAtsBranch(),reviewTitle == null ? ""String_Node_Str"" : reviewTitle);
  if (teamArt != null) {
    teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,peerToPeerRev);
  }
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),peerToPeerRev,teamDef,changes);
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.WorkflowDefinition,workDefinition.getId());
  peerToPeerRev.initializeNewStateMachine(null,new Date(),createdBy,changes);
  if (teamArt != null && againstState != null) {
    peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,againstState);
  }
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
  changes.add(peerToPeerRev);
  AtsReviewCache.decache(teamArt);
  return peerToPeerRev;
}",0.7237261146496815
97209,"public TaskArtifact createNewTask(List<? extends IAtsUser> assignees,String title,Date createdDate,IAtsUser createdBy,String relatedToState,IAtsChangeSet changes) throws OseeCoreException {
  TaskArtifact taskArt=null;
  taskArt=(TaskArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.Task,AtsUtilCore.getAtsBranch(),title);
  addRelation(AtsRelationTypes.TeamWfToTask_Task,taskArt);
  taskArt.initializeNewStateMachine(assignees,new Date(),(createdBy == null ? AtsClientService.get().getUserService().getCurrentUser() : createdBy),changes);
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),taskArt,getParentTeamWorkflow().getTeamDefinition(),changes);
  if (Strings.isValid(relatedToState)) {
    taskArt.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,relatedToState);
  }
  AtsTaskCache.decache(this);
  changes.add(taskArt);
  return taskArt;
}","public TaskArtifact createNewTask(List<? extends IAtsUser> assignees,String title,Date createdDate,IAtsUser createdBy,String relatedToState,IAtsChangeSet changes) throws OseeCoreException {
  TaskArtifact taskArt=null;
  taskArt=(TaskArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.Task,AtsUtilCore.getAtsBranch(),title);
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),taskArt,getParentTeamWorkflow().getTeamDefinition(),changes);
  addRelation(AtsRelationTypes.TeamWfToTask_Task,taskArt);
  taskArt.initializeNewStateMachine(assignees,new Date(),(createdBy == null ? AtsClientService.get().getUserService().getCurrentUser() : createdBy),changes);
  if (Strings.isValid(relatedToState)) {
    taskArt.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,relatedToState);
  }
  AtsTaskCache.decache(this);
  changes.add(taskArt);
  return taskArt;
}",0.8261826182618262
97210,"@Override public Pair<IAtsAction,Collection<IAtsTeamWorkflow>> createAction(IAtsUser user,String title,String desc,ChangeType changeType,String priority,boolean validationRequired,Date needByDate,Collection<IAtsActionableItem> actionableItems,Date createdDate,IAtsUser createdBy,INewActionListener newActionListener,IAtsChangeSet changes) throws OseeCoreException {
  Conditions.checkNotNullOrEmptyOrContainNull(actionableItems,""String_Node_Str"");
  ArtifactReadable userArt=AtsUtilServer.getArtifact(orcsApi,user);
  Conditions.checkNotNull(userArt,""String_Node_Str"");
  ArtifactReadable actionArt=(ArtifactReadable)changes.createArtifact(AtsArtifactTypes.Action,title);
  IAtsAction action=workItemFactory.getAction(actionArt);
  changes.add(action);
  setArtifactIdentifyData(action,title,desc,changeType,priority,validationRequired,needByDate,changes);
  utilService.setAtsId(sequenceProvider,action,TeamDefinitions.getTopTeamDefinition(config),changes);
  Collection<IAtsTeamDefinition> teamDefs=TeamDefinitions.getImpactedTeamDefs(actionableItems);
  if (teamDefs.isEmpty()) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    for (    IAtsActionableItem aia : actionableItems) {
      sb.append(""String_Node_Str"" + aia + ""String_Node_Str""+ aia.getGuid()+ ""String_Node_Str"");
    }
    throw new OseeStateException(sb.toString());
  }
  List<IAtsTeamWorkflow> teamWfs=new ArrayList<IAtsTeamWorkflow>();
  for (  IAtsTeamDefinition teamDef : teamDefs) {
    List<IAtsUser> leads=new LinkedList<IAtsUser>(teamDef.getLeads(actionableItems));
    IAtsTeamWorkflow teamWf=createTeamWorkflow(action,teamDef,actionableItems,leads,changes,createdDate,createdBy,newActionListener);
    teamWfs.add(teamWf);
    changes.add(teamWf);
  }
  if (newActionListener != null) {
    newActionListener.actionCreated(action);
  }
  changes.add(action);
  return new Pair<IAtsAction,Collection<IAtsTeamWorkflow>>(action,teamWfs);
}","@Override public Pair<IAtsAction,Collection<IAtsTeamWorkflow>> createAction(IAtsUser user,String title,String desc,ChangeType changeType,String priority,boolean validationRequired,Date needByDate,Collection<IAtsActionableItem> actionableItems,Date createdDate,IAtsUser createdBy,INewActionListener newActionListener,IAtsChangeSet changes) throws OseeCoreException {
  Conditions.checkNotNullOrEmptyOrContainNull(actionableItems,""String_Node_Str"");
  ArtifactReadable userArt=AtsUtilServer.getArtifact(orcsApi,user);
  Conditions.checkNotNull(userArt,""String_Node_Str"");
  ArtifactReadable actionArt=(ArtifactReadable)changes.createArtifact(AtsArtifactTypes.Action,title);
  IAtsAction action=workItemFactory.getAction(actionArt);
  utilService.setAtsId(sequenceProvider,action,TeamDefinitions.getTopTeamDefinition(config),changes);
  changes.add(action);
  setArtifactIdentifyData(action,title,desc,changeType,priority,validationRequired,needByDate,changes);
  Collection<IAtsTeamDefinition> teamDefs=TeamDefinitions.getImpactedTeamDefs(actionableItems);
  if (teamDefs.isEmpty()) {
    StringBuffer sb=new StringBuffer(""String_Node_Str"");
    for (    IAtsActionableItem aia : actionableItems) {
      sb.append(""String_Node_Str"" + aia + ""String_Node_Str""+ aia.getGuid()+ ""String_Node_Str"");
    }
    throw new OseeStateException(sb.toString());
  }
  List<IAtsTeamWorkflow> teamWfs=new ArrayList<IAtsTeamWorkflow>();
  for (  IAtsTeamDefinition teamDef : teamDefs) {
    List<IAtsUser> leads=new LinkedList<IAtsUser>(teamDef.getLeads(actionableItems));
    IAtsTeamWorkflow teamWf=createTeamWorkflow(action,teamDef,actionableItems,leads,changes,createdDate,createdBy,newActionListener);
    teamWfs.add(teamWf);
    changes.add(teamWf);
  }
  if (newActionListener != null) {
    newActionListener.actionCreated(action);
  }
  changes.add(action);
  return new Pair<IAtsAction,Collection<IAtsTeamWorkflow>>(action,teamWfs);
}",0.9470954356846472
97211,"public static GoalArtifact createGoal(String title,IAtsChangeSet changes) throws OseeCoreException {
  GoalArtifact goalArt=(GoalArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.Goal,AtsUtilCore.getAtsBranch(),title);
  goalArt.initializeNewStateMachine(Arrays.asList(AtsClientService.get().getUserService().getCurrentUser()),new Date(),AtsClientService.get().getUserService().getCurrentUser(),changes);
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),goalArt,TeamDefinitions.getTopTeamDefinition(AtsClientService.get().getConfig()),changes);
  changes.add(goalArt);
  return goalArt;
}","public static GoalArtifact createGoal(String title,IAtsChangeSet changes) throws OseeCoreException {
  GoalArtifact goalArt=(GoalArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.Goal,AtsUtilCore.getAtsBranch(),title);
  AtsClientService.get().getUtilService().setAtsId(AtsClientService.get().getSequenceProvider(),goalArt,TeamDefinitions.getTopTeamDefinition(AtsClientService.get().getConfig()),changes);
  goalArt.initializeNewStateMachine(Arrays.asList(AtsClientService.get().getUserService().getCurrentUser()),new Date(),AtsClientService.get().getUserService().getCurrentUser(),changes);
  changes.add(goalArt);
  return goalArt;
}",0.5536547433903577
97212,"private void testArtifactIds(Collection<Artifact> artifacts){
  Date date=new Date();
  for (  Artifact artifact : artifacts) {
    try {
      if (artifact.isDeleted()) {
        continue;
      }
      if (artifact.isOfType(AtsArtifactTypes.TeamWorkflow)) {
        TeamWorkFlowArtifact teamWf=(TeamWorkFlowArtifact)artifact;
        String legacyPcrId=artifact.getSoleAttributeValueAsString(AtsAttributeTypes.LegacyPcrId,null);
        if (legacyPcrId != null) {
          String parentActionId=teamWf.getParentActionArtifact().getAtsId();
          String storedParentActionId=legacyPcrIdToParentId.get(legacyPcrId);
          if (storedParentActionId != null) {
            if (!storedParentActionId.equals(parentActionId)) {
              String errorStr=String.format(""String_Node_Str"",legacyPcrId,teamWf.toStringWithId(),parentActionId,storedParentActionId);
              results.log(artifact,""String_Node_Str"",errorStr);
            }
          }
 else {
            legacyPcrIdToParentId.put(legacyPcrId,parentActionId);
          }
        }
      }
    }
 catch (    Exception ex) {
      results.log(artifact,""String_Node_Str"",""String_Node_Str"" + artifact.getArtifactTypeName() + ""String_Node_Str""+ ex.getLocalizedMessage());
    }
  }
  results.logTestTimeSpent(date,""String_Node_Str"");
}","private void testArtifactIds(Collection<Artifact> artifacts){
  Date date=new Date();
  for (  Artifact artifact : artifacts) {
    try {
      if (artifact.isDeleted()) {
        continue;
      }
      if (artifact.isOfType(AtsArtifactTypes.TeamWorkflow)) {
        TeamWorkFlowArtifact teamWf=(TeamWorkFlowArtifact)artifact;
        String legacyPcrId=artifact.getSoleAttributeValueAsString(AtsAttributeTypes.LegacyPcrId,null);
        if (legacyPcrId != null) {
          String parentActionId=teamWf.getParentActionArtifact().getAtsId();
          String storedParentActionId=legacyPcrIdToParentId.get(legacyPcrId);
          if (storedParentActionId != null) {
            if (!storedParentActionId.equals(parentActionId)) {
              String errorStr=String.format(""String_Node_Str"",legacyPcrId,teamWf.toStringWithId(),parentActionId,storedParentActionId);
              results.log(artifact,""String_Node_Str"",errorStr);
            }
          }
 else {
            legacyPcrIdToParentId.put(legacyPcrId,parentActionId);
          }
        }
      }
      if (artifact instanceof IAtsWorkItem) {
        if (artifact.getSoleAttributeValue(AtsAttributeTypes.AtsId,null) == null) {
          String errorStr=String.format(""String_Node_Str"",artifact.toStringWithId());
          results.log(artifact,""String_Node_Str"",errorStr);
        }
      }
    }
 catch (    Exception ex) {
      results.log(artifact,""String_Node_Str"",""String_Node_Str"" + artifact.getArtifactTypeName() + ""String_Node_Str""+ ex.getLocalizedMessage());
    }
  }
  results.logTestTimeSpent(date,""String_Node_Str"");
}",0.8986206896551724
97213,"private void checkPrimeItemDiagram(RoughArtifact artifact){
  List<String> actualTypes=new ArrayList<String>(artifact.getAttributeTypeNames());
  assertEquals(""String_Node_Str"",ATTRIBUTE_TYPE_LIST.length,actualTypes.size());
  for (int index=0; index < ATTRIBUTE_TYPE_LIST.length; index++) {
    String expectedTypeName=ATTRIBUTE_TYPE_LIST[index];
    String typeName=actualTypes.get(index);
    assertEquals(""String_Node_Str"",expectedTypeName,typeName);
    if (IMAGE_CONTENT.equals(typeName)) {
      Collection<URI> theURIs=artifact.getURIAttributes();
      assertEquals(""String_Node_Str"",2,theURIs.size());
      Iterator<URI> iter=theURIs.iterator();
      URI uri1=iter.next();
      URI uri2=iter.next();
      assertEquals(""String_Node_Str"",THIS_IS_A_JPEG_IMAGE_JPG,getName(uri1));
      assertEquals(""String_Node_Str"",THIS_IS_A_PNG_IMAGE_PNG,getName(uri2));
    }
  }
}","private void checkPrimeItemDiagram(RoughArtifact artifact){
  Set<String> attributeTypeNames=artifact.getAttributeTypeNames();
  assertEquals(""String_Node_Str"",ATTRIBUTE_TYPE_LIST.length,attributeTypeNames.size());
  Iterator<String> iterator=attributeTypeNames.iterator();
  for (  String expectedTypeName : ATTRIBUTE_TYPE_LIST) {
    String typeName=iterator.next();
    assertEquals(""String_Node_Str"",expectedTypeName,typeName);
    if (IMAGE_CONTENT.equals(typeName)) {
      Collection<URI> theURIs=artifact.getURIAttributes();
      assertEquals(""String_Node_Str"",2,theURIs.size());
      Iterator<URI> iter=theURIs.iterator();
      URI uri1=iter.next();
      URI uri2=iter.next();
      assertEquals(""String_Node_Str"",THIS_IS_A_JPEG_IMAGE_JPG,getName(uri1));
      assertEquals(""String_Node_Str"",THIS_IS_A_PNG_IMAGE_PNG,getName(uri2));
    }
  }
}",0.7619596541786744
97214,"public Set<String> getAttributeTypeNames(){
  Set<String> typeNames=new HashSet<String>();
  for (  CharSequence attrTypeName : attributes.keySet()) {
    typeNames.add(attrTypeName.toString());
  }
  return typeNames;
}","public Set<String> getAttributeTypeNames(){
  Set<String> typeNames=new LinkedHashSet<String>();
  for (  CharSequence attrTypeName : attributes.keySet()) {
    typeNames.add(attrTypeName.toString());
  }
  return typeNames;
}",0.9865470852017936
97215,"protected void addToCompare(IProgressMonitor monitor,CompareData data,PresentationType presentationType,ArtifactDelta artifactDelta) throws OseeCoreException {
  Pair<String,Boolean> originalValue=null;
  Artifact baseArtifact=artifactDelta.getStartArtifact();
  Artifact newerArtifact=artifactDelta.getEndArtifact();
  Attribute<String> baseContent=getWordContent(baseArtifact);
  Attribute<String> newerContent=getWordContent(newerArtifact);
  if (!UserManager.getBooleanSetting(MsWordPreferencePage.IDENTFY_IMAGE_CHANGES)) {
    originalValue=WordImageChecker.checkForImageDiffs(baseContent,newerContent);
  }
  monitor.setTaskName(""String_Node_Str"" + (newerArtifact == null ? baseArtifact.getName() : newerArtifact.getName()));
  Pair<IFile,IFile> compareFiles;
  if (artifactDelta.getStartArtifact() == artifactDelta.getBaseArtifact()) {
    compareFiles=converter.convertToFile(presentationType,artifactDelta);
  }
 else {
    List<IFile> outputFiles=new ArrayList<IFile>();
    converter.convertToFileForMerge(outputFiles,artifactDelta.getBaseArtifact(),artifactDelta.getStartArtifact());
    converter.convertToFileForMerge(outputFiles,artifactDelta.getBaseArtifact(),artifactDelta.getEndArtifact());
    compareFiles=new Pair<IFile,IFile>(outputFiles.get(0),outputFiles.get(1));
    data.addMerge(outputFiles.get(0).getLocation().toOSString());
  }
  WordImageChecker.restoreOriginalValue(baseContent,originalValue);
  data.add(compareFiles.getFirst().getLocation().toOSString(),compareFiles.getSecond().getLocation().toOSString());
}","protected void addToCompare(IProgressMonitor monitor,CompareData data,PresentationType presentationType,ArtifactDelta artifactDelta) throws OseeCoreException {
  Pair<String,Boolean> originalValue=null;
  Artifact baseArtifact=artifactDelta.getStartArtifact();
  Artifact newerArtifact=artifactDelta.getEndArtifact();
  Attribute<String> baseContent=getWordContent(baseArtifact);
  Attribute<String> newerContent=getWordContent(newerArtifact);
  if (!UserManager.getBooleanSetting(MsWordPreferencePage.IDENTFY_IMAGE_CHANGES)) {
    originalValue=WordImageChecker.checkForImageDiffs(baseContent,newerContent);
  }
  monitor.setTaskName(""String_Node_Str"" + (newerArtifact == null ? baseArtifact.getName() : newerArtifact.getName()));
  Pair<IFile,IFile> compareFiles;
  if (artifactDelta.getStartArtifact() == artifactDelta.getBaseArtifact()) {
    compareFiles=converter.convertToFile(presentationType,artifactDelta);
  }
 else {
    List<IFile> outputFiles=new ArrayList<IFile>();
    converter.convertToFileForMerge(outputFiles,artifactDelta.getBaseArtifact(),artifactDelta.getStartArtifact());
    converter.convertToFileForMerge(outputFiles,artifactDelta.getBaseArtifact(),artifactDelta.getEndArtifact());
    if (outputFiles.size() == 1) {
      String outputFileName=outputFiles.get(0).getRawLocation().toOSString();
      try {
        String tempFileName=Lib.removeExtension(outputFileName);
        File tempFile=new File(tempFileName + ""String_Node_Str"");
        Lib.writeStringToFile(""String_Node_Str"",tempFile);
        IFile constructIFile=AIFile.constructIFile(tempFile.getPath());
        outputFiles.add(constructIFile);
      }
 catch (      IOException ex) {
        throw new OseeCoreException(ex,""String_Node_Str"",outputFileName);
      }
    }
    compareFiles=new Pair<IFile,IFile>(outputFiles.get(0),outputFiles.get(1));
    data.addMerge(outputFiles.get(0).getLocation().toOSString());
  }
  WordImageChecker.restoreOriginalValue(baseContent,originalValue);
  data.add(compareFiles.getFirst().getLocation().toOSString(),compareFiles.getSecond().getLocation().toOSString());
}",0.8473366282262493
97216,"public void add(Object value){
  returnValue=value.toString();
}","public void add(Object value){
  returnValue=value == null ? ""String_Node_Str"" : value.toString();
}",0.7804878048780488
97217,"@Override public void toXml(XMLStreamWriter writer) throws XMLStreamException {
  String toLog=returnValue != null ? XmlSupport.format(returnValue) : ""String_Node_Str"";
  XMLStreamWriterUtil.writeElement(writer,""String_Node_Str"",toLog);
}","@Override public void toXml(XMLStreamWriter writer) throws XMLStreamException {
  if (returnValue != null) {
    XMLStreamWriterUtil.writeElement(writer,""String_Node_Str"",XmlSupport.format(returnValue));
  }
}",0.5548098434004475
97218,"/** 
 * <p> Sets the element's value. Can be [ab]used to set subsequent, contiguous bytes but, while widespread, this use is discouraged and may be removed in a future release. The behavior of this method differs depending on the length of string passed in and whether the underlying element is eight bits. </p> <p> For an empty string it sets the element to the null character, '\0', using   {@link #setValue(Character)}, which properly accounts for cases where the element is not eight bits. </p> <p> If the string has a length of one it calls   {@link #setValue(Character)} with value.charAt(0).</p> <p> If the string length is greater than one it will assume this and all subsequent elements are eight bits and set them. <b>Note</b> that it does nothing to ensure the subsequent bytes are character elements or eight bits. It will throw IllegalArgumentException if setting subsequent elements would overflow. If the element is not eight bits in size it will set as above and log a warning and stack trace but not throw an exception. </p>
 * @param accessor
 * @param value the string to set the bytes to
 */
@Override public void parseAndSet(ITestEnvironmentAccessor accessor,String value){
  if (value.length() + this.getByteOffset() > this.getMessage().getData().length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (accessor != null) {
    accessor.getLogger().methodCalledOnObject(accessor,this.getFullName(),new MethodFormatter().add(value),this.getMessage());
  }
switch (value.length()) {
case 0:
    setValue('\0');
  break;
case 1:
setValue(value.charAt(0));
break;
default :
if (!(lsb == 7 && msb == 0)) {
OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"" + Arrays.toString(Thread.currentThread().getStackTrace()));
}
setASCIIString(value);
break;
}
if (accessor != null) {
accessor.getLogger().methodEnded(accessor);
}
}","/** 
 * <p> Sets the element's value. Can be [ab]used to set subsequent, contiguous bytes but, while widespread, this use is discouraged and may be removed in a future release. The behavior of this method differs depending on the length of string passed in and whether the underlying element is eight bits. </p> <p> For an empty string it sets the element to the null character, '\0', using   {@link #setValue(Character)}, which properly accounts for cases where the element is not eight bits. </p> <p> If the string has a length of one it calls   {@link #setValue(Character)} with value.charAt(0).</p> <p> If the string length is greater than one it will assume this and all subsequent elements are eight bits and set them. <b>Note</b> that it does nothing to ensure the subsequent bytes are character elements or eight bits. It will throw IllegalArgumentException if setting subsequent elements would overflow. If the element is not eight bits in size it will set as above and log a warning and stack trace but not throw an exception. </p>
 * @param accessor
 * @param value the string to set the bytes to
 */
@Override public void parseAndSet(ITestEnvironmentAccessor accessor,String value){
  if (value.length() + this.getByteOffset() > this.getMessage().getData().length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (accessor != null) {
    accessor.getLogger().methodCalledOnObject(accessor,this.getFullName(),new MethodFormatter().add(value),this.getMessage());
  }
switch (value.length()) {
case 0:
    setValue('\0');
  break;
case 1:
setValue(value.charAt(0));
break;
default :
setASCIIString(value);
break;
}
if (accessor != null) {
accessor.getLogger().methodEnded(accessor);
}
}",0.9589500139625804
97219,"/** 
 * gets this element's current value. Does logging
 */
public T get(ITestEnvironmentAccessor accessor){
  accessor.getLogger().methodCalled(accessor,new MethodFormatter());
  T v=getValue();
  ReturnFormatter returnFormatter=new ReturnFormatter();
  returnFormatter.add(v);
  accessor.getLogger().methodEnded(accessor,returnFormatter);
  return v;
}","/** 
 * gets this element's current value. Does logging
 */
public T get(ITestEnvironmentAccessor accessor){
  if (accessor != null) {
    accessor.getLogger().methodCalledOnObject(accessor,this.getFullName(),new MethodFormatter(),getMessage());
  }
  T v=getValue();
  ReturnFormatter returnFormatter=new ReturnFormatter();
  returnFormatter.add(v);
  if (accessor != null) {
    accessor.getLogger().methodEnded(accessor,returnFormatter);
  }
  return v;
}",0.8669950738916257
97220,"private CancelledByColumn(){
  super(WorldXViewerFactory.COLUMN_NAMESPACE + ""String_Node_Str"",""String_Node_Str"",80,SWT.LEFT,false,SortDataType.Date,false,""String_Node_Str"");
}","private CancelledByColumn(){
  super(WorldXViewerFactory.COLUMN_NAMESPACE + ""String_Node_Str"",""String_Node_Str"",80,SWT.LEFT,false,SortDataType.String,false,""String_Node_Str"");
}",0.9772727272727272
97221,"private CompletedByColumn(){
  super(WorldXViewerFactory.COLUMN_NAMESPACE + ""String_Node_Str"",""String_Node_Str"",80,SWT.LEFT,false,SortDataType.Date,false,""String_Node_Str"");
}","private CompletedByColumn(){
  super(WorldXViewerFactory.COLUMN_NAMESPACE + ""String_Node_Str"",""String_Node_Str"",80,SWT.LEFT,false,SortDataType.String,false,""String_Node_Str"");
}",0.9772727272727272
97222,"/** 
 * @return Html representation of branche(s) that match UUID. Although it's not expected, no exception thrown ifmultiple branches found.
 */
@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  BranchQuery query=OrcsApplication.getOrcsApi().getQueryFactory(null).branchQuery();
  ResultSet<BranchReadable> results=query.andUuids(branchUuid).getResults();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(results);
}","/** 
 * @return Html representation of branche(s) that match UUID. Although it's not expected, no exception thrown ifmultiple branches found.
 */
@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  BranchQuery query=orcsApi.getQueryFactory(null).branchQuery();
  ResultSet<BranchReadable> results=query.andUuids(branchUuid).getResults();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(results);
}",0.9732047159699893
97223,"@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  BranchQuery query=orcsApi.getQueryFactory(null).branchQuery();
  ResultSet<BranchReadable> results=query.andIsOfType(BranchType.BASELINE,BranchType.WORKING).getResults();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(results);
}","@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  BranchQuery query=OrcsApplication.getOrcsApi().getQueryFactory(null).branchQuery();
  ResultSet<BranchReadable> results=query.andIsOfType(BranchType.BASELINE,BranchType.WORKING).getResults();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(results);
}",0.9644381223328592
97224,"@Path(""String_Node_Str"") public BranchResource getBranch(@PathParam(""String_Node_Str"") Long id){
  this.orcsApi=OrcsApplication.getOrcsApi();
  return new BranchResource(uriInfo,request,id,orcsApi);
}","@Path(""String_Node_Str"") public BranchResource getBranch(@PathParam(""String_Node_Str"") Long id){
  return new BranchResource(uriInfo,request,id,OrcsApplication.getOrcsApi());
}",0.824468085106383
97225,"@GET @Produces(MediaType.TEXT_HTML) public String getAsHtml() throws OseeCoreException {
  QueryFactory queryFactory=OrcsApplication.getOrcsApi().getQueryFactory(null);
  BranchQuery query=queryFactory.branchQuery();
  ResultSet<BranchReadable> results=query.andUuids(branchUuid).getResults();
  BranchReadable branch=results.getExactlyOne();
  TransactionQuery query1=queryFactory.transactionQuery();
  TransactionReadable headTransaction=query1.andIsHead(branch).getResults().getExactlyOne();
  TransactionQuery query2=queryFactory.transactionQuery();
  TransactionReadable baseTransaction=query2.andTxId(branch.getBaseTransaction()).getResults().getExactlyOne();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(Arrays.asList(baseTransaction,headTransaction));
}","@Path(""String_Node_Str"") @GET @Produces(MediaType.TEXT_HTML) public String getAsHtml(@PathParam(""String_Node_Str"") int txId) throws OseeCoreException {
  QueryFactory queryFactory=OrcsApplication.getOrcsApi().getQueryFactory(null);
  TransactionQuery query2=queryFactory.transactionQuery();
  TransactionReadable baseTransaction=query2.andTxId(txId).getResults().getExactlyOne();
  HtmlWriter writer=new HtmlWriter(uriInfo);
  return writer.toHtml(Collections.singleton(baseTransaction));
}",0.631083202511774
97226,"public static Set<DecisionOption> getDecisionOptions(String decisionOptions){
  Set<DecisionOption> decOptions=new HashSet<DecisionOption>();
  for (  String decsionOpt : decisionOptions.split(""String_Node_Str"")) {
    DecisionOption state=new DecisionOption();
    Result result=state.setFromXml(decsionOpt);
    if (result.isFalse()) {
      OseeLog.log(Activator.class,Level.SEVERE,result.getText());
    }
 else {
      decOptions.add(state);
    }
  }
  return decOptions;
}","public static Set<DecisionOption> getDecisionOptions(String decisionOptions){
  Set<DecisionOption> decOptions=new LinkedHashSet<DecisionOption>();
  for (  String decsionOpt : decisionOptions.split(""String_Node_Str"")) {
    DecisionOption state=new DecisionOption();
    Result result=state.setFromXml(decsionOpt);
    if (result.isFalse()) {
      OseeLog.log(Activator.class,Level.SEVERE,result.getText());
    }
 else {
      decOptions.add(state);
    }
  }
  return decOptions;
}",0.9937759336099584
97227,"@Override public void handleColumnMultiEdit(TreeColumn treeColumn,Collection<TreeItem> treeItems){
  Set<AbstractWorkflowArtifact> awas=new HashSet<AbstractWorkflowArtifact>();
  for (  TreeItem item : treeItems) {
    Artifact art=(Artifact)item.getData();
    try {
      if (art instanceof AbstractWorkflowArtifact && art.isAttributeTypeValid(getAttributeType())) {
        awas.add((AbstractWorkflowArtifact)art);
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  if (awas.isEmpty()) {
    AWorkbench.popup(""String_Node_Str"",String.format(""String_Node_Str"",getAttributeType()));
    return;
  }
  PromptChangeUtil.promptChangeAttribute(awas,getAttributeType(),isPersistViewer(getXViewer()),isMultiLineStringAttribute());
  getXViewer().update(awas.toArray(),null);
}","@Override public void handleColumnMultiEdit(TreeColumn treeColumn,Collection<TreeItem> treeItems){
  Set<AbstractWorkflowArtifact> awas=new LinkedHashSet<AbstractWorkflowArtifact>();
  for (  TreeItem item : treeItems) {
    Artifact art=(Artifact)item.getData();
    try {
      if (art instanceof AbstractWorkflowArtifact && art.isAttributeTypeValid(getAttributeType())) {
        awas.add((AbstractWorkflowArtifact)art);
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  if (awas.isEmpty()) {
    AWorkbench.popup(""String_Node_Str"",String.format(""String_Node_Str"",getAttributeType()));
    return;
  }
  PromptChangeUtil.promptChangeAttribute(awas,getAttributeType(),isPersistViewer(getXViewer()),isMultiLineStringAttribute());
  getXViewer().update(awas.toArray(),null);
}",0.996415770609319
97228,"@Override public String getColumnText(Object element,XViewerColumn column,int columnIndex){
  try {
    if (element instanceof AbstractWorkflowArtifact) {
      return ((AbstractWorkflowArtifact)element).getAttributesToStringUnique(getAttributeType(),""String_Node_Str"");
    }
    if (Artifacts.isOfType(element,AtsArtifactTypes.Action)) {
      Set<String> strs=new HashSet<String>();
      for (      TeamWorkFlowArtifact team : ActionManager.getTeams(element)) {
        String str=getColumnText(team,column,columnIndex);
        if (Strings.isValid(str)) {
          strs.add(str);
        }
      }
      return Collections.toString(""String_Node_Str"",strs);
    }
  }
 catch (  Exception ex) {
    return LogUtil.getCellExceptionString(ex);
  }
  return null;
}","@Override public String getColumnText(Object element,XViewerColumn column,int columnIndex){
  try {
    if (element instanceof AbstractWorkflowArtifact) {
      return ((AbstractWorkflowArtifact)element).getAttributesToStringUnique(getAttributeType(),""String_Node_Str"");
    }
    if (Artifacts.isOfType(element,AtsArtifactTypes.Action)) {
      Set<String> strs=new LinkedHashSet<String>();
      for (      TeamWorkFlowArtifact team : ActionManager.getTeams(element)) {
        String str=getColumnText(team,column,columnIndex);
        if (Strings.isValid(str)) {
          strs.add(str);
        }
      }
      return Collections.toString(""String_Node_Str"",strs);
    }
  }
 catch (  Exception ex) {
    return LogUtil.getCellExceptionString(ex);
  }
  return null;
}",0.9960988296488946
97229,"@Override protected BranchReadable innerCall() throws Exception {
  Conditions.checkNotNull(branchData,""String_Node_Str"");
  Conditions.checkNotNull(branchData.getUuid(),""String_Node_Str"");
  Conditions.checkNotNull(branchData.getName(),""String_Node_Str"");
  Conditions.checkNotNull(branchData.getBranchType(),""String_Node_Str"");
  ITransaction txData=branchData.getFromTransaction();
  Conditions.checkNotNull(txData,""String_Node_Str"");
  Callable<?> callable;
  if (branchData.isTxCopyBranchType()) {
    callable=getBranchStore().createBranchCopyTx(getSession(),branchData);
  }
 else {
    callable=getBranchStore().createBranch(getSession(),branchData);
  }
  callAndCheckForCancel(callable);
  return queryFactory.branchQuery().andUuids(branchData.getUuid()).getResults().getExactlyOne();
}","@Override protected BranchReadable innerCall() throws Exception {
  Conditions.checkNotNull(branchData,""String_Node_Str"");
  Conditions.checkNotNull(branchData.getUuid(),""String_Node_Str"");
  Conditions.checkNotNull(branchData.getName(),""String_Node_Str"");
  Conditions.checkNotNull(branchData.getBranchType(),""String_Node_Str"");
  ITransaction txData=branchData.getFromTransaction();
  Conditions.checkNotNull(txData,""String_Node_Str"");
  Callable<?> callable;
  if (branchData.isTxCopyBranchType()) {
    TransactionQuery txQuery=queryFactory.transactionQuery();
    ITransaction givenTx=branchData.getFromTransaction();
    Conditions.checkNotNull(givenTx,""String_Node_Str"");
    branchData.setSavedTransaction(givenTx);
    TransactionReadable priorTx=txQuery.andIsPriorTx(givenTx.getGuid()).getResults().getExactlyOne();
    branchData.setFromTransaction(priorTx);
    callable=getBranchStore().createBranchCopyTx(getSession(),branchData);
  }
 else {
    callable=getBranchStore().createBranch(getSession(),branchData);
  }
  callAndCheckForCancel(callable);
  return queryFactory.branchQuery().andUuids(branchData.getUuid()).getResults().getExactlyOne();
}",0.8126595201633486
97230,"@SuppressWarnings(""String_Node_Str"") @Override public Void handleTxWork(OseeConnection connection) throws OseeCoreException {
  int sourceTx=branchData.getFromTransaction().getGuid();
  int priorTransactionId=getDatabaseService().runPreparedQueryFetchObject(-1,GET_PRIOR_TRANSACTION,branchData.getUuid(),sourceTx);
  ITransaction priorTx=TokenFactory.createTransaction(priorTransactionId);
  branchData.setFromTransaction(priorTx);
  Callable<Void> callable=new CreateBranchDatabaseTxCallable(getLogger(),getSession(),getDatabaseService(),branchData);
  try {
    callable.call();
    Timestamp timestamp=GlobalTime.GreenwichMeanTimestamp();
    int nextTransactionId=getDatabaseService().getSequence().getNextTransactionId();
    String creationComment=branchData.getCreationComment() + ""String_Node_Str"" + sourceTx;
    getDatabaseService().runPreparedUpdate(connection,INSERT_TX_DETAILS,branchData.getUuid(),nextTransactionId,creationComment,timestamp,branchData.getUserArtifactId(),TransactionDetailsType.NonBaselined.getId());
    populateTransaction(0.30,connection,nextTransactionId,branchData.getParentBranchUuid(),sourceTx);
    UpdatePreviousTxCurrent updater=new UpdatePreviousTxCurrent(getDatabaseService(),connection,branchData.getUuid());
    updater.updateTxNotCurrentsFromTx(nextTransactionId);
  }
 catch (  Exception ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public Void handleTxWork(OseeConnection connection) throws OseeCoreException {
  Callable<Void> callable=new CreateBranchDatabaseTxCallable(getLogger(),getSession(),getDatabaseService(),branchData);
  try {
    callable.call();
    Timestamp timestamp=GlobalTime.GreenwichMeanTimestamp();
    int nextTransactionId=getDatabaseService().getSequence().getNextTransactionId();
    String creationComment=branchData.getCreationComment();
    getDatabaseService().runPreparedUpdate(connection,INSERT_TX_DETAILS,branchData.getUuid(),nextTransactionId,creationComment,timestamp,branchData.getUserArtifactId(),TransactionDetailsType.NonBaselined.getId());
    populateTransaction(0.30,connection,nextTransactionId,branchData.getParentBranchUuid(),branchData.getSavedTransaction().getGuid());
    UpdatePreviousTxCurrent updater=new UpdatePreviousTxCurrent(getDatabaseService(),connection,branchData.getUuid());
    updater.updateTxNotCurrentsFromTx(nextTransactionId);
  }
 catch (  Exception ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
  return null;
}",0.8447653429602888
97231,"public static PeerToPeerReviewArtifact getOrCreatePeerReview(ReviewBlockType reviewBlockType,AtsTestUtilState relatedToState,IAtsChangeSet changes) throws OseeCoreException {
  ensureLoaded();
  try {
    if (peerRevArt == null) {
      peerRevArt=PeerToPeerReviewManager.createNewPeerToPeerReview(AtsClientService.get().getWorkDefinitionAdmin().getDefaultPeerToPeerWorkflowDefinitionMatch().getWorkDefinition(),teamArt,AtsTestUtil.class.getSimpleName() + ""String_Node_Str"",relatedToState.getName(),changes);
    }
  }
 catch (  OseeCoreException ex) {
    throw new OseeWrappedException(ex);
  }
  return peerRevArt;
}","public static PeerToPeerReviewArtifact getOrCreatePeerReview(ReviewBlockType reviewBlockType,AtsTestUtilState relatedToState,IAtsChangeSet changes) throws OseeCoreException {
  ensureLoaded();
  try {
    if (peerRevArt == null) {
      peerRevArt=PeerToPeerReviewManager.createNewPeerToPeerReview(AtsClientService.get().getWorkDefinitionAdmin().getDefaultPeerToPeerWorkflowDefinitionMatch().getWorkDefinition(),teamArt,AtsTestUtil.class.getSimpleName() + ""String_Node_Str"",relatedToState.getName(),changes);
      peerRevArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,reviewBlockType.name());
    }
  }
 catch (  OseeCoreException ex) {
    throw new OseeWrappedException(ex);
  }
  return peerRevArt;
}",0.9287321830457614
97232,"private void validateReviewsCancelled(TransitionResults results,IAtsWorkItem workItem,IAtsStateDefinition toStateDef) throws OseeCoreException {
  if (workItem.isTeamWorkflow() && toStateDef.getStateType().isCancelledState()) {
    for (    IAtsAbstractReview review : reviewService.getReviewsFromCurrentState((IAtsTeamWorkflow)workItem)) {
      if (reviewService.getReviewBlockType(review) == ReviewBlockType.Transition && !workItem.getStateMgr().getStateType().isCompletedOrCancelled()) {
        results.addResult(workItem,TransitionResult.CANCEL_REVIEWS_BEFORE_CANCEL);
        break;
      }
    }
  }
}","private void validateReviewsCancelled(TransitionResults results,IAtsWorkItem workItem,IAtsStateDefinition toStateDef) throws OseeCoreException {
  if (workItem.isTeamWorkflow() && toStateDef.getStateType().isCancelledState()) {
    for (    IAtsAbstractReview review : reviewService.getReviewsFromCurrentState((IAtsTeamWorkflow)workItem)) {
      ReviewBlockType reviewBlockType=reviewService.getReviewBlockType(review);
      boolean completedOrCancelled=review.getStateMgr().getStateType().isCompletedOrCancelled();
      if (reviewBlockType == ReviewBlockType.Transition && !completedOrCancelled) {
        results.addResult(workItem,TransitionResult.CANCEL_REVIEWS_BEFORE_CANCEL);
        break;
      }
    }
  }
}",0.8147590361445783
97233,"@Override public void doWork() throws Exception {
  URI targetUri=UriBuilder.fromUri(uri).path(""String_Node_Str"").path(""String_Node_Str"").queryParam(""String_Node_Str"",filePath).build();
  Response response=factory.target(targetUri).request(MediaType.APPLICATION_JSON).get();
  if (response.getStatus() == Status.OK.getStatusCode()) {
    InputStream is=(InputStream)response.getEntity();
    FileOutputStream fos=new FileOutputStream(destination);
    try {
      Lib.inputStreamToOutputStream(is,fos);
    }
  finally {
      Lib.close(fos);
    }
  }
 else {
    throw new Exception(response.toString());
  }
}","@Override public void doWork() throws Exception {
  URI targetUri=UriBuilder.fromUri(uri).path(""String_Node_Str"").path(""String_Node_Str"").queryParam(""String_Node_Str"",filePath).build();
  Response response=factory.target(targetUri).request(MediaType.APPLICATION_XML).get();
  if (response.getStatus() == Status.OK.getStatusCode()) {
    InputStream is=(InputStream)response.getEntity();
    FileOutputStream fos=new FileOutputStream(destination);
    try {
      Lib.inputStreamToOutputStream(is,fos);
    }
  finally {
      Lib.close(fos);
    }
  }
 else {
    throw new Exception(response.toString());
  }
}",0.9942763695829926
97234,"@GET @Produces(MediaType.APPLICATION_XML) public StreamingOutput getFile(@QueryParam(""String_Node_Str"") String path) throws OseeCoreException {
  final String myPath=path;
  return new StreamingOutput(){
    public void write(    OutputStream output) throws IOException, WebApplicationException {
      try {
        File file=new File(myPath);
        InputStream is=new FileInputStream(file);
        byte[] bytes=new byte[2048];
        int numRead=0;
        while ((numRead=is.read(bytes)) != -1) {
          output.write(bytes,0,numRead);
        }
        is.close();
      }
 catch (      Exception e) {
        throw new WebApplicationException(e);
      }
    }
  }
;
}","@GET @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public StreamingOutput getFile(@QueryParam(""String_Node_Str"") String path) throws OseeCoreException {
  final String myPath=path;
  return new StreamingOutput(){
    public void write(    OutputStream output) throws IOException, WebApplicationException {
      try {
        File file=new File(myPath);
        InputStream is=new FileInputStream(file);
        byte[] bytes=new byte[2048];
        int numRead=0;
        while ((numRead=is.read(bytes)) != -1) {
          output.write(bytes,0,numRead);
        }
        is.close();
      }
 catch (      Exception e) {
        throw new WebApplicationException(e);
      }
    }
  }
;
}",0.9790915645277576
97235,"private Map<String,DataRight> getClassificationToDataRights(QueryBuilder query){
  Map<String,DataRight> toReturn=new HashMap<String,DataRight>();
  @SuppressWarnings(""String_Node_Str"") ArtifactReadable footerMappingArt=query.andIds(MAPPING_ARTIFACT).getResults().getExactlyOne();
  List<String> footers=footerMappingArt.getAttributeValues(CoreAttributeTypes.GeneralStringData);
  for (  String footer : footers) {
    String[] enumToFooter=footer.split(""String_Node_Str"",2);
    if (enumToFooter.length == 2) {
      DataRightId id=new DataRightId();
      id.setId(GUID.create());
      DataRight dataRight=new DataRight();
      dataRight.setId(id);
      dataRight.setContent(enumToFooter[1].trim());
      toReturn.put(enumToFooter[0].trim(),dataRight);
    }
  }
  return toReturn;
}","private Map<String,DataRight> getClassificationToDataRights(QueryBuilder query){
  Map<String,DataRight> toReturn=new HashMap<String,DataRight>();
  @SuppressWarnings(""String_Node_Str"") ArtifactReadable footerMappingArt=query.andIds(MAPPING_ARTIFACT).getResults().getOneOrNull();
  if (footerMappingArt != null) {
    List<String> footers=new ArrayList<String>();
    footers=footerMappingArt.getAttributeValues(CoreAttributeTypes.GeneralStringData);
    for (    String footer : footers) {
      String[] enumToFooter=footer.split(""String_Node_Str"",2);
      if (enumToFooter.length == 2) {
        DataRightId id=new DataRightId();
        id.setId(GUID.create());
        DataRight dataRight=new DataRight();
        dataRight.setId(id);
        dataRight.setContent(enumToFooter[1].trim());
        toReturn.put(enumToFooter[0].trim(),dataRight);
      }
    }
  }
  return toReturn;
}",0.8963051251489869
97236,"public static boolean isResurrected(ChangeItem changeItem){
  return changeItem.getBaselineVersion().getModType().isDeleted();
}","public static boolean isResurrected(ChangeItem changeItem){
  return changeItem.getBaselineVersion().isValid() && isDeleted(changeItem.getBaselineVersion());
}",0.8222996515679443
97237,"public void shutdown(String dbId){
  Pair<Server,Thread> entry=serverControls.remove(dbId);
  if (entry != null) {
    try {
      entry.getFirst().shutdownWithCatalogs(Database.CLOSEMODE_COMPACT);
      removeShutdownHook(entry.getSecond());
    }
 catch (    Exception e) {
      OseeLog.log(HyperSqlDbServer.class,Level.SEVERE,e.getMessage(),e);
    }
  }
}","public void shutdown(String dbId){
  Pair<Server,Thread> entry=serverControls.remove(dbId);
  if (entry != null) {
    try {
      Thread second=entry.getSecond();
      removeShutdownHook(second);
      Server first=entry.getFirst();
      first.shutdownWithCatalogs(Database.CLOSEMODE_NORMAL);
    }
 catch (    Exception e) {
      OseeLog.log(HyperSqlDbServer.class,Level.SEVERE,e.getMessage(),e);
    }
  }
}",0.8046571798188874
97238,"public TestScript(TestEnvironment environment,IUserSession callback,ScriptTypeEnum scriptType,boolean isBatchable){
  constructed.incrementAndGet();
  this.scriptType=scriptType;
  this.isBatchable=isBatchable;
  this.isMpLevel=false;
  promptInitWorker=Executors.newSingleThreadExecutor();
  sciprtResultRecord=new ScriptResultRecord(this);
  if (environment != null) {
    this.environment=environment;
    this.startTime=new Date(0);
    testStation=this.environment.getTestStation();
    GCHelper.getGCHelper().addRefWatch(this);
    instances.add(getClass());
  }
 else {
    throw new TestException(""String_Node_Str"",Level.SEVERE);
  }
  this.testPointTally=new TestPointTally(this.getClass().getName());
}","public TestScript(TestEnvironment environment,IUserSession callback,ScriptTypeEnum scriptType,boolean isBatchable){
  constructed.incrementAndGet();
  this.scriptType=scriptType;
  this.isBatchable=isBatchable;
  this.isMpLevel=false;
  promptImpl=new TestPromptImpl();
  sciprtResultRecord=new ScriptResultRecord(this);
  if (environment != null) {
    this.environment=environment;
    this.startTime=new Date(0);
    testStation=this.environment.getTestStation();
    GCHelper.getGCHelper().addRefWatch(this);
    instances.add(getClass());
  }
 else {
    throw new TestException(""String_Node_Str"",Level.SEVERE);
  }
  this.testPointTally=new TestPointTally(this.getClass().getName());
}",0.9579472558802566
97239,"public void readKeyValuePairs(InputStream keyValueStream){
  Scanner scanner=new Scanner(keyValueStream,""String_Node_Str"");
  scanner.useDelimiter(xmlProcessingInstructionStartOrEnd);
  try {
    String id=null;
    StringBuilder substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
    boolean isProcessingInstruction=false;
    while (scanner.hasNext()) {
      isProcessingInstruction=scanner.findInLine(xmlProcessingInstructionStart) != null;
      String token=scanner.next();
      if (emptyOrWhitespaceOnly.matcher(token).matches()) {
        continue;
      }
      if (token.startsWith(""String_Node_Str"")) {
        handleInclude(substitution,token);
        substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
      }
 else       if (token.startsWith(""String_Node_Str"")) {
        handleRule(substitution,token);
        substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
      }
 else {
        if (isProcessingInstruction) {
          if (id != null) {
            addKeyValuePair(id,substitution);
            substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
          }
          id=token;
        }
 else {
          substitution.append(trimToken(token));
        }
      }
    }
    if (id != null) {
      addKeyValuePair(id,substitution);
    }
  }
 catch (  IOException ex) {
    throw new OseeCoreException(ex);
  }
 finally {
    scanner.close();
  }
}","public void readKeyValuePairs(InputStream keyValueStream){
  Scanner scanner=new Scanner(keyValueStream,""String_Node_Str"");
  scanner.useDelimiter(xmlProcessingInstructionStartOrEnd);
  try {
    String id=null;
    StringBuilder substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
    boolean isProcessingInstruction=false;
    while (scanner.hasNext()) {
      isProcessingInstruction=scanner.findInLine(xmlProcessingInstructionStart) != null;
      String token=scanner.next();
      if (emptyOrWhitespaceOnly.matcher(token).matches()) {
        continue;
      }
      if (token.startsWith(""String_Node_Str"")) {
        handleInclude(substitution,token);
        substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
      }
 else       if (token.startsWith(""String_Node_Str"")) {
        handleRule(substitution,token);
      }
 else {
        if (isProcessingInstruction) {
          if (id != null) {
            addKeyValuePair(id,substitution);
            substitution=new StringBuilder(NumOfCharsInTypicalSmallPage);
          }
          id=token;
        }
 else {
          substitution.append(trimToken(token));
        }
      }
    }
    if (id != null) {
      addKeyValuePair(id,substitution);
    }
  }
 catch (  IOException ex) {
    throw new OseeCoreException(ex);
  }
 finally {
    scanner.close();
  }
}",0.8783490224475018
97240,"public void stop(){
  RuntimeDelegate.setInstance(null);
  if (providers != null) {
    providers.clear();
    providers=null;
  }
  if (features != null) {
    features.clear();
    features=null;
  }
  if (extensionMappings != null) {
    extensionMappings.clear();
    extensionMappings=null;
  }
  properties=null;
}","public void stop(){
  if (providers != null) {
    providers.clear();
    providers=null;
  }
  if (features != null) {
    features.clear();
    features=null;
  }
  if (extensionMappings != null) {
    extensionMappings.clear();
    extensionMappings=null;
  }
  properties=null;
}",0.1359867330016583
97241,"public OteService(IRuntimeLibraryManager runtimeLibraryManager,EnvironmentCreationParameter environmentCreation,OTESessionManager oteSessions,PropertyParamter parameterObject,EnhancedProperties properties){
  this.runtimeLibraryManager=runtimeLibraryManager;
  this.environmentCreation=environmentCreation;
  this.oteSessions=oteSessions;
  Uuid uuid=UuidFactory.generate();
  Long lsb=Long.valueOf(uuid.getLeastSignificantBits());
  Long msb=Long.valueOf(uuid.getMostSignificantBits());
  serviceID=new ServiceID(msb.longValue(),lsb.longValue());
  enhancedProperties=properties;
  enhancedProperties.setProperty(""String_Node_Str"",environmentCreation.getServerTitle());
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getStation());
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getVersion());
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getType());
  enhancedProperties.setProperty(""String_Node_Str"",Integer.toString(environmentCreation.getMaxUsersPerEnvironment()));
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getComment());
  enhancedProperties.setProperty(""String_Node_Str"",new Date().toString());
  enhancedProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  enhancedProperties.setProperty(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  enhancedProperties.setProperty(""String_Node_Str"",serviceID.toString());
  try {
    enhancedProperties.setProperty(""String_Node_Str"",String.format(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),Integer.parseInt(System.getProperty(""String_Node_Str""))));
  }
 catch (  Exception e) {
    OseeLog.log(OteService.class,Level.SEVERE,""String_Node_Str"",e);
  }
}","public OteService(IRuntimeLibraryManager runtimeLibraryManager,EnvironmentCreationParameter environmentCreation,OTESessionManager oteSessions,PropertyParamter parameterObject,EnhancedProperties properties){
  this.runtimeLibraryManager=runtimeLibraryManager;
  this.environmentCreation=environmentCreation;
  this.oteSessions=oteSessions;
  Uuid uuid=UuidFactory.generate();
  Long lsb=Long.valueOf(uuid.getLeastSignificantBits());
  Long msb=Long.valueOf(uuid.getMostSignificantBits());
  serviceID=new ServiceID(msb.longValue(),lsb.longValue());
  enhancedProperties=properties;
  enhancedProperties.setProperty(""String_Node_Str"",environmentCreation.getServerTitle());
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getStation());
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getVersion());
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getType());
  enhancedProperties.setProperty(""String_Node_Str"",Integer.toString(environmentCreation.getMaxUsersPerEnvironment()));
  enhancedProperties.setProperty(""String_Node_Str"",parameterObject.getComment());
  enhancedProperties.setProperty(""String_Node_Str"",new Date().toString());
  enhancedProperties.setProperty(""String_Node_Str"",""String_Node_Str"");
  enhancedProperties.setProperty(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  enhancedProperties.setProperty(""String_Node_Str"",serviceID.toString());
  try {
    if (System.getProperty(""String_Node_Str"") == null) {
      enhancedProperties.setProperty(""String_Node_Str"",String.format(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),80));
    }
 else {
      enhancedProperties.setProperty(""String_Node_Str"",String.format(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),Integer.parseInt(System.getProperty(""String_Node_Str""))));
    }
  }
 catch (  Exception e) {
    OseeLog.log(OteService.class,Level.SEVERE,""String_Node_Str"",e);
  }
}",0.9350436681222708
97242,"private OTEServer createOTEServer(NodeInfo nodeInfo,EnvironmentCreationParameter environmentCreationParameter,PropertyParamter propertyParameter,String uuid) throws NumberFormatException, UnknownHostException {
  OTEServer server=new OTEServer();
  server.setName(environmentCreationParameter.getServerTitle().toString());
  server.setStation(propertyParameter.getStation());
  server.setVersion(propertyParameter.getVersion());
  server.setType(propertyParameter.getType());
  server.setComment(propertyParameter.getComment());
  server.setStartTime(new Date().toString());
  server.setOwner(System.getProperty(""String_Node_Str""));
  server.setUUID(uuid);
  server.setOteRestServer(String.format(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),Integer.parseInt(System.getProperty(""String_Node_Str""))));
  server.setOteActivemqServer(nodeInfo.getUri().toString());
  return server;
}","private OTEServer createOTEServer(NodeInfo nodeInfo,EnvironmentCreationParameter environmentCreationParameter,PropertyParamter propertyParameter,String uuid) throws NumberFormatException, UnknownHostException {
  OTEServer server=new OTEServer();
  server.setName(environmentCreationParameter.getServerTitle().toString());
  server.setStation(propertyParameter.getStation());
  server.setVersion(propertyParameter.getVersion());
  server.setType(propertyParameter.getType());
  server.setComment(propertyParameter.getComment());
  server.setStartTime(new Date().toString());
  server.setOwner(System.getProperty(""String_Node_Str""));
  server.setUUID(uuid);
  if (System.getProperty(""String_Node_Str"") == null) {
    server.setOteRestServer(String.format(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),80));
  }
 else {
    server.setOteRestServer(String.format(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),Integer.parseInt(System.getProperty(""String_Node_Str""))));
  }
  server.setOteActivemqServer(nodeInfo.getUri().toString());
  return server;
}",0.8669701568032372
97243,"private IHostTestEnvironment start(IServiceConnector serviceSideConnector,ITestEnvironmentServiceConfig config,PropertyParamter propertyParameter,TestEnvironmentFactory factory,String environmentFactoryClass) throws Exception {
  if (service != null) {
    throw new OseeStateException(""String_Node_Str"");
  }
  this.serviceSideConnector=serviceSideConnector;
  System.out.printf(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),Integer.parseInt(System.getProperty(""String_Node_Str"")));
  brokerService=new BrokerService();
  String strUri;
  try {
    String addressAsString=getAddress();
    if (brokerPort <= 0) {
      brokerPort=getServerPort();
    }
    strUri=String.format(""String_Node_Str"",addressAsString,brokerPort);
    try {
      brokerService.addConnector(strUri);
      OseeLog.log(getClass(),Level.INFO,""String_Node_Str"" + strUri);
    }
 catch (    Exception e) {
      OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"" + strUri,e);
      strUri=""String_Node_Str"";
    }
  }
 catch (  Exception e) {
    OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"",e);
    strUri=""String_Node_Str"";
  }
  Thread.currentThread().setContextClassLoader(ExportClassLoader.getInstance());
  brokerService.setEnableStatistics(false);
  brokerService.setBrokerName(""String_Node_Str"");
  brokerService.setPersistent(false);
  brokerService.setUseJmx(false);
  brokerService.start();
  URI uri=new URI(strUri);
  System.out.printf(""String_Node_Str"",strUri);
  nodeInfo=new NodeInfo(""String_Node_Str"",uri);
  EnvironmentCreationParameter environmentCreationParameter=new EnvironmentCreationParameter(runtimeLibraryManager,nodeInfo,serviceSideConnector,config,factory,environmentFactoryClass);
  service=new OteService(runtimeLibraryManager,environmentCreationParameter,oteSessions,propertyParameter,serviceSideConnector.getProperties());
  serviceSideConnector.init(service);
  if (propertyParameter.isLocalConnector() || propertyParameter.useJiniLookup()) {
    connectionService.addConnector(serviceSideConnector);
  }
  if (!propertyParameter.isLocalConnector()) {
    String masterURIStr=System.getProperty(""String_Node_Str"");
    if (masterURIStr != null) {
      try {
        messageService.get(nodeInfo).subscribe(OteBaseMessages.RequestOteHost,listenForHostRequest,this);
        masterURI=new URI(masterURIStr);
        oteServerEntry=createOTEServer(nodeInfo,environmentCreationParameter,propertyParameter,service.getServiceID().toString());
        lookupRegistration=new LookupRegistration(masterURI,masterServer,oteServerEntry,service);
        taskToCancel=executor.scheduleAtFixedRate(lookupRegistration,0,30,TimeUnit.SECONDS);
      }
 catch (      Throwable th) {
        OseeLog.log(getClass(),Level.SEVERE,th);
      }
    }
 else {
      OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"");
    }
  }
 else {
    serviceSideConnector.setProperty(""String_Node_Str"",nodeInfo);
  }
  FrameworkUtil.getBundle(getClass()).getBundleContext().registerService(IHostTestEnvironment.class,service,null);
  return service;
}","private IHostTestEnvironment start(IServiceConnector serviceSideConnector,ITestEnvironmentServiceConfig config,PropertyParamter propertyParameter,TestEnvironmentFactory factory,String environmentFactoryClass) throws Exception {
  if (service != null) {
    throw new OseeStateException(""String_Node_Str"");
  }
  this.serviceSideConnector=serviceSideConnector;
  if (System.getProperty(""String_Node_Str"") == null) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.printf(""String_Node_Str"",InetAddress.getLocalHost().getHostAddress(),Integer.parseInt(System.getProperty(""String_Node_Str"")));
  }
  brokerService=new BrokerService();
  String strUri;
  try {
    String addressAsString=getAddress();
    if (brokerPort <= 0) {
      brokerPort=getServerPort();
    }
    strUri=String.format(""String_Node_Str"",addressAsString,brokerPort);
    try {
      brokerService.addConnector(strUri);
      OseeLog.log(getClass(),Level.INFO,""String_Node_Str"" + strUri);
    }
 catch (    Exception e) {
      OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"" + strUri,e);
      strUri=""String_Node_Str"";
    }
  }
 catch (  Exception e) {
    OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"",e);
    strUri=""String_Node_Str"";
  }
  Thread.currentThread().setContextClassLoader(ExportClassLoader.getInstance());
  brokerService.setEnableStatistics(false);
  brokerService.setBrokerName(""String_Node_Str"");
  brokerService.setPersistent(false);
  brokerService.setUseJmx(false);
  brokerService.start();
  URI uri=new URI(strUri);
  System.out.printf(""String_Node_Str"",strUri);
  nodeInfo=new NodeInfo(""String_Node_Str"",uri);
  EnvironmentCreationParameter environmentCreationParameter=new EnvironmentCreationParameter(runtimeLibraryManager,nodeInfo,serviceSideConnector,config,factory,environmentFactoryClass);
  service=new OteService(runtimeLibraryManager,environmentCreationParameter,oteSessions,propertyParameter,serviceSideConnector.getProperties());
  serviceSideConnector.init(service);
  if (propertyParameter.isLocalConnector() || propertyParameter.useJiniLookup()) {
    connectionService.addConnector(serviceSideConnector);
  }
  if (!propertyParameter.isLocalConnector()) {
    String masterURIStr=System.getProperty(""String_Node_Str"");
    if (masterURIStr != null) {
      try {
        messageService.get(nodeInfo).subscribe(OteBaseMessages.RequestOteHost,listenForHostRequest,this);
        masterURI=new URI(masterURIStr);
        oteServerEntry=createOTEServer(nodeInfo,environmentCreationParameter,propertyParameter,service.getServiceID().toString());
        lookupRegistration=new LookupRegistration(masterURI,masterServer,oteServerEntry,service);
        taskToCancel=executor.scheduleAtFixedRate(lookupRegistration,0,30,TimeUnit.SECONDS);
      }
 catch (      Throwable th) {
        OseeLog.log(getClass(),Level.SEVERE,th);
      }
    }
 else {
      OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"");
    }
  }
 else {
    serviceSideConnector.setProperty(""String_Node_Str"",nodeInfo);
  }
  FrameworkUtil.getBundle(getClass()).getBundleContext().registerService(IHostTestEnvironment.class,service,null);
  return service;
}",0.981053307642903
97244,"private void handleCreateDuplicate(Collection<TeamWorkFlowArtifact> teamArts,boolean duplicateTasks,String title) throws OseeCoreException {
  Set<TeamWorkFlowArtifact> newTeamArts=new HashSet<TeamWorkFlowArtifact>();
  AtsChangeSet changes=new AtsChangeSet(""String_Node_Str"");
  for (  TeamWorkFlowArtifact teamArt : teamArts) {
    TeamWorkFlowArtifact dupArt=(TeamWorkFlowArtifact)teamArt.duplicate(AtsUtilCore.getAtsBranch(),Arrays.asList(AtsAttributeTypes.AtsId));
    if (Strings.isValid(title)) {
      dupArt.setName(title);
    }
    dupArt.addRelation(AtsRelationTypes.ActionToWorkflow_Action,teamArt.getParentActionArtifact());
    dupArt.getLog().addLog(LogType.Note,null,""String_Node_Str"" + teamArt.getAtsId(),AtsClientService.get().getUserService().getCurrentUser().getUserId());
    changes.add(dupArt);
    if (duplicateTasks) {
      for (      TaskArtifact taskArt : teamArt.getTaskArtifacts()) {
        TaskArtifact dupTaskArt=(TaskArtifact)taskArt.duplicate(AtsUtilCore.getAtsBranch());
        dupTaskArt.getLog().addLog(LogType.Note,null,""String_Node_Str"" + taskArt.getAtsId(),AtsClientService.get().getUserService().getCurrentUser().getUserId());
        dupArt.addRelation(AtsRelationTypes.TeamWfToTask_Task,dupTaskArt);
        changes.add(dupTaskArt);
      }
    }
    ActionManager.addActionToConfiguredGoal(dupArt.getTeamDefinition(),dupArt,dupArt.getActionableItems(),changes);
    newTeamArts.add(dupArt);
    for (    ITeamWorkflowProvider teamExtension : TeamWorkFlowManager.getTeamWorkflowProviders()) {
      teamExtension.teamWorkflowDuplicating(teamArt,dupArt);
    }
  }
  changes.execute();
  for (  TeamWorkFlowArtifact newTeamArt : newTeamArts) {
    SMAEditor.editArtifact(newTeamArt);
  }
}","private void handleCreateDuplicate(Collection<TeamWorkFlowArtifact> teamArts,boolean duplicateTasks,String title) throws OseeCoreException {
  Set<TeamWorkFlowArtifact> newTeamArts=new HashSet<TeamWorkFlowArtifact>();
  AtsChangeSet changes=new AtsChangeSet(""String_Node_Str"");
  for (  TeamWorkFlowArtifact teamArt : teamArts) {
    TeamWorkFlowArtifact dupArt=(TeamWorkFlowArtifact)teamArt.duplicate(AtsUtilCore.getAtsBranch(),Arrays.asList(AtsAttributeTypes.AtsId));
    if (Strings.isValid(title)) {
      dupArt.setName(title);
    }
    dupArt.setSoleAttributeFromString(AtsAttributeTypes.AtsId,getNexAtsId(teamArt));
    dupArt.addRelation(AtsRelationTypes.ActionToWorkflow_Action,teamArt.getParentActionArtifact());
    dupArt.getLog().addLog(LogType.Note,null,""String_Node_Str"" + teamArt.getAtsId(),AtsClientService.get().getUserService().getCurrentUser().getUserId());
    changes.add(dupArt);
    if (duplicateTasks) {
      for (      TaskArtifact taskArt : teamArt.getTaskArtifacts()) {
        TaskArtifact dupTaskArt=(TaskArtifact)taskArt.duplicate(AtsUtilCore.getAtsBranch());
        dupTaskArt.getLog().addLog(LogType.Note,null,""String_Node_Str"" + taskArt.getAtsId(),AtsClientService.get().getUserService().getCurrentUser().getUserId());
        dupArt.addRelation(AtsRelationTypes.TeamWfToTask_Task,dupTaskArt);
        changes.add(dupTaskArt);
      }
    }
    ActionManager.addActionToConfiguredGoal(dupArt.getTeamDefinition(),dupArt,dupArt.getActionableItems(),changes);
    newTeamArts.add(dupArt);
    for (    ITeamWorkflowProvider teamExtension : TeamWorkFlowManager.getTeamWorkflowProviders()) {
      teamExtension.teamWorkflowDuplicating(teamArt,dupArt);
    }
  }
  changes.execute();
  for (  TeamWorkFlowArtifact newTeamArt : newTeamArts) {
    SMAEditor.editArtifact(newTeamArt);
  }
}",0.9760765550239234
97245,"/** 
 * Return hours spent working all states, reviews and tasks (not children SMAs)
 */
public static double getHoursSpentTotal(IAtsObject atsObject,IStateToken state) throws OseeCoreException {
  double hours=0.0;
  if (atsObject instanceof IAtsWorkItem) {
    IAtsWorkItem workItem=(IAtsWorkItem)atsObject;
    for (    String stateName : workItem.getStateMgr().getVisitedStateNames()) {
      hours+=getHoursSpentStateTotal(workItem,new SimpleTeamState(stateName,StateType.Working));
    }
  }
  return hours;
}","/** 
 * Return hours spent working all states, reviews and tasks (not children SMAs)
 */
public static double getHoursSpentTotal(IAtsObject atsObject,IStateToken state) throws OseeCoreException {
  double hours=0.0;
  if (atsObject instanceof IAtsWorkItem) {
    IAtsWorkItem workItem=(IAtsWorkItem)atsObject;
    hours=getHoursSpentTotalSMAState(hours,workItem) + getHoursSpentFromTasks(atsObject) + getHoursSpentReview(atsObject);
  }
  return hours;
}",0.7141382868937048
97246,"private String getEstHoursStr() throws OseeCoreException {
  double awaEst=awa.getSoleAttributeValue(AtsAttributeTypes.EstimatedHours,0.0);
  double totalEst=awa.getEstimatedHoursTotal();
  if (awaEst != totalEst) {
    return String.format(""String_Node_Str"",AtsUtilCore.doubleToI18nString(awaEst),AtsUtilCore.doubleToI18nString(totalEst));
  }
 else {
    return AtsUtilCore.doubleToI18nString(awaEst);
  }
}","private String getEstHoursStr() throws OseeCoreException {
  double totalEst=0;
  double awaEst=awa.getSoleAttributeValue(AtsAttributeTypes.EstimatedHours,0.0);
  if (awaEst < 0) {
    OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,""String_Node_Str"");
    PromptChangeUtil.promptChangeAttribute(awa,AtsAttributeTypes.EstimatedHours,true,false);
  }
 else {
    totalEst=awa.getEstimatedHoursTotal();
  }
  if (awaEst != totalEst) {
    return String.format(""String_Node_Str"",AtsUtilCore.doubleToI18nString(awaEst),AtsUtilCore.doubleToI18nString(totalEst));
  }
 else {
    return AtsUtilCore.doubleToI18nString(awaEst);
  }
}",0.7802516940948693
97247,"private String getAssigneesStr(IAtsWorkItem workItem,ArtifactReadable action){
  String results=""String_Node_Str"";
  if (isShowHeaderFull()) {
    results=workItem.getStateMgr().getAssigneesStr();
  }
 else {
    String currState=action.getSoleAttributeAsString(AtsAttributeTypes.CurrentState);
    String assignees=currState.split(""String_Node_Str"")[1];
    assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
    assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
    assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
    results=assignees;
  }
  return results;
}","private String getAssigneesStr(IAtsWorkItem workItem,ArtifactReadable action){
  String results=""String_Node_Str"";
  if (isShowHeaderFull()) {
    results=workItem.getStateMgr().getAssigneesStr();
  }
 else {
    String currState=action.getSoleAttributeAsString(AtsAttributeTypes.CurrentState);
    String[] split=currState.split(""String_Node_Str"");
    if (split.length >= 2) {
      String assignees=split[1];
      assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
      assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
      assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
      results=assignees;
    }
  }
  return results;
}",0.8237986270022883
97248,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  XResultData data=new XResultData(false);
  try {
    if (!Strings.isValid(resultsDir)) {
      throw new OseeArgumentException(""String_Node_Str"");
    }
    File file=new File(resultsDir);
    if (!file.exists()) {
      file.mkdir();
    }
    @SuppressWarnings(""String_Node_Str"") Set<Artifact> artifactLoadCache=ConfigureCoverageMethodsAction.bulkLoadCoveragePackage(fromPackageArt);
    OseeCoveragePackageStore fromPackageStore=new OseeCoveragePackageStore(fromPackageArt);
    CoveragePackage fromPackage=fromPackageStore.getCoveragePackage();
    int numCoverageUnits=fromPackage.getCoverageUnitCount(true);
    monitor.beginTask(getName(),numCoverageUnits);
    @SuppressWarnings(""String_Node_Str"") Set<Artifact> artifactLoadCache2=ConfigureCoverageMethodsAction.bulkLoadCoveragePackage(toPackageArt);
    OseeCoveragePackageStore toPackageStore=new OseeCoveragePackageStore(toPackageArt);
    CoveragePackage toPackage=toPackageStore.getCoveragePackage();
    String title=String.format(""String_Node_Str"",fromPackage.getName(),toPackage.getName());
    ImportCoverageMethodsCounter counter=new ImportCoverageMethodsCounter();
    processDispositionsRecurse(monitor,counter,data,fromPackage,toPackage);
    data.log(""String_Node_Str"" + counter.toString());
    data.log(title);
    if (isPersistTransaction) {
      data.log(""String_Node_Str"");
      OseeCoveragePackageStore persistStore=new OseeCoveragePackageStore(toPackage,BranchManager.getBranch(toPackageArt.getBranch()));
      Result results=persistStore.save(title,toPackageStore.getCoverageOptionManager());
      if (results.isFalse()) {
        data.logErrorWithFormat(""String_Node_Str"",results.toString());
      }
    }
    if (isRetainTaskTracking) {
      toPackage.getWorkProductTaskProvider().addWorkProductAction(fromPackage.getWorkProductTaskProvider().getWorkProductRelatedActions());
    }
    data.log(""String_Node_Str"" + resultsDir);
    String html=XResultDataUI.report(data,""String_Node_Str"",Manipulations.GUID_CMD_HYPER,Manipulations.ERROR_RED,Manipulations.CONVERT_NEWLINES,Manipulations.WARNING_YELLOW,Manipulations.ERROR_WARNING_HEADER);
    Lib.writeStringToFile(html,new File(resultsDir + File.separator + ""String_Node_Str""));
    if (isPersistTransaction) {
      Artifact importReportArt=null;
      for (      Artifact art : toPackageArt.getRelatedArtifacts(CoreRelationTypes.SupportingInfo_SupportedBy)) {
        if (art.getName().equals(""String_Node_Str"")) {
          importReportArt=art;
          break;
        }
      }
      if (importReportArt == null) {
        importReportArt=ArtifactTypeManager.addArtifact(CoreArtifactTypes.GeneralDocument,toPackageArt.getBranch(),""String_Node_Str"");
        importReportArt.setSoleAttributeValue(CoreAttributeTypes.Extension,""String_Node_Str"");
        toPackageArt.addRelation(CoreRelationTypes.SupportingInfo_SupportedBy,importReportArt);
      }
      importReportArt.setSoleAttributeFromString(CoreAttributeTypes.NativeContent,html);
      importReportArt.persist(String.format(""String_Node_Str"",toPackage.getName()));
    }
    if (Desktop.isDesktopSupported()) {
      Desktop desktop=Desktop.getDesktop();
      desktop.open(new File(resultsDir));
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    data.logErrorWithFormat(""String_Node_Str"",ex.getLocalizedMessage());
    XResultDataUI.report(data,""String_Node_Str"");
  }
 finally {
    monitor.done();
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  XResultData data=new XResultData(false);
  try {
    if (!Strings.isValid(resultsDir)) {
      throw new OseeArgumentException(""String_Node_Str"");
    }
    File file=new File(resultsDir);
    if (!file.exists()) {
      file.mkdir();
    }
    @SuppressWarnings(""String_Node_Str"") Set<Artifact> artifactLoadCache=ConfigureCoverageMethodsAction.bulkLoadCoveragePackage(fromPackageArt);
    OseeCoveragePackageStore fromPackageStore=new OseeCoveragePackageStore(fromPackageArt);
    CoveragePackage fromPackage=fromPackageStore.getCoveragePackage();
    int numCoverageUnits=fromPackage.getCoverageUnitCount(true);
    monitor.beginTask(getName(),numCoverageUnits);
    @SuppressWarnings(""String_Node_Str"") Set<Artifact> artifactLoadCache2=ConfigureCoverageMethodsAction.bulkLoadCoveragePackage(toPackageArt);
    OseeCoveragePackageStore toPackageStore=new OseeCoveragePackageStore(toPackageArt);
    CoveragePackage toPackage=toPackageStore.getCoveragePackage();
    String title=String.format(""String_Node_Str"",fromPackage.getName(),toPackage.getName());
    ImportCoverageMethodsCounter counter=new ImportCoverageMethodsCounter();
    processDispositionsRecurse(monitor,counter,data,fromPackage,toPackage);
    ITestUnitProvider fromProvider=OseeCoverageUnitStore.getTestUnitProvider(fromPackageArt,null);
    ITestUnitProvider toProvider=OseeCoverageUnitStore.getTestUnitProvider(toPackageArt,null);
    if (fromProvider instanceof TestUnitCache && toProvider instanceof TestUnitCache) {
      TestUnitCache toTUC=(TestUnitCache)toProvider;
      TestUnitCache fromTUC=(TestUnitCache)fromProvider;
      toTUC.merge(fromTUC);
    }
    data.log(""String_Node_Str"" + counter.toString());
    data.log(title);
    if (isPersistTransaction) {
      data.log(""String_Node_Str"");
      OseeCoveragePackageStore persistStore=new OseeCoveragePackageStore(toPackage,BranchManager.getBranch(toPackageArt.getBranch()));
      Result results=persistStore.save(title,toPackageStore.getCoverageOptionManager());
      if (results.isFalse()) {
        data.logErrorWithFormat(""String_Node_Str"",results.toString());
      }
    }
    if (isRetainTaskTracking) {
      toPackage.getWorkProductTaskProvider().addWorkProductAction(fromPackage.getWorkProductTaskProvider().getWorkProductRelatedActions());
    }
    data.log(""String_Node_Str"" + resultsDir);
    String html=XResultDataUI.report(data,""String_Node_Str"",Manipulations.GUID_CMD_HYPER,Manipulations.ERROR_RED,Manipulations.CONVERT_NEWLINES,Manipulations.WARNING_YELLOW,Manipulations.ERROR_WARNING_HEADER);
    Lib.writeStringToFile(html,new File(resultsDir + File.separator + ""String_Node_Str""));
    if (isPersistTransaction) {
      Artifact importReportArt=null;
      for (      Artifact art : toPackageArt.getRelatedArtifacts(CoreRelationTypes.SupportingInfo_SupportedBy)) {
        if (art.getName().equals(""String_Node_Str"")) {
          importReportArt=art;
          break;
        }
      }
      if (importReportArt == null) {
        importReportArt=ArtifactTypeManager.addArtifact(CoreArtifactTypes.GeneralDocument,toPackageArt.getBranch(),""String_Node_Str"");
        importReportArt.setSoleAttributeValue(CoreAttributeTypes.Extension,""String_Node_Str"");
        toPackageArt.addRelation(CoreRelationTypes.SupportingInfo_SupportedBy,importReportArt);
      }
      importReportArt.setSoleAttributeFromString(CoreAttributeTypes.NativeContent,html);
      importReportArt.persist(String.format(""String_Node_Str"",toPackage.getName()));
    }
    if (Desktop.isDesktopSupported()) {
      Desktop desktop=Desktop.getDesktop();
      desktop.open(new File(resultsDir));
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    data.logErrorWithFormat(""String_Node_Str"",ex.getLocalizedMessage());
    XResultDataUI.report(data,""String_Node_Str"");
  }
 finally {
    monitor.done();
  }
}",0.943305829118978
97249,"public void load(CoverageOptionManager coverageOptionManager) throws OseeCoreException {
  coverageUnit.clearCoverageUnits();
  coverageUnit.clearCoverageItems();
  Artifact artifact=getArtifact(false);
  if (artifact != null) {
    for (    String value : artifact.getAttributesToStringList(CoverageAttributeTypes.Item)) {
      CoverageItem item=CoverageItem.createCoverageItem(coverageUnit,value,coverageOptionManager,getTestUnitProvider());
      coverageUnit.addCoverageItem(item);
    }
    coverageUnit.setFileContentsProvider(OseeCoverageUnitFileContentsProvider.getInstance(branch));
    coverageUnit.setNotes(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Notes,""String_Node_Str""));
    coverageUnit.setFolder(artifact.isOfType(CoverageArtifactTypes.CoverageFolder));
    coverageUnit.setAssignees(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Assignees,""String_Node_Str""));
    coverageUnit.setWorkProductTaskGuid(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.WorkProductTaskGuid,""String_Node_Str""));
    coverageUnit.setNamespace(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Namespace,""String_Node_Str""));
    coverageUnit.setOrderNumber(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Order,""String_Node_Str""));
    coverageUnit.setLocation(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Location,""String_Node_Str""));
    for (    Artifact childArt : artifact.getChildren()) {
      if (childArt.isOfType(CoverageArtifactTypes.CoverageUnit,CoverageArtifactTypes.CoverageFolder)) {
        coverageUnit.addCoverageUnit(OseeCoverageUnitStore.get(coverageUnit,childArt,coverageOptionManager,coveragePackage));
      }
    }
  }
}","public void load(CoverageOptionManager coverageOptionManager) throws OseeCoreException {
  coverageUnit.clearCoverageUnits();
  coverageUnit.clearCoverageItems();
  Artifact artifact=getArtifact(false);
  if (artifact != null) {
    for (    String value : artifact.getAttributesToStringList(CoverageAttributeTypes.Item)) {
      CoverageItem item=CoverageItem.createCoverageItem(coverageUnit,value,coverageOptionManager,getTestUnitProvider(coveragePackage,readOnlyTestUnitNames));
      coverageUnit.addCoverageItem(item);
    }
    coverageUnit.setFileContentsProvider(OseeCoverageUnitFileContentsProvider.getInstance(branch));
    coverageUnit.setNotes(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Notes,""String_Node_Str""));
    coverageUnit.setFolder(artifact.isOfType(CoverageArtifactTypes.CoverageFolder));
    coverageUnit.setAssignees(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Assignees,""String_Node_Str""));
    coverageUnit.setWorkProductTaskGuid(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.WorkProductTaskGuid,""String_Node_Str""));
    coverageUnit.setNamespace(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Namespace,""String_Node_Str""));
    coverageUnit.setOrderNumber(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Order,""String_Node_Str""));
    coverageUnit.setLocation(artifact.getSoleAttributeValueAsString(CoverageAttributeTypes.Location,""String_Node_Str""));
    for (    Artifact childArt : artifact.getChildren()) {
      if (childArt.isOfType(CoverageArtifactTypes.CoverageUnit,CoverageArtifactTypes.CoverageFolder)) {
        coverageUnit.addCoverageUnit(OseeCoverageUnitStore.get(coverageUnit,childArt,coverageOptionManager,coveragePackage));
      }
    }
  }
}",0.9894315909740076
97250,"@Override public void saveTestUnitNames(SkynetTransaction transaction) throws OseeCoreException {
  getTestUnitProvider().save(transaction);
}","@Override public void saveTestUnitNames(SkynetTransaction transaction) throws OseeCoreException {
  getTestUnitProvider(coveragePackage,readOnlyTestUnitNames).save(transaction);
}",0.8847352024922118
97251,"public void reloadItem(CoverageEventType eventType,CoverageItem currentCoverageItem,CoverageChange change,CoverageOptionManager coverageOptionManager) throws OseeCoreException {
  Artifact artifact=getArtifact(false);
  if (artifact == null) {
    return;
  }
  if (eventType == CoverageEventType.Modified) {
    for (    String value : artifact.getAttributesToStringList(CoverageAttributeTypes.Item)) {
      CoverageItem dbChangedItem=CoverageItem.createCoverageItem(coverageUnit,value,coverageOptionManager,getTestUnitProvider());
      if (currentCoverageItem.getGuid().equals(dbChangedItem.getGuid())) {
        currentCoverageItem.copy(currentCoverageItem,dbChangedItem);
      }
    }
  }
 else   if (eventType == CoverageEventType.Deleted) {
    coverageUnit.removeCoverageItem(currentCoverageItem);
  }
 else   if (eventType == CoverageEventType.Added) {
  }
}","public void reloadItem(CoverageEventType eventType,CoverageItem currentCoverageItem,CoverageChange change,CoverageOptionManager coverageOptionManager) throws OseeCoreException {
  Artifact artifact=getArtifact(false);
  if (artifact == null) {
    return;
  }
  if (eventType == CoverageEventType.Modified) {
    for (    String value : artifact.getAttributesToStringList(CoverageAttributeTypes.Item)) {
      CoverageItem dbChangedItem=CoverageItem.createCoverageItem(coverageUnit,value,coverageOptionManager,getTestUnitProvider(coveragePackage,readOnlyTestUnitNames));
      if (currentCoverageItem.getGuid().equals(dbChangedItem.getGuid())) {
        currentCoverageItem.copy(currentCoverageItem,dbChangedItem);
      }
    }
  }
 else   if (eventType == CoverageEventType.Deleted) {
    coverageUnit.removeCoverageItem(currentCoverageItem);
  }
 else   if (eventType == CoverageEventType.Added) {
  }
}",0.9791549295774647
97252,"private ITestUnitProvider getTestUnitProvider(){
  ITestUnitProvider testUnitProvider=testUnitProviderMap.get(coveragePackage);
  if (testUnitProvider == null) {
    ArtifactTestUnitStore store=new ArtifactTestUnitStore(coveragePackage,readOnlyTestUnitNames);
    testUnitProvider=new TestUnitCache(store);
    testUnitProviderMap.put(coveragePackage,testUnitProvider);
  }
  return testUnitProvider;
}","public static ITestUnitProvider getTestUnitProvider(Artifact coveragePkg,Artifact readOnly){
  ITestUnitProvider testUnitProvider=testUnitProviderMap.get(coveragePkg);
  if (testUnitProvider == null) {
    ArtifactTestUnitStore store=new ArtifactTestUnitStore(coveragePkg,readOnly);
    testUnitProvider=new TestUnitCache(store);
    testUnitProviderMap.put(coveragePkg,testUnitProvider);
  }
  return testUnitProvider;
}",0.8942891859052248
97253,"@Test public void testRangeCompressor(){
  List<Integer> locationPoints=new ArrayList<Integer>();
  locationPoints.add(83);
  locationPoints.add(84);
  String result=LocationRangesCompressor.compress(locationPoints);
  Assert.assertEquals(""String_Node_Str"",result);
  locationPoints.add(1);
  locationPoints.add(3);
  locationPoints.add(4);
  locationPoints.add(21);
  locationPoints.add(2);
  result=LocationRangesCompressor.compress(locationPoints);
  Assert.assertEquals(""String_Node_Str"",result);
}","@Test public void testRangeCompressor(){
  List<Integer> locationPoints=new ArrayList<Integer>();
  locationPoints.add(83);
  locationPoints.add(84);
  String result=LocationRangesCompressor.compress(locationPoints);
  Assert.assertEquals(""String_Node_Str"",result);
  locationPoints.add(1);
  locationPoints.add(3);
  locationPoints.add(4);
  locationPoints.add(21);
  locationPoints.add(2);
  result=LocationRangesCompressor.compress(locationPoints);
  Assert.assertEquals(""String_Node_Str"",result);
  locationPoints.add(89);
  result=LocationRangesCompressor.compress(locationPoints);
  Assert.assertEquals(""String_Node_Str"",result);
  locationPoints.add(92);
  locationPoints.add(93);
  locationPoints.add(5);
  result=LocationRangesCompressor.compress(locationPoints);
  Assert.assertEquals(""String_Node_Str"",result);
  List<Integer> locationPointsZero=new ArrayList<Integer>();
  locationPointsZero.add(0);
  result=LocationRangesCompressor.compress(locationPointsZero);
  Assert.assertEquals(""String_Node_Str"",result);
}",0.6570680628272252
97254,"public static String compress(List<Integer> locationPoints){
  Collections.sort(locationPoints);
  StringBuilder workingLocRefs=new StringBuilder();
  boolean isRange=false;
  boolean endOfRange=false;
  int startOfRange=-1;
  int previous=-1;
  Iterator<Integer> iterator=locationPoints.iterator();
  while (iterator.hasNext()) {
    int currentTestPoint=iterator.next();
    boolean isLastElement=!iterator.hasNext();
    if (previous == (currentTestPoint - 1) && startOfRange == -1) {
      isRange=true;
      endOfRange=false;
      startOfRange=previous;
      int lastIndexOf=workingLocRefs.lastIndexOf(""String_Node_Str"");
      if (lastIndexOf > 0) {
        workingLocRefs.replace(lastIndexOf,workingLocRefs.length(),""String_Node_Str"");
      }
 else {
        workingLocRefs.setLength(0);
      }
    }
    if (isRange && (previous != (currentTestPoint - 1) || isLastElement)) {
      endOfRange=true;
    }
    StringBuilder toAppend=new StringBuilder();
    if (!isRange) {
      toAppend.append(currentTestPoint);
    }
 else     if (endOfRange) {
      if (isLastElement) {
        toAppend.append(new LocationRange(startOfRange,currentTestPoint).toString());
      }
 else {
        toAppend.append(new LocationRange(startOfRange,previous).toString());
        toAppend.append(""String_Node_Str"");
        toAppend.append(currentTestPoint);
      }
      isRange=false;
      startOfRange=-1;
    }
    if (toAppend.length() != 0) {
      if (workingLocRefs.length() > 0) {
        workingLocRefs.append(""String_Node_Str"");
      }
      workingLocRefs.append(toAppend);
    }
    previous=currentTestPoint;
  }
  return workingLocRefs.toString();
}","public static String compress(List<Integer> locationPoints){
  Collections.sort(locationPoints);
  StringBuilder workingLocRefs=new StringBuilder();
  boolean isRange=false;
  boolean endOfRange=false;
  int startOfRange=-1;
  int previous=-1;
  Iterator<Integer> iterator=locationPoints.iterator();
  while (iterator.hasNext()) {
    int currentTestPoint=iterator.next();
    boolean isLastElement=!iterator.hasNext();
    if (currentTestPoint != 0 && previous == (currentTestPoint - 1) && startOfRange == -1) {
      isRange=true;
      endOfRange=false;
      startOfRange=previous;
      int lastIndexOf=workingLocRefs.lastIndexOf(""String_Node_Str"");
      if (lastIndexOf > 0) {
        workingLocRefs.replace(lastIndexOf,workingLocRefs.length(),""String_Node_Str"");
      }
 else {
        workingLocRefs.setLength(0);
      }
    }
    if (isRange && (previous != (currentTestPoint - 1) || isLastElement)) {
      endOfRange=true;
    }
    StringBuilder toAppend=new StringBuilder();
    if (!isRange) {
      toAppend.append(currentTestPoint);
    }
 else     if (endOfRange) {
      if (previous != (currentTestPoint - 1)) {
        toAppend.append(new LocationRange(startOfRange,previous).toString());
        toAppend.append(""String_Node_Str"");
        toAppend.append(currentTestPoint);
      }
 else {
        toAppend.append(new LocationRange(startOfRange,currentTestPoint).toString());
      }
      isRange=false;
      startOfRange=-1;
    }
    if (toAppend.length() != 0) {
      if (workingLocRefs.length() > 0) {
        workingLocRefs.append(""String_Node_Str"");
      }
      workingLocRefs.append(toAppend);
    }
    previous=currentTestPoint;
  }
  return workingLocRefs.toString();
}",0.9270462633451956
97255,"@Override public Collection<VCastSourceFile> getAllSourceFiles() throws OseeCoreException {
  Collection<VCastSourceFile> toReturn=new ArrayList<VCastSourceFile>();
  IOseeStatement stmt=getStatement();
  try {
    stmt.runPreparedQuery(""String_Node_Str"");
    while (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      Integer unit_index=stmt.getInt(""String_Node_Str"");
      String path=stmt.getString(""String_Node_Str"");
      String display_name=stmt.getString(""String_Node_Str"");
      Integer checksum=stmt.getInt(""String_Node_Str"");
      String display_path=stmt.getString(""String_Node_Str"");
      toReturn.add(new VCastSourceFile(id,path,display_name,checksum,display_path,unit_index));
    }
  }
  finally {
    stmt.close();
  }
  return toReturn;
}","@Override public Collection<VCastSourceFile> getAllSourceFiles() throws OseeCoreException {
  Collection<VCastSourceFile> toReturn=new ArrayList<VCastSourceFile>();
  IOseeStatement stmt=getStatement();
  try {
    stmt.runPreparedQuery(""String_Node_Str"");
    while (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      String path=stmt.getString(""String_Node_Str"");
      String display_name=stmt.getString(""String_Node_Str"");
      Integer checksum=stmt.getInt(""String_Node_Str"");
      String display_path=stmt.getString(""String_Node_Str"");
      toReturn.add(new VCastSourceFile(id,path,display_name,checksum,display_path));
    }
  }
  finally {
    stmt.close();
  }
  return toReturn;
}",0.9543624161073826
97256,"public VCastSourceFile(int id,String path,String displayName,int checksum,String displayPath,int unitIndex){
  this.id=id;
  this.path=path;
  this.displayName=displayName;
  this.checksum=checksum;
  this.displayPath=displayPath;
  this.unit_index=unitIndex;
}","public VCastSourceFile(int id,String path,String displayName,int checksum,String displayPath){
  this.id=id;
  this.path=path;
  this.displayName=displayName;
  this.checksum=checksum;
  this.displayPath=displayPath;
}",0.9102296450939458
97257,"private void processInstrumented(IProgressMonitor monitor,VCastDataStore dataStore,Map<String,CoverageUnit> fileNumToCoverageUnit,VCastInstrumentedFile instrumentedFile) throws Exception {
  VCastSourceFile sourceFile=null;
  try {
    sourceFile=dataStore.getSourceFile(instrumentedFile);
  }
 catch (  OseeDataStoreException ex) {
    coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
  }
  if (sourceFile != null) {
    monitor.setTaskName(String.format(""String_Node_Str"",sourceFile.getDisplayName()));
    CoverageUnit sourceFileCoverageUnit=coverageImport.createCoverageUnit(null,sourceFile.getDisplayName(),""String_Node_Str"");
    fileNumToCoverageUnit.put(String.valueOf(sourceFile.getUnitIndex()),sourceFileCoverageUnit);
    String lisFileName_badPath=instrumentedFile.getLISFile();
    if (!Strings.isValid(lisFileName_badPath)) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str"");
    }
    String normalizedPath=lisFileName_badPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
    File f=new File(normalizedPath);
    String lisFileName=f.getName();
    VCastLisFileParser lisFileParser=new VCastLisFileParser(lisFileName,input.getVCastDirectory());
    sourceFileCoverageUnit.setFileContentsLoader(lisFileParser);
    String sourceFileNamespace=generateNamespace(input.getNamespace(),sourceFile.getDisplayName());
    CoverageUnit sourceFileParent=coverageImport.getOrCreateParent(sourceFileNamespace);
    if (sourceFileParent != null) {
      sourceFileParent.addCoverageUnit(sourceFileCoverageUnit);
    }
 else {
      coverageImport.addCoverageUnit(sourceFileCoverageUnit);
    }
    Collection<VCastFunction> functions=Collections.emptyList();
    try {
      functions=dataStore.getFunctions(instrumentedFile);
    }
 catch (    OseeDataStoreException ex) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
    }
    for (    VCastFunction function : functions) {
      checkForCancelledStatus(monitor);
      processFunction(monitor,dataStore,lisFileParser,instrumentedFile,sourceFileCoverageUnit,function);
    }
    monitor.worked(1);
  }
}","private void processInstrumented(IProgressMonitor monitor,VCastDataStore dataStore,Map<String,CoverageUnit> fileNumToCoverageUnit,VCastInstrumentedFile instrumentedFile) throws Exception {
  VCastSourceFileJoin sourceFile=null;
  try {
    sourceFile=dataStore.getSourceFileJoin(instrumentedFile);
  }
 catch (  OseeDataStoreException ex) {
    coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
  }
  if (sourceFile != null) {
    monitor.setTaskName(String.format(""String_Node_Str"",sourceFile.getDisplayName()));
    CoverageUnit sourceFileCoverageUnit=coverageImport.createCoverageUnit(null,sourceFile.getDisplayName(),""String_Node_Str"");
    fileNumToCoverageUnit.put(String.valueOf(sourceFile.getUnitIndex()),sourceFileCoverageUnit);
    String lisFileName_badPath=instrumentedFile.getLISFile();
    if (!Strings.isValid(lisFileName_badPath)) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str"");
    }
    String normalizedPath=lisFileName_badPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
    File f=new File(normalizedPath);
    String lisFileName=f.getName();
    VCastLisFileParser lisFileParser=new VCastLisFileParser(lisFileName,input.getVCastDirectory());
    sourceFileCoverageUnit.setFileContentsLoader(lisFileParser);
    String sourceFileNamespace=generateNamespace(input.getNamespace(),sourceFile.getDisplayName());
    CoverageUnit sourceFileParent=coverageImport.getOrCreateParent(sourceFileNamespace);
    if (sourceFileParent != null) {
      sourceFileParent.addCoverageUnit(sourceFileCoverageUnit);
    }
 else {
      coverageImport.addCoverageUnit(sourceFileCoverageUnit);
    }
    Collection<VCastFunction> functions=Collections.emptyList();
    try {
      functions=dataStore.getFunctions(instrumentedFile);
    }
 catch (    OseeDataStoreException ex) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
    }
    for (    VCastFunction function : functions) {
      checkForCancelledStatus(monitor);
      processFunction(monitor,dataStore,lisFileParser,instrumentedFile,sourceFileCoverageUnit,function);
    }
    monitor.worked(1);
  }
}",0.9982355535950596
97258,"@SuppressWarnings(""String_Node_Str"") private <T,O extends Object>T runPreparedQueryFetchObject(IOseeStatement chStmt,T defaultValue,String query,O... data) throws OseeCoreException {
  Conditions.checkNotNull(defaultValue,""String_Node_Str"");
  try {
    chStmt.runPreparedQuery(1,query,data);
    if (chStmt.next()) {
      Object toReturn=null;
      Class<?> classValue=defaultValue.getClass();
      if (classValue.isAssignableFrom(Integer.class)) {
        toReturn=chStmt.getInt(1);
      }
 else       if (classValue.isAssignableFrom(String.class)) {
        toReturn=chStmt.getString(1);
      }
 else       if (classValue.isAssignableFrom(Long.class)) {
        toReturn=chStmt.getLong(1);
      }
 else {
        toReturn=chStmt.getObject(1);
      }
      return (T)toReturn;
    }
    return defaultValue;
  }
  finally {
    chStmt.close();
  }
}","@SuppressWarnings(""String_Node_Str"") private <T,O extends Object>T runPreparedQueryFetchObject(IOseeStatement chStmt,T defaultValue,String query,O... data) throws OseeCoreException {
  Conditions.checkNotNull(defaultValue,""String_Node_Str"");
  try {
    chStmt.runPreparedQuery(1,query,data);
    if (chStmt.next()) {
      Object toReturn=null;
      Class<?> classValue=defaultValue.getClass();
      if (classValue.isAssignableFrom(Integer.class)) {
        toReturn=chStmt.getInt(1);
      }
 else       if (classValue.isAssignableFrom(String.class)) {
        toReturn=chStmt.getString(1);
      }
 else       if (classValue.isAssignableFrom(Long.class)) {
        toReturn=chStmt.getLong(1);
      }
 else       if (classValue.isAssignableFrom(Boolean.class)) {
        String value=chStmt.getObject(1).toString();
        toReturn=Boolean.parseBoolean(value);
      }
 else {
        toReturn=chStmt.getObject(1);
      }
      return (T)toReturn;
    }
    return defaultValue;
  }
  finally {
    chStmt.close();
  }
}",0.9018567639257294
97259,"@Override public VCastSourceFile getSourceFile(VCastInstrumentedFile instrumentedFile) throws OseeCoreException {
  VCastSourceFile toReturn=null;
  IOseeStatement stmt=getStatement();
  try {
    stmt.runPreparedQuery(""String_Node_Str"",instrumentedFile.getSourceFileId());
    if (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      String path=stmt.getString(""String_Node_Str"");
      String display_name=stmt.getString(""String_Node_Str"");
      Integer checksum=stmt.getInt(""String_Node_Str"");
      String display_path=stmt.getString(""String_Node_Str"");
      toReturn=new VCastSourceFile(id,path,display_name,checksum,display_path);
    }
  }
  finally {
    stmt.close();
  }
  return toReturn;
}","@Override public VCastSourceFile getSourceFile(VCastInstrumentedFile instrumentedFile) throws OseeCoreException {
  VCastSourceFile toReturn=null;
  IOseeStatement stmt=getStatement();
  try {
    stmt.runPreparedQuery(""String_Node_Str"",instrumentedFile.getSourceFileId());
    if (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      Integer unit_index=stmt.getInt(""String_Node_Str"");
      String path=stmt.getString(""String_Node_Str"");
      String display_name=stmt.getString(""String_Node_Str"");
      Integer checksum=stmt.getInt(""String_Node_Str"");
      String display_path=stmt.getString(""String_Node_Str"");
      toReturn=new VCastSourceFile(id,path,display_name,checksum,display_path,unit_index);
    }
  }
  finally {
    stmt.close();
  }
  return toReturn;
}",0.9549071618037136
97260,"@Override public Collection<VCastSourceFile> getAllSourceFiles() throws OseeCoreException {
  Collection<VCastSourceFile> toReturn=new ArrayList<VCastSourceFile>();
  IOseeStatement stmt=getStatement();
  try {
    stmt.runPreparedQuery(""String_Node_Str"");
    while (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      String path=stmt.getString(""String_Node_Str"");
      String display_name=stmt.getString(""String_Node_Str"");
      Integer checksum=stmt.getInt(""String_Node_Str"");
      String display_path=stmt.getString(""String_Node_Str"");
      toReturn.add(new VCastSourceFile(id,path,display_name,checksum,display_path));
    }
  }
  finally {
    stmt.close();
  }
  return toReturn;
}","@Override public Collection<VCastSourceFile> getAllSourceFiles() throws OseeCoreException {
  Collection<VCastSourceFile> toReturn=new ArrayList<VCastSourceFile>();
  IOseeStatement stmt=getStatement();
  try {
    stmt.runPreparedQuery(""String_Node_Str"");
    while (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      Integer unit_index=stmt.getInt(""String_Node_Str"");
      String path=stmt.getString(""String_Node_Str"");
      String display_name=stmt.getString(""String_Node_Str"");
      Integer checksum=stmt.getInt(""String_Node_Str"");
      String display_path=stmt.getString(""String_Node_Str"");
      toReturn.add(new VCastSourceFile(id,path,display_name,checksum,display_path,unit_index));
    }
  }
  finally {
    stmt.close();
  }
  return toReturn;
}",0.9543624161073826
97261,"public VCastSourceFile(int id,String path,String displayName,int checksum,String displayPath){
  this.id=id;
  this.path=path;
  this.displayName=displayName;
  this.checksum=checksum;
  this.displayPath=displayPath;
}","public VCastSourceFile(int id,String path,String displayName,int checksum,String displayPath,int unitIndex){
  this.id=id;
  this.path=path;
  this.displayName=displayName;
  this.checksum=checksum;
  this.displayPath=displayPath;
  this.unit_index=unitIndex;
}",0.9102296450939458
97262,"private void processInstrumented(IProgressMonitor monitor,VCastDataStore dataStore,Map<String,CoverageUnit> fileNumToCoverageUnit,VCastInstrumentedFile instrumentedFile) throws Exception {
  VCastSourceFile sourceFile=null;
  try {
    sourceFile=dataStore.getSourceFile(instrumentedFile);
  }
 catch (  OseeDataStoreException ex) {
    coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
  }
  if (sourceFile != null) {
    monitor.setTaskName(String.format(""String_Node_Str"",sourceFile.getDisplayName()));
    CoverageUnit sourceFileCoverageUnit=coverageImport.createCoverageUnit(null,sourceFile.getDisplayName(),""String_Node_Str"");
    fileNumToCoverageUnit.put(String.valueOf(sourceFile.getId()),sourceFileCoverageUnit);
    String lisFileName_badPath=instrumentedFile.getLISFile();
    if (!Strings.isValid(lisFileName_badPath)) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str"");
    }
    String normalizedPath=lisFileName_badPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
    File f=new File(normalizedPath);
    String lisFileName=f.getName();
    VCastLisFileParser lisFileParser=new VCastLisFileParser(lisFileName,input.getVCastDirectory());
    sourceFileCoverageUnit.setFileContentsLoader(lisFileParser);
    String sourceFileNamespace=generateNamespace(input.getNamespace(),sourceFile.getDisplayName());
    CoverageUnit sourceFileParent=coverageImport.getOrCreateParent(sourceFileNamespace);
    if (sourceFileParent != null) {
      sourceFileParent.addCoverageUnit(sourceFileCoverageUnit);
    }
 else {
      coverageImport.addCoverageUnit(sourceFileCoverageUnit);
    }
    Collection<VCastFunction> functions=Collections.emptyList();
    try {
      functions=dataStore.getFunctions(instrumentedFile);
    }
 catch (    OseeDataStoreException ex) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
    }
    for (    VCastFunction function : functions) {
      checkForCancelledStatus(monitor);
      processFunction(monitor,dataStore,lisFileParser,instrumentedFile,sourceFileCoverageUnit,function);
    }
    monitor.worked(1);
  }
}","private void processInstrumented(IProgressMonitor monitor,VCastDataStore dataStore,Map<String,CoverageUnit> fileNumToCoverageUnit,VCastInstrumentedFile instrumentedFile) throws Exception {
  VCastSourceFile sourceFile=null;
  try {
    sourceFile=dataStore.getSourceFile(instrumentedFile);
  }
 catch (  OseeDataStoreException ex) {
    coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
  }
  if (sourceFile != null) {
    monitor.setTaskName(String.format(""String_Node_Str"",sourceFile.getDisplayName()));
    CoverageUnit sourceFileCoverageUnit=coverageImport.createCoverageUnit(null,sourceFile.getDisplayName(),""String_Node_Str"");
    fileNumToCoverageUnit.put(String.valueOf(sourceFile.getUnitIndex()),sourceFileCoverageUnit);
    String lisFileName_badPath=instrumentedFile.getLISFile();
    if (!Strings.isValid(lisFileName_badPath)) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str"");
    }
    String normalizedPath=lisFileName_badPath.replaceAll(""String_Node_Str"",""String_Node_Str"");
    File f=new File(normalizedPath);
    String lisFileName=f.getName();
    VCastLisFileParser lisFileParser=new VCastLisFileParser(lisFileName,input.getVCastDirectory());
    sourceFileCoverageUnit.setFileContentsLoader(lisFileParser);
    String sourceFileNamespace=generateNamespace(input.getNamespace(),sourceFile.getDisplayName());
    CoverageUnit sourceFileParent=coverageImport.getOrCreateParent(sourceFileNamespace);
    if (sourceFileParent != null) {
      sourceFileParent.addCoverageUnit(sourceFileCoverageUnit);
    }
 else {
      coverageImport.addCoverageUnit(sourceFileCoverageUnit);
    }
    Collection<VCastFunction> functions=Collections.emptyList();
    try {
      functions=dataStore.getFunctions(instrumentedFile);
    }
 catch (    OseeDataStoreException ex) {
      coverageImport.getLog().logError(""String_Node_Str"" + instrumentedFile.getId() + ""String_Node_Str""+ ex.getMessage());
    }
    for (    VCastFunction function : functions) {
      checkForCancelledStatus(monitor);
      processFunction(monitor,dataStore,lisFileParser,instrumentedFile,sourceFileCoverageUnit,function);
    }
    monitor.worked(1);
  }
}",0.998008408940031
97263,"/** 
 * Creates a new Branch based on the most recent transaction on the parent branch.
 */
public static Branch createWorkingBranchFromTx(TransactionRecord parentTransactionId,String childBranchName,Artifact associatedArtifact) throws OseeCoreException {
  String creationComment=String.format(""String_Node_Str"",parentTransactionId.getBranch().getName(),parentTransactionId.getId());
  final String truncatedName=Strings.truncate(childBranchName,195,true);
  CreateBranchHttpRequestOperation operation=new CreateBranchHttpRequestOperation(BranchType.WORKING,parentTransactionId,truncatedName,-1,associatedArtifact,creationComment,-1,-1);
  operation.setTxCopyBranchType(true);
  Operations.executeWorkAndCheckStatus(operation);
  return operation.getNewBranch();
}","/** 
 * Creates a new Branch based on the most recent transaction on the parent branch.
 */
public static Branch createWorkingBranchFromTx(TransactionRecord parentTransactionId,String childBranchName,Artifact associatedArtifact) throws OseeCoreException {
  String creationComment=String.format(""String_Node_Str"",parentTransactionId.getBranch().getName(),parentTransactionId.getId());
  final String truncatedName=Strings.truncate(childBranchName,195,true);
  CreateBranchHttpRequestOperation operation=new CreateBranchHttpRequestOperation(BranchType.WORKING,parentTransactionId,truncatedName,Lib.generateUuid(),associatedArtifact,creationComment,-1,-1);
  operation.setTxCopyBranchType(true);
  Operations.executeWorkAndCheckStatus(operation);
  return operation.getNewBranch();
}",0.9404915912031048
97264,"public static Branch createPortBranchFromTx(TransactionRecord parentTransactionId,String childBranchName,Artifact associatedArtifact) throws OseeCoreException {
  String creationComment=String.format(""String_Node_Str"",parentTransactionId.getBranch().getName(),parentTransactionId.getId());
  final String truncatedName=Strings.truncate(childBranchName,195,true);
  CreateBranchHttpRequestOperation operation=new CreateBranchHttpRequestOperation(BranchType.PORT,parentTransactionId,truncatedName,-1,associatedArtifact,creationComment,-1,-1);
  operation.setTxCopyBranchType(true);
  Operations.executeWorkAndCheckStatus(operation);
  return operation.getNewBranch();
}","public static Branch createPortBranchFromTx(TransactionRecord parentTransactionId,String childBranchName,Artifact associatedArtifact) throws OseeCoreException {
  String creationComment=String.format(""String_Node_Str"",parentTransactionId.getBranch().getName(),parentTransactionId.getId());
  final String truncatedName=Strings.truncate(childBranchName,195,true);
  CreateBranchHttpRequestOperation operation=new CreateBranchHttpRequestOperation(BranchType.PORT,parentTransactionId,truncatedName,Lib.generateUuid(),associatedArtifact,creationComment,-1,-1);
  operation.setTxCopyBranchType(true);
  Operations.executeWorkAndCheckStatus(operation);
  return operation.getNewBranch();
}",0.9851851851851852
97265,"@Override protected void doTxWork(IProgressMonitor monitor,OseeConnection connection) throws OseeCoreException {
  if (artifactsToPurge == null || artifactsToPurge.isEmpty()) {
    return;
  }
  List<Object[]> batchParameters=new ArrayList<Object[]>();
  int queryId=ArtifactLoader.getNewQueryId();
  Timestamp insertTime=GlobalTime.GreenwichMeanTimestamp();
  try {
    for (    Artifact art : artifactsToPurge) {
      for (      Branch branch : art.getFullBranch().getChildBranches(true)) {
        batchParameters.add(new Object[]{queryId,insertTime,art.getArtId(),branch.getUuid(),SQL3DataType.INTEGER});
      }
    }
    if (batchParameters.size() > 0) {
      ArtifactLoader.insertIntoArtifactJoin(connection,batchParameters);
      IOseeStatement chStmt=ConnectionHandler.getStatement(connection);
      try {
        chStmt.runPreparedQuery(COUNT_ARTIFACT_VIOLATIONS,queryId);
        boolean failed=false;
        StringBuilder sb=new StringBuilder();
        while (chStmt.next()) {
          int artId=chStmt.getInt(""String_Node_Str"");
          long branchUuid=chStmt.getLong(""String_Node_Str"");
          if (recurseChildrenBranches) {
            Branch branch=BranchManager.getBranch(branchUuid);
            Artifact artifactFromId=ArtifactQuery.getArtifactFromId(artId,branch);
            artifactsToPurge.add(artifactFromId);
          }
 else {
            failed=true;
            sb.append(""String_Node_Str"");
            sb.append(artId);
            sb.append(""String_Node_Str"");
            sb.append(branchUuid);
            sb.append(""String_Node_Str"");
          }
        }
        if (failed) {
          throw new OseeCoreException(""String_Node_Str"",sb.toString());
        }
      }
  finally {
        ArtifactLoader.clearQuery(connection,queryId);
        chStmt.close();
      }
    }
    batchParameters.clear();
    queryId=ArtifactLoader.getNewQueryId();
    insertTime=GlobalTime.GreenwichMeanTimestamp();
    for (    Artifact art : artifactsToPurge) {
      batchParameters.add(new Object[]{queryId,insertTime,art.getArtId(),art.getFullBranch().getUuid(),SQL3DataType.INTEGER});
    }
    ArtifactLoader.insertIntoArtifactJoin(connection,batchParameters);
    int transactionJoinId=ArtifactLoader.getNewQueryId();
    insertSelectItems(connection,""String_Node_Str"",""String_Node_Str"",transactionJoinId,insertTime,queryId);
    insertSelectItems(connection,""String_Node_Str"",""String_Node_Str"",transactionJoinId,insertTime,queryId);
    insertSelectItems(connection,""String_Node_Str"",""String_Node_Str"",transactionJoinId,insertTime,queryId);
    ConnectionHandler.runPreparedUpdate(connection,DELETE_FROM_TXS_USING_JOIN_TRANSACTION,transactionJoinId);
    ConnectionHandler.runPreparedUpdate(connection,DELETE_FROM_TX_DETAILS_USING_JOIN_TRANSACTION,transactionJoinId);
    ConnectionHandler.runPreparedUpdate(connection,""String_Node_Str"",transactionJoinId);
    for (    Artifact artifact : artifactsToPurge) {
      ArtifactCache.deCache(artifact);
      artifact.internalSetDeleted();
      for (      RelationLink rel : artifact.getRelationsAll(DeletionFlag.EXCLUDE_DELETED)) {
        rel.markAsPurged();
      }
      for (      Attribute<?> attr : artifact.internalGetAttributes()) {
        attr.markAsPurged();
      }
    }
    success=true;
  }
  finally {
    ArtifactLoader.clearQuery(connection,queryId);
  }
}","@Override protected void doTxWork(IProgressMonitor monitor,OseeConnection connection) throws OseeCoreException {
  if (artifactsToPurge == null || artifactsToPurge.isEmpty()) {
    return;
  }
  List<Object[]> batchParameters=new ArrayList<Object[]>();
  int queryId=ArtifactLoader.getNewQueryId();
  Timestamp insertTime=GlobalTime.GreenwichMeanTimestamp();
  try {
    for (    Artifact art : artifactsToPurge) {
      for (      Branch branch : art.getFullBranch().getChildBranches(true)) {
        batchParameters.add(new Object[]{queryId,insertTime,art.getArtId(),branch.getUuid(),SQL3DataType.INTEGER});
      }
    }
    if (batchParameters.size() > 0) {
      ArtifactLoader.insertIntoArtifactJoin(connection,batchParameters);
      IOseeStatement chStmt=ConnectionHandler.getStatement(connection);
      try {
        chStmt.runPreparedQuery(COUNT_ARTIFACT_VIOLATIONS,queryId);
        boolean failed=false;
        StringBuilder sb=new StringBuilder();
        while (chStmt.next()) {
          int artId=chStmt.getInt(""String_Node_Str"");
          long branchUuid=chStmt.getLong(""String_Node_Str"");
          if (recurseChildrenBranches) {
            Branch branch=BranchManager.getBranch(branchUuid);
            Artifact artifactFromId=ArtifactQuery.getArtifactFromId(artId,branch);
            artifactsToPurge.add(artifactFromId);
          }
 else {
            failed=true;
            sb.append(""String_Node_Str"");
            sb.append(artId);
            sb.append(""String_Node_Str"");
            sb.append(branchUuid);
            sb.append(""String_Node_Str"");
          }
        }
        if (failed) {
          throw new OseeCoreException(""String_Node_Str"",sb.toString());
        }
      }
  finally {
        ArtifactLoader.clearQuery(connection,queryId);
        chStmt.close();
      }
    }
    batchParameters.clear();
    queryId=ArtifactLoader.getNewQueryId();
    insertTime=GlobalTime.GreenwichMeanTimestamp();
    Set<Artifact> childreArtifactsToPurge=new HashSet<Artifact>();
    for (    Artifact art : artifactsToPurge) {
      childreArtifactsToPurge.addAll(art.getDescendants(DeletionFlag.INCLUDE_DELETED));
    }
    artifactsToPurge.addAll(childreArtifactsToPurge);
    for (    Artifact art : artifactsToPurge) {
      batchParameters.add(new Object[]{queryId,insertTime,art.getArtId(),art.getFullBranch().getUuid(),SQL3DataType.INTEGER});
    }
    ArtifactLoader.insertIntoArtifactJoin(connection,batchParameters);
    int transactionJoinId=ArtifactLoader.getNewQueryId();
    insertSelectItems(connection,""String_Node_Str"",""String_Node_Str"",transactionJoinId,insertTime,queryId);
    insertSelectItems(connection,""String_Node_Str"",""String_Node_Str"",transactionJoinId,insertTime,queryId);
    insertSelectItems(connection,""String_Node_Str"",""String_Node_Str"",transactionJoinId,insertTime,queryId);
    ConnectionHandler.runPreparedUpdate(connection,DELETE_FROM_TXS_USING_JOIN_TRANSACTION,transactionJoinId);
    ConnectionHandler.runPreparedUpdate(connection,DELETE_FROM_TX_DETAILS_USING_JOIN_TRANSACTION,transactionJoinId);
    ConnectionHandler.runPreparedUpdate(connection,""String_Node_Str"",transactionJoinId);
    for (    Artifact artifact : artifactsToPurge) {
      ArtifactCache.deCache(artifact);
      artifact.internalSetDeleted();
      for (      RelationLink rel : artifact.getRelationsAll(DeletionFlag.EXCLUDE_DELETED)) {
        rel.markAsPurged();
      }
      for (      Attribute<?> attr : artifact.internalGetAttributes()) {
        attr.markAsPurged();
      }
    }
    success=true;
  }
  finally {
    ArtifactLoader.clearQuery(connection,queryId);
  }
}",0.9623586660941748
97266,"/** 
 * Perform a branch query based on the input query parameters
 * @param branchUuids comma separated list of branch uuids
 * @param branchTypes comma separated list of {@link org.eclipse.osee.framework.core.enums.BranchType BranchType}
 * @param branchStates comma separated list of {@link org.eclipse.osee.framework.core.enums.BranchState BranchState}
 * @param deleted to include deleted branches in the search
 * @param archived to include archived branches in the search
 * @param childOf branch uuid of the parent to search children of
 * @param ancestorOf branch uuid of ancestor to search decendents of
 * @param pretty if the returned JSON should be pretty printed
 * @return JSON representation of the branch query results
 */
@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public Response searchBranchesFromQuery(@QueryParam(""String_Node_Str"") String branchUuids,@QueryParam(""String_Node_Str"") String branchTypes,@QueryParam(""String_Node_Str"") String branchStates,@QueryParam(""String_Node_Str"") boolean deleted,@QueryParam(""String_Node_Str"") boolean archived,@QueryParam(""String_Node_Str"") String nameEquals,@QueryParam(""String_Node_Str"") String namePattern,@QueryParam(""String_Node_Str"") Long childOf,@QueryParam(""String_Node_Str"") Long ancestorOf,@QueryParam(""String_Node_Str"") boolean pretty){
  BranchQueryOptions options=new BranchQueryOptions();
  if (Strings.isValid(branchUuids)) {
    List<Long> branchUuidVals=new LinkedList<Long>();
    for (    String branchUuid : branchUuids.split(""String_Node_Str"")) {
      branchUuidVals.add(Long.parseLong(branchUuid));
    }
    options.setBranchIds(branchUuidVals);
  }
  if (Strings.isValid(branchTypes)) {
    List<BranchType> branchTypeVals=new LinkedList<BranchType>();
    for (    String branchType : branchTypes.split(""String_Node_Str"")) {
      branchTypeVals.add(BranchType.valueOf(branchType.toUpperCase()));
    }
    options.setBranchTypes(branchTypeVals);
  }
  if (Strings.isValid(branchStates)) {
    List<BranchState> branchStateVals=new LinkedList<BranchState>();
    for (    String branchState : branchStates.split(""String_Node_Str"")) {
      branchStateVals.add(BranchState.valueOf(branchState.toUpperCase()));
    }
    options.setBranchStates(branchStateVals);
  }
  options.setIncludeDeleted(deleted);
  options.setIncludeArchived(archived);
  if (Strings.isValid(nameEquals)) {
    options.setNameEquals(nameEquals);
  }
  if (Strings.isValid(namePattern)) {
    options.setNamePattern(namePattern);
  }
  if (childOf != null) {
    options.setIsChildOf(childOf);
  }
  if (ancestorOf != null) {
    options.setIsAncestorOf(ancestorOf);
  }
  List<BranchReadable> results=getResultsFromOptions(options);
  Gson gson=pretty ? prettyG : plainG;
  return Response.ok(gson.toJson(results)).build();
}","/** 
 * Perform a branch query based on the input query parameters
 * @param branchUuids comma separated list of branch uuids
 * @param branchTypes comma separated list of {@link org.eclipse.osee.framework.core.enums.BranchType BranchType}
 * @param branchStates comma separated list of {@link org.eclipse.osee.framework.core.enums.BranchState BranchState}
 * @param deleted to include deleted branches in the search
 * @param archived to include archived branches in the search
 * @param childOf branch uuid of the parent to search children of
 * @param ancestorOf branch uuid of ancestor to search decendents of
 * @param pretty if the returned JSON should be pretty printed
 * @return JSON representation of the branch query results
 */
@GET @Produces(MediaType.APPLICATION_JSON) public Response searchBranchesFromQuery(@QueryParam(""String_Node_Str"") String branchUuids,@QueryParam(""String_Node_Str"") String branchTypes,@QueryParam(""String_Node_Str"") String branchStates,@QueryParam(""String_Node_Str"") boolean deleted,@QueryParam(""String_Node_Str"") boolean archived,@QueryParam(""String_Node_Str"") String nameEquals,@QueryParam(""String_Node_Str"") String namePattern,@QueryParam(""String_Node_Str"") Long childOf,@QueryParam(""String_Node_Str"") Long ancestorOf,@QueryParam(""String_Node_Str"") boolean pretty){
  BranchQueryOptions options=new BranchQueryOptions();
  if (Strings.isValid(branchUuids)) {
    List<Long> branchUuidVals=new LinkedList<Long>();
    for (    String branchUuid : branchUuids.split(""String_Node_Str"")) {
      branchUuidVals.add(Long.parseLong(branchUuid));
    }
    options.setBranchIds(branchUuidVals);
  }
  if (Strings.isValid(branchTypes)) {
    List<BranchType> branchTypeVals=new LinkedList<BranchType>();
    for (    String branchType : branchTypes.split(""String_Node_Str"")) {
      branchTypeVals.add(BranchType.valueOf(branchType.toUpperCase()));
    }
    options.setBranchTypes(branchTypeVals);
  }
  if (Strings.isValid(branchStates)) {
    List<BranchState> branchStateVals=new LinkedList<BranchState>();
    for (    String branchState : branchStates.split(""String_Node_Str"")) {
      branchStateVals.add(BranchState.valueOf(branchState.toUpperCase()));
    }
    options.setBranchStates(branchStateVals);
  }
  options.setIncludeDeleted(deleted);
  options.setIncludeArchived(archived);
  if (Strings.isValid(nameEquals)) {
    options.setNameEquals(nameEquals);
  }
  if (Strings.isValid(namePattern)) {
    options.setNamePattern(namePattern);
  }
  if (childOf != null) {
    options.setIsChildOf(childOf);
  }
  if (ancestorOf != null) {
    options.setIsAncestorOf(ancestorOf);
  }
  List<BranchReadable> results=getResultsFromOptions(options);
  Gson gson=pretty ? prettyG : plainG;
  return Response.ok(gson.toJson(results)).build();
}",0.9955285279914148
97267,"/** 
 * Perform a branch query based on a JSON input
 * @param branchQueryJson JSON of {@link org.eclipse.osee.orcs.rest.model.search.branch.BranchQueryOptions BranchQueryOptions} class
 * @return JSON representation of the branch query results
 */
@Path(""String_Node_Str"") @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response searchBranches(String branchQueryJson){
  BranchQueryOptions options=plainG.fromJson(branchQueryJson,BranchQueryOptions.class);
  List<BranchReadable> results=getResultsFromOptions(options);
  return Response.ok(plainG.toJson(results)).build();
}","/** 
 * Perform a branch query based on a JSON input
 * @param branchQueryJson JSON of {@link org.eclipse.osee.orcs.rest.model.search.branch.BranchQueryOptions BranchQueryOptions} class
 * @return JSON representation of the branch query results
 */
@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public Response searchBranches(String branchQueryJson){
  BranchQueryOptions options=plainG.fromJson(branchQueryJson,BranchQueryOptions.class);
  List<BranchReadable> results=getResultsFromOptions(options);
  return Response.ok(plainG.toJson(results)).build();
}",0.9793559042113956
97268,"@Check public void checkAttributeValidity(XAttributeType attribute){
  String min=attribute.getMin();
  int minOccurrences=0;
  if (!Strings.isEmpty(min)) {
    minOccurrences=Integer.parseInt(min);
    if (minOccurrences > 0 && Strings.isEmpty(attribute.getDefaultValue())) {
      error(""String_Node_Str"",attribute,OseeDslPackage.Literals.XATTRIBUTE_TYPE__DEFAULT_VALUE);
    }
  }
  if (minOccurrences < 0) {
    error(""String_Node_Str"",attribute,OseeDslPackage.Literals.XATTRIBUTE_TYPE__MIN);
  }
  String max=attribute.getMax();
  int maxOccurrences=0;
  if (!Strings.isEmpty(max)) {
    maxOccurrences=Integer.parseInt(max);
  }
  if (minOccurrences > maxOccurrences) {
    error(""String_Node_Str"",attribute,OseeDslPackage.Literals.XATTRIBUTE_TYPE__MAX);
  }
}","@Check public void checkAttributeValidity(XAttributeType attribute){
  String min=attribute.getMin();
  int minOccurrences=0;
  if (!Strings.isEmpty(min)) {
    minOccurrences=Integer.parseInt(min);
    if (minOccurrences > 0 && Strings.isEmpty(attribute.getDefaultValue())) {
      error(""String_Node_Str"",attribute,OseeDslPackage.Literals.XATTRIBUTE_TYPE__DEFAULT_VALUE);
    }
  }
  if (minOccurrences < 0) {
    error(""String_Node_Str"",attribute,OseeDslPackage.Literals.XATTRIBUTE_TYPE__MIN);
  }
  String max=attribute.getMax();
  int maxOccurrences=0;
  if (!Strings.isEmpty(max)) {
    if (org.eclipse.osee.framework.jdk.core.util.Strings.isNumeric(max)) {
      maxOccurrences=Integer.parseInt(max);
    }
 else     if (max.equals(UNLIMITED)) {
      maxOccurrences=Integer.MAX_VALUE;
    }
  }
  if (minOccurrences > maxOccurrences) {
    error(""String_Node_Str"",attribute,OseeDslPackage.Literals.XATTRIBUTE_TYPE__MAX);
  }
}",0.7788235294117647
97269,"@Test public void testInitSearchResults() throws UnsupportedEncodingException {
  MockAtsArtifactProvider provider=new MockAtsArtifactProvider();
  MockDisplayOptionsComponent optionsComp=new MockDisplayOptionsComponent();
  List<Match<ArtifactReadable,AttributeReadable<?>>> resultList=new ArrayList<Match<ArtifactReadable,AttributeReadable<?>>>();
  MockArtifact art=new MockArtifact(""String_Node_Str"",""String_Node_Str"");
  MockAttribute attr=new MockAttribute(CoreAttributeTypes.Name,""String_Node_Str"");
  Match match=new MockMatch(art,attr);
  resultList.add(match);
  provider.setResultList(resultList);
  AtsSearchPresenterImpl<AtsSearchHeaderComponent,AtsSearchParameters> presenter=new AtsSearchPresenterImpl<AtsSearchHeaderComponent,AtsSearchParameters>(provider,new MockLogger());
  MockAtsSearchHeaderComponent headerComp=new MockAtsSearchHeaderComponent();
  MockSearchResultsListComponent resultsComponent=new MockSearchResultsListComponent();
  presenter.initSearchResults(null,headerComp,resultsComponent,optionsComp);
  Assert.assertEquals(3,headerComp.getPrograms().size());
  String programGuid=GUID.create();
  String buildGuid=String.valueOf(Lib.generateUuid());
  String url=""String_Node_Str"" + new UrlQuery().put(""String_Node_Str"",programGuid).put(""String_Node_Str"",buildGuid).put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  presenter.initSearchResults(url,headerComp,resultsComponent,optionsComp);
  Assert.assertEquals(1,resultsComponent.getSearchResults().size());
}","@Test public void testInitSearchResults() throws UnsupportedEncodingException {
  MockAtsArtifactProvider provider=new MockAtsArtifactProvider();
  MockDisplayOptionsComponent optionsComp=new MockDisplayOptionsComponent();
  List<Match<ArtifactReadable,AttributeReadable<?>>> resultList=new ArrayList<Match<ArtifactReadable,AttributeReadable<?>>>();
  MockArtifact art=new MockArtifact(""String_Node_Str"",""String_Node_Str"");
  MockAttribute attr=new MockAttribute(CoreAttributeTypes.Name,""String_Node_Str"");
  Match match=new MockMatch(art,attr);
  resultList.add(match);
  provider.setResultList(resultList);
  AtsSearchPresenterImpl<AtsSearchHeaderComponent,AtsSearchParameters> presenter=new AtsSearchPresenterImpl<AtsSearchHeaderComponent,AtsSearchParameters>(provider,new MockLogger());
  MockAtsSearchHeaderComponent headerComp=new MockAtsSearchHeaderComponent();
  MockSearchResultsListComponent resultsComponent=new MockSearchResultsListComponent();
  presenter.initSearchResults(null,headerComp,resultsComponent,optionsComp);
  Assert.assertEquals(3,headerComp.getPrograms().size());
  String programGuid=GUID.create();
  String buildGuid=""String_Node_Str"";
  String url=""String_Node_Str"" + new UrlQuery().put(""String_Node_Str"",programGuid).put(""String_Node_Str"",buildGuid).put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").toString();
  presenter.initSearchResults(url,headerComp,resultsComponent,optionsComp);
  Assert.assertEquals(1,resultsComponent.getSearchResults().size());
}",0.9837734648425072
97270,"@Override public long getBaselineBranchUuid(String buildArtGuid) throws OseeCoreException {
  return buildArtGuid.hashCode();
}","@Override public long getBaselineBranchUuid(String buildArtGuid) throws OseeCoreException {
  return 12345;
}",0.8813559322033898
97271,"@Test public void testTxCommitSuccess(){
  Iterable<Artifact> writeables=Arrays.asList(artifact1);
  when(txData.getAllWriteables()).thenReturn(writeables);
  txDataManager.txCommitSuccess(txData);
  verify(txData).setTxState(TxState.COMMITTED);
}","@Test public void testTxCommitSuccess(){
  Iterable<Artifact> writeables=Arrays.asList(artifact1);
  List<Relation> empty=Collections.emptyList();
  when(txData.getGraph()).thenReturn(graph);
  when(txData.getAllWriteables()).thenReturn(writeables);
  when(graph.getAdjacencies(artifact1)).thenReturn(adjacencies);
  when(adjacencies.getDirties()).thenReturn(empty);
  txDataManager.txCommitSuccess(txData);
  verify(txData).setTxState(TxState.COMMITTED);
}",0.7017045454545454
97272,"@Override public List<AttributeData> getAttributeData(){
  return attrs;
}","@Override public Iterable<AttributeData> getAttributeData(){
  return attrs;
}",0.9342105263157896
97273,"@Override public List<ArtifactData> getArtifactData(){
  return arts;
}","@Override public Iterable<ArtifactData> getArtifactData(){
  return arts;
}",0.9315068493150684
97274,"@Override public List<RelationData> getRelationData(){
  return rels;
}","@Override public Iterable<RelationData> getRelationData(){
  return rels;
}",0.9315068493150684
97275,"public void txCommitSuccess(TxData txData){
  for (  Artifact writeable : txData.getAllWriteables()) {
    writeable.setNotDirty();
  }
  txData.setTxState(TxState.COMMITTED);
}","public void txCommitSuccess(TxData txData){
  GraphData graph=txData.getGraph();
  for (  Artifact writeable : txData.getAllWriteables()) {
    writeable.setNotDirty();
    RelationNodeAdjacencies adjacencies=graph.getAdjacencies(writeable);
    for (    Relation relation : adjacencies.getDirties()) {
      relation.clearDirty();
    }
  }
  txData.setTxState(TxState.COMMITTED);
}",0.6321428571428571
97276,"@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    int remotePort=getSessionPort(request);
    response.setContentType(""String_Node_Str"");
    String url=null;
    if (remotePort > -1) {
      url=String.format(""String_Node_Str"",request.getRemoteAddr(),remotePort,getLoopbackPostfix(request));
    }
 else {
      url=String.format(""String_Node_Str"",getNormalizedAddress(request.getLocalAddr()),request.getLocalPort(),OseeServerContext.ARTIFACT_CONTEXT,request.getQueryString());
    }
    response.sendRedirect(url);
  }
 catch (  Exception ex) {
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,String.format(""String_Node_Str"",request.getQueryString()));
  }
 finally {
    response.flushBuffer();
  }
}","@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    ISession session=getSessionFromRequest(request);
    String url=null;
    if (session != null) {
      url=String.format(""String_Node_Str"",getRemoteHostUrl(session),getLoopbackPostfix(request));
    }
 else {
      url=String.format(""String_Node_Str"",getNormalizedAddress(request.getLocalAddr()),request.getLocalPort(),OseeServerContext.ARTIFACT_CONTEXT,request.getQueryString());
    }
    response.setContentType(""String_Node_Str"");
    response.sendRedirect(url);
  }
 catch (  Exception ex) {
    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,String.format(""String_Node_Str"",request.getQueryString()));
  }
 finally {
    response.flushBuffer();
  }
}",0.7720403022670025
97277,"@Ignore(""String_Node_Str"") @Test public void testSendingAndReceivingUsingVM() throws InterruptedException {
synchronized (subscribeCallback) {
    connection.subscribe(VM_TOPIC,messageListener,subscribeCallback);
    subscribeCallback.wait(500);
  }
  assertEquals(false,subscribeCallback.failed());
  assertEquals(1,subscribeCallback.getTotalReceived());
  Thread sending=new Thread(new Runnable(){
    @Override public void run(){
      for (int index=0; index < MESSAGE_COUNT; index++) {
        TestMessage message=new TestMessage();
        message.setMessage(""String_Node_Str"" + index);
        try {
          connection.send(VM_TOPIC,message,sendCallback);
        }
 catch (        OseeCoreException ex) {
          fail(ex.getMessage());
        }
      }
    }
  }
);
synchronized (messageListener) {
    sending.start();
    messageListener.wait(500);
  }
  verify(sendCallback,times(MESSAGE_COUNT)).success();
  verify(sendCallback,times(0)).fail(any(Throwable.class));
  assertEquals(MESSAGE_COUNT,messageListener.getTotalReceived());
  List<Data> data=messageListener.getData();
  assertEquals(MESSAGE_COUNT,data.size());
  for (int index=0; index < MESSAGE_COUNT; index++) {
    TestMessage message=data.get(index).getMessage();
    assertEquals(""String_Node_Str"" + index,message.getMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") @Test public void testSendingAndReceivingUsingVM() throws InterruptedException {
synchronized (subscribeCallback) {
    connection.subscribe(VM_TOPIC,messageListener,subscribeCallback);
    subscribeCallback.wait(500);
  }
  assertEquals(false,subscribeCallback.failed());
  assertEquals(1,subscribeCallback.getTotalReceived());
  Thread sending=new Thread(new Runnable(){
    @Override public void run(){
      for (int index=0; index < MESSAGE_COUNT; index++) {
        TestMessage message=new TestMessage();
        message.setMessage(""String_Node_Str"" + index);
        try {
          connection.send(VM_TOPIC,message,sendCallback);
        }
 catch (        OseeCoreException ex) {
          fail(ex.getMessage());
        }
      }
    }
  }
);
synchronized (messageListener) {
    sending.start();
    messageListener.wait(3000);
  }
  verify(sendCallback,times(MESSAGE_COUNT)).success();
  verify(sendCallback,times(0)).fail(any(Throwable.class));
  assertEquals(MESSAGE_COUNT,messageListener.getTotalReceived());
  List<Data> data=messageListener.getData();
  assertEquals(MESSAGE_COUNT,data.size());
  for (int index=0; index < MESSAGE_COUNT; index++) {
    TestMessage message=data.get(index).getMessage();
    assertEquals(""String_Node_Str"" + index,message.getMessage());
  }
}",0.990541051835036
97278,"void start(){
}","public void start(){
}",0.8108108108108109
97279,"public AttributeLoadProcessor(Log logger,AttributeObjectFactory factory){
  super(factory);
}","public AttributeLoadProcessor(Log logger,AttributeObjectFactory factory){
  super(factory);
  this.logger=logger;
}",0.8942307692307693
97280,"@Override protected AttributeData createData(Object conditions,AttributeObjectFactory factory,IOseeStatement chStmt,Options options) throws OseeCoreException {
  AttributeData toReturn=null;
  long branchId=chStmt.getLong(""String_Node_Str"");
  int artId=chStmt.getInt(""String_Node_Str"");
  int attrId=chStmt.getInt(""String_Node_Str"");
  long gammaId=chStmt.getInt(""String_Node_Str"");
  ModificationType modType=ModificationType.getMod(chStmt.getInt(""String_Node_Str""));
  boolean historical=OptionsUtil.isHistorical(options);
  CreateConditions condition=asConditions(conditions);
  if (!condition.isSame(branchId,artId,attrId)) {
    condition.saveConditions(branchId,artId,attrId,gammaId,modType);
    int txId=chStmt.getInt(""String_Node_Str"");
    VersionData version=factory.createVersion(branchId,txId,gammaId,historical);
    if (historical) {
      version.setStripeId(chStmt.getInt(""String_Node_Str""));
    }
    long typeId=chStmt.getLong(""String_Node_Str"");
    String value=chStmt.getString(""String_Node_Str"");
    String uri=chStmt.getString(""String_Node_Str"");
    if (typeId == 167) {
      System.err.println(String.format(""String_Node_Str"",artId,typeId,value));
      System.out.println(""String_Node_Str"");
    }
    toReturn=factory.createAttributeData(version,attrId,typeId,modType,artId,value,uri);
  }
 else {
    if (!historical) {
      logger.warn(""String_Node_Str"",attrId,artId,branchId,condition.previousGammaId,gammaId,condition.previousModType,modType);
    }
  }
  return toReturn;
}","@Override protected AttributeData createData(Object conditions,AttributeObjectFactory factory,IOseeStatement chStmt,Options options) throws OseeCoreException {
  AttributeData toReturn=null;
  long branchId=chStmt.getLong(""String_Node_Str"");
  int artId=chStmt.getInt(""String_Node_Str"");
  int attrId=chStmt.getInt(""String_Node_Str"");
  long gammaId=chStmt.getInt(""String_Node_Str"");
  ModificationType modType=ModificationType.getMod(chStmt.getInt(""String_Node_Str""));
  boolean historical=OptionsUtil.isHistorical(options);
  CreateConditions condition=asConditions(conditions);
  if (!condition.isSame(branchId,artId,attrId)) {
    condition.saveConditions(branchId,artId,attrId,gammaId,modType);
    int txId=chStmt.getInt(""String_Node_Str"");
    VersionData version=factory.createVersion(branchId,txId,gammaId,historical);
    if (historical) {
      version.setStripeId(chStmt.getInt(""String_Node_Str""));
    }
    long typeId=chStmt.getLong(""String_Node_Str"");
    String value=chStmt.getString(""String_Node_Str"");
    String uri=chStmt.getString(""String_Node_Str"");
    toReturn=factory.createAttributeData(version,attrId,typeId,modType,artId,value,uri);
  }
 else {
    if (!historical) {
      logger.warn(""String_Node_Str"",attrId,artId,branchId,condition.previousGammaId,gammaId,condition.previousModType,modType);
    }
  }
  return toReturn;
}",0.9459365190094176
97281,"public static BranchCreationRequest createBranchCreateRequest(int index){
  BranchType branchType=BranchType.values()[Math.abs(index % BranchType.values().length)];
  String branchName=""String_Node_Str"" + index;
  int parentBranchId=index;
  int associatedArtifactId=index * 3;
  int sourceTransactionId=index * 7;
  String branchGuid=GUID.create();
  long branchUuid=0;
  int authorId=index * 7;
  String creationComment=""String_Node_Str"" + index;
  int mergeFromAddressingQueryId=-1;
  int destinationBranchId=-1;
  return new BranchCreationRequest(branchType,sourceTransactionId,parentBranchId,branchGuid,branchName,branchUuid,associatedArtifactId,authorId,creationComment,mergeFromAddressingQueryId,destinationBranchId);
}","public static BranchCreationRequest createBranchCreateRequest(int index){
  BranchType branchType=BranchType.values()[Math.abs(index % BranchType.values().length)];
  String branchName=""String_Node_Str"" + index;
  int parentBranchId=index;
  int associatedArtifactId=index * 3;
  int sourceTransactionId=index * 7;
  String branchGuid=GUID.create();
  long branchUuid=Lib.generateUuid();
  int authorId=index * 7;
  String creationComment=""String_Node_Str"" + index;
  int mergeFromAddressingQueryId=-1;
  int destinationBranchId=-1;
  return new BranchCreationRequest(branchType,sourceTransactionId,parentBranchId,branchGuid,branchName,branchUuid,associatedArtifactId,authorId,creationComment,mergeFromAddressingQueryId,destinationBranchId);
}",0.9870660313138188
97282,"private static MergeBranch createMergeBranch(final Branch sourceBranch,final Branch destBranch,final ArrayList<Integer> expectedArtIds) throws OseeCoreException {
  Timestamp insertTime=GlobalTime.GreenwichMeanTimestamp();
  int mergeAddressingQueryId=ArtifactLoader.getNewQueryId();
  List<Object[]> datas=new LinkedList<Object[]>();
  for (  int artId : expectedArtIds) {
    datas.add(new Object[]{mergeAddressingQueryId,insertTime,artId,sourceBranch.getId(),SQL3DataType.INTEGER});
  }
  MergeBranch mergeBranch=null;
  try {
    ArtifactLoader.insertIntoArtifactJoin(datas);
    int parentTxId=sourceBranch.getBaseTransaction().getId();
    String creationComment=String.format(""String_Node_Str"",sourceBranch.getName(),parentTxId,destBranch.getName());
    String branchName=""String_Node_Str"" + sourceBranch.getShortName() + ""String_Node_Str""+ destBranch.getShortName();
    mergeBranch=(MergeBranch)createBranch(BranchType.MERGE,sourceBranch.getBaseTransaction(),branchName,null,0,UserManager.getUser(),creationComment,mergeAddressingQueryId,destBranch.getId());
    mergeBranch.setSourceBranch(sourceBranch);
    mergeBranch.setDestinationBranch(destBranch);
  }
  finally {
    ArtifactLoader.clearQuery(mergeAddressingQueryId);
  }
  return mergeBranch;
}","private static MergeBranch createMergeBranch(final Branch sourceBranch,final Branch destBranch,final ArrayList<Integer> expectedArtIds) throws OseeCoreException {
  Timestamp insertTime=GlobalTime.GreenwichMeanTimestamp();
  int mergeAddressingQueryId=ArtifactLoader.getNewQueryId();
  List<Object[]> datas=new LinkedList<Object[]>();
  for (  int artId : expectedArtIds) {
    datas.add(new Object[]{mergeAddressingQueryId,insertTime,artId,sourceBranch.getId(),SQL3DataType.INTEGER});
  }
  MergeBranch mergeBranch=null;
  try {
    ArtifactLoader.insertIntoArtifactJoin(datas);
    int parentTxId=sourceBranch.getBaseTransaction().getId();
    String creationComment=String.format(""String_Node_Str"",sourceBranch.getName(),parentTxId,destBranch.getName());
    String branchName=""String_Node_Str"" + sourceBranch.getShortName() + ""String_Node_Str""+ destBranch.getShortName();
    mergeBranch=(MergeBranch)createBranch(BranchType.MERGE,sourceBranch.getBaseTransaction(),branchName,null,Lib.generateUuid(),UserManager.getUser(),creationComment,mergeAddressingQueryId,destBranch.getId());
    mergeBranch.setSourceBranch(sourceBranch);
    mergeBranch.setDestinationBranch(destBranch);
  }
  finally {
    ArtifactLoader.clearQuery(mergeAddressingQueryId);
  }
  return mergeBranch;
}",0.9925343811394892
97283,"private void refreshStateCombo() throws OseeStateException {
  if (stateCombo != null) {
    List<String> names=RelatedToStateColumn.getValidInWorkStates((TeamWorkFlowArtifact)taskableStateMachineArtifact);
    stateCombo.setDataStrings(names.toArray(new String[names.size()]));
  }
}","private void refreshStateCombo() throws OseeStateException {
  if (stateCombo != null && taskableStateMachineArtifact != null) {
    List<String> names=RelatedToStateColumn.getValidInWorkStates((TeamWorkFlowArtifact)taskableStateMachineArtifact);
    stateCombo.setDataStrings(names.toArray(new String[names.size()]));
  }
}",0.9342105263157896
97284,"@Override public Response toResponse(Throwable throwable){
  boolean isError=false;
  String logMessage;
  OseeWebApplicationException exception;
  if (throwable instanceof OseeWebApplicationException) {
    logMessage=OSEE_APPLICATION_EXCEPTION_TYPE;
    exception=((OseeWebApplicationException)throwable);
  }
 else   if (throwable instanceof WebApplicationException) {
    logMessage=APPLICATION_EXCEPTION_TYPE;
    WebApplicationException webAppException=((WebApplicationException)throwable);
    Response response=webAppException.getResponse();
    int statusCode=response.getStatus();
    String message=webAppException.getMessage();
    exception=new OseeWebApplicationException(throwable,Status.fromStatusCode(statusCode),message);
  }
 else {
    isError=true;
    logMessage=INTERNAL_SERVER_ERROR_TYPE;
    exception=new OseeWebApplicationException(throwable,Status.INTERNAL_SERVER_ERROR);
  }
  ErrorResponse errorResponse=exception.getErrorResponse();
  if (isError) {
    logger.error(throwable,""String_Node_Str"",logMessage,errorResponse);
  }
 else {
    logger.info(throwable,""String_Node_Str"",logMessage,errorResponse);
  }
  return exception.getResponse();
}","@Override public Response toResponse(Throwable throwable){
  boolean isError=false;
  String logMessage;
  OseeWebApplicationException exception;
  if (throwable instanceof OseeWebApplicationException) {
    logMessage=OSEE_APPLICATION_EXCEPTION_TYPE;
    exception=((OseeWebApplicationException)throwable);
  }
 else   if (throwable instanceof WebApplicationException) {
    logMessage=APPLICATION_EXCEPTION_TYPE;
    WebApplicationException webAppException=((WebApplicationException)throwable);
    Response response=webAppException.getResponse();
    int statusCode=response.getStatus();
    String message=webAppException.getMessage();
    javax.ws.rs.core.Response.StatusType status=Status.fromStatusCode(statusCode);
    if (status == null) {
      status=newStatusType(statusCode,Family.SERVER_ERROR,SEE_HTTP_STATUS_CODES);
    }
    exception=new OseeWebApplicationException(throwable,status,message);
  }
 else {
    isError=true;
    logMessage=INTERNAL_SERVER_ERROR_TYPE;
    exception=new OseeWebApplicationException(throwable,Status.INTERNAL_SERVER_ERROR);
  }
  ErrorResponse errorResponse=exception.getErrorResponse();
  if (isError) {
    logger.error(throwable,""String_Node_Str"",logMessage,errorResponse);
  }
 else {
    logger.info(throwable,""String_Node_Str"",logMessage,errorResponse);
  }
  return exception.getResponse();
}",0.9063492063492063
97285,"private static ErrorResponse newErrorResponse(Throwable throwable,Status errorStatus,String errorMsg){
  ErrorResponse response=new ErrorResponse();
  String exceptionMsg=throwable != null ? Lib.exceptionToString(throwable) : EXCEPTION_NOT_AVAILABLE;
  response.setException(exceptionMsg);
  String errorMsgToSet=errorMsg;
  if (errorMsgToSet == null) {
    errorMsgToSet=throwable != null ? throwable.getLocalizedMessage() : DEFAULT_ERROR_MESSAGE;
  }
  response.setErrorMessage(errorMsgToSet);
  Status status=errorStatus != null ? errorStatus : Status.INTERNAL_SERVER_ERROR;
  response.setErrorCode(status.getStatusCode());
  response.setErrorReason(status.getReasonPhrase());
  response.setErrorType(status.getFamily().toString());
  return response;
}","private static ErrorResponse newErrorResponse(Throwable throwable,StatusType errorStatus,String errorMsg){
  ErrorResponse response=new ErrorResponse();
  String exceptionMsg=throwable != null ? Lib.exceptionToString(throwable) : EXCEPTION_NOT_AVAILABLE;
  response.setException(exceptionMsg);
  String errorMsgToSet=errorMsg;
  if (errorMsgToSet == null) {
    errorMsgToSet=throwable != null ? throwable.getLocalizedMessage() : DEFAULT_ERROR_MESSAGE;
  }
  response.setErrorMessage(errorMsgToSet);
  StatusType status=errorStatus != null ? errorStatus : Status.INTERNAL_SERVER_ERROR;
  response.setErrorCode(status.getStatusCode());
  response.setErrorReason(status.getReasonPhrase());
  response.setErrorType(status.getFamily().toString());
  return response;
}",0.9947368421052633
97286,"public OseeWebApplicationException(Throwable cause,Status status,String message,Object... args){
  super(cause,status);
  this.errorStatus=status;
  if (message != null) {
    this.errorMessage=formatMessage(message,args);
  }
 else {
    this.errorMessage=null;
  }
  this.errorResponse=newErrorResponse(getCause(),errorStatus,errorMessage);
}","public OseeWebApplicationException(Throwable cause,StatusType status,String message,Object... args){
  super(cause,status.getStatusCode());
  this.errorStatus=status;
  if (message != null) {
    this.errorMessage=formatMessage(message,args);
  }
 else {
    this.errorMessage=null;
  }
  this.errorResponse=newErrorResponse(getCause(),errorStatus,errorMessage);
}",0.9717514124293786
97287,"public Status getErrorStatus(){
  return errorStatus;
}","public StatusType getErrorStatus(){
  return errorStatus;
}",0.9649122807017544
97288,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  File[] files;
  if (sourceFile.isDirectory()) {
    files=sourceFile.listFiles(extractor.getFileFilter());
  }
 else {
    files=new File[]{sourceFile};
  }
  double workPercentage=1.0 / files.length;
  extractArtifacts(monitor,workPercentage,files,collector,collector.getParentRoughArtifact());
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  File[] files;
  files=new File[]{sourceFile};
  double workPercentage=1.0 / files.length;
  extractArtifacts(monitor,workPercentage,files,collector,collector.getParentRoughArtifact());
}",0.8268330733229329
97289,"public List<String> getGuids(){
  return Artifacts.toGuids(editor.getLoadedArtifacts());
}","public List<String> getGuids(){
  if (editor.isReloadTabShown() && (iWorldEditorProvider instanceof WorldEditorReloadProvider)) {
    WorldEditorReloadProvider provider=(WorldEditorReloadProvider)iWorldEditorProvider;
    return provider.getValidGuids();
  }
 else {
    return Artifacts.toGuids(editor.getLoadedArtifacts());
  }
}",0.2992874109263658
97290,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  this.managedForm=managedForm;
  try {
    updateTitleBar();
    bodyComp=managedForm.getForm().getBody();
    bodyComp.setLayout(new GridLayout(1,false));
    bodyComp.setLayoutData(new GridData(SWT.LEFT,SWT.LEFT,true,false));
    Button reloadButton=new Button(bodyComp,SWT.PUSH);
    reloadButton.setText(""String_Node_Str"");
    reloadButton.setImage(ImageManager.getImage(FrameworkImage.REFRESH));
    final FormPage page=this;
    reloadButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        loadEditor(page);
      }
    }
);
    FormsUtil.addHeadingGradient(editor.getToolkit(),managedForm.getForm(),true);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  this.managedForm=managedForm;
  try {
    updateTitleBar();
    bodyComp=managedForm.getForm().getBody();
    bodyComp.setLayout(new GridLayout(1,false));
    bodyComp.setLayoutData(new GridData(SWT.LEFT,SWT.LEFT,true,false));
    if (provider.getValidGuids().isEmpty()) {
      managedForm.getToolkit().createLabel(bodyComp,""String_Node_Str"");
    }
 else {
      Button reloadButton=new Button(bodyComp,SWT.PUSH);
      reloadButton.setText(""String_Node_Str"");
      reloadButton.setImage(ImageManager.getImage(FrameworkImage.REFRESH));
      final FormPage page=this;
      reloadButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          loadEditor(page);
        }
      }
);
    }
    FormsUtil.addHeadingGradient(editor.getToolkit(),managedForm.getForm(),true);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
}",0.8836712913553896
97291,"public void processRow(String[] row) throws OseeCoreException {
  boolean isHeaderRow=false, foundDataType=false, isList, isNewRequirement=false;
  int rowIndex, documentIndex=-1, isRequirementIndex=-1, dataTypeIndex=-1;
  for (rowIndex=0; rowIndex < row.length; rowIndex++) {
    RowTypeEnum rowType=rowIndexToRowTypeMap.get(rowIndex);
    if (rowType == RowTypeEnum.DOCUMENT_APPLICABILITY) {
      documentIndex=rowIndex;
    }
 else     if (rowType == RowTypeEnum.IS_REQ) {
      isRequirementIndex=rowIndex;
    }
 else     if (rowType == RowTypeEnum.DATA_TYPE) {
      dataTypeIndex=rowIndex;
    }
  }
  if (isRequirementIndex > -1) {
    String rowValue=row[isRequirementIndex].toLowerCase().trim();
    isNewRequirement=(rowValue.equals(""String_Node_Str""));
  }
 else   if (dataTypeIndex > -1) {
    String rowValue=row[dataTypeIndex];
    isNewRequirement=rowValue.contains(REQUIREMENT_SUBSTRING);
  }
  inHeaderRow=(inHeaderRow && !isNewRequirement);
  if (documentIndex > -1) {
    String rowValue=row[documentIndex].toLowerCase().trim();
    boolean emptyValue=(rowValue.equals(""String_Node_Str"") || rowValue.equals(""String_Node_Str"") || rowValue.equals(""String_Node_Str"")|| rowValue.equals(""String_Node_Str""));
    if (inHeaderRow || emptyValue || isNewRequirement) {
      if (inArtifact || inHeaderRow) {
        processArtifact();
        publishInLine=!emptyValue;
        if (isNewRequirement) {
          numberRequirements++;
        }
        if (inHeaderRow) {
          mergeFirstRequirement();
        }
        if (emptyValue) {
          if (numberRequirements <= 1) {
            mergeFirstRequirement();
          }
          numberRequirements=0;
          headerArtifact=null;
        }
      }
      inArtifact=false;
      isHeaderRow=emptyValue;
      inHeaderRow=isHeaderRow || (inHeaderRow && !isNewRequirement);
      isRequirement=false;
    }
 else {
      if (Strings.isValid(documentApplicability)) {
        if (rowValue.indexOf(documentApplicability.toLowerCase()) == -1) {
          return;
        }
      }
      inHeaderRow=(inHeaderRow && !isNewRequirement);
    }
  }
  if (!rowIndexToRowTypeMap.isEmpty()) {
    isList=false;
    int requirementIndex=-1;
    String requirementColumn=""String_Node_Str"";
    boolean isRequirementColumn=false;
    for (rowIndex=0; rowIndex < row.length; rowIndex++) {
      isRequirementColumn=false;
      RowTypeEnum rowType=rowIndexToRowTypeMap.get(rowIndex);
      String rowValue=row[rowIndex];
switch (rowType) {
case REQUIREMENTS:
        if (isHeaderRow) {
          String noHTML=clearHTML(rowValue);
          String[] parsed=noHTML.split(""String_Node_Str"");
          boolean foundNumber=false;
          paragraphName=""String_Node_Str"";
          for (int i=0; i < parsed.length; i++) {
            if (!parsed[i].equals(""String_Node_Str"")) {
              if (!foundNumber) {
                paragraphNumber=parsed[i].trim();
                foundNumber=true;
              }
 else {
                paragraphName+=""String_Node_Str"" + parsed[i].trim();
              }
            }
          }
          rowValue=""String_Node_Str"";
        }
      requirementIndex=rowIndex;
    isRequirementColumn=true;
  requirementColumn=rowValue;
break;
case ID:
break;
case DOCUMENT_APPLICABILITY:
break;
case VERIFICATION_CRITERIA:
break;
case PARENT_ID:
break;
case GUID:
guidString=GUID.checkOrCreate(rowValue.trim());
if (Strings.isValid(guidString)) {
postProcessGuids.add(guidString);
}
break;
case IS_REQ:
if (!foundDataType) {
isRequirement=rowValue.trim().equals(""String_Node_Str"");
}
break;
case SUBSYSTEM:
subsystem=rowValue.trim();
break;
case DATA_TYPE:
foundDataType=true;
DataTypeEnum dataType=DataTypeEnum.fromString(rowValue.trim());
switch (dataType) {
case HEADING:
isRequirement=false;
lastDataType=DataTypeEnum.HEADING;
break;
case REQUIREMENT:
isRequirement=true;
lastDataType=DataTypeEnum.REQUIREMENT;
break;
case TABLE:
case INFORMATION:
case FIGURE:
isRequirement=lastDataType.equals(DataTypeEnum.REQUIREMENT);
break;
case NOT_DEFINED:
isRequirement=lastDataType.equals(DataTypeEnum.REQUIREMENT);
break;
case LIST:
isRequirement=lastDataType.equals(DataTypeEnum.REQUIREMENT);
isList=true;
break;
case OTHER:
foundDataType=false;
lastDataType=DataTypeEnum.OTHER;
break;
}
break;
case OBJECT_NUMBER:
if (!Strings.isValid(paragraphNumber)) {
paragraphNumber=rowValue;
}
break;
case PARAGRAPH_HEADING:
if (!inHeaderRow) {
paragraphName=rowValue.trim();
}
break;
case CHANGE_STATUS:
case OBJECT_HEADING:
case OBJECT_TEXT:
case CHANGE_RATIONALE:
case LINKS:
case OTHER:
break;
}
if (!isRequirementColumn) {
if (inArtifact) {
ListIterator<String> iter=theArtifact.listIterator(rowIndex);
String theColumnValue=iter.next();
theColumnValue+=""String_Node_Str"" + rowValue.trim();
iter.set(theColumnValue);
}
 else {
theArtifact.add(rowValue.trim());
}
}
 else {
if (!inArtifact) {
theArtifact.add(""String_Node_Str"");
}
}
}
ListIterator<String> iter=theArtifact.listIterator(requirementIndex);
String theColumnValue=iter.next();
if (isList) {
requirementColumn=processList(requirementColumn);
}
theColumnValue+=""String_Node_Str"" + requirementColumn.trim();
iter.set(theColumnValue);
}
inArtifact=true;
}","public void processRow(String[] row) throws OseeCoreException {
  boolean isHeaderRow=false, foundDataType=false, isList, isNewRequirement=false;
  int rowIndex, documentIndex=-1, isRequirementIndex=-1, dataTypeIndex=-1;
  for (rowIndex=0; rowIndex < row.length; rowIndex++) {
    RowTypeEnum rowType=rowIndexToRowTypeMap.get(rowIndex);
    if (rowType == RowTypeEnum.DOCUMENT_APPLICABILITY) {
      documentIndex=rowIndex;
    }
 else     if (rowType == RowTypeEnum.IS_REQ) {
      isRequirementIndex=rowIndex;
    }
 else     if (rowType == RowTypeEnum.DATA_TYPE) {
      dataTypeIndex=rowIndex;
    }
  }
  if (isRequirementIndex > -1) {
    String rowValue=row[isRequirementIndex].toLowerCase().trim();
    isNewRequirement=(rowValue.equals(""String_Node_Str""));
  }
 else   if (dataTypeIndex > -1) {
    String rowValue=row[dataTypeIndex];
    isNewRequirement=rowValue.contains(REQUIREMENT_SUBSTRING);
  }
  inHeaderRow=(inHeaderRow && !isNewRequirement);
  if (documentIndex > -1) {
    String rowValue=row[documentIndex].toLowerCase().trim();
    boolean emptyValue=(rowValue.equals(""String_Node_Str"") || rowValue.equals(""String_Node_Str"") || rowValue.equals(""String_Node_Str"")|| rowValue.equals(""String_Node_Str""));
    if (inHeaderRow || emptyValue || isNewRequirement) {
      if (inArtifact || inHeaderRow) {
        processArtifact();
        publishInLine=!emptyValue;
        if (isNewRequirement) {
          numberRequirements++;
        }
        if (inHeaderRow) {
          mergeFirstRequirement();
        }
        if (emptyValue) {
          if (numberRequirements <= 1) {
            mergeFirstRequirement();
          }
          numberRequirements=0;
          headerArtifact=null;
        }
      }
      inArtifact=false;
      isHeaderRow=emptyValue;
      inHeaderRow=isHeaderRow || (inHeaderRow && !isNewRequirement);
      isRequirement=false;
    }
 else {
      if (Strings.isValid(documentApplicability)) {
        if (rowValue.indexOf(documentApplicability.toLowerCase()) == -1) {
          return;
        }
      }
      inHeaderRow=(inHeaderRow && !isNewRequirement);
    }
  }
  if (!rowIndexToRowTypeMap.isEmpty()) {
    isList=false;
    int requirementIndex=-1;
    String requirementColumn=""String_Node_Str"";
    boolean isRequirementColumn=false;
    for (rowIndex=0; rowIndex < row.length; rowIndex++) {
      isRequirementColumn=false;
      RowTypeEnum rowType=rowIndexToRowTypeMap.get(rowIndex);
      String rowValue=row[rowIndex];
switch (rowType) {
case REQUIREMENTS:
        if (isHeaderRow) {
          String noHTML=clearHTML(rowValue);
          String[] parsed=noHTML.split(""String_Node_Str"");
          boolean foundNumber=false;
          paragraphName=""String_Node_Str"";
          for (int i=0; i < parsed.length; i++) {
            if (!parsed[i].equals(""String_Node_Str"")) {
              if (!foundNumber) {
                paragraphNumber=parsed[i].trim();
                foundNumber=true;
              }
 else {
                paragraphName+=""String_Node_Str"" + parsed[i].trim();
              }
            }
          }
          rowValue=""String_Node_Str"";
        }
      requirementIndex=rowIndex;
    isRequirementColumn=true;
  requirementColumn=rowValue;
break;
case ID:
break;
case DOCUMENT_APPLICABILITY:
break;
case VERIFICATION_CRITERIA:
break;
case PARENT_ID:
break;
case GUID:
guidString=GUID.checkOrCreate(rowValue.trim());
if (Strings.isValid(guidString)) {
postProcessGuids.add(guidString);
}
break;
case IS_REQ:
if (!foundDataType) {
isRequirement=rowValue.trim().equals(""String_Node_Str"");
}
break;
case SUBSYSTEM:
subsystem=rowValue.trim();
break;
case DATA_TYPE:
foundDataType=true;
DataTypeEnum dataType=DataTypeEnum.fromString(rowValue.trim());
switch (dataType) {
case HEADING:
isRequirement=false;
lastDataType=DataTypeEnum.HEADING;
break;
case REQUIREMENT:
isRequirement=true;
lastDataType=DataTypeEnum.REQUIREMENT;
break;
case TABLE:
case INFORMATION:
case FIGURE:
isRequirement=lastDataType.equals(DataTypeEnum.REQUIREMENT);
break;
case NOT_DEFINED:
isRequirement=lastDataType.equals(DataTypeEnum.REQUIREMENT);
break;
case LIST:
isRequirement=lastDataType.equals(DataTypeEnum.REQUIREMENT);
isList=true;
break;
case OTHER:
foundDataType=false;
lastDataType=DataTypeEnum.OTHER;
break;
}
break;
case OBJECT_NUMBER:
if (!Strings.isValid(paragraphNumber)) {
paragraphNumber=rowValue;
}
break;
case PARAGRAPH_HEADING:
String rowLower=rowValue.trim().toLowerCase();
boolean emptyValue=(rowLower.equals(""String_Node_Str"") || rowLower.equals(""String_Node_Str"") || rowLower.equals(""String_Node_Str"")|| rowValue.equals(""String_Node_Str""));
if (!inHeaderRow && !emptyValue) {
paragraphName=rowValue.trim();
}
break;
case CHANGE_STATUS:
case OBJECT_HEADING:
case OBJECT_TEXT:
case CHANGE_RATIONALE:
case LINKS:
case OTHER:
break;
}
if (!isRequirementColumn) {
if (inArtifact) {
ListIterator<String> iter=theArtifact.listIterator(rowIndex);
String theColumnValue=iter.next();
theColumnValue+=""String_Node_Str"" + rowValue.trim();
iter.set(theColumnValue);
}
 else {
theArtifact.add(rowValue.trim());
}
}
 else {
if (!inArtifact) {
theArtifact.add(""String_Node_Str"");
}
}
}
ListIterator<String> iter=theArtifact.listIterator(requirementIndex);
String theColumnValue=iter.next();
if (isList) {
requirementColumn=processList(requirementColumn);
}
theColumnValue+=""String_Node_Str"" + requirementColumn.trim();
iter.set(theColumnValue);
}
inArtifact=true;
}",0.9781790820165538
97292,"public void searchAndLoad(){
  List<String> validGuids=getValidGuids();
  if (validGuids.isEmpty()) {
    AWorkbench.popup(""String_Node_Str"");
  }
 else {
    artifacts=ArtifactQuery.getArtifactListFromIds(new ArrayList<String>(validGuids),AtsUtil.getAtsBranch());
    AtsBulkLoad.bulkLoadArtifacts(artifacts);
  }
  reload=false;
}","public boolean searchAndLoad(){
  List<String> validGuids=getValidGuids();
  if (validGuids.isEmpty()) {
    AWorkbench.popup(""String_Node_Str"");
  }
 else {
    artifacts=ArtifactQuery.getArtifactListFromIds(new ArrayList<String>(validGuids),AtsUtil.getAtsBranch());
    AtsBulkLoad.bulkLoadArtifacts(artifacts);
  }
  reload=false;
  return artifacts.size() > 0;
}",0.9398280802292264
97293,"private void loadEditor(final FormPage page){
  LoadAndRefreshJob loadAndRefresh=new LoadAndRefreshJob(provider.getName());
  Jobs.startJob(loadAndRefresh,false,new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          editor.addPages();
          editor.removePage(0);
        }
      }
);
    }
  }
);
}","private void loadEditor(final FormPage page){
  final LoadAndRefreshJob loadAndRefresh=new LoadAndRefreshJob(provider.getName());
  Jobs.startJob(loadAndRefresh,false,new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          if (loadAndRefresh.isSuccess()) {
            editor.addPages();
            editor.removePage(0);
          }
        }
      }
);
    }
  }
);
}",0.9287257019438444
97294,"@Override protected IStatus run(IProgressMonitor monitor){
  if (provider.getValidGuids().isEmpty()) {
    AWorkbench.popup(""String_Node_Str"");
  }
 else {
    provider.searchAndLoad();
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  if (provider.getValidGuids().isEmpty()) {
    AWorkbench.popup(""String_Node_Str"");
    success=false;
  }
 else {
    success=provider.searchAndLoad();
  }
  return Status.OK_STATUS;
}",0.9416846652267818
97295,"@Override public void done(IJobChangeEvent event){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      editor.addPages();
      editor.removePage(0);
    }
  }
);
}","@Override public void done(IJobChangeEvent event){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      if (loadAndRefresh.isSuccess()) {
        editor.addPages();
        editor.removePage(0);
      }
    }
  }
);
}",0.8849557522123894
97296,"private Artifact createArtifact(IProgressMonitor monitor,RoughArtifact roughArtifact,Artifact realParent) throws OseeCoreException {
  Artifact realArtifact=roughToRealArtifact.get(roughArtifact);
  if (realArtifact != null) {
    return realArtifact;
  }
  realArtifact=artifactResolver.resolve(roughArtifact,transaction.getBranch(),realParent,destinationArtifact);
  unmatchedArtifacts.remove(realArtifact);
  for (  RoughArtifact childRoughArtifact : roughArtifact.getDescendants()) {
    Artifact childArtifact=createArtifact(monitor,childRoughArtifact,realArtifact);
    if (areValid(realArtifact,childArtifact)) {
      removeOtherParent(childArtifact,realArtifact);
      if (!childArtifact.hasParent()) {
        realArtifact.addChild(importArtifactOrder,childArtifact);
      }
    }
    if (extractor != null) {
      extractor.artifactCreated(childArtifact);
    }
  }
  if (realArtifact != null) {
    realArtifact.persist(transaction);
  }
  return realArtifact;
}","private Artifact createArtifact(IProgressMonitor monitor,RoughArtifact roughArtifact,Artifact realParent) throws OseeCoreException {
  Artifact realArtifact=roughToRealArtifact.get(roughArtifact);
  if (realArtifact != null) {
    return realArtifact;
  }
  realArtifact=artifactResolver.resolve(roughArtifact,transaction.getBranch(),realParent,destinationArtifact);
  unmatchedArtifacts.remove(realArtifact);
  for (  RoughArtifact childRoughArtifact : roughArtifact.getDescendants()) {
    Artifact childArtifact=createArtifact(monitor,childRoughArtifact,realArtifact);
    if (areValid(realArtifact,childArtifact)) {
      removeOtherParent(childArtifact,realArtifact);
      if (!childArtifact.hasParent()) {
        realArtifact.addChild(importArtifactOrder,childArtifact);
      }
    }
    if ((extractor != null) && (extractor.artifactCreated(childArtifact))) {
      childArtifact.persist(transaction);
    }
  }
  if (realArtifact != null) {
    realArtifact.persist(transaction);
  }
  return realArtifact;
}",0.940881763527054
97297,"/** 
 * Called after the rough artifact is converted to a real artifact
 * @param theArtifact The artifact that has been created
 */
public void artifactCreated(Artifact theArtifact){
}","/** 
 * Called after the rough artifact is converted to a real artifact
 * @param theArtifact The artifact that has been created
 * @return true if theArtifact has been modified
 */
@Override public boolean artifactCreated(Artifact theArtifact){
  return false;
}",0.8080357142857143
97298,"@Override public void artifactCreated(Artifact theArtifact){
  String artifactGuid=theArtifact.getGuid();
  if (postProcessGuids.contains(artifactGuid)) {
    try {
      List<Integer> Ids=theArtifact.getAttributeIds(CoreAttributeTypes.ImageContent);
      List<String> HTML=theArtifact.getAttributeValues(CoreAttributeTypes.HTMLContent);
      theArtifact.deleteAttributes(CoreAttributeTypes.HTMLContent);
      for (      String htmlVal : HTML) {
        int iCount=0;
        for (        Integer imageNumber : Ids) {
          htmlVal=htmlVal.replaceAll(IMAGE_BASE_NAME + Integer.toString(iCount),imageNumber.toString());
          iCount++;
        }
        theArtifact.addAttribute(CoreAttributeTypes.HTMLContent,htmlVal);
      }
    }
 catch (    OseeCoreException e) {
    }
  }
}","@Override public boolean artifactCreated(Artifact theArtifact){
  String artifactGuid=theArtifact.getGuid();
  boolean toReturn=false;
  if (postProcessGuids.contains(artifactGuid)) {
    try {
      List<Integer> Ids=theArtifact.getAttributeIds(CoreAttributeTypes.ImageContent);
      List<String> HTML=theArtifact.getAttributeValues(CoreAttributeTypes.HTMLContent);
      for (      String htmlVal : HTML) {
        int iCount=0;
        for (        Integer imageNumber : Ids) {
          htmlVal=htmlVal.replaceAll(IMAGE_BASE_NAME + Integer.toString(iCount),imageNumber.toString());
          iCount++;
        }
        if (iCount > 0 || toReturn) {
          theArtifact.deleteAttributes(CoreAttributeTypes.HTMLContent);
          theArtifact.addAttribute(CoreAttributeTypes.HTMLContent,htmlVal);
          toReturn=true;
        }
      }
    }
 catch (    OseeCoreException e) {
    }
  }
  return toReturn;
}",0.5682483889865261
97299,public void artifactCreated(Artifact theArtifact);,public boolean artifactCreated(Artifact theArtifact);,0.912621359223301
97300,"private String getAssigneesStr(IAtsWorkItem workItem,ArtifactReadable action){
  String results=""String_Node_Str"";
  if (isShowHeaderFull()) {
    results=workItem.getStateMgr().getAssigneesStr();
  }
 else {
    results=action.getSoleAttributeAsString(AtsAttributeTypes.CurrentState);
  }
  return results;
}","private String getAssigneesStr(IAtsWorkItem workItem,ArtifactReadable action){
  String results=""String_Node_Str"";
  if (isShowHeaderFull()) {
    results=workItem.getStateMgr().getAssigneesStr();
  }
 else {
    String currState=action.getSoleAttributeAsString(AtsAttributeTypes.CurrentState);
    String assignees=currState.split(""String_Node_Str"")[1];
    assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
    assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
    assignees=assignees.replaceAll(""String_Node_Str"",""String_Node_Str"");
    results=assignees;
  }
  return results;
}",0.6501614639397201
97301,"@Test public void testGetArtifactListFromType() throws OseeCoreException {
  List<Artifact> artifacts=ArtifactQuery.getArtifactListFromType(SoftwareRequirement,DemoBranches.SAW_Bld_1,DeletionFlag.INCLUDE_DELETED);
  Assert.assertFalse(""String_Node_Str"",artifacts.isEmpty());
  boolean pass=true;
  for (  Artifact artifact : artifacts) {
    if (!artifact.isOfType(SoftwareRequirement)) {
      pass=false;
      break;
    }
  }
  Assert.assertTrue(""String_Node_Str"",pass);
}","@Test public void testGetArtifactListFromType() throws OseeCoreException {
  Set<Artifact> searchedArtifacts=new LinkedHashSet<Artifact>();
  List<Branch> branches=BranchManager.getBranches(new BranchFilter(BranchType.BASELINE));
  for (  IOseeBranch branch : branches) {
    List<Artifact> results=ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.SoftwareRequirement,branch,DeletionFlag.INCLUDE_DELETED);
    searchedArtifacts.addAll(results);
  }
  Assert.assertTrue(""String_Node_Str"",searchedArtifacts.size() > 0);
  String firstGuid=""String_Node_Str"";
  Boolean pass=false;
  for (  Artifact a : searchedArtifacts) {
    if (""String_Node_Str"" == firstGuid) {
      firstGuid=a.getBranchGuid();
    }
 else {
      if (firstGuid != a.getBranchGuid()) {
        pass=true;
        break;
      }
    }
  }
  Assert.assertTrue(""String_Node_Str"",pass);
}",0.4053851907255049
97302,"/** 
 * This will not clean sub-folders
 */
@Override public void cleanOldBatchFolders(){
  File[] files=BATCHES.listFiles();
  for (  File file : files) {
    if (file.isDirectory()) {
      File delete=new File(file,DELETE_MARKER);
      boolean deleteFolder=delete.exists();
      if (deleteFolder) {
        File[] toDelete=file.listFiles();
        for (        File f : toDelete) {
          f.delete();
        }
        file.delete();
      }
    }
  }
}","/** 
 * This will not clean sub-folders
 */
@Override public void cleanOldBatchFolders(){
  if (BATCHES.exists()) {
    File[] files=BATCHES.listFiles();
    if (files != null) {
      for (      File file : files) {
        if (file.isDirectory()) {
          File delete=new File(file,DELETE_MARKER);
          boolean deleteFolder=delete.exists();
          if (deleteFolder) {
            File[] toDelete=file.listFiles();
            for (            File f : toDelete) {
              f.delete();
            }
            file.delete();
          }
        }
      }
    }
  }
}",0.7965616045845272
97303,"/** 
 * ds component method
 */
public void start(){
  folder=oteServerFolder.getCacheFolder();
  if (!folder.exists()) {
    if (!folder.mkdirs()) {
      throw new RuntimeException(""String_Node_Str"" + folder.getAbsolutePath());
    }
  }
  if (!folder.isDirectory()) {
    throw new IllegalStateException(""String_Node_Str"" + folder.getAbsolutePath());
  }
  clean();
}","/** 
 * ds component method
 */
public void start(){
  folder=oteServerFolder.getCacheFolder();
  if (!folder.exists()) {
    if (!folder.mkdirs()) {
      OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"" + folder.getAbsolutePath());
    }
  }
  if (!folder.isDirectory()) {
    OseeLog.log(getClass(),Level.SEVERE,""String_Node_Str"" + folder.getAbsolutePath());
  }
  clean();
}",0.8286852589641435
97304,"private void clean(){
  File[] bundleFolders=folder.listFiles();
  for (  File bundleFolder : bundleFolders) {
    if (bundleFolder.isDirectory()) {
      File[] jars=bundleFolder.listFiles(new FileFilter(){
        @Override public boolean accept(        File file){
          return file.getAbsolutePath().endsWith(""String_Node_Str"");
        }
      }
);
      if (jars.length == 0) {
        if (bundleFolder.listFiles().length == 0) {
          bundleFolder.delete();
        }
      }
 else {
        for (        File jar : jars) {
          File dateFile=new File(jar.getAbsolutePath() + ""String_Node_Str"");
          if (dateFile.exists()) {
            if (isDateFileOld(dateFile)) {
              if (jar.exists()) {
                jar.delete();
              }
              dateFile.delete();
            }
          }
 else {
            jar.delete();
          }
        }
      }
    }
 else {
      bundleFolder.delete();
    }
  }
}","private void clean(){
  if (folder.exists()) {
    File[] bundleFolders=folder.listFiles();
    if (bundleFolders != null) {
      for (      File bundleFolder : bundleFolders) {
        if (bundleFolder.isDirectory()) {
          File[] jars=bundleFolder.listFiles(new FileFilter(){
            @Override public boolean accept(            File file){
              return file.getAbsolutePath().endsWith(""String_Node_Str"");
            }
          }
);
          if (jars.length == 0) {
            if (bundleFolder.listFiles().length == 0) {
              bundleFolder.delete();
            }
          }
 else {
            for (            File jar : jars) {
              File dateFile=new File(jar.getAbsolutePath() + ""String_Node_Str"");
              if (dateFile.exists()) {
                if (isDateFileOld(dateFile)) {
                  if (jar.exists()) {
                    jar.delete();
                  }
                  dateFile.delete();
                }
              }
 else {
                jar.delete();
              }
            }
          }
        }
 else {
          bundleFolder.delete();
        }
      }
    }
  }
}",0.7946768060836502
97305,"@Override public int process(int value) throws IOException {
  isStartOfParagraph=false;
  isBreak=false;
  if ((char)value == '<') {
    partOfTag=true;
    buffer.append((char)value);
  }
  while ((partOfTag || isCarriageReturn || isStartOfParagraph != true && collect != true && isBreak != true) && available() > 0) {
    value=readFromOriginalBuffer();
    if ((char)value == '<') {
      partOfTag=true;
    }
    if (partOfTag) {
      buffer.append((char)value);
    }
    if (value == '\r' || value == '\n') {
      this.isCarriageReturn=true;
    }
 else {
      this.isCarriageReturn=false;
    }
    if ((char)value == '>') {
      partOfTag=false;
      String tag=buffer.toString();
      if (tag.equals(START_WORDML_TEXT)) {
        collect=true;
      }
 else       if (tag.equals(END_WORDML_TEXT)) {
        collect=false;
      }
 else       if (tag.startsWith(START_PARAGRAPH)) {
        isStartOfParagraph=true;
      }
 else       if (tag.startsWith(STOP_PARAGRAPH)) {
        isStartOfParagraph=false;
      }
 else       if (tag.startsWith(LINE_BREAK)) {
        isBreak=true;
      }
 else       if (tag.startsWith(TAB)) {
        isBreak=true;
      }
      buffer.delete(0,buffer.length());
      value=' ';
      if (isStartOfParagraph != true && isBreak != true && available() > 0) {
        value=readFromOriginalBuffer();
        if ((char)value == '<') {
          partOfTag=true;
          buffer.append((char)value);
        }
      }
    }
  }
  if (available() <= 0) {
    value=-1;
  }
  return value;
}","@Override public int process(int value) throws IOException {
  isStartOfParagraph=false;
  isBreak=false;
  if ((char)value == '<') {
    partOfTag=true;
    buffer.append((char)value);
  }
  while ((partOfTag || isCarriageReturn || isStartOfParagraph != true && collect != true && isBreak != true) && available() > 0) {
    value=readFromOriginalBuffer();
    if ((char)value == '<') {
      partOfTag=true;
    }
    if (partOfTag) {
      buffer.append((char)value);
    }
    if (value == '\r' || value == '\n') {
      this.isCarriageReturn=true;
    }
 else {
      this.isCarriageReturn=false;
    }
    if ((char)value == '>') {
      partOfTag=false;
      String tag=buffer.toString();
      if (tag.matches(START_WORDML_TEXT_REGEX)) {
        collect=true;
      }
 else       if (tag.equals(END_WORDML_TEXT)) {
        collect=false;
      }
 else       if (tag.matches(START_PARAGRAPH_REGEX)) {
        isStartOfParagraph=true;
      }
 else       if (tag.startsWith(STOP_PARAGRAPH)) {
        isStartOfParagraph=false;
      }
 else       if (tag.startsWith(LINE_BREAK)) {
        isBreak=true;
      }
 else       if (tag.matches(TAB_REGEX)) {
        isBreak=true;
      }
      buffer.delete(0,buffer.length());
      value=' ';
      if (isStartOfParagraph != true && isBreak != true && available() > 0) {
        value=readFromOriginalBuffer();
        if ((char)value == '<') {
          partOfTag=true;
          buffer.append((char)value);
        }
      }
    }
  }
  if (available() <= 0) {
    value=-1;
  }
  return value;
}",0.9796050501780512
97306,"@SuppressWarnings(""String_Node_Str"") public ResultSet<Artifact> getResults() throws OseeCoreException {
  SearchResult result=proxied.getSearchResult();
  SearchParameters searchParameters=result.getSearchParameters();
  IOseeBranch branch=TokenFactory.createBranch(searchParameters.getBranchUuid(),""String_Node_Str"");
  TransactionRecord tx=null;
  if (searchParameters.getFromTx() > 0) {
    tx=TransactionManager.getTransactionId(searchParameters.getFromTx());
  }
  DeletionFlag deletionFlag=searchParameters.isIncludeDeleted() ? DeletionFlag.INCLUDE_DELETED : DeletionFlag.EXCLUDE_DELETED;
  List<Artifact> loadedArtifacts=ArtifactLoader.loadArtifacts(result.getIds(),branch,LoadLevel.ALL,INCLUDE_CACHE,deletionFlag,tx);
  return ResultSets.newResultSet(loadedArtifacts);
}","@SuppressWarnings(""String_Node_Str"") public ResultSet<Artifact> getResults() throws OseeCoreException {
  SearchResult result=proxied.getSearchResult();
  SearchParameters searchParameters=result.getSearchParameters();
  IOseeBranch branch=TokenFactory.createBranch(searchParameters.getBranchUuid(),""String_Node_Str"");
  TransactionRecord tx=null;
  if (searchParameters.getFromTx() > 0) {
    tx=TransactionManager.getTransactionId(searchParameters.getFromTx());
  }
  DeletionFlag deletionFlag=searchParameters.isIncludeDeleted() ? DeletionFlag.INCLUDE_DELETED : DeletionFlag.EXCLUDE_DELETED;
  List<Integer> ids=result.getIds();
  ResultSet<Artifact> toReturn;
  if (ids != null && !ids.isEmpty()) {
    List<Artifact> loadedArtifacts=ArtifactLoader.loadArtifacts(ids,branch,LoadLevel.ALL,INCLUDE_CACHE,deletionFlag,tx);
    toReturn=ResultSets.newResultSet(loadedArtifacts);
  }
 else {
    toReturn=ResultSets.emptyResultSet();
  }
  return toReturn;
}",0.8472622478386167
97307,"private List<Artifact> loadArtifactsFromServerIds(LoadType reload) throws OseeCoreException {
  List<Integer> ids=createOrcsQuery().getSearchResult().getIds();
  List<Artifact> artifacts=ArtifactLoader.loadArtifacts(ids,branch,loadLevel,reload,allowDeleted,transactionId);
  return artifacts;
}","private List<Artifact> loadArtifactsFromServerIds(LoadType reload) throws OseeCoreException {
  List<Integer> ids=createOrcsQuery().getSearchResult().getIds();
  List<Artifact> artifacts;
  if (ids != null && !ids.isEmpty()) {
    artifacts=ArtifactLoader.loadArtifacts(ids,branch,loadLevel,reload,allowDeleted,transactionId);
  }
 else {
    artifacts=Collections.emptyList();
  }
  return artifacts;
}",0.8436154949784792
97308,"@Override @XmlElementWrapper(name=""String_Node_Str"") @XmlElement(name=""String_Node_Str"") public List<Integer> getIds(){
  return ids;
}","@Override @XmlElementWrapper(name=""String_Node_Str"") @XmlElement(name=""String_Node_Str"") public List<Integer> getIds(){
  if (ids == null) {
    ids=new LinkedList<Integer>();
  }
  return ids;
}",0.8181818181818182
97309,"@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    SearchRequest searchRequest=translationService.convert(request.getInputStream(),CoreTranslatorId.SEARCH_REQUEST);
    SearchOptions options=searchRequest.getOptions();
    TokenOrderType operator=options.isMatchWordOrder() ? TokenOrderType.MATCH_ORDER : TokenOrderType.ANY_ORDER;
    CaseType caseType=options.isCaseSensitive() ? CaseType.MATCH_CASE : CaseType.IGNORE_CASE;
    QueryFactory factory=orcsApi.getQueryFactory(getContext(request));
    QueryBuilder builder=factory.fromBranch(searchRequest.getBranch());
    builder.includeDeleted(options.getDeletionFlag().areDeletedAllowed());
    Collection<IAttributeType> attributeTypes=options.getAttributeTypeFilter();
    if (attributeTypes.isEmpty()) {
      attributeTypes=Collections.singleton(QueryBuilder.ANY_ATTRIBUTE_TYPE);
    }
    builder.and(attributeTypes,searchRequest.getRawSearch(),TokenDelimiterMatch.ANY,operator,caseType);
    BranchCache branchCache=orcsApi.getBranchCache();
    SearchResponse searchResponse=new SearchResponse();
    if (options.isFindAllLocationsEnabled()) {
      ResultSet<Match<ArtifactReadable,AttributeReadable<?>>> results=builder.getMatches();
      for (      Match<ArtifactReadable,AttributeReadable<?>> match : results) {
        ArtifactReadable artifact=match.getItem();
        long branchId=branchCache.getLocalId(artifact.getBranch());
        for (        AttributeReadable<?> attribute : match.getElements()) {
          searchResponse.add(branchId,artifact.getLocalId(),attribute.getGammaId(),match.getLocation(attribute));
        }
      }
    }
 else {
      ResultSet<ArtifactReadable> results=builder.getResults();
      for (      ArtifactReadable artifact : results) {
        long branchId=branchCache.getLocalId(artifact.getBranch());
        searchResponse.add(branchId,artifact.getLocalId(),-1);
      }
    }
    response.setStatus(HttpServletResponse.SC_ACCEPTED);
    response.setContentType(""String_Node_Str"");
    response.setCharacterEncoding(""String_Node_Str"");
    InputStream inputStream=translationService.convertToStream(searchResponse,CoreTranslatorId.SEARCH_RESPONSE);
    Lib.inputStreamToOutputStream(inputStream,response.getOutputStream());
  }
 catch (  Exception ex) {
    getLogger().error(ex,""String_Node_Str"",request.getRequestURL());
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    response.setContentType(""String_Node_Str"");
    response.getWriter().write(Lib.exceptionToString(ex));
    response.getWriter().flush();
    response.getWriter().close();
  }
}","@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    SearchRequest searchRequest=translationService.convert(request.getInputStream(),CoreTranslatorId.SEARCH_REQUEST);
    SearchOptions options=searchRequest.getOptions();
    TokenOrderType operator=options.isMatchWordOrder() ? TokenOrderType.MATCH_ORDER : TokenOrderType.ANY_ORDER;
    CaseType caseType=options.isCaseSensitive() ? CaseType.MATCH_CASE : CaseType.IGNORE_CASE;
    QueryFactory factory=orcsApi.getQueryFactory(getContext(request));
    QueryBuilder builder=factory.fromBranch(searchRequest.getBranch());
    builder.includeDeletedArtifacts(options.getDeletionFlag().areDeletedAllowed());
    Collection<IAttributeType> attributeTypes=options.getAttributeTypeFilter();
    if (attributeTypes.isEmpty()) {
      attributeTypes=Collections.singleton(QueryBuilder.ANY_ATTRIBUTE_TYPE);
    }
    builder.and(attributeTypes,searchRequest.getRawSearch(),TokenDelimiterMatch.ANY,operator,caseType);
    BranchCache branchCache=orcsApi.getBranchCache();
    SearchResponse searchResponse=new SearchResponse();
    if (options.isFindAllLocationsEnabled()) {
      ResultSet<Match<ArtifactReadable,AttributeReadable<?>>> results=builder.getMatches();
      for (      Match<ArtifactReadable,AttributeReadable<?>> match : results) {
        ArtifactReadable artifact=match.getItem();
        long branchId=branchCache.getLocalId(artifact.getBranch());
        for (        AttributeReadable<?> attribute : match.getElements()) {
          searchResponse.add(branchId,artifact.getLocalId(),attribute.getGammaId(),match.getLocation(attribute));
        }
      }
    }
 else {
      ResultSet<ArtifactReadable> results=builder.getResults();
      for (      ArtifactReadable artifact : results) {
        long branchId=branchCache.getLocalId(artifact.getBranch());
        searchResponse.add(branchId,artifact.getLocalId(),-1);
      }
    }
    response.setStatus(HttpServletResponse.SC_ACCEPTED);
    response.setContentType(""String_Node_Str"");
    response.setCharacterEncoding(""String_Node_Str"");
    InputStream inputStream=translationService.convertToStream(searchResponse,CoreTranslatorId.SEARCH_RESPONSE);
    Lib.inputStreamToOutputStream(inputStream,response.getOutputStream());
  }
 catch (  Exception ex) {
    getLogger().error(ex,""String_Node_Str"",request.getRequestURL());
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    response.setContentType(""String_Node_Str"");
    response.getWriter().write(Lib.exceptionToString(ex));
    response.getWriter().flush();
    response.getWriter().close();
  }
}",0.998298355076574
97310,"@Override public QueryBuilder excludeDeleted(){
  includeDeleted(false);
  return this;
}","@Override public QueryBuilder excludeDeleted(){
  includeDeletedArtifacts(false);
  return this;
}",0.9518716577540108
97311,"protected void createControls(Composite parent,int horizontalSpan,boolean fillText){
  setNotificationsAllowed(false);
  try {
    if (!verticalLabel && horizontalSpan < 2) {
      horizontalSpan=2;
    }
    this.parent=parent;
    ModifyListener textListener=new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        if (sText != null) {
          debug(""String_Node_Str"");
          text=sText.getText();
          validate();
          notifyXModifiedListeners();
        }
      }
    }
;
    if (fillVertically) {
      composite=new Composite(parent,SWT.NONE);
      GridLayout layout=ALayout.getZeroMarginLayout(1,false);
      layout.verticalSpacing=4;
      composite.setLayout(layout);
      composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    }
 else {
      composite=new Composite(parent,SWT.NONE);
      GridLayout layout=ALayout.getZeroMarginLayout(horizontalSpan,false);
      layout.verticalSpacing=4;
      composite.setLayout(layout);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=horizontalSpan;
      composite.setLayoutData(gd);
    }
    if (isDisplayLabel() && !getLabel().equals(""String_Node_Str"")) {
      labelWidget=new Label(composite,SWT.NONE);
      labelWidget.setText(getLabel() + ""String_Node_Str"");
      if (getToolTip() != null) {
        labelWidget.setToolTipText(getToolTip());
      }
    }
    sText=new StyledText(composite,getTextStyle());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    if (verticalLabel) {
      gd.horizontalSpan=horizontalSpan;
    }
 else {
      gd.horizontalSpan=horizontalSpan - 1;
    }
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=GridData.FILL;
    if (fillVertically) {
      gd.grabExcessVerticalSpace=true;
      gd.verticalAlignment=GridData.FILL;
      if (height > 0) {
        gd.heightHint=height;
      }
      if (dynamicallyCreated) {
        if (height > 0) {
          gd.minimumHeight=height;
        }
 else {
          gd.minimumHeight=60;
        }
      }
    }
    if (fillHorizontally && dynamicallyCreated) {
      gd.grabExcessHorizontalSpace=true;
      gd.minimumWidth=60;
    }
    sText.setLayoutData(gd);
    sText.setMenu(getDefaultMenu());
    sText.addModifyListener(textListener);
    if (text != null) {
      sText.setText(text);
    }
    if (spellCheck) {
      spellPaintListener=new XTextSpellCheckListener(this,OseeDictionary.getInstance());
      sText.addModifyListener(spellPaintListener);
      if (modDict != null) {
        spellPaintListener.addXTextSpellModifyDictionary(modDict);
      }
    }
    urlListener=new XTextUrlListener(this);
    sText.addModifyListener(urlListener);
    if (width != 0 && height != 0) {
      sText.setSize(width,height);
    }
    if (maxTextChars > 0) {
      sText.setTextLimit(maxTextChars);
    }
    if (fillText) {
      updateTextWidget();
    }
    validate();
    sText.setEditable(isEditable());
    if (font != null) {
      sText.setFont(font);
    }
    parent.layout();
  }
  finally {
    setNotificationsAllowed(true);
  }
}","protected void createControls(Composite parent,int horizontalSpan,boolean fillText){
  setNotificationsAllowed(false);
  try {
    if (!verticalLabel && horizontalSpan < 2) {
      horizontalSpan=2;
    }
    this.parent=parent;
    if (fillVertically) {
      composite=new Composite(parent,SWT.NONE);
      GridLayout layout=ALayout.getZeroMarginLayout(1,false);
      layout.verticalSpacing=4;
      composite.setLayout(layout);
      composite.setLayoutData(new GridData(GridData.FILL_BOTH));
    }
 else {
      composite=new Composite(parent,SWT.NONE);
      GridLayout layout=ALayout.getZeroMarginLayout(horizontalSpan,false);
      layout.verticalSpacing=4;
      composite.setLayout(layout);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=horizontalSpan;
      composite.setLayoutData(gd);
    }
    if (isDisplayLabel() && !getLabel().equals(""String_Node_Str"")) {
      labelWidget=new Label(composite,SWT.NONE);
      labelWidget.setText(getLabel() + ""String_Node_Str"");
      if (getToolTip() != null) {
        labelWidget.setToolTipText(getToolTip());
      }
    }
    sText=new StyledText(composite,getTextStyle());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    if (verticalLabel) {
      gd.horizontalSpan=horizontalSpan;
    }
 else {
      gd.horizontalSpan=horizontalSpan - 1;
    }
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=GridData.FILL;
    if (fillVertically) {
      gd.grabExcessVerticalSpace=true;
      gd.verticalAlignment=GridData.FILL;
      if (height > 0) {
        gd.heightHint=height;
      }
      if (dynamicallyCreated) {
        if (height > 0) {
          gd.minimumHeight=height;
        }
 else {
          gd.minimumHeight=60;
        }
      }
    }
    if (fillHorizontally && dynamicallyCreated) {
      gd.grabExcessHorizontalSpace=true;
      gd.minimumWidth=60;
    }
    sText.setLayoutData(gd);
    sText.setMenu(getDefaultMenu());
    sText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        if (Widgets.isAccessible(sText)) {
          text=sText.getText();
          notifyXModifiedListeners();
        }
      }
    }
);
    sText.addFocusListener(new FocusAdapter(){
      @Override public void focusLost(      org.eclipse.swt.events.FocusEvent e){
        if (Widgets.isAccessible(sText)) {
          text=sText.getText();
          validate();
        }
      }
    }
);
    if (text != null) {
      sText.setText(text);
    }
    if (spellCheck) {
      spellPaintListener=new XTextSpellCheckListener(this,OseeDictionary.getInstance());
      sText.addModifyListener(spellPaintListener);
      if (modDict != null) {
        spellPaintListener.addXTextSpellModifyDictionary(modDict);
      }
    }
    urlListener=new XTextUrlListener(this);
    sText.addModifyListener(urlListener);
    if (width != 0 && height != 0) {
      sText.setSize(width,height);
    }
    if (maxTextChars > 0) {
      sText.setTextLimit(maxTextChars);
    }
    if (fillText) {
      updateTextWidget();
    }
    validate();
    sText.setEditable(isEditable());
    if (font != null) {
      sText.setFont(font);
    }
    parent.layout();
  }
  finally {
    setNotificationsAllowed(true);
  }
}",0.8770993564589546
97312,"@Override public void modifyText(ModifyEvent e){
  if (sText != null) {
    debug(""String_Node_Str"");
    text=sText.getText();
    validate();
    notifyXModifiedListeners();
  }
}","@Override public void modifyText(ModifyEvent e){
  if (Widgets.isAccessible(sText)) {
    text=sText.getText();
    notifyXModifiedListeners();
  }
}",0.7696969696969697
97313,"@Override public Connection getConnection(IDatabaseInfo dbInfo) throws Exception {
  Class.forName(JDBC_DRIVER);
  if (firstTime.compareAndSet(true,false)) {
    Pair<String,Integer> addressAndPort=OseeProperties.getOseeDbEmbeddedServerAddress();
    if (addressAndPort != null) {
      int webPort=OseeProperties.getOseeDbEmbeddedWebServerPort();
      if (webPort < 0) {
        webPort=PortUtil.getInstance().getValidPort();
      }
      HyperSqlDbServer.startServer(addressAndPort.getFirst(),addressAndPort.getSecond(),webPort,dbInfo);
    }
  }
  Properties props=dbInfo.getConnectionProperties();
  StringBuilder builder=new StringBuilder();
  builder.append(dbInfo.getConnectionUrl());
  HyperSqlServerUtil.appendProperties(builder,props);
  String url=builder.toString();
  return DriverManager.getConnection(url,props);
}","@Override public Connection getConnection(IDatabaseInfo dbInfo) throws Exception {
  Class.forName(JDBC_DRIVER);
  if (firstTime.compareAndSet(true,false)) {
    Pair<String,Integer> addressAndPort=OseeProperties.getOseeDbEmbeddedServerAddress();
    if (addressAndPort != null) {
      int webPort=OseeProperties.getOseeDbEmbeddedWebServerPort();
      if (webPort < 0) {
        webPort=PortUtil.getInstance().getValidPort();
      }
      HyperSqlDbServer.startServer(addressAndPort.getFirst(),addressAndPort.getSecond(),webPort,dbInfo);
    }
  }
  Properties props=dbInfo.getConnectionProperties();
  StringBuilder builder=new StringBuilder();
  builder.append(dbInfo.getConnectionUrl());
  HyperSqlServerMgr.appendProperties(builder,props);
  String url=builder.toString();
  return DriverManager.getConnection(url,props);
}",0.99578567128236
97314,"private boolean isConnectionAvailable() throws InterruptedException {
  boolean knowIfServerUp=false;
  int numTimes=CHECK_ALIVE_NUMBER_OF_TIMES;
  while (!knowIfServerUp && numTimes > 0) {
    try {
      numTimes--;
      nwServer.testForConnection();
      knowIfServerUp=true;
    }
 catch (    Exception e) {
      OseeLog.log(HyperSqlDbServer.class,Level.SEVERE,""String_Node_Str"",e);
      Thread.sleep(3000);
    }
  }
  return knowIfServerUp;
}","private static boolean isConnectionAvailable(String dbId) throws InterruptedException {
  boolean knowIfServerUp=false;
  int numTimes=CHECK_ALIVE_NUMBER_OF_TIMES;
  while (!knowIfServerUp && numTimes > 0) {
    try {
      numTimes--;
      nwServer.testForConnection(dbId);
      knowIfServerUp=true;
    }
 catch (    Exception e) {
      OseeLog.log(HyperSqlDbServer.class,Level.SEVERE,""String_Node_Str"",e);
      Thread.sleep(3000);
    }
  }
  return knowIfServerUp;
}",0.976241900647948
97315,"public static void startServer(String host,int port,int webPort,IDatabaseInfo dbInfo) throws Exception {
  instance.startServerInternal(host,port,webPort,dbInfo);
}","public static String startServer(String host,int port,int webPort,IDatabaseInfo dbInfo) throws Exception {
  OseeLog.logf(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"",host,port,host,webPort);
  String dbId=""String_Node_Str"";
  try {
    dbId=nwServer.createServerInstance(InetAddress.getByName(host),port,webPort,dbInfo);
    if (isConnectionAvailable(dbId)) {
      nwServer.printInfo(dbId);
    }
 else {
      OseeLog.log(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"");
      OseeLog.log(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    OseeLog.log(HyperSqlDbServer.class,Level.SEVERE,ex);
  }
  return dbId;
}",0.3137724550898204
97316,"public static void stopServer(){
  instance.shutdown();
}","public static void stopServer(String dbId){
  shutdown(dbId);
}",0.8
97317,"private HyperSqlDbServer(){
  this.nwServer=null;
}","private HyperSqlDbServer(){
}",0.725
97318,"public static boolean stopServerWithWait(){
  instance.shutdown();
  return instance.isShutdown();
}","public static boolean stopServerWithWait(String dbId){
  shutdown(dbId);
  return isShutdown(dbId);
}",0.8159203980099502
97319,"private void shutdown(){
  OseeLog.log(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"");
  nwServer.shutdown();
  OseeLog.log(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"");
}","private static void shutdown(String dbId){
  OseeLog.log(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"");
  nwServer.shutdown(dbId);
  OseeLog.log(HyperSqlDbServer.class,Level.INFO,""String_Node_Str"");
}",0.9438775510204082
97320,"private boolean isShutdown(){
  boolean isDead=false;
  int numTimes=CHECK_ALIVE_NUMBER_OF_TIMES;
  while (!isDead && numTimes > 0) {
    try {
      numTimes--;
      nwServer.testNotRunning();
      isDead=true;
    }
 catch (    Exception e) {
      isDead=false;
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return isDead;
}","private static boolean isShutdown(String dbId){
  boolean isDead=false;
  int numTimes=CHECK_ALIVE_NUMBER_OF_TIMES;
  while (!isDead && numTimes > 0) {
    try {
      numTimes--;
      nwServer.testNotRunning(dbId);
      isDead=true;
    }
 catch (    Exception e) {
      isDead=false;
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return isDead;
}",0.9727047146401984
97321,"public void cleanup(){
  if (registration != null) {
    registration.unregister();
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  boolean isDead=HyperSqlDbServer.stopServerWithWait();
  if (isDead) {
    if (tempFolder != null) {
      Lib.deleteDir(tempFolder);
    }
  }
 else {
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        if (tempFolder != null) {
          Lib.deleteDir(tempFolder);
        }
      }
    }
);
  }
}","public void cleanup(){
  if (registration != null) {
    registration.unregister();
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  boolean isDead=HyperSqlDbServer.stopServerWithWait(dbId);
  if (isDead) {
    if (tempFolder != null) {
      Lib.deleteDir(tempFolder);
    }
  }
  if (tempFolder.exists()) {
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        if ((tempFolder != null) && tempFolder.exists()) {
          Lib.deleteDir(tempFolder);
        }
      }
    }
);
  }
}",0.949740034662045
97322,"@Override public void run(){
  if (tempFolder != null) {
    Lib.deleteDir(tempFolder);
  }
}","@Override public void run(){
  if ((tempFolder != null) && tempFolder.exists()) {
    Lib.deleteDir(tempFolder);
  }
}",0.8815165876777251
97323,"public void initialize() throws Exception {
  Bundle bundle=FrameworkUtil.getBundle(OseeDatabase.class);
  Assert.assertNotNull(""String_Node_Str"",bundle);
  int state=bundle.getState();
  if (state != Bundle.STARTING || state != Bundle.ACTIVE) {
    bundle.start();
  }
  tempFolder=createTempFolder();
  Assert.assertNotNull(""String_Node_Str"",tempFolder);
  addResource(tempFolder,bundle,""String_Node_Str"");
  addResource(tempFolder,bundle,""String_Node_Str"");
  checkExist(tempFolder,""String_Node_Str"");
  checkExist(tempFolder,""String_Node_Str"");
  String dbPath=getDbHomePath(tempFolder,""String_Node_Str"");
  int port=PortUtil.getInstance().getConsecutiveValidPorts(2);
  IDatabaseInfo databaseInfo=new DbInfo(connectionId,port,dbPath);
  TestDbProvider provider=new TestDbProvider(databaseInfo);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",tempFolder.getAbsolutePath());
  registerProvider(provider);
  IOseeDatabaseService dbService=OsgiUtil.getService(IOseeDatabaseService.class);
  Assert.assertNotNull(dbService);
  HyperSqlDbServer.startServer(""String_Node_Str"",port,port + 1,databaseInfo);
  OseeConnection connection=dbService.getConnection();
  try {
    Assert.assertNotNull(connection);
  }
  finally {
    connection.close();
  }
}","public void initialize() throws Exception {
  Bundle bundle=FrameworkUtil.getBundle(OseeDatabase.class);
  Assert.assertNotNull(""String_Node_Str"",bundle);
  int state=bundle.getState();
  if (state != Bundle.STARTING || state != Bundle.ACTIVE) {
    bundle.start();
  }
  tempFolder=createTempFolder();
  Assert.assertNotNull(""String_Node_Str"",tempFolder);
  addResource(tempFolder,bundle,""String_Node_Str"");
  addResource(tempFolder,bundle,""String_Node_Str"");
  checkExist(tempFolder,""String_Node_Str"");
  checkExist(tempFolder,""String_Node_Str"");
  String dbPath=getDbHomePath(tempFolder,""String_Node_Str"");
  int port=PortUtil.getInstance().getConsecutiveValidPorts(2);
  IDatabaseInfo databaseInfo=new DbInfo(connectionId,port,dbPath);
  TestDbProvider provider=new TestDbProvider(databaseInfo);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",tempFolder.getAbsolutePath());
  registerProvider(provider);
  IOseeDatabaseService dbService=OsgiUtil.getService(IOseeDatabaseService.class);
  Assert.assertNotNull(dbService);
  dbId=HyperSqlDbServer.startServer(""String_Node_Str"",port,port + 1,databaseInfo);
  OseeConnection connection=dbService.getConnection();
  try {
    Assert.assertNotNull(connection);
  }
  finally {
    connection.close();
  }
}",0.9980806142034548
97324,"@Override public boolean isEnabledWithException(IStructuredSelection structuredSelection) throws OseeCoreException {
  List<? extends IOseeBranch> branches=Handlers.getBranchesFromStructuredSelection(structuredSelection);
  return !branches.isEmpty() && AccessControlManager.isOseeAdmin();
}","@Override public boolean isEnabledWithException(IStructuredSelection structuredSelection) throws OseeCoreException {
  List<? extends IOseeBranch> branches=Handlers.getBranchesFromStructuredSelection(structuredSelection);
  return !branches.isEmpty() && (AccessControlManager.isOseeAdmin() || canEnableBranches(branches));
}",0.946341463414634
97325,"@Test public void test_branchToFileName_notAllowedCharsInName() throws OseeCoreException {
  branch.setName(""String_Node_Str"");
  String branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
}","@Test public void test_branchToFileName_notAllowedCharsInName() throws OseeCoreException {
  String branchShortName=""String_Node_Str"";
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
  branch.setName(""String_Node_Str"");
  branchShortName=RenderingUtil.toFileName(branch);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",branchShortName);
}",0.2156097560975609
97326,"@Override public void asTestPointUpdate(final TestPointUpdate testPointUpdate){
  executor.submit(new StatusBoardRecieveEvent<TestPointUpdate>(testPointUpdate){
    @Override public void run(){
      checkServiceStatusDataValid(testPointUpdate);
      final ScriptTask task=scriptManager.getScriptTask(testPointUpdate.getClassName());
      if (task != null) {
        task.getScriptModel().getOutputModel().setPassedTestPoints(testPointUpdate.getPass());
        task.getScriptModel().getOutputModel().setFailedTestPoints(testPointUpdate.getFail());
        scriptManager.updateScriptTableViewerTimed(task);
      }
 else {
        OseeLog.log(TestManagerPlugin.class,Level.WARNING,""String_Node_Str"");
      }
    }
  }
);
  logExecutorSize();
}","@Override public void asTestPointUpdate(final TestPointUpdate testPointUpdate){
  executor.submit(new StatusBoardRecieveEvent<TestPointUpdate>(testPointUpdate){
    @Override public void run(){
      checkServiceStatusDataValid(testPointUpdate);
      final ScriptTask task=scriptManager.getScriptTask(testPointUpdate.getClassName());
      if (task != null) {
        task.getScriptModel().getOutputModel().setAborted(false);
        task.getScriptModel().getOutputModel().setPassedTestPoints(testPointUpdate.getPass());
        task.getScriptModel().getOutputModel().setFailedTestPoints(testPointUpdate.getFail());
        scriptManager.updateScriptTableViewerTimed(task);
      }
 else {
        OseeLog.log(TestManagerPlugin.class,Level.WARNING,""String_Node_Str"");
      }
    }
  }
);
  logExecutorSize();
}",0.957637997432606
97327,"/** 
 * @return Returns the passFail.
 */
public String getPassFail(){
  int passTP=scriptModel.getOutputModel().getPassedTestPoints();
  int failTP=scriptModel.getOutputModel().getFailedTestPoints();
  if (scriptModel.getOutputModel().isAborted()) {
    return ""String_Node_Str"";
  }
 else   if (passTP > 0 || failTP > 0) {
    if (failTP == 0) {
      return ""String_Node_Str"" + passTP + ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"" + failTP + ""String_Node_Str""+ (passTP + failTP)+ ""String_Node_Str"";
    }
  }
 else   if (status == ScriptStatusEnum.RUNNING) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","/** 
 * @return Returns the passFail.
 */
public String getPassFail(){
  int passTP=scriptModel.getOutputModel().getPassedTestPoints();
  int failTP=scriptModel.getOutputModel().getFailedTestPoints();
  if (status == ScriptStatusEnum.RUNNING && scriptModel.getOutputModel().isAborted()) {
    return ""String_Node_Str"";
  }
  if (scriptModel.getOutputModel().isAborted()) {
    return ""String_Node_Str"";
  }
 else   if (passTP > 0 || failTP > 0) {
    if (failTP == 0) {
      return ""String_Node_Str"" + passTP + ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"" + failTP + ""String_Node_Str""+ (passTP + failTP)+ ""String_Node_Str"";
    }
  }
 else   if (status == ScriptStatusEnum.RUNNING) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.913597733711048
97328,"private void writeRequirementStatusLines(Artifact requirement) throws OseeCoreException, IOException {
  statusLines.clear();
  testPocs.clear();
  requirementPocs.clear();
  sumFormula.delete(0,99999);
  String[] statusLine=new String[100];
  processRpcrStatuses(requirement,statusLine);
  statusLine[Index.Category.ordinal()]=requirement.getSoleAttributeValue(CoreAttributeTypes.Category,""String_Node_Str"");
  if (requirement.isOfType(CoreArtifactTypes.IndirectSoftwareRequirement)) {
    statusLine[Index.Category.ordinal()]=""String_Node_Str"";
  }
  statusLine[Index.TEST_POC.ordinal()]=AtsObjects.toString(""String_Node_Str"",testPocs);
  statusLine[Index.PARTITION.ordinal()]=requirement.getAttributesToString(CoreAttributeTypes.Partition);
  statusLine[Index.SUBSYSTEM.ordinal()]=requirement.getSoleAttributeValue(CoreAttributeTypes.Subsystem,""String_Node_Str"");
  statusLine[Index.REQUIREMENT_NAME.ordinal()]=requirement.getName();
  statusLine[Index.QUALIFICATION_METHOD.ordinal()]=requirement.getAttributesToStringSorted(CoreAttributeTypes.QualificationMethod);
  statusLine[Index.REQUIREMENT_POC.ordinal()]=Collections.toString(""String_Node_Str"",requirementPocs);
  Collection<RequirementStatus> reqStats=reqTaskMap.getValues(requirement.getName());
  statusLine[Index.SW_ENHANCEMENT.ordinal()]=reqStats.isEmpty() ? ""String_Node_Str"" : reqStats.iterator().next().getSwEnhancement();
  processTestScriptsAndProcedures(requirement,statusLine);
  for (  String[] line : statusLines) {
    excelWriter.writeRow((Object[])line);
  }
}","private void writeRequirementStatusLines(Artifact requirement) throws OseeCoreException, IOException {
  statusLines.clear();
  testPocs.clear();
  requirementPocs.clear();
  sumFormula.delete(0,99999);
  String[] statusLine=new String[MAX_EXCEL_COLUMNS];
  processRpcrStatuses(requirement,statusLine);
  statusLine[Index.Category.ordinal()]=requirement.getSoleAttributeValue(CoreAttributeTypes.Category,""String_Node_Str"");
  if (requirement.isOfType(CoreArtifactTypes.IndirectSoftwareRequirement)) {
    statusLine[Index.Category.ordinal()]=""String_Node_Str"";
  }
  statusLine[Index.TEST_POC.ordinal()]=AtsObjects.toString(""String_Node_Str"",testPocs);
  statusLine[Index.PARTITION.ordinal()]=requirement.getAttributesToString(CoreAttributeTypes.Partition);
  statusLine[Index.SUBSYSTEM.ordinal()]=requirement.getSoleAttributeValue(CoreAttributeTypes.Subsystem,""String_Node_Str"");
  statusLine[Index.REQUIREMENT_NAME.ordinal()]=requirement.getName();
  statusLine[Index.QUALIFICATION_METHOD.ordinal()]=requirement.getAttributesToStringSorted(CoreAttributeTypes.QualificationMethod);
  statusLine[Index.REQUIREMENT_POC.ordinal()]=Collections.toString(""String_Node_Str"",requirementPocs);
  Collection<RequirementStatus> reqStats=reqTaskMap.getValues(requirement.getName());
  statusLine[Index.SW_ENHANCEMENT.ordinal()]=reqStats.isEmpty() ? ""String_Node_Str"" : reqStats.iterator().next().getSwEnhancement();
  processTestScriptsAndProcedures(requirement,statusLine);
  for (  String[] line : statusLines) {
    excelWriter.writeRow((Object[])line);
  }
}",0.993523316062176
97329,"@Override public void runWithException() throws OseeCoreException {
  ArrayList<String> artifactNames=new ArrayList<String>();
  Map<String,String> selectedToStateName=new HashMap<String,String>();
  artifactNames.add(""String_Node_Str"" + sma.getArtifactTypeName() + ""String_Node_Str"");
  for (  IAtsStateDefinition stateDefinition : AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByDefaultToState(sma.getWorkDefinition())) {
    String displayName=""String_Node_Str"" + stateDefinition.getName() + ""String_Node_Str"";
    artifactNames.add(displayName);
    selectedToStateName.put(displayName,stateDefinition.getName());
  }
  if (emulate) {
    boolean result=performEmulate();
    if (!result) {
      return;
    }
  }
 else {
    boolean result=performUi(artifactNames);
    if (!result) {
      return;
    }
  }
  String state=""String_Node_Str"";
  if (!selectedState.startsWith(sma.getName() + ""String_Node_Str"")) {
    state=selectedToStateName.get(selectedState);
  }
  sma.getNotes().addNote(noteType,state,noteText,AtsClientService.get().getUserAdmin().getCurrentUser());
  dirtiable.onDirtied();
}","@Override public void runWithException() throws OseeCoreException {
  ArrayList<String> artifactNames=new ArrayList<String>();
  Map<String,String> selectedToStateName=new HashMap<String,String>();
  artifactNames.add(""String_Node_Str"" + sma.getArtifactTypeName() + ""String_Node_Str"");
  for (  IAtsStateDefinition stateDefinition : AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByOrdinal(sma.getWorkDefinition())) {
    String displayName=""String_Node_Str"" + stateDefinition.getName() + ""String_Node_Str"";
    artifactNames.add(displayName);
    selectedToStateName.put(displayName,stateDefinition.getName());
  }
  if (emulate) {
    boolean result=performEmulate();
    if (!result) {
      return;
    }
  }
 else {
    boolean result=performUi(artifactNames);
    if (!result) {
      return;
    }
  }
  String state=""String_Node_Str"";
  if (!selectedState.startsWith(sma.getName() + ""String_Node_Str"")) {
    state=selectedToStateName.get(selectedState);
  }
  sma.getNotes().addNote(noteType,state,noteText,AtsClientService.get().getUserAdmin().getCurrentUser());
  dirtiable.onDirtied();
}",0.9906208128628852
97330,"public static StateXWidgetPage getCurrentAtsWorkPage(AbstractWorkflowArtifact awa){
  for (  StateXWidgetPage statePage : getStatePagesOrderedByDefaultToState(awa)) {
    if (awa.getStateMgr().getCurrentStateName().equals(statePage.getName())) {
      return statePage;
    }
  }
  return null;
}","public static StateXWidgetPage getCurrentAtsWorkPage(AbstractWorkflowArtifact awa){
  for (  StateXWidgetPage statePage : getStatePagesOrderedByOrdinal(awa)) {
    if (awa.getStateMgr().getCurrentStateName().equals(statePage.getName())) {
      return statePage;
    }
  }
  return null;
}",0.964102564102564
97331,"private void getChildrenFromWrappedPercentDefinition(WrappedPercentWeight weightDef,List<Object> items){
  for (  IAtsStateDefinition stateDef : AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByDefaultToState(weightDef.getWorkDef())) {
    items.add(String.format(""String_Node_Str"",stateDef.getName(),stateDef.getStateWeight()));
  }
}","private void getChildrenFromWrappedPercentDefinition(WrappedPercentWeight weightDef,List<Object> items){
  for (  IAtsStateDefinition stateDef : AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByOrdinal(weightDef.getWorkDef())) {
    items.add(String.format(""String_Node_Str"",stateDef.getName(),stateDef.getStateWeight()));
  }
}",0.9727403156384504
97332,"@Override protected void setInput(IEditorInput input){
  super.setInput(input);
  if (input instanceof AtsWorkDefConfigEditorInput) {
    AtsWorkDefConfigEditorInput editorInput=(AtsWorkDefConfigEditorInput)input;
    IAtsWorkDefinition workflowDef=editorInput.workflow;
    try {
      setPartName(workflowDef.getName());
      diagram=new WorkDefinitionDiagram(workflowDef);
      int yLocNormalState=20;
      int yLocCancelledState=40;
      IAtsStateDefinition startPage=workflowDef.getStartState();
      if (startPage == null || startPage.getName().equals(""String_Node_Str"")) {
        throw new OseeArgumentException(""String_Node_Str"" + workflowDef);
      }
      List<IAtsStateDefinition> stateDefs=AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByDefaultToState(workflowDef);
      for (      IAtsStateDefinition stateDef : workflowDef.getStates()) {
        if (!stateDefs.contains(stateDef)) {
          stateDefs.add(stateDef);
        }
      }
      for (      IAtsStateDefinition pageDef : stateDefs) {
        StateDefShape stateShape=new StateDefShape(pageDef);
        if (pageDef.getStateType().isCancelledState()) {
          stateShape.setLocation(new Point(350,yLocCancelledState));
          yLocCancelledState+=90;
        }
 else {
          stateShape.setLocation(new Point(50,yLocNormalState));
          yLocNormalState+=90;
        }
        diagram.addChild(stateShape);
      }
      for (      IAtsStateDefinition stateDef : AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByDefaultToState(workflowDef)) {
        StateDefShape pageShape=getStateDefShape(stateDef);
        Set<IAtsStateDefinition> toPages=new HashSet<IAtsStateDefinition>();
        toPages.addAll(pageShape.getStateDefinition().getToStates());
        List<IAtsStateDefinition> returnStateDefs=pageShape.getStateDefinition().getOverrideAttributeValidationStates();
        for (        IAtsStateDefinition toStateDef : toPages) {
          if (returnStateDefs.contains(toStateDef)) {
            continue;
          }
          StateDefShape toStateDefShape=getStateDefShape(toStateDef);
          if (toStateDef.equals(stateDef.getDefaultToState())) {
            new DefaultTransitionConnection(pageShape,toStateDefShape);
          }
 else {
            new TransitionConnection(pageShape,toStateDefShape);
          }
        }
        for (        IAtsStateDefinition toPageDef : returnStateDefs) {
          StateDefShape toPageShape=getStateDefShape(toPageDef);
          new ReturnTransitionConnection(pageShape,toPageShape);
        }
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override protected void setInput(IEditorInput input){
  super.setInput(input);
  if (input instanceof AtsWorkDefConfigEditorInput) {
    AtsWorkDefConfigEditorInput editorInput=(AtsWorkDefConfigEditorInput)input;
    IAtsWorkDefinition workflowDef=editorInput.workflow;
    try {
      setPartName(workflowDef.getName());
      diagram=new WorkDefinitionDiagram(workflowDef);
      int yLocNormalState=20;
      int yLocCancelledState=40;
      IAtsStateDefinition startPage=workflowDef.getStartState();
      if (startPage == null || startPage.getName().equals(""String_Node_Str"")) {
        throw new OseeArgumentException(""String_Node_Str"" + workflowDef);
      }
      List<IAtsStateDefinition> stateDefs=AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByOrdinal(workflowDef);
      for (      IAtsStateDefinition stateDef : workflowDef.getStates()) {
        if (!stateDefs.contains(stateDef)) {
          stateDefs.add(stateDef);
        }
      }
      for (      IAtsStateDefinition pageDef : stateDefs) {
        StateDefShape stateShape=new StateDefShape(pageDef);
        if (pageDef.getStateType().isCancelledState()) {
          stateShape.setLocation(new Point(350,yLocCancelledState));
          yLocCancelledState+=90;
        }
 else {
          stateShape.setLocation(new Point(50,yLocNormalState));
          yLocNormalState+=90;
        }
        diagram.addChild(stateShape);
      }
      for (      IAtsStateDefinition stateDef : AtsClientService.get().getWorkDefinitionAdmin().getStatesOrderedByOrdinal(workflowDef)) {
        StateDefShape pageShape=getStateDefShape(stateDef);
        Set<IAtsStateDefinition> toPages=new HashSet<IAtsStateDefinition>();
        toPages.addAll(pageShape.getStateDefinition().getToStates());
        List<IAtsStateDefinition> returnStateDefs=pageShape.getStateDefinition().getOverrideAttributeValidationStates();
        for (        IAtsStateDefinition toStateDef : toPages) {
          if (returnStateDefs.contains(toStateDef)) {
            continue;
          }
          StateDefShape toStateDefShape=getStateDefShape(toStateDef);
          if (toStateDef.equals(stateDef.getDefaultToState())) {
            new DefaultTransitionConnection(pageShape,toStateDefShape);
          }
 else {
            new TransitionConnection(pageShape,toStateDefShape);
          }
        }
        for (        IAtsStateDefinition toPageDef : returnStateDefs) {
          StateDefShape toPageShape=getStateDefShape(toPageDef);
          new ReturnTransitionConnection(pageShape,toPageShape);
        }
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9924023154848046
97333,"@Test public void testMultipleRebaselineRequests() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  Thread.sleep(1000);
  List<MergeBranch> mergeBranches=BranchManager.getMergeBranches(workingBranch);
  Branch branchForUpdate=mergeBranches.get(0).getDestinationBranch();
  assertTrue(""String_Node_Str"",mergeBranches.size() == 1);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  UpdateBranchOperation update2=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update2,true);
  Thread.sleep(1000);
  List<MergeBranch> mergeBranchesSecondAttempt=BranchManager.getMergeBranches(workingBranch);
  Branch branchForUpdateSecondAttempt=mergeBranchesSecondAttempt.get(0).getDestinationBranch();
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  assertTrue(""String_Node_Str"",mergeBranches.size() == 1);
  assertTrue(""String_Node_Str"",branchForUpdate.equals(branchForUpdateSecondAttempt));
  RebaselineInProgressHandler.cancelCurrentUpdate(workingBranch,true);
}","@Test public void testMultipleRebaselineRequests() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  List<MergeBranch> mergeBranches=BranchManager.getMergeBranches(workingBranch);
  Branch branchForUpdate=mergeBranches.get(0).getDestinationBranch();
  assertTrue(""String_Node_Str"",mergeBranches.size() == 1);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  UpdateBranchOperation update2=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update2);
  List<MergeBranch> mergeBranchesSecondAttempt=BranchManager.getMergeBranches(workingBranch);
  Branch branchForUpdateSecondAttempt=mergeBranchesSecondAttempt.get(0).getDestinationBranch();
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  assertTrue(""String_Node_Str"",mergeBranches.size() == 1);
  assertTrue(""String_Node_Str"",branchForUpdate.equals(branchForUpdateSecondAttempt));
  RebaselineInProgressHandler.cancelCurrentUpdate(workingBranch,true);
}",0.9619377162629758
97334,"@Test public void testCommitWithMergeFinish() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  Thread.sleep(1000);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",committed);
  MergeInProgressHandler.handleCommitInProgressPostPrompt(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),DELETE_MERGE,true);
  update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  Thread.sleep(1000);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  Artifact artOnSaw2=ArtifactQuery.getArtifactFromToken(NewArtifactToken,DemoBranches.SAW_Bld_2);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Arrays.asList(artOnSaw2)));
  Thread.sleep(1000);
}","@Test public void testCommitWithMergeFinish() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",committed);
  MergeInProgressHandler.handleCommitInProgressPostPrompt(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),DELETE_MERGE,true);
  update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  Artifact artOnSaw2=ArtifactQuery.getArtifactFromToken(NewArtifactToken,DemoBranches.SAW_Bld_2);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Arrays.asList(artOnSaw2)));
  Thread.sleep(1000);
}",0.7535870243293824
97335,"@Test public void testRebaselineWithConflictsAbandon() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  Thread.sleep(1000);
  assertTrue(""String_Node_Str"",BranchManager.getMergeBranches(workingBranch).size() == 1);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  assertTrue(""String_Node_Str"",BranchManager.getMergeBranches(workingBranch).size() == 1);
  RebaselineInProgressHandler.cancelCurrentUpdate(workingBranch,true);
  Thread.sleep(1000);
  BranchManager.persist(workingBranch);
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",committed);
  update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  Artifact artOnSaw2=ArtifactQuery.getArtifactFromToken(NewArtifactToken,DemoBranches.SAW_Bld_2);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Collections.singleton(artOnSaw2)));
  Thread.sleep(1000);
}","@Test public void testRebaselineWithConflictsAbandon() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  assertTrue(""String_Node_Str"",BranchManager.getMergeBranches(workingBranch).size() == 1);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  assertTrue(""String_Node_Str"",BranchManager.getMergeBranches(workingBranch).size() == 1);
  RebaselineInProgressHandler.cancelCurrentUpdate(workingBranch,true);
  Thread.sleep(1000);
  BranchManager.persist(workingBranch);
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",committed);
  update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  Artifact artOnSaw2=ArtifactQuery.getArtifactFromToken(NewArtifactToken,DemoBranches.SAW_Bld_2);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Collections.singleton(artOnSaw2)));
  Thread.sleep(1000);
}",0.3513670738801628
97336,"@Test public void testCommitWithMergeAbandon() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  List<MergeBranch> mergeBranches=BranchManager.getMergeBranches(workingBranch);
  assertTrue(""String_Node_Str"",mergeBranches.size() == 1);
  MergeBranch mergeBranchFromFirstCommit=mergeBranches.get(0);
  assertTrue(""String_Node_Str"",mergeBranchFromFirstCommit.getSourceBranch().equals(workingBranch));
  boolean committed2=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed2);
  List<MergeBranch> mergeBranches2=BranchManager.getMergeBranches(workingBranch);
  assertTrue(""String_Node_Str"",mergeBranches2.size() == 1);
  MergeBranch mergeBranchFromSecondCommit=mergeBranches2.get(0);
  assertTrue(""String_Node_Str"",mergeBranchFromSecondCommit.equals(mergeBranchFromFirstCommit));
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  MergeInProgressHandler.handleCommitInProgressPostPrompt(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),DELETE_MERGE,true);
  assertTrue(""String_Node_Str"",!BranchManager.hasMergeBranches(workingBranch));
  UpdateBranchOperation update2=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update2,true);
  Thread.sleep(1000);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  Branch branchForUpdate=BranchManager.getFirstMergeBranch(workingBranch);
  FinishUpdateBranchOperation finishUpdateOperation=new FinishUpdateBranchOperation(resolverOperation.getConflictManager(),true,true);
  Operations.executeAsJob(finishUpdateOperation,true);
  Thread.sleep(1000);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselined());
  Artifact artOnUpdateBranch=ArtifactQuery.getArtifactFromToken(NewArtifactToken,branchForUpdate);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Arrays.asList(artOnUpdateBranch)));
  Thread.sleep(1000);
  BranchManager.purgeBranch(branchForUpdate);
}","@Test public void testCommitWithMergeAbandon() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  List<MergeBranch> mergeBranches=BranchManager.getMergeBranches(workingBranch);
  assertTrue(""String_Node_Str"",mergeBranches.size() == 1);
  MergeBranch mergeBranchFromFirstCommit=mergeBranches.get(0);
  assertTrue(""String_Node_Str"",mergeBranchFromFirstCommit.getSourceBranch().equals(workingBranch));
  boolean committed2=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed2);
  List<MergeBranch> mergeBranches2=BranchManager.getMergeBranches(workingBranch);
  assertTrue(""String_Node_Str"",mergeBranches2.size() == 1);
  MergeBranch mergeBranchFromSecondCommit=mergeBranches2.get(0);
  assertTrue(""String_Node_Str"",mergeBranchFromSecondCommit.equals(mergeBranchFromFirstCommit));
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  assertTrue(""String_Node_Str"",!workingBranch.getBranchState().isRebaselineInProgress() && !workingBranch.getBranchState().isRebaselineInProgress());
  MergeInProgressHandler.handleCommitInProgressPostPrompt(new ConflictManagerExternal(DemoBranches.SAW_Bld_1,workingBranch),DELETE_MERGE,true);
  assertTrue(""String_Node_Str"",!BranchManager.hasMergeBranches(workingBranch));
  UpdateBranchOperation update2=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update2);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselineInProgress());
  Branch branchForUpdate=BranchManager.getFirstMergeBranch(workingBranch);
  FinishUpdateBranchOperation finishUpdateOperation=new FinishUpdateBranchOperation(resolverOperation.getConflictManager(),true,true);
  Operations.executeWorkAndCheckStatus(finishUpdateOperation);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselined());
  Artifact artOnUpdateBranch=ArtifactQuery.getArtifactFromToken(NewArtifactToken,branchForUpdate);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Arrays.asList(artOnUpdateBranch)));
  Thread.sleep(1000);
  BranchManager.purgeBranch(branchForUpdate);
}",0.7327586206896551
97337,"@Test public void testRebaselineWithConflictsFinish() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeAsJob(update,true);
  Thread.sleep(1000);
  Branch branchForUpdate=BranchManager.getFirstMergeBranch(workingBranch).getDestinationBranch();
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  FinishUpdateBranchOperation finishUpdateOperation=new FinishUpdateBranchOperation(resolverOperation.getConflictManager(),true,true);
  Operations.executeAsJob(finishUpdateOperation,true);
  Thread.sleep(1000);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselined());
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,branchForUpdate),false,true);
  assertTrue(""String_Node_Str"",committed);
  Artifact artOnSaw2=ArtifactQuery.getArtifactFromToken(NewArtifactToken,DemoBranches.SAW_Bld_2);
  Artifact artOnUpdateBranch=ArtifactQuery.getArtifactFromToken(NewArtifactToken,branchForUpdate);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Arrays.asList(artOnSaw2,artOnUpdateBranch)));
  Thread.sleep(1000);
  BranchManager.purgeBranch(branchForUpdate);
}","@Test public void testRebaselineWithConflictsFinish() throws Exception {
  ConflictResolverOperation resolverOperation=new ConflictResolverOperation(""String_Node_Str"",MergeManagerTest.class.getCanonicalName()){
    @Override protected void doWork(    IProgressMonitor monitor) throws Exception {
      assertTrue(""String_Node_Str"",wasExecuted());
    }
  }
;
  UpdateBranchOperation update=new UpdateBranchOperation(workingBranch,resolverOperation);
  Operations.executeWorkAndCheckStatus(update);
  Branch branchForUpdate=BranchManager.getFirstMergeBranch(workingBranch).getDestinationBranch();
  boolean committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  FinishUpdateBranchOperation finishUpdateOperation=new FinishUpdateBranchOperation(resolverOperation.getConflictManager(),true,true);
  Operations.executeWorkAndCheckStatus(finishUpdateOperation);
  assertTrue(""String_Node_Str"",workingBranch.getBranchState().isRebaselined());
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,workingBranch),false,true);
  assertTrue(""String_Node_Str"",!committed);
  committed=CommitHandler.commitBranch(new ConflictManagerExternal(DemoBranches.SAW_Bld_2,branchForUpdate),false,true);
  assertTrue(""String_Node_Str"",committed);
  Artifact artOnSaw2=ArtifactQuery.getArtifactFromToken(NewArtifactToken,DemoBranches.SAW_Bld_2);
  Artifact artOnUpdateBranch=ArtifactQuery.getArtifactFromToken(NewArtifactToken,branchForUpdate);
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(Arrays.asList(artOnSaw2,artOnUpdateBranch)));
  Thread.sleep(1000);
  BranchManager.purgeBranch(branchForUpdate);
}",0.2989161437535653
97338,"@Test public void testNameAttributeEqualSearch() throws OseeCoreException {
  QueryBuilder builder=queryFactory.fromBranch(CoreBranches.COMMON).and(CoreAttributeTypes.Name,Operator.EQUAL,""String_Node_Str"");
  ResultSet<ArtifactReadable> resultSet=builder.getResults();
  assertEquals(1,resultSet.size());
  assertEquals(1,builder.getCount());
  Map<Integer,ArtifactReadable> lookup=createLookup(resultSet);
  ArtifactReadable art7=lookup.get(7);
  assertEquals(art7.getSoleAttributeAsString(CoreAttributeTypes.Name),""String_Node_Str"");
}","@Test public void testNameAttributeEqualSearch() throws OseeCoreException {
  QueryBuilder builder=queryFactory.fromBranch(CoreBranches.COMMON).and(CoreAttributeTypes.Name,Operator.EQUAL,""String_Node_Str"");
  ResultSet<ArtifactReadable> resultSet=builder.getResults();
  assertEquals(1,resultSet.size());
  assertEquals(1,builder.getCount());
  ArtifactReadable art7=resultSet.getExactlyOne();
  assertEquals(art7.getSoleAttributeAsString(CoreAttributeTypes.Name),""String_Node_Str"");
}",0.9021526418786692
97339,"@Test public void testBooleanAttributeSearch() throws OseeCoreException {
  QueryBuilder builder=queryFactory.fromBranch(CoreBranches.COMMON).and(CoreAttributeTypes.DefaultGroup,Operator.EQUAL,""String_Node_Str"");
  ResultSet<ArtifactReadable> resultSet=builder.getResults();
  assertEquals(1,resultSet.size());
  assertEquals(1,builder.getCount());
  Map<Integer,ArtifactReadable> lookup=createLookup(resultSet);
  ArtifactReadable art8=lookup.get(8);
  assertEquals(art8.getSoleAttributeAsString(CoreAttributeTypes.Name),""String_Node_Str"");
}","@Test public void testBooleanAttributeSearch() throws OseeCoreException {
  QueryBuilder builder=queryFactory.fromBranch(CoreBranches.COMMON).and(CoreAttributeTypes.DefaultGroup,Operator.EQUAL,""String_Node_Str"");
  ResultSet<ArtifactReadable> resultSet=builder.getResults();
  assertEquals(1,resultSet.size());
  assertEquals(1,builder.getCount());
  ArtifactReadable art8=resultSet.getExactlyOne();
  assertEquals(art8.getSoleAttributeAsString(CoreAttributeTypes.Name),""String_Node_Str"");
}",0.9032882011605416
97340,"@Before public void setup(){
  ApplicationContext context=null;
  factory=orcsApi.getQueryFactory(context);
}","@Before public void setup(){
  ApplicationContext context=null;
  factory=orcsApi.getQueryFactory(context);
  branchApi=orcsApi.getBranchOps(context);
  txFactory=orcsApi.getTransactionFactory(context);
}",0.6964856230031949
97341,"/** 
 * @param destOffset offset in this memory resource in which the copy will begin
 */
public void copyData(int destOffset,ByteBuffer src,int length) throws MessageSystemException {
  if (length + destOffset > byteArray.get().length) {
    throw new MessageSystemException(""String_Node_Str"",Level.INFO);
  }
  if (src.hasArray()) {
    System.arraycopy(src.array(),src.arrayOffset(),byteArray.get(),destOffset,length);
  }
 else {
synchronized (src) {
      src.mark();
      src.get(byteArray.get(),destOffset,length);
      src.reset();
    }
  }
  Arrays.fill(byteArray.get(),destOffset + length,byteArray.get().length,(byte)0);
  _dataHasChanged=true;
}","/** 
 * @param destOffset offset in this memory resource in which the copy will begin
 */
public void copyData(int destOffset,ByteBuffer src,int length) throws MessageSystemException {
  if (length + destOffset > byteArray.get().length) {
    throw new MessageSystemException(""String_Node_Str"",Level.INFO);
  }
  if (src.hasArray()) {
    System.arraycopy(src.array(),src.arrayOffset() + src.position(),byteArray.get(),destOffset,length);
  }
 else {
synchronized (src) {
      src.mark();
      src.get(byteArray.get(),destOffset,length);
      src.reset();
    }
  }
  Arrays.fill(byteArray.get(),destOffset + length,byteArray.get().length,(byte)0);
  _dataHasChanged=true;
}",0.987284966342558
97342,"public void toWordML(Producer producer,IOseeBranch branch,RelationOrderData relationOrderData){
  try {
    WordMLProducer writer=(WordMLProducer)producer;
    writer.startTable();
    writer.addWordMl(""String_Node_Str"");
    if (!relationOrderData.hasEntries()) {
      writer.addTableRow(NO_DATA_TAG);
    }
 else {
      writer.addTableRow(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      for (      Entry<Pair<String,String>,Pair<String,List<String>>> entry : relationOrderData.getOrderedEntrySet()) {
        String relationTypeName=entry.getKey().getFirst();
        String relationSide=entry.getKey().getSecond();
        String sorterGuid=entry.getValue().getFirst();
        List<String> guidList=entry.getValue().getSecond();
        List<String> mlLinks=guidResolver.resolveAsOseeLinks(branch,guidList);
        RelationType relationType=relationCache.getUniqueByName(relationTypeName);
        RelationSide side=RelationSide.fromString(relationSide);
        try {
          writeTableRow(writer,relationType,side,resolveSorter(sorterGuid),mlLinks);
        }
 catch (        Exception ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
    }
    writer.endTable();
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
}","public void toWordML(Producer producer,IOseeBranch branch,RelationOrderData relationOrderData){
  WordMLProducer writer=(WordMLProducer)producer;
  try {
    writer.startTable();
    writer.addWordMl(""String_Node_Str"");
    if (!relationOrderData.hasEntries()) {
      writer.addTableRow(NO_DATA_TAG);
    }
 else {
      writer.addTableRow(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      for (      Entry<Pair<String,String>,Pair<String,List<String>>> entry : relationOrderData.getOrderedEntrySet()) {
        String relationTypeName=entry.getKey().getFirst();
        String relationSide=entry.getKey().getSecond();
        String sorterGuid=entry.getValue().getFirst();
        List<String> guidList=entry.getValue().getSecond();
        List<String> mlLinks=guidResolver.resolveAsOseeLinks(branch,guidList);
        RelationType relationType=relationCache.getUniqueByName(relationTypeName);
        RelationSide side=RelationSide.fromString(relationSide);
        try {
          writeTableRow(writer,relationType,side,resolveSorter(sorterGuid),mlLinks);
        }
 catch (        Exception ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
 finally {
    try {
      writer.endTable();
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
}",0.904608788853162
97343,"@Override public void performDrop(final DropTargetEvent event){
  final ArtifactData artData=ArtifactTransfer.getInstance().nativeToJava(event.currentDataType);
  final List<Artifact> droppedArtifacts=Arrays.asList(artData.getArtifacts());
  Collections.reverse(droppedArtifacts);
  final Artifact dropTarget=getSelectedArtifact(event);
  if (ArtifactTransfer.getInstance().isSupportedType(event.currentDataType)) {
    try {
      Collections.reverse(droppedArtifacts);
      List<Artifact> members=goalArtifact.getMembers();
      for (      Artifact dropped : droppedArtifacts) {
        if (!members.contains(dropped)) {
          goalArtifact.addMember(dropped);
          int index=isFeedbackAfter ? members.indexOf(dropTarget) + 1 : members.indexOf(dropTarget);
          worldComposite.insert(dropped,index);
          worldComposite.update();
        }
        if (dropTarget != null) {
          goalArtifact.setRelationOrder(AtsRelationTypes.Goal_Member,dropTarget,isFeedbackAfter,dropped);
        }
      }
      goalArtifact.persist(SMAMembersTab.class.getSimpleName());
      worldComposite.getXViewer().refresh(goalArtifact);
      worldComposite.getXViewer().update(dropTarget,null);
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.WARNING,Lib.exceptionToString(ex));
    }
  }
}","@Override public void performDrop(final DropTargetEvent event){
  final ArtifactData artData=ArtifactTransfer.getInstance().nativeToJava(event.currentDataType);
  final List<Artifact> droppedArtifacts=Arrays.asList(artData.getArtifacts());
  Collections.reverse(droppedArtifacts);
  final Artifact dropTarget=getSelectedArtifact(event);
  try {
    if (isDropValid() && ArtifactTransfer.getInstance().isSupportedType(event.currentDataType)) {
      Collections.reverse(droppedArtifacts);
      List<Artifact> members=goalArtifact.getMembers();
      for (      Artifact dropped : droppedArtifacts) {
        if (!members.contains(dropped)) {
          goalArtifact.addMember(dropped);
          int index=isFeedbackAfter ? members.indexOf(dropTarget) + 1 : members.indexOf(dropTarget);
          worldComposite.insert(dropped,index);
          worldComposite.update();
        }
        if (dropTarget != null) {
          goalArtifact.setRelationOrder(AtsRelationTypes.Goal_Member,dropTarget,isFeedbackAfter,dropped);
        }
      }
      goalArtifact.persist(SMAMembersTab.class.getSimpleName());
      worldComposite.getXViewer().refresh(goalArtifact);
      worldComposite.getXViewer().update(dropTarget,null);
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.WARNING,Lib.exceptionToString(ex));
  }
}",0.9779108947959566
97344,"/** 
 * @return true if created; false if skipped
 */
private boolean createMembersBody(){
  if (!Widgets.isAccessible(worldComposite)) {
    worldComposite=new WorldComposite(""String_Node_Str"",editor,new GoalXViewerFactory((GoalArtifact)editor.getAwa()),bodyComp,SWT.BORDER,false);
    new GoalDragAndDrop(worldComposite,SMAEditor.EDITOR_ID);
    WorldLabelProvider labelProvider=(WorldLabelProvider)worldComposite.getXViewer().getLabelProvider();
    labelProvider.setParentGoal((GoalArtifact)editor.getAwa());
    worldComposite.getWorldXViewer().addMenuActionProvider(this);
    getSite().setSelectionProvider(worldComposite.getWorldXViewer());
    GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
    gd.widthHint=100;
    gd.heightHint=100;
    worldComposite.setLayoutData(gd);
    reload();
    createActions();
    return true;
  }
  return false;
}","/** 
 * @return true if created; false if skipped
 */
private boolean createMembersBody(){
  if (!Widgets.isAccessible(worldComposite)) {
    worldComposite=new WorldComposite(""String_Node_Str"",editor,new GoalXViewerFactory((GoalArtifact)editor.getAwa()),bodyComp,SWT.BORDER);
    new GoalDragAndDrop(worldComposite,SMAEditor.EDITOR_ID);
    WorldLabelProvider labelProvider=(WorldLabelProvider)worldComposite.getXViewer().getLabelProvider();
    labelProvider.setParentGoal((GoalArtifact)editor.getAwa());
    worldComposite.getWorldXViewer().addMenuActionProvider(this);
    getSite().setSelectionProvider(worldComposite.getWorldXViewer());
    GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
    gd.widthHint=100;
    gd.heightHint=100;
    worldComposite.setLayoutData(gd);
    reload();
    createActions();
    return true;
  }
  return false;
}",0.9965156794425089
97345,"private void refreshToolbar(){
  IToolBarManager toolBarMgr=scrolledForm.getToolBarManager();
  toolBarMgr.removeAll();
  toolBarMgr.add(getWorldXViewer().getCustomizeAction());
  toolBarMgr.add(new RefreshAction(worldComposite));
  scrolledForm.updateToolBar();
}","private void refreshToolbar(){
  IToolBarManager toolBarMgr=scrolledForm.getToolBarManager();
  toolBarMgr.removeAll();
  toolBarMgr.add(new OpenNewAtsWorldEditorSelectedAction(worldComposite));
  toolBarMgr.add(getWorldXViewer().getCustomizeAction());
  toolBarMgr.add(new RefreshAction(worldComposite));
  scrolledForm.updateToolBar();
}",0.8756218905472637
97346,"public GoalDragAndDrop(WorldComposite worldComposite,String viewId){
  super(worldComposite,viewId);
}","public GoalDragAndDrop(WorldComposite worldComposite,String viewId){
  super(worldComposite.getXViewer().getTree(),viewId);
  this.worldComposite=worldComposite;
}",0.769811320754717
97347,"public WorldComposite(String id,final IWorldEditor worldEditor,IXViewerFactory xViewerFactory,Composite parent,int style,boolean createDragAndDrop){
  super(parent,style);
  this.id=id;
  this.iWorldEditor=worldEditor;
  setLayout(new GridLayout(1,true));
  setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite mainComp=new Composite(this,SWT.NONE);
  mainComp.setLayout(ALayout.getZeroMarginLayout());
  mainComp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  if (!DbConnectionExceptionComposite.dbConnectionIsOk(this)) {
    worldXViewer=null;
    return;
  }
  worldXViewer=new WorldXViewer(mainComp,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION,xViewerFactory != null ? xViewerFactory : new WorldXViewerFactory(),null);
  worldXViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  worldXViewer.setContentProvider(new WorldContentProvider(worldXViewer));
  worldXViewer.setLabelProvider(new WorldLabelProvider(worldXViewer));
  if (createDragAndDrop) {
    new WorldViewDragAndDrop(this,WorldEditor.EDITOR_ID);
  }
  setContent(mainComp);
  setExpandHorizontal(true);
  setExpandVertical(true);
  layout();
  WorldXViewerEventManager.add(this);
}","public WorldComposite(String id,final IWorldEditor worldEditor,IXViewerFactory xViewerFactory,Composite parent,int style){
  super(parent,style);
  this.id=id;
  this.iWorldEditor=worldEditor;
  setLayout(new GridLayout(1,true));
  setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite mainComp=new Composite(this,SWT.NONE);
  mainComp.setLayout(ALayout.getZeroMarginLayout());
  mainComp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  if (!DbConnectionExceptionComposite.dbConnectionIsOk(this)) {
    worldXViewer=null;
    return;
  }
  worldXViewer=new WorldXViewer(mainComp,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION,xViewerFactory != null ? xViewerFactory : new WorldXViewerFactory(),null);
  worldXViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  worldXViewer.setContentProvider(new WorldContentProvider(worldXViewer));
  worldXViewer.setLabelProvider(new WorldLabelProvider(worldXViewer));
  setContent(mainComp);
  setExpandHorizontal(true);
  setExpandVertical(true);
  layout();
  WorldXViewerEventManager.add(this);
}",0.8422923145268769
97348,"public void resetListValue() throws OseeCoreException {
  startParagraph();
  addWordMl(LISTNUM_FIELD);
  endParagraph();
}","public void resetListValue() throws OseeCoreException {
  startParagraph();
  append(""String_Node_Str"");
  append(""String_Node_Str"");
  addWordMl(LISTNUM_FIELD);
  endParagraph();
}",0.8092105263157895
97349,"@Override public boolean isDirty(){
  return areAttributesDirty() || hasDirtyRelations() || hasDirtyArtifactType()|| isReplaceWithVersion();
}","@Override public boolean isDirty(){
  return areAttributesDirty() || hasDirtyArtifactType() || isReplaceWithVersion();
}",0.9083969465648856
97350,"@Override public int getTransaction(){
  return getOrcsData().getVersion().getTransactionId();
}","@Override public int getTransaction(){
  int maxTransactionId=getOrcsData().getVersion().getTransactionId();
  for (  Attribute<?> attribute : getAllAttributes()) {
    maxTransactionId=Math.max(maxTransactionId,attribute.getOrcsData().getVersion().getTransactionId());
  }
  return maxTransactionId;
}",0.4472361809045226
97351,"@Test public void testDeleteArtifact() throws OseeCoreException {
  OrcsTransaction transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,""String_Node_Str"");
  ArtifactWriteable artifact=transaction.createArtifact(CoreArtifactTypes.AccessControlModel,""String_Node_Str"");
  transaction.commit();
  transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,""String_Node_Str"");
  ArtifactReadable toDelete=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andGuidsOrHrids(artifact.getGuid()).getResults().getExactlyOne();
  ArtifactWriteable writeable=transaction.asWriteable(toDelete);
  writeable.delete();
  transaction.commit();
  toDelete=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andGuidsOrHrids(writeable.getGuid()).includeDeleted().getResults().getOneOrNull();
  Assert.assertNotNull(toDelete);
  Assert.assertTrue(toDelete.isDeleted());
}","@Test public void testDeleteArtifact() throws OseeCoreException {
  OrcsTransaction transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,testName.getMethodName());
  ArtifactWriteable artifact=transaction.createArtifact(CoreArtifactTypes.AccessControlModel,""String_Node_Str"");
  transaction.commit();
  transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,testName.getMethodName());
  ArtifactReadable toDelete=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andGuidsOrHrids(artifact.getGuid()).getResults().getExactlyOne();
  ArtifactWriteable writeable=transaction.asWriteable(toDelete);
  writeable.delete();
  transaction.commit();
  toDelete=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andGuidsOrHrids(writeable.getGuid()).includeDeleted().getResults().getOneOrNull();
  Assert.assertNotNull(toDelete);
  Assert.assertTrue(toDelete.isDeleted());
}",0.8515709642470206
97352,"@Test public void testAsWritableException() throws OseeCoreException {
  ArtifactReadable guestUser=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andIds(SystemUser.Guest).getResults().getExactlyOne();
  OrcsTransaction transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,""String_Node_Str"");
  ArtifactWriteable writeable=transaction.asWriteable(guestUser);
  writeable.setName(""String_Node_Str"");
  transaction.commit();
  thrown.expect(OseeAccessDeniedException.class);
  writeable.setName(""String_Node_Str"");
}","@Test public void testAsWritableException() throws OseeCoreException {
  ArtifactReadable guestUser=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andIds(SystemUser.Guest).getResults().getExactlyOne();
  OrcsTransaction transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,testName.getMethodName());
  ArtifactWriteable writeable=transaction.asWriteable(guestUser);
  writeable.setName(""String_Node_Str"");
  transaction.commit();
  thrown.expect(OseeAccessDeniedException.class);
  writeable.setName(""String_Node_Str"");
}",0.6804680468046804
97353,"@Test public void testAsWritable() throws OseeCoreException {
  ArtifactReadable guestUser=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andIds(SystemUser.Guest).getResults().getExactlyOne();
  OrcsTransaction transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,""String_Node_Str"");
  ArtifactWriteable writeable=transaction.asWriteable(guestUser);
  writeable.setName(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",guestUser.getName());
  transaction.commit();
  Assert.assertEquals(""String_Node_Str"",guestUser.getName());
  guestUser=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andIds(SystemUser.Guest).getResults().getExactlyOne();
  Assert.assertEquals(""String_Node_Str"",guestUser.getName());
}","@Test public void testAsWritable() throws OseeCoreException {
  ArtifactReadable guestUser=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andIds(SystemUser.Guest).getResults().getExactlyOne();
  OrcsTransaction transaction=txFactory.createTransaction(CoreBranches.COMMON,userArtifact,testName.getMethodName());
  ArtifactWriteable writeable=transaction.asWriteable(guestUser);
  writeable.setName(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",guestUser.getName());
  transaction.commit();
  Assert.assertEquals(""String_Node_Str"",guestUser.getName());
  guestUser=orcsApi.getQueryFactory(context).fromBranch(CoreBranches.COMMON).andIds(SystemUser.Guest).getResults().getExactlyOne();
  Assert.assertEquals(""String_Node_Str"",guestUser.getName());
}",0.973531310522918
97354,"@Test public void testPublishWithDiffMerge() throws OseeCoreException {
  modifyOption(""String_Node_Str"",true);
  modifyOption(""String_Node_Str"",rootBranch);
  modifyOption(""String_Node_Str"",LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER);
  List<Artifact> artifacts=new ArrayList<Artifact>();
  Artifact updateDoc=ArtifactQuery.getArtifactFromId(docFolder.getArtId(),updateBranch);
  artifacts.add(updateDoc);
  renderer.publish(singleTemplate,null,artifacts,options);
  String resultPath=renderer.getStringOption(IRenderer.RESULT_PATH_RETURN);
  Assert.assertNotEquals(String.format(""String_Node_Str"",method.getQualifiedTestName()),resultPath,null);
  String contents;
  try {
    contents=getFileAsString(resultPath);
    Assert.assertTrue(""String_Node_Str"",contents.contains(""String_Node_Str""));
    Assert.assertTrue(""String_Node_Str"",contents.contains(""String_Node_Str""));
    basicDocumentCheck(contents,""String_Node_Str"",true);
  }
 catch (  IOException ex) {
  }
}","@Test public void testPublishWithDiffMerge() throws OseeCoreException {
  modifyOption(""String_Node_Str"",true);
  modifyOption(""String_Node_Str"",rootBranch);
  modifyOption(""String_Node_Str"",LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER);
  List<Artifact> artifacts=new ArrayList<Artifact>();
  Artifact updateDoc=ArtifactQuery.getArtifactFromId(docFolder.getArtId(),updateBranch);
  artifacts.add(updateDoc);
  renderer.publish(singleTemplate,null,artifacts,options);
  String resultPath=renderer.getStringOption(IRenderer.RESULT_PATH_RETURN);
  Assert.assertNotEquals(String.format(""String_Node_Str"",method.getQualifiedTestName()),resultPath,null);
  String contents;
  try {
    contents=getFileAsString(resultPath);
    String mergeContent1=""String_Node_Str"";
    String mergeContent2=""String_Node_Str"";
    Assert.assertTrue(""String_Node_Str"",contents.contains(mergeContent1) || contents.contains(mergeContent2));
    Assert.assertTrue(""String_Node_Str"",contents.contains(""String_Node_Str""));
    basicDocumentCheck(contents,""String_Node_Str"",true);
  }
 catch (  IOException ex) {
  }
}",0.9258902791145333
97355,"@Override public void runOperation(VariableMap variableMap,final IProgressMonitor monitor) throws Exception {
  if (!blamReadyToExecute()) {
    monitor.setCanceled(true);
    return;
  }
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch scriptsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch procedureBranch=variableMap.getBranch(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  versions=new ArrayList<IAtsVersion>();
  for (  IAtsVersion version : variableMap.getCollection(IAtsVersion.class,""String_Node_Str"")) {
    versions.add(version);
  }
  init();
  loadTestRunArtifacts(scriptsBranch);
  Collection<String> traceHandlerIds=new LinkedList<String>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      traceHandlerIds.add(handler);
    }
  }
  TraceabilityProviderOperation provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,traceHandlerIds);
  RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(procedureBranch,provider);
  IStatus status=traceabilityData.initialize(monitor);
switch (status.getSeverity()) {
case IStatus.OK:
    requirementToCodeUnitsMap=traceabilityData.getRequirementsToCodeUnits();
  requirementNameToTestProcedures=traceabilityData.getRequirementNameToTestProcedures();
loadReqTaskMap();
writeStatusSheet(traceabilityData.getAllSwRequirements());
writeTestScriptSheet(traceabilityData.getCodeUnits());
excelWriter.endWorkbook();
IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
AIFile.writeToFile(iFile,charBak);
Program.launch(iFile.getLocation().toOSString());
break;
case IStatus.CANCEL:
monitor.setCanceled(true);
break;
default :
throw new OseeCoreException(status.getMessage(),status.getException());
}
}","@Override public void runOperation(VariableMap variableMap,final IProgressMonitor monitor) throws Exception {
  if (!blamReadyToExecute()) {
    monitor.setCanceled(true);
    return;
  }
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch scriptsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch procedureBranch=variableMap.getBranch(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  versions=new ArrayList<IAtsVersion>();
  for (  IAtsVersion version : variableMap.getCollection(IAtsVersion.class,""String_Node_Str"")) {
    versions.add(version);
  }
  init();
  loadTestRunArtifacts(scriptsBranch);
  Collection<TraceHandler> traceHandlers=new LinkedList<TraceHandler>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  TraceabilityProviderOperation provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,traceHandlers);
  RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(procedureBranch,provider);
  IStatus status=traceabilityData.initialize(monitor);
switch (status.getSeverity()) {
case IStatus.OK:
    requirementToCodeUnitsMap=traceabilityData.getRequirementsToCodeUnits();
  requirementNameToTestProcedures=traceabilityData.getRequirementNameToTestProcedures();
loadReqTaskMap();
writeStatusSheet(traceabilityData.getAllSwRequirements());
writeTestScriptSheet(traceabilityData.getCodeUnits());
excelWriter.endWorkbook();
IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
AIFile.writeToFile(iFile,charBak);
Program.launch(iFile.getLocation().toOSString());
break;
case IStatus.CANCEL:
monitor.setCanceled(true);
break;
default :
throw new OseeCoreException(status.getMessage(),status.getException());
}
}",0.905019305019305
97356,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  List<Artifact> artifacts=variableMap.getArtifacts(""String_Node_Str"");
  if (artifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IOseeBranch branch=artifacts.get(0).getBranch();
  init();
  String scriptDir=variableMap.getString(SCRIPT_ROOT_DIR);
  Boolean checked=variableMap.getBoolean(USE_TRACE_IN_OSEE);
  Collection<String> traceHandlerIds=new LinkedList<String>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      traceHandlerIds.add(handler);
    }
  }
  if (!checked) {
    File dir=new File(scriptDir);
    if (dir.exists()) {
      ScriptTraceabilityOperation traceOperation=new ScriptTraceabilityOperation(dir.getParentFile(),branch,false,traceHandlerIds);
      Operations.executeWorkAndCheckStatus(traceOperation,monitor);
      requirementsToCodeUnits=traceOperation.getRequirementToCodeUnitsMap();
    }
  }
  writeMainSheet(prepareSubsystemRequirements(artifacts));
  writer.endWorkbook();
  IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
  AIFile.writeToFile(iFile,charBak);
  Program.launch(iFile.getLocation().toOSString());
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  List<Artifact> artifacts=variableMap.getArtifacts(""String_Node_Str"");
  if (artifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IOseeBranch branch=artifacts.get(0).getBranch();
  init();
  String scriptDir=variableMap.getString(SCRIPT_ROOT_DIR);
  Boolean checked=variableMap.getBoolean(USE_TRACE_IN_OSEE);
  Collection<TraceHandler> traceHandlers=new LinkedList<TraceHandler>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  if (!checked) {
    File dir=new File(scriptDir);
    if (dir.exists()) {
      ScriptTraceabilityOperation traceOperation=new ScriptTraceabilityOperation(dir.getParentFile(),branch,false,traceHandlers);
      Operations.executeWorkAndCheckStatus(traceOperation,monitor);
      requirementsToCodeUnits=traceOperation.getRequirementToCodeUnitsMap();
    }
  }
  writeMainSheet(prepareSubsystemRequirements(artifacts));
  writer.endWorkbook();
  IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
  AIFile.writeToFile(iFile,charBak);
  Program.launch(iFile.getLocation().toOSString());
}",0.8624673872530749
97357,"@Override public String getXWidgetsXml() throws OseeCoreException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + USE_TRACE_IN_OSEE + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + SCRIPT_ROOT_DIR + ""String_Node_Str"");
  availableTraceHandlers=new LinkedList<String>();
  sb.append(""String_Node_Str"");
  Collection<String> traceHandlers=TraceUnitExtensionManager.getInstance().getAllTraceHandlerNames();
  for (  String handler : traceHandlers) {
    sb.append(String.format(TRACE_HANDLER_CHECKBOX,handler));
    availableTraceHandlers.add(handler);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String getXWidgetsXml() throws OseeCoreException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + USE_TRACE_IN_OSEE + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + SCRIPT_ROOT_DIR + ""String_Node_Str"");
  availableTraceHandlers=new LinkedList<String>();
  sb.append(""String_Node_Str"");
  Collection<String> traceHandlerNames=TraceUnitExtensionManager.getInstance().getAllTraceHandlerNames();
  for (  String handler : traceHandlerNames) {
    sb.append(String.format(TRACE_HANDLER_CHECKBOX,handler));
    availableTraceHandlers.add(handler);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9943661971830986
97358,"@Override public boolean performFinish(){
  try {
    IOseeBranch branch=mainPage.getSelectedBranch();
    File file=mainPage.getImportFile();
    String[] handerIds=mainPage.getTraceUnitHandlerIds();
    Operations.executeWorkAndCheckStatus(new ScriptTraceabilityOperation(file,branch,true,Arrays.asList(handerIds)));
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"",ex);
  }
  return true;
}","@Override public boolean performFinish(){
  try {
    IOseeBranch branch=mainPage.getSelectedBranch();
    File file=mainPage.getImportFile();
    Collection<TraceHandler> handlers=new LinkedList<TraceHandler>();
    for (    String handlerId : mainPage.getTraceUnitHandlerIds()) {
      handlers.add(TraceUnitExtensionManager.getInstance().getTraceUnitHandlerById(handlerId));
    }
    Operations.executeWorkAndCheckStatus(new ScriptTraceabilityOperation(file,branch,true,handlers));
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"",ex);
  }
  return true;
}",0.7803958529688972
97359,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Collection<TraceHandler> traceHandlers=getTraceHandlers();
  monitor.worked(1);
  requirementData.initialize(monitor);
  if (writeOutResults) {
    excelWriter.startSheet(""String_Node_Str"",6);
    excelWriter.writeRow(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (file.isFile()) {
    for (    String path : Lib.readListFromFile(file,true)) {
      monitor.subTask(path);
      handleDirectory(new File(path),traceHandlers);
      checkForCancelledStatus(monitor);
    }
  }
 else   if (file.isDirectory()) {
    handleDirectory(file,traceHandlers);
  }
 else {
    throw new OseeStateException(""String_Node_Str"",file.getCanonicalPath());
  }
  checkForCancelledStatus(monitor);
  if (writeOutResults) {
    excelWriter.endSheet();
    writeNoTraceFilesSheet();
    writeTraceCountsSheet();
    excelWriter.endWorkbook();
    IFile iFile=OseeData.getIFile(""String_Node_Str"");
    AIFile.writeToFile(iFile,charBak);
    Program.launch(iFile.getLocation().toOSString());
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  monitor.worked(1);
  requirementData.initialize(monitor);
  if (writeOutResults) {
    excelWriter.startSheet(""String_Node_Str"",6);
    excelWriter.writeRow(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (file.isFile()) {
    for (    String path : Lib.readListFromFile(file,true)) {
      monitor.subTask(path);
      handleDirectory(new File(path),traceHandlers);
      checkForCancelledStatus(monitor);
    }
  }
 else   if (file.isDirectory()) {
    handleDirectory(file,traceHandlers);
  }
 else {
    throw new OseeStateException(""String_Node_Str"",file.getCanonicalPath());
  }
  checkForCancelledStatus(monitor);
  if (writeOutResults) {
    excelWriter.endSheet();
    writeNoTraceFilesSheet();
    writeTraceCountsSheet();
    excelWriter.endWorkbook();
    IFile iFile=OseeData.getIFile(""String_Node_Str"");
    AIFile.writeToFile(iFile,charBak);
    Program.launch(iFile.getLocation().toOSString());
  }
}",0.9712399811409712
97360,"public ScriptTraceabilityOperation(File file,IOseeBranch branch,boolean writeOutResults,Collection<? extends IArtifactType> types,boolean withInheritance,Collection<String> traceHandlerIds) throws IOException {
  this(new RequirementData(branch,types,withInheritance),file,writeOutResults,traceHandlerIds);
}","public ScriptTraceabilityOperation(File file,IOseeBranch branch,boolean writeOutResults,Collection<? extends IArtifactType> types,boolean withInheritance,Collection<TraceHandler> traceHandlers) throws IOException {
  this(new RequirementData(branch,types,withInheritance),file,writeOutResults,traceHandlers);
}",0.964401294498382
97361,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  Branch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  Branch testProcedureBranch=variableMap.getBranch(""String_Node_Str"");
  Collection<? extends IArtifactType> types=variableMap.getCollection(ArtifactType.class,""String_Node_Str"");
  boolean searchInherited=variableMap.getBoolean(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  List<TraceabilityStyle> selectedReports=getStyles(variableMap);
  Collection<String> traceHandlerIds=new LinkedList<String>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      traceHandlerIds.add(handler);
    }
  }
  int totalWork=selectedReports.size() * 2 + 1;
  monitor.beginTask(""String_Node_Str"",totalWork);
  if (selectedReports.size() > 0) {
    TraceabilityProviderOperation provider;
    if (variableMap.getBoolean(PULL_ALL_DATA_LABEL)) {
      provider=new BranchTraceabilityOperation(testProcedureBranch,types,searchInherited);
    }
 else {
      provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,types,searchInherited,traceHandlerIds);
    }
    RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(testProcedureBranch,provider);
    IStatus status=traceabilityData.initialize(monitor);
    if (status.getSeverity() == IStatus.CANCEL) {
      monitor.setCanceled(true);
    }
 else     if (status.getSeverity() == IStatus.OK) {
      monitor.worked(1);
      int count=0;
      List<IFile> files=new ArrayList<IFile>();
      for (      TraceabilityStyle style : selectedReports) {
        monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),++count,selectedReports.size()));
        TraceabilityTable table=TraceabilityFactory.getTraceabilityTable(OutputFormat.EXCEL,style,traceabilityData);
        if (table != null) {
          table.run(monitor);
        }
        monitor.worked(1);
        if (table != null) {
          monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),count,selectedReports.size()));
          String fileName=style.toString() + ""String_Node_Str"" + Lib.getDateTimeString()+ ""String_Node_Str"";
          IFile iFile=OseeData.getIFile(fileName);
          AIFile.writeToFile(iFile,table.toString());
          files.add(iFile);
        }
        monitor.worked(1);
      }
      for (      IFile iFile : files) {
        Program.launch(iFile.getLocation().toOSString());
      }
    }
 else {
      throw new Exception(status.getMessage(),status.getException());
    }
  }
  monitor.subTask(""String_Node_Str"");
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  Branch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  Branch testProcedureBranch=variableMap.getBranch(""String_Node_Str"");
  Collection<? extends IArtifactType> types=variableMap.getCollection(ArtifactType.class,""String_Node_Str"");
  boolean searchInherited=variableMap.getBoolean(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  List<TraceabilityStyle> selectedReports=getStyles(variableMap);
  Collection<TraceHandler> traceHandlers=new LinkedList<TraceHandler>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  int totalWork=selectedReports.size() * 2 + 1;
  monitor.beginTask(""String_Node_Str"",totalWork);
  if (selectedReports.size() > 0) {
    TraceabilityProviderOperation provider;
    if (variableMap.getBoolean(PULL_ALL_DATA_LABEL)) {
      provider=new BranchTraceabilityOperation(testProcedureBranch,types,searchInherited);
    }
 else {
      provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,types,searchInherited,traceHandlers);
    }
    RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(testProcedureBranch,provider);
    IStatus status=traceabilityData.initialize(monitor);
    if (status.getSeverity() == IStatus.CANCEL) {
      monitor.setCanceled(true);
    }
 else     if (status.getSeverity() == IStatus.OK) {
      monitor.worked(1);
      int count=0;
      List<IFile> files=new ArrayList<IFile>();
      for (      TraceabilityStyle style : selectedReports) {
        monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),++count,selectedReports.size()));
        TraceabilityTable table=TraceabilityFactory.getTraceabilityTable(OutputFormat.EXCEL,style,traceabilityData);
        if (table != null) {
          table.run(monitor);
        }
        monitor.worked(1);
        if (table != null) {
          monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),count,selectedReports.size()));
          String fileName=style.toString() + ""String_Node_Str"" + Lib.getDateTimeString()+ ""String_Node_Str"";
          IFile iFile=OseeData.getIFile(fileName);
          AIFile.writeToFile(iFile,table.toString());
          files.add(iFile);
        }
        monitor.worked(1);
      }
      for (      IFile iFile : files) {
        Program.launch(iFile.getLocation().toOSString());
      }
    }
 else {
      throw new Exception(status.getMessage(),status.getException());
    }
  }
  monitor.subTask(""String_Node_Str"");
}",0.9298406301520424
97362,"public void setCreatedBy(IAtsUser user,boolean logChange,Date date) throws OseeCoreException {
  if (logChange) {
    if (getSoleAttributeValue(AtsAttributeTypes.CreatedBy,null) == null) {
      atsLog.addLog(LogType.Originated,""String_Node_Str"",""String_Node_Str"",date,user);
    }
 else {
      atsLog.addLog(LogType.Originated,""String_Node_Str"",""String_Node_Str"" + AtsClientService.get().getUserAdmin().getCurrentUser().getName(),date,user);
      atsLog.internalResetOriginator(user);
    }
  }
  if (isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    setSoleAttributeValue(AtsAttributeTypes.CreatedBy,user.getUserId());
  }
  if (isAttributeTypeValid(AtsAttributeTypes.CreatedDate)) {
    setSoleAttributeValue(AtsAttributeTypes.CreatedDate,date);
  }
  AtsNotificationManager.notify(this,AtsNotifyType.Originator);
}","public void setCreatedBy(IAtsUser user,boolean logChange) throws OseeCoreException {
  Date date=new Date();
  if (logChange) {
    logCreatedByChange(user,date);
  }
  if (isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    setSoleAttributeValue(AtsAttributeTypes.CreatedBy,user.getUserId());
  }
  AtsNotificationManager.notify(this,AtsNotifyType.Originator);
}",0.2928870292887029
97363,"public static boolean promptChangeOriginator(final Collection<? extends AbstractWorkflowArtifact> awas,boolean persist) throws OseeCoreException {
  UserListDialog ld=new UserListDialog(Displays.getActiveShell(),""String_Node_Str"",Active.Active);
  int result=ld.open();
  if (result == 0) {
    IAtsUser selectedUser=AtsClientService.get().getUserAdmin().getUserFromOseeUser(ld.getSelection());
    Date createdDate=new Date();
    for (    AbstractWorkflowArtifact awa : awas) {
      awa.setCreatedBy(selectedUser,true,createdDate);
    }
    if (persist) {
      Artifacts.persistInTransaction(""String_Node_Str"",awas);
    }
    return true;
  }
  return false;
}","public static boolean promptChangeOriginator(final Collection<? extends AbstractWorkflowArtifact> awas,boolean persist) throws OseeCoreException {
  UserListDialog ld=new UserListDialog(Displays.getActiveShell(),""String_Node_Str"",Active.Active);
  int result=ld.open();
  if (result == 0) {
    IAtsUser selectedUser=AtsClientService.get().getUserAdmin().getUserFromOseeUser(ld.getSelection());
    for (    AbstractWorkflowArtifact awa : awas) {
      awa.setCreatedBy(selectedUser,true);
    }
    if (persist) {
      Artifacts.persistInTransaction(""String_Node_Str"",awas);
    }
    return true;
  }
  return false;
}",0.965034965034965
97364,"@Override public void saveState(IMemento memento){
  super.saveState(memento);
  memento=memento.createChild(INPUT);
  if (sourceBranch != null) {
    memento.putInteger(SOURCE_BRANCH_ID,sourceBranch.getId());
    memento.putInteger(DEST_BRANCH_ID,destBranch.getId());
    memento.putInteger(TRANSACTION_NUMBER,transactionId.getId());
  }
 else   if (commitTrans != null) {
    memento.putInteger(COMMIT_NUMBER,commitTrans.getId());
  }
  if (sourceBranch != null || commitTrans != null) {
    SkynetViews.addDatabaseSourceId(memento);
  }
}","@Override public void saveState(IMemento memento){
  super.saveState(memento);
  if (commitTrans != null || sourceBranch != null || destBranch != null || transactionId != null) {
    try {
      IMemento childMemento=memento.createChild(INPUT);
      if (commitTrans != null) {
        childMemento.putInteger(COMMIT_NUMBER,commitTrans.getId());
      }
      if (sourceBranch != null) {
        childMemento.putInteger(SOURCE_BRANCH_ID,sourceBranch.getId());
      }
      if (destBranch != null) {
        childMemento.putInteger(DEST_BRANCH_ID,destBranch.getId());
      }
      if (transactionId != null) {
        childMemento.putInteger(TRANSACTION_NUMBER,transactionId.getId());
      }
      SkynetViews.addDatabaseSourceId(childMemento);
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,Level.WARNING,""String_Node_Str"",ex);
    }
  }
}",0.5327635327635327
97365,"@Override public String toString(){
  try {
    return String.format(""String_Node_Str"",getWorkPackageId(),getName());
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(org.eclipse.osee.ats.core.client.internal.Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return String.format(""String_Node_Str"",getName());
}","@Override public String toString(){
  try {
    StringBuilder builder=new StringBuilder(getActivityId());
    addWithHypen(builder,getActivityName());
    addWithHypen(builder,getWorkPackageId());
    addWithHypen(builder,getName());
    return builder.toString();
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(org.eclipse.osee.ats.core.client.internal.Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return String.format(""String_Node_Str"",getName());
}",0.7163029525032092
97366,"public static ArtifactEvent getPersistEvent(RemotePersistEvent1 remEvent){
  try {
    ArtifactEvent event=new ArtifactEvent(BranchManager.getBranchByGuid(remEvent.getBranchGuid()));
    event.setNetworkSender(getNetworkSender(remEvent.getNetworkSender()));
    event.setTransactionId(remEvent.getTransactionId());
    for (    RemoteBasicGuidArtifact1 remGuidArt : remEvent.getArtifacts()) {
      EventModType modType=EventModType.getType(remGuidArt.getModTypeGuid());
      if (modType == null) {
        OseeLog.logf(Activator.class,Level.WARNING,""String_Node_Str"",remGuidArt);
      }
 else {
        if (modType == EventModType.Modified) {
          event.getArtifacts().add(getEventModifiedBasicGuidArtifact(modType,remGuidArt));
        }
 else         if (modType == EventModType.ChangeType) {
          event.getArtifacts().add(getEventChangeTypeBasicGuidArtifact(modType,remGuidArt));
        }
 else {
          event.getArtifacts().add(getEventBasicGuidArtifact(modType,remGuidArt));
        }
      }
    }
    for (    RemoteBasicGuidRelation1 guidRel : remEvent.getRelations()) {
      EventBasicGuidRelation relEvent=getEventBasicGuidRelation(guidRel);
      if (relEvent == null) {
        OseeLog.logf(Activator.class,Level.WARNING,""String_Node_Str"",guidRel);
      }
 else {
        event.getRelations().add(relEvent);
      }
    }
    for (    RemoteBasicGuidRelationReorder1 guidReorder : remEvent.getRelationReorders()) {
      event.getRelationOrderRecords().add(getDefaultBasicGuidRelationReorder(guidReorder));
    }
    return event;
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"",ex);
  }
  return null;
}","public static ArtifactEvent getPersistEvent(RemotePersistEvent1 remEvent){
  ArtifactEvent event=new ArtifactEvent(remEvent.getBranchGuid());
  event.setNetworkSender(getNetworkSender(remEvent.getNetworkSender()));
  event.setTransactionId(remEvent.getTransactionId());
  for (  RemoteBasicGuidArtifact1 remGuidArt : remEvent.getArtifacts()) {
    EventModType modType=EventModType.getType(remGuidArt.getModTypeGuid());
    if (modType == null) {
      OseeLog.logf(Activator.class,Level.WARNING,""String_Node_Str"",remGuidArt);
    }
 else {
      if (modType == EventModType.Modified) {
        event.getArtifacts().add(getEventModifiedBasicGuidArtifact(modType,remGuidArt));
      }
 else       if (modType == EventModType.ChangeType) {
        event.getArtifacts().add(getEventChangeTypeBasicGuidArtifact(modType,remGuidArt));
      }
 else {
        event.getArtifacts().add(getEventBasicGuidArtifact(modType,remGuidArt));
      }
    }
  }
  for (  RemoteBasicGuidRelation1 guidRel : remEvent.getRelations()) {
    EventBasicGuidRelation relEvent=getEventBasicGuidRelation(guidRel);
    if (relEvent == null) {
      OseeLog.logf(Activator.class,Level.WARNING,""String_Node_Str"",guidRel);
    }
 else {
      event.getRelations().add(relEvent);
    }
  }
  for (  RemoteBasicGuidRelationReorder1 guidReorder : remEvent.getRelationReorders()) {
    event.getRelationOrderRecords().add(getDefaultBasicGuidRelationReorder(guidReorder));
  }
  return event;
}",0.9065479974570884
97367,"public static void kickLocalArtifactReloadEvent(Object source,Collection<? extends Artifact> artifacts) throws OseeCoreException {
  if (isDisableEvents()) {
    return;
  }
  ArtifactEvent artifactEvent=new ArtifactEvent(artifacts.iterator().next().getBranch(),ArtifactEventType.RELOAD_ARTIFACTS);
  artifactEvent.getArtifacts().addAll(EventBasicGuidArtifact.get(EventModType.Reloaded,artifacts));
  getEventService().send(source,artifactEvent);
}","public static void kickLocalArtifactReloadEvent(Object source,Collection<? extends Artifact> artifacts) throws OseeCoreException {
  if (isDisableEvents()) {
    return;
  }
  ArtifactEvent artifactEvent=new ArtifactEvent(artifacts.iterator().next().getBranch().getGuid(),ArtifactEventType.RELOAD_ARTIFACTS);
  artifactEvent.getArtifacts().addAll(EventBasicGuidArtifact.get(EventModType.Reloaded,artifacts));
  getEventService().send(source,artifactEvent);
}",0.9889624724061812
97368,"public ArtifactEvent(IOseeBranch branch,ArtifactEventType reloadEvent){
  this.reloadEvent=reloadEvent;
  branchGuid=branch.getGuid();
}","public ArtifactEvent(String branchGuid,ArtifactEventType reloadEvent){
  this.reloadEvent=reloadEvent;
  this.branchGuid=branchGuid;
}",0.8962962962962963
97369,"public boolean abort(Throwable th,boolean wait){
  if (abort) {
    return true;
  }
  abort=true;
  this.test.setAborted(true);
  addAbortResult(th);
  if (Thread.currentThread() == this.getThread()) {
    throw new TestException(""String_Node_Str"",Level.SEVERE);
  }
  if (lock.isLocked()) {
    this.interrupt();
  }
  return true;
}","public boolean abort(Throwable th,boolean wait){
  if (abort) {
    return true;
  }
  abort=true;
  this.test.setAborted(true);
  addAbortResult(th);
  if (Thread.currentThread() == this.getThread()) {
    throw new TestException(""String_Node_Str"",Level.SEVERE);
  }
  this.interrupt();
  return true;
}",0.9107981220657276
97370,"@Override protected void run() throws Exception {
  try {
    rb.append(listenerProvider.notifyPreRun(dataProvider.createOnPreRun(propertyStore,test)));
    if (rb.isReturnStatusOK()) {
      List<TestCase> testCases=test.getTestCases();
      for (      TestCase testCase : testCases) {
        if (testCase == null) {
          continue;
        }
        if (abort) {
          addAbortResult(null);
          break;
        }
        rb.append(listenerProvider.notifyPreTestCase(dataProvider.createOnPreTestCase(propertyStore,test,testCase)));
        lock.lock();
        try {
          testCase.baseDoTestCase(getEnvironment());
          if (Thread.interrupted()) {
            throw new InterruptedException(""String_Node_Str"");
          }
        }
 catch (        Throwable ex) {
          if (abort) {
            addAbortResult(null);
          }
 else {
            abort=true;
            this.test.setAborted(true);
            MethodResultImpl methodresult=new MethodResultImpl(ReturnCode.ABORTED);
            Throwable clientSideThrowable=ex;
            if (!ex.getClass().getName().startsWith(""String_Node_Str"")) {
              String msg=ex.getClass().getName();
              if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                msg+=""String_Node_Str"" + ex.getMessage();
              }
              Throwable removeThisOnceWeGetRidOfSerializationOnAssociatedException=new Throwable(msg);
              removeThisOnceWeGetRidOfSerializationOnAssociatedException.setStackTrace(ex.getStackTrace());
              clientSideThrowable=removeThisOnceWeGetRidOfSerializationOnAssociatedException;
            }
            methodresult.addStatus(new BaseStatus(TestEnvironment.class.getName(),Level.SEVERE,clientSideThrowable));
            rb.append(methodresult);
            OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"" + testCase != null ? testCase.getClass().getName() : ""String_Node_Str"" + ""String_Node_Str"",ex);
          }
        }
 finally {
          lock.unlock();
        }
        rb.append(listenerProvider.notifyPostTestCase(dataProvider.createOnPostTestCase(propertyStore,test,testCase)));
      }
    }
  }
  finally {
    rb.append(listenerProvider.notifyPostRun(dataProvider.createOnPostRun(propertyStore,test)));
    if (getEnvironment().getScriptCtrl().isLocked()) {
      getEnvironment().getScriptCtrl().unlock();
    }
  }
}","@Override protected void run() throws Exception {
  try {
    rb.append(listenerProvider.notifyPreRun(dataProvider.createOnPreRun(propertyStore,test)));
    if (rb.isReturnStatusOK()) {
      List<TestCase> testCases=test.getTestCases();
      for (      TestCase testCase : testCases) {
        if (testCase == null) {
          continue;
        }
        if (abort) {
          addAbortResult(null);
          break;
        }
        rb.append(listenerProvider.notifyPreTestCase(dataProvider.createOnPreTestCase(propertyStore,test,testCase)));
        try {
          testCase.baseDoTestCase(getEnvironment());
          if (Thread.interrupted()) {
            throw new InterruptedException(""String_Node_Str"");
          }
        }
 catch (        Throwable ex) {
          if (abort) {
            addAbortResult(null);
          }
 else {
            abort=true;
            this.test.setAborted(true);
            MethodResultImpl methodresult=new MethodResultImpl(ReturnCode.ABORTED);
            Throwable clientSideThrowable=ex;
            if (!ex.getClass().getName().startsWith(""String_Node_Str"")) {
              String msg=ex.getClass().getName();
              if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                msg+=""String_Node_Str"" + ex.getMessage();
              }
              Throwable removeThisOnceWeGetRidOfSerializationOnAssociatedException=new Throwable(msg);
              removeThisOnceWeGetRidOfSerializationOnAssociatedException.setStackTrace(ex.getStackTrace());
              clientSideThrowable=removeThisOnceWeGetRidOfSerializationOnAssociatedException;
            }
            methodresult.addStatus(new BaseStatus(TestEnvironment.class.getName(),Level.SEVERE,clientSideThrowable));
            rb.append(methodresult);
            OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"" + testCase != null ? testCase.getClass().getName() : ""String_Node_Str"" + ""String_Node_Str"",ex);
          }
        }
        rb.append(listenerProvider.notifyPostTestCase(dataProvider.createOnPostTestCase(propertyStore,test,testCase)));
      }
    }
  }
  finally {
    rb.append(listenerProvider.notifyPostRun(dataProvider.createOnPostRun(propertyStore,test)));
    if (getEnvironment().getScriptCtrl().isLocked()) {
      getEnvironment().getScriptCtrl().unlock();
    }
  }
}",0.9858798735511064
97371,"public void removeWidgetForAttributeType(Collection<? extends IAttributeType> attributeTypes){
  for (  IAttributeType attributeType : attributeTypes) {
    xWidgetsMap.remove(attributeType).dispose();
  }
  if (attributeTypes.size() > 0) {
    markDirty();
  }
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true);
}","public void removeWidgetForAttributeType(Collection<? extends IAttributeType> attributeTypes){
  for (  IAttributeType attributeType : attributeTypes) {
    xWidgetsMap.remove(attributeType).dispose();
  }
  if (attributeTypes.size() > 0) {
    markDirty();
  }
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true,true);
}",0.9926793557833088
97372,"public void addWidgetForAttributeType(Collection<IAttributeType> attributeTypes) throws OseeCoreException {
  Artifact artifact=editor.getEditorInput().getArtifact();
  boolean isEditable=!artifact.isReadOnly();
  for (  IAttributeType attributeType : attributeTypes) {
    Composite internalComposite;
    if (DefaultAttributeXWidgetProvider.useMultiLineWidget(attributeType) || DslGrammarManager.isDslAttributeType(attributeType)) {
      internalComposite=createAttributeTypeControlsInSection(composite,attributeType,isEditable,15);
    }
 else {
      internalComposite=createAttributeTypeControls(composite,artifact,attributeType,isEditable,false,20);
    }
    setLabelFonts(internalComposite,FontManager.getDefaultLabelFont());
    HelpUtil.setHelp(internalComposite,OseeHelpContext.ARTIFACT_EDITOR__ATTRIBUTES);
    xWidgetsMap.put(attributeType,internalComposite);
  }
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true);
}","public void addWidgetForAttributeType(Collection<IAttributeType> attributeTypes) throws OseeCoreException {
  Artifact artifact=editor.getEditorInput().getArtifact();
  boolean isEditable=!artifact.isReadOnly();
  for (  IAttributeType attributeType : attributeTypes) {
    Composite internalComposite;
    if (DefaultAttributeXWidgetProvider.useMultiLineWidget(attributeType) || DslGrammarManager.isDslAttributeType(attributeType)) {
      internalComposite=createAttributeTypeControlsInSection(composite,attributeType,isEditable,15);
    }
 else {
      internalComposite=createAttributeTypeControls(composite,artifact,attributeType,isEditable,false,20);
    }
    setLabelFonts(internalComposite,FontManager.getDefaultLabelFont());
    HelpUtil.setHelp(internalComposite,OseeHelpContext.ARTIFACT_EDITOR__ATTRIBUTES);
    xWidgetsMap.put(attributeType,internalComposite);
  }
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true,true);
}",0.9973890339425588
97373,"public static void checkNotNullOrEmpty(String object,String objectName,String details,Object... data) throws OseeCoreException {
  checkNotNull(object,objectName);
  if (object.length() == 0) {
    String message=String.format(details,data);
    throw new OseeArgumentException(""String_Node_Str"",objectName,message);
  }
}","public static void checkNotNullOrEmpty(String object,String objectName,String details,Object... data) throws OseeCoreException {
  checkNotNull(object,objectName,details,data);
  if (object.length() == 0) {
    String message=String.format(details,data);
    throw new OseeArgumentException(""String_Node_Str"",objectName,message);
  }
}",0.9802130898021308
97374,"public static void openPerspective(String perspId){
  IAdaptable input=ResourcesPlugin.getWorkspace();
  @SuppressWarnings(""String_Node_Str"") AbstractUIPlugin plugin=(AbstractUIPlugin)Platform.getPlugin(PlatformUI.PLUGIN_ID);
  IPreferenceStore store=plugin.getPreferenceStore();
  String pref=store.getString(IWorkbenchPreferenceConstants.OPEN_NEW_PERSPECTIVE);
  try {
    if (pref.equals(IWorkbenchPreferenceConstants.OPEN_PERSPECTIVE_WINDOW)) {
      PlatformUI.getWorkbench().openWorkbenchWindow(perspId,input);
    }
 else     if (pref.equals(IWorkbenchPreferenceConstants.OPEN_PERSPECTIVE_REPLACE)) {
      IPerspectiveRegistry reg=PlatformUI.getWorkbench().getPerspectiveRegistry();
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().setPerspective(reg.findPerspectiveWithId(perspId));
    }
  }
 catch (  WorkbenchException ex) {
    OseeLog.log(OseeUiActivator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}","public static void openPerspective(final String perspId){
  final IWorkbenchWindow workbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IPerspectiveDescriptor activePerspective=workbenchWindow.getActivePage().getPerspective();
  if (activePerspective == null || !activePerspective.getId().equals(perspId)) {
    Display.getCurrent().asyncExec(new Runnable(){
      @Override public void run(){
        try {
          workbenchWindow.getWorkbench().showPerspective(perspId,workbenchWindow);
        }
 catch (        WorkbenchException ex) {
          OseeLog.log(OseeUiActivator.class,OseeLevel.SEVERE_POPUP,ex);
        }
      }
    }
);
  }
}",0.198874296435272
97375,"private void populateBaseTransaction(double workAmount,OseeConnection connection,Branch branch,int mergeAddressingQueryId) throws OseeCoreException {
  if (branch.getBranchType() != BranchType.SYSTEM_ROOT) {
    List<Object[]> data=new ArrayList<Object[]>();
    HashSet<Integer> gammas=new HashSet<Integer>(100000);
    int parentBranchId=-1;
    if (branch.hasParentBranch()) {
      parentBranchId=branch.getParentBranch().getId();
    }
    int baseTxId=branch.getBaseTransaction().getId();
    if (branch.getBranchType().isMergeBranch()) {
      populateAddressingToCopy(connection,data,baseTxId,gammas,SELECT_ATTRIBUTE_ADDRESSING_FROM_JOIN,parentBranchId,TxChange.NOT_CURRENT.getValue(),mergeAddressingQueryId);
      populateAddressingToCopy(connection,data,baseTxId,gammas,SELECT_ARTIFACT_ADDRESSING_FROM_JOIN,parentBranchId,TxChange.NOT_CURRENT.getValue(),mergeAddressingQueryId);
    }
 else {
      populateAddressingToCopy(connection,data,baseTxId,gammas,SELECT_ADDRESSING,TxChange.NOT_CURRENT.getValue(),parentBranchId,branch.getSourceTransaction().getId());
    }
    if (!data.isEmpty()) {
      getDatabaseService().runBatchUpdate(connection,INSERT_ADDRESSING,data);
    }
  }
  checkForCancelled();
}","private void populateBaseTransaction(double workAmount,OseeConnection connection,Branch branch,int mergeAddressingQueryId) throws OseeCoreException {
  if (branch.getBranchType() != BranchType.SYSTEM_ROOT) {
    List<Object[]> data=new ArrayList<Object[]>();
    HashSet<Integer> gammas=new HashSet<Integer>(100000);
    int parentBranchId=-1;
    if (branch.hasParentBranch()) {
      parentBranchId=branch.getParentBranch().getId();
    }
    int baseTxId=branch.getBaseTransaction().getId();
    if (branch.getBranchType().isMergeBranch()) {
      populateAddressingToCopy(connection,data,baseTxId,gammas,SELECT_ATTRIBUTE_ADDRESSING_FROM_JOIN,parentBranchId,TxChange.NOT_CURRENT.getValue(),mergeAddressingQueryId);
      populateAddressingToCopy(connection,data,baseTxId,gammas,SELECT_ARTIFACT_ADDRESSING_FROM_JOIN,parentBranchId,TxChange.NOT_CURRENT.getValue(),mergeAddressingQueryId);
    }
 else {
      populateAddressingToCopy(connection,data,baseTxId,gammas,SELECT_ADDRESSING,parentBranchId,branch.getSourceTransaction().getId());
    }
    if (!data.isEmpty()) {
      getDatabaseService().runBatchUpdate(connection,INSERT_ADDRESSING,data);
    }
  }
  checkForCancelled();
}",0.986677768526228
97376,"private void processArtifact() throws OseeCoreException {
  RoughArtifact roughArtifact=new RoughArtifact(RoughArtifactKind.PRIMARY);
  roughArtifact.setSectionNumber(paragraphNumber.trim());
  roughArtifact.addAttribute(CoreAttributeTypes.ParagraphNumber,paragraphNumber);
  roughArtifact.addAttribute(CoreAttributeTypes.Name,paragraphName.trim());
  if (!isRequirement) {
    roughArtifact.setPrimaryArtifactType(CoreArtifactTypes.HeadingHTML);
    roughArtifact.setRoughArtifactKind(RoughArtifactKind.SECONDARY);
  }
  if (!Strings.isValid(guidString)) {
    guidString=GUID.create();
  }
  roughArtifact.setGuid(guidString);
  guidString=""String_Node_Str"";
  for (int rowIndex=0; rowIndex < theArtifact.size(); rowIndex++) {
    RowTypeEnum rowType=rowIndexToRowTypeMap.get(rowIndex);
    String rowValue=theArtifact.get(rowIndex);
switch (rowType) {
case REQUIREMENTS:
      StringBuffer imageFileList=new StringBuffer(""String_Node_Str"");
    getImageList(rowValue,imageFileList);
  rowValue=normailizeHtml(rowValue);
String imageFile=imageFileList.toString();
if (!imageFile.isEmpty()) {
String theImage;
int comma=0;
int imageNumber=0;
postProcessGuids.add(guidString);
do {
  comma=imageFile.indexOf(',');
  if (comma == -1) {
    theImage=uriDirectoryName + imageFile;
    imageFile=""String_Node_Str"";
  }
 else {
    theImage=uriDirectoryName + imageFile.substring(0,comma);
    imageFile=imageFile.substring(comma + 1);
  }
  try {
    URI imageURI=new URI(theImage);
    roughArtifact.addAttribute(""String_Node_Str"",imageURI);
    rowValue=rowValue.replace(theImage,IMAGE_BASE_NAME + Integer.toString(imageNumber));
    imageNumber++;
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}
 while (comma != -1);
}
if (Strings.isValid(rowValue)) {
roughArtifact.addAttribute(CoreAttributeTypes.HTMLContent,rowValue);
}
break;
case ID:
rowValue=rowValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
roughArtifact.addAttribute(CoreAttributeTypes.LegacyId,rowValue);
break;
case SUBSYSTEM:
if (!Strings.isValid(subsystem)) {
roughArtifact.addAttribute(CoreAttributeTypes.Subsystem,subsystem);
subsystem=""String_Node_Str"";
}
break;
case DOCUMENT_APPLICABILITY:
break;
case VERIFICATION_CRITERIA:
processVerification(rowValue,roughArtifact);
break;
case PARENT_ID:
break;
case CHANGE_STATUS:
case OBJECT_HEADING:
case OBJECT_TEXT:
case CHANGE_RATIONALE:
case OTHER:
case LINKS:
default :
break;
}
}
collector.addRoughArtifact(roughArtifact);
inArtifact=false;
theArtifact.clear();
}","private void processArtifact() throws OseeCoreException {
  RoughArtifact roughArtifact=new RoughArtifact(RoughArtifactKind.PRIMARY);
  roughArtifact.setSectionNumber(paragraphNumber.trim());
  roughArtifact.addAttribute(CoreAttributeTypes.ParagraphNumber,paragraphNumber);
  roughArtifact.addAttribute(CoreAttributeTypes.Name,paragraphName.trim());
  if (!isRequirement) {
    roughArtifact.setPrimaryArtifactType(CoreArtifactTypes.HeadingHTML);
    roughArtifact.setRoughArtifactKind(RoughArtifactKind.SECONDARY);
  }
  if (!Strings.isValid(guidString)) {
    guidString=GUID.create();
  }
  roughArtifact.setGuid(guidString);
  guidString=""String_Node_Str"";
  for (int rowIndex=0; rowIndex < theArtifact.size(); rowIndex++) {
    RowTypeEnum rowType=rowIndexToRowTypeMap.get(rowIndex);
    String rowValue=theArtifact.get(rowIndex);
switch (rowType) {
case REQUIREMENTS:
      StringBuffer imageFileList=new StringBuffer(""String_Node_Str"");
    getImageList(rowValue,imageFileList);
  rowValue=normailizeHtml(rowValue);
String imageFile=imageFileList.toString();
if (!imageFile.isEmpty()) {
String theImage;
int comma=0;
int imageNumber=0;
postProcessGuids.add(guidString);
do {
  comma=imageFile.indexOf(',');
  if (comma == -1) {
    theImage=uriDirectoryName + imageFile;
    imageFile=""String_Node_Str"";
  }
 else {
    theImage=uriDirectoryName + imageFile.substring(0,comma);
    imageFile=imageFile.substring(comma + 1);
  }
  try {
    URI imageURI=new URI(theImage);
    roughArtifact.addAttribute(""String_Node_Str"",imageURI);
    rowValue=rowValue.replace(theImage,IMAGE_BASE_NAME + Integer.toString(imageNumber));
    imageNumber++;
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}
 while (comma != -1);
}
if (Strings.isValid(rowValue)) {
roughArtifact.addAttribute(CoreAttributeTypes.HTMLContent,rowValue);
}
break;
case ID:
rowValue=rowValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
roughArtifact.addAttribute(CoreAttributeTypes.LegacyId,rowValue);
break;
case SUBSYSTEM:
if (Strings.isValid(subsystem)) {
roughArtifact.addAttribute(CoreAttributeTypes.Subsystem,subsystem);
subsystem=""String_Node_Str"";
}
break;
case DOCUMENT_APPLICABILITY:
break;
case VERIFICATION_CRITERIA:
processVerification(rowValue,roughArtifact);
break;
case PARENT_ID:
break;
case CHANGE_STATUS:
case OBJECT_HEADING:
case OBJECT_TEXT:
case CHANGE_RATIONALE:
case OTHER:
case LINKS:
default :
break;
}
}
collector.addRoughArtifact(roughArtifact);
inArtifact=false;
theArtifact.clear();
}",0.999800439034125
97377,"@SuppressWarnings(""String_Node_Str"") @Override public Branch handleTxWork(OseeConnection connection) throws OseeCoreException {
  TransactionRecord savedTx=txCache.getOrLoad(branchData.getSourceTransactionId(txCache));
  TransactionRecord priorTx=txCache.getPriorTransaction(savedTx);
  branchData.setFromTransaction(priorTx);
  Callable<Branch> callable=new CreateBranchDatabaseTxCallable(getLogger(),getDatabaseService(),getBranchCache(),getTxCache(),branchFactory,txFactory,branchData);
  try {
    internalBranch=callable.call();
    String guid=branchData.getGuid();
    if (!GUID.isValid(guid)) {
      guid=GUID.create();
    }
    Timestamp timestamp=GlobalTime.GreenwichMeanTimestamp();
    int nextTransactionId=getDatabaseService().getSequence().getNextTransactionId();
    String creationComment=branchData.getCreationComment() + ""String_Node_Str"" + savedTx.getId();
    getDatabaseService().runPreparedUpdate(connection,INSERT_TX_DETAILS,internalBranch.getId(),nextTransactionId,creationComment,timestamp,branchData.getUserArtifactId(),TransactionDetailsType.NonBaselined.getId());
    TransactionRecord record=txFactory.create(nextTransactionId,internalBranch.getId(),creationComment,timestamp,branchData.getUserArtifactId(),RelationalConstants.ART_ID_SENTINEL,TransactionDetailsType.Baselined,branchCache);
    txCache.cache(record);
    populateTransaction(0.30,connection,record.getId(),internalBranch,savedTx);
  }
 catch (  Exception ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
  return internalBranch;
}","@SuppressWarnings(""String_Node_Str"") @Override public Branch handleTxWork(OseeConnection connection) throws OseeCoreException {
  TransactionRecord savedTx=txCache.getOrLoad(branchData.getSourceTransactionId(txCache));
  TransactionRecord priorTx=txCache.getPriorTransaction(savedTx);
  branchData.setFromTransaction(priorTx);
  Callable<Branch> callable=new CreateBranchDatabaseTxCallable(getLogger(),getDatabaseService(),getBranchCache(),getTxCache(),branchFactory,txFactory,branchData);
  try {
    internalBranch=callable.call();
    String guid=branchData.getGuid();
    if (!GUID.isValid(guid)) {
      guid=GUID.create();
    }
    Timestamp timestamp=GlobalTime.GreenwichMeanTimestamp();
    int nextTransactionId=getDatabaseService().getSequence().getNextTransactionId();
    String creationComment=branchData.getCreationComment() + ""String_Node_Str"" + savedTx.getId();
    getDatabaseService().runPreparedUpdate(connection,INSERT_TX_DETAILS,internalBranch.getId(),nextTransactionId,creationComment,timestamp,branchData.getUserArtifactId(),TransactionDetailsType.NonBaselined.getId());
    TransactionRecord record=txFactory.create(nextTransactionId,internalBranch.getId(),creationComment,timestamp,branchData.getUserArtifactId(),RelationalConstants.ART_ID_SENTINEL,TransactionDetailsType.Baselined,branchCache);
    txCache.cache(record);
    populateTransaction(0.30,connection,record.getId(),internalBranch,savedTx);
    UpdatePreviousTxCurrent updater=new UpdatePreviousTxCurrent(getDatabaseService(),internalBranch,connection);
    updater.updateTxNotCurrentsFromTx(record.getId());
  }
 catch (  Exception ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
  return internalBranch;
}",0.9478260869565216
97378,"public void setInput(Object input){
  if (input instanceof ArtifactEditor) {
    this.editor=(ArtifactEditor)input;
    if (getTreeViewer() != null) {
      getTreeViewer().setInput(editor != null ? editor : ""String_Node_Str"");
    }
  }
}","public void setInput(Object input){
  if (input instanceof ArtifactEditor) {
    this.editor=(ArtifactEditor)input;
    if (getTreeViewer() != null && Widgets.isAccessible(getTreeViewer().getTree())) {
      getTreeViewer().setInput(editor != null ? editor : ""String_Node_Str"");
    }
  }
}",0.9035916824196596
97379,"/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#delete(org.eclipse.osee.framework.skynet.core.transaction.SkynetTransaction,coverageEvent,boolean)}.
 */
@Test public void testDelete() throws OseeCoreException {
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(""String_Node_Str"",GUID.create(),CoverageEventType.Deleted,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).delete(transaction,coverageEvent,false);
  transaction.execute();
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNull(artifact);
  Assert.assertEquals(0,CoverageTestUtil.getAllCoverageArtifacts().size());
  Assert.assertEquals(1,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Deleted,coverageEvent.getCoverages().iterator().next().getEventType());
}","/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#delete(org.eclipse.osee.framework.skynet.core.transaction.SkynetTransaction,coverageEvent,boolean)}.
 */
@Test public void testDelete() throws OseeCoreException {
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(""String_Node_Str"",GUID.create(),CoverageEventType.Deleted,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).delete(transaction,coverageEvent,false);
  transaction.execute();
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNull(artifact);
  Assert.assertEquals(0,CoverageTestUtil.getAllCoverageArtifacts().size());
  Assert.assertEquals(1,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Deleted,coverageEvent.getCoverages().iterator().next().getEventType());
}",0.9939197405755978
97380,"/** 
 * Test method for   {@link org.eclipse.osee.coverage.model.CoverageItem#asArtifact(boolean)}.
 */
@Test public void testGetArtifact() throws OseeCoreException {
  try {
    ArtifactQuery.getArtifactFromId(parentGuid,CoverageTestUtil.getTestBranch());
    Assert.fail(""String_Node_Str"");
  }
 catch (  ArtifactDoesNotExist ex) {
  }
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNull(""String_Node_Str"",artifact);
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(true);
  CoverageTestUtil.registerAsTestArtifact(artifact);
  artifact.persist(getClass().getSimpleName());
  Assert.assertNotNull(""String_Node_Str"",artifact);
}","/** 
 * Test method for   {@link org.eclipse.osee.coverage.model.CoverageItem#asArtifact(boolean)}.
 */
@Test public void testGetArtifact() throws OseeCoreException {
  try {
    ArtifactQuery.getArtifactFromId(parentGuid,CoverageTestUtil.getTestBranch());
    Assert.fail(""String_Node_Str"");
  }
 catch (  ArtifactDoesNotExist ex) {
  }
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNull(""String_Node_Str"",artifact);
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).getArtifact(true);
  CoverageTestUtil.registerAsTestArtifact(artifact);
  artifact.persist(getClass().getSimpleName());
  Assert.assertNotNull(""String_Node_Str"",artifact);
}",0.993734335839599
97381,"/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#save(SkynetTransaction,String,CoverageOptionManager)}
 */
@Test public void testSave() throws OseeCoreException {
  Assert.assertEquals(10,ci.getTestUnits().size());
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(true);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  String coverageGuid=GUID.create();
  String coverageName=""String_Node_Str"";
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(coverageName,coverageGuid,CoverageEventType.Modified,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).save(transaction,coverageEvent,CoverageOptionManagerDefault.instance());
  artifact.persist(transaction);
  transaction.execute();
  Assert.assertEquals(coverageGuid,coverageEvent.getPackage().getGuid());
  Assert.assertEquals(coverageName,coverageEvent.getPackage().getName());
  Assert.assertEquals(CoverageEventType.Modified,coverageEvent.getPackage().getEventType());
  Assert.assertEquals(2,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Added,coverageEvent.getCoverages().iterator().next().getEventType());
  Assert.assertEquals(10,ci.getTestUnits().size());
}","/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#save(SkynetTransaction,String,CoverageOptionManager)}
 */
@Test public void testSave() throws OseeCoreException {
  Assert.assertEquals(10,ci.getTestUnits().size());
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).getArtifact(true);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  String coverageGuid=GUID.create();
  String coverageName=""String_Node_Str"";
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(coverageName,coverageGuid,CoverageEventType.Modified,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),null,readOnlyTestUnitNames).save(transaction,coverageEvent,CoverageOptionManagerDefault.instance());
  artifact.persist(transaction);
  transaction.execute();
  Assert.assertEquals(coverageGuid,coverageEvent.getPackage().getGuid());
  Assert.assertEquals(coverageName,coverageEvent.getPackage().getName());
  Assert.assertEquals(CoverageEventType.Modified,coverageEvent.getPackage().getEventType());
  Assert.assertEquals(2,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Added,coverageEvent.getCoverages().iterator().next().getEventType());
  Assert.assertEquals(10,ci.getTestUnits().size());
}",0.9965108164689462
97382,"@Override public void saveTestUnitNames(SkynetTransaction transaction){
}","@Override public void saveTestUnitNames(SkynetTransaction transaction) throws OseeCoreException {
  for (  CoverageUnit coverageUnit : coveragePackage.getCoverageUnits()) {
    OseeCoverageUnitStore store=new OseeCoverageUnitStore(coverageUnit,artifact.getBranch(),artifact,null);
    store.saveTestUnitNames(transaction);
    Artifact childArt=store.getArtifact(false);
    if (childArt.getParent() == null && !artifact.getChildren().contains(childArt)) {
      artifact.addChild(store.getArtifact(false));
    }
  }
}",0.2466216216216216
97383,"private ITestUnitProvider getTestUnitProvider(){
  ITestUnitProvider testUnitProvider=testUnitProviderMap.get(branch);
  if (testUnitProvider == null) {
    ArtifactTestUnitStore store=new ArtifactTestUnitStore(coveragePackage,readOnlyTestUnitNames);
    testUnitProvider=new TestUnitCache(store);
    testUnitProviderMap.put(branch,testUnitProvider);
  }
  return testUnitProvider;
}","private ITestUnitProvider getTestUnitProvider(){
  ITestUnitProvider testUnitProvider=testUnitProviderMap.get(coveragePackage);
  if (testUnitProvider == null) {
    ArtifactTestUnitStore store=new ArtifactTestUnitStore(coveragePackage,readOnlyTestUnitNames);
    testUnitProvider=new TestUnitCache(store);
    testUnitProviderMap.put(coveragePackage,testUnitProvider);
  }
  return testUnitProvider;
}",0.9465648854961832
97384,"public OseeCoverageUnitStore(CoverageUnit coverageUnit,IOseeBranch branch,Artifact testUnitNames){
  super(coverageUnit,coverageUnit.isFolder() ? CoverageArtifactTypes.CoverageFolder : CoverageArtifactTypes.CoverageUnit,branch);
  this.coverageUnit=coverageUnit;
  this.coveragePackage=null;
  this.readOnlyTestUnitNames=testUnitNames;
}","public OseeCoverageUnitStore(CoverageUnit coverageUnit,IOseeBranch branch,Artifact coveragePackage,Artifact testUnitNames){
  super(coverageUnit,coverageUnit.isFolder() ? CoverageArtifactTypes.CoverageFolder : CoverageArtifactTypes.CoverageUnit,branch);
  this.coverageUnit=coverageUnit;
  this.coveragePackage=coveragePackage;
  this.readOnlyTestUnitNames=testUnitNames;
}",0.9380281690140844
97385,"private Collection<String> getTestUnitsHelper(CoverageItem coverageItem,String searchName) throws OseeCoreException {
  ensurePopulated();
  Collection<Integer> entries=itemsToTestUnit.getValues(coverageItem);
  Set<String> names=new LinkedHashSet<String>();
  if (entries != null) {
    for (    Integer entry : entries) {
      if (idToNameCache.containsKey(entry)) {
        String name=idToNameCache.get(entry);
        names.add(Strings.intern(name));
        if (searchName != null && searchName.equals(name)) {
          break;
        }
      }
 else {
        names.add(""String_Node_Str"");
      }
    }
    return names;
  }
 else {
    return java.util.Collections.emptyList();
  }
}","private Collection<String> getTestUnitsHelper(CoverageItem coverageItem,String searchName) throws OseeCoreException {
  ensurePopulated();
  Collection<Integer> entries=itemsToTestUnit.getValues(coverageItem);
  Set<String> names=new LinkedHashSet<String>();
  Map<Integer,CoverageItem> fails=new HashMap<Integer,CoverageItem>();
  if (entries != null) {
    for (    Integer entry : entries) {
      if (idToNameCache.containsKey(entry)) {
        String name=idToNameCache.get(entry);
        names.add(Strings.intern(name));
        if (searchName != null && searchName.equals(name)) {
          break;
        }
      }
 else {
        names.add(String.format(""String_Node_Str"",entry));
      }
    }
    return names;
  }
 else {
    return java.util.Collections.emptyList();
  }
}",0.9378378378378378
97386,"public static String convertNonPrintableCharacers(String message){
  StringBuilder buff=new StringBuilder(message.length());
  for (int i=0; i < message.length(); i++) {
    char currentChar=message.charAt(i);
    if (currentChar < 32 || currentChar > 126) {
      buff.append(""String_Node_Str"" + (int)currentChar + ""String_Node_Str"");
    }
 else     if (currentChar == '<') {
      buff.append(""String_Node_Str"");
    }
 else     if (currentChar == '>') {
      buff.append(""String_Node_Str"");
    }
 else     if (currentChar == '&') {
      buff.append(""String_Node_Str"");
    }
 else {
      buff.append(currentChar);
    }
  }
  return buff.toString();
}","public static String convertNonPrintableCharacers(String message){
  StringBuilder buff=new StringBuilder(message.length());
  for (int i=0; i < message.length(); i++) {
    char currentChar=message.charAt(i);
    if ((currentChar < 32 || currentChar > 126) && currentChar != '\n' && currentChar != '\r' && currentChar != '\t') {
      buff.append(""String_Node_Str"" + (int)currentChar + ""String_Node_Str"");
    }
 else     if (currentChar == '<') {
      buff.append(""String_Node_Str"");
    }
 else     if (currentChar == '>') {
      buff.append(""String_Node_Str"");
    }
 else     if (currentChar == '&') {
      buff.append(""String_Node_Str"");
    }
 else {
      buff.append(currentChar);
    }
  }
  return buff.toString();
}",0.9488840892728582
97387,"/** 
 * An artifact reflected about its own branch returns itself. Otherwise a new artifact is introduced on the destinationBranch
 * @return the newly created artifact or this artifact if the destinationBranch is this artifact's branch
 */
public final Artifact reflect(IOseeBranch destinationBranch) throws OseeCoreException {
  if (branch.equals(destinationBranch)) {
    return this;
  }
  return reflectHelper(destinationBranch);
}","/** 
 * An artifact reflected about its own branch returns itself. Otherwise a new artifact is introduced on the destinationBranch
 * @return the newly created artifact or this artifact if the destinationBranch is this artifact's branch
 */
public final Artifact reflect(IOseeBranch destinationBranch) throws OseeCoreException {
  return new IntroduceArtifactOperation(destinationBranch).introduce(this);
}",0.8028503562945368
97388,"/** 
 * This is used to mark that the artifact deleted.
 */
public final void internalSetDeleted() throws OseeCoreException {
  this.modType=ModificationType.DELETED;
  for (  Attribute<?> attribute : getAttributes()) {
    attribute.setArtifactDeleted();
  }
}","/** 
 * This is used to mark that the artifact deleted.
 */
public final void internalSetDeleted() throws OseeCoreException {
  internalSetModType(ModificationType.DELETED);
  for (  Attribute<?> attribute : getAttributes()) {
    attribute.setArtifactDeleted();
  }
}",0.8771266540642723
97389,"/** 
 * artifact.persist(); artifact.reloadAttributesAndRelations(); Will need to be called afterwards to see replaced data in memory
 */
public void replaceWithVersion(int gammaId){
  lastValidModType=this.modType;
  this.modType=ModificationType.REPLACED_WITH_VERSION;
  this.gammaId=gammaId;
}","/** 
 * artifact.persist(); artifact.reloadAttributesAndRelations(); Will need to be called afterwards to see replaced data in memory
 */
public void replaceWithVersion(int gammaId){
  this.gammaId=gammaId;
  internalSetModType(ModificationType.REPLACED_WITH_VERSION);
}",0.823321554770318
97390,"public final List<Artifact> getDescendantsWithArtTypes(Collection<ArtifactType> descendantTypes) throws OseeCoreException {
  List<Artifact> descendants=new LinkedList<Artifact>();
  for (  Artifact child : getChildren()) {
    ArtifactType childArtType=child.getArtifactType();
    if (descendantTypes.contains(childArtType)) {
      descendants.add(child);
    }
    child.getDescendants(descendants);
  }
  return descendants;
}","public List<Artifact> getDescendantsWithArtTypes(Collection<ArtifactType> descendantTypes) throws OseeCoreException {
  List<Artifact> descendants=new LinkedList<Artifact>();
  for (  Artifact child : getChildren()) {
    ArtifactType childArtType=child.getArtifactType();
    if (descendantTypes.contains(childArtType)) {
      descendants.add(child);
    }
    child.getDescendants(descendants,DeletionFlag.EXCLUDE_DELETED);
  }
  return descendants;
}",0.96045197740113
97391,"public static void addRelation(IRelationSorterId sorterId,IRelationType relationTypeToken,Artifact artifactA,Artifact artifactB,String rationale) throws OseeCoreException {
  Conditions.checkExpressionFailOnTrue(artifactA.equals(artifactB),""String_Node_Str"",artifactA);
  RelationLink relation=relationCache.getLoadedRelation(artifactA,artifactA.getArtId(),artifactB.getArtId(),relationTypeToken,INCLUDE_DELETED);
  RelationType relationType=RelationTypeManager.getType(relationTypeToken);
  if (relation == null) {
    ensureRelationCanBeAdded(relationTypeToken,artifactA,artifactB);
    relation=getOrCreate(artifactA.getArtId(),artifactB.getArtId(),artifactA.getBranch(),relationType,0,0,rationale,ModificationType.NEW);
    relation.setDirty();
    RelationTypeSideSorter sorter=createTypeSideSorter(artifactA,relationTypeToken,RelationSide.SIDE_B);
    sorter.addItem(sorterId,artifactB);
  }
 else   if (relation.isDeleted()) {
    relation.undelete();
    RelationTypeSideSorter sorter=createTypeSideSorter(artifactA,relationTypeToken,RelationSide.SIDE_B);
    sorter.addItem(sorterId,artifactB);
  }
}","public static void addRelation(IRelationSorterId sorterId,IRelationType relationTypeToken,Artifact artifactA,Artifact artifactB,String rationale) throws OseeCoreException {
  Conditions.checkExpressionFailOnTrue(artifactA.equals(artifactB),""String_Node_Str"",artifactA);
  RelationLink relation=relationCache.getLoadedRelation(artifactA,artifactA.getArtId(),artifactB.getArtId(),relationTypeToken,INCLUDE_DELETED);
  RelationType relationType=RelationTypeManager.getType(relationTypeToken);
  if (relation == null) {
    try {
      ensureRelationCanBeAdded(relationTypeToken,artifactA,artifactB);
      relation=getOrCreate(artifactA.getArtId(),artifactB.getArtId(),artifactA.getBranch(),relationType,0,0,rationale,ModificationType.NEW);
      relation.setDirty();
      RelationTypeSideSorter sorter=createTypeSideSorter(artifactA,relationTypeToken,RelationSide.SIDE_B);
      sorter.addItem(sorterId,artifactB);
    }
 catch (    OseeArgumentException e) {
      System.out.println(""String_Node_Str"" + relation + ""String_Node_Str""+ relationTypeToken+ ""String_Node_Str""+ artifactA+ ""String_Node_Str""+ artifactB+ ""String_Node_Str"");
    }
  }
 else   if (relation.isDeleted()) {
    relation.undelete();
    RelationTypeSideSorter sorter=createTypeSideSorter(artifactA,relationTypeToken,RelationSide.SIDE_B);
    sorter.addItem(sorterId,artifactB);
  }
}",0.9005278116118555
97392,"private File getInputFile() throws IOException {
  File outfile=tempFolder.newFile(""String_Node_Str"");
  URL url=UtfReadingRuleTest.class.getResource(FILE_INPUT);
  InputStream inputStream=null;
  try {
    inputStream=new BufferedInputStream(url.openStream());
    Lib.inputStreamToFile(inputStream,outfile);
  }
  finally {
    Lib.close(inputStream);
  }
  return outfile;
}","private File getInputFile() throws IOException {
  String copyName=String.format(""String_Node_Str"",Lib.getDateTimeString());
  File outfile=tempFolder.newFile(copyName);
  URL url=UtfReadingRuleTest.class.getResource(FILE_INPUT);
  InputStream inputStream=null;
  try {
    inputStream=new BufferedInputStream(url.openStream());
    Lib.inputStreamToFile(inputStream,outfile);
  }
  finally {
    Lib.close(inputStream);
  }
  return outfile;
}",0.8477466504263094
97393,"@Test public void testCharset(){
  Stack<String> charsetStack=new Stack<String>();
  charsetStack.add(""String_Node_Str"");
  charsetStack.add(""String_Node_Str"");
  Utf8TestRule rule=new Utf8TestRule();
  while (!charsetStack.isEmpty()) {
    try {
      File inputFile=getInputFile();
      rule.setCharsetString(charsetStack.pop());
      rule.process(inputFile);
    }
 catch (    Exception ex) {
      Assert.assertTrue(""String_Node_Str"" + ex.toString(),ex instanceof UnsupportedCharsetException || ex instanceof UnsupportedEncodingException);
    }
  }
}","@Test public void testCharset(){
  Stack<String> charsetStack=new Stack<String>();
  charsetStack.add(""String_Node_Str"");
  charsetStack.add(""String_Node_Str"");
  Utf8TestRule rule=new Utf8TestRule();
  while (!charsetStack.isEmpty()) {
    try {
      rule.setCharsetString(charsetStack.pop());
      rule.process(inputFile);
    }
 catch (    Exception ex) {
      Assert.assertTrue(""String_Node_Str"" + ex.toString(),ex instanceof UnsupportedCharsetException || ex instanceof UnsupportedEncodingException);
    }
  }
}",0.9656453110492108
97394,"@Test public void testUtf8ReadData() throws IOException {
  Utf8TestRule rule=new Utf8TestRule();
  try {
    File inputFile=getInputFile();
    rule.process(inputFile);
  }
 catch (  UnsupportedCharsetException ex) {
    Assert.assertTrue(true);
  }
catch (  Exception ex) {
    Assert.fail(""String_Node_Str"");
  }
  String expectedUtf8String=Lib.fileToString(getClass(),FILE_INPUT);
  String actual=rule.getLastOutput().toString().trim();
  Assert.assertEquals(expectedUtf8String,actual);
}","@Test public void testUtf8ReadData() throws IOException {
  Utf8TestRule rule=new Utf8TestRule();
  try {
    rule.process(inputFile);
  }
 catch (  UnsupportedCharsetException ex) {
    Assert.assertTrue(true);
  }
catch (  Exception ex) {
    Assert.fail(""String_Node_Str"");
  }
  String expectedUtf8String=Lib.fileToString(getClass(),FILE_INPUT);
  String actual=rule.getLastOutput().toString().trim();
  Assert.assertEquals(expectedUtf8String,actual);
}",0.9631190727081138
97395,"@Override public void performDrop(final DropTargetEvent event){
  Artifact parentArtifact=getSelectedArtifact(event);
  if (parentArtifact == null && selectedBranch != null) {
    try {
      parentArtifact=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(selectedBranch);
    }
 catch (    Exception ex) {
      OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
    }
  }
  if (parentArtifact != null) {
    if (ArtifactTransfer.getInstance().isSupportedType(event.currentDataType)) {
      ArtifactData artData=ArtifactTransfer.getInstance().nativeToJava(event.currentDataType);
      final Artifact[] artifactsToBeRelated=artData.getArtifacts();
      if (artifactsToBeRelated != null && artifactsToBeRelated.length > 0 && !artifactsToBeRelated[0].getBranch().equals(parentArtifact.getBranch())) {
        MessageDialogWithToggle result=MessageDialogWithToggle.openYesNoQuestion(viewPart.getViewSite().getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,null,null);
        InterArtifactExplorerDropHandlerOperation interDropHandler=new InterArtifactExplorerDropHandlerOperation(parentArtifact,artifactsToBeRelated,true,result.getReturnCode() == IDialogConstants.YES_ID,result.getToggleState());
        Operations.executeAsJob(interDropHandler,true);
      }
 else       if (isValidForArtifactDrop(event) && MessageDialog.openQuestion(viewPart.getViewSite().getShell(),""String_Node_Str"",""String_Node_Str"" + parentArtifact.getName() + ""String_Node_Str"")) {
        try {
          SkynetTransaction transaction=TransactionManager.createTransaction(parentArtifact.getBranch(),""String_Node_Str"");
          for (          Artifact artifact : artifactsToBeRelated) {
            Artifact currentParent=artifact.getParent();
            if (currentParent != null) {
              currentParent.deleteRelation(CoreRelationTypes.Default_Hierarchical__Child,artifact);
              currentParent.persist(transaction);
            }
            parentArtifact.addChild(RelationOrderBaseTypes.USER_DEFINED,artifact);
            parentArtifact.persist(transaction);
          }
          transaction.execute();
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
        }
      }
    }
 else     if (FileTransfer.getInstance().isSupportedType(event.currentDataType)) {
      Object object=FileTransfer.getInstance().nativeToJava(event.currentDataType);
      if (object instanceof String[]) {
        String[] items=(String[])object;
        File importFile=new File(items[0]);
        ArtifactImportWizard wizard=new ArtifactImportWizard();
        wizard.setImportFile(importFile);
        wizard.setDestinationArtifact(parentArtifact);
        Wizards.initAndOpen(wizard,viewPart,new ArtifactStructuredSelection(parentArtifact));
      }
    }
  }
}","@Override public void performDrop(final DropTargetEvent event){
  Artifact parentArtifact=getSelectedArtifact(event);
  if (parentArtifact == null && selectedBranch != null) {
    try {
      parentArtifact=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(selectedBranch);
    }
 catch (    Exception ex) {
      OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
    }
  }
  if (parentArtifact != null) {
    if (ArtifactTransfer.getInstance().isSupportedType(event.currentDataType)) {
      ArtifactData artData=ArtifactTransfer.getInstance().nativeToJava(event.currentDataType);
      final Artifact[] artifactsToBeRelated=artData.getArtifacts();
      if (artifactsToBeRelated != null && artifactsToBeRelated.length > 0 && !artifactsToBeRelated[0].getBranch().equals(parentArtifact.getBranch())) {
        InterArtifactExplorerDropHandlerOperation interDropHandler=new InterArtifactExplorerDropHandlerOperation(parentArtifact,artifactsToBeRelated,true);
        Operations.executeAsJob(interDropHandler,true);
      }
 else       if (isValidForArtifactDrop(event) && MessageDialog.openQuestion(viewPart.getViewSite().getShell(),""String_Node_Str"",""String_Node_Str"" + parentArtifact.getName() + ""String_Node_Str"")) {
        try {
          SkynetTransaction transaction=TransactionManager.createTransaction(parentArtifact.getBranch(),""String_Node_Str"");
          for (          Artifact artifact : artifactsToBeRelated) {
            Artifact currentParent=artifact.getParent();
            if (currentParent != null) {
              currentParent.deleteRelation(CoreRelationTypes.Default_Hierarchical__Child,artifact);
              currentParent.persist(transaction);
            }
            parentArtifact.addChild(RelationOrderBaseTypes.USER_DEFINED,artifact);
            parentArtifact.persist(transaction);
          }
          transaction.execute();
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
        }
      }
    }
 else     if (FileTransfer.getInstance().isSupportedType(event.currentDataType)) {
      Object object=FileTransfer.getInstance().nativeToJava(event.currentDataType);
      if (object instanceof String[]) {
        String[] items=(String[])object;
        File importFile=new File(items[0]);
        ArtifactImportWizard wizard=new ArtifactImportWizard();
        wizard.setImportFile(importFile);
        wizard.setDestinationArtifact(parentArtifact);
        Wizards.initAndOpen(wizard,viewPart,new ArtifactStructuredSelection(parentArtifact));
      }
    }
  }
}",0.9518340125972582
97396,"public InterArtifactExplorerDropHandlerOperation(Artifact destinationParentArtifact,Artifact[] sourceArtifacts,boolean prompt,boolean recurseChildren,boolean parentToDestinationArtifact){
  super(""String_Node_Str"",Activator.PLUGIN_ID);
  this.destinationParentArtifact=destinationParentArtifact;
  this.sourceArtifacts=Arrays.asList(sourceArtifacts);
  this.prompt=prompt;
  this.recurseChildren=recurseChildren;
  this.parentToDestinationArtifact=parentToDestinationArtifact;
}","public InterArtifactExplorerDropHandlerOperation(Artifact destinationParentArtifact,Artifact[] sourceArtifacts,boolean prompt){
  super(""String_Node_Str"",Activator.PLUGIN_ID);
  this.destinationParentArtifact=destinationParentArtifact;
  this.prompt=prompt;
  this.sourceArtifacts=new ArrayList<Artifact>(Arrays.asList(sourceArtifacts));
}",0.631578947368421
97397,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  if (destinationParentArtifact == null || sourceArtifacts == null || sourceArtifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Branch sourceBranch=sourceArtifacts.iterator().next().getFullBranch();
  Branch destinationBranch=destinationParentArtifact.getFullBranch();
  if (isUpdateFromParent(sourceBranch,destinationBranch)) {
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        MessageDialog.openError(Displays.getActiveShell(),ACCESS_ERROR_MSG_TITLE,UPDATE_FROM_PARENT_ERROR_MSG);
      }
    }
);
  }
 else   if (isAccessAllowed(sourceBranch,destinationBranch)) {
    Set<Artifact> transferArtifacts=getArtifactSetToTransfer();
    monitor.beginTask(""String_Node_Str"",2 + (transferArtifacts.size() * 4));
    final List<TransferObject> convertedArtifacts=convertToTransferObjects(transferArtifacts,destinationParentArtifact.getBranch());
    if (prompt) {
      final MutableBoolean userConfirmed=new MutableBoolean(false);
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          userConfirmed.setValue(confirmUsersRequestAndProcess(convertedArtifacts));
        }
      }
,true);
      if (!userConfirmed.getValue()) {
        return;
      }
    }
    addArtifactsToNewTransaction(destinationParentArtifact,convertedArtifacts,sourceBranch,monitor);
  }
 else {
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        MessageDialog.openError(Displays.getActiveShell(),ACCESS_ERROR_MSG_TITLE,ACCESS_ERROR_MSG);
      }
    }
);
  }
  monitor.done();
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  if (destinationParentArtifact == null || sourceArtifacts == null || sourceArtifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Branch sourceBranch=sourceArtifacts.iterator().next().getFullBranch();
  final Branch destinationBranch=destinationParentArtifact.getFullBranch();
  if (isUpdateFromParent(sourceBranch,destinationBranch)) {
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        MessageDialog.openError(Displays.getActiveShell(),ACCESS_ERROR_MSG_TITLE,UPDATE_FROM_PARENT_ERROR_MSG);
      }
    }
);
  }
 else   if (isAccessAllowed(sourceBranch,destinationBranch)) {
    if (prompt) {
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          CheckBoxDialog confirm=new CheckBoxDialog(Displays.getActiveShell(),""String_Node_Str"",null,""String_Node_Str"" + sourceArtifacts.size() + ""String_Node_Str"",""String_Node_Str"",MessageDialog.QUESTION,0);
          if (confirm.open() == 0) {
            try {
              if (confirm.isChecked()) {
                sourceArtifacts.addAll(getRecurseChildren());
              }
              IntroduceArtifactOperation introduceOperation=new IntroduceArtifactOperation(destinationBranch);
              introduceOperation.introduce(sourceArtifacts);
            }
 catch (            OseeCoreException ex) {
              OseeLog.log(InterArtifactExplorerDropHandlerOperation.class,Level.WARNING,ex.getLocalizedMessage());
            }
          }
        }
      }
);
    }
 else {
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          MessageDialog.openError(Displays.getActiveShell(),ACCESS_ERROR_MSG_TITLE,ACCESS_ERROR_MSG);
        }
      }
);
    }
    monitor.done();
  }
}",0.6245081506464306
97398,"public final Artifact duplicate(IOseeBranch branch,Collection<IAttributeType> excudeAttributeTypes) throws OseeCoreException {
  Artifact newArtifact=ArtifactTypeManager.addArtifact(artifactType,branch);
  newArtifact.attributes.clear();
  copyAttributes(newArtifact,excudeAttributeTypes);
  return newArtifact;
}","public final Artifact duplicate(IOseeBranch branch,IArtifactType newType,Collection<IAttributeType> excudeAttributeTypes) throws OseeCoreException {
  Artifact newArtifact=ArtifactTypeManager.addArtifact(newType,branch);
  newArtifact.attributes.clear();
  copyAttributes(newArtifact,excudeAttributeTypes);
  return newArtifact;
}",0.948678071539658
97399,"private void copyAttributes(Artifact artifact,Collection<IAttributeType> excudeAttributeTypes) throws OseeCoreException {
  for (  Attribute<?> attribute : getAttributes()) {
    if (!excudeAttributeTypes.contains(attribute) && isCopyAllowed(attribute) && artifact.isAttributeTypeValid(attribute.getAttributeType())) {
      artifact.addAttribute(attribute.getAttributeType(),attribute.getValue());
    }
  }
}","private void copyAttributes(Artifact artifact,Collection<IAttributeType> excudeAttributeTypes) throws OseeCoreException {
  for (  Attribute<?> attribute : getAttributes()) {
    if (!excudeAttributeTypes.contains(attribute.getAttributeType()) && isCopyAllowed(attribute) && artifact.isAttributeTypeValid(attribute.getAttributeType())) {
      artifact.addAttribute(attribute.getAttributeType(),attribute.getValue());
    }
  }
}",0.9773539928486292
97400,"private void processObjectArtifact(Artifact artifact,WordMLProducer wordMl,String outlineType,PresentationType presentationType,boolean multipleArtifacts) throws OseeCoreException {
  if (!artifact.isAttributeTypeValid(CoreAttributeTypes.WholeWordContent) && !artifact.isAttributeTypeValid(CoreAttributeTypes.NativeContent)) {
    if (!processedArtifacts.contains(artifact)) {
      boolean ignoreArtifact=excludeFolders && artifact.isOfType(CoreArtifactTypes.Folder);
      boolean publishInline=artifact.getSoleAttributeValue(CoreAttributeTypes.PublishInline,false);
      boolean startedSection=false;
      if (!ignoreArtifact) {
        handleLandscapeArtifactSectionBreak(artifact,wordMl,multipleArtifacts);
        if (outlining) {
          String headingText=artifact.getSoleAttributeValue(headingAttributeType,""String_Node_Str"");
          if (!publishInline) {
            paragraphNumber=wordMl.startOutlineSubSection(""String_Node_Str"",headingText,outlineType);
            startedSection=true;
          }
          if (paragraphNumber == null) {
            paragraphNumber=wordMl.startOutlineSubSection();
            startedSection=true;
          }
          if (renderer.getBooleanOption(WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION) && !publishInline) {
            if (artifact.isAttributeTypeValid(CoreAttributeTypes.ParagraphNumber)) {
              artifact.setSoleAttributeValue(CoreAttributeTypes.ParagraphNumber,paragraphNumber.toString());
              SkynetTransaction transaction=(SkynetTransaction)renderer.getOption(ITemplateRenderer.TRANSACTION_OPTION);
              if (transaction != null) {
                artifact.persist(transaction);
              }
 else {
                artifact.persist(getClass().getSimpleName());
              }
            }
          }
        }
        processAttributes(artifact,wordMl,presentationType,multipleArtifacts,publishInline);
      }
      if (recurseChildren) {
        for (        Artifact childArtifact : artifact.getChildren()) {
          processObjectArtifact(childArtifact,wordMl,outlineType,presentationType,multipleArtifacts);
        }
      }
      if (startedSection) {
        wordMl.endOutlineSubSection();
      }
      processedArtifacts.add(artifact);
    }
  }
 else {
    nonTemplateArtifacts.add(artifact);
  }
}","private void processObjectArtifact(Artifact artifact,WordMLProducer wordMl,String outlineType,PresentationType presentationType,boolean multipleArtifacts) throws OseeCoreException {
  if (!artifact.isAttributeTypeValid(CoreAttributeTypes.WholeWordContent) && !artifact.isAttributeTypeValid(CoreAttributeTypes.NativeContent)) {
    if (!processedArtifacts.contains(artifact)) {
      boolean ignoreArtifact=excludeFolders && artifact.isOfType(CoreArtifactTypes.Folder);
      boolean publishInline=artifact.getSoleAttributeValue(CoreAttributeTypes.PublishInline,false);
      boolean startedSection=false;
      boolean templateOnly=renderer.getBooleanOption(""String_Node_Str"");
      if (!ignoreArtifact) {
        handleLandscapeArtifactSectionBreak(artifact,wordMl,multipleArtifacts);
        if (outlining && !templateOnly) {
          String headingText=artifact.getSoleAttributeValue(headingAttributeType,""String_Node_Str"");
          if (!publishInline && !templateOnly) {
            paragraphNumber=wordMl.startOutlineSubSection(""String_Node_Str"",headingText,outlineType);
            startedSection=true;
          }
          if (paragraphNumber == null) {
            paragraphNumber=wordMl.startOutlineSubSection();
            startedSection=true;
          }
          if (renderer.getBooleanOption(WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION) && !publishInline) {
            if (artifact.isAttributeTypeValid(CoreAttributeTypes.ParagraphNumber)) {
              artifact.setSoleAttributeValue(CoreAttributeTypes.ParagraphNumber,paragraphNumber.toString());
              SkynetTransaction transaction=(SkynetTransaction)renderer.getOption(ITemplateRenderer.TRANSACTION_OPTION);
              if (transaction != null) {
                artifact.persist(transaction);
              }
 else {
                artifact.persist(getClass().getSimpleName());
              }
            }
          }
        }
        processAttributes(artifact,wordMl,presentationType,multipleArtifacts,publishInline);
      }
      if (recurseChildren) {
        for (        Artifact childArtifact : artifact.getChildren()) {
          processObjectArtifact(childArtifact,wordMl,outlineType,presentationType,multipleArtifacts);
        }
      }
      if (startedSection) {
        wordMl.endOutlineSubSection();
      }
      processedArtifacts.add(artifact);
    }
  }
 else {
    nonTemplateArtifacts.add(artifact);
  }
}",0.9774689408296484
97401,"private void processAttribute(Artifact artifact,WordMLProducer wordMl,AttributeElement attributeElement,IAttributeType attributeType,boolean allAttrs,PresentationType presentationType,boolean multipleArtifacts,boolean publishInLine) throws OseeCoreException {
  renderer.setOption(""String_Node_Str"",allAttrs);
  if (!allAttrs && (attributeType.equals(CoreAttributeTypes.Partition) || attributeType.equals(CoreAttributeTypes.SafetyCriticality))) {
    if (artifact.isAttributeTypeValid(CoreAttributeTypes.Partition)) {
      for (      Attribute<?> partition : artifact.getAttributes(CoreAttributeTypes.Partition)) {
        if (partition == null || partition.getValue() == null || partition.getValue().equals(""String_Node_Str"")) {
          return;
        }
      }
    }
  }
  if (attributeType.equals(WordTemplateContent) && presentationType == PresentationType.SPECIALIZED_EDIT) {
    artifact.getOrInitializeSoleAttributeValue(attributeType);
  }
  Collection<Attribute<Object>> attributes=artifact.getAttributes(attributeType);
  if (!attributes.isEmpty()) {
    if (ignoreAttributeExtensions.contains(attributeType.getName())) {
      return;
    }
    if (renderer.getBooleanOption(""String_Node_Str"") && CoreAttributeTypes.RelationOrder.equals(attributeType)) {
      return;
    }
    if (!(publishInLine && artifact.isAttributeTypeValid(WordTemplateContent)) || attributeType.equals(WordTemplateContent)) {
      RendererManager.renderAttribute(attributeType,presentationType,artifact,wordMl,attributeElement,renderer.getValues());
    }
  }
}","private void processAttribute(Artifact artifact,WordMLProducer wordMl,AttributeElement attributeElement,IAttributeType attributeType,boolean allAttrs,PresentationType presentationType,boolean multipleArtifacts,boolean publishInLine) throws OseeCoreException {
  renderer.setOption(""String_Node_Str"",allAttrs);
  if (!allAttrs && (attributeType.equals(CoreAttributeTypes.Partition) || attributeType.equals(CoreAttributeTypes.SafetyCriticality))) {
    if (artifact.isAttributeTypeValid(CoreAttributeTypes.Partition)) {
      for (      Attribute<?> partition : artifact.getAttributes(CoreAttributeTypes.Partition)) {
        if (partition == null || partition.getValue() == null || partition.getValue().equals(""String_Node_Str"")) {
          return;
        }
      }
    }
  }
  boolean templateOnly=renderer.getBooleanOption(""String_Node_Str"");
  if (templateOnly && !attributeType.equals(WordTemplateContent)) {
    return;
  }
  if (attributeType.equals(WordTemplateContent) && presentationType == PresentationType.SPECIALIZED_EDIT) {
    artifact.getOrInitializeSoleAttributeValue(attributeType);
  }
  Collection<Attribute<Object>> attributes=artifact.getAttributes(attributeType);
  if (!attributes.isEmpty()) {
    if (ignoreAttributeExtensions.contains(attributeType.getName())) {
      return;
    }
    if (renderer.getBooleanOption(""String_Node_Str"") && CoreAttributeTypes.RelationOrder.equals(attributeType)) {
      return;
    }
    if (!(publishInLine && artifact.isAttributeTypeValid(WordTemplateContent)) || attributeType.equals(WordTemplateContent)) {
      RendererManager.renderAttribute(attributeType,presentationType,artifact,wordMl,attributeElement,renderer.getValues());
    }
  }
}",0.953053083768027
97402,"private void saveAndCloseManagedViews(Set<String> managedViewIds,boolean save){
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (managedArea.getInstalledBundles().size() > 0 && workbench != null) {
    IWorkbenchPage page=null;
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() == null) {
      IWorkbenchWindow[] windows=workbench.getWorkbenchWindows();
      for (      IWorkbenchWindow win : windows) {
        page=win.getActivePage();
        if (page != null) {
          break;
        }
      }
    }
 else {
      page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    }
    if (page == null) {
      return;
    }
    IPerspectiveDescriptor originalPerspective=page.getPerspective();
    XMLMemento memento=XMLMemento.createWriteRoot(TAG_OTE_PRECOMPILED);
    IPerspectiveDescriptor[] pd=page.getOpenPerspectives();
    for (int i=0; i < pd.length; i++) {
      try {
        page.setPerspective(pd[i]);
      }
 catch (      Exception ex) {
      }
      IMemento perspectiveMemento=null;
      try {
        perspectiveMemento=memento.createChild(TAG_PERSPECTIVE);
        perspectiveMemento.putString(""String_Node_Str"",pd[i].getId());
      }
 catch (      Exception ex) {
      }
      IViewReference[] activeReferences=page.getViewReferences();
      for (      IViewReference viewReference : activeReferences) {
        if (managedViewIds.contains(viewReference.getId())) {
          if (perspectiveMemento != null) {
            try {
              IMemento viewMemento=perspectiveMemento.createChild(TAG_VIEW);
              viewMemento.putString(""String_Node_Str"",viewReference.getId());
              String secondaryId=viewReference.getSecondaryId();
              if (secondaryId != null) {
                viewMemento.putString(""String_Node_Str"",secondaryId);
              }
              IWorkbenchPart part=viewReference.getPart(false);
              if (part instanceof IViewPart) {
                IViewPart viewPart=(IViewPart)part;
                viewPart.saveState(viewMemento);
              }
            }
 catch (            Exception ex) {
            }
          }
          try {
            page.hideView(viewReference);
          }
 catch (          Throwable th) {
          }
        }
      }
    }
    if (save) {
      saveMementoToFile(memento);
    }
    page.setPerspective(originalPerspective);
  }
}","private void saveAndCloseManagedViews(Set<String> managedViewIds,boolean save){
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (managedArea.getInstalledBundles().size() > 0 && workbench != null) {
    IWorkbenchPage page=null;
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() == null) {
      IWorkbenchWindow[] windows=workbench.getWorkbenchWindows();
      for (      IWorkbenchWindow win : windows) {
        page=win.getActivePage();
        if (page != null) {
          break;
        }
      }
    }
 else {
      page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    }
    if (page == null) {
      return;
    }
    IPerspectiveDescriptor originalPerspective=page.getPerspective();
    XMLMemento memento=XMLMemento.createWriteRoot(TAG_OTE_PRECOMPILED);
    IPerspectiveDescriptor[] pd=page.getOpenPerspectives();
    for (int i=0; i < pd.length; i++) {
      try {
        page.setPerspective(pd[i]);
      }
 catch (      Exception ex) {
      }
      IMemento perspectiveMemento=null;
      try {
        perspectiveMemento=memento.createChild(TAG_PERSPECTIVE);
        perspectiveMemento.putString(""String_Node_Str"",pd[i].getId());
      }
 catch (      Exception ex) {
      }
      IViewReference[] activeReferences=page.getViewReferences();
      for (      IViewReference viewReference : activeReferences) {
        int index=viewReference.getId().indexOf(""String_Node_Str"");
        String id=null;
        if (index > 0) {
          id=viewReference.getId().substring(0,index);
        }
 else {
          id=viewReference.getId();
        }
        if (managedViewIds.contains(id)) {
          if (perspectiveMemento != null) {
            try {
              IMemento viewMemento=perspectiveMemento.createChild(TAG_VIEW);
              viewMemento.putString(""String_Node_Str"",id);
              String secondaryId=viewReference.getSecondaryId();
              if (secondaryId != null) {
                viewMemento.putString(""String_Node_Str"",secondaryId);
              }
              IWorkbenchPart part=viewReference.getPart(false);
              if (part instanceof IViewPart) {
                IViewPart viewPart=(IViewPart)part;
                viewPart.saveState(viewMemento);
              }
            }
 catch (            Exception ex) {
            }
          }
          try {
            page.hideView(viewReference);
          }
 catch (          Throwable th) {
          }
        }
      }
    }
    if (save) {
      saveMementoToFile(memento);
    }
    page.setPerspective(originalPerspective);
  }
}",0.9433962264150944
97403,"public synchronized void uninstallBundles(){
  saveAndCloseViews();
  for (  BundleInfoLite info : managedArea.getInstalledBundles()) {
    try {
      info.uninstall();
    }
 catch (    BundleException e) {
      OseeLog.log(WorkspaceBundleLoadCoordinator.class,Level.WARNING,e);
    }
  }
  if (wiring != null) {
    wiring.refreshBundles(null);
  }
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (workbench != null && workbench.getActiveWorkbenchWindow() != null) {
    IViewRegistry registry=workbench.getViewRegistry();
    forceViewRegistryReload(workbench,registry);
  }
  waitForViewsToBeRegistered(null);
}","public synchronized void uninstallBundles(){
  if (managedArea.getInstalledBundles().size() > 0) {
    saveAndCloseViews();
    for (    BundleInfoLite info : managedArea.getInstalledBundles()) {
      try {
        info.uninstall();
      }
 catch (      BundleException e) {
        OseeLog.log(WorkspaceBundleLoadCoordinator.class,Level.WARNING,e);
      }
    }
    if (wiring != null) {
      wiring.refreshBundles(null);
    }
    IWorkbench workbench=PlatformUI.getWorkbench();
    if (workbench != null && workbench.getActiveWorkbenchWindow() != null) {
      IViewRegistry registry=workbench.getViewRegistry();
      forceViewRegistryReload(workbench,registry);
    }
    waitForViewsToBeRegistered(null);
  }
}",0.9211309523809524
97404,"/** 
 * Return working branch associated with SMA whether it is committed or not; This data is cached across all workflows with the cache being updated by local and remote events.
 * @param force == true does not used cached value
 */
public static Branch getWorkingBranch(TeamWorkFlowArtifact teamArt,boolean force) throws OseeCoreException {
  long now=new Date().getTime();
  boolean notSet=hridToWorkingBranchCacheUpdated.get(teamArt.getHumanReadableId()) == null;
  if (notSet || force || (now - hridToWorkingBranchCacheUpdated.get(teamArt.getHumanReadableId()) > 1000)) {
    hridToWorkingBranchCache.put(teamArt.getHumanReadableId(),getWorkingBranchExcludeStates(teamArt,BranchState.REBASELINED,BranchState.DELETED));
    hridToWorkingBranchCacheUpdated.put(teamArt.getHumanReadableId(),now);
  }
  return hridToWorkingBranchCache.get(teamArt.getHumanReadableId());
}","/** 
 * Return working branch associated with SMA whether it is committed or not; This data is cached across all workflows with the cache being updated by local and remote events.
 * @param force == true does not used cached value
 */
public static Branch getWorkingBranch(TeamWorkFlowArtifact teamArt,boolean force) throws OseeCoreException {
  long now=new Date().getTime();
  boolean notSet=hridToWorkingBranchCacheUpdated.get(teamArt.getHumanReadableId()) == null;
  if (notSet || force || (now - hridToWorkingBranchCacheUpdated.get(teamArt.getHumanReadableId()) > 1000)) {
    hridToWorkingBranchCache.put(teamArt.getHumanReadableId(),getWorkingBranchExcludeStates(teamArt,BranchState.REBASELINED,BranchState.DELETED,BranchState.PURGED,BranchState.COMMIT_IN_PROGRESS,BranchState.CREATION_IN_PROGRESS,BranchState.DELETE_IN_PROGRESS,BranchState.PURGE_IN_PROGRESS));
    hridToWorkingBranchCacheUpdated.put(teamArt.getHumanReadableId(),now);
  }
  return hridToWorkingBranchCache.get(teamArt.getHumanReadableId());
}",0.9238900634249472
97405,"private Branch testEvents__purged() throws Exception {
  Branch workingBranch=BranchManager.createWorkingBranch(mainBranch,method.getQualifiedTestName() + ""String_Node_Str"");
  Assert.assertNotNull(workingBranch);
  final String guid=workingBranch.getGuid();
  Assert.assertNotNull(workingBranch);
  branchEventListener.reset();
  Operations.executeWorkAndCheckStatus(new PurgeBranchHttpRequestOperation(workingBranch,false));
  verifyReceivedBranchStatesEvent(branchEventListener.getFirstResults(),BranchEventType.Purging,guid);
  verifyReceivedBranchStatesEvent(branchEventListener.getSecondResults(),BranchEventType.Purged,guid);
  Assert.assertEquals(BranchState.CREATED,workingBranch.getBranchState());
  Assert.assertEquals(StorageState.PURGED,workingBranch.getStorageState());
  Assert.assertFalse(workingBranch.isEditable());
  Assert.assertFalse(""String_Node_Str"",BranchManager.branchExists(guid));
  return workingBranch;
}","private Branch testEvents__purged() throws Exception {
  Branch workingBranch=BranchManager.createWorkingBranch(mainBranch,method.getQualifiedTestName() + ""String_Node_Str"");
  Assert.assertNotNull(workingBranch);
  final String guid=workingBranch.getGuid();
  Assert.assertNotNull(workingBranch);
  branchEventListener.reset();
  Operations.executeWorkAndCheckStatus(new PurgeBranchHttpRequestOperation(workingBranch,false));
  verifyReceivedBranchStatesEvent(branchEventListener.getFirstResults(),BranchEventType.Purging,guid);
  verifyReceivedBranchStatesEvent(branchEventListener.getSecondResults(),BranchEventType.Purged,guid);
  Assert.assertEquals(BranchState.PURGED,workingBranch.getBranchState());
  Assert.assertEquals(StorageState.PURGED,workingBranch.getStorageState());
  Assert.assertFalse(workingBranch.isEditable());
  Assert.assertFalse(""String_Node_Str"",BranchManager.branchExists(guid));
  return workingBranch;
}",0.9190348525469167
97406,"@Override public boolean isEditable(){
  BranchState state=getBranchState();
  return !state.isCommitInProgress() && !state.isCommitted() && !state.isRebaselined()&& !state.isDeleted()&& !state.isCreationInProgress()&& !getArchiveState().isArchived()&& !isPurged();
}","@Override public boolean isEditable(){
  BranchState state=getBranchState();
  return (state.isCreated() || state.isModified() || state.isRebaselineInProgress()) && getArchiveState().isUnArchived();
}",0.6167023554603854
97407,"public Branch createOrUpdate(IOseeCache<String,Branch> cache,int uniqueId,StorageState storageState,String guid,String name,BranchType branchType,BranchState branchState,boolean isArchived) throws OseeCoreException {
  Conditions.checkNotNull(cache,""String_Node_Str"");
  Branch branch=cache.getById(uniqueId);
  if (branch == null) {
    branch=create(guid,name,branchType,branchState,isArchived);
    branch.setId(uniqueId);
    branch.setStorageState(storageState);
  }
 else {
    cache.decache(branch);
    branch.setName(name);
    branch.setArchived(isArchived);
    branch.setBranchState(branchState);
    branch.setBranchType(branchType);
  }
  cache.cache(branch);
  return branch;
}","public Branch createOrUpdate(IOseeCache<String,Branch> cache,int uniqueId,StorageState storageState,String guid,String name,BranchType branchType,BranchState branchState,boolean isArchived) throws OseeCoreException {
  Conditions.checkNotNull(cache,""String_Node_Str"");
  Branch branch=cache.getById(uniqueId);
  if (branch == null) {
    branch=create(guid,name,branchType,branchState,isArchived);
    branch.setId(uniqueId);
    branch.setStorageState(storageState);
  }
 else {
    cache.decache(branch);
    branch.setName(name);
    branch.setArchived(isArchived);
    branch.setBranchState(branchState);
    branch.setBranchType(branchType);
    branch.setStorageState(storageState);
  }
  cache.cache(branch);
  return branch;
}",0.97054698457223
97408,"private void storeUpdates(boolean isCompatible,HttpServletRequest req,HttpServletResponse resp) throws OseeCoreException {
  IDataTranslationService service=getTranslationService();
  IOseeCachingService caching=getCachingService();
  TransactionCache txCache=caching.getTransactionCache();
  BranchCacheStoreRequest updateRequest=null;
  InputStream inputStream=null;
  try {
    inputStream=req.getInputStream();
    updateRequest=service.convert(inputStream,CoreTranslatorId.BRANCH_CACHE_STORE_REQUEST);
  }
 catch (  IOException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
 finally {
    Lib.close(inputStream);
  }
  Collection<Branch> updated=new BranchCacheUpdateUtil(factoryService.getBranchFactory(),txCache).updateCache(updateRequest,caching.getBranchCache());
  BranchCache cache=caching.getBranchCache();
  if (updateRequest.isServerUpdateMessage()) {
    for (    Branch branch : updated) {
      if (StorageState.CREATED == branch.getStorageState()) {
        branch.setStorageState(StorageState.MODIFIED);
      }
      branch.clearDirty();
      cache.decache(branch);
      cache.cache(branch);
    }
  }
 else {
    cache.storeItems(updated);
  }
  try {
    resp.setStatus(HttpServletResponse.SC_ACCEPTED);
    resp.setContentType(""String_Node_Str"");
    resp.setCharacterEncoding(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 catch (  IOException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}","private void storeUpdates(boolean isCompatible,HttpServletRequest req,HttpServletResponse resp) throws OseeCoreException {
  IDataTranslationService service=getTranslationService();
  IOseeCachingService caching=getCachingService();
  TransactionCache txCache=caching.getTransactionCache();
  BranchCacheStoreRequest updateRequest=null;
  InputStream inputStream=null;
  try {
    inputStream=req.getInputStream();
    updateRequest=service.convert(inputStream,CoreTranslatorId.BRANCH_CACHE_STORE_REQUEST);
  }
 catch (  IOException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
 finally {
    Lib.close(inputStream);
  }
  Collection<Branch> updated=new BranchCacheUpdateUtil(factoryService.getBranchFactory(),txCache).updateCache(updateRequest,caching.getBranchCache());
  BranchCache cache=caching.getBranchCache();
  if (updateRequest.isServerUpdateMessage()) {
    for (    Branch branch : updated) {
      if (branch.isCreated()) {
        branch.setStorageState(StorageState.MODIFIED);
      }
      branch.clearDirty();
      cache.decache(branch);
      if (!branch.isPurged()) {
        cache.cache(branch);
      }
    }
  }
 else {
    cache.storeItems(updated);
  }
  try {
    resp.setStatus(HttpServletResponse.SC_ACCEPTED);
    resp.setContentType(""String_Node_Str"");
    resp.setCharacterEncoding(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 catch (  IOException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}",0.9593103448275864
97409,"private IdJoinQuery populateBranchIdsJoinIdTable() throws OseeDataStoreException, OseeCoreException {
  IdJoinQuery branchJoin=JoinUtility.createIdJoinQuery();
  BranchFilter branchFilter=new BranchFilter(BranchArchivedState.UNARCHIVED);
  branchFilter.setNegatedBranchStates(BranchState.DELETED);
  for (  Branch branch : BranchManager.getBranches(branchFilter)) {
    branchJoin.add(branch.getId());
  }
  branchJoin.store();
  return branchJoin;
}","private IdJoinQuery populateBranchIdsJoinIdTable() throws OseeDataStoreException, OseeCoreException {
  IdJoinQuery branchJoin=JoinUtility.createIdJoinQuery();
  BranchFilter branchFilter=new BranchFilter(BranchArchivedState.UNARCHIVED);
  branchFilter.setNegatedBranchStates(BranchState.PURGED,BranchState.DELETED);
  for (  Branch branch : BranchManager.getBranches(branchFilter)) {
    branchJoin.add(branch.getId());
  }
  branchJoin.store();
  return branchJoin;
}",0.9793253536452666
97410,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Branch branch=BranchManager.getBranch(this.branch);
  BranchState originalState=branch.getBranchState();
  BranchArchivedState originalArchivedState=branch.getArchiveState();
  ArtifactCache.deCache(this.branch);
  try {
    branch.setBranchState(BranchState.DELETED);
    branch.setArchived(true);
    OseeEventManager.kickBranchEvent(this,new BranchEvent(BranchEventType.Deleting,branch.getGuid()));
    BranchManager.persist(branch);
  }
 catch (  Exception ex) {
    branch.setBranchState(originalState);
    branch.setArchived(originalArchivedState.isArchived());
    throw ex;
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Branch branch=BranchManager.getBranch(this.branch);
  BranchState originalState=branch.getBranchState();
  BranchArchivedState originalArchivedState=branch.getArchiveState();
  ArtifactCache.deCache(this.branch);
  try {
    branch.setBranchState(BranchState.DELETE_IN_PROGRESS);
    branch.setArchived(true);
    OseeEventManager.kickBranchEvent(this,new BranchEvent(BranchEventType.Deleting,branch.getGuid()));
    BranchManager.persist(branch);
    branch.setBranchState(BranchState.DELETED);
    OseeEventManager.kickBranchEvent(this,new BranchEvent(BranchEventType.Deleted,branch.getGuid()));
    BranchManager.persist(branch);
  }
 catch (  Exception ex) {
    try {
      branch.setBranchState(originalState);
      branch.setArchived(originalArchivedState.isArchived());
      OseeEventManager.kickBranchEvent(this,new BranchEvent(BranchEventType.StateUpdated,branch.getGuid()));
      BranchManager.persist(branch);
    }
 catch (    Exception ex2) {
      log(ex2);
    }
    throw ex;
  }
}",0.7544361763022324
97411,"@Override protected void doWork(IProgressMonitor monitor) throws OseeCoreException {
  OseeEventManager.kickBranchEvent(getClass(),new BranchEvent(BranchEventType.Purging,branch.getGuid()));
  PurgeBranchRequest requestData=new PurgeBranchRequest(branch.getId(),recursive);
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",Function.PURGE_BRANCH.name());
  ArtifactCache.deCache(branch);
  AcquireResult response=HttpClientMessage.send(OseeServerContext.BRANCH_CONTEXT,parameters,CoreTranslatorId.PURGE_BRANCH_REQUEST,requestData,null);
  if (response.wasSuccessful()) {
    branch.setStorageState(StorageState.PURGED);
    branch.setArchived(true);
    BranchManager.decache(branch);
    OseeEventManager.kickBranchEvent(getClass(),new BranchEvent(BranchEventType.Purged,branch.getGuid()));
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws OseeCoreException {
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",Function.PURGE_BRANCH.name());
  BranchState currentState=branch.getBranchState();
  BranchArchivedState archivedState=branch.getArchiveState();
  ArtifactCache.deCache(branch);
  branch.setBranchState(BranchState.PURGE_IN_PROGRESS);
  branch.setArchived(true);
  OseeEventManager.kickBranchEvent(getClass(),new BranchEvent(BranchEventType.Purging,branch.getGuid()));
  AcquireResult response=null;
  try {
    PurgeBranchRequest requestData=new PurgeBranchRequest(branch.getId(),recursive);
    response=HttpClientMessage.send(OseeServerContext.BRANCH_CONTEXT,parameters,CoreTranslatorId.PURGE_BRANCH_REQUEST,requestData,null);
  }
 catch (  OseeCoreException ex) {
    try {
      branch.setBranchState(currentState);
      branch.setArchived(archivedState.isArchived());
      OseeEventManager.kickBranchEvent(getClass(),new BranchEvent(BranchEventType.StateUpdated,branch.getGuid()));
    }
 catch (    Exception ex2) {
      log(ex2);
    }
    throw ex;
  }
  if (response.wasSuccessful()) {
    branch.setStorageState(StorageState.PURGED);
    branch.setBranchState(BranchState.PURGED);
    branch.setArchived(true);
    BranchManager.decache(branch);
    BranchManager.getCache().reloadCache();
    OseeEventManager.kickBranchEvent(getClass(),new BranchEvent(BranchEventType.Purged,branch.getGuid()));
  }
}",0.3451516445963263
97412,"private void updateBranches(Sender sender,BranchEvent branchEvent){
  BranchEventType eventType=branchEvent.getEventType();
  try {
switch (eventType) {
case Committing:
case CommitFailed:
case Deleting:
case Purging:
      return;
case Committed:
    Branch branch=BranchManager.getBranchByGuid(branchEvent.getBranchGuid());
  Artifact artifact=BranchManager.getAssociatedArtifact(branch);
TransactionManager.clearCommitArtifactCacheForAssociatedArtifact(artifact);
break;
default :
break;
}
BranchManager.refreshBranches();
}
 catch (Exception ex) {
EventUtil.eventLog(""String_Node_Str"",ex);
}
}","private void updateBranches(Sender sender,BranchEvent branchEvent){
  BranchEventType eventType=branchEvent.getEventType();
  Branch branch=null;
  try {
switch (eventType) {
case Committing:
case CommitFailed:
case Deleting:
case Purging:
      return;
case Committed:
    branch=BranchManager.getBranchByGuid(branchEvent.getBranchGuid());
  Artifact artifact=BranchManager.getAssociatedArtifact(branch);
TransactionManager.clearCommitArtifactCacheForAssociatedArtifact(artifact);
break;
case Purged:
handleBranchRemoval(BranchState.PURGED,branchEvent.getBranchGuid());
break;
case Deleted:
handleBranchRemoval(BranchState.DELETED,branchEvent.getBranchGuid());
break;
default :
break;
}
BranchManager.refreshBranches();
}
 catch (Exception ex) {
EventUtil.eventLog(""String_Node_Str"",ex);
}
}",0.849532037437005
97413,"private void refreshBranchWarning(){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      try {
        if (treeViewer == null) {
          return;
        }
        Control control=treeViewer.getTree();
        if (branch != null) {
          String warningStr=null;
          if (!new GlobalMenuPermissions(globalMenuHelper).isBranchReadable(branch)) {
            warningStr=""String_Node_Str"";
          }
 else {
switch (branch.getBranchState()) {
case CREATION_IN_PROGRESS:
              warningStr=""String_Node_Str"";
            break;
case COMMIT_IN_PROGRESS:
          warningStr=""String_Node_Str"";
        break;
case COMMITTED:
      warningStr=""String_Node_Str"";
    break;
case DELETED:
  warningStr=""String_Node_Str"";
break;
case REBASELINE_IN_PROGRESS:
warningStr=""String_Node_Str"";
break;
case REBASELINED:
warningStr=""String_Node_Str"";
break;
default :
break;
}
}
if (warningStr != null) {
control=branchWarningComposite;
branchWarningLabel.setText(warningStr);
branchWarningLabel.update();
branchWarningComposite.update();
}
}
stackLayout.topControl=control;
stackComposite.layout();
stackComposite.getParent().layout();
}
 catch (OseeCoreException ex) {
OseeLog.log(Activator.class,Level.SEVERE,ex);
}
}
}
);
}","private void refreshBranchWarning(){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      try {
        if (treeViewer == null) {
          return;
        }
        Control control=treeViewer.getTree();
        if (branch != null) {
          String warningStr=null;
          if (!new GlobalMenuPermissions(globalMenuHelper).isBranchReadable(branch)) {
            warningStr=""String_Node_Str"";
          }
 else {
switch (branch.getBranchState()) {
case CREATION_IN_PROGRESS:
              warningStr=""String_Node_Str"";
            break;
case COMMIT_IN_PROGRESS:
          warningStr=""String_Node_Str"";
        break;
case COMMITTED:
      warningStr=""String_Node_Str"";
    break;
case DELETED:
  warningStr=""String_Node_Str"";
break;
case REBASELINE_IN_PROGRESS:
warningStr=""String_Node_Str"";
break;
case REBASELINED:
warningStr=""String_Node_Str"";
break;
case DELETE_IN_PROGRESS:
warningStr=""String_Node_Str"";
break;
case PURGE_IN_PROGRESS:
warningStr=""String_Node_Str"";
break;
case PURGED:
warningStr=""String_Node_Str"";
break;
default :
break;
}
}
if (warningStr != null) {
control=branchWarningComposite;
branchWarningLabel.setText(warningStr);
branchWarningLabel.update();
branchWarningComposite.update();
}
}
stackLayout.topControl=control;
stackComposite.layout();
stackComposite.getParent().layout();
}
 catch (OseeCoreException ex) {
OseeLog.log(Activator.class,Level.SEVERE,ex);
}
}
}
);
}",0.9359021859948128
97414,"private void check(BranchData branchData){
  BranchState state=branchData.getBranchState();
  BranchType type=branchData.getBranchType();
  if (BranchType.SYSTEM_ROOT.equals(type)) {
    if (!BranchState.CREATED.equals(state)) {
      branchData.setBranchState(BranchState.CREATED);
      branchData.setReason(""String_Node_Str"");
    }
  }
 else   if (state != BranchState.DELETED && state != BranchState.COMMIT_IN_PROGRESS && state != BranchState.REBASELINE_IN_PROGRESS) {
    if (BranchType.WORKING.equals(type)) {
      if (isRebaselined(branchData)) {
        branchData.setBranchState(BranchState.REBASELINED);
        branchData.setReason(""String_Node_Str"");
      }
 else       if (hasBeenCommitted(branchData)) {
        branchData.setBranchState(BranchState.COMMITTED);
        branchData.setReason(""String_Node_Str"");
      }
 else       if (branchData.getNumberOfTxs() > 1) {
        branchData.setBranchState(BranchState.MODIFIED);
        branchData.setReason(""String_Node_Str"");
      }
 else {
        branchData.setBranchState(BranchState.CREATED);
        branchData.setReason(""String_Node_Str"");
      }
    }
 else     if (BranchType.MERGE.equals(type)) {
      if (hasBeenCommitted(branchData)) {
        branchData.setBranchState(BranchState.COMMITTED);
        branchData.setReason(""String_Node_Str"");
      }
 else       if (branchData.getNumberOfTxs() > 1) {
        branchData.setBranchState(BranchState.MODIFIED);
        branchData.setReason(""String_Node_Str"");
      }
 else {
        branchData.setBranchState(BranchState.CREATED);
        branchData.setReason(""String_Node_Str"");
      }
    }
  }
}","private void check(BranchData branchData){
  BranchState state=branchData.getBranchState();
  BranchType type=branchData.getBranchType();
  if (BranchType.SYSTEM_ROOT.equals(type)) {
    if (!BranchState.CREATED.equals(state)) {
      branchData.setBranchState(BranchState.CREATED);
      branchData.setReason(""String_Node_Str"");
    }
  }
 else   if (state == BranchState.CREATED || state == BranchState.MODIFIED || state == BranchState.COMMITTED || state == BranchState.REBASELINED || state == BranchState.CREATION_IN_PROGRESS) {
    if (BranchType.WORKING.equals(type)) {
      if (isRebaselined(branchData)) {
        branchData.setBranchState(BranchState.REBASELINED);
        branchData.setReason(""String_Node_Str"");
      }
 else       if (hasBeenCommitted(branchData)) {
        branchData.setBranchState(BranchState.COMMITTED);
        branchData.setReason(""String_Node_Str"");
      }
 else       if (branchData.getNumberOfTxs() > 1) {
        branchData.setBranchState(BranchState.MODIFIED);
        branchData.setReason(""String_Node_Str"");
      }
 else {
        branchData.setBranchState(BranchState.CREATED);
        branchData.setReason(""String_Node_Str"");
      }
    }
 else     if (BranchType.MERGE.equals(type)) {
      if (hasBeenCommitted(branchData)) {
        branchData.setBranchState(BranchState.COMMITTED);
        branchData.setReason(""String_Node_Str"");
      }
 else       if (branchData.getNumberOfTxs() > 1) {
        branchData.setBranchState(BranchState.MODIFIED);
        branchData.setReason(""String_Node_Str"");
      }
 else {
        branchData.setBranchState(BranchState.CREATED);
        branchData.setReason(""String_Node_Str"");
      }
    }
  }
}",0.9493365500603136
97415,"public static Collection<Branch> createTestBranches() throws OseeCoreException {
  Collection<Branch> branches=new ArrayList<Branch>();
  Branch root=new Branch(GUID.create(),ROOT_BRANCH_NAME,BranchType.SYSTEM_ROOT,BranchState.COMMITTED,false);
  Branch parent=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.CREATED,false);
  parent.setParentBranch(root);
  Branch child1=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.MODIFIED,false);
  child1.setParentBranch(parent);
  child1.setArchived(true);
  child1.setBranchState(BranchState.DELETED);
  Branch child2=new Branch(GUID.create(),""String_Node_Str"",BranchType.WORKING,BranchState.DELETED,true);
  child2.setParentBranch(parent);
  Branch child3=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.CREATED,false);
  child3.setBranchType(BranchType.MERGE);
  child3.setParentBranch(parent);
  Branch grandChild1=new Branch(GUID.create(),""String_Node_Str"",BranchType.MERGE,BranchState.UNKNOWN,false);
  grandChild1.setBranchState(BranchState.DELETED);
  grandChild1.setArchived(true);
  grandChild1.setParentBranch(child1);
  Branch grandChild2=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.MODIFIED,false);
  grandChild2.setParentBranch(child1);
  Branch grandChild3=new Branch(GUID.create(),""String_Node_Str"",BranchType.WORKING,BranchState.DELETED,true);
  grandChild3.setParentBranch(child2);
  branches.add(child2);
  branches.add(grandChild2);
  branches.add(grandChild3);
  branches.add(child1);
  branches.add(root);
  branches.add(child3);
  branches.add(grandChild1);
  branches.add(parent);
  return branches;
}","public static Collection<Branch> createTestBranches() throws OseeCoreException {
  Collection<Branch> branches=new ArrayList<Branch>();
  Branch root=new Branch(GUID.create(),ROOT_BRANCH_NAME,BranchType.SYSTEM_ROOT,BranchState.COMMITTED,false);
  Branch parent=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.CREATED,false);
  parent.setParentBranch(root);
  Branch child1=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.MODIFIED,false);
  child1.setParentBranch(parent);
  child1.setArchived(true);
  child1.setBranchState(BranchState.DELETED);
  Branch child2=new Branch(GUID.create(),""String_Node_Str"",BranchType.WORKING,BranchState.DELETED,true);
  child2.setParentBranch(parent);
  Branch child3=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.CREATED,false);
  child3.setBranchType(BranchType.MERGE);
  child3.setParentBranch(parent);
  Branch grandChild1=new Branch(GUID.create(),""String_Node_Str"",BranchType.MERGE,BranchState.DELETED,false);
  grandChild1.setArchived(true);
  grandChild1.setParentBranch(child1);
  Branch grandChild2=new Branch(GUID.create(),""String_Node_Str"",BranchType.SYSTEM_ROOT,BranchState.MODIFIED,false);
  grandChild2.setParentBranch(child1);
  Branch grandChild3=new Branch(GUID.create(),""String_Node_Str"",BranchType.WORKING,BranchState.DELETED,true);
  grandChild3.setParentBranch(child2);
  branches.add(child2);
  branches.add(grandChild2);
  branches.add(grandChild3);
  branches.add(child1);
  branches.add(root);
  branches.add(child3);
  branches.add(grandChild1);
  branches.add(parent);
  return branches;
}",0.9804980498049805
97416,"@Override protected Branch handleTxWork(OseeConnection connection) throws OseeCoreException {
  if (branch.getStorageState() != StorageState.PURGED) {
    if (!branch.getAllChildBranches(false).isEmpty()) {
      throw new OseeArgumentException(""String_Node_Str"",branch.getGuid(),branch.getBranchType());
    }
    int branchId=branch.getId();
    String sql=String.format(""String_Node_Str"",sourceTableName);
    purgeFromTable(connection,sql,0.20,branchId);
    purgeFromTable(connection,DELETE_FROM_TX_DETAILS,0.09,branchId);
    purgeFromTable(connection,DELETE_FROM_CONFLICT,0.01,branchId);
    if (branch.hasParentBranch()) {
      purgeFromTable(connection,DELETE_FROM_MERGE,0.01,branchId,branch.getParentBranch().getId());
    }
    purgeFromTable(connection,DELETE_FROM_BRANCH_TABLE,0.01,branchId);
    purgeAccessControlTables(branchId);
    branch.setStorageState(StorageState.PURGED);
    branchCache.storeItems(branch);
    branch.internalRemovePurgedBranchFromParent();
  }
  return branch;
}","@Override protected Branch handleTxWork(OseeConnection connection) throws OseeCoreException {
  if (branch.getStorageState() != StorageState.PURGED) {
    if (!branch.getAllChildBranches(false).isEmpty()) {
      throw new OseeArgumentException(""String_Node_Str"",branch.getGuid(),branch.getBranchType());
    }
    int branchId=branch.getId();
    String sql=String.format(""String_Node_Str"",sourceTableName);
    purgeFromTable(connection,sql,0.20,branchId);
    purgeFromTable(connection,DELETE_FROM_TX_DETAILS,0.09,branchId);
    purgeFromTable(connection,DELETE_FROM_CONFLICT,0.01,branchId);
    if (branch.hasParentBranch()) {
      purgeFromTable(connection,DELETE_FROM_MERGE,0.01,branchId,branch.getParentBranch().getId());
    }
    purgeFromTable(connection,DELETE_FROM_BRANCH_TABLE,0.01,branchId);
    purgeAccessControlTables(branchId);
    branch.setStorageState(StorageState.PURGED);
    branchCache.storeItems(branch);
    branch.setBranchState(BranchState.PURGED);
    branch.internalRemovePurgedBranchFromParent();
  }
  return branch;
}",0.9771511910549344
97417,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  bundleCoordinator.uninstallBundles();
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  IWorkspace workspace=service.getWorkspace();
  workspaceListener=new JarChangeResourceListener<WorkspaceStarterNature>(WorkspaceStarterNature.NATURE_ID,SafeWorkspaceTracker.this);
  try {
    loadBundles(monitor);
  }
 catch (  CoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  workspace.addResourceChangeListener(workspaceListener);
}",0.3333333333333333
97418,"@Override public void loadBundles(IProgressMonitor monitor) throws CoreException {
  for (  WorkspaceStarterNature starterNature : WorkspaceStarterNature.getWorkspaceProjects()) {
    for (    URL url : starterNature.getBundles()) {
      try {
        handleBundleAdded(url);
      }
 catch (      Exception ex) {
        OseeLog.log(SafeWorkspaceTracker.class,Level.INFO,ex);
        ex.printStackTrace();
      }
    }
  }
  SubMonitor master=SubMonitor.convert(monitor,100);
  bundleCoordinator.updateBundles(master.newChild(10));
  bundleCoordinator.installLatestBundles(master.newChild(90));
}","@Override public void loadBundles(IProgressMonitor monitor) throws CoreException {
  for (  WorkspaceStarterNature starterNature : WorkspaceStarterNature.getWorkspaceProjects()) {
    for (    URL url : starterNature.getBundles()) {
      try {
        handleBundleAdded(url);
      }
 catch (      Exception ex) {
        OseeLog.log(SafeWorkspaceTracker.class,Level.INFO,ex);
        ex.printStackTrace();
      }
    }
  }
  bundleCoordinator.updateBundles(monitor);
  bundleCoordinator.installLatestBundles(monitor);
}",0.7903657448706513
97419,"@Override public boolean preShutdown(IWorkbench workbench,boolean forced){
  JobComplete jobComplete=new JobComplete();
  IOperation operation=new PrecompileShutdown(""String_Node_Str"",Activator.BUNDLE_ID);
  Operations.executeAsJob(operation,false,Job.INTERACTIVE,jobComplete);
  for (int i=0; i < 100 && !jobComplete.isDone(); i++) {
    yieldDisplay100ms();
  }
  return true;
}","@Override public boolean preShutdown(IWorkbench workbench,boolean forced){
  try {
    bundleCoordinator.uninstallBundles();
  }
 catch (  Throwable th) {
    th.printStackTrace();
  }
  return true;
}",0.3098106712564544
97420,"private Set<ActionArtifact> createActions(List<DemoDbActionData> actionDatas,IArtifactToken versionToken,TeamState toStateOverride,SkynetTransaction transaction) throws Exception {
  Set<ActionArtifact> actionArts=new HashSet<ActionArtifact>();
  int currNum=1;
  for (  DemoDbActionData aData : actionDatas) {
    if (DEBUG) {
      OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"" + currNum++ + ""String_Node_Str""+ actionDatas.size());
    }
    int x=0;
    Date createdDate=new Date();
    IAtsUser createdBy=AtsUsersClient.getUser();
    for (    String prefixTitle : aData.prefixTitles) {
      ActionArtifact actionArt=ActionManager.createAction(null,prefixTitle + ""String_Node_Str"" + aData.postFixTitle,TITLE_PREFIX[x] + ""String_Node_Str"" + aData.postFixTitle,CHANGE_TYPE[x],aData.priority,false,null,aData.getActionableItems(),createdDate,createdBy,null,transaction);
      actionArts.add(actionArt);
      for (      TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
        TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.OverrideTransitionValidityCheck);
        if (aData.getCreateReviews().length > 0) {
          for (          CreateReview createReview : aData.getCreateReviews()) {
            if (createReview == CreateReview.Decision) {
              teamWf.setSoleAttributeValue(AtsAttributeTypes.ValidationRequired,true);
            }
          }
        }
        boolean isSwDesign=teamWf.getTeamDefinition().getName().contains(""String_Node_Str"");
        if (isSwDesign) {
          for (          AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
            reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
          }
        }
        Result result=dtwm.transitionTo((toStateOverride != null ? toStateOverride : aData.toState),teamWf.getAssignees().iterator().next(),false,transaction);
        if (result.isFalse()) {
          throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),aData.toState.getName(),result.getText());
        }
        if (!teamWf.isCompletedOrCancelled()) {
          teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
        }
        teamWf.persist(transaction);
        if (versionToken != null) {
          IAtsVersion version=AtsVersionService.get().getById(versionToken);
          AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
          teamWf.persist(transaction);
        }
      }
    }
  }
  return actionArts;
}","private Set<ActionArtifact> createActions(List<DemoDbActionData> actionDatas,IArtifactToken versionToken,TeamState toStateOverride,SkynetTransaction transaction) throws Exception {
  Set<ActionArtifact> actionArts=new HashSet<ActionArtifact>();
  int currNum=1;
  for (  DemoDbActionData aData : actionDatas) {
    if (DEBUG) {
      OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"" + currNum++ + ""String_Node_Str""+ actionDatas.size());
    }
    int x=0;
    Date createdDate=new Date();
    IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
    for (    String prefixTitle : aData.prefixTitles) {
      ActionArtifact actionArt=ActionManager.createAction(null,prefixTitle + ""String_Node_Str"" + aData.postFixTitle,TITLE_PREFIX[x] + ""String_Node_Str"" + aData.postFixTitle,CHANGE_TYPE[x],aData.priority,false,null,aData.getActionableItems(),createdDate,createdBy,null,transaction);
      actionArts.add(actionArt);
      for (      TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
        TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.OverrideTransitionValidityCheck);
        if (aData.getCreateReviews().length > 0) {
          for (          CreateReview createReview : aData.getCreateReviews()) {
            if (createReview == CreateReview.Decision) {
              teamWf.setSoleAttributeValue(AtsAttributeTypes.ValidationRequired,true);
            }
          }
        }
        boolean isSwDesign=teamWf.getTeamDefinition().getName().contains(""String_Node_Str"");
        if (isSwDesign) {
          for (          AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
            reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
          }
        }
        Result result=dtwm.transitionTo((toStateOverride != null ? toStateOverride : aData.toState),teamWf.getAssignees().iterator().next(),false,transaction);
        if (result.isFalse()) {
          throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),aData.toState.getName(),result.getText());
        }
        if (!teamWf.isCompletedOrCancelled()) {
          teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
        }
        teamWf.persist(transaction);
        if (versionToken != null) {
          IAtsVersion version=AtsVersionService.get().getById(versionToken);
          AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
          teamWf.persist(transaction);
        }
      }
    }
  }
  return actionArts;
}",0.99079754601227
97421,"private static ActionArtifact sawBuild2Action3_createNoBranchAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Code.getAIName(),DemoDbAIs.SAW_SW_Design.getAIName(),DemoDbAIs.SAW_Requirements.getAIName(),DemoDbAIs.SAW_Test.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsUsersClient.getUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    boolean isSwDesign=teamWf.getTeamDefinition().getName().contains(""String_Node_Str"");
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck);
    if (isSwDesign) {
      Result result=dtwm.transitionTo(TeamState.Analyze,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 1) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
      result=dtwm.transitionTo(TeamState.Authorize,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 2) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
    }
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}","private static ActionArtifact sawBuild2Action3_createNoBranchAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Code.getAIName(),DemoDbAIs.SAW_SW_Design.getAIName(),DemoDbAIs.SAW_Requirements.getAIName(),DemoDbAIs.SAW_Test.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    boolean isSwDesign=teamWf.getTeamDefinition().getName().contains(""String_Node_Str"");
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck);
    if (isSwDesign) {
      Result result=dtwm.transitionTo(TeamState.Analyze,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 1) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
      result=dtwm.transitionTo(TeamState.Authorize,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 2) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
    }
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}",0.9913419913419912
97422,"private static ActionArtifact sawBuild2Action2_createUnCommittedAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Code.getAIName(),DemoDbAIs.SAW_SW_Design.getAIName(),DemoDbAIs.SAW_Requirements.getAIName(),DemoDbAIs.SAW_Test.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsUsersClient.getUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    boolean isSwDesign=teamWf.getTeamDefinition().getName().contains(""String_Node_Str"");
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.None);
    if (isSwDesign) {
      Result result=dtwm.transitionTo(TeamState.Analyze,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 1) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
      result=dtwm.transitionTo(TeamState.Authorize,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 2) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
    }
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}","private static ActionArtifact sawBuild2Action2_createUnCommittedAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Code.getAIName(),DemoDbAIs.SAW_SW_Design.getAIName(),DemoDbAIs.SAW_Requirements.getAIName(),DemoDbAIs.SAW_Test.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    boolean isSwDesign=teamWf.getTeamDefinition().getName().contains(""String_Node_Str"");
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.None);
    if (isSwDesign) {
      Result result=dtwm.transitionTo(TeamState.Analyze,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 1) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
      result=dtwm.transitionTo(TeamState.Authorize,teamWf.getAssignees().iterator().next(),false,transaction);
      if (result.isFalse()) {
        throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
      }
      if (ReviewManager.getReviews(teamWf).size() != 2) {
        throw new OseeCoreException(""String_Node_Str"" + ReviewManager.getReviews(teamWf).size());
      }
      for (      AbstractReviewArtifact reviewArt : ReviewManager.getReviews(teamWf)) {
        reviewArt.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
      }
    }
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}",0.991419377904898
97423,"private static ActionArtifact sawBuild2Action1_createCommittedAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Requirements.getAIName(),DemoDbAIs.SAW_Code.getAIName(),DemoDbAIs.SAW_Test.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsUsersClient.getUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
 else     if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
 else     if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
 else     if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.OverrideTransitionValidityCheck);
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}","private static ActionArtifact sawBuild2Action1_createCommittedAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Requirements.getAIName(),DemoDbAIs.SAW_Code.getAIName(),DemoDbAIs.SAW_Test.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
 else     if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
 else     if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
 else     if (teamWf.getTeamDefinition().getName().contains(""String_Node_Str"") && !teamWf.getWorkDefinition().getName().equals(""String_Node_Str"")) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.getWorkDefinition().getName());
    }
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.OverrideTransitionValidityCheck);
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}",0.9899665551839464
97424,"private static ActionArtifact sawBuild2Action4_createUnCommittedConflictedAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Requirements.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsUsersClient.getUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.OverrideTransitionValidityCheck);
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}","private static ActionArtifact sawBuild2Action4_createUnCommittedConflictedAction(SkynetTransaction transaction) throws OseeCoreException {
  String title=""String_Node_Str"";
  Collection<IAtsActionableItem> aias=DemoDbUtil.getActionableItems(new String[]{DemoDbAIs.SAW_Requirements.getAIName()});
  Date createdDate=new Date();
  IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  String priority=""String_Node_Str"";
  ActionArtifact actionArt=ActionManager.createAction(null,title,""String_Node_Str"",ChangeType.Problem,priority,false,null,aias,createdDate,createdBy,null,transaction);
  for (  TeamWorkFlowArtifact teamWf : ActionManager.getTeams(actionArt)) {
    TeamWorkFlowManager dtwm=new TeamWorkFlowManager(teamWf,TransitionOption.OverrideAssigneeCheck,TransitionOption.OverrideTransitionValidityCheck);
    Result result=dtwm.transitionTo(toState,teamWf.getAssignees().iterator().next(),false,transaction);
    if (result.isFalse()) {
      throw new OseeCoreException(""String_Node_Str"",teamWf.toStringWithId(),toState.getName(),result.getText());
    }
    if (!teamWf.isCompletedOrCancelled()) {
      teamWf.getStateMgr().setAssignees(teamWf.getTeamDefinition().getLeads());
    }
    teamWf.persist(transaction);
    AtsVersionService.get().setTargetedVersionAndStore(teamWf,version);
    teamWf.persist(transaction);
  }
  return actionArt;
}",0.9824046920821116
97425,"/** 
 * Create<br> 1) PeerToPeer in Prepare state w Joe Smith assignee<br> 2) PeerToPeer in Review state w Joe Smith assignee and 2 reviewers<br> 3) PeerToPeer in Prepare state w Joe Smith assignee and completed<br> <br>
 */
public static void createPeerToPeerReviews(boolean DEBUG,SkynetTransaction transaction) throws Exception {
  if (DEBUG) {
    OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"");
  }
  TeamWorkFlowArtifact firstCodeArt=DemoDbUtil.getSampleCodeWorkflows().get(0);
  TeamWorkFlowArtifact secondCodeArt=DemoDbUtil.getSampleCodeWorkflows().get(1);
  PeerToPeerReviewArtifact reviewArt=PeerToPeerReviewManager.createNewPeerToPeerReview(firstCodeArt,""String_Node_Str"",firstCodeArt.getStateMgr().getCurrentStateName(),transaction);
  reviewArt.persist(transaction);
  reviewArt=PeerToPeerReviewManager.createNewPeerToPeerReview(firstCodeArt,""String_Node_Str"",firstCodeArt.getStateMgr().getCurrentStateName(),transaction);
  List<UserRole> roles=new ArrayList<UserRole>();
  roles.add(new UserRole(Role.Author,AtsUsersClient.getUserFromToken(DemoUsers.Joe_Smith)));
  roles.add(new UserRole(Role.Reviewer,AtsUsersClient.getUserFromToken(DemoUsers.Kay_Jones)));
  roles.add(new UserRole(Role.Reviewer,AtsUsersClient.getUserFromToken(DemoUsers.Alex_Kay),2.0,true));
  Result result=PeerToPeerReviewManager.transitionTo(reviewArt,PeerToPeerReviewState.Review,roles,null,AtsUsersClient.getUser(),false,transaction);
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
  reviewArt.persist(transaction);
  reviewArt=PeerToPeerReviewManager.createNewPeerToPeerReview(secondCodeArt,""String_Node_Str"",secondCodeArt.getStateMgr().getCurrentStateName(),new Date(),AtsUsersClient.getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Kay_Jones)),transaction);
  roles=new ArrayList<UserRole>();
  roles.add(new UserRole(Role.Author,AtsUsersClient.getUserFromToken(DemoUsers.Kay_Jones),2.3,true));
  roles.add(new UserRole(Role.Reviewer,AtsUsersClient.getUserFromToken(DemoUsers.Joe_Smith),4.5,true));
  roles.add(new UserRole(Role.Reviewer,AtsUsersClient.getUserFromToken(DemoUsers.Alex_Kay),2.0,true));
  List<ReviewDefectItem> defects=new ArrayList<ReviewDefectItem>();
  defects.add(new ReviewDefectItem(AtsUsersClient.getUserFromToken(DemoUsers.Alex_Kay),Severity.Issue,Disposition.Accept,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsUsersClient.getUserFromToken(DemoUsers.Alex_Kay),Severity.Issue,Disposition.Accept,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsUsersClient.getUserFromToken(DemoUsers.Alex_Kay),Severity.Major,Disposition.Reject,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsUsersClient.getUserFromToken(DemoUsers.Joe_Smith),Severity.Minor,Disposition.Reject,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsUsersClient.getUserFromToken(DemoUsers.Joe_Smith),Severity.Major,Disposition.Accept,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  for (  ReviewDefectItem defect : defects) {
    defect.setClosed(true);
  }
  result=PeerToPeerReviewManager.transitionTo(reviewArt,PeerToPeerReviewState.Completed,roles,defects,AtsUsersClient.getUser(),false,transaction);
  if (result.isTrue()) {
    reviewArt.persist(transaction);
  }
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
}","/** 
 * Create<br> 1) PeerToPeer in Prepare state w Joe Smith assignee<br> 2) PeerToPeer in Review state w Joe Smith assignee and 2 reviewers<br> 3) PeerToPeer in Prepare state w Joe Smith assignee and completed<br> <br>
 */
public static void createPeerToPeerReviews(boolean DEBUG,SkynetTransaction transaction) throws Exception {
  if (DEBUG) {
    OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"");
  }
  TeamWorkFlowArtifact firstCodeArt=DemoDbUtil.getSampleCodeWorkflows().get(0);
  TeamWorkFlowArtifact secondCodeArt=DemoDbUtil.getSampleCodeWorkflows().get(1);
  PeerToPeerReviewArtifact reviewArt=PeerToPeerReviewManager.createNewPeerToPeerReview(firstCodeArt,""String_Node_Str"",firstCodeArt.getStateMgr().getCurrentStateName(),transaction);
  reviewArt.persist(transaction);
  reviewArt=PeerToPeerReviewManager.createNewPeerToPeerReview(firstCodeArt,""String_Node_Str"",firstCodeArt.getStateMgr().getCurrentStateName(),transaction);
  List<UserRole> roles=new ArrayList<UserRole>();
  roles.add(new UserRole(Role.Author,AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Joe_Smith)));
  roles.add(new UserRole(Role.Reviewer,AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Kay_Jones)));
  roles.add(new UserRole(Role.Reviewer,AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Alex_Kay),2.0,true));
  Result result=PeerToPeerReviewManager.transitionTo(reviewArt,PeerToPeerReviewState.Review,roles,null,AtsClientService.get().getUserAdmin().getCurrentUser(),false,transaction);
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
  reviewArt.persist(transaction);
  reviewArt=PeerToPeerReviewManager.createNewPeerToPeerReview(secondCodeArt,""String_Node_Str"",secondCodeArt.getStateMgr().getCurrentStateName(),new Date(),AtsClientService.get().getUserAdmin().getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Kay_Jones)),transaction);
  roles=new ArrayList<UserRole>();
  roles.add(new UserRole(Role.Author,AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Kay_Jones),2.3,true));
  roles.add(new UserRole(Role.Reviewer,AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Joe_Smith),4.5,true));
  roles.add(new UserRole(Role.Reviewer,AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Alex_Kay),2.0,true));
  List<ReviewDefectItem> defects=new ArrayList<ReviewDefectItem>();
  defects.add(new ReviewDefectItem(AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Alex_Kay),Severity.Issue,Disposition.Accept,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Alex_Kay),Severity.Issue,Disposition.Accept,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Alex_Kay),Severity.Major,Disposition.Reject,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Joe_Smith),Severity.Minor,Disposition.Reject,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  defects.add(new ReviewDefectItem(AtsClientService.get().getUserAdmin().getUserFromToken(DemoUsers.Joe_Smith),Severity.Major,Disposition.Accept,InjectionActivity.Code,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date()));
  for (  ReviewDefectItem defect : defects) {
    defect.setClosed(true);
  }
  result=PeerToPeerReviewManager.transitionTo(reviewArt,PeerToPeerReviewState.Completed,roles,defects,AtsClientService.get().getUserAdmin().getCurrentUser(),false,transaction);
  if (result.isTrue()) {
    reviewArt.persist(transaction);
  }
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
}",0.9368039368039368
97426,"/** 
 * Create Decision Reviews<br> 1) ALREADY CREATED: Decision review created through the validation flag being set on a workflow<br> 2) Decision in ReWork state w Joe Smith assignee and 2 reviewers<br> 3) Decision in Complete state w Joe Smith assignee and completed<br> <br>
 */
public static void createDecisionReviews(boolean DEBUG,SkynetTransaction transaction) throws Exception {
  Date createdDate=new Date();
  IAtsUser createdBy=AtsUsersClient.getUser();
  if (DEBUG) {
    OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"");
  }
  TeamWorkFlowArtifact firstTestArt=getSampleReviewTestWorkflows().get(0);
  TeamWorkFlowArtifact secondTestArt=getSampleReviewTestWorkflows().get(1);
  DecisionReviewArtifact reviewArt=ValidateReviewManager.createValidateReview(firstTestArt,true,createdDate,createdBy,transaction);
  Result result=DecisionReviewManager.transitionTo(reviewArt,DecisionReviewState.Followup,AtsUsersClient.getUser(),false,transaction);
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
  reviewArt.persist(transaction);
  reviewArt=ValidateReviewManager.createValidateReview(secondTestArt,true,createdDate,createdBy,transaction);
  DecisionReviewManager.transitionTo(reviewArt,DecisionReviewState.Completed,AtsUsersClient.getUser(),false,transaction);
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
  reviewArt.persist(transaction);
}","/** 
 * Create Decision Reviews<br> 1) ALREADY CREATED: Decision review created through the validation flag being set on a workflow<br> 2) Decision in ReWork state w Joe Smith assignee and 2 reviewers<br> 3) Decision in Complete state w Joe Smith assignee and completed<br> <br>
 */
public static void createDecisionReviews(boolean DEBUG,SkynetTransaction transaction) throws Exception {
  Date createdDate=new Date();
  IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  if (DEBUG) {
    OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"");
  }
  TeamWorkFlowArtifact firstTestArt=getSampleReviewTestWorkflows().get(0);
  TeamWorkFlowArtifact secondTestArt=getSampleReviewTestWorkflows().get(1);
  DecisionReviewArtifact reviewArt=ValidateReviewManager.createValidateReview(firstTestArt,true,createdDate,createdBy,transaction);
  Result result=DecisionReviewManager.transitionTo(reviewArt,DecisionReviewState.Followup,createdBy,false,transaction);
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
  reviewArt.persist(transaction);
  reviewArt=ValidateReviewManager.createValidateReview(secondTestArt,true,createdDate,createdBy,transaction);
  DecisionReviewManager.transitionTo(reviewArt,DecisionReviewState.Completed,createdBy,false,transaction);
  if (result.isFalse()) {
    throw new IllegalStateException(""String_Node_Str"" + result.getText());
  }
  reviewArt.persist(transaction);
}",0.9614082599864592
97427,"public static void createTasks(boolean DEBUG) throws Exception {
  if (DEBUG) {
    OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"");
  }
  Date createdDate=new Date();
  IAtsUser createdBy=AtsUsersClient.getUser();
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),""String_Node_Str"");
  boolean firstTaskWorkflow=true;
  for (  TeamWorkFlowArtifact codeArt : DemoDbUtil.getSampleCodeWorkflows()) {
    List<IAtsUser> demoUsers=new ArrayList<IAtsUser>();
    if (firstTaskWorkflow) {
      demoUsers.add(AtsUsersClient.getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Joe_Smith)));
      demoUsers.add(AtsUsersClient.getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Kay_Jones)));
    }
 else {
      demoUsers.add(AtsUsersClient.getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Joe_Smith)));
    }
    for (    String title : getTaskTitles(firstTaskWorkflow)) {
      TaskArtifact taskArt=codeArt.createNewTask(demoUsers,title,createdDate,createdBy);
      taskArt.persist(transaction);
    }
    firstTaskWorkflow=false;
  }
  transaction.execute();
}","public static void createTasks(boolean DEBUG) throws Exception {
  if (DEBUG) {
    OseeLog.log(Activator.class,Level.INFO,""String_Node_Str"");
  }
  Date createdDate=new Date();
  IAtsUser createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),""String_Node_Str"");
  boolean firstTaskWorkflow=true;
  for (  TeamWorkFlowArtifact codeArt : DemoDbUtil.getSampleCodeWorkflows()) {
    List<IAtsUser> demoUsers=new ArrayList<IAtsUser>();
    if (firstTaskWorkflow) {
      demoUsers.add(AtsClientService.get().getUserAdmin().getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Joe_Smith)));
      demoUsers.add(AtsClientService.get().getUserAdmin().getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Kay_Jones)));
    }
 else {
      demoUsers.add(AtsClientService.get().getUserAdmin().getUserFromOseeUser(DemoDbUtil.getDemoUser(DemoUsers.Joe_Smith)));
    }
    for (    String title : getTaskTitles(firstTaskWorkflow)) {
      TaskArtifact taskArt=codeArt.createNewTask(demoUsers,title,createdDate,createdBy);
      taskArt.persist(transaction);
    }
    firstTaskWorkflow=false;
  }
  transaction.execute();
}",0.9377415199656504
97428,"@Override public void run(TableLoadOption... tableLoadOptions) throws OseeCoreException {
  if (AtsUtil.isProductionDb()) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  if (!MessageDialog.openConfirm(Displays.getActiveShell(),getName(),getName())) {
    return;
  }
  createdDate=new Date();
  createdBy=AtsUsersClient.getUser();
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),getName());
  GoalArtifact sawCodeGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact sawTestGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact toolsTeamGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact facilitiesGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact cisReqGoal=GoalManager.createGoal(""String_Node_Str"");
  TeamWorkFlowArtifact teamArt=createAction1(transaction,sawCodeGoal);
  createAction2(transaction,sawCodeGoal,cisReqGoal);
  createAction3(transaction,sawTestGoal,cisReqGoal);
  teamArt=createAction456(transaction,sawCodeGoal,facilitiesGoal,teamArt);
  createAction7(transaction,facilitiesGoal);
  for (  String name : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    TaskArtifact taskArt=teamArt.createNewTask(""String_Node_Str"" + name,createdDate,createdBy);
    toolsTeamGoal.addMember(taskArt);
    taskArt.persist(transaction);
  }
  toolsTeamGoal.persist(transaction);
  transaction.execute();
  WorldEditor.open(new WorldEditorSimpleProvider(""String_Node_Str"",Arrays.asList(sawCodeGoal,sawTestGoal,toolsTeamGoal,facilitiesGoal,cisReqGoal)));
}","@Override public void run(TableLoadOption... tableLoadOptions) throws OseeCoreException {
  if (AtsUtil.isProductionDb()) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  if (!MessageDialog.openConfirm(Displays.getActiveShell(),getName(),getName())) {
    return;
  }
  createdDate=new Date();
  createdBy=AtsClientService.get().getUserAdmin().getCurrentUser();
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),getName());
  GoalArtifact sawCodeGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact sawTestGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact toolsTeamGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact facilitiesGoal=GoalManager.createGoal(""String_Node_Str"");
  GoalArtifact cisReqGoal=GoalManager.createGoal(""String_Node_Str"");
  TeamWorkFlowArtifact teamArt=createAction1(transaction,sawCodeGoal);
  createAction2(transaction,sawCodeGoal,cisReqGoal);
  createAction3(transaction,sawTestGoal,cisReqGoal);
  teamArt=createAction456(transaction,sawCodeGoal,facilitiesGoal,teamArt);
  createAction7(transaction,facilitiesGoal);
  for (  String name : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    TaskArtifact taskArt=teamArt.createNewTask(""String_Node_Str"" + name,createdDate,createdBy);
    toolsTeamGoal.addMember(taskArt);
    taskArt.persist(transaction);
  }
  toolsTeamGoal.persist(transaction);
  transaction.execute();
  WorldEditor.open(new WorldEditorSimpleProvider(""String_Node_Str"",Arrays.asList(sawCodeGoal,sawTestGoal,toolsTeamGoal,facilitiesGoal,cisReqGoal)));
}",0.9897084048027444
97429,"@Test public void test() throws Exception {
  SevereLoggingMonitor monitor=TestUtil.severeLoggingStart();
  AtsTestUtil.cleanupAndReset(getClass().getSimpleName());
  Assert.assertFalse(AtsUsersClient.getOseeUser().getRelatedArtifacts(AtsRelationTypes.FavoriteUser_Artifact).contains(AtsTestUtil.getTeamWf()));
  FavoriteAction action=createAction();
  action.runWithException();
  Assert.assertTrue(AtsUsersClient.getOseeUser().getRelatedArtifacts(AtsRelationTypes.FavoriteUser_Artifact).contains(AtsTestUtil.getTeamWf()));
  TestUtil.severeLoggingEnd(monitor);
}","@Test public void test() throws Exception {
  SevereLoggingMonitor monitor=TestUtil.severeLoggingStart();
  AtsTestUtil.cleanupAndReset(getClass().getSimpleName());
  Assert.assertFalse(AtsClientService.get().getUserAdmin().getCurrentOseeUser().getRelatedArtifacts(AtsRelationTypes.FavoriteUser_Artifact).contains(AtsTestUtil.getTeamWf()));
  FavoriteAction action=createAction();
  action.runWithException();
  Assert.assertTrue(AtsClientService.get().getUserAdmin().getCurrentOseeUser().getRelatedArtifacts(AtsRelationTypes.FavoriteUser_Artifact).contains(AtsTestUtil.getTeamWf()));
  TestUtil.severeLoggingEnd(monitor);
}",0.9225589225589226
97430,"@Test public void test() throws Exception {
  SevereLoggingMonitor monitor=TestUtil.severeLoggingStart();
  AtsTestUtil.cleanupAndReset(getClass().getSimpleName());
  Assert.assertFalse(AtsUsersClient.getOseeUser().getRelatedArtifacts(AtsRelationTypes.FavoriteUser_Artifact).contains(AtsTestUtil.getTeamWf()));
  ResourceHistoryAction action=createAction();
  action.runWithException();
  TestUtil.severeLoggingEnd(monitor);
}","@Test public void test() throws Exception {
  SevereLoggingMonitor monitor=TestUtil.severeLoggingStart();
  AtsTestUtil.cleanupAndReset(getClass().getSimpleName());
  Assert.assertFalse(AtsClientService.get().getUserAdmin().getCurrentOseeUser().getRelatedArtifacts(AtsRelationTypes.FavoriteUser_Artifact).contains(AtsTestUtil.getTeamWf()));
  ResourceHistoryAction action=createAction();
  action.runWithException();
  TestUtil.severeLoggingEnd(monitor);
}",0.947845804988662
97431,"IAtsWorkDefinition copyWorkDefinition(String newName,IAtsWorkDefinition workDef,XResultData resultData,IAttributeResolver resolver,IUserResolver iUserResolver);","IAtsWorkDefinition copyWorkDefinition(String newName,IAtsWorkDefinition workDef,XResultData resultData);",0.7878787878787878
97432,"@Test public void testAdaVCast60ImportOp() throws Exception {
  File dbFile=tempFolder.newFile(""String_Node_Str"");
  File resultsFolder=tempFolder.newFolder(""String_Node_Str"");
  Bundle bundle=FrameworkUtil.getBundle(this.getClass());
  copyResource(getURL(bundle,""String_Node_Str""),dbFile);
  copyResource(getURL(bundle,""String_Node_Str""),tempFolder.newFile(""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),tempFolder.newFile(""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),new File(resultsFolder,""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),new File(resultsFolder,""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),new File(resultsFolder,""String_Node_Str""));
  VCast60Params params=new VCast60Params(tempFolder.getRoot().getAbsolutePath(),""String_Node_Str"",false,dbFile.getAbsolutePath());
  coverageImport=new CoverageImport(""String_Node_Str"");
  IOperation operation=CoverageImportFactory.createAdaVCast60ImportOp(params,coverageImport);
  Operations.executeWorkAndCheckStatus(operation);
  Assert.assertNotNull(coverageImport);
  Assert.assertFalse(coverageImport.getLog().isErrors());
  Assert.assertEquals(12,coverageImport.getCoverageItems().size());
  Assert.assertEquals(58,coverageImport.getCoveragePercent().intValue());
  Assert.assertEquals(7,coverageImport.getCoverageItemsCovered().size());
  Assert.assertEquals(0,coverageImport.getCoverageItemsCount(CoverageOptionManager.Deactivated_Code));
  Assert.assertEquals(0,coverageImport.getCoverageItemsCount(CoverageOptionManager.Exception_Handling));
  Assert.assertEquals(7,coverageImport.getCoverageItemsCount(CoverageOptionManager.Test_Unit));
  Assert.assertEquals(5,coverageImport.getCoverageItemsCount(CoverageOptionManager.Not_Covered));
  for (  CoverageItem coverageItem : coverageImport.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getName()));
  }
  for (  CoverageItem coverageItem : coverageImport.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getNamespace()));
  }
  for (  CoverageItem coverageItem : coverageImport.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getOrderNumber()));
  }
  coveragePackage=new CoveragePackage(""String_Node_Str"",CoverageOptionManagerDefault.instance(),new SimpleWorkProductTaskProvider());
  MergeManager mergeManager=new MergeManager(coveragePackage,coverageImport);
  if (mergeManager.getMergeItems(null).size() > 1) {
    int x=0;
    System.err.println(""String_Node_Str"");
    for (    IMergeItem mergeItem : mergeManager.getMergeItems(null)) {
      System.err.println(""String_Node_Str"" + x + ""String_Node_Str""+ mergeItem);
      x++;
    }
  }
  Assert.assertEquals(1,mergeManager.getMergeItems(null).size());
  Assert.assertEquals(MergeType.Add,mergeManager.getMergeItems(null).iterator().next().getMergeType());
  MergeImportManager importManager=new MergeImportManager(mergeManager);
  XResultData resultData=importManager.importItems(new ISaveable(){
    @Override public Result isEditable(){
      return Result.TrueResult;
    }
    @Override public Result save(    String saveName,    CoverageOptionManager coverageOptionManager){
      return Result.TrueResult;
    }
    @Override public Result save(    Collection<ICoverage> coverages,    String saveName){
      return Result.TrueResult;
    }
    @Override public Result saveImportRecord(    SkynetTransaction transaction,    CoverageImport coverageImport){
      return Result.TrueResult;
    }
    @Override public IOseeBranch getBranch(){
      return CoverageTestUtil.getTestBranch();
    }
  }
,mergeManager.getMergeItems(null));
  Assert.assertEquals(0,resultData.getNumErrors());
  for (  CoverageItem coverageItem : coveragePackage.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getName()));
  }
  for (  CoverageItem coverageItem : coveragePackage.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getNamespace()));
  }
  for (  CoverageItem coverageItem : coveragePackage.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getOrderNumber()));
  }
  CoverageUtil.printCoverageItemDiffs(coveragePackage,coverageImport);
  Assert.assertEquals(12,coveragePackage.getCoverageItems().size());
  Assert.assertEquals(58,coveragePackage.getCoveragePercent().intValue());
  Assert.assertEquals(7,coveragePackage.getCoverageItemsCovered().size());
  Assert.assertEquals(0,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Deactivated_Code));
  Assert.assertEquals(0,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Exception_Handling));
  Assert.assertEquals(7,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Test_Unit));
  Assert.assertEquals(5,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Not_Covered));
  CoveragePackage loadedCp=null;
  if (testWithDb) {
    OseeCoverageStore store=OseeCoveragePackageStore.get(coveragePackage,CoverageTestUtil.getTestBranch());
    String txComment=String.format(""String_Node_Str"",getClass().getSimpleName(),testName.getMethodName());
    SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),txComment);
    CoveragePackageEvent coverageEvent=new CoveragePackageEvent(coveragePackage,CoverageEventType.Modified);
    store.save(transaction,coverageEvent,coveragePackage.getCoverageOptionManager());
    store.getArtifact(false).persist(transaction);
    Artifact artifact=ArtifactQuery.getArtifactFromId(coveragePackage.getGuid(),CoverageTestUtil.getTestBranch());
    CoverageTestUtil.registerAsTestArtifact(artifact);
    artifact.persist(transaction);
    OseeCoveragePackageStore packageStore=new OseeCoveragePackageStore(artifact);
    Assert.assertNotNull(packageStore.getArtifact(false));
    loadedCp=packageStore.getCoveragePackage();
    packageStore.getArtifact(false).persist(transaction);
    transaction.execute();
  }
 else {
    loadedCp=coveragePackage;
  }
  Assert.assertEquals(12,loadedCp.getCoverageItems().size());
  Assert.assertEquals(58,loadedCp.getCoveragePercent().intValue());
  Assert.assertEquals(7,loadedCp.getCoverageItemsCovered().size());
  Assert.assertEquals(0,loadedCp.getCoverageItemsCount(CoverageOptionManager.Deactivated_Code));
  Assert.assertEquals(0,loadedCp.getCoverageItemsCount(CoverageOptionManager.Exception_Handling));
  Assert.assertEquals(7,loadedCp.getCoverageItemsCount(CoverageOptionManager.Test_Unit));
  Assert.assertEquals(5,loadedCp.getCoverageItemsCount(CoverageOptionManager.Not_Covered));
}","@Test public void testAdaVCast60ImportOp() throws Exception {
  File dbFile=tempFolder.newFile(""String_Node_Str"");
  File resultsFolder=tempFolder.newFolder(""String_Node_Str"");
  Bundle bundle=FrameworkUtil.getBundle(this.getClass());
  copyResource(getURL(bundle,""String_Node_Str""),dbFile);
  copyResource(getURL(bundle,""String_Node_Str""),tempFolder.newFile(""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),tempFolder.newFile(""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),new File(resultsFolder,""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),new File(resultsFolder,""String_Node_Str""));
  copyResource(getURL(bundle,""String_Node_Str""),new File(resultsFolder,""String_Node_Str""));
  VCast60Params params=new VCast60Params(tempFolder.getRoot().getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",false,dbFile.getName());
  coverageImport=new CoverageImport(""String_Node_Str"");
  IOperation operation=CoverageImportFactory.createAdaVCast60ImportOp(params,coverageImport);
  Operations.executeWorkAndCheckStatus(operation);
  Assert.assertNotNull(coverageImport);
  Assert.assertFalse(coverageImport.getLog().isErrors());
  Assert.assertEquals(12,coverageImport.getCoverageItems().size());
  Assert.assertEquals(58,coverageImport.getCoveragePercent().intValue());
  Assert.assertEquals(7,coverageImport.getCoverageItemsCovered().size());
  Assert.assertEquals(0,coverageImport.getCoverageItemsCount(CoverageOptionManager.Deactivated_Code));
  Assert.assertEquals(0,coverageImport.getCoverageItemsCount(CoverageOptionManager.Exception_Handling));
  Assert.assertEquals(7,coverageImport.getCoverageItemsCount(CoverageOptionManager.Test_Unit));
  Assert.assertEquals(5,coverageImport.getCoverageItemsCount(CoverageOptionManager.Not_Covered));
  for (  CoverageItem coverageItem : coverageImport.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getName()));
  }
  for (  CoverageItem coverageItem : coverageImport.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getNamespace()));
  }
  for (  CoverageItem coverageItem : coverageImport.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getOrderNumber()));
  }
  coveragePackage=new CoveragePackage(""String_Node_Str"",CoverageOptionManagerDefault.instance(),new SimpleWorkProductTaskProvider());
  MergeManager mergeManager=new MergeManager(coveragePackage,coverageImport);
  if (mergeManager.getMergeItems(null).size() > 1) {
    int x=0;
    System.err.println(""String_Node_Str"");
    for (    IMergeItem mergeItem : mergeManager.getMergeItems(null)) {
      System.err.println(""String_Node_Str"" + x + ""String_Node_Str""+ mergeItem);
      x++;
    }
  }
  Assert.assertEquals(1,mergeManager.getMergeItems(null).size());
  Assert.assertEquals(MergeType.Add,mergeManager.getMergeItems(null).iterator().next().getMergeType());
  MergeImportManager importManager=new MergeImportManager(mergeManager);
  XResultData resultData=importManager.importItems(new ISaveable(){
    @Override public Result isEditable(){
      return Result.TrueResult;
    }
    @Override public Result save(    String saveName,    CoverageOptionManager coverageOptionManager){
      return Result.TrueResult;
    }
    @Override public Result save(    Collection<ICoverage> coverages,    String saveName){
      return Result.TrueResult;
    }
    @Override public Result saveImportRecord(    SkynetTransaction transaction,    CoverageImport coverageImport){
      return Result.TrueResult;
    }
    @Override public IOseeBranch getBranch(){
      return CoverageTestUtil.getTestBranch();
    }
  }
,mergeManager.getMergeItems(null));
  Assert.assertEquals(0,resultData.getNumErrors());
  for (  CoverageItem coverageItem : coveragePackage.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getName()));
  }
  for (  CoverageItem coverageItem : coveragePackage.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getNamespace()));
  }
  for (  CoverageItem coverageItem : coveragePackage.getCoverageItems()) {
    Assert.assertTrue(Strings.isValid(coverageItem.getOrderNumber()));
  }
  CoverageUtil.printCoverageItemDiffs(coveragePackage,coverageImport);
  Assert.assertEquals(12,coveragePackage.getCoverageItems().size());
  Assert.assertEquals(58,coveragePackage.getCoveragePercent().intValue());
  Assert.assertEquals(7,coveragePackage.getCoverageItemsCovered().size());
  Assert.assertEquals(0,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Deactivated_Code));
  Assert.assertEquals(0,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Exception_Handling));
  Assert.assertEquals(7,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Test_Unit));
  Assert.assertEquals(5,coveragePackage.getCoverageItemsCount(CoverageOptionManager.Not_Covered));
  CoveragePackage loadedCp=null;
  if (testWithDb) {
    OseeCoverageStore store=OseeCoveragePackageStore.get(coveragePackage,CoverageTestUtil.getTestBranch());
    String txComment=String.format(""String_Node_Str"",getClass().getSimpleName(),testName.getMethodName());
    SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),txComment);
    CoveragePackageEvent coverageEvent=new CoveragePackageEvent(coveragePackage,CoverageEventType.Modified);
    store.save(transaction,coverageEvent,coveragePackage.getCoverageOptionManager());
    store.getArtifact(false).persist(transaction);
    Artifact artifact=ArtifactQuery.getArtifactFromId(coveragePackage.getGuid(),CoverageTestUtil.getTestBranch());
    CoverageTestUtil.registerAsTestArtifact(artifact);
    artifact.persist(transaction);
    OseeCoveragePackageStore packageStore=new OseeCoveragePackageStore(artifact);
    Assert.assertNotNull(packageStore.getArtifact(false));
    loadedCp=packageStore.getCoveragePackage();
    packageStore.getArtifact(false).persist(transaction);
    transaction.execute();
  }
 else {
    loadedCp=coveragePackage;
  }
  Assert.assertEquals(12,loadedCp.getCoverageItems().size());
  Assert.assertEquals(58,loadedCp.getCoveragePercent().intValue());
  Assert.assertEquals(7,loadedCp.getCoverageItemsCovered().size());
  Assert.assertEquals(0,loadedCp.getCoverageItemsCount(CoverageOptionManager.Deactivated_Code));
  Assert.assertEquals(0,loadedCp.getCoverageItemsCount(CoverageOptionManager.Exception_Handling));
  Assert.assertEquals(7,loadedCp.getCoverageItemsCount(CoverageOptionManager.Test_Unit));
  Assert.assertEquals(5,loadedCp.getCoverageItemsCount(CoverageOptionManager.Not_Covered));
}",0.997274379164143
97433,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  VCastDataStore dataStore=VCastDataStoreFactory.createDataStore(input.getVCastDbPath());
  Map<String,CoverageUnit> fileNumToCoverageUnit=new HashMap<String,CoverageUnit>();
  coverageImport.setCoverageUnitFileContentsProvider(new SimpleCoverageUnitFileContentsProvider());
  Collection<VCastInstrumentedFile> instrumentedFiles=getInstrumentedFiles(dataStore);
  for (  VCastInstrumentedFile instrumentedFile : instrumentedFiles) {
    checkForCancelledStatus(monitor);
    processInstrumented(monitor,dataStore,fileNumToCoverageUnit,instrumentedFile);
  }
  Collection<VCastResult> results=getResultFiles(dataStore);
  for (  VCastResult result : results) {
    checkForCancelledStatus(monitor);
    processResult(monitor,fileNumToCoverageUnit,result);
  }
  monitor.worked(1);
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  File file=new File(input.getVCastDirectory() + input.getVCastDbPath());
  if (file.exists() && file.canRead()) {
    VCastDataStore dataStore=VCastDataStoreFactory.createDataStore(file.getAbsolutePath());
    Map<String,CoverageUnit> fileNumToCoverageUnit=new HashMap<String,CoverageUnit>();
    coverageImport.setCoverageUnitFileContentsProvider(new SimpleCoverageUnitFileContentsProvider());
    Collection<VCastInstrumentedFile> instrumentedFiles=getInstrumentedFiles(dataStore);
    for (    VCastInstrumentedFile instrumentedFile : instrumentedFiles) {
      checkForCancelledStatus(monitor);
      processInstrumented(monitor,dataStore,fileNumToCoverageUnit,instrumentedFile);
    }
    Collection<VCastResult> results=getResultFiles(dataStore);
    for (    VCastResult result : results) {
      checkForCancelledStatus(monitor);
      processResult(monitor,fileNumToCoverageUnit,result);
    }
    monitor.worked(1);
  }
 else {
    throw new OseeCoreException(""String_Node_Str"",file.getAbsolutePath());
  }
}",0.8249744114636642
97434,"private void importDisposition(ImportCoverageMethodsCounter counter,XResultData data,CoverageItem fromItem,CoveragePackage toPackage) throws OseeCoreException {
  ImportMatch matchItem=findMatch(fromItem,toPackage);
  if (matchItem.isMatch()) {
    counter.numMatch++;
    data.logWithFormat(""String_Node_Str"",matchItem.getFromItem().getOrderNumber(),matchItem.getToItem().getOrderNumber());
    CoverageItem toItem=(CoverageItem)matchItem.getToItem();
    if (toItem.getCoverageMethod().name.equals(CoverageOptionManager.Test_Unit.name) || toItem.getCoverageMethod().name.equals(CoverageOptionManager.Exception_Handling.name)) {
      data.logWithFormat(""String_Node_Str"",toItem.getCoverageMethod().name);
    }
 else     if (toItem.getCoverageMethod().getName().equals(fromItem.getCoverageMethod().getName())) {
      data.log(""String_Node_Str"");
    }
 else {
      counter.numImported++;
      data.log(""String_Node_Str"");
      toItem.setCoverageMethod(fromItem.getCoverageMethod());
      if (!toItem.getRationale().equals(fromItem.getRationale())) {
        data.logWithFormat(""String_Node_Str"",toItem.getRationale(),fromItem.getRationale());
        toItem.setRationale(fromItem.getRationale());
      }
      if (isRetainTaskTracking) {
        String toTaskGuid=toItem.getWorkProductTaskGuid();
        if (toTaskGuid == null) {
          toTaskGuid=""String_Node_Str"";
        }
        String fromTaskGuid=fromItem.getWorkProductTaskGuid();
        if (!toTaskGuid.equals(fromTaskGuid)) {
          data.logWithFormat(""String_Node_Str"",toTaskGuid,toItem.getWorkProductTaskStr(),fromTaskGuid,fromItem.getWorkProductTaskStr());
          toItem.setWorkProductTaskGuid(fromTaskGuid);
        }
      }
    }
  }
 else {
    counter.numNoMatch++;
    CoverageUnit fromFile=getFileCoverageUnit(fromItem);
    if (!counter.fileToErrorCount.contains(fromFile.getName())) {
      outputFileToResults(resultsDir,""String_Node_Str"",fromFile);
      CoverageUnit matchingToFile=getFileCoverageUnitFromNameRecurseDown(toPackage,fromFile.getName());
      if (matchingToFile != null) {
        outputFileToResults(resultsDir,""String_Node_Str"",matchingToFile);
      }
    }
    counter.fileToErrorCount.put(fromFile.getName());
    data.logErrorWithFormat(""String_Node_Str"",matchItem.getDescription());
    data.logWithFormat(""String_Node_Str"",getNonNullValue(fromItem.getNotes()));
    data.logWithFormat(""String_Node_Str"",getNonNullValue(fromItem.getWorkProductTaskGuid()),getNonNullValue(fromItem.getWorkProductTaskStr()));
  }
}","private void importDisposition(ImportCoverageMethodsCounter counter,XResultData data,CoverageItem fromItem,CoveragePackage toPackage) throws OseeCoreException {
  ImportMatch matchItem=findMatch(fromItem,toPackage);
  if (matchItem.isMatch()) {
    counter.numMatch++;
    data.logWithFormat(""String_Node_Str"",matchItem.getFromItem().getOrderNumber(),matchItem.getToItem().getOrderNumber());
    CoverageItem toItem=(CoverageItem)matchItem.getToItem();
    if (toItem.getCoverageMethod().name.equals(CoverageOptionManager.Test_Unit.name) || toItem.getCoverageMethod().name.equals(CoverageOptionManager.Exception_Handling.name)) {
      data.logWithFormat(""String_Node_Str"",toItem.getCoverageMethod().name);
    }
 else     if (toItem.getCoverageMethod().getName().equals(fromItem.getCoverageMethod().getName())) {
      data.log(""String_Node_Str"");
    }
 else {
      counter.numImported++;
      data.log(""String_Node_Str"");
      CoverageOptionManager coverageOptionManager=toPackage.getCoverageOptionManager();
      CoverageOption coverageOption=fromItem.getCoverageMethod();
      if (!checkOptionIsInPackage(coverageOptionManager,coverageOption)) {
        throw new OseeCoreException(String.format(""String_Node_Str"",coverageOption.getName(),toPackage.getName()));
      }
      toItem.setCoverageMethod(fromItem.getCoverageMethod());
      if (!toItem.getRationale().equals(fromItem.getRationale())) {
        data.logWithFormat(""String_Node_Str"",toItem.getRationale(),fromItem.getRationale());
        toItem.setRationale(fromItem.getRationale());
      }
      if (isRetainTaskTracking) {
        String toTaskGuid=toItem.getWorkProductTaskGuid();
        if (toTaskGuid == null) {
          toTaskGuid=""String_Node_Str"";
        }
        String fromTaskGuid=fromItem.getWorkProductTaskGuid();
        if (!toTaskGuid.equals(fromTaskGuid)) {
          data.logWithFormat(""String_Node_Str"",toTaskGuid,toItem.getWorkProductTaskStr(),fromTaskGuid,fromItem.getWorkProductTaskStr());
          toItem.setWorkProductTaskGuid(fromTaskGuid);
        }
      }
    }
  }
 else {
    counter.numNoMatch++;
    CoverageUnit fromFile=getFileCoverageUnit(fromItem);
    if (!counter.fileToErrorCount.contains(fromFile.getName())) {
      outputFileToResults(resultsDir,""String_Node_Str"",fromFile);
      CoverageUnit matchingToFile=getFileCoverageUnitFromNameRecurseDown(toPackage,fromFile.getName());
      if (matchingToFile != null) {
        outputFileToResults(resultsDir,""String_Node_Str"",matchingToFile);
      }
    }
    counter.fileToErrorCount.put(fromFile.getName());
    data.logErrorWithFormat(""String_Node_Str"",matchItem.getDescription());
    data.logWithFormat(""String_Node_Str"",getNonNullValue(fromItem.getNotes()));
    data.logWithFormat(""String_Node_Str"",getNonNullValue(fromItem.getWorkProductTaskGuid()),getNonNullValue(fromItem.getWorkProductTaskStr()));
  }
}",0.9347625207909812
97435,"private ImportMatch findMatch(CoverageItem fromItem,CoveragePackage toPackage){
  CoverageUnit fromFile=getFileCoverageUnit(fromItem);
  CoverageUnit toFile=getFileCoverageUnitFromNameRecurseDown(toPackage,fromFile.getName());
  if (toFile == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromFile.getName());
  }
  CoverageUnit fromMethod=getMethodCoverageUnit(fromFile,fromItem);
  if (fromMethod == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromItem.getParent().getName());
  }
  List<CoverageUnit> toMethods=getToMethodCoverageUnitsFromName(toFile,fromMethod.getName());
  if (toMethods.isEmpty()) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromMethod.getName());
  }
  CoverageUnit toMethod=null;
  String description=""String_Node_Str"";
  List<CoverageUnit> strongUnits=new ArrayList<CoverageUnit>();
  List<CoverageUnit> medUnits=new ArrayList<CoverageUnit>();
  List<CoverageUnit> weakUnits=new ArrayList<CoverageUnit>();
  for (  CoverageUnit possibleToMethod : toMethods) {
    boolean isOrderEqual=isOrderEqual(fromMethod,possibleToMethod);
    boolean isChildrenSizeEqual=isChildrenSizeEqual(fromMethod,possibleToMethod);
    if (isOrderEqual && isChildrenSizeEqual) {
      description+=""String_Node_Str"";
      strongUnits.add(possibleToMethod);
    }
 else     if (isOrderEqual) {
      description+=""String_Node_Str"";
      medUnits.add(possibleToMethod);
    }
 else     if (isChildrenSizeEqual) {
      description+=""String_Node_Str"";
      weakUnits.add(possibleToMethod);
    }
 else {
      description+=""String_Node_Str"";
      weakUnits.add(possibleToMethod);
    }
  }
  description+=""String_Node_Str"" + strongUnits.size() + ""String_Node_Str""+ medUnits.size()+ ""String_Node_Str""+ weakUnits+ ""String_Node_Str"";
  if (strongUnits.size() == 1) {
    toMethod=strongUnits.iterator().next();
    description+=""String_Node_Str"";
  }
 else   if (medUnits.size() == 1) {
    toMethod=medUnits.iterator().next();
    description+=""String_Node_Str"";
  }
 else   if (weakUnits.size() == 1) {
    toMethod=weakUnits.iterator().next();
    description+=""String_Node_Str"";
  }
  if (toMethod == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromMethod.getName(),description);
  }
  List<CoverageItem> toCoverageItems=toMethod.getCoverageItems();
  CoverageItem toItem=null;
  for (  CoverageItem toCoverageItem : toCoverageItems) {
    boolean orderMatch=toCoverageItem.getOrderNumber().equals(fromItem.getOrderNumber());
    boolean nameMatch=toCoverageItem.getName().equals(fromItem.getName());
    if (orderMatch && nameMatch) {
      toItem=toCoverageItem;
      description+=""String_Node_Str"";
      break;
    }
  }
  if (toItem == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromMethod.getName(),description);
  }
  return new ImportMatch(ImportMatchType.Match,fromItem,toItem,""String_Node_Str"",toItem,description);
}","private ImportMatch findMatch(CoverageItem fromItem,CoveragePackage toPackage){
  CoverageUnit fromFile=getFileCoverageUnit(fromItem);
  CoverageUnit toFile=getFileCoverageUnitFromNameRecurseDown(toPackage,fromFile.getName());
  if (toFile == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromFile.getName());
  }
  CoverageUnit fromMethod=getMethodCoverageUnit(fromFile,fromItem);
  if (fromMethod == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromItem.getParent().getName());
  }
  List<CoverageUnit> toMethods=getToMethodCoverageUnitsFromName(toFile,fromMethod.getName());
  if (toMethods.isEmpty()) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromMethod.getName());
  }
  CoverageUnit bestFitToMethod=null;
  String description=""String_Node_Str"";
  List<CoverageUnit> strongUnits=new ArrayList<CoverageUnit>();
  List<CoverageUnit> medUnits=new ArrayList<CoverageUnit>();
  List<CoverageUnit> weakUnits=new ArrayList<CoverageUnit>();
  for (  CoverageUnit possibleToMethod : toMethods) {
    boolean isOrderEqual=isOrderEqual(fromMethod,possibleToMethod);
    boolean isChildrenSizeEqual=isChildrenSizeEqual(fromMethod,possibleToMethod);
    if (isOrderEqual && isChildrenSizeEqual) {
      description+=""String_Node_Str"";
      strongUnits.add(possibleToMethod);
    }
 else     if (isOrderEqual) {
      description+=""String_Node_Str"";
      medUnits.add(possibleToMethod);
    }
 else     if (isChildrenSizeEqual) {
      description+=""String_Node_Str"";
      weakUnits.add(possibleToMethod);
    }
 else {
      description+=""String_Node_Str"";
      weakUnits.add(possibleToMethod);
    }
  }
  description+=""String_Node_Str"" + strongUnits.size() + ""String_Node_Str""+ medUnits.size()+ ""String_Node_Str""+ weakUnits.size()+ ""String_Node_Str"";
  if (strongUnits.size() == 1) {
    bestFitToMethod=strongUnits.iterator().next();
    description+=""String_Node_Str"";
  }
 else   if (medUnits.size() == 1) {
    bestFitToMethod=medUnits.iterator().next();
    description+=""String_Node_Str"";
  }
 else   if (weakUnits.size() == 1) {
    bestFitToMethod=weakUnits.iterator().next();
    description+=""String_Node_Str"";
  }
  if (bestFitToMethod == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromMethod.getName(),description);
  }
  List<CoverageItem> toCoverageItems=bestFitToMethod.getCoverageItems();
  CoverageItem toItem=null;
  for (  CoverageItem toCoverageItem : toCoverageItems) {
    boolean orderMatch=toCoverageItem.getOrderNumber().equals(fromItem.getOrderNumber());
    boolean nameMatch=toCoverageItem.getName().equals(fromItem.getName());
    if (orderMatch && nameMatch) {
      toItem=toCoverageItem;
      description+=""String_Node_Str"";
      break;
    }
  }
  if (toItem == null) {
    return new ImportMatch(ImportMatchType.NoMatch,fromFile,null,""String_Node_Str"",fromMethod.getName(),description);
  }
  return new ImportMatch(ImportMatchType.Match,fromItem,toItem,""String_Node_Str"",toItem,description);
}",0.9901150542861772
97436,"private void setFromPropertyStore(PropertyStore store,CoverageOptionManager coverageOptionManager) throws OseeCoreException {
  setCoverageMethod(coverageOptionManager.get(store.get(""String_Node_Str"")));
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setOrderNumber(store.get(""String_Node_Str""));
  }
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setName(Strings.intern(store.get(""String_Node_Str"")));
  }
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setRationale(store.get(""String_Node_Str""));
  }
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setWorkProductTaskGuid(store.get(""String_Node_Str""));
  }
  if (testUnitProvider == null) {
    testUnitProvider=new SimpleTestUnitProvider();
  }
  String testUnitsStr=store.get(""String_Node_Str"");
  if (Strings.isValid(testUnitsStr)) {
    testUnitProvider.fromXml(this,testUnitsStr);
  }
}","private void setFromPropertyStore(PropertyStore store,CoverageOptionManager coverageOptionManager) throws OseeCoreException {
  String methodTypeString=store.get(""String_Node_Str"");
  CoverageOption coverageMethod=coverageOptionManager.get(methodTypeString);
  Conditions.checkNotNull(coverageMethod,String.format(""String_Node_Str"",methodTypeString));
  setCoverageMethod(coverageMethod);
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setOrderNumber(store.get(""String_Node_Str""));
  }
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setName(Strings.intern(store.get(""String_Node_Str"")));
  }
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setRationale(store.get(""String_Node_Str""));
  }
  if (Strings.isValid(store.get(""String_Node_Str""))) {
    setWorkProductTaskGuid(store.get(""String_Node_Str""));
  }
  if (testUnitProvider == null) {
    testUnitProvider=new SimpleTestUnitProvider();
  }
  String testUnitsStr=store.get(""String_Node_Str"");
  if (Strings.isValid(testUnitsStr)) {
    testUnitProvider.fromXml(this,testUnitsStr);
  }
}",0.8721344880285278
97437,"public List<CoverageItem> getCoverageItemsCovered(){
  List<CoverageItem> items=new ArrayList<CoverageItem>();
  for (  CoverageItem coverageItem : getCoverageItems()) {
    if (coverageItem.getCoverageMethod() == null) {
      OseeLog.log(Activator.class,Level.SEVERE,String.format(""String_Node_Str"",coverageItem.toString()));
      System.out.println(""String_Node_Str"");
    }
 else     if (!coverageItem.getCoverageMethod().getName().equals(CoverageOptionManager.Not_Covered.name)) {
      items.add(coverageItem);
    }
  }
  return items;
}","public List<CoverageItem> getCoverageItemsCovered(){
  List<CoverageItem> items=new ArrayList<CoverageItem>();
  for (  CoverageItem coverageItem : getCoverageItems()) {
    if (coverageItem.getCoverageMethod() == null) {
      OseeLog.log(Activator.class,Level.SEVERE,String.format(""String_Node_Str"",coverageItem.toString()));
    }
 else     if (!coverageItem.getCoverageMethod().getName().equals(CoverageOptionManager.Not_Covered.name)) {
      items.add(coverageItem);
    }
  }
  return items;
}",0.9569377990430622
97438,"@Override public void dispose(){
  labelWidget.dispose();
  if (Widgets.isAccessible(parent)) {
    parent.layout();
  }
}","@Override public void dispose(){
  if (Widgets.isAccessible(labelWidget)) {
    labelWidget.dispose();
  }
  if (Widgets.isAccessible(parent)) {
    parent.layout();
  }
}",0.8327645051194539
97439,"public void removeControlCausedMessageByObject(){
  IMessageManager messageManager=getMessageManager();
  if (messageManager != null && isFormReady()) {
    messageManager.removeMessage(this,getErrorMessageControl());
  }
}","public void removeControlCausedMessageByObject(){
  IMessageManager messageManager=getMessageManager();
  if (messageManager != null && isFormReady()) {
    if (Widgets.isAccessible(getErrorMessageControl())) {
      messageManager.removeMessage(this,getErrorMessageControl());
    }
  }
}",0.81640625
97440,"public void removeControlCausedMessage(String messageId){
  IMessageManager messageManager=getMessageManager();
  if (messageManager != null && isFormReady()) {
    messageManager.removeMessage(messageId,getErrorMessageControl());
  }
}","public void removeControlCausedMessage(String messageId){
  IMessageManager messageManager=getMessageManager();
  if (messageManager != null && isFormReady()) {
    if (Widgets.isAccessible(getErrorMessageControl())) {
      messageManager.removeMessage(messageId,getErrorMessageControl());
    }
  }
}",0.8252788104089219
97441,"@Override public void cancel() throws OseeCoreException {
  try {
    if (preparedStatement != null) {
      preparedStatement.cancel();
    }
    if (callableStatement != null) {
      callableStatement.cancel();
    }
  }
 catch (  SQLException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}","@Override public void cancel() throws OseeCoreException {
  try {
    if (preparedStatement != null && !preparedStatement.isClosed()) {
      preparedStatement.cancel();
    }
  }
 catch (  SQLException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
  try {
    if (callableStatement != null && !callableStatement.isClosed()) {
      callableStatement.cancel();
    }
  }
 catch (  SQLException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}",0.5447154471544715
97442,"private void closePreviousResources() throws OseeCoreException {
  try {
    if (rSet != null) {
      rSet.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (callableStatement != null) {
      callableStatement.close();
    }
  }
 catch (  SQLException ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}","private void closePreviousResources(){
  try {
    if (rSet != null) {
      rSet.close();
    }
  }
 catch (  SQLException ex) {
    OseeLog.log(OseeStatementImpl.class,Level.SEVERE,ex);
  }
 finally {
    rSet=null;
  }
  try {
    if (preparedStatement != null && !preparedStatement.isClosed()) {
      preparedStatement.close();
    }
  }
 catch (  SQLException ex) {
    OseeLog.log(OseeStatementImpl.class,Level.SEVERE,ex);
  }
 finally {
    preparedStatement=null;
  }
  try {
    if (callableStatement != null && !callableStatement.isClosed()) {
      callableStatement.close();
    }
  }
 catch (  SQLException ex) {
    OseeLog.log(OseeStatementImpl.class,Level.SEVERE,ex);
  }
 finally {
    callableStatement=null;
  }
}",0.4727608494921514
97443,"@Override public boolean isDatabaseType(SupportedDatabase type) throws OseeCoreException {
  return SupportedDatabase.isDatabaseType(connection.getMetaData(),type);
}","@Override public boolean isDatabaseType(SupportedDatabase type) throws OseeCoreException {
  allowReuse();
  return SupportedDatabase.isDatabaseType(connection.getMetaData(),type);
}",0.9540229885057472
97444,"/** 
 * The application must call close when it is done using this object; however, it is safe to use this same object multiple times, for example calling runPreparedQuery() repeatedly, without any intermediate calls to close
 */
@Override public void close(){
  try {
    closePreviousResources();
    if (autoClose && connection != null) {
      connection.close();
      connection=null;
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(OseeStatementImpl.class,Level.SEVERE,ex);
  }
}","/** 
 * The application must call close when it is done using this object; however, it is safe to use this same object multiple times, for example calling runPreparedQuery() repeatedly, without any intermediate calls to close
 */
@Override public void close(){
  closePreviousResources();
  if (autoClose && connection != null) {
    try {
      if (!connection.isClosed()) {
        connection.close();
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(OseeStatementImpl.class,Level.SEVERE,ex);
    }
 finally {
      connection=null;
    }
  }
}",0.8711194731890874
97445,"/** 
 * allows for multiple uses of this object to have an open connection
 */
private void allowReuse() throws OseeCoreException {
  if (connection == null) {
    connection=connectionPool.getConnection();
  }
  closePreviousResources();
}","/** 
 * allows for multiple uses of this object to have an open connection
 */
private void allowReuse() throws OseeCoreException {
  closePreviousResources();
  if (connection == null) {
    connection=connectionPool.getConnection();
  }
}",0.8833333333333333
97446,"private void processAddressedButNonexistentGammas(String tableName) throws OseeCoreException {
  List<Object[]> nonexistentGammas=new LinkedList<Object[]>();
  IOseeStatement chStmt=getDatabaseService().getStatement();
  try {
    String sql=String.format(NONEXISTENT_GAMMAS,tableName);
    chStmt.runPreparedQuery(sql);
    while (chStmt.next()) {
      nonexistentGammas.add(new Object[]{chStmt.getInt(""String_Node_Str"")});
      log(String.valueOf(chStmt.getInt(""String_Node_Str"")));
    }
  }
  finally {
    chStmt.close();
  }
  getDatabaseService().runBatchUpdate(String.format(DELETE_GAMMAS,tableName),nonexistentGammas);
}","private void processAddressedButNonexistentGammas(OseeConnection connection,String tableName) throws OseeCoreException {
  List<Object[]> nonexistentGammas=new LinkedList<Object[]>();
  IOseeStatement chStmt=getDatabaseService().getStatement(connection);
  try {
    String sql=String.format(NONEXISTENT_GAMMAS,tableName);
    chStmt.runPreparedQuery(sql);
    while (chStmt.next()) {
      nonexistentGammas.add(new Object[]{chStmt.getInt(""String_Node_Str"")});
      log(String.valueOf(chStmt.getInt(""String_Node_Str"")));
    }
  }
  finally {
    chStmt.close();
  }
  if (!nonexistentGammas.isEmpty()) {
    getDatabaseService().runBatchUpdate(connection,String.format(DELETE_GAMMAS,tableName),nonexistentGammas);
  }
}",0.9327420546932742
97447,"public PurgeUnusedBackingDataAndTransactions(IOseeDatabaseService dbService,OperationLogger logger){
  super(""String_Node_Str"",ServiceUtil.PLUGIN_ID,logger);
  this.dbService=dbService;
}","public PurgeUnusedBackingDataAndTransactions(IOseeDatabaseService dbService,OperationLogger logger){
  super(dbService,""String_Node_Str"",ServiceUtil.PLUGIN_ID,logger);
}",0.8932584269662921
97448,"private void processEmptyTransactions() throws OseeCoreException {
  List<Object[]> emptyTransactions=new LinkedList<Object[]>();
  IOseeStatement chStmt=ConnectionHandler.getStatement();
  String sql=EMPTY_TRANSACTIONS;
  try {
    chStmt.runPreparedQuery(sql);
    while (chStmt.next()) {
      emptyTransactions.add(new Object[]{chStmt.getInt(""String_Node_Str""),chStmt.getInt(""String_Node_Str"")});
      log(String.valueOf(chStmt.getInt(""String_Node_Str"")));
    }
  }
  finally {
    chStmt.close();
  }
  ConnectionHandler.runBatchUpdate(DELETE_EMPTY_TRANSACTIONS,emptyTransactions);
}","private void processEmptyTransactions(OseeConnection connection) throws OseeCoreException {
  List<Object[]> emptyTransactions=new LinkedList<Object[]>();
  IOseeStatement chStmt=getDatabaseService().getStatement(connection);
  try {
    chStmt.runPreparedQuery(EMPTY_TRANSACTIONS);
    while (chStmt.next()) {
      emptyTransactions.add(new Object[]{chStmt.getInt(""String_Node_Str""),chStmt.getInt(""String_Node_Str"")});
      log(String.valueOf(chStmt.getInt(""String_Node_Str"")));
    }
  }
  finally {
    chStmt.close();
  }
  if (!emptyTransactions.isEmpty()) {
    getDatabaseService().runBatchUpdate(connection,DELETE_EMPTY_TRANSACTIONS,emptyTransactions);
  }
}",0.7790143084260731
97449,"private void processNotAddressedGammas(String tableName) throws OseeCoreException {
  List<Object[]> notAddressedGammas=new LinkedList<Object[]>();
  IOseeStatement chStmt=ConnectionHandler.getStatement();
  String sql=String.format(NOT_ADDRESSESED_GAMMAS,tableName);
  try {
    chStmt.runPreparedQuery(sql);
    while (chStmt.next()) {
      notAddressedGammas.add(new Object[]{chStmt.getLong(""String_Node_Str"")});
      log(String.valueOf(chStmt.getLong(""String_Node_Str"")));
    }
  }
  finally {
    chStmt.close();
  }
  sql=String.format(DELETE_GAMMAS,tableName);
  getDatabaseService().runBatchUpdate(sql,notAddressedGammas);
}","private void processNotAddressedGammas(OseeConnection connection,String tableName) throws OseeCoreException {
  List<Object[]> notAddressedGammas=new LinkedList<Object[]>();
  IOseeStatement chStmt=getDatabaseService().getStatement(connection);
  try {
    String sql=String.format(NOT_ADDRESSESED_GAMMAS,tableName);
    chStmt.runPreparedQuery(sql);
    while (chStmt.next()) {
      notAddressedGammas.add(new Object[]{chStmt.getLong(""String_Node_Str"")});
      log(String.valueOf(chStmt.getLong(""String_Node_Str"")));
    }
  }
  finally {
    chStmt.close();
  }
  if (!notAddressedGammas.isEmpty()) {
    getDatabaseService().runBatchUpdate(connection,String.format(DELETE_GAMMAS,tableName),notAddressedGammas);
  }
}",0.7831858407079646
97450,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Conditions.checkNotNull(artifactData,""String_Node_Str"");
  Artifact artifact=artifactData.getArtifact();
  Conditions.checkNotNull(artifactData,""String_Node_Str"");
  if (artifact.isDeleted()) {
    throw new OseeStateException(""String_Node_Str"",artifact.getName());
  }
 else {
    if (artifact.isHistorical()) {
      artifactData.setArtifact(ArtifactQuery.getArtifactFromId(artifact.getArtId(),artifact.getBranch(),DeletionFlag.EXCLUDE_DELETED));
    }
    Artifact root=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(artifact.getBranch());
    Artifact artifactRoot=artifact.getArtifactRoot();
    if (!root.equals(artifactRoot)) {
      String artifactRootName=artifactRoot != null ? artifactRoot.getName() : artifact.getName();
      throw new OseeStateException(""String_Node_Str"",artifact.getName(),artifactRootName);
    }
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Conditions.checkNotNull(artifactData,""String_Node_Str"");
  Artifact artifact=artifactData.getArtifact();
  Conditions.checkNotNull(artifact,""String_Node_Str"");
  if (artifact.isDeleted()) {
    throw new OseeStateException(""String_Node_Str"",artifact.getName());
  }
 else {
    if (artifact.isHistorical()) {
      artifactData.setArtifact(ArtifactQuery.getArtifactFromId(artifact.getArtId(),artifact.getBranch(),DeletionFlag.EXCLUDE_DELETED));
    }
    if (artifact.isNotRootedInDefaultRoot()) {
      throw new OseeStateException(""String_Node_Str"",artifact.getName());
    }
  }
}",0.7033523086654017
97451,"@Override public StyledString getStyledText(Object element){
  if (element instanceof AttributeLineElement) {
    return getLineElementLabel((AttributeLineElement)element);
  }
  if (!(element instanceof Artifact)) {
    return new StyledString(String.format(""String_Node_Str"",element.getClass(),element));
  }
  Artifact artifact=(Artifact)element;
  String name=artifact.getName();
  int matchCount=getMatchCount(artifact);
  if (matchCount > 0) {
    StyledString artifactString=getColoredLabelWithCounts(artifact,matchCount,new StyledString(name));
    return getArtifactText(artifactDecorator,artifact,artifactString);
  }
 else {
    return new StyledString(name,StyledString.DECORATIONS_STYLER);
  }
}","@Override public StyledString getStyledText(Object element){
  if (element instanceof FakeArtifactParent) {
    return new StyledString(((FakeArtifactParent)element).getName());
  }
  if (element instanceof AttributeLineElement) {
    return getLineElementLabel((AttributeLineElement)element);
  }
  if (!(element instanceof Artifact)) {
    return new StyledString(String.format(""String_Node_Str"",element.getClass(),element));
  }
  Artifact artifact=(Artifact)element;
  String name=artifact.getName();
  int matchCount=getMatchCount(artifact);
  if (matchCount > 0) {
    StyledString artifactString=getColoredLabelWithCounts(artifact,matchCount,new StyledString(name));
    return getArtifactText(artifactDecorator,artifact,artifactString);
  }
 else {
    return new StyledString(name,StyledString.DECORATIONS_STYLER);
  }
}",0.9212752114508784
97452,"@Override public Image getImage(Object element){
  Image toReturn=null;
  if (element instanceof AttributeLineElement) {
    toReturn=ImageManager.getImage(FrameworkImage.LINE_MATCH);
  }
 else   if (element instanceof Artifact) {
    Image artImage=ArtifactImageManager.getImage((Artifact)element);
    int matchCount=getMatchCount(element);
    if (matchCount > 0) {
      toReturn=artImage;
    }
 else {
      Image disabledImage=disabledImageMap.get(artImage);
      if (disabledImage == null) {
        disabledImage=new Image(artImage.getDevice(),artImage,SWT.IMAGE_DISABLE);
        disabledImageMap.put(artImage,disabledImage);
      }
      toReturn=disabledImage;
    }
  }
  return toReturn;
}","@Override public Image getImage(Object element){
  Image toReturn=null;
  if (element instanceof FakeArtifactParent) {
    toReturn=PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);
  }
 else   if (element instanceof AttributeLineElement) {
    toReturn=ImageManager.getImage(FrameworkImage.LINE_MATCH);
  }
 else   if (element instanceof Artifact) {
    Image artImage=ArtifactImageManager.getImage((Artifact)element);
    int matchCount=getMatchCount(element);
    if (matchCount > 0) {
      toReturn=artImage;
    }
 else {
      Image disabledImage=disabledImageMap.get(artImage);
      if (disabledImage == null) {
        disabledImage=new Image(artImage.getDevice(),artImage,SWT.IMAGE_DISABLE);
        disabledImageMap.put(artImage,disabledImage);
      }
      toReturn=disabledImage;
    }
  }
  return toReturn;
}",0.90153452685422
97453,"private int getElementLimit(){
  return fPage.getElementLimit().intValue();
}","private int getElementLimit(){
  return searchPage.getElementLimit().intValue();
}",0.9559748427672956
97454,"@Override public Object getParent(Object element){
  if (element instanceof AttributeLineElement) {
    return ((AttributeLineElement)element).getParent();
  }
  if (element instanceof AttributeMatch) {
    AttributeMatch match=(AttributeMatch)element;
    return match.getArtifact();
  }
  if (element instanceof Artifact) {
    Artifact resource=(Artifact)element;
    try {
      return resource.getParent();
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  return null;
}","@Override public Object getParent(Object element){
  Object toReturn=null;
  if (element instanceof AttributeLineElement) {
    toReturn=((AttributeLineElement)element).getParent();
  }
 else   if (element instanceof AttributeMatch) {
    AttributeMatch match=(AttributeMatch)element;
    toReturn=match.getArtifact();
  }
 else   if (element instanceof Artifact) {
    Artifact resource=(Artifact)element;
    try {
      toReturn=resource.getParent();
      if (toReturn == null && resource.isNotRootedInDefaultRoot()) {
        toReturn=orphanParent;
      }
    }
 catch (    MultipleArtifactsExist ex) {
      toReturn=multiParent;
    }
catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  return toReturn;
}",0.7848297213622291
97455,"private void removeFromSiblings(Object element,Object parent){
  Set<?> siblings=fChildrenMap.get(parent);
  if (siblings != null) {
    siblings.remove(element);
  }
}","private void removeFromSiblings(Object element,Object parent){
  Set<?> siblings=childrenMap.get(parent);
  if (siblings != null) {
    siblings.remove(element);
  }
}",0.991044776119403
97456,"@Override public void clear(){
  initialize(fResult);
  fTreeViewer.refresh();
}","@Override public void clear(){
  initialize(searchResult);
  treeViewer.refresh();
}",0.9390243902439024
97457,"private void insert(Object child,boolean refreshViewer){
  Object parent=getParent(child);
  while (parent != null) {
    if (insertChild(parent,child)) {
      if (refreshViewer) {
        fTreeViewer.add(parent,child);
      }
    }
 else {
      if (refreshViewer) {
        fTreeViewer.refresh(parent);
      }
      return;
    }
    child=parent;
    parent=getParent(child);
  }
  if (insertChild(fResult,child)) {
    if (refreshViewer) {
      fTreeViewer.add(fResult,child);
    }
  }
}","private void insert(Object child,boolean refreshViewer){
  Object parent=getParent(child);
  while (parent != null) {
    if (insertChild(parent,child)) {
      if (refreshViewer) {
        treeViewer.add(parent,child);
      }
    }
 else {
      if (refreshViewer) {
        treeViewer.refresh(parent);
      }
      return;
    }
    child=parent;
    parent=getParent(child);
  }
  if (insertChild(searchResult,child)) {
    if (refreshViewer) {
      treeViewer.add(searchResult,child);
    }
  }
}",0.9769769769769768
97458,"/** 
 * returns true if the child already was a child of parent.
 * @return Returns <code>true</code> if the child was added
 */
@SuppressWarnings(""String_Node_Str"") private boolean insertChild(Object parent,Object child){
  Set<Object> children=fChildrenMap.get(parent);
  if (children == null) {
    children=new HashSet<Object>();
    fChildrenMap.put(parent,children);
  }
  return children.add(child);
}","/** 
 * returns true if the child already was a child of parent.
 * @return Returns <code>true</code> if the child was added
 */
@SuppressWarnings(""String_Node_Str"") private boolean insertChild(Object parent,Object child){
  Set<Object> children=childrenMap.get(parent);
  if (children == null) {
    children=new HashSet<Object>();
    childrenMap.put(parent,children);
  }
  return children.add(child);
}",0.9926289926289926
97459,"private void remove(Object element,boolean refreshViewer){
  if (hasChildren(element)) {
    if (refreshViewer) {
      fTreeViewer.refresh(element);
    }
  }
 else {
    if (!hasMatches(element)) {
      fChildrenMap.remove(element);
      Object parent=getParent(element);
      if (parent != null) {
        removeFromSiblings(element,parent);
        remove(parent,refreshViewer);
      }
 else {
        removeFromSiblings(element,fResult);
        if (refreshViewer) {
          fTreeViewer.refresh();
        }
      }
    }
 else {
      if (refreshViewer) {
        fTreeViewer.refresh(element);
      }
    }
  }
}","private void remove(Object element,boolean refreshViewer){
  if (hasChildren(element)) {
    if (refreshViewer) {
      treeViewer.refresh(element);
    }
  }
 else {
    if (!hasMatches(element)) {
      childrenMap.remove(element);
      Object parent=getParent(element);
      if (parent != null) {
        removeFromSiblings(element,parent);
        remove(parent,refreshViewer);
      }
 else {
        removeFromSiblings(element,searchResult);
        if (refreshViewer) {
          treeViewer.refresh();
        }
      }
    }
 else {
      if (refreshViewer) {
        treeViewer.refresh(element);
      }
    }
  }
}",0.9848121502797762
97460,"ArtifactTreeContentProvider(ArtifactSearchPage page,AbstractTreeViewer viewer){
  fPage=page;
  fTreeViewer=viewer;
}","ArtifactTreeContentProvider(ArtifactSearchPage page,AbstractTreeViewer viewer){
  searchPage=page;
  treeViewer=viewer;
}",0.957983193277311
97461,"@Override public synchronized void elementsChanged(Object[] updatedElements){
  for (int i=0; i < updatedElements.length; i++) {
    if (!(updatedElements[i] instanceof AttributeLineElement)) {
      if (fResult.getMatchCount(updatedElements[i]) > 0) {
        insert(updatedElements[i],true);
      }
 else {
        remove(updatedElements[i],true);
      }
    }
 else {
      AttributeLineElement lineElement=(AttributeLineElement)updatedElements[i];
      int nMatches=lineElement.getNumberOfMatches(fResult);
      if (nMatches > 0) {
        if (hasChild(lineElement.getParent(),lineElement)) {
          fTreeViewer.update(new Object[]{lineElement,lineElement.getParent()},null);
        }
 else {
          insert(lineElement,true);
        }
      }
 else {
        remove(lineElement,true);
      }
    }
  }
}","@Override public synchronized void elementsChanged(Object[] updatedElements){
  for (int i=0; i < updatedElements.length; i++) {
    if (!(updatedElements[i] instanceof AttributeLineElement)) {
      if (searchResult.getMatchCount(updatedElements[i]) > 0) {
        insert(updatedElements[i],true);
      }
 else {
        remove(updatedElements[i],true);
      }
    }
 else {
      AttributeLineElement lineElement=(AttributeLineElement)updatedElements[i];
      int nMatches=lineElement.getNumberOfMatches(searchResult);
      if (nMatches > 0) {
        if (hasChild(lineElement.getParent(),lineElement)) {
          treeViewer.update(new Object[]{lineElement,lineElement.getParent()},null);
        }
 else {
          insert(lineElement,true);
        }
      }
 else {
        remove(lineElement,true);
      }
    }
  }
}",0.9896907216494846
97462,"@Override public Object[] getChildren(Object parentElement){
  Set<?> children=fChildrenMap.get(parentElement);
  if (children == null) {
    return EMPTY_ARR;
  }
  return children.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  Set<?> children=childrenMap.get(parentElement);
  if (children == null) {
    return EMPTY_ARR;
  }
  return children.toArray();
}",0.992248062015504
97463,"private boolean hasChild(Object parent,Object child){
  Set<?> children=fChildrenMap.get(parent);
  return children != null && children.contains(child);
}","private boolean hasChild(Object parent,Object child){
  Set<?> children=childrenMap.get(parent);
  return children != null && children.contains(child);
}",0.990228013029316
97464,"@SuppressWarnings(""String_Node_Str"") private synchronized void initialize(AbstractArtifactSearchResult result){
  fResult=result;
  fChildrenMap=new HashMap<Object,Set>();
  boolean showLineMatches=fResult.hasAttributeMatches();
  if (result != null) {
    Object[] elements=result.getElements();
    for (int i=0; i < elements.length; i++) {
      if (showLineMatches) {
        Match[] matches=result.getMatches(elements[i]);
        for (int j=0; j < matches.length; j++) {
          Match match=matches[j];
          if (match instanceof AttributeMatch) {
            insert(((AttributeMatch)match).getLineElement(),false);
          }
 else {
            insert(match.getElement(),false);
          }
        }
      }
 else {
        insert(elements[i],false);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private synchronized void initialize(AbstractArtifactSearchResult result){
  searchResult=result;
  childrenMap=new HashMap<Object,Set>();
  boolean showLineMatches=searchResult.hasAttributeMatches();
  if (result != null) {
    Object[] elements=result.getElements();
    for (int i=0; i < elements.length; i++) {
      if (showLineMatches) {
        Match[] matches=result.getMatches(elements[i]);
        for (int j=0; j < matches.length; j++) {
          Match match=matches[j];
          if (match instanceof AttributeMatch) {
            insert(((AttributeMatch)match).getLineElement(),false);
          }
 else {
            insert(match.getElement(),false);
          }
        }
      }
 else {
        insert(elements[i],false);
      }
    }
  }
}",0.989247311827957
97465,"private boolean hasMatches(Object element){
  if (element instanceof AttributeLineElement) {
    AttributeLineElement lineElement=(AttributeLineElement)element;
    return lineElement.getNumberOfMatches(fResult) > 0;
  }
  return fResult.getMatchCount(element) > 0;
}","private boolean hasMatches(Object element){
  if (element instanceof AttributeLineElement) {
    AttributeLineElement lineElement=(AttributeLineElement)element;
    return lineElement.getNumberOfMatches(searchResult) > 0;
  }
  return searchResult.getMatchCount(element) > 0;
}",0.9742647058823528
97466,"/** 
 * Process transition and persist changes to given skynet transaction
 * @return Result.isFalse if failure
 */
public void handleTransition(TransitionResults results){
  try {
    if (transaction == null) {
      transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),helper.getName());
    }
    for (    AbstractWorkflowArtifact awa : helper.getAwas()) {
      try {
        IAtsStateDefinition fromState=awa.getStateDefinition();
        IAtsStateDefinition toState=awa.getStateDefinitionByName(helper.getToStateName());
        if (!fromState.equals(toState)) {
          Date transitionDate=getTransitionOnDate();
          IAtsUser transitionUser=getTransitionAsUser();
          if (fromState.getStateType().isCancelledState()) {
            logWorkflowUnCancelledEvent(awa);
          }
 else           if (fromState.getStateType().isCompletedState()) {
            logWorkflowUnCompletedEvent(awa);
          }
          if (toState.getStateType().isCancelledState()) {
            logWorkflowCancelledEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else           if (toState.getStateType().isCompletedState()) {
            logWorkflowCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else {
            logStateCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
          logStateStartedEvent(awa,toState,transitionDate,transitionUser);
          List<? extends IAtsUser> updatedAssigees=getToAssignees(awa,toState);
          awa.getStateMgr().transitionHelper(updatedAssigees,fromState,toState,completedCancellationReason);
          if (awa.isValidationRequired() && awa.isTeamWorkflow()) {
            ValidateReviewManager.createValidateReview((TeamWorkFlowArtifact)awa,false,transitionDate,transitionUser,transaction);
          }
          awa.persist(transaction);
          awa.transitioned(fromState,toState,updatedAssigees,transaction);
          for (          ITransitionListener listener : TransitionListeners.getListeners()) {
            listener.transitioned(awa,fromState,toState,updatedAssigees,transaction);
          }
          if (toState.getStateType().isCompletedOrCancelledState()) {
            awa.clearImplementersCache();
          }
        }
      }
 catch (      Exception ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
      }
    }
  }
 catch (  Exception ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
}","/** 
 * Process transition and persist changes to given skynet transaction
 * @return Result.isFalse if failure
 */
public void handleTransition(TransitionResults results){
  try {
    if (transaction == null) {
      transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),helper.getName());
    }
    for (    AbstractWorkflowArtifact awa : helper.getAwas()) {
      try {
        IAtsStateDefinition fromState=awa.getStateDefinition();
        IAtsStateDefinition toState=awa.getStateDefinitionByName(helper.getToStateName());
        if (!fromState.equals(toState)) {
          Date transitionDate=getTransitionOnDate();
          IAtsUser transitionUser=getTransitionAsUser();
          if (fromState.getStateType().isCancelledState()) {
            logWorkflowUnCancelledEvent(awa,toState);
          }
 else           if (fromState.getStateType().isCompletedState()) {
            logWorkflowUnCompletedEvent(awa,toState);
          }
          if (toState.getStateType().isCancelledState()) {
            logWorkflowCancelledEvent(awa,fromState,toState,completedCancellationReason,transitionDate,transitionUser);
          }
 else           if (toState.getStateType().isCompletedState()) {
            logWorkflowCompletedEvent(awa,fromState,toState,completedCancellationReason,transitionDate,transitionUser);
          }
 else {
            logStateCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
          logStateStartedEvent(awa,toState,transitionDate,transitionUser);
          List<? extends IAtsUser> updatedAssigees=getToAssignees(awa,toState);
          awa.getStateMgr().transitionHelper(updatedAssigees,fromState,toState,completedCancellationReason);
          if (awa.isValidationRequired() && awa.isTeamWorkflow()) {
            ValidateReviewManager.createValidateReview((TeamWorkFlowArtifact)awa,false,transitionDate,transitionUser,transaction);
          }
          awa.persist(transaction);
          awa.transitioned(fromState,toState,updatedAssigees,transaction);
          for (          ITransitionListener listener : TransitionListeners.getListeners()) {
            listener.transitioned(awa,fromState,toState,updatedAssigees,transaction);
          }
          if (toState.getStateType().isCompletedOrCancelledState()) {
            awa.clearImplementersCache();
          }
        }
      }
 catch (      Exception ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
      }
    }
  }
 catch (  Exception ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
}",0.5817448680351907
97467,"public static void logWorkflowCancelledEvent(AbstractWorkflowArtifact awa,String fromStateName,String reason,Date cancelDate,IAtsUser cancelBy) throws OseeCoreException {
  awa.getLog().addLog(LogType.StateCancelled,fromStateName,reason,cancelDate,cancelBy);
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledBy,cancelBy.getUserId());
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledDate,cancelDate);
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledReason,reason);
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledFromState,fromStateName);
  }
}","public static void logWorkflowCancelledEvent(AbstractWorkflowArtifact awa,IAtsStateDefinition fromState,IAtsStateDefinition toState,String reason,Date cancelDate,IAtsUser cancelBy) throws OseeCoreException {
  awa.getLog().addLog(LogType.StateCancelled,fromState.getName(),reason,cancelDate,cancelBy);
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledBy,cancelBy.getUserId());
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledDate,cancelDate);
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledReason,reason);
    awa.setSoleAttributeValue(AtsAttributeTypes.CancelledFromState,fromState.getName());
  }
  validateUpdatePercentCompleteAttribute(awa,toState);
}",0.911976911976912
97468,"public static void logWorkflowUnCompletedEvent(AbstractWorkflowArtifact awa) throws OseeCoreException {
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.deleteSoleAttribute(AtsAttributeTypes.CompletedBy);
    awa.deleteSoleAttribute(AtsAttributeTypes.CompletedDate);
    awa.deleteSoleAttribute(AtsAttributeTypes.CompletedFromState);
  }
}","public static void logWorkflowUnCompletedEvent(AbstractWorkflowArtifact awa,IAtsStateDefinition toState) throws OseeCoreException {
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.deleteSoleAttribute(AtsAttributeTypes.CompletedBy);
    awa.deleteSoleAttribute(AtsAttributeTypes.CompletedDate);
    awa.deleteSoleAttribute(AtsAttributeTypes.CompletedFromState);
  }
  validateUpdatePercentCompleteAttribute(awa,toState);
}",0.8968944099378882
97469,"private void logWorkflowCompletedEvent(AbstractWorkflowArtifact awa,String fromStateName,String reason,Date cancelDate,IAtsUser cancelBy) throws OseeCoreException {
  awa.getLog().addLog(LogType.StateComplete,fromStateName,Strings.isValid(reason) ? reason : ""String_Node_Str"",cancelDate,cancelBy);
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.setSoleAttributeValue(AtsAttributeTypes.CompletedBy,cancelBy.getUserId());
    awa.setSoleAttributeValue(AtsAttributeTypes.CompletedDate,cancelDate);
    awa.setSoleAttributeValue(AtsAttributeTypes.CompletedFromState,fromStateName);
  }
}","private void logWorkflowCompletedEvent(AbstractWorkflowArtifact awa,IAtsStateDefinition fromState,IAtsStateDefinition toState,String reason,Date cancelDate,IAtsUser cancelBy) throws OseeCoreException {
  awa.getLog().addLog(LogType.StateComplete,fromState.getName(),Strings.isValid(reason) ? reason : ""String_Node_Str"",cancelDate,cancelBy);
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.setSoleAttributeValue(AtsAttributeTypes.CompletedBy,cancelBy.getUserId());
    awa.setSoleAttributeValue(AtsAttributeTypes.CompletedDate,cancelDate);
    awa.setSoleAttributeValue(AtsAttributeTypes.CompletedFromState,fromState.getName());
  }
  validateUpdatePercentCompleteAttribute(awa,toState);
}",0.8922610015174507
97470,"public static void logWorkflowUnCancelledEvent(AbstractWorkflowArtifact awa) throws OseeCoreException {
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledBy);
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledDate);
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledReason);
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledFromState);
  }
}","public static void logWorkflowUnCancelledEvent(AbstractWorkflowArtifact awa,IAtsStateDefinition toState) throws OseeCoreException {
  if (awa.isAttributeTypeValid(AtsAttributeTypes.CreatedBy)) {
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledBy);
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledDate);
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledReason);
    awa.deleteSoleAttribute(AtsAttributeTypes.CancelledFromState);
  }
  validateUpdatePercentCompleteAttribute(awa,toState);
}",0.9110396570203644
97471,"public static void testCompletedCancelledStateAttributesSet(Collection<Artifact> artifacts,SkynetTransaction transaction,HashCollection<String,String> testNameToResultsMap,CountingMap<String> testNameToTimeSpentMap){
  Date date=new Date();
  for (  Artifact artifact : artifacts) {
    try {
      if (artifact instanceof AbstractWorkflowArtifact) {
        AbstractWorkflowArtifact awa=(AbstractWorkflowArtifact)artifact;
        if (awa.isCompleted()) {
          IAtsStateDefinition stateDef=awa.getStateDefinition();
          if (stateDef.getStateType() != StateType.Completed) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",stateDef.getName(),XResultDataUI.getHyperlink(artifact)));
            if (stateDef.getStateType() == StateType.Working) {
              awa.setSoleAttributeFromString(AtsAttributeTypes.CurrentStateType,StateType.Working.name());
              TransitionManager.logWorkflowUnCompletedEvent(awa);
              TransitionManager.logWorkflowUnCancelledEvent(awa);
              awa.persist(transaction);
              testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else           if (awa.getCompletedBy() == null || awa.getCompletedDate() == null || !Strings.isValid(awa.getCompletedFromState())) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",awa.getArtifactTypeName(),XResultDataUI.getHyperlink(artifact)));
            fixCompletedByAttributes(transaction,awa,testNameToResultsMap);
          }
        }
        if (awa.isCancelled()) {
          IAtsStateDefinition stateDef=awa.getStateDefinition();
          if (stateDef.getStateType() != StateType.Cancelled) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",stateDef.getName(),XResultDataUI.getHyperlink(artifact)));
            testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (awa.getCancelledBy() == null || awa.getCancelledDate() == null || !Strings.isValid(awa.getCancelledFromState())) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",XResultDataUI.getHyperlink(artifact)));
            fixCancelledByAttributes(transaction,awa,testNameToResultsMap);
          }
        }
      }
    }
 catch (    Exception ex) {
      testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"" + artifact.toStringWithId() + ""String_Node_Str""+ ex.getLocalizedMessage());
    }
  }
  logTestTimeSpent(date,""String_Node_Str"",testNameToTimeSpentMap);
}","public static void testCompletedCancelledStateAttributesSet(Collection<Artifact> artifacts,SkynetTransaction transaction,HashCollection<String,String> testNameToResultsMap,CountingMap<String> testNameToTimeSpentMap){
  Date date=new Date();
  for (  Artifact artifact : artifacts) {
    try {
      if (artifact instanceof AbstractWorkflowArtifact) {
        AbstractWorkflowArtifact awa=(AbstractWorkflowArtifact)artifact;
        if (awa.isCompleted()) {
          IAtsStateDefinition stateDef=awa.getStateDefinition();
          if (stateDef.getStateType() != StateType.Completed) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",stateDef.getName(),XResultDataUI.getHyperlink(artifact)));
            if (stateDef.getStateType() == StateType.Working) {
              awa.setSoleAttributeFromString(AtsAttributeTypes.CurrentStateType,StateType.Working.name());
              TransitionManager.logWorkflowUnCompletedEvent(awa,stateDef);
              TransitionManager.logWorkflowUnCancelledEvent(awa,stateDef);
              awa.persist(transaction);
              testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else           if (awa.getCompletedBy() == null || awa.getCompletedDate() == null || !Strings.isValid(awa.getCompletedFromState())) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",awa.getArtifactTypeName(),XResultDataUI.getHyperlink(artifact)));
            fixCompletedByAttributes(transaction,awa,testNameToResultsMap);
          }
        }
        if (awa.isCancelled()) {
          IAtsStateDefinition stateDef=awa.getStateDefinition();
          if (stateDef.getStateType() != StateType.Cancelled) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",stateDef.getName(),XResultDataUI.getHyperlink(artifact)));
            testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (awa.getCancelledBy() == null || awa.getCancelledDate() == null || !Strings.isValid(awa.getCancelledFromState())) {
            testNameToResultsMap.put(""String_Node_Str"",String.format(""String_Node_Str"",XResultDataUI.getHyperlink(artifact)));
            fixCancelledByAttributes(transaction,awa,testNameToResultsMap);
          }
        }
      }
    }
 catch (    Exception ex) {
      testNameToResultsMap.put(""String_Node_Str"",""String_Node_Str"" + artifact.toStringWithId() + ""String_Node_Str""+ ex.getLocalizedMessage());
    }
  }
  logTestTimeSpent(date,""String_Node_Str"",testNameToTimeSpentMap);
}",0.9966542750929368
97472,"public boolean isEmpty(){
  return clipboard.getContents(ArtifactTransfer.getInstance()) == null;
}","public boolean isEmpty(){
  boolean theReturn=true;
  if (clipboard.isDisposed()) {
    theReturn=true;
  }
 else {
    theReturn=clipboard.getContents(ArtifactTransfer.getInstance()) == null;
  }
  return theReturn;
}",0.580441640378549
97473,"private void performCopy(){
  if (clipboard == null) {
    this.clipboard=new Clipboard(null);
  }
  String detailsStr=new CopyActionDetails(awa).getDetailsString();
  clipboard.setContents(new Object[]{detailsStr},new Transfer[]{TextTransfer.getInstance()});
}","private void performCopy(){
  Clipboard clipboard=new Clipboard(null);
  try {
    String detailsStr=new CopyActionDetails(awa).getDetailsString();
    clipboard.setContents(new Object[]{detailsStr},new Transfer[]{TextTransfer.getInstance()});
  }
  finally {
    clipboard.dispose();
  }
}",0.6279491833030852
97474,"@Override public void dispose(){
  OseeEventManager.removeListener(this);
  ArtifactExplorerEventManager.remove(this);
  super.dispose();
}","@Override public void dispose(){
  OseeEventManager.removeListener(this);
  ArtifactExplorerEventManager.remove(this);
  artifactClipboard.dispose();
  super.dispose();
}",0.8996763754045307
97475,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  if (HandlerUtil.getActivePartChecked(event) instanceof ViewPart) {
    ViewPart view=(ViewPart)HandlerUtil.getActivePartChecked(event);
    IWorkbenchPartSite myIWorkbenchPartSite=view.getSite();
    ISelectionProvider selectionProvider=myIWorkbenchPartSite.getSelectionProvider();
    if (selectionProvider != null && selectionProvider.getSelection() instanceof IStructuredSelection) {
      IStructuredSelection selection=(IStructuredSelection)selectionProvider.getSelection();
      List<String> names=new LinkedList<String>();
      List<Artifact> artifacts=new LinkedList<Artifact>();
      ArtifactClipboard clipboard=new ArtifactClipboard(view.getSite().getId());
      Iterator<?> iterator=selection.iterator();
      Object selectionObject=null;
      while (iterator.hasNext()) {
        Object object=iterator.next();
        if (object instanceof IAdaptable) {
          selectionObject=((IAdaptable)object).getAdapter(Branch.class);
          if (selectionObject == null) {
            selectionObject=((IAdaptable)object).getAdapter(Artifact.class);
          }
        }
 else         if (object instanceof Match) {
          selectionObject=((Match)object).getElement();
        }
        if (selectionObject instanceof IOseeBranch) {
          names.add(((IOseeBranch)selectionObject).getName());
        }
 else         if (selectionObject instanceof Artifact) {
          Artifact artifact=(Artifact)selectionObject;
          names.add(artifact.getName());
          artifacts.add(artifact);
        }
      }
      if (!names.isEmpty() && artifacts.isEmpty()) {
        clipboard.setTextToClipboard(names);
      }
 else       if (!names.isEmpty() && !artifacts.isEmpty()) {
        try {
          clipboard.setArtifactsToClipboard(ServiceUtil.getAccessPolicy(),artifacts);
        }
 catch (        OseeCoreException ex) {
          throw new ExecutionException(ex.getLocalizedMessage());
        }
      }
    }
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  if (HandlerUtil.getActivePartChecked(event) instanceof ViewPart) {
    ViewPart view=(ViewPart)HandlerUtil.getActivePartChecked(event);
    IWorkbenchPartSite myIWorkbenchPartSite=view.getSite();
    ISelectionProvider selectionProvider=myIWorkbenchPartSite.getSelectionProvider();
    if (selectionProvider != null && selectionProvider.getSelection() instanceof IStructuredSelection) {
      IStructuredSelection selection=(IStructuredSelection)selectionProvider.getSelection();
      List<String> names=new LinkedList<String>();
      List<Artifact> artifacts=new LinkedList<Artifact>();
      ArtifactClipboard clipboard=new ArtifactClipboard(view.getSite().getId());
      Iterator<?> iterator=selection.iterator();
      Object selectionObject=null;
      try {
        while (iterator.hasNext()) {
          Object object=iterator.next();
          if (object instanceof IAdaptable) {
            selectionObject=((IAdaptable)object).getAdapter(Branch.class);
            if (selectionObject == null) {
              selectionObject=((IAdaptable)object).getAdapter(Artifact.class);
            }
          }
 else           if (object instanceof Match) {
            selectionObject=((Match)object).getElement();
          }
          if (selectionObject instanceof IOseeBranch) {
            names.add(((IOseeBranch)selectionObject).getName());
          }
 else           if (selectionObject instanceof Artifact) {
            Artifact artifact=(Artifact)selectionObject;
            names.add(artifact.getName());
            artifacts.add(artifact);
          }
        }
        if (!names.isEmpty() && artifacts.isEmpty()) {
          clipboard.setTextToClipboard(names);
        }
 else         if (!names.isEmpty() && !artifacts.isEmpty()) {
          try {
            clipboard.setArtifactsToClipboard(ServiceUtil.getAccessPolicy(),artifacts);
          }
 catch (          OseeCoreException ex) {
            clipboard.dispose();
            throw new ExecutionException(ex.getLocalizedMessage());
          }
        }
      }
  finally {
        clipboard.dispose();
      }
    }
  }
  return null;
}",0.9613572101790764
97476,"@After public void tearDown() throws Exception {
  if (artifactWithSpecialAttr != null) {
    artifactWithSpecialAttr.deleteAndPersist();
  }
}","@After public void tearDown() throws Exception {
  if (artifactWithSpecialAttr != null) {
    artifactWithSpecialAttr.deleteAndPersist();
  }
  for (  Artifact art : ArtifactQuery.getArtifactListFromTypeAndName(CoreArtifactTypes.GeneralData,ArtifactTest.class.getSimpleName(),BranchManager.getCommonBranch())) {
    art.deleteAndPersist();
  }
}",0.5860655737704918
97477,"@Override public int hashCode(){
  int hashCode=11;
  hashCode=hashCode * 37 + getGuid().hashCode();
  hashCode=hashCode * 37 + getBranchGuid().hashCode();
  return hashCode;
}","@Override public int hashCode(){
  return super.hashCode();
}",0.4388185654008439
97478,"@Override public boolean equals(Object obj){
  boolean equals=super.equals(obj);
  if (!equals && obj instanceof IBasicGuidArtifact) {
    IBasicGuidArtifact other=(IBasicGuidArtifact)obj;
    if (artTypeGuid == null || other.getArtTypeGuid() == null) {
      equals=false;
    }
    equals=artTypeGuid.equals(other.getArtTypeGuid());
    if (equals && branchGuid == null || other.getBranchGuid() == null) {
      equals=false;
    }
 else     if (equals) {
      equals=branchGuid.equals(other.getBranchGuid());
    }
    if (equals && artGuid == null || other.getGuid() == null) {
      equals=false;
    }
 else     if (equals) {
      equals=artGuid.equals(other.getGuid());
    }
  }
  return equals;
}","/** 
 * Note: DefaultBasicGuidArtifact class does not implement the hashCode, but instead uses the one implemented by Identity. It can not use the branch guid due to the need for IArtifactTokens to match Artifact instances. In addition, the event system requires that the DefaultBasicGuidArtifact and Artifact hashcode matches.
 */
@Override public boolean equals(Object obj){
  boolean equals=super.equals(obj);
  if (!equals && obj instanceof IBasicGuidArtifact) {
    IBasicGuidArtifact other=(IBasicGuidArtifact)obj;
    if (artTypeGuid == null || other.getArtTypeGuid() == null) {
      equals=false;
    }
    equals=artTypeGuid.equals(other.getArtTypeGuid());
    if (equals && branchGuid == null || other.getBranchGuid() == null) {
      equals=false;
    }
 else     if (equals) {
      equals=branchGuid.equals(other.getBranchGuid());
    }
    if (equals && artGuid == null || other.getGuid() == null) {
      equals=false;
    }
 else     if (equals) {
      equals=artGuid.equals(other.getGuid());
    }
  }
  return equals;
}",0.8098510882016037
97479,"/** 
 * @param obj the reference object with which to compare.
 * @return <code>true</code> if this artifact has the same GUID and branch <code>false</code> otherwise.
 */
@Override public final boolean equals(Object obj){
  if (obj instanceof IBasicGuidArtifact) {
    IBasicGuidArtifact other=(IBasicGuidArtifact)obj;
    boolean result=getGuid().equals(other.getGuid());
    if (result) {
      if (getBranchGuid() != null && other.getBranchGuid() != null) {
        result=getBranchGuid().equals(other.getBranchGuid());
      }
    }
    return result;
  }
  if (obj instanceof IArtifact) {
    IArtifact other=(IArtifact)obj;
    boolean result=getGuid().equals(other.getGuid());
    if (result) {
      if (getBranch() != null && other.getBranch() != null) {
        result=getBranch().equals(other.getBranch());
      }
 else {
        result=getBranch() == null && other.getBranch() == null;
      }
    }
    return result;
  }
  if (obj instanceof IArtifactToken) {
    IArtifactToken token=(IArtifactToken)obj;
    return getGuid().equals(token.getGuid());
  }
  return false;
}","/** 
 * Note: Artifact class does not implement the hashCode, but instead uses the one implemented by Identity. It can not use the branch guid due to the need for IArtifactTokens to match Artifact instances. In addition, the event system requires that the DefaultBasicGuidArtifact and Artifact hashcode matches.
 * @param obj the reference object with which to compare.
 * @return <code>true</code> if this artifact has the same GUID and branch <code>false</code> otherwise.
 */
@Override public final boolean equals(Object obj){
  if (obj instanceof IBasicGuidArtifact) {
    IBasicGuidArtifact other=(IBasicGuidArtifact)obj;
    boolean result=getGuid().equals(other.getGuid());
    if (result) {
      if (getBranchGuid() != null && other.getBranchGuid() != null) {
        result=getBranchGuid().equals(other.getBranchGuid());
      }
    }
    return result;
  }
  if (obj instanceof IArtifact) {
    IArtifact other=(IArtifact)obj;
    boolean result=getGuid().equals(other.getGuid());
    if (result) {
      if (getBranch() != null && other.getBranch() != null) {
        result=getBranch().equals(other.getBranch());
      }
 else {
        result=getBranch() == null && other.getBranch() == null;
      }
    }
    return result;
  }
  if (obj instanceof IArtifactToken) {
    IArtifactToken token=(IArtifactToken)obj;
    return getGuid().equals(token.getGuid());
  }
  return false;
}",0.8764587525150905
97480,"@Override public Collection<Integer> getAllQueryIds(OseeConnection connection,JoinItem joinItem) throws OseeCoreException {
  Collection<Integer> queryIds=new ArrayList<Integer>();
  IOseeStatement chStmt=databaseService.getStatement();
  try {
    String query=String.format(SELECT_QUERY_IDS,joinItem.getJoinTableName());
    chStmt.runPreparedQuery(query);
    while (chStmt.next()) {
      queryIds.add(chStmt.getInt(""String_Node_Str""));
    }
  }
  finally {
    chStmt.close();
  }
  return queryIds;
}","@Override public Collection<Integer> getAllQueryIds(OseeConnection connection,JoinItem joinItem) throws OseeCoreException {
  Collection<Integer> queryIds=new ArrayList<Integer>();
  IOseeStatement chStmt=databaseService.getStatement(connection);
  try {
    String query=String.format(SELECT_QUERY_IDS,joinItem.getJoinTableName());
    chStmt.runPreparedQuery(query);
    while (chStmt.next()) {
      queryIds.add(chStmt.getInt(""String_Node_Str""));
    }
  }
  finally {
    chStmt.close();
  }
  return queryIds;
}",0.990234375
97481,"@Override protected void handleTxFinally() throws OseeCoreException {
  if (success) {
    if (mergeBranch != null) {
      getDatabaseService().runPreparedUpdate(connection,UPDATE_CONFLICT_STATUS,ConflictStatus.COMMITTED.getValue(),ConflictStatus.RESOLVED.getValue(),mergeBranch.getId());
    }
  }
}","@Override protected void handleTxFinally() throws OseeCoreException {
  if (success) {
    if (mergeBranch != null) {
      getDatabaseService().runPreparedUpdate(UPDATE_CONFLICT_STATUS,ConflictStatus.COMMITTED.getValue(),ConflictStatus.RESOLVED.getValue(),mergeBranch.getId());
    }
  }
}",0.9813874788494078
97482,"private void loadByItemId(Collection<ChangeItem> changeData,int txJoinId,ChangeItemFactory factory) throws OseeCoreException {
  HashMap<Integer,ChangeItem> changesByItemId=new HashMap<Integer,ChangeItem>();
  IdJoinQuery idJoin=JoinUtility.createIdJoinQuery();
  changeItemLoader.loadItemIdsBasedOnGammas(factory,txJoinId,changesByItemId,idJoin);
  idJoin.store();
  if (hasMergeBranch()) {
    loadCurrentData(factory.getItemTableName(),factory.getItemIdColumnName(),idJoin,changesByItemId,mergeTransaction);
  }
  loadCurrentData(factory.getItemTableName(),factory.getItemIdColumnName(),idJoin,changesByItemId,getCompareBranchHeadTx());
  loadNonCurrentSourceData(factory.getItemTableName(),factory.getItemIdColumnName(),idJoin,changesByItemId,factory.getItemValueColumnName());
  idJoin.delete();
  changeData.addAll(changesByItemId.values());
}","private void loadByItemId(Collection<ChangeItem> changeData,int txJoinId,ChangeItemFactory factory) throws OseeCoreException {
  HashMap<Integer,ChangeItem> changesByItemId=new HashMap<Integer,ChangeItem>();
  IdJoinQuery idJoin=JoinUtility.createIdJoinQuery();
  try {
    changeItemLoader.loadItemIdsBasedOnGammas(factory,txJoinId,changesByItemId,idJoin);
    idJoin.store();
    if (hasMergeBranch()) {
      loadCurrentData(factory.getItemTableName(),factory.getItemIdColumnName(),idJoin,changesByItemId,mergeTransaction);
    }
    loadCurrentData(factory.getItemTableName(),factory.getItemIdColumnName(),idJoin,changesByItemId,getCompareBranchHeadTx());
    loadNonCurrentSourceData(factory.getItemTableName(),factory.getItemIdColumnName(),idJoin,changesByItemId,factory.getItemValueColumnName());
    changeData.addAll(changesByItemId.values());
  }
  finally {
    idJoin.delete();
  }
}",0.9094036697247706
97483,"@BeforeClass @AfterClass public static void cleanup() throws OseeCoreException {
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranchToken(),VersionArtifactStoreTest.class.getSimpleName() + ""String_Node_Str"");
  for (  String name : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    for (    Artifact art : ArtifactQuery.getArtifactListFromTypeAndName(AtsArtifactTypes.Version,name,AtsUtilCore.getAtsBranchToken())) {
      art.deleteAndPersist(transaction);
    }
  }
  transaction.execute();
}","@BeforeClass @AfterClass public static void cleanup() throws OseeCoreException {
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranchToken(),VersionArtifactStoreTest.class.getSimpleName() + ""String_Node_Str"");
  AtsConfigCache instance=AtsConfigCache.instance;
  for (  String name : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    for (    Artifact art : ArtifactQuery.getArtifactListFromTypeAndName(AtsArtifactTypes.Version,name,AtsUtilCore.getAtsBranchToken())) {
      art.deleteAndPersist(transaction);
      IAtsConfigObject soleByGuid=instance.getSoleByGuid(art.getGuid());
      instance.decache(soleByGuid);
    }
  }
  transaction.execute();
}",0.8753894080996885
97484,"@After public void cleanup() throws Exception {
  if (BranchManager.branchExists(workingBranch)) {
    BranchManager.purgeBranch(workingBranch);
  }
  Operations.executeWorkAndCheckStatus(new PurgeUnusedBackingDataAndTransactions(NullOperationLogger.getSingleton()));
}","@After public void cleanup() throws Exception {
  if (BranchManager.branchExists(workingBranch)) {
    BranchManager.purgeBranch(workingBranch);
  }
}",0.7159904534606205
97485,"@Ignore @Test public void testPurge() throws Exception {
  Operations.executeWorkAndCheckStatus(new PurgeUnusedBackingDataAndTransactions(NullOperationLogger.getSingleton()));
  Map<String,Integer> initialRowCount=TestUtil.getTableRowCounts(TABLES);
  Collection<Artifact> softArts=TestUtil.createSimpleArtifacts(CoreArtifactTypes.SoftwareRequirement,10,method.getQualifiedTestName(),workingBranch);
  Artifacts.persistInTransaction(method.getQualifiedTestName(),softArts);
  for (  Artifact softArt : softArts) {
    softArt.addAttribute(CoreAttributeTypes.StaticId,method.getQualifiedTestName());
    softArt.persist(method.getQualifiedTestName());
  }
  Asserts.assertThatIncreased(initialRowCount,TestUtil.getTableRowCounts(TABLES));
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(softArts));
  Asserts.assertThatEquals(initialRowCount,TestUtil.getTableRowCounts(TABLES));
}","@Ignore @Test public void testPurge() throws Exception {
  Map<String,Integer> initialRowCount=TestUtil.getTableRowCounts(TABLES);
  Collection<Artifact> softArts=TestUtil.createSimpleArtifacts(CoreArtifactTypes.SoftwareRequirement,10,method.getQualifiedTestName(),workingBranch);
  Artifacts.persistInTransaction(method.getQualifiedTestName(),softArts);
  for (  Artifact softArt : softArts) {
    softArt.addAttribute(CoreAttributeTypes.StaticId,method.getQualifiedTestName());
    softArt.persist(method.getQualifiedTestName());
  }
  Asserts.assertThatIncreased(initialRowCount,TestUtil.getTableRowCounts(TABLES));
  Operations.executeWorkAndCheckStatus(new PurgeArtifacts(softArts));
  Asserts.assertThatEquals(initialRowCount,TestUtil.getTableRowCounts(TABLES));
}",0.9282700421940928
97486,"@After public void tearDown() throws Exception {
  if (BranchManager.branchExists(branch)) {
    BranchManager.purgeBranch(branch);
  }
  Operations.executeWorkAndCheckStatus(new PurgeUnusedBackingDataAndTransactions(NullOperationLogger.getSingleton()));
}","@After public void tearDown() throws Exception {
  if (BranchManager.branchExists(branch)) {
    BranchManager.purgeBranch(branch);
  }
}",0.6972010178117048
97487,"public TestPrompt(String prompt,PromptResponseType type){
  super();
  this.prompt=prompt;
  this.waitForResponse=type == PromptResponseType.SCRIPT_PAUSE || type == PromptResponseType.PASS_FAIL || type == PromptResponseType.SCRIPT_STEP || type == PromptResponseType.USER_INPUT ? true : false;
  this.ofpStep=type == PromptResponseType.SCRIPT_STEP ? true : false;
  this.type=type;
}","public TestPrompt(String prompt,PromptResponseType type){
  super();
  this.prompt=XmlSupport.convertNonPrintableCharacers(prompt);
  this.waitForResponse=type == PromptResponseType.SCRIPT_PAUSE || type == PromptResponseType.PASS_FAIL || type == PromptResponseType.SCRIPT_STEP || type == PromptResponseType.USER_INPUT ? true : false;
  this.ofpStep=type == PromptResponseType.SCRIPT_STEP ? true : false;
  this.type=type;
}",0.9341614906832298
97488,"private void importRequirements(IOseeBranch branch,String rootArtifactName,IArtifactType requirementType,String filename) throws Exception {
  if (DEBUG) {
    OseeLog.logf(Activator.class,Level.INFO,""String_Node_Str"",rootArtifactName,branch);
  }
  Artifact systemReq=ArtifactQuery.getArtifactFromTypeAndName(CoreArtifactTypes.Folder,rootArtifactName,branch);
  File file=Activator.getInstance().getPluginFile(filename);
  IArtifactImportResolver artifactResolver=new NewArtifactImportResolver(requirementType,CoreArtifactTypes.Heading);
  IArtifactExtractor extractor=new WordOutlineExtractor();
  extractor.setDelegate(new WordOutlineExtractorDelegate());
  ArtifactImportOperationParameter importOptions=new ArtifactImportOperationParameter();
  importOptions.setSourceFile(file);
  importOptions.setDestinationArtifact(systemReq);
  importOptions.setExtractor(extractor);
  importOptions.setResolver(artifactResolver);
  IOperation operation=ArtifactImportOperationFactory.completeOperation(importOptions);
  Operations.executeWorkAndCheckStatus(operation);
  if (systemReq.getChildren().isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void importRequirements(IOseeBranch branch,IArtifactType requirementType,String folderName,String filename) throws Exception {
  if (DEBUG) {
    OseeLog.logf(Activator.class,Level.INFO,""String_Node_Str"",folderName,branch);
  }
  Artifact systemReq=ArtifactQuery.getArtifactFromTypeAndName(CoreArtifactTypes.Folder,folderName,branch);
  File file=Activator.getInstance().getPluginFile(filename);
  IArtifactImportResolver artifactResolver=new NewArtifactImportResolver(requirementType,CoreArtifactTypes.Heading);
  IArtifactExtractor extractor=new WordOutlineExtractor();
  extractor.setDelegate(new WordOutlineExtractorDelegate());
  ArtifactImportOperationParameter importOptions=new ArtifactImportOperationParameter();
  importOptions.setSourceFile(file);
  importOptions.setDestinationArtifact(systemReq);
  importOptions.setExtractor(extractor);
  importOptions.setResolver(artifactResolver);
  IOperation operation=ArtifactImportOperationFactory.completeOperation(importOptions);
  Operations.executeWorkAndCheckStatus(operation);
  if (systemReq.getChildren().isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.966321243523316
97489,"private void demoDbImportReqsTx(){
  try {
    importRequirements(DemoSawBuilds.SAW_Bld_1,CoreArtifactTypes.SoftwareRequirement.getName() + ""String_Node_Str"",CoreArtifactTypes.SoftwareRequirement,""String_Node_Str"");
    importRequirements(DemoSawBuilds.SAW_Bld_1,CoreArtifactTypes.SystemRequirementMSWord.getName() + ""String_Node_Str"",CoreArtifactTypes.SystemRequirementMSWord,""String_Node_Str"");
    importRequirements(DemoSawBuilds.SAW_Bld_1,CoreArtifactTypes.SubsystemRequirementMSWord.getName() + ""String_Node_Str"",CoreArtifactTypes.SubsystemRequirementMSWord,""String_Node_Str"");
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
}","private void demoDbImportReqsTx(){
  try {
    importRequirements(DemoSawBuilds.SAW_Bld_1,CoreArtifactTypes.SoftwareRequirement,""String_Node_Str"",""String_Node_Str"");
    importRequirements(DemoSawBuilds.SAW_Bld_1,CoreArtifactTypes.SystemRequirementMSWord,""String_Node_Str"",""String_Node_Str"");
    importRequirements(DemoSawBuilds.SAW_Bld_1,CoreArtifactTypes.SubsystemRequirementMSWord,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
}",0.6202209005947323
97490,"@Override public void run() throws OseeCoreException {
  try {
    IOseeBranch branch=DemoBranches.SAW_Bld_1;
    importRequirements(branch,CoreArtifactTypes.SoftwareRequirement,""String_Node_Str"");
    importRequirements(branch,CoreArtifactTypes.SystemRequirementMSWord,""String_Node_Str"");
    importRequirements(branch,CoreArtifactTypes.SubsystemRequirementMSWord,""String_Node_Str"");
    SkynetTransaction demoDbTraceability=TransactionManager.createTransaction(branch,""String_Node_Str"");
    demoDbTraceabilityTx(demoDbTraceability,branch);
    demoDbTraceability.execute();
    if (DEBUG) {
      OseeLog.log(AddRequirementData.class,Level.INFO,""String_Node_Str"");
    }
    Branch childBranch=BranchManager.createBaselineBranch(DemoBranches.SAW_Bld_1,DemoBranches.SAW_Bld_2);
    sleep(5000);
    ConnectionHandler.runPreparedUpdate(UPDATE_BRANCH_TYPE,new Object[]{BranchType.BASELINE.getValue(),childBranch.getId()});
    BranchManager.refreshBranches();
  }
 catch (  Exception ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}","@Override public void run() throws OseeCoreException {
  try {
    IOseeBranch branch=DemoBranches.SAW_Bld_1;
    importRequirements(branch,CoreArtifactTypes.SoftwareRequirement,""String_Node_Str"",""String_Node_Str"");
    importRequirements(branch,CoreArtifactTypes.SystemRequirementMSWord,""String_Node_Str"",""String_Node_Str"");
    importRequirements(branch,CoreArtifactTypes.SubsystemRequirementMSWord,""String_Node_Str"",""String_Node_Str"");
    SkynetTransaction demoDbTraceability=TransactionManager.createTransaction(branch,""String_Node_Str"");
    demoDbTraceabilityTx(demoDbTraceability,branch);
    demoDbTraceability.execute();
    if (DEBUG) {
      OseeLog.log(AddRequirementData.class,Level.INFO,""String_Node_Str"");
    }
    Branch childBranch=BranchManager.createBaselineBranch(DemoBranches.SAW_Bld_1,DemoBranches.SAW_Bld_2);
    sleep(5000);
    ConnectionHandler.runPreparedUpdate(UPDATE_BRANCH_TYPE,new Object[]{BranchType.BASELINE.getValue(),childBranch.getId()});
    BranchManager.refreshBranches();
  }
 catch (  Exception ex) {
    OseeExceptions.wrapAndThrow(ex);
  }
}",0.9745042492917848
97491,"private void importRequirements(IOseeBranch branch,IArtifactType requirementType,String filename) throws Exception {
  String rootArtifactName=toPlural(requirementType.getName());
  if (DEBUG) {
    OseeLog.logf(AddRequirementData.class,Level.INFO,""String_Node_Str"",rootArtifactName,branch);
  }
  Artifact systemReq=ArtifactQuery.getArtifactFromTypeAndName(CoreArtifactTypes.Folder,rootArtifactName,branch);
  IArtifactImportResolver artifactResolver=new NewArtifactImportResolver(requirementType,CoreArtifactTypes.Heading);
  IArtifactExtractor extractor=new WordOutlineExtractor();
  extractor.setDelegate(new WordOutlineExtractorDelegate());
  ArtifactImportOperationParameter importOptions=new ArtifactImportOperationParameter();
  importOptions.setSourceFile(getResourceFile(filename));
  importOptions.setDestinationArtifact(systemReq);
  importOptions.setExtractor(extractor);
  importOptions.setResolver(artifactResolver);
  IOperation operation=ArtifactImportOperationFactory.completeOperation(importOptions);
  Operations.executeWorkAndCheckStatus(operation);
  if (systemReq.getChildren().isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void importRequirements(IOseeBranch branch,IArtifactType requirementType,String folderName,String filename) throws Exception {
  if (DEBUG) {
    OseeLog.logf(AddRequirementData.class,Level.INFO,""String_Node_Str"",folderName,branch);
  }
  Artifact systemReq=ArtifactQuery.getArtifactFromTypeAndName(CoreArtifactTypes.Folder,folderName,branch);
  IArtifactImportResolver artifactResolver=new NewArtifactImportResolver(requirementType,CoreArtifactTypes.Heading);
  IArtifactExtractor extractor=new WordOutlineExtractor();
  extractor.setDelegate(new WordOutlineExtractorDelegate());
  ArtifactImportOperationParameter importOptions=new ArtifactImportOperationParameter();
  importOptions.setSourceFile(getResourceFile(filename));
  importOptions.setDestinationArtifact(systemReq);
  importOptions.setExtractor(extractor);
  importOptions.setResolver(artifactResolver);
  IOperation operation=ArtifactImportOperationFactory.completeOperation(importOptions);
  Operations.executeWorkAndCheckStatus(operation);
  if (systemReq.getChildren().isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9489751417357174
97492,"@Override public void run(TableLoadOption... tableLoadOptions) throws Exception {
  String coveragePkgName=String.format(""String_Node_Str"",getName(),Lib.getDateTimeString());
  coveragePackage=new CoveragePackage(coveragePkgName,CoverageOptionManagerDefault.instance(),new SimpleWorkProductTaskProvider());
  OseeCoveragePackageStore store=new OseeCoveragePackageStore(coveragePackage,CoverageBranches.SAW_Bld_1);
  store.save(coveragePackage.getName(),coveragePackage.getCoverageOptionManager());
  CoverageEditor.open(new CoverageEditorInput(coveragePackage.getName(),store.getArtifact(false),coveragePackage,true));
  CoverageEditor editor=null;
  for (  CoverageEditor coverageEditor : CoverageEditor.getEditors()) {
    if (coverageEditor.getCoverageEditorInput().getCoveragePackageBase() instanceof CoveragePackage) {
      CoveragePackage editorPackage=(CoveragePackage)coverageEditor.getCoverageEditorInput().getCoveragePackageBase();
      if (editorPackage.getGuid().equals(coveragePackage.getGuid())) {
        editor=coverageEditor;
      }
    }
  }
  if (editor == null) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  editor.simulateImport(blamImportName);
}","@Override public void run(TableLoadOption... tableLoadOptions) throws Exception {
  String coveragePkgName=String.format(""String_Node_Str"",getName(),Lib.getDateTimeString());
  coveragePackage=new CoveragePackage(coveragePkgName,CoverageOptionManagerDefault.instance(),new SimpleWorkProductTaskProvider());
  OseeCoveragePackageStore store=new OseeCoveragePackageStore(coveragePackage,CoverageBranches.COVERAGE_TEST_BRANCH);
  store.save(coveragePackage.getName(),coveragePackage.getCoverageOptionManager());
  CoverageEditor.open(new CoverageEditorInput(coveragePackage.getName(),store.getArtifact(false),coveragePackage,true));
  CoverageEditor editor=null;
  for (  CoverageEditor coverageEditor : CoverageEditor.getEditors()) {
    if (coverageEditor.getCoverageEditorInput().getCoveragePackageBase() instanceof CoveragePackage) {
      CoveragePackage editorPackage=(CoveragePackage)coverageEditor.getCoverageEditorInput().getCoveragePackageBase();
      if (editorPackage.getGuid().equals(coveragePackage.getGuid())) {
        editor=coverageEditor;
      }
    }
  }
  if (editor == null) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  editor.simulateImport(blamImportName);
}",0.4179605539236257
97493,"@Override public void run(TableLoadOption... tableLoadOptions) throws Exception {
  super.run(tableLoadOptions);
  CoverageUtil.setNavigatorSelectedBranch(CoverageBranches.SAW_Bld_1);
  Artifact coveragePackageArtifact=CoveragePackageTestUtil.getSelectedCoveragePackageFromDialog();
  if (coveragePackageArtifact == null) {
    return;
  }
  CoveragePackage coveragePackage=new OseeCoveragePackageStore(coveragePackageArtifact).getCoveragePackage();
  Result result=CoveragePackageTestUtil.setupCoveragePackageForImport10(coveragePackage,true);
  if (result.isFalse()) {
    AWorkbench.popup(result);
  }
  CoverageEditor.open(new CoverageEditorInput(coveragePackage.getName(),coveragePackageArtifact,coveragePackage,true));
}","@Override public void run(TableLoadOption... tableLoadOptions) throws Exception {
  super.run(tableLoadOptions);
  CoverageUtil.setNavigatorSelectedBranch(CoverageBranches.COVERAGE_TEST_BRANCH);
  Artifact coveragePackageArtifact=CoveragePackageTestUtil.getSelectedCoveragePackageFromDialog();
  if (coveragePackageArtifact == null) {
    return;
  }
  CoveragePackage coveragePackage=new OseeCoveragePackageStore(coveragePackageArtifact).getCoveragePackage();
  Result result=CoveragePackageTestUtil.setupCoveragePackageForImport10(coveragePackage,true);
  if (result.isFalse()) {
    AWorkbench.popup(result);
  }
  CoverageEditor.open(new CoverageEditorInput(coveragePackage.getName(),coveragePackageArtifact,coveragePackage,true));
}",0.2624743677375256
97494,"public static Result setupCoveragePackageForImport10(CoveragePackage coveragePackage,boolean testWithDb){
  String errStr=null;
  CoverageItem item=getNavigateButton2getTextLine3CoverageItem(coveragePackage);
  if (item == null) {
    errStr=""String_Node_Str"";
  }
 else {
    item.setCoverageMethod(CoverageOptionManager.Deactivated_Code);
  }
  item=getNavigateButton2getImageLine3CoverageItem(coveragePackage);
  if (item == null) {
    errStr+=""String_Node_Str"";
  }
 else {
    item.setCoverageMethod(CoverageOptionManager.Deactivated_Code);
    item.setRationale(""String_Node_Str"");
  }
  if (Strings.isValid(errStr)) {
    return new Result(errStr);
  }
  if (testWithDb) {
    OseeCoveragePackageStore packageStore=new OseeCoveragePackageStore(coveragePackage,CoverageBranches.SAW_Bld_1);
    packageStore.save(coveragePackage.getName(),coveragePackage.getCoverageOptionManager());
  }
  return Result.TrueResult;
}","public static Result setupCoveragePackageForImport10(CoveragePackage coveragePackage,boolean testWithDb){
  String errStr=null;
  CoverageItem item=getNavigateButton2getTextLine3CoverageItem(coveragePackage);
  if (item == null) {
    errStr=""String_Node_Str"";
  }
 else {
    item.setCoverageMethod(CoverageOptionManager.Deactivated_Code);
  }
  item=getNavigateButton2getImageLine3CoverageItem(coveragePackage);
  if (item == null) {
    errStr+=""String_Node_Str"";
  }
 else {
    item.setCoverageMethod(CoverageOptionManager.Deactivated_Code);
    item.setRationale(""String_Node_Str"");
  }
  if (Strings.isValid(errStr)) {
    return new Result(errStr);
  }
  if (testWithDb) {
    OseeCoveragePackageStore packageStore=new OseeCoveragePackageStore(coveragePackage,CoverageBranches.COVERAGE_TEST_BRANCH);
    packageStore.save(coveragePackage.getName(),coveragePackage.getCoverageOptionManager());
  }
  return Result.TrueResult;
}",0.9876144318793754
97495,"@Override public void run() throws OseeCoreException {
  Branch coverageBranch=BranchManager.createTopLevelBranch(CoverageBranches.SAW_Bld_1);
  OseeSystemArtifacts.getDefaultHierarchyRootArtifact(coverageBranch);
}","@Override public void run() throws OseeCoreException {
  Branch coverageBranch=BranchManager.createTopLevelBranch(CoverageBranches.COVERAGE_TEST_BRANCH);
  OseeSystemArtifacts.getDefaultHierarchyRootArtifact(coverageBranch);
}",0.947845804988662
97496,"@After public void cleanUpTestArtifact(){
  BranchManager.deleteBranch(testBranch);
}","@After public void cleanUpTestArtifact(){
  BranchManager.deleteBranch(testTopBranch);
  BranchManager.deleteBranch(testWorkingBranch);
}",0.7657657657657657
97497,"@Test public void testStore() throws OseeCoreException {
  ArtifactTestUnitStore store=new ArtifactTestUnitStore(testBranch);
  TestUnitCache tc=new TestUnitCache(store);
  CoverageItem ci=createCoverageItem(tc);
  ci.addTestUnitName(""String_Node_Str"");
  ci.addTestUnitName(""String_Node_Str"");
  store.store(tc);
  SkynetTransaction transaction=TransactionManager.createTransaction(testBranch,getClass().getSimpleName());
  Artifact testArtifact=ArtifactQuery.getOrCreate(ArtifactTestUnitStore.COVERAGE_GUID,null,CoreArtifactTypes.GeneralData,testBranch);
  String actual=testArtifact.getSoleAttributeValueAsString(CoreAttributeTypes.GeneralStringData,""String_Node_Str"");
  String expected=testInputData + ""String_Node_Str"";
  Assert.assertEquals(expected,actual);
  testArtifact.persist(transaction);
  transaction.execute();
}","@Test public void testStore() throws OseeCoreException {
  Artifact testArtifact=ArtifactQuery.getOrCreate(coverageTestGuid,null,CoverageArtifactTypes.CoveragePackage,testWorkingBranch);
  testArtifact.setSoleAttributeFromString(CoverageAttributeTypes.UnitTestTable,testInputDataCoverageArtifact);
  ArtifactTestUnitStore store=new ArtifactTestUnitStore(testArtifact,readOnlyTestUnitNames);
  TestUnitCache tc=new TestUnitCache(store);
  CoverageItem ci=createCoverageItem(tc);
  ci.addTestUnitName(""String_Node_Str"");
  SkynetTransaction transaction=TransactionManager.createTransaction(testWorkingBranch,getClass().getSimpleName());
  store.store(tc,transaction);
  String actual=testArtifact.getSoleAttributeValueAsString(CoverageAttributeTypes.UnitTestTable,""String_Node_Str"");
  String expected=""String_Node_Str"" + testInputDataCoverageArtifact;
  Assert.assertEquals(expected,actual);
  testArtifact.persist(transaction);
  transaction.execute();
}",0.4576556365675827
97498,"@Before public void createTestArtifact() throws OseeCoreException {
  testBranch=BranchManager.createTopLevelBranch(""String_Node_Str"");
  Artifact testArtifact=ArtifactQuery.getOrCreate(ArtifactTestUnitStore.COVERAGE_GUID,null,CoreArtifactTypes.GeneralData,testBranch);
  testArtifact.setSoleAttributeFromString(CoreAttributeTypes.GeneralStringData,testInputData);
}","@Before public void createTestArtifact() throws OseeCoreException {
  testTopBranch=BranchManager.createTopLevelBranch(""String_Node_Str"");
  testWorkingBranch=BranchManager.createWorkingBranch(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  readOnlyTestUnitNames=ArtifactQuery.getOrCreate(ArtifactTestUnitStore.READ_ONLY_GUID,null,CoreArtifactTypes.GeneralData,testTopBranch);
  readOnlyTestUnitNames.setSoleAttributeFromString(CoreAttributeTypes.GeneralStringData,testInputDataReadOnlyList);
}",0.7520184544405998
97499,"@Test public void testLoad() throws OseeCoreException {
  ArtifactTestUnitStore store=new ArtifactTestUnitStore(testBranch);
  TestUnitCache tc=new TestUnitCache(store);
  store.load(tc);
  StringBuilder actual=new StringBuilder();
  boolean firstTime=true;
  for (  Entry<Integer,String> entry : tc.getAllCachedTestUnitEntries()) {
    if (!firstTime) {
      actual.append(""String_Node_Str"");
    }
    actual.append(Integer.toString(entry.getKey()));
    actual.append(""String_Node_Str"");
    actual.append(entry.getValue());
    firstTime=false;
  }
  Assert.assertEquals(testInputData,actual.toString());
}","@Test public void testLoad() throws OseeCoreException {
  ArtifactTestUnitStore store=new ArtifactTestUnitStore(null,readOnlyTestUnitNames);
  TestUnitCache tc=new TestUnitCache(store);
  store.load(tc);
  StringBuilder actual=new StringBuilder();
  boolean firstTime=true;
  for (  Entry<Integer,String> entry : tc.getAllCachedTestUnitEntries()) {
    if (!firstTime) {
      actual.append(""String_Node_Str"");
    }
    actual.append(Integer.toString(entry.getKey()));
    actual.append(""String_Node_Str"");
    actual.append(entry.getValue());
    firstTime=false;
  }
  Assert.assertEquals(testInputDataReadOnlyList,actual.toString());
}",0.9616
97500,"/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#delete(org.eclipse.osee.framework.skynet.core.transaction.SkynetTransaction,coverageEvent,boolean)}.
 */
@Test public void testDelete() throws OseeCoreException {
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).getArtifact(false);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(""String_Node_Str"",GUID.create(),CoverageEventType.Deleted,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).delete(transaction,coverageEvent,false);
  transaction.execute();
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).getArtifact(false);
  Assert.assertNull(artifact);
  Assert.assertEquals(0,CoverageTestUtil.getAllCoverageArtifacts().size());
  Assert.assertEquals(1,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Deleted,coverageEvent.getCoverages().iterator().next().getEventType());
}","/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#delete(org.eclipse.osee.framework.skynet.core.transaction.SkynetTransaction,coverageEvent,boolean)}.
 */
@Test public void testDelete() throws OseeCoreException {
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(""String_Node_Str"",GUID.create(),CoverageEventType.Deleted,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).delete(transaction,coverageEvent,false);
  transaction.execute();
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNull(artifact);
  Assert.assertEquals(0,CoverageTestUtil.getAllCoverageArtifacts().size());
  Assert.assertEquals(1,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Deleted,coverageEvent.getCoverages().iterator().next().getEventType());
}",0.9706621961441744
97501,"@Before public void testSetup() throws OseeCoreException {
  if (!initOnce) {
    initOnce=true;
    CoverageUtil.setNavigatorSelectedBranch(CoverageTestUtil.getTestBranch());
    CoverageTestUtil.cleanupCoverageTests();
    Assert.assertEquals(0,CoverageTestUtil.getAllCoverageArtifacts().size());
    parentCu=CoverageUnitFactory.createCoverageUnit(null,""String_Node_Str"",""String_Node_Str"",null);
    parentGuid=parentCu.getGuid();
    ITestUnitStore testUnitStore=mock(ITestUnitStore.class);
    testUnitCache=new TestUnitCache(testUnitStore);
    ci=new CoverageItem(parentCu,CoverageOptionManager.Deactivated_Code,""String_Node_Str"");
    ci.setTestUnitProvider(testUnitCache);
    for (int x=0; x < 10; x++) {
      ci.addTestUnitName(""String_Node_Str"" + x);
    }
    ci.setRationale(""String_Node_Str"");
    ci.setName(""String_Node_Str"");
    guid=ci.getGuid();
  }
}","@Before public void testSetup() throws OseeCoreException {
  if (!initOnce) {
    initOnce=true;
    CoverageUtil.setNavigatorSelectedBranch(CoverageTestUtil.getTestBranch());
    CoverageTestUtil.cleanupCoverageTests();
    Assert.assertEquals(0,CoverageTestUtil.getAllCoverageArtifacts().size());
    readOnlyTestUnitNames=ArtifactQuery.getOrCreate(ArtifactTestUnitStore.READ_ONLY_GUID,null,CoreArtifactTypes.GeneralData,CoverageTestUtil.getTestBranch());
    readOnlyTestUnitNames.setSoleAttributeFromString(CoreAttributeTypes.GeneralStringData,""String_Node_Str"");
    parentCu=CoverageUnitFactory.createCoverageUnit(null,""String_Node_Str"",""String_Node_Str"",null);
    parentGuid=parentCu.getGuid();
    ArtifactTestUnitStore testUnitStore=new ArtifactTestUnitStore(null,readOnlyTestUnitNames);
    testUnitCache=new TestUnitCache(testUnitStore);
    ci=new CoverageItem(parentCu,CoverageOptionManager.Deactivated_Code,""String_Node_Str"");
    ci.setTestUnitProvider(testUnitCache);
    for (int x=0; x < 10; x++) {
      ci.addTestUnitName(""String_Node_Str"" + x);
    }
    ci.setRationale(""String_Node_Str"");
    ci.setName(""String_Node_Str"");
    guid=ci.getGuid();
  }
}",0.828696925329429
97502,"/** 
 * Test method for   {@link org.eclipse.osee.coverage.model.CoverageItem#asArtifact(boolean)}.
 */
@Test public void testGetArtifact() throws OseeCoreException {
  try {
    ArtifactQuery.getArtifactFromId(parentGuid,CoverageTestUtil.getTestBranch());
    Assert.fail(""String_Node_Str"");
  }
 catch (  ArtifactDoesNotExist ex) {
  }
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).getArtifact(false);
  Assert.assertNull(""String_Node_Str"",artifact);
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).getArtifact(true);
  CoverageTestUtil.registerAsTestArtifact(artifact);
  artifact.persist(getClass().getSimpleName());
  Assert.assertNotNull(""String_Node_Str"",artifact);
}","/** 
 * Test method for   {@link org.eclipse.osee.coverage.model.CoverageItem#asArtifact(boolean)}.
 */
@Test public void testGetArtifact() throws OseeCoreException {
  try {
    ArtifactQuery.getArtifactFromId(parentGuid,CoverageTestUtil.getTestBranch());
    Assert.fail(""String_Node_Str"");
  }
 catch (  ArtifactDoesNotExist ex) {
  }
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(false);
  Assert.assertNull(""String_Node_Str"",artifact);
  artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(true);
  CoverageTestUtil.registerAsTestArtifact(artifact);
  artifact.persist(getClass().getSimpleName());
  Assert.assertNotNull(""String_Node_Str"",artifact);
}",0.9714656290531776
97503,"/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#save(SkynetTransaction,String,CoverageOptionManager)}
 */
@Test public void testSave() throws OseeCoreException {
  Assert.assertEquals(10,ci.getTestUnits().size());
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).getArtifact(true);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  String coverageGuid=GUID.create();
  String coverageName=""String_Node_Str"";
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(coverageName,coverageGuid,CoverageEventType.Modified,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch()).save(transaction,coverageEvent,CoverageOptionManagerDefault.instance());
  artifact.persist(transaction);
  transaction.execute();
  Assert.assertEquals(coverageGuid,coverageEvent.getPackage().getGuid());
  Assert.assertEquals(coverageName,coverageEvent.getPackage().getName());
  Assert.assertEquals(CoverageEventType.Modified,coverageEvent.getPackage().getEventType());
  Assert.assertEquals(2,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Added,coverageEvent.getCoverages().iterator().next().getEventType());
  Assert.assertEquals(10,ci.getTestUnits().size());
}","/** 
 * Test method for  {@link org.eclipse.osee.coverage.model.CoverageItem#save(SkynetTransaction,String,CoverageOptionManager)}
 */
@Test public void testSave() throws OseeCoreException {
  Assert.assertEquals(10,ci.getTestUnits().size());
  Artifact artifact=new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).getArtifact(true);
  Assert.assertNotNull(artifact);
  SkynetTransaction transaction=TransactionManager.createTransaction(CoverageTestUtil.getTestBranch(),""String_Node_Str"");
  String coverageGuid=GUID.create();
  String coverageName=""String_Node_Str"";
  CoveragePackageEvent coverageEvent=new CoveragePackageEvent(coverageName,coverageGuid,CoverageEventType.Modified,GUID.create());
  new OseeCoverageUnitStore(parentCu,CoverageTestUtil.getTestBranch(),readOnlyTestUnitNames).save(transaction,coverageEvent,CoverageOptionManagerDefault.instance());
  artifact.persist(transaction);
  transaction.execute();
  Assert.assertEquals(coverageGuid,coverageEvent.getPackage().getGuid());
  Assert.assertEquals(coverageName,coverageEvent.getPackage().getName());
  Assert.assertEquals(CoverageEventType.Modified,coverageEvent.getPackage().getEventType());
  Assert.assertEquals(2,coverageEvent.getCoverages().size());
  Assert.assertEquals(CoverageEventType.Added,coverageEvent.getCoverages().iterator().next().getEventType());
  Assert.assertEquals(10,ci.getTestUnits().size());
}",0.984352773826458
97504,"public static void cleanupCoverageTests() throws OseeCoreException {
  try {
    Collection<? extends Artifact> allCoverageArtifacts=getAllCoverageArtifacts();
    IOperation op=new PurgeArtifacts(allCoverageArtifacts);
    Operations.executeWorkAndCheckStatus(op);
  }
 catch (  ArtifactDoesNotExist ex) {
  }
}","public static void cleanupCoverageTests() throws OseeCoreException {
  try {
    for (    Artifact art : ArtifactCache.getDirtyArtifacts()) {
      ArtifactCache.deCache(art);
    }
    Collection<? extends Artifact> allCoverageArtifacts=getAllCoverageArtifacts();
    IOperation op=new PurgeArtifacts(allCoverageArtifacts);
    Operations.executeWorkAndCheckStatus(op);
  }
 catch (  ArtifactDoesNotExist ex) {
  }
}",0.8559670781893004
97505,"public static IOseeBranch getTestBranch(){
  return CoverageBranches.SAW_Bld_1;
}","public static IOseeBranch getTestBranch(){
  return CoverageBranches.COVERAGE_TEST_BRANCH;
}",0.8670520231213873
97506,"public void setMetrics(IStateToken state,double hours,int percentComplete,boolean logMetrics,IAtsUser user,Date date) throws OseeCoreException {
  getStateProvider().setHoursSpent(state.getName(),hours);
  getStateProvider().setPercentComplete(state.getName(),percentComplete);
  if (logMetrics) {
    logMetrics(awa.getStateMgr().getCurrentState(),AtsUsersClient.getUser(),new Date());
  }
  writeToArtifact();
}","/** 
 * Set metrics and log if changed
 */
public void setMetrics(IStateToken state,double hours,int percentComplete,boolean logMetrics,IAtsUser user,Date date) throws OseeCoreException {
  boolean changed=setMetricsIfChanged(state,hours,percentComplete);
  if (changed) {
    if (logMetrics) {
      logMetrics(awa.getStateMgr().getCurrentState(),AtsUsersClient.getUser(),new Date());
    }
    writeToArtifact();
  }
}",0.4249699879951981
97507,"@Override public Boolean call() throws Exception {
  for (  String fileToImport : importFiles) {
    console.writeln(""String_Node_Str"",fileToImport);
    URI uriToCheck=new URI(""String_Node_Str"" + fileToImport);
    orcsBranch.checkBranchExchangeIntegrity(uriToCheck);
  }
  return Boolean.TRUE;
}","@Override public Boolean call() throws Exception {
  for (  String fileToImport : importFiles) {
    console.writeln(""String_Node_Str"",fileToImport);
    URI uriToCheck=new URI(""String_Node_Str"" + fileToImport);
    Callable<URI> callable=orcsBranch.checkBranchExchangeIntegrity(uriToCheck);
    callable.call();
    checkForCancelled();
  }
  return Boolean.TRUE;
}",0.8959276018099548
97508,"@Override public Boolean call() throws Exception {
  if (importFiles.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  List<IOseeBranch> branches=new LinkedList<IOseeBranch>();
  for (  String branchIdString : branchIds) {
    IOseeBranch branch=branchCache.getById(Integer.parseInt(branchIdString));
    branches.add(branch);
  }
  for (  String fileToImport : importFiles) {
    URI uri=new URI(""String_Node_Str"" + fileToImport);
    console.writeln(""String_Node_Str"",uri);
    orcsBranch.importBranch(uri,branches,options);
  }
  return Boolean.TRUE;
}","@Override public Boolean call() throws Exception {
  if (importFiles.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  List<IOseeBranch> branches=new LinkedList<IOseeBranch>();
  for (  String branchIdString : branchIds) {
    IOseeBranch branch=branchCache.getById(Integer.parseInt(branchIdString));
    branches.add(branch);
  }
  for (  String fileToImport : importFiles) {
    URI uri=new URI(""String_Node_Str"" + fileToImport);
    console.writeln(""String_Node_Str"",uri);
    Callable<URI> callable=orcsBranch.importBranch(uri,branches,options);
    callable.call();
    checkForCancelled();
  }
  return Boolean.TRUE;
}",0.9438567941415784
97509,public Collection<? extends IAtsUser> getToAssignees() throws OseeCoreException ;,public Collection<? extends IAtsUser> getToAssignees(AbstractWorkflowArtifact awa) throws OseeCoreException ;,0.8526315789473684
97510,"@Override public Collection<? extends IAtsUser> getToAssignees(){
  return toAssignees;
}","@SuppressWarnings(""String_Node_Str"") @Override public Collection<? extends IAtsUser> getToAssignees(AbstractWorkflowArtifact awa) throws OseeCoreException {
  return toAssignees;
}",0.6617100371747212
97511,"/** 
 * Process transition and persist changes to given skynet transaction
 * @return Result.isFalse if failure
 */
public void handleTransition(TransitionResults results){
  try {
    if (transaction == null) {
      transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),helper.getName());
    }
    for (    AbstractWorkflowArtifact awa : helper.getAwas()) {
      try {
        IAtsStateDefinition fromState=awa.getStateDefinition();
        IAtsStateDefinition toState=awa.getStateDefinitionByName(helper.getToStateName());
        if (!fromState.equals(toState)) {
          Date transitionDate=getTransitionOnDate();
          IAtsUser transitionUser=getTransitionAsUser();
          if (fromState.getStateType().isCancelledState()) {
            logWorkflowUnCancelledEvent(awa);
          }
 else           if (fromState.getStateType().isCompletedState()) {
            logWorkflowUnCompletedEvent(awa);
          }
          if (toState.getStateType().isCancelledState()) {
            logWorkflowCancelledEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else           if (toState.getStateType().isCompletedState()) {
            logWorkflowCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else {
            logStateCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
          logStateStartedEvent(awa,toState,transitionDate,transitionUser);
          List<IAtsUser> toAssignees=new LinkedList<IAtsUser>();
          if (!toState.getStateType().isCompletedOrCancelledState()) {
            if (helper.getToAssignees() != null) {
              toAssignees.addAll(helper.getToAssignees());
            }
            if (toAssignees.contains(AtsUsers.getUnAssigned())) {
              toAssignees.remove(AtsUsers.getUnAssigned());
              toAssignees.add(AtsUsersClient.getUser());
            }
            if (toAssignees.isEmpty()) {
              toAssignees.add(AtsUsersClient.getUser());
            }
          }
          awa.getStateMgr().transitionHelper(toAssignees,fromState,toState,completedCancellationReason);
          if (awa.isValidationRequired() && awa.isTeamWorkflow()) {
            ValidateReviewManager.createValidateReview((TeamWorkFlowArtifact)awa,false,transitionDate,transitionUser,transaction);
          }
          awa.persist(transaction);
          awa.transitioned(fromState,toState,helper.getToAssignees(),transaction);
          for (          ITransitionListener listener : TransitionListeners.getListeners()) {
            listener.transitioned(awa,fromState,toState,helper.getToAssignees(),transaction);
          }
          if (toState.getStateType().isCompletedOrCancelledState()) {
            awa.clearImplementersCache();
          }
        }
      }
 catch (      Exception ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
      }
    }
  }
 catch (  Exception ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
}","/** 
 * Process transition and persist changes to given skynet transaction
 * @return Result.isFalse if failure
 */
public void handleTransition(TransitionResults results){
  try {
    if (transaction == null) {
      transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),helper.getName());
    }
    for (    AbstractWorkflowArtifact awa : helper.getAwas()) {
      try {
        IAtsStateDefinition fromState=awa.getStateDefinition();
        IAtsStateDefinition toState=awa.getStateDefinitionByName(helper.getToStateName());
        if (!fromState.equals(toState)) {
          Date transitionDate=getTransitionOnDate();
          IAtsUser transitionUser=getTransitionAsUser();
          if (fromState.getStateType().isCancelledState()) {
            logWorkflowUnCancelledEvent(awa);
          }
 else           if (fromState.getStateType().isCompletedState()) {
            logWorkflowUnCompletedEvent(awa);
          }
          if (toState.getStateType().isCancelledState()) {
            logWorkflowCancelledEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else           if (toState.getStateType().isCompletedState()) {
            logWorkflowCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else {
            logStateCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
          logStateStartedEvent(awa,toState,transitionDate,transitionUser);
          List<? extends IAtsUser> updatedAssigees=getToAssignees(awa,toState);
          awa.getStateMgr().transitionHelper(updatedAssigees,fromState,toState,completedCancellationReason);
          if (awa.isValidationRequired() && awa.isTeamWorkflow()) {
            ValidateReviewManager.createValidateReview((TeamWorkFlowArtifact)awa,false,transitionDate,transitionUser,transaction);
          }
          awa.persist(transaction);
          awa.transitioned(fromState,toState,updatedAssigees,transaction);
          for (          ITransitionListener listener : TransitionListeners.getListeners()) {
            listener.transitioned(awa,fromState,toState,updatedAssigees,transaction);
          }
          if (toState.getStateType().isCompletedOrCancelledState()) {
            awa.clearImplementersCache();
          }
        }
      }
 catch (      Exception ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
      }
    }
  }
 catch (  Exception ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
}",0.6933466733366683
97512,"public void isTransitionValidForExtensions(TransitionResults results,AbstractWorkflowArtifact awa,IAtsStateDefinition fromStateDef,IAtsStateDefinition toStateDef){
  for (  ITransitionListener listener : TransitionListeners.getListeners()) {
    try {
      listener.transitioning(results,awa,fromStateDef,toStateDef,helper.getToAssignees());
      if (results.isCancelled() || !results.isEmpty()) {
        continue;
      }
    }
 catch (    OseeCoreException ex) {
      results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",ex.getMessage(),helper.getName()),ex));
    }
  }
  if (results.isEmpty()) {
    for (    ITransitionListener listener : TransitionListeners.getListeners()) {
      try {
        listener.transitioning(results,awa,fromStateDef,toStateDef,helper.getToAssignees());
        if (results.isCancelled() || !results.isEmpty()) {
          continue;
        }
      }
 catch (      OseeCoreException ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",ex.getMessage(),helper.getName()),ex));
      }
    }
  }
}","public void isTransitionValidForExtensions(TransitionResults results,AbstractWorkflowArtifact awa,IAtsStateDefinition fromStateDef,IAtsStateDefinition toStateDef){
  for (  ITransitionListener listener : TransitionListeners.getListeners()) {
    try {
      listener.transitioning(results,awa,fromStateDef,toStateDef,getToAssignees(awa,toStateDef));
      if (results.isCancelled() || !results.isEmpty()) {
        continue;
      }
    }
 catch (    OseeCoreException ex) {
      results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",ex.getMessage(),helper.getName()),ex));
    }
  }
  awasToAssignees.remove(awa);
  if (results.isEmpty()) {
    for (    ITransitionListener listener : TransitionListeners.getListeners()) {
      try {
        listener.transitioning(results,awa,fromStateDef,toStateDef,getToAssignees(awa,toStateDef));
        if (results.isCancelled() || !results.isEmpty()) {
          continue;
        }
      }
 catch (      OseeCoreException ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",ex.getMessage(),helper.getName()),ex));
      }
    }
  }
}",0.9671910112359552
97513,"private void handleTransitionButtonSelection(final SMAEditor editor,final boolean isEditable){
  editor.doSave(null);
  final List<AbstractWorkflowArtifact> awas=Arrays.asList(awa);
  final IAtsStateDefinition toStateDef=(IAtsStateDefinition)transitionToStateCombo.getSelected();
  final IAtsStateDefinition fromStateDef=awa.getStateDefinition();
  ITransitionHelper helper=new TransitionHelperAdapter(){
    @Override public boolean isPrivilegedEditEnabled(){
      return editor.isPrivilegedEditModeEnabled();
    }
    @Override public String getToStateName(){
      return toStateDef.getName();
    }
    @Override public Collection<? extends IAtsUser> getToAssignees() throws OseeCoreException {
      return awa.getTransitionAssignees();
    }
    @Override public String getName(){
      return ""String_Node_Str"";
    }
    @Override public Result handleExtraHoursSpent(){
      final Result result=new Result(true,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          boolean resultBool=false;
          try {
            resultBool=handlePopulateStateMetrics(fromStateDef,toStateDef);
          }
 catch (          OseeCoreException ex) {
            OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
            result.set(false);
            result.setText(String.format(""String_Node_Str"",awas.iterator().next().toStringWithId()));
          }
          if (!resultBool) {
            result.setCancelled(true);
            result.set(false);
          }
        }
      }
,true);
      return result;
    }
    @Override public Result getCompleteOrCancellationReason(){
      final Result result=new Result(true,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          IAtsStateDefinition toStateDef=getAwas().iterator().next().getStateDefinitionByName(getToStateName());
          if (toStateDef.getStateType().isCancelledState()) {
            EntryDialog cancelDialog=new EntryDialog(""String_Node_Str"",""String_Node_Str"");
            if (cancelDialog.open() != 0) {
              result.setCancelled(true);
            }
            result.set(true);
            result.setText(cancelDialog.getEntry());
          }
        }
      }
,true);
      return result;
    }
    @Override public Collection<AbstractWorkflowArtifact> getAwas(){
      return awas;
    }
  }
;
  final TransitionToOperation operation=new TransitionToOperation(helper);
  Operations.executeAsJob(operation,true,Job.SHORT,new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      TransitionResults results=operation.getResults();
      if (!results.isEmpty()) {
        String resultStr=results.getResultString();
        results.logExceptions();
        AWorkbench.popup(MessageType.Error,""String_Node_Str"",resultStr);
      }
    }
  }
);
}","private void handleTransitionButtonSelection(final SMAEditor editor,final boolean isEditable){
  editor.doSave(null);
  final List<AbstractWorkflowArtifact> awas=Arrays.asList(awa);
  final IAtsStateDefinition toStateDef=(IAtsStateDefinition)transitionToStateCombo.getSelected();
  final IAtsStateDefinition fromStateDef=awa.getStateDefinition();
  ITransitionHelper helper=new TransitionHelperAdapter(){
    @Override public boolean isPrivilegedEditEnabled(){
      return editor.isPrivilegedEditModeEnabled();
    }
    @Override public String getToStateName(){
      return toStateDef.getName();
    }
    @Override public Collection<? extends IAtsUser> getToAssignees(    AbstractWorkflowArtifact awa) throws OseeCoreException {
      return awa.getTransitionAssignees();
    }
    @Override public String getName(){
      return ""String_Node_Str"";
    }
    @Override public Result handleExtraHoursSpent(){
      final Result result=new Result(true,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          boolean resultBool=false;
          try {
            resultBool=handlePopulateStateMetrics(fromStateDef,toStateDef);
          }
 catch (          OseeCoreException ex) {
            OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
            result.set(false);
            result.setText(String.format(""String_Node_Str"",awas.iterator().next().toStringWithId()));
          }
          if (!resultBool) {
            result.setCancelled(true);
            result.set(false);
          }
        }
      }
,true);
      return result;
    }
    @Override public Result getCompleteOrCancellationReason(){
      final Result result=new Result(true,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          IAtsStateDefinition toStateDef=getAwas().iterator().next().getStateDefinitionByName(getToStateName());
          if (toStateDef.getStateType().isCancelledState()) {
            EntryDialog cancelDialog=new EntryDialog(""String_Node_Str"",""String_Node_Str"");
            if (cancelDialog.open() != 0) {
              result.setCancelled(true);
            }
            result.set(true);
            result.setText(cancelDialog.getEntry());
          }
        }
      }
,true);
      return result;
    }
    @Override public Collection<AbstractWorkflowArtifact> getAwas(){
      return awas;
    }
  }
;
  final TransitionToOperation operation=new TransitionToOperation(helper);
  Operations.executeAsJob(operation,true,Job.SHORT,new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      TransitionResults results=operation.getResults();
      if (!results.isEmpty()) {
        String resultStr=results.getResultString();
        results.logExceptions();
        AWorkbench.popup(MessageType.Error,""String_Node_Str"",resultStr);
      }
    }
  }
);
}",0.9945054945054944
97514,"@Override public Collection<? extends IAtsUser> getToAssignees() throws OseeCoreException {
  return awa.getTransitionAssignees();
}","@Override public Collection<? extends IAtsUser> getToAssignees(AbstractWorkflowArtifact awa) throws OseeCoreException {
  return awa.getTransitionAssignees();
}",0.9041095890410958
97515,"private static void handleTransitionToSelected(final String toStateName,final Set<AbstractWorkflowArtifact> awas){
  final ITransitionHelper helper=new TransitionHelperAdapter(){
    @Override public Result handleExtraHoursSpent(){
      final Result result=new Result(true,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          IAtsStateDefinition toStateDef=awas.iterator().next().getWorkDefinition().getStateByName(toStateName);
          boolean showPercentCompleted=!toStateDef.getStateType().isCompletedOrCancelledState();
          TransitionStatusData data=new TransitionStatusData(getAwas(),showPercentCompleted);
          if (toStateDef.getRecommendedPercentComplete() != null) {
            data.setDefaultPercent(toStateDef.getRecommendedPercentComplete());
            data.setPercent(100);
          }
 else           if (toStateDef.getStateType().isCompletedOrCancelledState()) {
            data.setDefaultPercent(100);
            data.setPercent(100);
          }
          String title=null;
          String message=null;
          if (data.isPercentRequired()) {
            title=""String_Node_Str"";
            message=""String_Node_Str"";
          }
 else {
            title=""String_Node_Str"";
            message=""String_Node_Str"";
          }
          TransitionStatusDialog dialog=new TransitionStatusDialog(title,message,data);
          int dialogResult=dialog.open();
          if (dialogResult == 0) {
            try {
              SMAPromptChangeStatus.performChangeStatus(awas,null,data.getAdditionalHours(),data.getPercent(),data.isSplitHoursBetweenItems(),true);
            }
 catch (            OseeCoreException ex) {
              OseeLog.log(Activator.class,Level.SEVERE,ex);
              result.set(false);
              result.setTextWithFormat(""String_Node_Str"",getToStateName());
            }
          }
 else {
            result.setCancelled(true);
          }
        }
      }
,true);
      return result;
    }
    @Override public String getToStateName(){
      return toStateName;
    }
    @Override public Collection<? extends IAtsUser> getToAssignees(){
      return Collections.emptyList();
    }
    @Override public String getName(){
      return ""String_Node_Str"" + getToStateName();
    }
    @Override public Result getCompleteOrCancellationReason(){
      final Result result=new Result(false,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          AbstractWorkflowArtifact awa=getAwas().iterator().next();
          IAtsStateDefinition stateDef=awa.getStateDefinitionByName(getToStateName());
          if (stateDef.getStateType().isCancelledState()) {
            EntryDialog dialog=new EntryDialog(""String_Node_Str"",""String_Node_Str"");
            if (dialog.open() != 0) {
              result.setCancelled(true);
            }
 else {
              result.setText(dialog.getEntry());
              result.set(true);
            }
          }
        }
      }
,true);
      return result;
    }
    @Override public Collection<AbstractWorkflowArtifact> getAwas(){
      return awas;
    }
  }
;
  final TransitionToOperation operation=new TransitionToOperation(helper);
  Operations.executeAsJob(operation,true,Job.SHORT,new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      TransitionResults results=operation.getResults();
      if (!results.isEmpty()) {
        results.logExceptions();
        if (helper.getAwas().size() == 1) {
          String resultStr=results.getResultString();
          AWorkbench.popup(MessageType.Error,""String_Node_Str"",resultStr);
        }
 else {
          XResultData resultData=results.getResultXResultData();
          XResultDataUI.report(resultData,""String_Node_Str"");
        }
      }
    }
  }
);
}","private static void handleTransitionToSelected(final String toStateName,final Set<AbstractWorkflowArtifact> awas){
  final ITransitionHelper helper=new TransitionHelperAdapter(){
    @Override public Result handleExtraHoursSpent(){
      final Result result=new Result(true,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          IAtsStateDefinition toStateDef=awas.iterator().next().getWorkDefinition().getStateByName(toStateName);
          boolean showPercentCompleted=!toStateDef.getStateType().isCompletedOrCancelledState();
          TransitionStatusData data=new TransitionStatusData(getAwas(),showPercentCompleted);
          if (toStateDef.getRecommendedPercentComplete() != null) {
            data.setDefaultPercent(toStateDef.getRecommendedPercentComplete());
            data.setPercent(100);
          }
 else           if (toStateDef.getStateType().isCompletedOrCancelledState()) {
            data.setDefaultPercent(100);
            data.setPercent(100);
          }
          String title=null;
          String message=null;
          if (data.isPercentRequired()) {
            title=""String_Node_Str"";
            message=""String_Node_Str"";
          }
 else {
            title=""String_Node_Str"";
            message=""String_Node_Str"";
          }
          TransitionStatusDialog dialog=new TransitionStatusDialog(title,message,data);
          int dialogResult=dialog.open();
          if (dialogResult == 0) {
            try {
              SMAPromptChangeStatus.performChangeStatus(awas,null,data.getAdditionalHours(),data.getPercent(),data.isSplitHoursBetweenItems(),true);
            }
 catch (            OseeCoreException ex) {
              OseeLog.log(Activator.class,Level.SEVERE,ex);
              result.set(false);
              result.setTextWithFormat(""String_Node_Str"",getToStateName());
            }
          }
 else {
            result.setCancelled(true);
          }
        }
      }
,true);
      return result;
    }
    @Override public String getToStateName(){
      return toStateName;
    }
    @Override public Collection<? extends IAtsUser> getToAssignees(    AbstractWorkflowArtifact awa) throws OseeCoreException {
      return awa.getAssignees();
    }
    @Override public String getName(){
      return ""String_Node_Str"" + getToStateName();
    }
    @Override public Result getCompleteOrCancellationReason(){
      final Result result=new Result(false,""String_Node_Str"");
      Displays.ensureInDisplayThread(new Runnable(){
        @Override public void run(){
          AbstractWorkflowArtifact awa=getAwas().iterator().next();
          IAtsStateDefinition stateDef=awa.getStateDefinitionByName(getToStateName());
          if (stateDef.getStateType().isCancelledState()) {
            EntryDialog dialog=new EntryDialog(""String_Node_Str"",""String_Node_Str"");
            if (dialog.open() != 0) {
              result.setCancelled(true);
            }
 else {
              result.setText(dialog.getEntry());
              result.set(true);
            }
          }
        }
      }
,true);
      return result;
    }
    @Override public Collection<AbstractWorkflowArtifact> getAwas(){
      return awas;
    }
  }
;
  final TransitionToOperation operation=new TransitionToOperation(helper);
  Operations.executeAsJob(operation,true,Job.SHORT,new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      TransitionResults results=operation.getResults();
      if (!results.isEmpty()) {
        results.logExceptions();
        if (helper.getAwas().size() == 1) {
          String resultStr=results.getResultString();
          AWorkbench.popup(MessageType.Error,""String_Node_Str"",resultStr);
        }
 else {
          XResultData resultData=results.getResultXResultData();
          XResultDataUI.report(resultData,""String_Node_Str"");
        }
      }
    }
  }
);
}",0.9875720691864188
97516,"@Override public Collection<? extends IAtsUser> getToAssignees(){
  return Collections.emptyList();
}","@Override public Collection<? extends IAtsUser> getToAssignees(AbstractWorkflowArtifact awa) throws OseeCoreException {
  return awa.getAssignees();
}",0.6772908366533864
97517,"private void runGeneralXColTest(int expected,boolean isErrorCheck,IAttributeType attributeTypeToDelete,boolean testTaskTab) throws OseeCoreException {
  List<Artifact> arts=new ArrayList<Artifact>();
  List<Artifact> taskArts=new ArrayList<Artifact>();
  List<XViewerColumn> columns=getXViewer().getCustomizeMgr().getCurrentTableColumns();
  ITableLabelProvider labelProv=(ITableLabelProvider)getXViewer().getLabelProvider();
  TreeItem[] treeItem=getXViewer().getTree().getItems();
  NavigateTestUtil.getAllArtifactChildren(treeItem,arts);
  NavigateTestUtil.testExpectedVersusActual(""String_Node_Str"",expected,arts.size());
  if (testTaskTab) {
    getXViewer().expandAll();
    arts.clear();
    this.getAllTreeItems(getXViewer().getTree().getItems(),taskArts);
    TaskEditor.open(new TaskEditorSimpleProvider(""String_Node_Str"",getXViewer().getSelectedTaskArtifacts()));
    handleTableCustomization();
    columns=getXViewer().getCustomizeMgr().getCurrentTableColumns();
    verifyXColumns(labelProv,arts,columns);
  }
 else   if (isErrorCheck) {
    verifyXColumnsHasErrors(labelProv,arts,columns,attributeTypeToDelete);
  }
 else {
    verifyXColumns(labelProv,arts,columns);
  }
}","private void runGeneralXColTest(int expected,boolean isErrorCheck,IAttributeType attributeTypeToDelete,boolean testTaskTab) throws OseeCoreException {
  List<Artifact> arts=new ArrayList<Artifact>();
  List<Artifact> taskArts=new ArrayList<Artifact>();
  List<XViewerColumn> columns=getXViewer().getCustomizeMgr().getCurrentTableColumns();
  ITableLabelProvider labelProv=(ITableLabelProvider)getXViewer().getLabelProvider();
  TreeItem[] treeItem=getXViewer().getTree().getItems();
  NavigateTestUtil.getAllArtifactChildren(treeItem,arts);
  NavigateTestUtil.testExpectedVersusActual(""String_Node_Str"",expected,arts.size());
  if (testTaskTab) {
    getXViewer().expandAll();
    arts.clear();
    this.getAllTreeItems(getXViewer().getTree().getItems(),taskArts);
    TaskEditor.open(new TaskEditorSimpleProvider(""String_Node_Str"",getXViewer().getSelectedTaskArtifacts()));
    handleTableCustomization();
    getXViewer().expandAll();
    columns=getXViewer().getCustomizeMgr().getCurrentTableColumns();
    verifyXColumns(labelProv,arts,columns);
  }
 else   if (isErrorCheck) {
    verifyXColumnsHasErrors(labelProv,arts,columns,attributeTypeToDelete);
  }
 else {
    verifyXColumns(labelProv,arts,columns);
  }
}",0.9875311720698254
97518,"private void deleteAttributesForXColErrorTest(Collection<Artifact> arts,IAttributeType attributeTypeToDelete) throws Exception {
  Map<Artifact,Object> attributeValues=new HashMap<Artifact,Object>();
  getXViewer().expandAll();
  handleTableCustomization();
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),""String_Node_Str"");
  for (  Artifact art : arts) {
    attributeValues.put(art,art.getSoleAttributeValue(attributeTypeToDelete));
    art.deleteAttribute(attributeTypeToDelete,art.getSoleAttributeValue(attributeTypeToDelete));
    art.persist(transaction);
  }
  transaction.execute();
  try {
    runGeneralXColTest(20,true,attributeTypeToDelete,false);
  }
  finally {
    transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),""String_Node_Str"");
    for (    Artifact art : arts) {
      art.setSoleAttributeValue(attributeTypeToDelete,attributeValues.get(art));
      art.persist(transaction);
    }
    transaction.execute();
  }
}","private void deleteAttributesForXColErrorTest(Collection<Artifact> arts,IAttributeType attributeTypeToDelete) throws Exception {
  Map<Artifact,Object> attributeValues=new HashMap<Artifact,Object>();
  handleTableCustomization();
  getXViewer().expandAll();
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),""String_Node_Str"");
  for (  Artifact art : arts) {
    attributeValues.put(art,art.getSoleAttributeValue(attributeTypeToDelete));
    art.deleteAttribute(attributeTypeToDelete,art.getSoleAttributeValue(attributeTypeToDelete));
    art.persist(transaction);
  }
  transaction.execute();
  try {
    runGeneralXColTest(20,true,attributeTypeToDelete,false);
  }
  finally {
    transaction=TransactionManager.createTransaction(AtsUtil.getAtsBranch(),""String_Node_Str"");
    for (    Artifact art : arts) {
      art.setSoleAttributeValue(attributeTypeToDelete,attributeValues.get(art));
      art.persist(transaction);
    }
    transaction.execute();
  }
}",0.9701492537313432
97519,"private void saveAndCloseManagedViews(){
  Set<String> managedViewIds=determineManagedViews();
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (managedArea.getInstalledBundles().size() > 0 && workbench != null) {
    IWorkbenchPage page=null;
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() == null) {
      IWorkbenchWindow[] windows=workbench.getWorkbenchWindows();
      for (      IWorkbenchWindow win : windows) {
        page=win.getActivePage();
        if (page != null) {
          break;
        }
      }
    }
 else {
      page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    }
    if (page == null) {
      return;
    }
    IPerspectiveDescriptor originalPerspective=page.getPerspective();
    XMLMemento memento=XMLMemento.createWriteRoot(TAG_OTE_PRECOMPILED);
    IPerspectiveDescriptor[] pd=page.getOpenPerspectives();
    for (int i=0; i < pd.length; i++) {
      try {
        page.setPerspective(pd[i]);
      }
 catch (      Exception ex) {
      }
      IMemento perspectiveMemento=null;
      try {
        perspectiveMemento=memento.createChild(TAG_PERSPECTIVE);
        perspectiveMemento.putString(""String_Node_Str"",pd[i].getId());
      }
 catch (      Exception ex) {
      }
      IViewReference[] activeReferences=page.getViewReferences();
      for (      IViewReference viewReference : activeReferences) {
        if (managedViewIds.contains(viewReference.getId())) {
          if (perspectiveMemento != null) {
            try {
              IMemento viewMemento=perspectiveMemento.createChild(TAG_VIEW);
              viewMemento.putString(""String_Node_Str"",viewReference.getId());
              String secondaryId=viewReference.getSecondaryId();
              if (secondaryId != null) {
                viewMemento.putString(""String_Node_Str"",secondaryId);
              }
              IWorkbenchPart part=viewReference.getPart(false);
              if (part instanceof IViewPart) {
                IViewPart viewPart=(IViewPart)part;
                viewPart.saveState(viewMemento);
              }
            }
 catch (            Exception ex) {
            }
          }
          page.hideView(viewReference);
        }
      }
    }
    saveMementoToFile(memento);
    page.setPerspective(originalPerspective);
  }
}","private void saveAndCloseManagedViews(Set<String> managedViewIds,boolean save){
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (managedArea.getInstalledBundles().size() > 0 && workbench != null) {
    IWorkbenchPage page=null;
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() == null) {
      IWorkbenchWindow[] windows=workbench.getWorkbenchWindows();
      for (      IWorkbenchWindow win : windows) {
        page=win.getActivePage();
        if (page != null) {
          break;
        }
      }
    }
 else {
      page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    }
    if (page == null) {
      return;
    }
    IPerspectiveDescriptor originalPerspective=page.getPerspective();
    XMLMemento memento=XMLMemento.createWriteRoot(TAG_OTE_PRECOMPILED);
    IPerspectiveDescriptor[] pd=page.getOpenPerspectives();
    for (int i=0; i < pd.length; i++) {
      try {
        page.setPerspective(pd[i]);
      }
 catch (      Exception ex) {
      }
      IMemento perspectiveMemento=null;
      try {
        perspectiveMemento=memento.createChild(TAG_PERSPECTIVE);
        perspectiveMemento.putString(""String_Node_Str"",pd[i].getId());
      }
 catch (      Exception ex) {
      }
      IViewReference[] activeReferences=page.getViewReferences();
      for (      IViewReference viewReference : activeReferences) {
        if (managedViewIds.contains(viewReference.getId())) {
          if (perspectiveMemento != null) {
            try {
              IMemento viewMemento=perspectiveMemento.createChild(TAG_VIEW);
              viewMemento.putString(""String_Node_Str"",viewReference.getId());
              String secondaryId=viewReference.getSecondaryId();
              if (secondaryId != null) {
                viewMemento.putString(""String_Node_Str"",secondaryId);
              }
              IWorkbenchPart part=viewReference.getPart(false);
              if (part instanceof IViewPart) {
                IViewPart viewPart=(IViewPart)part;
                viewPart.saveState(viewMemento);
              }
            }
 catch (            Exception ex) {
            }
          }
          page.hideView(viewReference);
        }
      }
    }
    if (save) {
      saveMementoToFile(memento);
    }
    page.setPerspective(originalPerspective);
  }
}",0.9660393683755136
97520,"private void saveAndCloseViews(){
  PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      saveAndCloseManagedViews();
    }
  }
);
}","private void saveAndCloseViews(){
  PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      saveAndCloseManagedViews(determineManagedViews(),true);
    }
  }
);
}",0.9282051282051282
97521,"public WorkspaceBundleLoadCoordinator(File temporaryBundleLocationFolder){
  bundlesToCheck=new HashSet<String>();
  this.temporaryBundleLocationFolder=temporaryBundleLocationFolder;
  if (!temporaryBundleLocationFolder.exists()) {
    if (!temporaryBundleLocationFolder.mkdirs()) {
      this.temporaryBundleLocationFolder=makeTempFolder();
    }
  }
 else   if (temporaryBundleLocationFolder.exists() && !temporaryBundleLocationFolder.isDirectory()) {
    this.temporaryBundleLocationFolder=makeTempFolder();
  }
 else   if (temporaryBundleLocationFolder.exists()) {
    cleanOutDirectory();
  }
  Bundle bundle=FrameworkUtil.getBundle(getClass());
  for (  Bundle findit : bundle.getBundleContext().getBundles()) {
    wiring=findit.adapt(FrameworkWiring.class);
    if (wiring != null) {
      break;
    }
  }
}","public WorkspaceBundleLoadCoordinator(File temporaryBundleLocationFolder){
  bundlesToCheck=new HashSet<String>();
  this.temporaryBundleLocationFolder=temporaryBundleLocationFolder;
  if (!temporaryBundleLocationFolder.exists()) {
    if (!temporaryBundleLocationFolder.mkdirs()) {
      this.temporaryBundleLocationFolder=makeTempFolder();
    }
  }
 else   if (temporaryBundleLocationFolder.exists() && !temporaryBundleLocationFolder.isDirectory()) {
    this.temporaryBundleLocationFolder=makeTempFolder();
  }
 else   if (temporaryBundleLocationFolder.exists()) {
    cleanOutDirectory();
  }
  Bundle bundle=FrameworkUtil.getBundle(getClass());
  for (  Bundle findit : bundle.getBundleContext().getBundles()) {
    wiring=findit.adapt(FrameworkWiring.class);
    if (wiring != null) {
      break;
    }
  }
  Thread th=new Thread(new Runnable(){
    @Override public void run(){
      int lastSize=0;
      while (true) {
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
        }
        if (lastSize == bundlesToCheck.size()) {
          if (lastSize != 0) {
            if (bundlesToCheck.size() > 0) {
              lastSize=0;
              Jobs.runInJob(new RefreshWorkspaceBundles(),false);
              try {
                Thread.sleep(1000 * 30);
              }
 catch (              InterruptedException e) {
              }
            }
          }
        }
 else {
          lastSize=bundlesToCheck.size();
        }
      }
    }
  }
);
  th.setName(""String_Node_Str"");
  th.setDaemon(true);
  th.start();
}",0.6800166875260742
97522,"private void forceViewRegistryReload(IWorkbench workbench,IViewRegistry registry){
  try {
    Method[] methods=registry.getClass().getDeclaredMethods();
    Method method=null;
    for (    Method m : methods) {
      if (m.getName().equals(""String_Node_Str"")) {
        method=m;
        break;
      }
    }
    if (method != null) {
      boolean access=method.isAccessible();
      method.setAccessible(true);
      try {
        method.invoke(registry);
      }
  finally {
        method.setAccessible(access);
      }
    }
  }
 catch (  Throwable th) {
    OseeLog.log(this.getClass(),Level.SEVERE,th);
  }
}","@SuppressWarnings({""String_Node_Str""}) private void forceViewRegistryReload(IWorkbench workbench,IViewRegistry registry){
  try {
    Field field1=registry.getClass().getDeclaredField(""String_Node_Str"");
    Field field2=registry.getClass().getDeclaredField(""String_Node_Str"");
    Field field3=registry.getClass().getDeclaredField(""String_Node_Str"");
    field1.setAccessible(true);
    field2.setAccessible(true);
    field3.setAccessible(true);
    ((Map)field1.get(registry)).clear();
    ((List)field2.get(registry)).clear();
    ((Map)field3.get(registry)).clear();
    field1.setAccessible(false);
    field2.setAccessible(false);
    field3.setAccessible(false);
    Method[] methods=registry.getClass().getDeclaredMethods();
    Method method=null;
    for (    Method m : methods) {
      if (m.getName().equals(""String_Node_Str"")) {
        method=m;
        break;
      }
    }
    if (method != null) {
      boolean access=method.isAccessible();
      method.setAccessible(true);
      try {
        method.invoke(registry);
      }
  finally {
        method.setAccessible(access);
      }
    }
  }
 catch (  Throwable th) {
    OseeLog.log(this.getClass(),Level.SEVERE,th);
  }
}",0.6802646085997794
97523,"private Set<String> determineManagedViews(){
  Set<String> managedViewIds=new HashSet<String>();
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension ex : extensions) {
    String name=ex.getContributor().getName();
    if (managedArea.getByBundleName(name) != null) {
      IConfigurationElement[] elements=ex.getConfigurationElements();
      for (      IConfigurationElement el : elements) {
        if (el.getName().equals(TAG_VIEW)) {
          String id=el.getAttribute(""String_Node_Str"");
          if (id != null) {
            managedViewIds.add(id);
          }
        }
      }
    }
  }
  return managedViewIds;
}","private Set<String> determineManagedViews(List<BundleInfoLite> uninstallList){
  Set<String> managedViewIds=new HashSet<String>();
  IExtensionRegistry extensionRegistry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=extensionRegistry.getExtensionPoint(""String_Node_Str"");
  IExtension[] extensions=extensionPoint.getExtensions();
  for (  IExtension ex : extensions) {
    String name=ex.getContributor().getName();
    if (managedArea.getByBundleName(name) != null) {
      IConfigurationElement[] elements=ex.getConfigurationElements();
      for (      IConfigurationElement el : elements) {
        if (el.getName().equals(TAG_VIEW)) {
          String id=el.getAttribute(""String_Node_Str"");
          if (id != null) {
            if (uninstallList != null) {
              for (              BundleInfoLite infoLite : uninstallList) {
                if (name.equals(infoLite.getSymbolicName())) {
                  managedViewIds.add(id);
                  break;
                }
              }
            }
 else {
              managedViewIds.add(id);
            }
          }
        }
      }
    }
  }
  return managedViewIds;
}",0.821446636317653
97524,"@Override public void frameworkEvent(FrameworkEvent event){
  if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
    startBundles(bundles,master.newChild(80));
    waitForViewsToBeRegistered(master.newChild(15));
    PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        restoreStateFromMemento(master.newChild(5));
      }
    }
);
  }
}","@Override public void frameworkEvent(FrameworkEvent event){
  if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
    startBundles(bundles,master.newChild(80));
    waitForViewsToBeRegistered(master.newChild(15));
    PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        restoreStateFromMemento(master.newChild(5));
      }
    }
);
synchronized (waitForLoad) {
      waitForLoad.notifyAll();
    }
  }
}",0.923963133640553
97525,"public synchronized void installLatestBundles(SubMonitor subMonitor){
  final SubMonitor master=SubMonitor.convert(subMonitor,100);
  final List<BundleInfoLite> bundles=managedArea.getLatestBundles();
  Collection<Bundle> bundlesToRefresh=new ArrayList<Bundle>();
  for (  BundleInfoLite info : bundles) {
    if (!info.isInstalled()) {
      try {
        List<BundleInfoLite> uninstallList=managedArea.getByBundleName(info.getSymbolicName());
        if (uninstallList.size() > 1) {
          for (          BundleInfoLite toUninstall : uninstallList) {
            if (toUninstall.isInstalled()) {
              Bundle bundle=toUninstall.uninstall();
              bundlesToRefresh.add(bundle);
            }
          }
        }
      }
 catch (      BundleException e) {
        OseeLog.log(WorkspaceBundleLoadCoordinator.class,Level.WARNING,e);
      }
    }
  }
  if (wiring != null && bundlesToRefresh.size() > 0) {
    wiring.refreshBundles(bundlesToRefresh,new FrameworkListener(){
      @Override public void frameworkEvent(      FrameworkEvent event){
        if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
          startBundles(bundles,master.newChild(80));
          waitForViewsToBeRegistered(master.newChild(15));
          PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              restoreStateFromMemento(master.newChild(5));
            }
          }
);
        }
      }
    }
);
  }
 else {
    startBundles(bundles,master.newChild(80));
    waitForViewsToBeRegistered(master.newChild(15));
    final SubMonitor restore=master.newChild(5);
    PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        restoreStateFromMemento(restore);
      }
    }
);
  }
}","public synchronized void installLatestBundles(SubMonitor subMonitor){
  final SubMonitor master=SubMonitor.convert(subMonitor,100);
  final List<BundleInfoLite> bundles=managedArea.getLatestBundles();
  Collection<Bundle> bundlesToRefresh=new ArrayList<Bundle>();
  for (  BundleInfoLite info : bundles) {
    if (!info.isInstalled()) {
      try {
        List<BundleInfoLite> uninstallList=managedArea.getByBundleName(info.getSymbolicName());
        if (uninstallList.size() > 1) {
          for (          BundleInfoLite toUninstall : uninstallList) {
            if (toUninstall.isInstalled()) {
              closeUpdatedViews(uninstallList);
              Bundle bundle=toUninstall.uninstall();
              bundlesToRefresh.add(bundle);
            }
          }
        }
      }
 catch (      BundleException e) {
        OseeLog.log(WorkspaceBundleLoadCoordinator.class,Level.WARNING,e);
      }
    }
  }
  if (wiring != null && bundlesToRefresh.size() > 0) {
    final Object waitForLoad=new Object();
    wiring.refreshBundles(bundlesToRefresh,new FrameworkListener(){
      @Override public void frameworkEvent(      FrameworkEvent event){
        if (FrameworkEvent.PACKAGES_REFRESHED == event.getType()) {
          startBundles(bundles,master.newChild(80));
          waitForViewsToBeRegistered(master.newChild(15));
          PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              restoreStateFromMemento(master.newChild(5));
            }
          }
);
synchronized (waitForLoad) {
            waitForLoad.notifyAll();
          }
        }
      }
    }
);
synchronized (waitForLoad) {
      try {
        waitForLoad.wait(20000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
 else {
    startBundles(bundles,master.newChild(80));
    waitForViewsToBeRegistered(master.newChild(15));
    final SubMonitor restore=master.newChild(5);
    PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        restoreStateFromMemento(restore);
      }
    }
);
  }
}",0.9220945083014048
97526,"@Test public void testHashCode(){
  WorkDefinition obj=new WorkDefinition(""String_Node_Str"");
  Assert.assertEquals(99162353,obj.hashCode());
  obj=new WorkDefinition(""String_Node_Str"");
  obj.setName(null);
  Assert.assertEquals(31,obj.hashCode());
}","@Test public void testHashCode(){
  WorkDefinition obj=new WorkDefinition(""String_Node_Str"");
  Assert.assertEquals(99162353,obj.hashCode());
  obj=new WorkDefinition(""String_Node_Str"");
  obj.setId(null);
  Assert.assertEquals(31,obj.hashCode());
}",0.988
97527,"@Test public void testGetIds(){
  WorkDefinition def=new WorkDefinition(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",def.getId());
  Assert.assertEquals(""String_Node_Str"",def.getId());
  def.setId(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",def.getId());
  def.setId(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",def.getId());
}","@Test public void testGetIds(){
  WorkDefinition def=new WorkDefinition(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",def.getId());
  def.setId(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",def.getId());
  def.setId(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",def.getId());
}",0.8294797687861272
97528,"@Test public void testEqualsObject(){
  IAtsWorkDefinition obj=new WorkDefinition(""String_Node_Str"");
  Assert.assertTrue(obj.equals(obj));
  IAtsWorkDefinition obj2=new WorkDefinition(""String_Node_Str"");
  Assert.assertTrue(obj.equals(obj2));
  Assert.assertFalse(obj.equals(null));
  Assert.assertFalse(obj.equals(""String_Node_Str""));
  WorkDefinition obj3=new WorkDefinition(""String_Node_Str"");
  obj3.setName(null);
  Assert.assertFalse(obj.equals(obj3));
  Assert.assertFalse(obj3.equals(obj));
  WorkDefinition obj4=new WorkDefinition(""String_Node_Str"");
  obj4.setName(null);
  Assert.assertFalse(obj3.equals(obj4));
}","@Test public void testEqualsObject(){
  IAtsWorkDefinition obj=new WorkDefinition(""String_Node_Str"");
  Assert.assertTrue(obj.equals(obj));
  IAtsWorkDefinition obj2=new WorkDefinition(""String_Node_Str"");
  Assert.assertTrue(obj.equals(obj2));
  Assert.assertFalse(obj.equals(null));
  Assert.assertFalse(obj.equals(""String_Node_Str""));
  WorkDefinition obj3=new WorkDefinition(""String_Node_Str"");
  obj3.setId(null);
  Assert.assertFalse(obj.equals(obj3));
  Assert.assertFalse(obj3.equals(obj));
  WorkDefinition obj4=new WorkDefinition(""String_Node_Str"");
  obj4.setName(null);
  Assert.assertFalse(obj3.equals(obj4));
}",0.9951923076923076
97529,"private Collection<ChangeItem> createMissingChangeItems(TransactionRecord sourceTx,TransactionRecord destTx,String sessionId,final Set<Integer> modifiedArtIds,final Multimap<Integer,Integer> modifiedAttrIds,final Multimap<Integer,Integer> modifiedRels,final Set<Integer> missingArtIds,final Set<Integer> allArtIds) throws OseeCoreException {
  final Set<ChangeItem> toReturn=new LinkedHashSet<ChangeItem>();
  final Set<RelationData> relations=new LinkedHashSet<RelationData>();
  DataLoader loader=dataLoaderFactory.fromBranchAndArtifactIds(sessionId,sourceTx.getBranch(),missingArtIds);
  loader.setLoadLevel(LoadLevel.FULL);
  loader.includeDeleted();
  loader.fromTransaction(sourceTx.getId());
  loader.load(null,new ArtifactBuilder(){
    @Override public ArtifactDataHandler createArtifactDataHandler(){
      return new ArtifactDataHandler(){
        @Override public void onData(        ArtifactData data) throws OseeCoreException {
          if (!modifiedArtIds.contains(data.getLocalId())) {
            toReturn.add(createArtifactChangeItem(data));
          }
        }
      }
;
    }
    @Override public RelationDataHandler createRelationDataHandler(){
      return new RelationDataHandler(){
        @Override public void onData(        RelationData data){
          if (!modifiedRels.get(data.getArtIdA()).contains(data.getLocalId()) && !modifiedRels.get(data.getArtIdB()).contains(data.getLocalId())) {
            relations.add(data);
          }
        }
      }
;
    }
    @Override public AttributeDataHandler createAttributeDataHandler(){
      return new AttributeDataHandler(){
        @Override public void onData(        AttributeData data) throws OseeCoreException {
          if (!modifiedAttrIds.get(data.getArtifactId()).contains(data.getLocalId())) {
            toReturn.add(createAttributeChangeItem(data));
          }
        }
      }
;
    }
    @Override public List<ArtifactReadable> getArtifacts(){
      return null;
    }
  }
);
  if (!relations.isEmpty()) {
    Multimap<Integer,RelationData> relationChangesToAdd=LinkedListMultimap.create();
    for (    RelationData data : relations) {
      if (allArtIds.contains(data.getArtIdA())) {
        if (allArtIds.contains(data.getArtIdB())) {
          toReturn.add(createRelationChangeItem(data));
        }
 else {
          relationChangesToAdd.put(data.getArtIdB(),data);
        }
      }
 else       if (allArtIds.contains(data.getArtIdB())) {
        relationChangesToAdd.put(data.getArtIdA(),data);
      }
    }
    toReturn.addAll(createExistingRelations(destTx,sessionId,relationChangesToAdd));
  }
  return toReturn;
}","private Collection<ChangeItem> createMissingChangeItems(TransactionRecord sourceTx,TransactionRecord destTx,String sessionId,final Set<Integer> modifiedArtIds,final Multimap<Integer,Integer> modifiedAttrIds,final Multimap<Integer,Integer> modifiedRels,final Set<Integer> missingArtIds,final Set<Integer> allArtIds) throws OseeCoreException {
  final Set<ChangeItem> toReturn=new LinkedHashSet<ChangeItem>();
  final Set<RelationData> relations=new LinkedHashSet<RelationData>();
  DataLoader loader=dataLoaderFactory.fromBranchAndArtifactIds(sessionId,sourceTx.getBranch(),missingArtIds);
  loader.setLoadLevel(LoadLevel.FULL);
  loader.includeDeleted();
  loader.fromTransaction(sourceTx.getId());
  loader.load(null,new ArtifactBuilder(){
    @Override public ArtifactDataHandler createArtifactDataHandler(){
      return new ArtifactDataHandler(){
        @Override public void onData(        ArtifactData data) throws OseeCoreException {
          if (!modifiedArtIds.contains(data.getLocalId())) {
            toReturn.add(createArtifactChangeItem(data));
          }
        }
      }
;
    }
    @Override public RelationDataHandler createRelationDataHandler(){
      return new RelationDataHandler(){
        @Override public void onData(        RelationData data){
          int localId=data.getLocalId();
          if (!modifiedRels.get(data.getArtIdA()).contains(localId) && !modifiedRels.get(data.getArtIdB()).contains(localId)) {
            relations.add(data);
          }
        }
      }
;
    }
    @Override public AttributeDataHandler createAttributeDataHandler(){
      return new AttributeDataHandler(){
        @Override public void onData(        AttributeData data) throws OseeCoreException {
          if (!modifiedAttrIds.get(data.getArtifactId()).contains(data.getLocalId())) {
            toReturn.add(createAttributeChangeItem(data));
          }
        }
      }
;
    }
    @Override public List<ArtifactReadable> getArtifacts(){
      return null;
    }
  }
);
  if (!relations.isEmpty()) {
    Multimap<Integer,RelationData> relationChangesToAdd=LinkedListMultimap.create();
    for (    RelationData data : relations) {
      if (allArtIds.contains(data.getArtIdA())) {
        if (allArtIds.contains(data.getArtIdB())) {
          toReturn.add(createRelationChangeItem(data));
        }
 else {
          relationChangesToAdd.put(data.getArtIdB(),data);
        }
      }
 else       if (allArtIds.contains(data.getArtIdB())) {
        relationChangesToAdd.put(data.getArtIdA(),data);
      }
    }
    toReturn.addAll(createExistingRelations(destTx,sessionId,relationChangesToAdd));
  }
  return toReturn;
}",0.9831151584139632
97530,"@Override public Collection<ChangeItem> createMissingChanges(List<ChangeItem> changes,TransactionRecord sourceTx,TransactionRecord destTx,String sessionId) throws OseeCoreException {
  if (changes != null && !changes.isEmpty()) {
    Set<Integer> modifiedArtIds=new HashSet<Integer>();
    Multimap<Integer,Integer> modifiedAttrIds=LinkedListMultimap.create();
    Multimap<Integer,Integer> modifiedRels=LinkedListMultimap.create();
    for (    ChangeItem change : changes) {
      if (change instanceof AttributeChangeItem) {
        modifiedAttrIds.put(change.getArtId(),change.getItemId());
      }
 else       if (change instanceof ArtifactChangeItem) {
        if (!change.isSynthetic()) {
          modifiedArtIds.add(change.getArtId());
        }
      }
 else       if (change instanceof RelationChangeItem) {
        modifiedRels.put(change.getArtId(),change.getItemId());
      }
    }
    Set<Integer> allArtIds=new HashSet<Integer>(modifiedArtIds);
    allArtIds.addAll(modifiedAttrIds.keySet());
    allArtIds.addAll(modifiedRels.keySet());
    Set<Integer> missingArtIds=determineWhichArtifactsNotOnDestination(allArtIds,destTx,sessionId);
    if (!missingArtIds.isEmpty()) {
      return createMissingChangeItems(sourceTx,destTx,sessionId,modifiedArtIds,modifiedAttrIds,modifiedRels,missingArtIds,allArtIds);
    }
  }
  return Collections.emptyList();
}","@Override public Collection<ChangeItem> createMissingChanges(List<ChangeItem> changes,TransactionRecord sourceTx,TransactionRecord destTx,String sessionId) throws OseeCoreException {
  if (changes != null && !changes.isEmpty()) {
    Set<Integer> modifiedArtIds=new HashSet<Integer>();
    Multimap<Integer,Integer> modifiedAttrIds=LinkedListMultimap.create();
    Multimap<Integer,Integer> modifiedRels=LinkedListMultimap.create();
    for (    ChangeItem change : changes) {
      if (change instanceof AttributeChangeItem) {
        modifiedAttrIds.put(change.getArtId(),change.getItemId());
      }
 else       if (change instanceof ArtifactChangeItem) {
        if (!change.isSynthetic()) {
          modifiedArtIds.add(change.getArtId());
        }
      }
 else       if (change instanceof RelationChangeItem) {
        modifiedRels.put(change.getArtId(),change.getItemId());
        modifiedRels.put(((RelationChangeItem)change).getBArtId(),change.getItemId());
      }
    }
    Set<Integer> allArtIds=new HashSet<Integer>(modifiedArtIds);
    allArtIds.addAll(modifiedAttrIds.keySet());
    allArtIds.addAll(modifiedRels.keySet());
    Set<Integer> missingArtIds=determineWhichArtifactsNotOnDestination(allArtIds,destTx,sessionId);
    if (!missingArtIds.isEmpty()) {
      return createMissingChangeItems(sourceTx,destTx,sessionId,modifiedArtIds,modifiedAttrIds,modifiedRels,missingArtIds,allArtIds);
    }
  }
  return Collections.emptyList();
}",0.9692253272019808
97531,"private static Collection<IXWidgetProvider> getXWidgetProviders(){
  ExtensionDefinedObjects<IXWidgetProvider> contributions=new ExtensionDefinedObjects<IXWidgetProvider>(Activator.PLUGIN_ID + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  return contributions.getObjects();
}","private static Collection<IXWidgetProvider> getXWidgetProviders(){
  ExtensionDefinedObjects<IXWidgetProvider> contributions=new ExtensionDefinedObjects<IXWidgetProvider>(Activator.PLUGIN_ID + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  return contributions.getObjects();
}",0.9913644214162348
97532,"public boolean isWordAttribute(){
  return isWordAttribute;
}","public boolean isWordAttribute(){
  boolean toReturn=false;
  try {
    toReturn=getAttributeType().equals(CoreAttributeTypes.WordTemplateContent);
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
  }
  return toReturn;
}",0.2515337423312883
97533,"@Override public String getMergeDisplayData() throws OseeCoreException {
  ConflictStatus status=getStatus();
  if (status.isUntouched() && !(sourceEqualsDestination() && mergeEqualsSource()) || status.isInformational()) {
    return NO_VALUE;
  }
  if (!isWordAttribute) {
    return getMergeObject() == null ? null : getMergeObject().toString();
  }
  return AttributeConflict.STREAM_DATA;
}","@Override public String getMergeDisplayData() throws OseeCoreException {
  ConflictStatus status=getStatus();
  if (status.isUntouched() && !(sourceEqualsDestination() && mergeEqualsSource()) || status.isInformational()) {
    return NO_VALUE;
  }
  if (!isWordAttribute()) {
    return getMergeObject() == null ? null : getMergeObject().toString();
  }
  return AttributeConflict.STREAM_DATA;
}",0.9974619289340102
97534,"public AttributeConflict(int sourceGamma,int destGamma,int artId,TransactionRecord commitTransaction,String sourceValue,int attrId,int attrTypeId,Branch mergeBranch,Branch destBranch) throws OseeCoreException {
  super(sourceGamma,destGamma,artId,commitTransaction,mergeBranch,destBranch);
  this.attrId=attrId;
  this.attrTypeId=attrTypeId;
  this.status=ConflictStatus.EDITED;
  this.isWordAttribute=getAttributeType().equals(CoreAttributeTypes.WordTemplateContent);
  computeEqualsValues();
}","public AttributeConflict(int sourceGamma,int destGamma,int artId,TransactionRecord commitTransaction,String sourceValue,int attrId,int attrTypeId,Branch mergeBranch,Branch destBranch) throws OseeCoreException {
  super(sourceGamma,destGamma,artId,commitTransaction,mergeBranch,destBranch);
  this.attrId=attrId;
  this.attrTypeId=attrTypeId;
  this.status=ConflictStatus.EDITED;
  computeEqualsValues();
}",0.9
97535,"public boolean wordMarkupPresent() throws OseeCoreException {
  if (isWordAttribute && ((WordAttribute)getAttribute()).containsWordAnnotations()) {
    return true;
  }
  return false;
}","public boolean wordMarkupPresent() throws OseeCoreException {
  if (isWordAttribute() && ((WordAttribute)getAttribute()).containsWordAnnotations()) {
    return true;
  }
  return false;
}",0.9946524064171124
97536,"@Override public String getDestDisplayData() throws OseeCoreException {
  String displayValue=isWordAttribute ? STREAM_DATA : getDestObject() == null ? ""String_Node_Str"" : getDestObject().toString();
  try {
    getDestAttribute();
  }
 catch (  AttributeDoesNotExist ex) {
    displayValue=""String_Node_Str"";
  }
  return displayValue;
}","@Override public String getDestDisplayData() throws OseeCoreException {
  String displayValue=isWordAttribute() ? STREAM_DATA : getDestObject() == null ? ""String_Node_Str"" : getDestObject().toString();
  try {
    getDestAttribute();
  }
 catch (  AttributeDoesNotExist ex) {
    displayValue=""String_Node_Str"";
  }
  return displayValue;
}",0.9970501474926252
97537,"@Override public String getSourceDisplayData() throws OseeCoreException {
  String displayValue=isWordAttribute ? STREAM_DATA : getSourceObject() == null ? ""String_Node_Str"" : getSourceObject().toString();
  try {
    getSourceAttribute(false);
  }
 catch (  AttributeDoesNotExist ex) {
    displayValue=""String_Node_Str"";
  }
  return displayValue;
}","@Override public String getSourceDisplayData() throws OseeCoreException {
  String displayValue=isWordAttribute() ? STREAM_DATA : getSourceObject() == null ? ""String_Node_Str"" : getSourceObject().toString();
  try {
    getSourceAttribute(false);
  }
 catch (  AttributeDoesNotExist ex) {
    displayValue=""String_Node_Str"";
  }
  return displayValue;
}",0.9971590909090908
97538,"@Override public boolean clearValue() throws OseeCoreException {
  if (!getStatus().isOverwriteAllowed()) {
    if (DEBUG) {
      System.out.println(String.format(""String_Node_Str"",getAttrId()));
    }
    return false;
  }
  if (DEBUG) {
    System.out.println(String.format(""String_Node_Str"",getAttrId()));
  }
  setStatus(ConflictStatus.UNTOUCHED);
  if (isWordAttribute) {
    getAttribute().resetToDefaultValue();
    getArtifact().persist(getClass().getSimpleName());
  }
 else {
    getArtifact().setSoleAttributeFromString(getAttributeType(),NO_VALUE);
    getArtifact().persist(getClass().getSimpleName());
  }
  computeEqualsValues();
  return true;
}","@Override public boolean clearValue() throws OseeCoreException {
  if (!getStatus().isOverwriteAllowed()) {
    if (DEBUG) {
      System.out.println(String.format(""String_Node_Str"",getAttrId()));
    }
    return false;
  }
  if (DEBUG) {
    System.out.println(String.format(""String_Node_Str"",getAttrId()));
  }
  setStatus(ConflictStatus.UNTOUCHED);
  if (isWordAttribute()) {
    getAttribute().resetToDefaultValue();
    getArtifact().persist(getClass().getSimpleName());
  }
 else {
    getArtifact().setSoleAttributeFromString(getAttributeType(),NO_VALUE);
    getArtifact().persist(getClass().getSimpleName());
  }
  computeEqualsValues();
  return true;
}",0.9984917043740572
97539,"@Override public void setStatus(ConflictStatus status) throws OseeCoreException {
  if (status.equals(ConflictStatus.RESOLVED) && isWordAttribute && ((WordAttribute)getAttribute()).containsWordAnnotations()) {
    throw new OseeStateException(RESOLVE_MERGE_MARKUP);
  }
  super.setStatus(status);
}","@Override public void setStatus(ConflictStatus status) throws OseeCoreException {
  if (status.equals(ConflictStatus.RESOLVED) && isWordAttribute() && ((WordAttribute)getAttribute()).containsWordAnnotations()) {
    throw new OseeStateException(RESOLVE_MERGE_MARKUP);
  }
  super.setStatus(status);
}",0.9966555183946488
97540,"public AbstractSelectionEnabledHandler(MenuManager menuManager){
  menuManager.getMenu().addMenuListener(this);
}","protected AbstractSelectionEnabledHandler(){
}",0.490566037735849
97541,"@Override public void createCommonSection(List<XNavigateItem> items,List<String> excludeSectionIds){
  Map<String,XNavigateItem> nameToParent=new HashMap<String,XNavigateItem>();
  XNavigateItem blamOperationItems=new XNavigateItem(null,""String_Node_Str"",FrameworkImage.BLAM);
  for (  AbstractBlam blamOperation : BlamContributionManager.getBlamOperations()) {
    for (    String category : blamOperation.getCategories()) {
      try {
        if (AccessControlManager.isOseeAdmin() || !category.contains(""String_Node_Str"") || category.contains(""String_Node_Str"") && AccessControlManager.isOseeAdmin()) {
          createCategories(category.split(""String_Node_Str""),0,blamOperationItems,nameToParent);
        }
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
    }
  }
  for (  AbstractBlam blamOperation : BlamContributionManager.getBlamOperations()) {
    if (blamOperation.getCategories().isEmpty()) {
      new XNavigateItemBlam(blamOperationItems,blamOperation);
    }
    for (    String category : blamOperation.getCategories()) {
      if (nameToParent.get(category) != null) {
        new XNavigateItemBlam(nameToParent.get(category),blamOperation);
      }
    }
  }
  items.add(blamOperationItems);
}","@Override public void createCommonSection(List<XNavigateItem> items,List<String> excludeSectionIds){
  Map<String,XNavigateItem> nameToParent=new HashMap<String,XNavigateItem>();
  XNavigateItem blamOperationItems=new XNavigateItem(null,""String_Node_Str"",FrameworkImage.BLAM);
  for (  AbstractBlam blamOperation : getBlamOperations()) {
    for (    String category : blamOperation.getCategories()) {
      try {
        if (AccessControlManager.isOseeAdmin() || !category.contains(""String_Node_Str"") || category.contains(""String_Node_Str"") && AccessControlManager.isOseeAdmin()) {
          createCategories(category.split(""String_Node_Str""),0,blamOperationItems,nameToParent);
        }
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
    }
  }
  for (  AbstractBlam blamOperation : BlamContributionManager.getBlamOperations()) {
    if (blamOperation.getCategories().isEmpty()) {
      new XNavigateItemBlam(blamOperationItems,blamOperation);
    }
    for (    String category : blamOperation.getCategories()) {
      if (nameToParent.get(category) != null) {
        new XNavigateItemBlam(nameToParent.get(category),blamOperation);
      }
    }
  }
  items.add(blamOperationItems);
}",0.9904912836767036
97542,"public static Map<String,AbstractBlam> getBlamMap(){
  if (blams == null) {
    ExtensionDefinedObjects<AbstractBlam> definedObjects=new ExtensionDefinedObjects<AbstractBlam>(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    blams=new TreeMap<String,AbstractBlam>();
    for (    AbstractBlam blam : definedObjects.getObjects()) {
      blams.put(blam.getName(),blam);
    }
  }
  return blams;
}","public synchronized static Map<String,AbstractBlam> getBlamMap(){
  if (blams == null) {
    blams=new TreeMap<String,AbstractBlam>();
    ExtensionDefinedObjects<AbstractBlam> definedObjects=new ExtensionDefinedObjects<AbstractBlam>(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    for (    AbstractBlam blam : definedObjects.getObjects()) {
      blams.put(blam.getName(),blam);
    }
  }
  return blams;
}",0.8727272727272727
97543,"/** 
 * @return true if the cycleCount == 0, otherwise false
 */
public boolean cycleOccurred(){
  if (cycleCount == -1) {
    return true;
  }
  if (cycleCount == 0) {
synchronized (objToNotify) {
      objToNotify.setTimeout(true);
      objToNotify.notifyAll();
    }
    return true;
  }
  cycleCount--;
  return false;
}","/** 
 * @return true if the countdown is complete/canceled, otherwise false
 */
public boolean cycleOccurred(){
  if (cycleCount == 0 && !completed) {
    completed=true;
synchronized (objToNotify) {
      objToNotify.setTimeout(true);
      objToNotify.notifyAll();
    }
  }
 else {
    cycleCount--;
  }
  return completed;
}",0.5329249617151608
97544,"/** 
 * @param objToNotify The Object that is in wait() on which we will call notifyAll()
 * @param cycleCount The number of cycles to countdown.
 */
public CycleCountDown(IScriptControl scriptLock,ITimeout objToNotify,int cycleCount){
  super();
  this.scriptLock=scriptLock;
  this.cycleCount=cycleCount;
  this.objToNotify=objToNotify;
  objToNotify.setTimeout(false);
}","/** 
 * @param objToNotify The Object that is in wait() on which we will call notifyAll()
 * @param cycleCount The number of cycles to countdown.
 */
public CycleCountDown(IScriptControl scriptLock,ITimeout objToNotify,int cycleCount){
  super();
  this.scriptLock=scriptLock;
  this.cycleCount=cycleCount;
  this.objToNotify=objToNotify;
  this.completed=false;
  objToNotify.setTimeout(false);
}",0.9688311688311688
97545,"@Override public void cancelTimer(){
  this.cycleCount=-1;
  if (this.scriptLock != null) {
    this.scriptLock.lock();
  }
}","@Override public void cancelTimer(){
  this.completed=true;
  if (this.scriptLock != null) {
    this.scriptLock.lock();
  }
}",0.9243027888446216
97546,"@Override public ICancelTimer setTimerFor(ITimeout objToNotify,int milliseconds){
  try {
    scriptControl.unlock();
  }
 catch (  IllegalMonitorStateException ex) {
    if (!Thread.currentThread().getName().contains(""String_Node_Str"") || !Thread.currentThread().getName().contains(""String_Node_Str"")) {
      OseeLog.log(MessageSystemTestEnvironment.class,Level.SEVERE,ex);
    }
  }
  CycleCountDown cycleCountDown=new CycleCountDown(scriptControl,objToNotify,(int)Math.rint(milliseconds / (1000.0 / EnvironmentTask.cycleResolution)) - 1);
synchronized (cycleCounters) {
    cycleCounters.add(cycleCountDown);
  }
  return cycleCountDown;
}","@Override public ICancelTimer setTimerFor(ITimeout objToNotify,int milliseconds){
  CycleCountDown cycleCountDown=new CycleCountDown(scriptControl,objToNotify,(int)Math.rint(milliseconds / (1000.0 / EnvironmentTask.cycleResolution)) - 1);
synchronized (cycleCounters) {
    cycleCounters.add(cycleCountDown);
  }
  try {
    scriptControl.unlock();
  }
 catch (  IllegalMonitorStateException ex) {
    if (!Thread.currentThread().getName().contains(""String_Node_Str"") || !Thread.currentThread().getName().contains(""String_Node_Str"")) {
      OseeLog.log(MessageSystemTestEnvironment.class,Level.SEVERE,ex);
    }
  }
  return cycleCountDown;
}",0.6283048211508554
97547,"@Before public void init() throws OseeCoreException {
  MockitoAnnotations.initMocks(this);
  artifactFactory=new ArtifactFactory(dataFactory,attributeFactory,relationFactory,artifactTypeCache,branchCache);
  guid=GUID.create();
  types=new ArrayList<IAttributeType>();
  types.add(CoreAttributeTypes.RelationOrder);
  types.add(CoreAttributeTypes.City);
  types.add(CoreAttributeTypes.Annotation);
  when(artifactData.getLocalId()).thenReturn(45);
  when(artifactData.getGuid()).thenReturn(guid);
  when(artifactData.getTypeUuid()).thenReturn(65L);
  when(artifactData.getVersion()).thenReturn(artifactVersion);
  when(artifactVersion.getBranchId()).thenReturn(23);
  when(otherArtifactData.getLocalId()).thenReturn(45);
  when(otherArtifactData.getGuid()).thenReturn(guid);
  when(otherArtifactData.getTypeUuid()).thenReturn(65L);
  when(otherArtifactData.getVersion()).thenReturn(artifactVersion);
  when(relationFactory.createRelationContainer(45)).thenReturn(relationContainer);
  when(artifactTypeCache.getByGuid(65L)).thenReturn(artifactType);
  when(branchCache.getById(23)).thenReturn(branch);
}","@Before public void init() throws OseeCoreException {
  MockitoAnnotations.initMocks(this);
  artifactFactory=new ArtifactFactory(dataFactory,attributeFactory,relationFactory,artifactTypeCache,branchCache);
  guid=GUID.create();
  types=new ArrayList<IAttributeType>();
  types.add(CoreAttributeTypes.RelationOrder);
  types.add(CoreAttributeTypes.City);
  types.add(CoreAttributeTypes.Annotation);
  when(artifactData.getLocalId()).thenReturn(45);
  when(artifactData.getGuid()).thenReturn(guid);
  when(artifactData.getTypeUuid()).thenReturn(65L);
  when(artifactData.getVersion()).thenReturn(artifactVersion);
  when(artifactVersion.getBranchId()).thenReturn(23);
  when(attributeFactory.copyAttribute(any(AttributeData.class),any(IOseeBranch.class),any(AttributeManager.class))).thenReturn(attribute);
  when(otherArtifactData.getLocalId()).thenReturn(45);
  when(otherArtifactData.getGuid()).thenReturn(guid);
  when(otherArtifactData.getTypeUuid()).thenReturn(65L);
  when(otherArtifactData.getVersion()).thenReturn(artifactVersion);
  when(relationFactory.createRelationContainer(45)).thenReturn(relationContainer);
  when(artifactTypeCache.getByGuid(65L)).thenReturn(artifactType);
  when(branchCache.getById(23)).thenReturn(branch);
}",0.9407754580315296
97548,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetAttributesFromStringsCreateOne() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  when(attributeType.getMaxOccurrences()).thenReturn(3);
  when(attributeFactory.createAttributeWithDefaults(eq(artifactImpl),any(ArtifactData.class),eq(attributeType))).thenReturn(two);
  artifactImpl.add(attributeType,one);
  artifactImpl.setAttributesFromStrings(attributeType,""String_Node_Str"",""String_Node_Str"");
  verify(one).setFromString(""String_Node_Str"");
  verify(two).setFromString(""String_Node_Str"");
  reset(one,two);
  when(one.getValue()).thenReturn(""String_Node_Str"");
  artifactImpl.setAttributesFromStrings(attributeType,""String_Node_Str"",""String_Node_Str"");
  verify(one,never()).setFromString(""String_Node_Str"");
  verify(two).setFromString(""String_Node_Str"");
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetAttributesFromStringsCreateOne() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  when(one.getOrcsData()).thenReturn(attributeData);
  when(two.getOrcsData()).thenReturn(attributeData);
  when(attributeType.getMaxOccurrences()).thenReturn(3);
  when(attributeFactory.createAttributeWithDefaults(eq(artifactImpl),any(ArtifactData.class),eq(attributeType))).thenReturn(two);
  artifactImpl.add(attributeType,one);
  artifactImpl.setAttributesFromStrings(attributeType,""String_Node_Str"",""String_Node_Str"");
  verify(one).setFromString(""String_Node_Str"");
  verify(two).setFromString(""String_Node_Str"");
  reset(one,two);
  when(one.getValue()).thenReturn(""String_Node_Str"");
  artifactImpl.setAttributesFromStrings(attributeType,""String_Node_Str"",""String_Node_Str"");
  verify(one,never()).setFromString(""String_Node_Str"");
  verify(two).setFromString(""String_Node_Str"");
}",0.944560669456067
97549,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetAttributesFromStringsCreateAll() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  Attribute three=mock(Attribute.class);
  when(attributeType.getMaxOccurrences()).thenReturn(3);
  when(attributeFactory.createAttributeWithDefaults(eq(artifactImpl),any(ArtifactData.class),eq(attributeType))).thenReturn(one,two,three);
  artifactImpl.setAttributesFromStrings(attributeType,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verify(one).setFromString(""String_Node_Str"");
  verify(two).setFromString(""String_Node_Str"");
  verify(three).setFromString(""String_Node_Str"");
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetAttributesFromStringsCreateAll() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  Attribute three=mock(Attribute.class);
  when(one.getOrcsData()).thenReturn(attributeData);
  when(two.getOrcsData()).thenReturn(attributeData);
  when(three.getOrcsData()).thenReturn(attributeData);
  when(attributeType.getMaxOccurrences()).thenReturn(3);
  when(attributeFactory.createAttributeWithDefaults(eq(artifactImpl),any(ArtifactData.class),eq(attributeType))).thenReturn(one,two,three);
  artifactImpl.setAttributesFromStrings(attributeType,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  verify(one).setFromString(""String_Node_Str"");
  verify(two).setFromString(""String_Node_Str"");
  verify(three).setFromString(""String_Node_Str"");
}",0.8988057825267127
97550,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testGetName() throws OseeCoreException {
  String name=artifactImpl.getName();
  Assert.assertTrue(name.contains(""String_Node_Str""));
  Attribute attr=mock(Attribute.class);
  when(attributeFactory.createAttributeWithDefaults(any(AttributeManager.class),any(ArtifactData.class),eq(CoreAttributeTypes.Name))).thenReturn(attr);
  when(attr.getValue()).thenReturn(""String_Node_Str"");
  artifactImpl.add(CoreAttributeTypes.Name,attr);
  artifactImpl.setName(""String_Node_Str"");
  name=artifactImpl.getName();
  Assert.assertEquals(""String_Node_Str"",name);
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testGetName() throws OseeCoreException {
  String name=artifactImpl.getName();
  Assert.assertTrue(name.contains(""String_Node_Str""));
  Attribute attr=mock(Attribute.class);
  when(attr.getOrcsData()).thenReturn(attributeData);
  when(attributeFactory.createAttributeWithDefaults(any(AttributeManager.class),any(ArtifactData.class),eq(CoreAttributeTypes.Name))).thenReturn(attr);
  when(attr.getValue()).thenReturn(""String_Node_Str"");
  artifactImpl.add(CoreAttributeTypes.Name,attr);
  artifactImpl.setName(""String_Node_Str"");
  name=artifactImpl.getName();
  Assert.assertEquals(""String_Node_Str"",name);
}",0.9587786259541984
97551,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetAttributesNotDirty(){
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,one);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,two);
  artifactImpl.setAttributesNotDirty();
  verify(one).clearDirty();
  verify(two).clearDirty();
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetAttributesNotDirty(){
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  when(one.getOrcsData()).thenReturn(attributeData);
  when(two.getOrcsData()).thenReturn(attributeData);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,one);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,two);
  artifactImpl.setAttributesNotDirty();
  verify(one).clearDirty();
  verify(two).clearDirty();
}",0.8827433628318584
97552,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testGetSoleAttributeAsStringException() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,one);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,two);
  thrown.expect(MultipleAttributesExist.class);
  artifactImpl.getSoleAttributeAsString(CoreAttributeTypes.AccessContextId);
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testGetSoleAttributeAsStringException() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  when(one.getOrcsData()).thenReturn(attributeData);
  when(two.getOrcsData()).thenReturn(attributeData);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,one);
  artifactImpl.add(CoreAttributeTypes.AccessContextId,two);
  thrown.expect(MultipleAttributesExist.class);
  artifactImpl.getSoleAttributeAsString(CoreAttributeTypes.AccessContextId);
}",0.8978805394990366
97553,"@Before public void init() throws OseeCoreException {
  MockitoAnnotations.initMocks(this);
  artifactImpl=new ArtifactImpl(artifactData,attributeFactory,relationContainer,branchProvider,artifactTypeProvider);
  when(artifactTypeProvider.get()).thenReturn(artifactType);
  when(artifactType.isValidAttributeType(any(IAttributeType.class),any(Branch.class))).thenReturn(true);
  when(attributeFactory.getAttribeType(any(IAttributeType.class))).thenReturn(attributeType);
  when(attributeType.getMaxOccurrences()).thenReturn(1);
  when(artifactData.getGuid()).thenReturn(guid);
  when(artifactData.getVersion()).thenReturn(version);
  when(branchProvider.get()).thenReturn(branch);
  when(deleted.isDeleted()).thenReturn(true);
}","@Before public void init() throws OseeCoreException {
  MockitoAnnotations.initMocks(this);
  artifactImpl=new ArtifactImpl(artifactData,attributeFactory,relationContainer,branchProvider,artifactTypeProvider);
  when(artifactTypeProvider.get()).thenReturn(artifactType);
  when(artifactType.isValidAttributeType(any(IAttributeType.class),any(Branch.class))).thenReturn(true);
  when(attributeFactory.getAttribeType(any(IAttributeType.class))).thenReturn(attributeType);
  when(attributeFactory.createAttribute(any(AttributeManager.class),any(AttributeData.class))).thenReturn(attribute);
  when(attributeFactory.createAttributeWithDefaults(any(AttributeManager.class),any(ArtifactData.class),any(IAttributeType.class))).thenReturn(attribute);
  when(attribute.getOrcsData()).thenReturn(attributeData);
  when(attributeType.getMaxOccurrences()).thenReturn(1);
  when(artifactData.getGuid()).thenReturn(guid);
  when(artifactData.getVersion()).thenReturn(version);
  when(branchProvider.get()).thenReturn(branch);
  when(deleted.isDeleted()).thenReturn(true);
  when(notDeleted.getOrcsData()).thenReturn(attributeData);
  when(deleted.getOrcsData()).thenReturn(attributeData);
  when(differentType.getOrcsData()).thenReturn(attributeData);
}",0.7395727365208545
97554,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testIsDirty() throws OseeCoreException {
  Assert.assertFalse(artifactImpl.isDirty());
  Attribute dirty=mock(Attribute.class);
  when(dirty.isDirty()).thenReturn(true);
  artifactImpl.add(CoreAttributeTypes.Active,dirty);
  Assert.assertTrue(artifactImpl.isDirty());
  reset(dirty);
  Assert.assertFalse(artifactImpl.isDirty());
  artifactImpl.setArtifactType(CoreArtifactTypes.CodeUnit);
  Assert.assertTrue(artifactImpl.isDirty());
  artifactImpl.setOrcsData(artifactData);
  Assert.assertFalse(artifactImpl.isDirty());
  when(artifactData.getModType()).thenReturn(ModificationType.REPLACED_WITH_VERSION);
  Assert.assertTrue(artifactImpl.isDirty());
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testIsDirty() throws OseeCoreException {
  Assert.assertFalse(artifactImpl.isDirty());
  Attribute dirty=mock(Attribute.class);
  when(dirty.getOrcsData()).thenReturn(attributeData);
  when(dirty.isDirty()).thenReturn(true);
  artifactImpl.add(CoreAttributeTypes.Active,dirty);
  Assert.assertTrue(artifactImpl.isDirty());
  reset(dirty);
  Assert.assertFalse(artifactImpl.isDirty());
  artifactImpl.setArtifactType(CoreArtifactTypes.CodeUnit);
  Assert.assertTrue(artifactImpl.isDirty());
  artifactImpl.setOrcsData(artifactData);
  Assert.assertFalse(artifactImpl.isDirty());
  when(artifactData.getModType()).thenReturn(ModificationType.REPLACED_WITH_VERSION);
  Assert.assertTrue(artifactImpl.isDirty());
}",0.9636963696369636
97555,"@Test @SuppressWarnings(""String_Node_Str"") public void testAddAndGet(){
  Attribute<Object> attribute=mock(Attribute.class);
  Assert.assertEquals(0,artifactImpl.getAllAttributes().size());
  artifactImpl.add(CoreAttributeTypes.City,attribute);
  Assert.assertTrue(artifactImpl.getAllAttributes().contains(attribute));
  Assert.assertEquals(1,artifactImpl.getAllAttributes().size());
}","@Test @SuppressWarnings(""String_Node_Str"") public void testAddAndGet(){
  Attribute<Object> attribute=mock(Attribute.class);
  when(attribute.getOrcsData()).thenReturn(attributeData);
  Assert.assertEquals(0,artifactImpl.getAllAttributes().size());
  artifactImpl.add(CoreAttributeTypes.City,attribute);
  Assert.assertTrue(artifactImpl.getAllAttributes().contains(attribute));
  Assert.assertEquals(1,artifactImpl.getAllAttributes().size());
}",0.9288299155609168
97556,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testAddException() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  when(attributeType.getMaxOccurrences()).thenReturn(1);
  artifactImpl.add(attributeType,one);
  artifactImpl.add(attributeType,two);
  Assert.assertEquals(2,artifactImpl.getAttributes(attributeType).size());
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testAddException() throws OseeCoreException {
  Attribute one=mock(Attribute.class);
  Attribute two=mock(Attribute.class);
  when(one.getOrcsData()).thenReturn(attributeData);
  when(two.getOrcsData()).thenReturn(attributeData);
  when(attributeType.getMaxOccurrences()).thenReturn(1);
  artifactImpl.add(attributeType,one);
  artifactImpl.add(attributeType,two);
  Assert.assertEquals(2,artifactImpl.getAttributes(attributeType).size());
}",0.8855291576673866
97557,"@Test @SuppressWarnings(""String_Node_Str"") public void testAreAttributesDirty(){
  Attribute<Object> attribute=mock(Attribute.class);
  artifactImpl.add(CoreAttributeTypes.City,attribute);
  Assert.assertFalse(artifactImpl.areAttributesDirty());
  when(attribute.isDirty()).thenReturn(true);
  Assert.assertTrue(artifactImpl.areAttributesDirty());
}","@Test @SuppressWarnings(""String_Node_Str"") public void testAreAttributesDirty(){
  Attribute<Object> attribute=mock(Attribute.class);
  when(attribute.getOrcsData()).thenReturn(attributeData);
  artifactImpl.add(CoreAttributeTypes.City,attribute);
  Assert.assertFalse(artifactImpl.areAttributesDirty());
  when(attribute.isDirty()).thenReturn(true);
  Assert.assertTrue(artifactImpl.areAttributesDirty());
}",0.9220607661822986
97558,"@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetName() throws OseeCoreException {
  Attribute attr=mock(Attribute.class);
  when(attributeFactory.createAttributeWithDefaults(any(AttributeManager.class),any(ArtifactData.class),eq(CoreAttributeTypes.Name))).thenReturn(attr);
  artifactImpl.setName(""String_Node_Str"");
  verify(attr).setFromString(""String_Node_Str"");
}","@Test @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testSetName() throws OseeCoreException {
  Attribute attr=mock(Attribute.class);
  when(attr.getOrcsData()).thenReturn(attributeData);
  when(attributeFactory.createAttributeWithDefaults(any(AttributeManager.class),any(ArtifactData.class),eq(CoreAttributeTypes.Name))).thenReturn(attr);
  artifactImpl.setName(""String_Node_Str"");
  verify(attr).setFromString(""String_Node_Str"");
}",0.9369158878504672
97559,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Test public void testCreateAttributeFromArtifactDataAndType() throws OseeCoreException {
  ArtifactData artifactData=mock(ArtifactData.class);
  VersionData artVersionData=mock(VersionData.class);
  when(dataFactory.create(artifactData,attributeType)).thenReturn(attributeData);
  when(attributeData.getVersion()).thenReturn(attrVersionData);
  when(artifactData.getVersion()).thenReturn(artVersionData);
  when(artVersionData.getBranchId()).thenReturn(45);
  ArgumentCaptor<ResourceNameResolver> resolverCapture=ArgumentCaptor.forClass(ResourceNameResolver.class);
  ArgumentCaptor<WeakReference> refCapture=ArgumentCaptor.forClass(WeakReference.class);
  Attribute<Object> actual=factory.createAttributeWithDefaults(container,artifactData,attributeType);
  verify(dataFactory).create(artifactData,attributeType);
  verify(attrVersionData).setBranchId(45);
  assertTrue(attribute == actual);
  verify(proxy).setResolver(resolverCapture.capture());
  verify(attribute).internalInitialize(refCapture.capture(),eq(attributeData),eq(attributeType),eq(true),eq(true));
  verify(container).add(attributeType,attribute);
  assertEquals(container,refCapture.getValue().get());
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Test public void testCreateAttributeFromArtifactDataAndType() throws OseeCoreException {
  ArtifactData artifactData=mock(ArtifactData.class);
  VersionData artVersionData=mock(VersionData.class);
  when(dataFactory.create(artifactData,attributeType)).thenReturn(attributeData);
  when(attributeData.getVersion()).thenReturn(attrVersionData);
  when(artifactData.getVersion()).thenReturn(artVersionData);
  when(artVersionData.getBranchId()).thenReturn(45);
  ArgumentCaptor<ResourceNameResolver> resolverCapture=ArgumentCaptor.forClass(ResourceNameResolver.class);
  ArgumentCaptor<WeakReference> refCapture=ArgumentCaptor.forClass(WeakReference.class);
  Attribute<Object> actual=factory.createAttributeWithDefaults(container,artifactData,attributeType);
  verify(dataFactory).create(artifactData,attributeType);
  assertTrue(attribute == actual);
  verify(proxy).setResolver(resolverCapture.capture());
  verify(attribute).internalInitialize(refCapture.capture(),eq(attributeData),eq(attributeType),eq(true),eq(true));
  verify(container).add(attributeType,attribute);
  assertEquals(container,refCapture.getValue().get());
}",0.9821946169772257
97560,"@Test public void testCreate() throws Throwable {
  String expectedName=""String_Node_Str"";
  when(artifactFactory.createArtifact(branch,artifactType,guid)).thenReturn(artifact);
  ArtifactWriteable actual=factory.create(branch,artifactType,guid,expectedName);
  verify(artifactFactory).createArtifact(branch,artifactType,guid);
  verify(artifact).setName(expectedName);
  assertTrue(actual instanceof ProxyWriteable);
  assertTrue(ProxyUtil.isProxy(actual));
  assertEquals(artifact,factory.getProxiedObject(actual));
}","@Test public void testCreate() throws Throwable {
  String expectedName=""String_Node_Str"";
  when(artifactFactory.createArtifact(branch,artifactType,guid)).thenReturn(artifact);
  when(artifactFactory.clone(artifact)).thenReturn(otherArtifact);
  ArtifactWriteable actual=factory.create(branch,artifactType,guid,expectedName);
  verify(artifactFactory).createArtifact(branch,artifactType,guid);
  verify(otherArtifact).setName(expectedName);
  verify(artifact,times(0)).setName(expectedName);
  assertTrue(actual instanceof ProxyWriteable);
  assertTrue(ProxyUtil.isProxy(actual));
  assertEquals(otherArtifact,factory.getProxiedObject(actual));
  assertEquals(artifact,factory.getOriginalObject(actual));
}",0.8433931484502447
97561,"AttributeData create(HasLocalId parent,IAttributeType attributeType) throws OseeCoreException ;","AttributeData create(ArtifactData parent,IAttributeType attributeType) throws OseeCoreException ;",0.9166666666666666
97562,"RelationData createRelationData(IRelationType relationType,HasLocalId parent,HasLocalId aArt,HasLocalId bArt,String rationale) throws OseeCoreException ;","RelationData createRelationData(IRelationType relationType,ArtifactData parent,HasLocalId aArt,HasLocalId bArt,String rationale) throws OseeCoreException ;",0.948051948051948
97563,"public ArtifactImpl copyArtifact(ArtifactImpl source,Collection<? extends IAttributeType> types,IOseeBranch ontoBranch) throws OseeCoreException {
  ArtifactData artifactData=factory.copy(ontoBranch,source.getOrcsData());
  ArtifactImpl copy=createArtifact(artifactData);
  Collection<? extends IAttributeType> typeToCopy=getAllowedTypes(copy,types);
  for (  IAttributeType attributeType : typeToCopy) {
    for (    AttributeReadable<?> attributeSource : source.getAttributes(attributeType)) {
      AttributeData data=getAttributeData(attributeSource);
      Attribute<Object> copyAttribute=attributeFactory.copyAttribute(data,ontoBranch,copy);
      copyAttribute.getOrcsData().setArtifactId(copy.getLocalId());
    }
  }
  copy.setLoaded(true);
  return copy;
}","public ArtifactImpl copyArtifact(ArtifactImpl source,Collection<? extends IAttributeType> types,IOseeBranch ontoBranch) throws OseeCoreException {
  ArtifactData artifactData=factory.copy(ontoBranch,source.getOrcsData());
  ArtifactImpl copy=createArtifact(artifactData);
  Collection<? extends IAttributeType> typeToCopy=getAllowedTypes(copy,types);
  for (  IAttributeType attributeType : typeToCopy) {
    for (    AttributeReadable<?> attributeSource : source.getAttributes(attributeType)) {
      AttributeData data=getAttributeData(attributeSource);
      attributeFactory.copyAttribute(data,ontoBranch,copy);
    }
  }
  copy.setLoaded(true);
  return copy;
}",0.8812849162011173
97564,"private <T>Attribute<T> createAttribute(AttributeManager container,AttributeData data,boolean isDirty,boolean createWithDefaults) throws OseeCoreException {
  AttributeType type=cache.getByGuid(data.getTypeUuid());
  Conditions.checkNotNull(type,""String_Node_Str"",""String_Node_Str"",data.getTypeUuid());
  Attribute<T> attribute=classResolver.createAttribute(type);
  DataProxy proxy=data.getDataProxy();
  ResourceNameResolver resolver=createResolver(attribute);
  proxy.setResolver(resolver);
  Reference<AttributeManager> artifactRef=new WeakReference<AttributeManager>(container);
  attribute.internalInitialize(artifactRef,data,type,isDirty,createWithDefaults);
synchronized (container) {
    container.add(type,attribute);
  }
  return attribute;
}","private <T>Attribute<T> createAttribute(AttributeManager container,AttributeData data,boolean isDirty,boolean createWithDefaults) throws OseeCoreException {
  AttributeType type=cache.getByGuid(data.getTypeUuid());
  Conditions.checkNotNull(type,""String_Node_Str"",""String_Node_Str"",data.getTypeUuid());
  Attribute<T> attribute=classResolver.createAttribute(type);
  DataProxy proxy=data.getDataProxy();
  ResourceNameResolver resolver=createResolver(attribute);
  proxy.setResolver(resolver);
  Reference<AttributeManager> artifactRef=new WeakReference<AttributeManager>(container);
  attribute.internalInitialize(artifactRef,data,type,isDirty,createWithDefaults);
  container.add(type,attribute);
  return attribute;
}",0.9056347589952478
97565,"public <T>Attribute<T> cloneAttribute(AttributeData source,AttributeManager destinationContainer) throws OseeCoreException {
  AttributeData attributeData=dataFactory.clone(source);
  Attribute<T> destinationAttribute=createAttribute(destinationContainer,attributeData,true,false);
  return destinationAttribute;
}","public <T>Attribute<T> cloneAttribute(AttributeData source,AttributeManager destinationContainer) throws OseeCoreException {
  AttributeData attributeData=dataFactory.clone(source);
  Attribute<T> destinationAttribute=createAttribute(destinationContainer,attributeData,false,false);
  return destinationAttribute;
}",0.9888712241653418
97566,"public <T>Attribute<T> createAttributeWithDefaults(AttributeManager container,ArtifactData artifactData,IAttributeType attributeType) throws OseeCoreException {
  AttributeData data=dataFactory.create(artifactData,attributeType);
  VersionData versionData=data.getVersion();
  versionData.setBranchId(artifactData.getVersion().getBranchId());
  return createAttribute(container,data,true,true);
}","public <T>Attribute<T> createAttributeWithDefaults(AttributeManager container,ArtifactData artifactData,IAttributeType attributeType) throws OseeCoreException {
  AttributeData data=dataFactory.create(artifactData,attributeType);
  return createAttribute(container,data,true,true);
}",0.833578792341679
97567,"@Override public synchronized void add(IAttributeType type,Attribute<? extends Object> attribute){
  attributes.addAttribute(type,attribute);
}","@Override public synchronized void add(IAttributeType type,Attribute<? extends Object> attribute){
  attributes.addAttribute(type,attribute);
  attribute.getOrcsData().setArtifactId(getLocalId());
}",0.8387096774193549
97568,"@Override public void remove(IAttributeType type,Attribute<? extends Object> attribute){
  attributes.removeAttribute(type,attribute);
}","@Override public void remove(IAttributeType type,Attribute<? extends Object> attribute){
  attributes.removeAttribute(type,attribute);
  attribute.getOrcsData().setArtifactId(-1);
}",0.8580441640378549
97569,"public ArtifactWriteable create(IOseeBranch branch,IArtifactType artifactType,String guid,String name) throws OseeCoreException {
  ArtifactImpl toProxy=factory.createArtifact(branch,artifactType,guid);
  if (name != null) {
    toProxy.setName(name);
  }
  return createWriteable(toProxy);
}","public ArtifactWriteable create(IOseeBranch branch,IArtifactType artifactType,String guid,String name) throws OseeCoreException {
  ArtifactImpl toProxy=factory.createArtifact(branch,artifactType,guid);
  ArtifactWriteable writeable=createWriteable(toProxy);
  if (name != null) {
    writeable.setName(name);
  }
  return writeable;
}",0.8325358851674641
97570,"private static void configureProxyData(URI uri,HostConfiguration config){
  boolean proxyBypass=OseeProperties.getOseeProxyBypassEnabled();
  if (!proxyBypass) {
    if (proxyService == null) {
      BundleContext context=Activator.getBundleContext();
      ServiceReference reference=context.getServiceReference(IProxyService.class.getName());
      proxyService=(IProxyService)context.getService(reference);
      proxyService.addProxyChangeListener(new IProxyChangeListener(){
        @Override public void proxyInfoChanged(        IProxyChangeEvent event){
          proxiedData.clear();
        }
      }
);
    }
    String key=String.format(""String_Node_Str"",uri.getScheme(),uri.getHost());
    IProxyData[] datas=proxiedData.get(key);
    if (datas == null) {
      datas=proxyService.select(uri);
      proxiedData.put(key,datas);
    }
    for (    IProxyData data : datas) {
      config.setProxy(data.getHost(),data.getPort());
    }
  }
  OseeLog.logf(Activator.class,Level.INFO,""String_Node_Str"",requests++,uri.toASCIIString());
}","private static void configureProxyData(URI uri,HostConfiguration config){
  boolean proxyBypass=OseeProperties.getOseeProxyBypassEnabled();
  if (!proxyBypass) {
    if (proxyService == null) {
      BundleContext context=Activator.getBundleContext();
      if (context != null) {
        ServiceReference<IProxyService> reference=context.getServiceReference(IProxyService.class);
        proxyService=context.getService(reference);
      }
      if (proxyService != null) {
        proxyService.addProxyChangeListener(new IProxyChangeListener(){
          @Override public void proxyInfoChanged(          IProxyChangeEvent event){
            proxiedData.clear();
          }
        }
);
      }
    }
    String key=String.format(""String_Node_Str"",uri.getScheme(),uri.getHost());
    IProxyData[] datas=proxiedData.get(key);
    if (datas == null && proxyService != null) {
      datas=proxyService.select(uri);
      proxiedData.put(key,datas);
    }
    if (datas != null) {
      for (      IProxyData data : datas) {
        config.setProxy(data.getHost(),data.getPort());
      }
    }
  }
  OseeLog.logf(Activator.class,Level.INFO,""String_Node_Str"",requests++,uri.toASCIIString());
}",0.8345259391771019
97571,"private void processRelations(ArtifactEvent artifactEvent,boolean handledConfigReload){
  if (!handledConfigReload) {
    for (    EventBasicGuidRelation guidRel : artifactEvent.getRelations()) {
      try {
        RelationType typeByGuid=RelationTypeManager.getTypeByGuid(guidRel.getRelTypeGuid());
        if (configReloadRelationTypeGuids.contains(typeByGuid.getGuid())) {
          AtsBulkLoad.reloadConfig(false);
          break;
        }
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
    }
  }
  for (  EventBasicGuidRelation guidRel : artifactEvent.getRelations()) {
    try {
      if (guidRel.is(AtsRelationTypes.TeamWorkflowTargetedForVersion_Workflow)) {
        for (        TeamWorkFlowArtifact teamArt : ArtifactCache.getActive(guidRel,TeamWorkFlowArtifact.class)) {
          Artifact verArt=null;
          try {
            verArt=teamArt.getRelatedArtifact(AtsRelationTypes.TeamWorkflowTargetedForVersion_Version);
          }
 catch (          ArtifactDoesNotExist ex) {
          }
          if (verArt == null) {
            AtsVersionService.get().removeTargetedVersion(teamArt);
          }
 else {
            IAtsVersion version=AtsConfigCache.instance.getSoleByGuid(verArt.getGuid(),IAtsVersion.class);
            AtsVersionService.get().setTargetedVersion(teamArt,version);
          }
        }
      }
      if (guidRel.is(AtsRelationTypes.SmaToTask_Task)) {
        for (        TaskArtifact taskArt : ArtifactCache.getActive(guidRel,TaskArtifact.class)) {
          AtsTaskCache.decache(taskArt.getParent());
        }
        for (        Artifact artifact : ArtifactCache.getActive(guidRel)) {
          if (artifact instanceof AbstractTaskableArtifact) {
            AtsTaskCache.decache(artifact);
          }
        }
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
}","private void processRelations(ArtifactEvent artifactEvent,boolean handledConfigReload){
  if (!handledConfigReload) {
    for (    EventBasicGuidRelation guidRel : artifactEvent.getRelations()) {
      try {
        RelationType typeByGuid=RelationTypeManager.getTypeByGuid(guidRel.getRelTypeGuid());
        if (configReloadRelationTypeGuids.contains(typeByGuid.getGuid())) {
          AtsBulkLoad.reloadConfig(false);
          break;
        }
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
    }
  }
  for (  EventBasicGuidRelation guidRel : artifactEvent.getRelations()) {
    try {
      if (guidRel.is(AtsRelationTypes.TeamWorkflowTargetedForVersion_Workflow)) {
        for (        TeamWorkFlowArtifact teamArt : ArtifactCache.getActive(guidRel,TeamWorkFlowArtifact.class)) {
          Artifact verArt=null;
          try {
            verArt=teamArt.getRelatedArtifact(AtsRelationTypes.TeamWorkflowTargetedForVersion_Version);
          }
 catch (          ArtifactDoesNotExist ex) {
          }
          if (verArt == null) {
            AtsVersionService.get().removeTargetedVersion(teamArt);
          }
 else {
            IAtsVersion version=AtsConfigCache.instance.getSoleByGuid(verArt.getGuid(),IAtsVersion.class);
            AtsVersionService.get().setTargetedVersion(teamArt,version);
          }
        }
      }
      if (guidRel.is(AtsRelationTypes.SmaToTask_Task)) {
        for (        TaskArtifact taskArt : ArtifactCache.getActive(guidRel,TaskArtifact.class)) {
          AtsTaskCache.decache(taskArt.getParentAWA());
        }
        for (        Artifact artifact : ArtifactCache.getActive(guidRel)) {
          if (artifact instanceof AbstractTaskableArtifact) {
            AtsTaskCache.decache(artifact);
          }
        }
      }
      if (guidRel.is(AtsRelationTypes.TeamWorkflowToReview_Review)) {
        for (        AbstractReviewArtifact review : ArtifactCache.getActive(guidRel,AbstractReviewArtifact.class)) {
          AtsReviewCache.decache(review.getParentAWA());
        }
        for (        Artifact artifact : ArtifactCache.getActive(guidRel)) {
          if (artifact instanceof AbstractReviewArtifact) {
            AtsReviewCache.decache(artifact);
          }
        }
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
}",0.891449642774833
97572,"private boolean processArtifacts(ArtifactEvent artifactEvent){
  boolean handledConfigReload=false;
  for (  EventBasicGuidArtifact guidArt : artifactEvent.getArtifacts()) {
    if (configReloadArtifactTypeGuids.contains(guidArt.getArtTypeGuid())) {
      AtsBulkLoad.reloadConfig(false);
      handledConfigReload=true;
      break;
    }
  }
  for (  EventBasicGuidArtifact guidArt : artifactEvent.getArtifacts()) {
    try {
      if (guidArt.is(EventModType.Deleted,EventModType.Purged)) {
        handleTaskCacheForDeletedPurged(guidArt);
      }
      if (guidArt.is(EventModType.Added,EventModType.Modified)) {
        handleTaskCacheForAddedModified(guidArt);
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  return handledConfigReload;
}","private boolean processArtifacts(ArtifactEvent artifactEvent){
  boolean handledConfigReload=false;
  for (  EventBasicGuidArtifact guidArt : artifactEvent.getArtifacts()) {
    if (configReloadArtifactTypeGuids.contains(guidArt.getArtTypeGuid())) {
      AtsBulkLoad.reloadConfig(false);
      handledConfigReload=true;
      break;
    }
  }
  for (  EventBasicGuidArtifact guidArt : artifactEvent.getArtifacts()) {
    try {
      if (guidArt.is(EventModType.Deleted,EventModType.Purged)) {
        handleCachesForDeletedPurged(guidArt);
      }
      if (guidArt.is(EventModType.Added,EventModType.Modified)) {
        handleCachesForAddedModified(guidArt);
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  return handledConfigReload;
}",0.9938118811881188
97573,"public static Collection<TaskArtifact> getTaskArtifacts(AbstractTaskableArtifact sma) throws OseeCoreException {
  Collection<TaskArtifact> tasks=teamTasksCache.get(sma);
  if (tasks == null || containsDeleted(tasks)) {
    tasks=sma.getRelatedArtifacts(AtsRelationTypes.SmaToTask_Task,TaskArtifact.class);
    if (tasks.isEmpty()) {
      return tasks;
    }
    teamTasksCache.put(sma,tasks);
  }
  return tasks;
}","public static Collection<TaskArtifact> getTaskArtifacts(AbstractTaskableArtifact sma) throws OseeCoreException {
  Collection<TaskArtifact> tasks=teamTasksCache.get(sma);
  if (tasks == null || containsDeleted(tasks)) {
    tasks=sma.getRelatedArtifacts(AtsRelationTypes.SmaToTask_Task,TaskArtifact.class);
    teamTasksCache.put(sma,tasks);
  }
  return tasks;
}",0.93196405648267
97574,"public void load(final String name,final Collection<? extends Artifact> arts,final CustomizeData customizeData,TableLoadOption... tableLoadOption){
  Displays.pendInDisplayThread(new Runnable(){
    @Override public void run(){
      worldArts.clear();
      otherArts.clear();
      for (      Artifact art : arts) {
        if (AtsUtil.isAtsArtifact(art)) {
          worldArts.add(art);
        }
 else {
          otherArts.add(art);
        }
      }
      if (customizeData != null && !worldXViewer.getCustomizeMgr().generateCustDataFromTable().equals(customizeData)) {
        setCustomizeData(customizeData);
      }
      if (arts.isEmpty()) {
        setTableTitle(""String_Node_Str"" + name,true);
      }
 else {
        setTableTitle(name,false);
      }
      worldXViewer.setInput(worldArts);
      worldXViewer.updateStatusLabel();
      if (otherArts.size() > 0 && MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",otherArts.size() + ""String_Node_Str"")) {
        RendererManager.openInJob(otherArts,PresentationType.GENERALIZED_EDIT);
      }
      worldXViewer.getTree().setFocus();
    }
  }
);
  iWorldEditor.reflow();
}","public void load(final String name,final Collection<? extends Artifact> arts,final CustomizeData customizeData,TableLoadOption... tableLoadOption){
  Displays.pendInDisplayThread(new Runnable(){
    @Override public void run(){
      worldArts.clear();
      otherArts.clear();
      for (      Artifact art : arts) {
        if (AtsUtil.isAtsArtifact(art)) {
          worldArts.add(art);
        }
 else {
          otherArts.add(art);
        }
      }
      if (customizeData != null && !worldXViewer.getCustomizeMgr().generateCustDataFromTable().equals(customizeData)) {
        setCustomizeData(customizeData);
      }
      if (arts.isEmpty()) {
        setTableTitle(""String_Node_Str"" + name,true);
      }
 else {
        setTableTitle(name,false);
      }
      try {
        AtsBulkLoad.bulkLoadArtifacts(worldArts);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
      worldXViewer.setInput(worldArts);
      worldXViewer.updateStatusLabel();
      if (otherArts.size() > 0 && MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",otherArts.size() + ""String_Node_Str"")) {
        RendererManager.openInJob(otherArts,PresentationType.GENERALIZED_EDIT);
      }
      worldXViewer.getTree().setFocus();
    }
  }
);
  iWorldEditor.reflow();
}",0.9316720257234726
97575,"@Override public Object[] getChildren(Object parentElement){
  if (parentElement instanceof Collection<?>) {
    return ((Collection<?>)parentElement).toArray();
  }
  if (parentElement instanceof Artifact) {
    try {
      Artifact artifact=(Artifact)parentElement;
      if (artifact.isDeleted()) {
        return new Object[]{};
      }
      if (artifact.isOfType(AtsArtifactTypes.Action)) {
        relatedArts.addAll(ActionManager.getTeams(artifact));
        return ActionManager.getTeams((artifact)).toArray();
      }
      if (artifact.isOfType(AtsArtifactTypes.Goal)) {
        List<Artifact> arts=artifact.getRelatedArtifacts(AtsRelationTypes.Goal_Member,DeletionFlag.EXCLUDE_DELETED);
        relatedArts.addAll(arts);
        return arts.toArray(new Artifact[artifact.getRelatedArtifactsCount(AtsRelationTypes.Goal_Member)]);
      }
      if (artifact.isOfType(AtsArtifactTypes.TeamWorkflow)) {
        TeamWorkFlowArtifact teamArt=TeamWorkFlowManager.cast(artifact);
        List<Artifact> arts=new ArrayList<Artifact>();
        arts.addAll(ReviewManager.getReviews(teamArt));
        arts.addAll(teamArt.getTaskArtifactsSorted());
        relatedArts.addAll(arts);
        return arts.toArray();
      }
      if (artifact.isOfType(AtsArtifactTypes.AbstractWorkflowArtifact)) {
        AbstractReviewArtifact reviewArt=AbstractReviewArtifact.cast(artifact);
        List<Artifact> arts=new ArrayList<Artifact>();
        arts.addAll(reviewArt.getTaskArtifactsSorted());
        relatedArts.addAll(arts);
        return arts.toArray();
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  return org.eclipse.osee.framework.jdk.core.util.Collections.EMPTY_ARRAY;
}","@Override public Object[] getChildren(Object parentElement){
  if (parentElement instanceof Collection<?>) {
    return ((Collection<?>)parentElement).toArray();
  }
  if (parentElement instanceof Artifact) {
    try {
      Artifact artifact=(Artifact)parentElement;
      if (artifact.isDeleted()) {
        return new Object[]{};
      }
      if (artifact.isOfType(AtsArtifactTypes.Action)) {
        relatedArts.addAll(ActionManager.getTeams(artifact));
        return ActionManager.getTeams((artifact)).toArray();
      }
      if (artifact.isOfType(AtsArtifactTypes.Goal)) {
        List<Artifact> arts=artifact.getRelatedArtifacts(AtsRelationTypes.Goal_Member,DeletionFlag.EXCLUDE_DELETED);
        relatedArts.addAll(arts);
        AtsBulkLoad.bulkLoadArtifacts(relatedArts);
        return arts.toArray(new Artifact[artifact.getRelatedArtifactsCount(AtsRelationTypes.Goal_Member)]);
      }
      if (artifact.isOfType(AtsArtifactTypes.TeamWorkflow)) {
        TeamWorkFlowArtifact teamArt=TeamWorkFlowManager.cast(artifact);
        List<Artifact> arts=new ArrayList<Artifact>();
        arts.addAll(ReviewManager.getReviews(teamArt));
        arts.addAll(teamArt.getTaskArtifactsSorted());
        relatedArts.addAll(arts);
        return arts.toArray();
      }
      if (artifact.isOfType(AtsArtifactTypes.AbstractWorkflowArtifact)) {
        AbstractReviewArtifact reviewArt=AbstractReviewArtifact.cast(artifact);
        List<Artifact> arts=new ArrayList<Artifact>();
        arts.addAll(reviewArt.getTaskArtifactsSorted());
        relatedArts.addAll(arts);
        return arts.toArray();
      }
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
    }
  }
  return org.eclipse.osee.framework.jdk.core.util.Collections.EMPTY_ARRAY;
}",0.9852941176470588
97576,"@Override public void load(Collection<Object> objects){
  Set<Artifact> arts=new HashSet<Artifact>();
  for (  Object obj : objects) {
    if (AtsUtil.isAtsArtifact(obj)) {
      arts.add((Artifact)obj);
    }
  }
  setInput(arts);
}","@Override public void load(Collection<Object> objects){
  Set<Artifact> arts=new HashSet<Artifact>();
  for (  Object obj : objects) {
    if (AtsUtil.isAtsArtifact(obj)) {
      arts.add((Artifact)obj);
    }
  }
  try {
    AtsBulkLoad.bulkLoadArtifacts(arts);
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  setInput(arts);
}",0.7677100494233937
97577,"@Override protected Branch handleTxWork(OseeConnection connection) throws OseeCoreException {
  if (branch.getStorageState() != StorageState.PURGED) {
    if (!branch.getAllChildBranches(false).isEmpty()) {
      throw new OseeArgumentException(""String_Node_Str"",branch.getGuid(),branch.getBranchType());
    }
    int branchId=branch.getId();
    String sql=String.format(""String_Node_Str"",sourceTableName);
    purgeFromTable(connection,sql,0.20,branchId);
    purgeFromTable(connection,DELETE_FROM_TX_DETAILS,0.09,branchId);
    purgeFromTable(connection,DELETE_FROM_CONFLICT,0.01,branchId);
    purgeFromTable(connection,DELETE_FROM_MERGE,0.01,branchId,branch.getParentBranch().getId());
    purgeFromTable(connection,DELETE_FROM_BRANCH_TABLE,0.01,branchId);
    purgeAccessControlTables(branchId);
    branch.setStorageState(StorageState.PURGED);
    branchCache.storeItems(branch);
    branch.internalRemovePurgedBranchFromParent();
  }
  return branch;
}","@Override protected Branch handleTxWork(OseeConnection connection) throws OseeCoreException {
  if (branch.getStorageState() != StorageState.PURGED) {
    if (!branch.getAllChildBranches(false).isEmpty()) {
      throw new OseeArgumentException(""String_Node_Str"",branch.getGuid(),branch.getBranchType());
    }
    int branchId=branch.getId();
    String sql=String.format(""String_Node_Str"",sourceTableName);
    purgeFromTable(connection,sql,0.20,branchId);
    purgeFromTable(connection,DELETE_FROM_TX_DETAILS,0.09,branchId);
    purgeFromTable(connection,DELETE_FROM_CONFLICT,0.01,branchId);
    if (branch.hasParentBranch()) {
      purgeFromTable(connection,DELETE_FROM_MERGE,0.01,branchId,branch.getParentBranch().getId());
    }
    purgeFromTable(connection,DELETE_FROM_BRANCH_TABLE,0.01,branchId);
    purgeAccessControlTables(branchId);
    branch.setStorageState(StorageState.PURGED);
    branchCache.storeItems(branch);
    branch.internalRemovePurgedBranchFromParent();
  }
  return branch;
}",0.9776195320447608
97578,"public static boolean isNumeric(String str){
  return str.matches(""String_Node_Str"");
}","public static boolean isNumeric(String value){
  boolean result=false;
  if (Strings.isValid(value)) {
    Matcher matcher=NUMERIC_PATTERN.matcher(value);
    result=matcher.matches();
  }
  return result;
}",0.3265306122448979
97579,"/** 
 * Clear workDef from cache, clear all objects and create new objects with postFixName in titles
 */
private static void reset(String postFixName) throws OseeCoreException {
  AtsTestUtil.postFixName=postFixName;
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),AtsTestUtil.class.getSimpleName());
  workDef=new MockWorkDefinition(WORK_DEF_NAME);
  analyze=new MockStateDefinition(""String_Node_Str"");
  analyze.setWorkDefinition(workDef);
  analyze.setStateType(StateType.Working);
  analyze.setOrdinal(1);
  workDef.addState(analyze);
  workDef.setStartState(analyze);
  implement=new MockStateDefinition(""String_Node_Str"");
  implement.setWorkDefinition(workDef);
  implement.setStateType(StateType.Working);
  implement.setOrdinal(2);
  workDef.addState(implement);
  completed=new MockStateDefinition(""String_Node_Str"");
  completed.setWorkDefinition(workDef);
  completed.setStateType(StateType.Completed);
  completed.setOrdinal(3);
  workDef.addState(completed);
  cancelled=new MockStateDefinition(""String_Node_Str"");
  cancelled.setWorkDefinition(workDef);
  cancelled.setStateType(StateType.Cancelled);
  cancelled.setOrdinal(4);
  workDef.addState(cancelled);
  analyze.setDefaultToState(implement);
  analyze.getToStates().addAll(Arrays.asList(implement,completed,cancelled));
  analyze.getOverrideAttributeValidationStates().addAll(Arrays.asList(cancelled));
  implement.setDefaultToState(completed);
  implement.getToStates().addAll(Arrays.asList(analyze,completed,cancelled));
  implement.getOverrideAttributeValidationStates().addAll(Arrays.asList(cancelled,analyze));
  completed.setDefaultToState(completed);
  completed.getToStates().addAll(Arrays.asList(implement));
  completed.getOverrideAttributeValidationStates().addAll(Arrays.asList(implement));
  cancelled.getToStates().addAll(Arrays.asList(analyze,implement));
  cancelled.getOverrideAttributeValidationStates().addAll(Arrays.asList(analyze,implement));
  estHoursWidgetDef=new MockWidgetDefinition(AtsAttributeTypes.EstimatedHours.getUnqualifiedName());
  estHoursWidgetDef.setAttributeName(AtsAttributeTypes.EstimatedHours.getName());
  estHoursWidgetDef.setXWidgetName(""String_Node_Str"");
  workPackageWidgetDef=new MockWidgetDefinition(AtsAttributeTypes.WorkPackage.getUnqualifiedName());
  workPackageWidgetDef.setAttributeName(AtsAttributeTypes.WorkPackage.getName());
  workPackageWidgetDef.setXWidgetName(""String_Node_Str"");
  WorkDefinitionFactory.addWorkDefinition(workDef);
  testAi=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi.setActive(true);
  testAi.setActionable(true);
  testAi2=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi2.setActive(true);
  testAi2.setActionable(true);
  testAi3=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi3.setActive(true);
  testAi3.setActionable(true);
  testAi4=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi4.setActive(true);
  testAi4.setActionable(true);
  teamDef=AtsConfigCache.instance.getTeamDefinitionFactory().createTeamDefinition(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  teamDef.setWorkflowDefinition(WORK_DEF_NAME);
  teamDef.setActive(true);
  teamDef.setTeamUsesVersions(true);
  teamDef.getLeads().add(AtsUsersClient.getUser());
  testAi.setTeamDefinition(teamDef);
  testAi2.setTeamDefinition(teamDef);
  testAi3.setTeamDefinition(teamDef);
  testAi4.setTeamDefinition(teamDef);
  verArt1=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName),GUID.create(),HumanReadableId.generate());
  teamDef.getVersions().add(verArt1);
  verArt2=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName));
  teamDef.getVersions().add(verArt2);
  verArt3=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName));
  teamDef.getVersions().add(verArt3);
  verArt4=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName));
  teamDef.getVersions().add(verArt4);
  actionArt=ActionManager.createAction(null,getTitle(""String_Node_Str"",postFixName),""String_Node_Str"",ChangeType.Improvement,""String_Node_Str"",false,null,Arrays.asList(testAi),new Date(),AtsUsersClient.getUser(),null,transaction);
  teamArt=actionArt.getFirstTeam();
  teamArt.persist(transaction);
  actionArt.persist(transaction);
  transaction.execute();
}","/** 
 * Clear workDef from cache, clear all objects and create new objects with postFixName in titles
 */
private static void reset(String postFixName) throws OseeCoreException {
  AtsBulkLoad.reloadConfig(true);
  AtsTestUtil.postFixName=postFixName;
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),AtsTestUtil.class.getSimpleName());
  workDef=new MockWorkDefinition(WORK_DEF_NAME);
  analyze=new MockStateDefinition(""String_Node_Str"");
  analyze.setWorkDefinition(workDef);
  analyze.setStateType(StateType.Working);
  analyze.setOrdinal(1);
  workDef.addState(analyze);
  workDef.setStartState(analyze);
  implement=new MockStateDefinition(""String_Node_Str"");
  implement.setWorkDefinition(workDef);
  implement.setStateType(StateType.Working);
  implement.setOrdinal(2);
  workDef.addState(implement);
  completed=new MockStateDefinition(""String_Node_Str"");
  completed.setWorkDefinition(workDef);
  completed.setStateType(StateType.Completed);
  completed.setOrdinal(3);
  workDef.addState(completed);
  cancelled=new MockStateDefinition(""String_Node_Str"");
  cancelled.setWorkDefinition(workDef);
  cancelled.setStateType(StateType.Cancelled);
  cancelled.setOrdinal(4);
  workDef.addState(cancelled);
  analyze.setDefaultToState(implement);
  analyze.getToStates().addAll(Arrays.asList(implement,completed,cancelled));
  analyze.getOverrideAttributeValidationStates().addAll(Arrays.asList(cancelled));
  implement.setDefaultToState(completed);
  implement.getToStates().addAll(Arrays.asList(analyze,completed,cancelled));
  implement.getOverrideAttributeValidationStates().addAll(Arrays.asList(cancelled,analyze));
  completed.setDefaultToState(completed);
  completed.getToStates().addAll(Arrays.asList(implement));
  completed.getOverrideAttributeValidationStates().addAll(Arrays.asList(implement));
  cancelled.getToStates().addAll(Arrays.asList(analyze,implement));
  cancelled.getOverrideAttributeValidationStates().addAll(Arrays.asList(analyze,implement));
  estHoursWidgetDef=new MockWidgetDefinition(AtsAttributeTypes.EstimatedHours.getUnqualifiedName());
  estHoursWidgetDef.setAttributeName(AtsAttributeTypes.EstimatedHours.getName());
  estHoursWidgetDef.setXWidgetName(""String_Node_Str"");
  workPackageWidgetDef=new MockWidgetDefinition(AtsAttributeTypes.WorkPackage.getUnqualifiedName());
  workPackageWidgetDef.setAttributeName(AtsAttributeTypes.WorkPackage.getName());
  workPackageWidgetDef.setXWidgetName(""String_Node_Str"");
  WorkDefinitionFactory.addWorkDefinition(workDef);
  testAi=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi.setActive(true);
  testAi.setActionable(true);
  AtsConfigCache.instance.cache(testAi);
  testAi2=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi2.setActive(true);
  testAi2.setActionable(true);
  AtsConfigCache.instance.cache(testAi2);
  testAi3=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi3.setActive(true);
  testAi3.setActionable(true);
  AtsConfigCache.instance.cache(testAi3);
  testAi4=AtsConfigCache.instance.getActionableItemFactory().createActionableItem(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  testAi4.setActive(true);
  testAi4.setActionable(true);
  AtsConfigCache.instance.cache(testAi4);
  teamDef=AtsConfigCache.instance.getTeamDefinitionFactory().createTeamDefinition(GUID.create(),getTitle(""String_Node_Str"",postFixName));
  teamDef.setWorkflowDefinition(WORK_DEF_NAME);
  teamDef.setActive(true);
  teamDef.setTeamUsesVersions(true);
  teamDef.getLeads().add(AtsUsersClient.getUser());
  AtsConfigCache.instance.cache(teamDef);
  testAi.setTeamDefinition(teamDef);
  testAi2.setTeamDefinition(teamDef);
  testAi3.setTeamDefinition(teamDef);
  testAi4.setTeamDefinition(teamDef);
  verArt1=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName),GUID.create(),HumanReadableId.generate());
  teamDef.getVersions().add(verArt1);
  AtsConfigCache.instance.cache(verArt1);
  verArt2=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName));
  teamDef.getVersions().add(verArt2);
  AtsConfigCache.instance.cache(verArt2);
  verArt3=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName));
  teamDef.getVersions().add(verArt3);
  AtsConfigCache.instance.cache(verArt3);
  verArt4=AtsConfigCache.instance.getVersionFactory().createVersion(getTitle(""String_Node_Str"",postFixName));
  teamDef.getVersions().add(verArt4);
  AtsConfigCache.instance.cache(verArt4);
  actionArt=ActionManager.createAction(null,getTitle(""String_Node_Str"",postFixName),""String_Node_Str"",ChangeType.Improvement,""String_Node_Str"",false,null,Arrays.asList(testAi),new Date(),AtsUsersClient.getUser(),null,transaction);
  teamArt=actionArt.getFirstTeam();
  teamArt.persist(transaction);
  actionArt.persist(transaction);
  transaction.execute();
}",0.9584638706417382
97580,"private void bulkLoadArtifactDeltas(IProgressMonitor monitor,CompositeKeyHashMap<TransactionRecord,Integer,Artifact> bulkLoaded,Collection<ChangeItem> changeItems) throws OseeCoreException {
  checkForCancelledStatus(monitor);
  Set<Integer> artIds=asArtIds(changeItems);
  preloadArtifacts(bulkLoaded,artIds,txDelta.getStartTx(),false);
  if (!txDelta.getStartTx().equals(txDelta.getEndTx())) {
    preloadArtifacts(bulkLoaded,artIds,txDelta.getEndTx(),false);
  }
  if (!txDelta.areOnTheSameBranch()) {
    preloadArtifacts(bulkLoaded,artIds,txDelta.getStartTx().getBranch().getBaseTransaction(),true);
  }
}","private void bulkLoadArtifactDeltas(IProgressMonitor monitor,CompositeKeyHashMap<TransactionRecord,Integer,Artifact> bulkLoaded,Collection<ChangeItem> changeItems) throws OseeCoreException {
  checkForCancelledStatus(monitor);
  Set<Integer> artIds=asArtIds(changeItems);
  preloadArtifacts(bulkLoaded,artIds,txDelta.getStartTx(),txDelta.areOnTheSameBranch());
  if (!txDelta.getStartTx().equals(txDelta.getEndTx())) {
    preloadArtifacts(bulkLoaded,artIds,txDelta.getEndTx(),txDelta.areOnTheSameBranch());
  }
  if (!txDelta.areOnTheSameBranch()) {
    preloadArtifacts(bulkLoaded,artIds,txDelta.getStartTx().getBranch().getBaseTransaction(),true);
  }
}",0.9478672985781992
97581,"@SuppressWarnings(""String_Node_Str"") @org.junit.Test public void testDemoDbInit() throws Exception {
  System.out.println(""String_Node_Str"");
  String lastAuthenticationProtocol=OseeClientProperties.getAuthenticationProtocol();
  try {
    SevereLoggingMonitor monitorLog=TestUtil.severeLoggingStart();
    OseeLog.registerLoggerListener(monitorLog);
    OseeClientProperties.setAuthenticationProtocol(""String_Node_Str"");
    DatabaseInitializationOperation.executeWithoutPrompting(""String_Node_Str"");
    TestUtil.severeLoggingEnd(monitorLog);
    OseeLog.log(DatabaseInitializationOperation.class,Level.INFO,""String_Node_Str"");
    wasDbInitSuccessful=true;
  }
  finally {
    OseeClientProperties.setAuthenticationProtocol(lastAuthenticationProtocol);
  }
  if (wasDbInitSuccessful) {
    DemoDbUtil.setDbInitSuccessful(true);
    ClientSessionManager.releaseSession();
    ClientSessionManager.getSession();
    UserManager.releaseUser();
    if (UserManager.getUser().getUserId().equals(""String_Node_Str"")) {
      throw new OseeStateException(""String_Node_Str"");
    }
    final String BOOTSTRAP_ART_ID=""String_Node_Str"";
    User oseeUser=UserManager.getUser(SystemUser.OseeSystem);
    ConnectionHandler.runPreparedUpdate(""String_Node_Str"" + oseeUser.getArtId() + ""String_Node_Str""+ BOOTSTRAP_ART_ID+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
}","@org.junit.Test public void testDemoDbInit() throws Exception {
  System.out.println(""String_Node_Str"");
  String lastAuthenticationProtocol=OseeClientProperties.getAuthenticationProtocol();
  try {
    SevereLoggingMonitor monitorLog=TestUtil.severeLoggingStart();
    OseeLog.registerLoggerListener(monitorLog);
    OseeClientProperties.setAuthenticationProtocol(""String_Node_Str"");
    DatabaseInitializationOperation.executeWithoutPrompting(""String_Node_Str"");
    TestUtil.severeLoggingEnd(monitorLog);
    OseeLog.log(DatabaseInitializationOperation.class,Level.INFO,""String_Node_Str"");
    wasDbInitSuccessful=true;
  }
  finally {
    OseeClientProperties.setAuthenticationProtocol(lastAuthenticationProtocol);
  }
  if (wasDbInitSuccessful) {
    DemoDbUtil.setDbInitSuccessful(true);
    ClientSessionManager.releaseSession();
    ClientSessionManager.getSession();
    UserManager.releaseUser();
    if (UserManager.getUser().getUserId().equals(""String_Node_Str"")) {
      throw new OseeStateException(""String_Node_Str"");
    }
    final String BOOTSTRAP_ART_ID=""String_Node_Str"";
    User oseeUser=UserManager.getUser(SystemUser.OseeSystem);
    ConnectionHandler.runPreparedUpdate(String.format(""String_Node_Str"",oseeUser.getArtId(),BOOTSTRAP_ART_ID));
  }
  System.out.println(""String_Node_Str"");
}",0.9427083333333334
97582,"public static DecisionReviewArtifact createNewDecisionReview(TeamWorkFlowArtifact teamArt,ReviewBlockType reviewBlockType,String title,String relatedToState,String description,Collection<IAtsDecisionReviewOption> options,List<? extends IAtsUser> assignees,Date createdDate,IAtsUser createdBy) throws OseeCoreException {
  DecisionReviewArtifact decRev=(DecisionReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.DecisionReview,AtsUtilCore.getAtsBranch(),title);
  decRev.initializeNewStateMachine(assignees,createdDate,createdBy);
  teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,decRev);
  if (Strings.isValid(relatedToState)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,relatedToState);
  }
  if (Strings.isValid(description)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.Description,description);
  }
  decRev.setSoleAttributeValue(AtsAttributeTypes.DecisionReviewOptions,getDecisionReviewOptionsString(options));
  if (reviewBlockType != null) {
    decRev.setSoleAttributeFromString(AtsAttributeTypes.ReviewBlocks,reviewBlockType.name());
  }
  return decRev;
}","public static DecisionReviewArtifact createNewDecisionReview(TeamWorkFlowArtifact teamArt,ReviewBlockType reviewBlockType,String title,String relatedToState,String description,Collection<IAtsDecisionReviewOption> options,List<? extends IAtsUser> assignees,Date createdDate,IAtsUser createdBy) throws OseeCoreException {
  DecisionReviewArtifact decRev=(DecisionReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.DecisionReview,AtsUtilCore.getAtsBranch(),title);
  decRev.initializeNewStateMachine(assignees,createdDate,createdBy);
  teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,decRev);
  if (Strings.isValid(relatedToState)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,relatedToState);
  }
  if (Strings.isValid(description)) {
    decRev.setSoleAttributeValue(AtsAttributeTypes.Description,description);
  }
  decRev.setSoleAttributeValue(AtsAttributeTypes.DecisionReviewOptions,getDecisionReviewOptionsString(options));
  if (reviewBlockType != null) {
    decRev.setSoleAttributeFromString(AtsAttributeTypes.ReviewBlocks,reviewBlockType.name());
  }
  AtsReviewCache.decache(teamArt);
  return decRev;
}",0.973397296118622
97583,"public static PeerToPeerReviewArtifact createNewPeerToPeerReview(TeamWorkFlowArtifact teamArt,String reviewTitle,String againstState,Date createdDate,IAtsUser createdBy,SkynetTransaction transaction) throws OseeCoreException {
  PeerToPeerReviewArtifact peerToPeerRev=(PeerToPeerReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.PeerToPeerReview,AtsUtilCore.getAtsBranch(),reviewTitle == null ? ""String_Node_Str"" : reviewTitle);
  peerToPeerRev.initializeNewStateMachine(null,new Date(),createdBy);
  if (teamArt != null) {
    teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,peerToPeerRev);
    if (againstState != null) {
      peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,againstState);
    }
  }
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.ReviewFormalType,ReviewFormalType.InFormal.name());
  if (transaction != null) {
    peerToPeerRev.persist(transaction);
  }
  return peerToPeerRev;
}","public static PeerToPeerReviewArtifact createNewPeerToPeerReview(TeamWorkFlowArtifact teamArt,String reviewTitle,String againstState,Date createdDate,IAtsUser createdBy,SkynetTransaction transaction) throws OseeCoreException {
  PeerToPeerReviewArtifact peerToPeerRev=(PeerToPeerReviewArtifact)ArtifactTypeManager.addArtifact(AtsArtifactTypes.PeerToPeerReview,AtsUtilCore.getAtsBranch(),reviewTitle == null ? ""String_Node_Str"" : reviewTitle);
  peerToPeerRev.initializeNewStateMachine(null,new Date(),createdBy);
  if (teamArt != null) {
    teamArt.addRelation(AtsRelationTypes.TeamWorkflowToReview_Review,peerToPeerRev);
    if (againstState != null) {
      peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.RelatedToState,againstState);
    }
  }
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.ReviewBlocks,ReviewBlockType.None.name());
  peerToPeerRev.setSoleAttributeValue(AtsAttributeTypes.ReviewFormalType,ReviewFormalType.InFormal.name());
  if (transaction != null) {
    peerToPeerRev.persist(transaction);
  }
  AtsReviewCache.decache(teamArt);
  return peerToPeerRev;
}",0.965197215777262
97584,"public static Collection<IAtsVersion> createVersions(XResultData resultData,SkynetTransaction transaction,IAtsTeamDefinition teamDefHoldingVersions,Collection<String> newVersionNames){
  List<IAtsVersion> verArts=new ArrayList<IAtsVersion>();
  for (  String newVer : newVersionNames) {
    if (!Strings.isValid(newVer)) {
      resultData.logError(""String_Node_Str"");
    }
    for (    IAtsVersion verArt : teamDefHoldingVersions.getVersions()) {
      if (verArt.getName().equals(newVer)) {
        resultData.logError(String.format(""String_Node_Str"",newVer));
      }
    }
  }
  if (!resultData.isErrors()) {
    try {
      for (      String newVer : newVersionNames) {
        IAtsVersion version=AtsConfigCache.instance.getVersionFactory().createVersion(newVer);
        AtsVersionService.get().setTeamDefinition(version,teamDefHoldingVersions);
        new VersionArtifactStore(version).saveToArtifact(transaction);
      }
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    }
  }
  return verArts;
}","public static Collection<IAtsVersion> createVersions(XResultData resultData,SkynetTransaction transaction,IAtsTeamDefinition teamDefHoldingVersions,Collection<String> newVersionNames){
  List<IAtsVersion> versions=new ArrayList<IAtsVersion>();
  for (  String newVer : newVersionNames) {
    if (!Strings.isValid(newVer)) {
      resultData.logError(""String_Node_Str"");
    }
    for (    IAtsVersion verArt : teamDefHoldingVersions.getVersions()) {
      if (verArt.getName().equals(newVer)) {
        resultData.logError(String.format(""String_Node_Str"",newVer));
      }
    }
  }
  if (!resultData.isErrors()) {
    try {
      for (      String newVer : newVersionNames) {
        IAtsVersion version=AtsConfigCache.instance.getVersionFactory().createVersion(newVer);
        versions.add(version);
        Artifact verArt=new VersionArtifactStore(version).getArtifactOrCreate(transaction);
        AtsVersionService.get().setTeamDefinition(version,teamDefHoldingVersions);
        verArt.persist(transaction);
      }
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    }
  }
  return versions;
}",0.9107385591300408
97585,"@AfterClass public static void cleanUp() throws OseeCoreException {
  Operations.executeWorkAndCheckStatus(new PurgeBranchHttpRequestOperation(topLevel,true));
}","@AfterClass public static void cleanUp() throws OseeCoreException {
  try {
    OseeEventManager.getPreferences().setPendRunning(true);
    Operations.executeWorkAndCheckStatus(new PurgeBranchHttpRequestOperation(topLevel,true));
  }
  finally {
    OseeEventManager.getPreferences().setPendRunning(false);
  }
}",0.6807610993657506
97586,"@Override public void runOperation(VariableMap variableMap,final IProgressMonitor monitor) throws Exception {
  if (!blamReadyToExecute()) {
    monitor.setCanceled(true);
    return;
  }
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch scriptsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch procedureBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch traceabilityBranch=variableMap.getBranch(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  versions=new ArrayList<IAtsVersion>();
  for (  Artifact art : variableMap.getCollection(Artifact.class,""String_Node_Str"")) {
    VersionArtifactStore store=new VersionArtifactStore(art,AtsConfigCache.instance);
    versions.add(store.getVersion());
  }
  init();
  loadTestRunArtifacts(scriptsBranch);
  TraceabilityProviderOperation provider=null;
  if (traceabilityBranch != null) {
    provider=new BranchTraceabilityOperation((Branch)traceabilityBranch);
  }
 else {
    provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false);
  }
  RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(procedureBranch,provider);
  IStatus status=traceabilityData.initialize(monitor);
switch (status.getSeverity()) {
case IStatus.OK:
    requirementToCodeUnitsMap=traceabilityData.getRequirementsToCodeUnits();
  requirementNameToTestProcedures=traceabilityData.getRequirementNameToTestProcedures();
loadReqTaskMap();
writeStatusSheet(traceabilityData.getAllSwRequirements());
writeTestScriptSheet(traceabilityData.getCodeUnits());
excelWriter.endWorkbook();
IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
AIFile.writeToFile(iFile,charBak);
Program.launch(iFile.getLocation().toOSString());
break;
case IStatus.CANCEL:
monitor.setCanceled(true);
break;
default :
throw new OseeCoreException(status.getMessage(),status.getException());
}
}","@Override public void runOperation(VariableMap variableMap,final IProgressMonitor monitor) throws Exception {
  if (!blamReadyToExecute()) {
    monitor.setCanceled(true);
    return;
  }
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch scriptsBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch procedureBranch=variableMap.getBranch(""String_Node_Str"");
  IOseeBranch traceabilityBranch=variableMap.getBranch(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  versions=new ArrayList<IAtsVersion>();
  for (  IAtsVersion version : variableMap.getCollection(IAtsVersion.class,""String_Node_Str"")) {
    versions.add(version);
  }
  init();
  loadTestRunArtifacts(scriptsBranch);
  TraceabilityProviderOperation provider=null;
  if (traceabilityBranch != null) {
    provider=new BranchTraceabilityOperation((Branch)traceabilityBranch);
  }
 else {
    provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false);
  }
  RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(procedureBranch,provider);
  IStatus status=traceabilityData.initialize(monitor);
switch (status.getSeverity()) {
case IStatus.OK:
    requirementToCodeUnitsMap=traceabilityData.getRequirementsToCodeUnits();
  requirementNameToTestProcedures=traceabilityData.getRequirementNameToTestProcedures();
loadReqTaskMap();
writeStatusSheet(traceabilityData.getAllSwRequirements());
writeTestScriptSheet(traceabilityData.getCodeUnits());
excelWriter.endWorkbook();
IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
AIFile.writeToFile(iFile,charBak);
Program.launch(iFile.getLocation().toOSString());
break;
case IStatus.CANCEL:
monitor.setCanceled(true);
break;
default :
throw new OseeCoreException(status.getMessage(),status.getException());
}
}",0.9592947886958776
97587,"@SuppressWarnings(""String_Node_Str"") public <T>Collection<T> getCollection(Class<T> clazz,String parameterName) throws OseeArgumentException {
  return getValue(Collection.class,parameterName);
}","@SuppressWarnings(""String_Node_Str"") public <T>Collection<T> getCollection(Class<T> clazz,String parameterName) throws OseeArgumentException {
  List<T> results=new ArrayList<T>();
  for (  Object obj : getValue(Collection.class,parameterName)) {
    if (clazz.isInstance(obj)) {
      results.add((T)obj);
    }
  }
  return results;
}",0.711864406779661
97588,"@Override protected void doDelete(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    UnsubscribeRequest data=UnsubscribeRequest.createFromXML(request);
    QueryFactory queryFactory=getOrcsApi().getQueryFactory(null);
    ArtifactReadable authorArtifact=getArtifactById(queryFactory,data.getUserId());
    ArtifactReadable groupArtifact=getArtifactById(queryFactory,data.getGroupId());
    String comment=String.format(""String_Node_Str"",authorArtifact.getSoleAttributeAsString(CoreAttributeTypes.UserId),groupArtifact.getName());
    GraphReadable readableGraph=orcsApi.getGraph(null);
    TransactionFactory factory=orcsApi.getTransactionFactory(null);
    OrcsTransaction txn=factory.createTransaction(CoreBranches.COMMON,authorArtifact,comment);
    txn.asWriteableGraph(readableGraph).deleteRelation(groupArtifact,CoreRelationTypes.Users_Artifact,authorArtifact);
    txn.commit();
    String message=String.format(""String_Node_Str"");
    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentType(""String_Node_Str"");
    response.setContentLength(message.length());
    response.getWriter().append(message);
  }
 catch (  Exception ex) {
    handleError(response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"",ex);
  }
}","@Override protected void doDelete(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    UnsubscribeData data=UnsubscribeParser.createFromXML(request);
    QueryFactory queryFactory=getOrcsApi().getQueryFactory(null);
    ArtifactReadable userArtifact=getArtifactById(queryFactory,data.getUserId());
    ArtifactReadable groupArtifact=getArtifactById(queryFactory,data.getGroupId());
    TransactionFactory factory=orcsApi.getTransactionFactory(null);
    Callable<String> callable=factory.createUnsubscribeTx(userArtifact,groupArtifact);
    String message=callable.call();
    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentType(""String_Node_Str"");
    response.setContentLength(message.length());
    response.getWriter().append(message);
  }
 catch (  Exception ex) {
    handleError(response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"",ex);
  }
}",0.6888489208633094
97589,"private String createConfirmationPage(String uri,UnsubscribeRequest data) throws IOException {
  URL url=bundleContext.getBundle().getResource(""String_Node_Str"");
  InputStream inputStream=null;
  try {
    inputStream=url.openStream();
    String template=Lib.inputStreamToString(inputStream);
    return String.format(template,uri,data.getGroupId(),data.getUserId());
  }
  finally {
    Lib.close(inputStream);
  }
}","private String createConfirmationPage(String uri,UnsubscribeData data) throws IOException {
  URL url=bundleContext.getBundle().getResource(""String_Node_Str"");
  InputStream inputStream=null;
  try {
    inputStream=url.openStream();
    String template=Lib.inputStreamToString(inputStream);
    return String.format(template,uri,data.getGroupId(),data.getUserId());
  }
  finally {
    Lib.close(inputStream);
  }
}",0.9868263473053892
97590,"@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    String requestUri=request.getRequestURL().toString();
    requestUri=requestUri.replace(request.getPathInfo(),""String_Node_Str"");
    UnsubscribeRequest data=UnsubscribeRequest.createFromURI(request);
    String page=createConfirmationPage(requestUri,data);
    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentType(""String_Node_Str"");
    response.setContentLength(page.length());
    response.getWriter().append(page);
  }
 catch (  Exception ex) {
    handleError(response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"",ex);
  }
}","@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException {
  try {
    String requestUri=request.getRequestURL().toString();
    requestUri=requestUri.replace(request.getPathInfo(),""String_Node_Str"");
    UnsubscribeData data=UnsubscribeParser.createFromURI(request);
    String page=createConfirmationPage(requestUri,data);
    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentType(""String_Node_Str"");
    response.setContentLength(page.length());
    response.getWriter().append(page);
  }
 catch (  Exception ex) {
    handleError(response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"",ex);
  }
}",0.9825834542815676
97591,"@Test(expected=OseeArgumentException.class) public void testAddState_exception2() throws OseeCoreException {
  WorkStateProviderImpl provider=new WorkStateProviderImpl(new MockWorkStateFactory());
  provider.addState(new WorkStateImpl(""String_Node_Str""));
  provider.addState(""String_Node_Str"",new LinkedList<IAtsUser>(),34,23);
}","@Test public void testAddState_exception2() throws OseeCoreException {
  WorkStateProviderImpl provider=new WorkStateProviderImpl(new MockWorkStateFactory());
  provider.addState(new WorkStateImpl(""String_Node_Str""));
  provider.addState(""String_Node_Str"",new LinkedList<IAtsUser>(),34,23);
}",0.9389067524115756
97592,"@Test(expected=OseeArgumentException.class) public void testAddState_exception() throws OseeCoreException {
  WorkStateProviderImpl provider=new WorkStateProviderImpl(new MockWorkStateFactory());
  provider.addState(new WorkStateImpl(""String_Node_Str""));
  provider.addState(new WorkStateImpl(""String_Node_Str""));
}","@Test public void testAddState_exception() throws OseeCoreException {
  WorkStateProviderImpl provider=new WorkStateProviderImpl(new MockWorkStateFactory());
  provider.addState(new WorkStateImpl(""String_Node_Str""));
  provider.addState(new WorkStateImpl(""String_Node_Str""));
}",0.2871621621621621
97593,"@Override public void addState(String name,List<? extends IAtsUser> assignees) throws OseeArgumentException {
  addState(name,assignees,0,0);
}","@Override public void addState(String name,List<? extends IAtsUser> assignees){
  addState(name,assignees,0,0);
}",0.8828125
97594,"@Override public void createState(String stateName) throws OseeArgumentException {
  WorkState state=getState(stateName);
  if (state == null) {
    state=factory.createStateData(stateName);
    addState(state);
  }
}","@Override public void createState(String stateName){
  WorkState state=getState(stateName);
  if (state == null) {
    state=factory.createStateData(stateName);
    addState(state);
  }
}",0.9257425742574258
97595,"public void runIt(IProgressMonitor monitor,XResultData xResultData) throws OseeCoreException {
  SevereLoggingMonitor monitorLog=new SevereLoggingMonitor();
  OseeLog.registerLoggerListener(monitorLog);
  AtsBulkLoad.loadConfig(true);
  int count=0;
  List<Collection<Integer>> artIdLists=null;
  ElapsedTime elapsedTime=new ElapsedTime(""String_Node_Str"");
  artIdLists=loadAtsBranchArtifactIds(xResultData,monitor);
  elapsedTime.end();
  if (monitor != null) {
    monitor.beginTask(getName(),artIdLists.size());
  }
  OseeEventManager.setDisableEvents(true);
  try {
    testNameToResultsMap=new HashCollection<String,String>();
    hrids.clear();
    legacyPcrIdToParentHrid.clear();
    for (    Collection<Integer> artIdList : artIdLists) {
      Collection<Artifact> allArtifacts=ArtifactQuery.getArtifactListFromIds(artIdList,AtsUtil.getAtsBranch());
      List<Artifact> artifacts=new ArrayList<Artifact>(allArtifacts.size());
      for (      Artifact artifact : allArtifacts) {
        if (!artifact.isDeleted()) {
          artifacts.add(artifact);
        }
      }
      count+=artifacts.size();
      testCompletedCancelledStateAttributesSetWithPersist(artifacts);
      testStateAttributeDuplications(artifacts);
      testArtifactIds(artifacts);
      testAtsAttributevaluesWithPersist(artifacts);
      testStateInWorkDefinition(artifacts);
      testAttributeSetWorkDefinitionsExist(artifacts);
      testAtsActionsHaveTeamWorkflow(artifacts);
      testAtsWorkflowsHaveAction(artifacts);
      testAtsWorkflowsHaveZeroOrOneVersion(artifacts);
      testAtsWorkflowsValidVersion(artifacts);
      testTasksHaveParentWorkflow(artifacts);
      testReviewsHaveParentWorkflowOrActionableItems(artifacts);
      testReviewsHaveValidDefectAndRoleXml(artifacts);
      testTeamWorkflows(artifacts);
      testAtsBranchManager(artifacts);
      testTeamDefinitions(artifacts);
      testVersionArtifacts(artifacts);
      testStateMachineAssignees(artifacts);
      testAtsLogs(artifacts);
      testActionableItemToTeamDefinition(artifacts);
      for (      IAtsHealthCheck atsHealthCheck : AtsHealthCheck.getAtsHealthCheckItems()) {
        atsHealthCheck.validateAtsDatabase(artifacts,testNameToResultsMap,testNameToTimeSpentMap);
      }
      if (monitor != null) {
        monitor.worked(1);
      }
    }
    addResultsMapToResultData(xResultData,testNameToResultsMap);
    addTestTimeMapToResultData(xResultData);
  }
  finally {
    OseeEventManager.setDisableEvents(false);
  }
  xResultData.reportSevereLoggingMonitor(monitorLog);
  if (monitor != null) {
    xResultData.log(monitor,""String_Node_Str"" + count + ""String_Node_Str"");
  }
}","public void runIt(IProgressMonitor monitor,XResultData xResultData) throws OseeCoreException {
  SevereLoggingMonitor monitorLog=new SevereLoggingMonitor();
  OseeLog.registerLoggerListener(monitorLog);
  AtsBulkLoad.loadConfig(true);
  int count=0;
  List<Collection<Integer>> artIdLists=null;
  ElapsedTime elapsedTime=new ElapsedTime(""String_Node_Str"");
  artIdLists=loadAtsBranchArtifactIds(xResultData,monitor);
  elapsedTime.end();
  if (monitor != null) {
    monitor.beginTask(getName(),artIdLists.size());
  }
  OseeEventManager.setDisableEvents(true);
  try {
    testNameToResultsMap=new HashCollection<String,String>();
    hrids.clear();
    legacyPcrIdToParentHrid.clear();
    for (    Collection<Integer> artIdList : artIdLists) {
      Collection<Artifact> allArtifacts=ArtifactQuery.getArtifactListFromIds(artIdList,AtsUtil.getAtsBranch());
      List<Artifact> artifacts=new ArrayList<Artifact>(allArtifacts.size());
      for (      Artifact artifact : allArtifacts) {
        if (!artifact.isDeleted()) {
          artifacts.add(artifact);
        }
      }
      count+=artifacts.size();
      testAtsAttributevaluesWithPersist(artifacts);
      if (monitor != null) {
        monitor.worked(1);
      }
    }
    addResultsMapToResultData(xResultData,testNameToResultsMap);
    addTestTimeMapToResultData(xResultData);
  }
  finally {
    OseeEventManager.setDisableEvents(false);
  }
  xResultData.reportSevereLoggingMonitor(monitorLog);
  if (monitor != null) {
    xResultData.log(monitor,""String_Node_Str"" + count + ""String_Node_Str"");
  }
}",0.7372901395128872
97596,"private ArtifactJoinQuery createArtifactIdJoin(IOseeDatabaseService dbService,HasCancellation cancellation,int fetchSize) throws OseeCoreException {
  ArtifactJoinQuery artifactJoin=JoinUtility.createArtifactJoinQuery(dbService);
  for (  AbstractJoinQuery join : queryContext.getJoins()) {
    join.store();
  }
  String query=queryContext.getSql();
  List<Object> params=queryContext.getParameters();
  try {
    checkCancelled(cancellation);
    Integer transactionId=-1;
    IOseeStatement chStmt=dbService.getStatement();
    try {
      chStmt.runPreparedQuery(fetchSize,query,params.toArray());
      while (chStmt.next()) {
        checkCancelled(cancellation);
        Integer artId=chStmt.getInt(""String_Node_Str"");
        Integer branchId=chStmt.getInt(""String_Node_Str"");
        if (queryContext.getOptions().isHistorical()) {
          transactionId=chStmt.getInt(""String_Node_Str"");
        }
        artifactJoin.add(artId,branchId,transactionId);
      }
    }
  finally {
      chStmt.close();
    }
  }
  finally {
    for (    AbstractJoinQuery join : queryContext.getJoins()) {
      join.delete();
    }
  }
  return artifactJoin;
}","private ArtifactJoinQuery createArtifactIdJoin(IOseeDatabaseService dbService,HasCancellation cancellation,int fetchSize) throws OseeCoreException {
  ArtifactJoinQuery artifactJoin=JoinUtility.createArtifactJoinQuery(dbService);
  try {
    for (    AbstractJoinQuery join : queryContext.getJoins()) {
      join.store();
      checkCancelled(cancellation);
    }
    Integer transactionId=-1;
    IOseeStatement chStmt=dbService.getStatement();
    try {
      checkCancelled(cancellation);
      String query=queryContext.getSql();
      List<Object> params=queryContext.getParameters();
      chStmt.runPreparedQuery(fetchSize,query,params.toArray());
      while (chStmt.next()) {
        checkCancelled(cancellation);
        Integer artId=chStmt.getInt(""String_Node_Str"");
        Integer branchId=chStmt.getInt(""String_Node_Str"");
        if (queryContext.getOptions().isHistorical()) {
          transactionId=chStmt.getInt(""String_Node_Str"");
        }
        artifactJoin.add(artId,branchId,transactionId);
        checkCancelled(cancellation);
      }
    }
  finally {
      chStmt.close();
    }
  }
  finally {
    for (    AbstractJoinQuery join : queryContext.getJoins()) {
      try {
        join.delete();
      }
 catch (      OseeCoreException ex) {
      }
    }
  }
  return artifactJoin;
}",0.5522267206477732
97597,"public static final String selectNodesText(Node startingNode){
  StringBuffer buffer=new StringBuffer();
  NodeList childNodes=startingNode.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    if (childNodes.item(i).getNodeType() == Node.CDATA_SECTION_NODE || childNodes.item(i).getNodeType() == Node.TEXT_NODE) {
      buffer.append(childNodes.item(i).getNodeValue().trim());
    }
  }
  return buffer.toString();
}","public static final String selectNodesText(Node startingNode){
  StringBuffer buffer=new StringBuffer();
  NodeList childNodes=startingNode.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node node=childNodes.item(i);
    if (node.getNodeType() == Node.CDATA_SECTION_NODE || node.getNodeType() == Node.TEXT_NODE) {
      buffer.append(node.getNodeValue().trim());
    }
  }
  return buffer.toString();
}",0.8723897911832946
97598,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeStatement chStmt=ServiceUtil.getOseeDatabaseService().getStatement();
  try {
    monitor.setTaskName(""String_Node_Str"");
    chStmt.runPreparedQuery(GET_TRANS_DETAILS,ServiceUtil.getIdentityService().getLocalId(CoreAttributeTypes.WordTemplateContent));
    monitor.setTaskName(""String_Node_Str"");
    while (chStmt.next() && !monitor.isCanceled()) {
      AttrData attrData=new AttrData(chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""));
      Resource resource=getResource(attrData.uri);
      try {
        boolean foundOffenderByteSeq=false;
        for (int byteIndex=0; byteIndex < resource.backingBytes.length; byteIndex++) {
          foundOffenderByteSeq=(resource.backingBytes[byteIndex] == (byte)0xEF) && (resource.backingBytes[byteIndex + 1] == (byte)0xBF) && (resource.backingBytes[byteIndex + 2] == (byte)0xBD);
          if (foundOffenderByteSeq) {
            String comment=String.format(""String_Node_Str"",chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""));
            attrData.setComment(comment);
            String offender=new String(new byte[]{resource.backingBytes[byteIndex],resource.backingBytes[byteIndex + 1],resource.backingBytes[byteIndex + 2]},""String_Node_Str"");
            log(""String_Node_Str"" + offender);
            log(""String_Node_Str"" + resource.resourceName);
            int beginIndex=resource.data.indexOf(offender);
            int maxIndex=beginIndex + 10 < resource.data.length() ? beginIndex + 10 : resource.data.length() - 1;
            beginIndex=beginIndex < 10 ? 0 : beginIndex - 10;
            log(""String_Node_Str"" + resource.data.substring(beginIndex,maxIndex));
            log(""String_Node_Str"");
            log(attrData.comment);
            break;
          }
        }
      }
 catch (      Exception ex) {
        OseeLog.logf(Activator.class,Level.SEVERE,""String_Node_Str"",attrData.gammaId,attrData.uri,ex);
      }
    }
  }
  finally {
    chStmt.close();
  }
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeStatement chStmt=ServiceUtil.getOseeDatabaseService().getStatement();
  try {
    monitor.setTaskName(""String_Node_Str"");
    boolean allBranches=branchId == -1;
    StringBuilder query=new StringBuilder();
    query.append(GET_TRANS_DETAILS);
    query.append(allBranches ? AND_ALL_BRANCHES : AND_SPECIFIC_BRANCHES);
    Object[] params=new Object[allBranches ? 1 : 3];
    params[0]=ServiceUtil.getIdentityService().getLocalId(CoreAttributeTypes.WordTemplateContent);
    if (!allBranches) {
      params[1]=branchId;
      params[2]=TransactionDetailsType.NonBaselined.getId();
    }
    chStmt.runPreparedQuery(query.toString(),params);
    monitor.setTaskName(""String_Node_Str"");
    while (chStmt.next() && !monitor.isCanceled()) {
      AttrData attrData=new AttrData(chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""));
      Resource resource=getResource(attrData.uri);
      try {
        boolean foundOffenderByteSeq=false;
        for (int byteIndex=0; byteIndex < resource.backingBytes.length; byteIndex++) {
          foundOffenderByteSeq=(resource.backingBytes[byteIndex] == (byte)0xEF) && (resource.backingBytes[byteIndex + 1] == (byte)0xBF) && (resource.backingBytes[byteIndex + 2] == (byte)0xBD);
          if (foundOffenderByteSeq) {
            String comment=String.format(""String_Node_Str"",chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""),chStmt.getString(""String_Node_Str""));
            attrData.setComment(comment);
            String offender=new String(new byte[]{resource.backingBytes[byteIndex],resource.backingBytes[byteIndex + 1],resource.backingBytes[byteIndex + 2]},""String_Node_Str"");
            log(""String_Node_Str"" + offender);
            log(""String_Node_Str"" + resource.resourceName);
            int beginIndex=resource.data.indexOf(offender);
            int maxIndex=beginIndex + 10 < resource.data.length() ? beginIndex + 10 : resource.data.length() - 1;
            beginIndex=beginIndex < 10 ? 0 : beginIndex - 10;
            log(""String_Node_Str"" + resource.data.substring(beginIndex,maxIndex));
            log(""String_Node_Str"");
            log(attrData.comment);
            break;
          }
        }
      }
 catch (      Exception ex) {
        OseeLog.logf(Activator.class,Level.SEVERE,""String_Node_Str"",attrData.gammaId,attrData.uri,ex);
      }
    }
  }
  finally {
    chStmt.close();
  }
}",0.8761785040854808
97599,"public void reload(){
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        final List<Artifact> artifacts=editor.getAwa().getRelatedArtifactsUnSorted(AtsRelationTypes.Goal_Member);
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            worldComposite.load(""String_Node_Str"",artifacts,(CustomizeData)null,TableLoadOption.None);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
        return new Status(IStatus.ERROR,Activator.PLUGIN_ID,""String_Node_Str"",ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,true);
}","public void reload(){
  if (isTableDisposed()) {
    return;
  }
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      if (isTableDisposed()) {
        return Status.OK_STATUS;
      }
      try {
        final List<Artifact> artifacts=editor.getAwa().getRelatedArtifactsUnSorted(AtsRelationTypes.Goal_Member);
        Displays.ensureInDisplayThread(new Runnable(){
          @Override public void run(){
            if (isTableDisposed()) {
              return;
            }
            worldComposite.load(""String_Node_Str"",artifacts,(CustomizeData)null,TableLoadOption.None);
          }
        }
);
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
        return new Status(IStatus.ERROR,Activator.PLUGIN_ID,""String_Node_Str"",ex);
      }
      return Status.OK_STATUS;
    }
  }
;
  Jobs.startJob(job,false);
}",0.8827420324714371
97600,"public void load() throws OseeCoreException {
  Artifact aiArt=getArtifact();
  if (aiArt != null) {
    IAtsActionableItem aia=ActionableItemFactory.getOrCreate(aiArt.getGuid(),aiArt.getName());
    aia.setHumanReadableId(aiArt.getHumanReadableId());
    aia.setName(aiArt.getName());
    atsObject=aia;
    aia.setActive(aiArt.getSoleAttributeValue(AtsAttributeTypes.Active,true));
    aia.setActionable(aiArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,true));
    aia.setDescription(aiArt.getSoleAttributeValue(AtsAttributeTypes.Description,""String_Node_Str""));
    Collection<Artifact> teamDefArts=aiArt.getRelatedArtifacts(AtsRelationTypes.TeamActionableItem_Team);
    if (!teamDefArts.isEmpty()) {
      Artifact teamDefArt=teamDefArts.iterator().next();
      IAtsTeamDefinition teamDef=TeamDefinitionFactory.getOrCreate(teamDefArt.getGuid(),teamDefArt.getName());
      aia.setTeamDefinition(teamDef);
      if (!teamDef.getActionableItems().contains(aia)) {
        teamDef.getActionableItems().add(aia);
      }
    }
    for (    String staticId : aiArt.getAttributesToStringList(CoreAttributeTypes.StaticId)) {
      aia.getStaticIds().add(staticId);
    }
    Artifact parentAiArt=aiArt.getParent();
    if (parentAiArt != null && parentAiArt.isOfType(AtsArtifactTypes.ActionableItem)) {
      IAtsActionableItem parentAi=ActionableItemFactory.getOrCreate(parentAiArt.getGuid(),parentAiArt.getName());
      aia.setParentActionableItem(parentAi);
      parentAi.getChildrenActionableItems().add(aia);
    }
    for (    Artifact userArt : aiArt.getRelatedArtifacts(AtsRelationTypes.SubscribedUser_User)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      aia.getSubscribed().add(user);
    }
    for (    Artifact userArt : aiArt.getRelatedArtifacts(AtsRelationTypes.ActionableItemLead_Lead)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      aia.getLeads().add(user);
    }
    for (    Artifact childAiArt : aiArt.getChildren()) {
      if (childAiArt.isOfType(AtsArtifactTypes.ActionableItem)) {
        IAtsActionableItem childAi=ActionableItemFactory.getOrCreate(childAiArt.getGuid(),childAiArt.getName());
        aia.getChildrenActionableItems().add(childAi);
        childAi.setParentActionableItem(aia);
      }
    }
  }
}","public void load() throws OseeCoreException {
  Artifact aiArt=getArtifact();
  if (aiArt != null) {
    IAtsActionableItem aia=ActionableItemFactory.getOrCreate(aiArt.getGuid(),aiArt.getName());
    aia.setHumanReadableId(aiArt.getHumanReadableId());
    aia.setName(aiArt.getName());
    atsObject=aia;
    aia.setActive(aiArt.getSoleAttributeValue(AtsAttributeTypes.Active,false));
    aia.setActionable(aiArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,false));
    aia.setDescription(aiArt.getSoleAttributeValue(AtsAttributeTypes.Description,""String_Node_Str""));
    Collection<Artifact> teamDefArts=aiArt.getRelatedArtifacts(AtsRelationTypes.TeamActionableItem_Team);
    if (!teamDefArts.isEmpty()) {
      Artifact teamDefArt=teamDefArts.iterator().next();
      IAtsTeamDefinition teamDef=TeamDefinitionFactory.getOrCreate(teamDefArt.getGuid(),teamDefArt.getName());
      aia.setTeamDefinition(teamDef);
      if (!teamDef.getActionableItems().contains(aia)) {
        teamDef.getActionableItems().add(aia);
      }
    }
    for (    String staticId : aiArt.getAttributesToStringList(CoreAttributeTypes.StaticId)) {
      aia.getStaticIds().add(staticId);
    }
    Artifact parentAiArt=aiArt.getParent();
    if (parentAiArt != null && parentAiArt.isOfType(AtsArtifactTypes.ActionableItem)) {
      IAtsActionableItem parentAi=ActionableItemFactory.getOrCreate(parentAiArt.getGuid(),parentAiArt.getName());
      aia.setParentActionableItem(parentAi);
      parentAi.getChildrenActionableItems().add(aia);
    }
    for (    Artifact userArt : aiArt.getRelatedArtifacts(AtsRelationTypes.SubscribedUser_User)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      aia.getSubscribed().add(user);
    }
    for (    Artifact userArt : aiArt.getRelatedArtifacts(AtsRelationTypes.ActionableItemLead_Lead)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      aia.getLeads().add(user);
    }
    for (    Artifact childAiArt : aiArt.getChildren()) {
      if (childAiArt.isOfType(AtsArtifactTypes.ActionableItem)) {
        IAtsActionableItem childAi=ActionableItemFactory.getOrCreate(childAiArt.getGuid(),childAiArt.getName());
        aia.getChildrenActionableItems().add(childAi);
        childAi.setParentActionableItem(aia);
      }
    }
  }
}",0.9969723183391004
97601,"@Override public Result saveToArtifact(SkynetTransaction transaction) throws OseeCoreException {
  Artifact aiArt=getArtifact();
  if (aiArt == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IAtsActionableItem aia=getActionableItem();
  aiArt.setName(aia.getName());
  aiArt.setSoleAttributeValue(AtsAttributeTypes.Active,aia.isActive());
  boolean actionable=aiArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,true);
  if (actionable != aia.isActionable()) {
    aiArt.setSoleAttributeValue(AtsAttributeTypes.Actionable,aia.isActionable());
  }
  if (Strings.isValid(aia.getDescription())) {
    aiArt.setSoleAttributeValue(AtsAttributeTypes.Description,aia.getDescription());
  }
  if (aia.getTeamDefinition() != null) {
    Artifact teamDefArt=new TeamDefinitionArtifactStore(aia.getTeamDefinition()).getArtifact();
    if (teamDefArt != null && !teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamActionableItem_ActionableItem).contains(aiArt)) {
      aiArt.deleteRelations(AtsRelationTypes.TeamActionableItem_Team);
      aiArt.addRelation(AtsRelationTypes.TeamActionableItem_Team,teamDefArt);
      teamDefArt.persist(transaction);
    }
  }
  List<String> newGuids=AtsObjects.toGuids(aia.getChildrenActionableItems());
  List<String> currGuids=Artifacts.toGuids(aiArt.getChildren());
  for (  Artifact child : aiArt.getChildren()) {
    if (child.isOfType(AtsArtifactTypes.ActionableItem)) {
      if (!newGuids.contains(child.getGuid())) {
        aiArt.deleteRelation(CoreRelationTypes.Default_Hierarchical__Child,child);
      }
    }
  }
  for (  String newGuid : newGuids) {
    if (!currGuids.contains(newGuid)) {
      Artifact newArt=null;
      IAtsActionableItem newAi=AtsConfigCache.getSoleByGuid(newGuid,IAtsActionableItem.class);
      if (newAi != null) {
        newArt=AtsObjectsClient.getSoleArtifact(newAi);
      }
      if (newArt == null) {
        newArt=ArtifactCache.getActive(newGuid,AtsUtilCore.getAtsBranchToken());
      }
      aiArt.addRelation(CoreRelationTypes.Default_Hierarchical__Child,newArt);
    }
  }
  setRelationsOfType(aiArt,aia.getSubscribed(),AtsRelationTypes.SubscribedUser_User);
  setRelationsOfType(aiArt,aia.getLeads(),AtsRelationTypes.ActionableItemLead_Lead);
  if (!aia.getStaticIds().isEmpty()) {
    aiArt.setAttributeValues(CoreAttributeTypes.StaticId,aia.getStaticIds());
  }
  if (aia.getParentActionableItem() == null && !aia.getGuid().equals(ActionableItems.getTopActionableItem().getGuid())) {
    Artifact topAIArt=AtsObjectsClient.getSoleArtifact(ActionableItems.getTopActionableItem());
    topAIArt.addChild(aiArt);
    topAIArt.persist(transaction);
  }
 else {
    Artifact parentAiArt=aiArt.getParent();
    if (parentAiArt != null) {
      if (parentAiArt.isOfType(AtsArtifactTypes.ActionableItem)) {
        if (!parentAiArt.getGuid().equals(aia.getParentActionableItem().getGuid())) {
          Artifact newParentAIArt=AtsObjectsClient.getSoleArtifact(aia);
          newParentAIArt.addChild(aiArt);
          newParentAIArt.persist(transaction);
          parentAiArt.persist(transaction);
        }
      }
    }
  }
  aiArt.persist(transaction);
  return Result.TrueResult;
}","@Override public Result saveToArtifact(SkynetTransaction transaction) throws OseeCoreException {
  Artifact aiArt=getArtifact();
  if (aiArt == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IAtsActionableItem aia=getActionableItem();
  aiArt.setName(aia.getName());
  aiArt.setSoleAttributeValue(AtsAttributeTypes.Active,aia.isActive());
  boolean actionable=aiArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,false);
  if (actionable != aia.isActionable()) {
    aiArt.setSoleAttributeValue(AtsAttributeTypes.Actionable,aia.isActionable());
  }
  if (Strings.isValid(aia.getDescription())) {
    aiArt.setSoleAttributeValue(AtsAttributeTypes.Description,aia.getDescription());
  }
  if (aia.getTeamDefinition() != null) {
    Artifact teamDefArt=new TeamDefinitionArtifactStore(aia.getTeamDefinition()).getArtifact();
    if (teamDefArt != null && !teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamActionableItem_ActionableItem).contains(aiArt)) {
      aiArt.deleteRelations(AtsRelationTypes.TeamActionableItem_Team);
      aiArt.addRelation(AtsRelationTypes.TeamActionableItem_Team,teamDefArt);
      teamDefArt.persist(transaction);
    }
  }
  List<String> newGuids=AtsObjects.toGuids(aia.getChildrenActionableItems());
  List<String> currGuids=Artifacts.toGuids(aiArt.getChildren());
  for (  Artifact child : aiArt.getChildren()) {
    if (child.isOfType(AtsArtifactTypes.ActionableItem)) {
      if (!newGuids.contains(child.getGuid())) {
        aiArt.deleteRelation(CoreRelationTypes.Default_Hierarchical__Child,child);
      }
    }
  }
  for (  String newGuid : newGuids) {
    if (!currGuids.contains(newGuid)) {
      Artifact newArt=null;
      IAtsActionableItem newAi=AtsConfigCache.getSoleByGuid(newGuid,IAtsActionableItem.class);
      if (newAi != null) {
        newArt=AtsObjectsClient.getSoleArtifact(newAi);
      }
      if (newArt == null) {
        newArt=ArtifactCache.getActive(newGuid,AtsUtilCore.getAtsBranchToken());
      }
      aiArt.addRelation(CoreRelationTypes.Default_Hierarchical__Child,newArt);
    }
  }
  setRelationsOfType(aiArt,aia.getSubscribed(),AtsRelationTypes.SubscribedUser_User);
  setRelationsOfType(aiArt,aia.getLeads(),AtsRelationTypes.ActionableItemLead_Lead);
  if (!aia.getStaticIds().isEmpty()) {
    aiArt.setAttributeValues(CoreAttributeTypes.StaticId,aia.getStaticIds());
  }
  if (aia.getParentActionableItem() == null && !aia.getGuid().equals(ActionableItems.getTopActionableItem().getGuid())) {
    Artifact topAIArt=AtsObjectsClient.getSoleArtifact(ActionableItems.getTopActionableItem());
    topAIArt.addChild(aiArt);
    topAIArt.persist(transaction);
  }
 else {
    Artifact parentAiArt=aiArt.getParent();
    if (parentAiArt != null) {
      if (parentAiArt.isOfType(AtsArtifactTypes.ActionableItem)) {
        if (!parentAiArt.getGuid().equals(aia.getParentActionableItem().getGuid())) {
          Artifact newParentAIArt=AtsObjectsClient.getSoleArtifact(aia);
          newParentAIArt.addChild(aiArt);
          newParentAIArt.persist(transaction);
          parentAiArt.persist(transaction);
        }
      }
    }
  }
  aiArt.persist(transaction);
  return Result.TrueResult;
}",0.9989016161933156
97602,"public void load() throws OseeCoreException {
  Artifact teamDefArt=getArtifact();
  if (teamDefArt != null) {
    IAtsTeamDefinition teamDef=TeamDefinitionFactory.getOrCreate(teamDefArt.getGuid(),teamDefArt.getName());
    teamDef.setHumanReadableId(teamDefArt.getHumanReadableId());
    teamDef.setName(teamDefArt.getName());
    atsObject=teamDef;
    teamDef.setActive(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Active,true));
    teamDef.setActionable(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,true));
    teamDef.setTeamUsesVersions(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.TeamUsesVersions,true));
    teamDef.setAllowCommitBranch(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCommitBranch,true));
    teamDef.setAllowCreateBranch(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,true));
    String baselineBranchGuid=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.BaselineBranchGuid,""String_Node_Str"");
    if (Strings.isValid(baselineBranchGuid)) {
      teamDef.setBaselineBranchGuid(baselineBranchGuid);
    }
    String workflowDefinition=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.WorkflowDefinition,""String_Node_Str"");
    if (Strings.isValid(workflowDefinition)) {
      teamDef.setWorkflowDefinition(workflowDefinition);
    }
    String relatedTaskWorkDefinition=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.RelatedTaskWorkDefinition,""String_Node_Str"");
    if (Strings.isValid(relatedTaskWorkDefinition)) {
      teamDef.setRelatedTaskWorkDefinition(relatedTaskWorkDefinition);
    }
    teamDef.setDescription(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Description,""String_Node_Str""));
    teamDef.setFullName(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.FullName,""String_Node_Str""));
    for (    Artifact aiArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamActionableItem_ActionableItem)) {
      IAtsActionableItem ai=ActionableItemFactory.getOrCreate(aiArt.getGuid(),aiArt.getName());
      teamDef.getActionableItems().add(ai);
      ai.setTeamDefinition(teamDef);
    }
    for (    Artifact child : teamDefArt.getChildren()) {
      if (child.isOfType(AtsArtifactTypes.TeamDefinition)) {
        IAtsTeamDefinition childTeamDef=TeamDefinitionFactory.getOrCreate(child.getGuid(),child.getName());
        teamDef.getChildrenTeamDefinitions().add(childTeamDef);
        childTeamDef.setParentTeamDef(teamDef);
      }
    }
    for (    Artifact verArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamDefinitionToVersion_Version)) {
      IAtsVersion version=VersionFactory.getOrCreate(verArt.getGuid(),verArt.getName());
      teamDef.getVersions().add(version);
      AtsVersionService.get().setTeamDefinition(version,teamDef);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.SubscribedUser_User)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getSubscribed().add(user);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamLead_Lead)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getLeads().add(user);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamMember_Member)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getMembers().add(user);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.PrivilegedMember_Member)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getPrivilegedMembers().add(user);
    }
    for (    String ruleStr : teamDefArt.getAttributesToStringList(AtsAttributeTypes.RuleDefinition)) {
      teamDef.addRule(ruleStr);
    }
    for (    String staticId : teamDefArt.getAttributesToStringList(CoreAttributeTypes.StaticId)) {
      teamDef.getStaticIds().add(staticId);
    }
    Artifact parentTeamDefArt=teamDefArt.getParent();
    if (parentTeamDefArt != null && parentTeamDefArt.isOfType(AtsArtifactTypes.TeamDefinition)) {
      IAtsTeamDefinition parentTeamDef=TeamDefinitionFactory.getOrCreate(parentTeamDefArt.getGuid(),parentTeamDefArt.getName());
      teamDef.setParentTeamDef(parentTeamDef);
      parentTeamDef.getChildrenTeamDefinitions().add(teamDef);
    }
  }
}","public void load() throws OseeCoreException {
  Artifact teamDefArt=getArtifact();
  if (teamDefArt != null) {
    IAtsTeamDefinition teamDef=TeamDefinitionFactory.getOrCreate(teamDefArt.getGuid(),teamDefArt.getName());
    teamDef.setHumanReadableId(teamDefArt.getHumanReadableId());
    teamDef.setName(teamDefArt.getName());
    atsObject=teamDef;
    teamDef.setActive(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Active,false));
    teamDef.setActionable(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,false));
    teamDef.setTeamUsesVersions(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.TeamUsesVersions,false));
    teamDef.setAllowCommitBranch(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCommitBranch,false));
    teamDef.setAllowCreateBranch(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,false));
    String baselineBranchGuid=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.BaselineBranchGuid,""String_Node_Str"");
    if (Strings.isValid(baselineBranchGuid)) {
      teamDef.setBaselineBranchGuid(baselineBranchGuid);
    }
    String workflowDefinition=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.WorkflowDefinition,""String_Node_Str"");
    if (Strings.isValid(workflowDefinition)) {
      teamDef.setWorkflowDefinition(workflowDefinition);
    }
    String relatedTaskWorkDefinition=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.RelatedTaskWorkDefinition,""String_Node_Str"");
    if (Strings.isValid(relatedTaskWorkDefinition)) {
      teamDef.setRelatedTaskWorkDefinition(relatedTaskWorkDefinition);
    }
    teamDef.setDescription(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Description,""String_Node_Str""));
    teamDef.setFullName(teamDefArt.getSoleAttributeValue(AtsAttributeTypes.FullName,""String_Node_Str""));
    for (    Artifact aiArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamActionableItem_ActionableItem)) {
      IAtsActionableItem ai=ActionableItemFactory.getOrCreate(aiArt.getGuid(),aiArt.getName());
      teamDef.getActionableItems().add(ai);
      ai.setTeamDefinition(teamDef);
    }
    for (    Artifact child : teamDefArt.getChildren()) {
      if (child.isOfType(AtsArtifactTypes.TeamDefinition)) {
        IAtsTeamDefinition childTeamDef=TeamDefinitionFactory.getOrCreate(child.getGuid(),child.getName());
        teamDef.getChildrenTeamDefinitions().add(childTeamDef);
        childTeamDef.setParentTeamDef(teamDef);
      }
    }
    for (    Artifact verArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamDefinitionToVersion_Version)) {
      IAtsVersion version=VersionFactory.getOrCreate(verArt.getGuid(),verArt.getName());
      teamDef.getVersions().add(version);
      AtsVersionService.get().setTeamDefinition(version,teamDef);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.SubscribedUser_User)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getSubscribed().add(user);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamLead_Lead)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getLeads().add(user);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.TeamMember_Member)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getMembers().add(user);
    }
    for (    Artifact userArt : teamDefArt.getRelatedArtifacts(AtsRelationTypes.PrivilegedMember_Member)) {
      IAtsUser user=AtsUsersClient.getUserFromOseeUser((User)userArt);
      teamDef.getPrivilegedMembers().add(user);
    }
    for (    String ruleStr : teamDefArt.getAttributesToStringList(AtsAttributeTypes.RuleDefinition)) {
      teamDef.addRule(ruleStr);
    }
    for (    String staticId : teamDefArt.getAttributesToStringList(CoreAttributeTypes.StaticId)) {
      teamDef.getStaticIds().add(staticId);
    }
    Artifact parentTeamDefArt=teamDefArt.getParent();
    if (parentTeamDefArt != null && parentTeamDefArt.isOfType(AtsArtifactTypes.TeamDefinition)) {
      IAtsTeamDefinition parentTeamDef=TeamDefinitionFactory.getOrCreate(parentTeamDefArt.getGuid(),parentTeamDefArt.getName());
      teamDef.setParentTeamDef(parentTeamDef);
      parentTeamDef.getChildrenTeamDefinitions().add(teamDef);
    }
  }
}",0.995980245779258
97603,"@Override public Result saveToArtifact(SkynetTransaction transaction) throws OseeCoreException {
  Artifact teamDefArt=getArtifact();
  if (teamDefArt == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IAtsTeamDefinition teamDef=getTeamDefinition();
  teamDefArt.setName(teamDef.getName());
  teamDefArt.setSoleAttributeValue(AtsAttributeTypes.Active,teamDef.isActive());
  boolean actionable=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,true);
  if (actionable != teamDef.isActionable()) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.Actionable,teamDef.isActionable());
  }
  teamDefArt.setSoleAttributeValue(AtsAttributeTypes.TeamUsesVersions,teamDef.isTeamUsesVersions());
  boolean allowCommitBranch=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,true);
  if (allowCommitBranch != teamDef.isAllowCommitBranch()) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.AllowCommitBranch,teamDef.isAllowCommitBranch());
  }
  boolean allowCreateBranch=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,true);
  if (allowCreateBranch != teamDef.isAllowCreateBranch()) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,teamDef.isAllowCreateBranch());
  }
  if (Strings.isValid(teamDef.getBaslineBranchGuid())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.BaselineBranchGuid,teamDef.getBaslineBranchGuid());
  }
  if (Strings.isValid(teamDef.getWorkflowDefinition())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.WorkflowDefinition,teamDef.getWorkflowDefinition());
  }
  if (Strings.isValid(teamDef.getRelatedTaskWorkDefinition())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.RelatedTaskWorkDefinition,teamDef.getRelatedTaskWorkDefinition());
  }
  if (Strings.isValid(teamDef.getDescription())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.Description,teamDef.getDescription());
  }
  if (Strings.isValid(teamDef.getFullName())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.FullName,teamDef.getFullName());
  }
  for (  IAtsActionableItem aia : teamDef.getActionableItems()) {
    Artifact aiaArt=new ActionableItemArtifactStore(aia).getArtifact();
    if (aiaArt != null && aiaArt.getRelatedArtifact(AtsRelationTypes.TeamActionableItem_Team) != null) {
      aiaArt.addRelation(AtsRelationTypes.TeamActionableItem_Team,teamDefArt);
    }
  }
  List<String> newGuids=AtsObjects.toGuids(teamDef.getChildrenTeamDefinitions());
  List<String> currGuids=Artifacts.toGuids(teamDefArt.getChildren());
  for (  Artifact child : teamDefArt.getChildren()) {
    if (child.isOfType(AtsArtifactTypes.TeamDefinition)) {
      if (newGuids.contains(child.getGuid())) {
        teamDefArt.deleteRelation(CoreRelationTypes.Default_Hierarchical__Child,child);
      }
    }
  }
  for (  String newGuid : newGuids) {
    if (!currGuids.contains(newGuid)) {
      Artifact newArt=null;
      IAtsTeamDefinition newTeamDef=AtsConfigCache.getSoleByGuid(newGuid,IAtsTeamDefinition.class);
      if (newTeamDef != null) {
        newArt=AtsObjectsClient.getSoleArtifact(newTeamDef);
      }
      if (newArt == null) {
        newArt=ArtifactCache.getActive(newGuid,AtsUtilCore.getAtsBranchToken());
      }
      teamDefArt.addRelation(CoreRelationTypes.Default_Hierarchical__Child,newArt);
    }
  }
  setRelationsOfType(teamDefArt,teamDef.getVersions(),AtsRelationTypes.TeamDefinitionToVersion_Version);
  setRelationsOfType(teamDefArt,teamDef.getSubscribed(),AtsRelationTypes.SubscribedUser_User);
  setRelationsOfType(teamDefArt,teamDef.getLeads(),AtsRelationTypes.TeamLead_Lead);
  setRelationsOfType(teamDefArt,teamDef.getMembers(),AtsRelationTypes.TeamMember_Member);
  setRelationsOfType(teamDefArt,teamDef.getPrivilegedMembers(),AtsRelationTypes.PrivilegedMember_Member);
  teamDefArt.setAttributeValues(AtsAttributeTypes.RuleDefinition,teamDef.getRules());
  if (!teamDef.getStaticIds().isEmpty()) {
    teamDefArt.setAttributeValues(CoreAttributeTypes.StaticId,teamDef.getStaticIds());
  }
  if (teamDef.getParentTeamDef() == null && !teamDef.getGuid().equals(TeamDefinitions.getTopTeamDefinition().getGuid())) {
    Artifact topTeamDefArt=AtsObjectsClient.getSoleArtifact(TeamDefinitions.getTopTeamDefinition());
    topTeamDefArt.addChild(teamDefArt);
    topTeamDefArt.persist(transaction);
  }
 else {
    Artifact parentTeamDefArt=teamDefArt.getParent();
    if (parentTeamDefArt != null) {
      if (parentTeamDefArt.isOfType(AtsArtifactTypes.TeamDefinition)) {
        if (!parentTeamDefArt.getGuid().equals(teamDef.getParentTeamDef().getGuid())) {
          Artifact newParentTeamDefArt=AtsObjectsClient.getSoleArtifact(teamDef);
          newParentTeamDefArt.addChild(teamDefArt);
          newParentTeamDefArt.persist(transaction);
          parentTeamDefArt.persist(transaction);
        }
      }
    }
  }
  teamDefArt.persist(transaction);
  return Result.TrueResult;
}","@Override public Result saveToArtifact(SkynetTransaction transaction) throws OseeCoreException {
  Artifact teamDefArt=getArtifact();
  if (teamDefArt == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  IAtsTeamDefinition teamDef=getTeamDefinition();
  teamDefArt.setName(teamDef.getName());
  teamDefArt.setSoleAttributeValue(AtsAttributeTypes.Active,teamDef.isActive());
  boolean actionable=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.Actionable,false);
  if (actionable != teamDef.isActionable()) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.Actionable,teamDef.isActionable());
  }
  teamDefArt.setSoleAttributeValue(AtsAttributeTypes.TeamUsesVersions,teamDef.isTeamUsesVersions());
  boolean allowCommitBranch=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,false);
  if (allowCommitBranch != teamDef.isAllowCommitBranch()) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.AllowCommitBranch,teamDef.isAllowCommitBranch());
  }
  boolean allowCreateBranch=teamDefArt.getSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,false);
  if (allowCreateBranch != teamDef.isAllowCreateBranch()) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.AllowCreateBranch,teamDef.isAllowCreateBranch());
  }
  if (Strings.isValid(teamDef.getBaslineBranchGuid())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.BaselineBranchGuid,teamDef.getBaslineBranchGuid());
  }
  if (Strings.isValid(teamDef.getWorkflowDefinition())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.WorkflowDefinition,teamDef.getWorkflowDefinition());
  }
  if (Strings.isValid(teamDef.getRelatedTaskWorkDefinition())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.RelatedTaskWorkDefinition,teamDef.getRelatedTaskWorkDefinition());
  }
  if (Strings.isValid(teamDef.getDescription())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.Description,teamDef.getDescription());
  }
  if (Strings.isValid(teamDef.getFullName())) {
    teamDefArt.setSoleAttributeValue(AtsAttributeTypes.FullName,teamDef.getFullName());
  }
  for (  IAtsActionableItem aia : teamDef.getActionableItems()) {
    Artifact aiaArt=new ActionableItemArtifactStore(aia).getArtifact();
    if (aiaArt != null && aiaArt.getRelatedArtifact(AtsRelationTypes.TeamActionableItem_Team) != null) {
      aiaArt.addRelation(AtsRelationTypes.TeamActionableItem_Team,teamDefArt);
    }
  }
  List<String> newGuids=AtsObjects.toGuids(teamDef.getChildrenTeamDefinitions());
  List<String> currGuids=Artifacts.toGuids(teamDefArt.getChildren());
  for (  Artifact child : teamDefArt.getChildren()) {
    if (child.isOfType(AtsArtifactTypes.TeamDefinition)) {
      if (newGuids.contains(child.getGuid())) {
        teamDefArt.deleteRelation(CoreRelationTypes.Default_Hierarchical__Child,child);
      }
    }
  }
  for (  String newGuid : newGuids) {
    if (!currGuids.contains(newGuid)) {
      Artifact newArt=null;
      IAtsTeamDefinition newTeamDef=AtsConfigCache.getSoleByGuid(newGuid,IAtsTeamDefinition.class);
      if (newTeamDef != null) {
        newArt=AtsObjectsClient.getSoleArtifact(newTeamDef);
      }
      if (newArt == null) {
        newArt=ArtifactCache.getActive(newGuid,AtsUtilCore.getAtsBranchToken());
      }
      teamDefArt.addRelation(CoreRelationTypes.Default_Hierarchical__Child,newArt);
    }
  }
  setRelationsOfType(teamDefArt,teamDef.getVersions(),AtsRelationTypes.TeamDefinitionToVersion_Version);
  setRelationsOfType(teamDefArt,teamDef.getSubscribed(),AtsRelationTypes.SubscribedUser_User);
  setRelationsOfType(teamDefArt,teamDef.getLeads(),AtsRelationTypes.TeamLead_Lead);
  setRelationsOfType(teamDefArt,teamDef.getMembers(),AtsRelationTypes.TeamMember_Member);
  setRelationsOfType(teamDefArt,teamDef.getPrivilegedMembers(),AtsRelationTypes.PrivilegedMember_Member);
  teamDefArt.setAttributeValues(AtsAttributeTypes.RuleDefinition,teamDef.getRules());
  if (!teamDef.getStaticIds().isEmpty()) {
    teamDefArt.setAttributeValues(CoreAttributeTypes.StaticId,teamDef.getStaticIds());
  }
  if (teamDef.getParentTeamDef() == null && !teamDef.getGuid().equals(TeamDefinitions.getTopTeamDefinition().getGuid())) {
    Artifact topTeamDefArt=AtsObjectsClient.getSoleArtifact(TeamDefinitions.getTopTeamDefinition());
    topTeamDefArt.addChild(teamDefArt);
    topTeamDefArt.persist(transaction);
  }
 else {
    Artifact parentTeamDefArt=teamDefArt.getParent();
    if (parentTeamDefArt != null) {
      if (parentTeamDefArt.isOfType(AtsArtifactTypes.TeamDefinition)) {
        if (!parentTeamDefArt.getGuid().equals(teamDef.getParentTeamDef().getGuid())) {
          Artifact newParentTeamDefArt=AtsObjectsClient.getSoleArtifact(teamDef);
          newParentTeamDefArt.addChild(teamDefArt);
          newParentTeamDefArt.persist(transaction);
          parentTeamDefArt.persist(transaction);
        }
      }
    }
  }
  teamDefArt.persist(transaction);
  return Result.TrueResult;
}",0.9978802866659936
97604,"public void addRelationType(RelationType relationType){
  if (!validRelationTypes.contains(relationType)) {
    validRelationTypes.add(relationType);
  }
}","public void addRelationType(RelationType relationType){
  validRelationTypes.add(relationType);
}",0.7698412698412699
97605,"@Override public List<ArtifactReadable> getRelatedArtifacts(ArtifactReadable art,IRelationTypeSide relationTypeSide){
  if (art instanceof MockArtifact) {
    MockArtifact mArt=(MockArtifact)art;
    return (List<ArtifactReadable>)mArt.getRelatedArtifacts(relationTypeSide);
  }
 else {
    return Collections.emptyList();
  }
}","@Override public List<ArtifactReadable> getRelatedArtifacts(ArtifactReadable art,IRelationTypeSide relationTypeSide) throws OseeCoreException {
  if (art instanceof MockArtifact) {
    MockArtifact mArt=(MockArtifact)art;
    RelationsReadable readable=mArt.getRelatedArtifacts(relationTypeSide);
    return readable.getList();
  }
 else {
    return Collections.emptyList();
  }
}",0.8377997179125529
97606,"@Override public void refresh(){
  super.refresh();
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true);
}","@Override public void refresh(){
  super.refresh();
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true);
  List<XWidget> widgets=XWidgetUtility.findXWidgetsInControl(composite);
  for (  XWidget xWidget : widgets) {
    if (xWidget.isEditable()) {
      if (xWidget instanceof IArtifactStoredWidget) {
        IArtifactStoredWidget aWidget=(IArtifactStoredWidget)xWidget;
        try {
          aWidget.revert();
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
    }
  }
}",0.3680456490727532
97607,"public void removeWidgetForAttributeType(Collection<? extends IAttributeType> attributeTypes){
  for (  IAttributeType attributeType : attributeTypes) {
    xWidgetsMap.remove(attributeType).dispose();
  }
  refresh();
}","public void removeWidgetForAttributeType(Collection<? extends IAttributeType> attributeTypes){
  for (  IAttributeType attributeType : attributeTypes) {
    xWidgetsMap.remove(attributeType).dispose();
  }
  if (attributeTypes.size() > 0) {
    markDirty();
  }
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true);
}",0.7799642218246869
97608,"public void addWidgetForAttributeType(Collection<IAttributeType> attributeTypes) throws OseeCoreException {
  Artifact artifact=editor.getEditorInput().getArtifact();
  boolean isEditable=!artifact.isReadOnly();
  for (  IAttributeType attributeType : attributeTypes) {
    Composite internalComposite;
    if (DefaultAttributeXWidgetProvider.useMultiLineWidget(attributeType)) {
      internalComposite=createAttributeTypeControlsInSection(composite,attributeType,isEditable,15);
    }
 else {
      internalComposite=createAttributeTypeControls(composite,artifact,attributeType,isEditable,false,20);
    }
    setLabelFonts(internalComposite,FontManager.getDefaultLabelFont());
    HelpUtil.setHelp(internalComposite,OseeHelpContext.ARTIFACT_EDITOR__ATTRIBUTES);
    xWidgetsMap.put(attributeType,internalComposite);
  }
  refresh();
}","public void addWidgetForAttributeType(Collection<IAttributeType> attributeTypes) throws OseeCoreException {
  Artifact artifact=editor.getEditorInput().getArtifact();
  boolean isEditable=!artifact.isReadOnly();
  for (  IAttributeType attributeType : attributeTypes) {
    Composite internalComposite;
    if (DefaultAttributeXWidgetProvider.useMultiLineWidget(attributeType)) {
      internalComposite=createAttributeTypeControlsInSection(composite,attributeType,isEditable,15);
    }
 else {
      internalComposite=createAttributeTypeControls(composite,artifact,attributeType,isEditable,false,20);
    }
    setLabelFonts(internalComposite,FontManager.getDefaultLabelFont());
    HelpUtil.setHelp(internalComposite,OseeHelpContext.ARTIFACT_EDITOR__ATTRIBUTES);
    xWidgetsMap.put(attributeType,internalComposite);
  }
  decorator.refresh();
  getManagedForm().getForm().getBody().layout(true);
}",0.9637305699481864
97609,"public void update(){
  if (requiresCreation) {
    if (decoration != null) {
      decoration.dispose();
    }
    decoration=new ControlDecoration(control,position,control.getParent());
    requiresCreation=false;
  }
  if (isVisible()) {
    if (image != null) {
      decoration.setImage(image);
    }
    decoration.setDescriptionText(description);
    decoration.show();
  }
 else {
    decoration.setDescriptionText(null);
    decoration.hide();
  }
}","public void update(){
  if (requiresCreation) {
    if (decoration != null) {
      decoration.dispose();
    }
    decoration=new ControlDecoration(control,position,control.getParent());
    requiresCreation=false;
  }
  if (isVisible()) {
    if (image != null) {
      if (decoration.getControl() != null) {
        decoration.setImage(image);
      }
    }
    decoration.setDescriptionText(description);
    decoration.show();
  }
 else {
    decoration.setDescriptionText(null);
    decoration.hide();
  }
}",0.9433573635427396
97610,"private void getChildrenFromWorkDefinitionMatch(Object element,List<Object> items){
  items.addAll(AtsWorkDefinitionService.getService().getStatesOrderedByDefaultToState(((WorkDefinitionMatch)element).getWorkDefinition()));
  items.add(new WrappedPercentWeight(((WorkDefinitionMatch)element).getWorkDefinition()));
  items.add(new WrappedTrace(((WorkDefinitionMatch)element).getTrace()));
}","private void getChildrenFromWorkDefinitionMatch(Object element,List<Object> items){
  items.addAll(AtsWorkDefinitionService.getService().getStatesOrderedByOrdinal(((WorkDefinitionMatch)element).getWorkDefinition()));
  items.add(new WrappedPercentWeight(((WorkDefinitionMatch)element).getWorkDefinition()));
  items.add(new WrappedTrace(((WorkDefinitionMatch)element).getTrace()));
}",0.9728331177231564
97611,"/** 
 * Process transition and persist changes to given skynet transaction
 * @return Result.isFalse if failure
 */
public void handleTransition(TransitionResults results){
  try {
    if (transaction == null) {
      transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),helper.getName());
    }
    for (    AbstractWorkflowArtifact awa : helper.getAwas()) {
      try {
        IAtsStateDefinition fromState=awa.getStateDefinition();
        IAtsStateDefinition toState=awa.getStateDefinitionByName(helper.getToStateName());
        Date transitionDate=getTransitionOnDate();
        IAtsUser transitionUser=getTransitionAsUser();
        if (fromState.getStateType().isCancelledState()) {
          logWorkflowUnCancelledEvent(awa);
        }
 else         if (fromState.getStateType().isCompletedState()) {
          logWorkflowUnCompletedEvent(awa);
        }
        if (toState.getStateType().isCancelledState()) {
          logWorkflowCancelledEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
        }
 else         if (toState.getStateType().isCompletedState()) {
          logWorkflowCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
        }
 else {
          logStateCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
        }
        logStateStartedEvent(awa,toState,transitionDate,transitionUser);
        List<IAtsUser> toAssignees=new LinkedList<IAtsUser>();
        if (!toState.getStateType().isCompletedOrCancelledState()) {
          if (helper.getToAssignees() != null) {
            toAssignees.addAll(helper.getToAssignees());
          }
          if (toAssignees.contains(AtsUsers.getUnAssigned())) {
            toAssignees.remove(AtsUsers.getUnAssigned());
            toAssignees.add(AtsUsersClient.getUser());
          }
          if (toAssignees.isEmpty()) {
            toAssignees.add(AtsUsersClient.getUser());
          }
        }
        awa.getStateMgr().transitionHelper(toAssignees,fromState,toState,completedCancellationReason);
        if (awa.isValidationRequired() && awa.isTeamWorkflow()) {
          ValidateReviewManager.createValidateReview((TeamWorkFlowArtifact)awa,false,transitionDate,transitionUser,transaction);
        }
        awa.persist(transaction);
        awa.transitioned(fromState,toState,helper.getToAssignees(),transaction);
        for (        ITransitionListener listener : TransitionListeners.getListeners()) {
          listener.transitioned(awa,fromState,toState,helper.getToAssignees(),transaction);
        }
        if (toState.getStateType().isCompletedOrCancelledState()) {
          awa.clearImplementersCache();
        }
      }
 catch (      Exception ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
      }
    }
  }
 catch (  Exception ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
}","/** 
 * Process transition and persist changes to given skynet transaction
 * @return Result.isFalse if failure
 */
public void handleTransition(TransitionResults results){
  try {
    if (transaction == null) {
      transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),helper.getName());
    }
    for (    AbstractWorkflowArtifact awa : helper.getAwas()) {
      try {
        IAtsStateDefinition fromState=awa.getStateDefinition();
        IAtsStateDefinition toState=awa.getStateDefinitionByName(helper.getToStateName());
        if (!fromState.equals(toState)) {
          Date transitionDate=getTransitionOnDate();
          IAtsUser transitionUser=getTransitionAsUser();
          if (fromState.getStateType().isCancelledState()) {
            logWorkflowUnCancelledEvent(awa);
          }
 else           if (fromState.getStateType().isCompletedState()) {
            logWorkflowUnCompletedEvent(awa);
          }
          if (toState.getStateType().isCancelledState()) {
            logWorkflowCancelledEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else           if (toState.getStateType().isCompletedState()) {
            logWorkflowCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
 else {
            logStateCompletedEvent(awa,awa.getStateMgr().getCurrentStateName(),completedCancellationReason,transitionDate,transitionUser);
          }
          logStateStartedEvent(awa,toState,transitionDate,transitionUser);
          List<IAtsUser> toAssignees=new LinkedList<IAtsUser>();
          if (!toState.getStateType().isCompletedOrCancelledState()) {
            if (helper.getToAssignees() != null) {
              toAssignees.addAll(helper.getToAssignees());
            }
            if (toAssignees.contains(AtsUsers.getUnAssigned())) {
              toAssignees.remove(AtsUsers.getUnAssigned());
              toAssignees.add(AtsUsersClient.getUser());
            }
            if (toAssignees.isEmpty()) {
              toAssignees.add(AtsUsersClient.getUser());
            }
          }
          awa.getStateMgr().transitionHelper(toAssignees,fromState,toState,completedCancellationReason);
          if (awa.isValidationRequired() && awa.isTeamWorkflow()) {
            ValidateReviewManager.createValidateReview((TeamWorkFlowArtifact)awa,false,transitionDate,transitionUser,transaction);
          }
          awa.persist(transaction);
          awa.transitioned(fromState,toState,helper.getToAssignees(),transaction);
          for (          ITransitionListener listener : TransitionListeners.getListeners()) {
            listener.transitioned(awa,fromState,toState,helper.getToAssignees(),transaction);
          }
          if (toState.getStateType().isCompletedOrCancelledState()) {
            awa.clearImplementersCache();
          }
        }
      }
 catch (      Exception ex) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
      }
    }
  }
 catch (  Exception ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
}",0.9767733835530444
97612,"/** 
 * Validate AbstractWorkflowArtifact for transition including checking widget validation, rules, assignment, etc.
 * @return Result.isFalse if failure
 */
public void handleTransitionValidation(TransitionResults results){
  try {
    if (helper.getAwas().isEmpty()) {
      results.addResult(TransitionResult.NO_WORKFLOWS_PROVIDED_FOR_TRANSITION);
      return;
    }
    if (helper.getToStateName() == null) {
      results.addResult(TransitionResult.TO_STATE_CANT_BE_NULL);
      return;
    }
    if (helper.isSystemUser()) {
      results.addResult(TransitionResult.CAN_NOT_TRANSITION_AS_SYSTEM_USER);
      return;
    }
  }
 catch (  OseeCoreException ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
  for (  AbstractWorkflowArtifact awa : helper.getAwas()) {
    try {
      IAtsStateDefinition fromStateDef=awa.getStateDefinition();
      IAtsStateDefinition toStateDef=awa.getStateDefinitionByName(helper.getToStateName());
      if (toStateDef == null) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getToStateName(),awa.getWorkDefinition().getName())));
        continue;
      }
      if (!helper.isOverrideTransitionValidityCheck() && !fromStateDef.getToStates().contains(toStateDef) && !fromStateDef.getStateType().isCompletedOrCancelledState()) {
        String errStr=String.format(""String_Node_Str"",toStateDef.getName(),fromStateDef.getName(),toStateDef.getName());
        OseeLog.log(Activator.class,Level.SEVERE,errStr);
        results.addResult(awa,new TransitionResult(errStr));
        continue;
      }
      boolean stateIsEditable=WorkflowManagerCore.isEditable(awa,awa.getStateDefinition(),helper.isPrivilegedEditEnabled());
      boolean currentlyUnAssigned=awa.getStateMgr().getAssignees().contains(AtsUsers.getUnAssigned());
      awa.getStateMgr().validateNoBootstrapUser();
      boolean overrideAssigneeCheck=helper.isOverrideAssigneeCheck();
      if (awa.isTask() && awa.getParentTeamWorkflow().isCompletedOrCancelled()) {
        results.addResult(awa,TransitionResult.TASK_CANT_TRANSITION_IF_PARENT_COMPLETED);
        continue;
      }
 else       if (!awa.isTask() && !stateIsEditable && !currentlyUnAssigned&& !overrideAssigneeCheck) {
        results.addResult(awa,TransitionResult.MUST_BE_ASSIGNED);
        continue;
      }
      isWorkingBranchTransitionable(results,awa,toStateDef);
      if (results.isCancelled()) {
        continue;
      }
      if (!overrideAssigneeCheck && !toStateDef.getStateType().isCancelledState() && helper.isSystemUserAssingee(awa)) {
        results.addResult(awa,TransitionResult.CAN_NOT_TRANSITION_WITH_SYSTEM_USER_ASSIGNED);
        continue;
      }
      isStateTransitionable(results,awa,toStateDef);
      if (results.isCancelled()) {
        continue;
      }
      isTransitionValidForExtensions(results,awa,fromStateDef,toStateDef);
      if (results.isCancelled()) {
        continue;
      }
    }
 catch (    OseeCoreException ex) {
      results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
    }
  }
}","/** 
 * Validate AbstractWorkflowArtifact for transition including checking widget validation, rules, assignment, etc.
 * @return Result.isFalse if failure
 */
public void handleTransitionValidation(TransitionResults results){
  try {
    if (helper.getAwas().isEmpty()) {
      results.addResult(TransitionResult.NO_WORKFLOWS_PROVIDED_FOR_TRANSITION);
      return;
    }
    if (helper.getToStateName() == null) {
      results.addResult(TransitionResult.TO_STATE_CANT_BE_NULL);
      return;
    }
    if (helper.isSystemUser()) {
      results.addResult(TransitionResult.CAN_NOT_TRANSITION_AS_SYSTEM_USER);
      return;
    }
  }
 catch (  OseeCoreException ex) {
    results.addResult(new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
  }
  for (  AbstractWorkflowArtifact awa : helper.getAwas()) {
    try {
      IAtsStateDefinition fromStateDef=awa.getStateDefinition();
      IAtsStateDefinition toStateDef=awa.getStateDefinitionByName(helper.getToStateName());
      if (toStateDef == null) {
        results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getToStateName(),awa.getWorkDefinition().getName())));
        continue;
      }
      if (!fromStateDef.equals(toStateDef)) {
        if (!helper.isOverrideTransitionValidityCheck() && !fromStateDef.getToStates().contains(toStateDef) && !fromStateDef.getStateType().isCompletedOrCancelledState()) {
          String errStr=String.format(""String_Node_Str"",toStateDef.getName(),fromStateDef.getName(),toStateDef.getName());
          OseeLog.log(Activator.class,Level.SEVERE,errStr);
          results.addResult(awa,new TransitionResult(errStr));
          continue;
        }
        boolean stateIsEditable=WorkflowManagerCore.isEditable(awa,awa.getStateDefinition(),helper.isPrivilegedEditEnabled());
        boolean currentlyUnAssigned=awa.getStateMgr().getAssignees().contains(AtsUsers.getUnAssigned());
        awa.getStateMgr().validateNoBootstrapUser();
        boolean overrideAssigneeCheck=helper.isOverrideAssigneeCheck();
        if (awa.isTask() && awa.getParentTeamWorkflow().isCompletedOrCancelled()) {
          results.addResult(awa,TransitionResult.TASK_CANT_TRANSITION_IF_PARENT_COMPLETED);
          continue;
        }
 else         if (!awa.isTask() && !stateIsEditable && !currentlyUnAssigned&& !overrideAssigneeCheck) {
          results.addResult(awa,TransitionResult.MUST_BE_ASSIGNED);
          continue;
        }
        isWorkingBranchTransitionable(results,awa,toStateDef);
        if (results.isCancelled()) {
          continue;
        }
        if (!overrideAssigneeCheck && !toStateDef.getStateType().isCancelledState() && helper.isSystemUserAssingee(awa)) {
          results.addResult(awa,TransitionResult.CAN_NOT_TRANSITION_WITH_SYSTEM_USER_ASSIGNED);
          continue;
        }
        isStateTransitionable(results,awa,toStateDef);
        if (results.isCancelled()) {
          continue;
        }
        isTransitionValidForExtensions(results,awa,fromStateDef,toStateDef);
        if (results.isCancelled()) {
          continue;
        }
      }
    }
 catch (    OseeCoreException ex) {
      results.addResult(awa,new TransitionResult(String.format(""String_Node_Str"",helper.getName()),ex));
    }
  }
}",0.9810087173100872
97613,"private String getFormatStr(IAtsTeamDefinition teamDef) throws OseeCoreException {
  if (teamDef != null) {
    Artifact artifact=new TeamDefinitionArtifactStore(teamDef).getArtifact();
    if (artifact != null) {
      String formatStr=artifact.getSoleAttributeValue(AtsAttributeTypes.ActionDetailsFormat);
      if (Strings.isValid(formatStr)) {
        return formatStr;
      }
    }
    if (teamDef.getParentTeamDef() != null) {
      return getFormatStr(teamDef.getParentTeamDef());
    }
  }
  return null;
}","private String getFormatStr(IAtsTeamDefinition teamDef) throws OseeCoreException {
  if (teamDef != null) {
    Artifact artifact=new TeamDefinitionArtifactStore(teamDef).getArtifact();
    if (artifact != null) {
      String formatStr=artifact.getSoleAttributeValue(AtsAttributeTypes.ActionDetailsFormat,""String_Node_Str"");
      if (Strings.isValid(formatStr)) {
        return formatStr;
      }
    }
    if (teamDef.getParentTeamDef() != null) {
      return getFormatStr(teamDef.getParentTeamDef());
    }
  }
  return null;
}",0.982824427480916
97614,"@Override public synchronized InetSocketAddress getRecorderSocketAddress() throws RemoteException {
  if (terminated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!recorderOutputChannel.isOpen()) {
    throw new RemoteException(""String_Node_Str"");
  }
  final DatagramSocket socket=recorderOutputChannel.socket();
  return new InetSocketAddress(socket.getLocalAddress(),socket.getLocalPort());
}","@Override public synchronized InetSocketAddress getRecorderSocketAddress() throws RemoteException {
  if (terminated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (recorderOutputChannel == null) {
    try {
      setupRecorderOutputChannel();
    }
 catch (    Exception ex) {
      throw new RemoteException(""String_Node_Str"");
    }
  }
  if (!recorderOutputChannel.isOpen()) {
    throw new RemoteException(""String_Node_Str"");
  }
  final DatagramSocket socket=recorderOutputChannel.socket();
  return new InetSocketAddress(socket.getLocalAddress(),socket.getLocalPort());
}",0.7571288102261554
97615,"/** 
 * Constructs a new message manager service
 */
public AbstractMessageToolService(IMessageManager messageManager) throws IOException {
  openXmitChannel();
  recorderOutputChannel=DatagramChannel.open();
  InetSocketAddress address=new InetSocketAddress(InetAddress.getLocalHost(),0);
  try {
    recorderOutputChannel.socket().bind(address);
  }
 catch (  BindException e) {
    throw new IOException(""String_Node_Str"" + address.toString());
  }
  messageRequestor=messageManager.createMessageRequestor(getClass().getName());
}","/** 
 * Constructs a new message manager service
 */
public AbstractMessageToolService(IMessageManager messageManager) throws IOException {
  openXmitChannel();
  messageRequestor=messageManager.createMessageRequestor(getClass().getName());
}",0.4387096774193548
97616,"@Override public void stopRecording() throws RemoteException {
  if (terminated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (recorder.isRecording()) {
    try {
      recorder.stopRecording(false);
    }
 catch (    IOException e) {
      OseeLog.log(MessageSystemTestEnvironment.class,Level.INFO,""String_Node_Str"",e);
      throw new RemoteException(""String_Node_Str"",e);
    }
    try {
      recorderOutputChannel.disconnect();
    }
 catch (    IOException e) {
      throw new RemoteException(""String_Node_Str"",e);
    }
  }
}","@Override public void stopRecording() throws RemoteException {
  if (terminated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (recorder.isRecording()) {
    try {
      recorder.stopRecording(false);
    }
 catch (    IOException e) {
      OseeLog.log(MessageSystemTestEnvironment.class,Level.INFO,""String_Node_Str"",e);
      throw new RemoteException(""String_Node_Str"",e);
    }
    try {
      recorderOutputChannel.disconnect();
      recorderOutputChannel.close();
      recorderOutputChannel=null;
    }
 catch (    IOException e) {
      throw new RemoteException(""String_Node_Str"",e);
    }
  }
}",0.9398814563928872
97617,"@Override public synchronized boolean startRecording(RecordCommand cmd) throws RemoteException {
  if (terminated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  String user;
  try {
    user=cmd.getClient().getTestSessionKey().getUser().getName();
  }
 catch (  Exception ex) {
    OseeLog.log(MessageSystemTestEnvironment.class,Level.WARNING,""String_Node_Str"",ex);
    user=""String_Node_Str"";
  }
  try {
    LinkedList<MessageRecordConfig> msgsToRecord=new LinkedList<MessageRecordConfig>();
    for (    MessageRecordDetails details : cmd.getMsgsToRecord()) {
      String name=details.getName();
      final Class<?> msgClass=Activator.getTestEnvironment().getRuntimeManager().loadFromRuntimeLibraryLoader(name);
      Message<?,?,?> reader=messageRequestor.getMessageReader(msgClass);
      if (reader == null) {
        throw new RemoteException(""String_Node_Str"" + name);
      }
      DataType type=details.getType();
      List<List<Object>> elementNames=details.getBodyElementNames();
      ArrayList<Element> elementsToRecord=new ArrayList<Element>(elementNames.size());
      for (      List<Object> elementName : elementNames) {
        final Element element=reader.getElement(elementName,type);
        if (element == null) {
        }
 else {
          if (!element.isNonMappingElement()) {
            elementsToRecord.add(element);
          }
        }
      }
      List<List<Object>> headerElementNames=details.getHeaderElementNames();
      ArrayList<Element> headerElementsToRecord=new ArrayList<Element>(headerElementNames.size());
      Element[] headerElements=reader.getActiveDataSource(type).getMsgHeader().getElements();
      if (headerElements != null) {
        for (        List<Object> elementName : headerElementNames) {
          Element element=reader.getElement(elementName);
          if (element != null) {
            headerElementsToRecord.add(element);
          }
        }
      }
      MessageRecordConfig config=new MessageRecordConfig(reader,type,details.getHeaderDump(),headerElementsToRecord.toArray(new Element[headerElementsToRecord.size()]),details.getBodyDump(),elementsToRecord.toArray(new Element[elementsToRecord.size()]));
      msgsToRecord.add(config);
    }
    recorderOutputChannel.connect(cmd.getDestAddress());
    recorder.startRecording(msgsToRecord,recorderOutputChannel);
    OseeLog.log(MessageSystemTestEnvironment.class,Level.INFO,""String_Node_Str"" + user + ""String_Node_Str""+ cmd.getDestAddress().toString());
    return true;
  }
 catch (  Throwable ex) {
    OseeLog.log(MessageSystemTestEnvironment.class,Level.INFO,""String_Node_Str"" + user,ex);
    throw new RemoteException(""String_Node_Str"",ex);
  }
}","@Override public synchronized boolean startRecording(RecordCommand cmd) throws RemoteException {
  if (terminated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  String user;
  try {
    user=cmd.getClient().getTestSessionKey().getUser().getName();
  }
 catch (  Exception ex) {
    OseeLog.log(MessageSystemTestEnvironment.class,Level.WARNING,""String_Node_Str"",ex);
    user=""String_Node_Str"";
  }
  try {
    LinkedList<MessageRecordConfig> msgsToRecord=new LinkedList<MessageRecordConfig>();
    for (    MessageRecordDetails details : cmd.getMsgsToRecord()) {
      String name=details.getName();
      final Class<?> msgClass=Activator.getTestEnvironment().getRuntimeManager().loadFromRuntimeLibraryLoader(name);
      Message<?,?,?> reader=messageRequestor.getMessageReader(msgClass);
      if (reader == null) {
        throw new RemoteException(""String_Node_Str"" + name);
      }
      DataType type=details.getType();
      List<List<Object>> elementNames=details.getBodyElementNames();
      ArrayList<Element> elementsToRecord=new ArrayList<Element>(elementNames.size());
      for (      List<Object> elementName : elementNames) {
        final Element element=reader.getElement(elementName,type);
        if (element == null) {
        }
 else {
          if (!element.isNonMappingElement()) {
            elementsToRecord.add(element);
          }
        }
      }
      List<List<Object>> headerElementNames=details.getHeaderElementNames();
      ArrayList<Element> headerElementsToRecord=new ArrayList<Element>(headerElementNames.size());
      Element[] headerElements=reader.getActiveDataSource(type).getMsgHeader().getElements();
      if (headerElements != null) {
        for (        List<Object> elementName : headerElementNames) {
          Element element=reader.getElement(elementName);
          if (element != null) {
            headerElementsToRecord.add(element);
          }
        }
      }
      MessageRecordConfig config=new MessageRecordConfig(reader,type,details.getHeaderDump(),headerElementsToRecord.toArray(new Element[headerElementsToRecord.size()]),details.getBodyDump(),elementsToRecord.toArray(new Element[elementsToRecord.size()]));
      msgsToRecord.add(config);
    }
    setupRecorderOutputChannel();
    recorderOutputChannel.connect(cmd.getDestAddress());
    recorder.startRecording(msgsToRecord,recorderOutputChannel);
    OseeLog.log(MessageSystemTestEnvironment.class,Level.INFO,""String_Node_Str"" + user + ""String_Node_Str""+ cmd.getDestAddress().toString());
    return true;
  }
 catch (  Throwable ex) {
    OseeLog.log(MessageSystemTestEnvironment.class,Level.INFO,""String_Node_Str"" + user,ex);
    throw new RemoteException(""String_Node_Str"",ex);
  }
}",0.9937361827560796
97618,"/** 
 * This test Word Edit's are being saved.
 */
@Before public void setUp() throws Exception {
  assertFalse(""String_Node_Str"",TestUtil.isProductionDb());
  RenderingUtil.setPopupsAllowed(false);
  tearDown();
}","/** 
 * This test Word Edit's are being saved.
 * @throws OseeCoreException
 */
@Before public void setUp() throws Exception {
  Assert.assertFalse(""String_Node_Str"",TestUtil.isProductionDb());
  RenderingUtil.setPopupsAllowed(false);
  tearDown();
}",0.9224137931034484
97619,"private static void writeNewContentAndWaitForSave(Artifact artifact,IFile editFile,String content) throws UnsupportedEncodingException, CoreException, InterruptedException {
  boolean eventBoolean=OseeEventManager.isDisableEvents();
  UpdateArtifactListener listener=new UpdateArtifactListener(EventModType.Modified,artifact);
  OseeEventManager.addListener(listener);
  OseeEventManager.setDisableEvents(false);
  try {
synchronized (listener) {
      editFile.setContents(new ByteArrayInputStream(content.getBytes(""String_Node_Str"")),IResource.FORCE,new NullProgressMonitor());
      listener.wait(60000);
    }
  }
  finally {
    OseeEventManager.setDisableEvents(eventBoolean);
    OseeEventManager.removeListener(listener);
  }
  Assert.assertTrue(""String_Node_Str"",listener.wasUpdateReceived());
}","private static void writeNewContentAndWaitForSave(Artifact artifact,IFile editFile,String content) throws UnsupportedEncodingException, CoreException, InterruptedException {
  boolean eventBoolean=OseeEventManager.isDisableEvents();
  UpdateArtifactListener listener=new UpdateArtifactListener(EventModType.Modified,artifact);
  OseeEventManager.addListener(listener);
  OseeEventManager.setDisableEvents(false);
  try {
synchronized (listener) {
      editFile.setContents(new ByteArrayInputStream(content.getBytes(""String_Node_Str"")),IResource.FORCE,new NullProgressMonitor());
      listener.wait(60000);
    }
  }
  finally {
    OseeEventManager.setDisableEvents(eventBoolean);
    OseeEventManager.removeListener(listener);
  }
}",0.9551656920077972
97620,"/** 
 * <p> This test needs to be re-evaluated or discarded if OSEE decides to implement their <br/> own requirement storage and DSL. </p>
 * @throws Exception
 */
@org.junit.Test public void testEditUsingWordTemplateRender() throws Exception {
  SevereLoggingMonitor monitorLog=TestUtil.severeLoggingStart();
  Artifact artifact=createArtifact(branch,ARTIFACT_NAME_1);
  artifact.persist(getClass().getSimpleName());
  String testData=Lib.fileToString(getClass(),TEST_WORD_EDIT_FILE_NAME);
  Assert.assertNotNull(testData);
  String expected=replaceGuidMarkers(testData,artifact.getGuid());
  FileSystemRenderer renderer=new WordTemplateRenderer();
  IFile editFile=openArtifactForEdit(renderer,artifact);
  writeNewContentAndWaitForSave(artifact,editFile,expected);
  String actual=getRenderedStoredContent(renderer,artifact);
  Assert.assertEquals(expected,actual);
  TestUtil.severeLoggingEnd(monitorLog);
}","@Test public void testEditUsingWordTemplateRender() throws Exception {
  SevereLoggingMonitor monitorLog=TestUtil.severeLoggingStart();
  Artifact artifact=createArtifact(branch,ARTIFACT_NAME_1);
  artifact.persist(getClass().getSimpleName());
  String testData=Lib.fileToString(getClass(),TEST_WORD_EDIT_FILE_NAME);
  Assert.assertNotNull(testData);
  String expected=replaceGuidMarkers(testData,artifact.getGuid());
  FileSystemRenderer renderer=new WordTemplateRenderer();
  IFile editFile=openArtifactForEdit(renderer,artifact);
  writeNewContentAndWaitForSave(artifact,editFile,expected);
  String actual=getRenderedStoredContent(renderer,artifact);
  Assert.assertEquals(expected,actual);
  TestUtil.severeLoggingEnd(monitorLog);
}",0.8944174757281553
97621,"public static byte[] getFormattedContent(Element formattedItemElement) throws XMLStreamException {
  ByteArrayOutputStream data=new ByteArrayOutputStream((int)Math.pow(2,10));
  XMLStreamWriter xmlWriter=null;
  try {
    xmlWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(data);
    for (    Element e : Jaxp.getChildDirects(formattedItemElement)) {
      Jaxp.writeNode(xmlWriter,e,false);
    }
  }
  finally {
    if (xmlWriter != null) {
      xmlWriter.flush();
      xmlWriter.close();
    }
  }
  return data.toByteArray();
}","public static byte[] getFormattedContent(Element formattedItemElement) throws XMLStreamException {
  ByteArrayOutputStream data=new ByteArrayOutputStream((int)Math.pow(2,10));
  XMLStreamWriter xmlWriter=null;
  try {
    xmlWriter=XMLOutputFactory.newInstance().createXMLStreamWriter(data,""String_Node_Str"");
    for (    Element e : Jaxp.getChildDirects(formattedItemElement)) {
      Jaxp.writeNode(xmlWriter,e,false);
    }
  }
  finally {
    if (xmlWriter != null) {
      xmlWriter.flush();
      xmlWriter.close();
    }
  }
  return data.toByteArray();
}",0.983754512635379
97622,"private void handleChildrenCoverageItems(List<IMergeItem> mergeItems,Collection<? extends ICoverage> packageItemChildren,ICoverage importCoverage,Collection<? extends ICoverage> importItemChildren,Map<ICoverage,MatchItem> importItemToMatchItem) throws OseeCoreException {
  List<IMergeItem> groupMergeItems=new ArrayList<IMergeItem>();
  boolean unMergeableExists=false;
  Entry<List<ICoverage>,List<ICoverage>> matchedUnMatchedEntry=getMatchedAndUnMatchedImportCoverageItems(importItemToMatchItem);
  List<ICoverage> unMatchedImportCoverageItems=matchedUnMatchedEntry.getValue();
  List<ICoverage> matchedImportCoverageItems=matchedUnMatchedEntry.getKey();
  List<ICoverage> packageItemsProcessed=getMatchedPackageCoverageItems(importItemToMatchItem);
  for (  ICoverage childICoverage : new CopyOnWriteArrayList<ICoverage>(unMatchedImportCoverageItems)) {
    MatchItem childMatchItem=importItemToMatchItem.get(childICoverage);
    if (childMatchItem.isMatch()) {
      throw new OseeStateException(""String_Node_Str"");
    }
    ICoverage packageMatch=isCoverageItemRenamed(packageItemChildren,childICoverage);
    if (packageMatch != null) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Renamed,packageMatch,childICoverage,false));
      packageItemsProcessed.add(packageMatch);
      unMatchedImportCoverageItems.remove(childICoverage);
    }
 else     if (isCoverageItemAdded(packageItemChildren,childICoverage)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Add,null,childICoverage,false));
      unMatchedImportCoverageItems.remove(childICoverage);
    }
  }
  for (  ICoverage childICoverage : new CopyOnWriteArrayList<ICoverage>(matchedImportCoverageItems)) {
    MatchItem childMatchItem=importItemToMatchItem.get(childICoverage);
    if (childMatchItem != null && isCoverageItemMethodUpdate(childMatchItem)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Method_Update,childMatchItem.getPackageItem(),childICoverage,false));
      unMatchedImportCoverageItems.remove(childICoverage);
    }
    System.err.println(""String_Node_Str"");
  }
  for (  ICoverage childICoverage : new CopyOnWriteArrayList<ICoverage>(unMatchedImportCoverageItems)) {
    for (    ICoverage packageItemChild : packageItemChildren) {
      if (!packageItemsProcessed.contains(packageItemChild) && packageItemChild.getName().equals(childICoverage.getName())) {
        groupMergeItems.add(new MergeItem(MergeType.CI_Moved,packageItemChild,childICoverage,false));
        packageItemsProcessed.add(packageItemChild);
        unMatchedImportCoverageItems.add(childICoverage);
      }
    }
  }
  for (  ICoverage packageItemChild : packageItemChildren) {
    if (!packageItemsProcessed.contains(packageItemChild)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Delete,packageItemChild,null,false));
      packageItemsProcessed.add(packageItemChild);
    }
  }
  for (  ICoverage coverage : unMatchedImportCoverageItems) {
    groupMergeItems.add(new MergeItem(MergeType.Error__UnMergable,null,coverage,false));
  }
  for (  ICoverage packageItemChild : packageItemChildren) {
    if (!packageItemsProcessed.contains(packageItemChild)) {
      groupMergeItems.add(new MergeItem(MergeType.Error__UnMergable,packageItemChild,null,false));
    }
  }
  if (groupMergeItems.size() > 0) {
    mergeItems.add(new MergeItemGroup(MergeType.CI_Changes,importCoverage,groupMergeItems,!unMergeableExists));
  }
}","private void handleChildrenCoverageItems(List<IMergeItem> mergeItems,Collection<? extends ICoverage> packageItemChildren,ICoverage importCoverage,Collection<? extends ICoverage> importItemChildren,Map<ICoverage,MatchItem> importItemToMatchItem) throws OseeCoreException {
  List<IMergeItem> groupMergeItems=new ArrayList<IMergeItem>();
  boolean unMergeableExists=false;
  Entry<List<ICoverage>,List<ICoverage>> matchedUnMatchedEntry=getMatchedAndUnMatchedImportCoverageItems(importItemToMatchItem);
  List<ICoverage> unMatchedImportCoverageItems=matchedUnMatchedEntry.getValue();
  List<ICoverage> matchedImportCoverageItems=matchedUnMatchedEntry.getKey();
  List<ICoverage> packageItemsProcessed=getMatchedPackageCoverageItems(importItemToMatchItem);
  for (  ICoverage childICoverage : new CopyOnWriteArrayList<ICoverage>(unMatchedImportCoverageItems)) {
    MatchItem childMatchItem=importItemToMatchItem.get(childICoverage);
    if (childMatchItem.isMatch()) {
      throw new OseeStateException(""String_Node_Str"");
    }
    ICoverage packageMatch=isCoverageItemRenamed(packageItemChildren,childICoverage);
    if (packageMatch != null) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Renamed,packageMatch,childICoverage,false));
      packageItemsProcessed.add(packageMatch);
      unMatchedImportCoverageItems.remove(childICoverage);
    }
 else     if (isCoverageItemAdded(packageItemChildren,childICoverage)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Add,null,childICoverage,false));
      unMatchedImportCoverageItems.remove(childICoverage);
    }
  }
  for (  ICoverage childICoverage : new CopyOnWriteArrayList<ICoverage>(matchedImportCoverageItems)) {
    MatchItem childMatchItem=importItemToMatchItem.get(childICoverage);
    if (childMatchItem != null && isCoverageItemMethodUpdate(childMatchItem)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Method_Update,childMatchItem.getPackageItem(),childICoverage,false));
      unMatchedImportCoverageItems.remove(childICoverage);
    }
 else     if (childMatchItem != null && isCoverageItemTestUnitsUpdate(childMatchItem)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Test_Units_Update,childMatchItem.getPackageItem(),childICoverage,false));
      unMatchedImportCoverageItems.remove(childICoverage);
    }
  }
  for (  ICoverage childICoverage : new CopyOnWriteArrayList<ICoverage>(unMatchedImportCoverageItems)) {
    for (    ICoverage packageItemChild : packageItemChildren) {
      if (!packageItemsProcessed.contains(packageItemChild) && packageItemChild.getName().equals(childICoverage.getName())) {
        groupMergeItems.add(new MergeItem(MergeType.CI_Moved,packageItemChild,childICoverage,false));
        packageItemsProcessed.add(packageItemChild);
        unMatchedImportCoverageItems.add(childICoverage);
      }
    }
  }
  for (  ICoverage packageItemChild : packageItemChildren) {
    if (!packageItemsProcessed.contains(packageItemChild)) {
      groupMergeItems.add(new MergeItem(MergeType.CI_Delete,packageItemChild,null,false));
      packageItemsProcessed.add(packageItemChild);
    }
  }
  for (  ICoverage coverage : unMatchedImportCoverageItems) {
    groupMergeItems.add(new MergeItem(MergeType.Error__UnMergable,null,coverage,false));
  }
  for (  ICoverage packageItemChild : packageItemChildren) {
    if (!packageItemsProcessed.contains(packageItemChild)) {
      groupMergeItems.add(new MergeItem(MergeType.Error__UnMergable,packageItemChild,null,false));
    }
  }
  if (groupMergeItems.size() > 0) {
    mergeItems.add(new MergeItemGroup(MergeType.CI_Changes,importCoverage,groupMergeItems,!unMergeableExists));
  }
}",0.9561155152887882
97623,"public void cleanup(){
  filename=null;
  unitNumber=null;
  if (coverageDataFile != null) {
    coverageDataFile.cleanup();
  }
  if (vcpSourceLisFile != null) {
    vcpSourceLisFile.cleanup();
  }
}","public void cleanup(){
  unitNumber=null;
  if (coverageDataFile != null) {
    coverageDataFile.cleanup();
  }
  if (vcpSourceLisFile != null) {
    vcpSourceLisFile.cleanup();
  }
}",0.9556135770234988
97624,"public static Date getDate(Object object) throws OseeCoreException {
  if (Artifacts.isOfType(object,AtsArtifactTypes.Action)) {
    getDate(ActionManager.getFirstTeam(object));
  }
 else   if (object instanceof AbstractWorkflowArtifact) {
    AbstractWorkflowArtifact awa=(AbstractWorkflowArtifact)object;
    if (((AbstractWorkflowArtifact)object).isCancelled()) {
      Date date=((AbstractWorkflowArtifact)object).internalGetCancelledDate();
      if (date == null) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"" + awa.getHumanReadableId());
      }
      return date;
    }
  }
  return null;
}","public static Date getDate(Object object) throws OseeCoreException {
  if (Artifacts.isOfType(object,AtsArtifactTypes.Action)) {
    getDate(ActionManager.getFirstTeam(object));
  }
 else   if (object instanceof AbstractWorkflowArtifact) {
    AbstractWorkflowArtifact awa=(AbstractWorkflowArtifact)object;
    if (((AbstractWorkflowArtifact)object).isCancelled()) {
      Date date=((AbstractWorkflowArtifact)object).internalGetCancelledDate();
      if (date == null) {
        OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"" + awa.getHumanReadableId());
      }
      return date;
    }
  }
  return null;
}",0.9920127795527156
97625,"public static Date getDate(Object object) throws OseeCoreException {
  if (Artifacts.isOfType(object,AtsArtifactTypes.Action)) {
    getDate(ActionManager.getFirstTeam(object));
  }
 else   if (object instanceof AbstractWorkflowArtifact) {
    AbstractWorkflowArtifact awa=(AbstractWorkflowArtifact)object;
    if (((AbstractWorkflowArtifact)object).isCompleted()) {
      Date date=((AbstractWorkflowArtifact)object).getCompletedDate();
      if (date == null) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"" + awa.getHumanReadableId());
      }
      return date;
    }
  }
  return null;
}","public static Date getDate(Object object) throws OseeCoreException {
  if (Artifacts.isOfType(object,AtsArtifactTypes.Action)) {
    getDate(ActionManager.getFirstTeam(object));
  }
 else   if (object instanceof AbstractWorkflowArtifact) {
    AbstractWorkflowArtifact awa=(AbstractWorkflowArtifact)object;
    if (((AbstractWorkflowArtifact)object).isCompleted()) {
      Date date=((AbstractWorkflowArtifact)object).getCompletedDate();
      if (date == null) {
        OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"" + awa.getHumanReadableId());
      }
      return date;
    }
  }
  return null;
}",0.9919093851132686
97626,"@Override public IStatus run(IProgressMonitor monitor) throws Exception {
  File outfile=AWorkspace.iFileToFile(file);
  if (outfile.length() > _20_MB) {
    OseeLog.logf(MarkerPlugin.class,Level.WARNING,""String_Node_Str"",file.getName(),outfile.length(),_20_MB);
    return Status.OK_STATUS;
  }
  if (!file.isSynchronized(0)) {
    OseeLog.logf(MarkerPlugin.class,Level.WARNING,""String_Node_Str"",file.getName());
    file.refreshLocal(0,monitor);
  }
  monitor.setTaskName(String.format(""String_Node_Str"",file.getName()));
  FileInputStream contents=new FileInputStream(outfile);
  boolean hadParseException=false;
  int numberOfTries=0;
  do {
    try {
      hadParseException=false;
      parseContents(contents);
    }
 catch (    SAXParseException ex) {
      hadParseException=true;
      System.out.println(""String_Node_Str"" + numberOfTries);
    }
 finally {
      numberOfTries++;
    }
  }
 while (hadParseException && (numberOfTries < 5));
  OteMarkerHelper helper=new OteMarkerHelper(this.testPointDatas);
  MarkerPlugin.updateMarkerInfo(file,helper.getMarkers());
  return Status.OK_STATUS;
}","@Override public IStatus run(IProgressMonitor monitor) throws Exception {
  File outfile=AWorkspace.iFileToFile(file);
  if (outfile.length() > _20_MB) {
    OseeLog.logf(MarkerPlugin.class,Level.WARNING,""String_Node_Str"",file.getName(),outfile.length(),_20_MB);
    return Status.OK_STATUS;
  }
  if (!file.isSynchronized(0)) {
    OseeLog.logf(MarkerPlugin.class,Level.WARNING,""String_Node_Str"",file.getName());
    file.refreshLocal(0,monitor);
  }
  monitor.setTaskName(String.format(""String_Node_Str"",file.getName()));
  boolean hadParseException=false;
  int numberOfTries=0;
  do {
    FileInputStream contents=new FileInputStream(outfile);
    try {
      hadParseException=false;
      parseContents(contents);
    }
 catch (    Exception ex) {
      hadParseException=true;
      System.out.println(""String_Node_Str"" + numberOfTries);
    }
 finally {
      numberOfTries++;
      Thread.sleep(1000);
    }
  }
 while (hadParseException && (numberOfTries < 5));
  if (numberOfTries > 1) {
    FileInputStream contents=new FileInputStream(outfile);
    parseContents(contents);
  }
  OteMarkerHelper helper=new OteMarkerHelper(this.testPointDatas);
  MarkerPlugin.updateMarkerInfo(file,helper.getMarkers());
  return Status.OK_STATUS;
}",0.8855806039982986
97627,"/** 
 * This should NOT be called directly, users should call the HostDataStore's disconnect.
 */
public boolean disconnect(ConnectionEvent event){
  connectedEnv=null;
  sessionKey=null;
  guidToScriptTask.clear();
  return false;
}","/** 
 * This should NOT be called directly, users should call the HostDataStore's disconnect.
 */
public boolean disconnect(ConnectionEvent event){
  connectedEnv=null;
  sessionKey=null;
  guidToScriptTask.clear();
  statusListenerImpl.unregisterEventListener();
  return false;
}",0.906614785992218
97628,"public TestManagerStatusListener(TestManagerEditor testManagerEditor,ScriptManager userEnvironment){
  this.testManagerServiceDataVisitor=new TestManagerServiceStatusDataVisitor(userEnvironment,testManagerEditor);
  Hashtable<String,Object> properties=new Hashtable<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  FrameworkUtil.getBundle(getClass()).getBundleContext().registerService(EventHandler.class.getName(),this,properties);
}","public TestManagerStatusListener(TestManagerEditor testManagerEditor,ScriptManager userEnvironment){
  this.testManagerServiceDataVisitor=new TestManagerServiceStatusDataVisitor(userEnvironment,testManagerEditor);
  Hashtable<String,Object> properties=new Hashtable<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  eventReference=FrameworkUtil.getBundle(getClass()).getBundleContext().registerService(EventHandler.class.getName(),this,properties);
}",0.983957219251337
97629,"/** 
 * @return true if the user accepts the purging of the attributes and relations that are not compatible for the newartifact type else false.
 */
private static boolean doesUserAcceptArtifactChange(final Artifact artifact,final ArtifactType artifactType){
  if ((!relationsToDelete.isEmpty() || !attributesToPurge.isEmpty()) && !userAnsweredYesToAll) {
    StringBuffer sb=new StringBuffer(50);
    getConflictString(sb,artifact,artifactType);
    try {
      Object result=DebugPlugin.getDefault().getStatusHandler(promptStatus).handleStatus(promptStatus,sb.toString());
      MutableBoolean answer=null;
      if (result instanceof Pair<?,?>) {
        Pair<?,?> value=(Pair<?,?>)result;
        answer=(MutableBoolean)value.getFirst();
        Integer kindOfAnswer=(Integer)value.getSecond();
        userAnsweredYesToAll=kindOfAnswer == 1 && answer.getValue();
      }
      return answer == null ? false : answer.getValue();
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,Level.SEVERE,ex);
      return false;
    }
  }
 else {
    return true;
  }
}","/** 
 * @return true if the user accepts the deletion of the attributes and relations that are not compatible for the newartifact type else false.
 */
private boolean doesUserAcceptArtifactChange(IArtifactType artifactType) throws OseeCoreException {
  if (!relationTypes.isEmpty() || !attributeTypes.isEmpty()) {
    StringBuilder sb=new StringBuilder(1024);
    getConflictString(sb,artifactType);
    Object result;
    try {
      result=DebugPlugin.getDefault().getStatusHandler(promptStatus).handleStatus(promptStatus,sb.toString());
    }
 catch (    CoreException ex) {
      OseeExceptions.wrapAndThrow(ex);
      return false;
    }
    return (Boolean)result;
  }
 else {
    return true;
  }
}",0.5434173669467787
97630,"private static void getConflictString(StringBuffer results,Artifact artifact,IArtifactType artifactType){
  results.append(""String_Node_Str"" + artifact.getGuid() + ""String_Node_Str""+ artifact.getName()+ ""String_Node_Str""+ ""String_Node_Str""+ artifactType.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
  for (  RelationLink relationLink : relationsToDelete) {
    results.append(""String_Node_Str"" + relationLink + ""String_Node_Str"");
  }
  for (  Attribute<?> attribute : attributesToPurge) {
    results.append(""String_Node_Str"" + attribute.getAttributeType().getName() + ""String_Node_Str""+ attribute.toString()+ ""String_Node_Str"");
  }
  results.append(""String_Node_Str"");
}","private void getConflictString(StringBuilder message,IArtifactType artifactType){
  message.append(""String_Node_Str"" + artifactType.getName() + ""String_Node_Str"");
  message.append(""String_Node_Str"");
  message.append(""String_Node_Str"" + attributeTypes + ""String_Node_Str"");
  message.append(""String_Node_Str"");
  message.append(""String_Node_Str"" + relationTypes + ""String_Node_Str"");
}",0.2218045112781954
97631,"/** 
 * Changes the descriptor of the artifacts to the provided artifact descriptor
 */
public static void changeArtifactType(Collection<? extends Artifact> artifacts,IArtifactType artifactTypeToken) throws OseeCoreException {
  if (artifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  ArtifactType artifactType=ArtifactTypeManager.getType(artifactTypeToken);
  List<Artifact> artifactsUserAccepted=new ArrayList<Artifact>();
  Set<EventBasicGuidArtifact> artifactChanges=new HashSet<EventBasicGuidArtifact>();
  for (  Artifact artifact : artifacts) {
    processAttributes(artifact,artifactType);
    processRelations(artifact,artifactType);
    artifactsUserAccepted.add(artifact);
    if (userAnsweredYesToAll || doesUserAcceptArtifactChange(artifact,artifactType)) {
      ArtifactType originalType=artifact.getArtifactType();
      boolean success=changeArtifactTypeThroughHistory(artifact,artifactType);
      if (success) {
        artifactChanges.add(new EventChangeTypeBasicGuidArtifact(artifact.getBranch().getGuid(),originalType.getGuid(),artifactType.getGuid(),artifact.getGuid()));
      }
    }
  }
  ArtifactEvent artifactEvent=new ArtifactEvent(artifacts.iterator().next().getBranch());
  for (  EventBasicGuidArtifact guidArt : artifactChanges) {
    artifactEvent.getArtifacts().add(guidArt);
  }
  OseeEventManager.kickPersistEvent(ChangeArtifactType.class,artifactEvent);
}","public static void changeArtifactType(Collection<? extends Artifact> inputArtifacts,IArtifactType newArtifactTypeToken) throws OseeCoreException {
  ChangeArtifactType app=new ChangeArtifactType();
  if (inputArtifacts.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (newArtifactTypeToken == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  ArtifactType newArtifactType=ArtifactTypeManager.getType(newArtifactTypeToken);
  try {
    app.internalChangeArtifactType(inputArtifacts,newArtifactType);
  }
 catch (  Exception ex) {
    ArtifactQuery.reloadArtifacts(app.modifiedArtifacts);
    OseeExceptions.wrapAndThrow(ex);
  }
}",0.2461977186311787
97632,"@Override public void writeCellText(Object cellData,int cellIndex) throws IOException {
  if (cellData == null) {
    previousCellIndex=-1;
  }
 else {
    out.write(""String_Node_Str"");
    if (cellData instanceof Date) {
      out.write(""String_Node_Str"");
    }
 else     if (applyStyle) {
      applyStyleToCell(cellIndex);
    }
    if (previousCellIndex + 1 != cellIndex) {
      out.write(""String_Node_Str"" + (cellIndex + 1) + ""String_Node_Str"");
    }
    previousCellIndex=cellIndex;
    if (cellData instanceof String) {
      String cellDataStr=(String)cellData;
      if (!cellDataStr.equals(""String_Node_Str"") && cellDataStr.charAt(0) == '=') {
        out.write(""String_Node_Str"" + cellDataStr + ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"");
        if (cellDataStr.equals(""String_Node_Str"")) {
          out.write(emptyStringRepresentation);
        }
 else {
          if (cellDataStr.length() > 32767) {
            out.write(blobMessage);
          }
 else {
            Xml.writeAsCdata(out,cellDataStr);
          }
        }
        out.write(""String_Node_Str"");
        if (cellDataStr.length() > 32767) {
          out.write(""String_Node_Str"");
          Xml.writeAsCdata(out,cellDataStr);
          out.write(""String_Node_Str"");
        }
      }
    }
 else     if (cellData instanceof Number) {
      Number cellDataNum=(Number)cellData;
      out.write(""String_Node_Str"");
      Xml.writeAsCdata(out,cellDataNum.toString());
      out.write(""String_Node_Str"");
    }
 else     if (cellData instanceof Date) {
      Date cellDataDate=(Date)cellData;
      out.write(""String_Node_Str"");
      String dateString=DateUtil.get(cellDataDate,""String_Node_Str"") + ""String_Node_Str"";
      Xml.writeAsCdata(out,dateString);
      out.write(""String_Node_Str"");
    }
 else {
      out.write(""String_Node_Str"");
      Xml.writeAsCdata(out,cellData.toString());
      out.write(""String_Node_Str"");
    }
    out.write(""String_Node_Str"");
  }
}","@Override public void writeCellText(Object cellData,int cellIndex) throws IOException {
  if (cellData == null) {
    previousCellIndex=-1;
  }
 else {
    out.write(""String_Node_Str"");
    if (cellData instanceof Date) {
      out.write(""String_Node_Str"");
    }
 else     if (applyStyle) {
      applyStyleToCell(cellIndex);
    }
    if (previousCellIndex + 1 != cellIndex) {
      out.write(""String_Node_Str"" + (cellIndex + 1) + ""String_Node_Str"");
    }
    previousCellIndex=cellIndex;
    if (cellData instanceof String) {
      String cellDataStr=(String)cellData;
      if (!cellDataStr.equals(""String_Node_Str"") && cellDataStr.charAt(0) == '=') {
        String value=cellDataStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
        out.write(""String_Node_Str"" + value + ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"");
        if (cellDataStr.equals(""String_Node_Str"")) {
          out.write(emptyStringRepresentation);
        }
 else {
          if (cellDataStr.length() > 32767) {
            out.write(blobMessage);
          }
 else {
            Xml.writeAsCdata(out,cellDataStr);
          }
        }
        out.write(""String_Node_Str"");
        if (cellDataStr.length() > 32767) {
          out.write(""String_Node_Str"");
          Xml.writeAsCdata(out,cellDataStr);
          out.write(""String_Node_Str"");
        }
      }
    }
 else     if (cellData instanceof Number) {
      Number cellDataNum=(Number)cellData;
      out.write(""String_Node_Str"");
      Xml.writeAsCdata(out,cellDataNum.toString());
      out.write(""String_Node_Str"");
    }
 else     if (cellData instanceof Date) {
      Date cellDataDate=(Date)cellData;
      out.write(""String_Node_Str"");
      String dateString=DateUtil.get(cellDataDate,""String_Node_Str"") + ""String_Node_Str"";
      Xml.writeAsCdata(out,dateString);
      out.write(""String_Node_Str"");
    }
 else {
      out.write(""String_Node_Str"");
      Xml.writeAsCdata(out,cellData.toString());
      out.write(""String_Node_Str"");
    }
    out.write(""String_Node_Str"");
  }
}",0.9757785467128028
97633,"@Override public void performDragOver(DropTargetEvent event){
  Tree tree=treeViewer.getTree();
  TreeItem selected=tree.getItem(treeViewer.getTree().toControl(event.x,event.y));
  event.feedback=DND.FEEDBACK_EXPAND;
  event.detail=DND.DROP_NONE;
  if (selected != null && selected.getData() instanceof RelationTypeSideSorter) {
    ArtifactTransfer artTransfer=ArtifactTransfer.getInstance();
    FileTransfer fileTransfer=FileTransfer.getInstance();
    RelationTypeSideSorter data=(RelationTypeSideSorter)selected.getData();
    if (artTransfer.isSupportedType(event.currentDataType)) {
      try {
        ArtifactData artData=artTransfer.nativeToJava(event.currentDataType);
        Artifact[] selectedArtifacts=artData.getArtifacts();
        String toolTipText=""String_Node_Str"";
        Artifact relationArtifact=data.getArtifact();
        boolean canRelate=false;
        for (        Artifact i : selectedArtifacts) {
          Artifact sideA=i;
          Artifact sideB=relationArtifact;
          if (data.getSide() == RelationSide.SIDE_B) {
            sideA=relationArtifact;
            sideB=i;
          }
          canRelate=ensureRelationCanBeAdded(data.getRelationType(),sideA,sideB);
          if (!canRelate) {
            toolTipText+=String.format(""String_Node_Str"",i.getName(),data.getSide().name(),data.getRelationType().getName());
          }
        }
        AccessPolicy policyHandlerService=ServiceUtil.getAccessPolicy();
        boolean matched=policyHandlerService.canRelationBeModified(artifact,Arrays.asList(selectedArtifacts),data,Level.INFO).matched();
        if (matched) {
          event.detail=DND.DROP_COPY;
          tree.setInsertMark(null,false);
        }
 else {
          toolTipText+=(toolTipText.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
          toolTipText+=""String_Node_Str"";
        }
        if (!matched || !canRelate) {
          errorToolTip.setText(""String_Node_Str"");
          errorToolTip.setMessage(toolTipText);
          errorToolTip.setVisible(true);
        }
 else {
          errorToolTip.setVisible(false);
        }
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
    }
 else     if (fileTransfer.isSupportedType(event.currentDataType)) {
      IRelationType relationType=data.getRelationType();
      if (relationType.equals(CoreRelationTypes.Verification__Verifier) || relationType.equals(CoreRelationTypes.Uses__TestUnit)) {
        AccessPolicy policyHandlerService=null;
        try {
          policyHandlerService=ServiceUtil.getAccessPolicy();
        }
 catch (        OseeCoreException ex1) {
          OseeLog.log(Activator.class,Level.SEVERE,ex1);
        }
        boolean matched=false;
        if (policyHandlerService != null) {
          try {
            matched=policyHandlerService.canRelationBeModified(artifact,null,data,Level.INFO).matched();
          }
 catch (          OseeCoreException ex) {
            OseeLog.log(Activator.class,Level.SEVERE,ex);
          }
        }
        if (matched) {
          event.detail=DND.DROP_COPY;
        }
      }
    }
  }
 else   if (selected != null && selected.getData() instanceof WrapperForRelationLink) {
    WrapperForRelationLink targetLink=(WrapperForRelationLink)selected.getData();
    IStructuredSelection selection=(IStructuredSelection)treeViewer.getSelection();
    Object obj=selection.getFirstElement();
    if (obj instanceof WrapperForRelationLink) {
      WrapperForRelationLink dropTarget=(WrapperForRelationLink)obj;
      boolean matched=false;
      try {
        AccessPolicy policyHandlerService=ServiceUtil.getAccessPolicy();
        RelationTypeSide rts=new RelationTypeSide(dropTarget.getRelationType(),dropTarget.getRelationSide());
        matched=policyHandlerService.canRelationBeModified(artifact,Arrays.asList(artifact.equals(dropTarget.getArtifactA()) ? dropTarget.getArtifactB() : dropTarget.getArtifactA()),rts,Level.INFO).matched();
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
      if (!matched) {
        event.detail=DND.DROP_NONE;
        ToolTip tt=new ToolTip(Displays.getActiveShell(),SWT.ICON_ERROR);
        tt.setText(""String_Node_Str"");
        tt.setMessage(""String_Node_Str"");
        tt.setVisible(true);
        return;
      }
      if (relationLinkIsInSameGroup(targetLink,dropTarget)) {
        if (isFeedbackAfter) {
          event.feedback=DND.FEEDBACK_INSERT_AFTER;
        }
 else {
          event.feedback=DND.FEEDBACK_INSERT_BEFORE;
        }
        event.detail=DND.DROP_MOVE;
      }
    }
  }
 else {
    tree.setInsertMark(null,false);
  }
}","@Override public void performDragOver(DropTargetEvent event){
  Tree tree=treeViewer.getTree();
  TreeItem selected=tree.getItem(treeViewer.getTree().toControl(event.x,event.y));
  event.feedback=DND.FEEDBACK_EXPAND;
  event.detail=DND.DROP_NONE;
  errorToolTip.setVisible(false);
  if (selected != null && selected.getData() instanceof RelationTypeSideSorter) {
    ArtifactTransfer artTransfer=ArtifactTransfer.getInstance();
    FileTransfer fileTransfer=FileTransfer.getInstance();
    RelationTypeSideSorter data=(RelationTypeSideSorter)selected.getData();
    if (artTransfer.isSupportedType(event.currentDataType)) {
      try {
        ArtifactData artData=artTransfer.nativeToJava(event.currentDataType);
        Artifact[] selectedArtifacts=artData.getArtifacts();
        String toolTipText=""String_Node_Str"";
        Artifact relationArtifact=data.getArtifact();
        boolean canRelate=false;
        for (        Artifact i : selectedArtifacts) {
          Artifact sideA=i;
          Artifact sideB=relationArtifact;
          if (data.getSide() == RelationSide.SIDE_B) {
            sideA=relationArtifact;
            sideB=i;
          }
          canRelate=ensureRelationCanBeAdded(data.getRelationType(),sideA,sideB);
          if (!canRelate) {
            toolTipText+=String.format(""String_Node_Str"",i.getName(),data.getSide().name(),data.getRelationType().getName());
          }
        }
        AccessPolicy policyHandlerService=ServiceUtil.getAccessPolicy();
        boolean matched=policyHandlerService.canRelationBeModified(artifact,Arrays.asList(selectedArtifacts),data,Level.INFO).matched();
        if (matched) {
          event.detail=DND.DROP_COPY;
          tree.setInsertMark(null,false);
        }
 else {
          toolTipText+=(toolTipText.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
          toolTipText+=""String_Node_Str"";
        }
        if (!matched || !canRelate) {
          errorToolTip.setText(""String_Node_Str"");
          errorToolTip.setMessage(toolTipText);
          errorToolTip.setVisible(true);
        }
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
    }
 else     if (fileTransfer.isSupportedType(event.currentDataType)) {
      IRelationType relationType=data.getRelationType();
      if (relationType.equals(CoreRelationTypes.Verification__Verifier) || relationType.equals(CoreRelationTypes.Uses__TestUnit)) {
        AccessPolicy policyHandlerService=null;
        try {
          policyHandlerService=ServiceUtil.getAccessPolicy();
        }
 catch (        OseeCoreException ex1) {
          OseeLog.log(Activator.class,Level.SEVERE,ex1);
        }
        boolean matched=false;
        if (policyHandlerService != null) {
          try {
            matched=policyHandlerService.canRelationBeModified(artifact,null,data,Level.INFO).matched();
          }
 catch (          OseeCoreException ex) {
            OseeLog.log(Activator.class,Level.SEVERE,ex);
          }
        }
        if (matched) {
          event.detail=DND.DROP_COPY;
        }
      }
    }
  }
 else   if (selected != null && selected.getData() instanceof WrapperForRelationLink) {
    WrapperForRelationLink targetLink=(WrapperForRelationLink)selected.getData();
    IStructuredSelection selection=(IStructuredSelection)treeViewer.getSelection();
    Object obj=selection.getFirstElement();
    if (obj instanceof WrapperForRelationLink) {
      WrapperForRelationLink dropTarget=(WrapperForRelationLink)obj;
      boolean matched=false;
      try {
        AccessPolicy policyHandlerService=ServiceUtil.getAccessPolicy();
        RelationTypeSide rts=new RelationTypeSide(dropTarget.getRelationType(),dropTarget.getRelationSide());
        matched=policyHandlerService.canRelationBeModified(artifact,Arrays.asList(artifact.equals(dropTarget.getArtifactA()) ? dropTarget.getArtifactB() : dropTarget.getArtifactA()),rts,Level.INFO).matched();
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,Level.SEVERE,ex);
      }
      if (!matched) {
        event.detail=DND.DROP_NONE;
        errorToolTip.setText(""String_Node_Str"");
        errorToolTip.setMessage(""String_Node_Str"");
        errorToolTip.setVisible(true);
        return;
      }
      if (relationLinkIsInSameGroup(targetLink,dropTarget)) {
        if (isFeedbackAfter) {
          event.feedback=DND.FEEDBACK_INSERT_AFTER;
        }
 else {
          event.feedback=DND.FEEDBACK_INSERT_BEFORE;
        }
        event.detail=DND.DROP_MOVE;
      }
    }
  }
 else {
    tree.setInsertMark(null,false);
  }
}",0.9774436090225564
97634,"@Override public int hashCode(){
  final int prime=31;
  int result=0;
  try {
    result=prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=0;
  int userIdHashCode=0;
  try {
    userIdHashCode=(getUserId() == null) ? 0 : getUserId().hashCode();
  }
 catch (  OseeCoreException ex) {
  }
  result=prime * result + userIdHashCode;
  return result;
}",0.7129798903107861
97635,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  try {
    String objUserId=null;
    if (obj instanceof IAtsUser) {
      objUserId=((IAtsUser)obj).getUserId();
    }
 else     if (obj instanceof User) {
      objUserId=((User)obj).getUserId();
    }
    if (!Strings.isValid(objUserId)) {
      return false;
    }
    if (getUserId() == null) {
      if (objUserId != null) {
        return false;
      }
    }
 else     if (!getUserId().equals(objUserId)) {
      return false;
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  try {
    String objUserId=null;
    if (obj instanceof IAtsUser) {
      objUserId=((IAtsUser)obj).getUserId();
    }
 else     if (obj instanceof User) {
      objUserId=((User)obj).getUserId();
    }
 else {
      return false;
    }
    String thisUserId=getUserId();
    if (thisUserId == null) {
      if (objUserId != null) {
        return false;
      }
    }
 else     if (!thisUserId.equals(objUserId)) {
      return false;
    }
  }
 catch (  OseeCoreException ex) {
    return false;
  }
  return true;
}",0.5982905982905983
97636,"@Override public int compareTo(Object other){
  try {
    String otherName=null;
    if (other instanceof IAtsUser) {
      otherName=((IAtsUser)other).getName();
    }
 else     if (other instanceof IAtsUser) {
      otherName=((IAtsUser)other).getName();
    }
    if (otherName != null && getUserId() != null) {
      return getName().compareTo(otherName);
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  return -1;
}","@Override public int compareTo(Object other){
  int result=other != null ? -1 : 1;
  if (other instanceof IAtsUser) {
    String otherName=((IAtsUser)other).getName();
    String thisName=user != null ? getName() : null;
    if (thisName == null && otherName == null) {
      result=0;
    }
 else     if (thisName != null && otherName == null) {
      result=1;
    }
 else     if (thisName != null && otherName != null) {
      result=thisName.compareTo(otherName);
    }
  }
 else   if (other instanceof User) {
    result=user != null ? user.compareTo((User)other) : -1;
  }
  return result;
}",0.323666978484565
97637,"@Test public void testCompareTo(){
  Assert.assertEquals(-8,Guest.instance.compareTo(SystemUser.instance));
  Assert.assertEquals(-1,Guest.instance.compareTo(null));
  Assert.assertEquals(-1,Guest.instance.compareTo(""String_Node_Str""));
  TestUser user=new TestUser();
  user.setName(null);
  Assert.assertEquals(-1,Guest.instance.compareTo(user));
  Assert.assertEquals(-1,user.compareTo(Guest.instance));
  Assert.assertEquals(-1,user.compareTo(user));
}","@Test public void testCompareTo(){
  Assert.assertEquals(-8,Guest.instance.compareTo(SystemUser.instance));
  Assert.assertEquals(1,Guest.instance.compareTo(null));
  Assert.assertEquals(-1,Guest.instance.compareTo(""String_Node_Str""));
  TestUser user=new TestUser();
  user.setName(null);
  Assert.assertEquals(1,Guest.instance.compareTo(user));
  Assert.assertEquals(-1,user.compareTo(Guest.instance));
  Assert.assertEquals(0,user.compareTo(user));
}",0.7788778877887789
97638,"@Test public void testEqualsObject(){
  TestUser user=new TestUser();
  user.setUserId(""String_Node_Str"");
  Assert.assertTrue(SystemUser.instance.equals(user));
  user.setUserId(""String_Node_Str"");
  Assert.assertFalse(SystemUser.instance.equals(user));
  Assert.assertFalse(SystemUser.instance.equals(""String_Node_Str""));
  Assert.assertFalse(SystemUser.instance.equals(null));
  Assert.assertTrue(SystemUser.instance.equals(SystemUser.instance));
  user.setUserId(null);
  Assert.assertFalse(user.equals(SystemUser.instance));
  TestUser user2=new TestUser();
  user2.setUserId(null);
  Assert.assertFalse(user.equals(user2));
}","@Test public void testEqualsObject(){
  TestUser user=new TestUser();
  user.setUserId(""String_Node_Str"");
  Assert.assertTrue(SystemUser.instance.equals(user));
  user.setUserId(""String_Node_Str"");
  Assert.assertFalse(SystemUser.instance.equals(user));
  Assert.assertFalse(SystemUser.instance.equals(""String_Node_Str""));
  Assert.assertFalse(SystemUser.instance.equals(null));
  Assert.assertTrue(SystemUser.instance.equals(SystemUser.instance));
  user.setUserId(null);
  Assert.assertFalse(user.equals(SystemUser.instance));
  TestUser user2=new TestUser();
  user2.setUserId(null);
  Assert.assertTrue(user.equals(user2));
}",0.9944488501189532
97639,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof IAtsUser)) {
    return false;
  }
  IAtsUser other=(IAtsUser)obj;
  try {
    if (userId == null) {
      if (other.getUserId() != null) {
        return false;
      }
 else {
        return false;
      }
    }
 else     if (!userId.equals(other.getUserId())) {
      return false;
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof IAtsUser)) {
    return false;
  }
  try {
    String thisUserId=getUserId();
    String objUserId=((IAtsUser)obj).getUserId();
    if (thisUserId == null) {
      if (objUserId != null) {
        return false;
      }
    }
 else     if (!thisUserId.equals(objUserId)) {
      return false;
    }
  }
 catch (  OseeCoreException ex) {
    return false;
  }
  return true;
}",0.6015180265654649
97640,"@Override public int compareTo(Object other){
  if (other != null && other instanceof IAtsUser && ((IAtsUser)other).getName() != null && getName() != null) {
    return getName().compareTo(((IAtsUser)other).getName());
  }
  return -1;
}","@Override public int compareTo(Object other){
  int result=other != null ? -1 : 1;
  if (other instanceof IAtsUser) {
    String otherName=((IAtsUser)other).getName();
    String thisName=getName();
    if (thisName == null && otherName == null) {
      result=0;
    }
 else     if (thisName != null && otherName == null) {
      result=1;
    }
 else     if (thisName != null && otherName != null) {
      result=thisName.compareTo(otherName);
    }
  }
  return result;
}",0.4219409282700422
97641,"public static void outputXmlDocument(Node node,StreamResult output,Properties outputProperties) throws TransformerException {
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  transformer.setOutputProperties(outputProperties);
  transformer.transform(new DOMSource(node),output);
}","public static void outputXmlDocument(Node node,OutputStream output,Properties outputProperties) throws TransformerException {
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  transformer.setOutputProperties(outputProperties);
  transformer.transform(new DOMSource(node),new StreamResult(output));
}",0.9341692789968652
97642,"/** 
 * Writes the XML document 'document' to the 'file'.
 * @param document The XML document to output
 * @param file Where to put the output
 * @param prettyOutput If true, turns on indentation so the output is more easily readable, if False turns indentationoff to save space.
 * @throws TransformerException
 */
public static void writeXmlDocument(Document document,File file,Properties format) throws TransformerException, IOException {
  BufferedWriter out=new BufferedWriter(new FileWriter(file));
  outputXmlDocument(document,out,format);
  out.close();
}","/** 
 * Writes the XML document 'document' to the 'file'.
 * @param document The XML document to output
 * @param file Where to put the output
 * @param prettyOutput If true, turns on indentation so the output is more easily readable, if False turnsindentation off to save space.
 * @throws TransformerException
 */
public static void writeXmlDocument(Document document,File file,Properties format) throws TransformerException, IOException {
  BufferedWriter out=new BufferedWriter(new FileWriter(file));
  outputXmlDocument(document,out,format);
  out.close();
}",0.9786856127886324
97643,"/** 
 * @return format that is compact (no extra whitepsace)
 */
public static Properties getCompactFormat(){
  Properties format=new Properties();
  format.put(OutputKeys.METHOD,""String_Node_Str"");
  format.put(OutputKeys.INDENT,""String_Node_Str"");
  return format;
}","/** 
 * @return format that is compact (no extra whitespace)
 */
public static Properties getCompactFormat(){
  Properties format=new Properties();
  format.put(OutputKeys.METHOD,""String_Node_Str"");
  format.put(OutputKeys.INDENT,""String_Node_Str"");
  return format;
}",0.9925373134328358
97644,"/** 
 * Gets the XML document 'document' as a string
 * @param document The XML document to output
 * @param file Where to put the output
 * @param prettyOutput If true, turns on indentation so the output is more easily readable, if False turns indentationoff and is assumed to provide the XML as compactly as possible.
 * @throws TransformerException
 */
public static String xmlToString(Document document,boolean prettyOutput) throws TransformerException {
  StringWriter stringWriter=new StringWriter();
  Properties format=prettyOutput ? getPrettyFormat() : getCompactFormat();
  outputXmlDocument(document,stringWriter,format);
  return stringWriter.toString();
}","/** 
 * Gets the XML document 'document' as a string
 * @param document The XML document to output
 * @param file Where to put the output
 * @param prettyOutput If true, turns on indentation so the output is more easily readable, if False turnsindentation off and is assumed to provide the XML as compactly as possible.
 * @throws TransformerException
 */
public static String xmlToString(Document document,boolean prettyOutput) throws TransformerException {
  StringWriter stringWriter=new StringWriter();
  Properties format=prettyOutput ? getPrettyFormat() : getCompactFormat();
  outputXmlDocument(document,stringWriter,format);
  return stringWriter.toString();
}",0.9820359281437124
97645,"private void multiArtifactTest(List<WordExtractorData> actuals,List<String> expected) throws IOException {
  for (int i=0; i < actuals.size(); i++) {
    String artContent=WordUtil.textOnly(Lib.inputStreamToString(new ByteArrayInputStream(WordTemplateRenderer.getFormattedContent(actuals.get(i).getParentEelement()))));
    Assert.assertTrue(""String_Node_Str"" + expected.get(i) + ""String_Node_Str""+ artContent+ ""String_Node_Str"",expected.get(i).equals(artContent));
  }
}","private void multiArtifactTest(List<WordExtractorData> actuals,List<String> expected) throws IOException, XMLStreamException {
  for (int i=0; i < actuals.size(); i++) {
    String artContent=WordUtil.textOnly(Lib.inputStreamToString(new ByteArrayInputStream(WordTemplateRenderer.getFormattedContent(actuals.get(i).getParentEelement()))));
    Assert.assertTrue(""String_Node_Str"" + expected.get(i) + ""String_Node_Str""+ artContent+ ""String_Node_Str"",expected.get(i).equals(artContent));
  }
}",0.9792099792099792
97646,"@org.junit.Test public void testEditUsingWordTemplateRender() throws Exception {
  SevereLoggingMonitor monitorLog=TestUtil.severeLoggingStart();
  Artifact artifact=createArtifact(branch,ARTIFACT_NAME_1);
  artifact.persist(getClass().getSimpleName());
  String testData=Lib.fileToString(getClass(),TEST_WORD_EDIT_FILE_NAME);
  Assert.assertNotNull(testData);
  String expected=replaceGuidMarkers(testData,artifact.getGuid());
  FileSystemRenderer renderer=new WordTemplateRenderer();
  IFile editFile=openArtifactForEdit(renderer,artifact);
  writeNewContentAndWaitForSave(artifact,editFile,expected);
  String actual=getRenderedStoredContent(renderer,artifact);
  Assert.assertEquals(expected,actual);
  TestUtil.severeLoggingEnd(monitorLog);
}","/** 
 * <p> This test needs to be re-evaluated or discarded if OSEE decides to implement their <br/> own requirement storage and DSL. </p>
 * @throws Exception
 */
@org.junit.Test public void testEditUsingWordTemplateRender() throws Exception {
  SevereLoggingMonitor monitorLog=TestUtil.severeLoggingStart();
  Artifact artifact=createArtifact(branch,ARTIFACT_NAME_1);
  artifact.persist(getClass().getSimpleName());
  String testData=Lib.fileToString(getClass(),TEST_WORD_EDIT_FILE_NAME);
  Assert.assertNotNull(testData);
  String expected=replaceGuidMarkers(testData,artifact.getGuid());
  FileSystemRenderer renderer=new WordTemplateRenderer();
  IFile editFile=openArtifactForEdit(renderer,artifact);
  writeNewContentAndWaitForSave(artifact,editFile,expected);
  String actual=getRenderedStoredContent(renderer,artifact);
  Assert.assertEquals(expected,actual);
  TestUtil.severeLoggingEnd(monitorLog);
}",0.9010856453558505
97647,"public static void outputXmlDocument(Node node,OutputStream output,Properties outputProperties) throws TransformerException {
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  transformer.setOutputProperties(outputProperties);
  transformer.transform(new DOMSource(node),new StreamResult(output));
}","/** 
 * Sends the XML to the output
 * @param node The source XML
 * @param output Where the XML is 'printed' to
 * @param format The format style to use
 * @throws TransformerException
 */
public static void outputXmlDocument(Node node,Writer output,Properties outputProperties) throws TransformerException {
  Transformer transformer=TransformerFactory.newInstance().newTransformer();
  transformer.setOutputProperties(outputProperties);
  transformer.transform(new DOMSource(node),new StreamResult(output));
}",0.7523809523809524
97648,"public static OseeCoverageUnitFileContentsProvider getInstance(IOseeBranch branch){
  if (instance == null) {
    instance=new OseeCoverageUnitFileContentsProvider(branch);
  }
  return instance;
}","public static OseeCoverageUnitFileContentsProvider getInstance(IOseeBranch branch){
  if (instance == null || !instance.getBranch().equals(branch)) {
    instance=new OseeCoverageUnitFileContentsProvider(branch);
  }
  return instance;
}",0.9078341013824884
97649,"/** 
 * Delete attribute if exactly one exists. Does nothing if attribute does not exist and throw MultipleAttributesExist is more than one instance of the attribute type exsits for this artifact
 */
public final void deleteSoleAttribute(IAttributeType attributeType) throws OseeCoreException {
  Attribute<?> attribute=getSoleAttribute(attributeType);
  if (attribute != null) {
    if (!attribute.isInDb()) {
      attributes.removeValue(attributeType,attribute);
    }
 else {
      attribute.delete();
    }
  }
}","/** 
 * Delete attribute if exactly one exists. Does nothing if attribute does not exist and throw MultipleAttributesExist is more than one instance of the attribute type exsits for this artifact
 */
public final void deleteSoleAttribute(IAttributeType attributeType) throws OseeCoreException {
  Attribute<?> attribute=getSoleAttribute(attributeType);
  if (attribute != null) {
    deleteAttribute(attribute);
  }
}",0.860813704496788
97650,"public final void deleteAttribute(int attributeId) throws OseeCoreException {
  for (  Attribute<?> attribute : getAttributes()) {
    if (attribute.getId() == attributeId) {
      attribute.delete();
      break;
    }
  }
}","public final void deleteAttribute(Attribute<?> attribute) throws OseeCoreException {
  if (attribute.isInDb()) {
    attribute.delete();
  }
 else {
    attributes.removeValue(attribute.getAttributeType(),attribute);
  }
}",0.3713646532438479
97651,"/** 
 * Deletes the attribute
 */
public final void delete(){
  markAsChanged(ModificationType.DELETED);
}","/** 
 * Deletes the attribute
 */
public final void delete() throws OseeCoreException {
  if (isInDb()) {
    markAsChanged(ModificationType.DELETED);
  }
 else {
    getArtifact().deleteAttribute(this);
  }
}",0.6730158730158731
97652,"private void createDeleteMenuItem(Menu parentMenu){
  deleteItem=new MenuItem(parentMenu,SWT.PUSH);
  deleteItem.setImage(null);
  deleteItem.setText(""String_Node_Str"");
  deleteItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Attribute<?> attribute=getSelectedAttribute();
      attribute.delete();
      editor.onDirtied();
      notifyModifyAttribuesListeners();
      tableViewer.refresh();
    }
  }
);
}","private void createDeleteMenuItem(Menu parentMenu){
  deleteItem=new MenuItem(parentMenu,SWT.PUSH);
  deleteItem.setImage(null);
  deleteItem.setText(""String_Node_Str"");
  deleteItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        Attribute<?> attribute=getSelectedAttribute();
        attribute.delete();
        editor.onDirtied();
        notifyModifyAttribuesListeners();
        tableViewer.refresh();
      }
 catch (      OseeCoreException ex) {
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
      }
    }
  }
);
}",0.8672727272727273
97653,"@Override public void widgetSelected(SelectionEvent e){
  Attribute<?> attribute=getSelectedAttribute();
  attribute.delete();
  editor.onDirtied();
  notifyModifyAttribuesListeners();
  tableViewer.refresh();
}","@Override public void widgetSelected(SelectionEvent e){
  try {
    Attribute<?> attribute=getSelectedAttribute();
    attribute.delete();
    editor.onDirtied();
    notifyModifyAttribuesListeners();
    tableViewer.refresh();
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}",0.7047970479704797
97654,"public static void showNotActivatedNotification(String packageName,String appName){
  Intent intent=new Intent(sContext,WelcomeActivity.class);
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.putExtra(""String_Node_Str"",1);
  PendingIntent pModulesTab=PendingIntent.getActivity(sContext,PENDING_INTENT_OPEN_MODULES,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  String title=sContext.getString(R.string.module_is_not_activated_yet);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(sContext).setContentTitle(title).setContentText(appName).setTicker(title).setContentIntent(pModulesTab).setVibrate(new long[]{0}).setAutoCancel(true).setSmallIcon(R.drawable.ic_notification).setColor(sContext.getResources().getColor(R.color.colorPrimary));
  if (Build.VERSION.SDK_INT >= 21)   builder.setPriority(2);
  Intent iActivateAndReboot=new Intent(sContext,RebootReceiver.class);
  iActivateAndReboot.putExtra(RebootReceiver.EXTRA_ACTIVATE_MODULE,packageName);
  PendingIntent pActivateAndReboot=PendingIntent.getBroadcast(sContext,PENDING_INTENT_ACTIVATE_MODULE_AND_REBOOT,iActivateAndReboot,PendingIntent.FLAG_UPDATE_CURRENT);
  Intent iActivate=new Intent(sContext,RebootReceiver.class);
  iActivate.putExtra(RebootReceiver.EXTRA_ACTIVATE_MODULE,packageName);
  iActivate.putExtra(RebootReceiver.EXTRA_ACTIVATE_MODULE_AND_RETURN,true);
  PendingIntent pActivate=PendingIntent.getBroadcast(sContext,PENDING_INTENT_ACTIVATE_MODULE_AND_REBOOT,iActivate,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.BigTextStyle notiStyle=new NotificationCompat.BigTextStyle();
  notiStyle.setBigContentTitle(title);
  notiStyle.bigText(sContext.getString(R.string.module_is_not_activated_yet_detailed,appName));
  builder.setStyle(notiStyle);
  if (!ModuleUtil.getInstance().getEnabledModules().isEmpty()) {
    builder.addAction(R.drawable.ic_menu_refresh,sContext.getString(R.string.activate_and_reboot),pActivateAndReboot);
    builder.addAction(R.drawable.ic_save,sContext.getString(R.string.activate_only),pActivate);
  }
  sNotificationManager.notify(packageName,NOTIFICATION_MODULE_NOT_ACTIVATED_YET,builder.build());
}","public static void showNotActivatedNotification(String packageName,String appName){
  Intent intent=new Intent(sContext,WelcomeActivity.class);
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.putExtra(""String_Node_Str"",1);
  PendingIntent pModulesTab=PendingIntent.getActivity(sContext,PENDING_INTENT_OPEN_MODULES,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  String title=sContext.getString(R.string.module_is_not_activated_yet);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(sContext).setContentTitle(title).setContentText(appName).setTicker(title).setContentIntent(pModulesTab).setVibrate(new long[]{0}).setAutoCancel(true).setSmallIcon(R.drawable.ic_notification).setColor(sContext.getResources().getColor(R.color.colorPrimary));
  if (Build.VERSION.SDK_INT >= 21)   builder.setPriority(2);
  Intent iActivateAndReboot=new Intent(sContext,RebootReceiver.class);
  iActivateAndReboot.putExtra(RebootReceiver.EXTRA_ACTIVATE_MODULE,packageName);
  PendingIntent pActivateAndReboot=PendingIntent.getBroadcast(sContext,PENDING_INTENT_ACTIVATE_MODULE_AND_REBOOT,iActivateAndReboot,PendingIntent.FLAG_UPDATE_CURRENT);
  Intent iActivate=new Intent(sContext,RebootReceiver.class);
  iActivate.putExtra(RebootReceiver.EXTRA_ACTIVATE_MODULE,packageName);
  iActivate.putExtra(RebootReceiver.EXTRA_ACTIVATE_MODULE_AND_RETURN,true);
  PendingIntent pActivate=PendingIntent.getBroadcast(sContext,PENDING_INTENT_ACTIVATE_MODULE,iActivate,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.BigTextStyle notiStyle=new NotificationCompat.BigTextStyle();
  notiStyle.setBigContentTitle(title);
  notiStyle.bigText(sContext.getString(R.string.module_is_not_activated_yet_detailed,appName));
  builder.setStyle(notiStyle);
  if (!ModuleUtil.getInstance().getEnabledModules().isEmpty()) {
    builder.addAction(R.drawable.ic_menu_refresh,sContext.getString(R.string.activate_and_reboot),pActivateAndReboot);
    builder.addAction(R.drawable.ic_save,sContext.getString(R.string.activate_only),pActivate);
  }
  sNotificationManager.notify(packageName,NOTIFICATION_MODULE_NOT_ACTIVATED_YET,builder.build());
}",0.9974220764002812
97655,"@Override protected void onPreExecute(){
  mProgressDialog=new MaterialDialog.Builder(getContext()).content(R.string.loading).progress(true,0).show();
}","@Override protected void onPreExecute(){
  mProgressDialog=new MaterialDialog.Builder(getActivity()).content(R.string.loading).progress(true,0).show();
}",0.9639344262295082
97656,"private boolean checkPermissions(){
  if (ActivityCompat.checkSelfPermission(getActivity(),Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
    requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_EXTERNAL_PERMISSION);
    return true;
  }
  return false;
}","private boolean checkPermissions(){
  if (ActivityCompat.checkSelfPermission(getActivity(),Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
    FragmentCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_EXTERNAL_PERMISSION);
    return true;
  }
  return false;
}",0.9697885196374624
97657,"private boolean checkPermissions(){
  if (ActivityCompat.checkSelfPermission(this.getContext(),Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
    fragment.requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_EXTERNAL_PERMISSION);
    return true;
  }
  return false;
}","private boolean checkPermissions(){
  if (ActivityCompat.checkSelfPermission(this.getContext(),Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
    FragmentCompat.requestPermissions(fragment,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},WRITE_EXTERNAL_PERMISSION);
    return true;
  }
  return false;
}",0.9575402635431918
97658,"private void reloadXposedProp(){
  Map<String,String> map=Collections.emptyMap();
  if (XPOSED_PROP_FILE.canRead() || XPOSED_PROP_FILE_SYSTEMLESS.canRead() || XPOSED_PROP_FILE_SYSTEMLESS_2.canRead()) {
    File file=null;
    if (XPOSED_PROP_FILE.canRead()) {
      file=XPOSED_PROP_FILE;
    }
 else     if (XPOSED_PROP_FILE_SYSTEMLESS.canRead()) {
      file=XPOSED_PROP_FILE_SYSTEMLESS;
    }
 else     if (XPOSED_PROP_FILE_SYSTEMLESS_2.canRead()) {
      file=XPOSED_PROP_FILE_SYSTEMLESS_2;
    }
    if (file != null) {
      FileInputStream is=null;
      try {
        is=new FileInputStream(file);
        map=parseXposedProp(is);
      }
 catch (      IOException e) {
        Log.e(XposedApp.TAG,""String_Node_Str"" + file.getPath(),e);
      }
 finally {
        if (is != null) {
          try {
            is.close();
          }
 catch (          IOException ignored) {
          }
        }
      }
    }
  }
synchronized (this) {
    mXposedProp=map;
  }
}","private void reloadXposedProp(){
  Map<String,String> map=Collections.emptyMap();
  if (XPOSED_PROP_FILE.canRead() || XPOSED_PROP_FILE_SYSTEMLESS.canRead() || XPOSED_PROP_FILE_SYSTEMLESS_2.canRead()|| XPOSED_PROP_FILE_SYSTEMLESS_3.canRead()) {
    File file=null;
    if (XPOSED_PROP_FILE.canRead()) {
      file=XPOSED_PROP_FILE;
    }
 else     if (XPOSED_PROP_FILE_SYSTEMLESS.canRead()) {
      file=XPOSED_PROP_FILE_SYSTEMLESS;
    }
 else     if (XPOSED_PROP_FILE_SYSTEMLESS_2.canRead()) {
      file=XPOSED_PROP_FILE_SYSTEMLESS_2;
    }
 else     if (XPOSED_PROP_FILE_SYSTEMLESS_3.canRead()) {
      file=XPOSED_PROP_FILE_SYSTEMLESS_3;
    }
    if (file != null) {
      FileInputStream is=null;
      try {
        is=new FileInputStream(file);
        map=parseXposedProp(is);
      }
 catch (      IOException e) {
        Log.e(XposedApp.TAG,""String_Node_Str"" + file.getPath(),e);
      }
 finally {
        if (is != null) {
          try {
            is.close();
          }
 catch (          IOException ignored) {
          }
        }
      }
    }
  }
synchronized (this) {
    mXposedProp=map;
  }
}",0.9296314025849688
97659,"private static void showDownloadDialog(final Builder b,final long id){
  final Context context=b.mContext;
  final DownloadDialog dialog=new DownloadDialog(new MaterialDialog.Builder(context).title(b.mTitle).content(R.string.download_view_waiting).progress(false,0,true).progressNumberFormat(context.getString(R.string.download_progress)).canceledOnTouchOutside(false).negativeText(R.string.download_view_cancel).onNegative(new SingleButtonCallback(){
    @Override public void onClick(    @NonNull MaterialDialog dialog,    @NonNull DialogAction which){
      dialog.cancel();
    }
  }
).cancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      removeById(context,id);
    }
  }
));
  dialog.setShowProcess(false);
  dialog.show();
  new Thread(""String_Node_Str""){
    @Override public void run(){
      while (true) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return;
        }
        final DownloadInfo info=getById(context,id);
        if (info == null) {
          dialog.cancel();
          return;
        }
 else         if (info.status == DownloadManager.STATUS_FAILED) {
          dialog.cancel();
          Toast.makeText(context,context.getString(R.string.download_view_failed,info.reason),Toast.LENGTH_LONG).show();
          return;
        }
 else         if (info.status == DownloadManager.STATUS_SUCCESSFUL) {
          dialog.dismiss();
          new File(info.localFilename).setExecutable(false);
          if (b.mCallback != null) {
            b.mCallback.onDownloadFinished(context,info);
          }
          return;
        }
        XposedApp.runOnUiThread(new Runnable(){
          @Override public void run(){
            if (info.totalSize <= 0 || info.status != DownloadManager.STATUS_RUNNING) {
              dialog.setContent(R.string.download_view_waiting);
              dialog.setShowProcess(false);
            }
 else {
              dialog.setContent(R.string.download_running);
              dialog.setProgress(info.bytesDownloaded / 1024);
              dialog.setMaxProgress(info.totalSize / 1024);
              dialog.setShowProcess(true);
            }
          }
        }
);
      }
    }
  }
.start();
}","private static void showDownloadDialog(final Builder b,final long id){
}",0.0611205432937181
97660,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mPrevSelectedId=mSelectedId;
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    mDrawerHandler.removeCallbacksAndMessages(null);
    mDrawerHandler.postDelayed(new Runnable(){
      @Override public void run(){
        navigate(mSelectedId);
      }
    }
,250);
    mDrawerLayout.closeDrawers();
  }
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    int value=extras.getInt(""String_Node_Str"");
    switchFragment(value);
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mPrevSelectedId=mSelectedId;
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    mDrawerHandler.removeCallbacksAndMessages(null);
    mDrawerHandler.postDelayed(new Runnable(){
      @Override public void run(){
        navigate(mSelectedId);
      }
    }
,250);
    mDrawerLayout.closeDrawers();
  }
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    int value=extras.getInt(""String_Node_Str"",prefs.getInt(""String_Node_Str"",0));
    switchFragment(value);
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}",0.98965307364577
97661,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPref=XposedApp.getPreferences();
  mRepoLoader=RepoLoader.getInstance();
  mModuleUtil=ModuleUtil.getInstance();
  mAdapter=new DownloadsAdapter(getActivity());
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      return RepoDb.queryModuleOverview(mSortingOrder,constraint);
    }
  }
);
  mSortingOrder=mPref.getInt(""String_Node_Str"",RepoDb.SORT_STATUS);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPref=XposedApp.getPreferences();
  mRepoLoader=RepoLoader.getInstance();
  mModuleUtil=ModuleUtil.getInstance();
  mAdapter=new DownloadsAdapter(getActivity());
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      return RepoDb.queryModuleOverview(mSortingOrder,constraint);
    }
  }
);
  mSortingOrder=mPref.getInt(""String_Node_Str"",RepoDb.SORT_STATUS);
  mIgnoredUpdatesPref=getContext().getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  setHasOptionsMenu(true);
}",0.9269893355209188
97662,"@Override public void onResume(){
  super.onResume();
  if (mAdapter != null && mListView != null) {
    mListView.setAdapter(mAdapter);
  }
}","@Override public void onResume(){
  super.onResume();
  mIgnoredUpdatesPref.registerOnSharedPreferenceChangeListener(this);
  if (changed) {
    reloadItems();
    changed=!changed;
  }
}",0.5106382978723404
97663,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (mAdapter != null && mListView != null) {
    mListView.setAdapter(mAdapter);
  }
}",0.7272727272727273
97664,"public DownloadsAdapter(Context context){
  super(context,null,0);
  mContext=context;
  mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mPrefs=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  Resources res=context.getResources();
  sectionHeadersStatus=new String[]{res.getString(R.string.download_section_framework),res.getString(R.string.download_section_update_available),res.getString(R.string.download_section_installed),res.getString(R.string.download_section_not_installed)};
  sectionHeadersDate=new String[]{res.getString(R.string.download_section_24h),res.getString(R.string.download_section_7d),res.getString(R.string.download_section_30d),res.getString(R.string.download_section_older)};
}","public DownloadsAdapter(Context context){
  super(context,null,0);
  mContext=context;
  mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mPrefs=context.getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  Resources res=context.getResources();
  sectionHeadersStatus=new String[]{res.getString(R.string.download_section_framework),res.getString(R.string.download_section_update_available),res.getString(R.string.download_section_installed),res.getString(R.string.download_section_not_installed)};
  sectionHeadersDate=new String[]{res.getString(R.string.download_section_24h),res.getString(R.string.download_section_7d),res.getString(R.string.download_section_30d),res.getString(R.string.download_section_older)};
}",0.9947368421052633
97665,"@Override protected void onPreExecute(){
  mProgressDialog=new MaterialDialog.Builder(getContext()).content(""String_Node_Str"").progress(true,0).show();
}","@Override protected void onPreExecute(){
  mProgressDialog=new MaterialDialog.Builder(getContext()).content(R.string.loading).progress(true,0).show();
}",0.9377049180327868
97666,"@Override public void onInstalledModulesReloaded(ModuleUtil moduleUtil){
  getActivity().runOnUiThread(reloadModules);
}","@Override public void onInstalledModulesReloaded(ModuleUtil moduleUtil){
  new ReloadModules().execute();
}",0.8105726872246696
97667,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  installedXposedVersion=XposedApp.getXposedVersion();
  if (installedXposedVersion <= 0) {
    View notActiveNote=getActivity().getLayoutInflater().inflate(R.layout.xposed_not_active_note,getListView(),false);
    notActiveNote.setTag(NOT_ACTIVE_NOTE_TAG);
    getListView().addHeaderView(notActiveNote);
  }
  mRootUtil=new RootUtil();
  mAdapter=new ModuleAdapter(getActivity());
  reloadModules.run();
  setListAdapter(mAdapter);
  setEmptyText(getActivity().getString(R.string.no_xposed_modules_found));
  registerForContextMenu(getListView());
  mModuleUtil.addListener(this);
  ActionBar actionBar=((WelcomeActivity)getActivity()).getSupportActionBar();
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int sixDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,6,metrics);
  int eightDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,8,metrics);
  int toolBarDp=actionBar.getHeight() == 0 ? 196 : actionBar.getHeight();
  getListView().setDivider(null);
  getListView().setDividerHeight(sixDp);
  getListView().setPadding(eightDp,toolBarDp + eightDp,eightDp,eightDp);
  getListView().setClipToPadding(false);
  setHasOptionsMenu(true);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  installedXposedVersion=XposedApp.getXposedVersion();
  if (installedXposedVersion <= 0) {
    View notActiveNote=getActivity().getLayoutInflater().inflate(R.layout.xposed_not_active_note,getListView(),false);
    notActiveNote.setTag(NOT_ACTIVE_NOTE_TAG);
    getListView().addHeaderView(notActiveNote);
  }
  mRootUtil=new RootUtil();
  mAdapter=new ModuleAdapter(getActivity());
  new ReloadModules().execute();
  setListAdapter(mAdapter);
  setEmptyText(getActivity().getString(R.string.no_xposed_modules_found));
  registerForContextMenu(getListView());
  mModuleUtil.addListener(this);
  ActionBar actionBar=((WelcomeActivity)getActivity()).getSupportActionBar();
  DisplayMetrics metrics=getResources().getDisplayMetrics();
  int sixDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,6,metrics);
  int eightDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,8,metrics);
  int toolBarDp=actionBar.getHeight() == 0 ? 196 : actionBar.getHeight();
  getListView().setDivider(null);
  getListView().setDividerHeight(sixDp);
  getListView().setPadding(eightDp,toolBarDp + eightDp,eightDp,eightDp);
  getListView().setClipToPadding(false);
  setHasOptionsMenu(true);
}",0.9923136049192928
97668,"@Override public void onSingleInstalledModuleReloaded(ModuleUtil moduleUtil,String packageName,InstalledModule module){
  getActivity().runOnUiThread(reloadModules);
}","@Override public void onSingleInstalledModuleReloaded(ModuleUtil moduleUtil,String packageName,InstalledModule module){
  new ReloadModules().execute();
}",0.8660436137071651
97669,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    RepoLoader.getInstance().triggerReload(true);
  return true;
case R.id.menu_share:
String text=mModule.name + ""String_Node_Str"";
if (isPackageInstalled(mPackageName,this)) {
String s=getPackageManager().getInstallerPackageName(mPackageName);
if (s.equals(ModulesFragment.PLAY_STORE_PACKAGE)) {
  text+=String.format(ModulesFragment.PLAY_STORE_LINK,mPackageName);
}
 else {
  text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
}
 else {
text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
Intent sharingIntent=new Intent(Intent.ACTION_SEND);
sharingIntent.setType(""String_Node_Str"");
sharingIntent.putExtra(Intent.EXTRA_TEXT,text);
startActivity(Intent.createChooser(sharingIntent,getString(R.string.share)));
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    RepoLoader.getInstance().triggerReload(true);
  return true;
case R.id.menu_share:
String text=mModule.name + ""String_Node_Str"";
if (isPackageInstalled(mPackageName,this)) {
String s=getPackageManager().getInstallerPackageName(mPackageName);
boolean playStore;
try {
  playStore=s.equals(ModulesFragment.PLAY_STORE_PACKAGE);
}
 catch (NullPointerException e) {
  playStore=false;
}
if (playStore) {
  text+=String.format(ModulesFragment.PLAY_STORE_LINK,mPackageName);
}
 else {
  text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
}
 else {
text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
Intent sharingIntent=new Intent(Intent.ACTION_SEND);
sharingIntent.setType(""String_Node_Str"");
sharingIntent.putExtra(Intent.EXTRA_TEXT,text);
startActivity(Intent.createChooser(sharingIntent,getString(R.string.share)));
return true;
}
return super.onOptionsItemSelected(item);
}",0.9420809841107124
97670,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  mDrawerLayout.setStatusBarBackgroundColor(darkenColor(XposedApp.getColor(this),0.85f));
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mPrevSelectedId=mSelectedId;
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    mDrawerHandler.removeCallbacksAndMessages(null);
    mDrawerHandler.postDelayed(new Runnable(){
      @Override public void run(){
        navigate(mSelectedId);
      }
    }
,250);
    mDrawerLayout.closeDrawers();
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mPrevSelectedId=mSelectedId;
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    mDrawerHandler.removeCallbacksAndMessages(null);
    mDrawerHandler.postDelayed(new Runnable(){
      @Override public void run(){
        navigate(mSelectedId);
      }
    }
,250);
    mDrawerLayout.closeDrawers();
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}",0.9705304518664049
97671,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.tab_installer,container,false);
  txtInstallError=(TextView)v.findViewById(R.id.framework_install_errors);
  txtKnownIssue=(TextView)v.findViewById(R.id.framework_known_issue);
  btnInstall=(Button)v.findViewById(R.id.btnInstall);
  btnUninstall=(Button)v.findViewById(R.id.btnUninstall);
  mInstallersLoading=(ProgressBar)v.findViewById(R.id.loadingInstallers);
  mUninstallersLoading=(ProgressBar)v.findViewById(R.id.loadingUninstallers);
  mInstallersChooser=(Spinner)v.findViewById(R.id.chooserInstallers);
  mUninstallersChooser=(Spinner)v.findViewById(R.id.chooserUninstallers);
  mUpdateView=(CardView)v.findViewById(R.id.updateView);
  mUpdateButton=(Button)v.findViewById(R.id.updateButton);
  mInfoInstaller=(ImageView)v.findViewById(R.id.infoInstaller);
  mInfoUninstaller=(ImageView)v.findViewById(R.id.infoUninstaller);
  mInstallForbidden=(TextView)v.findViewById(R.id.installationForbidden);
  String installedXposedVersion=XposedApp.getXposedProp().get(""String_Node_Str"");
  if (installedXposedVersion == null) {
    txtInstallError.setText(R.string.installation_lollipop);
    txtInstallError.setTextColor(getResources().getColor(R.color.warning));
  }
 else {
    int installedXposedVersionInt=extractIntPart(installedXposedVersion);
    if (installedXposedVersionInt == XposedApp.getActiveXposedVersion()) {
      txtInstallError.setText(getString(R.string.installed_lollipop,installedXposedVersion));
      txtInstallError.setTextColor(getResources().getColor(R.color.darker_green));
    }
 else {
      txtInstallError.setText(getString(R.string.installed_lollipop_inactive,installedXposedVersion));
      txtInstallError.setTextColor(getResources().getColor(R.color.warning));
    }
  }
  txtInstallError.setVisibility(View.VISIBLE);
  if (!XposedApp.getPreferences().getBoolean(""String_Node_Str"",false)) {
    final View dontShowAgainView=inflater.inflate(R.layout.dialog_install_warning,null);
    new MaterialDialog.Builder(getActivity()).title(R.string.install_warning_title).customView(dontShowAgainView,false).positiveText(android.R.string.ok).callback(new MaterialDialog.ButtonCallback(){
      @Override public void onPositive(      MaterialDialog dialog){
        super.onPositive(dialog);
        CheckBox checkBox=(CheckBox)dontShowAgainView.findViewById(android.R.id.checkbox);
        if (checkBox.isChecked())         XposedApp.getPreferences().edit().putBoolean(""String_Node_Str"",true).apply();
      }
    }
).cancelable(false).show();
  }
  new JSONParser(JSON_LINK).execute();
  mInfoInstaller.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Installer selectedInstaller=(Installer)mInstallersChooser.getSelectedItem();
      String s=getString(R.string.infoInstaller,selectedInstaller.name,selectedInstaller.sdk,selectedInstaller.architecture,selectedInstaller.version);
      new MaterialDialog.Builder(getContext()).title(R.string.info).content(s).positiveText(android.R.string.ok).show();
    }
  }
);
  mInfoUninstaller.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Uninstaller selectedUninstaller=(Uninstaller)mUninstallersChooser.getSelectedItem();
      String s=getString(R.string.infoUninstaller,selectedUninstaller.name,selectedUninstaller.architecture,selectedUninstaller.date);
      new MaterialDialog.Builder(getContext()).title(R.string.info).content(s).positiveText(android.R.string.ok).show();
    }
  }
);
  btnInstall.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (write())       return;
      areYouSure(R.string.warningArchitecture,new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog dialog){
          super.onPositive(dialog);
          Installer selectedInstaller=(Installer)mInstallersChooser.getSelectedItem();
          DownloadsUtil.add(getContext(),selectedInstaller.name,selectedInstaller.link,InstallerFragment.this,DownloadsUtil.MIME_TYPES.ZIP,true);
        }
      }
);
    }
  }
);
  btnUninstall.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (write())       return;
      areYouSure(R.string.warningArchitecture,new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog dialog){
          super.onPositive(dialog);
          Uninstaller selectedUninstaller=(Uninstaller)mUninstallersChooser.getSelectedItem();
          DownloadsUtil.add(getContext(),selectedUninstaller.name,selectedUninstaller.link,InstallerFragment.this,DownloadsUtil.MIME_TYPES.ZIP,true);
        }
      }
);
    }
  }
);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.tab_installer,container,false);
  txtInstallError=(TextView)v.findViewById(R.id.framework_install_errors);
  txtKnownIssue=(TextView)v.findViewById(R.id.framework_known_issue);
  btnInstall=(Button)v.findViewById(R.id.btnInstall);
  btnUninstall=(Button)v.findViewById(R.id.btnUninstall);
  mInstallersLoading=(ProgressBar)v.findViewById(R.id.loadingInstallers);
  mUninstallersLoading=(ProgressBar)v.findViewById(R.id.loadingUninstallers);
  mInstallersChooser=(Spinner)v.findViewById(R.id.chooserInstallers);
  mUninstallersChooser=(Spinner)v.findViewById(R.id.chooserUninstallers);
  mUpdateView=(CardView)v.findViewById(R.id.updateView);
  mUpdateButton=(Button)v.findViewById(R.id.updateButton);
  mInfoInstaller=(ImageView)v.findViewById(R.id.infoInstaller);
  mInfoUninstaller=(ImageView)v.findViewById(R.id.infoUninstaller);
  mInstallForbidden=(TextView)v.findViewById(R.id.installationForbidden);
  String installedXposedVersion=XposedApp.getXposedProp().get(""String_Node_Str"");
  if (Build.VERSION.SDK_INT >= 21) {
    if (installedXposedVersion == null) {
      txtInstallError.setText(R.string.installation_lollipop);
      txtInstallError.setTextColor(getResources().getColor(R.color.warning));
    }
 else {
      int installedXposedVersionInt=extractIntPart(installedXposedVersion);
      if (installedXposedVersionInt == XposedApp.getActiveXposedVersion()) {
        txtInstallError.setText(getString(R.string.installed_lollipop,installedXposedVersion));
        txtInstallError.setTextColor(getResources().getColor(R.color.darker_green));
      }
 else {
        txtInstallError.setText(getString(R.string.installed_lollipop_inactive,installedXposedVersion));
        txtInstallError.setTextColor(getResources().getColor(R.color.warning));
      }
    }
  }
 else {
    boolean backupXposed=new File(""String_Node_Str"").exists();
    if (backupXposed) {
      txtInstallError.setText(R.string.installed_no_lollipop);
      txtInstallError.setTextColor(getResources().getColor(R.color.darker_green));
    }
 else {
      txtInstallError.setText(getString(R.string.not_installed_no_lollipop));
      txtInstallError.setTextColor(getResources().getColor(R.color.warning));
    }
  }
  txtInstallError.setVisibility(View.VISIBLE);
  if (!XposedApp.getPreferences().getBoolean(""String_Node_Str"",false)) {
    final View dontShowAgainView=inflater.inflate(R.layout.dialog_install_warning,null);
    new MaterialDialog.Builder(getActivity()).title(R.string.install_warning_title).customView(dontShowAgainView,false).positiveText(android.R.string.ok).callback(new MaterialDialog.ButtonCallback(){
      @Override public void onPositive(      MaterialDialog dialog){
        super.onPositive(dialog);
        CheckBox checkBox=(CheckBox)dontShowAgainView.findViewById(android.R.id.checkbox);
        if (checkBox.isChecked())         XposedApp.getPreferences().edit().putBoolean(""String_Node_Str"",true).apply();
      }
    }
).cancelable(false).show();
  }
  new JSONParser(JSON_LINK).execute();
  mInfoInstaller.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Installer selectedInstaller=(Installer)mInstallersChooser.getSelectedItem();
      String s=getString(R.string.infoInstaller,selectedInstaller.name,selectedInstaller.sdk,selectedInstaller.architecture,selectedInstaller.version);
      new MaterialDialog.Builder(getContext()).title(R.string.info).content(s).positiveText(android.R.string.ok).show();
    }
  }
);
  mInfoUninstaller.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Uninstaller selectedUninstaller=(Uninstaller)mUninstallersChooser.getSelectedItem();
      String s=getString(R.string.infoUninstaller,selectedUninstaller.name,selectedUninstaller.architecture,selectedUninstaller.date);
      new MaterialDialog.Builder(getContext()).title(R.string.info).content(s).positiveText(android.R.string.ok).show();
    }
  }
);
  btnInstall.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (write())       return;
      areYouSure(R.string.warningArchitecture,new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog dialog){
          super.onPositive(dialog);
          Installer selectedInstaller=(Installer)mInstallersChooser.getSelectedItem();
          DownloadsUtil.add(getContext(),selectedInstaller.name,selectedInstaller.link,InstallerFragment.this,DownloadsUtil.MIME_TYPES.ZIP,true);
        }
      }
);
    }
  }
);
  btnUninstall.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (write())       return;
      areYouSure(R.string.warningArchitecture,new MaterialDialog.ButtonCallback(){
        @Override public void onPositive(        MaterialDialog dialog){
          super.onPositive(dialog);
          Uninstaller selectedUninstaller=(Uninstaller)mUninstallersChooser.getSelectedItem();
          DownloadsUtil.add(getContext(),selectedUninstaller.name,selectedUninstaller.link,InstallerFragment.this,DownloadsUtil.MIME_TYPES.ZIP,true);
        }
      }
);
    }
  }
);
  return v;
}",0.95197795709506
97672,"public IconListPreference(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.IconListPreference,0,0);
  CharSequence[] drawables;
  try {
    drawables=a.getTextArray(R.styleable.IconListPreference_icons);
  }
  finally {
    a.recycle();
  }
  for (int i=0; i < drawables.length; i++) {
    int resId=context.getResources().getIdentifier(drawables[i].toString(),""String_Node_Str"",context.getPackageName());
    Drawable d=context.getDrawable(resId);
    mEntryDrawables.add(d);
  }
}","public IconListPreference(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.IconListPreference,0,0);
  CharSequence[] drawables;
  try {
    drawables=a.getTextArray(R.styleable.IconListPreference_icons);
  }
  finally {
    a.recycle();
  }
  for (  CharSequence drawable : drawables) {
    int resId=context.getResources().getIdentifier(drawable.toString(),""String_Node_Str"",context.getPackageName());
    Drawable d=context.getResources().getDrawable(resId);
    mEntryDrawables.add(d);
  }
}",0.8486956521739131
97673,"@Override public boolean onContextItemSelected(MenuItem item){
  InstalledModule module=getItemFromContextMenuInfo(item.getMenuInfo());
  if (module == null)   return false;
switch (item.getItemId()) {
case R.id.menu_launch:
    startActivity(getSettingsIntent(module.packageName));
  return true;
case R.id.menu_download_updates:
Intent detailsIntent=new Intent(getActivity(),DownloadDetailsActivity.class);
detailsIntent.setData(Uri.fromParts(""String_Node_Str"",module.packageName,null));
startActivity(detailsIntent);
return true;
case R.id.menu_support:
NavUtil.startURL(getActivity(),RepoDb.getModuleSupport(module.packageName));
return true;
case R.id.menu_play_store:
Intent i=new Intent(android.content.Intent.ACTION_VIEW);
i.setData(Uri.parse(String.format(PLAY_STORE_LINK,module.packageName)));
i.setPackage(PLAY_STORE_PACKAGE);
try {
startActivity(i);
}
 catch (ActivityNotFoundException e) {
i.setPackage(null);
startActivity(i);
}
return true;
case R.id.menu_app_info:
startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.fromParts(""String_Node_Str"",module.packageName,null)));
return true;
case R.id.menu_uninstall:
startActivity(new Intent(Intent.ACTION_UNINSTALL_PACKAGE,Uri.fromParts(""String_Node_Str"",module.packageName,null)));
return true;
}
return false;
}","@Override public boolean onContextItemSelected(MenuItem item){
  InstalledModule module=getItemFromContextMenuInfo(item.getMenuInfo());
  if (module == null)   return false;
switch (item.getItemId()) {
case R.id.menu_launch:
    startActivity(getSettingsIntent(module.packageName));
  return true;
case R.id.menu_download_updates:
Intent detailsIntent=new Intent(getActivity(),DownloadDetailsActivity.class);
detailsIntent.setData(Uri.fromParts(""String_Node_Str"",module.packageName,null));
startActivity(detailsIntent);
return true;
case R.id.menu_support:
NavUtil.startURL(getActivity(),Uri.parse(RepoDb.getModuleSupport(module.packageName)));
return true;
case R.id.menu_play_store:
Intent i=new Intent(android.content.Intent.ACTION_VIEW);
i.setData(Uri.parse(String.format(PLAY_STORE_LINK,module.packageName)));
i.setPackage(PLAY_STORE_PACKAGE);
try {
startActivity(i);
}
 catch (ActivityNotFoundException e) {
i.setPackage(null);
startActivity(i);
}
return true;
case R.id.menu_app_info:
startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.fromParts(""String_Node_Str"",module.packageName,null)));
return true;
case R.id.menu_uninstall:
startActivity(new Intent(Intent.ACTION_UNINSTALL_PACKAGE,Uri.fromParts(""String_Node_Str"",module.packageName,null)));
return true;
}
return false;
}",0.995831754452444
97674,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=super.getView(position,convertView,parent);
  if (convertView == null) {
    ((CheckBox)view.findViewById(R.id.checkbox)).setOnCheckedChangeListener(new OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        String packageName=(String)buttonView.getTag();
        boolean changed=mModuleUtil.isModuleEnabled(packageName) ^ isChecked;
        if (changed) {
          mModuleUtil.setModuleEnabled(packageName,isChecked);
          mModuleUtil.updateModulesList(true);
        }
      }
    }
);
  }
  InstalledModule item=getItem(position);
  TextView version=(TextView)view.findViewById(R.id.version_name);
  version.setText(item.versionName);
  view.findViewById(R.id.checkbox).setTag(item.packageName);
  view.setTag(item.packageName);
  ((ImageView)view.findViewById(R.id.icon)).setImageDrawable(item.getIcon());
  TextView descriptionText=(TextView)view.findViewById(R.id.description);
  if (!item.getDescription().isEmpty()) {
    descriptionText.setText(item.getDescription());
    descriptionText.setTextColor(ThemeUtil.getThemeColor(getContext(),android.R.attr.textColorSecondary));
  }
 else {
    descriptionText.setText(getString(R.string.module_empty_description));
    descriptionText.setTextColor(getResources().getColor(R.color.warning));
  }
  CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
  checkbox.setChecked(mModuleUtil.isModuleEnabled(item.packageName));
  TextView warningText=(TextView)view.findViewById(R.id.warning);
  if (item.minVersion == 0) {
    checkbox.setEnabled(false);
    warningText.setText(getString(R.string.no_min_version_specified));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (installedXposedVersion != 0 && item.minVersion > installedXposedVersion) {
    checkbox.setEnabled(false);
    warningText.setText(String.format(getString(R.string.warning_xposed_min_version),item.minVersion));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (item.minVersion < ModuleUtil.MIN_MODULE_VERSION) {
    checkbox.setEnabled(false);
    warningText.setText(String.format(getString(R.string.warning_min_version_too_low),item.minVersion,ModuleUtil.MIN_MODULE_VERSION));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (item.isInstalledOnExternalStorage()) {
    checkbox.setEnabled(false);
    warningText.setText(getString(R.string.warning_installed_on_external_storage));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (item.isForwardLocked()) {
    checkbox.setEnabled(false);
    warningText.setText(getString(R.string.warning_forward_locked));
    warningText.setVisibility(View.VISIBLE);
    warningText.setVisibility(View.VISIBLE);
  }
 else {
    checkbox.setEnabled(true);
    warningText.setVisibility(View.GONE);
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View view=super.getView(position,convertView,parent);
  if (convertView == null) {
    ((CheckBox)view.findViewById(R.id.checkbox)).setOnCheckedChangeListener(new OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        String packageName=(String)buttonView.getTag();
        boolean changed=mModuleUtil.isModuleEnabled(packageName) ^ isChecked;
        if (changed) {
          mModuleUtil.setModuleEnabled(packageName,isChecked);
          mModuleUtil.updateModulesList(true);
        }
      }
    }
);
  }
  InstalledModule item=getItem(position);
  TextView version=(TextView)view.findViewById(R.id.version_name);
  version.setText(item.versionName);
  view.findViewById(R.id.checkbox).setTag(item.packageName);
  view.setTag(item.packageName);
  ((ImageView)view.findViewById(R.id.icon)).setImageDrawable(item.getIcon());
  TextView descriptionText=(TextView)view.findViewById(R.id.description);
  if (!item.getDescription().isEmpty()) {
    descriptionText.setText(item.getDescription());
    descriptionText.setTextColor(ThemeUtil.getThemeColor(getContext(),android.R.attr.textColorSecondary));
  }
 else {
    descriptionText.setText(getString(R.string.module_empty_description));
    descriptionText.setTextColor(getResources().getColor(R.color.warning));
  }
  CheckBox checkbox=(CheckBox)view.findViewById(R.id.checkbox);
  checkbox.setChecked(mModuleUtil.isModuleEnabled(item.packageName));
  TextView warningText=(TextView)view.findViewById(R.id.warning);
  if (item.minVersion == 0) {
    checkbox.setEnabled(false);
    warningText.setText(getString(R.string.no_min_version_specified));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (installedXposedVersion != 0 && item.minVersion > installedXposedVersion) {
    checkbox.setEnabled(false);
    warningText.setText(String.format(getString(R.string.warning_xposed_min_version),item.minVersion));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (item.minVersion < ModuleUtil.MIN_MODULE_VERSION) {
    checkbox.setEnabled(false);
    warningText.setText(String.format(getString(R.string.warning_min_version_too_low),item.minVersion,ModuleUtil.MIN_MODULE_VERSION));
    warningText.setVisibility(View.VISIBLE);
  }
 else   if (item.isInstalledOnExternalStorage()) {
    checkbox.setEnabled(false);
    warningText.setText(getString(R.string.warning_installed_on_external_storage));
    warningText.setVisibility(View.VISIBLE);
  }
 else {
    checkbox.setEnabled(true);
    warningText.setVisibility(View.GONE);
  }
  return view;
}",0.9583705556548152
97675,"public boolean isForwardLocked(){
  return (app.flags & FLAG_FORWARD_LOCK) != 0;
}","/** 
 * @hide
 */
public boolean isForwardLocked(){
  return (app.flags & FLAG_FORWARD_LOCK) != 0;
}",0.9010989010989012
97676,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    RepoLoader.getInstance().triggerReload(true);
  return true;
case R.id.menu_share:
String text=mModule.name + ""String_Node_Str"";
String s=getPackageManager().getInstallerPackageName(mPackageName);
if (s.equals(ModulesFragment.PLAY_STORE_PACKAGE)) {
text+=String.format(ModulesFragment.PLAY_STORE_LINK,mPackageName);
}
 else {
text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
Intent sharingIntent=new Intent(Intent.ACTION_SEND);
sharingIntent.setType(""String_Node_Str"");
sharingIntent.putExtra(Intent.EXTRA_TEXT,text);
startActivity(Intent.createChooser(sharingIntent,getString(R.string.share)));
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_refresh:
    RepoLoader.getInstance().triggerReload(true);
  return true;
case R.id.menu_share:
String text=mModule.name + ""String_Node_Str"";
if (isPackageInstalled(mPackageName,this)) {
String s=getPackageManager().getInstallerPackageName(mPackageName);
if (s.equals(ModulesFragment.PLAY_STORE_PACKAGE)) {
  text+=String.format(ModulesFragment.PLAY_STORE_LINK,mPackageName);
}
 else {
  text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
}
 else {
text+=String.format(ModulesFragment.XPOSED_REPO_LINK,mPackageName);
}
Intent sharingIntent=new Intent(Intent.ACTION_SEND);
sharingIntent.setType(""String_Node_Str"");
sharingIntent.putExtra(Intent.EXTRA_TEXT,text);
startActivity(Intent.createChooser(sharingIntent,getString(R.string.share)));
return true;
}
return super.onOptionsItemSelected(item);
}",0.9248689574839836
97677,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mPrevSelectedId=mSelectedId;
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    mDrawerHandler.removeCallbacksAndMessages(null);
    mDrawerHandler.postDelayed(new Runnable(){
      @Override public void run(){
        navigate(mSelectedId);
      }
    }
,250);
    mDrawerLayout.closeDrawers();
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  mDrawerLayout.setStatusBarBackgroundColor(darkenColor(XposedApp.getColor(this),0.85f));
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mPrevSelectedId=mSelectedId;
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    mDrawerHandler.removeCallbacksAndMessages(null);
    mDrawerHandler.postDelayed(new Runnable(){
      @Override public void run(){
        navigate(mSelectedId);
      }
    }
,250);
    mDrawerLayout.closeDrawers();
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}",0.9705304518664049
97678,"@Override public Cursor runQuery(CharSequence constraint){
  if (XposedApp.getInstance().areDownloadsEnabled()) {
    return RepoDb.queryModuleOverview(mSortingOrder,constraint);
  }
 else {
    showDisabledDownloadsDialog();
    return null;
  }
}","@Override public Cursor runQuery(CharSequence constraint){
  if (XposedApp.getInstance().areDownloadsEnabled()) {
    return RepoDb.queryModuleOverview(mSortingOrder,constraint);
  }
 else {
    return null;
  }
}",0.8763557483731019
97679,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPref=XposedApp.getPreferences();
  mRepoLoader=RepoLoader.getInstance();
  mModuleUtil=ModuleUtil.getInstance();
  mAdapter=new DownloadsAdapter(getActivity());
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      if (XposedApp.getInstance().areDownloadsEnabled()) {
        return RepoDb.queryModuleOverview(mSortingOrder,constraint);
      }
 else {
        showDisabledDownloadsDialog();
        return null;
      }
    }
  }
);
  mSortingOrder=mPref.getInt(""String_Node_Str"",RepoDb.SORT_STATUS);
  setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPref=XposedApp.getPreferences();
  mRepoLoader=RepoLoader.getInstance();
  mModuleUtil=ModuleUtil.getInstance();
  mAdapter=new DownloadsAdapter(getActivity());
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      if (XposedApp.getInstance().areDownloadsEnabled()) {
        return RepoDb.queryModuleOverview(mSortingOrder,constraint);
      }
 else {
        return null;
      }
    }
  }
);
  mSortingOrder=mPref.getInt(""String_Node_Str"",RepoDb.SORT_STATUS);
  setHasOptionsMenu(true);
}",0.9717595944967417
97680,"public static void setColors(ActionBar actionBar,Object value,Activity activity){
  int color=(int)value;
  actionBar.setBackgroundDrawable(new ColorDrawable(color));
  if (Build.VERSION.SDK_INT >= 21) {
    ActivityManager.TaskDescription tDesc=new ActivityManager.TaskDescription(activity.getString(R.string.app_name),drawableToBitmap(activity.getDrawable(R.mipmap.ic_launcher)),color);
    activity.setTaskDescription(tDesc);
    if (getPreferences().getBoolean(""String_Node_Str"",true)) {
      activity.getWindow().setNavigationBarColor(darkenColor(color,0.85f));
    }
 else {
      int black=activity.getResources().getColor(android.R.color.black);
      activity.getWindow().setNavigationBarColor(black);
    }
  }
}","public static void setColors(ActionBar actionBar,Object value,Activity activity){
  int color=(int)value;
  actionBar.setBackgroundDrawable(new ColorDrawable(color));
  if (Build.VERSION.SDK_INT >= 21) {
    ActivityManager.TaskDescription tDesc=new ActivityManager.TaskDescription(activity.getString(R.string.app_name),drawableToBitmap(activity.getDrawable(R.mipmap.ic_launcher)),color);
    activity.setTaskDescription(tDesc);
    if (getPreferences().getBoolean(""String_Node_Str"",false)) {
      activity.getWindow().setNavigationBarColor(darkenColor(color,0.85f));
    }
 else {
      int black=activity.getResources().getColor(android.R.color.black);
      activity.getWindow().setNavigationBarColor(black);
    }
  }
}",0.995162404975812
97681,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  NavigationView mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    navigate(mSelectedId);
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerLayout.setStatusBarBackgroundColor(getResources().getColor(R.color.colorPrimaryDark));
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    navigate(mSelectedId);
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}",0.9844402277039848
97682,"private void notifyDataSetChanged(){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (mAdapter != null) {
synchronized (mAdapter) {
          mAdapter.notifyDataSetChanged();
        }
      }
    }
  }
);
}","private void notifyDataSetChanged(){
  View parentLayout=findViewById(R.id.content_frame);
  String frameworkUpdateVersion=mRepoLoader.getFrameworkUpdateVersion();
  boolean moduleUpdateAvailable=mRepoLoader.hasModuleUpdates();
  Fragment currentFragment=getSupportFragmentManager().findFragmentById(R.id.content_frame);
  if (currentFragment instanceof DownloadDetailsFragment) {
    if (frameworkUpdateVersion != null) {
      Snackbar.make(parentLayout,R.string.welcome_framework_update_available + ""String_Node_Str"" + String.valueOf(frameworkUpdateVersion),Snackbar.LENGTH_LONG).show();
    }
  }
  if (moduleUpdateAvailable) {
    Snackbar.make(parentLayout,R.string.modules_updates_available,Snackbar.LENGTH_LONG).setAction(""String_Node_Str"",new View.OnClickListener(){
      @Override public void onClick(      View view){
        mSelectedId=mNavigationView.getMenu().getItem(2).getItemId();
        mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
        navigate(mSelectedId);
      }
    }
).show();
  }
}",0.1831097079715864
97683,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerLayout.setStatusBarBackgroundColor(XposedApp.getColor(this));
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    navigate(mSelectedId);
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ThemeUtil.setTheme(this);
  setContentView(R.layout.activity_welcome);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  Toolbar mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  mNavigationView=(NavigationView)findViewById(R.id.navigation_view);
  mNavigationView.setNavigationItemSelectedListener(this);
  ActionBarDrawerToggle mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  mSelectedId=mNavigationView.getMenu().getItem(prefs.getInt(""String_Node_Str"",0)).getItemId();
  mSelectedId=savedInstanceState == null ? mSelectedId : savedInstanceState.getInt(SELECTED_ITEM_ID);
  mNavigationView.getMenu().findItem(mSelectedId).setChecked(true);
  if (savedInstanceState == null) {
    navigate(mSelectedId);
  }
  mRepoLoader=RepoLoader.getInstance();
  ModuleUtil.getInstance().addListener(this);
  mRepoLoader.addListener(this,false);
  notifyDataSetChanged();
}",0.9725338491295938
97684,"/** 
 * @author PeterCxy https://github.com/PeterCxy/Lolistat/blob/aide/app/src/main/java/info/papdt/lolistat/support/Utility.java
 */
private static int darkenColor(int color,float factor){
  float[] hsv=new float[3];
  Color.colorToHSV(color,hsv);
  hsv[2]*=factor;
  return Color.HSVToColor(hsv);
}","/** 
 * @author PeterCxy https://github.com/PeterCxy/Lolistat/blob/aide/app/src/main/java/info/papdt/lolistat/support/Utility.java
 */
public static int darkenColor(int color,float factor){
  float[] hsv=new float[3];
  Color.colorToHSV(color,hsv);
  hsv[2]*=factor;
  return Color.HSVToColor(hsv);
}",0.9816971713810316
97685,"public static void setColors(ActionBar actionBar,Object value,Activity activity){
  int color=(int)value;
  actionBar.setBackgroundDrawable(new ColorDrawable(color));
  if (Build.VERSION.SDK_INT >= 21) {
    activity.getWindow().setStatusBarColor(darkenColor(color,0.85f));
    ActivityManager.TaskDescription tDesc=new ActivityManager.TaskDescription(activity.getString(R.string.app_name),drawableToBitmap(activity.getDrawable(R.mipmap.ic_launcher)),color);
    activity.setTaskDescription(tDesc);
    if (getPreferences().getBoolean(""String_Node_Str"",true)) {
      activity.getWindow().setNavigationBarColor(darkenColor(color,0.85f));
    }
 else {
      int black=activity.getResources().getColor(android.R.color.black);
      activity.getWindow().setNavigationBarColor(black);
    }
  }
}","public static void setColors(ActionBar actionBar,Object value,Activity activity){
  int color=(int)value;
  actionBar.setBackgroundDrawable(new ColorDrawable(color));
  if (Build.VERSION.SDK_INT >= 21) {
    ActivityManager.TaskDescription tDesc=new ActivityManager.TaskDescription(activity.getString(R.string.app_name),drawableToBitmap(activity.getDrawable(R.mipmap.ic_launcher)),color);
    activity.setTaskDescription(tDesc);
    if (getPreferences().getBoolean(""String_Node_Str"",true)) {
      activity.getWindow().setNavigationBarColor(darkenColor(color,0.85f));
    }
 else {
      int black=activity.getResources().getColor(android.R.color.black);
      activity.getWindow().setNavigationBarColor(black);
    }
  }
}",0.558047493403694
97686,"@Override protected void onResume(){
  super.onResume();
  XposedApp.setColors(getSupportActionBar(),XposedApp.getColor(this),this);
  ThemeUtil.reloadTheme(this);
  if (leftActivityWithSlideAnim)   NavUtil.setTransitionSlideLeave(this);
  leftActivityWithSlideAnim=false;
}","@Override protected void onResume(){
  super.onResume();
  XposedApp.setColors(getSupportActionBar(),getColor(this),this);
  ThemeUtil.reloadTheme(this);
  if (leftActivityWithSlideAnim)   NavUtil.setTransitionSlideLeave(this);
  leftActivityWithSlideAnim=false;
}",0.9814126394052044
97687,"/** 
 * Creates a matcher for   {@link Iterable}s that matches when a single pass over the examined   {@link Iterable} yields a series of items, that contains items satisfying the correspondingmatcher in the specified list of matchers, in the same relative order. <p/> For example: <pre>assertThat(Arrays.asList(""a"", ""b"", ""c"", ""d"", ""e""), contains(Arrays.asList(equalTo(""b""), equalTo(""d""))))</pre>
 * @param itemMatchers a list of matchers, each of which must be satisfied by the items provided by an examined  {@link Iterable} in the same relative order
 */
@Factory public static <E>Matcher<Iterable<? extends E>> containsInRelativeOrder(List<Matcher<? super E>> itemMatchers){
  return new IsIterableContainingInRelativeOrder<E>(itemMatchers);
}","/** 
 * Creates a matcher for   {@link Iterable}s that matches when a single pass over the examined   {@link Iterable} yields a series of items, that contains items satisfying the correspondingmatcher in the specified list of matchers, in the same relative order. For example: <pre>assertThat(Arrays.asList(""a"", ""b"", ""c"", ""d"", ""e""), contains(Arrays.asList(equalTo(""b""), equalTo(""d""))))</pre>
 * @param itemMatchers a list of matchers, each of which must be satisfied by the items provided by an examined  {@link Iterable} in the same relative order
 */
@Factory public static <E>Matcher<Iterable<? extends E>> containsInRelativeOrder(List<Matcher<? super E>> itemMatchers){
  return new IsIterableContainingInRelativeOrder<E>(itemMatchers);
}",0.9966420416386836
97688,"@Override public boolean matchesSafely(Iterable<T> collection,Description mismatchDescription){
  for (  T t : collection) {
    if (!matcher.matches(t)) {
      mismatchDescription.appendText(""String_Node_Str"");
      matcher.describeMismatch(t,mismatchDescription);
      return false;
    }
  }
  return true;
}","@Override public boolean matchesSafely(Iterable<? extends T> collection,Description mismatchDescription){
  for (  T t : collection) {
    if (!matcher.matches(t)) {
      mismatchDescription.appendText(""String_Node_Str"");
      matcher.describeMismatch(t,mismatchDescription);
      return false;
    }
  }
  return true;
}",0.9843260188087776
97689,"/** 
 * Creates a matcher for   {@link Iterable}s that only matches when a single pass over the examined   {@link Iterable} yields items that are all matched by the specified<code>itemMatcher</code>. <p/> For example: <pre>assertThat(Arrays.asList(""bar"", ""baz""), everyItem(startsWith(""ba"")))</pre>
 * @param itemMatcher the matcher to apply to every item provided by the examined  {@link Iterable}
 */
@Factory public static <U>Matcher<Iterable<U>> everyItem(final Matcher<U> itemMatcher){
  return new Every<U>(itemMatcher);
}","/** 
 * Creates a matcher for   {@link Iterable}s that only matches when a single pass over the examined   {@link Iterable} yields items that are all matched by the specified<code>itemMatcher</code>. <p/> For example: <pre>assertThat(Arrays.asList(""bar"", ""baz""), everyItem(startsWith(""ba"")))</pre>
 * @param itemMatcher the matcher to apply to every item provided by the examined  {@link Iterable}
 */
@Factory public static <U>Matcher<Iterable<? extends U>> everyItem(final Matcher<U> itemMatcher){
  return new Every<U>(itemMatcher);
}",0.9906015037593984
97690,"/** 
 * Attempts to locate the source code for a specific method, by cross-referencing the signature returned by reflection with the list of methods parsed by QDox.
 */
private JavaMethod findMethodInSource(FactoryMethod factoryMethod){
  List<FactoryMethod.Parameter> params=factoryMethod.getParameters();
  Type[] types=new Type[params.size()];
  for (int i=0; i < types.length; i++) {
    String type=params.get(i).getType();
    type=GENERIC_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    type=VARARGS_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    types[i]=new Type(type);
  }
  JavaMethod[] methods=classSource.getMethodsBySignature(factoryMethod.getName(),types,false);
  return methods.length == 1 ? methods[0] : null;
}","/** 
 * Attempts to locate the source code for a specific method, by cross-referencing the signature returned by reflection with the list of methods parsed by QDox.
 */
private JavaMethod findMethodInSource(FactoryMethod factoryMethod){
  List<FactoryMethod.Parameter> params=factoryMethod.getParameters();
  Type[] types=new Type[params.size()];
  boolean varArgs=false;
  for (int i=0; i < types.length; i++) {
    String type=params.get(i).getType();
    varArgs=VARARGS_REGEX.matcher(type).find();
    type=GENERIC_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    type=VARARGS_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    types[i]=new Type(type);
  }
  JavaMethod[] methods=classSource.getMethodsBySignature(factoryMethod.getName(),types,false,varArgs);
  return methods.length == 1 ? methods[0] : null;
}",0.948374760994264
97691,"public void testMatchesItemsInOrder(){
  assertMatches(""String_Node_Str"",arrayContainingInAnyOrder(1,2,3),new Integer[]{1,2,3});
  assertMatches(""String_Node_Str"",arrayContainingInAnyOrder(1),new Integer[]{1});
}","public void testMatchesItemsInOrder(){
  assertMatches(""String_Node_Str"",arrayContaining(1,2,3),new Integer[]{1,2,3});
  assertMatches(""String_Node_Str"",arrayContaining(1),new Integer[]{1});
}",0.9504950495049505
97692,"/** 
 * @see Matcher#_dont_implement_Matcher___instead_extend_BaseMatcher_()
 */
public final void _dont_implement_Matcher___instead_extend_BaseMatcher_(){
}","/** 
 * @see Matcher#_dont_implement_Matcher___instead_extend_BaseMatcher_()
 */
@Deprecated public final void _dont_implement_Matcher___instead_extend_BaseMatcher_(){
}",0.9631901840490796
97693,"@Override public void describeMismatchSafely(T item,Description mismatchDescription){
  mismatchDescription.appendValue(value).appendText(""String_Node_Str"").appendText(comparison(value.compareTo(item))).appendText(""String_Node_Str"").appendValue(item);
}","@Override public void describeMismatchSafely(T actual,Description mismatchDescription){
  mismatchDescription.appendValue(expected).appendText(""String_Node_Str"").appendText(comparison(actual.compareTo(expected))).appendText(""String_Node_Str"").appendValue(actual);
}",0.8494208494208494
97694,"private OrderingComparison(T value,int minCompare,int maxCompare){
  this.value=value;
  this.minCompare=minCompare;
  this.maxCompare=maxCompare;
}","private OrderingComparison(T expected,int minCompare,int maxCompare){
  this.expected=expected;
  this.minCompare=minCompare;
  this.maxCompare=maxCompare;
}",0.8918032786885246
97695,"private String comparison(int compare){
  if (compare > 0) {
    return ""String_Node_Str"";
  }
 else   if (compare == 0) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","private String comparison(int compare){
  if (compare == EQUAL) {
    return ""String_Node_Str"";
  }
 else   if (compare > EQUAL) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.946078431372549
97696,"@Override public boolean matchesSafely(T other){
  int compare=Integer.signum(value.compareTo(other));
  return minCompare <= compare && compare <= maxCompare;
}","@Override public boolean matchesSafely(T actual){
  int compare=Integer.signum(actual.compareTo(expected));
  return minCompare <= compare && compare <= maxCompare;
}",0.9235474006116208
97697,"/** 
 * Is value < expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> lessThan(T value){
  return new OrderingComparison<T>(value,1,1);
}","/** 
 * Is value < expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> lessThan(T value){
  return new OrderingComparison<T>(value,LESS_THAN,LESS_THAN);
}",0.9428571428571428
97698,"public void describeTo(Description description){
  description.appendText(""String_Node_Str"").appendText(comparison(minCompare));
  if (minCompare != maxCompare) {
    description.appendText(""String_Node_Str"").appendText(comparison(maxCompare));
  }
  description.appendText(""String_Node_Str"").appendValue(value);
}","public void describeTo(Description description){
  description.appendText(""String_Node_Str"").appendText(comparison(minCompare));
  if (minCompare != maxCompare) {
    description.appendText(""String_Node_Str"").appendText(comparison(maxCompare));
  }
  description.appendText(""String_Node_Str"").appendValue(expected);
}",0.9793977812995246
97699,"/** 
 * Is value = expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> comparesEqualTo(T value){
  return new OrderingComparison<T>(value,0,0);
}","/** 
 * Is value = expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> comparesEqualTo(T value){
  return new OrderingComparison<T>(value,EQUAL,EQUAL);
}",0.9662921348314608
97700,"/** 
 * Is value >= expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> greaterThanOrEqualTo(T value){
  return new OrderingComparison<T>(value,-1,0);
}","/** 
 * Is value >= expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> greaterThanOrEqualTo(T value){
  return new OrderingComparison<T>(value,EQUAL,GREATER_THAN);
}",0.946808510638298
97701,"/** 
 * Is value <= expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> lessThanOrEqualTo(T value){
  return new OrderingComparison<T>(value,0,1);
}","/** 
 * Is value <= expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> lessThanOrEqualTo(T value){
  return new OrderingComparison<T>(value,LESS_THAN,EQUAL);
}",0.9562841530054644
97702,"/** 
 * Is value > expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> greaterThan(T value){
  return new OrderingComparison<T>(value,-1,-1);
}","/** 
 * Is value > expected?
 */
@Factory public static <T extends Comparable<T>>Matcher<? super T> greaterThan(T value){
  return new OrderingComparison<T>(value,GREATER_THAN,GREATER_THAN);
}",0.9230769230769232
97703,"public void testAllowsForInclusiveComparisons(){
  assertThat(1,lessThanOrEqualTo(1));
  assertThat(1,greaterThanOrEqualTo(1));
}","public void testAllowsForInclusiveComparisons(){
  assertThat(""String_Node_Str"",1,lessThanOrEqualTo(1));
  assertThat(""String_Node_Str"",1,greaterThanOrEqualTo(1));
}",0.8775510204081632
97704,"@Override public void describeMismatchSafely(T actual,Description mismatchDescription){
  mismatchDescription.appendValue(expected).appendText(""String_Node_Str"").appendText(comparison(actual.compareTo(expected))).appendText(""String_Node_Str"").appendValue(actual);
}","@Override public void describeMismatchSafely(T actual,Description mismatchDescription){
  mismatchDescription.appendValue(actual).appendText(""String_Node_Str"").appendText(comparison(actual.compareTo(expected))).appendText(""String_Node_Str"").appendValue(expected);
}",0.9471698113207548
97705,"/** 
 * This is a shortcut to the frequently used is(instanceOf(SomeClass.class)). For example:  assertThat(cheese, is(instanceOf(Cheddar.class))) vs.  assertThat(cheese, is(Cheddar.class))
 */
@Factory public static Matcher<Object> is(Class<?> type){
  return is(instanceOf(type));
}","/** 
 * This is a shortcut to the frequently used is(instanceOf(SomeClass.class)). For example:  assertThat(cheese, is(instanceOf(Cheddar.class))) vs.  assertThat(cheese, is(Cheddar.class))
 */
@Factory public static <T>Matcher<? super T> is(Class<T> type){
  return is(instanceOf(type));
}",0.9303135888501742
97706,"/** 
 * Is the value an instance of a particular type?
 */
@Factory public static Matcher<Object> instanceOf(Class<?> type){
  return new IsInstanceOf(type);
}","/** 
 * Is the value an instance of a particular type?
 */
@SuppressWarnings(""String_Node_Str"") @Factory public static <T>Matcher<T> instanceOf(Class<T> type){
  return (Matcher<T>)new IsInstanceOf(type);
}",0.8328767123287671
97707,"/** 
 * Attempts to locate the source code for a specific method, by cross-referencing the signature returned by reflection with the list of methods parsed by QDox.
 */
private JavaMethod findMethodInSource(FactoryMethod factoryMethod){
  List<FactoryMethod.Parameter> params=factoryMethod.getParameters();
  Type[] types=new Type[params.size()];
  for (int i=0; i < types.length; i++) {
    String type=params.get(i).getType();
    type=GENERIC_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    type=VARARGS_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    types[i]=new Type(type);
  }
  JavaMethod[] methods=classSource.getMethodsBySignature(factoryMethod.getName(),types,false);
  if (methods.length == 1) {
    return methods[0];
  }
 else {
    return null;
  }
}","/** 
 * Attempts to locate the source code for a specific method, by cross-referencing the signature returned by reflection with the list of methods parsed by QDox.
 */
private JavaMethod findMethodInSource(FactoryMethod factoryMethod){
  List<FactoryMethod.Parameter> params=factoryMethod.getParameters();
  Type[] types=new Type[params.size()];
  for (int i=0; i < types.length; i++) {
    String type=params.get(i).getType();
    type=GENERIC_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    type=VARARGS_REGEX.matcher(type).replaceAll(""String_Node_Str"");
    types[i]=new Type(type);
  }
  JavaMethod[] methods=classSource.getMethodsBySignature(factoryMethod.getName(),types,false);
  return methods.length == 1 ? methods[0] : null;
}",0.953381483913329
97708,"/** 
 * Get String representation of Type (e.g. java.lang.String or Map&lt;Stuff,? extends Cheese&gt;). <p/> Annoyingly this method wouldn't be needed if java.lang.reflect.Type.toString() behaved consistently across implementations. Rock on Liskov.
 */
private String typeToString(Type type){
  if (type instanceof Class<?>) {
    Class<?> cls=(Class<?>)type;
    if (cls.isArray()) {
      return cls.getComponentType().getName() + ""String_Node_Str"";
    }
 else {
      return cls.getName();
    }
  }
 else {
    return type.toString();
  }
}","private static String typeToString(Type type){
  return type instanceof Class<?> ? classToString((Class<?>)type) : type.toString();
}",0.3185840707964602
97709,"public void load(InputSource inputSource) throws ParserConfigurationException, SAXException, IOException {
  SAXParser saxParser=saxParserFactory.newSAXParser();
  saxParser.parse(inputSource,new DefaultHandler(){
    public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      if (localName.equals(""String_Node_Str"")) {
        String className=attributes.getValue(""String_Node_Str"");
        try {
          addClass(className);
        }
 catch (        ClassNotFoundException e) {
          throw new SAXException(""String_Node_Str"" + className);
        }
      }
    }
  }
);
}","public void load(InputSource inputSource) throws ParserConfigurationException, SAXException, IOException {
  SAXParser saxParser=saxParserFactory.newSAXParser();
  saxParser.parse(inputSource,new DefaultHandler(){
    @Override public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {
      if (localName.equals(""String_Node_Str"")) {
        String className=attributes.getValue(""String_Node_Str"");
        try {
          addClass(className);
        }
 catch (        ClassNotFoundException e) {
          throw new SAXException(""String_Node_Str"" + className);
        }
      }
    }
  }
);
}",0.9924242424242424
97710,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (localName.equals(""String_Node_Str"")) {
    String className=attributes.getValue(""String_Node_Str"");
    try {
      addClass(className);
    }
 catch (    ClassNotFoundException e) {
      throw new SAXException(""String_Node_Str"" + className);
    }
  }
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (localName.equals(""String_Node_Str"")) {
    String className=attributes.getValue(""String_Node_Str"");
    try {
      addClass(className);
    }
 catch (    ClassNotFoundException e) {
      throw new SAXException(""String_Node_Str"" + className);
    }
  }
}",0.986737400530504
97711,"@SuppressWarnings({""String_Node_Str""}) public boolean matches(Object argument){
  return hamcrestMatcher.matches(argument);
}","public boolean matches(Object argument){
  return hamcrestMatcher.matches(argument);
}",0.8151658767772512
97712,"public boolean matchesSafely(T[] array){
  for (  T item : array) {
    if (elementMatcher.matches(item)) {
      return true;
    }
  }
  return false;
}","@Override public boolean matchesSafely(T[] array){
  for (  T item : array) {
    if (elementMatcher.matches(item)) {
      return true;
    }
  }
  return false;
}",0.9685534591194968
97713,"protected Matcher<?> createMatcher(){
  return hasProperty(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return hasProperty(""String_Node_Str"");
}",0.9411764705882352
97714,"protected Matcher<?> createMatcher(){
  return hasItemInArray(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return hasItemInArray(""String_Node_Str"");
}",0.9431818181818182
97715,"protected Matcher<?> createMatcher(){
  return array(equalTo(""String_Node_Str""));
}","@Override protected Matcher<?> createMatcher(){
  return array(equalTo(""String_Node_Str""));
}",0.9431818181818182
97716,"public void testMismatchDescriptionDescribesFirstFailingMatch(){
  assertMismatchDescription(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")),""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") public void testMismatchDescriptionDescribesFirstFailingMatch(){
  assertMismatchDescription(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")),""String_Node_Str"");
}",0.9125295508274232
97717,"public void testEvaluatesToTheTheLogicalConjunctionOfTwoOtherMatchers(){
  assertThat(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}","@SuppressWarnings(""String_Node_Str"") public void testEvaluatesToTheTheLogicalConjunctionOfTwoOtherMatchers(){
  assertThat(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}",0.9617373319544984
97718,"public void testHasAReadableDescription(){
  assertDescription(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
}","@SuppressWarnings(""String_Node_Str"") public void testHasAReadableDescription(){
  assertDescription(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
}",0.9028871391076116
97719,"public void testEvaluatesToTheTheLogicalConjunctionOfManyOtherMatchers(){
  assertThat(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}","@SuppressWarnings(""String_Node_Str"") public void testEvaluatesToTheTheLogicalConjunctionOfManyOtherMatchers(){
  assertThat(""String_Node_Str"",allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(allOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}",0.9587513935340022
97720,"public void testEvaluatesToTheTheLogicalDisjunctionOfTwoOtherMatchers(){
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}","@SuppressWarnings(""String_Node_Str"") public void testEvaluatesToTheTheLogicalDisjunctionOfTwoOtherMatchers(){
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}",0.9609292502639916
97721,"public void testEvaluatesToTheTheLogicalDisjunctionOfManyOtherMatchers(){
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}","@SuppressWarnings(""String_Node_Str"") public void testEvaluatesToTheTheLogicalDisjunctionOfManyOtherMatchers(){
  assertThat(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
  assertThat(""String_Node_Str"",not(anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str""))));
}",0.9587513935340022
97722,"public void testHasAReadableDescription(){
  assertDescription(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
}","@SuppressWarnings(""String_Node_Str"") public void testHasAReadableDescription(){
  assertDescription(""String_Node_Str"",anyOf(equalTo(""String_Node_Str""),equalTo(""String_Node_Str""),equalTo(""String_Node_Str"")));
}",0.9028871391076116
97723,"protected Matcher<?> createMatcher(){
  return anything();
}","@Override protected Matcher<?> createMatcher(){
  return anything();
}",0.9230769230769232
97724,"protected Matcher<?> createMatcher(){
  return equalTo(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return equalTo(""String_Node_Str"");
}",0.9382716049382716
97725,"public boolean equals(Object obj){
  return false;
}","@Override public boolean equals(Object obj){
  return false;
}",0.912280701754386
97726,"public void testIncludesTheResultOfCallingToStringOnItsArgumentInTheDescription(){
  final String argumentDescription=""String_Node_Str"";
  Object argument=new Object(){
    public String toString(){
      return argumentDescription;
    }
  }
;
  assertDescription(""String_Node_Str"" + argumentDescription + ""String_Node_Str"",equalTo(argument));
}","public void testIncludesTheResultOfCallingToStringOnItsArgumentInTheDescription(){
  final String argumentDescription=""String_Node_Str"";
  Object argument=new Object(){
    @Override public String toString(){
      return argumentDescription;
    }
  }
;
  assertDescription(""String_Node_Str"" + argumentDescription + ""String_Node_Str"",equalTo(argument));
}",0.9857549857549858
97727,"public String toString(){
  return argumentDescription;
}","@Override public String toString(){
  return argumentDescription;
}",0.9193548387096774
97728,"public void testHonoursIsEqualImplementationEvenWithNullValues(){
  Object alwaysEqual=new Object(){
    public boolean equals(    Object obj){
      return true;
    }
  }
;
  Object neverEqual=new Object(){
    public boolean equals(    Object obj){
      return false;
    }
  }
;
  assertThat(alwaysEqual,equalTo(null));
  assertThat(neverEqual,not(equalTo(null)));
}","public void testHonoursIsEqualImplementationEvenWithNullValues(){
  Object alwaysEqual=new Object(){
    @Override public boolean equals(    Object obj){
      return true;
    }
  }
;
  Object neverEqual=new Object(){
    @Override public boolean equals(    Object obj){
      return false;
    }
  }
;
  assertThat(alwaysEqual,equalTo(null));
  assertThat(neverEqual,not(equalTo(null)));
}",0.973753280839895
97729,"protected Matcher<?> createMatcher(){
  return not(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return not(""String_Node_Str"");
}",0.935064935064935
97730,"protected Matcher<?> createMatcher(){
  return nullValue();
}","@Override protected Matcher<?> createMatcher(){
  return nullValue();
}",0.9242424242424242
97731,"protected Matcher<?> createMatcher(){
  return sameInstance(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return sameInstance(""String_Node_Str"");
}",0.9418604651162792
97732,"protected Matcher<?> createMatcher(){
  return is(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return is(""String_Node_Str"");
}",0.9342105263157896
97733,"public void testProvidesConvenientShortcutForIsInstanceOf(){
  assertMatches(""String_Node_Str"",is(String.class),""String_Node_Str"");
  assertDoesNotMatch(""String_Node_Str"",is(Integer.class),""String_Node_Str"");
  assertDoesNotMatch(""String_Node_Str"",is(Integer.class),null);
}","public void testProvidesConvenientShortcutForIsInstanceOf(){
  assertTrue(""String_Node_Str"",is(String.class).matches(""String_Node_Str""));
  assertFalse(""String_Node_Str"",is(Integer.class).matches(new Object()));
  assertFalse(""String_Node_Str"",is(Integer.class).matches(null));
}",0.5641952983725136
97734,"public boolean equals(Object obj){
  return obj instanceof SampleBaseClass && value.equals(((SampleBaseClass)obj).value);
}","@Override public boolean equals(Object obj){
  return obj instanceof SampleBaseClass && value.equals(((SampleBaseClass)obj).value);
}",0.9609375
97735,"public String toString(){
  return value;
}","@Override public String toString(){
  return value;
}",0.8958333333333334
97736,"protected void setUp() throws Exception {
  super.setUp();
  factoryWriter=new EasyMock2FactoryWriter(output,""String_Node_Str"",""String_Node_Str"");
}","@Override protected void setUp() throws Exception {
  super.setUp();
  factoryWriter=new EasyMock2FactoryWriter(output,""String_Node_Str"",""String_Node_Str"");
}",0.9673202614379084
97737,"protected Matcher<?> createMatcher(){
  double irrelevant=0.1;
  return closeTo(irrelevant,irrelevant);
}","@Override protected Matcher<?> createMatcher(){
  double irrelevant=0.1;
  return closeTo(irrelevant,irrelevant);
}",0.9545454545454546
97738,"protected Matcher<?> createMatcher(){
  return typeCompatibleWith(BaseClass.class);
}","@Override protected Matcher<?> createMatcher(){
  return typeCompatibleWith(BaseClass.class);
}",0.9444444444444444
97739,"protected Matcher<?> createMatcher(){
  return eventFrom(null);
}","@Override protected Matcher<?> createMatcher(){
  return eventFrom(null);
}",0.9285714285714286
97740,"protected Matcher<?> createMatcher(){
  return equalToIgnoringCase(""String_Node_Str"");
}","@Override protected Matcher<?> createMatcher(){
  return equalToIgnoringCase(""String_Node_Str"");
}",0.946236559139785
97741,"protected Matcher<?> createMatcher(){
  return matcher;
}","@Override protected Matcher<?> createMatcher(){
  return matcher;
}",0.9193548387096774
97742,"protected Matcher<?> createMatcher(){
  return m;
}","@Override protected Matcher<?> createMatcher(){
  return m;
}",0.9107142857142856
97743,"protected Matcher<?> createMatcher(){
  return stringContains;
}","@Override protected Matcher<?> createMatcher(){
  return stringContains;
}",0.927536231884058
97744,"protected Matcher<?> createMatcher(){
  return stringEndsWith;
}","@Override protected Matcher<?> createMatcher(){
  return stringEndsWith;
}",0.927536231884058
97745,"protected Matcher<?> createMatcher(){
  return stringStartsWith;
}","@Override protected Matcher<?> createMatcher(){
  return stringStartsWith;
}",0.9295774647887324
97746,"private Document parse(String xml) throws Exception {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setNamespaceAware(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  return documentBuilder.parse(new ByteArrayInputStream(xml.getBytes()));
}","private static Document parse(String xml) throws Exception {
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setNamespaceAware(true);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  return documentBuilder.parse(new ByteArrayInputStream(xml.getBytes()));
}",0.9899280575539569
97747,"/** 
 * Evaluates to true only if ALL of the passed in matchers evaluate to true.
 */
@Factory public static <T>Matcher<T> allOf(Iterable<Matcher<? extends T>> matchers){
  return new AllOf<T>(matchers);
}","/** 
 * Evaluates to true only if ALL of the passed in matchers evaluate to true.
 */
@Factory public static <T>Matcher<T> allOf(Iterable<? extends Matcher<? extends T>> matchers){
  return new AllOf<T>(matchers);
}",0.9761904761904762
97748,"public AllOf(Iterable<Matcher<? extends T>> matchers){
  this.matchers=matchers;
}","public AllOf(Iterable<? extends Matcher<? extends T>> matchers){
  this.matchers=matchers;
}",0.942528735632184
97749,"public AnyOf(Iterable<Matcher<? extends T>> matchers){
  this.matchers=matchers;
}","public AnyOf(Iterable<? extends Matcher<? extends T>> matchers){
  this.matchers=matchers;
}",0.942528735632184
97750,"/** 
 * Evaluates to true if ANY of the passed in matchers evaluate to true.
 */
@Factory public static <T>Matcher<T> anyOf(Iterable<Matcher<? extends T>> matchers){
  return new AnyOf<T>(matchers);
}","/** 
 * Evaluates to true if ANY of the passed in matchers evaluate to true.
 */
@Factory public static <T>Matcher<T> anyOf(Iterable<? extends Matcher<? extends T>> matchers){
  return new AnyOf<T>(matchers);
}",0.975609756097561
97751,"@Factory public static Matcher<Node> hasXPath(String xPath,NamespaceContext namespaceContext){
  return hasXPath(xPath,namespaceContext,null);
}","@Factory public static Matcher<Node> hasXPath(String xPath,NamespaceContext namespaceContext){
  return new HasXPath(xPath,namespaceContext,null,XPathConstants.NODE);
}",0.9166666666666666
97752,"public boolean matchesSafely(Node item){
  try {
    String result=(String)compiledXPath.evaluate(item,XPathConstants.STRING);
    if (result == null) {
      return false;
    }
 else     if (valueMatcher == null) {
      return !result.equals(""String_Node_Str"");
    }
 else {
      return valueMatcher.matches(result);
    }
  }
 catch (  XPathExpressionException e) {
    return false;
  }
}","public boolean matchesSafely(Node item){
  try {
    Object result=compiledXPath.evaluate(item,evaluationMode);
    if (result == null) {
      return false;
    }
 else     if (valueMatcher == null) {
      return true;
    }
 else {
      return valueMatcher.matches(result);
    }
  }
 catch (  XPathExpressionException e) {
    return false;
  }
}",0.5924932975871313
97753,"/** 
 * @param xPathExpression XPath expression.
 * @param namespaceContext Resolves XML namespace prefixes in the XPath expression
 * @param valueMatcher Matcher to use at given XPath.May be null to specify that the XPath must exist but the value is irrelevant.
 */
public HasXPath(String xPathExpression,NamespaceContext namespaceContext,Matcher<String> valueMatcher){
  try {
    XPath xPath=XPathFactory.newInstance().newXPath();
    if (namespaceContext != null) {
      xPath.setNamespaceContext(namespaceContext);
    }
    compiledXPath=xPath.compile(xPathExpression);
    this.xpathString=xPathExpression;
    this.valueMatcher=valueMatcher;
  }
 catch (  XPathExpressionException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + xPathExpression,e);
  }
}","private HasXPath(String xPathExpression,NamespaceContext namespaceContext,Matcher<?> valueMatcher,QName mode){
  try {
    XPath xPath=XPathFactory.newInstance().newXPath();
    if (namespaceContext != null) {
      xPath.setNamespaceContext(namespaceContext);
    }
    compiledXPath=xPath.compile(xPathExpression);
    this.xpathString=xPathExpression;
    this.valueMatcher=valueMatcher;
    this.evaluationMode=mode;
  }
 catch (  XPathExpressionException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + xPathExpression,e);
  }
}",0.7545180722891566
97754,"public void testMatchesWithNamespace() throws Exception {
  NamespaceContext ns=new NamespaceContext(){
    public String getNamespaceURI(    String prefix){
      return (""String_Node_Str"".equals(prefix) ? ""String_Node_Str"" : null);
    }
    public String getPrefix(    String namespaceURI){
      return (""String_Node_Str"".equals(namespaceURI) ? ""String_Node_Str"" : null);
    }
    public Iterator<String> getPrefixes(    String namespaceURI){
      HashSet<String> prefixes=new HashSet<String>();
      String prefix=getPrefix(namespaceURI);
      if (prefix != null) {
        prefixes.add(prefix);
      }
      return prefixes.iterator();
    }
  }
;
  assertThat(xml,hasXPath(""String_Node_Str"",ns));
  assertThat(xml,hasXPath(""String_Node_Str"",ns,equalTo(""String_Node_Str"")));
  assertThat(xml,hasXPath(""String_Node_Str"",ns,equalTo(""String_Node_Str"")));
}","public void testMatchesWithNamespace() throws Exception {
  assertThat(xml,hasXPath(""String_Node_Str"",ns));
  assertThat(xml,hasXPath(""String_Node_Str"",ns,equalTo(""String_Node_Str"")));
  assertThat(xml,hasXPath(""String_Node_Str"",ns,equalTo(""String_Node_Str"")));
}",0.1419698314108252
97755,"protected void setUp() throws Exception {
  super.setUp();
  xml=parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
  xml=parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ns=new NamespaceContext(){
    public String getNamespaceURI(    String prefix){
      return (""String_Node_Str"".equals(prefix) ? ""String_Node_Str"" : null);
    }
    public String getPrefix(    String namespaceURI){
      return (""String_Node_Str"".equals(namespaceURI) ? ""String_Node_Str"" : null);
    }
    public Iterator<String> getPrefixes(    String namespaceURI){
      HashSet<String> prefixes=new HashSet<String>();
      String prefix=getPrefix(namespaceURI);
      if (prefix != null) {
        prefixes.add(prefix);
      }
      return prefixes.iterator();
    }
  }
;
}",0.378
97756,"public void testFailsIfNodeIsMissing() throws Exception {
  assertThat(xml,not(hasXPath(""String_Node_Str"",equalTo(""String_Node_Str""))));
  assertThat(xml,not(hasXPath(""String_Node_Str"")));
}","public void testFailsIfNodeIsMissing() throws Exception {
  assertThat(xml,not(hasXPath(""String_Node_Str"",ns,equalTo(""String_Node_Str""))));
  assertThat(xml,not(hasXPath(""String_Node_Str"",ns)));
}",0.9844559585492229
97757,"/** 
 * This is a shortcut to the frequently used is(instanceOf(SomeClass.class)). eg. assertThat(cheese, is(instanceOf(Cheddar.class))) vs  assertThat(cheese, is(Cheddar.class))
 */
@Factory public static Matcher<Object> is(Class type){
  return is(instanceOf(type));
}","/** 
 * This is a shortcut to the frequently used is(instanceOf(SomeClass.class)). eg. assertThat(cheese, is(instanceOf(Cheddar.class))) vs  assertThat(cheese, is(Cheddar.class))
 */
@Factory public static Matcher<Object> is(Class<?> type){
  return is(instanceOf(type));
}",0.994475138121547
97758,"public static List<Object> matchDecoder(Event e,Object instanceType,List<Decoder<? extends Object,?>> decoders,List<Object> decodedObjects){
  for (  Decoder d : decoders) {
    Class<?>[] typeArguments=TypeResolver.resolveArguments(d.getClass(),Decoder.class);
    if (instanceType != null && typeArguments.length > 0 && typeArguments[0].isAssignableFrom(instanceType.getClass())) {
      boolean replay=ReplayDecoder.class.isAssignableFrom(d.getClass());
      logger.trace(""String_Node_Str"",d,instanceType);
      Object decoded=null;
      try {
        decoded=d.decode(e,instanceType);
      }
 catch (      Exception ex) {
        logger.warn(""String_Node_Str"",ex);
      }
      if (decoded != null && Decoder.Decoded.class.isAssignableFrom(decoded.getClass())) {
        Decoder.Decoded<?> o=Decoder.Decoded.class.cast(decoded);
        if (o.action().equals(Decoder.Decoded.ACTION.ABORT)) {
          logger.trace(""String_Node_Str"",d,instanceType);
          decodedObjects.add(o);
          break;
        }
 else         if (o.decoded() != null) {
          decoded=o.decoded();
        }
      }
      if (replay && decoded != null && List.class.isAssignableFrom(decoded.getClass())) {
        List<Object> l=List.class.cast(decoded);
        if (l.isEmpty()) {
          continue;
        }
        List<Decoder<? extends Object,?>> nd=new ArrayList<Decoder<? extends Object,?>>();
        boolean add=false;
        for (        Decoder d2 : decoders) {
          if (d2.equals(d)) {
            add=true;
            continue;
          }
          if (add)           nd.add(d2);
        }
        if (nd.isEmpty()) {
          return l;
        }
        for (        Object m : l) {
          return matchDecoder(e,m,nd,decodedObjects);
        }
      }
 else       if (decoded != null) {
        logger.trace(""String_Node_Str"",d,instanceType);
        decodedObjects.add(decoded);
      }
    }
  }
  return decodedObjects;
}","public static List<Object> matchDecoder(Event e,Object instanceType,List<Decoder<? extends Object,?>> decoders,List<Object> decodedObjects){
  for (  Decoder d : decoders) {
    Class<?>[] typeArguments=TypeResolver.resolveArguments(d.getClass(),Decoder.class);
    if (instanceType != null && typeArguments.length > 0 && typeArguments[0].isAssignableFrom(instanceType.getClass())) {
      boolean replay=ReplayDecoder.class.isAssignableFrom(d.getClass());
      logger.trace(""String_Node_Str"",d,instanceType);
      Object decoded=null;
      try {
        decoded=d.decode(e,instanceType);
      }
 catch (      Exception ex) {
        logger.warn(""String_Node_Str"",ex);
      }
      if (decoded != null && Decoder.Decoded.class.isAssignableFrom(decoded.getClass())) {
        Decoder.Decoded<?> o=Decoder.Decoded.class.cast(decoded);
        if (o.action().equals(Decoder.Decoded.ACTION.ABORT)) {
          logger.trace(""String_Node_Str"",d,instanceType);
          decodedObjects.add(o);
          break;
        }
 else         if (o.decoded() != null) {
          decoded=o.decoded();
        }
      }
      if (replay && decoded != null && List.class.isAssignableFrom(decoded.getClass())) {
        List<Object> l=List.class.cast(decoded);
        if (l.isEmpty()) {
          continue;
        }
        List<Decoder<? extends Object,?>> nd=new ArrayList<Decoder<? extends Object,?>>();
        boolean add=false;
        for (        Decoder d2 : decoders) {
          if (d2.equals(d)) {
            add=true;
            continue;
          }
          if (add)           nd.add(d2);
        }
        if (nd.isEmpty()) {
          return l;
        }
        ArrayList<Object> list=new ArrayList<Object>();
        for (        Object m : l) {
          list.add(matchDecoder(e,m,nd,decodedObjects));
        }
        return list;
      }
 else       if (decoded != null) {
        logger.trace(""String_Node_Str"",d,instanceType);
        decodedObjects.add(decoded);
      }
    }
  }
  return decodedObjects;
}",0.9763224181360202
97759,"/** 
 * Set the   {@link Future}, which will unlock the   {@link Socket#fire} method once the connection has been fully established. \
 * @param {@link Future}
 */
void connectedFuture(Future f);","/** 
 * Set the   {@link Future}, which will unlock the   {@link Socket#fire} method once the connection has been fully established.
 * @param {@link Future}
 */
void connectedFuture(Future f);",0.9948453608247424
97760,"public AtmosphereSocketRuntime(WebSocketTransport webSocket,Options options,DefaultFuture rootFuture,List<FunctionWrapper> functions){
  super(webSocket,options,rootFuture,functions);
}","public AtmosphereSocketRuntime(Transport transport,Options options,DefaultFuture rootFuture,List<FunctionWrapper> functions){
  super(transport,options,rootFuture,functions);
}",0.8975069252077562
97761,"public SocketRuntime createRuntime(Options options,List<FunctionWrapper> functions){
  return new SocketRuntime(WebSocketTransport.class.cast(transportInUse),options,socketRuntime.future(),functions);
}","public SocketRuntime createRuntime(DefaultFuture future,Options options,List<FunctionWrapper> functions){
  return new SocketRuntime(transportInUse,options,future,functions);
}",0.8201058201058201
97762,"protected Socket connect(final RequestBuilder r,final List<Transport> transports,final long timeout,final TimeUnit tu) throws IOException {
  if (transports.size() > 0) {
    transportInUse=transports.get(0);
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
  socketRuntime=createRuntime();
  addFunction(timeout,tu);
  if (transportInUse.name().equals(Request.TRANSPORT.WEBSOCKET)) {
    r.setUrl(request.uri().replace(""String_Node_Str"",""String_Node_Str""));
    try {
      java.util.concurrent.Future<WebSocket> fw=options.runtime().prepareRequest(r.build()).execute((AsyncHandler<WebSocket>)transportInUse);
      fw.get(timeout,tu);
      socketRuntime=createRuntime(options,functions);
    }
 catch (    ExecutionException t) {
      Throwable e=t.getCause();
      if (TransportNotSupported.class.isAssignableFrom(e.getClass())) {
        return this;
      }
      transportInUse.close();
      closeRuntime(true);
      if (!transportInUse.errorHandled() && TimeoutException.class.isAssignableFrom(e.getClass())) {
        transportInUse.error(new IOException(""String_Node_Str"" + e.getMessage()));
      }
      return new VoidSocket();
    }
catch (    Throwable t) {
      transportInUse.onThrowable(t);
      return new VoidSocket();
    }
  }
 else {
    r.setUrl(request.uri().replace(""String_Node_Str"",""String_Node_Str""));
    transportInUse.future(options.runtime().prepareRequest(r.build()).execute((AsyncHandler<String>)transportInUse));
    try {
      if (options.waitBeforeUnlocking() > 0) {
        logger.info(""String_Node_Str"",options.waitBeforeUnlocking());
      }
      socketRuntime.future().get(options.waitBeforeUnlocking(),TimeUnit.MILLISECONDS);
      socketRuntime.future().done();
    }
 catch (    Throwable t) {
      logger.trace(""String_Node_Str"",t);
    }
    socketRuntime=createRuntime();
  }
  return this;
}","protected Socket connect(final RequestBuilder r,final List<Transport> transports,final long timeout,final TimeUnit tu) throws IOException {
  if (transports.size() > 0) {
    transportInUse=transports.get(0);
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
  DefaultFuture f=new DefaultFuture(this);
  socketRuntime=createRuntime(f,options,functions);
  transportInUse.connectedFuture(f);
  addFunction(timeout,tu);
  if (transportInUse.name().equals(Request.TRANSPORT.WEBSOCKET)) {
    r.setUrl(request.uri().replace(""String_Node_Str"",""String_Node_Str""));
    try {
      java.util.concurrent.Future<WebSocket> fw=options.runtime().prepareRequest(r.build()).execute((AsyncHandler<WebSocket>)transportInUse);
      fw.get(timeout,tu);
    }
 catch (    ExecutionException t) {
      Throwable e=t.getCause();
      if (TransportNotSupported.class.isAssignableFrom(e.getClass())) {
        return this;
      }
      transportInUse.close();
      closeRuntime(true);
      if (!transportInUse.errorHandled() && TimeoutException.class.isAssignableFrom(e.getClass())) {
        transportInUse.error(new IOException(""String_Node_Str"" + e.getMessage()));
      }
      return new VoidSocket();
    }
catch (    Throwable t) {
      transportInUse.onThrowable(t);
      return new VoidSocket();
    }
  }
 else {
    r.setUrl(request.uri().replace(""String_Node_Str"",""String_Node_Str""));
    transportInUse.future(options.runtime().prepareRequest(r.build()).execute((AsyncHandler<String>)transportInUse));
    try {
      if (options.waitBeforeUnlocking() > 0) {
        logger.info(""String_Node_Str"",options.waitBeforeUnlocking());
      }
      if (request.queryString().containsKey(""String_Node_Str"")) {
        f.get();
      }
 else {
        f.get(options.waitBeforeUnlocking(),TimeUnit.MILLISECONDS);
      }
    }
 catch (    Throwable t) {
      logger.trace(""String_Node_Str"",t);
    }
 finally {
      f.done();
    }
  }
  return this;
}",0.9020429544264011
97763,"public SocketRuntime(Options options,DefaultFuture rootFuture,List<FunctionWrapper> functions){
  this(null,options,rootFuture,functions);
}","public SocketRuntime(Transport transport,Options options,DefaultFuture rootFuture,List<FunctionWrapper> functions){
  this.transport=transport;
  this.options=options;
  this.rootFuture=rootFuture;
  this.functions=functions;
}",0.5722070844686649
97764,"public Future write(Request request,Object data) throws IOException {
  Object object=invokeEncoder(request.encoders(),data);
  if (webSocketTransport != null) {
    webSocketWrite(request,object,data);
  }
 else {
    try {
      Response r=httpWrite(request,object,data).get(rootFuture.time,rootFuture.tu);
      String m=r.getResponseBody();
      if (!m.isEmpty()) {
        TransportsUtil.invokeFunction(request.decoders(),functions,String.class,m,MESSAGE.name(),request.functionResolver());
      }
    }
 catch (    TimeoutException t) {
      logger.trace(""String_Node_Str"",t);
      rootFuture.te=t;
    }
catch (    Throwable t) {
      logger.error(""String_Node_Str"",t);
    }
  }
  return rootFuture.done();
}","public Future write(Request request,Object data) throws IOException {
  Object object=invokeEncoder(request.encoders(),data);
  if (WebSocketTransport.class.isAssignableFrom(transport.getClass())) {
    webSocketWrite(request,object,data);
  }
 else {
    try {
      Response r=httpWrite(request,object,data).get(rootFuture.time(),rootFuture.timeUnit());
      String m=r.getResponseBody();
      if (!m.isEmpty()) {
        TransportsUtil.invokeFunction(request.decoders(),functions,String.class,m,MESSAGE.name(),request.functionResolver());
      }
    }
 catch (    TimeoutException t) {
      logger.trace(""String_Node_Str"",t);
      rootFuture.timeoutException(t);
    }
catch (    Throwable t) {
      logger.error(""String_Node_Str"",t);
    }
  }
  return rootFuture.done();
}",0.9414893617021276
97765,"public void webSocketWrite(Request request,Object object,Object data) throws IOException {
  if (InputStream.class.isAssignableFrom(object.getClass())) {
    InputStream is=(InputStream)object;
    ByteArrayOutputStream bs=new ByteArrayOutputStream();
    byte[] buffer=new byte[8192];
    int n=0;
    while (-1 != (n=is.read(buffer))) {
      bs.write(buffer,0,n);
    }
    webSocketTransport.webSocket().sendMessage(bs.toByteArray());
  }
 else   if (Reader.class.isAssignableFrom(object.getClass())) {
    Reader is=(Reader)object;
    StringWriter bs=new StringWriter();
    char[] chars=new char[8192];
    int n=0;
    while (-1 != (n=is.read(chars))) {
      bs.write(chars,0,n);
    }
    webSocketTransport.webSocket().sendTextMessage(bs.getBuffer().toString());
  }
 else   if (String.class.isAssignableFrom(object.getClass())) {
    webSocketTransport.webSocket().sendTextMessage(object.toString());
  }
 else   if (byte[].class.isAssignableFrom(object.getClass())) {
    webSocketTransport.webSocket().sendMessage((byte[])object);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + data);
  }
}","public void webSocketWrite(Request request,Object object,Object data) throws IOException {
  WebSocketTransport webSocketTransport=WebSocketTransport.class.cast(transport);
  if (InputStream.class.isAssignableFrom(object.getClass())) {
    InputStream is=(InputStream)object;
    ByteArrayOutputStream bs=new ByteArrayOutputStream();
    byte[] buffer=new byte[8192];
    int n=0;
    while (-1 != (n=is.read(buffer))) {
      bs.write(buffer,0,n);
    }
    webSocketTransport.webSocket().sendMessage(bs.toByteArray());
  }
 else   if (Reader.class.isAssignableFrom(object.getClass())) {
    Reader is=(Reader)object;
    StringWriter bs=new StringWriter();
    char[] chars=new char[8192];
    int n=0;
    while (-1 != (n=is.read(chars))) {
      bs.write(chars,0,n);
    }
    webSocketTransport.webSocket().sendTextMessage(bs.getBuffer().toString());
  }
 else   if (String.class.isAssignableFrom(object.getClass())) {
    webSocketTransport.webSocket().sendTextMessage(object.toString());
  }
 else   if (byte[].class.isAssignableFrom(object.getClass())) {
    webSocketTransport.webSocket().sendMessage((byte[])object);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + data);
  }
}",0.96483704974271
97766,"public SerialSocketRuntime(Options options,DefaultFuture rootFuture,SerializedSocket serializedSocket,List<FunctionWrapper> functions){
  this(null,options,rootFuture,serializedSocket,functions);
}","public SerialSocketRuntime(Transport transport,Options options,DefaultFuture rootFuture,SerializedSocket serializedSocket,List<FunctionWrapper> functions){
  super(transport,options,rootFuture,functions);
  this.serializedSocket=serializedSocket;
}",0.6876404494382022
97767,"public Future write(Request request,Object data) throws IOException {
  if (webSocketTransport != null) {
    Object object=invokeEncoder(request.encoders(),data);
    webSocketWrite(request,object,data);
  }
 else {
    Object encodedPayload=invokeEncoder(request.encoders(),data);
    if (!(InputStream.class.isAssignableFrom(encodedPayload.getClass()) || Reader.class.isAssignableFrom(encodedPayload.getClass()) || String.class.isAssignableFrom(encodedPayload.getClass())|| byte[].class.isAssignableFrom(encodedPayload.getClass()))) {
      throw new IllegalStateException(""String_Node_Str"" + data);
    }
    if (serializedSocket.getSerializedFireStage() != null) {
      final SettableFuture<Response> future=SettableFuture.create();
      serializedSocket.getSerializedFireStage().enqueue(encodedPayload,future);
      return new Future(){
        @Override public Future fire(        Object data) throws IOException {
          return serializedSocket.fire(data);
        }
        @Override public Future done(){
          ListenableFuture.class.cast(future).done(null);
          return this;
        }
        @Override public boolean cancel(        boolean mayInterruptIfRunning){
          return future.cancel(mayInterruptIfRunning);
        }
        @Override public boolean isCancelled(){
          return future.isCancelled();
        }
        @Override public boolean isDone(){
          return future.isDone();
        }
        @Override public Socket get() throws InterruptedException, ExecutionException {
          future.get();
          return serializedSocket;
        }
        @Override public Socket get(        long timeout,        TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
          future.get(timeout,unit);
          return serializedSocket;
        }
      }
;
    }
 else {
      final ListenableFuture<Response> future=serializedSocket.directWrite(encodedPayload);
      return new Future(){
        @Override public Future fire(        Object data) throws IOException {
          return serializedSocket.fire(data);
        }
        @Override public Future done(){
          future.done(null);
          return this;
        }
        @Override public boolean cancel(        boolean mayInterruptIfRunning){
          return future.cancel(mayInterruptIfRunning);
        }
        @Override public boolean isCancelled(){
          return future.isCancelled();
        }
        @Override public boolean isDone(){
          return future.isDone();
        }
        @Override public Socket get() throws InterruptedException, ExecutionException {
          future.get();
          return serializedSocket;
        }
        @Override public Socket get(        long timeout,        TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
          future.get(timeout,unit);
          return serializedSocket;
        }
      }
;
    }
  }
  return rootFuture;
}","@Override public Future write(Request request,Object data) throws IOException {
  if (WebSocketTransport.class.isAssignableFrom(transport.getClass())) {
    Object object=invokeEncoder(request.encoders(),data);
    webSocketWrite(request,object,data);
  }
 else {
    Object encodedPayload=invokeEncoder(request.encoders(),data);
    if (!(InputStream.class.isAssignableFrom(encodedPayload.getClass()) || Reader.class.isAssignableFrom(encodedPayload.getClass()) || String.class.isAssignableFrom(encodedPayload.getClass())|| byte[].class.isAssignableFrom(encodedPayload.getClass()))) {
      throw new IllegalStateException(""String_Node_Str"" + data);
    }
    if (serializedSocket.getSerializedFireStage() != null) {
      final SettableFuture<Response> future=SettableFuture.create();
      serializedSocket.getSerializedFireStage().enqueue(encodedPayload,future);
      return new Future(){
        @Override public Future fire(        Object data) throws IOException {
          return serializedSocket.fire(data);
        }
        @Override public Future done(){
          ListenableFuture.class.cast(future).done(null);
          return this;
        }
        @Override public boolean cancel(        boolean mayInterruptIfRunning){
          return future.cancel(mayInterruptIfRunning);
        }
        @Override public boolean isCancelled(){
          return future.isCancelled();
        }
        @Override public boolean isDone(){
          return future.isDone();
        }
        @Override public Socket get() throws InterruptedException, ExecutionException {
          future.get();
          return serializedSocket;
        }
        @Override public Socket get(        long timeout,        TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
          future.get(timeout,unit);
          return serializedSocket;
        }
      }
;
    }
 else {
      final ListenableFuture<Response> future=serializedSocket.directWrite(encodedPayload);
      return new Future(){
        @Override public Future fire(        Object data) throws IOException {
          return serializedSocket.fire(data);
        }
        @Override public Future done(){
          future.done(null);
          return this;
        }
        @Override public boolean cancel(        boolean mayInterruptIfRunning){
          return future.cancel(mayInterruptIfRunning);
        }
        @Override public boolean isCancelled(){
          return future.isCancelled();
        }
        @Override public boolean isDone(){
          return future.isDone();
        }
        @Override public Socket get() throws InterruptedException, ExecutionException {
          future.get();
          return serializedSocket;
        }
        @Override public Socket get(        long timeout,        TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
          future.get(timeout,unit);
          return serializedSocket;
        }
      }
;
    }
  }
  return rootFuture;
}",0.989121338912134
97768,"@Override public SocketRuntime createRuntime(){
  return new SerialSocketRuntime(options,new DefaultFuture(this),this,functions);
}","@Override public SocketRuntime createRuntime(DefaultFuture future,Options options,List<FunctionWrapper> functions){
  return new SerialSocketRuntime(transportInUse,options,new DefaultFuture(this),this,functions);
}",0.7594202898550725
97769,"/** 
 * {@inheritDoc}
 */
@Override public STATE onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
  if (isBinary) {
    byte[] payload=bodyPart.getBodyPartBytes();
    if (payload[0] == 0x20) {
      if (!protocolReceived) {
        String m=new String(bodyPart.getBodyPartBytes(),charSet).trim();
        if (!m.isEmpty()) {
          TransportsUtil.invokeFunction(decoders,functions,payload.getClass(),payload,MESSAGE.name(),resolver);
          protocolReceived=true;
        }
      }
    }
 else {
      TransportsUtil.invokeFunction(decoders,functions,payload.getClass(),payload,MESSAGE.name(),resolver);
    }
  }
 else {
    String m=new String(bodyPart.getBodyPartBytes(),charSet).trim();
    if (!m.isEmpty()) {
      TransportsUtil.invokeFunction(decoders,functions,m.getClass(),m,MESSAGE.name(),resolver);
    }
  }
  return AsyncHandler.STATE.CONTINUE;
}","/** 
 * {@inheritDoc}
 */
@Override public STATE onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
  if (isBinary) {
    byte[] payload=bodyPart.getBodyPartBytes();
    if (protocolEnabled && !protocolReceived) {
      String m=new String(bodyPart.getBodyPartBytes(),charSet).trim();
      if (!m.isEmpty()) {
        TransportsUtil.invokeFunction(decoders,functions,payload.getClass(),payload,MESSAGE.name(),resolver);
        protocolReceived=true;
      }
      return AsyncHandler.STATE.CONTINUE;
    }
 else     if (whiteSpace(payload)) {
      logger.trace(""String_Node_Str"");
    }
 else {
      TransportsUtil.invokeFunction(decoders,functions,payload.getClass(),payload,MESSAGE.name(),resolver);
    }
  }
 else {
    String m=new String(bodyPart.getBodyPartBytes(),charSet).trim();
    if (!m.isEmpty()) {
      TransportsUtil.invokeFunction(decoders,functions,m.getClass(),m,MESSAGE.name(),resolver);
    }
  }
  if (connectdFuture != null)   connectdFuture.done();
  return AsyncHandler.STATE.CONTINUE;
}",0.4058272632674297
97770,"/** 
 * {@inheritDoc}
 */
@Override public AsyncHandler.STATE onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
  if (connectdFuture != null)   connectdFuture.done();
  TransportsUtil.invokeFunction(TRANSPORT,decoders,functions,Request.TRANSPORT.class,name(),TRANSPORT.name(),resolver);
  errorHandled.set(false);
  closed.set(false);
  Event newStatus=status.equals(Socket.STATUS.INIT) ? OPEN : REOPENED;
  TransportsUtil.invokeFunction(newStatus,decoders,functions,String.class,newStatus.name(),newStatus.name(),resolver);
  TransportsUtil.invokeFunction(MESSAGE,decoders,functions,Integer.class,new Integer(responseStatus.getStatusCode()),STATUS.name(),resolver);
  return AsyncHandler.STATE.CONTINUE;
}","/** 
 * {@inheritDoc}
 */
@Override public AsyncHandler.STATE onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
  TransportsUtil.invokeFunction(TRANSPORT,decoders,functions,Request.TRANSPORT.class,name(),TRANSPORT.name(),resolver);
  errorHandled.set(false);
  closed.set(false);
  Event newStatus=status.equals(Socket.STATUS.INIT) ? OPEN : REOPENED;
  TransportsUtil.invokeFunction(newStatus,decoders,functions,String.class,newStatus.name(),newStatus.name(),resolver);
  TransportsUtil.invokeFunction(MESSAGE,decoders,functions,Integer.class,new Integer(responseStatus.getStatusCode()),STATUS.name(),resolver);
  return AsyncHandler.STATE.CONTINUE;
}",0.9606862044317368
97771,"public StreamTransport(RequestBuilder requestBuilder,Options options,Request request,List<FunctionWrapper> functions){
  this.decoders=request.decoders();
  if (decoders.size() == 0) {
    decoders.add(new Decoder<String,Object>(){
      @Override public Object decode(      Event e,      String s){
        return s;
      }
    }
);
  }
  this.functions=functions;
  this.resolver=request.functionResolver();
  this.options=options;
  this.requestBuilder=requestBuilder;
  this.request=request;
  isBinary=request.headers().get(""String_Node_Str"") != null ? request.headers().get(""String_Node_Str"").contains(""String_Node_Str"") : false;
}","public StreamTransport(RequestBuilder requestBuilder,Options options,Request request,List<FunctionWrapper> functions){
  this.decoders=request.decoders();
  if (decoders.size() == 0) {
    decoders.add(new Decoder<String,Object>(){
      @Override public Object decode(      Event e,      String s){
        return s;
      }
    }
);
  }
  this.functions=functions;
  this.resolver=request.functionResolver();
  this.options=options;
  this.requestBuilder=requestBuilder;
  this.request=request;
  protocolEnabled=request.queryString().get(""String_Node_Str"") != null;
  isBinary=request.headers().get(""String_Node_Str"") != null ? request.headers().get(""String_Node_Str"").contains(""String_Node_Str"") : false;
}",0.8961424332344213
97772,"/** 
 * Build an   {@link Options}
 * @return {@link Options}
 */
public abstract Options build();","/** 
 * Build an   {@link Options}
 * @return {@link Options}
 */
public abstract U build();",0.9578947368421052
97773,"/** 
 * {@inheritDoc}
 */
@Override public AtmosphereRequest build(){
  if (trackMessageLength) {
    decoders().add(0,new TrackMessageSizeDecoder());
  }
  decoders().add(0,new Decoder<String,String>(){
    private AtomicBoolean protocolReceived=new AtomicBoolean();
    /** 
 * Handle the Atmosphere's Protocol.
 */
    @Override public String decode(    Event e,    String s){
      if (e.equals(Event.MESSAGE) && !protocolReceived.getAndSet(true)) {
        try {
          String[] proto=s.trim().split(""String_Node_Str"");
          List<String> l=new ArrayList<String>();
          l.add(proto[0]);
          queryString.put(""String_Node_Str"",l);
          l=new ArrayList<String>();
          l.add(proto[1]);
          queryString.put(""String_Node_Str"",l);
          s=null;
        }
 catch (        Exception ex) {
          logger.warn(""String_Node_Str"",s);
          logger.warn(""String_Node_Str"",e);
        }
      }
      return s;
    }
  }
);
  return new AtmosphereRequest(this);
}","/** 
 * {@inheritDoc}
 */
@Override public AtmosphereRequest build(){
  if (trackMessageLength) {
    decoders().add(0,new TrackMessageSizeDecoder());
  }
  decoders().add(0,new Decoder<String,String>(){
    private AtomicBoolean protocolReceived=new AtomicBoolean();
    /** 
 * Handle the Atmosphere's Protocol.
 */
    @Override public String decode(    Event e,    String s){
      if (e.equals(Event.MESSAGE) && !protocolReceived.getAndSet(true)) {
        try {
          String[] proto=s.trim().split(""String_Node_Str"");
          List<String> l=new ArrayList<String>();
          l.add(proto[0]);
          queryString.put(""String_Node_Str"",l);
          l=new ArrayList<String>();
          l.add(proto[1]);
          queryString.put(""String_Node_Str"",l);
          decoders.remove(this);
          s=null;
        }
 catch (        Exception ex) {
          logger.warn(""String_Node_Str"",s);
          logger.warn(""String_Node_Str"",e);
        }
      }
      return s;
    }
  }
);
  decoders().add(0,new Decoder<byte[],byte[]>(){
    private AtomicBoolean protocolReceived=new AtomicBoolean();
    /** 
 * Handle the Atmosphere's Protocol.
 */
    @Override public byte[] decode(    Event e,    byte[] b){
      if (e.equals(Event.MESSAGE) && !protocolReceived.getAndSet(true)) {
        try {
          String[] proto=new String(b,""String_Node_Str"").trim().split(""String_Node_Str"");
          List<String> l=new ArrayList<String>();
          l.add(proto[0]);
          queryString.put(""String_Node_Str"",l);
          l=new ArrayList<String>();
          l.add(proto[1]);
          queryString.put(""String_Node_Str"",l);
          decoders.remove(this);
          b=null;
        }
 catch (        Exception ex) {
          logger.warn(""String_Node_Str"",new String(b));
          logger.warn(""String_Node_Str"",e);
        }
      }
      return b;
    }
  }
);
  return new AtmosphereRequest(this);
}",0.6767433871521814
97774,"/** 
 * Handle the Atmosphere's Protocol.
 */
@Override public String decode(Event e,String s){
  if (e.equals(Event.MESSAGE) && !protocolReceived.getAndSet(true)) {
    try {
      String[] proto=s.trim().split(""String_Node_Str"");
      List<String> l=new ArrayList<String>();
      l.add(proto[0]);
      queryString.put(""String_Node_Str"",l);
      l=new ArrayList<String>();
      l.add(proto[1]);
      queryString.put(""String_Node_Str"",l);
      s=null;
    }
 catch (    Exception ex) {
      logger.warn(""String_Node_Str"",s);
      logger.warn(""String_Node_Str"",e);
    }
  }
  return s;
}","/** 
 * Handle the Atmosphere's Protocol.
 */
@Override public byte[] decode(Event e,byte[] b){
  if (e.equals(Event.MESSAGE) && !protocolReceived.getAndSet(true)) {
    try {
      String[] proto=new String(b,""String_Node_Str"").trim().split(""String_Node_Str"");
      List<String> l=new ArrayList<String>();
      l.add(proto[0]);
      queryString.put(""String_Node_Str"",l);
      l=new ArrayList<String>();
      l.add(proto[1]);
      queryString.put(""String_Node_Str"",l);
      decoders.remove(this);
      b=null;
    }
 catch (    Exception ex) {
      logger.warn(""String_Node_Str"",new String(b));
      logger.warn(""String_Node_Str"",e);
    }
  }
  return b;
}",0.889944576405384
97775,"private HttpResponse execute(URI uri,HttpRequestBase request) throws IOException, URISyntaxException {
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  HttpResponse response=httpClient.execute(adjustAddress(uri,request),localContext);
  if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
    EntityUtils.consumeQuietly(response.getEntity());
    throw new IllegalStateException(""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str"");
  }
  return response;
}","private HttpResponse execute(URI uri,HttpRequestBase request) throws IOException, URISyntaxException {
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  HttpResponse response=httpClient.execute(adjustAddress(uri,request),localContext);
  if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
    EntityUtils.toString(response.getEntity());
    throw new IllegalStateException(""String_Node_Str"" + response.getStatusLine().getStatusCode() + ""String_Node_Str"");
  }
  return response;
}",0.6686274509803921
97776,"public static void main(String args[]){
  String password=""String_Node_Str"";
  String username=""String_Node_Str"";
  System.out.println(Calendar.getInstance().getTime());
  GoogleSkyJamAPI api=new GoogleSkyJamAPI();
  try {
    api.login(username,password);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    api.login(username,password);
    Playlists playlists=api.getAllPlaylists();
    if (playlists.getMagicPlaylists() != null) {
      for (      Playlist list : playlists.getMagicPlaylists()) {
        System.out.println(""String_Node_Str"" + list.getTitle() + ""String_Node_Str""+ list.getPlaylistId()+ ""String_Node_Str"");
        for (        Song song : list.getPlaylist()) {
          System.out.println(song.getName() + ""String_Node_Str"" + song.getArtist());
        }
      }
    }
    Collection<Track> tracks=api.getAllTracks();
    for (    Track track : tracks) {
      System.out.println(track);
      if (track.getAlbumArtRef() != null && !track.getAlbumArtRef().isEmpty()) {
        File track_f=api.downloadTrack(track);
        populateFileWithTuneTags(track_f,track);
      }
    }
    for (    Playlist list : playlists.getPlaylists()) {
      System.out.println(""String_Node_Str"" + list.getTitle() + ""String_Node_Str""+ list.getPlaylistId()+ ""String_Node_Str"");
      for (      Song song : list.getPlaylist()) {
        System.out.println(song.getName() + ""String_Node_Str"" + song.getArtist());
        if (song.getAlbumArtUrl() != null) {
          File song_f=api.downloadSong(song);
          populateFileWithTuneTags(song_f,song);
        }
      }
    }
    Collection<Song> songs=api.getAllSongs();
    api.downloadSong(songs.iterator().next());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.out.println(Calendar.getInstance().getTime());
}","public static void main(String args[]){
  String password=""String_Node_Str"";
  String username=""String_Node_Str"";
  System.out.println(Calendar.getInstance().getTime());
  GoogleSkyJamAPI api=new GoogleSkyJamAPI(new ApacheConnector(),new JSON(),new File(""String_Node_Str""));
  GoogleMusicAPI aa=new GoogleMusicAPI(new ApacheConnector(),new JSON(),new File(""String_Node_Str""));
  try {
    aa.login(username,password);
    api.login(username,password);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    api.login(username,password);
    Playlists playlists=api.getAllPlaylists();
    if (playlists.getMagicPlaylists() != null) {
      for (      Playlist list : playlists.getMagicPlaylists()) {
        System.out.println(""String_Node_Str"" + list.getTitle() + ""String_Node_Str""+ list.getPlaylistId()+ ""String_Node_Str"");
        for (        Song song : list.getPlaylist()) {
          System.out.println(song.getName() + ""String_Node_Str"" + song.getArtist());
        }
      }
    }
    Collection<Track> tracks=api.getAllTracks();
    for (    Track track : tracks) {
      System.out.println(track);
      if (track.getAlbumArtRef() != null && !track.getAlbumArtRef().isEmpty()) {
        File track_f=api.downloadTrack(track);
        populateFileWithTuneTags(track_f,track);
      }
    }
    for (    Playlist list : playlists.getPlaylists()) {
      System.out.println(""String_Node_Str"" + list.getTitle() + ""String_Node_Str""+ list.getPlaylistId()+ ""String_Node_Str"");
      for (      Song song : list.getPlaylist()) {
        System.out.println(song.getName() + ""String_Node_Str"" + song.getArtist());
        if (song.getAlbumArtUrl() != null) {
          File song_f=api.downloadSong(song);
          populateFileWithTuneTags(song_f,song);
        }
      }
    }
    Collection<Song> songs=api.getAllSongs();
    api.downloadSong(songs.iterator().next());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.out.println(Calendar.getInstance().getTime());
}",0.9487785657998424
97777,"@Override public void parameters(final String[] par,final SnipeData v){
  v.sendMessage(TextColors.RED,""String_Node_Str"");
}","@Override public void parameters(final String[] par,final SnipeData v){
  if (par.length != 0) {
    v.sendMessage(TextColors.RED,""String_Node_Str"");
  }
}",0.8888888888888888
97778,"/** 
 * Sniper execution call.
 * @param action Action player performed
 * @param itemInHand Item in hand of player
 * @param clickedBlock Block that the player targeted/interacted with
 * @param clickedFace Face of that targeted Block
 * @return true if command visibly processed, false otherwise.
 */
public boolean snipe(InteractionType action,ItemStack itemInHand,Location<World> clickedBlock,Direction clickedFace){
  String toolId=getToolId(itemInHand);
  SniperTool sniperTool=this.tools.get(toolId);
  Player player=getPlayer();
  if (sniperTool.hasToolAssigned(itemInHand.getItem())) {
    if (sniperTool.getCurrentBrush() == null) {
      player.sendMessage(Text.of(TextColors.RED,""String_Node_Str""));
      return true;
    }
    if (!player.hasPermission(sniperTool.getCurrentBrush().getPermissionNode())) {
      player.sendMessage(Text.of(TextColors.RED,""String_Node_Str"" + sniperTool.getCurrentBrush().getPermissionNode() + ""String_Node_Str""));
      return true;
    }
    SnipeData snipeData=sniperTool.getSnipeData();
    if (player.get(Keys.IS_SNEAKING).orElse(false)) {
      Location<World> targetBlock=null;
      SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand.getItem());
switch (action) {
case PRIMARY_MAINHAND:
case PRIMARY_OFFHAND:
        if (clickedBlock != null) {
          targetBlock=clickedBlock;
        }
 else {
          Predicate<BlockRayHit<World>> filter=BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1);
          if (snipeData.isRanged()) {
            filter=filter.and(BlockRay.maxDistanceFilter(player.getLocation().getPosition().add(0,1.72,0),snipeData.getRange()));
          }
          BlockRayBuilder<World> rayBuilder=BlockRay.from(player).filter(filter);
          BlockRay<World> ray=rayBuilder.build();
          while (ray.hasNext()) {
            targetBlock=ray.next().getLocation();
          }
        }
switch (snipeAction) {
case ARROW:
        snipeData.setVoxelId(targetBlock.getBlockType().getDefaultState());
      snipeData.getVoxelMessage().voxel();
    return true;
case GUNPOWDER:
  snipeData.setVoxelId(targetBlock.getBlock());
snipeData.getVoxelMessage().voxel();
return true;
default :
break;
}
break;
case SECONDARY_MAINHAND:
case SECONDARY_OFFHAND:
if (clickedBlock != null) {
targetBlock=clickedBlock;
}
 else {
Predicate<BlockRayHit<World>> filter=BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1);
if (snipeData.isRanged()) {
filter=filter.and(BlockRay.maxDistanceFilter(player.getLocation().getPosition().add(0,1.72,0),snipeData.getRange()));
}
BlockRayBuilder<World> rayBuilder=BlockRay.from(player).filter(filter);
BlockRay<World> ray=rayBuilder.build();
while (ray.hasNext()) {
targetBlock=ray.next().getLocation();
}
}
switch (snipeAction) {
case ARROW:
snipeData.setReplaceId(targetBlock.getBlockType().getDefaultState());
snipeData.getVoxelMessage().replace();
return true;
case GUNPOWDER:
snipeData.setReplaceId(targetBlock.getBlock());
snipeData.getVoxelMessage().replace();
return true;
default :
break;
}
break;
default :
return false;
}
}
 else {
Location<World> targetBlock=null;
Location<World> lastBlock=null;
SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand.getItem());
if (action == InteractionType.PRIMARY_MAINHAND || action == InteractionType.PRIMARY_OFFHAND) {
return false;
}
if (clickedBlock != null) {
targetBlock=clickedBlock;
lastBlock=clickedBlock.getRelative(clickedFace);
if (lastBlock == null) {
player.sendMessage(Text.of(TextColors.RED,""String_Node_Str""));
return true;
}
}
 else {
Predicate<BlockRayHit<World>> filter=BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1);
if (snipeData.isRanged()) {
filter=filter.and(BlockRay.maxDistanceFilter(player.getLocation().getPosition().add(0,1.72,0),snipeData.getRange()));
}
BlockRayBuilder<World> rayBuilder=BlockRay.from(player).filter(filter);
BlockRay<World> ray=rayBuilder.build();
while (ray.hasNext()) {
lastBlock=targetBlock;
targetBlock=ray.next().getLocation();
}
if (targetBlock == null) {
player.sendMessage(Text.of(TextColors.RED,""String_Node_Str""));
return false;
}
if (lastBlock == null) {
lastBlock=targetBlock;
}
}
sniperTool.getCurrentBrush().perform(snipeAction,snipeData,targetBlock,lastBlock);
SniperStats.increaseBrushUsage(sniperTool.getCurrentBrush().getName());
return true;
}
}
return false;
}","/** 
 * Sniper execution call.
 * @param action Action player performed
 * @param itemInHand Item in hand of player
 * @param clickedBlock Block that the player targeted/interacted with
 * @param clickedFace Face of that targeted Block
 * @return true if command visibly processed, false otherwise.
 */
public boolean snipe(InteractionType action,ItemStack itemInHand,Location<World> clickedBlock,Direction clickedFace){
  String toolId=getToolId(itemInHand);
  SniperTool sniperTool=this.tools.get(toolId);
  Player player=getPlayer();
  if (sniperTool.hasToolAssigned(itemInHand.getItem())) {
    if (sniperTool.getCurrentBrush() == null) {
      player.sendMessage(Text.of(TextColors.RED,""String_Node_Str""));
      return true;
    }
    if (!player.hasPermission(sniperTool.getCurrentBrush().getPermissionNode())) {
      player.sendMessage(Text.of(TextColors.RED,""String_Node_Str"" + sniperTool.getCurrentBrush().getPermissionNode() + ""String_Node_Str""));
      return true;
    }
    SnipeData snipeData=sniperTool.getSnipeData();
    if (player.get(Keys.IS_SNEAKING).orElse(false)) {
      Location<World> targetBlock=null;
      SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand.getItem());
switch (action) {
case PRIMARY_MAINHAND:
case PRIMARY_OFFHAND:
        if (clickedBlock != null) {
          targetBlock=clickedBlock;
        }
 else {
          Predicate<BlockRayHit<World>> filter=BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1);
          if (snipeData.isRanged()) {
            filter=filter.and(BlockRay.maxDistanceFilter(player.getLocation().getPosition().add(0,1.72,0),snipeData.getRange()));
          }
          BlockRayBuilder<World> rayBuilder=BlockRay.from(player).filter(filter);
          BlockRay<World> ray=rayBuilder.build();
          while (ray.hasNext()) {
            targetBlock=ray.next().getLocation();
          }
        }
switch (snipeAction) {
case ARROW:
        snipeData.setVoxelId(targetBlock.getBlockType().getDefaultState());
      snipeData.getVoxelMessage().voxel();
    return true;
case GUNPOWDER:
  snipeData.setVoxelId(targetBlock.getBlock());
snipeData.getVoxelMessage().voxel();
return true;
default :
break;
}
break;
case SECONDARY_MAINHAND:
case SECONDARY_OFFHAND:
if (clickedBlock != null) {
targetBlock=clickedBlock;
}
 else {
Predicate<BlockRayHit<World>> filter=BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1);
if (snipeData.isRanged()) {
filter=filter.and(BlockRay.maxDistanceFilter(player.getLocation().getPosition().add(0,1.72,0),snipeData.getRange()));
}
BlockRayBuilder<World> rayBuilder=BlockRay.from(player).filter(filter);
BlockRay<World> ray=rayBuilder.build();
while (ray.hasNext()) {
targetBlock=ray.next().getLocation();
}
}
switch (snipeAction) {
case ARROW:
snipeData.setReplaceId(targetBlock.getBlockType().getDefaultState());
snipeData.getVoxelMessage().replace();
return true;
case GUNPOWDER:
snipeData.setReplaceId(targetBlock.getBlock());
snipeData.getVoxelMessage().replace();
return true;
default :
break;
}
break;
default :
return false;
}
}
 else {
Location<World> targetBlock=null;
Location<World> lastBlock=null;
SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand.getItem());
if (action == InteractionType.PRIMARY_MAINHAND || action == InteractionType.PRIMARY_OFFHAND) {
return false;
}
if (clickedBlock != null) {
targetBlock=clickedBlock;
lastBlock=clickedBlock.getRelative(clickedFace);
if (lastBlock == null) {
player.sendMessage(Text.of(TextColors.RED,""String_Node_Str""));
return true;
}
}
 else {
Predicate<BlockRayHit<World>> filter=BlockRay.continueAfterFilter(BlockRay.onlyAirFilter(),1);
if (snipeData.isRanged()) {
filter=filter.and(BlockRay.maxDistanceFilter(player.getLocation().getPosition().add(0,1.72,0),snipeData.getRange()));
}
BlockRayBuilder<World> rayBuilder=BlockRay.from(player).filter(filter);
BlockRay<World> ray=rayBuilder.build();
while (ray.hasNext()) {
lastBlock=targetBlock;
targetBlock=ray.next().getLocation();
}
if (targetBlock == null) {
player.sendMessage(Text.of(TextColors.RED,""String_Node_Str""));
return false;
}
if (lastBlock == null) {
lastBlock=targetBlock;
}
}
try {
sniperTool.getCurrentBrush().perform(snipeAction,snipeData,targetBlock,lastBlock);
}
 catch (Exception e) {
player.sendMessage(Text.of(TextColors.DARK_RED,""String_Node_Str""));
VoxelSniper.getLogger().error(""String_Node_Str"" + sniperTool.getCurrentBrush().getName());
e.printStackTrace();
}
SniperStats.increaseBrushUsage(sniperTool.getCurrentBrush().getName());
return true;
}
}
return false;
}",0.9759620810292292
97779,"private void ball(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(ty - y) * (ty - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(tz - z) * (tz - z);
        if (xs + ys + zs < brushSizeSquared) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void ball(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=maxx; x >= minx; x--) {
    double xs=(tx - x) * (tx - x);
    for (int y=maxy; y >= miny; y--) {
      double ys=(ty - y) * (ty - y);
      for (int z=maxz; z >= minz; z--) {
        double zs=(tz - z) * (tz - z);
        if (xs + ys + zs < brushSizeSquared) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.9521410579345088
97780,"private void ellipse(final SnipeData v,Location<World> targetBlock,Direction axis){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.yrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.yrad) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (this.xrad + 1) * (this.yrad + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs / xrads + zs / yrads < 1) {
        if (axis == Direction.UP) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
 else         if (axis == Direction.NORTH) {
          perform(v,x,z,targetBlock.getBlockZ());
        }
 else         if (axis == Direction.EAST) {
          perform(v,targetBlock.getBlockX(),x,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void ellipse(final SnipeData v,Location<World> targetBlock,Direction axis){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=(int)Math.ceil(targetBlock.getBlockX() + this.xrad);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.yrad);
  int maxz=(int)Math.ceil(targetBlock.getBlockZ() + this.yrad);
  this.undo=new Undo(GenericMath.floor(Math.PI * (this.xrad + 1) * (this.yrad + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs / xrads + zs / yrads < 1) {
        if (axis == Direction.UP) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
 else         if (axis == Direction.NORTH) {
          perform(v,x,z,targetBlock.getBlockZ());
        }
 else         if (axis == Direction.EAST) {
          perform(v,targetBlock.getBlockX(),x,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.8815331010452961
97781,"@Override public final void parameters(final String[] par,final com.thevoxelbox.voxelsniper.SnipeData v){
  for (int i=0; i < par.length; i++) {
    final String parameter=par[i];
    if (parameter.equalsIgnoreCase(""String_Node_Str"")) {
      v.sendMessage(TextColors.GOLD + ""String_Node_Str"");
      v.sendMessage(TextColors.AQUA + ""String_Node_Str"");
      v.sendMessage(TextColors.AQUA + ""String_Node_Str"");
      return;
    }
 else     if (parameter.startsWith(""String_Node_Str"")) {
      try {
        double val=Double.parseDouble(parameter.replace(""String_Node_Str"",""String_Node_Str""));
        if (val <= 0) {
          v.sendMessage(TextColors.RED,""String_Node_Str"");
        }
 else {
          this.xrad=val;
          v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.xrad);
        }
      }
 catch (      NumberFormatException e) {
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
    }
 else     if (parameter.startsWith(""String_Node_Str"")) {
      try {
        double val=Double.parseDouble(parameter.replace(""String_Node_Str"",""String_Node_Str""));
        if (val <= 0) {
          v.sendMessage(TextColors.RED,""String_Node_Str"");
        }
 else {
          this.yrad=val;
          v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.yrad);
        }
      }
 catch (      NumberFormatException e) {
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
    }
 else {
      v.sendMessage(TextColors.RED + ""String_Node_Str"");
    }
  }
  if (this.xrad <= 0) {
    this.xrad=v.getBrushSize();
    v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.xrad);
  }
  if (this.yrad <= 0) {
    this.yrad=v.getBrushSize();
    v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.yrad);
  }
}","@Override public final void parameters(final String[] par,final com.thevoxelbox.voxelsniper.SnipeData v){
  for (int i=0; i < par.length; i++) {
    final String parameter=par[i];
    if (parameter.equalsIgnoreCase(""String_Node_Str"")) {
      v.sendMessage(TextColors.GOLD,""String_Node_Str"");
      v.sendMessage(TextColors.AQUA,""String_Node_Str"");
      v.sendMessage(TextColors.AQUA,""String_Node_Str"");
      return;
    }
 else     if (parameter.startsWith(""String_Node_Str"")) {
      try {
        double val=Double.parseDouble(parameter.replace(""String_Node_Str"",""String_Node_Str""));
        if (val <= 0) {
          v.sendMessage(TextColors.RED,""String_Node_Str"");
        }
 else {
          this.xrad=val;
          v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.xrad);
        }
      }
 catch (      NumberFormatException e) {
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
    }
 else     if (parameter.startsWith(""String_Node_Str"")) {
      try {
        double val=Double.parseDouble(parameter.replace(""String_Node_Str"",""String_Node_Str""));
        if (val <= 0) {
          v.sendMessage(TextColors.RED,""String_Node_Str"");
        }
 else {
          this.yrad=val;
          v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.yrad);
        }
      }
 catch (      NumberFormatException e) {
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
    }
 else {
      v.sendMessage(TextColors.RED + ""String_Node_Str"");
    }
  }
  if (this.xrad <= 0) {
    this.xrad=v.getBrushSize();
    v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.xrad);
  }
  if (this.yrad <= 0) {
    this.yrad=v.getBrushSize();
    v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.yrad);
  }
}",0.9965596330275228
97782,"private void ellipsoid(final SnipeData v,Location<World> targetBlock){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  double zrads=this.zrad * this.zrad;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - this.yrad),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + this.yrad) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.zrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.zrad) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (this.xrad + 1)* (this.yrad + 1)* (this.zrad + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(ty - y) * (ty - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(tz - z) * (tz - z);
        if (xs / xrads + ys / yrads + zs / zrads < 1) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void ellipsoid(final SnipeData v,Location<World> targetBlock){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  double zrads=this.zrad * this.zrad;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - this.yrad),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + this.yrad) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.zrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.zrad) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (this.xrad + 1)* (this.yrad + 1)* (this.zrad + 1) / 3));
  for (int x=maxx; x >= minx; x--) {
    double xs=(tx - x) * (tx - x);
    for (int y=maxy; y >= miny; y--) {
      double ys=(ty - y) * (ty - y);
      for (int z=maxz; z >= minz; z--) {
        double zs=(tz - z) * (tz - z);
        if (xs / xrads + ys / yrads + zs / zrads < 1) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.953995157384988
97783,"private void spawn(final SnipeData v){
  for (int x=0; x < v.getBrushSize(); x++) {
    Entity e=this.world.createEntity(this.entityType,this.lastBlock.getBlockPosition());
    this.world.spawnEntity(e,this.cause);
  }
}","private void spawn(final SnipeData v){
  Cause cause=Cause.builder().named(NamedCause.of(""String_Node_Str"",SpawnCause.builder().type(SpawnTypes.PLUGIN).build())).from(this.cause).build();
  for (int x=0; x < v.getBrushSize(); x++) {
    Entity e=this.world.createEntity(this.entityType,this.lastBlock.getBlockPosition());
    this.world.spawnEntity(e,cause);
  }
}",0.7363013698630136
97784,"@Override public final void parameters(final String[] par,final SnipeData v){
  if (par.length == 0 || par[0].equalsIgnoreCase(""String_Node_Str"")) {
    v.sendMessage(TextColors.AQUA + ""String_Node_Str"");
    StringBuilder types=new StringBuilder();
    for (    EntityType type : Sponge.getRegistry().getAllOf(EntityType.class)) {
      types.append(""String_Node_Str"").append(type.getId());
    }
    v.sendMessage(types.toString().substring(2));
  }
 else {
    Optional<EntityType> selection=Sponge.getRegistry().getType(EntityType.class,par[0]);
    if (!selection.isPresent()) {
      v.sendMessage(TextColors.RED + ""String_Node_Str"");
    }
 else {
      this.entityType=selection.get();
      v.sendMessage(TextColors.GREEN + ""String_Node_Str"" + this.entityType.getName());
    }
  }
}","@Override public final void parameters(final String[] par,final SnipeData v){
  if (par.length == 0 || par[0].equalsIgnoreCase(""String_Node_Str"")) {
    v.sendMessage(TextColors.AQUA,""String_Node_Str"");
    StringBuilder types=new StringBuilder();
    for (    EntityType type : Sponge.getRegistry().getAllOf(EntityType.class)) {
      types.append(""String_Node_Str"").append(type.getId().replace(""String_Node_Str"",""String_Node_Str""));
    }
    v.sendMessage(types.toString().substring(2));
  }
 else {
    Optional<EntityType> selection=Sponge.getRegistry().getType(EntityType.class,par[0]);
    if (!selection.isPresent()) {
      v.sendMessage(TextColors.RED,""String_Node_Str"");
    }
 else {
      this.entityType=selection.get();
      v.sendMessage(TextColors.GREEN,""String_Node_Str"" + this.entityType.getName());
    }
  }
}",0.9205175600739371
97785,"@Override public final void info(final Message vm){
  vm.brushMessage(TextColors.LIGHT_PURPLE + ""String_Node_Str"" + ""String_Node_Str""+ this.entityType.getName()+ ""String_Node_Str"");
  vm.size();
}","@Override public final void info(final Message vm){
  vm.custom(TextColors.LIGHT_PURPLE,""String_Node_Str"" + ""String_Node_Str"",TextColors.DARK_PURPLE,this.entityType.getName(),TextColors.LIGHT_PURPLE,""String_Node_Str"");
  vm.size();
}",0.7552447552447552
97786,"private void radialRemoval(SnipeData v){
  int cx=this.targetBlock.getChunkPosition().getX();
  int cz=this.targetBlock.getChunkPosition().getZ();
  int entityCount=0;
  int chunkCount=0;
  int radius=(int)Math.round(v.getBrushSize() / 16);
  int radiusSquared=radius * radius;
  for (int x=-radius; x <= radius; x++) {
    for (int z=-radius; z <= radius; z++) {
      if (x * x + z * z < radiusSquared) {
        Optional<Chunk> chunk=this.world.getChunk(x + cx,0,z + cz);
        if (chunk.isPresent()) {
          entityCount+=removeEntities(chunk.get());
          chunkCount++;
        }
      }
    }
  }
  v.sendMessage(TextColors.GREEN + ""String_Node_Str"" + TextColors.RED+ entityCount+ TextColors.GREEN+ ""String_Node_Str""+ TextColors.BLUE+ chunkCount+ TextColors.GREEN+ (chunkCount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
}","private void radialRemoval(SnipeData v){
  int cx=this.targetBlock.getChunkPosition().getX();
  int cz=this.targetBlock.getChunkPosition().getZ();
  int entityCount=0;
  int chunkCount=0;
  if (v.getBrushSize() < 16) {
    Optional<Chunk> chunk=this.world.getChunk(cx,0,cz);
    if (chunk.isPresent()) {
      entityCount+=removeEntities(chunk.get());
      chunkCount++;
    }
  }
 else {
    int radius=(int)Math.ceil(v.getBrushSize() / 16);
    int radiusSquared=radius * radius;
    for (int x=-radius; x <= radius; x++) {
      for (int z=-radius; z <= radius; z++) {
        if (x * x + z * z <= radiusSquared) {
          Optional<Chunk> chunk=this.world.getChunk(x + cx,0,z + cz);
          if (chunk.isPresent()) {
            entityCount+=removeEntities(chunk.get());
            chunkCount++;
          }
        }
      }
    }
  }
  v.sendMessage(TextColors.GREEN,""String_Node_Str"",TextColors.RED,entityCount,TextColors.GREEN,""String_Node_Str"",TextColors.BLUE,chunkCount,TextColors.GREEN,(chunkCount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
}",0.6127167630057804
97787,"private void fillIteration(SnipeData v,int fillFaces,BlockBuffer current,BlockBuffer target){
  int brushSize=(int)v.getBrushSize() + 1;
  double brushSizeSquared=v.getBrushSize() * v.getBrushSize();
  Map<BlockState,Integer> frequency=Maps.newHashMap();
  for (int x=-brushSize; x <= brushSize; x++) {
    for (int y=-brushSize; y <= brushSize; y++) {
      for (int z=-brushSize; z <= brushSize; z++) {
        if (x * x + y * y + z * z >= brushSizeSquared) {
          continue;
        }
        BlockState state=current.get(x,y,z);
        if (!BlockHelper.isLiquidOrGas(state)) {
          continue;
        }
        int total=0;
        int highest=1;
        BlockState highestState=state;
        frequency.clear();
        for (        Vector3i offs : FACES_TO_CHECK) {
          BlockState next=current.get(x + offs.getX(),y + offs.getY(),z + offs.getZ());
          if (BlockHelper.isLiquidOrGas(next)) {
            continue;
          }
          total++;
          Integer count=frequency.get(next);
          if (count == null) {
            count=1;
          }
 else {
            count++;
          }
          if (count > highest) {
            highest=count;
            highestState=next;
          }
          frequency.put(next,count);
        }
        if (total > fillFaces) {
          target.set(x,y,z,highestState);
        }
      }
    }
  }
}","private void fillIteration(SnipeData v,int fillFaces,BlockBuffer current,BlockBuffer target){
  int brushSize=(int)v.getBrushSize() + 1;
  double brushSizeSquared=v.getBrushSize() * v.getBrushSize();
  Map<BlockState,Integer> frequency=Maps.newHashMap();
  for (int x=-brushSize; x <= brushSize; x++) {
    for (int y=-brushSize; y <= brushSize; y++) {
      for (int z=-brushSize; z <= brushSize; z++) {
        target.set(x,y,z,current.get(x,y,z));
        if (x * x + y * y + z * z >= brushSizeSquared) {
          continue;
        }
        BlockState state=current.get(x,y,z);
        if (!BlockHelper.isLiquidOrGas(state)) {
          continue;
        }
        int total=0;
        int highest=1;
        BlockState highestState=state;
        frequency.clear();
        for (        Vector3i offs : FACES_TO_CHECK) {
          BlockState next=current.get(x + offs.getX(),y + offs.getY(),z + offs.getZ());
          if (BlockHelper.isLiquidOrGas(next)) {
            continue;
          }
          total++;
          Integer count=frequency.get(next);
          if (count == null) {
            count=1;
          }
 else {
            count++;
          }
          if (count > highest) {
            highest=count;
            highestState=next;
          }
          frequency.put(next,count);
        }
        if (total > fillFaces) {
          target.set(x,y,z,highestState);
        }
      }
    }
  }
}",0.9835479256080114
97788,"private void erosionIteration(SnipeData v,int erodeFaces,BlockBuffer current,BlockBuffer target){
  int brushSize=(int)v.getBrushSize() + 1;
  double brushSizeSquared=v.getBrushSize() * v.getBrushSize();
  Map<BlockType,Integer> frequency=Maps.newHashMap();
  for (int x=-brushSize; x <= brushSize; x++) {
    for (int y=-brushSize; y <= brushSize; y++) {
      for (int z=-brushSize; z <= brushSize; z++) {
        if (x * x + y * y + z * z >= brushSizeSquared) {
          continue;
        }
        BlockState state=current.get(x,y,z);
        if (BlockHelper.isLiquidOrGas(state)) {
          continue;
        }
        int total=0;
        int highest=1;
        BlockType highestState=state.getType();
        frequency.clear();
        for (        Vector3i offs : FACES_TO_CHECK) {
          BlockState next=current.get(x + offs.getX(),y + offs.getY(),z + offs.getZ());
          if (!BlockHelper.isLiquidOrGas(next)) {
            continue;
          }
          total++;
          Integer count=frequency.get(next.getType());
          if (count == null) {
            count=1;
          }
 else {
            count++;
          }
          if (count > highest) {
            highest=count;
            highestState=next.getType();
          }
          frequency.put(next.getType(),count);
        }
        if (total > erodeFaces) {
          target.set(x,y,z,highestState.getDefaultState());
        }
      }
    }
  }
}","private void erosionIteration(SnipeData v,int erodeFaces,BlockBuffer current,BlockBuffer target){
  int brushSize=(int)v.getBrushSize() + 1;
  double brushSizeSquared=v.getBrushSize() * v.getBrushSize();
  Map<BlockType,Integer> frequency=Maps.newHashMap();
  for (int x=-brushSize; x <= brushSize; x++) {
    for (int y=-brushSize; y <= brushSize; y++) {
      for (int z=-brushSize; z <= brushSize; z++) {
        target.set(x,y,z,current.get(x,y,z));
        if (x * x + y * y + z * z >= brushSizeSquared) {
          continue;
        }
        BlockState state=current.get(x,y,z);
        if (BlockHelper.isLiquidOrGas(state)) {
          continue;
        }
        int total=0;
        int highest=1;
        BlockType highestState=state.getType();
        frequency.clear();
        for (        Vector3i offs : FACES_TO_CHECK) {
          BlockState next=current.get(x + offs.getX(),y + offs.getY(),z + offs.getZ());
          if (!BlockHelper.isLiquidOrGas(next)) {
            continue;
          }
          total++;
          Integer count=frequency.get(next.getType());
          if (count == null) {
            count=1;
          }
 else {
            count++;
          }
          if (count > highest) {
            highest=count;
            highestState=next.getType();
          }
          frequency.put(next.getType(),count);
        }
        if (total > erodeFaces) {
          target.set(x,y,z,highestState.getDefaultState());
        }
      }
    }
  }
}",0.9842357779300892
97789,"protected void erosion(SnipeData v,int erodeFaces,int erodeRec,int fillFaces,int fillRec){
  int brushSize=(int)v.getBrushSize() + 1;
  double brushSizeSquared=v.getBrushSize() * v.getBrushSize();
  int tx=this.targetBlock.getBlockX();
  int ty=this.targetBlock.getBlockY();
  int tz=this.targetBlock.getBlockZ();
  BlockBuffer buffer1=new BlockBuffer(new Vector3i(-brushSize - 1,-brushSize - 1,-brushSize - 1),new Vector3i(brushSize + 1,brushSize + 1,brushSize + 1));
  BlockBuffer buffer2=new BlockBuffer(new Vector3i(-brushSize - 1,-brushSize - 1,-brushSize - 1),new Vector3i(brushSize + 1,brushSize + 1,brushSize + 1));
  for (int x=-brushSize + 1; x <= brushSize + 1; x++) {
    int x0=x + tx;
    for (int y=-brushSize + 1; y <= brushSize + 1; y++) {
      int y0=y + ty;
      for (int z=-brushSize + 1; z <= brushSize + 1; z++) {
        int z0=z + tz;
        buffer1.set(x,y,z,this.world.getBlock(x0,y0,z0));
        buffer2.set(x,y,z,this.world.getBlock(x0,y0,z0));
      }
    }
  }
  int swap=0;
  for (int i=0; i < erodeRec; ++i) {
    erosionIteration(v,erodeFaces,swap % 2 == 0 ? buffer1 : buffer2,swap % 2 == 1 ? buffer1 : buffer2);
    swap++;
  }
  for (int i=0; i < fillRec; ++i) {
    fillIteration(v,fillFaces,swap % 2 == 0 ? buffer1 : buffer2,swap % 2 == 1 ? buffer1 : buffer2);
    swap++;
  }
  BlockBuffer finalBuffer=swap % 2 == 0 ? buffer1 : buffer2;
  this.undo=new Undo(finalBuffer.getBlockCount());
  for (int x=-brushSize; x <= brushSize; x++) {
    int x0=x + tx;
    for (int y=-brushSize; y <= brushSize; y++) {
      int y0=y + ty;
      for (int z=-brushSize; z <= brushSize; z++) {
        int z0=z + tz;
        if (x * x + y * y + z * z >= brushSizeSquared && finalBuffer.contains(x,y,z)) {
          setBlockState(x0,y0,z0,finalBuffer.get(x,y,z));
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","protected void erosion(SnipeData v,int erodeFaces,int erodeRec,int fillFaces,int fillRec){
  int brushSize=(int)Math.ceil(v.getBrushSize());
  double brushSizeSquared=v.getBrushSize() * v.getBrushSize();
  int tx=this.targetBlock.getBlockX();
  int ty=this.targetBlock.getBlockY();
  int tz=this.targetBlock.getBlockZ();
  BlockBuffer buffer1=new BlockBuffer(new Vector3i(-brushSize - 1,-brushSize - 1,-brushSize - 1),new Vector3i(brushSize + 1,brushSize + 1,brushSize + 1));
  BlockBuffer buffer2=new BlockBuffer(new Vector3i(-brushSize - 1,-brushSize - 1,-brushSize - 1),new Vector3i(brushSize + 1,brushSize + 1,brushSize + 1));
  for (int x=-brushSize - 1; x <= brushSize + 1; x++) {
    int x0=x + tx;
    for (int y=-brushSize - 1; y <= brushSize + 1; y++) {
      int y0=y + ty;
      for (int z=-brushSize - 1; z <= brushSize + 1; z++) {
        int z0=z + tz;
        BlockState state=this.world.getBlock(x0,y0,z0);
        buffer1.set(x,y,z,state);
        buffer2.set(x,y,z,state);
      }
    }
  }
  int swap=0;
  for (int i=0; i < erodeRec; ++i) {
    erosionIteration(v,erodeFaces,swap % 2 == 0 ? buffer1 : buffer2,swap % 2 == 1 ? buffer1 : buffer2);
    swap++;
  }
  for (int i=0; i < fillRec; ++i) {
    fillIteration(v,fillFaces,swap % 2 == 0 ? buffer1 : buffer2,swap % 2 == 1 ? buffer1 : buffer2);
    swap++;
  }
  BlockBuffer finalBuffer=swap % 2 == 0 ? buffer1 : buffer2;
  this.undo=new Undo(finalBuffer.getBlockCount());
  for (int x=-brushSize; x <= brushSize; x++) {
    int x0=x + tx;
    for (int y=-brushSize; y <= brushSize; y++) {
      int y0=y + ty;
      for (int z=-brushSize; z <= brushSize; z++) {
        int z0=z + tz;
        if (x * x + y * y + z * z <= brushSizeSquared && finalBuffer.contains(x,y,z)) {
          setBlockState(x0,y0,z0,finalBuffer.get(x,y,z));
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.966711051930759
97790,"private void overlay(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs + zs < brushSizeSquared) {
        int y=targetBlock.getBlockY();
        for (; y >= Brush.WORLD_HEIGHT; y--) {
          if (this.world.getBlockType(x,y,z) != BlockTypes.AIR) {
            break;
          }
        }
        if (y == targetBlock.getBlockY() && y < WORLD_HEIGHT) {
          if (this.world.getBlockType(x,y + 1,z) != BlockTypes.AIR) {
            continue;
          }
        }
        for (int y0=y; y0 > y - this.depth; y0--) {
          if (this.world.getBlockType(x,y0,z) != BlockTypes.AIR) {
            perform(v,x,y0,z);
          }
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void overlay(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=this.targetBlock.getBlockX();
  int tz=this.targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs + zs < brushSizeSquared) {
        int y=targetBlock.getBlockY();
        for (; y >= 0; y--) {
          if (this.world.getBlockType(x,y,z) != BlockTypes.AIR) {
            break;
          }
        }
        if (y == targetBlock.getBlockY() && y < WORLD_HEIGHT) {
          if (this.world.getBlockType(x,y + 1,z) != BlockTypes.AIR) {
            continue;
          }
        }
        for (int y0=y; y0 > y - this.depth; y0--) {
          if (this.world.getBlockType(x,y0,z) != BlockTypes.AIR) {
            perform(v,x,y0,z);
          }
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.6938775510204082
97791,"@Override public final void parameters(final String[] par,final SnipeData v){
  for (int i=1; i < par.length; i++) {
    final String parameter=par[i];
    if (parameter.equalsIgnoreCase(""String_Node_Str"")) {
      v.sendMessage(TextColors.GOLD,""String_Node_Str"");
      v.sendMessage(TextColors.AQUA,""String_Node_Str"");
      return;
    }
    if (parameter.startsWith(""String_Node_Str"")) {
      try {
        this.depth=Integer.parseInt(parameter.replace(""String_Node_Str"",""String_Node_Str""));
        if (this.depth < 1) {
          this.depth=1;
        }
        v.sendMessage(TextColors.AQUA,""String_Node_Str"" + this.depth);
      }
 catch (      NumberFormatException e) {
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
    }
 else {
      v.sendMessage(TextColors.RED,""String_Node_Str"");
    }
  }
}","@Override public final void parameters(final String[] par,final SnipeData v){
  if (par.length > 0) {
    if (par[0].equalsIgnoreCase(""String_Node_Str"")) {
      v.sendMessage(TextColors.GOLD,""String_Node_Str"");
      v.sendMessage(TextColors.AQUA,""String_Node_Str"");
      return;
    }
    if (par[0].startsWith(""String_Node_Str"")) {
      try {
        this.depth=Integer.parseInt(par[0].replace(""String_Node_Str"",""String_Node_Str""));
        if (this.depth < 1) {
          this.depth=1;
        }
        v.sendMessage(TextColors.AQUA,""String_Node_Str"" + this.depth);
      }
 catch (      NumberFormatException e) {
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
    }
 else {
      v.sendMessage(TextColors.RED,""String_Node_Str"");
    }
  }
}",0.9290646578782172
97792,"public void parse(String[] args,SnipeData v){
  String handle=args[0];
  if (handle.length() == 1 || handle.length() == 2) {
    PerformerType pl=null;
    char p=handle.charAt(0);
    if (p == 'm' || p == 'M') {
      pl=PerformerType.TYPE;
    }
 else     if (p == 'i' || p == 'I') {
      pl=PerformerType.STATE;
      v.sendMessage(TextColors.RED,""String_Node_Str"");
    }
 else     if (p == 'c' || p == 'C') {
      pl=PerformerType.COMBO;
    }
 else {
      parameters(args,v);
      return;
    }
    if (handle.length() == 2) {
      char r=handle.charAt(1);
      if (r == 'm' || r == 'M') {
        this.replace=PerformerType.TYPE;
      }
 else       if (r == 'i' || r == 'I') {
        this.replace=PerformerType.STATE;
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
 else       if (r == 'c' || r == 'C') {
        this.replace=PerformerType.COMBO;
      }
 else {
        parameters(args,v);
        return;
      }
    }
 else {
      this.replace=PerformerType.NONE;
    }
    this.place=pl;
    if (args.length > 1) {
      parameters(Arrays.copyOfRange(args,1,args.length),v);
    }
  }
 else {
    parameters(args,v);
  }
}","public void parse(String[] args,SnipeData v){
  String handle=args[0];
  if (handle.length() == 1 || handle.length() == 2) {
    PerformerType pl=null;
    char p=handle.charAt(0);
    if (p == 'm' || p == 'M') {
      pl=PerformerType.TYPE;
    }
 else     if (p == 'i' || p == 'I') {
      pl=PerformerType.STATE;
      v.sendMessage(TextColors.RED,""String_Node_Str"");
    }
 else     if (p == 'c' || p == 'C') {
      pl=PerformerType.COMBO;
    }
 else {
      parameters(args,v);
      return;
    }
    if (handle.length() == 2) {
      char r=handle.charAt(1);
      if (r == 'm' || r == 'M') {
        this.replace=PerformerType.TYPE;
      }
 else       if (r == 'i' || r == 'I') {
        this.replace=PerformerType.STATE;
        v.sendMessage(TextColors.RED,""String_Node_Str"");
      }
 else       if (r == 'c' || r == 'C') {
        this.replace=PerformerType.COMBO;
      }
 else {
        parameters(args,v);
        return;
      }
    }
 else {
      this.replace=PerformerType.NONE;
    }
    this.place=pl;
    parameters(Arrays.copyOfRange(args,1,args.length),v);
  }
 else {
    parameters(args,v);
  }
}",0.9846827133479212
97793,"@Override protected final void arrow(final SnipeData v){
  if (this.file == null) {
    v.sendMessage(TextColors.RED,""String_Node_Str"");
    return;
  }
  if (this.pos1 == null || !this.worldUid.equals(this.targetBlock.getExtent().getUniqueId())) {
    this.pos1=this.targetBlock.getBlockPosition();
    this.pos2=null;
    this.worldUid=this.targetBlock.getExtent().getUniqueId();
    v.sendMessage(TextColors.GRAY,""String_Node_Str"");
  }
 else   if (this.pos2 == null) {
    this.pos2=this.targetBlock.getBlockPosition();
    v.sendMessage(TextColors.GRAY,""String_Node_Str"");
  }
 else {
    Vector3i origin=this.targetBlock.getBlockPosition();
    ArchetypeVolume volume=this.world.createArchetypeVolume(this.pos1,this.pos2,origin);
    this.schematic=Schematic.builder().paletteType(BlockPaletteTypes.LOCAL).volume(volume).metaValue(""String_Node_Str"",this.filename).metaValue(""String_Node_Str"",v.owner().getPlayer().getName()).metaValue(""String_Node_Str"",System.currentTimeMillis()).build();
    try (GZIPOutputStream out=new GZIPOutputStream(new FileOutputStream(this.file))){
      DataContainer data=DataTranslators.SCHEMATIC.translate(this.schematic);
      DataFormats.NBT.writeTo(out,data);
      v.sendMessage(TextColors.GREEN,""String_Node_Str"");
      this.lastMod=this.file.lastModified();
      this.pos1=null;
      this.pos2=null;
    }
 catch (    IOException e) {
      e.printStackTrace();
      v.sendMessage(TextColors.RED,""String_Node_Str"");
      return;
    }
  }
}","@Override protected final void arrow(final SnipeData v){
  if (this.file == null) {
    v.sendMessage(TextColors.RED,""String_Node_Str"");
    return;
  }
  if (this.pos1 == null || !this.worldUid.equals(this.targetBlock.getExtent().getUniqueId())) {
    this.pos1=this.targetBlock.getBlockPosition();
    this.pos2=null;
    this.worldUid=this.targetBlock.getExtent().getUniqueId();
    v.sendMessage(TextColors.GRAY,""String_Node_Str"");
  }
 else   if (this.pos2 == null) {
    this.pos2=this.targetBlock.getBlockPosition();
    v.sendMessage(TextColors.GRAY,""String_Node_Str"");
  }
 else {
    Vector3i origin=this.targetBlock.getBlockPosition();
    ArchetypeVolume volume=this.world.createArchetypeVolume(this.pos1,this.pos2,origin);
    this.schematic=Schematic.builder().paletteType(BlockPaletteTypes.LOCAL).volume(volume).metaValue(""String_Node_Str"",this.filename).metaValue(""String_Node_Str"",v.owner().getPlayer().getName()).metaValue(""String_Node_Str"",System.currentTimeMillis()).build();
    this.file.getParentFile().mkdirs();
    try (GZIPOutputStream out=new GZIPOutputStream(new FileOutputStream(this.file))){
      DataContainer data=DataTranslators.SCHEMATIC.translate(this.schematic);
      DataFormats.NBT.writeTo(out,data);
      v.sendMessage(TextColors.GREEN,""String_Node_Str"");
      this.lastMod=this.file.lastModified();
      this.pos1=null;
      this.pos2=null;
    }
 catch (    IOException e) {
      e.printStackTrace();
      v.sendMessage(TextColors.RED,""String_Node_Str"");
      return;
    }
  }
}",0.9867461895294898
97794,"@Override public final void parameters(final String[] par,final SnipeData v){
  if (par.length == 0) {
    v.sendMessage(TextColors.RED,""String_Node_Str"");
    return;
  }
  if (par[0].equalsIgnoreCase(""String_Node_Str"")) {
    v.sendMessage(TextColors.GOLD,""String_Node_Str"");
    v.sendMessage(TextColors.AQUA,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  if (!this.filename.equals(par[0])) {
    this.lastMod=0;
    this.schematic=null;
  }
  this.filename=par[0];
  File schematic=SchematicHelper.getSchematicsDir().resolve(this.filename + ""String_Node_Str"").toFile();
  if (schematic.exists()) {
    v.sendMessage(TextColors.RED,""String_Node_Str"" + this.filename + ""String_Node_Str"");
  }
 else {
    v.sendMessage(TextColors.AQUA,""String_Node_Str"" + this.filename + ""String_Node_Str"");
  }
  this.file=schematic;
  if (par.length > 1) {
    if (par[1].equalsIgnoreCase(""String_Node_Str"")) {
      this.pasteOption=PasteOption.FULL;
    }
 else     if (par[1].equalsIgnoreCase(""String_Node_Str"")) {
      this.pasteOption=PasteOption.FULL;
    }
 else     if (par[1].equalsIgnoreCase(""String_Node_Str"")) {
      this.pasteOption=PasteOption.FULL;
    }
 else {
      v.sendMessage(TextColors.RED,""String_Node_Str"");
      return;
    }
    v.sendMessage(TextColors.YELLOW,""String_Node_Str"" + this.pasteOption.name().toLowerCase());
  }
}","@Override public final void parameters(final String[] par,final SnipeData v){
  if (par.length == 0) {
    v.sendMessage(TextColors.RED,""String_Node_Str"");
    return;
  }
  if (par[0].equalsIgnoreCase(""String_Node_Str"")) {
    v.sendMessage(TextColors.GOLD,""String_Node_Str"");
    v.sendMessage(TextColors.AQUA,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  if (!par[0].equals(this.filename)) {
    this.lastMod=0;
    this.schematic=null;
  }
  this.filename=par[0];
  File schematic=SchematicHelper.getSchematicsDir().resolve(this.filename + ""String_Node_Str"").toFile();
  if (schematic.exists()) {
    v.sendMessage(TextColors.RED,""String_Node_Str"" + this.filename + ""String_Node_Str"");
  }
 else {
    v.sendMessage(TextColors.AQUA,""String_Node_Str"" + this.filename + ""String_Node_Str"");
  }
  this.file=schematic;
  if (par.length > 1) {
    if (par[1].equalsIgnoreCase(""String_Node_Str"")) {
      this.pasteOption=PasteOption.FULL;
    }
 else     if (par[1].equalsIgnoreCase(""String_Node_Str"")) {
      this.pasteOption=PasteOption.FULL;
    }
 else     if (par[1].equalsIgnoreCase(""String_Node_Str"")) {
      this.pasteOption=PasteOption.FULL;
    }
 else {
      v.sendMessage(TextColors.RED,""String_Node_Str"");
      return;
    }
    v.sendMessage(TextColors.YELLOW,""String_Node_Str"" + this.pasteOption.name().toLowerCase());
  }
}",0.984490398818316
97795,"public void set(int x,int y,int z,BlockState state){
  if (state == null) {
    if (this.buffer[index(x,y,z)] != Character.MAX_VALUE) {
      this.count--;
      this.buffer[index(x,y,z)]=Character.MAX_VALUE;
    }
    return;
  }
  if (this.buffer[index(x,y,z)] == Character.MAX_VALUE) {
    this.count++;
  }
  int id=this.palette.getOrAssign(state);
  this.buffer[index(x,y,z)]=(char)id;
}","public void set(int x,int y,int z,BlockState state){
  if (x < this.min.getX() || x > this.max.getX() || y < this.min.getY() || y > this.max.getY() || z < this.min.getZ() || z > this.max.getZ()) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.min + ""String_Node_Str""+ this.max+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
  }
  if (state == null) {
    if (this.buffer[index(x,y,z)] != Character.MAX_VALUE) {
      this.count--;
      this.buffer[index(x,y,z)]=Character.MAX_VALUE;
    }
    return;
  }
  if (this.buffer[index(x,y,z)] == Character.MAX_VALUE) {
    this.count++;
  }
  int id=this.palette.getOrAssign(state);
  this.buffer[index(x,y,z)]=(char)id;
}",0.7018800358102059
97796,"public BlockState get(int x,int y,int z){
  char id=this.buffer[index(x,y,z)];
  if (id == Character.MAX_VALUE) {
    return null;
  }
  return this.palette.get(id).get();
}","public BlockState get(int x,int y,int z){
  if (x < this.min.getX() || x > this.max.getX() || y < this.min.getY() || y > this.max.getY() || z < this.min.getZ() || z > this.max.getZ()) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.min + ""String_Node_Str""+ this.max+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
  }
  char id=this.buffer[index(x,y,z)];
  if (id == Character.MAX_VALUE) {
    return null;
  }
  return this.palette.get(id).get();
}",0.5095729013254786
97797,"private int index(int x,int y,int z){
  return x + y * this.size.getX() + z * this.size.getX() * this.size.getY();
}","private int index(int x,int y,int z){
  x-=this.min.getX();
  y-=this.min.getY();
  z-=this.min.getZ();
  return x + y * this.size.getX() + z * this.size.getX() * this.size.getY();
}",0.7785234899328859
97798,"/** 
 * Display voxel type.
 */
public void voxel(){
  this.snipeData.sendMessage(TextColors.GOLD,""String_Node_Str"",TextColors.RED,this.snipeData.getVoxelId(),TextColors.GRAY,""String_Node_Str"",this.snipeData.getVoxelId(),""String_Node_Str"");
}","/** 
 * Display voxel type.
 */
public void voxel(){
  this.snipeData.sendMessage(TextColors.GOLD,""String_Node_Str"",TextColors.RED,this.snipeData.getVoxelId());
}",0.801980198019802
97799,"private void ball(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  int size=GenericMath.floor(brushSize) + 1;
  for (int x=-size; x <= size; x++) {
    for (int y=-size; y <= size; y++) {
      for (int z=-size; z <= size; z++) {
        if (x * x + y * y + z * z < brushSizeSquared) {
          perform(v,x + tx,y + ty,z + tz);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void ball(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(ty - y) * (ty - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(tz - z) * (tz - z);
        if (xs + ys + zs < brushSizeSquared) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.5491024287222809
97800,"@Override protected final void arrow(final SnipeData v){
  this.biome(v);
}","@Override protected final void arrow(final SnipeData v){
  this.biome(v,this.targetBlock);
}",0.8982035928143712
97801,"private void biome(final SnipeData v){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(this.targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(this.targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(this.targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(this.targetBlock.getBlockZ() + brushSize) + 1;
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if ((xs + zs) <= brushSizeSquared) {
        this.world.setBiome(x,z,this.selectedBiome);
      }
    }
  }
}","private void biome(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(this.targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(this.targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(this.targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(this.targetBlock.getBlockZ() + brushSize) + 1;
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if ((xs + zs) <= brushSizeSquared) {
        this.world.setBiome(x,z,this.selectedBiome);
      }
    }
  }
}",0.1596180081855388
97802,"@Override protected final void powder(final SnipeData v){
  this.biome(v);
}","@Override protected final void powder(final SnipeData v){
  this.biome(v,this.lastBlock);
}",0.9101796407185628
97803,"private void applyBrush(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs + zs < brushSizeSquared) {
        final int sum=this.useWorldCoordinates ? x + z : x - minx + z - minz;
        if (sum % 2 != 0) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void applyBrush(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs + zs < brushSizeSquared) {
        final int sum=this.useWorldCoordinates ? x + z : x - tx + z - tx;
        if (sum % 2 != 0) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.7661538461538462
97804,"private void cleanSnow(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  if (miny <= 0) {
    miny=1;
  }
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      for (int y=maxy; y >= miny; y--) {
        double ys=(miny - y) * (miny - y);
        if (xs + ys + zs < brushSizeSquared) {
          BlockType below=this.world.getBlockType(x,y,z);
          if (below == BlockTypes.SNOW_LAYER || below == BlockTypes.AIR) {
            setBlockType(x,y,z,BlockTypes.AIR);
          }
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void cleanSnow(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  if (miny <= 0) {
    miny=1;
  }
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      for (int y=maxy; y >= miny; y--) {
        double ys=(ty - y) * (ty - y);
        if (xs + ys + zs < brushSizeSquared) {
          BlockType below=this.world.getBlockType(x,y,z);
          if (below == BlockTypes.SNOW_LAYER || below == BlockTypes.AIR) {
            setBlockType(x,y,z,BlockTypes.AIR);
          }
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.9532640949554896
97805,"private void cylinder(SnipeData v,Location<World> targetBlock){
  int yStartingPoint=targetBlock.getBlockY() + v.getcCen();
  int yEndPoint=targetBlock.getBlockY() + v.getVoxelHeight() + v.getcCen();
  if (yEndPoint < yStartingPoint) {
    yEndPoint=yStartingPoint;
  }
  if (yStartingPoint < 0) {
    yStartingPoint=0;
  }
 else   if (yStartingPoint > WORLD_HEIGHT) {
    yStartingPoint=WORLD_HEIGHT;
  }
  if (yEndPoint < 0) {
    yEndPoint=0;
  }
 else   if (yEndPoint > WORLD_HEIGHT) {
    yEndPoint=WORLD_HEIGHT;
  }
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs + zs < brushSizeSquared) {
        for (int y=yEndPoint; y >= yStartingPoint; y--) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void cylinder(SnipeData v,Location<World> targetBlock){
  int yStartingPoint=targetBlock.getBlockY() + v.getcCen();
  int yEndPoint=targetBlock.getBlockY() + v.getVoxelHeight() + v.getcCen();
  if (yEndPoint < yStartingPoint) {
    yEndPoint=yStartingPoint;
  }
  if (yStartingPoint < 0) {
    yStartingPoint=0;
  }
 else   if (yStartingPoint > WORLD_HEIGHT) {
    yStartingPoint=WORLD_HEIGHT;
  }
  if (yEndPoint < 0) {
    yEndPoint=0;
  }
 else   if (yEndPoint > WORLD_HEIGHT) {
    yEndPoint=WORLD_HEIGHT;
  }
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs + zs < brushSizeSquared) {
        for (int y=yEndPoint; y >= yStartingPoint; y--) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.9696750902527076
97806,"private void disc(final SnipeData v,final Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs + zs < brushSizeSquared) {
        perform(v,x,targetBlock.getBlockY(),z);
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void disc(final SnipeData v,final Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs + zs < brushSizeSquared) {
        perform(v,x,targetBlock.getBlockY(),z);
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.8670520231213873
97807,"private void disc(final SnipeData v,Location<World> targetBlock,Direction axis){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs + zs < brushSizeSquared) {
        if (axis == Direction.UP) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
 else         if (axis == Direction.NORTH) {
          perform(v,x,z,targetBlock.getBlockZ());
        }
 else         if (axis == Direction.EAST) {
          perform(v,targetBlock.getBlockX(),x,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void disc(final SnipeData v,Location<World> targetBlock,Direction axis){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  this.undo=new Undo(GenericMath.floor(Math.PI * (brushSize + 1) * (brushSize + 1)));
  int size=GenericMath.floor(brushSize) + 1;
  for (int x=-size; x <= size; x++) {
    for (int z=-size; z <= size; z++) {
      if (x * x + z * z < brushSizeSquared) {
        if (axis == Direction.UP) {
          perform(v,x + tx,targetBlock.getBlockY(),z + tz);
        }
 else         if (axis == Direction.NORTH) {
          perform(v,x + tx,z + ty,targetBlock.getBlockZ());
        }
 else         if (axis == Direction.EAST) {
          perform(v,targetBlock.getBlockX(),x + ty,z + tz);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.7208271787296898
97808,"private void ellipse(final SnipeData v,Location<World> targetBlock,Direction axis){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.yrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.yrad) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (this.xrad + 1) * (this.yrad + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs / xrads + zs / yrads < 1) {
        if (axis == Direction.UP) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
 else         if (axis == Direction.NORTH) {
          perform(v,x,z,targetBlock.getBlockZ());
        }
 else         if (axis == Direction.EAST) {
          perform(v,targetBlock.getBlockX(),x,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void ellipse(final SnipeData v,Location<World> targetBlock,Direction axis){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.yrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.yrad) + 1;
  this.undo=new Undo(GenericMath.floor(Math.PI * (this.xrad + 1) * (this.yrad + 1)));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs / xrads + zs / yrads < 1) {
        if (axis == Direction.UP) {
          perform(v,x,targetBlock.getBlockY(),z);
        }
 else         if (axis == Direction.NORTH) {
          perform(v,x,z,targetBlock.getBlockZ());
        }
 else         if (axis == Direction.EAST) {
          perform(v,targetBlock.getBlockX(),x,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.9626666666666668
97809,"private void ellipsoid(final SnipeData v,Location<World> targetBlock){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  double zrads=this.zrad * this.zrad;
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - this.yrad),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + this.yrad) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.zrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.zrad) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (this.xrad + 1)* (this.yrad + 1)* (this.zrad + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(miny - y) * (miny - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(minz - z) * (minz - z);
        if (xs / xrads + ys / yrads + zs / zrads < 1) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void ellipsoid(final SnipeData v,Location<World> targetBlock){
  double xrads=this.xrad * this.xrad;
  double yrads=this.yrad * this.yrad;
  double zrads=this.zrad * this.zrad;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - this.xrad);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + this.xrad) + 1;
  int miny=Math.max(GenericMath.floor(targetBlock.getBlockY() - this.yrad),0);
  int maxy=Math.min(GenericMath.floor(targetBlock.getBlockY() + this.yrad) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(targetBlock.getBlockZ() - this.zrad);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + this.zrad) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (this.xrad + 1)* (this.yrad + 1)* (this.zrad + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(ty - y) * (ty - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(tz - z) * (tz - z);
        if (xs / xrads + ys / yrads + zs / zrads < 1) {
          perform(v,x,y,z);
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.9472361809045228
97810,"private void radialRemoval(SnipeData v){
  Vector3i chunkPos=this.targetBlock.getChunkPosition();
  int entityCount=0;
  int chunkCount=0;
  int radius=(int)Math.round(v.getBrushSize() / 16);
  int radiusSquared=radius * radius;
  for (int x=chunkPos.getX() - radius; x <= chunkPos.getX() + radius; x++) {
    for (int z=chunkPos.getZ() - radius; z <= chunkPos.getZ() + radius; z++) {
      if (x * x + z * z < radiusSquared) {
        Optional<Chunk> chunk=this.world.getChunk(x,0,z);
        if (chunk.isPresent()) {
          entityCount+=removeEntities(chunk.get());
          chunkCount++;
        }
      }
    }
  }
  v.sendMessage(TextColors.GREEN + ""String_Node_Str"" + TextColors.RED+ entityCount+ TextColors.GREEN+ ""String_Node_Str""+ TextColors.BLUE+ chunkCount+ TextColors.GREEN+ (chunkCount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
}","private void radialRemoval(SnipeData v){
  int cx=this.targetBlock.getChunkPosition().getX();
  int cz=this.targetBlock.getChunkPosition().getZ();
  int entityCount=0;
  int chunkCount=0;
  int radius=(int)Math.round(v.getBrushSize() / 16);
  int radiusSquared=radius * radius;
  for (int x=-radius; x <= radius; x++) {
    for (int z=-radius; z <= radius; z++) {
      if (x * x + z * z < radiusSquared) {
        Optional<Chunk> chunk=this.world.getChunk(x + cx,0,z + cz);
        if (chunk.isPresent()) {
          entityCount+=removeEntities(chunk.get());
          chunkCount++;
        }
      }
    }
  }
  v.sendMessage(TextColors.GREEN + ""String_Node_Str"" + TextColors.RED+ entityCount+ TextColors.GREEN+ ""String_Node_Str""+ TextColors.BLUE+ chunkCount+ TextColors.GREEN+ (chunkCount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
}",0.9119905493207324
97811,"private void fillDown(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(minz - z) * (minz - z);
      if (xs + zs < brushSizeSquared) {
        int y=targetBlock.getBlockY();
        if (this.fromExisting) {
          for (int y0=-v.getVoxelHeight(); y0 < v.getVoxelHeight(); y0++) {
            if (this.world.getBlock(x,y + y0,z) != v.getReplaceIdState()) {
              y+=y0 - 1;
              break;
            }
          }
        }
        for (; y >= 0; y--) {
          if (this.replace != PerformerType.NONE) {
            if (!perform(v,x,y,z)) {
              break;
            }
          }
 else {
            BlockState current=this.world.getBlock(x,y,z);
            if (current.getType() == BlockTypes.AIR) {
              perform(v,x,y,z);
            }
 else             if (this.fillLiquid) {
              Optional<MatterProperty> matter=current.getProperty(MatterProperty.class);
              if (matter.isPresent()) {
                Matter m=matter.get().getValue();
                if (m == Matter.LIQUID) {
                  perform(v,x,y,z);
                }
              }
            }
          }
        }
      }
    }
  }
}","private void fillDown(SnipeData v,Location<World> targetBlock){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(targetBlock.getBlockX() + brushSize) + 1;
  int minz=GenericMath.floor(targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int z=minz; z <= maxz; z++) {
      double zs=(tz - z) * (tz - z);
      if (xs + zs < brushSizeSquared) {
        int y=targetBlock.getBlockY();
        if (this.fromExisting) {
          for (int y0=-v.getVoxelHeight(); y0 < v.getVoxelHeight(); y0++) {
            if (this.world.getBlock(x,y + y0,z) != v.getReplaceIdState()) {
              y+=y0 - 1;
              break;
            }
          }
        }
        for (; y >= 0; y--) {
          if (this.replace != PerformerType.NONE) {
            if (!perform(v,x,y,z)) {
              break;
            }
          }
 else {
            BlockState current=this.world.getBlock(x,y,z);
            if (current.getType() == BlockTypes.AIR) {
              perform(v,x,y,z);
            }
 else             if (this.fillLiquid) {
              Optional<MatterProperty> matter=current.getProperty(MatterProperty.class);
              if (matter.isPresent()) {
                Matter m=matter.get().getValue();
                if (m == Matter.LIQUID) {
                  perform(v,x,y,z);
                }
              }
            }
          }
        }
      }
    }
  }
}",0.9765231973169368
97812,"@Override protected final void arrow(final SnipeData v){
}","@Override protected final void arrow(final SnipeData v){
  Entity e=this.world.createEntity(EntityTypes.LIGHTNING,this.targetBlock.getBlockPosition());
  this.world.spawnEntity(e,this.cause);
}",0.4621513944223107
97813,"@Override protected final void powder(final SnipeData v){
}","@Override protected final void powder(final SnipeData v){
  arrow(v);
}",0.9076923076923076
97814,"private void rotate(final SnipeData v){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int minx=GenericMath.floor(this.targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(this.targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(this.targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(this.targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(this.targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(this.targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(minx - x) * (minx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(miny - y) * (miny - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(minz - z) * (minz - z);
        if (xs + ys + zs < brushSizeSquared) {
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}","private void rotate(final SnipeData v){
  double brushSize=v.getBrushSize();
  double brushSizeSquared=brushSize * brushSize;
  int tx=targetBlock.getBlockX();
  int ty=targetBlock.getBlockY();
  int tz=targetBlock.getBlockZ();
  int minx=GenericMath.floor(this.targetBlock.getBlockX() - brushSize);
  int maxx=GenericMath.floor(this.targetBlock.getBlockX() + brushSize) + 1;
  int miny=Math.max(GenericMath.floor(this.targetBlock.getBlockY() - brushSize),0);
  int maxy=Math.min(GenericMath.floor(this.targetBlock.getBlockY() + brushSize) + 1,WORLD_HEIGHT);
  int minz=GenericMath.floor(this.targetBlock.getBlockZ() - brushSize);
  int maxz=GenericMath.floor(this.targetBlock.getBlockZ() + brushSize) + 1;
  this.undo=new Undo(GenericMath.floor(4 * Math.PI * (brushSize + 1)* (brushSize + 1)* (brushSize + 1) / 3));
  for (int x=minx; x <= maxx; x++) {
    double xs=(tx - x) * (tx - x);
    for (int y=miny; y <= maxy; y++) {
      double ys=(ty - y) * (ty - y);
      for (int z=minz; z <= maxz; z++) {
        double zs=(tz - z) * (tz - z);
        if (xs + ys + zs < brushSizeSquared) {
        }
      }
    }
  }
  v.owner().storeUndo(this.undo);
  this.undo=null;
}",0.9441489361702128
97815,"/** 
 * Padds an empty String to the front of the array.
 * @param args Array to pad empty string in front of
 * @return padded array
 */
protected String[] hackTheArray(String[] args){
  String[] returnValue=new String[args.length + 1];
  for (int i=0, argsLength=args.length; i < argsLength; i++) {
    String arg=args[i];
    returnValue[i + 1]=arg;
  }
  return returnValue;
}","/** 
 * Padds an empty String to the front of the array.
 * @param args Array to pad empty string in front of
 * @return padded array
 */
protected String[] hackTheArray(String[] args){
  String[] returnValue=new String[args.length + 1];
  returnValue[0]=""String_Node_Str"";
  for (int i=0, argsLength=args.length; i < argsLength; i++) {
    String arg=args[i];
    returnValue[i + 1]=arg;
  }
  return returnValue;
}",0.9547738693467336
97816,"/** 
 * Sniper execution call.
 * @param action       Action player performed
 * @param itemInHand   Item in hand of player
 * @param clickedBlock Block that the player targeted/interacted with
 * @param clickedFace  Face of that targeted Block
 * @return true if command visibly processed, false otherwise.
 */
public boolean snipe(Action action,Material itemInHand,Block clickedBlock,BlockFace clickedFace){
  String toolId=getToolId(itemInHand);
  SniperTool sniperTool=tools.get(toolId);
  if (sniperTool.getCurrentBrush() == null) {
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  if (!player.hasPermission(sniperTool.getCurrentBrush().getPermissionNode())) {
    player.sendMessage(""String_Node_Str"" + sniperTool.getCurrentBrush().getPermissionNode() + ""String_Node_Str"");
    return true;
  }
  if (sniperTool.hasToolAssigned(itemInHand)) {
    SnipeData snipeData=sniperTool.getSnipeData();
    if (player.isSneaking()) {
      Block targetBlock;
      SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand);
switch (action) {
case LEFT_CLICK_BLOCK:
case LEFT_CLICK_AIR:
        if (clickedBlock != null) {
          targetBlock=clickedBlock;
        }
 else {
          RangeBlockHelper rangeBlockHelper=snipeData.isRanged() ? new RangeBlockHelper(player,player.getWorld(),snipeData.getRange()) : new RangeBlockHelper(player,player.getWorld());
          targetBlock=snipeData.isRanged() ? rangeBlockHelper.getRangeBlock() : rangeBlockHelper.getTargetBlock();
        }
switch (snipeAction) {
case ARROW:
        if (targetBlock != null) {
          int originalVoxel=snipeData.getVoxelId();
          snipeData.setVoxelId(targetBlock.getTypeId());
          SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(originalVoxel,snipeData.getData()),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
          Bukkit.getPluginManager().callEvent(event);
          snipeData.getVoxelMessage().voxel();
          return true;
        }
 else {
          int originalVoxel=snipeData.getVoxelId();
          snipeData.setVoxelId(0);
          SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(originalVoxel,snipeData.getData()),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
          Bukkit.getPluginManager().callEvent(event);
          snipeData.getVoxelMessage().voxel();
          return true;
        }
case GUNPOWDER:
      if (targetBlock != null) {
        byte originalData=snipeData.getData();
        snipeData.setData(targetBlock.getData());
        SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getVoxelId(),originalData),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
        Bukkit.getPluginManager().callEvent(event);
        snipeData.getVoxelMessage().data();
        return true;
      }
 else {
        byte originalData=snipeData.getData();
        snipeData.setData((byte)0);
        SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getVoxelId(),originalData),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
        Bukkit.getPluginManager().callEvent(event);
        snipeData.getVoxelMessage().data();
        return true;
      }
default :
    break;
}
break;
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
if (clickedBlock != null) {
targetBlock=clickedBlock;
}
 else {
RangeBlockHelper rangeBlockHelper=snipeData.isRanged() ? new RangeBlockHelper(player,player.getWorld(),snipeData.getRange()) : new RangeBlockHelper(player,player.getWorld());
targetBlock=snipeData.isRanged() ? rangeBlockHelper.getRangeBlock() : rangeBlockHelper.getTargetBlock();
}
switch (snipeAction) {
case ARROW:
if (targetBlock != null) {
int originalId=snipeData.getReplaceId();
snipeData.setReplaceId(targetBlock.getTypeId());
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(originalId,snipeData.getReplaceData()),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replace();
return true;
}
 else {
int originalId=snipeData.getReplaceId();
snipeData.setReplaceId(0);
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(originalId,snipeData.getReplaceData()),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replace();
return true;
}
case GUNPOWDER:
if (targetBlock != null) {
byte originalData=snipeData.getReplaceData();
snipeData.setReplaceData(targetBlock.getData());
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getReplaceId(),originalData),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replaceData();
return true;
}
 else {
byte originalData=snipeData.getReplaceData();
snipeData.setReplaceData((byte)0);
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getReplaceId(),originalData),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replaceData();
return true;
}
default :
break;
}
break;
default :
return false;
}
}
 else {
Block targetBlock;
Block lastBlock;
SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand);
switch (action) {
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
break;
default :
return false;
}
if (clickedBlock != null) {
targetBlock=clickedBlock;
lastBlock=clickedBlock.getRelative(clickedFace);
if (lastBlock == null) {
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
}
 else {
RangeBlockHelper rangeBlockHelper=snipeData.isRanged() ? new RangeBlockHelper(player,player.getWorld(),snipeData.getRange()) : new RangeBlockHelper(player,player.getWorld());
targetBlock=snipeData.isRanged() ? rangeBlockHelper.getRangeBlock() : rangeBlockHelper.getTargetBlock();
lastBlock=rangeBlockHelper.getLastBlock();
if (targetBlock == null || lastBlock == null) {
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
}
if (sniperTool.getCurrentBrush() instanceof PerformBrush) {
PerformBrush performerBrush=(PerformBrush)sniperTool.getCurrentBrush();
performerBrush.initP(snipeData);
}
boolean result=sniperTool.getCurrentBrush().perform(snipeAction,snipeData,targetBlock,lastBlock);
if (result) {
MetricsManager.increaseBrushUsage(sniperTool.getCurrentBrush().getName());
}
return result;
}
}
return false;
}","/** 
 * Sniper execution call.
 * @param action       Action player performed
 * @param itemInHand   Item in hand of player
 * @param clickedBlock Block that the player targeted/interacted with
 * @param clickedFace  Face of that targeted Block
 * @return true if command visibly processed, false otherwise.
 */
public boolean snipe(Action action,Material itemInHand,Block clickedBlock,BlockFace clickedFace){
  String toolId=getToolId(itemInHand);
  SniperTool sniperTool=tools.get(toolId);
switch (action) {
case LEFT_CLICK_AIR:
case LEFT_CLICK_BLOCK:
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
    break;
default :
  return false;
}
if (sniperTool.hasToolAssigned(itemInHand)) {
if (sniperTool.getCurrentBrush() == null) {
  player.sendMessage(""String_Node_Str"");
  return true;
}
if (!player.hasPermission(sniperTool.getCurrentBrush().getPermissionNode())) {
  player.sendMessage(""String_Node_Str"" + sniperTool.getCurrentBrush().getPermissionNode() + ""String_Node_Str"");
  return true;
}
SnipeData snipeData=sniperTool.getSnipeData();
if (player.isSneaking()) {
  Block targetBlock;
  SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand);
switch (action) {
case LEFT_CLICK_BLOCK:
case LEFT_CLICK_AIR:
    if (clickedBlock != null) {
      targetBlock=clickedBlock;
    }
 else {
      RangeBlockHelper rangeBlockHelper=snipeData.isRanged() ? new RangeBlockHelper(player,player.getWorld(),snipeData.getRange()) : new RangeBlockHelper(player,player.getWorld());
      targetBlock=snipeData.isRanged() ? rangeBlockHelper.getRangeBlock() : rangeBlockHelper.getTargetBlock();
    }
switch (snipeAction) {
case ARROW:
    if (targetBlock != null) {
      int originalVoxel=snipeData.getVoxelId();
      snipeData.setVoxelId(targetBlock.getTypeId());
      SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(originalVoxel,snipeData.getData()),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
      Bukkit.getPluginManager().callEvent(event);
      snipeData.getVoxelMessage().voxel();
      return true;
    }
 else {
      int originalVoxel=snipeData.getVoxelId();
      snipeData.setVoxelId(0);
      SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(originalVoxel,snipeData.getData()),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
      Bukkit.getPluginManager().callEvent(event);
      snipeData.getVoxelMessage().voxel();
      return true;
    }
case GUNPOWDER:
  if (targetBlock != null) {
    byte originalData=snipeData.getData();
    snipeData.setData(targetBlock.getData());
    SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getVoxelId(),originalData),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
    Bukkit.getPluginManager().callEvent(event);
    snipeData.getVoxelMessage().data();
    return true;
  }
 else {
    byte originalData=snipeData.getData();
    snipeData.setData((byte)0);
    SniperMaterialChangedEvent event=new SniperMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getVoxelId(),originalData),new MaterialData(snipeData.getVoxelId(),snipeData.getData()));
    Bukkit.getPluginManager().callEvent(event);
    snipeData.getVoxelMessage().data();
    return true;
  }
default :
break;
}
break;
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
if (clickedBlock != null) {
targetBlock=clickedBlock;
}
 else {
RangeBlockHelper rangeBlockHelper=snipeData.isRanged() ? new RangeBlockHelper(player,player.getWorld(),snipeData.getRange()) : new RangeBlockHelper(player,player.getWorld());
targetBlock=snipeData.isRanged() ? rangeBlockHelper.getRangeBlock() : rangeBlockHelper.getTargetBlock();
}
switch (snipeAction) {
case ARROW:
if (targetBlock != null) {
int originalId=snipeData.getReplaceId();
snipeData.setReplaceId(targetBlock.getTypeId());
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(originalId,snipeData.getReplaceData()),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replace();
return true;
}
 else {
int originalId=snipeData.getReplaceId();
snipeData.setReplaceId(0);
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(originalId,snipeData.getReplaceData()),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replace();
return true;
}
case GUNPOWDER:
if (targetBlock != null) {
byte originalData=snipeData.getReplaceData();
snipeData.setReplaceData(targetBlock.getData());
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getReplaceId(),originalData),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replaceData();
return true;
}
 else {
byte originalData=snipeData.getReplaceData();
snipeData.setReplaceData((byte)0);
SniperReplaceMaterialChangedEvent event=new SniperReplaceMaterialChangedEvent(this,toolId,new MaterialData(snipeData.getReplaceId(),originalData),new MaterialData(snipeData.getReplaceId(),snipeData.getReplaceData()));
Bukkit.getPluginManager().callEvent(event);
snipeData.getVoxelMessage().replaceData();
return true;
}
default :
break;
}
break;
default :
return false;
}
}
 else {
Block targetBlock;
Block lastBlock;
SnipeAction snipeAction=sniperTool.getActionAssigned(itemInHand);
switch (action) {
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
break;
default :
return false;
}
if (clickedBlock != null) {
targetBlock=clickedBlock;
lastBlock=clickedBlock.getRelative(clickedFace);
if (lastBlock == null) {
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
}
 else {
RangeBlockHelper rangeBlockHelper=snipeData.isRanged() ? new RangeBlockHelper(player,player.getWorld(),snipeData.getRange()) : new RangeBlockHelper(player,player.getWorld());
targetBlock=snipeData.isRanged() ? rangeBlockHelper.getRangeBlock() : rangeBlockHelper.getTargetBlock();
lastBlock=rangeBlockHelper.getLastBlock();
if (targetBlock == null || lastBlock == null) {
player.sendMessage(ChatColor.RED + ""String_Node_Str"");
return true;
}
}
if (sniperTool.getCurrentBrush() instanceof PerformBrush) {
PerformBrush performerBrush=(PerformBrush)sniperTool.getCurrentBrush();
performerBrush.initP(snipeData);
}
boolean result=sniperTool.getCurrentBrush().perform(snipeAction,snipeData,targetBlock,lastBlock);
if (result) {
MetricsManager.increaseBrushUsage(sniperTool.getCurrentBrush().getName());
}
return result;
}
}
return false;
}",0.4637189045545139
97817,"private void doFireball(final SnipeData v){
  final Vector targetCoords=new Vector(this.getTargetBlock().getX() + .5 * this.getTargetBlock().getX() / Math.abs(this.getTargetBlock().getX()),this.getTargetBlock().getY() + .5,this.getTargetBlock().getZ() + .5 * this.getTargetBlock().getZ() / Math.abs(this.getTargetBlock().getZ()));
  final Location playerLocation=v.owner().getPlayer().getLocation();
  final Vector slope=targetCoords.subtract(playerLocation.toVector());
  if (useBigBalls) {
    v.owner().getPlayer().launchProjectile(LargeFireball.class).setVelocity(slope.normalize());
  }
 else {
    v.owner().getPlayer().launchProjectile(SmallFireball.class).setVelocity(slope.normalize());
  }
}","private void doFireball(final SnipeData v){
  final Vector targetCoords=new Vector(this.getTargetBlock().getX() + .5 * this.getTargetBlock().getX() / Math.abs(this.getTargetBlock().getX()),this.getTargetBlock().getY() + .5,this.getTargetBlock().getZ() + .5 * this.getTargetBlock().getZ() / Math.abs(this.getTargetBlock().getZ()));
  final Location playerLocation=v.owner().getPlayer().getEyeLocation();
  final Vector slope=targetCoords.subtract(playerLocation.toVector());
  if (useBigBalls) {
    v.owner().getPlayer().launchProjectile(LargeFireball.class).setVelocity(slope.normalize());
  }
 else {
    v.owner().getPlayer().launchProjectile(SmallFireball.class).setVelocity(slope.normalize());
  }
}",0.997864768683274
97818,"/** 
 * Displaye replace material.
 */
public void replace(){
  if (snipeData.owner().isPrintout()) {
    snipeData.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ snipeData.getReplaceId()+ ChatColor.GRAY+ ""String_Node_Str""+ Material.getMaterial(snipeData.getReplaceId()).toString()+ ""String_Node_Str"");
  }
}","/** 
 * Displaye replace material.
 */
@SuppressWarnings(""String_Node_Str"") public void replace(){
  if (snipeData.owner().isPrintout()) {
    snipeData.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ snipeData.getReplaceId()+ ChatColor.GRAY+ ""String_Node_Str""+ Material.getMaterial(snipeData.getReplaceId()).toString()+ ""String_Node_Str"");
  }
}",0.9461426491994176
97819,"/** 
 * Display voxel type.
 */
public void voxel(){
  if (snipeData.owner().isPrintout()) {
    snipeData.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ snipeData.getVoxelId()+ ChatColor.GRAY+ ""String_Node_Str""+ Material.getMaterial(snipeData.getVoxelId()).toString()+ ""String_Node_Str"");
  }
}","/** 
 * Display voxel type.
 */
@SuppressWarnings(""String_Node_Str"") public void voxel(){
  if (snipeData.owner().isPrintout()) {
    snipeData.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.RED+ snipeData.getVoxelId()+ ChatColor.GRAY+ ""String_Node_Str""+ Material.getMaterial(snipeData.getVoxelId()).toString()+ ""String_Node_Str"");
  }
}",0.9440242057488654
97820,"@SuppressWarnings(""String_Node_Str"") private void stencilSave(final SnipeData v){
  final File file=new File(""String_Node_Str"" + this.filename + ""String_Node_Str"");
  try {
    this.x=(short)(Math.abs((this.firstPoint[0] - this.secondPoint[0])) + 1);
    this.z=(short)(Math.abs((this.firstPoint[1] - this.secondPoint[1])) + 1);
    this.y=(short)(Math.abs((this.firstPoint[2] - this.secondPoint[2])) + 1);
    this.xRef=(short)((this.firstPoint[0] > this.secondPoint[0]) ? (this.pastePoint[0] - this.secondPoint[0]) : (this.pastePoint[0] - this.firstPoint[0]));
    this.zRef=(short)((this.firstPoint[1] > this.secondPoint[1]) ? (this.pastePoint[1] - this.secondPoint[1]) : (this.pastePoint[1] - this.firstPoint[1]));
    this.yRef=(short)((this.firstPoint[2] > this.secondPoint[2]) ? (this.pastePoint[2] - this.secondPoint[2]) : (this.pastePoint[2] - this.firstPoint[2]));
    if ((this.x * this.y * this.z) > 50000) {
      v.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      return;
    }
    Files.createParentDirs(file);
    file.createNewFile();
    final DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
    int blockPositionX=(this.firstPoint[0] > this.secondPoint[0]) ? this.secondPoint[0] : this.firstPoint[0];
    int blockPositionZ=(this.firstPoint[1] > this.secondPoint[1]) ? this.secondPoint[1] : this.firstPoint[1];
    int blockPositionY=(this.firstPoint[2] > this.secondPoint[2]) ? this.secondPoint[2] : this.firstPoint[2];
    out.writeShort(this.x);
    out.writeShort(this.z);
    out.writeShort(this.y);
    out.writeShort(this.xRef);
    out.writeShort(this.zRef);
    out.writeShort(this.yRef);
    v.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + this.x * this.z * this.y + ""String_Node_Str"" + blockPositionX + ""String_Node_Str"" + blockPositionZ + ""String_Node_Str"" + blockPositionY);
    this.blockArray=new byte[this.x * this.z * this.y];
    this.dataArray=new byte[this.x * this.z * this.y];
    this.runSizeArray=new byte[this.x * this.z * this.y];
    byte lastId=(byte)(this.getWorld().getBlockTypeIdAt(blockPositionX,blockPositionY,blockPositionZ) - 128);
    byte lastData=(byte)(this.clampY(blockPositionX,blockPositionY,blockPositionZ).getData() - 128);
    byte thisId;
    byte thisData;
    int counter=0;
    int arrayIndex=0;
    for (int y=0; y < this.y; y++) {
      for (int z=0; z < this.z; z++) {
        for (int x=0; x < this.x; x++) {
          Block currentBlock=getWorld().getBlockAt(blockPositionX + x,blockPositionY + y,blockPositionZ + z);
          thisId=(byte)(currentBlock.getTypeId() - 128);
          thisData=(byte)(currentBlock.getData() - 128);
          if (thisId != lastId || thisData != lastData || counter == 255) {
            this.blockArray[arrayIndex]=lastId;
            this.dataArray[arrayIndex]=lastData;
            this.runSizeArray[arrayIndex]=(byte)(counter - 128);
            arrayIndex++;
            counter=1;
            lastId=thisId;
            lastData=thisData;
          }
 else {
            counter++;
            lastId=thisId;
            lastData=thisData;
          }
        }
      }
    }
    this.blockArray[arrayIndex]=lastId;
    this.dataArray[arrayIndex]=lastData;
    this.runSizeArray[arrayIndex]=(byte)(counter - 128);
    out.writeInt(arrayIndex);
    for (int i=0; i < arrayIndex + 1; i++) {
      if (this.runSizeArray[i] > -127) {
        out.writeBoolean(true);
        out.writeByte(this.runSizeArray[i]);
        out.writeByte(this.blockArray[i]);
        out.writeByte(this.dataArray[i]);
      }
 else {
        out.writeBoolean(false);
        out.writeByte(this.blockArray[i]);
        out.writeByte(this.dataArray[i]);
      }
    }
    v.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + this.filename+ ""String_Node_Str"");
    out.close();
  }
 catch (  final Exception exception) {
    v.sendMessage(ChatColor.RED + ""String_Node_Str"");
    exception.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") private void stencilSave(final SnipeData v){
  final File file=new File(""String_Node_Str"" + this.filename + ""String_Node_Str"");
  try {
    this.x=(short)(Math.abs((this.firstPoint[0] - this.secondPoint[0])) + 1);
    this.z=(short)(Math.abs((this.firstPoint[1] - this.secondPoint[1])) + 1);
    this.y=(short)(Math.abs((this.firstPoint[2] - this.secondPoint[2])) + 1);
    this.xRef=(short)((this.firstPoint[0] > this.secondPoint[0]) ? (this.pastePoint[0] - this.secondPoint[0]) : (this.pastePoint[0] - this.firstPoint[0]));
    this.zRef=(short)((this.firstPoint[1] > this.secondPoint[1]) ? (this.pastePoint[1] - this.secondPoint[1]) : (this.pastePoint[1] - this.firstPoint[1]));
    this.yRef=(short)((this.firstPoint[2] > this.secondPoint[2]) ? (this.pastePoint[2] - this.secondPoint[2]) : (this.pastePoint[2] - this.firstPoint[2]));
    if ((this.x * this.y * this.z) > 50000) {
      v.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      return;
    }
    Files.createParentDirs(file);
    file.createNewFile();
    final DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
    int blockPositionX=(this.firstPoint[0] > this.secondPoint[0]) ? this.secondPoint[0] : this.firstPoint[0];
    int blockPositionZ=(this.firstPoint[1] > this.secondPoint[1]) ? this.secondPoint[1] : this.firstPoint[1];
    int blockPositionY=(this.firstPoint[2] > this.secondPoint[2]) ? this.secondPoint[2] : this.firstPoint[2];
    out.writeShort(this.x);
    out.writeShort(this.z);
    out.writeShort(this.y);
    out.writeShort(this.xRef);
    out.writeShort(this.zRef);
    out.writeShort(this.yRef);
    v.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + this.x * this.z * this.y + ""String_Node_Str"" + blockPositionX + ""String_Node_Str"" + blockPositionZ + ""String_Node_Str"" + blockPositionY);
    this.blockArray=new byte[this.x * this.z * this.y];
    this.dataArray=new byte[this.x * this.z * this.y];
    this.runSizeArray=new byte[this.x * this.z * this.y];
    byte lastId=(byte)(this.getWorld().getBlockTypeIdAt(blockPositionX,blockPositionY,blockPositionZ) - 128);
    byte lastData=(byte)(this.clampY(blockPositionX,blockPositionY,blockPositionZ).getData() - 128);
    byte thisId;
    byte thisData;
    int counter=0;
    int arrayIndex=0;
    for (int y=0; y < this.y; y++) {
      for (int z=0; z < this.z; z++) {
        for (int x=0; x < this.x; x++) {
          Block currentBlock=getWorld().getBlockAt(blockPositionX + x,blockPositionY + y,blockPositionZ + z);
          thisId=(byte)(currentBlock.getTypeId() - 128);
          thisData=(byte)(currentBlock.getData() - 128);
          if (thisId != lastId || thisData != lastData || counter == 255) {
            this.blockArray[arrayIndex]=lastId;
            this.dataArray[arrayIndex]=lastData;
            this.runSizeArray[arrayIndex]=(byte)(counter - 128);
            arrayIndex++;
            counter=1;
            lastId=thisId;
            lastData=thisData;
          }
 else {
            counter++;
            lastId=thisId;
            lastData=thisData;
          }
        }
      }
    }
    this.blockArray[arrayIndex]=lastId;
    this.dataArray[arrayIndex]=lastData;
    this.runSizeArray[arrayIndex]=(byte)(counter - 128);
    out.writeInt(arrayIndex + 1);
    for (int i=0; i < arrayIndex + 1; i++) {
      if (this.runSizeArray[i] > -127) {
        out.writeBoolean(true);
        out.writeByte(this.runSizeArray[i]);
        out.writeByte(this.blockArray[i]);
        out.writeByte(this.dataArray[i]);
      }
 else {
        out.writeBoolean(false);
        out.writeByte(this.blockArray[i]);
        out.writeByte(this.dataArray[i]);
      }
    }
    v.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + this.filename+ ""String_Node_Str"");
    out.close();
  }
 catch (  final Exception exception) {
    v.sendMessage(ChatColor.RED + ""String_Node_Str"");
    exception.printStackTrace();
  }
}",0.9994940551479888
97821,"/** 
 * @param i
 */
public final void add(final int[] i){
  if (i[1] == -1) {
    if (!col.contains(i)) {
      for (Iterator<int[]> it=col.iterator(); it.hasNext(); ) {
        int[] in=it.next();
        if (in[0] == i[0]) {
          it.remove();
        }
      }
      col.add(i);
    }
  }
 else {
    if (!col.contains(i)) {
      col.add(i);
    }
  }
}","/** 
 * Adds the specified id, data value pair to the VoxelList. A data value of -1 will operate on all data values of that id.
 * @param i
 */
public final void add(final int[] i){
  if (i[1] == -1) {
    if (!col.contains(i)) {
      for (Iterator<int[]> it=col.iterator(); it.hasNext(); ) {
        int[] in=it.next();
        if (in[0] == i[0]) {
          it.remove();
        }
      }
      col.add(i);
    }
  }
 else {
    if (!col.contains(i)) {
      col.add(i);
    }
  }
}",0.8547815820543093
97822,"/** 
 * @param i
 * @return
 */
public final boolean contains(final int[] i){
  for (Iterator<int[]> it=col.iterator(); it.hasNext(); ) {
    int[] in=it.next();
    if (in[0] == i[0] && (in[1] == i[1] || in[1] == -1)) {
      return true;
    }
  }
  return false;
}","/** 
 * Checks whether the VoxelList contains the specified id datavalue pair.
 * @param i
 * @return
 */
public final boolean contains(final int[] i){
  for (Iterator<int[]> it=col.iterator(); it.hasNext(); ) {
    int[] in=it.next();
    if (in[0] == i[0] && (in[1] == i[1] || in[1] == -1)) {
      return true;
    }
  }
  return false;
}",0.8782894736842105
97823,"/** 
 * @param i
 * @return
 */
public final boolean removeValue(final int[] i){
  if (col.isEmpty()) {
    return false;
  }
 else {
    boolean ret=false;
    if (i[1] == -1) {
      for (Iterator<int[]> it=col.iterator(); it.hasNext(); ) {
        int[] in=it.next();
        if (in[0] == i[0]) {
          it.remove();
          ret=true;
        }
      }
    }
 else {
      ret=col.remove(i);
    }
    return ret;
  }
}","/** 
 * Removes the specified id, data value pair from the VoxelList.
 * @param i
 * @return
 */
public final boolean removeValue(final int[] i){
  if (col.isEmpty()) {
    return false;
  }
 else {
    boolean ret=false;
    if (i[1] == -1) {
      for (Iterator<int[]> it=col.iterator(); it.hasNext(); ) {
        int[] in=it.next();
        if (in[0] == i[0]) {
          it.remove();
          ret=true;
        }
      }
    }
 else {
      ret=col.remove(i);
    }
    return ret;
  }
}",0.9292709466811752
97824,"public List<int[]> getList(){
  return col;
}","/** 
 * Returns the current VoxelList
 * @return
 */
public List<int[]> getList(){
  return col;
}",0.6293706293706294
97825,"public boolean isEmpty(){
  return col.isEmpty();
}","/** 
 * Checks if the list is empty.
 * @return
 */
public boolean isEmpty(){
  return col.isEmpty();
}",0.6623376623376623
97826,"@Override public final void parameters(final String[] args,final SnipeData v){
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    v.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    String _availableBiomes=""String_Node_Str"";
    for (    final org.bukkit.block.Biome _biome : org.bukkit.block.Biome.values()) {
      if (_availableBiomes.isEmpty()) {
        _availableBiomes=ChatColor.DARK_GREEN + _biome.name();
        continue;
      }
      _availableBiomes+=ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GREEN+ _biome.name();
    }
    v.sendMessage(ChatColor.DARK_BLUE + ""String_Node_Str"" + _availableBiomes);
  }
 else {
    String biomeName=args[1];
    for (int i=1; i < args.length; i++) {
      biomeName+=""String_Node_Str"" + args[i];
    }
    for (    final org.bukkit.block.Biome _bio : org.bukkit.block.Biome.values()) {
      if (_bio.name().equalsIgnoreCase(biomeName)) {
        this.selectedBiome=_bio;
        break;
      }
    }
    v.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ this.selectedBiome.name());
  }
}","@Override public final void parameters(final String[] args,final SnipeData v){
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    v.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    String _availableBiomes=""String_Node_Str"";
    for (    final org.bukkit.block.Biome _biome : org.bukkit.block.Biome.values()) {
      if (_availableBiomes.isEmpty()) {
        _availableBiomes=ChatColor.DARK_GREEN + _biome.name();
        continue;
      }
      _availableBiomes+=ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GREEN+ _biome.name();
    }
    v.sendMessage(ChatColor.DARK_BLUE + ""String_Node_Str"" + _availableBiomes);
  }
 else {
    String biomeName=args[1];
    for (int i=2; i < args.length; i++) {
      biomeName+=""String_Node_Str"" + args[i];
    }
    for (    final org.bukkit.block.Biome _bio : org.bukkit.block.Biome.values()) {
      if (_bio.name().equalsIgnoreCase(biomeName)) {
        this.selectedBiome=_bio;
        break;
      }
    }
    v.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ this.selectedBiome.name());
  }
}",0.9990706319702602
97827,"private void overlay(final SnipeData v){
  final int _brushSize=v.getBrushSize();
  final double _bPow=Math.pow(_brushSize + 0.5,2);
  final int[][] _memory=new int[_brushSize * 2 + 1][_brushSize * 2 + 1];
  for (int _z=_brushSize; _z >= -_brushSize; _z--) {
    for (int _x=_brushSize; _x >= -_brushSize; _x--) {
      for (int _y=this.getBlockPositionY(); _y > 0; _y--) {
        if (_memory[_x + _brushSize][_z + _brushSize] != 1) {
          if ((Math.pow(_x,2) + Math.pow(_z,2)) <= _bPow) {
            final int _check=this.getBlockIdAt(this.getBlockPositionX() + _x,_y + 1,this.getBlockPositionZ() + _z);
            if (_check == 0 || _check == 8 || _check == 9) {
              if (!this.allBlocks) {
switch (this.getBlockIdAt(this.getBlockPositionX() + _x,_y,this.getBlockPositionZ() + _z)) {
case 1:
case 2:
case 3:
case 12:
case 13:
case 24:
case 48:
case 82:
case 49:
case 78:
                  for (int _d=0; (_d < this.depth); _d++) {
                    if (this.clampY(this.getBlockPositionX() + _x,_y - _d,this.getBlockPositionZ() + _z).getTypeId() != 0) {
                      this.current.perform(this.clampY(this.getBlockPositionX() + _x,_y - _d,this.getBlockPositionZ() + _z));
                      _memory[_x + _brushSize][_z + _brushSize]=1;
                    }
                  }
                break;
default :
              break;
          }
        }
 else {
          for (int _d=0; (_d < this.depth); _d++) {
            if (this.clampY(this.getBlockPositionX() + _x,_y - _d,this.getBlockPositionZ() + _z).getTypeId() != 0) {
              this.current.perform(this.clampY(this.getBlockPositionX() + _x,_y - _d,this.getBlockPositionZ() + _z));
              _memory[_x + _brushSize][_z + _brushSize]=1;
            }
          }
        }
      }
    }
  }
}
}
}
v.storeUndo(this.current.getUndo());
}","private void overlay(final SnipeData v){
  final int _brushSize=v.getBrushSize();
  final double _bPow=Math.pow(_brushSize + 0.5,2);
  for (int _z=_brushSize; _z >= -_brushSize; _z--) {
    for (int _x=_brushSize; _x >= -_brushSize; _x--) {
      final int materialId=this.getBlockIdAt(this.getBlockPositionX() + _x,this.getBlockPositionY() + 1,this.getBlockPositionZ() + _z);
      if (isColumnValid(materialId)) {
        if ((Math.pow(_x,2) + Math.pow(_z,2)) <= _bPow) {
          for (int _y=this.getBlockPositionY(); _y > 0; _y--) {
            final int layerBlockId=this.getBlockIdAt(this.getBlockPositionX() + _x,_y,this.getBlockPositionZ() + _z);
            if (isColumnValid(layerBlockId)) {
              for (int currentDepth=_y; _y - currentDepth < depth; currentDepth--) {
                final int currentBlockId=this.getBlockIdAt(this.getBlockPositionX() + _x,currentDepth,this.getBlockPositionZ() + _z);
                if (isOverrideableMaterial(currentBlockId)) {
                  this.current.perform(this.clampY(this.getBlockPositionX() + _x,currentDepth,this.getBlockPositionZ() + _z));
                }
              }
              break;
            }
          }
        }
      }
    }
  }
  v.storeUndo(this.current.getUndo());
}",0.3505487411233053
97828,"private void overlayTwo(final SnipeData v){
  final int _brushSize=v.getBrushSize();
  final double _bPow=Math.pow(_brushSize + 0.5,2);
  final int[][] _memory=new int[_brushSize * 2 + 1][_brushSize * 2 + 1];
  for (int _z=_brushSize; _z >= -_brushSize; _z--) {
    for (int _x=_brushSize; _x >= -_brushSize; _x--) {
      for (int _y=this.getBlockPositionY(); _y > 0; _y--) {
        if (_memory[_x + _brushSize][_z + _brushSize] != 1) {
          if ((Math.pow(_x,2) + Math.pow(_z,2)) <= _bPow) {
            if (this.getBlockIdAt(this.getBlockPositionX() + _x,_y - 1,this.getBlockPositionZ() + _z) != 0) {
              if (this.getBlockIdAt(this.getBlockPositionX() + _x,_y + 1,this.getBlockPositionZ() + _z) == 0) {
                if (!this.allBlocks) {
switch (this.getBlockIdAt(this.getBlockPositionX() + _x,_y,this.getBlockPositionZ() + _z)) {
case 1:
case 2:
case 3:
case 12:
case 13:
case 14:
case 15:
case 16:
case 24:
case 48:
case 82:
case 49:
case 78:
                    for (int _d=1; (_d < this.depth + 1); _d++) {
                      this.current.perform(this.clampY(this.getBlockPositionX() + _x,_y + _d,this.getBlockPositionZ() + _z));
                      _memory[_x + _brushSize][_z + _brushSize]=1;
                    }
                  break;
default :
                break;
            }
          }
 else {
            for (int _d=1; (_d < this.depth + 1); _d++) {
              this.current.perform(this.clampY(this.getBlockPositionX() + _x,_y + _d,this.getBlockPositionZ() + _z));
              _memory[_x + _brushSize][_z + _brushSize]=1;
            }
          }
        }
      }
    }
  }
}
}
}
v.storeUndo(this.current.getUndo());
}","private void overlayTwo(final SnipeData v){
  final int _brushSize=v.getBrushSize();
  final double _bPow=Math.pow(_brushSize + 0.5,2);
  final int[][] _memory=new int[_brushSize * 2 + 1][_brushSize * 2 + 1];
  for (int _z=_brushSize; _z >= -_brushSize; _z--) {
    for (int _x=_brushSize; _x >= -_brushSize; _x--) {
      boolean surfaceFound=false;
      for (int _y=this.getBlockPositionY(); _y > 0 && !surfaceFound; _y--) {
        if (_memory[_x + _brushSize][_z + _brushSize] != 1) {
          if ((Math.pow(_x,2) + Math.pow(_z,2)) <= _bPow) {
            if (this.getBlockIdAt(this.getBlockPositionX() + _x,_y - 1,this.getBlockPositionZ() + _z) != 0) {
              if (this.getBlockIdAt(this.getBlockPositionX() + _x,_y + 1,this.getBlockPositionZ() + _z) == 0) {
                if (!this.allBlocks) {
switch (this.getBlockIdAt(this.getBlockPositionX() + _x,_y,this.getBlockPositionZ() + _z)) {
case 1:
case 2:
case 3:
case 12:
case 13:
case 14:
case 15:
case 16:
case 24:
case 48:
case 82:
case 49:
case 78:
                    for (int _d=1; (_d < this.depth + 1); _d++) {
                      this.current.perform(this.clampY(this.getBlockPositionX() + _x,_y + _d,this.getBlockPositionZ() + _z));
                      _memory[_x + _brushSize][_z + _brushSize]=1;
                    }
                  surfaceFound=true;
                break;
default :
              break;
          }
        }
 else {
          for (int _d=1; (_d < this.depth + 1); _d++) {
            this.current.perform(this.clampY(this.getBlockPositionX() + _x,_y + _d,this.getBlockPositionZ() + _z));
            _memory[_x + _brushSize][_z + _brushSize]=1;
          }
          surfaceFound=true;
        }
      }
    }
  }
}
}
}
}
v.storeUndo(this.current.getUndo());
}",0.9607215594995636
97829,"private void sitOn(final SnipeData v){
  final Chunk _targetChunk=this.getWorld().getChunkAt(this.getTargetBlock().getLocation());
  final int _targetChunkX=_targetChunk.getX();
  final int _targetChunkZ=_targetChunk.getZ();
  double _range=Double.MAX_VALUE;
  Entity _closest=null;
  for (int _x=_targetChunkX - 1; _x <= _targetChunkX + 1; _x++) {
    for (int _y=_targetChunkZ - 1; _y <= _targetChunkZ + 1; _y++) {
      for (      final Entity _e : this.getWorld().getChunkAt(_x,_y).getEntities()) {
        if (_e.getEntityId() == v.owner().getPlayer().getEntityId()) {
          continue;
        }
        if (jockeyType == JockeyType.NORMAL_PLAYER_ONLY || jockeyType == JockeyType.INVERSE_PLAYER_ONLY) {
          if (!(_e instanceof Player)) {
            continue;
          }
        }
        final Location _entityLocation=_e.getLocation();
        final double _entityDistance=_entityLocation.distance(v.owner().getPlayer().getLocation());
        if (_entityDistance < _range) {
          _range=_entityDistance;
          _closest=_e;
        }
      }
    }
  }
  if (_closest != null) {
    final Player _player=v.owner().getPlayer();
    final PlayerTeleportEvent _teleEvent=new PlayerTeleportEvent(_player,_player.getLocation(),_closest.getLocation(),PlayerTeleportEvent.TeleportCause.PLUGIN);
    Bukkit.getPluginManager().callEvent(_teleEvent);
    if (!_teleEvent.isCancelled()) {
      if (jockeyType == JockeyType.INVERSE_PLAYER_ONLY || jockeyType == JockeyType.INVERSE_ALL_ENTITIES) {
        _player.setPassenger(_closest);
      }
 else {
        _closest.setPassenger(_player);
        jockeydEntity=_closest;
      }
      v.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + _closest.getEntityId());
    }
  }
 else {
    v.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","private void sitOn(final SnipeData v){
  final Chunk _targetChunk=this.getWorld().getChunkAt(this.getTargetBlock().getLocation());
  final int _targetChunkX=_targetChunk.getX();
  final int _targetChunkZ=_targetChunk.getZ();
  double _range=Double.MAX_VALUE;
  Entity _closest=null;
  for (int _x=_targetChunkX - 1; _x <= _targetChunkX + 1; _x++) {
    for (int _y=_targetChunkZ - 1; _y <= _targetChunkZ + 1; _y++) {
      for (      final Entity _e : this.getWorld().getChunkAt(_x,_y).getEntities()) {
        if (_e.getEntityId() == v.owner().getPlayer().getEntityId()) {
          continue;
        }
        if (jockeyType == JockeyType.NORMAL_PLAYER_ONLY || jockeyType == JockeyType.INVERSE_PLAYER_ONLY) {
          if (!(_e instanceof Player)) {
            continue;
          }
        }
        final Location _entityLocation=_e.getLocation();
        final double _entityDistance=_entityLocation.distance(v.owner().getPlayer().getLocation());
        if (_entityDistance < _range) {
          _range=_entityDistance;
          _closest=_e;
        }
      }
    }
  }
  if (_closest != null) {
    final Player _player=v.owner().getPlayer();
    final PlayerTeleportEvent _teleEvent=new PlayerTeleportEvent(_player,_player.getLocation(),_closest.getLocation(),PlayerTeleportEvent.TeleportCause.PLUGIN);
    Bukkit.getPluginManager().callEvent(_teleEvent);
    if (!_teleEvent.isCancelled()) {
      if (jockeyType == JockeyType.INVERSE_PLAYER_ONLY || jockeyType == JockeyType.INVERSE_ALL_ENTITIES) {
        _player.setPassenger(_closest);
      }
 else {
        _closest.setPassenger(_player);
        jockeyedEntity=_closest;
      }
      v.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + _closest.getEntityId());
    }
  }
 else {
    v.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.9997232216994189
97830,"@Override protected final void powder(final SnipeData v){
  if (jockeyType == JockeyType.INVERSE_PLAYER_ONLY || jockeyType == JockeyType.INVERSE_ALL_ENTITIES) {
    v.owner().getPlayer().eject();
    v.owner().getPlayer().sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  }
 else {
    if (jockeydEntity != null) {
      jockeydEntity.eject();
      jockeydEntity=null;
      v.owner().getPlayer().sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
  }
}","@Override protected final void powder(final SnipeData v){
  if (jockeyType == JockeyType.INVERSE_PLAYER_ONLY || jockeyType == JockeyType.INVERSE_ALL_ENTITIES) {
    v.owner().getPlayer().eject();
    v.owner().getPlayer().sendMessage(ChatColor.GOLD + ""String_Node_Str"");
  }
 else {
    if (jockeyedEntity != null) {
      jockeyedEntity.eject();
      jockeyedEntity=null;
      v.owner().getPlayer().sendMessage(ChatColor.GOLD + ""String_Node_Str"");
    }
  }
}",0.996742671009772
97831,"@Override protected final void arrow(final SnipeData v){
  if (originCoords == null) {
    originCoords=new Vector();
  }
  originCoords.setX(this.getTargetBlock().getX() + .5 * this.getTargetBlock().getX() / Math.abs(this.getTargetBlock().getX()));
  originCoords.setY(this.getTargetBlock().getY() + .5);
  originCoords.setZ(this.getTargetBlock().getZ() + .5 * this.getTargetBlock().getZ() / Math.abs(this.getTargetBlock().getZ()));
  v.owner().getPlayer().sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
}","@Override protected final void arrow(final SnipeData v){
  this.originCoords=this.getTargetBlock().getLocation().toVector();
  this.targetWorld=this.getTargetBlock().getWorld();
  v.owner().getPlayer().sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
}",0.4702842377260982
97832,"private final void linePowder(final SnipeData v){
  Vector _previousCoords=new Vector();
  Vector _currentCoords=null;
  final Vector _slope=targetCoords.subtract(originCoords).normalize();
  for (int _t=0; _t <= _slope.length(); _t++) {
    _currentCoords=_slope.multiply(_t).add(originCoords);
    if (_currentCoords != _previousCoords) {
      this.current.perform(this.clampY((int)Math.round(_currentCoords.getX()),(int)Math.round(_currentCoords.getY()),(int)Math.round(_currentCoords.getZ())));
    }
    _previousCoords=_currentCoords;
  }
  v.storeUndo(this.current.getUndo());
}","private void linePowder(final SnipeData v){
  final Vector _originClone=this.originCoords.clone().add(LineBrush.HALF_BLOCK_OFFSET);
  final Vector _targetClone=this.targetCoords.clone().add(LineBrush.HALF_BLOCK_OFFSET);
  final Vector _direction=_targetClone.clone().subtract(_originClone);
  final double _length=this.targetCoords.distance(this.originCoords);
  if (_length == 0) {
    this.current.perform(this.targetCoords.toLocation(this.targetWorld).getBlock());
  }
 else {
    for (final BlockIterator _iterator=new BlockIterator(this.targetWorld,_originClone,_direction,0,NumberConversions.round(_length)); _iterator.hasNext(); ) {
      final Block _block=_iterator.next();
      this.current.perform(_block);
    }
  }
  v.storeUndo(this.current.getUndo());
}",0.0915129151291512
97833,"@Override protected final void powder(final SnipeData v){
  if (originCoords == null) {
    v.owner().getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
 else {
    targetCoords.setX(this.getTargetBlock().getX() + .5 * this.getTargetBlock().getX() / Math.abs(this.getTargetBlock().getX()));
    targetCoords.setY(this.getTargetBlock().getY() + .5);
    targetCoords.setZ(this.getTargetBlock().getZ() + .5 * this.getTargetBlock().getZ() / Math.abs(this.getTargetBlock().getZ()));
    this.linePowder(v);
  }
}","@Override protected final void powder(final SnipeData v){
  if (this.originCoords == null || !this.getTargetBlock().getWorld().equals(this.targetWorld)) {
    v.owner().getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
 else {
    this.targetCoords=this.getTargetBlock().getLocation().toVector();
    this.linePowder(v);
  }
}",0.5491525423728814
97834,"@Override public final void parameters(final String[] par,final SnipeData v){
  for (int _i=0; _i < par.length; _i++) {
    final String _param=par[_i];
    try {
      if (_param.equalsIgnoreCase(""String_Node_Str"")) {
        v.sendMessage(ChatColor.BLUE + ""String_Node_Str"");
        v.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (_param.equalsIgnoreCase(""String_Node_Str"")) {
        if ((_i + 1) >= par.length) {
          v.sendMessage(ChatColor.RED + ""String_Node_Str"");
          continue;
        }
        int _tmp=Integer.parseInt(par[++_i]);
        if (_tmp < WATER_LEVEL_MIN) {
          v.sendMessage(ChatColor.RED + ""String_Node_Str"");
          continue;
        }
        this.waterLevel=_tmp;
        v.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.GREEN+ (waterLevel + 1));
      }
    }
 catch (    Exception _e) {
      v.sendMessage(ChatColor.RED + String.format(""String_Node_Str"",_param));
      _e.printStackTrace();
    }
  }
}","@Override public final void parameters(final String[] par,final SnipeData v){
  for (int _i=0; _i < par.length; _i++) {
    final String _param=par[_i];
    try {
      if (_param.equalsIgnoreCase(""String_Node_Str"")) {
        v.sendMessage(ChatColor.BLUE + ""String_Node_Str"");
        v.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (_param.equalsIgnoreCase(""String_Node_Str"")) {
        if ((_i + 1) >= par.length) {
          v.sendMessage(ChatColor.RED + ""String_Node_Str"");
          continue;
        }
        int _tmp=Integer.parseInt(par[++_i]);
        if (_tmp <= WATER_LEVEL_MIN) {
          v.sendMessage(ChatColor.RED + ""String_Node_Str"");
          continue;
        }
        this.waterLevel=_tmp - 1;
        v.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.GREEN+ (waterLevel + 1));
      }
    }
 catch (    Exception _e) {
      v.sendMessage(ChatColor.RED + String.format(""String_Node_Str"",_param));
      _e.printStackTrace();
    }
  }
}",0.9975786924939468
97835,"private final void buildStairWell(final SnipeData v){
  final int _brushSize=v.getBrushSize();
  final int _voxelMaterialId=v.getVoxelId();
  final int[][][] _spiral=new int[2 * _brushSize + 1][_height][2 * _brushSize + 1];
  if (v.getVoxelHeight() < 1) {
    v.setVoxelHeight(1);
    v.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  final int _height=v.getVoxelHeight();
  int _startx=0;
  int _startz=0;
  int _y=0;
  int _xoffset=0;
  int _zoffset=0;
  int _toggle=0;
  if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
    if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=0;
      _startz=2 * _brushSize;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=0;
      _startz=0;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=2 * _brushSize;
      _startz=0;
    }
 else {
      _startx=2 * _brushSize;
      _startz=2 * _brushSize;
    }
  }
 else {
    if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=0;
      _startz=0;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=2 * _brushSize;
      _startz=0;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=2 * _brushSize;
      _startz=2 * _brushSize;
    }
 else {
      _startx=0;
      _startz=2 * _brushSize;
    }
  }
  while (_y < _height) {
    if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
      _spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
      _y++;
    }
 else     if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
switch (_toggle) {
case 0:
        _toggle=2;
      _spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
    break;
case 1:
  _toggle=2;
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
break;
case 2:
_toggle=1;
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=2;
_y++;
break;
default :
break;
}
}
if (_startx + _xoffset == 0) {
if (_startz + _zoffset == 0) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_xoffset++;
}
 else {
_zoffset++;
}
}
 else if (_startz + _zoffset == 2 * _brushSize) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_zoffset--;
}
 else {
_xoffset++;
}
}
 else {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=5;
_y++;
}
_zoffset--;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=4;
_y++;
}
_zoffset++;
}
}
}
 else if (_startx + _xoffset == 2 * _brushSize) {
if (_startz + _zoffset == 0) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_zoffset++;
}
 else {
_xoffset--;
}
}
 else if (_startz + _zoffset == 2 * _brushSize) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_xoffset--;
}
 else {
_zoffset--;
}
}
 else {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=4;
_y++;
}
_zoffset++;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=5;
_y++;
}
_zoffset--;
}
}
}
 else if (_startz + _zoffset == 0) {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=2;
_y++;
}
_xoffset++;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=3;
_y++;
}
_xoffset--;
}
}
 else {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=3;
_y++;
}
_xoffset--;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=2;
_y++;
}
_xoffset++;
}
}
}
final Undo _undo=new Undo(this.getTargetBlock().getWorld().getName());
for (int _x=2 * _brushSize; _x >= 0; _x--) {
for (int _i=_height - 1; _i >= 0; _i--) {
for (int _z=2 * _brushSize; _z >= 0; _z--) {
switch (_spiral[_x][_i][_z]) {
case 0:
if (_i != _height - 1) {
if (!((this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) && _spiral[_x][_i + 1][_z] == 1)) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 0) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(0,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
}
}
 else {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 0) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(0,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
}
break;
case 1:
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != _voxelMaterialId) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(_voxelMaterialId,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 44) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(44,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData(v.getData());
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i - 1,this.getBlockPositionZ() - _brushSize + _z) != _voxelMaterialId) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i - 1,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(_voxelMaterialId,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i - 1,this.getBlockPositionZ() - _brushSize + _z);
}
break;
case 2:
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 43) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(43,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData(v.getData());
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 53) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(53,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)0);
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 67) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(67,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)0);
}
break;
default :
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 53) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(53,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)(_spiral[_x][_i][_z] - 2));
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 67) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(67,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)(_spiral[_x][_i][_z] - 2));
}
break;
}
}
}
}
v.storeUndo(_undo);
}","private final void buildStairWell(final SnipeData v){
  if (v.getVoxelHeight() < 1) {
    v.setVoxelHeight(1);
    v.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  final int _height=v.getVoxelHeight();
  final int _brushSize=v.getBrushSize();
  final int _voxelMaterialId=v.getVoxelId();
  final int[][][] _spiral=new int[2 * _brushSize + 1][_height][2 * _brushSize + 1];
  int _startx=0;
  int _startz=0;
  int _y=0;
  int _xoffset=0;
  int _zoffset=0;
  int _toggle=0;
  if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
    if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=0;
      _startz=2 * _brushSize;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=0;
      _startz=0;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=2 * _brushSize;
      _startz=0;
    }
 else {
      _startx=2 * _brushSize;
      _startz=2 * _brushSize;
    }
  }
 else {
    if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=0;
      _startz=0;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=2 * _brushSize;
      _startz=0;
    }
 else     if (this.sopen.equalsIgnoreCase(""String_Node_Str"")) {
      _startx=2 * _brushSize;
      _startz=2 * _brushSize;
    }
 else {
      _startx=0;
      _startz=2 * _brushSize;
    }
  }
  while (_y < _height) {
    if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
      _spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
      _y++;
    }
 else     if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
switch (_toggle) {
case 0:
        _toggle=2;
      _spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
    break;
case 1:
  _toggle=2;
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
break;
case 2:
_toggle=1;
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=2;
_y++;
break;
default :
break;
}
}
if (_startx + _xoffset == 0) {
if (_startz + _zoffset == 0) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_xoffset++;
}
 else {
_zoffset++;
}
}
 else if (_startz + _zoffset == 2 * _brushSize) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_zoffset--;
}
 else {
_xoffset++;
}
}
 else {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=5;
_y++;
}
_zoffset--;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=4;
_y++;
}
_zoffset++;
}
}
}
 else if (_startx + _xoffset == 2 * _brushSize) {
if (_startz + _zoffset == 0) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_zoffset++;
}
 else {
_xoffset--;
}
}
 else if (_startz + _zoffset == 2 * _brushSize) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=1;
}
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
_xoffset--;
}
 else {
_zoffset--;
}
}
 else {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=4;
_y++;
}
_zoffset++;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=5;
_y++;
}
_zoffset--;
}
}
}
 else if (_startz + _zoffset == 0) {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=2;
_y++;
}
_xoffset++;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=3;
_y++;
}
_xoffset--;
}
}
 else {
if (this.sdirect.equalsIgnoreCase(""String_Node_Str"")) {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=3;
_y++;
}
_xoffset--;
}
 else {
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
_spiral[_startx + _xoffset][_y][_startz + _zoffset]=2;
_y++;
}
_xoffset++;
}
}
}
final Undo _undo=new Undo(this.getTargetBlock().getWorld().getName());
for (int _x=2 * _brushSize; _x >= 0; _x--) {
for (int _i=_height - 1; _i >= 0; _i--) {
for (int _z=2 * _brushSize; _z >= 0; _z--) {
switch (_spiral[_x][_i][_z]) {
case 0:
if (_i != _height - 1) {
if (!((this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) && _spiral[_x][_i + 1][_z] == 1)) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 0) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(0,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
}
}
 else {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 0) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(0,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
}
break;
case 1:
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != _voxelMaterialId) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(_voxelMaterialId,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 44) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(44,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData(v.getData());
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"") || this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i - 1,this.getBlockPositionZ() - _brushSize + _z) != _voxelMaterialId) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i - 1,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(_voxelMaterialId,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i - 1,this.getBlockPositionZ() - _brushSize + _z);
}
break;
case 2:
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 43) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(43,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData(v.getData());
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 53) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(53,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)0);
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 67) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(67,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)0);
}
break;
default :
if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 53) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(53,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)(_spiral[_x][_i][_z] - 2));
}
 else if (this.stairtype.equalsIgnoreCase(""String_Node_Str"")) {
if (this.getBlockIdAt(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z) != 67) {
_undo.put(this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z));
}
this.setBlockIdAt(67,this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z);
this.clampY(this.getBlockPositionX() - _brushSize + _x,this.getBlockPositionY() + _i,this.getBlockPositionZ() - _brushSize + _z).setData((byte)(_spiral[_x][_i][_z] - 2));
}
break;
}
}
}
}
v.storeUndo(_undo);
}",0.9864320728291316
97836,"private void applyPunishment(final LivingEntity entity,final SnipeData v){
switch (this.punishment) {
case FIRE:
    entity.setFireTicks(Punish.TICKS_PER_SECOND * this.punishDuration);
  break;
case LIGHTNING:
entity.getWorld().strikeLightning(entity.getLocation());
break;
case BLINDNESS:
entity.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case DRUNK:
entity.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case INVERT:
entity.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case JUMP:
entity.addPotionEffect(new PotionEffect(PotionEffectType.JUMP,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case KILL:
entity.damage(Integer.MAX_VALUE);
break;
case RANDOMTP:
final Random _rand=new Random();
final Location _targetLocation=entity.getLocation();
_targetLocation.setX(_targetLocation.getX() + (_rand.nextInt(400) - 200));
_targetLocation.setZ(_targetLocation.getZ() + (_rand.nextInt(Punish.MAXIMAL_RANDOM_TELEPORTATION_RANGE) - Punish.MAXIMAL_RANDOM_TELEPORTATION_RANGE / 2));
entity.teleport(_targetLocation);
break;
case ALL_POTION:
entity.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
entity.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
entity.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
entity.addPotionEffect(new PotionEffect(PotionEffectType.JUMP,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case FORCE:
final Vector _playerVector=this.getTargetBlock().getLocation().toVector();
final Vector _direction=entity.getLocation().toVector().clone();
_direction.subtract(_playerVector);
final double _length=_direction.length();
final double _stregth=(1 - (_length / v.getBrushSize())) * this.punishLevel;
_direction.normalize();
_direction.multiply(_stregth);
entity.setVelocity(_direction);
break;
case HYPNO:
if (entity instanceof Player) {
final Location _loc=entity.getLocation();
Location _target=_loc.clone();
for (int z=this.punishLevel; z >= -this.punishLevel; z--) {
for (int x=this.punishLevel; x >= -this.punishLevel; x--) {
for (int y=this.punishLevel; y >= -this.punishLevel; y--) {
_target.setX(_loc.getX() + x);
_target.setY(_loc.getY() + y);
_target.setZ(_loc.getZ() + z);
if (this.hypnoAffectLandscape && _target.getBlock().getType() == Material.AIR) {
continue;
}
_target=_loc.clone();
_target.add(x,y,z);
((Player)entity).sendBlockChange(_target,v.getVoxelId(),v.getData());
}
}
}
}
break;
default :
Bukkit.getLogger().warning(""String_Node_Str"");
break;
}
}","private void applyPunishment(final LivingEntity entity,final SnipeData v){
switch (this.punishment) {
case FIRE:
    entity.setFireTicks(Punish.TICKS_PER_SECOND * this.punishDuration);
  break;
case LIGHTNING:
entity.getWorld().strikeLightning(entity.getLocation());
break;
case BLINDNESS:
entity.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case DRUNK:
entity.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case INVERT:
entity.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case JUMP:
entity.addPotionEffect(new PotionEffect(PotionEffectType.JUMP,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case KILL:
entity.setHealth(0);
break;
case RANDOMTP:
final Random _rand=new Random();
final Location _targetLocation=entity.getLocation();
_targetLocation.setX(_targetLocation.getX() + (_rand.nextInt(400) - 200));
_targetLocation.setZ(_targetLocation.getZ() + (_rand.nextInt(Punish.MAXIMAL_RANDOM_TELEPORTATION_RANGE) - Punish.MAXIMAL_RANDOM_TELEPORTATION_RANGE / 2));
entity.teleport(_targetLocation);
break;
case ALL_POTION:
entity.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
entity.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
entity.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
entity.addPotionEffect(new PotionEffect(PotionEffectType.JUMP,Punish.TICKS_PER_SECOND * this.punishDuration,this.punishLevel),true);
break;
case FORCE:
final Vector _playerVector=this.getTargetBlock().getLocation().toVector();
final Vector _direction=entity.getLocation().toVector().clone();
_direction.subtract(_playerVector);
final double _length=_direction.length();
final double _stregth=(1 - (_length / v.getBrushSize())) * this.punishLevel;
_direction.normalize();
_direction.multiply(_stregth);
entity.setVelocity(_direction);
break;
case HYPNO:
if (entity instanceof Player) {
final Location _loc=entity.getLocation();
Location _target=_loc.clone();
for (int z=this.punishLevel; z >= -this.punishLevel; z--) {
for (int x=this.punishLevel; x >= -this.punishLevel; x--) {
for (int y=this.punishLevel; y >= -this.punishLevel; y--) {
_target.setX(_loc.getX() + x);
_target.setY(_loc.getY() + y);
_target.setZ(_loc.getZ() + z);
if (this.hypnoAffectLandscape && _target.getBlock().getType() == Material.AIR) {
continue;
}
_target=_loc.clone();
_target.add(x,y,z);
((Player)entity).sendBlockChange(_target,v.getVoxelId(),v.getData());
}
}
}
}
break;
default :
Bukkit.getLogger().warning(""String_Node_Str"");
break;
}
}",0.9940828402366864
97837,"protected void spawn(vData v){
  for (int x=0; x < v.brushSize; x++) {
    try {
      w.spawnCreature(lb.getLocation(),ct);
    }
 catch (    ClassCastException ex) {
    }
  }
}","protected void spawn(vData v){
  for (int x=0; x < v.brushSize; x++) {
    try {
      Class<? extends Entity> ent=ct.getEntityClass();
      w.spawn(lb.getLocation(),ent);
    }
 catch (    ClassCastException ex) {
      v.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.7056277056277056
97838,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  if (sender instanceof Player) {
    Player p=(Player)sender;
    String comm=command.getName();
    if (args == null) {
      if (!VoxelSniperListener.onCommand(p,new String[0],comm)) {
        if (p.isOp()) {
          p.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
 else {
          return false;
        }
      }
 else {
        return true;
      }
    }
 else {
      if (!VoxelSniperListener.onCommand(p,args,comm)) {
        if (p.isOp()) {
          p.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
 else {
          return false;
        }
      }
 else {
        return true;
      }
    }
  }
  System.out.println(""String_Node_Str"");
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  String comm=command.getName();
  String[] myArgs=args;
  if (myArgs == null) {
    myArgs=new String[0];
  }
  if (sender instanceof Player) {
    Player p=(Player)sender;
    if (!VoxelSniperListener.onCommand(p,myArgs,comm)) {
      if (p.isOp()) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return true;
    }
  }
 else {
    CommandSender p=sender;
    if (!VoxelSniperListener.onConsoleSafeCommand(p,myArgs,comm)) {
      if (p.isOp()) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 else {
      return true;
    }
  }
}",0.4979004199160168
97839,"public static boolean onCommand(Player player,String[] split,String command){
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    player.getWorld().refreshChunk(player.getLocation().getBlockX(),player.getLocation().getBlockZ());
    return true;
  }
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length == 1) {
      try {
        vPainting.paint(player,false,false,Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
 else {
      vPainting.paint(player,true,false,0);
      return true;
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"") && (isAdmin(player.getName()) || player.isOp())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player pl;
    String plName;
    try {
      pl=plugin.getServer().getPlayer(split[0]);
      plName=pl.getName();
    }
 catch (    Exception e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      vSniper vs=VoxelSnipers.get(plName);
      vs.reset();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      vSniper vSni=new liteSniper();
      vSni.reset();
      vSni.p=pl;
      vSni.loadAllPresets();
      VoxelSnipers.put(plName,vSni);
      liteSnipers.add(pl.getName());
      writeLiteSnipers();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      pl.sendMessage(ChatColor.RED + ""String_Node_Str"");
      pl.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      VoxelSniper.log.info(""String_Node_Str"" + pl.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      return true;
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"") && (isAdmin(player.getName()) || player.isOp())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player pl;
    String plName;
    try {
      pl=plugin.getServer().getPlayer(split[0]);
      plName=pl.getName();
    }
 catch (    Exception e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      vSniper vs=VoxelSnipers.get(plName);
      vs.reset();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      vSniper vSni=new vSniper();
      vSni.reset();
      vSni.p=pl;
      vSni.loadAllPresets();
      VoxelSnipers.put(plName,vSni);
      writeSnipers();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      pl.sendMessage(ChatColor.RED + ""String_Node_Str"");
      pl.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      VoxelSniper.log.info(""String_Node_Str"" + pl.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      return true;
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"") && (isAdmin(player.getName()) || player.isOp())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player pl;
    String plName;
    try {
      pl=plugin.getServer().getPlayer(split[0]);
      plName=pl.getName();
    }
 catch (    Exception e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      vSniper vs=VoxelSnipers.get(plName);
      vs.reset();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      vSniper vSni=new liteSniper();
      vSni.reset();
      vSni.p=pl;
      vSni.loadAllPresets();
      VoxelSnipers.put(plName,vSni);
      liteSnipers.add(pl.getName());
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      pl.sendMessage(ChatColor.RED + ""String_Node_Str"");
      pl.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      VoxelSniper.log.info(""String_Node_Str"" + pl.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      return true;
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"") && (isAdmin(player.getName()) || player.isOp())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    Player pl;
    String plName;
    try {
      pl=plugin.getServer().getPlayer(split[0]);
      plName=pl.getName();
    }
 catch (    Exception e) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      vSniper vs=VoxelSnipers.get(plName);
      vs.reset();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      vSniper vSni=new vSniper();
      vSni.reset();
      vSni.p=pl;
      vSni.loadAllPresets();
      VoxelSnipers.put(plName,vSni);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      pl.sendMessage(ChatColor.RED + ""String_Node_Str"");
      pl.sendMessage(""String_Node_Str"" + VoxelSnipers.get(plName).p.getName());
      VoxelSniper.log.info(""String_Node_Str"" + pl.getName() + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
      return true;
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"") && (isAdmin(player.getName()) || player.isOp())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      vSniper vs=VoxelSnipers.remove(split[0]);
      Boolean success=removeSniper(split[0]);
      Boolean success2=removeLiteSniper(split[0]);
      if (!success && !success2) {
        player.sendMessage(""String_Node_Str"");
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
      vs.p.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
      return true;
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"") && isAdmin(player.getName())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      int x=Integer.parseInt(split[0]);
      int z=Integer.parseInt(split[1]);
      player.teleport(new Location(player.getWorld(),x,115,z));
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      player.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  if (VoxelSnipers.containsKey(player.getName())) {
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(split[0]).doUndo();
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(plugin.getServer().getPlayer(split[0]).getName()).doUndo();
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      vSniper vs=VoxelSnipers.get(player.getName());
      try {
        int r=Integer.parseInt(split[0]);
        vs.doUndo(r);
      }
 catch (      Exception e) {
        vs.doUndo();
      }
      VoxelSniper.log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      return true;
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(player.getName()).reset();
        player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        if (split.length >= 1) {
          if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            VoxelSnipers.get(player.getName()).printBrushes();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            VoxelSnipers.get(player.getName()).printBrushesLong();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            VoxelSnipers.get(player.getName()).togglePrintout();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            VoxelSnipers.get(player.getName()).toggleLightning();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            player.getWorld().setWeatherDuration(0);
            player.getWorld().setStorm(false);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (split.length == 1) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
            String message=""String_Node_Str"";
            for (int i=1; i < split.length; i++) {
              message+=split[i] + ""String_Node_Str"";
            }
            player.sendMessage(message);
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (split.length == 2) {
              double i=Double.parseDouble(split[1]);
              if (VoxelSnipers.get(player.getName()) instanceof liteSniper && (i > 12 || i < -12)) {
                player.sendMessage(ChatColor.RED + ""String_Node_Str"");
                return true;
              }
              VoxelSnipers.get(player.getName()).setRange(i);
              return true;
            }
 else {
              VoxelSnipers.get(player.getName()).setRange(-1);
              return true;
            }
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            player.sendMessage(""String_Node_Str"");
            sitAll();
            player.sendMessage(""String_Node_Str"");
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            player.sendMessage(PerformerE.performer_list_short);
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            player.sendMessage(PerformerE.performer_list_long);
            return true;
          }
        }
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        VoxelSnipers.get(player.getName()).info();
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        if (split.length == 0) {
          VoxelSnipers.get(player.getName()).setCentroid(0);
          return true;
        }
        VoxelSnipers.get(player.getName()).setCentroid(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(player.getName()).setHeigth(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setData(tb.getData());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      try {
        VoxelSnipers.get(player.getName()).setData((byte)Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setReplaceData(tb.getData());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      try {
        VoxelSnipers.get(player.getName()).setReplaceData((byte)Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setReplace(tb.getTypeId());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        int i=Integer.parseInt(split[0]);
        if (VoxelSniper.isValidItem(i) && Material.getMaterial(i).isBlock()) {
          ps.setReplace(i);
          return true;
        }
 else         if (ps.replaceId != 0) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        return true;
      }
 catch (      Exception e) {
        try {
          vSniper ps=VoxelSnipers.get(player.getName());
          int derp=VoxelSniper.getItem(split[0]);
          if (derp != 0) {
            ps.setReplace(derp);
            return true;
          }
          player.sendMessage(""String_Node_Str"");
          return true;
        }
 catch (        Exception ex) {
          return true;
        }
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).addVoxelToList(tb.getTypeId());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
 else {
        if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
          VoxelSnipers.get(player.getName()).clearVoxelList();
          return true;
        }
      }
      vSniper ps=VoxelSnipers.get(player.getName());
      boolean rem=false;
      for (      String str : split) {
        String tmpint;
        Integer xint;
        try {
          if (str.startsWith(""String_Node_Str"")) {
            rem=true;
            tmpint=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            tmpint=str;
          }
          xint=Integer.parseInt(tmpint);
          if (VoxelSniper.isValidItem(xint) && Material.getMaterial(xint).isBlock()) {
            if (!rem) {
              ps.addVoxelToList(xint);
              continue;
            }
 else {
              ps.removeVoxelFromList(xint);
              continue;
            }
          }
        }
 catch (        NumberFormatException e) {
          try {
            String tmpstr;
            Integer xstr;
            rem=false;
            if (str.startsWith(""String_Node_Str"")) {
              rem=true;
              tmpstr=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              tmpstr=str;
            }
            xstr=VoxelSniper.getItem(tmpstr);
            if (!rem) {
              ps.addVoxelToList(xstr);
            }
 else {
              ps.removeVoxelFromList(xstr);
            }
          }
 catch (          Exception ex) {
          }
        }
      }
      return true;
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setVoxel(tb.getTypeId());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      if (split[0] != null) {
        try {
          vSniper ps=VoxelSnipers.get(player.getName());
          int i=Integer.parseInt(split[0]);
          if (VoxelSniper.isValidItem(i) && Material.getMaterial(i).isBlock()) {
            ps.setVoxel(i);
            return true;
          }
 else           if (ps.voxelId != 0) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          return true;
        }
 catch (        NumberFormatException n) {
          try {
            vSniper ps=VoxelSnipers.get(player.getName());
            int derp=VoxelSniper.getItem(split[0]);
            if (derp != 0) {
              ps.setVoxel(derp);
              return true;
            }
            player.sendMessage(""String_Node_Str"" + split[0] + ""String_Node_Str"");
            return true;
          }
 catch (          Exception ex) {
            return true;
          }
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        try {
          if (split == null || split.length == 0) {
            ps.previousBrush();
            return true;
          }
 else {
            ps.setBrushSize(Integer.parseInt(split[0]));
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ps.brushSize);
            if (ps.brushSize >= 20) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
            return true;
          }
        }
 catch (        Exception e) {
          ps.fillPrevious();
          ps.setBrush(split);
          return true;
        }
      }
 catch (      Exception ex) {
        VoxelSniper.log.log(Level.WARNING,""String_Node_Str"" + player.getName());
        ex.printStackTrace();
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        if (split == null || split.length == 0) {
          ps.setPerformer(new String[]{""String_Node_Str"",""String_Node_Str""});
        }
 else {
          ps.setPerformer(split);
        }
        return true;
      }
 catch (      Exception ex) {
        VoxelSniper.log.log(Level.WARNING,""String_Node_Str"" + player.getName());
        ex.printStackTrace();
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.savePreset(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.savePreset(split[0]);
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.loadPreset(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.loadPreset(split[0]);
        return true;
      }
    }
  }
  return false;
}","public static boolean onCommand(Player player,String[] split,String command){
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    player.getWorld().refreshChunk(player.getLocation().getBlockX(),player.getLocation().getBlockZ());
    return true;
  }
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length == 1) {
      try {
        vPainting.paint(player,false,false,Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
 else {
      vPainting.paint(player,true,false,0);
      return true;
    }
  }
  if (onConsoleSafeCommand(player,split,command))   return true;
  if (command.equalsIgnoreCase(""String_Node_Str"") && isAdmin(player.getName())) {
    if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
    try {
      int x=Integer.parseInt(split[0]);
      int z=Integer.parseInt(split[1]);
      player.teleport(new Location(player.getWorld(),x,115,z));
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      player.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  if (VoxelSnipers.containsKey(player.getName())) {
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(split[0]).doUndo();
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(plugin.getServer().getPlayer(split[0]).getName()).doUndo();
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      vSniper vs=VoxelSnipers.get(player.getName());
      try {
        int r=Integer.parseInt(split[0]);
        vs.doUndo(r);
      }
 catch (      Exception e) {
        vs.doUndo();
      }
      VoxelSniper.log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str"");
      return true;
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(player.getName()).reset();
        player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        if (split.length >= 1) {
          if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            VoxelSnipers.get(player.getName()).printBrushes();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            VoxelSnipers.get(player.getName()).printBrushesLong();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            VoxelSnipers.get(player.getName()).togglePrintout();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            VoxelSnipers.get(player.getName()).toggleLightning();
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (VoxelSnipers.get(player.getName()) instanceof liteSniper) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
              return true;
            }
            player.getWorld().setWeatherDuration(0);
            player.getWorld().setStorm(false);
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (split.length == 1) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
            String message=""String_Node_Str"";
            for (int i=1; i < split.length; i++) {
              message+=split[i] + ""String_Node_Str"";
            }
            player.sendMessage(message);
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (split.length == 2) {
              double i=Double.parseDouble(split[1]);
              if (VoxelSnipers.get(player.getName()) instanceof liteSniper && (i > 12 || i < -12)) {
                player.sendMessage(ChatColor.RED + ""String_Node_Str"");
                return true;
              }
              VoxelSnipers.get(player.getName()).setRange(i);
              return true;
            }
 else {
              VoxelSnipers.get(player.getName()).setRange(-1);
              return true;
            }
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            player.sendMessage(""String_Node_Str"");
            sitAll();
            player.sendMessage(""String_Node_Str"");
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            player.sendMessage(PerformerE.performer_list_short);
            return true;
          }
 else           if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
            player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
            player.sendMessage(PerformerE.performer_list_long);
            return true;
          }
        }
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        VoxelSnipers.get(player.getName()).info();
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        if (split.length == 0) {
          VoxelSnipers.get(player.getName()).setCentroid(0);
          return true;
        }
        VoxelSnipers.get(player.getName()).setCentroid(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        VoxelSnipers.get(player.getName()).setHeigth(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setData(tb.getData());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      try {
        VoxelSnipers.get(player.getName()).setData((byte)Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setReplaceData(tb.getData());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      try {
        VoxelSnipers.get(player.getName()).setReplaceData((byte)Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setReplace(tb.getTypeId());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        int i=Integer.parseInt(split[0]);
        if (VoxelSniper.isValidItem(i) && Material.getMaterial(i).isBlock()) {
          ps.setReplace(i);
          return true;
        }
 else         if (ps.replaceId != 0) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
        return true;
      }
 catch (      Exception e) {
        try {
          vSniper ps=VoxelSnipers.get(player.getName());
          int derp=VoxelSniper.getItem(split[0]);
          if (derp != 0) {
            ps.setReplace(derp);
            return true;
          }
          player.sendMessage(""String_Node_Str"");
          return true;
        }
 catch (        Exception ex) {
          return true;
        }
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).addVoxelToList(tb.getTypeId());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
 else {
        if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
          VoxelSnipers.get(player.getName()).clearVoxelList();
          return true;
        }
      }
      vSniper ps=VoxelSnipers.get(player.getName());
      boolean rem=false;
      for (      String str : split) {
        String tmpint;
        Integer xint;
        try {
          if (str.startsWith(""String_Node_Str"")) {
            rem=true;
            tmpint=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            tmpint=str;
          }
          xint=Integer.parseInt(tmpint);
          if (VoxelSniper.isValidItem(xint) && Material.getMaterial(xint).isBlock()) {
            if (!rem) {
              ps.addVoxelToList(xint);
              continue;
            }
 else {
              ps.removeVoxelFromList(xint);
              continue;
            }
          }
        }
 catch (        NumberFormatException e) {
          try {
            String tmpstr;
            Integer xstr;
            rem=false;
            if (str.startsWith(""String_Node_Str"")) {
              rem=true;
              tmpstr=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              tmpstr=str;
            }
            xstr=VoxelSniper.getItem(tmpstr);
            if (!rem) {
              ps.addVoxelToList(xstr);
            }
 else {
              ps.removeVoxelFromList(xstr);
            }
          }
 catch (          Exception ex) {
          }
        }
      }
      return true;
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      if (split.length == 0) {
        HitBlox hb=new HitBlox(player,player.getWorld());
        Block tb=hb.getTargetBlock();
        try {
          VoxelSnipers.get(player.getName()).setVoxel(tb.getTypeId());
          return true;
        }
 catch (        Exception e) {
          return true;
        }
      }
      if (split[0] != null) {
        try {
          vSniper ps=VoxelSnipers.get(player.getName());
          int i=Integer.parseInt(split[0]);
          if (VoxelSniper.isValidItem(i) && Material.getMaterial(i).isBlock()) {
            ps.setVoxel(i);
            return true;
          }
 else           if (ps.voxelId != 0) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
          return true;
        }
 catch (        NumberFormatException n) {
          try {
            vSniper ps=VoxelSnipers.get(player.getName());
            int derp=VoxelSniper.getItem(split[0]);
            if (derp != 0) {
              ps.setVoxel(derp);
              return true;
            }
            player.sendMessage(""String_Node_Str"" + split[0] + ""String_Node_Str"");
            return true;
          }
 catch (          Exception ex) {
            return true;
          }
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        try {
          if (split == null || split.length == 0) {
            ps.previousBrush();
            return true;
          }
 else {
            ps.setBrushSize(Integer.parseInt(split[0]));
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ps.brushSize);
            if (ps.brushSize >= 20) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
            return true;
          }
        }
 catch (        Exception e) {
          ps.fillPrevious();
          ps.setBrush(split);
          return true;
        }
      }
 catch (      Exception ex) {
        VoxelSniper.log.log(Level.WARNING,""String_Node_Str"" + player.getName());
        ex.printStackTrace();
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        if (split == null || split.length == 0) {
          ps.setPerformer(new String[]{""String_Node_Str"",""String_Node_Str""});
        }
 else {
          ps.setPerformer(split);
        }
        return true;
      }
 catch (      Exception ex) {
        VoxelSniper.log.log(Level.WARNING,""String_Node_Str"" + player.getName());
        ex.printStackTrace();
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.savePreset(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.savePreset(split[0]);
        return true;
      }
    }
    if (command.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.loadPreset(Integer.parseInt(split[0]));
        return true;
      }
 catch (      Exception e) {
        vSniper ps=VoxelSnipers.get(player.getName());
        ps.loadPreset(split[0]);
        return true;
      }
    }
  }
  return false;
}",0.8336577247468336
97840,"@Override public String fetchColumnValueAsString(TypedRow row){
  return null;
}","@Override public String fetchColumnValueAsString(TypedRow row){
  TypedColumn typedCol=row.getColumn(getColumnName());
  Object value=typedCol.getValue();
  return convertTypeToString(value);
}",0.5714285714285714
97841,"@SuppressWarnings(""String_Node_Str"") @Override public Class getClassType(){
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public Class getClassType(){
  return classForName(this.itemType);
}",0.8599033816425121
97842,"@SuppressWarnings(""String_Node_Str"") public void setup(DboTableMeta t,String colPrefix,Class collectionType,Class itemType,Class valueType){
  super.setup(t,colPrefix,false);
  this.collectionType=collectionType.getName();
  Class newType=translateType(itemType);
  this.itemType=newType.getName();
  if (valueType != null) {
    Class newValType=translateType(valueType);
    this.valueType=newValType.getName();
  }
}","@SuppressWarnings(""String_Node_Str"") public void setup(DboTableMeta t,String colPrefix,Class collectionType,Class itemType,Class valueType,boolean isIndexed){
  super.setup(t,colPrefix,isIndexed);
  this.collectionType=collectionType.getName();
  Class newType=translateType(itemType);
  this.itemType=newType.getName();
  if (valueType != null) {
    Class newValType=translateType(valueType);
    this.valueType=newValType.getName();
  }
}",0.9627906976744186
97843,"@Override public String getIndexTableName(){
  return null;
}","@Override public String getIndexTableName(){
  return getStorageType().getIndexTableName();
}",0.7662337662337663
97844,"@SuppressWarnings(""String_Node_Str"") private void translateToColumnMap(OWNER entity,RowToPersist row){
  Map values=(Map)ReflectionUtil.fetchFieldValue(entity,field);
  if (values == null)   values=new HashMap();
  Map toBeAdded=values;
  Collection<T> toBeRemoved=new ArrayList<T>();
  if (values instanceof SimpleMap) {
    SimpleMap coll=(SimpleMap)values;
    toBeRemoved=coll.getToBeRemoved();
    toBeAdded=coll.getToBeAdded();
  }
  translateToColumnMapImpl(toBeAdded,row,toBeRemoved);
}","@SuppressWarnings(""String_Node_Str"") private void translateToColumnMap(InfoForIndex<OWNER> info){
  OWNER entity=info.getEntity();
  RowToPersist row=info.getRow();
  Map values=(Map)ReflectionUtil.fetchFieldValue(entity,field);
  if (values == null)   values=new HashMap();
  Map toBeAdded=values;
  Collection<T> toBeRemoved=new ArrayList<T>();
  if (values instanceof SimpleMap) {
    SimpleMap coll=(SimpleMap)values;
    toBeRemoved=coll.getToBeRemoved();
    toBeAdded=coll.getToBeAdded();
  }
  translateToColumnMapImpl(toBeAdded,row,toBeRemoved);
}",0.7961904761904762
97845,"@SuppressWarnings({""String_Node_Str""}) private Map translateFromColumnMap(Row row,OWNER entity,NoSqlSession session){
  byte[] bytes=StandardConverters.convertToBytes(columnName);
  Collection<Column> columns=row.columnByPrefix(bytes);
  Map<byte[],byte[]> theCols=new HashMap<byte[],byte[]>();
  for (  Column col : columns) {
    byte[] colNameData=col.getName();
    byte[] value=col.getValue();
    int pkLen=colNameData.length - bytes.length;
    byte[] pk=new byte[pkLen];
    for (int i=bytes.length; i < colNameData.length; i++) {
      pk[i - bytes.length]=colNameData[i];
    }
    theCols.put(pk,value);
  }
  return new SimpleMap(converter,valueConverter,theCols);
}","@SuppressWarnings(""String_Node_Str"") private Map translateFromColumnMap(Row row,OWNER entity,NoSqlSession session){
  byte[] bytes=StandardConverters.convertToBytes(columnName);
  Collection<Column> columns=row.columnByPrefix(bytes);
  Map<byte[],byte[]> theCols=new HashMap<byte[],byte[]>();
  for (  Column col : columns) {
    byte[] colNameData=col.getName();
    byte[] value=col.getValue();
    int pkLen=colNameData.length - bytes.length;
    byte[] pk=new byte[pkLen];
    for (int i=bytes.length; i < colNameData.length; i++) {
      pk[i - bytes.length]=colNameData[i];
    }
    theCols.put(pk,value);
  }
  return new SimpleMap(converter,valueConverter,theCols);
}",0.998522895125554
97846,"@Override public void translateToColumn(InfoForIndex<OWNER> info){
  OWNER entity=info.getEntity();
  RowToPersist row=info.getRow();
  if (field.getType().equals(Map.class))   translateToColumnMap(entity,row);
 else   translateToColumnList(entity,row);
}","@Override public void translateToColumn(InfoForIndex<OWNER> info){
  if (field.getType().equals(Map.class))   translateToColumnMap(info);
 else   translateToColumnList(info);
}",0.7981438515081206
97847,"private void translateToColumnImpl(Collection<T> toBeAdded,RowToPersist row,Collection<T> toBeRemoved){
  for (  T p : toBeRemoved) {
    byte[] name=formTheName(p);
    row.addEntityToRemove(name);
  }
  for (  T val : toBeAdded) {
    byte[] name=formTheName(val);
    Column c=new Column();
    c.setName(name);
    row.getColumns().add(c);
  }
}","private void translateToColumnImpl(Collection<T> toBeAdded,InfoForIndex<OWNER> info,Collection<T> toBeRemoved){
  OWNER entity=info.getEntity();
  RowToPersist row=info.getRow();
  for (  T p : toBeRemoved) {
    byte[] name=formTheName(p);
    row.addEntityToRemove(name);
  }
  Object value=ReflectionUtil.fetchFieldValue(entity,field);
  StorageTypeEnum storageType=metaDbo.getStorageType();
  for (  T val : toBeAdded) {
    byte[] name=formTheName(val);
    Column c=new Column();
    c.setName(name);
    row.getColumns().add(c);
    byte[] byteVal=converter.convertToNoSql(val);
    addIndexInfo(info,value,byteVal,storageType);
    removeIndexInfo(info,value,byteVal,storageType);
  }
}",0.6155321188878236
97848,"@SuppressWarnings(""String_Node_Str"") private void translateToColumnList(OWNER entity,RowToPersist row){
  Collection<T> values=(Collection<T>)ReflectionUtil.fetchFieldValue(entity,field);
  if (values == null)   values=new ArrayList<T>();
  Collection<T> toBeAdded=values;
  Collection<T> toBeRemoved=new ArrayList<T>();
  if (values instanceof SimpleAbstractCollection) {
    SimpleAbstractCollection<T> coll=(SimpleAbstractCollection<T>)values;
    toBeRemoved=coll.getToBeRemoved();
    toBeAdded=coll.getToBeAdded();
  }
  translateToColumnImpl(toBeAdded,row,toBeRemoved);
}","@SuppressWarnings(""String_Node_Str"") private void translateToColumnList(InfoForIndex<OWNER> info){
  OWNER entity=info.getEntity();
  Collection<T> values=(Collection<T>)ReflectionUtil.fetchFieldValue(entity,field);
  if (values == null)   values=new ArrayList<T>();
  Collection<T> toBeAdded=values;
  Collection<T> toBeRemoved=new ArrayList<T>();
  if (values instanceof SimpleAbstractCollection) {
    SimpleAbstractCollection<T> coll=(SimpleAbstractCollection<T>)values;
    toBeRemoved=coll.getToBeRemoved();
    toBeAdded=coll.getToBeAdded();
  }
  translateToColumnImpl(toBeAdded,info,toBeRemoved);
}",0.8084388185654009
97849,"@Override protected Object unwrapIfNeeded(Object value){
  throw new UnsupportedOperationException();
}","@Override protected Object unwrapIfNeeded(Object value){
  return value;
}",0.7457627118644068
97850,"public void setup(DboTableMeta t,Field field,String colName,Converter converter,Converter valConverter,Class<?> type,Class<?> valueType){
  super.setup(field,colName);
  metaDbo.setup(t,colName,field.getType(),type,valueType);
  this.converter=converter;
  this.valueConverter=valConverter;
}","public void setup(DboTableMeta t,Field field,String colName,EmbedInfo embedInfo,boolean isIndexed){
  super.setup(field,colName);
  metaDbo.setup(t,colName,field.getType(),embedInfo.getType(),embedInfo.getValueType(),isIndexed);
  this.converter=embedInfo.getConverter();
  this.valueConverter=embedInfo.getValConverter();
}",0.4577922077922078
97851,"@SuppressWarnings(""String_Node_Str"") public MetaField processEmbedded(DboTableMeta t,Field field){
  NoSqlEmbedded embedded=field.getAnnotation(NoSqlEmbedded.class);
  Class<?> type=field.getType();
  Class<?> valType=null;
  if (type.equals(List.class) || type.equals(Set.class)) {
    ParameterizedType genType=(ParameterizedType)field.getGenericType();
    type=(Class<?>)genType.getActualTypeArguments()[0];
  }
 else   if (type.equals(Map.class)) {
    ParameterizedType genType=(ParameterizedType)field.getGenericType();
    type=(Class<?>)genType.getActualTypeArguments()[0];
    valType=(Class<?>)genType.getActualTypeArguments()[1];
  }
  String colNameOrig=embedded.columnNamePrefix();
  String colName=field.getName();
  if (!""String_Node_Str"".equals(colNameOrig))   colName=colNameOrig;
  MetaField metaField;
  if (type.isAnnotationPresent(NoSqlEmbeddable.class)) {
    MetaAbstractClass<?> fkMeta=metaInfo.findOrCreate(type);
    MetaEmbeddedEntity temp=metaEmbeddedProvider.get();
    temp.setup(t,field,colName,fkMeta);
    metaField=temp;
  }
 else {
    Converter converter=lookupConverter(field,type);
    Converter valConverter=null;
    if (valType != null)     valConverter=lookupConverter(field,valType);
    MetaEmbeddedSimple meta=metaEmbeddedSimpleProvider.get();
    meta.setup(t,field,colName,converter,valConverter,type,valType);
    metaField=meta;
  }
  return metaField;
}","@SuppressWarnings(""String_Node_Str"") public MetaField processEmbedded(DboTableMeta t,Field field){
  NoSqlEmbedded embedded=field.getAnnotation(NoSqlEmbedded.class);
  Class<?> type=field.getType();
  Class<?> valType=null;
  if (type.equals(List.class) || type.equals(Set.class)) {
    ParameterizedType genType=(ParameterizedType)field.getGenericType();
    type=(Class<?>)genType.getActualTypeArguments()[0];
  }
 else   if (type.equals(Map.class)) {
    ParameterizedType genType=(ParameterizedType)field.getGenericType();
    type=(Class<?>)genType.getActualTypeArguments()[0];
    valType=(Class<?>)genType.getActualTypeArguments()[1];
  }
  boolean isIndexed=false;
  if (field.isAnnotationPresent(NoSqlIndexed.class))   isIndexed=true;
  String colNameOrig=embedded.columnNamePrefix();
  String colName=field.getName();
  if (!""String_Node_Str"".equals(colNameOrig))   colName=colNameOrig;
  MetaField metaField;
  if (type.isAnnotationPresent(NoSqlEmbeddable.class)) {
    MetaAbstractClass<?> fkMeta=metaInfo.findOrCreate(type);
    MetaEmbeddedEntity temp=metaEmbeddedProvider.get();
    temp.setup(t,field,colName,fkMeta);
    metaField=temp;
  }
 else {
    Converter converter=lookupConverter(field,type);
    Converter valConverter=null;
    if (valType != null)     valConverter=lookupConverter(field,valType);
    MetaEmbeddedSimple meta=metaEmbeddedSimpleProvider.get();
    EmbedInfo embedInfo=new EmbedInfo();
    embedInfo.setConverter(converter);
    embedInfo.setType(type);
    embedInfo.setValConverter(valConverter);
    embedInfo.setValueType(valType);
    meta.setup(t,field,colName,embedInfo,isIndexed);
    metaField=meta;
  }
  return metaField;
}",0.8893216488153197
97852,"@Override public void setup(DboTableMeta owner2,String colName,boolean indexed){
  if (indexed == true)   throw new UnsupportedOperationException(""String_Node_Str"");
  super.setup(owner2,colName,indexed);
}","@Override public void setup(DboTableMeta owner2,String colName,boolean indexed){
  if (indexed)   throw new UnsupportedOperationException(""String_Node_Str"");
  super.setup(owner2,colName,indexed);
}",0.9801980198019802
97853,"public MetaTTLField processTTL(DboTableMeta t,Field field){
  Class type=field.getType();
  if (Integer.class.equals(type) || (int.class.equals(type))) {
    MetaTTLField rc=ttlMetaProvider.get();
    rc.setup(t,field,field.getName(),field.isAnnotationPresent(NoSqlIndexed.class));
    return rc;
  }
 else   throw new IllegalArgumentException(""String_Node_Str"");
}","public MetaTTLField processTTL(DboTableMeta t,Field field){
  Class type=field.getType();
  if (Integer.class.equals(type)) {
    MetaTTLField rc=ttlMetaProvider.get();
    rc.setup(t,field,field.getName(),field.isAnnotationPresent(NoSqlIndexed.class));
    return rc;
  }
 else   if (int.class.equals(type)) {
    MetaTTLField rc=ttlMetaProvider.get();
    rc.setup(t,field,field.getName(),field.isAnnotationPresent(NoSqlIndexed.class));
    return rc;
  }
 else   throw new IllegalArgumentException(""String_Node_Str"");
}",0.7598647125140925
97854,"public boolean isExpired(){
  if (expire > 0 && System.currentTimeMillis() >= expire)   return true;
 else   return false;
}","public boolean isExpired(){
  return (expire > 0 && System.currentTimeMillis() >= expire);
}",0.7962962962962963
97855,"private <T>void scanSingle(MetaClassSingle<T> classMeta,DboTableMeta metaDbo){
  if (alreadyScanned.contains(classMeta.getMetaClass()))   return;
  Class<? extends T> proxyClass=createTheProxy(classMeta.getMetaClass());
  classMeta.setProxyClass(proxyClass);
  scanFields(classMeta,metaDbo);
  alreadyScanned.add(classMeta.getMetaClass());
}","private <T>void scanSingle(MetaClassSingle<T> classMeta,DboTableMeta metaDbo){
  if (classMeta.getProxyClass() != null)   return;
  Class<? extends T> proxyClass=createTheProxy(classMeta.getMetaClass());
  classMeta.setProxyClass(proxyClass);
  scanFields(classMeta,metaDbo);
}",0.7928802588996764
97856,"public CursorColumnSliceMDB(ColumnSliceInfo sliceInfo,BatchListener bListener,Integer batchSize,DB keyspace){
  this.batchListener=bListener;
  this.batchSize=null;
  this.tableName=sliceInfo.getColFamily();
  this.db=keyspace;
  this.from=sliceInfo.getFrom();
  this.to=sliceInfo.getTo();
  this.rowKey=sliceInfo.getRowKey();
  this.columnNameType=sliceInfo.getColumnNameType();
  beforeFirst();
}","public CursorColumnSliceMDB(ColumnSliceInfo sliceInfo,BatchListener bListener,Integer batchSize,DBCollection dbCollection2){
  this.batchListener=bListener;
  this.batchSize=null;
  dbCollection=dbCollection2;
  this.from=sliceInfo.getFrom();
  this.to=sliceInfo.getTo();
  this.rowKey=sliceInfo.getRowKey();
  this.columnNameType=sliceInfo.getColumnNameType();
  beforeFirst();
}",0.8534704370179949
97857,"private void fetchMoreResultsImpl(){
  if (subList != null) {
    if (pointer < subList.size() - 1)     return;
 else     if (batchSize == null)     return;
 else     if (subList.size() < batchSize) {
      return;
    }
  }
  System.out.println(""String_Node_Str"" + pointer);
  pointer=-1;
  if (batchListener != null)   batchListener.beforeFetchingNextBatch();
  DBCollection dbCollection=null;
  if (db != null && db.collectionExists(tableName.getColumnFamily())) {
    dbCollection=db.getCollection(tableName.getColumnFamily());
  }
 else   return;
  DBObject row=dbCollection.findOne(rowKey);
  if (row == null) {
    return;
  }
 else {
    Set<String> fieldSet=row.keySet();
    if (BigInteger.class.equals(columnNameType)) {
      intColumnSlice(fieldSet,row);
    }
 else     if (BigDecimal.class.equals(columnNameType)) {
      decimalColumnSlice(fieldSet,row);
    }
 else     if (String.class.equals(columnNameType)) {
      stringColumSlice(fieldSet,row);
    }
 else     throw new UnsupportedOperationException(""String_Node_Str"" + columnNameType.getName() + ""String_Node_Str"");
  }
  if (subList == null) {
    subList=new ArrayList<DBObject>();
  }
  if (batchListener != null)   batchListener.afterFetchingNextBatch(subList.size());
}","private void fetchMoreResultsImpl(){
  if (subList != null) {
    if (pointer < subList.size() - 1)     return;
 else     if (batchSize == null)     return;
 else     if (subList.size() < batchSize) {
      return;
    }
  }
  pointer=-1;
  if (batchListener != null)   batchListener.beforeFetchingNextBatch();
  DBObject row=dbCollection.findOne(rowKey);
  if (row == null) {
    return;
  }
 else {
    Set<String> fieldSet=row.keySet();
    if (BigInteger.class.equals(columnNameType)) {
      intColumnSlice(fieldSet,row);
    }
 else     if (BigDecimal.class.equals(columnNameType)) {
      decimalColumnSlice(fieldSet,row);
    }
 else     if (String.class.equals(columnNameType)) {
      stringColumSlice(fieldSet,row);
    }
 else     throw new UnsupportedOperationException(""String_Node_Str"" + columnNameType.getName() + ""String_Node_Str"");
  }
  if (subList == null) {
    subList=new ArrayList<DBObject>();
  }
  if (batchListener != null)   batchListener.afterFetchingNextBatch(subList.size());
}",0.8932210899424015
97858,"private void decimalColumnSlice(Set<String> fieldSet,DBObject row){
  subList=new ArrayList<DBObject>();
  Map<BigDecimal,Object> map=new TreeMap<BigDecimal,Object>();
  BigDecimal fromField=StandardConverters.convertFromBytes(BigDecimal.class,from);
  BigDecimal toField=StandardConverters.convertFromBytes(BigDecimal.class,to);
  for (  String field : fieldSet) {
    if (!field.equalsIgnoreCase(""String_Node_Str"")) {
      BigDecimal name=StandardConverters.convertFromBytes(BigDecimal.class,StandardConverters.convertFromString(byte[].class,field));
      if (name.compareTo(fromField) > 0 && name.compareTo(toField) < 0) {
        Object value=row.get(field);
        map.put(name,value);
      }
    }
  }
  for (  BigDecimal field : map.keySet()) {
    String newField=StandardConverters.convertToString(StandardConverters.convertToBytes(field));
    BasicDBObject dbObject=new BasicDBObject(newField,map.get(field));
    subList.add(dbObject);
  }
}","private void decimalColumnSlice(Set<String> fieldSet,DBObject row){
  subList=new ArrayList<DBObject>();
  Map<BigDecimal,Object> map=new TreeMap<BigDecimal,Object>();
  BigDecimal fromField=StandardConverters.convertFromBytes(BigDecimal.class,from);
  BigDecimal toField=StandardConverters.convertFromBytes(BigDecimal.class,to);
  for (  String field : fieldSet) {
    if (!field.equalsIgnoreCase(""String_Node_Str"")) {
      BigDecimal name=StandardConverters.convertFromBytes(BigDecimal.class,StandardConverters.convertFromString(byte[].class,field));
      if (name.compareTo(fromField) >= 0 && name.compareTo(toField) <= 0) {
        Object value=row.get(field);
        map.put(name,value);
      }
    }
  }
  for (  BigDecimal field : map.keySet()) {
    String newField=StandardConverters.convertToString(StandardConverters.convertToBytes(field));
    BasicDBObject dbObject=new BasicDBObject(newField,map.get(field));
    subList.add(dbObject);
  }
}",0.9989561586638832
97859,"private void intColumnSlice(Set<String> fieldSet,DBObject row){
  subList=new ArrayList<DBObject>();
  Map<BigInteger,Object> map=new TreeMap<BigInteger,Object>();
  BigInteger fromField=StandardConverters.convertFromBytes(BigInteger.class,from);
  BigInteger toField=StandardConverters.convertFromBytes(BigInteger.class,to);
  for (  String field : fieldSet) {
    if (!field.equalsIgnoreCase(""String_Node_Str"")) {
      BigInteger name=StandardConverters.convertFromBytes(BigInteger.class,StandardConverters.convertFromString(byte[].class,field));
      if (name.compareTo(fromField) > 0 && name.compareTo(toField) < 0) {
        Object value=row.get(field);
        map.put(name,value);
      }
    }
  }
  for (  BigInteger field : map.keySet()) {
    String newField=StandardConverters.convertToString(StandardConverters.convertToBytes(field));
    BasicDBObject dbObject=new BasicDBObject(newField,map.get(field));
    subList.add(dbObject);
  }
}","private void intColumnSlice(Set<String> fieldSet,DBObject row){
  subList=new ArrayList<DBObject>();
  Map<BigInteger,Object> map=new TreeMap<BigInteger,Object>();
  BigInteger fromField=StandardConverters.convertFromBytes(BigInteger.class,from);
  BigInteger toField=StandardConverters.convertFromBytes(BigInteger.class,to);
  for (  String field : fieldSet) {
    if (!field.equalsIgnoreCase(""String_Node_Str"")) {
      BigInteger name=StandardConverters.convertFromBytes(BigInteger.class,StandardConverters.convertFromString(byte[].class,field));
      if (name.compareTo(fromField) >= 0 && name.compareTo(toField) <= 0) {
        Object value=row.get(field);
        map.put(name,value);
      }
    }
  }
  for (  BigInteger field : map.keySet()) {
    String newField=StandardConverters.convertToString(StandardConverters.convertToBytes(field));
    BasicDBObject dbObject=new BasicDBObject(newField,map.get(field));
    subList.add(dbObject);
  }
}",0.99895178197065
97860,"private void stringColumSlice(Set<String> fieldSet,DBObject row){
  subList=new ArrayList<DBObject>();
  Map<String,Object> map=new TreeMap<String,Object>();
  String fromField=StandardConverters.convertFromBytes(String.class,from);
  String toField=StandardConverters.convertFromBytes(String.class,to);
  for (  String field : fieldSet) {
    if (!field.equalsIgnoreCase(""String_Node_Str"")) {
      if (field.compareTo(fromField) > 0 && field.compareTo(toField) < 0) {
        Object value=row.get(field);
        map.put(field,value);
      }
    }
  }
  for (  String field : map.keySet()) {
    BasicDBObject dbObject=new BasicDBObject(field,map.get(field));
    subList.add(dbObject);
  }
}","private void stringColumSlice(Set<String> fieldSet,DBObject row){
  subList=new ArrayList<DBObject>();
  Map<String,Object> map=new TreeMap<String,Object>();
  String fromField=StandardConverters.convertFromBytes(String.class,from);
  String toField=StandardConverters.convertFromBytes(String.class,to);
  for (  String field : fieldSet) {
    if (!field.equalsIgnoreCase(""String_Node_Str"")) {
      if (field.compareTo(fromField) >= 0 && field.compareTo(toField) <= 0) {
        Object value=row.get(field);
        map.put(field,value);
      }
    }
  }
  for (  String field : map.keySet()) {
    BasicDBObject dbObject=new BasicDBObject(field,map.get(field));
    subList.add(dbObject);
  }
}",0.9985632183908046
97861,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public AbstractCursor<Column> columnSlice(ColumnSliceInfo sliceInfo,Integer batchSize,BatchListener l,MetaLookup mgr){
  Info info=fetchDbCollectionInfo(sliceInfo.getColFamily().getColumnFamily(),mgr);
  if (info == null) {
    return null;
  }
  CursorColumnSliceMDB cursor=new CursorColumnSliceMDB(sliceInfo,l,batchSize,db);
  return cursor;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public AbstractCursor<Column> columnSlice(ColumnSliceInfo sliceInfo,Integer batchSize,BatchListener l,MetaLookup mgr){
  Info info=fetchDbCollectionInfo(sliceInfo.getColFamily().getColumnFamily(),mgr);
  if (info == null) {
    return null;
  }
  CursorColumnSliceMDB cursor=new CursorColumnSliceMDB(sliceInfo,l,batchSize,info.getDbObj());
  return cursor;
}",0.9796893667861408
97862,"@Test public void testTimeSeriesData(){
  if (FactorySingleton.getServerType() != DbTypeEnum.CASSANDRA || FactorySingleton.getServerType() != DbTypeEnum.IN_MEMORY)   return;
  NoSqlTypedSession typedSession=mgr.getTypedSession();
  String colFamily=""String_Node_Str"";
  long partitionSize=TimeUnit.MILLISECONDS.convert(30,TimeUnit.DAYS);
  DboTableMeta tm=new DboTableMeta();
  tm.setTimeSeries(true);
  tm.setTimeSeriesPartionSize(partitionSize);
  tm.setup(colFamily,""String_Node_Str"",false,false);
  tm.setColNameType(long.class);
  DboColumnIdMeta idMeta=new DboColumnIdMeta();
  idMeta.setup(tm,""String_Node_Str"",BigInteger.class,false);
  DboColumnCommonMeta meta=new DboColumnCommonMeta();
  meta.setup(tm,""String_Node_Str"",BigDecimal.class,false,false);
  mgr.put(idMeta);
  mgr.put(meta);
  mgr.put(tm);
  mgr.flush();
  TypedRow row=typedSession.createTypedRow(colFamily);
  BigInteger rowKey=new BigInteger(""String_Node_Str"");
  row.setRowKey(rowKey);
  row.addTimeValue(0,new BigDecimal(56));
  row.addTimeValue(10,new BigDecimal(56));
  row.addTimeValue(20,new BigDecimal(56));
  row.addTimeValue(30,new BigDecimal(56));
  row.addTimeValue(40,new BigDecimal(56));
  row.addTimeValue(50,new BigDecimal(56));
  row.addTimeValue(60,new BigDecimal(56));
  row.addTimeValue(70,new BigDecimal(56));
  row.addTimeValue(80,new BigDecimal(56));
  row.addTimeValue(90,new BigDecimal(56));
  row.addTimeValue(100,new BigDecimal(56));
  typedSession.put(colFamily,row);
  typedSession.flush();
  Cursor<TimeValColumn> timeVal=typedSession.timeSeriesSlice(colFamily,rowKey,40,60,200);
  for (int i=0; i < 3; i++) {
    timeVal.next();
    TimeValColumn current=timeVal.getCurrent();
    Assert.assertEquals(i * 10 + 40,current.getTime());
  }
}","@Test public void testTimeSeriesData(){
  NoSqlTypedSession typedSession=mgr.getTypedSession();
  String colFamily=""String_Node_Str"";
  long partitionSize=TimeUnit.MILLISECONDS.convert(30,TimeUnit.DAYS);
  DboTableMeta tm=new DboTableMeta();
  tm.setTimeSeries(true);
  tm.setTimeSeriesPartionSize(partitionSize);
  tm.setup(colFamily,""String_Node_Str"",false,false);
  tm.setColNameType(long.class);
  DboColumnIdMeta idMeta=new DboColumnIdMeta();
  idMeta.setup(tm,""String_Node_Str"",BigInteger.class,false);
  DboColumnCommonMeta meta=new DboColumnCommonMeta();
  meta.setup(tm,""String_Node_Str"",BigDecimal.class,false,false);
  mgr.put(idMeta);
  mgr.put(meta);
  mgr.put(tm);
  mgr.flush();
  TypedRow row=typedSession.createTypedRow(colFamily);
  BigInteger rowKey=new BigInteger(""String_Node_Str"");
  row.setRowKey(rowKey);
  row.addTimeValue(0,new BigDecimal(56));
  row.addTimeValue(10,new BigDecimal(56));
  row.addTimeValue(20,new BigDecimal(56));
  row.addTimeValue(30,new BigDecimal(56));
  row.addTimeValue(40,new BigDecimal(56));
  row.addTimeValue(50,new BigDecimal(56));
  row.addTimeValue(60,new BigDecimal(56));
  row.addTimeValue(70,new BigDecimal(56));
  row.addTimeValue(80,new BigDecimal(56));
  row.addTimeValue(90,new BigDecimal(56));
  row.addTimeValue(100,new BigDecimal(56));
  typedSession.put(colFamily,row);
  typedSession.flush();
  Cursor<TimeValColumn> timeVal=typedSession.timeSeriesSlice(colFamily,rowKey,40,60,200);
  for (int i=0; i < 3; i++) {
    timeVal.next();
    TimeValColumn current=timeVal.getCurrent();
    Assert.assertEquals(i * 10 + 40,current.getTime());
  }
}",0.9600477042337509
97863,"@Test public void testEmbeddedSimple(){
  Email sub=new Email();
  sub.setId(""String_Node_Str"");
  sub.setName(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getInts().add(5);
  sub.getInts().add(8);
  sub.getSomeSet().add(10l);
  sub.getSomeSet().add(20l);
  mgr.put(sub);
  mgr.flush();
  NoSqlEntityManager mgr2=factory.createEntityManager();
  Email email=mgr2.find(Email.class,sub.getId());
  NoSqlEntityManager mgr3=factory.createEntityManager();
  Email email2=mgr3.find(Email.class,sub.getId());
  List<String> ids=email.getIds();
  Assert.assertEquals(""String_Node_Str"",ids.get(0));
  List<Integer> nums=email.getInts();
  Assert.assertEquals(new Integer(5),nums.get(0));
  email.getInts().remove(0);
  email.getIds().remove(""String_Node_Str"");
  email.getSomeSet().remove(20l);
  mgr2.put(email);
  mgr2.flush();
  email2.getInts().add(12);
  email2.getIds().add(""String_Node_Str"");
  email2.getSomeSet().add(30l);
  mgr3.put(email2);
  mgr3.flush();
  NoSqlEntityManager mgr4=factory.createEntityManager();
  Email emailF=mgr4.find(Email.class,sub.getId());
  Assert.assertEquals(2,emailF.getInts().size());
  Assert.assertEquals(2,emailF.getIds().size());
  Assert.assertEquals(2,emailF.getSomeSet().size());
  Assert.assertEquals(new Integer(8),emailF.getInts().get(0));
  Assert.assertEquals(new Integer(12),emailF.getInts().get(1));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(0));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(1));
  Assert.assertEquals(10l,emailF.getSomeSet().toArray()[0]);
  Assert.assertEquals(30l,emailF.getSomeSet().toArray()[1]);
}","@Test public void testEmbeddedSimple(){
  Email sub=new Email();
  sub.setId(""String_Node_Str"");
  sub.setName(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getInts().add(5);
  sub.getInts().add(8);
  sub.getSomeSet().add(10L);
  sub.getSomeSet().add(20L);
  mgr.put(sub);
  mgr.flush();
  NoSqlEntityManager mgr2=factory.createEntityManager();
  Email email=mgr2.find(Email.class,sub.getId());
  NoSqlEntityManager mgr3=factory.createEntityManager();
  Email email2=mgr3.find(Email.class,sub.getId());
  List<String> ids=email.getIds();
  Assert.assertEquals(""String_Node_Str"",ids.get(0));
  List<Integer> nums=email.getInts();
  Assert.assertEquals(new Integer(5),nums.get(0));
  email.getInts().remove(0);
  email.getIds().remove(""String_Node_Str"");
  email.getSomeSet().remove(20L);
  mgr2.put(email);
  mgr2.flush();
  email2.getInts().add(12);
  email2.getIds().add(""String_Node_Str"");
  email2.getSomeSet().add(30L);
  mgr3.put(email2);
  mgr3.flush();
  NoSqlEntityManager mgr4=factory.createEntityManager();
  Email emailF=mgr4.find(Email.class,sub.getId());
  Assert.assertEquals(2,emailF.getInts().size());
  Assert.assertEquals(2,emailF.getIds().size());
  Assert.assertEquals(2,emailF.getSomeSet().size());
  Assert.assertEquals(new Integer(8),emailF.getInts().get(0));
  Assert.assertEquals(new Integer(12),emailF.getInts().get(1));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(0));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(1));
  Assert.assertEquals(10L,emailF.getSomeSet().toArray()[0]);
  Assert.assertEquals(30L,emailF.getSomeSet().toArray()[1]);
}",0.9963811821471652
97864,"@Test public void testAllRowsPolymorphic(){
  if (FactorySingleton.getServerType() != DbTypeEnum.CASSANDRA && FactorySingleton.getServerType() != DbTypeEnum.IN_MEMORY)   return;
  NonVirtSub1 s1=new NonVirtSub1();
  s1.setName(""String_Node_Str"");
  NonVirtSub2 s2=new NonVirtSub2();
  s2.setNum(5);
  mgr.put(s1);
  mgr.put(s2);
  mgr.flush();
  Cursor<NonVirtSuper> cursor=mgr.allRows(NonVirtSuper.class,""String_Node_Str"",500);
  int count=0;
  while (cursor.next()) {
    NonVirtSuper current=cursor.getCurrent();
    count++;
  }
  Assert.assertEquals(2,count);
}","@Test public void testAllRowsPolymorphic(){
  if (FactorySingleton.getServerType() != DbTypeEnum.CASSANDRA)   return;
  NonVirtSub1 s1=new NonVirtSub1();
  s1.setName(""String_Node_Str"");
  NonVirtSub2 s2=new NonVirtSub2();
  s2.setNum(5);
  mgr.put(s1);
  mgr.put(s2);
  mgr.flush();
  Cursor<NonVirtSuper> cursor=mgr.allRows(NonVirtSuper.class,""String_Node_Str"",500);
  int count=0;
  while (cursor.next()) {
    NonVirtSuper current=cursor.getCurrent();
    count++;
  }
  Assert.assertEquals(2,count);
}",0.9440298507462688
97865,"private Object translateFromColumnSet(Row row,OWNER entity,NoSqlSession session){
  List<byte[]> values=MetaToManyField.parseColNamePostfix(columnName,row);
  throw new UnsupportedOperationException(""String_Node_Str"");
}","private Object translateFromColumnSet(Row row,OWNER entity,NoSqlSession session){
  List<byte[]> values=MetaToManyField.parseColNamePostfix(columnName,row);
  Set<T> retVal=new SimpleSet<T>(converter,values);
  return retVal;
}",0.738255033557047
97866,"@Test public void testEmbeddedSimple(){
  Email sub=new Email();
  sub.setId(""String_Node_Str"");
  sub.setName(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getInts().add(5);
  sub.getInts().add(8);
  mgr.put(sub);
  mgr.flush();
  NoSqlEntityManager mgr2=factory.createEntityManager();
  Email email=mgr2.find(Email.class,sub.getId());
  NoSqlEntityManager mgr3=factory.createEntityManager();
  Email email2=mgr3.find(Email.class,sub.getId());
  List<String> ids=email.getIds();
  Assert.assertEquals(""String_Node_Str"",ids.get(0));
  List<Integer> nums=email.getInts();
  Assert.assertEquals(new Integer(5),nums.get(0));
  email.getInts().remove(0);
  email.getIds().remove(""String_Node_Str"");
  mgr2.put(email);
  mgr2.flush();
  email2.getInts().add(12);
  email2.getIds().add(""String_Node_Str"");
  mgr3.put(email2);
  mgr3.flush();
  NoSqlEntityManager mgr4=factory.createEntityManager();
  Email emailF=mgr4.find(Email.class,sub.getId());
  Assert.assertEquals(2,emailF.getInts().size());
  Assert.assertEquals(2,emailF.getIds().size());
  Assert.assertEquals(new Integer(8),emailF.getInts().get(0));
  Assert.assertEquals(new Integer(12),emailF.getInts().get(1));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(0));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(1));
}","@Test public void testEmbeddedSimple(){
  Email sub=new Email();
  sub.setId(""String_Node_Str"");
  sub.setName(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getIds().add(""String_Node_Str"");
  sub.getInts().add(5);
  sub.getInts().add(8);
  sub.getSomeSet().add(""String_Node_Str"");
  sub.getSomeSet().add(""String_Node_Str"");
  mgr.put(sub);
  mgr.flush();
  NoSqlEntityManager mgr2=factory.createEntityManager();
  Email email=mgr2.find(Email.class,sub.getId());
  NoSqlEntityManager mgr3=factory.createEntityManager();
  Email email2=mgr3.find(Email.class,sub.getId());
  List<String> ids=email.getIds();
  Assert.assertEquals(""String_Node_Str"",ids.get(0));
  List<Integer> nums=email.getInts();
  Assert.assertEquals(new Integer(5),nums.get(0));
  email.getInts().remove(0);
  email.getIds().remove(""String_Node_Str"");
  email.getSomeSet().remove(""String_Node_Str"");
  mgr2.put(email);
  mgr2.flush();
  email2.getInts().add(12);
  email2.getIds().add(""String_Node_Str"");
  email2.getSomeSet().add(""String_Node_Str"");
  mgr3.put(email2);
  mgr3.flush();
  NoSqlEntityManager mgr4=factory.createEntityManager();
  Email emailF=mgr4.find(Email.class,sub.getId());
  Assert.assertEquals(2,emailF.getInts().size());
  Assert.assertEquals(2,emailF.getIds().size());
  Assert.assertEquals(2,emailF.getSomeSet().size());
  Assert.assertEquals(new Integer(8),emailF.getInts().get(0));
  Assert.assertEquals(new Integer(12),emailF.getInts().get(1));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(0));
  Assert.assertEquals(""String_Node_Str"",emailF.getIds().get(1));
  Assert.assertEquals(""String_Node_Str"",emailF.getSomeSet().toArray()[0]);
  Assert.assertEquals(""String_Node_Str"",emailF.getSomeSet().toArray()[1]);
}",0.8764914543695582
97867,"@Override public Cursor<IndexPoint> indexView(String columnFamily,String column,String partitionBy,String partitionId){
  DboTableMeta meta=cachedMeta.getMeta(columnFamily);
  if (meta == null)   throw new IllegalArgumentException(""String_Node_Str"" + columnFamily + ""String_Node_Str"");
  DboColumnMeta colMeta=meta.getColumnMeta(column);
  if (colMeta == null) {
    colMeta=meta.getIdColumnMeta();
    if (!(colMeta != null && colMeta.getColumnName().equals(column)))     throw new IllegalArgumentException(""String_Node_Str"" + column + ""String_Node_Str""+ columnFamily);
  }
 else   if (!colMeta.isIndexed())   throw new IllegalArgumentException(""String_Node_Str"" + column + ""String_Node_Str"");
 else   if (meta.getPartitionedColumns().size() > 1 && partitionBy == null)   throw new IllegalArgumentException(""String_Node_Str"" + columnFamily + ""String_Node_Str"");
  ScanInfo info=ScanInfo.createScanInfo(colMeta,partitionBy,partitionId);
  AbstractCursor<IndexColumn> indCol=session.scanIndex(info,null,null,null);
  AbstractCursor<IndexPoint> results=new CursorToIndexPoint(meta.getIdColumnMeta(),colMeta,indCol);
  return results;
}","@Override public Cursor<IndexPoint> indexView(String columnFamily,String column,String partitionBy,String partitionId){
  DboTableMeta meta=cachedMeta.getMeta(columnFamily);
  if (meta == null)   throw new IllegalArgumentException(""String_Node_Str"" + columnFamily + ""String_Node_Str"");
  DboColumnMeta colMeta=meta.getColumnMeta(column);
  if (colMeta == null) {
    colMeta=meta.getIdColumnMeta();
    if (!(colMeta != null && colMeta.getColumnName().equals(column)))     throw new IllegalArgumentException(""String_Node_Str"" + column + ""String_Node_Str""+ columnFamily);
  }
  if (!colMeta.isIndexed())   throw new IllegalArgumentException(""String_Node_Str"" + column + ""String_Node_Str"");
 else   if (meta.getPartitionedColumns().size() > 1 && partitionBy == null)   throw new IllegalArgumentException(""String_Node_Str"" + columnFamily + ""String_Node_Str"");
  ScanInfo info=ScanInfo.createScanInfo(colMeta,partitionBy,partitionId);
  AbstractCursor<IndexColumn> indCol=session.scanIndex(info,null,null,null);
  AbstractCursor<IndexPoint> results=new CursorToIndexPoint(meta.getIdColumnMeta(),colMeta,indCol);
  return results;
}",0.9973451327433628
97868,"/** 
 * This method should only be used on small count CF's(less than 5 million or so).  For large count CF's, use map/reduce. Be away that millions of rows can take a while to read so this is usually reserved for longer operations. Returns all rows in a concrete CF.  If your CF is inheritance(many entity types in one CF), then your baseEntty should be the super class.  If you have many virtual tables in a CF(and you have inheritance in some virtual tables or not), then your baseEntity should be Object.class.  This method will return the proper types of entitys.  For inheritance base, it will return the types based on each rows discriminator column.  For virtual tables, it looks at each row and returns the type based on that virtual table so each row coming back would be a different type.
 * @param baseEntity
 * @param i
 * @return
 */
public <T>Cursor<T> allRows(Class<T> baseEntity,String cf,int batchSize);","/** 
 * This method should only be used on small count CF's(less than 5 million or so).  For large count CF's, use map/reduce. Be away that millions of rows can take a while to read so this is usually reserved for longer operations. Returns all rows in a concrete CF.  If your CF is inheritance(many entity types in one CF), then your baseEntty should be the super class.  If you have many virtual tables in a CF(and you have inheritance in some virtual tables or not), then your baseEntity should be Object.class.  This method will return the proper types of entitys.  For inheritance base, it will return the types based on each rows discriminator column.  For virtual tables, it looks at each row and returns the type based on that virtual table so each row coming back would be a different type.
 * @param baseEntity
 * @param cf
 * @param batchSize
 * @return A Cursor
 */
public <T>Cursor<T> allRows(Class<T> baseEntity,String cf,int batchSize);",0.9764957264957264
97869,"public void reindex(String cmd,NoSqlEntityManager mgr){
  String oldCommand=cmd.substring(8);
  String command=oldCommand.trim();
  ColFamilyData data=parseData(mgr,command);
  NoSqlTypedSession s=mgr.getTypedSession();
  String cf=data.getColFamily();
  String field=data.getColumn();
  String by=data.getPartitionBy();
  String id=data.getPartitionId();
  Cursor<IndexPoint> indexView=s.indexView(cf,field,by,id);
  Cursor<IndexPoint> indexView2=s.indexView(cf,field,by,id);
  DboTableMeta meta=data.getTableMeta();
  DboColumnMeta colMeta=data.getColumnMeta();
  System.out.println(""String_Node_Str"" + colMeta.getStorageType());
  System.out.println(""String_Node_Str"" + meta.getIdColumnMeta().getStorageType());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int totalChanges=0;
  int rowCountProcessed=0;
  while (true) {
    Map<Object,KeyValue<TypedRow>> keyToRow=findNextSetOfData(s,cf,indexView);
    rowCountProcessed+=keyToRow.size();
    if (keyToRow.size() == 0) {
      break;
    }
    Counter c=processAllColumns(s,data,keyToRow,indexView2);
    totalChanges+=c.getChangedCounter();
    if (rowCountProcessed % 1000 == 0) {
      System.out.println(""String_Node_Str"" + rowCountProcessed + ""String_Node_Str""+ totalRowCount+ ""String_Node_Str""+ totalChanges);
    }
  }
  System.out.println(""String_Node_Str"" + rowCountProcessed + ""String_Node_Str""+ totalRowCount+ ""String_Node_Str""+ totalChanges);
}","public void reindex(String cmd,NoSqlEntityManager mgr){
  String oldCommand=cmd.substring(8);
  String command=oldCommand.trim();
  ColFamilyData data=parseData(mgr,command);
  NoSqlTypedSession s=mgr.getTypedSession();
  String cf=data.getColFamily();
  String field=data.getColumn();
  String by=data.getPartitionBy();
  String id=data.getPartitionId();
  DboTableMeta meta=data.getTableMeta();
  DboColumnMeta colMeta=data.getColumnMeta();
  if (!colMeta.isIndexed()) {
    System.out.println(""String_Node_Str"" + field + ""String_Node_Str"");
    ScanInfo info=ScanInfo.createScanInfo(colMeta,by,id);
    DboTableMeta indexTableMeta=mgr.find(DboTableMeta.class,info.getIndexColFamily());
    System.out.println(""String_Node_Str"");
    mgr.getSession().remove(indexTableMeta,info.getRowKey());
    s.flush();
    return;
  }
  Cursor<IndexPoint> indexView=s.indexView(cf,field,by,id);
  Cursor<IndexPoint> indexView2=s.indexView(cf,field,by,id);
  System.out.println(""String_Node_Str"" + colMeta.getStorageType());
  System.out.println(""String_Node_Str"" + meta.getIdColumnMeta().getStorageType());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int totalChanges=0;
  int rowCountProcessed=0;
  while (true) {
    Map<Object,KeyValue<TypedRow>> keyToRow=findNextSetOfData(s,cf,indexView);
    rowCountProcessed+=keyToRow.size();
    if (keyToRow.size() == 0) {
      break;
    }
    Counter c=processAllColumns(s,data,keyToRow,indexView2);
    totalChanges+=c.getChangedCounter();
    if (rowCountProcessed % 1000 == 0) {
      System.out.println(""String_Node_Str"" + rowCountProcessed + ""String_Node_Str""+ totalRowCount+ ""String_Node_Str""+ totalChanges);
    }
  }
  System.out.println(""String_Node_Str"" + rowCountProcessed + ""String_Node_Str""+ totalRowCount+ ""String_Node_Str""+ totalChanges);
}",0.8304878048780487
97870,"private Object createProxy(byte[] rowKey,Row row){
  Object newproxy=null;
  try {
    newproxy=classMeta.getMetaClass().newInstance();
  }
 catch (  InstantiationException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  DboColumnMeta colMeta=this.getMetaDbo();
  if (classMeta.getIdField() != null && (rowKey != null)) {
    DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
    Object idValue1=embedMeta.getFkToColumnFamily().getIdColumnMeta().getStorageType().convertFromNoSql(rowKey);
    ReflectionUtil.putFieldValue(newproxy,classMeta.getIdField().field,idValue1);
    byte[] prefix=StandardConverters.convertToBytes(getColumnName());
    byte[] idBytes=StandardConverters.convertToBytes(idValue1);
    byte[] embedColumn=new byte[prefix.length + idBytes.length];
    System.arraycopy(prefix,0,embedColumn,0,prefix.length);
    System.arraycopy(idBytes,0,embedColumn,prefix.length,idBytes.length);
    Collection<Column> columnsInRow=row.columnByPrefix(embedColumn);
    for (    Column colInRow : columnsInRow) {
      byte[] fullNameCol=colInRow.getName();
      int colLen=fullNameCol.length - embedColumn.length;
      byte[] fk=new byte[colLen];
      for (int i=embedColumn.length; i < fullNameCol.length; i++) {
        fk[i - embedColumn.length]=fullNameCol[i];
      }
      Object colVal=colMeta.convertFromStorage2(fk);
      String colName=colMeta.convertTypeToString(colVal);
      Object columnValue=null;
      MetaField<PROXY> metaField=classMeta.getMetaFieldByCol(null,colName);
      NoSqlConverter customConv=metaField.getField().getAnnotation(NoSqlConverter.class);
      if (customConv != null) {
        columnValue=getValue(colInRow.getValue(),customConv);
      }
 else {
        columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(colName).getStorageType().convertFromNoSql(colInRow.getValue());
      }
      if (metaField != null)       ReflectionUtil.putFieldValue(newproxy,metaField.getField(),columnValue);
    }
  }
 else {
    byte[] colName=StandardConverters.convertToBytes(getColumnName());
    Collection<Column> columnsWORowKey=row.columnByPrefix(colName);
    for (    Column col : columnsWORowKey) {
      byte[] fullName=col.getName();
      int embedColumnLen=fullName.length - colName.length;
      byte[] embedColumn=new byte[embedColumnLen];
      for (int i=colName.length; i < fullName.length; i++) {
        embedColumn[i - colName.length]=fullName[i];
      }
      Object colVal=colMeta.convertFromStorage2(embedColumn);
      String columnName=colMeta.convertTypeToString(colVal);
      DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
      if (embedMeta.getFkToColumnFamily().getColumnMeta(columnName) == null)       continue;
      Object columnValue=null;
      MetaField<PROXY> metaField=classMeta.getMetaFieldByCol(null,columnName);
      NoSqlConverter customConv=metaField.getField().getAnnotation(NoSqlConverter.class);
      if (customConv != null) {
        columnValue=getValue(col.getValue(),customConv);
      }
 else {
        columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(columnName).getStorageType().convertFromNoSql(col.getValue());
      }
      if (classMeta.getMetaFieldByCol(null,columnName) != null)       ReflectionUtil.putFieldValue(newproxy,classMeta.getMetaFieldByCol(null,columnName).getField(),columnValue);
    }
  }
  return newproxy;
}","private Object createProxy(byte[] rowKey,Row row){
  Object newproxy=null;
  try {
    newproxy=classMeta.getMetaClass().newInstance();
  }
 catch (  InstantiationException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  DboColumnMeta colMeta=this.getMetaDbo();
  if (classMeta.getIdField() != null && (rowKey != null)) {
    DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
    Object idValue=null;
    MetaField<PROXY> metaFieldId=classMeta.getIdField();
    NoSqlConverter customConvId=metaFieldId.getField().getAnnotation(NoSqlConverter.class);
    byte[] idBytes=null;
    if (customConvId != null) {
      idValue=getValue(rowKey,customConvId);
      idBytes=getBytesValue(idValue,customConvId);
    }
 else {
      idValue=embedMeta.getFkToColumnFamily().getIdColumnMeta().getStorageType().convertFromNoSql(rowKey);
      idBytes=StandardConverters.convertToBytes(idValue);
    }
    if (metaFieldId != null)     ReflectionUtil.putFieldValue(newproxy,metaFieldId.getField(),idValue);
    byte[] prefix=StandardConverters.convertToBytes(getColumnName());
    byte[] embedColumn=new byte[prefix.length + idBytes.length];
    System.arraycopy(prefix,0,embedColumn,0,prefix.length);
    System.arraycopy(idBytes,0,embedColumn,prefix.length,idBytes.length);
    Collection<Column> columnsInRow=row.columnByPrefix(embedColumn);
    for (    Column colInRow : columnsInRow) {
      byte[] fullNameCol=colInRow.getName();
      int colLen=fullNameCol.length - embedColumn.length;
      byte[] fk=new byte[colLen];
      for (int i=embedColumn.length; i < fullNameCol.length; i++) {
        fk[i - embedColumn.length]=fullNameCol[i];
      }
      Object colVal=colMeta.convertFromStorage2(fk);
      String colName=colMeta.convertTypeToString(colVal);
      Object columnValue=null;
      MetaField<PROXY> metaField=classMeta.getMetaFieldByCol(null,colName);
      NoSqlConverter customConv=metaField.getField().getAnnotation(NoSqlConverter.class);
      if (customConv != null) {
        columnValue=getValue(colInRow.getValue(),customConv);
      }
 else {
        columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(colName).getStorageType().convertFromNoSql(colInRow.getValue());
      }
      if (metaField != null)       ReflectionUtil.putFieldValue(newproxy,metaField.getField(),columnValue);
    }
  }
 else {
    createProxy2(colMeta,newproxy,row);
  }
  return newproxy;
}",0.5330674642738451
97871,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private boolean processIdFieldWorks(MetaAbstractClass metaClass,DboTableMeta metaDbo,Field field){
  if (!field.isAnnotationPresent(NoSqlId.class))   return false;
  if (metaClass.getIdField() != null) {
    Field existingField=metaClass.getIdField().getField();
    if (field.equals(existingField)) {
      log.warn(""String_Node_Str"" + metaClass.getClass() + ""String_Node_Str"",new RuntimeException().fillInStackTrace());
      log.warn(""String_Node_Str"",metaClass.getFirstTrace());
      return true;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + metaClass.getClass() + ""String_Node_Str""+ field+ ""String_Node_Str""+ existingField);
    }
  }
 else   if (log.isDebugEnabled()) {
    metaClass.setFirstTrace(new RuntimeException(""String_Node_Str"" + field + ""String_Node_Str""+ metaClass).fillInStackTrace());
  }
  MetaIdField idField=inspectorField.processId(metaDbo,field,metaClass);
  metaClass.setIdField(idField);
  return true;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private boolean processIdFieldWorks(MetaAbstractClass metaClass,DboTableMeta metaDbo,Field field){
  if (!field.isAnnotationPresent(NoSqlId.class))   return false;
  if (metaClass.getIdField() != null) {
    Field existingField=metaClass.getIdField().getField();
    if (field.equals(existingField)) {
      log.warn(""String_Node_Str"" + metaClass.getClass() + ""String_Node_Str"",new RuntimeException().fillInStackTrace());
      log.warn(""String_Node_Str"",metaClass.getFirstTrace());
      return true;
    }
 else     if (!metaClass.getMetaDbo().isEmbeddable()) {
      throw new IllegalArgumentException(""String_Node_Str"" + metaClass.getClass() + ""String_Node_Str""+ field+ ""String_Node_Str""+ existingField);
    }
  }
 else   if (log.isDebugEnabled()) {
    metaClass.setFirstTrace(new RuntimeException(""String_Node_Str"" + field + ""String_Node_Str""+ metaClass).fillInStackTrace());
  }
  MetaIdField idField=inspectorField.processId(metaDbo,field,metaClass);
  metaClass.setIdField(idField);
  return true;
}",0.9769673704414588
97872,"@SuppressWarnings(""String_Node_Str"") @Override public void onApplicationStart(){
  List<Class> classes=Play.classloader.getAnnotatedClasses(NoSqlEntity.class);
  List<Class> classEmbeddables=Play.classloader.getAnnotatedClasses(NoSqlEmbeddable.class);
  classes.addAll(classEmbeddables);
  if (classes.isEmpty())   return;
 else   if (NoSql.getEntityManagerFactory() != null) {
    NoSqlEntityManagerFactory factory=NoSql.getEntityManagerFactory();
    factory.rescan(classes,Play.classloader);
    return;
  }
  Class<?> clazz=null;
  try {
    clazz=Class.forName(""String_Node_Str"");
    if (NoSqlConfig.class.isAssignableFrom(clazz)) {
      NoSqlConfig config=(NoSqlConfig)clazz.newInstance();
      config.configure(PROPS);
    }
 else {
      log.warn(""String_Node_Str"" + clazz + ""String_Node_Str"");
    }
  }
 catch (  ClassNotFoundException e) {
  }
catch (  InstantiationException e) {
    log.warn(""String_Node_Str"" + clazz,e);
  }
catch (  IllegalAccessException e) {
    log.warn(""String_Node_Str"" + clazz,e);
  }
  PROPS.put(Bootstrap.LIST_OF_EXTRA_CLASSES_TO_SCAN_KEY,classes);
  PROPS.put(Bootstrap.AUTO_CREATE_KEY,""String_Node_Str"");
  for (  java.util.Map.Entry<Object,Object> entry : Play.configuration.entrySet()) {
    PROPS.put((String)entry.getKey(),entry.getValue());
  }
  if (log.isInfoEnabled())   log.info(""String_Node_Str"");
  NoSqlEntityManagerFactory factory=Bootstrap.create(PROPS,Play.classloader);
  NoSql.setEntityManagerFactory(factory);
  CassandraAppender.setFactory(factory);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onApplicationStart(){
  List<Class> classes=Play.classloader.getAnnotatedClasses(NoSqlEntity.class);
  List<Class> classEmbeddables=Play.classloader.getAnnotatedClasses(NoSqlEmbeddable.class);
  classes.addAll(classEmbeddables);
  if (classes.isEmpty())   return;
 else   if (NoSql.getEntityManagerFactory() != null) {
    NoSqlEntityManagerFactory factory=NoSql.getEntityManagerFactory();
    factory.rescan(classes,Play.classloader);
    return;
  }
  Class<?> clazz=null;
  try {
    clazz=Class.forName(""String_Node_Str"");
    if (NoSqlConfig.class.isAssignableFrom(clazz)) {
      NoSqlConfig config=(NoSqlConfig)clazz.newInstance();
      config.configure(PROPS);
    }
 else {
      log.warn(""String_Node_Str"" + clazz + ""String_Node_Str"");
    }
  }
 catch (  ClassNotFoundException e) {
    log.info(""String_Node_Str"");
  }
catch (  InstantiationException e) {
    log.warn(""String_Node_Str"" + clazz,e);
  }
catch (  IllegalAccessException e) {
    log.warn(""String_Node_Str"" + clazz,e);
  }
  PROPS.put(Bootstrap.LIST_OF_EXTRA_CLASSES_TO_SCAN_KEY,classes);
  PROPS.put(Bootstrap.AUTO_CREATE_KEY,""String_Node_Str"");
  for (  java.util.Map.Entry<Object,Object> entry : Play.configuration.entrySet()) {
    PROPS.put((String)entry.getKey(),entry.getValue());
  }
  if (log.isInfoEnabled())   log.info(""String_Node_Str"");
  NoSqlEntityManagerFactory factory=Bootstrap.create(PROPS,Play.classloader);
  NoSql.setEntityManagerFactory(factory);
  CassandraAppender.setFactory(factory);
}",0.98922624877571
97873,"private Object createProxy(byte[] rowKey,Row row){
  Object newproxy=null;
  try {
    newproxy=classMeta.getMetaClass().newInstance();
  }
 catch (  InstantiationException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  DboColumnMeta colMeta=this.getMetaDbo();
  if (classMeta.getIdField() != null && (rowKey != null)) {
    DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
    Object idValue1=embedMeta.getFkToColumnFamily().getIdColumnMeta().getStorageType().convertFromNoSql(rowKey);
    ReflectionUtil.putFieldValue(newproxy,classMeta.getIdField().field,idValue1);
    byte[] prefix=StandardConverters.convertToBytes(getColumnName());
    byte[] idBytes=StandardConverters.convertToBytes(idValue1);
    byte[] embedColumn=new byte[prefix.length + idBytes.length];
    System.arraycopy(prefix,0,embedColumn,0,prefix.length);
    System.arraycopy(idBytes,0,embedColumn,prefix.length,idBytes.length);
    Collection<Column> columnsInRow=row.columnByPrefix(embedColumn);
    for (    Column colInRow : columnsInRow) {
      byte[] fullNameCol=colInRow.getName();
      int colLen=fullNameCol.length - embedColumn.length;
      byte[] fk=new byte[colLen];
      for (int i=embedColumn.length; i < fullNameCol.length; i++) {
        fk[i - embedColumn.length]=fullNameCol[i];
      }
      Object colVal=colMeta.convertFromStorage2(fk);
      String colName=colMeta.convertTypeToString(colVal);
      Object columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(colName).getStorageType().convertFromNoSql(colInRow.getValue());
      MetaField<PROXY> metaField=classMeta.getMetaFieldByCol(null,colName);
      if (metaField != null)       ReflectionUtil.putFieldValue(newproxy,metaField.getField(),columnValue);
    }
  }
 else {
    byte[] colName=StandardConverters.convertToBytes(getColumnName());
    Collection<Column> columnsWORowKey=row.columnByPrefix(colName);
    for (    Column col : columnsWORowKey) {
      byte[] fullName=col.getName();
      int embedColumnLen=fullName.length - colName.length;
      byte[] embedColumn=new byte[embedColumnLen];
      for (int i=colName.length; i < fullName.length; i++) {
        embedColumn[i - colName.length]=fullName[i];
      }
      Object colVal=colMeta.convertFromStorage2(embedColumn);
      String columnName=colMeta.convertTypeToString(colVal);
      DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
      if (embedMeta.getFkToColumnFamily().getColumnMeta(columnName) == null)       continue;
      Object columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(columnName).getStorageType().convertFromNoSql(col.getValue());
      if (classMeta.getMetaFieldByCol(null,columnName) != null)       ReflectionUtil.putFieldValue(newproxy,classMeta.getMetaFieldByCol(null,columnName).getField(),columnValue);
    }
  }
  return newproxy;
}","private Object createProxy(byte[] rowKey,Row row){
  Object newproxy=null;
  try {
    newproxy=classMeta.getMetaClass().newInstance();
  }
 catch (  InstantiationException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  DboColumnMeta colMeta=this.getMetaDbo();
  if (classMeta.getIdField() != null && (rowKey != null)) {
    DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
    Object idValue1=embedMeta.getFkToColumnFamily().getIdColumnMeta().getStorageType().convertFromNoSql(rowKey);
    ReflectionUtil.putFieldValue(newproxy,classMeta.getIdField().field,idValue1);
    byte[] prefix=StandardConverters.convertToBytes(getColumnName());
    byte[] idBytes=StandardConverters.convertToBytes(idValue1);
    byte[] embedColumn=new byte[prefix.length + idBytes.length];
    System.arraycopy(prefix,0,embedColumn,0,prefix.length);
    System.arraycopy(idBytes,0,embedColumn,prefix.length,idBytes.length);
    Collection<Column> columnsInRow=row.columnByPrefix(embedColumn);
    for (    Column colInRow : columnsInRow) {
      byte[] fullNameCol=colInRow.getName();
      int colLen=fullNameCol.length - embedColumn.length;
      byte[] fk=new byte[colLen];
      for (int i=embedColumn.length; i < fullNameCol.length; i++) {
        fk[i - embedColumn.length]=fullNameCol[i];
      }
      Object colVal=colMeta.convertFromStorage2(fk);
      String colName=colMeta.convertTypeToString(colVal);
      Object columnValue=null;
      MetaField<PROXY> metaField=classMeta.getMetaFieldByCol(null,colName);
      NoSqlConverter customConv=metaField.getField().getAnnotation(NoSqlConverter.class);
      if (customConv != null) {
        columnValue=getValue(colInRow.getValue(),customConv);
      }
 else {
        columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(colName).getStorageType().convertFromNoSql(colInRow.getValue());
      }
      if (metaField != null)       ReflectionUtil.putFieldValue(newproxy,metaField.getField(),columnValue);
    }
  }
 else {
    byte[] colName=StandardConverters.convertToBytes(getColumnName());
    Collection<Column> columnsWORowKey=row.columnByPrefix(colName);
    for (    Column col : columnsWORowKey) {
      byte[] fullName=col.getName();
      int embedColumnLen=fullName.length - colName.length;
      byte[] embedColumn=new byte[embedColumnLen];
      for (int i=colName.length; i < fullName.length; i++) {
        embedColumn[i - colName.length]=fullName[i];
      }
      Object colVal=colMeta.convertFromStorage2(embedColumn);
      String columnName=colMeta.convertTypeToString(colVal);
      DboColumnEmbedMeta embedMeta=(DboColumnEmbedMeta)colMeta;
      if (embedMeta.getFkToColumnFamily().getColumnMeta(columnName) == null)       continue;
      Object columnValue=null;
      MetaField<PROXY> metaField=classMeta.getMetaFieldByCol(null,columnName);
      NoSqlConverter customConv=metaField.getField().getAnnotation(NoSqlConverter.class);
      if (customConv != null) {
        columnValue=getValue(col.getValue(),customConv);
      }
 else {
        columnValue=embedMeta.getFkToColumnFamily().getColumnMeta(columnName).getStorageType().convertFromNoSql(col.getValue());
      }
      if (classMeta.getMetaFieldByCol(null,columnName) != null)       ReflectionUtil.putFieldValue(newproxy,classMeta.getMetaFieldByCol(null,columnName).getField(),columnValue);
    }
  }
  return newproxy;
}",0.8819509164336751
97874,"private void addColumn(PROXY proxy,Field singleField,byte[] idValue,RowToPersist row){
  Object value=ReflectionUtil.fetchFieldValue(proxy,singleField);
  Column c=new Column();
  byte[] columnName=formTheColumnName(proxy,idValue,singleField);
  c.setName(columnName);
  if (value != null) {
    byte[] columnValue=StandardConverters.convertToBytes(value);
    c.setValue(columnValue);
  }
  row.getColumns().add(c);
}","private void addColumn(PROXY proxy,Field singleField,byte[] idValue,RowToPersist row){
  Object value=ReflectionUtil.fetchFieldValue(proxy,singleField);
  Column c=new Column();
  byte[] columnName=formTheColumnName(proxy,idValue,singleField);
  c.setName(columnName);
  if (value != null) {
    byte[] columnValue=null;
    NoSqlConverter customConv=singleField.getAnnotation(NoSqlConverter.class);
    if (customConv != null) {
      columnValue=getBytesValue(value,customConv);
    }
 else {
      columnValue=StandardConverters.convertToBytes(value);
    }
    c.setValue(columnValue);
  }
  row.getColumns().add(c);
}",0.7519230769230769
97875,"private void addColumnWithoutId(PROXY proxy,Field singleField,RowToPersist row){
  Object value=ReflectionUtil.fetchFieldValue(proxy,singleField);
  Column c=new Column();
  byte[] prefix=StandardConverters.convertToBytes(columnName);
  byte[] singleFieldName=StandardConverters.convertToBytes(singleField.getName());
  byte[] columnName=new byte[prefix.length + singleFieldName.length];
  for (int i=0; i < columnName.length; i++) {
    if (i < prefix.length)     columnName[i]=prefix[i];
 else     columnName[i]=singleFieldName[i - prefix.length];
  }
  c.setName(columnName);
  if (value != null) {
    byte[] columnValue=StandardConverters.convertToBytes(value);
    c.setValue(columnValue);
  }
  row.getColumns().add(c);
}","private void addColumnWithoutId(PROXY proxy,Field singleField,RowToPersist row){
  Object value=ReflectionUtil.fetchFieldValue(proxy,singleField);
  Column c=new Column();
  byte[] prefix=StandardConverters.convertToBytes(columnName);
  byte[] singleFieldName=StandardConverters.convertToBytes(singleField.getName());
  byte[] columnName=new byte[prefix.length + singleFieldName.length];
  for (int i=0; i < columnName.length; i++) {
    if (i < prefix.length)     columnName[i]=prefix[i];
 else     columnName[i]=singleFieldName[i - prefix.length];
  }
  c.setName(columnName);
  if (value != null) {
    byte[] columnValue=null;
    NoSqlConverter customConv=singleField.getAnnotation(NoSqlConverter.class);
    if (customConv != null) {
      columnValue=getBytesValue(value,customConv);
    }
 else {
      columnValue=StandardConverters.convertToBytes(value);
    }
    c.setValue(columnValue);
  }
  row.getColumns().add(c);
}",0.8771084337349397
97876,"@SuppressWarnings(""String_Node_Str"") @Override public void rescan(List<Class> classesToScan,ClassLoader cl){
  List<Class> classes=classesToScan;
  if (classes == null)   classes=new ArrayList<Class>();
  metaInfo.clearAll();
  listener.setClassLoader(cl);
  discoverer.setFilter(new OurFilter());
  discoverer.addAnnotationListener(listener);
  discoverer.discover(cl);
  for (  Class c : classes) {
    listener.scanClass(c);
    if (c.getSuperclass() != java.lang.Object.class) {
      listener.scanClass(c.getSuperclass());
    }
  }
  if (log.isTraceEnabled()) {
    URL[] resources=discoverer.findResources(cl);
    for (    URL res : resources) {
      log.trace(""String_Node_Str"" + res);
    }
  }
  Collection<MetaAbstractClass> allEntities=metaInfo.getAllEntities();
  for (  MetaAbstractClass meta : allEntities) {
    setupQueryStuff(meta);
  }
  log.info(""String_Node_Str"");
  isScanned=true;
  BaseEntityManagerImpl tempMgr=(BaseEntityManagerImpl)createEntityManager();
  tempMgr.saveMetaData();
  cache.init(this);
  log.info(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @Override public void rescan(List<Class> classesToScan,ClassLoader cl){
  List<Class> classes=classesToScan;
  if (classes == null)   classes=new ArrayList<Class>();
  metaInfo.clearAll();
  listener.setClassLoader(cl);
  discoverer.setFilter(new OurFilter());
  discoverer.addAnnotationListener(listener);
  discoverer.discover(cl);
  for (  Class c : classes) {
    listener.scanClass(c);
    if (c.getSuperclass() != java.lang.Object.class) {
      listener.scanClass(c.getSuperclass());
    }
  }
  if (log.isTraceEnabled()) {
    URL[] resources=discoverer.findResources(cl);
    for (    URL res : resources) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + res);
    }
  }
  Collection<MetaAbstractClass> allEntities=metaInfo.getAllEntities();
  for (  MetaAbstractClass meta : allEntities) {
    setupQueryStuff(meta);
  }
  log.info(""String_Node_Str"");
  isScanned=true;
  BaseEntityManagerImpl tempMgr=(BaseEntityManagerImpl)createEntityManager();
  tempMgr.saveMetaData();
  cache.init(this);
  log.info(""String_Node_Str"");
}",0.9851576994434136
97877,"@Override public void discovered(String clazzName,String annotation){
  log.debug(""String_Node_Str"" + clazzName + ""String_Node_Str""+ annotation);
  try {
    Class<?> clazz=classLoader.loadClass(clazzName);
    scanClass(clazz);
    while (clazz.getSuperclass() != java.lang.Object.class) {
      clazz=clazz.getSuperclass();
      inspectorClass.addClassForQueries(clazz);
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}","@Override public void discovered(String clazzName,String annotation){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + clazzName + ""String_Node_Str""+ annotation);
  try {
    Class<?> clazz=classLoader.loadClass(clazzName);
    scanClass(clazz);
    while (clazz.getSuperclass() != java.lang.Object.class) {
      clazz=clazz.getSuperclass();
      inspectorClass.addClassForQueries(clazz);
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}",0.9705882352941176
97878,"@Override public List<T> getResultList(int firstResult,Integer maxResults){
  if (maxResults != null && !batchSizeSetByUser)   setBatchSize(maxResults);
  AbstractCursor<KeyValue<T>> all=(AbstractCursor<KeyValue<T>>)getResults();
  List<T> foundElements=new ArrayList<T>();
  try {
    return getEntities(all,foundElements,firstResult,maxResults);
  }
 catch (  RowNotFoundException e) {
    log.trace(""String_Node_Str"",e);
    throw new StorageMissingEntitesException(foundElements,""String_Node_Str"",e);
  }
}","@Override public List<T> getResultList(int firstResult,Integer maxResults){
  if (maxResults != null && !batchSizeSetByUser)   setBatchSize(maxResults);
  AbstractCursor<KeyValue<T>> all=(AbstractCursor<KeyValue<T>>)getResults();
  List<T> foundElements=new ArrayList<T>();
  try {
    return getEntities(all,foundElements,firstResult,maxResults);
  }
 catch (  RowNotFoundException e) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",e);
    throw new StorageMissingEntitesException(foundElements,""String_Node_Str"",e);
  }
}",0.9714285714285714
97879,"private List<T> getEntities(AbstractCursor<KeyValue<T>> all,List<T> foundElements,int firstResult,Integer maxResults){
  List<T> entities=new ArrayList<T>();
  RowNotFoundException exc=null;
  int counter=0;
  while (true) {
    Holder<KeyValue<T>> holder=all.nextImpl();
    if (holder == null)     break;
    KeyValue<T> keyVal=holder.getValue();
    if (counter < firstResult) {
      counter++;
      continue;
    }
 else     if (maxResults != null && counter >= firstResult + maxResults)     break;
    try {
      entities.add(keyVal.getValue());
      foundElements.add(keyVal.getValue());
    }
 catch (    RowNotFoundException e) {
      if (exc == null)       exc=e;
    }
    counter++;
  }
  if (exc != null) {
    log.trace(""String_Node_Str"",exc);
    throw new StorageMissingEntitesException(foundElements,""String_Node_Str"",exc);
  }
  return entities;
}","private List<T> getEntities(AbstractCursor<KeyValue<T>> all,List<T> foundElements,int firstResult,Integer maxResults){
  List<T> entities=new ArrayList<T>();
  RowNotFoundException exc=null;
  int counter=0;
  while (true) {
    Holder<KeyValue<T>> holder=all.nextImpl();
    if (holder == null)     break;
    KeyValue<T> keyVal=holder.getValue();
    if (counter < firstResult) {
      counter++;
      continue;
    }
 else     if (maxResults != null && counter >= firstResult + maxResults)     break;
    try {
      entities.add(keyVal.getValue());
      foundElements.add(keyVal.getValue());
    }
 catch (    RowNotFoundException e) {
      if (exc == null)       exc=e;
    }
    counter++;
  }
  if (exc != null) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",exc);
    throw new StorageMissingEntitesException(foundElements,""String_Node_Str"",exc);
  }
  return entities;
}",0.9830316742081447
97880,"private synchronized Exception createColFamily(String virtualCf,MetaLookup ormSession){
  try {
    long start=System.currentTimeMillis();
    createColFamilyImpl(virtualCf,ormSession);
    long total=System.currentTimeMillis() - start;
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + total);
  }
 catch (  Exception e) {
    log.trace(""String_Node_Str"",e);
    return e;
  }
  return null;
}","private synchronized Exception createColFamily(String virtualCf,MetaLookup ormSession){
  try {
    long start=System.currentTimeMillis();
    createColFamilyImpl(virtualCf,ormSession);
    long total=System.currentTimeMillis() - start;
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + total);
  }
 catch (  Exception e) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",e);
    return e;
  }
  return null;
}",0.9643705463182898
97881,"private synchronized Exception createColFamily(String virtualCf,MetaLookup ormSession){
  try {
    long start=System.currentTimeMillis();
    createColFamilyImpl(virtualCf,ormSession);
    long total=System.currentTimeMillis() - start;
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + total);
  }
 catch (  Exception e) {
    log.trace(""String_Node_Str"",e);
    return e;
  }
  return null;
}","private synchronized Exception createColFamily(String virtualCf,MetaLookup ormSession){
  try {
    long start=System.currentTimeMillis();
    createColFamilyImpl(virtualCf,ormSession);
    long total=System.currentTimeMillis() - start;
    if (log.isInfoEnabled())     log.info(""String_Node_Str"" + total);
  }
 catch (  Exception e) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",e);
    return e;
  }
  return null;
}",0.9643705463182898
97882,"@Override public byte[] next(){
  byte[] k=rowKeys.next();
  if (meta != null && log.isInfoEnabled()) {
    try {
      Object obj=meta.getIdColumnMeta().convertFromStorage2(k);
      String str=meta.getIdColumnMeta().convertTypeToString(obj);
      realKeys.add(str);
    }
 catch (    Exception e) {
      log.trace(""String_Node_Str"",e);
      realKeys.add(""String_Node_Str"");
    }
  }
  return k;
}","@Override public byte[] next(){
  byte[] k=rowKeys.next();
  if (meta != null && log.isInfoEnabled()) {
    try {
      Object obj=meta.getIdColumnMeta().convertFromStorage2(k);
      String str=meta.getIdColumnMeta().convertTypeToString(obj);
      realKeys.add(str);
    }
 catch (    Exception e) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"",e);
      realKeys.add(""String_Node_Str"");
    }
  }
  return k;
}",0.9617224880382776
97883,"private Tuple init(String message2,RecognitionException cause){
  int characterPosition=-1;
  String tokenText=null;
  String message=""String_Node_Str"";
  try {
    characterPosition=cause.charPositionInLine;
    message=""String_Node_Str"" + characterPosition;
    Token token=cause.token;
    if (token != null) {
      tokenText=token.getText();
      message+=""String_Node_Str"" + token.getText();
    }
 else     tokenText=null;
    Object node=cause.node;
    if (node != null)     message+=""String_Node_Str"" + node;
    if (message2 != null)     message+=""String_Node_Str"" + message2;
  }
 catch (  Exception e) {
    log.trace(""String_Node_Str"",e);
    message=""String_Node_Str"" + cause;
    if (message2 != null)     message+=""String_Node_Str"" + message2;
  }
  Tuple tuple=new Tuple(message,tokenText,characterPosition);
  return tuple;
}","private Tuple init(String message2,RecognitionException cause){
  int characterPosition=-1;
  String tokenText=null;
  String message=""String_Node_Str"";
  try {
    characterPosition=cause.charPositionInLine;
    message=""String_Node_Str"" + characterPosition;
    Token token=cause.token;
    if (token != null) {
      tokenText=token.getText();
      message+=""String_Node_Str"" + token.getText();
    }
 else     tokenText=null;
    Object node=cause.node;
    if (node != null)     message+=""String_Node_Str"" + node;
    if (message2 != null)     message+=""String_Node_Str"" + message2;
  }
 catch (  Exception e) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",e);
    message=""String_Node_Str"" + cause;
    if (message2 != null)     message+=""String_Node_Str"" + message2;
  }
  Tuple tuple=new Tuple(message,tokenText,characterPosition);
  return tuple;
}",0.9825581395348836
97884,"@SuppressWarnings(""String_Node_Str"") private static <T>void compileExpression(ExpressionNode node,InfoForWiring wiring,MetaFacade facade){
  CommonTree expression=node.getASTNode();
  int type=expression.getType();
  log.debug(""String_Node_Str"" + expression.getType());
switch (type) {
case NoSqlLexer.AND:
case NoSqlLexer.OR:
    node.setState(""String_Node_Str"",null);
  List<CommonTree> children=expression.getChildren();
processSide(node,wiring,children,0,ChildSide.LEFT,facade);
processSide(node,wiring,children,1,ChildSide.RIGHT,facade);
break;
case NoSqlLexer.EQ:
case NoSqlLexer.NE:
case NoSqlLexer.GT:
case NoSqlLexer.LT:
case NoSqlLexer.GE:
case NoSqlLexer.LE:
compileComparator(node,wiring,facade,expression);
break;
case NoSqlLexer.IN:
compileComparatorIn(node,wiring,facade,expression);
break;
case NoSqlLexer.BETWEEN:
throw new UnsupportedOperationException(""String_Node_Str"");
default :
break;
}
}","@SuppressWarnings(""String_Node_Str"") private static <T>void compileExpression(ExpressionNode node,InfoForWiring wiring,MetaFacade facade){
  CommonTree expression=node.getASTNode();
  int type=expression.getType();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + expression.getType());
switch (type) {
case NoSqlLexer.AND:
case NoSqlLexer.OR:
    node.setState(""String_Node_Str"",null);
  List<CommonTree> children=expression.getChildren();
processSide(node,wiring,children,0,ChildSide.LEFT,facade);
processSide(node,wiring,children,1,ChildSide.RIGHT,facade);
break;
case NoSqlLexer.EQ:
case NoSqlLexer.NE:
case NoSqlLexer.GT:
case NoSqlLexer.LT:
case NoSqlLexer.GE:
case NoSqlLexer.LE:
compileComparator(node,wiring,facade,expression);
break;
case NoSqlLexer.IN:
compileComparatorIn(node,wiring,facade,expression);
break;
case NoSqlLexer.BETWEEN:
throw new UnsupportedOperationException(""String_Node_Str"");
default :
break;
}
}",0.9848648648648648
97885,"private Counter processAllColumns(NoSqlTypedSession s,ColFamilyData data,Map<Object,KeyValue<TypedRow>> keyToRow,Cursor<IndexPoint> indexView2){
  String colName=data.getColumn();
  indexView2.beforeFirst();
  int rowCounter=0;
  int changedCounter=0;
  while (indexView2.next()) {
    rowCounter++;
    IndexPoint pt=indexView2.getCurrent();
    KeyValue<TypedRow> row=keyToRow.get(pt.getKey());
    if (row == null) {
      log.debug(""String_Node_Str"" + pt.getKey());
    }
 else     if (row.getException() != null || row.getValue() == null) {
      removeIndexPt(s,data,pt);
      changedCounter++;
    }
 else {
      TypedRow val=row.getValue();
      if (processColumn(s,data,val,pt)) {
        changedCounter++;
      }
    }
    if (changedCounter > 50) {
      s.flush();
    }
    if (rowCounter % 20000 == 0) {
      System.out.println(""String_Node_Str"" + rowCounter + ""String_Node_Str""+ changedCounter);
    }
  }
  if (totalRowCount == null)   totalRowCount=rowCounter;
  s.flush();
  return new Counter(rowCounter,changedCounter);
}","private Counter processAllColumns(NoSqlTypedSession s,ColFamilyData data,Map<Object,KeyValue<TypedRow>> keyToRow,Cursor<IndexPoint> indexView2){
  String colName=data.getColumn();
  indexView2.beforeFirst();
  int rowCounter=0;
  int changedCounter=0;
  while (indexView2.next()) {
    rowCounter++;
    IndexPoint pt=indexView2.getCurrent();
    KeyValue<TypedRow> row=keyToRow.get(pt.getKey());
    if (row == null) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + pt.getKey());
    }
 else     if (row.getException() != null || row.getValue() == null) {
      removeIndexPt(s,data,pt);
      changedCounter++;
    }
 else {
      TypedRow val=row.getValue();
      if (processColumn(s,data,val,pt)) {
        changedCounter++;
      }
    }
    if (changedCounter > 50) {
      s.flush();
    }
    if (rowCounter % 20000 == 0) {
      System.out.println(""String_Node_Str"" + rowCounter + ""String_Node_Str""+ changedCounter);
    }
  }
  if (totalRowCount == null)   totalRowCount=rowCounter;
  s.flush();
  return new Counter(rowCounter,changedCounter);
}",0.9849340866290018
97886,"private void process(String newLine){
  log.debug(""String_Node_Str"" + newLine);
  String[] commands=newLine.split(""String_Node_Str"");
  for (  String cmd : commands) {
    try {
      String justCmd=cmd.trim();
      processCommand(justCmd);
    }
 catch (    InvalidCommand e) {
      log.info(""String_Node_Str"",e);
      println(""String_Node_Str"" + cmd + ""String_Node_Str"");
      if (e.getMessage() != null)       println(e.getMessage());
    }
  }
}","private void process(String newLine){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + newLine);
  String[] commands=newLine.split(""String_Node_Str"");
  for (  String cmd : commands) {
    try {
      String justCmd=cmd.trim();
      processCommand(justCmd);
    }
 catch (    InvalidCommand e) {
      log.info(""String_Node_Str"",e);
      println(""String_Node_Str"" + cmd + ""String_Node_Str"");
      if (e.getMessage() != null)       println(e.getMessage());
    }
  }
}",0.9593147751605996
97887,"/** 
 * Uses java.class.path system-property to fetch URLs
 * @return the URL[]
 */
@Override public final URL[] findResources(ClassLoader cl){
  List<URL> list=new ArrayList<URL>();
  Enumeration<URL> resources=loadPersistenceFiles(cl);
  log.trace(""String_Node_Str"");
  Set<URL> urlsToScan=new HashSet<URL>();
  while (resources.hasMoreElements()) {
    URL url=resources.nextElement();
    if (urlsToScan.contains(url))     continue;
    urlsToScan.add(url);
    log.trace(""String_Node_Str"" + url);
  }
  if (urlsToScan.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  for (  URL fileInJarOrFolderUrl : urlsToScan) {
    String protocol=fileInJarOrFolderUrl.getProtocol();
    if (""String_Node_Str"".equals(protocol)) {
      processFile(fileInJarOrFolderUrl,list);
    }
 else     if (""String_Node_Str"".equals(protocol)) {
      processJar(fileInJarOrFolderUrl,list);
    }
 else     throw new RuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str"");
  }
  return list.toArray(new URL[list.size()]);
}","/** 
 * Uses java.class.path system-property to fetch URLs
 * @return the URL[]
 */
@Override public final URL[] findResources(ClassLoader cl){
  List<URL> list=new ArrayList<URL>();
  Enumeration<URL> resources=loadPersistenceFiles(cl);
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
  Set<URL> urlsToScan=new HashSet<URL>();
  while (resources.hasMoreElements()) {
    URL url=resources.nextElement();
    if (urlsToScan.contains(url))     continue;
    urlsToScan.add(url);
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + url);
  }
  if (urlsToScan.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  for (  URL fileInJarOrFolderUrl : urlsToScan) {
    String protocol=fileInJarOrFolderUrl.getProtocol();
    if (""String_Node_Str"".equals(protocol)) {
      processFile(fileInJarOrFolderUrl,list);
    }
 else     if (""String_Node_Str"".equals(protocol)) {
      processJar(fileInJarOrFolderUrl,list);
    }
 else     throw new RuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str"");
  }
  return list.toArray(new URL[list.size()]);
}",0.97282099343955
97888,"@Override public void run(){
  try {
    log.debug(""String_Node_Str"");
    runImpl();
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    runImpl();
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
}",0.9117647058823528
97889,"private void runMonitor(NoSqlEntityManager mgr,MonitorDbo monitor,DateTime now){
  log.debug(""String_Node_Str"" + monitor.getId());
  PlayOrmCronJob p=CopyUtil.copy(monitor);
  fireToListener(p);
  monitor.setLastRun(now);
  mgr.put(monitor);
  mgr.flush();
}","private void runMonitor(NoSqlEntityManager mgr,MonitorDbo monitor,DateTime now){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + monitor.getId());
  PlayOrmCronJob p=CopyUtil.copy(monitor);
  fireToListener(p);
  monitor.setLastRun(now);
  mgr.put(monitor);
  mgr.flush();
}",0.9485294117647058
97890,"private boolean calculateShouldRun(NoSqlEntityManager mgr,MonitorDbo monitor,DateTime now){
  DateTime lastRunTime=monitor.getLastRun();
  log.debug(""String_Node_Str"" + now + ""String_Node_Str""+ lastRunTime+ ""String_Node_Str""+ monitor.getId());
  if (lastRunTime == null) {
    return isInRunWindow(monitor,now);
  }
 else   if (nextRuntimeHasPassed(lastRunTime,monitor,now))   return true;
  return false;
}","private boolean calculateShouldRun(NoSqlEntityManager mgr,MonitorDbo monitor,DateTime now){
  DateTime lastRunTime=monitor.getLastRun();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + now + ""String_Node_Str""+ lastRunTime+ ""String_Node_Str""+ monitor.getId());
  if (lastRunTime == null) {
    return isInRunWindow(monitor,now);
  }
 else   if (nextRuntimeHasPassed(lastRunTime,monitor,now))   return true;
  return false;
}",0.9667458432304038
97891,"public void runImpl(){
  if (listener == null)   return;
  NoSqlEntityManager mgr=factory.createEntityManager();
  Cursor<KeyValue<WebNodeDbo>> cursor=WebNodeDbo.findAllNodes(mgr);
  List<WebNodeDbo> all=new ArrayList<WebNodeDbo>();
  List<WebNodeDbo> servers=new ArrayList<WebNodeDbo>();
  while (cursor.next()) {
    KeyValue<WebNodeDbo> kv=cursor.getCurrent();
    WebNodeDbo val=kv.getValue();
    all.add(val);
    log.debug(""String_Node_Str"" + val.getWebServerName());
    if (isServerUp(mgr,val)) {
      log.debug(""String_Node_Str"" + val.getWebServerName());
      servers.add(val);
    }
    if (val.getWebServerName().equals(config.getHostName())) {
      log.debug(""String_Node_Str"" + val.getWebServerName());
      saveNodeIsUp(mgr,val);
    }
  }
  mgr.clear();
  Collections.sort(servers,new ServerComparator());
  int serverNumber=-1;
  for (int i=0; i < servers.size(); i++) {
    WebNodeDbo node=servers.get(i);
    if (node.getWebServerName().equals(config.getHostName())) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ servers.size());
      serverNumber=i;
      break;
    }
  }
  if (serverNumber == -1)   throw new IllegalStateException(""String_Node_Str"" + all);
  runOurMonitors(mgr,servers.size(),serverNumber);
}","public void runImpl(){
  if (listener == null)   return;
  NoSqlEntityManager mgr=factory.createEntityManager();
  Cursor<KeyValue<WebNodeDbo>> cursor=WebNodeDbo.findAllNodes(mgr);
  List<WebNodeDbo> all=new ArrayList<WebNodeDbo>();
  List<WebNodeDbo> servers=new ArrayList<WebNodeDbo>();
  while (cursor.next()) {
    KeyValue<WebNodeDbo> kv=cursor.getCurrent();
    WebNodeDbo val=kv.getValue();
    all.add(val);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + val.getWebServerName());
    if (isServerUp(mgr,val)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + val.getWebServerName());
      servers.add(val);
    }
    if (val.getWebServerName().equals(config.getHostName())) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + val.getWebServerName());
      saveNodeIsUp(mgr,val);
    }
  }
  mgr.clear();
  Collections.sort(servers,new ServerComparator());
  int serverNumber=-1;
  for (int i=0; i < servers.size(); i++) {
    WebNodeDbo node=servers.get(i);
    if (node.getWebServerName().equals(config.getHostName())) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ servers.size());
      serverNumber=i;
      break;
    }
  }
  if (serverNumber == -1)   throw new IllegalStateException(""String_Node_Str"" + all);
  runOurMonitors(mgr,servers.size(),serverNumber);
}",0.9520912547528516
97892,"@SuppressWarnings(""String_Node_Str"") @Override public void onApplicationStart(){
  List<Class> classes=Play.classloader.getAnnotatedClasses(NoSqlEntity.class);
  if (classes.isEmpty())   return;
 else   if (NoSql.getEntityManagerFactory() != null) {
    NoSqlEntityManagerFactory factory=NoSql.getEntityManagerFactory();
    factory.rescan(classes,Play.classloader);
    return;
  }
  Map<String,Object> props=new HashMap<String,Object>();
  props.put(Bootstrap.LIST_OF_EXTRA_CLASSES_TO_SCAN_KEY,classes);
  props.put(Bootstrap.AUTO_CREATE_KEY,""String_Node_Str"");
  for (  java.util.Map.Entry<Object,Object> entry : Play.configuration.entrySet()) {
    props.put((String)entry.getKey(),entry.getValue());
  }
  if (log.isInfoEnabled())   log.info(""String_Node_Str"");
  NoSqlEntityManagerFactory factory=Bootstrap.create(props,Play.classloader);
  NoSql.setEntityManagerFactory(factory);
  CassandraAppender.setFactory(factory);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onApplicationStart(){
  List<Class> classes=Play.classloader.getAnnotatedClasses(NoSqlEntity.class);
  if (classes.isEmpty())   return;
 else   if (NoSql.getEntityManagerFactory() != null) {
    NoSqlEntityManagerFactory factory=NoSql.getEntityManagerFactory();
    factory.rescan(classes,Play.classloader);
    return;
  }
  PROPS.put(Bootstrap.LIST_OF_EXTRA_CLASSES_TO_SCAN_KEY,classes);
  PROPS.put(Bootstrap.AUTO_CREATE_KEY,""String_Node_Str"");
  for (  java.util.Map.Entry<Object,Object> entry : Play.configuration.entrySet()) {
    PROPS.put((String)entry.getKey(),entry.getValue());
  }
  if (log.isInfoEnabled())   log.info(""String_Node_Str"");
  NoSqlEntityManagerFactory factory=Bootstrap.create(PROPS,Play.classloader);
  NoSql.setEntityManagerFactory(factory);
  CassandraAppender.setFactory(factory);
}",0.946141032759578
97893,"void saveMetaData(){
  BaseEntityManagerImpl tempMgr=this;
  DboDatabaseMeta existing=tempMgr.find(DboDatabaseMeta.class,DboDatabaseMeta.META_DB_ROWKEY);
  for (  DboTableMeta table : databaseInfo.getAllTables()) {
    for (    DboColumnMeta col : table.getAllColumns()) {
      tempMgr.put(col);
    }
    if (!table.isEmbeddable() && table.getIdColumnMeta() != null)     tempMgr.put(table.getIdColumnMeta());
    tempMgr.put(table);
  }
  databaseInfo.setId(DboDatabaseMeta.META_DB_ROWKEY);
  for (  StorageTypeEnum type : StorageTypeEnum.values()) {
    if (type != StorageTypeEnum.DECIMAL && type != StorageTypeEnum.INTEGER && type != StorageTypeEnum.STRING)     continue;
    DboTableMeta cf=new DboTableMeta();
    cf.setup(null,type.getIndexTableName(),false);
    cf.setColNamePrefixType(type);
    DboColumnIdMeta idMeta=new DboColumnIdMeta();
    idMeta.setup(cf,""String_Node_Str"",String.class,false);
    tempMgr.put(idMeta);
    tempMgr.put(cf);
    databaseInfo.addMetaClassDbo(cf);
  }
  tempMgr.put(databaseInfo);
  tempMgr.flush();
}","void saveMetaData(){
  BaseEntityManagerImpl tempMgr=this;
  for (  DboTableMeta table : databaseInfo.getAllTables()) {
    for (    DboColumnMeta col : table.getAllColumns()) {
      tempMgr.put(col);
    }
    if (!table.isEmbeddable() && table.getIdColumnMeta() != null)     tempMgr.put(table.getIdColumnMeta());
    tempMgr.put(table);
  }
  databaseInfo.setId(DboDatabaseMeta.META_DB_ROWKEY);
  for (  StorageTypeEnum type : StorageTypeEnum.values()) {
    if (type != StorageTypeEnum.DECIMAL && type != StorageTypeEnum.INTEGER && type != StorageTypeEnum.STRING)     continue;
    DboTableMeta cf=new DboTableMeta();
    cf.setup(null,type.getIndexTableName(),false);
    cf.setColNamePrefixType(type);
    DboColumnIdMeta idMeta=new DboColumnIdMeta();
    idMeta.setup(cf,""String_Node_Str"",String.class,false);
    tempMgr.put(idMeta);
    tempMgr.put(cf);
    databaseInfo.addMetaClassDbo(cf);
  }
  tempMgr.put(databaseInfo);
  tempMgr.flush();
}",0.6500249625561657
97894,"@Override public <T>T find(Class<T> entityType,Object key){
  if (key == null)   throw new IllegalArgumentException(""String_Node_Str"");
  List<Object> keys=new ArrayList<Object>();
  keys.add(key);
  Cursor<KeyValue<T>> entities=findAll(entityType,keys);
  entities.next();
  return entities.getCurrent().getValue();
}","@Override public <T>T find(Class<T> entityType,Object key){
  if (key == null)   throw new IllegalArgumentException(""String_Node_Str"");
  List<Object> keys=new ArrayList<Object>();
  keys.add(key);
  Cursor<KeyValue<T>> entities=findAll(entityType,keys);
  if (entities.next())   return entities.getCurrent().getValue();
 else   return null;
}",0.9561270801815432
97895,"@Test public void testFailureOnGetSingleResultAndSuccess(){
  Activity act=new Activity(""String_Node_Str"");
  act.setName(""String_Node_Str"");
  act.setUniqueColumn(""String_Node_Str"");
  act.setNumTimes(5);
  mgr.put(act);
  Activity act2=new Activity(""String_Node_Str"");
  act2.setUniqueColumn(act.getUniqueColumn());
  act2.setName(""String_Node_Str"");
  act2.setNumTimes(4);
  mgr.put(act2);
  Activity act3=new Activity(""String_Node_Str"");
  act3.setUniqueColumn(""String_Node_Str"");
  act3.setName(""String_Node_Str"");
  act3.setNumTimes(8);
  mgr.put(act3);
  mgr.flush();
  try {
    Activity.findSingleResult(mgr,act.getUniqueColumn());
    Assert.fail(""String_Node_Str"");
  }
 catch (  TooManyResultException e) {
    log.info(""String_Node_Str"");
  }
  Activity activity=Activity.findSingleResult(mgr,act3.getUniqueColumn());
  Assert.assertEquals(act3.getNumTimes(),activity.getNumTimes());
  Activity activityNull=Activity.findSingleResult(mgr,""String_Node_Str"");
  Assert.assertNull(activityNull);
}","@Test public void testFailureOnGetSingleResultAndSuccess(){
  Activity act=new Activity(""String_Node_Str"");
  act.setName(""String_Node_Str"");
  act.setUniqueColumn(""String_Node_Str"");
  act.setNumTimes(5);
  mgr.put(act);
  Activity act2=new Activity(""String_Node_Str"");
  act2.setUniqueColumn(act.getUniqueColumn());
  act2.setName(""String_Node_Str"");
  act2.setNumTimes(4);
  mgr.put(act2);
  Activity act3=new Activity(""String_Node_Str"");
  act3.setUniqueColumn(""String_Node_Str"");
  act3.setName(""String_Node_Str"");
  act3.setNumTimes(8);
  mgr.put(act3);
  mgr.flush();
  try {
    Activity.findSingleResult(mgr,act.getUniqueColumn());
    Assert.fail(""String_Node_Str"");
  }
 catch (  TooManyResultException e) {
    log.info(""String_Node_Str"");
  }
  Activity activity=Activity.findSingleResult(mgr,act3.getUniqueColumn());
  Assert.assertEquals(act3.getNumTimes(),activity.getNumTimes());
  Activity activityNull=Activity.findSingleResult(mgr,""String_Node_Str"");
  Assert.assertNull(activityNull);
  Activity activityNull2=mgr.find(Activity.class,""String_Node_Str"");
  Assert.assertNull(activityNull2);
}",0.9504483246814536
97896,"private boolean isNeedPersist(OWNER entity,Object value,Map<Field,Object> fieldToValue){
  if (!(entity instanceof NoSqlProxy))   return true;
  Object originalValue=fieldToValue.get(field);
  if (value == null)   return false;
 else   if (value.equals(originalValue))   return false;
  return true;
}","private boolean isNeedPersist(OWNER entity,Object value,Map<Field,Object> fieldToValue){
  if (!(entity instanceof NoSqlProxy))   return true;
  Object originalValue=fieldToValue.get(field);
  if (valuesEqual(originalValue,value))   return false;
  return true;
}",0.9042553191489362
97897,"private void addIndexRemoves(InfoForIndex<OWNER> info,Object value,byte[] byteVal,StorageTypeEnum storageType){
  RowToPersist row=info.getRow();
  Map<Field,Object> fieldToValue=info.getFieldToValue();
  Object originalValue=fieldToValue.get(field);
  if (originalValue == null)   return;
 else   if (originalValue.equals(value))   return;
  byte[] pk=row.getKey();
  byte[] oldIndexedVal=translateValue(originalValue);
  List<IndexData> indexList=row.getIndexToRemove();
  addToList(info,oldIndexedVal,storageType,pk,indexList);
}","private void addIndexRemoves(InfoForIndex<OWNER> info,Object value,byte[] byteVal,StorageTypeEnum storageType){
  RowToPersist row=info.getRow();
  Map<Field,Object> fieldToValue=info.getFieldToValue();
  Object originalValue=fieldToValue.get(field);
  if (valuesEqual(originalValue,value))   return;
  byte[] pk=row.getKey();
  byte[] oldIndexedVal=translateValue(originalValue);
  List<IndexData> indexList=row.getIndexToRemove();
  addToList(info,oldIndexedVal,storageType,pk,indexList);
}",0.91796875
97898,"public void testToOneWithUUID(){
  Account acc1=new Account();
  acc1.setId(""String_Node_Str"");
  acc1.setName(""String_Node_Str"");
  mgr.fillInWithKey(acc1);
  EntityWithUUIDKey entity=new EntityWithUUIDKey();
  entity.setSomething(""String_Node_Str"");
  entity.setAccount(acc1);
  mgr.fillInWithKey(entity);
  User user=new User();
  user.setUuidEntity(entity);
  mgr.put(user);
  mgr.flush();
  User user2=mgr.find(User.class,user.getId());
  Assert.assertNotNull(user2);
  Assert.assertEquals(entity.getId(),user2.getUuidEntity().getId());
}","@Test public void testToOneWithUUID(){
  Account acc1=new Account();
  acc1.setId(""String_Node_Str"");
  acc1.setName(""String_Node_Str"");
  mgr.fillInWithKey(acc1);
  EntityWithUUIDKey entity=new EntityWithUUIDKey();
  entity.setSomething(""String_Node_Str"");
  entity.setAccount(acc1);
  mgr.fillInWithKey(entity);
  User user=new User();
  user.setUuidEntity(entity);
  mgr.put(user);
  mgr.flush();
  User user2=mgr.find(User.class,user.getId());
  Assert.assertNotNull(user2);
  Assert.assertEquals(entity.getId(),user2.getUuidEntity().getId());
}",0.9945054945054944
97899,"private Counter processAllColumns(NoSqlTypedSession s,ColFamilyData data,Map<Object,KeyValue<TypedRow>> keyToRow,Cursor<IndexPoint> indexView2){
  String colName=data.getColumn();
  indexView2.beforeFirst();
  int rowCounter=0;
  int changedCounter=0;
  while (indexView2.next()) {
    IndexPoint pt=indexView2.getCurrent();
    KeyValue<TypedRow> row=keyToRow.get(pt.getKey());
    if (row == null) {
      log.debug(""String_Node_Str"" + pt.getKey());
    }
 else     if (row.getException() != null || row.getValue() == null) {
      removeIndexPt(s,data,pt);
      changedCounter++;
    }
 else {
      TypedRow val=row.getValue();
      if (processColumn(s,data,val,pt)) {
        changedCounter++;
      }
    }
    rowCounter++;
    if (changedCounter > 50) {
      s.flush();
    }
    if (rowCounter % 20000 == 0) {
      System.out.println(""String_Node_Str"" + rowCounter + ""String_Node_Str""+ changedCounter);
    }
  }
  s.flush();
  return new Counter(rowCounter,changedCounter);
}","private Counter processAllColumns(NoSqlTypedSession s,ColFamilyData data,Map<Object,KeyValue<TypedRow>> keyToRow,Cursor<IndexPoint> indexView2){
  String colName=data.getColumn();
  indexView2.beforeFirst();
  int rowCounter=0;
  int changedCounter=0;
  while (indexView2.next()) {
    IndexPoint pt=indexView2.getCurrent();
    KeyValue<TypedRow> row=keyToRow.get(pt.getKey());
    if (row == null) {
      log.debug(""String_Node_Str"" + pt.getKey());
    }
 else     if (row.getException() != null || row.getValue() == null) {
      removeIndexPt(s,data,pt);
      changedCounter++;
    }
 else {
      TypedRow val=row.getValue();
      TypedColumn column=val.getColumn(colName);
      if (column == null) {
        continue;
      }
      Object value=column.getValue();
      if (!valuesEqual(pt.getIndexedValue(),value)) {
        System.out.println(""String_Node_Str"" + pt.getKeyAsString() + ""String_Node_Str""+ pt.getIndexedValueAsString()+ ""String_Node_Str""+ column.getValueAsString());
        s.removeIndexPoint(pt,data.getPartitionBy(),data.getPartitionId());
        IndexColumn col=new IndexColumn();
        col.setColumnName(colName);
        col.setPrimaryKey(pt.getRawKey());
        byte[] indValue=column.getValueRaw();
        col.setIndexedValue(indValue);
        IndexPoint newPoint=new IndexPoint(pt.getRowKeyMeta(),col,data.getColumnMeta());
        s.addIndexPoint(newPoint,data.getPartitionBy(),data.getPartitionId());
        changedCounter++;
      }
    }
    rowCounter++;
    if (changedCounter > 50) {
      s.flush();
    }
    if (rowCounter % 20000 == 0) {
      System.out.println(""String_Node_Str"" + rowCounter + ""String_Node_Str""+ changedCounter);
    }
  }
  s.flush();
  return new Counter(rowCounter,changedCounter);
}",0.7011285038223517
97900,"private void loadCache(){
  if (this.currentCacheLoaded)   return;
  currentCacheLoaded=true;
  DboTableMeta metaDbo=proxyMeta.getMetaDbo();
  IndiceToVirtual virtKeys=new IndiceToVirtual(metaDbo,new ListWrappingCursor<byte[]>(keyList));
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,true,false,batchSize);
  int counter=0;
  while (true) {
    com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    byte[] key=(byte[])kv.getKey();
    Row row=kv.getValue();
    Tuple<T> tuple=proxyMeta.convertIdToProxy(row,session,key,null);
    if (row == null) {
      throw new IllegalStateException(""String_Node_Str"" + owner + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ tuple.getEntityId()+ ""String_Node_Str"");
    }
    T value=proxyList.get(counter);
    proxyMeta.fillInInstance(row,session,value);
    counter++;
  }
}","private void loadCache(){
  if (this.currentCacheLoaded)   return;
  currentCacheLoaded=true;
  DboTableMeta metaDbo=proxyMeta.getMetaDbo();
  IndiceToVirtual virtKeys=new IndiceToVirtual(metaDbo,new ListWrappingCursor<byte[]>(keyList));
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,true,false,batchSize);
  int counter=0;
  while (true) {
    com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    Row row=kv.getValue();
    if (row != null) {
      T value=proxyList.get(counter);
      proxyMeta.fillInInstance(row,session,value);
    }
    counter++;
  }
}",0.7224563515954244
97901,"@SuppressWarnings(""String_Node_Str"") public void loadCacheIfNeeded(){
  if (cacheLoaded)   return;
  DboTableMeta metaDbo=classMeta.getMetaDbo();
  DboColumnIdMeta idMeta=metaDbo.getIdColumnMeta();
  IndiceToVirtual virtKeys=new IndiceToVirtual(metaDbo,new ListWrappingCursor<byte[]>(keys));
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,false,true,null);
  String name=getClass().getSimpleName();
  log.info(name + ""String_Node_Str"" + keys.size()+ ""String_Node_Str""+ field);
  while (true) {
    Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    byte[] key=(byte[])kv.getKey();
    byte[] nonVirtKey=idMeta.unformVirtRowKey(key);
    Row row=kv.getValue();
    Tuple<V> tuple=classMeta.convertIdToProxy(row,session,nonVirtKey,null);
    if (row == null) {
      throw new IllegalStateException(""String_Node_Str"" + owner + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ tuple.getEntityId()+ ""String_Node_Str"");
    }
    V proxy=tuple.getProxy();
    classMeta.fillInInstance(row,session,proxy);
    Object mapKey=getKeyField(proxy);
    super.put((K)mapKey,proxy);
    originals.add(proxy);
  }
  cacheLoaded=true;
}","@SuppressWarnings(""String_Node_Str"") public void loadCacheIfNeeded(){
  if (cacheLoaded)   return;
  DboTableMeta metaDbo=classMeta.getMetaDbo();
  DboColumnIdMeta idMeta=metaDbo.getIdColumnMeta();
  IndiceToVirtual virtKeys=new IndiceToVirtual(metaDbo,new ListWrappingCursor<byte[]>(keys));
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,false,true,null);
  String name=getClass().getSimpleName();
  log.info(name + ""String_Node_Str"" + keys.size()+ ""String_Node_Str""+ field);
  while (true) {
    Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    byte[] key=(byte[])kv.getKey();
    byte[] nonVirtKey=idMeta.unformVirtRowKey(key);
    Row row=kv.getValue();
    Tuple<V> tuple=classMeta.convertIdToProxy(row,session,nonVirtKey,null);
    if (row == null)     continue;
    V proxy=tuple.getProxy();
    classMeta.fillInInstance(row,session,proxy);
    Object mapKey=getKeyField(proxy);
    super.put((K)mapKey,proxy);
    originals.add(proxy);
  }
  cacheLoaded=true;
}",0.7456293706293706
97902,"public void loadCacheIfNeeded(){
  if (cacheLoaded)   return;
  DboTableMeta metaDbo=metaClass.getMetaDbo();
  DboColumnIdMeta idMeta=metaDbo.getIdColumnMeta();
  IndiceToVirtual virtKeys=new IndiceToVirtual(metaDbo,new ListWrappingCursor<byte[]>(keys));
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,false,true,null);
  String name=getClass().getSimpleName();
  log.info(name + ""String_Node_Str"" + keys.size()+ ""String_Node_Str""+ field);
  int counter=0;
  while (true) {
    com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    byte[] key=(byte[])kv.getKey();
    byte[] nonVirtKey=idMeta.unformVirtRowKey(key);
    Row row=kv.getValue();
    Tuple<T> tuple=metaClass.convertIdToProxy(row,session,nonVirtKey,null);
    if (row == null) {
      if (!metaDbo.isEmbeddable())       throw new IllegalStateException(""String_Node_Str"" + owner + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ tuple.getEntityId()+ ""String_Node_Str"");
    }
    Holder<T> h=(Holder)originalHolders.get(counter);
    T value=h.getValue();
    if (value instanceof NoSqlProxy) {
      metaClass.fillInInstance(row,session,value);
    }
    counter++;
  }
  cacheLoaded=true;
}","public void loadCacheIfNeeded(){
  if (cacheLoaded)   return;
  DboTableMeta metaDbo=metaClass.getMetaDbo();
  IndiceToVirtual virtKeys=new IndiceToVirtual(metaDbo,new ListWrappingCursor<byte[]>(keys));
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,false,true,null);
  String name=getClass().getSimpleName();
  log.info(name + ""String_Node_Str"" + keys.size()+ ""String_Node_Str""+ field);
  int counter=0;
  while (true) {
    com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    Row row=kv.getValue();
    if (row != null || metaDbo.isEmbeddable()) {
      Holder<T> h=(Holder)originalHolders.get(counter);
      T value=h.getValue();
      if (value instanceof NoSqlProxy) {
        metaClass.fillInInstance(row,session,value);
      }
    }
    counter++;
  }
  cacheLoaded=true;
}",0.6636650157586673
97903,"private boolean isNeedPersist(OWNER entity,Object value,Map<Field,Object> fieldToValue){
  if (!(entity instanceof NoSqlProxy))   return true;
  Object originalValue=fieldToValue.get(field);
  if (valuesEqual(originalValue,value))   return false;
  return true;
}","private boolean isNeedPersist(OWNER entity,Object value,Map<Field,Object> fieldToValue){
  if (!(entity instanceof NoSqlProxy))   return true;
 else   if (valuesEqual(fieldToValue,value))   return false;
  return true;
}",0.8612836438923396
97904,"private boolean valuesEqual(Object originalValue,Object value){
  if (originalValue == null && value == null)   return true;
 else   if (originalValue == null)   return false;
 else   if (originalValue.equals(value))   return true;
  return false;
}","private boolean valuesEqual(Map<Field,Object> fieldToValue,Object value){
  Object originalValue=fieldToValue.get(field);
  originalValue=unwrapIfNeeded(originalValue);
  if (originalValue == null && value == null)   return true;
 else   if (originalValue == null)   return false;
 else   if (originalValue.equals(value))   return true;
  return false;
}",0.7595356550580431
97905,"private void addIndexRemoves(InfoForIndex<OWNER> info,Object value,byte[] byteVal,StorageTypeEnum storageType){
  RowToPersist row=info.getRow();
  Map<Field,Object> fieldToValue=info.getFieldToValue();
  Object originalValue=fieldToValue.get(field);
  if (valuesEqual(originalValue,value))   return;
  byte[] pk=row.getKey();
  byte[] oldIndexedVal=translateValue(originalValue);
  List<IndexData> indexList=row.getIndexToRemove();
  addToList(info,oldIndexedVal,storageType,pk,indexList);
}","private void addIndexRemoves(InfoForIndex<OWNER> info,Object value,byte[] byteVal,StorageTypeEnum storageType){
  RowToPersist row=info.getRow();
  Map<Field,Object> fieldToValue=info.getFieldToValue();
  if (valuesEqual(fieldToValue,value))   return;
  Object originalValue=fieldToValue.get(field);
  byte[] pk=row.getKey();
  byte[] oldIndexedVal=translateValue(originalValue);
  List<IndexData> indexList=row.getIndexToRemove();
  addToList(info,oldIndexedVal,storageType,pk,indexList);
}",0.8423194303153612
97906,"private ColFamilyData goMore(NoSqlEntityManager mgr,String cf,String lastPart){
  ColFamilyData data=new ColFamilyData();
  int index=lastPart.indexOf(""String_Node_Str"");
  String field=null;
  String partitionBy=null;
  String partitionId=null;
  if (index < 0) {
    field=lastPart;
  }
 else {
    field=lastPart.substring(0,index);
    String partitionPart=lastPart.substring(index);
    index=partitionPart.indexOf(""String_Node_Str"");
    if (index < 0)     throw new InvalidCommand(""String_Node_Str"");
    partitionBy=partitionPart.substring(0,index);
    partitionId=partitionPart.substring(index);
  }
  DboTableMeta meta=mgr.find(DboTableMeta.class,cf);
  if (meta == null) {
    throw new InvalidCommand(""String_Node_Str"" + cf);
  }
  DboColumnMeta colMeta=meta.getColumnMeta(field);
  if (colMeta == null) {
    colMeta=meta.getIdColumnMeta();
    if (!(colMeta != null && colMeta.getColumnName().equals(field)))     throw new InvalidCommand(""String_Node_Str"" + field + ""String_Node_Str""+ cf);
  }
  data.setColFamily(cf);
  data.setColumn(field);
  data.setPartitionBy(partitionBy);
  data.setPartitionId(partitionId);
  data.setTableMeta(meta);
  data.setColumnMeta(colMeta);
  return data;
}","private ColFamilyData goMore(NoSqlEntityManager mgr,String cf,String lastPart){
  ColFamilyData data=new ColFamilyData();
  int index=lastPart.indexOf(""String_Node_Str"");
  String field=null;
  String partitionBy=null;
  String partitionId=null;
  if (index < 0) {
    field=lastPart;
  }
 else {
    field=lastPart.substring(0,index);
    String partitionPart=lastPart.substring(index);
    index=partitionPart.indexOf(""String_Node_Str"");
    if (index < 0)     throw new InvalidCommand(""String_Node_Str"");
    partitionBy=partitionPart.substring(0,index);
    partitionId=partitionPart.substring(index);
  }
  DboTableMeta meta=mgr.find(DboTableMeta.class,cf);
  if (meta == null) {
    System.out.println(""String_Node_Str"" + cf);
    System.out.println(""String_Node_Str"");
    QueryResult result=mgr.getTypedSession().createQueryCursor(""String_Node_Str"",100);
    Cursor<List<TypedRow>> cursor=result.getAllViewsCursor();
    while (cursor.next()) {
      List<TypedRow> joinedRow=cursor.getCurrent();
      for (      TypedRow r : joinedRow) {
        System.out.println(r.getRowKeyString());
      }
    }
    System.out.println(""String_Node_Str"");
    throw new InvalidCommand(""String_Node_Str"" + cf);
  }
  DboColumnMeta colMeta=meta.getColumnMeta(field);
  if (colMeta == null) {
    colMeta=meta.getIdColumnMeta();
    if (!(colMeta != null && colMeta.getColumnName().equals(field))) {
      System.out.println(""String_Node_Str"" + field + ""String_Node_Str""+ cf);
      System.out.println(""String_Node_Str"");
      for (      DboColumnMeta colMetaOther : meta.getIndexedColumns()) {
        System.out.println(colMetaOther.getColumnName());
      }
      System.out.println(""String_Node_Str"");
      throw new InvalidCommand(""String_Node_Str"" + field + ""String_Node_Str""+ cf);
    }
  }
  data.setColFamily(cf);
  data.setColumn(field);
  data.setPartitionBy(partitionBy);
  data.setPartitionId(partitionId);
  data.setTableMeta(meta);
  data.setColumnMeta(colMeta);
  return data;
}",0.7515644555694618
97907,"private Counter processAllColumns(NoSqlTypedSession s,ColFamilyData data,Map<Object,KeyValue<TypedRow>> keyToRow,Cursor<IndexPoint> indexView2){
  String colName=data.getColumn();
  indexView2.beforeFirst();
  int rowCounter=0;
  int changedCounter=0;
  while (indexView2.next()) {
    IndexPoint pt=indexView2.getCurrent();
    KeyValue<TypedRow> row=keyToRow.get(pt.getKey());
    if (row == null) {
      log.debug(""String_Node_Str"" + pt.getKey());
    }
 else     if (row.getException() != null || row.getValue() == null) {
      removeIndexPt(s,data,pt);
      changedCounter++;
    }
 else {
      TypedRow val=row.getValue();
      TypedColumn column=val.getColumn(colName);
      if (column == null) {
        continue;
      }
      Object value=column.getValue();
      if (!valuesEqual(pt.getIndexedValue(),value)) {
        System.out.println(""String_Node_Str"" + pt.getKeyAsString() + ""String_Node_Str""+ pt.getIndexedValueAsString()+ ""String_Node_Str""+ column.getValueAsString());
        s.removeIndexPoint(pt,data.getPartitionBy(),data.getPartitionId());
        IndexColumn col=new IndexColumn();
        col.setColumnName(colName);
        col.setPrimaryKey(pt.getRawKey());
        byte[] indValue=column.getValueRaw();
        col.setIndexedValue(indValue);
        IndexPoint newPoint=new IndexPoint(pt.getRowKeyMeta(),col,data.getColumnMeta());
        s.addIndexPoint(newPoint,data.getPartitionBy(),data.getPartitionId());
        changedCounter++;
      }
    }
    rowCounter++;
    if (changedCounter > 50) {
      s.flush();
    }
    if (rowCounter % 20000 == 0) {
      System.out.println(""String_Node_Str"" + rowCounter + ""String_Node_Str""+ changedCounter);
    }
  }
  s.flush();
  return new Counter(rowCounter,changedCounter);
}","private Counter processAllColumns(NoSqlTypedSession s,ColFamilyData data,Map<Object,KeyValue<TypedRow>> keyToRow,Cursor<IndexPoint> indexView2){
  String colName=data.getColumn();
  indexView2.beforeFirst();
  int rowCounter=0;
  int changedCounter=0;
  while (indexView2.next()) {
    IndexPoint pt=indexView2.getCurrent();
    KeyValue<TypedRow> row=keyToRow.get(pt.getKey());
    if (row == null) {
      log.debug(""String_Node_Str"" + pt.getKey());
    }
 else     if (row.getException() != null || row.getValue() == null) {
      removeIndexPt(s,data,pt);
      changedCounter++;
    }
 else {
      TypedRow val=row.getValue();
      if (processColumn(s,data,val,pt)) {
        changedCounter++;
      }
    }
    rowCounter++;
    if (changedCounter > 50) {
      s.flush();
    }
    if (rowCounter % 20000 == 0) {
      System.out.println(""String_Node_Str"" + rowCounter + ""String_Node_Str""+ changedCounter);
    }
  }
  s.flush();
  return new Counter(rowCounter,changedCounter);
}",0.7047688387331634
97908,"@Override public void saveMonitor(PlayOrmMonitor monitor){
  MonitorDbo m=CopyUtil.copy(monitor);
  NoSqlEntityManager mgr=factory.createEntityManager();
  mgr.put(m);
  mgr.flush();
}","@Override public void saveMonitor(PlayOrmMonitor monitor){
  MonitorDbo m=CopyUtil.copy(monitor);
  NoSqlEntityManager mgr=factory.createEntityManager();
  mgr.put(m,false);
  mgr.flush();
}",0.983957219251337
97909,"@SuppressWarnings(""String_Node_Str"") private void loadCacheBackward(){
  byte[] previousKey=null;
  Holder<byte[]> keyHolder=rowKeys.previousImpl();
  if (keyHolder != null)   previousKey=keyHolder.getValue();
  if (cachedRows != null && cachedRows.hasPrevious())   return;
 else   if (previousKey == null)   return;
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize && previousKey != null) {
    RowHolder<Row> result=cache.fromCache(cf,previousKey);
    if (result == null)     keysToLookup.add(0,previousKey);
    results.add(result);
    previousKey=null;
    keyHolder=rowKeys.previousImpl();
    if (keyHolder != null)     previousKey=keyHolder.getValue();
  }
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=null;
  if (keysToLookup.size() > 0) {
    if (list != null)     list.beforeFetchingNextBatch();
    ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
    ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
    RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
    OperationResult<Rows<byte[],byte[]>> result=execute(slice);
    Rows<byte[],byte[]> rows=result.getResult();
    resultingRows=rows.iterator();
    if (list != null)     list.afterFetchingNextBatch(rows.size());
  }
 else {
    resultingRows=new ArrayList<com.netflix.astyanax.model.Row<byte[],byte[]>>().iterator();
  }
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
    cache.cacheRow(cf,row.getKey(),kv.getValue());
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.listIterator();
  while (cachedRows.hasNext())   cachedRows.next();
}","@SuppressWarnings(""String_Node_Str"") private void loadCacheBackward(){
  if (cachedRows != null && cachedRows.hasPrevious())   return;
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize) {
    Holder<byte[]> keyHolder=rowKeys.previousImpl();
    if (keyHolder == null)     break;
    byte[] previousKey=keyHolder.getValue();
    RowHolder<Row> result=cache.fromCache(cf,previousKey);
    if (result == null)     keysToLookup.add(0,previousKey);
    results.add(result);
  }
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=null;
  if (keysToLookup.size() > 0) {
    if (list != null)     list.beforeFetchingNextBatch();
    ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
    ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
    RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
    OperationResult<Rows<byte[],byte[]>> result=execute(slice);
    Rows<byte[],byte[]> rows=result.getResult();
    resultingRows=rows.iterator();
    if (list != null)     list.afterFetchingNextBatch(rows.size());
  }
 else {
    resultingRows=new ArrayList<com.netflix.astyanax.model.Row<byte[],byte[]>>().iterator();
  }
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
    cache.cacheRow(cf,row.getKey(),kv.getValue());
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.listIterator();
  while (cachedRows.hasNext())   cachedRows.next();
}",0.8523138832997988
97910,"/** 
 * Converts to BigInteger byte form OR BigDecimal byte form OR UTF8 byte form
 * @param obj
 * @return
 */
public static byte[] convertToBytes(Object obj){
  Class clazz=obj.getClass();
  BaseConverter converter=stdConverters.get(clazz);
  if (converter == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str"");
  return converter.convertToNoSql(obj);
}","/** 
 * Converts to BigInteger byte form OR BigDecimal byte form OR UTF8 byte form
 * @param obj
 * @return
 */
public static byte[] convertToBytes(Object obj){
  if (obj == null)   return null;
  Class clazz=obj.getClass();
  BaseConverter converter=stdConverters.get(clazz);
  if (converter == null)   throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str"");
  return converter.convertToNoSql(obj);
}",0.9586374695863747
97911,"@Test public void testZeroVersusNullVersusOther(){
  log.info(""String_Node_Str"");
  NoSqlTypedSession s=mgr.getTypedSession();
  String cf=""String_Node_Str"";
  TypedRow row1=s.createTypedRow(cf);
  row1.setRowKey(BigInteger.valueOf(25));
  row1.addColumn(""String_Node_Str"",new BigDecimal(0));
  row1.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row1);
  TypedRow row2=s.createTypedRow(cf);
  row2.setRowKey(BigInteger.valueOf(26));
  row2.addColumn(""String_Node_Str"",null);
  row2.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row2);
  TypedRow row3=s.createTypedRow(cf);
  row3.setRowKey(BigInteger.valueOf(27));
  row3.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row3);
  byte[] name=new byte[]{1,2,3,4};
  TypedRow row4=s.createTypedRow(cf);
  row4.setRowKey(BigInteger.valueOf(28));
  row4.addColumn(name,new byte[0],null);
  row4.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row4);
  TypedRow row5=s.createTypedRow(cf);
  row5.setRowKey(BigInteger.valueOf(29));
  row5.addColumn(""String_Node_Str"",""String_Node_Str"");
  row5.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row5);
  s.flush();
  TypedRow result1=s.find(cf,row1.getRowKey());
  TypedRow result2=s.find(cf,row2.getRowKey());
  TypedRow result3=s.find(cf,row3.getRowKey());
  TypedRow result4=s.find(cf,row4.getRowKey());
  TypedRow result5=s.find(cf,row5.getRowKey());
  TypedColumn column1=result1.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column1);
  Object val=column1.getValue();
  Assert.assertEquals(new BigDecimal(0),val);
  TypedColumn column2=result2.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column2);
  Object val2=column2.getValue();
  Assert.assertNull(val2);
  TypedColumn column3=result3.getColumn(""String_Node_Str"");
  Assert.assertNull(column3);
  TypedColumn column4=result4.getColumn(name);
  Assert.assertNotNull(column4);
  byte[] valueRaw=column4.getValueRaw();
  Assert.assertNull(valueRaw);
  TypedColumn column5=result5.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column5);
  String value=(String)column5.getValue(String.class);
  Assert.assertEquals(null,value);
}","@Test public void testZeroVersusNullVersusOther(){
  log.info(""String_Node_Str"");
  NoSqlTypedSession s=mgr.getTypedSession();
  String cf=""String_Node_Str"";
  TypedRow row1=s.createTypedRow(cf);
  row1.setRowKey(BigInteger.valueOf(25));
  row1.addColumn(""String_Node_Str"",new BigDecimal(0));
  row1.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row1);
  TypedRow row2=s.createTypedRow(cf);
  row2.setRowKey(BigInteger.valueOf(26));
  row2.addColumn(""String_Node_Str"",null);
  row2.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row2);
  TypedRow row3=s.createTypedRow(cf);
  row3.setRowKey(BigInteger.valueOf(27));
  row3.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row3);
  byte[] name=new byte[]{1,2,3,4};
  TypedRow row4=s.createTypedRow(cf);
  row4.setRowKey(BigInteger.valueOf(28));
  row4.addColumn(name,new byte[0],null);
  row4.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row4);
  TypedRow row5=s.createTypedRow(cf);
  row5.setRowKey(BigInteger.valueOf(29));
  row5.addColumn(""String_Node_Str"",""String_Node_Str"");
  row5.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row5);
  TypedRow row6=s.createTypedRow(cf);
  row6.setRowKey(BigInteger.valueOf(30));
  row6.addColumn(""String_Node_Str"",0);
  row6.addColumn(""String_Node_Str"",null);
  row6.addColumn(""String_Node_Str"",""String_Node_Str"");
  s.put(cf,row6);
  s.flush();
  TypedRow result1=s.find(cf,row1.getRowKey());
  TypedRow result2=s.find(cf,row2.getRowKey());
  TypedRow result3=s.find(cf,row3.getRowKey());
  TypedRow result4=s.find(cf,row4.getRowKey());
  TypedRow result5=s.find(cf,row5.getRowKey());
  TypedRow result6=s.find(cf,row6.getRowKey());
  TypedColumn column1=result1.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column1);
  Object val=column1.getValue();
  Assert.assertEquals(new BigDecimal(0),val);
  TypedColumn column2=result2.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column2);
  Object val2=column2.getValue();
  Assert.assertNull(val2);
  TypedColumn column3=result3.getColumn(""String_Node_Str"");
  Assert.assertNull(column3);
  TypedColumn column4=result4.getColumn(name);
  Assert.assertNotNull(column4);
  byte[] valueRaw=column4.getValueRaw();
  Assert.assertNull(valueRaw);
  TypedColumn column5=result5.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column5);
  String value=(String)column5.getValue(String.class);
  Assert.assertEquals(null,value);
  TypedColumn column6=result6.getColumn(""String_Node_Str"");
  Assert.assertNotNull(column6);
  int value6=(Integer)column6.getValue(Integer.class);
  Assert.assertEquals(0,value6);
  TypedColumn column6b=result6.getColumn(""String_Node_Str"");
  Integer val6b=column6b.getValue(Integer.class);
  Assert.assertNull(val6b);
}",0.8774928774928775
97912,"@Override public Object convertFromNoSqlImpl(byte[] value){
  byte[] timeArray=new byte[8];
  byte[] clockSeqAndNodeArray=new byte[8];
  System.arraycopy(value,0,timeArray,0,8);
  System.arraycopy(value,8,clockSeqAndNodeArray,0,8);
  long time=StandardConverters.convertFromBytes(Long.class,timeArray);
  long clockSeqAndNode=StandardConverters.convertFromBytes(Long.class,clockSeqAndNodeArray);
  UUID ud=new UUID(time,clockSeqAndNode);
  return ud;
}","@Override public Object convertFromNoSqlImpl(byte[] value){
  try {
    byte[] timeArray=new byte[8];
    byte[] clockSeqAndNodeArray=new byte[8];
    System.arraycopy(value,0,timeArray,0,8);
    System.arraycopy(value,8,clockSeqAndNodeArray,0,8);
    long time=StandardConverters.convertFromBytes(Long.class,timeArray);
    long clockSeqAndNode=StandardConverters.convertFromBytes(Long.class,clockSeqAndNodeArray);
    UUID ud=new UUID(time,clockSeqAndNode);
    return ud;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + value.length,e);
  }
}",0.8571428571428571
97913,"@SuppressWarnings(""String_Node_Str"") private void loadCache(){
  byte[] nextKey=null;
  Holder<byte[]> keyHolder=rowKeys.nextImpl();
  if (keyHolder != null)   nextKey=keyHolder.getValue();
  if (cachedRows != null && cachedRows.hasNext())   return;
 else   if (nextKey == null)   return;
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize && nextKey != null) {
    RowHolder<Row> result=cache.fromCache(cf,nextKey);
    if (result == null)     keysToLookup.add(nextKey);
    results.add(result);
    nextKey=null;
    keyHolder=rowKeys.nextImpl();
    if (keyHolder != null)     nextKey=keyHolder.getValue();
  }
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=null;
  if (keysToLookup.size() > 0) {
    if (list != null)     list.beforeFetchingNextBatch();
    ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
    ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
    RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
    OperationResult<Rows<byte[],byte[]>> result=execute(slice);
    Rows<byte[],byte[]> rows=result.getResult();
    resultingRows=rows.iterator();
    if (list != null)     list.afterFetchingNextBatch(rows.size());
  }
 else {
    resultingRows=new ArrayList<com.netflix.astyanax.model.Row<byte[],byte[]>>().iterator();
  }
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
    cache.cacheRow(cf,row.getKey(),kv.getValue());
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.listIterator();
}","@SuppressWarnings(""String_Node_Str"") private void loadCache(){
  if (cachedRows != null && cachedRows.hasNext())   return;
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize) {
    Holder<byte[]> keyHolder=rowKeys.nextImpl();
    if (keyHolder == null)     break;
    byte[] nextKey=keyHolder.getValue();
    RowHolder<Row> result=cache.fromCache(cf,nextKey);
    if (result == null)     keysToLookup.add(nextKey);
    results.add(result);
  }
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=null;
  if (keysToLookup.size() > 0) {
    if (list != null)     list.beforeFetchingNextBatch();
    ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
    ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
    RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
    OperationResult<Rows<byte[],byte[]>> result=execute(slice);
    Rows<byte[],byte[]> rows=result.getResult();
    resultingRows=rows.iterator();
    if (list != null)     list.afterFetchingNextBatch(rows.size());
  }
 else {
    resultingRows=new ArrayList<com.netflix.astyanax.model.Row<byte[],byte[]>>().iterator();
  }
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
    cache.cacheRow(cf,row.getKey(),kv.getValue());
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.listIterator();
}",0.8565453785027185
97914,"private DirectCursor<IndexColumnInfo> processRangeExpression(ExpressionNode root,Set<ViewInfo> alreadyJoinedViews){
  StateAttribute attr;
  if (root.getType() == NoSqlLexer.BETWEEN) {
    ExpressionNode grandChild=root.getChild(ChildSide.LEFT).getChild(ChildSide.LEFT);
    attr=(StateAttribute)grandChild.getState();
  }
 else {
    attr=(StateAttribute)root.getChild(ChildSide.LEFT).getState();
  }
  DboColumnMeta info=attr.getColumnInfo();
  ViewInfoImpl viewInfo=attr.getViewInfo();
  ScanInfo scanInfo=createScanInfo(viewInfo,info);
  alreadyJoinedViews.add(viewInfo);
  if (info.isIndexed()) {
    AbstractCursor<IndexColumn> scan;
    if (root.getType() == NoSqlLexer.EQ) {
      byte[] data=retrieveValue(info,root.getChild(ChildSide.RIGHT));
      Key key=new Key(data,true);
      scan=session.scanIndex(scanInfo,key,key,batchSize);
    }
 else     if (root.getType() == NoSqlLexer.GT || root.getType() == NoSqlLexer.GE || root.getType() == NoSqlLexer.LT || root.getType() == NoSqlLexer.LE || root.isInBetweenExpression()) {
      Key from=null;
      Key to=null;
      if (root.isInBetweenExpression()) {
        ExpressionNode node=root.getGreaterThan();
        ExpressionNode node2=root.getLessThan();
        from=createLeftKey(node,info);
        to=createRightKey(node2,info);
      }
 else       if (root.getType() == NoSqlLexer.GT || root.getType() == NoSqlLexer.GE) {
        from=createLeftKey(root,info);
      }
 else       if (root.getType() == NoSqlLexer.LT) {
        to=createRightKey(root,info);
      }
 else       throw new UnsupportedOperationException(""String_Node_Str"");
      scan=session.scanIndex(scanInfo,from,to,batchSize);
    }
 else     throw new UnsupportedOperationException(""String_Node_Str"" + root.getType());
    DirectCursor<IndexColumnInfo> processKeys=processKeys(viewInfo,info,scan);
    return processKeys;
  }
 else   if (info.getOwner().getIdColumnMeta().getColumnName().equals(info.getColumnName())) {
    AbstractCursor<KeyValue<Row>> scan;
    if (root.getType() == NoSqlLexer.EQ) {
      byte[] data=retrieveValue(info,root.getChild(ChildSide.RIGHT));
      byte[] virtualkey=info.getOwner().getIdColumnMeta().formVirtRowKey(data);
      List<byte[]> keyList=new ArrayList<byte[]>();
      keyList.add(virtualkey);
      scan=session.find(info.getOwner(),keyList,false,true,batchSize);
    }
 else     throw new UnsupportedOperationException(""String_Node_Str"" + root.getType());
    DirectCursor<IndexColumnInfo> processKeys=processKeysforPK(viewInfo,info,scan);
    return processKeys;
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + info.getColumnName() + ""String_Node_Str""+ info.getColumnName()+ ""String_Node_Str"");
}","private DirectCursor<IndexColumnInfo> processRangeExpression(ExpressionNode root,Set<ViewInfo> alreadyJoinedViews){
  StateAttribute attr;
  if (root.getType() == NoSqlLexer.BETWEEN) {
    ExpressionNode grandChild=root.getChild(ChildSide.LEFT).getChild(ChildSide.LEFT);
    attr=(StateAttribute)grandChild.getState();
  }
 else {
    attr=(StateAttribute)root.getChild(ChildSide.LEFT).getState();
  }
  DboColumnMeta info=attr.getColumnInfo();
  ViewInfoImpl viewInfo=attr.getViewInfo();
  ScanInfo scanInfo=createScanInfo(viewInfo,info);
  alreadyJoinedViews.add(viewInfo);
  if (info.isIndexed()) {
    return processIndexColumn(root,scanInfo,viewInfo,info);
  }
 else   if (info.getOwner().getIdColumnMeta().getColumnName().equals(info.getColumnName())) {
    AbstractCursor<KeyValue<Row>> scan;
    if (root.getType() == NoSqlLexer.EQ) {
      byte[] data=retrieveValue(info,root.getChild(ChildSide.RIGHT));
      byte[] virtualkey=info.getOwner().getIdColumnMeta().formVirtRowKey(data);
      List<byte[]> keyList=new ArrayList<byte[]>();
      keyList.add(virtualkey);
      scan=session.find(info.getOwner(),keyList,false,true,batchSize);
    }
 else     throw new UnsupportedOperationException(""String_Node_Str"" + root.getType());
    DirectCursor<IndexColumnInfo> processKeys=processKeysforPK(viewInfo,info,scan);
    return processKeys;
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + info.getColumnName() + ""String_Node_Str""+ info.getColumnName()+ ""String_Node_Str"");
}",0.633007859014051
97915,"@SuppressWarnings(""String_Node_Str"") private MetaField processToMany(MetaClassSingle<?> ownerMeta,DboTableMeta t,Field field,String colName,Class entityType,Field fieldForKey){
  if (!entityType.isAnnotationPresent(NoSqlEntity.class))   throw new RuntimeException(""String_Node_Str"" + entityType.getName() + ""String_Node_Str""+ ""String_Node_Str""+ field.getDeclaringClass().getName()+ ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
  MetaAbstractClass<?> fkMeta=metaInfo.findOrCreate(entityType);
  if (field.getType().equals(CursorToMany.class)) {
    MetaCursorField metaField=metaCursorProvider.get();
    metaField.setup(t,field,colName,ownerMeta,fkMeta);
    return metaField;
  }
  if (!field.getType().equals(Map.class) && !field.getType().equals(List.class) && !field.getType().equals(Set.class)&& !field.getType().equals(Collection.class))   throw new RuntimeException(""String_Node_Str"" + field + ""String_Node_Str"");
  MetaToManyField metaField=metaListProvider.get();
  metaField.setup(t,field,colName,fkMeta,fieldForKey);
  return metaField;
}","@SuppressWarnings(""String_Node_Str"") private MetaField processToMany(MetaClassSingle<?> ownerMeta,DboTableMeta t,Field field,String colName,Class entityType,Field fieldForKey){
  Class<?> theSuperclass=null;
  Class<?> type=entityType;
  if (!entityType.isAnnotationPresent(NoSqlEntity.class)) {
    if (!entityType.isAnnotationPresent(NoSqlDiscriminatorColumn.class))     throw new RuntimeException(""String_Node_Str"" + entityType + ""String_Node_Str""+ ""String_Node_Str""+ field.getDeclaringClass().getName()+ ""String_Node_Str""+ field.getName());
    theSuperclass=findSuperclassWithNoSqlEntity(entityType);
    runOtherSuperclassChecks(entityType,field,theSuperclass);
  }
  MetaAbstractClass<?> fkMeta=metaInfo.findOrCreate(type);
  if (theSuperclass != null) {
    MetaClassInheritance meta=(MetaClassInheritance)fkMeta;
    fkMeta=meta.findOrCreate(type,theSuperclass);
  }
  if (field.getType().equals(CursorToMany.class)) {
    MetaCursorField metaField=metaCursorProvider.get();
    metaField.setup(t,field,colName,ownerMeta,fkMeta);
    return metaField;
  }
  if (!field.getType().equals(Map.class) && !field.getType().equals(List.class) && !field.getType().equals(Set.class)&& !field.getType().equals(Collection.class))   throw new RuntimeException(""String_Node_Str"" + field + ""String_Node_Str"");
  MetaToManyField metaField=metaListProvider.get();
  metaField.setup(t,field,colName,fkMeta,fieldForKey);
  return metaField;
}",0.6249498596068993
97916,"@SuppressWarnings(""String_Node_Str"") public MetaField processToOne(DboTableMeta t,Field field,String colNameOrig){
  String colName=field.getName();
  if (!""String_Node_Str"".equals(colNameOrig))   colName=colNameOrig;
  boolean isIndexed=false;
  if (field.isAnnotationPresent(NoSqlIndexed.class))   isIndexed=true;
  boolean isPartitionedBy=false;
  if (field.isAnnotationPresent(NoSqlPartitionByThisField.class))   isPartitionedBy=true;
  Class<?> theSuperclass=null;
  Class<?> type=field.getType();
  if (!field.getType().isAnnotationPresent(NoSqlEntity.class) && field.getType() != ToOneProvider.class) {
    if (!field.getType().isAnnotationPresent(NoSqlDiscriminatorColumn.class))     throw new RuntimeException(""String_Node_Str"" + field.getType() + ""String_Node_Str""+ ""String_Node_Str""+ field.getDeclaringClass().getName()+ ""String_Node_Str""+ field.getName());
    theSuperclass=findSuperclassWithNoSqlEntity(field.getType());
    type=theSuperclass;
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + theSuperclass);
    if (theSuperclass == null)     throw new RuntimeException(""String_Node_Str"" + field.getType() + ""String_Node_Str""+ ""String_Node_Str"");
    NoSqlInheritance anno=theSuperclass.getAnnotation(NoSqlInheritance.class);
    if (anno == null)     throw new RuntimeException(""String_Node_Str"" + field.getType() + ""String_Node_Str""+ ""String_Node_Str"");
 else     if (!classExistsInList(anno,field.getType()))     throw new RuntimeException(""String_Node_Str"" + field.getType() + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (field.getType().isAnnotationPresent(NoSqlInheritance.class)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + field + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (field.getType() == ToOneProvider.class) {
    ParameterizedType genType=(ParameterizedType)field.getGenericType();
    type=(Class)genType.getActualTypeArguments()[0];
  }
  MetaProxyField metaField=metaProxyProvider.get();
  MetaAbstractClass<?> classMeta=metaInfo.findOrCreate(type);
  if (theSuperclass != null) {
    MetaClassInheritance meta=(MetaClassInheritance)classMeta;
    classMeta=meta.findOrCreate(field.getType(),theSuperclass);
  }
  metaField.setup(t,field,colName,classMeta,isIndexed,isPartitionedBy);
  return metaField;
}","@SuppressWarnings(""String_Node_Str"") public MetaField processToOne(DboTableMeta t,Field field,String colNameOrig){
  String colName=field.getName();
  if (!""String_Node_Str"".equals(colNameOrig))   colName=colNameOrig;
  boolean isIndexed=false;
  if (field.isAnnotationPresent(NoSqlIndexed.class))   isIndexed=true;
  boolean isPartitionedBy=false;
  if (field.isAnnotationPresent(NoSqlPartitionByThisField.class))   isPartitionedBy=true;
  Class<?> theSuperclass=null;
  Class<?> type=field.getType();
  if (!field.getType().isAnnotationPresent(NoSqlEntity.class) && field.getType() != ToOneProvider.class) {
    if (!field.getType().isAnnotationPresent(NoSqlDiscriminatorColumn.class))     throw new RuntimeException(""String_Node_Str"" + field.getType() + ""String_Node_Str""+ ""String_Node_Str""+ field.getDeclaringClass().getName()+ ""String_Node_Str""+ field.getName());
    theSuperclass=findSuperclassWithNoSqlEntity(field.getType());
    runOtherSuperclassChecks(field.getType(),field,theSuperclass);
  }
 else   if (field.getType().isAnnotationPresent(NoSqlInheritance.class)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + field + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (field.getType() == ToOneProvider.class) {
    ParameterizedType genType=(ParameterizedType)field.getGenericType();
    type=(Class)genType.getActualTypeArguments()[0];
  }
  MetaProxyField metaField=metaProxyProvider.get();
  MetaAbstractClass<?> classMeta=metaInfo.findOrCreate(type);
  if (theSuperclass != null) {
    MetaClassInheritance meta=(MetaClassInheritance)classMeta;
    classMeta=meta.findOrCreate(field.getType(),theSuperclass);
  }
  metaField.setup(t,field,colName,classMeta,isIndexed,isPartitionedBy);
  return metaField;
}",0.853029951242164
97917,"@Test public void testInnerJoin(){
  putEntities();
  long start=System.currentTimeMillis();
  List<AAPartitionedTrade> trades=AAPartitionedTrade.findInPartition(mgr,5,""String_Node_Str"",null);
  long total=System.currentTimeMillis() - start;
  log.info(""String_Node_Str"" + total + ""String_Node_Str"");
  Assert.assertEquals(2,trades.size());
}","@Test public void testInnerJoin(){
  putEntities();
  long start=System.currentTimeMillis();
  List<PartitionedTrade> trades=PartitionedTrade.findInPartition(mgr,5,""String_Node_Str"",null);
  long total=System.currentTimeMillis() - start;
  log.info(""String_Node_Str"" + total + ""String_Node_Str"");
  Assert.assertEquals(2,trades.size());
}",0.9941176470588236
97918,"@Test public void testLeftOuterJoin(){
  putEntities();
  List<AAPartitionedTrade> trades=AAPartitionedTrade.findLeftOuter(mgr,5,""String_Node_Str"",null);
  Assert.assertEquals(3,trades.size());
}","@Test public void testLeftOuterJoin(){
  putEntities();
  List<PartitionedTrade> trades=PartitionedTrade.findLeftOuter(mgr,5,""String_Node_Str"",null);
  Assert.assertEquals(3,trades.size());
}",0.9896373056994818
97919,"private void putEntities(){
  PartSecurity sec=new PartSecurity();
  sec.setId(""String_Node_Str"");
  sec.setSecurityType(""String_Node_Str"");
  mgr.put(sec);
  PartSecurity sec2=new PartSecurity();
  sec2.setId(""String_Node_Str"");
  sec2.setSecurityType(""String_Node_Str"");
  mgr.put(sec2);
  PartSecurity sec3=new PartSecurity();
  sec3.setId(""String_Node_Str"");
  sec3.setSecurityType(""String_Node_Str"");
  mgr.put(sec3);
  mgr.flush();
  AAPartitionedTrade trade1=new AAPartitionedTrade();
  trade1.setId(""String_Node_Str"");
  trade1.setSecurity(sec);
  trade1.setNumShares(5);
  mgr.put(trade1);
  mgr.flush();
  AAPartitionedTrade trade2=new AAPartitionedTrade();
  trade2.setId(""String_Node_Str"");
  trade2.setSecurity(sec);
  trade2.setNumShares(6);
  mgr.put(trade2);
  AAPartitionedTrade trade3=new AAPartitionedTrade();
  trade3.setId(""String_Node_Str"");
  trade3.setSecurity(sec3);
  trade3.setNumShares(5);
  mgr.put(trade3);
  AAPartitionedTrade trade4=new AAPartitionedTrade();
  trade4.setId(""String_Node_Str"");
  trade4.setNumShares(5);
  mgr.put(trade4);
  AAPartitionedTrade trade5=new AAPartitionedTrade();
  trade5.setId(""String_Node_Str"");
  trade5.setSecurity(sec2);
  trade5.setNumShares(5);
  mgr.put(trade5);
  mgr.flush();
}","private void putEntities(){
  PartSecurity sec=new PartSecurity();
  sec.setId(""String_Node_Str"");
  sec.setSecurityType(""String_Node_Str"");
  mgr.put(sec);
  PartSecurity sec2=new PartSecurity();
  sec2.setId(""String_Node_Str"");
  sec2.setSecurityType(""String_Node_Str"");
  mgr.put(sec2);
  PartSecurity sec3=new PartSecurity();
  sec3.setId(""String_Node_Str"");
  sec3.setSecurityType(""String_Node_Str"");
  mgr.put(sec3);
  mgr.flush();
  PartitionedTrade trade1=new PartitionedTrade();
  trade1.setId(""String_Node_Str"");
  trade1.setSecurity(sec);
  trade1.setNumShares(5);
  mgr.put(trade1);
  mgr.flush();
  PartitionedTrade trade2=new PartitionedTrade();
  trade2.setId(""String_Node_Str"");
  trade2.setSecurity(sec);
  trade2.setNumShares(6);
  mgr.put(trade2);
  PartitionedTrade trade3=new PartitionedTrade();
  trade3.setId(""String_Node_Str"");
  trade3.setSecurity(sec3);
  trade3.setNumShares(5);
  mgr.put(trade3);
  PartitionedTrade trade4=new PartitionedTrade();
  trade4.setId(""String_Node_Str"");
  trade4.setNumShares(5);
  mgr.put(trade4);
  PartitionedTrade trade5=new PartitionedTrade();
  trade5.setId(""String_Node_Str"");
  trade5.setSecurity(sec2);
  trade5.setNumShares(5);
  mgr.put(trade5);
  mgr.flush();
}",0.9919289749798224
97920,"@Test public void testPartitioning(){
  PartAccount acc=new PartAccount();
  acc.setBusinessName(""String_Node_Str"");
  acc.setSomeNumber(5);
  PartAccount acc2=new PartAccount();
  acc.setBusinessName(""String_Node_Str"");
  acc.setSomeNumber(6);
  AAPartitionedTrade trade=new AAPartitionedTrade();
  trade.setAccount(acc);
  trade.setSecurityName(""String_Node_Str"");
  trade.setUniqueColumn(""String_Node_Str"");
  AAPartitionedTrade trade2=new AAPartitionedTrade();
  trade2.setAccount(acc);
  trade2.setSecurityName(""String_Node_Str"");
  trade2.setUniqueColumn(""String_Node_Str"");
  AAPartitionedTrade trade3=new AAPartitionedTrade();
  trade3.setAccount(acc);
  trade3.setSecurityName(""String_Node_Str"");
  trade3.setUniqueColumn(""String_Node_Str"");
  AAPartitionedTrade trade4=new AAPartitionedTrade();
  trade4.setAccount(acc2);
  trade4.setSecurityName(""String_Node_Str"");
  trade4.setUniqueColumn(""String_Node_Str"");
  mgr.put(acc);
  mgr.put(acc2);
  mgr.put(trade);
  mgr.put(trade3);
  mgr.put(trade4);
  mgr.flush();
  mgr.put(trade2);
  mgr.flush();
  List<AAPartitionedTrade> tradesInAcc1Partition=AAPartitionedTrade.findByUnique(mgr,trade.getUniqueColumn(),acc);
  Assert.assertEquals(2,tradesInAcc1Partition.size());
}","@Test public void testPartitioning(){
  PartAccount acc=new PartAccount();
  acc.setBusinessName(""String_Node_Str"");
  acc.setSomeNumber(5);
  PartAccount acc2=new PartAccount();
  acc.setBusinessName(""String_Node_Str"");
  acc.setSomeNumber(6);
  PartitionedTrade trade=new PartitionedTrade();
  trade.setAccount(acc);
  trade.setSecurityName(""String_Node_Str"");
  trade.setUniqueColumn(""String_Node_Str"");
  PartitionedTrade trade2=new PartitionedTrade();
  trade2.setAccount(acc);
  trade2.setSecurityName(""String_Node_Str"");
  trade2.setUniqueColumn(""String_Node_Str"");
  PartitionedTrade trade3=new PartitionedTrade();
  trade3.setAccount(acc);
  trade3.setSecurityName(""String_Node_Str"");
  trade3.setUniqueColumn(""String_Node_Str"");
  PartitionedTrade trade4=new PartitionedTrade();
  trade4.setAccount(acc2);
  trade4.setSecurityName(""String_Node_Str"");
  trade4.setUniqueColumn(""String_Node_Str"");
  mgr.put(acc);
  mgr.put(acc2);
  mgr.put(trade);
  mgr.put(trade3);
  mgr.put(trade4);
  mgr.flush();
  mgr.put(trade2);
  mgr.flush();
  List<PartitionedTrade> tradesInAcc1Partition=PartitionedTrade.findByUnique(mgr,trade.getUniqueColumn(),acc);
  Assert.assertEquals(2,tradesInAcc1Partition.size());
}",0.8050778050778051
97921,"public List<AAPartitionedTrade> getActivities(){
  return activities;
}","public List<PartitionedTrade> getActivities(){
  return activities;
}",0.9857142857142858
97922,"public void addActivity(AAPartitionedTrade act1){
  activities.add(act1);
}","public void addActivity(PartitionedTrade act1){
  activities.add(act1);
}",0.9864864864864864
97923,"@Override public AbstractCursor<KeyValue<Row>> find(DboTableMeta colFamily,Iterable<byte[]> rowKeys,boolean skipCache,Integer batchSize){
  Cache c=this;
  if (skipCache) {
    c=new EmptyCache(this);
  }
  CacheThreadLocal.setCache(c);
  try {
    AbstractCursor<KeyValue<Row>> rowsFromDb=session.find(colFamily,rowKeys,skipCache,batchSize);
    return rowsFromDb;
  }
  finally {
    CacheThreadLocal.setCache(null);
  }
}","@Override public AbstractCursor<KeyValue<Row>> find(DboTableMeta colFamily,Iterable<byte[]> rowKeys,boolean skipCache,Integer batchSize){
  Cache c=this;
  if (skipCache) {
    c=new EmptyCache(this);
  }
  CacheThreadLocal.setCache(c);
  AbstractCursor<KeyValue<Row>> rowsFromDb=session.find(colFamily,rowKeys,skipCache,batchSize);
  return rowsFromDb;
}",0.9114249037227214
97924,"@Override public AbstractCursor<KeyValue<Row>> find(DboTableMeta colFamily,Iterable<byte[]> rowKeys,Cache realCache,int batchSize,BatchListener l,MetaLookup mgr){
  BatchListener list=l;
  if (log.isInfoEnabled()) {
    list=new LogBatchFetch(""String_Node_Str"" + colFamily,l,batchSize);
  }
  Cache cache=CacheThreadLocal.getCache();
  return session.find(colFamily,rowKeys,cache,batchSize,list,mgr);
}","@Override public AbstractCursor<KeyValue<Row>> find(DboTableMeta colFamily,Iterable<byte[]> rowKeys,Cache realCache,int batchSize,BatchListener l,MetaLookup mgr){
  BatchListener list=l;
  Cache cache=CacheThreadLocal.getCache();
  if (log.isInfoEnabled()) {
    list=new LogBatchFetch(""String_Node_Str"" + colFamily,l,batchSize);
  }
  if (cache == null)   throw new IllegalArgumentException(""String_Node_Str"");
  return session.find(colFamily,rowKeys,cache,batchSize,list,mgr);
}",0.8276643990929705
97925,"private void loadCache(){
  if (this.currentCacheLoaded)   return;
  currentCacheLoaded=true;
  DboTableMeta metaDbo=proxyMeta.getMetaDbo();
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,keyList,true,batchSize);
  int counter=0;
  while (true) {
    com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    byte[] key=(byte[])kv.getKey();
    Row row=kv.getValue();
    Tuple<T> tuple=proxyMeta.convertIdToProxy(row,session,key,null);
    if (row == null) {
      throw new IllegalStateException(""String_Node_Str"" + owner + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ tuple.getEntityId()+ ""String_Node_Str"");
    }
    T value=proxyList.get(counter);
    proxyMeta.fillInInstance(row,session,value);
    counter++;
  }
}","private void loadCache(){
  if (this.currentCacheLoaded)   return;
  currentCacheLoaded=true;
  DboTableMeta metaDbo=proxyMeta.getMetaDbo();
  Iterable<byte[]> virtKeys=new IterToVirtual(metaDbo,keyList);
  AbstractCursor<KeyValue<Row>> rows=session.find(metaDbo,virtKeys,true,batchSize);
  int counter=0;
  while (true) {
    com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> holder=rows.nextImpl();
    if (holder == null)     break;
    KeyValue<Row> kv=holder.getValue();
    byte[] key=(byte[])kv.getKey();
    Row row=kv.getValue();
    Tuple<T> tuple=proxyMeta.convertIdToProxy(row,session,key,null);
    if (row == null) {
      throw new IllegalStateException(""String_Node_Str"" + owner + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ tuple.getEntityId()+ ""String_Node_Str"");
    }
    T value=proxyList.get(counter);
    proxyMeta.fillInInstance(row,session,value);
    counter++;
  }
}",0.9556926528323052
97926,"private KeyValue<T> translateRow(KeyValue<Row> kv){
  Row row=kv.getValue();
  Object key=kv.getKey();
  KeyValue<T> keyVal;
  if (row == null) {
    keyVal=new KeyValue<T>();
    Object obj=meta.getIdField().translateFromBytes((byte[])key);
    if (query != null) {
      RowNotFoundException exc=new RowNotFoundException(""String_Node_Str"" + query + ""String_Node_Str"");
      keyVal.setException(exc);
    }
    keyVal.setKey(obj);
  }
 else {
    keyVal=meta.translateFromRow(row,session);
  }
  return keyVal;
}","@SuppressWarnings(""String_Node_Str"") private KeyValue<T> translateRow(KeyValue<Row> kv){
  Row row=kv.getValue();
  Object key=kv.getKey();
  KeyValue<T> keyVal;
  if (row == null) {
    keyVal=new KeyValue<T>();
    MetaIdField idMeta=meta.getIdField();
    byte[] nonVirtKey=idMeta.unformVirtRowKey((byte[])key);
    Object obj=meta.getIdField().translateFromBytes(nonVirtKey);
    if (query != null) {
      RowNotFoundException exc=new RowNotFoundException(""String_Node_Str"" + query + ""String_Node_Str"");
      keyVal.setException(exc);
    }
    keyVal.setKey(obj);
  }
 else {
    keyVal=meta.translateFromRow(row,session);
  }
  return keyVal;
}",0.8662092624356775
97927,"private void createColFamilyInCassandra(DboTableMeta meta){
  String keysp=keyspace.getKeyspaceName();
  String cfName=meta.getRealColumnFamily().toLowerCase();
  String colFamily=meta.getRealColumnFamily();
  log.info(""String_Node_Str"" + cfName + ""String_Node_Str""+ keysp);
  ColumnFamilyDefinition def=cluster.makeColumnFamilyDefinition().setName(colFamily).setKeyspace(keysp);
  log.info(""String_Node_Str"" + def.getKeyspace() + ""String_Node_Str""+ def.getName());
  StorageTypeEnum rowKeyType=meta.getIdColumnMeta().getStorageType();
  ColumnType colType=ColumnType.ANY_EXCEPT_COMPOSITE;
  if (meta.isVirtualCf()) {
    rowKeyType=StorageTypeEnum.BYTES;
  }
 else {
    StorageTypeEnum type=meta.getColNamePrefixType();
    def=addRowKeyValidation(meta,def);
    def=setColumnNameCompareType(meta,type,def);
    if (type == StorageTypeEnum.STRING)     colType=ColumnType.COMPOSITE_STRINGPREFIX;
 else     if (type == StorageTypeEnum.INTEGER)     colType=ColumnType.COMPOSITE_INTEGERPREFIX;
 else     if (type == StorageTypeEnum.DECIMAL)     colType=ColumnType.COMPOSITE_DECIMALPREFIX;
  }
  addColumnFamily(def);
  String virtual=meta.getColumnFamily();
  String realCf=meta.getRealColumnFamily();
  Info info=createInfo(realCf,colType,rowKeyType);
  virtualToCfName.put(virtual,realCf);
  cfNameToCassandra.put(realCf,info);
}","private void createColFamilyInCassandra(DboTableMeta meta){
  String keysp=keyspace.getKeyspaceName();
  String cfName=meta.getRealColumnFamily().toLowerCase();
  String colFamily=meta.getRealColumnFamily();
  log.info(""String_Node_Str"" + cfName + ""String_Node_Str""+ keysp);
  ColumnFamilyDefinition def=cluster.makeColumnFamilyDefinition().setName(colFamily).setKeyspace(keysp);
  log.info(""String_Node_Str"" + def.getKeyspace() + ""String_Node_Str""+ def.getName());
  StorageTypeEnum rowKeyType=meta.getIdColumnMeta().getStorageType();
  ColumnType colType=ColumnType.ANY_EXCEPT_COMPOSITE;
  if (meta.isVirtualCf()) {
    rowKeyType=StorageTypeEnum.BYTES;
  }
 else {
    StorageTypeEnum type=meta.getColNamePrefixType();
    def=addRowKeyValidation(meta,def);
    def=setColumnNameCompareType(meta,type,def);
    if (type == StorageTypeEnum.STRING)     colType=ColumnType.COMPOSITE_STRINGPREFIX;
 else     if (type == StorageTypeEnum.INTEGER)     colType=ColumnType.COMPOSITE_INTEGERPREFIX;
 else     if (type == StorageTypeEnum.DECIMAL)     colType=ColumnType.COMPOSITE_DECIMALPREFIX;
  }
  addColumnFamily(def);
  String virtual=meta.getColumnFamily();
  String realCf=meta.getRealColumnFamily();
  String realCfLower=realCf.toLowerCase();
  Info info=createInfo(realCf,colType,rowKeyType);
  virtualToCfName.put(virtual,realCfLower);
  cfNameToCassandra.put(realCfLower,info);
}",0.9561047583917374
97928,"private Info tryToLoadColumnFamilyImpl(String virtCf,MetaLookup lookup) throws ConnectionException {
synchronized (virtCf.intern()) {
    log.info(""String_Node_Str"" + virtCf + ""String_Node_Str"");
    String cfName=virtualToCfName.get(virtCf);
    if (cfName != null) {
      Info info=cfNameToCassandra.get(cfName);
      if (info != null) {
        log.info(""String_Node_Str"" + virtCf + ""String_Node_Str""+ cfName+ ""String_Node_Str"");
        return cfNameToCassandra.get(cfName);
      }
    }
    log.info(""String_Node_Str"" + virtCf + ""String_Node_Str"");
    DboTableMeta table=lookup.find(DboTableMeta.class,virtCf);
    if (table == null)     throw new IllegalArgumentException(""String_Node_Str"" + virtCf + ""String_Node_Str"");
    String realCf=table.getRealColumnFamily();
    Info info=cfNameToCassandra.get(realCf);
    if (info != null) {
      log.info(""String_Node_Str"" + virtCf + ""String_Node_Str""+ realCf+ ""String_Node_Str"");
      String cfLowercase=realCf.toLowerCase();
      virtualToCfName.put(virtCf,cfLowercase);
      return info;
    }
    waitForNodesToBeUpToDate(null,300000);
    KeyspaceDefinition keySpaceMeta=keyspace.describeKeyspace();
    ColumnFamilyDefinition def=keySpaceMeta.getColumnFamily(realCf);
    if (def == null) {
      log.info(""String_Node_Str"" + realCf + ""String_Node_Str""+ virtCf+ ""String_Node_Str"");
      return null;
    }
    log.info(""String_Node_Str"" + realCf + ""String_Node_Str""+ virtCf+ ""String_Node_Str"");
    loadColumnFamily(def,virtCf,realCf);
    return lookupVirtCf(virtCf);
  }
}","private Info tryToLoadColumnFamilyImpl(String virtCf,MetaLookup lookup) throws ConnectionException {
synchronized (virtCf.intern()) {
    log.info(""String_Node_Str"" + virtCf + ""String_Node_Str"");
    String cfName=virtualToCfName.get(virtCf);
    if (cfName != null) {
      Info info=cfNameToCassandra.get(cfName);
      if (info != null) {
        log.info(""String_Node_Str"" + virtCf + ""String_Node_Str""+ cfName+ ""String_Node_Str"");
        return cfNameToCassandra.get(cfName);
      }
    }
    DboTableMeta table=loadFromInMemoryOrDb(virtCf,lookup);
    String realCf=table.getRealColumnFamily();
    String realCfLower=realCf.toLowerCase();
    Info info=cfNameToCassandra.get(realCfLower);
    if (info != null) {
      log.info(""String_Node_Str"" + virtCf + ""String_Node_Str""+ realCf+ ""String_Node_Str"");
      String cfLowercase=realCf.toLowerCase();
      virtualToCfName.put(virtCf,cfLowercase);
      return info;
    }
    waitForNodesToBeUpToDate(null,300000);
    KeyspaceDefinition keySpaceMeta=keyspace.describeKeyspace();
    ColumnFamilyDefinition def=keySpaceMeta.getColumnFamily(realCf);
    if (def == null) {
      log.info(""String_Node_Str"" + realCf + ""String_Node_Str""+ virtCf+ ""String_Node_Str"");
      return null;
    }
    log.info(""String_Node_Str"" + realCf + ""String_Node_Str""+ virtCf+ ""String_Node_Str"");
    loadColumnFamily(def,virtCf,realCf);
    return lookupVirtCf(virtCf);
  }
}",0.8430311231393776
97929,"private synchronized void createColFamilyImpl(String virtualCf,MetaLookup ormSession){
  if (lookupVirtCf(virtualCf) != null)   return;
  String keysp=keyspace.getKeyspaceName();
  log.info(""String_Node_Str"" + virtualCf + ""String_Node_Str""+ keysp);
  DboTableMeta meta=ormSession.find(DboTableMeta.class,virtualCf);
  if (meta == null) {
    throw new IllegalStateException(""String_Node_Str"" + virtualCf + ""String_Node_Str""+ ""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + meta.getRealColumnFamily() + ""String_Node_Str""+ meta.getRealVirtual()+ ""String_Node_Str"");
  createColFamilyInCassandra(meta);
}","private synchronized void createColFamilyImpl(String virtualCf,MetaLookup ormSession){
  if (lookupVirtCf(virtualCf) != null)   return;
  String keysp=keyspace.getKeyspaceName();
  log.info(""String_Node_Str"" + virtualCf + ""String_Node_Str""+ keysp);
  DboTableMeta meta=loadFromInMemoryOrDb(virtualCf,ormSession);
  log.info(""String_Node_Str"" + meta.getRealColumnFamily() + ""String_Node_Str""+ meta.getRealVirtual()+ ""String_Node_Str"");
  createColFamilyInCassandra(meta);
}",0.5092592592592593
97930,"public static Config getConfigForAllTests(){
  String clusterName=""String_Node_Str"";
  DbTypeEnum serverType=DbTypeEnum.IN_MEMORY;
  String seeds=""String_Node_Str"";
  return new Config(serverType,clusterName,seeds);
}","public static Config getConfigForAllTests(){
  String clusterName=""String_Node_Str"";
  DbTypeEnum serverType=DbTypeEnum.CASSANDRA;
  String seeds=""String_Node_Str"";
  return new Config(serverType,clusterName,seeds);
}",0.9631336405529954
97931,"public MetaField processManyToMany(MetaClassSingle<?> metaClass,DboTableMeta t,Field field){
  NoSqlOneToMany annotation=field.getAnnotation(NoSqlOneToMany.class);
  String colName=annotation.columnName();
  Class entityType=annotation.entityType();
  String keyFieldForMap=annotation.keyFieldForMap();
  return processToManyRelationship(metaClass,t,field,colName,entityType,keyFieldForMap);
}","public MetaField processManyToMany(MetaClassSingle<?> metaClass,DboTableMeta t,Field field){
  NoSqlManyToMany annotation=field.getAnnotation(NoSqlManyToMany.class);
  String colName=annotation.columnName();
  Class entityType=annotation.entityType();
  String keyFieldForMap=annotation.keyFieldForMap();
  return processToManyRelationship(metaClass,t,field,colName,entityType,keyFieldForMap);
}",0.9822335025380712
97932,"@SuppressWarnings(""String_Node_Str"") private void loadCache(){
  if (cachedRows != null && cachedRows.hasNext())   return;
 else   if (!theKeys.hasNext())   return;
  String colFamily=info.getColumnFamilyObj().getName();
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize && theKeys.hasNext()) {
    byte[] key=theKeys.next();
    RowHolder<Row> result=cache.fromCache(colFamily,key);
    if (result == null)     keysToLookup.add(key);
    results.add(result);
  }
  list.beforeFetchingNextBatch();
  ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
  ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
  RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
  OperationResult<Rows<byte[],byte[]>> result=execute(slice);
  Rows<byte[],byte[]> rows=result.getResult();
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=rows.iterator();
  lastRowCount=rows.size();
  list.afterFetchingNextBatch(rows.size());
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.iterator();
}","@SuppressWarnings(""String_Node_Str"") private void loadCache(){
  if (cachedRows != null && cachedRows.hasNext())   return;
 else   if (!theKeys.hasNext())   return;
  String colFamily=info.getColumnFamilyObj().getName();
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize && theKeys.hasNext()) {
    byte[] key=theKeys.next();
    RowHolder<Row> result=cache.fromCache(colFamily,key);
    if (result == null)     keysToLookup.add(key);
    results.add(result);
  }
  list.beforeFetchingNextBatch();
  ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
  ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
  RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
  OperationResult<Rows<byte[],byte[]>> result=execute(slice);
  Rows<byte[],byte[]> rows=result.getResult();
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=rows.iterator();
  list.afterFetchingNextBatch(rows.size());
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.iterator();
}",0.9932104752667312
97933,"public synchronized static NoSqlEntityManagerFactory createFactoryOnce(){
  if (factory == null) {
    String clusterName=""String_Node_Str"";
    DbTypeEnum serverType=DbTypeEnum.CASSANDRA;
    String seeds=""String_Node_Str"";
    createFactory(serverType,clusterName,seeds);
  }
  return factory;
}","public synchronized static NoSqlEntityManagerFactory createFactoryOnce(){
  if (factory == null) {
    String clusterName=""String_Node_Str"";
    DbTypeEnum serverType=DbTypeEnum.IN_MEMORY;
    String seeds=""String_Node_Str"";
    createFactory(serverType,clusterName,seeds);
  }
  return factory;
}",0.9730639730639732
97934,"@Override public com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> nextImpl(){
  loadCache();
  if (!cachedRows.hasNext())   return null;
  return new Holder<KeyValue<Row>>(cachedRows.next());
}","@Override public com.alvazan.orm.api.z8spi.iter.AbstractCursor.Holder<KeyValue<Row>> nextImpl(){
  loadCache();
  if (cachedRows == null || !cachedRows.hasNext())   return null;
  return new Holder<KeyValue<Row>>(cachedRows.next());
}",0.9506726457399104
97935,"@SuppressWarnings(""String_Node_Str"") private void loadCache(){
  if (cachedRows != null && cachedRows.hasNext())   return;
 else   if (lastRowCount >= batchSize)   return;
 else   if (!theKeys.hasNext())   return;
  String colFamily=info.getColumnFamilyObj().getName();
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize && theKeys.hasNext()) {
    byte[] key=theKeys.next();
    RowHolder<Row> result=cache.fromCache(colFamily,key);
    if (result == null)     keysToLookup.add(key);
    results.add(result);
  }
  list.beforeFetchingNextBatch();
  ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
  ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
  RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
  OperationResult<Rows<byte[],byte[]>> result=execute(slice);
  Rows<byte[],byte[]> rows=result.getResult();
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=rows.iterator();
  lastRowCount=rows.size();
  list.afterFetchingNextBatch(rows.size());
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.iterator();
}","@SuppressWarnings(""String_Node_Str"") private void loadCache(){
  if (cachedRows != null && cachedRows.hasNext())   return;
 else   if (!theKeys.hasNext())   return;
  String colFamily=info.getColumnFamilyObj().getName();
  List<RowHolder<Row>> results=new ArrayList<RowHolder<Row>>();
  List<byte[]> keysToLookup=new ArrayList<byte[]>();
  while (results.size() < batchSize && theKeys.hasNext()) {
    byte[] key=theKeys.next();
    RowHolder<Row> result=cache.fromCache(colFamily,key);
    if (result == null)     keysToLookup.add(key);
    results.add(result);
  }
  list.beforeFetchingNextBatch();
  ColumnFamily<byte[],byte[]> cf=info.getColumnFamilyObj();
  ColumnFamilyQuery<byte[],byte[]> q2=keyspace.prepareQuery(cf);
  RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keysToLookup);
  OperationResult<Rows<byte[],byte[]>> result=execute(slice);
  Rows<byte[],byte[]> rows=result.getResult();
  Iterator<com.netflix.astyanax.model.Row<byte[],byte[]>> resultingRows=rows.iterator();
  lastRowCount=rows.size();
  list.afterFetchingNextBatch(rows.size());
  Map<ByteArray,KeyValue<Row>> map=new HashMap<ByteArray,KeyValue<Row>>();
  while (resultingRows.hasNext()) {
    com.netflix.astyanax.model.Row<byte[],byte[]> row=resultingRows.next();
    KeyValue<Row> kv=new KeyValue<Row>();
    kv.setKey(row.getKey());
    if (!row.getColumns().isEmpty()) {
      Row r=rowProvider.get();
      r.setKey(row.getKey());
      CassandraSession.processColumns(row,r);
      kv.setValue(r);
    }
    ByteArray b=new ByteArray(row.getKey());
    map.put(b,kv);
  }
  List<KeyValue<Row>> finalRes=new ArrayList<KeyValue<Row>>();
  Iterator<byte[]> keyIter=keysToLookup.iterator();
  for (  RowHolder<Row> r : results) {
    if (r == null) {
      byte[] key=keyIter.next();
      ByteArray b=new ByteArray(key);
      KeyValue<Row> kv=map.get(b);
      finalRes.add(kv);
    }
 else {
      Row row=r.getValue();
      KeyValue<Row> kv=new KeyValue<Row>();
      kv.setKey(r.getKey());
      kv.setValue(row);
      finalRes.add(kv);
    }
  }
  cachedRows=finalRes.iterator();
}",0.9883361104498928
97936,"public CursorReturnsEmptyRows(Iterable<byte[]> keys){
  this.keysIterable=keys;
}","public CursorReturnsEmptyRows(Iterable<byte[]> keys){
  this.keysIterable=keys;
  beforeFirst();
}",0.905027932960894
97937,"/** 
 * Gets the Resource iterator for URL with Filter.
 * @param url
 * @param filter
 * @return
 * @throws IOException
 */
private ResourceIterator getResourceIterator(URL url2,Filter filter) throws IOException {
  URL url=url2;
  String urlString=url.toString();
  if (urlString.endsWith(""String_Node_Str"")) {
    urlString=urlString.substring(4);
    urlString=urlString.substring(0,urlString.length() - 2);
    url=new URL(urlString);
  }
  if (!urlString.endsWith(""String_Node_Str"")) {
    return new JarFileIterator(url.openStream(),filter);
  }
 else {
    if (!url.getProtocol().equals(""String_Node_Str"")) {
      throw new IOException(""String_Node_Str"" + url.getProtocol());
    }
    File f=new File(url.getPath());
    if (f.isDirectory()) {
      return new ClassFileIterator(f,filter);
    }
 else {
      return new JarFileIterator(url.openStream(),filter);
    }
  }
}","/** 
 * Gets the Resource iterator for URL with Filter.
 * @param url
 * @param filter
 * @return
 * @throws IOException
 */
private ResourceIterator getResourceIterator(URL resource,Filter filter) throws IOException {
  URL url=resource;
  String urlString=url.toString();
  if (urlString.endsWith(""String_Node_Str"")) {
    urlString=urlString.substring(4);
    urlString=urlString.substring(0,urlString.length() - 2);
    url=new URL(urlString);
    return new JarFileIterator(url.openStream(),filter);
  }
 else   if (url.getProtocol().equals(""String_Node_Str"")) {
    String path=url.getPath();
    String newPath=path.replace((CharSequence)""String_Node_Str"",""String_Node_Str"");
    File f=new File(newPath);
    Log.info(""String_Node_Str"" + f.getAbsolutePath());
    if (f.isDirectory()) {
      return new ClassFileIterator(f,filter);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + f.getAbsolutePath());
    }
  }
 else {
    throw new IOException(""String_Node_Str"" + resource.getProtocol());
  }
}",0.5849056603773585
97938,"private RowQuery createBasicRowQuery(byte[] rowKey,Info info1,ByteBufferRange range){
  ColumnFamily cf=info1.getColumnFamilyObj();
  Keyspace keyspace=columnFamilies.getKeyspace();
  ColumnFamilyQuery query=keyspace.prepareQuery(cf);
  RowQuery rowQuery=query.getKey(rowKey).autoPaginate(true).withColumnRange(range);
  return rowQuery;
}","private RowQuery createBasicRowQuery(byte[] rowKey,Info info1,ByteBufferRange range){
  ColumnFamily cf=info1.getColumnFamilyObj();
  Keyspace keyspace=columnFamilies.getKeyspace();
  ColumnFamilyQuery query1=keyspace.prepareQuery(cf);
  ColumnFamilyQuery query=query1.setConsistencyLevel(ConsistencyLevel.CL_QUORUM);
  RowQuery rowQuery=query.getKey(rowKey).autoPaginate(true).withColumnRange(range);
  return rowQuery;
}",0.8567674113009198
97939,"public void sendChangesImpl(List<Action> actions,NoSqlEntityManager mgr) throws ConnectionException {
  Keyspace keyspace=columnFamilies.getKeyspace();
  MutationBatch m=keyspace.prepareMutationBatch();
  for (  Action action : actions) {
    if (action instanceof Persist) {
      persist((Persist)action,mgr,m);
    }
 else     if (action instanceof Remove) {
      remove((Remove)action,m);
    }
 else     if (action instanceof PersistIndex) {
      persistIndex((PersistIndex)action,mgr,m);
    }
 else     if (action instanceof RemoveIndex) {
      removeIndex((RemoveIndex)action,m);
    }
  }
  long time=System.currentTimeMillis();
  m.execute();
  if (log.isInfoEnabled()) {
    long total=System.currentTimeMillis() - time;
    log.info(""String_Node_Str"" + total + ""String_Node_Str"");
  }
}","public void sendChangesImpl(List<Action> actions,NoSqlEntityManager mgr) throws ConnectionException {
  Keyspace keyspace=columnFamilies.getKeyspace();
  MutationBatch m1=keyspace.prepareMutationBatch();
  MutationBatch m=m1.setConsistencyLevel(ConsistencyLevel.CL_QUORUM);
  for (  Action action : actions) {
    if (action instanceof Persist) {
      persist((Persist)action,mgr,m);
    }
 else     if (action instanceof Remove) {
      remove((Remove)action,m);
    }
 else     if (action instanceof PersistIndex) {
      persistIndex((PersistIndex)action,mgr,m);
    }
 else     if (action instanceof RemoveIndex) {
      removeIndex((RemoveIndex)action,m);
    }
  }
  long time=System.currentTimeMillis();
  m.execute();
  if (log.isInfoEnabled()) {
    long total=System.currentTimeMillis() - time;
    log.info(""String_Node_Str"" + total + ""String_Node_Str"");
  }
}",0.957561267184698
97940,"private Iterable<KeyValue<Row>> findImpl2(String colFamily,Iterable<byte[]> keys) throws ConnectionException {
  Info info=columnFamilies.fetchColumnFamilyInfo(colFamily);
  if (info == null) {
    log.info(""String_Node_Str"" + colFamily);
    for (    byte[] k : keys) {
      log.trace(""String_Node_Str"");
    }
    return new IterableReturnsEmptyRows(keys);
  }
  ColumnFamily cf=info.getColumnFamilyObj();
  ColumnType type=info.getColumnType();
  if (type != ColumnType.ANY_EXCEPT_COMPOSITE) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  Keyspace keyspace=columnFamilies.getKeyspace();
  ColumnFamilyQuery<byte[],byte[]> query=keyspace.prepareQuery(cf);
  RowSliceQuery<byte[],byte[]> slice=query.getKeySlice(keys);
  long time=System.currentTimeMillis();
  OperationResult<Rows<byte[],byte[]>> result=slice.execute();
  if (log.isInfoEnabled()) {
    long total=System.currentTimeMillis() - time;
    log.info(""String_Node_Str"" + total + ""String_Node_Str"");
  }
  Rows rows=result.getResult();
  IterableResult r=new IterableResult(rowProvider,rows);
  return r;
}","private Iterable<KeyValue<Row>> findImpl2(String colFamily,Iterable<byte[]> keys) throws ConnectionException {
  Info info=columnFamilies.fetchColumnFamilyInfo(colFamily);
  if (info == null) {
    log.info(""String_Node_Str"" + colFamily);
    for (    byte[] k : keys) {
      log.trace(""String_Node_Str"");
    }
    return new IterableReturnsEmptyRows(keys);
  }
  ColumnFamily cf=info.getColumnFamilyObj();
  ColumnType type=info.getColumnType();
  if (type != ColumnType.ANY_EXCEPT_COMPOSITE) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  Keyspace keyspace=columnFamilies.getKeyspace();
  ColumnFamilyQuery<byte[],byte[]> query1=keyspace.prepareQuery(cf);
  ColumnFamilyQuery<byte[],byte[]> q2=query1.setConsistencyLevel(ConsistencyLevel.CL_QUORUM);
  RowSliceQuery<byte[],byte[]> slice=q2.getKeySlice(keys);
  long time=System.currentTimeMillis();
  OperationResult<Rows<byte[],byte[]>> result=slice.execute();
  if (log.isInfoEnabled()) {
    long total=System.currentTimeMillis() - time;
    log.info(""String_Node_Str"" + total + ""String_Node_Str"");
  }
  Rows rows=result.getResult();
  IterableResult r=new IterableResult(rowProvider,rows);
  return r;
}",0.943908851884312
97941,"public Info fetchColumnFamilyInfo(String colFamily){
  String cf=colFamily.toLowerCase();
  Info info=existingColumnFamilies2.get(cf);
  return info;
}","public Info fetchColumnFamilyInfo(String colFamily){
  String cf=colFamily.toLowerCase();
  Info info=existingColumnFamilies2.get(cf);
  if (info == null) {
    info=tryToLoadColumnFamily(colFamily);
  }
  return info;
}",0.7439353099730458
97942,"private void findExistingColumnFamilies(KeyspaceDefinition keySpaceMeta){
  List<ColumnFamilyDefinition> cfList=keySpaceMeta.getColumnFamilyList();
  for (  ColumnFamilyDefinition def : cfList) {
    String comparatorType=def.getComparatorType();
    ColumnType type=ColumnType.ANY_EXCEPT_COMPOSITE;
    if (formName(UTF8Type.class,BytesType.class).equals(comparatorType)) {
      type=ColumnType.COMPOSITE_STRINGPREFIX;
    }
 else     if (formName(IntegerType.class,BytesType.class).equals(comparatorType)) {
      type=ColumnType.COMPOSITE_INTEGERPREFIX;
    }
 else     if (formName(DecimalType.class,BytesType.class).equals(comparatorType)) {
      type=ColumnType.COMPOSITE_DECIMALPREFIX;
    }
    String keyValidationClass=def.getKeyValidationClass();
    StorageTypeEnum keyType=null;
    if (UTF8Type.class.getName().equals(keyValidationClass)) {
      keyType=StorageTypeEnum.STRING;
    }
 else     if (DecimalType.class.getName().equals(keyValidationClass)) {
      keyType=StorageTypeEnum.DECIMAL;
    }
 else     if (IntegerType.class.getName().equals(keyValidationClass)) {
      keyType=StorageTypeEnum.INTEGER;
    }
 else     if (BytesType.class.getName().equals(keyValidationClass)) {
      keyType=StorageTypeEnum.BYTES;
    }
    String colFamily=def.getName();
    Info info=createInfo(colFamily,type,keyType);
    String lowerCaseName=colFamily.toLowerCase();
    existingColumnFamilies2.put(lowerCaseName,info);
  }
}","private void findExistingColumnFamilies(KeyspaceDefinition keySpaceMeta){
  List<ColumnFamilyDefinition> cfList=keySpaceMeta.getColumnFamilyList();
  for (  ColumnFamilyDefinition def : cfList) {
    loadColumnFamily(def);
  }
}",0.2491017964071856
97943,"private synchronized void createColFamily(String colFamily,NoSqlEntityManager mgr){
  if (existingColumnFamilies2.get(colFamily.toLowerCase()) != null)   return;
  log.info(""String_Node_Str"" + colFamily + ""String_Node_Str"");
  DboTableMeta cf=dbMetaFromOrmOnly.getMeta(colFamily);
  if (cf == null) {
    cf=mgr.find(DboTableMeta.class,colFamily);
    log.info(""String_Node_Str"" + cf);
  }
  if (cf == null) {
    throw new IllegalStateException(""String_Node_Str"" + colFamily + ""String_Node_Str""+ ""String_Node_Str"");
  }
  ColumnFamilyDefinition def=cluster.makeColumnFamilyDefinition().setName(colFamily).setKeyspace(keyspace.getKeyspaceName());
  StorageTypeEnum rowKeyType=cf.getIdColumnMeta().getStorageType();
  StorageTypeEnum type=cf.getColNamePrefixType();
  def=addRowKeyValidation(cf,def);
  def=setColumnNameCompareType(cf,type,def);
  ColumnType colType=ColumnType.ANY_EXCEPT_COMPOSITE;
  if (type == StorageTypeEnum.STRING)   colType=ColumnType.COMPOSITE_STRINGPREFIX;
 else   if (type == StorageTypeEnum.INTEGER)   colType=ColumnType.COMPOSITE_INTEGERPREFIX;
 else   if (type == StorageTypeEnum.DECIMAL)   colType=ColumnType.COMPOSITE_DECIMALPREFIX;
  addColumnFamily(def);
  Info info=createInfo(colFamily,colType,rowKeyType);
  String cfName=colFamily.toLowerCase();
  existingColumnFamilies2.put(cfName,info);
}","private synchronized void createColFamily(String colFamily,NoSqlEntityManager mgr){
  try {
    createColFamilyImpl(colFamily,mgr);
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",e);
  }
}",0.1504251144538914
97944,"public JoinMeta fetchJoinMeta(JoinMeta rightSide){
  Set<ViewInfo> views1=this.getViews();
  Set<ViewInfo> views2=rightSide.getViews();
  for (  ViewInfo infoL : views1) {
    for (    ViewInfo infoR : views2) {
      JoinInfo joinInfo=infoL.findViewMatch(infoR);
      if (joinInfo != null) {
        Set<JoinInfo> set1=this.getJoinInfoSet();
        Set<JoinInfo> set2=rightSide.getJoinInfoSet();
        JoinMeta meta=new JoinMeta(joinInfo,JoinType.NONE,set1,set2);
        return meta;
      }
    }
  }
  for (  ViewInfo infoL : views1) {
    for (    ViewInfo infoR : views2) {
      JoinInfo joinInfo=infoL.getJoinInfo(infoR);
      if (joinInfo != null) {
        Set<JoinInfo> set1=this.getJoinInfoSet();
        Set<JoinInfo> set2=rightSide.getJoinInfoSet();
        JoinMeta meta=new JoinMeta(joinInfo,JoinType.NONE,set1,set2);
        return meta;
      }
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + views1 + ""String_Node_Str""+ views2+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","public JoinMeta fetchJoinMeta(JoinMeta rightSide){
  Set<ViewInfo> views1=this.getViews();
  Set<ViewInfo> views2=rightSide.getViews();
  for (  ViewInfo infoL : views1) {
    for (    ViewInfo infoR : views2) {
      JoinInfo joinInfo=infoL.findViewMatch(infoR);
      if (joinInfo != null) {
        Set<JoinInfo> set1=this.getJoinInfoSet();
        Set<JoinInfo> set2=rightSide.getJoinInfoSet();
        JoinMeta meta=new JoinMeta(joinInfo,JoinType.NONE,set1,set2);
        return meta;
      }
    }
  }
  for (  ViewInfo infoL : views1) {
    for (    ViewInfo infoR : views2) {
      JoinInfo joinInfo=infoL.getJoinInfo(infoR);
      if (joinInfo != null) {
        Set<JoinInfo> set1=this.getJoinInfoSet();
        Set<JoinInfo> set2=rightSide.getJoinInfoSet();
        JoinMeta meta=new JoinMeta(joinInfo,joinInfo.getJoinType(),set1,set2);
        return meta;
      }
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + views1 + ""String_Node_Str""+ views2+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.990990990990991
97945,"private Key createLeftKey(ExpressionNode node,DboColumnMeta info){
  byte[] data=retrieveValue(info,node.getRightChild());
  if (node.getType() == NoSqlLexer.LT)   return new Key(data,false);
 else   if (node.getType() == NoSqlLexer.LE)   return new Key(data,true);
 else   throw new RuntimeException(""String_Node_Str"");
}","private Key createLeftKey(ExpressionNode node,DboColumnMeta info){
  byte[] data=retrieveValue(info,node.getRightChild());
  if (node.getType() == NoSqlLexer.GT)   return new Key(data,false);
 else   if (node.getType() == NoSqlLexer.GE)   return new Key(data,true);
 else   throw new RuntimeException(""String_Node_Str"" + node.getType());
}",0.9682299546142208
97946,"private Key createRightKey(ExpressionNode node,DboColumnMeta info){
  byte[] data=retrieveValue(info,node.getRightChild());
  if (node.getType() == NoSqlLexer.GT)   return new Key(data,false);
 else   if (node.getType() == NoSqlLexer.GE)   return new Key(data,true);
 else   throw new RuntimeException(""String_Node_Str"");
}","private Key createRightKey(ExpressionNode node,DboColumnMeta info){
  byte[] data=retrieveValue(info,node.getRightChild());
  if (node.getType() == NoSqlLexer.LT)   return new Key(data,false);
 else   if (node.getType() == NoSqlLexer.LE)   return new Key(data,true);
 else   throw new RuntimeException(""String_Node_Str"");
}",0.9938080495356038
97947,"@Override public Collection<Column> columnSlice(Key from,Key to){
  NavigableMap<OurKey,IndexColumn> resultMap=columns;
  if (from != null) {
    OurKey fromKey=new OurKey(from.getKey(),new byte[0]);
    resultMap=columns.tailMap(fromKey,from.isInclusive());
  }
  if (to != null) {
    OurKey toKey=new OurKey(to.getKey(),null);
    resultMap=columns.headMap(toKey,to.isInclusive());
  }
  List<Column> results=new ArrayList<Column>();
  for (  IndexColumn c : resultMap.values()) {
    Column col=new Column();
    col.setName(c.getPrimaryKey());
    results.add(col);
  }
  return results;
}","@Override public Collection<Column> columnSlice(Key from,Key to){
  NavigableMap<OurKey,IndexColumn> resultMap=columns;
  if (from != null) {
    OurKey fromKey=new OurKey(from.getKey(),new byte[0]);
    resultMap=columns.tailMap(fromKey,from.isInclusive());
  }
  if (to != null) {
    OurKey toKey=new OurKey(to.getKey(),null);
    resultMap=resultMap.headMap(toKey,to.isInclusive());
  }
  List<Column> results=new ArrayList<Column>();
  for (  IndexColumn c : resultMap.values()) {
    Column col=new Column();
    col.setName(c.getPrimaryKey());
    results.add(col);
  }
  return results;
}",0.9865546218487397
97948,"@Override public List<Row> find(String colFamily,List<byte[]> rowKeys){
  List<Row> rows=new ArrayList<Row>();
  List<byte[]> rowKeysToFetch=new ArrayList<byte[]>();
  List<Integer> indexForRow=new ArrayList<Integer>();
  for (int i=0; i < rowKeys.size(); i++) {
    byte[] key=rowKeys.get(i);
    RowHolder<Row> result=fromCache(colFamily,key);
    if (result == null) {
      indexForRow.add(i);
      rowKeysToFetch.add(key);
      rows.add(null);
    }
 else {
      log.info(""String_Node_Str"");
      rows.add(result.getValue());
    }
  }
  List<Row> rowsFromDb=session.find(colFamily,rowKeysToFetch);
  for (int i=0; i < rowKeysToFetch.size(); i++) {
    Integer index=indexForRow.get(i);
    Row r=rowsFromDb.get(i);
    byte[] key=rowKeysToFetch.get(i);
    rows.set(index,r);
    cacheRow(colFamily,key,r);
  }
  return rows;
}","@Override public List<Row> find(String colFamily,List<byte[]> rowKeys){
  List<Row> rows=new ArrayList<Row>();
  List<byte[]> rowKeysToFetch=new ArrayList<byte[]>();
  List<Integer> indexForRow=new ArrayList<Integer>();
  for (int i=0; i < rowKeys.size(); i++) {
    byte[] key=rowKeys.get(i);
    RowHolder<Row> result=fromCache(colFamily,key);
    if (result == null) {
      indexForRow.add(i);
      rowKeysToFetch.add(key);
      rows.add(null);
    }
 else {
      log.info(""String_Node_Str"");
      rows.add(result.getValue());
    }
  }
  List<Row> rowsFromDb=new ArrayList<Row>();
  if (rowKeysToFetch.size() > 0)   rowsFromDb=session.find(colFamily,rowKeysToFetch);
  for (int i=0; i < rowKeysToFetch.size(); i++) {
    Integer index=indexForRow.get(i);
    Row r=rowsFromDb.get(i);
    byte[] key=rowKeysToFetch.get(i);
    rows.set(index,r);
    cacheRow(colFamily,key,r);
  }
  return rows;
}",0.8208955223880597
97949,"public void setRowKeyMeta(DboColumnMeta idMeta){
  this.idColumn.setOwner(this);
  this.idColumn=idMeta;
}","public void setRowKeyMeta(DboColumnMeta idMeta){
  this.idColumn=idMeta;
  this.idColumn.setOwner(this);
}",0.7735849056603774
97950,"@Test public void testDecimalColumnSlice() throws UnsupportedEncodingException {
  NoSqlSession session=mgr.getSession();
  String colFamily=""String_Node_Str"";
  DboDatabaseMeta meta=mgr.find(DboDatabaseMeta.class,DboDatabaseMeta.META_DB_ROWKEY);
  DboColumnMeta idMeta=new DboColumnMeta();
  idMeta.setup(""String_Node_Str"",null,String.class,false,null);
  mgr.put(idMeta);
  DboTableMeta tableMeta=new DboTableMeta();
  tableMeta.setColumnFamily(colFamily);
  tableMeta.setColNameType(double.class);
  tableMeta.setRowKeyMeta(idMeta);
  mgr.put(tableMeta);
  meta.addMetaClassDbo(tableMeta);
  mgr.put(meta);
  mgr.flush();
  byte[] rowKey=""String_Node_Str"".getBytes(""String_Node_Str"");
  List<Column> columns=new ArrayList<Column>();
  columns.add(new Column(toDecBytes(5000.5),new byte[0]));
  columns.add(new Column(toDecBytes(20.333),new byte[0]));
  columns.add(new Column(toDecBytes(200.1111111111111),new byte[0]));
  columns.add(new Column(toDecBytes(10.9999999999999999999999999),new byte[0]));
  columns.add(new Column(toDecBytes(60.5),new byte[0]));
  columns.add(new Column(toDecBytes(700),new byte[0]));
  columns.add(new Column(toDecBytes(500023432430.44),new byte[0]));
  columns.add(new Column(toDecBytes(550.32),new byte[0]));
  columns.add(new Column(toDecBytes(340),new byte[0]));
  columns.add(new Column(toDecBytes(40.5),new byte[0]));
  columns.add(new Column(toDecBytes(-40.8888888888888888),new byte[0]));
  columns.add(new Column(toDecBytes(-200.23),new byte[0]));
  columns.add(new Column(toDecBytes(-500),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  session.persist(colFamily,rowKey,columns);
  session.flush();
  Iterable<Column> results=session.columnRangeScan(colFamily,rowKey,toDecBytes(-250),toDecBytes(12),2);
  int counter=0;
  for (  Column col : results) {
    if (counter == 0) {
      byte[] data=col.getName();
      String hex=new String(Hex.encodeHex(data));
      Assert.assertEquals(-200.23,toDouble(col.getName()).doubleValue());
    }
    counter++;
  }
  Assert.assertEquals(5,counter);
}","@Test public void testDecimalColumnSlice() throws UnsupportedEncodingException {
  NoSqlSession session=mgr.getSession();
  String colFamily=""String_Node_Str"";
  DboDatabaseMeta meta=mgr.find(DboDatabaseMeta.class,DboDatabaseMeta.META_DB_ROWKEY);
  DboColumnMeta idMeta=new DboColumnMeta();
  idMeta.setup(""String_Node_Str"",null,String.class,false,null);
  DboTableMeta tableMeta=new DboTableMeta();
  tableMeta.setColumnFamily(colFamily);
  tableMeta.setColNameType(double.class);
  tableMeta.setRowKeyMeta(idMeta);
  mgr.put(idMeta);
  mgr.put(tableMeta);
  meta.addMetaClassDbo(tableMeta);
  mgr.put(meta);
  mgr.flush();
  byte[] rowKey=""String_Node_Str"".getBytes(""String_Node_Str"");
  List<Column> columns=new ArrayList<Column>();
  columns.add(new Column(toDecBytes(5000.5),new byte[0]));
  columns.add(new Column(toDecBytes(20.333),new byte[0]));
  columns.add(new Column(toDecBytes(200.1111111111111),new byte[0]));
  columns.add(new Column(toDecBytes(10.9999999999999999999999999),new byte[0]));
  columns.add(new Column(toDecBytes(60.5),new byte[0]));
  columns.add(new Column(toDecBytes(700),new byte[0]));
  columns.add(new Column(toDecBytes(500023432430.44),new byte[0]));
  columns.add(new Column(toDecBytes(550.32),new byte[0]));
  columns.add(new Column(toDecBytes(340),new byte[0]));
  columns.add(new Column(toDecBytes(40.5),new byte[0]));
  columns.add(new Column(toDecBytes(-40.8888888888888888),new byte[0]));
  columns.add(new Column(toDecBytes(-200.23),new byte[0]));
  columns.add(new Column(toDecBytes(-500),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toDecBytes(new BigDecimal(""String_Node_Str"")),new byte[0]));
  session.persist(colFamily,rowKey,columns);
  session.flush();
  Iterable<Column> results=session.columnRangeScan(colFamily,rowKey,toDecBytes(-250),toDecBytes(12),2);
  int counter=0;
  for (  Column col : results) {
    if (counter == 0) {
      byte[] data=col.getName();
      String hex=new String(Hex.encodeHex(data));
      Assert.assertEquals(-200.23,toDouble(col.getName()).doubleValue());
    }
    counter++;
  }
  Assert.assertEquals(5,counter);
}",0.9340706082518078
97951,"@Test public void testIntegerColumnSlice() throws UnsupportedEncodingException {
  NoSqlSession session=mgr.getSession();
  String colFamily=""String_Node_Str"";
  DboDatabaseMeta meta=mgr.find(DboDatabaseMeta.class,DboDatabaseMeta.META_DB_ROWKEY);
  DboColumnMeta idMeta=new DboColumnMeta();
  idMeta.setup(""String_Node_Str"",null,String.class,false,null);
  mgr.put(idMeta);
  DboTableMeta tableMeta=new DboTableMeta();
  tableMeta.setColumnFamily(colFamily);
  tableMeta.setColNameType(long.class);
  tableMeta.setRowKeyMeta(idMeta);
  mgr.put(tableMeta);
  meta.addMetaClassDbo(tableMeta);
  mgr.put(meta);
  mgr.flush();
  byte[] rowKey=""String_Node_Str"".getBytes(""String_Node_Str"");
  List<Column> columns=new ArrayList<Column>();
  columns.add(new Column(toIntBytes(500),new byte[0]));
  columns.add(new Column(toIntBytes(20),new byte[0]));
  columns.add(new Column(toIntBytes(200),new byte[0]));
  columns.add(new Column(toIntBytes(10),new byte[0]));
  columns.add(new Column(toIntBytes(60),new byte[0]));
  columns.add(new Column(toIntBytes(700),new byte[0]));
  columns.add(new Column(toIntBytes(500023432430L),new byte[0]));
  columns.add(new Column(toIntBytes(550),new byte[0]));
  columns.add(new Column(toIntBytes(340),new byte[0]));
  columns.add(new Column(toIntBytes(40),new byte[0]));
  columns.add(new Column(toIntBytes(-40),new byte[0]));
  columns.add(new Column(toIntBytes(-200),new byte[0]));
  columns.add(new Column(toIntBytes(-500),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  session.persist(colFamily,rowKey,columns);
  session.flush();
  Iterable<Column> results=session.columnRangeScan(colFamily,rowKey,toIntBytes(-250),toIntBytes(50),2);
  int counter=0;
  for (  Column col : results) {
    if (counter == 0)     Assert.assertEquals(-200L,toLong(col.getName()).longValue());
    counter++;
  }
  Assert.assertEquals(7,counter);
}","@Test public void testIntegerColumnSlice() throws UnsupportedEncodingException {
  NoSqlSession session=mgr.getSession();
  String colFamily=""String_Node_Str"";
  DboDatabaseMeta meta=mgr.find(DboDatabaseMeta.class,DboDatabaseMeta.META_DB_ROWKEY);
  DboColumnMeta idMeta=new DboColumnMeta();
  idMeta.setup(""String_Node_Str"",null,String.class,false,null);
  DboTableMeta tableMeta=new DboTableMeta();
  tableMeta.setColumnFamily(colFamily);
  tableMeta.setColNameType(long.class);
  tableMeta.setRowKeyMeta(idMeta);
  mgr.put(idMeta);
  mgr.put(tableMeta);
  meta.addMetaClassDbo(tableMeta);
  mgr.put(meta);
  mgr.flush();
  byte[] rowKey=""String_Node_Str"".getBytes(""String_Node_Str"");
  List<Column> columns=new ArrayList<Column>();
  columns.add(new Column(toIntBytes(500),new byte[0]));
  columns.add(new Column(toIntBytes(20),new byte[0]));
  columns.add(new Column(toIntBytes(200),new byte[0]));
  columns.add(new Column(toIntBytes(10),new byte[0]));
  columns.add(new Column(toIntBytes(60),new byte[0]));
  columns.add(new Column(toIntBytes(700),new byte[0]));
  columns.add(new Column(toIntBytes(500023432430L),new byte[0]));
  columns.add(new Column(toIntBytes(550),new byte[0]));
  columns.add(new Column(toIntBytes(340),new byte[0]));
  columns.add(new Column(toIntBytes(40),new byte[0]));
  columns.add(new Column(toIntBytes(-40),new byte[0]));
  columns.add(new Column(toIntBytes(-200),new byte[0]));
  columns.add(new Column(toIntBytes(-500),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  columns.add(new Column(toIntBytes(new BigInteger(""String_Node_Str"")),new byte[0]));
  session.persist(colFamily,rowKey,columns);
  session.flush();
  Iterable<Column> results=session.columnRangeScan(colFamily,rowKey,toIntBytes(-250),toIntBytes(50),2);
  int counter=0;
  for (  Column col : results) {
    if (counter == 0)     Assert.assertEquals(-200L,toLong(col.getName()).longValue());
    counter++;
  }
  Assert.assertEquals(7,counter);
}",0.9296228150873964
97952,"public Object fetchId(T entity){
  return ReflectionUtil.fetchFieldValue(entity,idField.getField());
}","public Object fetchId(T entity){
  if (entity == null)   return null;
  return ReflectionUtil.fetchFieldValue(entity,idField.getField());
}",0.8464730290456431
97953,"@SuppressWarnings(""String_Node_Str"") public void setup(IdInfo info,Field field2,String columnName,String indexPrefix){
  this.method=info.getIdMethod();
  this.method.setAccessible(true);
  this.useGenerator=info.isUseGenerator();
  this.generator=info.getGen();
  this.converter=info.getConverter();
  this.metaClass=info.getMetaClass();
  super.setup(field2,columnName,null,field.getType(),false,indexPrefix);
}","@SuppressWarnings(""String_Node_Str"") public void setup(IdInfo info,Field field,String columnName,String indexPrefix){
  this.method=info.getIdMethod();
  this.method.setAccessible(true);
  this.useGenerator=info.isUseGenerator();
  this.generator=info.getGen();
  this.converter=info.getConverter();
  this.metaClass=info.getMetaClass();
  super.setup(field,columnName,null,field.getType(),false,indexPrefix);
}",0.9975728155339806
97954,"/** 
 * @param self - The proxy object(if you call any method on self, it will result in calling invoke methodAND that includes a simple toString like if you did log.info(""proxy=""+self);
 * @param superClassMethod - The method that is on the superclass like Account.java
 * @param subclassProxyMethod - The method that is on the proxy like Account_$$_javassist_0
 */
@SuppressWarnings(""String_Node_Str"") @Override public Object invoke(Object selfArg,Method superClassMethod,Method subclassProxyMethod,Object[] args) throws Throwable {
  T self=(T)selfArg;
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + superClassMethod.getName() + ""String_Node_Str""+ superClassMethod.getDeclaringClass());
    log.trace(""String_Node_Str"" + subclassProxyMethod.getName() + ""String_Node_Str""+ subclassProxyMethod.getDeclaringClass());
  }
  if (idMethod.equals(superClassMethod))   return entityId;
 else   if (""String_Node_Str"".equals(subclassProxyMethod.getName())) {
    cacheIndexedValues(self);
    isInitialized=true;
    return null;
  }
 else   if (""String_Node_Str"".equals(subclassProxyMethod.getName())) {
    return getOriginalValues();
  }
  if (!isInitialized) {
    if (cacheLoadCallback != null) {
      cacheLoadCallback.loadCacheIfNeeded();
    }
 else {
      fillInThisOneInstance(self);
    }
    isInitialized=true;
  }
  return subclassProxyMethod.invoke(self,args);
}","/** 
 * @param self - The proxy object(if you call any method on self, it will result in calling invoke methodAND that includes a simple toString like if you did log.info(""proxy=""+self);
 * @param superClassMethod - The method that is on the superclass like Account.java
 * @param subclassProxyMethod - The method that is on the proxy like Account_$$_javassist_0
 */
@SuppressWarnings(""String_Node_Str"") @Override public Object invoke(Object selfArg,Method superClassMethod,Method subclassProxyMethod,Object[] args) throws Throwable {
  T self=(T)selfArg;
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + superClassMethod.getName() + ""String_Node_Str""+ superClassMethod.getDeclaringClass());
    log.trace(""String_Node_Str"" + subclassProxyMethod.getName() + ""String_Node_Str""+ subclassProxyMethod.getDeclaringClass());
  }
  if (idMethod.equals(superClassMethod))   return entityId;
 else   if (""String_Node_Str"".equals(superClassMethod.getName())) {
    cacheIndexedValues(self);
    isInitialized=true;
    return null;
  }
 else   if (""String_Node_Str"".equals(superClassMethod.getName())) {
    return getOriginalValues();
  }
  if (!isInitialized) {
    if (cacheLoadCallback != null) {
      cacheLoadCallback.loadCacheIfNeeded();
    }
 else {
      fillInThisOneInstance(self);
    }
    isInitialized=true;
  }
  return subclassProxyMethod.invoke(self,args);
}",0.6919191919191919
97955,"@Test public void testBasicChangeToIndex(){
  User user=new User();
  user.setName(""String_Node_Str"");
  user.setLastName(""String_Node_Str"");
  mgr.put(user);
  mgr.flush();
  User result=User.findByName(mgr,user.getName());
  Assert.assertEquals(user.getName(),result.getName());
  result.setName(""String_Node_Str"");
  mgr.put(result);
  User newResult=User.findByName(mgr,user.getName());
  Assert.assertNull(newResult);
  User newerResult=User.findByName(mgr,result.getName());
  Assert.assertEquals(result.getName(),newerResult.getName());
}","@Test public void testBasicChangeToIndex(){
  User user=new User();
  user.setName(""String_Node_Str"");
  user.setLastName(""String_Node_Str"");
  mgr.put(user);
  mgr.flush();
  User result=User.findByName(mgr,user.getName());
  Assert.assertEquals(user.getName(),result.getName());
  result.setName(""String_Node_Str"");
  mgr.put(result);
  mgr.flush();
  User newResult=User.findByName(mgr,user.getName());
  Assert.assertNull(newResult);
  User newerResult=User.findByName(mgr,result.getName());
  Assert.assertEquals(result.getName(),newerResult.getName());
}",0.986425339366516
97956,"private Object fetchFinalId(Object entity){
  Object id=ReflectionUtil.fetchFieldValue(entity,field);
  if (!useGenerator) {
    if (id == null)     throw new IllegalArgumentException(""String_Node_Str"" + entity);
    return id;
  }
 else   if (id != null)   return id;
  Object newId=generator.generateNewKey(entity);
  ReflectionUtil.putFieldValue(entity,field,newId);
  return newId;
}","private Object fetchFinalId(Object idInEntity,Object entity){
  Object id=idInEntity;
  if (!useGenerator) {
    if (id == null)     throw new IllegalArgumentException(""String_Node_Str"" + entity);
    return id;
  }
 else   if (id != null)   return id;
  Object newId=generator.generateNewKey(entity);
  ReflectionUtil.putFieldValue(entity,field,newId);
  return newId;
}",0.9050131926121372
97957,"public void translateFromRow(Row row,Object entity){
  byte[] rowKey=row.getKey();
  Object value=convertIdFromNoSql(rowKey);
  ReflectionUtil.putFieldValue(entity,field,value);
}","public void translateFromRow(Row row,Object entity){
  byte[] rowKey=row.getKey();
  Object value=converter.convertFromNoSql(rowKey);
  ReflectionUtil.putFieldValue(entity,field,value);
}",0.9672131147540984
97958,"public void translateToRow(Object entity,RowToPersist row){
  Object value=ReflectionUtil.fetchFieldValue(entity,field);
  Object id=fetchFinalId(value);
  byte[] byteVal=convertIdToNoSql(id);
  row.setKey(byteVal);
}","public void translateToRow(Object entity,RowToPersist row){
  Object idInEntity=ReflectionUtil.fetchFieldValue(entity,field);
  Object id=fetchFinalId(idInEntity,entity);
  byte[] byteVal=converter.convertToNoSql(id);
  row.setKey(byteVal);
}",0.8932461873638344
97959,"public void translateToColumn(Object entity,Column col){
  Object value=ReflectionUtil.fetchFieldValue(entity,field);
  byte[] byteVal=classMeta.convertIdToNoSql(value);
  col.setName(columnName);
  col.setValue(byteVal);
}","public void translateToColumn(Object entity,Column col){
  Object value=ReflectionUtil.fetchFieldValue(entity,field);
  byte[] byteVal=classMeta.convertProxyToId(value);
  col.setName(columnName);
  col.setValue(byteVal);
}",0.8430493273542601
97960,"public void translateFromColumn(Map<String,Column> columns,Object entity){
  Column column=columns.get(columnName);
  Object value=classMeta.convertIdFromNoSql(column.getValue());
  ReflectionUtil.putFieldValue(entity,field,value);
}","public void translateFromColumn(Map<String,Column> columns,Object entity){
  Column column=columns.get(columnName);
  Object proxy=classMeta.convertIdToProxy(column.getValue());
  ReflectionUtil.putFieldValue(entity,field,proxy);
}",0.6120689655172413
97961,"@Override public void close(StorageChannel channel){
  if (!views.remove(channel) && channel != indexChannel) {
    throw new IllegalStateException();
  }
  if (views.isEmpty()) {
    System.err.println(""String_Node_Str"");
  }
}","@Override public void close(StorageChannel channel){
  if (!views.remove(channel) && channel != indexChannel) {
    throw new IllegalStateException();
  }
}",0.8125
97962,"public void close(){
  if (!isOpen) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  try {
    lock();
    for (    Node n : nodes) {
      n.closeConnection();
    }
    cache.close();
    closeResources();
    TransientField.deregisterPm(this);
    isOpen=false;
  }
  finally {
    unlock();
  }
  LOGGER.info(""String_Node_Str"",System.identityHashCode(this));
}","public void close(){
  try {
    lock();
    if (!isOpen) {
      throw DBLogger.newUser(""String_Node_Str"");
    }
    for (    Node n : nodes) {
      n.closeConnection();
    }
    cache.close();
    closeResources();
    TransientField.deregisterPm(this);
    isOpen=false;
  }
  finally {
    unlock();
  }
  LOGGER.info(""String_Node_Str"",System.identityHashCode(this));
}",0.935656836461126
97963,"/** 
 * Read objects. This should never be necessary. TODO add warning? TODO Only required for queries without index, which is worth a warning anyway. SEE readAllObjects()!
 * @param clsPx ClassProxy
 * @param subClasses whether to include subclasses
 */
@Override public CloseableIterator<ZooHandleImpl> oidIterator(ZooClassProxy clsPx,boolean subClasses){
  SchemaIndexEntry se=schemaIndex.getSchema(clsPx.getSchemaId());
  if (se == null) {
    throw new IllegalStateException(""String_Node_Str"" + clsPx);
  }
  ZooHandleIteratorAdapter it=new ZooHandleIteratorAdapter(se.getObjectIndexIterator(),objectReader,cache);
  return it;
}","/** 
 * Read objects. Only required for queries without index, which is worth a warning anyway. SEE readAllObjects()!
 * @param clsPx ClassProxy
 * @param subClasses whether to include subclasses
 */
@Override public CloseableIterator<ZooHandleImpl> oidIterator(ZooClassProxy clsPx,boolean subClasses){
  SchemaIndexEntry se=schemaIndex.getSchema(clsPx.getSchemaId());
  if (se == null) {
    throw new IllegalStateException(""String_Node_Str"" + clsPx);
  }
  return new ZooHandleIteratorAdapter(se.getObjectIndexIterator(),objectReader,cache);
}",0.9126378286683632
97964,"/** 
 * Read objects. This should never be necessary. TODO add warning? TODO Only required for queries without index, which is worth a warning anyway. SEE oidIterator()!
 * @param schemaId Schema ID
 * @param loadFromCache Whether to load data from cache, if possible
 */
@Override public CloseableIterator<ZooPC> readAllObjects(long schemaId,boolean loadFromCache){
  SchemaIndexEntry se=schemaIndex.getSchema(schemaId);
  if (se == null) {
    throw DBLogger.newUser(""String_Node_Str"" + schemaId);
  }
  return new ObjectPosIterator(se.getObjectIndexIterator(),cache,objectReader,loadFromCache);
}","/** 
 * Read objects. Only required for queries without index, which is worth a warning anyway. SEE oidIterator()!
 * @param schemaId Schema ID
 * @param loadFromCache Whether to load data from cache, if possible
 */
@Override public CloseableIterator<ZooPC> readAllObjects(long schemaId,boolean loadFromCache){
  SchemaIndexEntry se=schemaIndex.getSchema(schemaId);
  if (se == null) {
    throw DBLogger.newUser(""String_Node_Str"" + schemaId);
  }
  return new ObjectPosIterator(se.getObjectIndexIterator(),cache,objectReader,loadFromCache);
}",0.9518810148731408
97965,"@Override public OptimisticTransactionResult checkTxConsistency(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,true);
  if (ovr.hasFailed()) {
    return ovr;
  }
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  return ovr;
}","@Override public OptimisticTransactionResult checkTxConsistency(ArrayList<TxObjInfo> updates){
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,true);
  if (ovr.hasFailed()) {
    return ovr;
  }
  return ovr;
}",0.5572519083969466
97966,"/** 
 * @return List of all schemata in the database. These are loaded when the database is opened.
 */
@Override public Collection<ZooClassDef> readSchemaAll(){
  Collection<ZooClassDef> all=schemaIndex.readSchemaAll(this,node);
  if (all.isEmpty()) {
    ZooClassDef zpcDef=ZooClassDef.bootstrapZooPCImpl();
    ZooClassDef meta=ZooClassDef.bootstrapZooClassDef();
    schemaIndex.defineSchema(zpcDef);
    schemaIndex.defineSchema(meta);
    all=new ArrayList<ZooClassDef>();
    all.add(zpcDef);
    all.add(meta);
  }
  txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
  txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
  return all;
}","/** 
 * @return List of all schemata in the database. These are loaded when the database is opened.
 */
@Override public Collection<ZooClassDef> readSchemaAll(){
  Collection<ZooClassDef> all=schemaIndex.readSchemaAll(this,node);
  if (all.isEmpty()) {
    ZooClassDef zpcDef=ZooClassDef.bootstrapZooPCImpl();
    ZooClassDef meta=ZooClassDef.bootstrapZooClassDef();
    schemaIndex.defineSchema(zpcDef);
    schemaIndex.defineSchema(meta);
    all=new ArrayList<>();
    all.add(zpcDef);
    all.add(meta);
  }
  txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
  txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
  return all;
}",0.9918938835666912
97967,"/** 
 * WARNING: float/double values need to be converted with BitTools before used on indices. 
 */
@Override public CloseableIterator<ZooPC> readObjectFromIndex(ZooFieldDef field,long minValue,long maxValue,boolean loadFromCache){
  SchemaIndexEntry se=schemaIndex.getSchema(field.getDeclaringType());
  LongLongIndex fieldInd=(LongLongIndex)se.getIndex(field);
  LLEntryIterator iter=fieldInd.iterator(minValue,maxValue);
  return new ObjectIterator(iter,cache,this,objectReader,loadFromCache);
}","/** 
 * WARNING: float/double values need to be converted with BitTools before used on indices. 
 */
@Override public CloseableIterator<ZooPC> readObjectFromIndex(ZooFieldDef field,long minValue,long maxValue,boolean loadFromCache){
  SchemaIndexEntry se=schemaIndex.getSchema(field.getDeclaringType());
  LongLongIndex fieldInd=se.getIndex(field);
  LLEntryIterator iter=fieldInd.iterator(minValue,maxValue);
  return new ObjectIterator(iter,cache,this,objectReader,loadFromCache);
}",0.9847405900305188
97968,"@Override public long[] allocateOids(int oidAllocSize){
  long[] ret=oidIndex.allocateOids(oidAllocSize);
  return ret;
}","@Override public long[] allocateOids(int oidAllocSize){
  return oidIndex.allocateOids(oidAllocSize);
}",0.8839285714285714
97969,"@Deprecated public static void allowReadConcurrency(boolean allowReadConcurrency){
  System.err.println(""String_Node_Str"");
  ALLOW_READ_CONCURRENCY=allowReadConcurrency;
}","@Deprecated public static void allowReadConcurrency(boolean allowReadConcurrency){
  ALLOW_READ_CONCURRENCY=allowReadConcurrency;
}",0.8646864686468647
97970,"/** 
 * Defines an index and populates it. All objects are put into the cache. This is not  necessarily useful, but it is a one-off operation. Otherwise we would need a special purpose implementation of the deserializer, which would have the need for a cache removed.
 */
@Override public void defineIndex(ZooClassDef def,ZooFieldDef field,boolean isUnique){
  SchemaIndexEntry se=schemaIndex.getSchema(def);
  LongLongIndex fieldInd=(LongLongIndex)se.defineIndex(field,isUnique);
  PagedPosIndex ind=se.getObjectIndexLatestSchemaVersion();
  PagedPosIndex.ObjectPosIterator iter=ind.iteratorObjects();
  DataDeSerializerNoClass dds=new DataDeSerializerNoClass(fileInAP);
  if (field.isPrimitiveType()) {
    while (iter.hasNext()) {
      long pos=iter.nextPos();
      dds.seekPos(pos);
      long key=dds.getAttrAsLong(def,field);
      if (isUnique) {
        if (!fieldInd.insertLongIfNotSet(key,dds.getLastOid())) {
          throw DBLogger.newUser(""String_Node_Str"" + Util.oidToString(dds.getLastOid()) + ""String_Node_Str""+ key);
        }
      }
 else {
        fieldInd.insertLong(key,dds.getLastOid());
      }
    }
  }
 else {
    while (iter.hasNext()) {
      long pos=iter.nextPos();
      dds.seekPos(pos);
      long key=dds.getAttrAsLongObjectNotNull(def,field);
      fieldInd.insertLong(key,dds.getLastOid());
    }
  }
  iter.close();
}","/** 
 * Defines an index and populates it. All objects are put into the cache. This is not  necessarily useful, but it is a one-off operation. Otherwise we would need a special purpose implementation of the deserializer, which would have the need for a cache removed.
 */
@Override public void defineIndex(ZooClassDef def,ZooFieldDef field,boolean isUnique){
  SchemaIndexEntry se=schemaIndex.getSchema(def);
  LongLongIndex fieldInd=se.defineIndex(field,isUnique);
  PagedPosIndex ind=se.getObjectIndexLatestSchemaVersion();
  PagedPosIndex.ObjectPosIterator iter=ind.iteratorObjects();
  DataDeSerializerNoClass dds=new DataDeSerializerNoClass(fileInAP);
  if (field.isPrimitiveType()) {
    while (iter.hasNext()) {
      long pos=iter.nextPos();
      dds.seekPos(pos);
      long key=dds.getAttrAsLong(def,field);
      if (isUnique) {
        if (!fieldInd.insertLongIfNotSet(key,dds.getLastOid())) {
          throw DBLogger.newUser(""String_Node_Str"" + Util.oidToString(dds.getLastOid()) + ""String_Node_Str""+ key);
        }
      }
 else {
        fieldInd.insertLong(key,dds.getLastOid());
      }
    }
  }
 else {
    while (iter.hasNext()) {
      long pos=iter.nextPos();
      dds.seekPos(pos);
      long key=dds.getAttrAsLongObjectNotNull(def,field);
      fieldInd.insertLong(key,dds.getLastOid());
    }
  }
  iter.close();
}",0.9944465012958164
97971,"@Override public OptimisticTransactionResult beginCommit(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.startWriting(txId);
  sm.startWriting(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}","@Override public OptimisticTransactionResult beginCommit(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.startWriting(txId);
  sm.startWriting(txId);
  return ovr;
}",0.965896589658966
97972,"public static DiskAccessOneFile getSession(Node node,AbstractCache cache){
  String dbPath=node.getDbPath();
  LOGGER.info(""String_Node_Str"",dbPath);
  Path path=FileSystems.getDefault().getPath(dbPath);
  SessionManager sm=null;
synchronized (sessions) {
    try {
      for (      SessionManager smi : sessions) {
        if (Files.isSameFile(smi.getPath(),path)) {
          sm=smi;
          break;
        }
      }
    }
 catch (    IOException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
    }
    if (sm == null) {
      sm=new SessionManager(path);
      sessions.add(sm);
    }
 else {
      MULTIPLE_SESSIONS_ARE_OPEN=true;
      if (FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ) {
        throw DBLogger.newFatal(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  return sm.createSession(node,cache);
}","public static DiskAccessOneFile getSession(Node node,AbstractCache cache){
  String dbPath=node.getDbPath();
  LOGGER.info(""String_Node_Str"",dbPath);
  Path path=FileSystems.getDefault().getPath(dbPath);
  SessionManager sm=null;
synchronized (sessions) {
    try {
      for (      SessionManager smi : sessions) {
        if (Files.isSameFile(smi.getPath(),path)) {
          sm=smi;
          break;
        }
      }
    }
 catch (    IOException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
    }
    if (sm == null) {
      sm=new SessionManager(path);
      sessions.add(sm);
    }
 else {
      MULTIPLE_SESSIONS_ARE_OPEN=true;
      if (FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ) {
        throw DBLogger.newFatal(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    return sm.createSession(node,cache);
  }
}",0.9521531100478468
97973,"void startWriting(long txId){
}","void startWriting(long txId){
  fsm.notifyBegin(txId);
}",0.7126436781609196
97974,"@Override public final void close(){
  flush();
  root.close(this);
}","@Override public final void close(){
  if (isClosed) {
    DBLogger.LOGGER.warn(""String_Node_Str"");
    return;
  }
  isClosed=true;
  flush();
  root.close(this);
}",0.5897435897435898
97975,"public void writeLock(T key){
  try {
    wSemaphore.acquire();
    if (currentWriterKey != NO_KEY) {
      throw new IllegalStateException();
    }
    rSemaphore.acquire(MAX_READERS);
    rSemaphore.release(MAX_READERS);
    currentWriterKey=key;
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public void writeLock(T key){
  try {
    wSemaphore.acquire();
    if (currentWriterKey != NO_KEY) {
      throw new IllegalStateException();
    }
    rSemaphore.acquire(MAX_READERS);
    rSemaphore.release(MAX_READERS);
    currentWriterKey=key;
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new RuntimeException(e);
  }
}",0.9426934097421203
97976,"public void readLock(T key){
  try {
    wSemaphore.acquire();
    rSemaphore.acquire();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
 finally {
    wSemaphore.release();
  }
}","public void readLock(T key){
  try {
    wSemaphore.acquire();
    rSemaphore.acquire();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new RuntimeException(e);
  }
 finally {
    wSemaphore.release();
  }
}",0.9130434782608696
97977,"public Session(SessionParentCallback parentSession,String dbPath,SessionConfig config){
  if (dbPath == null || ""String_Node_Str"".equals(dbPath)) {
    throw DBLogger.newUser(""String_Node_Str"" + ""String_Node_Str"");
  }
  dbPath=ZooHelper.getDataStoreManager().getDbPath(dbPath);
  this.parentSession=parentSession;
  this.config=config;
  this.primary=ZooFactory.get().createNode(dbPath,this);
  this.cache=new ClientSessionCache(this);
  this.schemaManager=new SchemaManager(cache,config.getAutoCreateSchema());
  this.nodes.add(primary);
  this.cache.addNode(primary);
  this.primary.connect();
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"",System.identityHashCode(this));
  }
}","public Session(SessionParentCallback parentSession,String dbPath,SessionConfig config){
  if (dbPath == null || ""String_Node_Str"".equals(dbPath)) {
    throw DBLogger.newUser(""String_Node_Str"" + ""String_Node_Str"");
  }
  dbPath=ZooHelper.getDataStoreManager().getDbPath(dbPath);
  this.parentSession=parentSession;
  this.config=config;
  this.primary=ZooFactory.get().createNode(dbPath,this);
  this.cache=new ClientSessionCache(this);
  this.schemaManager=new SchemaManager(cache,config.getAutoCreateSchema());
  this.nodes.add(primary);
  this.cache.addNode(primary);
  this.primary.connect();
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"",System.identityHashCode(this));
  }
  unlock();
}",0.9915014164305948
97978,"public void enableLocking(boolean enable){
  isLockingEnabled=enable;
}","public void enableLocking(boolean enable){
  isLockingEnabled=enable;
  if (!enable && lock.isHeldByCurrentThread()) {
    lock.unlock();
  }
}",0.6635514018691588
97979,"@Override public Iterator<E> iterator(){
  try {
    lock.lock();
    boolean failOnClosedQuery=session.getConfig().getFailOnClosedQueries();
    if (!session.isActive() && !session.getConfig().getNonTransactionalRead()) {
      if (failOnClosedQuery) {
        session.checkOpen();
        session.checkActiveRead();
      }
 else {
        return new ClosableIteratorWrapper<>(failOnClosedQuery);
      }
    }
    ClosableIteratorWrapper<E> iter=new ClosableIteratorWrapper<>(c.iterator(),session,failOnClosedQuery);
    return new SynchronizedROIteratorC<E>(iter,lock,minIncl,maxExcl);
  }
  finally {
    lock.unlock();
  }
}","@Override public Iterator<E> iterator(){
  try {
    lock.lock();
    boolean failOnClosedQuery=session.getConfig().getFailOnClosedQueries();
    if (!session.isActive() && !session.getConfig().getNonTransactionalRead()) {
      if (failOnClosedQuery) {
        session.checkOpen();
        session.checkActiveRead();
      }
 else {
        return new ClosableIteratorWrapper<>(failOnClosedQuery);
      }
    }
    ClosableIteratorWrapper<E> iter=new ClosableIteratorWrapper<>(c.iterator(),session,failOnClosedQuery);
    return new SynchronizedROIteratorC<>(iter,lock,minIncl,maxExcl);
  }
  finally {
    lock.unlock();
  }
}",0.999205718824464
97980,"/** 
 * @param queryTree This is a sub-query that does not contain OR operands.
 * @param maxMap2 
 * @param minMap2 
 * @return QueryAdvise
 */
private QueryAdvice determineIndexToUseSub(QueryTreeNode queryTree,IdentityHashMap<ZooFieldDef,Long> minMap,IdentityHashMap<ZooFieldDef,Long> maxMap){
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    if (!term.isRhsFixed() || term.isLhsFunction()) {
      if (term.isLhsFunction()) {
        determineIndexToUseSubForQueryFunctions(minMap,maxMap,term.getLhsFunction());
      }
      continue;
    }
    ZooFieldDef f=term.getLhsFieldDef();
    if (f == null || !f.isIndexed()) {
      continue;
    }
    Long minVal=minMap.get(f);
    if (minVal == null) {
      minMap.put(f,f.getMinValue());
      maxMap.put(f,f.getMaxValue());
    }
    Object termVal=term.getValue(null);
    Long value;
switch (f.getJdoType()) {
case PRIMITIVE:
switch (f.getPrimitiveType()) {
case BOOLEAN:
        continue;
case DOUBLE:
      value=BitTools.toSortableLong((termVal instanceof Double ? (double)termVal : (double)(float)termVal));
    break;
case FLOAT:
  value=BitTools.toSortableLong((termVal instanceof Float ? (float)termVal : (float)(double)termVal));
break;
case CHAR:
value=(long)((Character)termVal).charValue();
case BYTE:
case INT:
case LONG:
case SHORT:
value=((Number)termVal).longValue();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + f.getPrimitiveType());
}
break;
case STRING:
value=BitTools.toSortableLong(termVal == QueryTerm.NULL ? null : (String)termVal);
break;
case REFERENCE:
value=(termVal == QueryTerm.NULL ? BitTools.NULL : ((ZooPC)termVal).jdoZooGetOid());
break;
case DATE:
value=(termVal == QueryTerm.NULL ? 0 : ((Date)termVal).getTime());
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + f.getJdoType());
}
switch (term.getOp()) {
case EQ:
{
minMap.put(f,value);
maxMap.put(f,value);
break;
}
case L:
if (value < maxMap.get(f)) {
maxMap.put(f,value - 1);
}
break;
case LE:
if (value < maxMap.get(f)) {
maxMap.put(f,value);
}
break;
case A:
if (value > minMap.get(f)) {
minMap.put(f,value + 1);
}
break;
case AE:
if (value > minMap.get(f)) {
minMap.put(f,value);
}
break;
case NE:
case STR_matches:
case STR_contains_NON_JDO:
case STR_endsWith:
break;
case STR_startsWith:
setKeysForStringStartsWith((String)term.getValue(null),f,minMap,maxMap);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + term.getOp());
}
}
return createQueryAdvice(minMap,maxMap,queryTree);
}","/** 
 * @param queryTree This is a sub-query that does not contain OR operands.
 * @param maxMap2 
 * @param minMap2 
 * @return QueryAdvise
 */
private QueryAdvice determineIndexToUseSub(QueryTreeNode queryTree,IdentityHashMap<ZooFieldDef,Long> minMap,IdentityHashMap<ZooFieldDef,Long> maxMap){
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    if (!term.isRhsFixed() || term.isLhsFunction()) {
      if (term.isLhsFunction()) {
        determineIndexToUseSubForQueryFunctions(minMap,maxMap,term.getLhsFunction());
      }
      continue;
    }
    ZooFieldDef f=term.getLhsFieldDef();
    if (f == null || !f.isIndexed()) {
      continue;
    }
    Long minVal=minMap.get(f);
    if (minVal == null) {
      minMap.put(f,f.getMinValue());
      maxMap.put(f,f.getMaxValue());
    }
    Object termVal=term.getValue(null);
    Long value;
switch (f.getJdoType()) {
case PRIMITIVE:
switch (f.getPrimitiveType()) {
case BOOLEAN:
        continue;
case DOUBLE:
      value=BitTools.toSortableLong((termVal instanceof Double ? (double)termVal : (double)(float)termVal));
    break;
case FLOAT:
  value=BitTools.toSortableLong((termVal instanceof Float ? (float)termVal : (float)(double)termVal));
break;
case CHAR:
value=(long)((Character)termVal).charValue();
break;
case BYTE:
case INT:
case LONG:
case SHORT:
value=((Number)termVal).longValue();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + f.getPrimitiveType());
}
break;
case STRING:
value=BitTools.toSortableLong(termVal == QueryTerm.NULL ? null : (String)termVal);
break;
case REFERENCE:
value=(termVal == QueryTerm.NULL ? BitTools.NULL : ((ZooPC)termVal).jdoZooGetOid());
break;
case DATE:
value=(termVal == QueryTerm.NULL ? 0 : ((Date)termVal).getTime());
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + f.getJdoType());
}
switch (term.getOp()) {
case EQ:
{
minMap.put(f,value);
maxMap.put(f,value);
break;
}
case L:
if (value < maxMap.get(f)) {
maxMap.put(f,value - 1);
}
break;
case LE:
if (value < maxMap.get(f)) {
maxMap.put(f,value);
}
break;
case A:
if (value > minMap.get(f)) {
minMap.put(f,value + 1);
}
break;
case AE:
if (value > minMap.get(f)) {
minMap.put(f,value);
}
break;
case NE:
case STR_matches:
case STR_contains_NON_JDO:
case STR_endsWith:
break;
case STR_startsWith:
setKeysForStringStartsWith((String)term.getValue(null),f,minMap,maxMap);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + term.getOp());
}
}
return createQueryAdvice(minMap,maxMap,queryTree);
}",0.998639455782313
97981,"@Test public void test(){
  ZooJdoProperties props=TestTools.getProps();
  props.setZooAutoCreateSchema(true);
  PersistenceManager pm=TestTools.openPM(props);
  pm.currentTransaction().begin();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  Query query=pm.newQuery(TestClass.class,""String_Node_Str"");
  query.setOrdering(""String_Node_Str"");
  Object obj=query.execute();
  if (obj != null) {
    @SuppressWarnings(""String_Node_Str"") Collection<TestClass> books=(Collection<TestClass>)obj;
    for (    TestClass book : books)     System.out.println(""String_Node_Str"" + book.getInt() + ""String_Node_Str"");
  }
  query.closeAll();
  pm.currentTransaction().commit();
  if (pm.currentTransaction().isActive()) {
    pm.currentTransaction().rollback();
  }
  pm.close();
  pm.getPersistenceManagerFactory().close();
  System.out.println(""String_Node_Str"");
}","private void test(boolean withData){
  ZooJdoProperties props=TestTools.getProps();
  props.setZooAutoCreateSchema(true);
  PersistenceManager pm=TestTools.openPM(props);
  pm.currentTransaction().begin();
  if (withData) {
    TestClass book3=new TestClass();
    book3.setInt(3);
    pm.makePersistent(book3);
    TestClass book20=new TestClass();
    book20.setInt(20);
    pm.makePersistent(book20);
  }
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  Query query=pm.newQuery(TestClass.class,""String_Node_Str"");
  query.setOrdering(""String_Node_Str"");
  Object obj=query.execute();
  if (obj != null) {
    @SuppressWarnings(""String_Node_Str"") Collection<TestClass> books=(Collection<TestClass>)obj;
    for (    TestClass book : books) {
      assertTrue(0 < book.getInt());
    }
  }
  query.closeAll();
  pm.currentTransaction().commit();
  if (pm.currentTransaction().isActive()) {
    pm.currentTransaction().rollback();
  }
  pm.close();
  pm.getPersistenceManagerFactory().close();
}",0.5821052631578948
97982,"@Override public void close(Object queryResult){
  if (!queryResults.remove(queryResult)) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (queryResult instanceof ExtentAdaptor) {
    ((ExtentAdaptor<?>)queryResult).closeAll();
  }
 else   if (queryResult instanceof ExtentImpl) {
    ((ExtentImpl<?>)queryResult).closeAll();
  }
 else {
    LOGGER.warn(""String_Node_Str"");
  }
}","@Override public void close(Object queryResult){
  if (!queryResults.remove(queryResult)) {
    return;
  }
  if (queryResult instanceof ExtentAdaptor) {
    ((ExtentAdaptor<?>)queryResult).closeAll();
  }
 else   if (queryResult instanceof ExtentImpl) {
    ((ExtentImpl<?>)queryResult).closeAll();
  }
 else {
    LOGGER.warn(""String_Node_Str"");
  }
}",0.3504043126684636
97983,"DiskAccessOneFile(Node node,AbstractCache cache,SessionManager sm){
  this.sm=sm;
  this.node=node;
  this.cache=cache;
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.readLock(this);
  this.freeIndex=sm.getFsm();
  this.file=sm.getFile().createChannel();
  oidIndex=sm.getOidIndex();
  schemaIndex=sm.getSchemaIndex();
  objectReader=new ObjectReader(file);
  ddsPool=new PoolDDS(file,this.cache);
  fileInAP=file.getReader(true);
}","DiskAccessOneFile(Node node,AbstractCache cache,SessionManager sm){
  this.sm=sm;
  this.node=node;
  this.cache=cache;
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  this.freeIndex=sm.getFsm();
  this.file=sm.getFile().createChannel();
  oidIndex=sm.getOidIndex();
  schemaIndex=sm.getSchemaIndex();
  objectReader=new ObjectReader(file);
  ddsPool=new PoolDDS(file,this.cache);
  fileInAP=file.getReader(true);
}",0.907563025210084
97984,"@Override public OptimisticTransactionResult beginCommit(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.newTransaction(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}","@Override public OptimisticTransactionResult beginCommit(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.newTransaction(txId);
  sm.getFsm().getFile().newTransaction(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}",0.951063829787234
97985,"@Override public void newTransaction(long txId){
  this.txId=txId;
  root.newTransaction(txId);
}","@Override public void newTransaction(long txId){
  this.txId=txId;
}",0.8242424242424242
97986,"@Test public void testFailureReport(){
  TestTools.openPM();
  try {
    ZooDebug.closeOpenFiles();
    fail();
  }
 catch (  IllegalStateException e) {
  }
}","@Test public void testFailureReport(){
  TestTools.openPM();
  try {
    ZooDebug.closeOpenFiles();
    fail();
  }
 catch (  IllegalStateException e) {
  }
  TestTools.closePM();
}",0.9321533923303836
97987,"@Override public OptimisticTransactionResult checkTxConsistency(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.getLock().release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.getLock().readLock(this);
  }
 else {
    sm.getLock().writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,true);
  if (ovr.hasFailed()) {
    return ovr;
  }
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.getLock().release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.getLock().readLock(this);
  }
 else {
    sm.getLock().writeLock(this);
  }
  return ovr;
}","@Override public OptimisticTransactionResult checkTxConsistency(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,true);
  if (ovr.hasFailed()) {
    return ovr;
  }
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  return ovr;
}",0.666098807495741
97988,"@Override public OptimisticTransactionResult rollbackTransaction(){
  try {
    OptimisticTransactionResult txr=new OptimisticTransactionResult(null,false,false);
    if (txContext.getSchemaIndexTxId() != schemaIndex.getTxIdOfLastWriteThatRequiresRefresh()) {
      txr.setRefreshRequired(true);
    }
    if (txContext.getSchemaTxId() != schemaIndex.getTxIdOfLastWrite()) {
      txr.setResetRequired(true);
    }
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    return txr;
  }
  finally {
    LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
    sm.getLock().release(this);
  }
}","@Override public OptimisticTransactionResult rollbackTransaction(){
  try {
    OptimisticTransactionResult txr=new OptimisticTransactionResult(null,false,false);
    if (txContext.getSchemaIndexTxId() != schemaIndex.getTxIdOfLastWriteThatRequiresRefresh()) {
      txr.setRefreshRequired(true);
    }
    if (txContext.getSchemaTxId() != schemaIndex.getTxIdOfLastWrite()) {
      txr.setResetRequired(true);
    }
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    return txr;
  }
  finally {
    LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
    sm.release(this);
  }
}",0.9926470588235294
97989,"@Override public void commit(){
  int oidPage=oidIndex.write();
  int schemaPage1=schemaIndex.write(txId);
  txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
  txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
  sm.commitInfrastructure(oidPage,schemaPage1,oidIndex.getLastUsedOid(),txId);
  txContext.reset();
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.getLock().release(this);
}","@Override public void commit(){
  int oidPage=oidIndex.write();
  int schemaPage1=schemaIndex.write(txId);
  txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
  txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
  sm.commitInfrastructure(oidPage,schemaPage1,oidIndex.getLastUsedOid(),txId);
  txContext.reset();
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
}",0.9883177570093458
97990,"@Override public void close(){
  LOGGER.info(""String_Node_Str"",node.getDbPath());
  sm.close();
}","@Override public void close(){
  LOGGER.info(""String_Node_Str"",node.getDbPath());
  try {
    sm.writeLock(this);
    sm.close();
  }
  finally {
    LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
    sm.release(this);
  }
}",0.5482866043613707
97991,"DiskAccessOneFile(Node node,AbstractCache cache,SessionManager sm){
  this.sm=sm;
  this.node=node;
  this.cache=cache;
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.getLock().readLock(this);
  this.freeIndex=sm.getFsm();
  this.file=sm.getFile();
  oidIndex=sm.getOidIndex();
  schemaIndex=sm.getSchemaIndex();
  objectReader=new ObjectReader(file);
  ddsPool=new PoolDDS(file,this.cache);
  fileInAP=file.getReader(true);
}","DiskAccessOneFile(Node node,AbstractCache cache,SessionManager sm){
  this.sm=sm;
  this.node=node;
  this.cache=cache;
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.writeLock(this);
  this.freeIndex=sm.getFsm();
  this.file=sm.getFile();
  oidIndex=sm.getOidIndex();
  schemaIndex=sm.getSchemaIndex();
  objectReader=new ObjectReader(file);
  ddsPool=new PoolDDS(file,this.cache);
  fileInAP=file.getReader(true);
}",0.9778296382730456
97992,"@Override public long beginTransaction(){
  txContext.reset();
  if (ALLOW_READ_CONCURRENCY) {
    sm.getLock().readLock(this);
  }
 else {
    sm.getLock().writeLock(this);
  }
  txId=sm.getNextTxId();
  return txId;
}","@Override public long beginTransaction(){
  txContext.reset();
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  txId=sm.getNextTxId();
  return txId;
}",0.9521531100478468
97993,"@Override public OptimisticTransactionResult beginCommit(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.getLock().release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.getLock().readLock(this);
  }
 else {
    sm.getLock().writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.newTransaction(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}","@Override public OptimisticTransactionResult beginCommit(ArrayList<TxObjInfo> updates){
  LOGGER.info(LOCKING_MARKER,""String_Node_Str"");
  sm.release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.readLock(this);
  }
 else {
    sm.writeLock(this);
  }
  OptimisticTransactionResult ovr=checkConsistencyInternal(updates,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.newTransaction(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}",0.9588744588744588
97994,"static synchronized void removeSession(SessionManager sm){
  if (!sessions.remove(sm)) {
    throw DBLogger.newFatalInternal(""String_Node_Str"" + sm.getPath());
  }
  if (sessions.size() <= 1) {
    MULTIPLE_SESSIONS_ARE_OPEN=false;
  }
  if (sessions.isEmpty()) {
    FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ=false;
  }
}","static void removeSession(SessionManager sm){
synchronized (sessions) {
    if (!sessions.remove(sm)) {
      throw DBLogger.newFatalInternal(""String_Node_Str"" + sm.getPath());
    }
    if (sessions.size() <= 1) {
      MULTIPLE_SESSIONS_ARE_OPEN=false;
    }
    if (sessions.isEmpty()) {
      FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ=false;
    }
  }
}",0.7218045112781954
97995,"public static synchronized void cleanUp(File dbFile){
  Path path=dbFile.toPath();
  try {
    for (    SessionManager smi : sessions) {
      if (Files.isSameFile(smi.getPath(),path)) {
        if (smi.isLocked() && !IGNORE_OPEN_SESSIONS) {
          throw DBLogger.newUser(""String_Node_Str"" + dbFile);
        }
        sessions.remove(smi);
        break;
      }
    }
    FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ=false;
    MULTIPLE_SESSIONS_ARE_OPEN=false;
  }
 catch (  IOException e) {
    throw DBLogger.newFatal(""String_Node_Str"" + dbFile,e);
  }
}","public static void cleanUp(File dbFile){
  Path path=dbFile.toPath();
  try {
synchronized (sessions) {
      for (      SessionManager smi : sessions) {
        if (Files.isSameFile(smi.getPath(),path)) {
          if (smi.isLocked() && !IGNORE_OPEN_SESSIONS) {
            throw DBLogger.newUser(""String_Node_Str"" + dbFile);
          }
          sessions.remove(smi);
          break;
        }
      }
      FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ=false;
      MULTIPLE_SESSIONS_ARE_OPEN=false;
    }
  }
 catch (  IOException e) {
    throw DBLogger.newFatal(""String_Node_Str"" + dbFile,e);
  }
}",0.9224062772449868
97996,"public synchronized static void clear(){
  sessions.clear();
  FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ=false;
  MULTIPLE_SESSIONS_ARE_OPEN=false;
}","public static void clear(){
synchronized (sessions) {
    sessions.clear();
    FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ=false;
    MULTIPLE_SESSIONS_ARE_OPEN=false;
  }
}",0.8403908794788274
97997,"public synchronized static DiskAccessOneFile getSession(Node node,AbstractCache cache){
  String dbPath=node.getDbPath();
  LOGGER.info(""String_Node_Str"",dbPath);
  Path path=FileSystems.getDefault().getPath(dbPath);
  SessionManager sm=null;
  try {
    for (    SessionManager smi : sessions) {
      if (Files.isSameFile(smi.getPath(),path)) {
        sm=smi;
        break;
      }
    }
  }
 catch (  IOException e) {
    throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
  }
  if (sm == null) {
    sm=new SessionManager(path);
    sessions.add(sm);
  }
 else {
    MULTIPLE_SESSIONS_ARE_OPEN=true;
    if (FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ) {
      throw DBLogger.newFatal(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return sm.createSession(node,cache);
}","public static DiskAccessOneFile getSession(Node node,AbstractCache cache){
  String dbPath=node.getDbPath();
  LOGGER.info(""String_Node_Str"",dbPath);
  Path path=FileSystems.getDefault().getPath(dbPath);
  SessionManager sm=null;
synchronized (sessions) {
    try {
      for (      SessionManager smi : sessions) {
        if (Files.isSameFile(smi.getPath(),path)) {
          sm=smi;
          break;
        }
      }
    }
 catch (    IOException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
    }
    if (sm == null) {
      sm=new SessionManager(path);
      sessions.add(sm);
    }
 else {
      MULTIPLE_SESSIONS_ARE_OPEN=true;
      if (FAIL_BECAUSE_OF_ACTIVE_NON_TX_READ) {
        throw DBLogger.newFatal(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  return sm.createSession(node,cache);
}",0.9199255121042832
97998,"private FNCT_OP parseFunctionName(QueryFunction baseObjectFn){
  Class<?> baseType=baseObjectFn.getReturnType();
  Token t=token();
  if (String.class == baseType) {
switch (t.str) {
case ""String_Node_Str"":
      return FNCT_OP.STR_contains_NON_JDO;
case ""String_Node_Str"":
    return FNCT_OP.STR_matches;
case ""String_Node_Str"":
  return FNCT_OP.STR_startsWith;
case ""String_Node_Str"":
return FNCT_OP.STR_endsWith;
}
}
if (Map.class.isAssignableFrom(baseType)) {
switch (t.str) {
case ""String_Node_Str"":
return FNCT_OP.MAP_containsKey;
case ""String_Node_Str"":
return FNCT_OP.MAP_containsValue;
case ""String_Node_Str"":
return FNCT_OP.MAP_isEmpty;
case ""String_Node_Str"":
return FNCT_OP.MAP_size;
case ""String_Node_Str"":
return FNCT_OP.MAP_get;
}
}
if (List.class.isAssignableFrom(baseType)) {
switch (t.str) {
case ""String_Node_Str"":
return FNCT_OP.LIST_get;
}
}
if (Collection.class.isAssignableFrom(baseType)) {
switch (t.str) {
case ""String_Node_Str"":
return FNCT_OP.COLL_contains;
case ""String_Node_Str"":
return FNCT_OP.COLL_isEmpty;
case ""String_Node_Str"":
return FNCT_OP.COLL_size;
}
}
return null;
}","private FNCT_OP parseFunctionName(QueryFunction baseObjectFn){
  Class<?> baseType=baseObjectFn.getReturnType();
  if (baseType == null) {
    return null;
  }
  Token t=token();
  if (String.class == baseType) {
switch (t.str) {
case ""String_Node_Str"":
      return FNCT_OP.STR_contains_NON_JDO;
case ""String_Node_Str"":
    return FNCT_OP.STR_matches;
case ""String_Node_Str"":
  return FNCT_OP.STR_startsWith;
case ""String_Node_Str"":
return FNCT_OP.STR_endsWith;
}
}
if (Map.class.isAssignableFrom(baseType)) {
switch (t.str) {
case ""String_Node_Str"":
return FNCT_OP.MAP_containsKey;
case ""String_Node_Str"":
return FNCT_OP.MAP_containsValue;
case ""String_Node_Str"":
return FNCT_OP.MAP_isEmpty;
case ""String_Node_Str"":
return FNCT_OP.MAP_size;
case ""String_Node_Str"":
return FNCT_OP.MAP_get;
}
}
if (List.class.isAssignableFrom(baseType)) {
switch (t.str) {
case ""String_Node_Str"":
return FNCT_OP.LIST_get;
}
}
if (Collection.class.isAssignableFrom(baseType)) {
switch (t.str) {
case ""String_Node_Str"":
return FNCT_OP.COLL_contains;
case ""String_Node_Str"":
return FNCT_OP.COLL_isEmpty;
case ""String_Node_Str"":
return FNCT_OP.COLL_size;
}
}
return null;
}",0.9791943337760072
97999,"public QueryTreeNode parseQuery(){
  tokens=tokenize(str);
  if (match(T_TYPE.SELECT)) {
    tInc();
  }
  if (match(T_TYPE.UNIQUE)) {
    tInc();
  }
  if (match(T_TYPE.FROM)) {
    tInc();
    if (!clsDef.getClassName().equals(token().str)) {
      throw DBLogger.newUser(""String_Node_Str"" + token().pos + ""String_Node_Str""+ clsDef);
    }
    tInc();
  }
  if (match(T_TYPE.WHERE)) {
    tInc();
  }
  boolean negate=false;
  QueryTreeNode qn=parseTree(negate);
  while (hasMoreTokens()) {
    qn=parseTree(null,qn,negate);
  }
  return qn;
}","public QueryTreeNode parseQuery(){
  try {
    tokens=tokenize(str);
    if (match(T_TYPE.SELECT)) {
      tInc();
    }
    if (match(T_TYPE.UNIQUE)) {
      tInc();
    }
    if (match(T_TYPE.FROM)) {
      tInc();
      if (!clsDef.getClassName().equals(token().str)) {
        throw DBLogger.newUser(""String_Node_Str"" + token().pos + ""String_Node_Str""+ clsDef);
      }
      tInc();
    }
    if (match(T_TYPE.WHERE)) {
      tInc();
    }
    boolean negate=false;
    QueryTreeNode qn=parseTree(negate);
    while (hasMoreTokens()) {
      qn=parseTree(null,qn,negate);
    }
    return qn;
  }
 catch (  StringIndexOutOfBoundsException e) {
    throw DBLogger.newUser(""String_Node_Str"" + pos + ""String_Node_Str""+ str);
  }
}",0.8332028191072827
98000,"private Token token(int i){
  return tokens.get(tPos + i);
}","private Token token(int i){
  try {
    return tokens.get(tPos + i);
  }
 catch (  IndexOutOfBoundsException e) {
    throw DBLogger.newUser(""String_Node_Str"" + tokens.get(tokens.size() - 1).pos + ""String_Node_Str""+ str);
  }
}",0.4181184668989547
