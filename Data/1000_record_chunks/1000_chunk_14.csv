record_number,buggy_code,fixed_code,code_similarity
13001,"/** 
 * Create derived components found in the switchyard.xml.
 * @param derivedArtifacts
 * @param artifact
 * @param rootElement
 * @param xpath
 */
private void processComponents(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws XPathExpressionException {
  NodeList nodes=(NodeList)this.query(xpath,rootElement,""String_Node_Str"",XPathConstants.NODESET);
  for (int idx=0; idx < nodes.getLength(); idx++) {
    Element node=(Element)nodes.item(idx);
    String name=node.getAttribute(""String_Node_Str"");
    ExtendedArtifactType componentArtifact=SwitchYardModel.newComponentArtifact(name);
    derivedArtifacts.add(componentArtifact);
    Element implBean=(Element)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODE);
    if (implBean != null) {
      if (implBean.hasAttribute(""String_Node_Str"")) {
        String implClassName=implBean.getAttribute(""String_Node_Str"");
        Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
        relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + implClassName);
      }
      if (implBean.hasAttribute(""String_Node_Str"")) {
        String requires=implBean.getAttribute(""String_Node_Str"");
        SrampModelUtils.setCustomProperty(componentArtifact,""String_Node_Str"",requires);
      }
    }
    Element implCamel=(Element)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODE);
    if (implCamel != null) {
      Element xml=(Element)this.query(xpath,implCamel,""String_Node_Str"",XPathConstants.NODE);
      if (xml != null) {
        String path=xml.getAttribute(""String_Node_Str"");
        Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
        relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + path);
      }
      if (implCamel.hasAttribute(""String_Node_Str"")) {
        String requires=implCamel.getAttribute(""String_Node_Str"");
        SrampModelUtils.setCustomProperty(componentArtifact,""String_Node_Str"",requires);
      }
    }
    NodeList refs=(NodeList)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODESET);
    for (int jdx=0; jdx < refs.getLength(); jdx++) {
      Element ref=(Element)refs.item(jdx);
      Element iface=(Element)this.query(xpath,ref,""String_Node_Str"",XPathConstants.NODE);
      if (iface != null) {
        if (iface.hasAttribute(""String_Node_Str"")) {
          String ifaceName=iface.getAttribute(""String_Node_Str"");
          Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_REFERENCES,null);
          relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + ifaceName);
        }
      }
      iface=(Element)this.query(xpath,ref,""String_Node_Str"",XPathConstants.NODE);
      if (iface != null) {
        if (iface.hasAttribute(""String_Node_Str"")) {
          String wsdlInfo=iface.getAttribute(""String_Node_Str"");
          Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_REFERENCES,null);
          relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + wsdlInfo);
        }
      }
    }
  }
}","/** 
 * Create derived components found in the switchyard.xml.
 * @param derivedArtifacts
 * @param artifact
 * @param rootElement
 * @param xpath
 */
private void processComponents(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws XPathExpressionException {
  NodeList nodes=(NodeList)this.query(xpath,rootElement,""String_Node_Str"",XPathConstants.NODESET);
  for (int idx=0; idx < nodes.getLength(); idx++) {
    Element node=(Element)nodes.item(idx);
    String name=node.getAttribute(""String_Node_Str"");
    ExtendedArtifactType componentArtifact=SwitchYardModel.newComponentArtifact(name);
    derivedArtifacts.add(componentArtifact);
    Element implBean=(Element)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODE);
    if (implBean != null) {
      if (implBean.hasAttribute(""String_Node_Str"")) {
        String implClassName=implBean.getAttribute(""String_Node_Str"");
        Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
        relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + implClassName);
      }
      if (implBean.hasAttribute(""String_Node_Str"")) {
        String requires=implBean.getAttribute(""String_Node_Str"");
        SrampModelUtils.setCustomProperty(componentArtifact,""String_Node_Str"",requires);
      }
    }
    Element implCamel=(Element)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODE);
    if (implCamel != null) {
      Element xml=(Element)this.query(xpath,implCamel,""String_Node_Str"",XPathConstants.NODE);
      if (xml != null) {
        String path=xml.getAttribute(""String_Node_Str"");
        Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
        relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + path);
      }
      if (implCamel.hasAttribute(""String_Node_Str"")) {
        String requires=implCamel.getAttribute(""String_Node_Str"");
        SrampModelUtils.setCustomProperty(componentArtifact,""String_Node_Str"",requires);
      }
    }
    NodeList refs=(NodeList)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODESET);
    for (int jdx=0; jdx < refs.getLength(); jdx++) {
      Element ref=(Element)refs.item(jdx);
      Element iface=(Element)this.query(xpath,ref,""String_Node_Str"",XPathConstants.NODE);
      if (iface != null) {
        if (iface.hasAttribute(""String_Node_Str"")) {
          String ifaceName=iface.getAttribute(""String_Node_Str"");
          Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_REFERENCES,null);
          relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + ifaceName);
        }
      }
      iface=(Element)this.query(xpath,ref,""String_Node_Str"",XPathConstants.NODE);
      if (iface != null) {
        if (iface.hasAttribute(""String_Node_Str"")) {
          String wsdlInfo=iface.getAttribute(""String_Node_Str"");
          Relationship relationship=SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_REFERENCES,null);
          relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + wsdlInfo);
        }
      }
    }
    NodeList services=(NodeList)this.query(xpath,node,""String_Node_Str"",XPathConstants.NODESET);
    for (int jdx=0; jdx < services.getLength(); jdx++) {
      Element componentSvc=(Element)services.item(jdx);
      name=componentSvc.getAttribute(""String_Node_Str"");
      ExtendedArtifactType componentServiceArtifact=SwitchYardModel.newComponentServiceArtifact(name);
      componentServiceArtifact.setUuid(UUID.randomUUID().toString());
      derivedArtifacts.add(componentServiceArtifact);
      SrampModelUtils.addGenericRelationship(componentArtifact,SwitchYardModel.REL_OFFERS,componentServiceArtifact.getUuid());
      Element iface=(Element)this.query(xpath,componentSvc,""String_Node_Str"",XPathConstants.NODE);
      if (iface != null) {
        if (iface.hasAttribute(""String_Node_Str"")) {
          String ifaceName=iface.getAttribute(""String_Node_Str"");
          Relationship relationship=SrampModelUtils.addGenericRelationship(componentServiceArtifact,SwitchYardModel.REL_IMPLEMENTS,null);
          relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + ifaceName);
        }
      }
      iface=(Element)this.query(xpath,componentSvc,""String_Node_Str"",XPathConstants.NODE);
      if (iface != null) {
        if (iface.hasAttribute(""String_Node_Str"")) {
          String wsdlInfo=iface.getAttribute(""String_Node_Str"");
          Relationship relationship=SrampModelUtils.addGenericRelationship(componentServiceArtifact,SwitchYardModel.REL_IMPLEMENTS,null);
          relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + wsdlInfo);
        }
      }
      if (componentSvc.hasAttribute(""String_Node_Str"")) {
        String requires=componentSvc.getAttribute(""String_Node_Str"");
        SrampModelUtils.setCustomProperty(componentServiceArtifact,""String_Node_Str"",requires);
      }
    }
  }
}",0.7823619813216692
13002,"/** 
 * Visits a switchyard artifact.
 * @param artifact
 * @param visitor
 */
public static final void visitArtifact(ExtendedArtifactType artifact,SwitchYardArtifactVisitor visitor){
  if (SwitchYardModel.SwitchYardService.equals(artifact.getExtendedType())) {
    visitor.visitService(artifact);
  }
 else   if (SwitchYardModel.SwitchYardComponent.equals(artifact.getExtendedType())) {
    visitor.visitComponent(artifact);
  }
 else   if (SwitchYardModel.SwitchYardTransformer.equals(artifact.getExtendedType())) {
    visitor.visitTransformer(artifact);
  }
 else   if (SwitchYardModel.SwitchYardValidator.equals(artifact.getExtendedType())) {
    visitor.visitValidator(artifact);
  }
 else {
    throw new RuntimeException(Messages.i18n.format(""String_Node_Str"",artifact.getExtendedType()));
  }
}","/** 
 * Visits a switchyard artifact.
 * @param artifact
 * @param visitor
 */
public static final void visitArtifact(ExtendedArtifactType artifact,SwitchYardArtifactVisitor visitor){
  if (SwitchYardModel.SwitchYardService.equals(artifact.getExtendedType())) {
    visitor.visitService(artifact);
  }
 else   if (SwitchYardModel.SwitchYardComponent.equals(artifact.getExtendedType())) {
    visitor.visitComponent(artifact);
  }
 else   if (SwitchYardModel.SwitchYardComponentService.equals(artifact.getExtendedType())) {
    visitor.visitComponentService(artifact);
  }
 else   if (SwitchYardModel.SwitchYardTransformer.equals(artifact.getExtendedType())) {
    visitor.visitTransformer(artifact);
  }
 else   if (SwitchYardModel.SwitchYardValidator.equals(artifact.getExtendedType())) {
    visitor.visitValidator(artifact);
  }
 else {
    throw new RuntimeException(Messages.i18n.format(""String_Node_Str"",artifact.getExtendedType()));
  }
}",0.9187643020594966
13003,"/** 
 * Test method for   {@link org.overlord.sramp.integration.switchyard.deriver.SwitchYardXmlDeriver#derive(java.util.Collection,org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)}.
 * @throws IOException
 */
@Test public void testSwitchyardDeriver() throws IOException {
  SwitchYardXmlDeriver deriver=new SwitchYardXmlDeriver();
  ExtendedDocument artifact=new ExtendedDocument();
  artifact.setArtifactType(BaseArtifactEnum.EXTENDED_ARTIFACT_TYPE);
  artifact.setName(""String_Node_Str"");
  artifact.setExtendedType(SwitchYardModel.SwitchYardXmlDocument);
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  Collection<BaseArtifactType> derivedArtifacts=deriver.derive(artifact,is);
  Assert.assertNotNull(derivedArtifacts);
  Assert.assertEquals(9,derivedArtifacts.size());
  Assert.assertEquals(""String_Node_Str"",artifact.getName());
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(artifact,""String_Node_Str""));
  BaseArtifactType orderService=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardServiceType,""String_Node_Str"");
  Assert.assertNotNull(orderService);
  Assert.assertEquals(""String_Node_Str"",orderService.getName());
  BaseArtifactType inventoryServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  Assert.assertNotNull(inventoryServiceComponent);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(inventoryServiceComponent,""String_Node_Str""));
  Relationship relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNull(relationship);
  BaseArtifactType orderServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  Assert.assertNotNull(orderServiceComponent);
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(orderService,SwitchYardModel.REL_PROMOTES);
  Assert.assertNotNull(relationship);
  Assert.assertNotNull(relationship.getRelationshipTarget());
  Assert.assertFalse(relationship.getRelationshipTarget().isEmpty());
  Assert.assertEquals(orderServiceComponent.getUuid(),relationship.getRelationshipTarget().iterator().next().getValue());
  BaseArtifactType camelServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  Assert.assertNotNull(camelServiceComponent);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(camelServiceComponent,""String_Node_Str""));
  relationship=SrampModelUtils.getGenericRelationship(camelServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(camelServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNull(relationship);
  BaseArtifactType transformJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  Assert.assertNotNull(transformJava);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(transformJava,SwitchYardModel.PROP_TRANSFORMER_TYPE));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  BaseArtifactType transformXslt=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  Assert.assertNotNull(transformXslt);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(transformXslt,SwitchYardModel.PROP_TRANSFORMER_TYPE));
  relationship=SrampModelUtils.getGenericRelationship(transformXslt,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  BaseArtifactType validateJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardValidatorType,""String_Node_Str"");
  Assert.assertNotNull(validateJava);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(validateJava,SwitchYardModel.PROP_VALIDATE_TYPE));
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_VALIDATES);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  LinkerContext context=new LinkerContext(){
    @Override public Collection<BaseArtifactType> findArtifacts(    String model,    String type,    Map<String,String> criteria){
      BaseArtifactType doc=new Document();
      doc.setArtifactType(BaseArtifactEnum.DOCUMENT);
      doc.setName(""String_Node_Str"");
      doc.setUuid(UUID.randomUUID().toString());
      return Collections.singletonList(doc);
    }
  }
;
  deriver.link(context,artifact,derivedArtifacts);
  inventoryServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNull(relationship);
  orderServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  camelServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(camelServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  transformJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  transformXslt=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(transformXslt,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  validateJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardValidatorType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_VALIDATES);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
}","/** 
 * Test method for   {@link org.overlord.sramp.integration.switchyard.deriver.SwitchYardXmlDeriver#derive(java.util.Collection,org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)}.
 * @throws IOException
 */
@Test public void testSwitchyardDeriver() throws IOException {
  SwitchYardXmlDeriver deriver=new SwitchYardXmlDeriver();
  ExtendedDocument artifact=new ExtendedDocument();
  artifact.setArtifactType(BaseArtifactEnum.EXTENDED_ARTIFACT_TYPE);
  artifact.setName(""String_Node_Str"");
  artifact.setExtendedType(SwitchYardModel.SwitchYardXmlDocument);
  InputStream is=getClass().getResourceAsStream(""String_Node_Str"");
  Collection<BaseArtifactType> derivedArtifacts=deriver.derive(artifact,is);
  Assert.assertNotNull(derivedArtifacts);
  Assert.assertEquals(12,derivedArtifacts.size());
  Assert.assertEquals(""String_Node_Str"",artifact.getName());
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(artifact,""String_Node_Str""));
  BaseArtifactType orderService=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardServiceType,""String_Node_Str"");
  Assert.assertNotNull(orderService);
  Assert.assertEquals(""String_Node_Str"",orderService.getName());
  Relationship relationship=SrampModelUtils.getGenericRelationship(orderService,SwitchYardModel.REL_IMPLEMENTS);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  Assert.assertEquals(""String_Node_Str"",relationship.getOtherAttributes().get(SwitchYardXmlDeriver.UNRESOLVED_REF));
  BaseArtifactType inventoryServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  Assert.assertNotNull(inventoryServiceComponent);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(inventoryServiceComponent,""String_Node_Str""));
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNull(relationship);
  BaseArtifactType orderServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  Assert.assertNotNull(orderServiceComponent);
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(orderService,SwitchYardModel.REL_PROMOTES);
  Assert.assertNotNull(relationship);
  Assert.assertNotNull(relationship.getRelationshipTarget());
  Assert.assertFalse(relationship.getRelationshipTarget().isEmpty());
  Assert.assertEquals(orderServiceComponent.getUuid(),relationship.getRelationshipTarget().iterator().next().getValue());
  BaseArtifactType camelServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  Assert.assertNotNull(camelServiceComponent);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(camelServiceComponent,""String_Node_Str""));
  relationship=SrampModelUtils.getGenericRelationship(camelServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(camelServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNull(relationship);
  BaseArtifactType inventoryServiceComponentSvc=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentServiceType,""String_Node_Str"");
  Assert.assertNotNull(camelServiceComponent);
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponentSvc,SwitchYardModel.REL_IMPLEMENTS);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  Assert.assertEquals(""String_Node_Str"",relationship.getOtherAttributes().get(SwitchYardXmlDeriver.UNRESOLVED_REF));
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(inventoryServiceComponentSvc,""String_Node_Str""));
  BaseArtifactType transformJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  Assert.assertNotNull(transformJava);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(transformJava,SwitchYardModel.PROP_TRANSFORMER_TYPE));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  BaseArtifactType transformXslt=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  Assert.assertNotNull(transformXslt);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(transformXslt,SwitchYardModel.PROP_TRANSFORMER_TYPE));
  relationship=SrampModelUtils.getGenericRelationship(transformXslt,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  BaseArtifactType validateJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardValidatorType,""String_Node_Str"");
  Assert.assertNotNull(validateJava);
  Assert.assertEquals(""String_Node_Str"",SrampModelUtils.getCustomProperty(validateJava,SwitchYardModel.PROP_VALIDATE_TYPE));
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_VALIDATES);
  Assert.assertNotNull(relationship);
  Assert.assertTrue(relationship.getRelationshipTarget().isEmpty());
  Assert.assertTrue(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  LinkerContext context=new LinkerContext(){
    @Override public Collection<BaseArtifactType> findArtifacts(    String model,    String type,    Map<String,String> criteria){
      BaseArtifactType doc=new Document();
      doc.setArtifactType(BaseArtifactEnum.DOCUMENT);
      doc.setName(""String_Node_Str"");
      doc.setUuid(UUID.randomUUID().toString());
      return Collections.singletonList(doc);
    }
  }
;
  deriver.link(context,artifact,derivedArtifacts);
  inventoryServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(inventoryServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNull(relationship);
  orderServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(orderServiceComponent,SwitchYardModel.REL_REFERENCES);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  camelServiceComponent=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardComponentType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(camelServiceComponent,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  transformJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  transformXslt=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardTransformerType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(transformXslt,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_FROM);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(transformJava,SwitchYardModel.REL_TRANSFORMS_TO);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  validateJava=getDerivedArtifact(derivedArtifacts,SwitchYardModel.SwitchYardValidatorType,""String_Node_Str"");
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_IMPLEMENTED_BY);
  Assert.assertNotNull(relationship);
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
  relationship=SrampModelUtils.getGenericRelationship(validateJava,SwitchYardModel.REL_VALIDATES);
  Assert.assertNotNull(relationship);
  Assert.assertEquals(1,relationship.getRelationshipTarget().size());
  Assert.assertFalse(relationship.getOtherAttributes().containsKey(SwitchYardXmlDeriver.UNRESOLVED_REF));
}",0.9101240867447524
13004,"/** 
 * Derives content for the given artifact.
 * @param derivedArtifacts
 * @param artifact
 * @param rootElement
 * @param xpath
 * @throws IOException
 */
protected abstract void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException ;","/** 
 * Derives content for the given artifact.
 * @param derivedArtifacts
 * @param artifact
 * @param xmlDeriverContext
 * @throws IOException
 */
protected abstract void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException ;",0.8269230769230769
13005,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
}",0.7791164658634538
13006,"/** 
 * @see org.overlord.sramp.common.repository.derived.XsdDeriver#derive(org.overlord.sramp.common.repository.derived.IndexedArtifactCollection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  String targetNS=rootElement.getAttribute(""String_Node_Str"");
  ((WsdlDocument)artifact).setTargetNamespace(targetNS);
  try {
    processDefinitions((IndexedArtifactCollection)derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.XsdDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  String targetNS=xmlDeriverContext.getRootElement().getAttribute(""String_Node_Str"");
  ((WsdlDocument)artifact).setTargetNamespace(targetNS);
  try {
    processDefinitions((IndexedArtifactCollection)derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7777003484320557
13007,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    processSchema(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    processSchema(derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7958607714016933
13008,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    String targetNS=rootElement.getAttribute(""String_Node_Str"");
    SrampModelUtils.setCustomProperty(artifact,""String_Node_Str"",targetNS);
    if (""String_Node_Str"".equals(artifact.getName()) && rootElement.hasAttribute(""String_Node_Str"")) {
      String name=rootElement.getAttribute(""String_Node_Str"");
      artifact.setName(name);
    }
    processComponents(derivedArtifacts,artifact,rootElement,xpath);
    processServices(derivedArtifacts,artifact,rootElement,xpath);
    processTransformers(derivedArtifacts,artifact,rootElement,xpath);
    processValidators(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  XPathExpressionException e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    Element rootElement=xmlDeriverContext.getRootElement();
    XPath xpath=xmlDeriverContext.getXpath();
    String targetNS=rootElement.getAttribute(""String_Node_Str"");
    SrampModelUtils.setCustomProperty(artifact,""String_Node_Str"",targetNS);
    if (""String_Node_Str"".equals(artifact.getName()) && rootElement.hasAttribute(""String_Node_Str"")) {
      String name=rootElement.getAttribute(""String_Node_Str"");
      artifact.setName(name);
    }
    processComponents(derivedArtifacts,artifact,rootElement,xpath);
    processServices(derivedArtifacts,artifact,rootElement,xpath);
    processTransformers(derivedArtifacts,artifact,rootElement,xpath);
    processValidators(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  XPathExpressionException e) {
    throw new IOException(e);
  }
}",0.1425389755011135
13009,"/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.w3c.dom.Element,javax.xml.xpath.XPath)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws IOException {
  try {
    processRoot(derivedArtifacts,artifact,rootElement,xpath);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}","/** 
 * @see org.overlord.sramp.common.derived.AbstractXmlDeriver#derive(java.util.Collection,org.oasis_open.docs.s_ramp.ns.s_ramp_v1.BaseArtifactType,org.overlord.sramp.common.derived.AbstractXmlDeriver.XmlDeriverContext)
 */
@Override protected void derive(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,XmlDeriverContext xmlDeriverContext) throws IOException {
  try {
    processRoot(derivedArtifacts,artifact,xmlDeriverContext.getRootElement(),xmlDeriverContext.getXpath());
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}",0.7950897072710104
13010,"/** 
 * @see org.apache.maven.wagon.StreamWagon#fillInputData(org.apache.maven.wagon.InputData)
 */
@Override public void fillInputData(InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {
  Resource resource=inputData.getResource();
  if (resource.getName().contains(""String_Node_Str""))   throw new ResourceDoesNotExistException(Messages.i18n.format(""String_Node_Str"",resource));
  logger.debug(Messages.i18n.format(""String_Node_Str"",resource));
  MavenGavInfo gavInfo=MavenGavInfo.fromResource(resource);
  if (gavInfo.isHash()) {
    doGetHash(gavInfo,inputData);
  }
 else {
    doGetArtifact(gavInfo,inputData);
  }
}","/** 
 * @see org.apache.maven.wagon.StreamWagon#fillInputData(org.apache.maven.wagon.InputData)
 */
@Override public void fillInputData(InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {
  Resource resource=inputData.getResource();
  MavenGavInfo gavInfo=MavenGavInfo.fromResource(resource);
  if (gavInfo.isMavenMetaData() && gavInfo.getVersion() == null) {
    doGenerateArtifactDirMavenMetaData(gavInfo,inputData);
    return;
  }
  if (gavInfo.isMavenMetaData() && gavInfo.getVersion() != null) {
    doGenerateSnapshotMavenMetaData(gavInfo,inputData);
    return;
  }
  logger.debug(Messages.i18n.format(""String_Node_Str"",resource));
  if (gavInfo.isHash()) {
    doGetHash(gavInfo,inputData);
  }
 else {
    doGetArtifact(gavInfo,inputData);
  }
}",0.4416107382550335
13011,"/** 
 * Finds an existing artifact in the s-ramp repository that matches the GAV information.
 * @param client
 * @param gavInfo
 * @return an s-ramp artifact (if found) or null (if not found)
 * @throws SrampClientException
 * @throws SrampAtomException
 * @throws JAXBException
 */
private BaseArtifactType findExistingArtifactByGAV(SrampAtomApiClient client,MavenGavInfo gavInfo) throws SrampAtomException, SrampClientException, JAXBException {
  String query=null;
  if (gavInfo.getClassifier() == null) {
    query=String.format(""String_Node_Str"",gavInfo.getGroupId(),gavInfo.getArtifactId(),gavInfo.getVersion(),gavInfo.getType());
  }
 else {
    query=String.format(""String_Node_Str"",gavInfo.getGroupId(),gavInfo.getArtifactId(),gavInfo.getVersion(),gavInfo.getClassifier(),gavInfo.getType());
  }
  QueryResultSet rset=client.query(query);
  if (rset.size() > 0) {
    for (    ArtifactSummary summary : rset) {
      String uuid=summary.getUuid();
      ArtifactType artifactType=summary.getType();
      BaseArtifactType arty=client.getArtifactMetaData(artifactType,uuid);
      if (gavInfo.getClassifier() == null) {
        String artyClassifier=SrampModelUtils.getCustomProperty(arty,""String_Node_Str"");
        if (artyClassifier == null) {
          return arty;
        }
      }
 else {
        return arty;
      }
    }
  }
  return null;
}","/** 
 * Finds an existing artifact in the s-ramp repository that matches the GAV information.
 * @param client
 * @param gavInfo
 * @return an s-ramp artifact (if found) or null (if not found)
 * @throws SrampClientException
 * @throws SrampAtomException
 * @throws JAXBException
 */
private BaseArtifactType findExistingArtifactByGAV(SrampAtomApiClient client,MavenGavInfo gavInfo) throws SrampAtomException, SrampClientException, JAXBException {
  SrampClientQuery clientQuery=null;
  if (gavInfo.getClassifier() == null) {
    clientQuery=client.buildQuery(""String_Node_Str"").parameter(gavInfo.getGroupId()).parameter(gavInfo.getArtifactId()).parameter(gavInfo.getVersion()).parameter(gavInfo.getType());
  }
 else {
    clientQuery=client.buildQuery(""String_Node_Str"").parameter(gavInfo.getGroupId()).parameter(gavInfo.getArtifactId()).parameter(gavInfo.getVersion()).parameter(gavInfo.getClassifier()).parameter(gavInfo.getType());
  }
  QueryResultSet rset=clientQuery.count(100).query();
  if (rset.size() > 0) {
    for (    ArtifactSummary summary : rset) {
      String uuid=summary.getUuid();
      ArtifactType artifactType=summary.getType();
      BaseArtifactType arty=client.getArtifactMetaData(artifactType,uuid);
      if (gavInfo.getClassifier() == null) {
        String artyClassifier=SrampModelUtils.getCustomProperty(arty,""String_Node_Str"");
        if (artyClassifier == null) {
          return arty;
        }
      }
 else {
        return arty;
      }
    }
  }
  return null;
}",0.9148639218422888
13012,"/** 
 * Create derived transformers found in the switchyard.xml.
 * @param derivedArtifacts
 * @param artifact
 * @param rootElement
 * @param xpath
 * @throws XPathExpressionException
 */
private void processTransformers(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws XPathExpressionException {
  NodeList nodes=(NodeList)this.query(xpath,rootElement,""String_Node_Str"",XPathConstants.NODESET);
  for (int idx=0; idx < nodes.getLength(); idx++) {
    Element node=(Element)nodes.item(idx);
    String name=node.getAttribute(""String_Node_Str"");
    if (name == null || name.trim().length() == 0) {
      if (node.hasAttribute(""String_Node_Str"") && node.hasAttribute(""String_Node_Str"")) {
        String from=node.getAttribute(""String_Node_Str"");
        String to=node.getAttribute(""String_Node_Str"");
        if (from.startsWith(""String_Node_Str"")) {
          name=from.substring(from.lastIndexOf(""String_Node_Str"") + 1);
        }
 else         if (from.startsWith(""String_Node_Str"")) {
          name=from.substring(from.lastIndexOf('.') + 1);
        }
        if (to.startsWith(""String_Node_Str"")) {
          name=name + ""String_Node_Str"" + to.substring(to.lastIndexOf(""String_Node_Str"") + 1);
        }
 else         if (to.startsWith(""String_Node_Str"")) {
          name=name + ""String_Node_Str"" + to.substring(from.lastIndexOf('.') + 1);
        }
      }
 else {
        name=node.getLocalName();
      }
    }
    ExtendedArtifactType transformerArtifact=SwitchYardModel.newTransformerArtifact(name);
    String type=node.getLocalName();
    type=type.substring(type.lastIndexOf('.') + 1);
    SrampModelUtils.setCustomProperty(transformerArtifact,SwitchYardModel.PROP_TRANSFORMER_TYPE,type);
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_TRANSFORMS_FROM,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_TRANSFORMS_TO,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,node.getAttribute(""String_Node_Str""));
    }
    derivedArtifacts.add(transformerArtifact);
  }
}","/** 
 * Create derived transformers found in the switchyard.xml.
 * @param derivedArtifacts
 * @param artifact
 * @param rootElement
 * @param xpath
 * @throws XPathExpressionException
 */
private void processTransformers(Collection<BaseArtifactType> derivedArtifacts,BaseArtifactType artifact,Element rootElement,XPath xpath) throws XPathExpressionException {
  NodeList nodes=(NodeList)this.query(xpath,rootElement,""String_Node_Str"",XPathConstants.NODESET);
  for (int idx=0; idx < nodes.getLength(); idx++) {
    Element node=(Element)nodes.item(idx);
    String name=node.getAttribute(""String_Node_Str"");
    if (name == null || name.trim().length() == 0) {
      if (node.hasAttribute(""String_Node_Str"") && node.hasAttribute(""String_Node_Str"")) {
        String from=node.getAttribute(""String_Node_Str"");
        String to=node.getAttribute(""String_Node_Str"");
        if (from.startsWith(""String_Node_Str"")) {
          name=from.substring(from.lastIndexOf(""String_Node_Str"") + 1);
        }
 else         if (from.startsWith(""String_Node_Str"")) {
          name=from.substring(from.lastIndexOf('.') + 1);
        }
        if (to.startsWith(""String_Node_Str"")) {
          name=name + ""String_Node_Str"" + to.substring(to.lastIndexOf(""String_Node_Str"") + 1);
        }
 else         if (to.startsWith(""String_Node_Str"")) {
          name=name + ""String_Node_Str"" + to.substring(to.lastIndexOf('.') + 1);
        }
      }
 else {
        name=node.getLocalName();
      }
    }
    ExtendedArtifactType transformerArtifact=SwitchYardModel.newTransformerArtifact(name);
    String type=node.getLocalName();
    type=type.substring(type.lastIndexOf('.') + 1);
    SrampModelUtils.setCustomProperty(transformerArtifact,SwitchYardModel.PROP_TRANSFORMER_TYPE,type);
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_IMPLEMENTED_BY,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,""String_Node_Str"" + node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_TRANSFORMS_FROM,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,node.getAttribute(""String_Node_Str""));
    }
    if (node.hasAttribute(""String_Node_Str"")) {
      Relationship relationship=SrampModelUtils.addGenericRelationship(transformerArtifact,SwitchYardModel.REL_TRANSFORMS_TO,null);
      relationship.getOtherAttributes().put(UNRESOLVED_REF,node.getAttribute(""String_Node_Str""));
    }
    derivedArtifacts.add(transformerArtifact);
  }
}",0.999168975069252
13013,"/** 
 * @see org.overlord.sramp.shell.api.shell.ShellCommand#execute()
 */
@Override public void execute() throws Exception {
  String filePathArg=this.requiredArgument(0,""String_Node_Str"");
  String artifactTypeArg=this.optionalArgument(1);
  QName clientVarName=new QName(""String_Node_Str"",""String_Node_Str"");
  SrampAtomApiClient client=(SrampAtomApiClient)getContext().getVariable(clientVarName);
  if (client == null) {
    print(""String_Node_Str"");
    return;
  }
  InputStream content=null;
  try {
    File file=new File(filePathArg);
    ArtifactType artifactType=null;
    if (artifactTypeArg != null) {
      artifactType=ArtifactType.valueOf(artifactTypeArg);
    }
 else {
      artifactType=determineArtifactType(file);
    }
    content=FileUtils.openInputStream(file);
    BaseArtifactType artifact=client.uploadArtifact(artifactType,content,file.getName());
    QName artifactVarName=new QName(""String_Node_Str"",""String_Node_Str"");
    getContext().setVariable(artifactVarName,artifact);
    print(""String_Node_Str"");
    PrintArtifactMetaDataVisitor visitor=new PrintArtifactMetaDataVisitor();
    ArtifactVisitorHelper.visitArtifact(visitor,artifact);
  }
 catch (  Exception e) {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + e.getMessage());
    IOUtils.closeQuietly(content);
  }
}","/** 
 * @see org.overlord.sramp.shell.api.shell.ShellCommand#execute()
 */
@Override public void execute() throws Exception {
  String filePathArg=this.requiredArgument(0,""String_Node_Str"");
  String artifactTypeArg=this.optionalArgument(1);
  QName clientVarName=new QName(""String_Node_Str"",""String_Node_Str"");
  SrampAtomApiClient client=(SrampAtomApiClient)getContext().getVariable(clientVarName);
  if (client == null) {
    print(""String_Node_Str"");
    return;
  }
  InputStream content=null;
  try {
    File file=new File(filePathArg);
    ArtifactType artifactType=null;
    if (artifactTypeArg != null) {
      artifactType=ArtifactType.valueOf(artifactTypeArg);
      if (artifactType.isExtendedType()) {
        artifactType=ArtifactType.ExtendedDocument(artifactType.getExtendedType());
      }
    }
 else {
      artifactType=determineArtifactType(file);
    }
    content=FileUtils.openInputStream(file);
    BaseArtifactType artifact=client.uploadArtifact(artifactType,content,file.getName());
    QName artifactVarName=new QName(""String_Node_Str"",""String_Node_Str"");
    getContext().setVariable(artifactVarName,artifact);
    print(""String_Node_Str"");
    PrintArtifactMetaDataVisitor visitor=new PrintArtifactMetaDataVisitor();
    ArtifactVisitorHelper.visitArtifact(visitor,artifact);
  }
 catch (  Exception e) {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + e.getMessage());
    IOUtils.closeQuietly(content);
  }
}",0.9512811259473114
13014,"/** 
 * Performs a batch operation by uploading an s-ramp package archive to the s-ramp server for processing.  The contents of the s-ramp archive will be processed, and the results will be returned as a Map.  The Map is indexed by the S-RAMP Archive entry path, and each each value in the Map will either be a   {@link BaseArtifactType} or an{@link SrampAtomException}, depending on success vs. failure of that entry.
 * @param archive the s-ramp package archive to upload
 * @return the collection of results (one per entry in the s-ramp package)
 * @throws SrampClientException
 * @throws SrampAtomException
 */
public Map<String,?> uploadBatch(SrampArchive archive) throws SrampClientException, SrampAtomException {
  File packageFile=null;
  InputStream packageStream=null;
  try {
    packageFile=archive.pack();
    packageStream=FileUtils.openInputStream(packageFile);
    ClientRequest request=createClientRequest(this.endpoint);
    request.header(""String_Node_Str"",""String_Node_Str"");
    request.body(MediaType.APPLICATION_ZIP,packageStream);
    ClientResponse<MultipartInput> clientResponse=request.post(MultipartInput.class);
    MultipartInput response=clientResponse.getEntity();
    List<InputPart> parts=response.getParts();
    Map<String,Object> rval=new HashMap<String,Object>(parts.size());
    for (    InputPart part : parts) {
      String contentId=part.getHeaders().getFirst(""String_Node_Str"");
      String path=contentId.substring(1,contentId.lastIndexOf('@'));
      HttpResponseBean rbean=part.getBody(HttpResponseBean.class,null);
      if (rbean.getCode() == 201) {
        Entry entry=(Entry)rbean.getBody();
        BaseArtifactType artifact=SrampAtomUtils.unwrapSrampArtifact(entry);
        rval.put(path,artifact);
      }
 else       if (rbean.getCode() == 409) {
        if (MediaType.APPLICATION_SRAMP_ATOM_EXCEPTION.equals(rbean.getHeaders().get(""String_Node_Str""))) {
          SrampAtomException exception=(SrampAtomException)rbean.getBody();
          rval.put(path,exception);
        }
 else {
          String errorReason=(String)rbean.getBody();
          SrampAtomException exception=new SrampAtomException(errorReason);
          rval.put(path,exception);
        }
      }
 else {
        SrampAtomException exception=new SrampAtomException(""String_Node_Str"" + rbean.getCode() + ""String_Node_Str""+ contentId+ ""String_Node_Str"");
        rval.put(path,exception);
      }
    }
    return rval;
  }
 catch (  SrampAtomException e) {
    throw e;
  }
catch (  Throwable e) {
    throw new SrampClientException(e);
  }
 finally {
    IOUtils.closeQuietly(packageStream);
    FileUtils.deleteQuietly(packageFile);
  }
}","/** 
 * Performs a batch operation by uploading an s-ramp package archive to the s-ramp server for processing.  The contents of the s-ramp archive will be processed, and the results will be returned as a Map.  The Map is indexed by the S-RAMP Archive entry path, and each each value in the Map will either be a   {@link BaseArtifactType} or an{@link SrampAtomException}, depending on success vs. failure of that entry.
 * @param archive the s-ramp package archive to upload
 * @return the collection of results (one per entry in the s-ramp package)
 * @throws SrampClientException
 * @throws SrampAtomException
 */
public Map<String,?> uploadBatch(SrampArchive archive) throws SrampClientException, SrampAtomException {
  File packageFile=null;
  InputStream packageStream=null;
  try {
    if (archive.getEntries().isEmpty()) {
      return new HashMap<String,Object>();
    }
    packageFile=archive.pack();
    packageStream=FileUtils.openInputStream(packageFile);
    ClientRequest request=createClientRequest(this.endpoint);
    request.header(""String_Node_Str"",""String_Node_Str"");
    request.body(MediaType.APPLICATION_ZIP,packageStream);
    ClientResponse<MultipartInput> clientResponse=request.post(MultipartInput.class);
    MultipartInput response=clientResponse.getEntity();
    List<InputPart> parts=response.getParts();
    Map<String,Object> rval=new HashMap<String,Object>(parts.size());
    for (    InputPart part : parts) {
      String contentId=part.getHeaders().getFirst(""String_Node_Str"");
      String path=contentId.substring(1,contentId.lastIndexOf('@'));
      HttpResponseBean rbean=part.getBody(HttpResponseBean.class,null);
      if (rbean.getCode() == 201) {
        Entry entry=(Entry)rbean.getBody();
        BaseArtifactType artifact=SrampAtomUtils.unwrapSrampArtifact(entry);
        rval.put(path,artifact);
      }
 else       if (rbean.getCode() == 409) {
        if (MediaType.APPLICATION_SRAMP_ATOM_EXCEPTION.equals(rbean.getHeaders().get(""String_Node_Str""))) {
          SrampAtomException exception=(SrampAtomException)rbean.getBody();
          rval.put(path,exception);
        }
 else {
          String errorReason=(String)rbean.getBody();
          SrampAtomException exception=new SrampAtomException(errorReason);
          rval.put(path,exception);
        }
      }
 else {
        SrampAtomException exception=new SrampAtomException(""String_Node_Str"" + rbean.getCode() + ""String_Node_Str""+ contentId+ ""String_Node_Str"");
        rval.put(path,exception);
      }
    }
    return rval;
  }
 catch (  SrampAtomException e) {
    throw e;
  }
catch (  Throwable e) {
    throw new SrampClientException(e);
  }
 finally {
    IOUtils.closeQuietly(packageStream);
    FileUtils.deleteQuietly(packageFile);
  }
}",0.9832319882071126
13015,"/** 
 * Performs a batch operation by uploading an s-ramp package archive to the s-ramp server for processing.  The contents of the s-ramp archive will be processed, and the results will be returned as a Map.  The Map is indexed by the S-RAMP Archive entry path, and each each value in the Map will either be a   {@link BaseArtifactType} or an{@link SrampAtomException}, depending on success vs. failure of that entry.
 * @param archive the s-ramp package archive to upload
 * @return the collection of results (one per entry in the s-ramp package)
 * @throws SrampClientException
 * @throws SrampAtomException
 */
public Map<String,?> uploadBatch(SrampArchive archive) throws SrampClientException, SrampAtomException {
  File packageFile=null;
  InputStream packageStream=null;
  try {
    packageFile=archive.pack();
    packageStream=FileUtils.openInputStream(packageFile);
    ClientRequest request=createClientRequest(this.endpoint);
    request.header(""String_Node_Str"",""String_Node_Str"");
    request.body(MediaType.APPLICATION_ZIP,packageStream);
    ClientResponse<MultipartInput> clientResponse=request.post(MultipartInput.class);
    MultipartInput response=clientResponse.getEntity();
    List<InputPart> parts=response.getParts();
    Map<String,Object> rval=new HashMap<String,Object>(parts.size());
    for (    InputPart part : parts) {
      String contentId=part.getHeaders().getFirst(""String_Node_Str"");
      String path=contentId.substring(1,contentId.lastIndexOf('@'));
      HttpResponseBean rbean=part.getBody(HttpResponseBean.class,null);
      if (rbean.getCode() == 201) {
        Entry entry=(Entry)rbean.getBody();
        BaseArtifactType artifact=SrampAtomUtils.unwrapSrampArtifact(entry);
        rval.put(path,artifact);
      }
 else       if (rbean.getCode() == 409) {
        if (MediaType.APPLICATION_SRAMP_ATOM_EXCEPTION.equals(rbean.getHeaders().get(""String_Node_Str""))) {
          SrampAtomException exception=(SrampAtomException)rbean.getBody();
          rval.put(path,exception);
        }
 else {
          String errorReason=(String)rbean.getBody();
          SrampAtomException exception=new SrampAtomException(errorReason);
          rval.put(path,exception);
        }
      }
 else {
        SrampAtomException exception=new SrampAtomException(""String_Node_Str"" + rbean.getCode() + ""String_Node_Str""+ contentId+ ""String_Node_Str"");
        rval.put(path,exception);
      }
    }
    return rval;
  }
 catch (  SrampAtomException e) {
    throw e;
  }
catch (  Throwable e) {
    throw new SrampClientException(e);
  }
 finally {
    IOUtils.closeQuietly(packageStream);
    FileUtils.deleteQuietly(packageFile);
  }
}","/** 
 * Performs a batch operation by uploading an s-ramp package archive to the s-ramp server for processing.  The contents of the s-ramp archive will be processed, and the results will be returned as a Map.  The Map is indexed by the S-RAMP Archive entry path, and each each value in the Map will either be a   {@link BaseArtifactType} or an{@link SrampAtomException}, depending on success vs. failure of that entry.
 * @param archive the s-ramp package archive to upload
 * @return the collection of results (one per entry in the s-ramp package)
 * @throws SrampClientException
 * @throws SrampAtomException
 */
public Map<String,?> uploadBatch(SrampArchive archive) throws SrampClientException, SrampAtomException {
  File packageFile=null;
  InputStream packageStream=null;
  try {
    if (archive.getEntries().isEmpty()) {
      return new HashMap<String,Object>();
    }
    packageFile=archive.pack();
    packageStream=FileUtils.openInputStream(packageFile);
    ClientRequest request=createClientRequest(this.endpoint);
    request.header(""String_Node_Str"",""String_Node_Str"");
    request.body(MediaType.APPLICATION_ZIP,packageStream);
    ClientResponse<MultipartInput> clientResponse=request.post(MultipartInput.class);
    MultipartInput response=clientResponse.getEntity();
    List<InputPart> parts=response.getParts();
    Map<String,Object> rval=new HashMap<String,Object>(parts.size());
    for (    InputPart part : parts) {
      String contentId=part.getHeaders().getFirst(""String_Node_Str"");
      String path=contentId.substring(1,contentId.lastIndexOf('@'));
      HttpResponseBean rbean=part.getBody(HttpResponseBean.class,null);
      if (rbean.getCode() == 201) {
        Entry entry=(Entry)rbean.getBody();
        BaseArtifactType artifact=SrampAtomUtils.unwrapSrampArtifact(entry);
        rval.put(path,artifact);
      }
 else       if (rbean.getCode() == 409) {
        if (MediaType.APPLICATION_SRAMP_ATOM_EXCEPTION.equals(rbean.getHeaders().get(""String_Node_Str""))) {
          SrampAtomException exception=(SrampAtomException)rbean.getBody();
          rval.put(path,exception);
        }
 else {
          String errorReason=(String)rbean.getBody();
          SrampAtomException exception=new SrampAtomException(errorReason);
          rval.put(path,exception);
        }
      }
 else {
        SrampAtomException exception=new SrampAtomException(""String_Node_Str"" + rbean.getCode() + ""String_Node_Str""+ contentId+ ""String_Node_Str"");
        rval.put(path,exception);
      }
    }
    return rval;
  }
 catch (  SrampAtomException e) {
    throw e;
  }
catch (  Throwable e) {
    throw new SrampClientException(e);
  }
 finally {
    IOUtils.closeQuietly(packageStream);
    FileUtils.deleteQuietly(packageFile);
  }
}",0.9832319882071126
13016,"/** 
 * @see org.overlord.sramp.shell.api.shell.ShellCommand#execute()
 */
@Override public void execute() throws Exception {
  String filePathArg=this.requiredArgument(0,""String_Node_Str"");
  String artifactTypeArg=this.optionalArgument(1);
  QName clientVarName=new QName(""String_Node_Str"",""String_Node_Str"");
  SrampAtomApiClient client=(SrampAtomApiClient)getContext().getVariable(clientVarName);
  if (client == null) {
    print(""String_Node_Str"");
    return;
  }
  InputStream content=null;
  try {
    File file=new File(filePathArg);
    ArtifactType artifactType=null;
    if (artifactTypeArg != null) {
      artifactType=ArtifactType.valueOf(artifactTypeArg);
    }
 else {
      artifactType=determineArtifactType(file);
    }
    content=FileUtils.openInputStream(file);
    BaseArtifactType artifact=client.uploadArtifact(artifactType,content,file.getName());
    QName artifactVarName=new QName(""String_Node_Str"",""String_Node_Str"");
    getContext().setVariable(artifactVarName,artifact);
    print(""String_Node_Str"");
    PrintArtifactMetaDataVisitor visitor=new PrintArtifactMetaDataVisitor();
    ArtifactVisitorHelper.visitArtifact(visitor,artifact);
  }
 catch (  Exception e) {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + e.getMessage());
    IOUtils.closeQuietly(content);
  }
}","/** 
 * @see org.overlord.sramp.shell.api.shell.ShellCommand#execute()
 */
@Override public void execute() throws Exception {
  String filePathArg=this.requiredArgument(0,""String_Node_Str"");
  String artifactTypeArg=this.optionalArgument(1);
  QName clientVarName=new QName(""String_Node_Str"",""String_Node_Str"");
  SrampAtomApiClient client=(SrampAtomApiClient)getContext().getVariable(clientVarName);
  if (client == null) {
    print(""String_Node_Str"");
    return;
  }
  InputStream content=null;
  try {
    File file=new File(filePathArg);
    ArtifactType artifactType=null;
    if (artifactTypeArg != null) {
      artifactType=ArtifactType.valueOf(artifactTypeArg);
      if (artifactType.isExtendedType()) {
        artifactType=ArtifactType.ExtendedDocument(artifactType.getExtendedType());
      }
    }
 else {
      artifactType=determineArtifactType(file);
    }
    content=FileUtils.openInputStream(file);
    BaseArtifactType artifact=client.uploadArtifact(artifactType,content,file.getName());
    QName artifactVarName=new QName(""String_Node_Str"",""String_Node_Str"");
    getContext().setVariable(artifactVarName,artifact);
    print(""String_Node_Str"");
    PrintArtifactMetaDataVisitor visitor=new PrintArtifactMetaDataVisitor();
    ArtifactVisitorHelper.visitArtifact(visitor,artifact);
  }
 catch (  Exception e) {
    print(""String_Node_Str"");
    print(""String_Node_Str"" + e.getMessage());
    IOUtils.closeQuietly(content);
  }
}",0.9512811259473114
13017,"/** 
 * Called when a progress style notification has error'd out.
 * @param notificationBean
 */
private void onProgressError(NotificationBean notificationBean){
  Notification notification=getNotification(notificationBean.getUuid());
  if (notification != null) {
    notification.getData().setTitle(notificationBean.getTitle());
    notification.getData().setMessage(notificationBean.getMessage());
    notification.getData().setBody(notificationBean.getBody());
    notification.getData().setType(NotificationType.error);
    notification.getWidget().setNotificationTitle(notificationBean.getTitle());
    if (notificationBean.getBody() != null) {
      notification.getWidget().setNotificationMessage(notificationBean.getBody());
    }
 else {
      FlowPanel errorDetails=new FlowPanel();
      if (notification.getData().getMessage() != null) {
        errorDetails.add(new InlineLabel(notification.getData().getMessage()));
      }
      if (notification.getData().getException() != null) {
      }
      notification.getWidget().setNotificationMessage(errorDetails);
    }
    notification.getWidget().removeStyleName(""String_Node_Str"");
    notification.getWidget().addStyleName(""String_Node_Str"");
    resizeNotification(notification.getIndex() + 1);
  }
}","/** 
 * Called when a progress style notification has error'd out.
 * @param notificationBean
 */
private void onProgressError(NotificationBean notificationBean){
  Notification notification=getNotification(notificationBean.getUuid());
  if (notification != null) {
    notification.getData().setTitle(notificationBean.getTitle());
    notification.getData().setMessage(notificationBean.getMessage());
    notification.getData().setMessageWidget(notificationBean.getMessageWidget());
    notification.getData().setType(NotificationType.error);
    notification.getWidget().setNotificationTitle(notificationBean.getTitle());
    if (notificationBean.getMessageWidget() != null) {
      notification.getWidget().setNotificationMessage((Widget)notificationBean.getMessageWidget());
    }
 else {
      FlowPanel errorDetails=new FlowPanel();
      if (notification.getData().getMessage() != null) {
        errorDetails.add(new InlineLabel(notification.getData().getMessage()));
      }
      if (notification.getData().getException() != null) {
      }
      notification.getWidget().setNotificationMessage(errorDetails);
    }
    notification.getWidget().removeStyleName(""String_Node_Str"");
    notification.getWidget().addStyleName(""String_Node_Str"");
    resizeNotification(notification.getIndex() + 1);
  }
}",0.9550038789759504
13018,"/** 
 * Creates the UI widget for the notification.
 * @param notification
 */
private void createNotificationWidget(final Notification notification){
  NotificationWidget widget=this.notificationWidgetFactory.get();
  String additionalClass=""String_Node_Str"" + notification.getData().getType();
  widget.addStyleName(additionalClass);
  widget.setNotificationTitle(notification.getData().getTitle());
  if (notification.getData().getBody() != null) {
    widget.setNotificationMessage(notification.getData().getBody());
  }
 else   if (notification.getData().getType() == NotificationType.error) {
    FlowPanel errorDetails=new FlowPanel();
    if (notification.getData().getMessage() != null) {
      errorDetails.add(new InlineLabel(notification.getData().getMessage()));
    }
    if (notification.getData().getException() != null) {
    }
    widget.setNotificationMessage(errorDetails);
  }
 else {
    widget.setNotificationMessage(notification.getData().getMessage(),notification.getData().getType());
  }
  widget.getCloseButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      notification.getAliveTimer().cancel();
      onNotificationClosed(notification);
    }
  }
);
  widget.addMouseInHandler(new org.overlord.sramp.ui.client.local.events.MouseInEvent.Handler(){
    @Override public void onMouseIn(    MouseInEvent event){
      notification.getAliveTimer().cancel();
      notification.getAutoCloseAnimation().cancel();
    }
  }
);
  widget.addMouseOutHandler(new org.overlord.sramp.ui.client.local.events.MouseOutEvent.Handler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      if (notification.getData().getType() == NotificationType.notification) {
        notification.getAliveTimer().schedule(5000);
      }
    }
  }
);
  notification.setWidget(widget);
}","/** 
 * Creates the UI widget for the notification.
 * @param notification
 */
private void createNotificationWidget(final Notification notification){
  NotificationWidget widget=this.notificationWidgetFactory.get();
  String additionalClass=""String_Node_Str"" + notification.getData().getType();
  widget.addStyleName(additionalClass);
  widget.setNotificationTitle(notification.getData().getTitle());
  if (notification.getData().getMessageWidget() != null) {
    widget.setNotificationMessage((Widget)notification.getData().getMessageWidget());
  }
 else   if (notification.getData().getType() == NotificationType.error) {
    FlowPanel errorDetails=new FlowPanel();
    if (notification.getData().getMessage() != null) {
      errorDetails.add(new InlineLabel(notification.getData().getMessage()));
    }
    if (notification.getData().getException() != null) {
    }
    widget.setNotificationMessage(errorDetails);
  }
 else {
    widget.setNotificationMessage(notification.getData().getMessage(),notification.getData().getType());
  }
  widget.getCloseButton().addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      notification.getAliveTimer().cancel();
      onNotificationClosed(notification);
    }
  }
);
  widget.addMouseInHandler(new org.overlord.sramp.ui.client.local.events.MouseInEvent.Handler(){
    @Override public void onMouseIn(    MouseInEvent event){
      notification.getAliveTimer().cancel();
      notification.getAutoCloseAnimation().cancel();
    }
  }
);
  widget.addMouseOutHandler(new org.overlord.sramp.ui.client.local.events.MouseOutEvent.Handler(){
    @Override public void onMouseOut(    MouseOutEvent event){
      if (notification.getData().getType() == NotificationType.notification) {
        notification.getAliveTimer().schedule(5000);
      }
    }
  }
);
  notification.setWidget(widget);
}",0.9887459807073956
13019,"/** 
 * Called when a progress style notification should be completed.
 * @param notificationBean
 */
private void onProgressComplete(NotificationBean notificationBean){
  Notification notification=getNotification(notificationBean.getUuid());
  if (notification != null) {
    notification.getData().setTitle(notificationBean.getTitle());
    notification.getData().setMessage(notificationBean.getMessage());
    notification.getData().setBody(notificationBean.getBody());
    notification.getData().setType(NotificationType.notification);
    notification.getWidget().setNotificationTitle(notificationBean.getTitle());
    if (notificationBean.getBody() != null) {
      notification.getWidget().setNotificationMessage(notificationBean.getBody());
    }
 else {
      notification.getWidget().setNotificationMessage(notificationBean.getMessage(),NotificationType.notification);
    }
    notification.getWidget().removeStyleName(""String_Node_Str"");
    notification.getWidget().addStyleName(""String_Node_Str"");
    notification.getAliveTimer().schedule(5000);
    resizeNotification(notification.getIndex() + 1);
  }
}","/** 
 * Called when a progress style notification should be completed.
 * @param notificationBean
 */
private void onProgressComplete(NotificationBean notificationBean){
  Notification notification=getNotification(notificationBean.getUuid());
  if (notification != null) {
    notification.getData().setTitle(notificationBean.getTitle());
    notification.getData().setMessage(notificationBean.getMessage());
    notification.getData().setMessageWidget(notificationBean.getMessageWidget());
    notification.getData().setType(NotificationType.notification);
    notification.getWidget().setNotificationTitle(notificationBean.getTitle());
    if (notificationBean.getMessageWidget() != null) {
      notification.getWidget().setNotificationMessage((Widget)notificationBean.getMessageWidget());
    }
 else {
      notification.getWidget().setNotificationMessage(notificationBean.getMessage(),NotificationType.notification);
    }
    notification.getWidget().removeStyleName(""String_Node_Str"");
    notification.getWidget().addStyleName(""String_Node_Str"");
    notification.getAliveTimer().schedule(5000);
    resizeNotification(notification.getIndex() + 1);
  }
}",0.9491673970201576
13020,"/** 
 * @see org.overlord.sramp.common.repository.jcr.ClassificationHelper#normalize(java.net.URI)
 */
@Override public Collection<URI> normalize(URI classification) throws SrampException {
  List<SrampOntology> ontologies=getOntologies();
  for (  SrampOntology ontology : ontologies) {
    Class sclass=ontology.findClass(classification);
    if (sclass == null) {
      throw new InvalidClassifiedByException(classification.toString());
    }
    return sclass.normalize();
  }
  return Collections.emptySet();
}","/** 
 * @see org.overlord.sramp.common.repository.jcr.ClassificationHelper#normalize(java.net.URI)
 */
@Override public Collection<URI> normalize(URI classification) throws SrampException {
  List<SrampOntology> ontologies=getOntologies();
  for (  SrampOntology ontology : ontologies) {
    Class sclass=ontology.findClass(classification);
    if (sclass != null) {
      return sclass.normalize();
    }
  }
  throw new InvalidClassifiedByException(classification.toString());
}",0.8844221105527639
13021,"/** 
 * @see org.overlord.sramp.visitors.ArtifactVisitorAdapter#visit(org.s_ramp.xmlns._2010.s_ramp.UserDefinedArtifactType)
 */
@SuppressWarnings(""String_Node_Str"") @Override public void visit(UserDefinedArtifactType artifact){
  super.visit(artifact);
  if (this.atomEntry != null) {
    String userType=artifact.getUserType();
    this.atomEntry.getExtensionAttributes().put(SrampConstants.SRAMP_DERIVED_QNAME,userType);
  }
}","/** 
 * @see org.overlord.sramp.visitors.ArtifactVisitorAdapter#visit(org.s_ramp.xmlns._2010.s_ramp.UserDefinedArtifactType)
 */
@SuppressWarnings(""String_Node_Str"") @Override public void visit(UserDefinedArtifactType artifact){
  super.visit(artifact);
  if (this.atomEntry != null) {
    String userType=artifact.getUserType();
    this.atomEntry.getExtensionAttributes().put(SrampConstants.SRAMP_USER_TYPE_QNAME,userType);
  }
}",0.986046511627907
13022,"/** 
 * @see org.overlord.sramp.visitors.ArtifactVisitorAdapter#visit(org.s_ramp.xmlns._2010.s_ramp.UserDefinedArtifactType)
 */
@SuppressWarnings(""String_Node_Str"") @Override public void visit(UserDefinedArtifactType artifact){
  super.visit(artifact);
  if (this.atomEntry != null) {
    String userType=artifact.getUserType();
    this.atomEntry.getExtensionAttributes().put(SrampConstants.SRAMP_DERIVED_QNAME,userType);
  }
}","/** 
 * @see org.overlord.sramp.visitors.ArtifactVisitorAdapter#visit(org.s_ramp.xmlns._2010.s_ramp.UserDefinedArtifactType)
 */
@SuppressWarnings(""String_Node_Str"") @Override public void visit(UserDefinedArtifactType artifact){
  super.visit(artifact);
  if (this.atomEntry != null) {
    String userType=artifact.getUserType();
    this.atomEntry.getExtensionAttributes().put(SrampConstants.SRAMP_USER_TYPE_QNAME,userType);
  }
}",0.986046511627907
13023,"/** 
 * Finds the assets from the given JAR file.
 * @param brmsBaseUrl
 * @param pkgName
 * @param userId
 * @param password
 * @param packageJar
 */
private void addAssetsToPackageToBRMSFromJar(String brmsBaseUrl,String pkgName,String userId,String password,File packageJar) throws Exception {
  String urlStr=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  Set<String> exclusions=new HashSet<String>();
  exclusions.add(""String_Node_Str"");
  exclusions.add(""String_Node_Str"");
  JarFile jarFile=null;
  String assetPrefix=""String_Node_Str"" + pkgName;
  try {
    jarFile=new JarFile(packageJar);
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      String entryName=entry.getName();
      if (entryName.startsWith(assetPrefix) && !entry.isDirectory()) {
        String assetName=new File(entryName).getName();
        if (!exclusions.contains(assetName)) {
          print(""String_Node_Str"" + entryName);
          ClientRequest addAssetRequest=fac.createRequest(urlStr);
          InputStream is=null;
          try {
            is=jarFile.getInputStream(entry);
            print(""String_Node_Str"" + entryName + ""String_Node_Str""+ urlStr);
            uploadToBrms(entryName,is,addAssetRequest);
          }
  finally {
            is.close();
          }
        }
      }
    }
  }
  finally {
    if (jarFile != null)     jarFile.close();
  }
}","/** 
 * Finds the assets from the given JAR file.
 * @param brmsBaseUrl
 * @param pkgName
 * @param userId
 * @param password
 * @param packageJar
 */
private void addAssetsToPackageToBRMSFromJar(String brmsBaseUrl,String pkgName,String userId,String password,File packageJar) throws Exception {
  String urlStr=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  Set<String> exclusions=new HashSet<String>();
  exclusions.add(""String_Node_Str"");
  exclusions.add(""String_Node_Str"");
  JarFile jarFile=null;
  String assetPrefix=""String_Node_Str"" + pkgName;
  try {
    jarFile=new JarFile(packageJar);
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      String entryName=entry.getName();
      if (entryName.startsWith(assetPrefix) && !entry.isDirectory()) {
        String assetName=new File(entryName).getName();
        if (!exclusions.contains(assetName)) {
          print(""String_Node_Str"" + entryName);
          ClientRequest addAssetRequest=fac.createRequest(urlStr);
          InputStream is=null;
          try {
            is=jarFile.getInputStream(entry);
            print(""String_Node_Str"" + entryName + ""String_Node_Str""+ urlStr);
            uploadToBrms(assetName,is,addAssetRequest);
          }
  finally {
            is.close();
          }
        }
      }
    }
  }
  finally {
    if (jarFile != null)     jarFile.close();
  }
}",0.9965729952021932
13024,"/** 
 * Uploads assets to the correct package in BRMS.
 * @param brmsBaseUrl
 * @param pkgName
 * @param userId
 * @param password
 * @param packagePath
 * @throws Exception
 */
public void addAssetsToPackageToBRMS(String brmsBaseUrl,String pkgName,String userId,String password,String packagePath) throws Exception {
  if (packagePath != null) {
    File packageJar=new File(packagePath);
    if (!packageJar.isFile())     throw new Exception(""String_Node_Str"" + packagePath);
    addAssetsToPackageToBRMSFromJar(brmsBaseUrl,pkgName,userId,password,packageJar);
  }
 else {
    addAssetsToPackageToBRMSFromClasspath(brmsBaseUrl,pkgName,userId,password);
  }
}","/** 
 * Uploads assets to the correct package in BRMS.
 * @param brmsBaseUrl
 * @param pkgName
 * @param userId
 * @param password
 * @param packagePath
 * @throws Exception
 */
public void addAssetsToPackageToBRMS(String brmsBaseUrl,String pkgName,String userId,String password,String packagePath) throws Exception {
  String urlStr=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  Credentials credentials=new UsernamePasswordCredentials(userId,password);
  DefaultHttpClient httpClient=new DefaultHttpClient();
  httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY,credentials);
  ClientExecutor clientExecutor=new ApacheHttpClient4Executor(httpClient);
  fac=new ClientRequestFactory(clientExecutor,new URI(urlStr));
  if (packagePath != null) {
    File packageJar=new File(packagePath);
    if (!packageJar.isFile())     throw new Exception(""String_Node_Str"" + packagePath);
    addAssetsToPackageToBRMSFromJar(brmsBaseUrl,pkgName,userId,password,packageJar);
  }
 else {
    addAssetsToPackageToBRMSFromClasspath(brmsBaseUrl,pkgName,userId,password);
  }
  String urlCompile=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  ClientRequest compileRequest=fac.createRequest(urlCompile);
  ClientResponse<InputStream> compileResponse=compileRequest.get(InputStream.class);
  if (compileResponse.getStatus() == 200) {
    print(""String_Node_Str"");
  }
 else {
    System.err.println(compileResponse.getStatus() + ""String_Node_Str"" + compileResponse.getResponseStatus().getReasonPhrase());
  }
}",0.6005459508644222
13025,"/** 
 * Finds the assets from the current classpath.
 * @param brmsBaseUrl
 * @param pkgName
 * @param userId
 * @param password
 */
private void addAssetsToPackageToBRMSFromClasspath(String brmsBaseUrl,String pkgName,String userId,String password) throws Exception {
  String urlStr=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  String dir=""String_Node_Str"" + pkgName;
  Credentials credentials=new UsernamePasswordCredentials(userId,password);
  DefaultHttpClient httpClient=new DefaultHttpClient();
  httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY,credentials);
  ClientExecutor clientExecutor=new ApacheHttpClient4Executor(httpClient);
  fac=new ClientRequestFactory(clientExecutor,new URI(urlStr));
  URL url=this.getClass().getResource(dir);
  if (url == null)   throw new Exception(""String_Node_Str"" + dir + ""String_Node_Str"");
  String path=url.toURI().getSchemeSpecificPart();
  File srampPackageDir=new File(path);
  if (srampPackageDir.exists()) {
    FilenameFilter droolsFiles=new FilenameFilter(){
      @Override public boolean accept(      File file,      String name){
        return !name.startsWith(""String_Node_Str"");
      }
    }
;
    File[] fileList=srampPackageDir.listFiles(droolsFiles);
    for (    File file : fileList) {
      ClientRequest addAssetRequest=fac.createRequest(urlStr);
      InputStream is=file.toURI().toURL().openStream();
      print(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ urlStr);
      uploadToBrms(file.getName(),is,addAssetRequest);
    }
  }
 else   if (path.indexOf(""String_Node_Str"") > 0) {
    String[] paths=path.split(""String_Node_Str"");
    Enumeration<JarEntry> en=new JarFile(new File(new URI(paths[0]))).entries();
    while (en.hasMoreElements()) {
      JarEntry entry=en.nextElement();
      String name=entry.getName();
      if (!entry.isDirectory() && !name.contains(""String_Node_Str"") && name.startsWith(dir.substring(1))) {
        String fileName=name.substring(name.lastIndexOf(""String_Node_Str"") + 1,name.length());
        InputStream is=this.getClass().getResourceAsStream(""String_Node_Str"" + name);
        ClientRequest addAssetRequest=fac.createRequest(urlStr);
        print(""String_Node_Str"" + name + ""String_Node_Str""+ urlStr);
        uploadToBrms(fileName,is,addAssetRequest);
      }
    }
  }
  String urlCompile=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  ClientRequest compileRequest=fac.createRequest(urlCompile);
  ClientResponse<InputStream> compileResponse=compileRequest.get(InputStream.class);
  if (compileResponse.getStatus() == 200) {
    print(""String_Node_Str"");
  }
 else {
    System.err.println(compileResponse.getStatus() + ""String_Node_Str"" + compileResponse.getResponseStatus().getReasonPhrase());
  }
}","/** 
 * Finds the assets from the current classpath.
 * @param brmsBaseUrl
 * @param pkgName
 * @param userId
 * @param password
 */
private void addAssetsToPackageToBRMSFromClasspath(String brmsBaseUrl,String pkgName,String userId,String password) throws Exception {
  String urlStr=brmsBaseUrl + ""String_Node_Str"" + pkgName+ ""String_Node_Str"";
  String dir=""String_Node_Str"" + pkgName;
  URL url=this.getClass().getResource(dir);
  if (url == null)   throw new Exception(""String_Node_Str"" + dir + ""String_Node_Str"");
  String path=url.toURI().getSchemeSpecificPart();
  File srampPackageDir=new File(path);
  if (srampPackageDir.exists()) {
    FilenameFilter droolsFiles=new FilenameFilter(){
      @Override public boolean accept(      File file,      String name){
        return !name.startsWith(""String_Node_Str"");
      }
    }
;
    File[] fileList=srampPackageDir.listFiles(droolsFiles);
    for (    File file : fileList) {
      ClientRequest addAssetRequest=fac.createRequest(urlStr);
      InputStream is=file.toURI().toURL().openStream();
      print(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ urlStr);
      uploadToBrms(file.getName(),is,addAssetRequest);
    }
  }
 else   if (path.indexOf(""String_Node_Str"") > 0) {
    String[] paths=path.split(""String_Node_Str"");
    Enumeration<JarEntry> en=new JarFile(new File(new URI(paths[0]))).entries();
    while (en.hasMoreElements()) {
      JarEntry entry=en.nextElement();
      String name=entry.getName();
      if (!entry.isDirectory() && !name.contains(""String_Node_Str"") && name.startsWith(dir.substring(1))) {
        String fileName=name.substring(name.lastIndexOf(""String_Node_Str"") + 1,name.length());
        InputStream is=this.getClass().getResourceAsStream(""String_Node_Str"" + name);
        ClientRequest addAssetRequest=fac.createRequest(urlStr);
        print(""String_Node_Str"" + name + ""String_Node_Str""+ urlStr);
        uploadToBrms(fileName,is,addAssetRequest);
      }
    }
  }
}",0.3218487394957983
13026,"/** 
 * @see org.overlord.sramp.client.shell.ShellCommandReader#read()
 */
@Override public final ShellCommand read() throws Exception {
  String line=readLine();
  if (line == null) {
    return null;
  }
  if (line.trim().length() == 0) {
    return new NoOpCommand();
  }
  String[] split=line.split(""String_Node_Str"");
  String encodedCommandName=split[0];
  QName commandName=null;
  if (encodedCommandName != null) {
    if (encodedCommandName.contains(""String_Node_Str"")) {
      String[] nameSplit=encodedCommandName.split(""String_Node_Str"");
      commandName=new QName(nameSplit[0],nameSplit[1]);
    }
 else {
      commandName=new QName(""String_Node_Str"",encodedCommandName);
    }
  }
  String[] args=Arrays.copyOfRange(split,1,split.length);
  return factory.createCommand(commandName,args);
}","/** 
 * @see org.overlord.sramp.client.shell.ShellCommandReader#read()
 */
@Override public final ShellCommand read() throws Exception {
  String line=readLine();
  if (line == null) {
    return null;
  }
  if (line.trim().length() == 0) {
    return new NoOpCommand();
  }
  String[] split=line.split(""String_Node_Str"");
  String encodedCommandName=split[0];
  QName commandName=null;
  if (encodedCommandName != null) {
    if (encodedCommandName.contains(""String_Node_Str"") && !encodedCommandName.endsWith(""String_Node_Str"")) {
      String[] nameSplit=encodedCommandName.split(""String_Node_Str"");
      commandName=new QName(nameSplit[0],nameSplit[1]);
    }
 else {
      commandName=new QName(""String_Node_Str"",encodedCommandName);
    }
  }
  String[] args=Arrays.copyOfRange(split,1,split.length);
  return factory.createCommand(commandName,args);
}",0.9693693693693692
13027,"/** 
 * Displays a welcome message to the user.
 */
private void displayWelcomeMessage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","/** 
 * Displays a welcome message to the user.
 */
private void displayWelcomeMessage(){
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.336734693877551
13028,"/** 
 * @see org.overlord.sramp.repository.PersistenceManager#persistOntology(org.overlord.sramp.ontology.SrampOntology)
 */
@Override public SrampOntology persistOntology(SrampOntology ontology) throws RepositoryException {
  Session session=null;
  if (ontology.getUuid() == null) {
    ontology.setUuid(UUID.randomUUID().toString());
  }
  String ontologyPath=""String_Node_Str"" + ontology.getUuid();
  try {
    session=JCRRepository.getSession();
    if (session.nodeExists(ontologyPath)) {
      throw new RepositoryException(""String_Node_Str"");
    }
 else {
      JcrTools tools=new JcrTools();
      Node ontologiesNode=tools.findOrCreateNode(session,""String_Node_Str"",null,null);
      Node ontologyNode=ontologiesNode.addNode(ontology.getUuid(),""String_Node_Str"");
      o2jcr.write(ontology,ontologyNode);
      session.save();
      log.debug(""String_Node_Str"",ontology.getUuid());
      return ontology;
    }
  }
 catch (  RepositoryException e) {
    log.error(""String_Node_Str"" + ontology.getUuid(),e);
    throw e;
  }
catch (  Throwable t) {
    log.error(""String_Node_Str"" + ontology.getUuid(),t);
    throw new RepositoryException(t);
  }
 finally {
    JCRRepository.logoutQuietly(session);
  }
}","/** 
 * @see org.overlord.sramp.repository.PersistenceManager#persistOntology(org.overlord.sramp.ontology.SrampOntology)
 */
@Override public SrampOntology persistOntology(SrampOntology ontology) throws RepositoryException {
  Session session=null;
  if (ontology.getUuid() == null) {
    ontology.setUuid(UUID.randomUUID().toString());
  }
  String ontologyPath=""String_Node_Str"" + ontology.getUuid();
  try {
    session=JCRRepository.getSession();
    if (session.nodeExists(ontologyPath)) {
      throw new RepositoryException(""String_Node_Str"");
    }
 else {
      JcrTools tools=new JcrTools();
      Node ontologiesNode=tools.findOrCreateNode(session,""String_Node_Str"",""String_Node_Str"");
      Node ontologyNode=ontologiesNode.addNode(ontology.getUuid(),""String_Node_Str"");
      o2jcr.write(ontology,ontologyNode);
      session.save();
      log.debug(""String_Node_Str"",ontology.getUuid());
      return ontology;
    }
  }
 catch (  RepositoryException e) {
    log.error(""String_Node_Str"" + ontology.getUuid(),e);
    throw e;
  }
catch (  Throwable t) {
    log.error(""String_Node_Str"" + ontology.getUuid(),t);
    throw new RepositoryException(t);
  }
 finally {
    JCRRepository.logoutQuietly(session);
  }
}",0.9893529893529892
13029,"/** 
 * Can set a property (built-in or custom) on the entry.
 * @param archive
 * @param entryPath
 * @param context
 * @throws Exception
 */
private void executeSetProperty(SrampArchive archive,String entryPath,ShellContext context) throws Exception {
  String propNameArg=requiredArgument(2,""String_Node_Str"");
  String propValArg=requiredArgument(3,""String_Node_Str"");
  SrampArchiveEntry entry=archive.getEntry(entryPath);
  BaseArtifactType metaData=entry.getMetaData();
  SrampModelUtils.setCustomProperty(metaData,propNameArg,propValArg);
  archive.updateEntry(entry,null);
  System.out.println(""String_Node_Str"");
}","/** 
 * Can set a property (built-in or custom) on the entry.
 * @param archive
 * @param entryPath
 * @param context
 * @throws Exception
 */
private void executeSetProperty(SrampArchive archive,String entryPath,ShellContext context) throws Exception {
  String propNameArg=requiredArgument(2,""String_Node_Str"");
  String propValArg=requiredArgument(3,""String_Node_Str"");
  SrampArchiveEntry entry=archive.getEntry(entryPath);
  BaseArtifactType metaData=entry.getMetaData();
  if (""String_Node_Str"".equals(propNameArg)) {
    metaData.setName(propValArg);
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
    metaData.setDescription(propValArg);
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
    metaData.setVersion(propValArg);
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
    metaData.setCreatedBy(propValArg);
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
    metaData.setLastModifiedBy(propValArg);
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
    metaData.setUuid(propValArg);
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
  }
 else   if (""String_Node_Str"".equals(propNameArg)) {
  }
  SrampModelUtils.setCustomProperty(metaData,propNameArg,propValArg);
  archive.updateEntry(entry,null);
  System.out.println(""String_Node_Str"");
}",0.6476388168137001
13030,"/** 
 * Tests adding a wsdl document.
 * @throws Exception
 */
@Test public void testWsdlDocumentCreate() throws Exception {
  String artifactFileName=""String_Node_Str"";
  InputStream contentStream=this.getClass().getResourceAsStream(""String_Node_Str"" + artifactFileName);
  String uuid=null;
  try {
    ClientRequest request=new ClientRequest(generateURL(""String_Node_Str""));
    request.header(""String_Node_Str"",artifactFileName);
    request.body(""String_Node_Str"",contentStream);
    ClientResponse<Entry> response=request.post(Entry.class);
    Entry entry=response.getEntity();
    Assert.assertEquals(artifactFileName,entry.getTitle());
    BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
    Assert.assertTrue(arty instanceof WsdlDocument);
    WsdlDocument doc=(WsdlDocument)arty;
    Assert.assertEquals(artifactFileName,doc.getName());
    Assert.assertEquals(Long.valueOf(1642),doc.getContentSize());
    Assert.assertEquals(""String_Node_Str"",doc.getContentType());
    uuid=doc.getUuid();
  }
  finally {
    IOUtils.closeQuietly(contentStream);
  }
  ClientRequest request=new ClientRequest(generateURL(""String_Node_Str"" + uuid));
  ClientResponse<Entry> response=request.get(Entry.class);
  Entry entry=response.getEntity();
  BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  Assert.assertNotNull(arty);
  Assert.assertTrue(arty instanceof WsdlDocument);
  WsdlDocument wsdlDoc=(WsdlDocument)arty;
  Assert.assertEquals(Long.valueOf(1642),wsdlDoc.getContentSize());
  Assert.assertEquals(""String_Node_Str"",wsdlDoc.getName());
  ClientRequest frequest=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Feed> fresponse=frequest.get(Feed.class);
  Feed feed=fresponse.getEntity();
  Assert.assertNotNull(feed);
  Assert.assertEquals(2,feed.getEntries().size());
  String findReqMsgUuid=null;
  for (  Entry atomEntry : feed.getEntries()) {
    if (""String_Node_Str"".equals(atomEntry.getTitle())) {
      findReqMsgUuid=atomEntry.getId().toString();
    }
  }
  Assert.assertNotNull(findReqMsgUuid);
}","/** 
 * Tests adding a wsdl document.
 * @throws Exception
 */
@Test public void testWsdlDocumentCreate() throws Exception {
  String artifactFileName=""String_Node_Str"";
  InputStream contentStream=this.getClass().getResourceAsStream(""String_Node_Str"" + artifactFileName);
  String uuid=null;
  try {
    ClientRequest request=new ClientRequest(generateURL(""String_Node_Str""));
    request.header(""String_Node_Str"",artifactFileName);
    request.body(""String_Node_Str"",contentStream);
    ClientResponse<Entry> response=request.post(Entry.class);
    Entry entry=response.getEntity();
    Assert.assertEquals(artifactFileName,entry.getTitle());
    BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
    Assert.assertTrue(arty instanceof WsdlDocument);
    WsdlDocument doc=(WsdlDocument)arty;
    Assert.assertEquals(artifactFileName,doc.getName());
    Assert.assertEquals(Long.valueOf(1642),doc.getContentSize());
    Assert.assertEquals(""String_Node_Str"",doc.getContentType());
    uuid=doc.getUuid();
  }
  finally {
    IOUtils.closeQuietly(contentStream);
  }
  ClientRequest request=new ClientRequest(generateURL(""String_Node_Str"" + uuid));
  ClientResponse<Entry> response=request.get(Entry.class);
  Entry entry=response.getEntity();
  BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  Assert.assertNotNull(arty);
  Assert.assertTrue(arty instanceof WsdlDocument);
  WsdlDocument wsdlDoc=(WsdlDocument)arty;
  Assert.assertEquals(Long.valueOf(1642),wsdlDoc.getContentSize());
  Assert.assertEquals(""String_Node_Str"",wsdlDoc.getName());
  ClientRequest frequest=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Feed> fresponse=frequest.get(Feed.class);
  Feed feed=fresponse.getEntity();
  Assert.assertNotNull(feed);
  Assert.assertEquals(2,feed.getEntries().size());
  String findReqMsgUuid=null;
  for (  Entry atomEntry : feed.getEntries()) {
    if (""String_Node_Str"".equals(atomEntry.getTitle())) {
      findReqMsgUuid=atomEntry.getId().toString();
    }
  }
  Assert.assertNotNull(findReqMsgUuid);
  request=new ClientRequest(generateURL(""String_Node_Str"" + findReqMsgUuid));
  response=request.get(Entry.class);
  entry=response.getEntity();
  arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  Assert.assertNotNull(arty);
  Assert.assertTrue(arty instanceof Message);
  Message message=(Message)arty;
  Assert.assertEquals(""String_Node_Str"",message.getNCName());
  Assert.assertEquals(""String_Node_Str"",message.getNamespace());
}",0.90554459785229
13031,"/** 
 * @see org.overlord.sramp.repository.jcr.ArtifactToJCRNodeVisitor.JCRReferenceFactory#createReference(java.lang.String)
 */
@Override public Value createReference(String uuid){
  try {
    javax.jcr.query.QueryManager jcrQueryManager=session.getWorkspace().getQueryManager();
    String jcrSql2Query=String.format(""String_Node_Str"",uuid);
    javax.jcr.query.Query jcrQuery=jcrQueryManager.createQuery(jcrSql2Query,QueryLanguage.JCR_SQL2);
    QueryResult jcrQueryResult=jcrQuery.execute();
    NodeIterator jcrNodes=jcrQueryResult.getNodes();
    if (!jcrNodes.hasNext()) {
      throw new Exception(""String_Node_Str"" + uuid);
    }
    if (jcrNodes.getSize() > 1) {
      throw new Exception(""String_Node_Str"" + uuid);
    }
    Node node=jcrNodes.nextNode();
    return session.getValueFactory().createValue(node,false);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + uuid,e);
  }
  return null;
}","/** 
 * @see org.overlord.sramp.repository.jcr.ArtifactToJCRNodeVisitor.JCRReferenceFactory#createReference(java.lang.String)
 */
@Override public Value createReference(String uuid){
  try {
    Node node=findArtifactNodeByUuid(session,uuid);
    if (node == null) {
      throw new Exception(""String_Node_Str"" + uuid);
    }
    return session.getValueFactory().createValue(node,false);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + uuid,e);
  }
  return null;
}",0.383737517831669
13032,"/** 
 * @see org.overlord.sramp.repository.PersistenceManager#getArtifact(java.lang.String,org.overlord.sramp.ArtifactType)
 */
@Override public BaseArtifactType getArtifact(String uuid,ArtifactType type) throws RepositoryException {
  Session session=null;
  String artifactPath=MapToJCRPath.getArtifactPath(uuid,type);
  try {
    session=JCRRepository.getSession();
    if (session.nodeExists(artifactPath)) {
      Node artifactNode=session.getNode(artifactPath);
      return JCRNodeToArtifactFactory.createArtifact(session,artifactNode,type);
    }
 else {
      return null;
    }
  }
 catch (  RepositoryException re) {
    throw re;
  }
catch (  Throwable t) {
    throw new RepositoryException(t);
  }
 finally {
    JCRRepository.logoutQuietly(session);
  }
}","/** 
 * @see org.overlord.sramp.repository.PersistenceManager#getArtifact(java.lang.String,org.overlord.sramp.ArtifactType)
 */
@Override public BaseArtifactType getArtifact(String uuid,ArtifactType type) throws RepositoryException {
  Session session=null;
  try {
    session=JCRRepository.getSession();
    Node artifactNode=null;
    if (type.getArtifactType().isDerived()) {
      artifactNode=findArtifactNodeByUuid(session,uuid);
    }
 else {
      String artifactPath=MapToJCRPath.getArtifactPath(uuid,type);
      if (session.nodeExists(artifactPath)) {
        artifactNode=session.getNode(artifactPath);
      }
    }
    if (artifactNode != null) {
      return JCRNodeToArtifactFactory.createArtifact(session,artifactNode,type);
    }
 else {
      return null;
    }
  }
 catch (  RepositoryException re) {
    throw re;
  }
catch (  Throwable t) {
    throw new RepositoryException(t);
  }
 finally {
    JCRRepository.logoutQuietly(session);
  }
}",0.7716262975778547
13033,"@Override public void shutdown(){
  JCRRepository.shutdown();
}","/** 
 * @see org.overlord.sramp.repository.PersistenceManager#shutdown()
 */
@Override public void shutdown(){
  JCRRepository.shutdown();
}",0.6206896551724138
13034,"/** 
 * @see org.overlord.sramp.visitors.HierarchicalArtifactVisitorAdapter#visitWsdlDerived(org.s_ramp.xmlns._2010.s_ramp.WsdlDerivedArtifactType)
 */
@Override protected void visitWsdlDerived(WsdlDerivedArtifactType artifact){
}","/** 
 * @see org.overlord.sramp.visitors.HierarchicalArtifactVisitorAdapter#visitWsdlDerived(org.s_ramp.xmlns._2010.s_ramp.WsdlDerivedArtifactType)
 */
@Override protected void visitWsdlDerived(WsdlDerivedArtifactType artifact){
  artifact.setNamespace(getProperty(jcrNode,""String_Node_Str""));
}",0.8761904761904762
13035,"/** 
 * Tests adding a wsdl document.
 * @throws Exception
 */
@Test public void testWsdlDocumentCreate() throws Exception {
  String artifactFileName=""String_Node_Str"";
  InputStream contentStream=this.getClass().getResourceAsStream(""String_Node_Str"" + artifactFileName);
  String uuid=null;
  try {
    ClientRequest request=new ClientRequest(generateURL(""String_Node_Str""));
    request.header(""String_Node_Str"",artifactFileName);
    request.body(""String_Node_Str"",contentStream);
    ClientResponse<Entry> response=request.post(Entry.class);
    Entry entry=response.getEntity();
    Assert.assertEquals(artifactFileName,entry.getTitle());
    BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
    Assert.assertTrue(arty instanceof WsdlDocument);
    WsdlDocument doc=(WsdlDocument)arty;
    Assert.assertEquals(artifactFileName,doc.getName());
    Assert.assertEquals(Long.valueOf(1642),doc.getContentSize());
    Assert.assertEquals(""String_Node_Str"",doc.getContentType());
    uuid=doc.getUuid();
  }
  finally {
    IOUtils.closeQuietly(contentStream);
  }
  ClientRequest request=new ClientRequest(generateURL(""String_Node_Str"" + uuid));
  ClientResponse<Entry> response=request.get(Entry.class);
  Entry entry=response.getEntity();
  BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  Assert.assertNotNull(arty);
  Assert.assertTrue(arty instanceof WsdlDocument);
  WsdlDocument wsdlDoc=(WsdlDocument)arty;
  Assert.assertEquals(Long.valueOf(1642),wsdlDoc.getContentSize());
  Assert.assertEquals(""String_Node_Str"",wsdlDoc.getName());
}","/** 
 * Tests adding a wsdl document.
 * @throws Exception
 */
@Test public void testWsdlDocumentCreate() throws Exception {
  String artifactFileName=""String_Node_Str"";
  InputStream contentStream=this.getClass().getResourceAsStream(""String_Node_Str"" + artifactFileName);
  String uuid=null;
  try {
    ClientRequest request=new ClientRequest(generateURL(""String_Node_Str""));
    request.header(""String_Node_Str"",artifactFileName);
    request.body(""String_Node_Str"",contentStream);
    ClientResponse<Entry> response=request.post(Entry.class);
    Entry entry=response.getEntity();
    Assert.assertEquals(artifactFileName,entry.getTitle());
    BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
    Assert.assertTrue(arty instanceof WsdlDocument);
    WsdlDocument doc=(WsdlDocument)arty;
    Assert.assertEquals(artifactFileName,doc.getName());
    Assert.assertEquals(Long.valueOf(1642),doc.getContentSize());
    Assert.assertEquals(""String_Node_Str"",doc.getContentType());
    uuid=doc.getUuid();
  }
  finally {
    IOUtils.closeQuietly(contentStream);
  }
  ClientRequest request=new ClientRequest(generateURL(""String_Node_Str"" + uuid));
  ClientResponse<Entry> response=request.get(Entry.class);
  Entry entry=response.getEntity();
  BaseArtifactType arty=SrampAtomUtils.unwrapSrampArtifact(entry);
  Assert.assertNotNull(arty);
  Assert.assertTrue(arty instanceof WsdlDocument);
  WsdlDocument wsdlDoc=(WsdlDocument)arty;
  Assert.assertEquals(Long.valueOf(1642),wsdlDoc.getContentSize());
  Assert.assertEquals(""String_Node_Str"",wsdlDoc.getName());
  ClientRequest frequest=new ClientRequest(generateURL(""String_Node_Str""));
  ClientResponse<Feed> fresponse=frequest.get(Feed.class);
  Feed feed=fresponse.getEntity();
  Assert.assertNotNull(feed);
  Assert.assertEquals(2,feed.getEntries().size());
  String findReqMsgUuid=null;
  for (  Entry atomEntry : feed.getEntries()) {
    if (""String_Node_Str"".equals(atomEntry.getTitle())) {
      findReqMsgUuid=atomEntry.getId().toString();
    }
  }
  Assert.assertNotNull(findReqMsgUuid);
}",0.8660812294182217
13036,"/** 
 * @see org.overlord.sramp.repository.PersistenceManager#persistDerivedArtifacts(org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,java.util.Collection)
 */
@Override public void persistDerivedArtifacts(BaseArtifactType sourceArtifact,Collection<DerivedArtifactType> artifacts) throws RepositoryException {
  Session session=null;
  try {
    session=JCRRepository.getSession();
    JcrTools tools=new JcrTools();
    ArtifactType sourceArtifactType=ArtifactType.valueOf(sourceArtifact);
    String sourceArtifactPath=MapToJCRPath.getArtifactPath(sourceArtifact.getUuid(),sourceArtifactType);
    if (!session.nodeExists(sourceArtifactPath)) {
      throw new RepositoryException(""String_Node_Str"" + sourceArtifact.getUuid());
    }
    Node sourceArtifactNode=session.getNode(sourceArtifactPath);
    JCRReferenceFactoryImpl referenceFactory=new JCRReferenceFactoryImpl(session);
    for (    DerivedArtifactType derivedArtifact : artifacts) {
      if (derivedArtifact.getUuid() == null) {
        derivedArtifact.setUuid(UUID.randomUUID().toString());
      }
      ArtifactType derivedArtifactType=ArtifactType.valueOf(derivedArtifact);
      String jcrNodeName=derivedArtifactType.getArtifactType().getApiType().value();
      jcrNodeName=JCRConstants.SRAMP_ + StringUtils.uncapitalize(jcrNodeName);
      Node derivedArtifactNode=tools.findOrCreateChild(sourceArtifactNode,derivedArtifact.getName(),jcrNodeName);
      derivedArtifactNode.setProperty(JCRConstants.SRAMP_UUID,derivedArtifact.getUuid());
      derivedArtifactNode.setProperty(JCRConstants.SRAMP_ARTIFACT_MODEL,derivedArtifactType.getArtifactType().getModel());
      derivedArtifactNode.setProperty(JCRConstants.SRAMP_ARTIFACT_TYPE,derivedArtifactType.getArtifactType().getType());
      ArtifactToJCRNodeVisitor visitor=new ArtifactToJCRNodeVisitor(derivedArtifactNode,referenceFactory);
      ArtifactVisitorHelper.visitArtifact(visitor,derivedArtifact);
      if (visitor.hasError())       throw visitor.getError();
      log.debug(""String_Node_Str"",derivedArtifact.getName(),derivedArtifact.getUuid());
    }
    session.save();
    if (log.isDebugEnabled()) {
      printArtifactGraph(sourceArtifact.getUuid(),sourceArtifactType);
    }
  }
 catch (  RepositoryException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new RepositoryException(t);
  }
 finally {
    JCRRepository.logoutQuietly(session);
  }
}","/** 
 * @see org.overlord.sramp.repository.PersistenceManager#persistDerivedArtifacts(org.s_ramp.xmlns._2010.s_ramp.BaseArtifactType,java.util.Collection)
 */
@Override public void persistDerivedArtifacts(BaseArtifactType sourceArtifact,Collection<DerivedArtifactType> artifacts) throws RepositoryException {
  Session session=null;
  try {
    session=JCRRepository.getSession();
    ArtifactType sourceArtifactType=ArtifactType.valueOf(sourceArtifact);
    String sourceArtifactPath=MapToJCRPath.getArtifactPath(sourceArtifact.getUuid(),sourceArtifactType);
    if (!session.nodeExists(sourceArtifactPath)) {
      throw new RepositoryException(""String_Node_Str"" + sourceArtifact.getUuid());
    }
    Node sourceArtifactNode=session.getNode(sourceArtifactPath);
    JCRReferenceFactoryImpl referenceFactory=new JCRReferenceFactoryImpl(session);
    for (    DerivedArtifactType derivedArtifact : artifacts) {
      if (derivedArtifact.getUuid() == null) {
        derivedArtifact.setUuid(UUID.randomUUID().toString());
      }
      ArtifactType derivedArtifactType=ArtifactType.valueOf(derivedArtifact);
      String jcrNodeType=derivedArtifactType.getArtifactType().getApiType().value();
      jcrNodeType=JCRConstants.SRAMP_ + StringUtils.uncapitalize(jcrNodeType);
      String nodeName=derivedArtifact.getUuid();
      Node derivedArtifactNode=sourceArtifactNode.addNode(nodeName,jcrNodeType);
      derivedArtifactNode.setProperty(JCRConstants.SRAMP_UUID,derivedArtifact.getUuid());
      derivedArtifactNode.setProperty(JCRConstants.SRAMP_ARTIFACT_MODEL,derivedArtifactType.getArtifactType().getModel());
      derivedArtifactNode.setProperty(JCRConstants.SRAMP_ARTIFACT_TYPE,derivedArtifactType.getArtifactType().getType());
      ArtifactToJCRNodeVisitor visitor=new ArtifactToJCRNodeVisitor(derivedArtifactNode,referenceFactory);
      ArtifactVisitorHelper.visitArtifact(visitor,derivedArtifact);
      if (visitor.hasError())       throw visitor.getError();
      log.debug(""String_Node_Str"",derivedArtifact.getName(),derivedArtifact.getUuid());
    }
    session.save();
    if (log.isDebugEnabled()) {
      printArtifactGraph(sourceArtifact.getUuid(),sourceArtifactType);
    }
  }
 catch (  RepositoryException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new RepositoryException(t);
  }
 finally {
    JCRRepository.logoutQuietly(session);
  }
}",0.9352337036260742
13037,"/** 
 * Parses the build date string into a   {@link Date}.
 * @param dateString
 */
private static Date parseBuildDate(String dateString){
  if (dateString.equals(""String_Node_Str""))   return new Date();
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  try {
    return format.parse(dateString);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Parses the build date string into a   {@link Date}.
 * @param dateString
 */
private static Date parseBuildDate(String dateString){
  if (dateString.equals(""String_Node_Str""))   return new Date();
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  try {
    return format.parse(dateString);
  }
 catch (  ParseException e) {
  }
  format=new SimpleDateFormat(""String_Node_Str"");
  try {
    return format.parse(dateString);
  }
 catch (  ParseException e) {
  }
  return new Date();
}",0.8168701442841287
13038,"/** 
 * Gets the artifact content from the s-ramp repository and stores it in the   {@link InputData}object for use by Maven.
 * @param gavInfo
 * @param inputData
 * @throws TransferFailedException
 * @throws ResourceDoesNotExistException
 * @throws AuthorizationException
 */
private void doGetArtifact(MavenGavInfo gavInfo,InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {
  ClassLoader oldCtxCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(SrampWagon.class.getClassLoader());
  try {
    String endpoint=getSrampEndpoint();
    SrampAtomApiClient client=new SrampAtomApiClient(endpoint);
    BaseArtifactType artifact=findExistingArtifact(client,gavInfo);
    if (artifact == null)     throw new ResourceDoesNotExistException(""String_Node_Str"" + gavInfo.getName() + ""String_Node_Str"");
    this.archive.addEntry(gavInfo.getFullName(),artifact,null);
    ArtifactType type=ArtifactType.valueOf(artifact);
    InputStream artifactContent=client.getArtifactContent(type,artifact.getUuid());
    inputData.setInputStream(artifactContent);
  }
 catch (  ResourceDoesNotExistException e) {
    throw e;
  }
catch (  SrampClientException e) {
    if (e.getCause() instanceof HttpHostConnectException)     this.logger.debug(""String_Node_Str"" + e.getMessage());
 else     this.logger.error(e.getMessage(),e);
  }
catch (  Throwable t) {
    this.logger.error(t.getMessage(),t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldCtxCL);
  }
}","/** 
 * Gets the artifact content from the s-ramp repository and stores it in the   {@link InputData}object for use by Maven.
 * @param gavInfo
 * @param inputData
 * @throws TransferFailedException
 * @throws ResourceDoesNotExistException
 * @throws AuthorizationException
 */
private void doGetArtifact(MavenGavInfo gavInfo,InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {
  ClassLoader oldCtxCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(SrampWagon.class.getClassLoader());
  try {
    String endpoint=getSrampEndpoint();
    SrampAtomApiClient client=new SrampAtomApiClient(endpoint);
    BaseArtifactType artifact=findExistingArtifact(client,gavInfo);
    if (artifact == null)     throw new ResourceDoesNotExistException(""String_Node_Str"" + gavInfo.getName() + ""String_Node_Str"");
    this.archive.addEntry(gavInfo.getFullName(),artifact,null);
    ArtifactType type=ArtifactType.valueOf(artifact);
    InputStream artifactContent=client.getArtifactContent(type,artifact.getUuid());
    inputData.setInputStream(artifactContent);
  }
 catch (  ResourceDoesNotExistException e) {
    throw e;
  }
catch (  SrampClientException e) {
    if (e.getCause() instanceof HttpHostConnectException) {
      this.logger.debug(""String_Node_Str"" + e.getMessage());
    }
 else {
      this.logger.error(e.getMessage(),e);
    }
    throw new ResourceDoesNotExistException(""String_Node_Str"" + gavInfo.getName());
  }
catch (  Throwable t) {
    this.logger.error(t.getMessage(),t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldCtxCL);
  }
}",0.9653035935563816
13039,"/** 
 * Gets the artifact content from the s-ramp repository and stores it in the   {@link InputData}object for use by Maven.
 * @param gavInfo
 * @param inputData
 * @throws TransferFailedException
 * @throws ResourceDoesNotExistException
 * @throws AuthorizationException
 */
private void doGetArtifact(MavenGavInfo gavInfo,InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {
  ClassLoader oldCtxCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(SrampWagon.class.getClassLoader());
  try {
    String endpoint=getSrampEndpoint();
    SrampAtomApiClient client=new SrampAtomApiClient(endpoint);
    BaseArtifactType artifact=findExistingArtifact(client,gavInfo);
    if (artifact == null)     throw new ResourceDoesNotExistException(""String_Node_Str"" + gavInfo.getName() + ""String_Node_Str"");
    this.archive.addEntry(gavInfo.getFullName(),artifact,null);
    ArtifactType type=ArtifactType.valueOf(artifact);
    InputStream artifactContent=client.getArtifactContent(type,artifact.getUuid());
    inputData.setInputStream(artifactContent);
  }
 catch (  ResourceDoesNotExistException e) {
    throw e;
  }
catch (  SrampClientException e) {
    if (e.getCause() instanceof HttpHostConnectException)     this.logger.debug(""String_Node_Str"" + e.getMessage());
 else     this.logger.error(e.getMessage(),e);
  }
catch (  Throwable t) {
    this.logger.error(t.getMessage(),t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldCtxCL);
  }
}","/** 
 * Gets the artifact content from the s-ramp repository and stores it in the   {@link InputData}object for use by Maven.
 * @param gavInfo
 * @param inputData
 * @throws TransferFailedException
 * @throws ResourceDoesNotExistException
 * @throws AuthorizationException
 */
private void doGetArtifact(MavenGavInfo gavInfo,InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException {
  ClassLoader oldCtxCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(SrampWagon.class.getClassLoader());
  try {
    String endpoint=getSrampEndpoint();
    SrampAtomApiClient client=new SrampAtomApiClient(endpoint);
    BaseArtifactType artifact=findExistingArtifact(client,gavInfo);
    if (artifact == null)     throw new ResourceDoesNotExistException(""String_Node_Str"" + gavInfo.getName() + ""String_Node_Str"");
    this.archive.addEntry(gavInfo.getFullName(),artifact,null);
    ArtifactType type=ArtifactType.valueOf(artifact);
    InputStream artifactContent=client.getArtifactContent(type,artifact.getUuid());
    inputData.setInputStream(artifactContent);
  }
 catch (  ResourceDoesNotExistException e) {
    throw e;
  }
catch (  SrampClientException e) {
    if (e.getCause() instanceof HttpHostConnectException) {
      this.logger.debug(""String_Node_Str"" + e.getMessage());
    }
 else {
      this.logger.error(e.getMessage(),e);
    }
    throw new ResourceDoesNotExistException(""String_Node_Str"" + gavInfo.getName());
  }
catch (  Throwable t) {
    this.logger.error(t.getMessage(),t);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldCtxCL);
  }
}",0.9653035935563816
13040,"/** 
 * Called to configure the custom JCR node types.
 */
private static void configureNodeTypes() throws RepositoryException {
  Session session=null;
  InputStream is=null;
  try {
    session=JCRRepository.getSession();
    NodeTypeManager manager=(NodeTypeManager)session.getWorkspace().getNodeTypeManager();
    if (!manager.hasNodeType(SRAMP_UUID)) {
      is=JCRRepository.class.getResourceAsStream(""String_Node_Str"");
      manager.registerNodeTypes(is,true);
    }
    if (!manager.hasNodeType(OVERLORD_ARTIFACT)) {
      is=JCRRepository.class.getResourceAsStream(""String_Node_Str"");
      manager.registerNodeTypes(is,true);
    }
  }
 catch (  LoginException e) {
    throw e;
  }
catch (  NoSuchWorkspaceException e) {
    throw e;
  }
catch (  RepositoryException e) {
    throw e;
  }
catch (  IOException e) {
    throw new RepositoryException(e);
  }
catch (  RuntimeException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(is);
    if (session != null)     session.logout();
  }
}","/** 
 * Called to configure the custom JCR node types.
 */
private static void configureNodeTypes() throws RepositoryException {
  Session session=null;
  InputStream is=null;
  try {
    session=JCRRepository.getSession();
    NamespaceRegistry namespaceRegistry=session.getWorkspace().getNamespaceRegistry();
    namespaceRegistry.registerNamespace(JCRConstants.OVERLORD,JCRConstants.OVERLORD_NS);
    namespaceRegistry.registerNamespace(JCRConstants.SRAMP_PROPERTIES,JCRConstants.SRAMP_PROPERTIES_NS);
    NodeTypeManager manager=(NodeTypeManager)session.getWorkspace().getNodeTypeManager();
    if (!manager.hasNodeType(SRAMP_UUID)) {
      is=JCRRepository.class.getResourceAsStream(""String_Node_Str"");
      manager.registerNodeTypes(is,true);
    }
    if (!manager.hasNodeType(OVERLORD_ARTIFACT)) {
      is=JCRRepository.class.getResourceAsStream(""String_Node_Str"");
      manager.registerNodeTypes(is,true);
    }
  }
 catch (  LoginException e) {
    throw e;
  }
catch (  NoSuchWorkspaceException e) {
    throw e;
  }
catch (  RepositoryException e) {
    throw e;
  }
catch (  IOException e) {
    throw new RepositoryException(e);
  }
catch (  RuntimeException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(is);
    if (session != null)     session.logout();
  }
}",0.8778791829639288
13041,"/** 
 * Convenience method for getting a JCR session from the repo singleton.
 * @throws LoginException
 * @throws NoSuchWorkspaceException
 * @throws RepositoryException
 */
public static Session getSession() throws LoginException, NoSuchWorkspaceException, RepositoryException {
  AnonymousCredentials cred=new AnonymousCredentials();
  Session session=getInstance().login(cred,WORKSPACE_NAME);
  session.setNamespacePrefix(OVERLORD,OVERLORD_NS);
  session.setNamespacePrefix(SRAMP_PROPERTIES,SRAMP_PROPERTIES_NS);
  return session;
}","/** 
 * Convenience method for getting a JCR session from the repo singleton.
 * @throws LoginException
 * @throws NoSuchWorkspaceException
 * @throws RepositoryException
 */
public static Session getSession() throws LoginException, NoSuchWorkspaceException, RepositoryException {
  AnonymousCredentials cred=new AnonymousCredentials();
  return getInstance().login(cred,WORKSPACE_NAME);
}",0.825945945945946
13042,"/** 
 * Gets all of the custom s-ramp property names currently stored on the given JCR node.
 * @param jcrNode
 * @throws RepositoryException 
 */
private static Set<String> getNodePropertyNames(Node jcrNode) throws RepositoryException {
  String srampPropsPrefix=JCRConstants.SRAMP_PROPERTIES + ""String_Node_Str"";
  Set<String> rval=new HashSet<String>();
  PropertyIterator properties=jcrNode.getProperties();
  while (properties.hasNext()) {
    Property prop=properties.nextProperty();
    String propName=prop.getName();
    if (propName.startsWith(srampPropsPrefix)) {
      propName=propName.substring(7);
      rval.add(propName);
    }
  }
  return rval;
}","/** 
 * Gets all of the custom s-ramp property names currently stored on the given JCR node.
 * @param jcrNode
 * @throws RepositoryException 
 */
private static Set<String> getNodePropertyNames(Node jcrNode) throws RepositoryException {
  String srampPropsPrefix=JCRConstants.SRAMP_PROPERTIES + ""String_Node_Str"";
  int srampPropsPrefixLen=srampPropsPrefix.length();
  Set<String> rval=new HashSet<String>();
  PropertyIterator properties=jcrNode.getProperties();
  while (properties.hasNext()) {
    Property prop=properties.nextProperty();
    String propName=prop.getName();
    if (propName.startsWith(srampPropsPrefix)) {
      propName=propName.substring(srampPropsPrefixLen);
      rval.add(propName);
    }
  }
  return rval;
}",0.9478943611705924
13043,"/** 
 * Maps the base artifact model meta data (from the JCR node to the s-ramp artifact).
 * @param jcrNode
 * @param artifact
 * @throws DatatypeConfigurationException 
 * @throws RepositoryException 
 */
protected static void mapBaseArtifactMetaData(Node jcrNode,BaseArtifactType artifact) throws DatatypeConfigurationException, RepositoryException {
  artifact.setCreatedBy(getProperty(jcrNode,""String_Node_Str""));
  XMLGregorianCalendar createdTS;
  createdTS=DatatypeFactory.newInstance().newXMLGregorianCalendar(getProperty(jcrNode,""String_Node_Str""));
  artifact.setCreatedTimestamp(createdTS);
  artifact.setDescription(getProperty(jcrNode,""String_Node_Str""));
  artifact.setLastModifiedBy(getProperty(jcrNode,""String_Node_Str""));
  XMLGregorianCalendar modifiedTS=DatatypeFactory.newInstance().newXMLGregorianCalendar(getProperty(jcrNode,""String_Node_Str""));
  artifact.setLastModifiedTimestamp(modifiedTS);
  artifact.setName(getProperty(jcrNode,""String_Node_Str""));
  artifact.setUuid(getProperty(jcrNode,""String_Node_Str""));
  artifact.setVersion(getProperty(jcrNode,""String_Node_Str""));
  String srampPropsPrefix=JCRConstants.SRAMP_PROPERTIES + ""String_Node_Str"";
  PropertyIterator properties=jcrNode.getProperties();
  while (properties.hasNext()) {
    Property property=properties.nextProperty();
    String propQName=property.getName();
    if (propQName.startsWith(srampPropsPrefix)) {
      String propName=propQName.substring(7);
      String propValue=property.getValue().getString();
      org.s_ramp.xmlns._2010.s_ramp.Property srampProp=new org.s_ramp.xmlns._2010.s_ramp.Property();
      srampProp.setPropertyName(propName);
      srampProp.setPropertyValue(propValue);
      artifact.getProperty().add(srampProp);
    }
  }
}","/** 
 * Maps the base artifact model meta data (from the JCR node to the s-ramp artifact).
 * @param jcrNode
 * @param artifact
 * @throws DatatypeConfigurationException 
 * @throws RepositoryException 
 */
protected static void mapBaseArtifactMetaData(Node jcrNode,BaseArtifactType artifact) throws DatatypeConfigurationException, RepositoryException {
  artifact.setCreatedBy(getProperty(jcrNode,""String_Node_Str""));
  XMLGregorianCalendar createdTS;
  createdTS=DatatypeFactory.newInstance().newXMLGregorianCalendar(getProperty(jcrNode,""String_Node_Str""));
  artifact.setCreatedTimestamp(createdTS);
  artifact.setDescription(getProperty(jcrNode,""String_Node_Str""));
  artifact.setLastModifiedBy(getProperty(jcrNode,""String_Node_Str""));
  XMLGregorianCalendar modifiedTS=DatatypeFactory.newInstance().newXMLGregorianCalendar(getProperty(jcrNode,""String_Node_Str""));
  artifact.setLastModifiedTimestamp(modifiedTS);
  artifact.setName(getProperty(jcrNode,""String_Node_Str""));
  artifact.setUuid(getProperty(jcrNode,""String_Node_Str""));
  artifact.setVersion(getProperty(jcrNode,""String_Node_Str""));
  String srampPropsPrefix=JCRConstants.SRAMP_PROPERTIES + ""String_Node_Str"";
  int srampPropsPrefixLen=srampPropsPrefix.length();
  PropertyIterator properties=jcrNode.getProperties();
  while (properties.hasNext()) {
    Property property=properties.nextProperty();
    String propQName=property.getName();
    if (propQName.startsWith(srampPropsPrefix)) {
      String propName=propQName.substring(srampPropsPrefixLen);
      String propValue=property.getValue().getString();
      org.s_ramp.xmlns._2010.s_ramp.Property srampProp=new org.s_ramp.xmlns._2010.s_ramp.Property();
      srampProp.setPropertyName(propName);
      srampProp.setPropertyValue(propValue);
      artifact.getProperty().add(srampProp);
    }
  }
}",0.979591836734694
13044,"/** 
 * Gets the key into the i18n messages.properties.  This returns a key that will be used to lookup a localized title for this place.  It will look up the localized title using the standard   {@link ILocalizationService}.  Subclasses can optionally override this to provide a different key.
 */
public String getTitleKey(){
  return ""String_Node_Str"" + getClass().getSimpleName().toLowerCase() + ""String_Node_Str"";
}","/** 
 * Gets the key into the i18n messages.properties.  This returns a key that will be used to lookup a localized title for this place.  It will look up the localized title using the standard   {@link ILocalizationService}.  Subclasses can optionally override this to provide a different key.
 */
public String getTitleKey(){
  String[] ksplit=getClass().toString().split(""String_Node_Str"");
  String k=ksplit[ksplit.length - 1];
  return ""String_Node_Str"" + k.toLowerCase() + ""String_Node_Str"";
}",0.8269858541893362
13045,"public static void showTags(){
  List<CucumberFeature> features=CucumberService.loadFeatures();
  Comparator<Tag> byName=Comparator.comparing(Tag::getName);
  Supplier<TreeSet<Tag>> supplier=() -> new TreeSet<>(byName);
  SortedSet<Tag> tags=features.stream().flatMap(cucumberFeature -> cucumberFeature.getFeature().getTags().stream()).sorted(Comparator.comparing(Tag::getName)).collect(Collectors.toCollection(supplier));
  render(tags);
}","public static void showTags(){
  List<CucumberFeature> features=CucumberService.loadFeatures();
  Comparator<Tag> byName=Comparator.comparing(Tag::getName);
  Supplier<TreeSet<Tag>> supplier=() -> new TreeSet<>(byName);
  SortedSet<Tag> tags=features.stream().flatMap(cucumberFeature -> cucumberFeature.getGherkinFeature().getTags().stream()).sorted(Comparator.comparing(Tag::getName)).collect(Collectors.toCollection(supplier));
  render(tags);
}",0.992108229988726
13046,"@Override protected boolean isValueExpectedRecursive(XExpression expr){
  EObject container=expr.eContainer();
  if (container instanceof RichString || container instanceof RichStringForLoop) {
    return true;
  }
  return super.isValueExpectedRecursive(expr);
}","@Override protected boolean isValueExpectedRecursive(XExpression expr){
  EObject container=expr.eContainer();
  if (container instanceof RichString || container instanceof RichStringForLoop || container instanceof XtendField) {
    return true;
  }
  return super.isValueExpectedRecursive(expr);
}",0.9376114081996436
13047,"public XtendFormatterConfig getFormatterConfiguration(Resource resource){
  IProject project=null;
  if (resource.getURI().isPlatform()) {
    Iterable<Pair<IStorage,IProject>> storages=mapper.getStorages(resource.getURI());
    for (    Pair<IStorage,IProject> pair : storages) {
      project=pair.getSecond();
      if (project != null) {
        break;
      }
    }
  }
  IPreferenceStore store=preferenceStoreAccess.getContextPreferenceStore(project);
  Map<String,String> storedValues=new HashMap<String,String>();
  for (  String key : new XtendFormatterConfig().asMap().keySet()) {
    String value=store.getString(key);
    if (value != null && !value.isEmpty())     storedValues.put(key,value);
  }
  return new XtendFormatterConfig(storedValues);
}","public XtendFormatterConfig getFormatterConfiguration(Resource resource){
  IProject project=null;
  if (resource.getURI().isPlatform()) {
    Iterable<Pair<IStorage,IProject>> storages=mapper.getStorages(resource.getURI());
    for (    Pair<IStorage,IProject> pair : storages) {
      project=pair.getSecond();
      if (project != null) {
        break;
      }
    }
  }
  IPreferenceStore store=preferenceStoreAccess.getContextPreferenceStore(project);
  Map<String,String> storedValues=new HashMap<String,String>();
  for (  String key : new XtendFormatterConfig().asMap().keySet()) {
    String value=store.getString(key);
    if (value != null && value.length() != 0)     storedValues.put(key,value);
  }
  return new XtendFormatterConfig(storedValues);
}",0.9783322390019698
13048,"@Override protected void updateWidget(){
  final boolean hasKey=getKey() != null;
  boolean enabled=hasKey && getEnabled();
  label.setEnabled(enabled);
  minText.setEnabled(enabled);
  maxText.setEnabled(enabled);
  minMaxRange=new NewLineConfig(""String_Node_Str"");
  if (hasKey) {
    try {
      String s=getPreferences().get(getKey());
      minMaxRange=new NewLineConfig(s);
    }
 catch (    NumberFormatException e) {
    }
  }
  fillFields(minMaxRange);
}","@Override protected void updateWidget(){
  final boolean hasKey=getKey() != null;
  boolean enabled=hasKey && getEnabled();
  label.setEnabled(enabled);
  minText.setEnabled(enabled);
  maxText.setEnabled(enabled);
  minMaxRange=new NewLineConfig(""String_Node_Str"");
  if (hasKey) {
    try {
      String s=(String)getPreferences().get(getKey());
      minMaxRange=new NewLineConfig(s);
    }
 catch (    NumberFormatException e) {
    }
  }
  fillFields(minMaxRange);
}",0.9914346895074948
13049,"private static void setLatestCompliance(Map map){
  JavaModelUtil.set50ComplianceOptions(map);
}","private static void setLatestCompliance(Map map){
}",0.6938775510204082
13050,"@Override public List<?> readProfiles(IScopeContext scope) throws CoreException {
  return readProfilesFromString(scope.getNode(xtendNodeID).get(XTEND_PROFILES_KEY,null));
}","@Override public List readProfiles(IScopeContext scope) throws CoreException {
  return readProfilesFromString(scope.getNode(xtendNodeID).get(XTEND_PROFILES_KEY,null));
}",0.9912536443148688
13051,"public void collectAllReferences(XtextResource resource,ReferenceAcceptor acceptor){
  XtendFile xtendFile=getXtendFile(resource);
  TreeIterator<EObject> contents=EcoreUtil.getAllContents(xtendFile,true);
  while (contents.hasNext()) {
    EObject next=contents.next();
    if (next instanceof XtendTypeDeclaration) {
      Set<EObject> elements=associations.getJvmElements(next);
      if (!elements.isEmpty()) {
        EObject type=elements.iterator().next();
        if (type instanceof JvmDeclaredType) {
          acceptor.setThisType((JvmDeclaredType)type);
        }
      }
    }
 else     if (next instanceof JvmTypeReference) {
      acceptor.acceptType((JvmTypeReference)next);
    }
 else     if (next instanceof XAnnotation) {
      acceptor.acceptType(((XAnnotation)next).getAnnotationType());
    }
 else     if (next instanceof XInstanceOfExpression) {
      acceptor.acceptType(((XInstanceOfExpression)next).getType());
    }
 else     if (next instanceof XConstructorCall) {
      acceptor.acceptType(((XConstructorCall)next).getConstructor().getDeclaringType());
    }
 else     if (next instanceof XTypeLiteral) {
      acceptor.acceptType(((XTypeLiteral)next).getType());
    }
 else     if (next instanceof XFeatureCall) {
      final XFeatureCall featureCall=(XFeatureCall)next;
      if (featureCall.getDeclaringType() == null) {
        final JvmIdentifiableElement member=featureCall.getFeature();
        if (member instanceof JvmOperation) {
          JvmOperation operation=(JvmOperation)member;
          if (operation.isStatic()) {
            if (operation.getParameters().size() > featureCall.getExplicitArguments().size()) {
              acceptor.acceptStaticExtensionImport(operation);
            }
 else {
              acceptor.acceptStaticImport(operation);
            }
          }
        }
        if (member instanceof JvmField) {
          if (((JvmField)member).isStatic()) {
            acceptor.acceptStaticImport((JvmMember)member);
          }
        }
      }
 else {
        acceptor.acceptType(featureCall.getDeclaringType());
      }
    }
 else     if (next instanceof XMemberFeatureCall || next instanceof XBinaryOperation || next instanceof XUnaryOperation|| next instanceof XAssignment) {
      final XAbstractFeatureCall featureCall=(XAbstractFeatureCall)next;
      final JvmIdentifiableElement member=featureCall.getFeature();
      if (member instanceof JvmOperation) {
        if (((JvmOperation)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
      if (member instanceof JvmField) {
        if (((JvmField)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
    }
  }
}","public void collectAllReferences(XtextResource resource,ReferenceAcceptor acceptor){
  XtendFile xtendFile=getXtendFile(resource);
  TreeIterator<EObject> contents=EcoreUtil.getAllContents(xtendFile,true);
  while (contents.hasNext()) {
    EObject next=contents.next();
    if (next instanceof XtendTypeDeclaration) {
      Set<EObject> elements=associations.getJvmElements(next);
      if (!elements.isEmpty()) {
        EObject type=elements.iterator().next();
        if (type instanceof JvmDeclaredType) {
          acceptor.setThisType((JvmDeclaredType)type);
        }
      }
    }
 else     if (next instanceof JvmTypeReference) {
      acceptor.acceptType((JvmTypeReference)next);
    }
 else     if (next instanceof XAnnotation) {
      acceptor.acceptType(((XAnnotation)next).getAnnotationType());
    }
 else     if (next instanceof XInstanceOfExpression) {
      acceptor.acceptType(((XInstanceOfExpression)next).getType());
    }
 else     if (next instanceof XConstructorCall) {
      acceptor.acceptType(((XConstructorCall)next).getConstructor().getDeclaringType());
    }
 else     if (next instanceof XTypeLiteral) {
      acceptor.acceptType(((XTypeLiteral)next).getType());
    }
 else     if (next instanceof XFeatureCall) {
      final XFeatureCall featureCall=(XFeatureCall)next;
      if (featureCall.getDeclaringType() == null) {
        final JvmIdentifiableElement member=featureCall.getFeature();
        if (member instanceof JvmOperation) {
          JvmOperation operation=(JvmOperation)member;
          if (operation.isStatic()) {
            if (!operation.isVarArgs() && operation.getParameters().size() > featureCall.getExplicitArguments().size()) {
              acceptor.acceptStaticExtensionImport(operation);
            }
 else {
              acceptor.acceptStaticImport(operation);
            }
          }
        }
        if (member instanceof JvmField) {
          if (((JvmField)member).isStatic()) {
            acceptor.acceptStaticImport((JvmMember)member);
          }
        }
      }
 else {
        acceptor.acceptType(featureCall.getDeclaringType());
      }
    }
 else     if (next instanceof XMemberFeatureCall || next instanceof XBinaryOperation || next instanceof XUnaryOperation|| next instanceof XAssignment) {
      final XAbstractFeatureCall featureCall=(XAbstractFeatureCall)next;
      final JvmIdentifiableElement member=featureCall.getFeature();
      if (member instanceof JvmOperation) {
        if (((JvmOperation)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
      if (member instanceof JvmField) {
        if (((JvmField)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
    }
  }
}",0.995248538011696
13052,"public void acceptStaticImport(JvmMember member){
  final JvmDeclaredType declaringType=member.getDeclaringType();
  JvmDeclaredType currentlyChecked=thisType;
  while (currentlyChecked != null) {
    if (currentlyChecked == declaringType)     return;
    final JvmTypeReference typeRefToSuperClass=IterableExtensions.findFirst(currentlyChecked.getSuperTypes(),new Function1<JvmTypeReference,Boolean>(){
      public Boolean apply(      JvmTypeReference type){
        if (type.getType() instanceof JvmGenericType) {
          JvmGenericType genericType=(JvmGenericType)type.getType();
          return !genericType.isInterface();
        }
        return false;
      }
    }
);
    currentlyChecked=typeRefToSuperClass == null ? null : (JvmDeclaredType)typeRefToSuperClass.getType();
  }
  staticMembers.add(declaringType);
}","public void acceptStaticImport(JvmMember member){
  if (thisType == member.getDeclaringType())   return;
  if (knownTypesForStaticImports == null) {
    JvmParameterizedTypeReference reference=TypesFactory.eINSTANCE.createJvmParameterizedTypeReference();
    reference.setType(thisType);
    knownTypesForStaticImports=superTypeCollector.collectSuperTypesAsRawTypes(reference);
  }
  if (knownTypesForStaticImports.contains(member.getDeclaringType()))   return;
  staticMembers.add(member.getDeclaringType());
}",0.1644245142002989
13053,"public void setThisType(JvmDeclaredType declaredType){
  this.thisType=declaredType;
}","public void setThisType(JvmDeclaredType declaredType){
  this.thisType=declaredType;
  knownTypesForStaticImports=null;
}",0.8309178743961353
13054,"public void collectAllReferences(XtextResource resource,ReferenceAcceptor acceptor){
  XtendFile xtendFile=getXtendFile(resource);
  TreeIterator<EObject> contents=EcoreUtil.getAllContents(xtendFile,true);
  while (contents.hasNext()) {
    EObject next=contents.next();
    if (next instanceof JvmTypeReference) {
      acceptor.acceptType((JvmTypeReference)next);
    }
 else     if (next instanceof XAnnotation) {
      acceptor.acceptType(((XAnnotation)next).getAnnotationType());
    }
 else     if (next instanceof XInstanceOfExpression) {
      acceptor.acceptType(((XInstanceOfExpression)next).getType());
    }
 else     if (next instanceof XConstructorCall) {
      acceptor.acceptType(((XConstructorCall)next).getConstructor().getDeclaringType());
    }
 else     if (next instanceof XTypeLiteral) {
      acceptor.acceptType(((XTypeLiteral)next).getType());
    }
 else     if (next instanceof XFeatureCall) {
      final XFeatureCall featureCall=(XFeatureCall)next;
      if (featureCall.getDeclaringType() == null) {
        final JvmIdentifiableElement member=featureCall.getFeature();
        if (member instanceof JvmOperation) {
          if (((JvmOperation)member).isStatic())           acceptor.acceptStaticImport((JvmMember)member);
        }
        if (member instanceof JvmField) {
          if (((JvmField)member).isStatic())           acceptor.acceptStaticImport((JvmMember)member);
        }
      }
 else {
        acceptor.acceptType(featureCall.getDeclaringType());
      }
    }
 else     if (next instanceof XMemberFeatureCall || next instanceof XBinaryOperation || next instanceof XUnaryOperation|| next instanceof XAssignment) {
      final XAbstractFeatureCall featureCall=(XAbstractFeatureCall)next;
      final JvmIdentifiableElement member=featureCall.getFeature();
      if (member instanceof JvmOperation) {
        if (((JvmOperation)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
      if (member instanceof JvmField) {
        if (((JvmField)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
    }
  }
}","public void collectAllReferences(XtextResource resource,ReferenceAcceptor acceptor){
  XtendFile xtendFile=getXtendFile(resource);
  TreeIterator<EObject> contents=EcoreUtil.getAllContents(xtendFile,true);
  while (contents.hasNext()) {
    EObject next=contents.next();
    if (next instanceof JvmTypeReference) {
      acceptor.acceptType((JvmTypeReference)next);
    }
 else     if (next instanceof XAnnotation) {
      acceptor.acceptType(((XAnnotation)next).getAnnotationType());
    }
 else     if (next instanceof XInstanceOfExpression) {
      acceptor.acceptType(((XInstanceOfExpression)next).getType());
    }
 else     if (next instanceof XConstructorCall) {
      acceptor.acceptType(((XConstructorCall)next).getConstructor().getDeclaringType());
    }
 else     if (next instanceof XTypeLiteral) {
      acceptor.acceptType(((XTypeLiteral)next).getType());
    }
 else     if (next instanceof XFeatureCall) {
      final XFeatureCall featureCall=(XFeatureCall)next;
      if (featureCall.getDeclaringType() == null) {
        final JvmIdentifiableElement member=featureCall.getFeature();
        if (member instanceof JvmOperation) {
          JvmOperation operation=(JvmOperation)member;
          if (operation.isStatic()) {
            if (operation.getParameters().size() > featureCall.getExplicitArguments().size()) {
              acceptor.acceptStaticExtensionImport(operation);
            }
 else {
              acceptor.acceptStaticImport(operation);
            }
          }
        }
        if (member instanceof JvmField) {
          if (((JvmField)member).isStatic()) {
            acceptor.acceptStaticImport((JvmMember)member);
          }
        }
      }
 else {
        acceptor.acceptType(featureCall.getDeclaringType());
      }
    }
 else     if (next instanceof XMemberFeatureCall || next instanceof XBinaryOperation || next instanceof XUnaryOperation|| next instanceof XAssignment) {
      final XAbstractFeatureCall featureCall=(XAbstractFeatureCall)next;
      final JvmIdentifiableElement member=featureCall.getFeature();
      if (member instanceof JvmOperation) {
        if (((JvmOperation)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
      if (member instanceof JvmField) {
        if (((JvmField)member).isStatic())         acceptor.acceptStaticExtensionImport((JvmMember)member);
      }
    }
  }
}",0.9093315684976836
13055,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected ProfileManager createProfileManager(List profiles,IScopeContext context,PreferencesAccess access,IProfileVersioner profileVersioner){
  return new FormatterProfileManager(profiles,context,access,profileVersioner);
}","@SuppressWarnings(""String_Node_Str"") @Override protected ProfileManager createProfileManager(List profiles,IScopeContext context,PreferencesAccess access,IProfileVersioner profileVersioner){
  return new FormatterProfileManager(profiles,context,access,profileVersioner);
}",0.9645390070921984
13056,"private static List<Object> addBuiltinProfiles(final List<Object> profiles,IProfileVersioner profileVersioner){
  final Profile javaProfile=new BuiltInProfile(DEFUALT_PROFILE_KEY,DEFAULT_PROFILE_LABEL,getXtendSettings(),1,profileVersioner.getCurrentVersion(),profileVersioner.getProfileKind());
  profiles.add(javaProfile);
  return profiles;
}","private static List addBuiltinProfiles(final List profiles,IProfileVersioner profileVersioner){
  final Profile javaProfile=new BuiltInProfile(DEFUALT_PROFILE_KEY,DEFAULT_PROFILE_LABEL,getXtendSettings(),1,profileVersioner.getCurrentVersion(),profileVersioner.getProfileKind());
  profiles.add(javaProfile);
  return profiles;
}",0.9761904761904762
13057,"public FormatterProfileManager(List<Object> profiles,IScopeContext context,PreferencesAccess preferencesAccess,IProfileVersioner profileVersioner){
  super(addBuiltinProfiles(profiles,profileVersioner),context,preferencesAccess,profileVersioner,KEY_SETS,PROFILE_KEY,FORMATTER_SETTINGS_VERSION);
}","public FormatterProfileManager(List profiles,IScopeContext context,PreferencesAccess preferencesAccess,IProfileVersioner profileVersioner){
  super(addBuiltinProfiles(profiles,profileVersioner),context,preferencesAccess,profileVersioner,KEY_SETS,PROFILE_KEY,FORMATTER_SETTINGS_VERSION);
}",0.9863013698630136
13058,"private static Map<Object,Object> getXtendSettings(){
  final Map<Object,Object> options=new HashMap<Object,Object>();
  return options;
}","private static Map<String,String> getXtendSettings(){
  final Map<String,String> options=new HashMap<String,String>();
  return options;
}",0.782608695652174
13059,"/** 
 * checks next available job and returns when it will be available (if it will, otherwise returns   {@link Long#MAX_VALUE}) also creates a timer to notify listeners at that time
 * @param hasNetwork .
 * @return time wait until next job (in milliseconds)
 */
private long ensureConsumerWhenNeeded(Boolean hasNetwork){
  if (hasNetwork == null) {
    hasNetwork=networkUtil instanceof NetworkEventProvider ? hasNetwork() : true;
  }
  Long nextRunNs;
synchronized (nonPersistentJobQueue) {
    nextRunNs=nonPersistentJobQueue.getNextJobDelayUntilNs(hasNetwork);
  }
  if (nextRunNs != null && nextRunNs <= System.nanoTime()) {
    notifyJobConsumer();
    return 0L;
  }
  Long persistedJobRunNs;
synchronized (persistentJobQueue) {
    persistedJobRunNs=persistentJobQueue.getNextJobDelayUntilNs(hasNetwork);
  }
  if (persistedJobRunNs != null) {
    if (nextRunNs == null) {
      nextRunNs=persistedJobRunNs;
    }
 else     if (persistedJobRunNs < nextRunNs) {
      nextRunNs=persistedJobRunNs;
    }
  }
  if (nextRunNs != null) {
    long diff=(long)Math.ceil((double)(nextRunNs - System.nanoTime()) / NS_PER_MS);
    if (diff <= 0) {
      notifyJobConsumer();
      return 0L;
    }
 else {
      ensureConsumerOnTime(diff);
      return diff;
    }
  }
  return Long.MAX_VALUE;
}","/** 
 * checks next available job and returns when it will be available (if it will, otherwise returns   {@link Long#MAX_VALUE}) also creates a timer to notify listeners at that time
 * @param hasNetwork .
 * @return time wait until next job (in milliseconds)
 */
private long ensureConsumerWhenNeeded(Boolean hasNetwork){
  if (hasNetwork == null) {
    hasNetwork=networkUtil instanceof NetworkEventProvider ? hasNetwork() : true;
  }
  Long nextRunNs;
synchronized (nonPersistentJobQueue) {
    nextRunNs=nonPersistentJobQueue.getNextJobDelayUntilNs(hasNetwork);
  }
  if (nextRunNs != null && nextRunNs <= System.nanoTime()) {
    notifyJobConsumer();
    return 0L;
  }
  Long persistedJobRunNs;
synchronized (persistentJobQueue) {
    persistedJobRunNs=persistentJobQueue.getNextJobDelayUntilNs(hasNetwork);
  }
  if (persistedJobRunNs != null) {
    if (nextRunNs == null) {
      nextRunNs=persistedJobRunNs;
    }
 else     if (persistedJobRunNs < nextRunNs) {
      nextRunNs=persistedJobRunNs;
    }
  }
  if (nextRunNs != null) {
    if (nextRunNs < System.nanoTime()) {
      notifyJobConsumer();
      return 0L;
    }
    long diff=(long)Math.ceil((double)(nextRunNs - System.nanoTime()) / NS_PER_MS);
    ensureConsumerOnTime(diff);
    return diff;
  }
  return Long.MAX_VALUE;
}",0.9166023166023166
13060,"@Override public void run(){
  JobHolder nextJob;
  try {
    do {
      nextJob=running ? getNextJob() : null;
      if (nextJob != null) {
        if (nextJob.safeRun(nextJob.getRunCount())) {
          removeJob(nextJob);
        }
 else         if (nextJob.getBaseJob().shouldPersist()) {
          persistentJobQueue.insertOrReplace(nextJob);
        }
 else {
          nonPersistentJobQueue.insertOrReplace(nextJob);
        }
      }
    }
 while (nextJob != null);
  }
  finally {
    if (runningConsumerCount.decrementAndGet() == 0 && running) {
      ensureConsumerWhenNeeded();
    }
  }
}","@Override public void run(){
  JobHolder nextJob;
  try {
    do {
      nextJob=running ? getNextJob() : null;
      if (nextJob != null) {
        if (nextJob.safeRun(nextJob.getRunCount())) {
          removeJob(nextJob);
        }
 else         if (nextJob.getBaseJob().shouldPersist()) {
          persistentJobQueue.insertOrReplace(nextJob);
        }
 else {
          nonPersistentJobQueue.insertOrReplace(nextJob);
        }
      }
    }
 while (nextJob != null);
  }
  finally {
    if (runningConsumerCount.decrementAndGet() == 0 && running) {
      ensureConsumerWhenNeeded(null);
    }
  }
}",0.9966832504145936
13061,"/** 
 * @param context application context
 * @param id an id that is unique to this JobManager
 * @param queueFactory custom queue factory that can provide any implementation of {@link JobQueue}
 */
public JobManager(Context context,String id,QueueFactory queueFactory){
  running=true;
  sessionId=System.nanoTime();
  executor=new ThreadPoolExecutor(0,maxConsumerCount,15,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(true));
  this.persistentJobQueue=queueFactory.createPersistentQueue(context,sessionId,id);
  this.nonPersistentJobQueue=queueFactory.createNonPersistent(context,sessionId,id);
  networkUtil=new NetworkUtilImpl();
  start();
}","/** 
 * @param context application context
 * @param id an id that is unique to this JobManager
 * @param queueFactory custom queue factory that can provide any implementation of {@link JobQueue}
 */
public JobManager(Context context,String id,QueueFactory queueFactory){
  appContext=context.getApplicationContext();
  running=true;
  sessionId=System.nanoTime();
  executor=new ThreadPoolExecutor(0,maxConsumerCount,15,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(true));
  this.persistentJobQueue=queueFactory.createPersistentQueue(context,sessionId,id);
  this.nonPersistentJobQueue=queueFactory.createNonPersistent(context,sessionId,id);
  networkUtil=new NetworkUtilImpl();
  start();
}",0.9657738095238096
13062,"private synchronized JobHolder getNextJob(boolean nonPersistentOnly){
  JobHolder jobHolder=nonPersistentJobQueue.nextJobAndIncRunCount(true);
  if (jobHolder == null && nonPersistentOnly == false) {
    jobHolder=persistentJobQueue.nextJobAndIncRunCount(true);
  }
  return jobHolder;
}","private synchronized JobHolder getNextJob(boolean nonPersistentOnly){
  boolean haveNetwork=hasNetwork();
  JobHolder jobHolder=nonPersistentJobQueue.nextJobAndIncRunCount(haveNetwork);
  if (jobHolder == null && nonPersistentOnly == false) {
    jobHolder=persistentJobQueue.nextJobAndIncRunCount(haveNetwork);
  }
  return jobHolder;
}",0.8942307692307693
13063,"private void ensureConsumerWhenNeeded(){
  Long nextRunNs=nonPersistentJobQueue.getNextJobDelayUntilNs();
  if (nextRunNs != null && nextRunNs <= System.nanoTime()) {
    addConsumer();
    return;
  }
  Long persistedJobRunNs=persistentJobQueue.getNextJobDelayUntilNs();
  if (persistedJobRunNs != null) {
    if (nextRunNs == null) {
      nextRunNs=persistedJobRunNs;
    }
 else     if (persistedJobRunNs < nextRunNs) {
      nextRunNs=persistedJobRunNs;
    }
  }
  if (nextRunNs != null) {
    long waitNs=nextRunNs - System.nanoTime();
    if (waitNs <= 0) {
      addConsumer();
    }
 else {
      ensureConsumerOnTime(waitNs);
    }
  }
}","private void ensureConsumerWhenNeeded(Boolean hasNetwork){
  if (hasNetwork == null) {
    hasNetwork=networkUtil instanceof NetworkEventProvider ? hasNetwork() : true;
  }
  Long nextRunNs=nonPersistentJobQueue.getNextJobDelayUntilNs(hasNetwork);
  if (nextRunNs != null && nextRunNs <= System.nanoTime()) {
    addConsumer();
    return;
  }
  Long persistedJobRunNs=persistentJobQueue.getNextJobDelayUntilNs(hasNetwork);
  if (persistedJobRunNs != null) {
    if (nextRunNs == null) {
      nextRunNs=persistedJobRunNs;
    }
 else     if (persistedJobRunNs < nextRunNs) {
      nextRunNs=persistedJobRunNs;
    }
  }
  if (nextRunNs != null) {
    long waitNs=nextRunNs - System.nanoTime();
    if (waitNs <= 0) {
      addConsumer();
    }
 else {
      ensureConsumerOnTime(waitNs);
    }
  }
}",0.8950276243093923
13064,"/** 
 * Set the   {@link NetworkUtil} class to be used by the job manager.By default  {@link com.path.android.jobqueue.network.NetworkUtilImpl} will be used.
 * @param networkUtil
 */
public void setNetworkUtil(NetworkUtil networkUtil){
  this.networkUtil=networkUtil;
}","/** 
 * Set the   {@link NetworkUtil} class to be used by the job manager.By default  {@link com.path.android.jobqueue.network.NetworkUtilImpl} will be used.
 * @param networkUtil
 */
public void setNetworkUtil(NetworkUtil networkUtil){
  this.networkUtil=networkUtil;
  if (networkUtil instanceof NetworkEventProvider) {
    ((NetworkEventProvider)networkUtil).setListener(this);
  }
}",0.823170731707317
13065,"/** 
 * Returns the next available job in the data set It should also assign the sessionId as the RunningSessionId and persist that data if necessary. It should filter out all running jobs and
 * @return
 */
JobHolder nextJobAndIncRunCount(boolean hasNetwork);","/** 
 * Returns the next available job in the data set It should also assign the sessionId as the RunningSessionId and persist that data if necessary. It should filter out all running jobs and
 * @param hasNetwork if true, should return any job, if false, should return jobs that do NOT require network
 * @return
 */
JobHolder nextJobAndIncRunCount(boolean hasNetwork);",0.8253968253968254
13066,"/** 
 * returns when the next job should run, should return null if there are no jobs to run.
 * @return
 */
Long getNextJobDelayUntilNs();","/** 
 * returns when the next job should run (in nanoseconds), should return null if there are no jobs to run.
 * @param hasNetwork if true, should return nanoseconds for any job, if false, should return nanoseconds for nextjob's delay until.
 * @return
 */
Long getNextJobDelayUntilNs(boolean hasNetwork);",0.6247191011235955
13067,"/** 
 * {@inheritDoc}
 */
@Override public JobHolder poll(){
  JobHolder delayed=queue0.peek();
  if (delayed == null) {
    return queue1.poll();
  }
  JobHolder nonDelayed=queue1.peek();
  if (nonDelayed == null) {
    queue0.remove(delayed);
    return delayed;
  }
  int cmp=retrieveComparator.compare(delayed,nonDelayed);
  if (cmp == -1) {
    queue0.remove(delayed);
    return delayed;
  }
 else {
    queue1.remove(nonDelayed);
    return nonDelayed;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public JobHolder poll(){
  JobHolder delayed=queue0.peek();
  if (delayed == null) {
    return queue1.poll();
  }
  if (decideQueue(delayed) != QeueuId.Q0) {
    queue0.remove(delayed);
    queue1.add(delayed);
    return poll();
  }
  JobHolder nonDelayed=queue1.peek();
  if (nonDelayed == null) {
    queue0.remove(delayed);
    return delayed;
  }
  if (decideQueue(nonDelayed) != QeueuId.Q1) {
    queue0.add(nonDelayed);
    queue1.remove(nonDelayed);
    return poll();
  }
  int cmp=retrieveComparator.compare(delayed,nonDelayed);
  if (cmp == -1) {
    queue0.remove(delayed);
    return delayed;
  }
 else {
    queue1.remove(nonDelayed);
    return nonDelayed;
  }
}",0.7888040712468194
13068,"/** 
 * {@inheritDoc}
 */
@Override public JobHolder peek(){
  JobHolder delayed=queue0.peek();
  JobHolder nonDelayed=queue1.peek();
  if (delayed == null) {
    return nonDelayed;
  }
  if (nonDelayed == null) {
    return delayed;
  }
  int cmp=retrieveComparator.compare(delayed,nonDelayed);
  if (cmp == -1) {
    return delayed;
  }
  return nonDelayed;
}","/** 
 * {@inheritDoc}
 */
@Override public JobHolder peek(){
  JobHolder delayed=queue0.peek();
  if (delayed != null && decideQueue(delayed) != QeueuId.Q0) {
    queue1.add(delayed);
    queue0.remove(delayed);
    return peek();
  }
  JobHolder nonDelayed=queue1.peek();
  if (nonDelayed != null && decideQueue(nonDelayed) != QeueuId.Q1) {
    queue0.add(nonDelayed);
    queue1.remove(nonDelayed);
    return peek();
  }
  if (delayed == null) {
    return nonDelayed;
  }
  if (nonDelayed == null) {
    return delayed;
  }
  int cmp=retrieveComparator.compare(delayed,nonDelayed);
  if (cmp == -1) {
    return delayed;
  }
  return nonDelayed;
}",0.7134387351778656
13069,"/** 
 * @param initialCapacity paseed to {@link MergedQueue#createQueue(int,java.util.Comparator)}
 * @param comparator paseed to {@link MergedQueue#createQueue(int,java.util.Comparator)}
 * @param retrieveComparator upon retrieval, if both queues return items, this comparator is used to decide whichone should be returned
 */
public MergedQueue(int initialCapacity,Comparator<JobHolder> comparator,Comparator<JobHolder> retrieveComparator){
  this.comparator=comparator;
  this.retrieveComparator=retrieveComparator;
  queue0=createQueue(initialCapacity,comparator);
  queue1=createQueue(initialCapacity,comparator);
}","/** 
 * @param initialCapacity passed to {@link MergedQueue#createQueue(MergedQueue.QeueuId,int,java.util.Comparator)}
 * @param comparator passed to {@link MergedQueue#createQueue(MergedQueue.QeueuId,int,java.util.Comparator)}
 * @param retrieveComparator upon retrieval, if both queues return items, this comparator is used to decide whichone should be returned
 */
public MergedQueue(int initialCapacity,Comparator<JobHolder> comparator,Comparator<JobHolder> retrieveComparator){
  this.comparator=comparator;
  this.retrieveComparator=retrieveComparator;
  queue0=createQueue(QeueuId.Q0,initialCapacity,comparator);
  queue1=createQueue(QeueuId.Q1,initialCapacity,comparator);
}",0.9493087557603688
13070,"/** 
 * called when we want to create the subsequent queues
 * @param initialCapacity
 * @param comparator
 * @return
 */
abstract protected Queue<JobHolder> createQueue(int initialCapacity,Comparator<JobHolder> comparator);","/** 
 * called when we want to create the subsequent queues
 * @param initialCapacity
 * @param comparator
 * @return
 */
abstract protected Queue<JobHolder> createQueue(QeueuId qeueuId,int initialCapacity,Comparator<JobHolder> comparator);",0.9655172413793104
13071,"/** 
 * create a network aware priority queue with given initial capacity * 2 and comparator
 * @param initialCapacity
 * @param comparator
 */
public NetworkAwarePriorityQueue(int initialCapacity,Comparator<JobHolder> comparator){
  super(initialCapacity,comparator,comparator);
}","/** 
 * create a network aware priority queue with given initial capacity * 2 and comparator
 * @param initialCapacity
 * @param comparator
 */
public NetworkAwarePriorityQueue(int initialCapacity,Comparator<JobHolder> comparator){
  super(initialCapacity,comparator,new TimeAwareComparator(comparator));
}",0.9233390119250426
13072,"/** 
 * create a   {@link TimeAwarePriorityQueue}
 * @param initialCapacity
 * @param comparator
 * @return
 */
@Override protected Queue<JobHolder> createQueue(int initialCapacity,Comparator<JobHolder> comparator){
  return new TimeAwarePriorityQueue(initialCapacity,comparator);
}","/** 
 * create a   {@link TimeAwarePriorityQueue}
 * @param ignoredQueueId
 * @param initialCapacity
 * @param comparator
 * @return
 */
@Override protected Queue<JobHolder> createQueue(QeueuId ignoredQueueId,int initialCapacity,Comparator<JobHolder> comparator){
  return new TimeAwarePriorityQueue(initialCapacity,comparator);
}",0.9215686274509804
13073,"/** 
 * {@inheritDoc}
 */
@Override public Long getNextJobDelayUntilNs(){
  JobHolder next=jobs.peek();
  return next == null ? null : next.getDelayUntilNs();
}","/** 
 * {@inheritDoc}
 */
@Override public Long getNextJobDelayUntilNs(boolean hasNetwork){
  JobHolder next=jobs.peek(hasNetwork);
  return next == null ? null : next.getDelayUntilNs();
}",0.9195402298850576
13074,"/** 
 * create a   {@link PriorityQueue} with given comparator
 * @param initialCapacity
 * @param comparator
 * @return
 */
@Override protected Queue<JobHolder> createQueue(int initialCapacity,Comparator<JobHolder> comparator){
  return new PriorityQueue<JobHolder>(initialCapacity,comparator);
}","/** 
 * create a   {@link PriorityQueue} with given comparator
 * @param qeueuId
 * @param initialCapacity
 * @param comparator
 * @return
 */
@Override protected Queue<JobHolder> createQueue(QeueuId qeueuId,int initialCapacity,Comparator<JobHolder> comparator){
  if (qeueuId == QeueuId.Q0) {
    return new PriorityQueue<JobHolder>(initialCapacity,comparator);
  }
 else {
    return new PriorityQueue<JobHolder>(initialCapacity,new ConsistentTimedComparator(comparator));
  }
}",0.7644787644787645
13075,"private boolean mustSwitchToRight(){
  return numberOfRowsInBuffer == blockSize || (leftBatchHasItems == false && numberOfLeftBatchesLoadedForBlock == numberOfLeftBatchesForBlock);
}","private boolean mustSwitchToRight(){
  return left.allLoaded() || numberOfRowsInBuffer == blockSize || (leftBatchHasItems == false && numberOfLeftBatchesLoadedForBlock == numberOfLeftBatchesForBlock);
}",0.9479166666666666
13076,"public void execute(String portalName,int maxRows,ResultReceiver resultReceiver){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",portalName,maxRows);
  }
  Portal portal=getSafePortal(portalName);
  portal.execute(resultReceiver,maxRows);
  AnalyzedStatement analyzedStatement=portal.getLastAnalyzedStatement();
  if (analyzedStatement instanceof AnalyzedBegin) {
    portal.sync(planner,jobsLogs);
    clearState();
  }
 else   if (analyzedStatement instanceof DeallocateAnalyzedStatement) {
    String stmtToDeallocate=((DeallocateAnalyzedStatement)analyzedStatement).preparedStmtName();
    if (stmtToDeallocate != null) {
      close((byte)'S',stmtToDeallocate);
    }
 else {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"");
      }
      preparedStatements.clear();
    }
  }
 else {
    pendingExecutions.add(portal);
  }
}","public void execute(String portalName,int maxRows,ResultReceiver resultReceiver){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"",portalName,maxRows);
  }
  Portal portal=getSafePortal(portalName);
  portal.execute(resultReceiver,maxRows);
  AnalyzedStatement analyzedStatement=portal.getLastAnalyzedStatement();
  if (analyzedStatement instanceof AnalyzedBegin) {
    portal.sync(planner,jobsLogs);
    clearState();
  }
 else   if (analyzedStatement instanceof DeallocateAnalyzedStatement) {
    String stmtToDeallocate=((DeallocateAnalyzedStatement)analyzedStatement).preparedStmtName();
    if (stmtToDeallocate != null) {
      close((byte)'S',stmtToDeallocate);
    }
 else {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"");
      }
      preparedStatements.clear();
    }
    portal.sync(planner,jobsLogs);
  }
 else {
    pendingExecutions.add(portal);
  }
}",0.98050139275766
13077,"@Test public void testDeallocateAllClearsAllPortalsAndPreparedStatements(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=Mockito.mock(DependencyCarrier.class);
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.execute(""String_Node_Str"",0,new BaseResultReceiver(){
    @Override public void setNextRow(    Row row){
    }
  }
);
  assertThat(session.portals.size(),greaterThan(0));
  assertThat(session.preparedStatements.size(),is(0));
}","@Test public void testDeallocateAllClearsAllPortalsAndPreparedStatements(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=mock(DependencyCarrier.class);
  when(executor.threadPool()).thenReturn(mock(ThreadPool.class));
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.execute(""String_Node_Str"",0,new BaseResultReceiver());
  assertThat(session.portals.size(),greaterThan(0));
  assertThat(session.preparedStatements.size(),is(0));
}",0.9279326670173592
13078,"@Test public void testDeallocatePreparedStatementClearsPreparedStatement(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=Mockito.mock(DependencyCarrier.class);
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.execute(""String_Node_Str"",0,new BaseResultReceiver(){
    @Override public void setNextRow(    Row row){
    }
  }
);
  assertThat(session.portals.size(),greaterThan(0));
  assertThat(session.preparedStatements.size(),is(1));
  assertThat(session.preparedStatements.get(""String_Node_Str"").query(),is(""String_Node_Str""));
}","@Test public void testDeallocatePreparedStatementClearsPreparedStatement(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=mock(DependencyCarrier.class);
  when(executor.threadPool()).thenReturn(mock(ThreadPool.class));
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.execute(""String_Node_Str"",0,new BaseResultReceiver());
  assertThat(session.portals.size(),greaterThan(0));
  assertThat(session.preparedStatements.size(),is(1));
  assertThat(session.preparedStatements.get(""String_Node_Str"").query(),is(""String_Node_Str""));
}",0.9344811095169776
13079,"@Test public void testGetParamType(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=Mockito.mock(DependencyCarrier.class);
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  assertThat(session.getParamType(""String_Node_Str"",0),is(DataTypes.UNDEFINED));
  assertThat(session.getParamType(""String_Node_Str"",2),is(DataTypes.UNDEFINED));
  Session.DescribeResult describe=session.describe('S',""String_Node_Str"");
  assertThat(describe.getParameters(),equalTo(new DataType[]{DataTypes.LONG,DataTypes.LONG}));
  assertThat(session.getParamType(""String_Node_Str"",0),is(DataTypes.LONG));
  assertThat(session.getParamType(""String_Node_Str"",1),is(DataTypes.LONG));
  expectedException.expect(IllegalStateException.class);
  expectedException.expectMessage(""String_Node_Str"");
  assertThat(session.getParamType(""String_Node_Str"",3),is(DataTypes.UNDEFINED));
}","@Test public void testGetParamType(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=mock(DependencyCarrier.class);
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  assertThat(session.getParamType(""String_Node_Str"",0),is(DataTypes.UNDEFINED));
  assertThat(session.getParamType(""String_Node_Str"",2),is(DataTypes.UNDEFINED));
  Session.DescribeResult describe=session.describe('S',""String_Node_Str"");
  assertThat(describe.getParameters(),equalTo(new DataType[]{DataTypes.LONG,DataTypes.LONG}));
  assertThat(session.getParamType(""String_Node_Str"",0),is(DataTypes.LONG));
  assertThat(session.getParamType(""String_Node_Str"",1),is(DataTypes.LONG));
  expectedException.expect(IllegalStateException.class);
  expectedException.expectMessage(""String_Node_Str"");
  assertThat(session.getParamType(""String_Node_Str"",3),is(DataTypes.UNDEFINED));
}",0.9962476547842402
13080,"@Test public void testProperCleanupOnSessionClose(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=Mockito.mock(DependencyCarrier.class);
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.execute(""String_Node_Str"",0,new BaseResultReceiver());
  assertThat(session.portals.size(),is(2));
  assertThat(session.preparedStatements.size(),is(2));
  assertThat(session.pendingExecutions.size(),is(1));
  session.close();
  assertThat(session.portals.size(),is(0));
  assertThat(session.preparedStatements.size(),is(0));
  assertThat(session.pendingExecutions.size(),is(0));
}","@Test public void testProperCleanupOnSessionClose(){
  SQLExecutor sqlExecutor=SQLExecutor.builder(clusterService).build();
  DependencyCarrier executor=mock(DependencyCarrier.class);
  Session session=new Session(sqlExecutor.analyzer,sqlExecutor.planner,new JobsLogs(() -> false),false,executor,SessionContext.create());
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.parse(""String_Node_Str"",""String_Node_Str"",Collections.emptyList());
  session.bind(""String_Node_Str"",""String_Node_Str"",Collections.emptyList(),null);
  session.describe('S',""String_Node_Str"");
  session.execute(""String_Node_Str"",0,new BaseResultReceiver());
  assertThat(session.portals.size(),is(2));
  assertThat(session.preparedStatements.size(),is(2));
  assertThat(session.pendingExecutions.size(),is(1));
  session.close();
  assertThat(session.portals.size(),is(0));
  assertThat(session.preparedStatements.size(),is(0));
  assertThat(session.pendingExecutions.size(),is(0));
}",0.9964381121994658
13081,"private void fetchFromUnExhausted(){
synchronized (listenersByBucketIdx) {
    Iterator<Map.Entry<Integer,PageResultListener>> iterator=listenersByBucketIdx.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<Integer,PageResultListener> element=iterator.next();
      Integer key=element.getKey();
      PageResultListener resultListener=element.getValue();
      if (exhausted.contains(key)) {
        setToEmptyBucket(key);
      }
 else {
        iterator.remove();
        resultListener.needMore(true);
      }
    }
  }
}","private void fetchFromUnExhausted(){
synchronized (buckets) {
    for (    Integer bucketIdx : buckets) {
      if (exhausted.contains(bucketIdx)) {
        setToEmptyBucket(bucketIdx);
      }
 else {
        PageResultListener resultListener=listenersByBucketIdx.remove(bucketIdx);
        resultListener.needMore(true);
      }
    }
  }
}",0.1777277840269966
13082,"private void fetchExhausted(Integer exhaustedBucket){
  for (  Integer bucketIdx : bucketsByIdx.keySet()) {
    if (!bucketIdx.equals(exhaustedBucket)) {
      setToEmptyBucket(bucketIdx);
    }
  }
  PageResultListener pageResultListener;
synchronized (listenersByBucketIdx) {
    pageResultListener=listenersByBucketIdx.remove(exhaustedBucket);
  }
  pageResultListener.needMore(true);
}","private void fetchExhausted(Integer exhaustedBucket){
synchronized (buckets) {
    for (    Integer bucketIdx : buckets) {
      if (!bucketIdx.equals(exhaustedBucket)) {
        setToEmptyBucket(bucketIdx);
      }
    }
    PageResultListener pageResultListener=listenersByBucketIdx.remove(exhaustedBucket);
    pageResultListener.needMore(true);
  }
}",0.5868102288021534
13083,"private void mergeBuckets(){
  List<KeyIterable<Integer,Row>> buckets=new ArrayList<>(numBuckets);
  for (  Map.Entry<Integer,Bucket> entry : bucketsByIdx.entrySet()) {
    if (entry.getValue() != null) {
      buckets.add(new KeyIterable<>(entry.getKey(),entry.getValue()));
    }
  }
  for (  Integer integer : bucketsByIdx.keySet()) {
    bucketsByIdx.put(integer,null);
  }
  pagingIterator.merge(buckets);
}","private void mergeBuckets(){
  List<KeyIterable<Integer,Row>> buckets=new ArrayList<>(numBuckets);
synchronized (lock) {
    for (    Map.Entry<Integer,Bucket> entry : bucketsByIdx.entrySet()) {
      buckets.add(new KeyIterable<>(entry.getKey(),entry.getValue()));
    }
    bucketsByIdx.clear();
  }
  pagingIterator.merge(buckets);
}",0.5614973262032086
13084,"private void releaseListenersAndCloseContext(@Nullable Throwable throwable){
synchronized (listenersByBucketIdx) {
    for (    PageResultListener resultListener : listenersByBucketIdx.values()) {
      resultListener.needMore(false);
    }
    listenersByBucketIdx.clear();
  }
  close(throwable);
}","private void releaseListenersAndCloseContext(@Nullable Throwable throwable){
synchronized (buckets) {
    for (    PageResultListener resultListener : listenersByBucketIdx.values()) {
      resultListener.needMore(false);
    }
    listenersByBucketIdx.clear();
  }
  close(throwable);
}",0.9710391822827938
13085,"@Override public void setBucket(int bucketIdx,Bucket rows,boolean isLast,PageResultListener pageResultListener){
synchronized (listenersByBucketIdx) {
    if (lastThrowable == null) {
      listenersByBucketIdx.put(bucketIdx,pageResultListener);
    }
 else {
      pageResultListener.needMore(false);
    }
  }
  boolean shouldTriggerConsumer=false;
synchronized (lock) {
    traceLog(""String_Node_Str"",bucketIdx);
    if (bucketsByIdx.putIfAbsent(bucketIdx,rows) != null) {
      kill(new IllegalStateException(String.format(Locale.ENGLISH,""String_Node_Str"",nodeName,id,bucketIdx)));
    }
    setExhaustedUpstreams();
    if (isLast) {
      exhausted.add(bucketIdx);
    }
    if (bucketsByIdx.size() == numBuckets) {
      shouldTriggerConsumer=true;
    }
  }
  if (shouldTriggerConsumer) {
    mergeAndTriggerConsumer();
  }
}","@Override public void setBucket(int bucketIdx,Bucket rows,boolean isLast,PageResultListener pageResultListener){
synchronized (buckets) {
    buckets.add(bucketIdx);
    if (lastThrowable == null) {
      listenersByBucketIdx.put(bucketIdx,pageResultListener);
    }
 else {
      pageResultListener.needMore(false);
    }
  }
  boolean shouldTriggerConsumer=false;
synchronized (lock) {
    traceLog(""String_Node_Str"",bucketIdx);
    if (bucketsByIdx.putIfAbsent(bucketIdx,rows) != null) {
      kill(new IllegalStateException(String.format(Locale.ENGLISH,""String_Node_Str"",nodeName,id,bucketIdx)));
    }
    setExhaustedUpstreams();
    if (isLast) {
      exhausted.add(bucketIdx);
    }
    if (bucketsByIdx.size() == numBuckets) {
      shouldTriggerConsumer=true;
    }
  }
  if (shouldTriggerConsumer) {
    mergeAndTriggerConsumer();
  }
}",0.9672813801308744
13086,"public PageDownstreamContext(Logger logger,String nodeName,int id,String name,RowConsumer rowConsumer,PagingIterator<Integer,Row> pagingIterator,Streamer<?>[] streamers,RamAccountingContext ramAccountingContext,int numBuckets){
  super(id,logger);
  this.nodeName=nodeName;
  this.name=name;
  this.streamers=streamers;
  this.ramAccountingContext=ramAccountingContext;
  this.numBuckets=numBuckets;
  traceEnabled=logger.isTraceEnabled();
  this.exhausted=new HashSet<>(numBuckets);
  this.pagingIterator=pagingIterator;
  this.bucketsByIdx=new HashMap<>(numBuckets);
  this.listenersByBucketIdx=new HashMap<>(numBuckets);
  batchPagingIterator=new BatchPagingIterator<>(pagingIterator,this::fetchMore,this::allUpstreamsExhausted,() -> releaseListenersAndCloseContext(null));
  this.consumer=rowConsumer;
}","public PageDownstreamContext(Logger logger,String nodeName,int id,String name,RowConsumer rowConsumer,PagingIterator<Integer,Row> pagingIterator,Streamer<?>[] streamers,RamAccountingContext ramAccountingContext,int numBuckets){
  super(id,logger);
  this.nodeName=nodeName;
  this.name=name;
  this.streamers=streamers;
  this.ramAccountingContext=ramAccountingContext;
  this.numBuckets=numBuckets;
  this.buckets=new HashSet<>(numBuckets);
  traceEnabled=logger.isTraceEnabled();
  this.exhausted=new HashSet<>(numBuckets);
  this.pagingIterator=pagingIterator;
  this.bucketsByIdx=new HashMap<>(numBuckets);
  this.listenersByBucketIdx=new HashMap<>(numBuckets);
  batchPagingIterator=new BatchPagingIterator<>(pagingIterator,this::fetchMore,this::allUpstreamsExhausted,() -> releaseListenersAndCloseContext(null));
  this.consumer=rowConsumer;
}",0.9746376811594204
13087,"@Override public void needMore(boolean needMore){
  if (needMore) {
    ctx.setBucket(0,b11,true,mock(PageResultListener.class));
  }
}","@Override public void needMore(boolean needMore){
  needMoreResult=needMore;
}",0.676056338028169
13088,"/** 
 * Partition the items of a BatchIterator into blocks of   {@code size}. Example: <pre> inputBi: [1, 2, 3, 4, 5] partition(inputBi, 2, ArrayList::new, List::add) -> [[1, 2], [3, 4], [5]] </pre>
 * @param supplier Used to create the state per partition
 * @param accumulator Used to add items to the partitions state
 * @param stateLimiter Used to dynamically adjust the partition size.
 * @param < T > input item type
 * @param < A > output item type
 */
public static <T,A>BatchIterator<A> partition(BatchIterator<T> bi,int size,Supplier<A> supplier,BiConsumer<A,T> accumulator,Predicate<A> stateLimiter){
  return new MappedForwardingBatchIterator<T,A>(){
    private A element=null;
    private A state=supplier.get();
    private int idx=0;
    @Override protected BatchIterator<T> delegate(){
      return bi;
    }
    @Override public boolean moveNext(){
      boolean stateLimitReached=false;
      while (idx < size && stateLimitReached == false && bi.moveNext()) {
        accumulator.accept(state,bi.currentElement());
        stateLimitReached=stateLimiter.test(state);
        idx++;
      }
      if (idx == size || stateLimitReached || (idx > 0 && bi.allLoaded())) {
        element=state;
        state=supplier.get();
        idx=0;
        return true;
      }
      element=null;
      return false;
    }
    @Override public A currentElement(){
      return element;
    }
  }
;
}","/** 
 * Partition the items of a BatchIterator into blocks of   {@code size}. Example: <pre>  {@code inputBi: [1, 2, 3, 4, 5] partition(inputBi, 2, ArrayList::new, List::add) -> [[1, 2], [3, 4], [5]]}</pre>
 * @param supplier Used to create the state per partition
 * @param accumulator Used to add items to the partitions state
 * @param stateLimiter Used to dynamically adjust the partition size.
 * @param < T > input item type
 * @param < A > output item type
 */
public static <T,A>BatchIterator<A> partition(BatchIterator<T> bi,int size,Supplier<A> supplier,BiConsumer<A,T> accumulator,Predicate<A> stateLimiter){
  return new MappedForwardingBatchIterator<T,A>(){
    private A element=null;
    private A state=supplier.get();
    private int idx=0;
    @Override protected BatchIterator<T> delegate(){
      return bi;
    }
    @Override public boolean moveNext(){
      boolean stateLimitReached=false;
      while (idx < size && stateLimitReached == false && bi.moveNext()) {
        accumulator.accept(state,bi.currentElement());
        stateLimitReached=stateLimiter.test(state);
        idx++;
      }
      if (idx == size || stateLimitReached || (idx > 0 && bi.allLoaded())) {
        element=state;
        state=supplier.get();
        idx=0;
        return true;
      }
      element=null;
      return false;
    }
    @Override public A currentElement(){
      return element;
    }
  }
;
}",0.99645390070922
13089,"/** 
 * Interrupt the operation, increasing the likelihood that it will terminate early with an error. This method can be called concurrently from a different thread while an operation is running. Implementations must: - terminate if they're otherwise waiting for input/data - terminate expensive & long running operations within a reasonable amount of time (< 2sec) Fast operations which are already running and can complete without further input may ignore the kill. Operations which have already completed may also ignore the kill.
 * @param throwable the reason for the interruption or null if there is none.
 */
void kill(@Nonnull Throwable throwable);","/** 
 * <p> Interrupt the operation, increasing the likelihood that it will terminate early with an error. This method can be called concurrently from a different thread while an operation is running. </p> Implementations must: <ul> <li>terminate if they're otherwise waiting for input/data</li> <li>terminate expensive and long running operations within a reasonable amount of time (&lt; 2sec)</li> </ul> Fast operations which are already running and can complete without further input may ignore the kill. Operations which have already completed may also ignore the kill.
 * @param throwable the reason for the interruption or null if there is none.
 */
void kill(@Nonnull Throwable throwable);",0.8721359940872137
13090,"public ExtendedOsStats(Cpu cpu){
  this.cpu=cpu;
}","public ExtendedOsStats(Cpu cpu,OsStats osStats){
  this.cpu=cpu;
  this.osStats=osStats;
}",0.7142857142857143
13091,"public void cpu(Cpu cpu){
  this.cpu=cpu;
}","@VisibleForTesting public void cpu(Cpu cpu){
  this.cpu=cpu;
}",0.819047619047619
13092,"@Override public ExtendedOsStats osStats(){
  return OS_STATS;
}","@Override public ExtendedOsStats osStats(){
  return osStatsCache.getOrRefresh();
}",0.7755102040816326
13093,"private ExtendedOsStats osStatsProbe(){
  Sigar sigar=sigarService.sigar();
  ExtendedOsStats.Cpu cpu;
  try {
    CpuPerc cpuPerc=sigar.getCpuPerc();
    cpu=new ExtendedOsStats.Cpu((short)Math.round(cpuPerc.getSys() * 100),(short)Math.round(cpuPerc.getUser() * 100),(short)Math.round(cpuPerc.getIdle() * 100),(short)Math.round(cpuPerc.getStolen() * 100));
  }
 catch (  SigarException e) {
    cpu=new ExtendedOsStats.Cpu();
  }
  ExtendedOsStats stats=new ExtendedOsStats(cpu);
  stats.timestamp(System.currentTimeMillis());
  try {
    stats.loadAverage(sigar.getLoadAverage());
  }
 catch (  SigarException e) {
  }
  try {
    stats.uptime((long)sigar.getUptime().getUptime());
  }
 catch (  SigarException e) {
  }
  return stats;
}","private ExtendedOsStats osStatsProbe(){
  Sigar sigar=sigarService.sigar();
  ExtendedOsStats.Cpu cpu;
  OsStats osStats=OsProbe.getInstance().osStats();
  try {
    CpuPerc cpuPerc=sigar.getCpuPerc();
    cpu=new ExtendedOsStats.Cpu((short)Math.round(cpuPerc.getSys() * 100),(short)Math.round(cpuPerc.getUser() * 100),(short)Math.round(cpuPerc.getIdle() * 100),(short)Math.round(cpuPerc.getStolen() * 100));
  }
 catch (  SigarException e) {
    cpu=new ExtendedOsStats.Cpu();
  }
  ExtendedOsStats stats=new ExtendedOsStats(cpu,osStats);
  stats.timestamp(System.currentTimeMillis());
  try {
    stats.loadAverage(sigar.getLoadAverage());
  }
 catch (  SigarException e) {
  }
  try {
    stats.uptime((long)sigar.getUptime().getUptime());
  }
 catch (  SigarException e) {
  }
  return stats;
}",0.9616135328562134
13094,"@Override public R value(){
  if (row.isComplete()) {
    OsStats.Cgroup cgroup=row.osStats().getCgroup();
    if (cgroup == null) {
      return null;
    }
    return getter.apply(cgroup);
  }
  return null;
}","@Override public R value(){
  if (row.isComplete()) {
    OsStats.Cgroup cgroup=row.extendedOsStats().osStats().getCgroup();
    if (cgroup != null) {
      return getter.apply(cgroup);
    }
  }
  return null;
}",0.7423167848699763
13095,"@Override public Map<String,Object> value(){
  if (row.isComplete()) {
    OsStats.Cgroup cgroup=row.osStats().getCgroup();
    if (cgroup == null) {
      return null;
    }
    return super.value();
  }
  return null;
}","@Override public Map<String,Object> value(){
  if (row.isComplete()) {
    OsStats.Cgroup cgroup=row.extendedOsStats().osStats().getCgroup();
    if (cgroup != null) {
      return super.value();
    }
  }
  return null;
}",0.7900677200902935
13096,"@Test public void testSysNodesCgroup() throws Exception {
  if (Constants.LINUX) {
    SQLResponse response=execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    assertThat(response.rowCount(),is(1L));
    assertThat((String)response.rows()[0][0],containsString(""String_Node_Str""));
    assertThat((long)response.rows()[0][1],greaterThanOrEqualTo(-1L));
    assertThat((String)response.rows()[0][2],containsString(""String_Node_Str""));
    assertThat((long)response.rows()[0][3],greaterThanOrEqualTo(-1L));
    assertThat((long)response.rows()[0][4],greaterThanOrEqualTo(-1L));
    assertThat((long)response.rows()[0][5],greaterThanOrEqualTo(-1L));
    assertThat((long)response.rows()[0][6],greaterThanOrEqualTo(-1L));
    assertThat((long)response.rows()[0][7],greaterThanOrEqualTo(-1L));
  }
 else {
    response=execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    assertThat(response.rowCount(),is(1L));
    for (int i=0; i <= 10; i++) {
      assertNull(response.rows()[0][i]);
    }
  }
}","@Test public void testSysNodesCgroup() throws Exception {
  if (Constants.LINUX) {
    SQLResponse response=execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    assertThat(response.rowCount(),is(1L));
    assertThat(response.rows()[0][0],notNullValue());
    assertThat((long)response.rows()[0][1],greaterThanOrEqualTo(0L));
    assertThat(response.rows()[0][2],notNullValue());
    assertThat((long)response.rows()[0][3],greaterThanOrEqualTo(0L));
    assertThat((long)response.rows()[0][4],anyOf(equalTo(-1L),greaterThanOrEqualTo(0L)));
    assertThat((long)response.rows()[0][5],greaterThanOrEqualTo(0L));
    assertThat((long)response.rows()[0][6],greaterThanOrEqualTo(0L));
    assertThat((long)response.rows()[0][7],greaterThanOrEqualTo(0L));
  }
 else {
    response=execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    assertThat(response.rowCount(),is(1L));
    for (int i=0; i <= 10; i++) {
      assertNull(response.rows()[0][i]);
    }
  }
}",0.4380228136882129
13097,"@Override public ExtendedOsStats osStats(){
  ExtendedOsStats.Cpu cpuStats=new ExtendedOsStats.Cpu((short)0,(short)4,(short)94,(short)10);
  ExtendedOsStats osStats=new ExtendedOsStats(cpuStats);
  osStats.uptime(3600L);
  osStats.loadAverage(new double[]{1,5,15});
  return osStats;
}","@Override public ExtendedOsStats osStats(){
  ExtendedOsStats.Cpu cpuStats=new ExtendedOsStats.Cpu((short)0,(short)4,(short)94,(short)10);
  OsStats osStats=OsProbe.getInstance().osStats();
  ExtendedOsStats extendedOsStats=new ExtendedOsStats(cpuStats,osStats);
  extendedOsStats.uptime(3600L);
  extendedOsStats.loadAverage(new double[]{1,5,15});
  return extendedOsStats;
}",0.8139183055975794
13098,"static final CompletableFuture<Long> execute(BiConsumer<ClusterRerouteRequest,ActionListener<ClusterRerouteResponse>> rerouteAction,RerouteAnalyzedStatement stmt,Row parameters){
  ClusterRerouteRequest request;
  try {
    request=prepareRequest(stmt,parameters);
  }
 catch (  Throwable t) {
    return failedFuture(t);
  }
  FutureActionListener<ClusterRerouteResponse,Long> listener=new FutureActionListener<>(r -> r.isAcknowledged() ? 1L : -1L);
  rerouteAction.accept(request,listener);
  return listener;
}","public static CompletableFuture<Long> execute(BiConsumer<ClusterRerouteRequest,ActionListener<ClusterRerouteResponse>> rerouteAction,RerouteAnalyzedStatement stmt,Row parameters){
  ClusterRerouteRequest request;
  try {
    request=prepareRequest(stmt,parameters);
  }
 catch (  Throwable t) {
    return failedFuture(t);
  }
  FutureActionListener<ClusterRerouteResponse,Long> listener=new FutureActionListener<>(r -> r.isAcknowledged() ? 1L : -1L);
  rerouteAction.accept(request,listener);
  return listener;
}",0.9756572541382668
13099,"private CompletableFuture<BitSet> createAndSendRequests(){
  Map<ShardId,ShardUpsertRequest> requestsByShard=groupRequests();
  if (requestsByShard.isEmpty()) {
    return CompletableFuture.completedFuture(new BitSet(0));
  }
  CompletableFuture<BitSet> result=new CompletableFuture<>();
  AtomicInteger numRequests=new AtomicInteger(requestsByShard.size());
  AtomicReference<Throwable> lastFailure=new AtomicReference<>(null);
  final BitSet responses=new BitSet();
  for (Iterator<Map.Entry<ShardId,ShardUpsertRequest>> it=requestsByShard.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<ShardId,ShardUpsertRequest> entry=it.next();
    ShardUpsertRequest request=entry.getValue();
    it.remove();
    ActionListener<ShardResponse> listener=new ActionListener<ShardResponse>(){
      @Override public void onResponse(      ShardResponse shardResponse){
        Throwable failure=shardResponse.failure();
        if (failure == null) {
          processShardResponse(responses,shardResponse);
        }
 else {
          lastFailure.set(failure);
        }
        countdown();
      }
      @Override public void onFailure(      Exception e){
        lastFailure.set(e);
        countdown();
      }
      private void countdown(){
        if (numRequests.decrementAndGet() == 0) {
          Throwable throwable=lastFailure.get();
          if (throwable == null) {
            result.complete(responses);
          }
 else {
            throwable=SQLExceptions.unwrap(throwable,t -> t instanceof RuntimeException);
            if (!SQLExceptions.isDocumentAlreadyExistsException(throwable) && (updateAffectedNoRows(throwable) || partitionWasDeleted(throwable,request.index()) || mixedArgumentTypesFailure(throwable,request.items()))) {
              result.complete(responses);
            }
 else {
              result.completeExceptionally(throwable);
            }
          }
        }
      }
    }
;
    upsertAction.execute(request,new RetryListener<>(scheduler,actionListener -> upsertAction.execute(request,actionListener),listener,BACK_OFF_POLICY));
  }
  return result;
}","private CompletableFuture<BitSet> createAndSendRequests(){
  Map<ShardId,ShardUpsertRequest> requestsByShard;
  try {
    requestsByShard=groupRequests();
  }
 catch (  Throwable t) {
    return failedFuture(t);
  }
  if (requestsByShard.isEmpty()) {
    return CompletableFuture.completedFuture(new BitSet(0));
  }
  CompletableFuture<BitSet> result=new CompletableFuture<>();
  AtomicInteger numRequests=new AtomicInteger(requestsByShard.size());
  AtomicReference<Throwable> lastFailure=new AtomicReference<>(null);
  final BitSet responses=new BitSet();
  for (Iterator<Map.Entry<ShardId,ShardUpsertRequest>> it=requestsByShard.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<ShardId,ShardUpsertRequest> entry=it.next();
    ShardUpsertRequest request=entry.getValue();
    it.remove();
    ActionListener<ShardResponse> listener=new ActionListener<ShardResponse>(){
      @Override public void onResponse(      ShardResponse shardResponse){
        Throwable failure=shardResponse.failure();
        if (failure == null) {
          processShardResponse(responses,shardResponse);
        }
 else {
          lastFailure.set(failure);
        }
        countdown();
      }
      @Override public void onFailure(      Exception e){
        lastFailure.set(e);
        countdown();
      }
      private void countdown(){
        if (numRequests.decrementAndGet() == 0) {
          Throwable throwable=lastFailure.get();
          if (throwable == null) {
            result.complete(responses);
          }
 else {
            throwable=SQLExceptions.unwrap(throwable,t -> t instanceof RuntimeException);
            if (!SQLExceptions.isDocumentAlreadyExistsException(throwable) && (updateAffectedNoRows(throwable) || partitionWasDeleted(throwable,request.index()) || mixedArgumentTypesFailure(throwable,request.items()))) {
              result.complete(responses);
            }
 else {
              result.completeExceptionally(throwable);
            }
          }
        }
      }
    }
;
    upsertAction.execute(request,new RetryListener<>(scheduler,actionListener -> upsertAction.execute(request,actionListener),listener,BACK_OFF_POLICY));
  }
  return result;
}",0.9789621318373072
13100,"private void deletePartitionWhileInsertingData(final boolean useBulk) throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  int numberOfDocs=1000;
  final Object[][] bulkArgs=new Object[numberOfDocs][];
  for (int i=0; i < numberOfDocs; i++) {
    bulkArgs[i]=new Object[]{i % 2,randomAsciiOfLength(10)};
  }
  final int idToDelete=1;
  final AtomicReference<Exception> exceptionRef=new AtomicReference<>();
  final CountDownLatch insertLatch=new CountDownLatch(1);
  final String insertStmt=""String_Node_Str"";
  Thread insertThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        if (useBulk) {
          execute(insertStmt,bulkArgs);
        }
 else {
          for (          Object[] args : bulkArgs) {
            execute(insertStmt,args);
          }
        }
      }
 catch (      Exception t) {
        exceptionRef.set(t);
      }
 finally {
        insertLatch.countDown();
      }
    }
  }
);
  final CountDownLatch deleteLatch=new CountDownLatch(1);
  final String partitionName=new PartitionName(""String_Node_Str"",Collections.singletonList(new BytesRef(String.valueOf(idToDelete)))).asIndexName();
  final Object[] deleteArgs=new Object[]{idToDelete};
  Thread deleteThread=new Thread(new Runnable(){
    @Override public void run(){
      boolean deleted=false;
      while (!deleted) {
        try {
          MetaData metaData=client().admin().cluster().prepareState().execute().actionGet().getState().metaData();
          if (metaData.indices().get(partitionName) != null) {
            execute(""String_Node_Str"",deleteArgs);
            deleted=true;
          }
        }
 catch (        Throwable t) {
        }
      }
      deleteLatch.countDown();
    }
  }
);
  insertThread.start();
  deleteThread.start();
  deleteLatch.await(SQLTransportExecutor.REQUEST_TIMEOUT.getSeconds() + 1,TimeUnit.SECONDS);
  insertLatch.await(SQLTransportExecutor.REQUEST_TIMEOUT.getSeconds() + 1,TimeUnit.SECONDS);
  Exception exception=exceptionRef.get();
  if (exception != null) {
    throw exception;
  }
  insertThread.join();
  deleteThread.join();
}","private void deletePartitionWhileInsertingData(final boolean useBulk) throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  int numberOfDocs=100;
  final Object[][] bulkArgs=new Object[numberOfDocs][];
  for (int i=0; i < numberOfDocs; i++) {
    bulkArgs[i]=new Object[]{i % 2,randomAsciiOfLength(10)};
  }
  final int idToDelete=1;
  final AtomicReference<Exception> exceptionRef=new AtomicReference<>();
  final CountDownLatch insertLatch=new CountDownLatch(1);
  final String insertStmt=""String_Node_Str"";
  Thread insertThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        if (useBulk) {
          execute(insertStmt,bulkArgs);
        }
 else {
          for (          Object[] args : bulkArgs) {
            execute(insertStmt,args);
          }
        }
      }
 catch (      Exception t) {
        exceptionRef.set(t);
      }
 finally {
        insertLatch.countDown();
      }
    }
  }
);
  final CountDownLatch deleteLatch=new CountDownLatch(1);
  final String partitionName=new PartitionName(""String_Node_Str"",Collections.singletonList(new BytesRef(String.valueOf(idToDelete)))).asIndexName();
  final Object[] deleteArgs=new Object[]{idToDelete};
  Thread deleteThread=new Thread(new Runnable(){
    @Override public void run(){
      boolean deleted=false;
      while (!deleted) {
        try {
          MetaData metaData=client().admin().cluster().prepareState().execute().actionGet().getState().metaData();
          if (metaData.indices().get(partitionName) != null) {
            execute(""String_Node_Str"",deleteArgs);
            deleted=true;
          }
        }
 catch (        Throwable t) {
        }
      }
      deleteLatch.countDown();
    }
  }
);
  insertThread.start();
  deleteThread.start();
  deleteLatch.await(SQLTransportExecutor.REQUEST_TIMEOUT.getSeconds() + 1,TimeUnit.SECONDS);
  insertLatch.await(SQLTransportExecutor.REQUEST_TIMEOUT.getSeconds() + 1,TimeUnit.SECONDS);
  Exception exception=exceptionRef.get();
  if (exception != null) {
    throw exception;
  }
  insertThread.join();
  deleteThread.join();
}",0.9911586784550954
13101,"public MultiSourceSelect(Map<QualifiedName,AnalyzedRelation> sources,Collection<? extends Path> outputNames,QuerySpec querySpec,List<JoinPair> joinPairs){
}","public MultiSourceSelect(MultiSourceSelect mss,QuerySpec querySpec){
  this.sources=mss.sources;
  this.joinPairs=mss.joinPairs;
  this.splitter=new RelationSplitter(querySpec,sources.values().stream().map(rs -> rs.relation()).collect(Collectors.toList()),joinPairs);
  this.querySpec=querySpec;
  this.fields=mss.fields;
}",0.2546972860125261
13102,"@Override public AnalyzedRelation visitMultiSourceSelect(MultiSourceSelect mss,TransactionContext context){
  QuerySpec querySpec=mss.querySpec();
  querySpec.normalize(normalizer,context);
  mss=new MultiSourceSelect(Maps.transformValues(mss.sources(),RelationSource::relation),mss.fields(),querySpec,mss.joinPairs());
  mss.pushDownQuerySpecs();
  if (mss.sources().size() == 2) {
    Iterator<RelationSource> it=mss.sources().values().iterator();
    RelationSource leftSource=it.next();
    RelationSource rightSource=it.next();
    QualifiedName left=leftSource.qualifiedName();
    QualifiedName right=rightSource.qualifiedName();
    Rewriter.tryRewriteOuterToInnerJoin(normalizer,JoinPairs.ofRelationsWithMergedConditions(left,right,mss.joinPairs(),false),mss.querySpec(),left,right,leftSource.querySpec(),rightSource.querySpec());
  }
  return mss;
}","@Override public AnalyzedRelation visitMultiSourceSelect(MultiSourceSelect mss,TransactionContext context){
  QuerySpec querySpec=mss.querySpec();
  querySpec.normalize(normalizer,context);
  mss=new MultiSourceSelect(mss,querySpec);
  mss.pushDownQuerySpecs();
  if (mss.sources().size() == 2) {
    Iterator<RelationSource> it=mss.sources().values().iterator();
    RelationSource leftSource=it.next();
    RelationSource rightSource=it.next();
    QualifiedName left=leftSource.qualifiedName();
    QualifiedName right=rightSource.qualifiedName();
    Rewriter.tryRewriteOuterToInnerJoin(normalizer,JoinPairs.ofRelationsWithMergedConditions(left,right,mss.joinPairs(),false),mss.querySpec(),left,right,leftSource.querySpec(),rightSource.querySpec());
  }
  return mss;
}",0.931372549019608
13103,"@Test public void testNestedSimpleSelectUsesFetch() throws Exception {
  QueryThenFetch qtf=e.plan(""String_Node_Str"");
  Collect collect=(Collect)qtf.subPlan();
  assertThat(collect.collectPhase().projections(),Matchers.contains(instanceOf(TopNProjection.class),instanceOf(TopNProjection.class),instanceOf(FetchProjection.class),instanceOf(OrderedTopNProjection.class)));
}","@Test public void testNestedSimpleSelectUsesFetch() throws Exception {
  QueryThenFetch qtf=e.plan(""String_Node_Str"");
  List<Projection> projections=((Collect)qtf.subPlan()).collectPhase().projections();
  assertThat(projections,Matchers.contains(instanceOf(TopNProjection.class),instanceOf(TopNProjection.class),instanceOf(FetchProjection.class),instanceOf(OrderedTopNProjection.class)));
  assertThat(projections.get(3).outputs(),isSQL(""String_Node_Str""));
}",0.7721822541966427
13104,"private MultiConsumer(int numAccepts,BatchConsumer consumer,Function<BatchIterator[],BatchIterator> compositeBatchIteratorFactory){
  this.remainingAccepts=new AtomicInteger(numAccepts);
  this.iterators=new BatchIterator[numAccepts];
  this.consumer=consumer;
  this.compositeBatchIteratorFactory=compositeBatchIteratorFactory;
}","private MultiConsumer(int numAccepts,BatchConsumer consumer,Function<BatchIterator[],BatchIterator> compositeBatchIteratorFactory){
  this.remainingAccepts=numAccepts;
  this.iterators=new BatchIterator[numAccepts];
  this.consumer=consumer;
  this.compositeBatchIteratorFactory=compositeBatchIteratorFactory;
}",0.9453978159126364
13105,"@Override public void accept(BatchIterator iterator,@Nullable Throwable failure){
  int remaining=remainingAccepts.decrementAndGet();
  if (failure != null) {
    lastFailure=failure;
  }
synchronized (iterators) {
    iterators[remaining]=iterator;
  }
  if (remaining == 0) {
    if (lastFailure == null) {
      consumer.accept(compositeBatchIteratorFactory.apply(iterators),null);
    }
 else {
      consumer.accept(null,lastFailure);
    }
  }
}","@Override public void accept(BatchIterator iterator,@Nullable Throwable failure){
  int remaining;
synchronized (iterators) {
    remainingAccepts--;
    remaining=remainingAccepts;
    if (failure != null) {
      lastFailure=failure;
    }
    iterators[remaining]=iterator;
  }
  if (remaining == 0) {
    if (lastFailure == null) {
      consumer.accept(compositeBatchIteratorFactory.apply(iterators),null);
    }
 else {
      consumer.accept(null,lastFailure);
    }
  }
}",0.8675995694294941
13106,"@Override public void accept(BatchIterator iterator,@Nullable Throwable failure){
  delegate.accept(new ListenableBatchIterator(iterator,completionFuture),failure);
}","@Override public void accept(BatchIterator iterator,@Nullable Throwable failure){
  if (failure == null) {
    delegate.accept(new ListenableBatchIterator(iterator,completionFuture),null);
  }
 else {
    delegate.accept(null,failure);
    completionFuture.completeExceptionally(failure);
  }
}",0.691304347826087
13107,"@Override public void accept(BatchIterator it,Throwable failure){
  if (failure == null) {
    BatchRowVisitor.visitRows(it,Collectors.mapping(Row::materialize,Collectors.toList())).whenComplete((r,t) -> {
      if (t == null) {
        result.complete(r);
      }
 else {
        result.completeExceptionally(t);
      }
      it.close();
    }
);
  }
 else {
    result.completeExceptionally(failure);
  }
}","@Override public void accept(BatchIterator it,Throwable failure){
  if (failure == null) {
    BatchRowVisitor.visitRows(it,Collectors.mapping(Row::materialize,Collectors.toList())).whenComplete((r,t) -> {
      if (t == null) {
        result.complete(r);
      }
 else {
        result.completeExceptionally(t);
      }
      it.close();
    }
);
  }
 else {
    if (it != null) {
      it.close();
    }
    result.completeExceptionally(failure);
  }
}",0.9467592592592592
13108,"private Settings createIndexSettings(ClusterState currentState,List<IndexTemplateMetaData> templates){
  Settings.Builder indexSettingsBuilder=settingsBuilder();
  for (int i=templates.size() - 1; i >= 0; i--) {
    indexSettingsBuilder.put(templates.get(i).settings());
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_NUMBER_OF_SHARDS) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,settings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5));
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_NUMBER_OF_REPLICAS) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,settings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1));
  }
  if (settings.get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS) != null && indexSettingsBuilder.get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,settings.get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS));
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_VERSION_CREATED) == null) {
    DiscoveryNodes nodes=currentState.nodes();
    final Version createdVersion=Version.smallest(version,nodes.smallestNonClientNodeVersion());
    indexSettingsBuilder.put(IndexMetaData.SETTING_VERSION_CREATED,createdVersion);
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_CREATION_DATE) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_CREATION_DATE,System.currentTimeMillis());
  }
  indexSettingsBuilder.put(IndexMetaData.SETTING_INDEX_UUID,Strings.randomBase64UUID());
  return indexSettingsBuilder.build();
}","private Settings.Builder createIndexSettings(ClusterState currentState,List<IndexTemplateMetaData> templates){
  Settings.Builder indexSettingsBuilder=settingsBuilder();
  for (int i=templates.size() - 1; i >= 0; i--) {
    indexSettingsBuilder.put(templates.get(i).settings());
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_NUMBER_OF_SHARDS) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,settings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5));
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_NUMBER_OF_REPLICAS) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,settings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1));
  }
  if (settings.get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS) != null && indexSettingsBuilder.get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,settings.get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS));
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_VERSION_CREATED) == null) {
    DiscoveryNodes nodes=currentState.nodes();
    final Version createdVersion=Version.smallest(version,nodes.smallestNonClientNodeVersion());
    indexSettingsBuilder.put(IndexMetaData.SETTING_VERSION_CREATED,createdVersion);
  }
  if (indexSettingsBuilder.get(IndexMetaData.SETTING_CREATION_DATE) == null) {
    indexSettingsBuilder.put(IndexMetaData.SETTING_CREATION_DATE,System.currentTimeMillis());
  }
  indexSettingsBuilder.put(IndexMetaData.SETTING_INDEX_UUID,Strings.randomBase64UUID());
  return indexSettingsBuilder;
}",0.9950647748303516
13109,"ClusterState executeCreateIndices(ClusterState currentState,BulkCreateIndicesRequest request) throws Exception {
  List<String> indicesToCreate=new ArrayList<>(request.indices().size());
  String removalReason=null;
  String testIndex=null;
  try {
    validateAndFilterExistingIndices(currentState,indicesToCreate,request);
    if (indicesToCreate.isEmpty()) {
      return currentState;
    }
    Map<String,IndexMetaData.Custom> customs=Maps.newHashMap();
    Map<String,Map<String,Object>> mappings=Maps.newHashMap();
    Map<String,AliasMetaData> templatesAliases=Maps.newHashMap();
    List<String> templateNames=Lists.newArrayList();
    List<IndexTemplateMetaData> templates=findTemplates(request,currentState,indexTemplateFilter);
    applyTemplates(customs,mappings,templatesAliases,templateNames,templates);
    File mappingsDir=new File(environment.configFile().toFile(),""String_Node_Str"");
    if (mappingsDir.isDirectory()) {
      addMappingFromMappingsFile(mappings,mappingsDir,request);
    }
    Settings indexSettings=createIndexSettings(currentState,templates);
    testIndex=indicesToCreate.get(0);
    indicesService.createIndex(testIndex,indexSettings,clusterService.localNode().getId());
    IndexService indexService=indicesService.indexServiceSafe(testIndex);
    MapperService mapperService=indexService.mapperService();
    if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) {
      try {
        mapperService.merge(MapperService.DEFAULT_MAPPING,new CompressedXContent(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()),MapperService.MergeReason.MAPPING_UPDATE,false);
      }
 catch (      Exception e) {
        removalReason=""String_Node_Str"";
        throw new MapperParsingException(""String_Node_Str"" + MapperService.DEFAULT_MAPPING + ""String_Node_Str"",e);
      }
    }
    for (    Map.Entry<String,Map<String,Object>> entry : mappings.entrySet()) {
      if (entry.getKey().equals(MapperService.DEFAULT_MAPPING)) {
        continue;
      }
      try {
        mapperService.merge(entry.getKey(),new CompressedXContent(XContentFactory.jsonBuilder().map(entry.getValue()).string()),MapperService.MergeReason.MAPPING_UPDATE,false);
      }
 catch (      Exception e) {
        removalReason=""String_Node_Str"";
        throw new MapperParsingException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",e);
      }
    }
    IndexQueryParserService indexQueryParserService=indexService.queryParserService();
    for (    AliasMetaData aliasMetaData : templatesAliases.values()) {
      if (aliasMetaData.filter() != null) {
        aliasValidator.validateAliasFilter(aliasMetaData.alias(),aliasMetaData.filter().uncompressed(),indexQueryParserService);
      }
    }
    Map<String,MappingMetaData> mappingsMetaData=Maps.newHashMap();
    for (    DocumentMapper mapper : mapperService.docMappers(true)) {
      MappingMetaData mappingMd=new MappingMetaData(mapper);
      mappingsMetaData.put(mapper.type(),mappingMd);
    }
    MetaData.Builder newMetaDataBuilder=MetaData.builder(currentState.metaData());
    for (    String index : indicesToCreate) {
      final IndexMetaData.Builder indexMetaDataBuilder=IndexMetaData.builder(index).settings(indexSettings);
      for (      MappingMetaData mappingMd : mappingsMetaData.values()) {
        indexMetaDataBuilder.putMapping(mappingMd);
      }
      for (      AliasMetaData aliasMetaData : templatesAliases.values()) {
        indexMetaDataBuilder.putAlias(aliasMetaData);
      }
      for (      Map.Entry<String,IndexMetaData.Custom> customEntry : customs.entrySet()) {
        indexMetaDataBuilder.putCustom(customEntry.getKey(),customEntry.getValue());
      }
      indexMetaDataBuilder.state(IndexMetaData.State.OPEN);
      final IndexMetaData indexMetaData;
      try {
        indexMetaData=indexMetaDataBuilder.build();
      }
 catch (      Exception e) {
        removalReason=""String_Node_Str"";
        throw e;
      }
      logger.info(""String_Node_Str"",index,templateNames,indexMetaData.getNumberOfShards(),indexMetaData.getNumberOfReplicas(),mappings.keySet());
      indexService.indicesLifecycle().beforeIndexAddedToCluster(new Index(index),indexMetaData.getSettings());
      newMetaDataBuilder.put(indexMetaData,false);
    }
    MetaData newMetaData=newMetaDataBuilder.build();
    ClusterState updatedState=ClusterState.builder(currentState).metaData(newMetaData).build();
    RoutingTable.Builder routingTableBuilder=RoutingTable.builder(updatedState.routingTable());
    for (    String index : indicesToCreate) {
      routingTableBuilder.addAsNew(updatedState.metaData().index(index));
    }
    RoutingAllocation.Result routingResult=allocationService.reroute(ClusterState.builder(updatedState).routingTable(routingTableBuilder).build(),""String_Node_Str"");
    updatedState=ClusterState.builder(updatedState).routingResult(routingResult).build();
    removalReason=""String_Node_Str"";
    return updatedState;
  }
  finally {
    if (testIndex != null) {
      indicesService.deleteIndex(testIndex,removalReason != null ? removalReason : ""String_Node_Str"");
    }
  }
}","ClusterState executeCreateIndices(ClusterState currentState,BulkCreateIndicesRequest request) throws Exception {
  List<String> indicesToCreate=new ArrayList<>(request.indices().size());
  String removalReason=null;
  String testIndex=null;
  try {
    validateAndFilterExistingIndices(currentState,indicesToCreate,request);
    if (indicesToCreate.isEmpty()) {
      return currentState;
    }
    Map<String,IndexMetaData.Custom> customs=Maps.newHashMap();
    Map<String,Map<String,Object>> mappings=Maps.newHashMap();
    Map<String,AliasMetaData> templatesAliases=Maps.newHashMap();
    List<String> templateNames=Lists.newArrayList();
    List<IndexTemplateMetaData> templates=findTemplates(request,currentState,indexTemplateFilter);
    applyTemplates(customs,mappings,templatesAliases,templateNames,templates);
    File mappingsDir=new File(environment.configFile().toFile(),""String_Node_Str"");
    if (mappingsDir.isDirectory()) {
      addMappingFromMappingsFile(mappings,mappingsDir,request);
    }
    Settings.Builder indexSettingsBuilder=createIndexSettings(currentState,templates);
    testIndex=indicesToCreate.get(0);
    indicesService.createIndex(testIndex,indexSettingsBuilder.build(),clusterService.localNode().getId());
    IndexService indexService=indicesService.indexServiceSafe(testIndex);
    MapperService mapperService=indexService.mapperService();
    if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) {
      try {
        mapperService.merge(MapperService.DEFAULT_MAPPING,new CompressedXContent(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()),MapperService.MergeReason.MAPPING_UPDATE,false);
      }
 catch (      Exception e) {
        removalReason=""String_Node_Str"";
        throw new MapperParsingException(""String_Node_Str"" + MapperService.DEFAULT_MAPPING + ""String_Node_Str"",e);
      }
    }
    for (    Map.Entry<String,Map<String,Object>> entry : mappings.entrySet()) {
      if (entry.getKey().equals(MapperService.DEFAULT_MAPPING)) {
        continue;
      }
      try {
        mapperService.merge(entry.getKey(),new CompressedXContent(XContentFactory.jsonBuilder().map(entry.getValue()).string()),MapperService.MergeReason.MAPPING_UPDATE,false);
      }
 catch (      Exception e) {
        removalReason=""String_Node_Str"";
        throw new MapperParsingException(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",e);
      }
    }
    IndexQueryParserService indexQueryParserService=indexService.queryParserService();
    for (    AliasMetaData aliasMetaData : templatesAliases.values()) {
      if (aliasMetaData.filter() != null) {
        aliasValidator.validateAliasFilter(aliasMetaData.alias(),aliasMetaData.filter().uncompressed(),indexQueryParserService);
      }
    }
    Map<String,MappingMetaData> mappingsMetaData=Maps.newHashMap();
    for (    DocumentMapper mapper : mapperService.docMappers(true)) {
      MappingMetaData mappingMd=new MappingMetaData(mapper);
      mappingsMetaData.put(mapper.type(),mappingMd);
    }
    MetaData.Builder newMetaDataBuilder=MetaData.builder(currentState.metaData());
    for (    String index : indicesToCreate) {
      Settings indexSettings=indexSettingsBuilder.put(IndexMetaData.SETTING_INDEX_UUID,Strings.randomBase64UUID()).build();
      final IndexMetaData.Builder indexMetaDataBuilder=IndexMetaData.builder(index).settings(indexSettings);
      for (      MappingMetaData mappingMd : mappingsMetaData.values()) {
        indexMetaDataBuilder.putMapping(mappingMd);
      }
      for (      AliasMetaData aliasMetaData : templatesAliases.values()) {
        indexMetaDataBuilder.putAlias(aliasMetaData);
      }
      for (      Map.Entry<String,IndexMetaData.Custom> customEntry : customs.entrySet()) {
        indexMetaDataBuilder.putCustom(customEntry.getKey(),customEntry.getValue());
      }
      indexMetaDataBuilder.state(IndexMetaData.State.OPEN);
      final IndexMetaData indexMetaData;
      try {
        indexMetaData=indexMetaDataBuilder.build();
      }
 catch (      Exception e) {
        removalReason=""String_Node_Str"";
        throw e;
      }
      logger.info(""String_Node_Str"",index,templateNames,indexMetaData.getNumberOfShards(),indexMetaData.getNumberOfReplicas(),mappings.keySet());
      indexService.indicesLifecycle().beforeIndexAddedToCluster(new Index(index),indexMetaData.getSettings());
      newMetaDataBuilder.put(indexMetaData,false);
    }
    MetaData newMetaData=newMetaDataBuilder.build();
    ClusterState updatedState=ClusterState.builder(currentState).metaData(newMetaData).build();
    RoutingTable.Builder routingTableBuilder=RoutingTable.builder(updatedState.routingTable());
    for (    String index : indicesToCreate) {
      routingTableBuilder.addAsNew(updatedState.metaData().index(index));
    }
    RoutingAllocation.Result routingResult=allocationService.reroute(ClusterState.builder(updatedState).routingTable(routingTableBuilder).build(),""String_Node_Str"");
    updatedState=ClusterState.builder(updatedState).routingResult(routingResult).build();
    removalReason=""String_Node_Str"";
    return updatedState;
  }
  finally {
    if (testIndex != null) {
      indicesService.deleteIndex(testIndex,removalReason != null ? removalReason : ""String_Node_Str"");
    }
  }
}",0.9825402916346891
13110,"private void validateInsertPartitionedTable(){
  String partitionName=new PartitionName(""String_Node_Str"",Collections.singletonList(new BytesRef(String.valueOf(13959981214861L)))).asIndexName();
  assertTrue(internalCluster().clusterService().state().metaData().hasIndex(partitionName));
  assertNotNull(client().admin().cluster().prepareState().execute().actionGet().getState().metaData().indices().get(partitionName).getAliases().get(""String_Node_Str""));
  assertThat(client().prepareSearch(partitionName).setTypes(Constants.DEFAULT_MAPPING_TYPE).setSize(0).setQuery(new MatchAllQueryBuilder()).execute().actionGet().getHits().totalHits(),is(1L));
  partitionName=new PartitionName(""String_Node_Str"",Collections.singletonList(new BytesRef(String.valueOf(0L)))).asIndexName();
  assertTrue(internalCluster().clusterService().state().metaData().hasIndex(partitionName));
  assertNotNull(client().admin().cluster().prepareState().execute().actionGet().getState().metaData().indices().get(partitionName).getAliases().get(""String_Node_Str""));
  assertThat(client().prepareSearch(partitionName).setTypes(Constants.DEFAULT_MAPPING_TYPE).setSize(0).setQuery(new MatchAllQueryBuilder()).execute().actionGet().getHits().totalHits(),is(1L));
  List<BytesRef> nullList=new ArrayList<>();
  nullList.add(null);
  partitionName=new PartitionName(""String_Node_Str"",nullList).asIndexName();
  assertTrue(internalCluster().clusterService().state().metaData().hasIndex(partitionName));
  assertNotNull(client().admin().cluster().prepareState().execute().actionGet().getState().metaData().indices().get(partitionName).getAliases().get(""String_Node_Str""));
  assertThat(client().prepareSearch(partitionName).setTypes(Constants.DEFAULT_MAPPING_TYPE).setSize(0).setQuery(new MatchAllQueryBuilder()).execute().actionGet().getHits().totalHits(),is(1L));
}","private void validateInsertPartitionedTable(){
  Set<String> indexUUIDs=new HashSet<>(3);
  String partitionName=new PartitionName(""String_Node_Str"",Collections.singletonList(new BytesRef(String.valueOf(13959981214861L)))).asIndexName();
  assertThat(internalCluster().clusterService().state().metaData().hasIndex(partitionName),is(true));
  IndexMetaData indexMetaData=client().admin().cluster().prepareState().execute().actionGet().getState().metaData().indices().get(partitionName);
  indexUUIDs.add(indexMetaData.getIndexUUID());
  assertThat(indexMetaData.getAliases().get(""String_Node_Str""),notNullValue());
  assertThat(client().prepareSearch(partitionName).setTypes(Constants.DEFAULT_MAPPING_TYPE).setSize(0).setQuery(new MatchAllQueryBuilder()).execute().actionGet().getHits().totalHits(),is(1L));
  partitionName=new PartitionName(""String_Node_Str"",Collections.singletonList(new BytesRef(String.valueOf(0L)))).asIndexName();
  assertThat(internalCluster().clusterService().state().metaData().hasIndex(partitionName),is(true));
  indexMetaData=client().admin().cluster().prepareState().execute().actionGet().getState().metaData().indices().get(partitionName);
  indexUUIDs.add(indexMetaData.getIndexUUID());
  assertThat(indexMetaData.getAliases().get(""String_Node_Str""),notNullValue());
  assertThat(client().prepareSearch(partitionName).setTypes(Constants.DEFAULT_MAPPING_TYPE).setSize(0).setQuery(new MatchAllQueryBuilder()).execute().actionGet().getHits().totalHits(),is(1L));
  List<BytesRef> nullList=new ArrayList<>();
  nullList.add(null);
  partitionName=new PartitionName(""String_Node_Str"",nullList).asIndexName();
  assertThat(internalCluster().clusterService().state().metaData().hasIndex(partitionName),is(true));
  indexMetaData=client().admin().cluster().prepareState().execute().actionGet().getState().metaData().indices().get(partitionName);
  indexUUIDs.add(indexMetaData.getIndexUUID());
  assertThat(indexMetaData.getAliases().get(""String_Node_Str""),notNullValue());
  assertThat(client().prepareSearch(partitionName).setTypes(Constants.DEFAULT_MAPPING_TYPE).setSize(0).setQuery(new MatchAllQueryBuilder()).execute().actionGet().getHits().totalHits(),is(1L));
  assertThat(indexUUIDs.size(),is(3));
}",0.8774002954209749
13111,"@Override public ByteSizeValue extract(Settings settings){
  return settings.getAsMemory(name,defaultValue);
}","@Override public ByteSizeValue extract(Settings settings){
  return settings.getAsMemory(settingName(),defaultValue);
}",0.960698689956332
13112,"protected IpType(){
}","IpType(){
}",0.6875
13113,"static public boolean isValid(BytesRef ip){
  if (ip.length < 7 && ip.length > 15) {
    return false;
  }
  boolean precededByZero=false;
  short symbolsInOctet=0;
  short numberOfDots=0;
  int segmentValue=0;
  for (int i=ip.offset; i < ip.length + ip.offset; i++) {
    int sym=ip.bytes[i] & 0xff;
    if (sym < 46 || sym > 57 || sym == 47) {
      return false;
    }
    if (isDigit(sym) && symbolsInOctet < 3 && !precededByZero) {
      precededByZero=(sym == 48 && symbolsInOctet == 0);
      segmentValue=segmentValue * 10 + (sym - '0');
      symbolsInOctet++;
    }
 else     if (sym == 46 && i < ip.length + ip.offset - 1) {
      numberOfDots++;
      if (numberOfDots > 3) {
        return false;
      }
      segmentValue=0;
      symbolsInOctet=0;
      precededByZero=false;
    }
 else {
      return false;
    }
    if (segmentValue > 255) {
      return false;
    }
  }
  return numberOfDots == 3;
}","static boolean isValid(BytesRef ip){
  if (ip.length < 7 || ip.length > 15) {
    return false;
  }
  boolean precededByZero=false;
  short symbolsInOctet=0;
  short numberOfDots=0;
  int segmentValue=0;
  for (int i=ip.offset; i < ip.length + ip.offset; i++) {
    int sym=ip.bytes[i] & 0xff;
    if (sym < 46 || sym > 57 || sym == 47) {
      return false;
    }
    if (isDigit(sym) && symbolsInOctet < 3 && !precededByZero) {
      precededByZero=(sym == 48 && symbolsInOctet == 0);
      segmentValue=segmentValue * 10 + (sym - '0');
      symbolsInOctet++;
    }
 else     if (sym == 46 && i < ip.length + ip.offset - 1) {
      numberOfDots++;
      if (numberOfDots > 3) {
        return false;
      }
      segmentValue=0;
      symbolsInOctet=0;
      precededByZero=false;
    }
 else {
      return false;
    }
    if (segmentValue > 255) {
      return false;
    }
  }
  return numberOfDots == 3;
}",0.9940054495912808
13114,"@Test public void testValidation() throws Exception {
  BytesRef[] validIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : validIps) {
    assertEquals(true,IpType.isValid(ip));
    assertEquals(true,IpType.isValid(TypeTestUtils.addOffset(ip)));
  }
  BytesRef[] invalidIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : invalidIps) {
    assertEquals(false,IpType.isValid(ip));
    assertEquals(false,IpType.isValid(TypeTestUtils.addOffset(ip)));
  }
}","@Test public void testValidation() throws Exception {
  BytesRef[] validIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : validIps) {
    assertThat(IpType.isValid(ip),is(true));
    assertThat(IpType.isValid(TypeTestUtils.addOffset(ip)),is(true));
  }
  BytesRef[] invalidIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : invalidIps) {
    assertThat(IpType.isValid(ip),is(false));
    assertThat(IpType.isValid(TypeTestUtils.addOffset(ip)),is(false));
  }
}",0.888
13115,"@Override public void finish(RepeatHandle repeatHandle){
  result.set((long)rows.iterator().next()[0]);
}","@Override public void finish(RepeatHandle repeatHandle){
  result.set((Long)rows.iterator().next()[0]);
}",0.9904761904761904
13116,"public void operationFinished(@Nullable Integer operationId,@Nullable UUID jobId,@Nullable String errorMessage,long usedBytes){
  if (operationId == null || jobId == null | !isEnabled()) {
    return;
  }
  OperationContext operationContext=operationsTable.remove(uniqueOperationId(operationId,jobId));
  if (operationContext == null) {
    return;
  }
  operationContext.usedBytes=usedBytes;
  Queue<OperationContextLog> operationContextLogs=operationsLog.get();
  operationContextLogs.offer(new OperationContextLog(operationContext,errorMessage));
}","public void operationFinished(@Nullable Integer operationId,@Nullable UUID jobId,@Nullable String errorMessage,long usedBytes){
  if (operationId == null || jobId == null || !isEnabled()) {
    return;
  }
  OperationContext operationContext=operationsTable.remove(uniqueOperationId(operationId,jobId));
  if (operationContext == null) {
    return;
  }
  operationContext.usedBytes=usedBytes;
  Queue<OperationContextLog> operationContextLogs=operationsLog.get();
  operationContextLogs.offer(new OperationContextLog(operationContext,errorMessage));
}",0.99909338168631
13117,"private void doFetch(FetchContext fetchContext,SettableFuture<IntObjectMap<StreamBucket>> resultFuture,@Nullable IntObjectMap<? extends IntContainer> toFetch) throws Exception {
}","private void doFetch(FetchContext fetchContext,SettableFuture<IntObjectMap<StreamBucket>> resultFuture,IntObjectMap<? extends IntContainer> toFetch) throws Exception {
}",0.971264367816092
13118,"public ObjectArrayFieldType(MappedFieldType ref){
  super(ref);
}","ObjectArrayFieldType(MappedFieldType ref){
  super(ref);
}",0.943089430894309
13119,"void jobInitializationFailed(Throwable t){
synchronized (this) {
    if (failure == null || failure instanceof InterruptedException) {
      failure=t;
    }
  }
  jobInitialized();
}","/** 
 * Indicates that a jobInitialization failed
 * @param t The cause of the initialization failure.If no failure has been set so far or if it was an InterruptedException it is overwritten.
 */
void jobInitializationFailed(Throwable t){
synchronized (this) {
    if (failure == null || failure instanceof InterruptedException) {
      failure=t;
    }
  }
  jobInitialized();
}",0.6512455516014235
13120,"@Test public void testResumeDigestBlobAddHeadAfterContent() throws IOException {
  UUID transferId=UUID.randomUUID();
  BlobContainer container=new BlobContainer(tmpFolder.newFolder().toPath());
  DigestBlob digestBlob=DigestBlob.resumeTransfer(container,""String_Node_Str"",transferId,2);
  BytesArray contentTail=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addContent(contentTail,false);
  BytesArray contentHead=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addToHead(contentHead);
  contentTail=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addContent(contentTail,true);
  byte[] buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(digestBlob.file())){
    stream.read(buffer,0,15);
    assertEquals(""String_Node_Str"",new BytesArray(buffer).toUtf8().trim());
  }
   File file=digestBlob.commit();
  buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(file)){
    stream.read(buffer,0,15);
    assertEquals(""String_Node_Str"",new BytesArray(buffer).toUtf8().trim());
  }
   assertTrue(file.exists());
  assertTrue(file.delete());
}","@Test public void testResumeDigestBlobAddHeadAfterContent() throws IOException {
  UUID transferId=UUID.randomUUID();
  BlobContainer container=new BlobContainer(tmpFolder.newFolder().toPath());
  DigestBlob digestBlob=DigestBlob.resumeTransfer(container,""String_Node_Str"",transferId,2);
  BytesArray contentTail=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addContent(contentTail,false);
  BytesArray contentHead=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addToHead(contentHead);
  contentTail=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addContent(contentTail,true);
  byte[] buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(digestBlob.file())){
    assertThat(stream.read(buffer,0,15),is(15));
    assertThat(new BytesArray(buffer).toUtf8().trim(),is(""String_Node_Str""));
  }
   File file=digestBlob.commit();
  buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(file)){
    assertThat(stream.read(buffer,0,15),is(15));
    assertThat(new BytesArray(buffer).toUtf8().trim(),is(""String_Node_Str""));
  }
   assertThat(file.exists(),is(true));
  assertThat(file.delete(),is(true));
}",0.8098891730605285
13121,"@Test public void testDigestBlobResumeHeadAndAddContent() throws IOException {
  String digest=""String_Node_Str"";
  UUID transferId=UUID.randomUUID();
  int currentPos=2;
  BlobContainer container=new BlobContainer(tmpFolder.newFolder().toPath());
  File filePath=new File(container.getTmpDirectory().toFile(),String.format(Locale.ENGLISH,""String_Node_Str"",digest,transferId.toString()));
  if (filePath.exists()) {
    filePath.delete();
  }
  DigestBlob digestBlob=DigestBlob.resumeTransfer(container,digest,transferId,currentPos);
  BytesArray contentHead=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addToHead(contentHead);
  BytesArray contentTail=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addContent(contentTail,false);
  contentHead=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addToHead(contentHead);
  contentTail=new BytesArray(""String_Node_Str"".getBytes());
  digestBlob.addContent(contentTail,true);
  byte[] buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(digestBlob.file())){
    stream.read(buffer,0,15);
    assertEquals(""String_Node_Str"",new BytesArray(buffer).toUtf8().trim());
  }
   File file=digestBlob.commit();
  buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(file)){
    stream.read(buffer,0,15);
    assertEquals(""String_Node_Str"",new BytesArray(buffer).toUtf8().trim());
  }
   assertTrue(file.exists());
  assertTrue(file.delete());
}","@Test public void testDigestBlobResumeHeadAndAddContent() throws IOException {
  String digest=""String_Node_Str"";
  UUID transferId=UUID.randomUUID();
  int currentPos=2;
  BlobContainer container=new BlobContainer(tmpFolder.newFolder().toPath());
  File filePath=new File(container.getTmpDirectory().toFile(),String.format(Locale.ENGLISH,""String_Node_Str"",digest,transferId.toString()));
  if (filePath.exists()) {
    assertThat(filePath.delete(),is(true));
  }
  DigestBlob digestBlob=DigestBlob.resumeTransfer(container,digest,transferId,currentPos);
  BytesArray contentHead=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addToHead(contentHead);
  BytesArray contentTail=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addContent(contentTail,false);
  contentHead=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addToHead(contentHead);
  contentTail=new BytesArray(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  digestBlob.addContent(contentTail,true);
  byte[] buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(digestBlob.file())){
    assertThat(stream.read(buffer,0,15),is(15));
    assertThat(new BytesArray(buffer).toUtf8().trim(),is(""String_Node_Str""));
  }
   File file=digestBlob.commit();
  buffer=new byte[15];
  try (FileInputStream stream=new FileInputStream(file)){
    assertThat(stream.read(buffer,0,15),is(15));
    assertThat(new BytesArray(buffer).toUtf8().trim(),is(""String_Node_Str""));
  }
   assertTrue(file.exists());
  assertTrue(file.delete());
}",0.8662087013411842
13122,"protected boolean mget(String[] uris,Header[][] headers,final String[] expectedContent) throws Throwable {
  final CountDownLatch latch=new CountDownLatch(uris.length);
  final ConcurrentHashMap<Integer,Boolean> results=new ConcurrentHashMap<>(uris.length);
  for (int i=0; i < uris.length; i++) {
    final int indexerId=i;
    final String uri=uris[indexerId];
    final Header[] header=headers[indexerId];
    final String expected=expectedContent[indexerId];
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          CloseableHttpResponse res=get(uri,header);
          Integer statusCode=res.getStatusLine().getStatusCode();
          String resultContent=EntityUtils.toString(res.getEntity());
          if (!resultContent.equals(expected)) {
            logger.warn(String.format(Locale.ENGLISH,""String_Node_Str"",indexerId,resultContent.length(),expected.length()));
          }
          results.put(indexerId,(statusCode >= 200 && statusCode < 300 && expected.equals(resultContent)));
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e,indexerId);
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    thread.start();
  }
  latch.await(30L,TimeUnit.SECONDS);
  return Iterables.all(results.values(),new Predicate<Boolean>(){
    @Override public boolean apply(    Boolean input){
      return input;
    }
  }
);
}","protected boolean mget(String[] uris,Header[][] headers,final String[] expectedContent) throws Throwable {
  final CountDownLatch latch=new CountDownLatch(uris.length);
  final ConcurrentHashMap<Integer,Boolean> results=new ConcurrentHashMap<>(uris.length);
  for (int i=0; i < uris.length; i++) {
    final int indexerId=i;
    final String uri=uris[indexerId];
    final Header[] header=headers[indexerId];
    final String expected=expectedContent[indexerId];
    Thread thread=new Thread(){
      @Override public void run(){
        try {
          CloseableHttpResponse res=get(uri,header);
          Integer statusCode=res.getStatusLine().getStatusCode();
          String resultContent=EntityUtils.toString(res.getEntity());
          if (!resultContent.equals(expected)) {
            logger.warn(String.format(Locale.ENGLISH,""String_Node_Str"",indexerId,resultContent.length(),expected.length()));
          }
          results.put(indexerId,(statusCode >= 200 && statusCode < 300 && expected.equals(resultContent)));
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e,indexerId);
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    thread.start();
  }
  assertThat(latch.await(30L,TimeUnit.SECONDS),is(true));
  return Iterables.all(results.values(),new Predicate<Boolean>(){
    @Override public boolean apply(    Boolean input){
      return input;
    }
  }
);
}",0.9926289926289926
13123,"@Test public void testHeadRequestConnectionIsNotClosed() throws Exception {
  Socket socket=new Socket(address.getAddress(),address.getPort());
  socket.setKeepAlive(true);
  socket.setSoTimeout(3000);
  PrintWriter pw=new PrintWriter(socket.getOutputStream());
  pw.print(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.flush();
  BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream()));
  int linesRead=0;
  while (linesRead < 3) {
    String line=reader.readLine();
    System.out.println(line);
    linesRead++;
  }
  assertSocketIsConnected(socket);
  pw.print(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.flush();
  int read=reader.read();
  assertThat(read,greaterThan(-1));
  assertSocketIsConnected(socket);
}","@Test public void testHeadRequestConnectionIsNotClosed() throws Exception {
  Socket socket=new Socket(address.getAddress(),address.getPort());
  socket.setKeepAlive(true);
  socket.setSoTimeout(3000);
  OutputStream outputStream=socket.getOutputStream();
  outputStream.write(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  outputStream.write(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  outputStream.flush();
  BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),StandardCharsets.UTF_8));
  int linesRead=0;
  while (linesRead < 3) {
    String line=reader.readLine();
    System.out.println(line);
    linesRead++;
  }
  assertSocketIsConnected(socket);
  outputStream.write(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  outputStream.write(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  outputStream.flush();
  int read=reader.read();
  assertThat(read,greaterThan(-1));
  assertSocketIsConnected(socket);
}",0.7318467695826186
13124,"@Test public void testResponseContainsCloseHeaderOnHttp10() throws Exception {
  Socket socket=new Socket(address.getAddress(),address.getPort());
  socket.setKeepAlive(false);
  socket.setSoTimeout(3000);
  PrintWriter pw=new PrintWriter(socket.getOutputStream());
  pw.print(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.flush();
  BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream()));
  String line;
  List<String> lines=new ArrayList<>();
  while ((line=reader.readLine()) != null) {
    lines.add(line);
  }
  assertThat(lines,hasItem(""String_Node_Str""));
}","@Test public void testResponseContainsCloseHeaderOnHttp10() throws Exception {
  Socket socket=new Socket(address.getAddress(),address.getPort());
  socket.setKeepAlive(false);
  socket.setSoTimeout(3000);
  OutputStream outputStream=socket.getOutputStream();
  outputStream.write(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  outputStream.write(""String_Node_Str"".getBytes(StandardCharsets.UTF_8));
  outputStream.flush();
  BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),StandardCharsets.UTF_8));
  String line;
  List<String> lines=new ArrayList<>();
  while ((line=reader.readLine()) != null) {
    lines.add(line);
  }
  assertThat(lines,hasItem(""String_Node_Str""));
}",0.7584650112866818
13125,"private String uploadFile(Client client,String content){
  byte[] digest=Blobs.digest(content);
  String digestString=Hex.encodeHexString(digest);
  byte[] contentBytes=content.getBytes();
  logger.trace(""String_Node_Str"",content,digestString);
  BytesArray bytes=new BytesArray(new byte[]{contentBytes[0]});
  if (content.length() == 1) {
    client.execute(StartBlobAction.INSTANCE,new StartBlobRequest(BlobIndex.fullIndexName(""String_Node_Str""),digest,bytes,true)).actionGet();
  }
 else {
    StartBlobRequest startBlobRequest=new StartBlobRequest(BlobIndex.fullIndexName(""String_Node_Str""),digest,bytes,false);
    client.execute(StartBlobAction.INSTANCE,startBlobRequest).actionGet();
    for (int i=1; i < contentBytes.length; i++) {
      try {
        Thread.sleep(timeBetweenChunks.get());
      }
 catch (      InterruptedException ex) {
        Thread.interrupted();
      }
      bytes=new BytesArray(new byte[]{contentBytes[i]});
      try {
        client.execute(PutChunkAction.INSTANCE,new PutChunkRequest(BlobIndex.fullIndexName(""String_Node_Str""),digest,startBlobRequest.transferId(),bytes,i,(i + 1) == content.length())).actionGet();
      }
 catch (      IllegalStateException ex) {
        Thread.interrupted();
      }
    }
  }
  logger.trace(""String_Node_Str"",content,digestString);
  return digestString;
}","private String uploadFile(Client client,String content){
  byte[] digest=Blobs.digest(content);
  String digestString=Hex.encodeHexString(digest);
  byte[] contentBytes=content.getBytes(StandardCharsets.UTF_8);
  logger.trace(""String_Node_Str"",content,digestString);
  BytesArray bytes=new BytesArray(new byte[]{contentBytes[0]});
  if (content.length() == 1) {
    client.execute(StartBlobAction.INSTANCE,new StartBlobRequest(BlobIndex.fullIndexName(""String_Node_Str""),digest,bytes,true)).actionGet();
  }
 else {
    StartBlobRequest startBlobRequest=new StartBlobRequest(BlobIndex.fullIndexName(""String_Node_Str""),digest,bytes,false);
    client.execute(StartBlobAction.INSTANCE,startBlobRequest).actionGet();
    for (int i=1; i < contentBytes.length; i++) {
      try {
        Thread.sleep(timeBetweenChunks.get());
      }
 catch (      InterruptedException ex) {
        Thread.interrupted();
      }
      bytes=new BytesArray(new byte[]{contentBytes[i]});
      try {
        client.execute(PutChunkAction.INSTANCE,new PutChunkRequest(BlobIndex.fullIndexName(""String_Node_Str""),digest,startBlobRequest.transferId(),bytes,i,(i + 1) == content.length())).actionGet();
      }
 catch (      IllegalStateException ex) {
        Thread.interrupted();
      }
    }
  }
  logger.trace(""String_Node_Str"",content,digestString);
  return digestString;
}",0.9918093819806404
13126,"@Test public void testPrimaryRelocationWhileIndexing() throws Exception {
  final int numberOfRelocations=1;
  final int numberOfWriters=2;
  final String node1=internalCluster().startNode();
  BlobAdminClient blobAdminClient=internalCluster().getInstance(BlobAdminClient.class,node1);
  logger.trace(""String_Node_Str"");
  Settings indexSettings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).build();
  blobAdminClient.createBlobTable(""String_Node_Str"",indexSettings).get();
  logger.trace(""String_Node_Str"");
  final String node2=internalCluster().startNode();
  ensureGreen();
  final AtomicLong idGenerator=new AtomicLong();
  final AtomicLong indexCounter=new AtomicLong();
  final AtomicBoolean stop=new AtomicBoolean(false);
  Thread[] writers=new Thread[numberOfWriters];
  final CountDownLatch stopLatch=new CountDownLatch(writers.length);
  logger.trace(""String_Node_Str"",writers.length);
  final List<String> uploadedDigests=Collections.synchronizedList(new ArrayList<String>(writers.length));
  for (int i=0; i < writers.length; i++) {
    final int indexerId=i;
    writers[i]=new Thread(){
      @Override public void run(){
        try {
          logger.trace(""String_Node_Str"",indexerId);
          while (!stop.get()) {
            long id=idGenerator.incrementAndGet();
            String digest=uploadFile(internalCluster().client(node1),genFile(id));
            uploadedDigests.add(digest);
            indexCounter.incrementAndGet();
          }
          logger.trace(""String_Node_Str"",indexerId);
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e,indexerId);
        }
 finally {
          stopLatch.countDown();
        }
      }
    }
;
    writers[i].setName(""String_Node_Str"");
    writers[i].setDaemon(true);
    writers[i].start();
  }
  logger.trace(""String_Node_Str"");
  while (uploadedDigests.size() < 2) {
    Thread.sleep(10);
  }
  logger.trace(""String_Node_Str"");
  timeBetweenChunks.set(10);
  logger.trace(""String_Node_Str"");
  for (int i=0; i < numberOfRelocations; i++) {
    String fromNode=(i % 2 == 0) ? node1 : node2;
    String toNode=node1.equals(fromNode) ? node2 : node1;
    logger.trace(""String_Node_Str"",fromNode,toNode);
    internalCluster().client(node1).admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId(BlobIndex.fullIndexName(""String_Node_Str""),0),fromNode,toNode)).execute().actionGet();
    ClusterHealthResponse clusterHealthResponse=internalCluster().client(node1).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForRelocatingShards(0).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();
    assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
    clusterHealthResponse=internalCluster().client(node2).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForRelocatingShards(0).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();
    assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
    logger.trace(""String_Node_Str"",fromNode,toNode);
  }
  logger.trace(""String_Node_Str"");
  logger.trace(""String_Node_Str"");
  timeBetweenChunks.set(0);
  stop.set(true);
  stopLatch.await(60,TimeUnit.SECONDS);
  logger.trace(""String_Node_Str"");
  logger.trace(""String_Node_Str"",indexCounter.get(),uploadedDigests.size());
  assertEquals(indexCounter.get(),uploadedDigests.size());
  BlobIndicesService blobIndicesService=internalCluster().getInstance(BlobIndicesService.class,node2);
  for (  String digest : uploadedDigests) {
    BlobShard blobShard=blobIndicesService.localBlobShard(BlobIndex.fullIndexName(""String_Node_Str""),digest);
    long length=blobShard.blobContainer().getFile(digest).length();
    assertThat(length,greaterThanOrEqualTo(1L));
  }
  for (  Thread writer : writers) {
    writer.join(6000);
  }
}","@Test public void testPrimaryRelocationWhileIndexing() throws Exception {
  final int numberOfRelocations=1;
  final int numberOfWriters=2;
  final String node1=internalCluster().startNode();
  BlobAdminClient blobAdminClient=internalCluster().getInstance(BlobAdminClient.class,node1);
  logger.trace(""String_Node_Str"");
  Settings indexSettings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).build();
  blobAdminClient.createBlobTable(""String_Node_Str"",indexSettings).get();
  logger.trace(""String_Node_Str"");
  final String node2=internalCluster().startNode();
  ensureGreen();
  final AtomicLong idGenerator=new AtomicLong();
  final AtomicLong indexCounter=new AtomicLong();
  final AtomicBoolean stop=new AtomicBoolean(false);
  Thread[] writers=new Thread[numberOfWriters];
  final CountDownLatch stopLatch=new CountDownLatch(writers.length);
  logger.trace(""String_Node_Str"",writers.length);
  final List<String> uploadedDigests=Collections.synchronizedList(new ArrayList<String>(writers.length));
  for (int i=0; i < writers.length; i++) {
    final int indexerId=i;
    writers[i]=new Thread(){
      @Override public void run(){
        try {
          logger.trace(""String_Node_Str"",indexerId);
          while (!stop.get()) {
            long id=idGenerator.incrementAndGet();
            String digest=uploadFile(internalCluster().client(node1),genFile(id));
            uploadedDigests.add(digest);
            indexCounter.incrementAndGet();
          }
          logger.trace(""String_Node_Str"",indexerId);
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e,indexerId);
        }
 finally {
          stopLatch.countDown();
        }
      }
    }
;
    writers[i].setName(""String_Node_Str"");
    writers[i].setDaemon(true);
    writers[i].start();
  }
  logger.trace(""String_Node_Str"");
  while (uploadedDigests.size() < 2) {
    Thread.sleep(10);
  }
  logger.trace(""String_Node_Str"");
  timeBetweenChunks.set(10);
  logger.trace(""String_Node_Str"");
  for (int i=0; i < numberOfRelocations; i++) {
    String fromNode=(i % 2 == 0) ? node1 : node2;
    String toNode=node1.equals(fromNode) ? node2 : node1;
    logger.trace(""String_Node_Str"",fromNode,toNode);
    internalCluster().client(node1).admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId(BlobIndex.fullIndexName(""String_Node_Str""),0),fromNode,toNode)).execute().actionGet();
    ClusterHealthResponse clusterHealthResponse=internalCluster().client(node1).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForRelocatingShards(0).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();
    assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
    clusterHealthResponse=internalCluster().client(node2).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForRelocatingShards(0).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();
    assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
    logger.trace(""String_Node_Str"",fromNode,toNode);
  }
  logger.trace(""String_Node_Str"");
  logger.trace(""String_Node_Str"");
  timeBetweenChunks.set(0);
  stop.set(true);
  assertThat(stopLatch.await(60,TimeUnit.SECONDS),is(true));
  logger.trace(""String_Node_Str"");
  logger.trace(""String_Node_Str"",indexCounter.get(),uploadedDigests.size());
  assertEquals(indexCounter.get(),uploadedDigests.size());
  BlobIndicesService blobIndicesService=internalCluster().getInstance(BlobIndicesService.class,node2);
  for (  String digest : uploadedDigests) {
    BlobShard blobShard=blobIndicesService.localBlobShard(BlobIndex.fullIndexName(""String_Node_Str""),digest);
    long length=blobShard.blobContainer().getFile(digest).length();
    assertThat(length,greaterThanOrEqualTo(1L));
  }
  for (  Thread writer : writers) {
    writer.join(6000);
  }
}",0.997310795236266
13127,"@Nullable public String toString(){
  return asIndexName();
}","@Override public String toString(){
  return asIndexName();
}",0.8852459016393442
13128,"@Override public void fail(@Nonnull Throwable t){
  try {
    channel.sendResponse(new CrateThrowableRestResponse(channel,t));
  }
 catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    super.fail(t);
  }
}","@Override public void fail(@Nonnull Throwable t){
  try {
    channel.sendResponse(new CrateThrowableRestResponse(channel,createSQLActionException(t)));
  }
 catch (  Throwable e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    super.fail(t);
  }
}",0.9433198380566802
13129,"@Override public void repeat(){
  try {
    Iterator<Row> iterator=pagingIterator.repeat().iterator();
    lastIterator=iterator;
    lastListener=PageConsumeListener.NO_OP_LISTENER;
    processBuckets(iterator,PageConsumeListener.NO_OP_LISTENER);
  }
 catch (  Throwable t) {
    fail(t);
  }
}","@Override public void repeat(){
  try {
    Iterator<Row> iterator=pagingIterator.repeat().iterator();
    lastIterator=iterator;
    lastListener=PageConsumeListener.NO_OP_LISTENER;
    processBuckets(iterator,PageConsumeListener.NO_OP_LISTENER);
  }
 catch (  Throwable t) {
    rowReceiver.fail(t);
  }
}",0.9800664451827242
13130,"public void repeatUpstream(){
  repeatHandle.repeat();
}","@Override public void repeatUpstream(){
  invokeFailure=true;
  super.repeatUpstream();
}",0.6620689655172414
13131,"@Override public Result setNextRow(Row row){
  Result result=super.setNextRow(row);
  numRows++;
  if (numRows == pauseAfter) {
    return Result.PAUSE;
  }
  return result;
}","@Override public Result setNextRow(Row row){
  if (invokeFailure) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return super.setNextRow(row);
}",0.4702380952380952
13132,"@Test public void testCopyFromFileStrictTable() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  String uriPath=Joiner.on(""String_Node_Str"").join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{uriPath});
  assertThat(response.rowCount(),is(0L));
}","@Test public void testCopyFromFileStrictTable() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertThat(response.rowCount(),is(0L));
}",0.782608695652174
13133,"@Test public void testCopyFromWithGeneratedColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  refresh();
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],endsWith(""String_Node_Str""));
}","@Test public void testCopyFromWithGeneratedColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  refresh();
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],endsWith(""String_Node_Str""));
}",0.8714285714285714
13134,"@Test public void testCopyFromFileWithEmptyLine() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  File newFile=folder.newFile();
  try (BufferedWriter writer=new BufferedWriter(new FileWriter(newFile))){
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
   execute(""String_Node_Str"",new Object[]{newFile.getPath()});
  assertEquals(2L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertThat((Integer)response.rows()[0][0],is(1));
  assertThat((Integer)response.rows()[1][0],is(2));
}","@Test public void testCopyFromFileWithEmptyLine() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  File newFile=folder.newFile();
  try (BufferedWriter writer=new BufferedWriter(new FileWriter(newFile))){
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
   execute(""String_Node_Str"",new Object[]{Paths.get(newFile.toURI()).toUri().toString()});
  assertEquals(2L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertThat((Integer)response.rows()[0][0],is(1));
  assertThat((Integer)response.rows()[1][0],is(2));
}",0.9586776859504132
13135,"@Test public void testCopyFromFilePattern() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  String uriPath=Joiner.on(""String_Node_Str"").join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{uriPath});
  assertEquals(3L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
}","@Test public void testCopyFromFilePattern() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertEquals(3L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
}",0.8409405255878285
13136,"@Test public void testCopyFromWithRoutingInPK() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureGreen();
  execute(""String_Node_Str"");
  refresh();
  String uri=Paths.get(folder.getRoot().toURI()).toString();
  SQLResponse response=execute(""String_Node_Str"",new Object[]{uri});
  assertThat(response.rowCount(),is(2L));
  execute(""String_Node_Str"");
  refresh();
  execute(""String_Node_Str"",new Object[]{uri + ""String_Node_Str""});
  refresh();
  response=execute(""String_Node_Str"");
  assertThat((long)response.rows()[0][0],is(1L));
}","@Test public void testCopyFromWithRoutingInPK() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureGreen();
  execute(""String_Node_Str"");
  refresh();
  String uri=Paths.get(folder.getRoot().toURI()).toUri().toString();
  SQLResponse response=execute(""String_Node_Str"",new Object[]{uri});
  assertThat(response.rowCount(),is(2L));
  execute(""String_Node_Str"");
  refresh();
  execute(""String_Node_Str"",new Object[]{uri + ""String_Node_Str""});
  refresh();
  response=execute(""String_Node_Str"");
  assertThat((long)response.rows()[0][0],is(1L));
}",0.9929453262786596
13137,"@Test public void testCopyFromFileWithoutPK() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  String uriPath=Joiner.on(""String_Node_Str"").join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{uriPath});
  assertEquals(6L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(6L,response.rowCount());
  assertThat(response.rows()[0].length,is(2));
}","@Test public void testCopyFromFileWithoutPK() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertEquals(6L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(6L,response.rowCount());
  assertThat(response.rows()[0].length,is(2));
}",0.8599269183922046
13138,"@Test public void testCopyFromToPartitionedTableWithNullValue() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  refresh();
  execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(1L));
  assertNull(response.rows()[0][0]);
}","@Test public void testCopyFromToPartitionedTableWithNullValue() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  refresh();
  execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(1L));
  assertNull(response.rows()[0][0]);
}",0.865
13139,"@Test public void testCopyFromInvalidJson() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  File newFile=folder.newFile();
  try (BufferedWriter writer=new BufferedWriter(new FileWriter(newFile))){
    writer.write(""String_Node_Str"");
  }
   expectedException.expect(SQLActionException.class);
  expectedException.expectMessage(""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{newFile.getPath()});
}","@Test public void testCopyFromInvalidJson() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  File newFile=folder.newFile();
  try (BufferedWriter writer=new BufferedWriter(new FileWriter(newFile))){
    writer.write(""String_Node_Str"");
  }
   expectedException.expect(SQLActionException.class);
  expectedException.expectMessage(""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{Paths.get(newFile.toURI()).toUri().toString()});
}",0.9439461883408072
13140,"@Test public void testCopyFromFile() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  String uriPath=Joiner.on(""String_Node_Str"").join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{uriPath});
  assertEquals(3L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
  assertThat(response.rows()[0].length,is(2));
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],is(""String_Node_Str""));
}","@Test public void testCopyFromFile() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertEquals(3L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
  assertThat(response.rows()[0].length,is(2));
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],is(""String_Node_Str""));
}",0.8846539618856569
13141,"@Test public void testCopyFromFileWithCompression() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureGreen();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  refresh();
  execute(""String_Node_Str"");
  assertEquals(6L,response.rowCount());
}","@Test public void testCopyFromFileWithCompression() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureGreen();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  refresh();
  execute(""String_Node_Str"");
  assertEquals(6L,response.rowCount());
}",0.8353658536585366
13142,"@Test public void testCopyFromFileWithUmlautsWhitespacesAndGlobs() throws Exception {
  execute(""String_Node_Str"");
  File tmpFolder=folder.newFolder(""String_Node_Str"");
  File file=new File(tmpFolder,""String_Node_Str"");
  List<String> lines=Collections.singletonList(""String_Node_Str"");
  Files.write(file.toPath(),lines,StandardCharsets.UTF_8);
  execute(""String_Node_Str"",new Object[]{tmpFolder.getAbsolutePath() + ""String_Node_Str""});
  assertThat(response.rowCount(),is(1L));
}","@Test public void testCopyFromFileWithUmlautsWhitespacesAndGlobs() throws Exception {
  execute(""String_Node_Str"");
  File tmpFolder=folder.newFolder(""String_Node_Str"");
  File file=new File(tmpFolder,""String_Node_Str"");
  List<String> lines=Collections.singletonList(""String_Node_Str"");
  Files.write(file.toPath(),lines,StandardCharsets.UTF_8);
  execute(""String_Node_Str"",new Object[]{Paths.get(tmpFolder.toURI()).toUri().toString() + ""String_Node_Str""});
  assertThat(response.rowCount(),is(1L));
}",0.9491869918699188
13143,"@Test public void testCopyFromTwoUriMixedSchemaAndWildcardUse() throws Exception {
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  Path tmpDir=newTempDir(LifecycleScope.TEST);
  File file=new File(tmpDir.toFile(),""String_Node_Str"");
  String r1=""String_Node_Str"";
  String r2=""String_Node_Str"";
  Files.write(file.toPath(),Collections.singletonList(r1),StandardCharsets.UTF_8);
  String[] urls={tmpDir.toAbsolutePath() + ""String_Node_Str"",upload(""String_Node_Str"",r2)};
  execute(""String_Node_Str"",new Object[]{urls});
  assertThat(response.rowCount(),is(2L));
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  assertThat(TestingHelpers.printedTable(response.rows()),is(""String_Node_Str""));
}","@Test public void testCopyFromTwoUriMixedSchemaAndWildcardUse() throws Exception {
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  Path tmpDir=newTempDir(LifecycleScope.TEST);
  File file=new File(tmpDir.toFile(),""String_Node_Str"");
  String r1=""String_Node_Str"";
  String r2=""String_Node_Str"";
  Files.write(file.toPath(),Collections.singletonList(r1),StandardCharsets.UTF_8);
  String[] urls={tmpDir.toUri().toString() + ""String_Node_Str"",upload(""String_Node_Str"",r2)};
  execute(""String_Node_Str"",new Object[]{urls});
  assertThat(response.rowCount(),is(2L));
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  assertThat(TestingHelpers.printedTable(response.rows()),is(""String_Node_Str""));
}",0.9819193324061196
13144,"@Test public void testCopyFromToPartitionedTableWithGeneratedColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  refresh();
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],endsWith(""String_Node_Str""));
}","@Test public void testCopyFromToPartitionedTableWithGeneratedColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  refresh();
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],endsWith(""String_Node_Str""));
}",0.8013698630136986
13145,"@Test public void testCopyFromNestedArrayRow() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  String uriPath=Joiner.on(""String_Node_Str"").join(nestedArrayCopyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{uriPath});
  assertEquals(1L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(1L));
  assertThat(TestingHelpers.printedTable(response.rows()),is(""String_Node_Str""));
}","@Test public void testCopyFromNestedArrayRow() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{nestedArrayCopyFilePath + ""String_Node_Str""});
  assertEquals(1L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(1L));
  assertThat(TestingHelpers.printedTable(response.rows()),is(""String_Node_Str""));
}",0.8509249183895539
13146,"@Test public void testCopyFromIntoPartitionWithInvalidGivenGeneratedColumnAsPartitionKey() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  assertThat(response.rowCount(),is(3L));
  refresh();
  execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(3L));
}","@Test public void testCopyFromIntoPartitionWithInvalidGivenGeneratedColumnAsPartitionKey() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertThat(response.rowCount(),is(3L));
  refresh();
  execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(3L));
}",0.8851063829787233
13147,"@Test public void testCopyFromDirectory() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  String uriPath=Joiner.on(""String_Node_Str"").join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{uriPath});
  assertEquals(3L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
}","@Test public void testCopyFromDirectory() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertEquals(3L,response.rowCount());
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
}",0.8400556328233658
13148,"@Test public void testCopyFromWithInvalidGivenGeneratedColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  assertThat(response.rowCount(),is(3L));
  refresh();
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],is(""String_Node_Str""));
}","@Test public void testCopyFromWithInvalidGivenGeneratedColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  assertThat(response.rowCount(),is(3L));
  refresh();
  execute(""String_Node_Str"");
  assertThat((String)response.rows()[0][0],is(""String_Node_Str""));
}",0.8797327394209354
13149,"@Test public void testCopyFromWithOverwriteDuplicates() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[][]{new Object[]{1},new Object[]{2},new Object[]{3},new Object[]{4}});
  execute(""String_Node_Str"");
  File tmpExport=folder.newFolder(""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{tmpExport.getAbsolutePath()});
  assertThat(response.rowCount(),is(4L));
  execute(""String_Node_Str"",new Object[]{String.format(Locale.ENGLISH,""String_Node_Str"",tmpExport.getAbsolutePath())});
  assertThat(response.rowCount(),is(0L));
  execute(""String_Node_Str"",new Object[]{String.format(Locale.ENGLISH,""String_Node_Str"",tmpExport.getAbsolutePath())});
  assertThat(response.rowCount(),is(4L));
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  assertThat(((Long)response.rows()[0][0]),is(4L));
}","@Test public void testCopyFromWithOverwriteDuplicates() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"",new Object[][]{new Object[]{1},new Object[]{2},new Object[]{3},new Object[]{4}});
  execute(""String_Node_Str"");
  File tmpExport=folder.newFolder(""String_Node_Str"");
  String uriTemplate=Paths.get(tmpExport.toURI()).toUri().toString();
  execute(""String_Node_Str"",new Object[]{uriTemplate});
  assertThat(response.rowCount(),is(4L));
  execute(""String_Node_Str"",new Object[]{uriTemplate + ""String_Node_Str""});
  assertThat(response.rowCount(),is(0L));
  execute(""String_Node_Str"",new Object[]{uriTemplate + ""String_Node_Str""});
  assertThat(response.rowCount(),is(4L));
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  assertThat(((Long)response.rows()[0][0]),is(4L));
}",0.8166862514688602
13150,"@Test public void testCopyFromFileWithPartition() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureGreen();
  String filePath=Joiner.on(File.separator).join(copyFilePath,""String_Node_Str"");
  execute(""String_Node_Str"",new Object[]{filePath});
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
}","@Test public void testCopyFromFileWithPartition() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"");
  ensureGreen();
  execute(""String_Node_Str"",new Object[]{copyFilePath + ""String_Node_Str""});
  refresh();
  execute(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
}",0.8343558282208589
13151,"@Test public void testSelectFromFooSchemaWithRequestHeaders() throws Exception {
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  ensureYellow();
  waitNoPendingTasksOnAll();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(getTableCount(""String_Node_Str"",""String_Node_Str""),is(1L));
  assertThat(getTableCount(""String_Node_Str"",""String_Node_Str""),is(0L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(2L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(2L));
  File foobarExport=tmpFolder.newFolder(""String_Node_Str"");
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str"",foobarExport.getAbsolutePath()));
  refresh();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  refresh();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(0L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str"",foobarExport.getAbsolutePath() + ""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(2L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(4L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(getTableCount(""String_Node_Str"",""String_Node_Str""),is(0L));
}","@Test public void testSelectFromFooSchemaWithRequestHeaders() throws Exception {
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  ensureYellow();
  waitNoPendingTasksOnAll();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(getTableCount(""String_Node_Str"",""String_Node_Str""),is(1L));
  assertThat(getTableCount(""String_Node_Str"",""String_Node_Str""),is(0L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(2L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(2L));
  File foobarExport=tmpFolder.newFolder(""String_Node_Str"");
  String uriTemplate=Paths.get(foobarExport.toURI()).toUri().toString();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str"",uriTemplate));
  refresh();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  refresh();
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(0L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str"",uriTemplate + ""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(2L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(response.rowCount(),is(4L));
  execute(requestWithSchema(""String_Node_Str"",""String_Node_Str""));
  assertThat(getTableCount(""String_Node_Str"",""String_Node_Str""),is(0L));
}",0.9319746626273754
13152,"@Test @UseJdbc(false) public void testCopyFromEmptyStringRouting() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"");
  refresh();
  String uri=Paths.get(folder.getRoot().toURI()).toString();
  SQLResponse response=execute(""String_Node_Str"",new Object[]{uri});
  assertThat(response.rowCount(),is(2L));
  execute(""String_Node_Str"");
  refresh();
  execute(""String_Node_Str"",new Object[]{uri + ""String_Node_Str""});
  refresh();
  response=execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(1L));
  assertThat((long)response.rows()[0][1],is(2L));
}","@Test @UseJdbc(false) public void testCopyFromEmptyStringRouting() throws Exception {
  execute(""String_Node_Str"");
  ensureYellow();
  execute(""String_Node_Str"");
  refresh();
  String uri=Paths.get(folder.getRoot().toURI()).toUri().toString();
  SQLResponse response=execute(""String_Node_Str"",new Object[]{uri});
  assertThat(response.rowCount(),is(2L));
  execute(""String_Node_Str"");
  refresh();
  execute(""String_Node_Str"",new Object[]{uri + ""String_Node_Str""});
  refresh();
  response=execute(""String_Node_Str"");
  assertThat(response.rowCount(),is(1L));
  assertThat((long)response.rows()[0][1],is(2L));
}",0.993431855500821
13153,"@Test public void testKillCopyTo() throws Exception {
  String path=temporaryFolder.newFolder().getAbsolutePath();
  setup.setUpEmployees();
  assertGotCancelled(""String_Node_Str"",new Object[]{path},true);
}","@Test public void testKillCopyTo() throws Exception {
  String path=Paths.get(temporaryFolder.newFolder().toURI()).toUri().toString();
  setup.setUpEmployees();
  assertGotCancelled(""String_Node_Str"",new Object[]{path},true);
}",0.8847926267281107
13154,"@Override public void prepare(){
  if (!prepared) {
    prepared=true;
    delegate.prepare();
  }
}","@Override public void prepare(){
  if (numFinishCalls.get() == 0) {
    downstream.prepare();
  }
}",0.6834170854271356
13155,"@Override public Set<Requirement> requirements(){
  return delegate.requirements();
}","@Override public Set<Requirement> requirements(){
  return downstream.requirements();
}",0.9302325581395348
13156,"@Override public void kill(Throwable throwable){
  listener.onFailure(throwable);
  delegate.kill(throwable);
}","@Override public void kill(Throwable throwable){
  if (numFinishCalls.get() != -1) {
    downstream.kill(throwable);
  }
}",0.6952789699570815
13157,"@Override public void fail(Throwable throwable){
  this.failure=throwable;
  countdown();
  listener.onFailure(throwable);
}","@Override public void fail(Throwable throwable){
  downstream.fail(throwable);
}",0.696078431372549
13158,"@Override public void doCollect(){
  if (collectorsIt.hasNext()) {
    CrateCollector collector=collectorsIt.next();
    LOGGER.trace(""String_Node_Str"",collector);
    collector.doCollect();
  }
}","@Override public void doCollect(){
  collectors.get(0).doCollect();
}",0.5056603773584906
13159,"@Override public Result setNextRow(Row row){
  return delegate.setNextRow(row);
}","@Override public Result setNextRow(Row row){
  return downstream.setNextRow(row);
}",0.926829268292683
13160,"@Override public void repeat(){
  if (MultiRowReceiver.this.activeUpstreams.compareAndSet(0,repeatHandles.size())) {
    for (    RepeatHandle repeatHandle : repeatHandles) {
      repeatHandle.repeat();
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public void repeat(){
}",0.1503267973856209
13161,"@Override public void finish(RepeatHandle repeatable){
  this.repeatHandles.add(repeatable);
  countdown();
  listener.onSuccess(null);
}","@Override public void finish(RepeatHandle repeatable){
  int calls=numFinishCalls.incrementAndGet();
  if (calls == 0) {
    numFinishCalls.set(-1);
    return;
  }
  repeatHandles[(calls - 1) % repeatHandles.length]=repeatable;
  if (calls < repeatHandles.length) {
    collectors.get(calls).doCollect();
  }
 else   if (calls % repeatHandles.length == 0) {
    downstream.finish(this);
  }
 else {
    repeatHandles[calls % repeatHandles.length].repeat();
  }
}",0.24
13162,"@Override public void pauseProcessed(ResumeHandle resumeable){
  delegate.pauseProcessed(resumeable);
}","@Override public void pauseProcessed(ResumeHandle resumeable){
  downstream.pauseProcessed(resumeable);
}",0.9423076923076924
13163,"@Test public void testRepeatEmitsRowsInTheSameOrder() throws Exception {
  CollectingRowReceiver rr=new CollectingRowReceiver();
  Iterable<Row> leftRows=RowGenerator.range(0,15);
  Iterable<Row> rightRows=RowGenerator.range(10,30);
  CrateCollector.Builder c1=RowsCollector.builder(leftRows);
  CrateCollector.Builder c2=RowsCollector.builder(rightRows);
  CompositeCollector collector=new CompositeCollector(Arrays.asList(c1,c2),rr);
  collector.doCollect();
  Bucket result=rr.result();
  assertThat(TestingHelpers.printedTable(result),is(""String_Node_Str""));
  rr.repeatUpstream();
  assertThat(TestingHelpers.printedTable(new CollectionBucket(rr.rows)),is(""String_Node_Str"" + ""String_Node_Str""));
}","@Test public void testRepeatEmitsRowsInTheSameOrder() throws Exception {
  CollectingRowReceiver rr=new CollectingRowReceiver();
  Iterable<Row> leftRows=RowGenerator.range(0,15);
  Iterable<Row> rightRows=RowGenerator.range(10,30);
  CrateCollector.Builder c1=RowsCollector.builder(leftRows);
  CrateCollector.Builder c2=RowsCollector.builder(rightRows);
  CompositeCollector collector=new CompositeCollector(Arrays.asList(c1,c2),rr);
  collector.doCollect();
  Bucket result=rr.result();
  String resultString=TestingHelpers.printedTable(result);
  assertThat(resultString,is(""String_Node_Str""));
  rr.repeatUpstream();
  assertThat(TestingHelpers.printedTable(new CollectionBucket(rr.rows)),is(resultString + resultString));
  rr.repeatUpstream();
  assertThat(TestingHelpers.printedTable(new CollectionBucket(rr.rows)),is(resultString + resultString + resultString));
}",0.8045685279187818
13164,"@Override public void kill(Throwable throwable){
  resultFuture.setException(throwable);
}","@Override public void kill(Throwable throwable){
  if (throwable == null) {
    resultFuture().cancel(false);
  }
 else {
    resultFuture.setException(throwable);
  }
}",0.694980694980695
13165,"private Result emitRow(Row row){
  combinedRow.outerRow=left.lastRow;
  combinedRow.innerRow=row;
  if (!rowFilterPredicate.apply(combinedRow)) {
    return Result.CONTINUE;
  }
  Result result=downstream.setNextRow(combinedRow);
  if (LOGGER.isTraceEnabled() && result != Result.CONTINUE) {
    LOGGER.trace(""String_Node_Str"",phaseId,result);
  }
  return result;
}","private Result emitRow(Row row){
  combinedRow.outerRow=left.lastRow;
  combinedRow.innerRow=row;
  if (!rowFilterPredicate.apply(combinedRow)) {
    return Result.CONTINUE;
  }
  Result result=downstream.setNextRow(combinedRow);
  if (LOGGER.isTraceEnabled() && result != Result.CONTINUE) {
    LOGGER.trace(""String_Node_Str"",phaseId,result);
  }
  if (result == Result.STOP) {
    stop=true;
  }
  return result;
}",0.8976982097186701
13166,"@Override public void onResponse(ShardResponse updateResponse){
  if (future.closed()) {
    return;
  }
  if (updateResponse.failure() != null) {
    onFailure(updateResponse.failure());
  }
  int location=updateResponse.itemIndices().get(0);
  ShardResponse.Failure failure=updateResponse.failures().get(location);
  if (failure == null) {
    resultFuture.set(1L);
  }
 else {
    if (logger.isDebugEnabled()) {
      if (failure.versionConflict()) {
        logger.debug(""String_Node_Str"",failure.id());
      }
 else {
        logger.debug(""String_Node_Str"",failure.id(),failure.message());
      }
    }
    resultFuture.set(0L);
  }
  close(null);
}","@Override public void onResponse(ShardResponse updateResponse){
  if (future.closed()) {
    return;
  }
  if (updateResponse.failure() != null) {
    onFailure(updateResponse.failure());
    return;
  }
  resultFuture.set(1L);
  close(null);
}",0.4866666666666667
13167,"@Override protected void innerStart(){
  transportShardUpsertActionDelegate.execute(request,new ActionListener<ShardResponse>(){
    @Override public void onResponse(    ShardResponse updateResponse){
      if (future.closed()) {
        return;
      }
      if (updateResponse.failure() != null) {
        onFailure(updateResponse.failure());
      }
      int location=updateResponse.itemIndices().get(0);
      ShardResponse.Failure failure=updateResponse.failures().get(location);
      if (failure == null) {
        resultFuture.set(1L);
      }
 else {
        if (logger.isDebugEnabled()) {
          if (failure.versionConflict()) {
            logger.debug(""String_Node_Str"",failure.id());
          }
 else {
            logger.debug(""String_Node_Str"",failure.id(),failure.message());
          }
        }
        resultFuture.set(0L);
      }
      close(null);
    }
    @Override public void onFailure(    Throwable e){
      if (future.closed()) {
        return;
      }
      e=ExceptionsHelper.unwrapCause(e);
      if (item.insertValues() == null && (e instanceof DocumentMissingException || e instanceof VersionConflictEngineException)) {
        resultFuture.set(0L);
        close(null);
      }
 else       if (PartitionName.isPartition(request.index()) && e instanceof IndexNotFoundException) {
        resultFuture.set(0L);
        close(null);
      }
 else {
        resultFuture.setException(e);
        close(e);
      }
    }
  }
);
}","@Override protected void innerStart(){
  transportShardUpsertActionDelegate.execute(request,new ActionListener<ShardResponse>(){
    @Override public void onResponse(    ShardResponse updateResponse){
      if (future.closed()) {
        return;
      }
      if (updateResponse.failure() != null) {
        onFailure(updateResponse.failure());
        return;
      }
      resultFuture.set(1L);
      close(null);
    }
    @Override public void onFailure(    Throwable e){
      if (future.closed()) {
        return;
      }
      e=ExceptionsHelper.unwrapCause(e);
      if (item.insertValues() == null && (e instanceof DocumentMissingException || e instanceof VersionConflictEngineException)) {
        resultFuture.set(0L);
        close(null);
      }
 else       if (PartitionName.isPartition(request.index()) && e instanceof IndexNotFoundException) {
        resultFuture.set(0L);
        close(null);
      }
 else {
        resultFuture.setException(e);
        close(e);
      }
    }
  }
);
}",0.8009708737864077
13168,"public UpsertByIdContext(int id,ShardUpsertRequest request,UpsertById.Item item,BulkRequestExecutor transportShardUpsertActionDelegate){
  super(id,LOGGER);
  this.request=request;
  this.item=item;
  this.transportShardUpsertActionDelegate=transportShardUpsertActionDelegate;
}","public UpsertByIdContext(int id,ShardUpsertRequest request,UpsertById.Item item,BulkRequestExecutor transportShardUpsertActionDelegate){
}",0.6634615384615384
13169,"@Before public void prepare(){
  idRef=new Reference(new ReferenceIdent(SysNodesTableInfo.IDENT,SysNodesTableInfo.Columns.ID),RowGranularity.DOC,DataTypes.STRING);
  nameRef=new Reference(new ReferenceIdent(SysNodesTableInfo.IDENT,SysNodesTableInfo.Columns.ID),RowGranularity.DOC,DataTypes.STRING);
  hostnameRef=new Reference(new ReferenceIdent(systable,SysNodesTableInfo.Columns.HOSTNAME),RowGranularity.DOC,DataTypes.STRING);
  collectPhase=mock(RoutedCollectPhase.class);
  when(collectPhase.whereClause()).thenReturn(WhereClause.NO_MATCH);
  nodes.add(newNode(""String_Node_Str""));
  nodes.add(newNode(""String_Node_Str""));
}","@Before public void prepare(){
  idRef=new Reference(new ReferenceIdent(SysNodesTableInfo.IDENT,SysNodesTableInfo.Columns.ID),RowGranularity.DOC,DataTypes.STRING);
  nameRef=new Reference(new ReferenceIdent(SysNodesTableInfo.IDENT,SysNodesTableInfo.Columns.ID),RowGranularity.DOC,DataTypes.STRING);
  hostnameRef=new Reference(new ReferenceIdent(SysNodesTableInfo.IDENT,SysNodesTableInfo.Columns.HOSTNAME),RowGranularity.DOC,DataTypes.STRING);
  collectPhase=mock(RoutedCollectPhase.class);
  when(collectPhase.whereClause()).thenReturn(WhereClause.NO_MATCH);
  nodes.add(newNode(""String_Node_Str""));
  nodes.add(newNode(""String_Node_Str""));
}",0.981904012588513
13170,"public void sync(CompletionListener listener){
  LOGGER.debug(""String_Node_Str"");
switch (pendingExecutions.size()) {
case 0:
    listener.onSuccess(null);
  return;
case 1:
Portal portal=pendingExecutions.iterator().next();
pendingExecutions.clear();
portal.sync(planner,statsTables,listener);
clearState();
return;
}
throw new IllegalStateException(""String_Node_Str"" + pendingExecutions);
}","public void sync(CompletionListener listener){
  LOGGER.debug(""String_Node_Str"");
switch (pendingExecutions.size()) {
case 0:
    listener.onSuccess(null);
  return;
case 1:
Portal portal=pendingExecutions.iterator().next();
pendingExecutions.clear();
clearState();
portal.sync(planner,statsTables,listener);
if (UNNAMED.equals(portal.name())) {
portal.close();
}
return;
}
throw new IllegalStateException(""String_Node_Str"" + pendingExecutions);
}",0.9034564958283672
13171,"public void clearState(){
  Portal portal=portals.remove(UNNAMED);
  if (portal != null) {
    portal.close();
  }
  preparedStatements.remove(UNNAMED);
}","public void clearState(){
  portals.remove(UNNAMED);
  preparedStatements.remove(UNNAMED);
}",0.7479674796747967
13172,"@Override public void setNextRow(Row row){
  rowCount=(long)row.get(0);
}","@Override public void setNextRow(Row row){
  rowCount=(long)row.get(0);
  if (rowCount < 0) {
    rowCount--;
  }
}",0.776595744680851
13173,"@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(8);
  buffer.writeDouble(((double)value));
  return 12;
}","@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(TYPE_LEN);
  buffer.writeDouble(((double)value));
  return INT32_BYTE_SIZE + TYPE_LEN;
}",0.8973607038123167
13174,"@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(INT32_BYTE_SIZE);
  buffer.writeInt(((int)value));
  return 8;
}","@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(TYPE_LEN);
  buffer.writeInt(((int)value));
  return INT32_BYTE_SIZE + TYPE_LEN;
}",0.8830409356725146
13175,"@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(4);
  buffer.writeFloat(((float)value));
  return 8;
}","@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(TYPE_LEN);
  buffer.writeFloat(((float)value));
  return INT32_BYTE_SIZE + TYPE_LEN;
}",0.8928571428571429
13176,"@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(2);
  buffer.writeShort((short)value);
  return INT32_BYTE_SIZE + TYPE_LEN;
}","@Override public int writeAsBinary(ChannelBuffer buffer,@Nonnull Object value){
  buffer.writeInt(TYPE_LEN);
  buffer.writeShort((short)value);
  return INT32_BYTE_SIZE + TYPE_LEN;
}",0.9747899159663864
13177,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer) throws Exception {
switch (state) {
case STARTUP_HEADER:
    if (buffer.readableBytes() < 8) {
      return null;
    }
  msgLength=buffer.readInt() - 8;
if (msgLength == 0) {
  LOGGER.trace(""String_Node_Str"");
  state=State.SSL_NEG;
  return buffer;
}
LOGGER.trace(""String_Node_Str"",msgLength);
int protocol=buffer.readInt();
traceLogProtocol(protocol);
state=State.STARTUP_BODY;
return nullOrBuffer(buffer);
case MSG_HEADER:
if (buffer.readableBytes() < 5) {
return null;
}
msgType=buffer.readByte();
msgLength=buffer.readInt() - 4;
state=State.MSG_BODY;
return nullOrBuffer(buffer);
case MSG_BODY:
case STARTUP_BODY:
return nullOrBuffer(buffer);
}
throw new IllegalStateException(""String_Node_Str"" + state);
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buffer) throws Exception {
switch (state) {
case STARTUP_HEADER:
    if (buffer.readableBytes() < 8) {
      return null;
    }
  buffer.markReaderIndex();
msgLength=buffer.readInt() - 8;
if (msgLength == 0) {
LOGGER.trace(""String_Node_Str"");
state=State.SSL_NEG;
return buffer;
}
LOGGER.trace(""String_Node_Str"",msgLength);
int protocol=buffer.readInt();
traceLogProtocol(protocol);
return nullOrBuffer(buffer,State.STARTUP_BODY);
case MSG_HEADER:
if (buffer.readableBytes() < 5) {
return null;
}
buffer.markReaderIndex();
msgType=buffer.readByte();
msgLength=buffer.readInt() - 4;
return nullOrBuffer(buffer,State.MSG_BODY);
case MSG_BODY:
case STARTUP_BODY:
return nullOrBuffer(buffer,state);
}
throw new IllegalStateException(""String_Node_Str"" + state);
}",0.887816646562123
13178,"/** 
 * return null if there aren't enough bytes to read the whole message. Otherwise returns the buffer. If null is returned the decoder will be called again, otherwise the MessageHandler will be called next.
 */
private ChannelBuffer nullOrBuffer(ChannelBuffer buffer){
  if (buffer.readableBytes() < msgLength) {
    return null;
  }
  return buffer;
}","/** 
 * return null if there aren't enough bytes to read the whole message. Otherwise returns the buffer. If null is returned the decoder will be called again, otherwise the MessageHandler will be called next.
 */
private ChannelBuffer nullOrBuffer(ChannelBuffer buffer,State nextState){
  if (buffer.readableBytes() < msgLength) {
    buffer.resetReaderIndex();
    return null;
  }
  state=nextState;
  return buffer;
}",0.8530927835051546
13179,"public void parse(String statementName,String query,List<DataType> paramTypes){
  LOGGER.debug(""String_Node_Str"",statementName,query,paramTypes);
  try {
    this.jobId=UUID.randomUUID();
    this.query=query;
    this.statement=SqlParser.createStatement(query);
    this.paramTypes=paramTypes;
  }
 catch (  Throwable t) {
    throwable=t;
    throw t;
  }
}","public void parse(String statementName,String query,List<DataType> paramTypes){
  LOGGER.debug(""String_Node_Str"",statementName,query,paramTypes);
  checkError();
  try {
    this.jobId=UUID.randomUUID();
    this.query=query;
    this.statement=SqlParser.createStatement(query);
    this.paramTypes=paramTypes;
  }
 catch (  Throwable t) {
    throwable=t;
    throw t;
  }
}",0.9782016348773842
13180,"public void sync(CompletionListener listener){
  LOGGER.debug(""String_Node_Str"");
  if (throwable == null) {
    if (resultReceivers.isEmpty()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (resultReceivers.size() == 1) {
      execute(listener);
    }
 else {
      executeBulk(listener);
    }
  }
 else {
    Throwable t=this.throwable;
    this.throwable=null;
    throw Throwables.propagate(t);
  }
}","public void sync(CompletionListener listener){
  LOGGER.debug(""String_Node_Str"");
  if (throwable == null) {
    if (resultReceivers.size() == 1) {
      execute(listener);
    }
 else {
      executeBulk(listener);
    }
  }
 else {
    cleanup();
    Throwable t=this.throwable;
    this.throwable=null;
    throw Throwables.propagate(t);
  }
}",0.3470437017994858
13181,"public void bind(String portalName,String statementName,List<Object> params){
  LOGGER.debug(""String_Node_Str"",portalName,statementName,params);
  if (throwable != null) {
    return;
  }
  bulkParams.add(params);
}","public void bind(String portalName,String statementName,List<Object> params){
  LOGGER.debug(""String_Node_Str"",portalName,statementName,params);
  checkError();
  bulkParams.add(params);
}",0.8933002481389578
13182,"private void cleanup(){
  analysis=null;
  bulkParams.clear();
  resultReceivers.clear();
  statement=null;
}","private void cleanup(){
  analysis=null;
  bulkParams.clear();
  maxRows=0;
  resultReceivers.clear();
  statement=null;
}",0.9437229437229436
13183,"public List<Field> describe(char type,String portalOrStatement){
  LOGGER.debug(""String_Node_Str"",type,portalOrStatement);
  if (throwable != null) {
    return null;
  }
  if (analysis == null) {
    if (statement == null) {
      throwable=new IllegalStateException(""String_Node_Str"");
      throw (RuntimeException)throwable;
    }
    analysis=analyzer.analyze(statement,new ParameterContext(getArgs(),EMPTY_BULK_ARGS,defaultSchema));
  }
  if (analysis.rootRelation() == null) {
    return null;
  }
  List<Field> fields=analysis.rootRelation().fields();
  outputTypes=Symbols.extractTypes(fields);
  return fields;
}","public List<Field> describe(char type,String portalOrStatement){
  LOGGER.debug(""String_Node_Str"",type,portalOrStatement);
  checkError();
  try {
    if (analysis == null) {
      analysis=analyzer.analyze(statement,new ParameterContext(getArgs(),EMPTY_BULK_ARGS,defaultSchema));
    }
    if (analysis.rootRelation() == null) {
      return null;
    }
    List<Field> fields=analysis.rootRelation().fields();
    outputTypes=Symbols.extractTypes(fields);
    return fields;
  }
 catch (  Throwable t) {
    throwable=t;
    throw t;
  }
}",0.7171109200343938
13184,"@Test public void testCustomSchemaAndAnalyzerFailure() throws Exception {
  try (Connection conn=DriverManager.getConnection(JDBC_POSTGRESQL_URL + ""String_Node_Str"")){
    conn.setAutoCommit(true);
    PreparedStatement stmt=conn.prepareStatement(""String_Node_Str"");
    expectedException.expect(PSQLException.class);
    expectedException.expectMessage(""String_Node_Str"");
    stmt.executeQuery();
    stmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet resultSet=stmt.executeQuery();
    assertThat(resultSet.next(),is(true));
    assertThat(resultSet.getString(1),Matchers.startsWith(""String_Node_Str""));
  }
 }","@Test public void testCustomSchemaAndAnalyzerFailure() throws Exception {
  try (Connection conn=DriverManager.getConnection(JDBC_POSTGRESQL_URL + ""String_Node_Str"")){
    conn.setAutoCommit(true);
    PreparedStatement stmt=conn.prepareStatement(""String_Node_Str"");
    try {
      stmt.executeQuery();
      assertFalse(true);
    }
 catch (    PSQLException e) {
      assertThat(e.getMessage(),Matchers.containsString(""String_Node_Str""));
    }
    assertSelectNameFromSysClusterWorks(conn);
  }
 }",0.5742222222222222
13185,"private void addChildImplementations(){
  childImplementations.put(DEV,new ChildExpression<BytesRef>(){
    @Override public BytesRef value(){
      return fsInfo.dev();
    }
  }
);
  childImplementations.put(SIZE,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.total() * 1024;
    }
  }
);
  childImplementations.put(USED,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.used() * 1024;
    }
  }
);
  childImplementations.put(AVAILABLE,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.available() * 1024;
    }
  }
);
  childImplementations.put(READS,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskReads();
    }
  }
);
  childImplementations.put(BYTES_READ,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskReadSizeInBytes();
    }
  }
);
  childImplementations.put(WRITES,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskWrites();
    }
  }
);
  childImplementations.put(BYTES_WRITTEN,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskWriteSizeInBytes();
    }
  }
);
}","private void addChildImplementations(){
  childImplementations.put(DEV,new ChildExpression<BytesRef>(){
    @Override public BytesRef value(){
      return fsInfo.dev();
    }
  }
);
  childImplementations.put(SIZE,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.total();
    }
  }
);
  childImplementations.put(USED,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.used();
    }
  }
);
  childImplementations.put(AVAILABLE,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.available();
    }
  }
);
  childImplementations.put(READS,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskReads();
    }
  }
);
  childImplementations.put(BYTES_READ,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskReadSizeInBytes();
    }
  }
);
  childImplementations.put(WRITES,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskWrites();
    }
  }
);
  childImplementations.put(BYTES_WRITTEN,new ChildExpression<Long>(){
    @Override public Long value(){
      return fsInfo.diskWriteSizeInBytes();
    }
  }
);
}",0.9914250714577378
13186,"@Test public void testFs() throws Exception {
  ReferenceInfo refInfo=refInfo(""String_Node_Str"",DataTypes.STRING,RowGranularity.NODE);
  NestedObjectExpression fs=(NestedObjectExpression)resolver.getImplementation(refInfo);
  Map<String,Object> v=fs.value();
  String total=mapToSortedString((Map<String,Object>)v.get(""String_Node_Str""));
  assertThat(total,is(""String_Node_Str""));
  Object[] disks=(Object[])v.get(""String_Node_Str"");
  assertThat(disks.length,is(2));
  Map<String,Object> disk0=(Map<String,Object>)disks[0];
  assertThat((String)disk0.get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((Long)disk0.get(""String_Node_Str""),is(42L * 1024));
  Map<String,Object> disk1=(Map<String,Object>)disks[1];
  assertThat((String)disk1.get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((Long)disk0.get(""String_Node_Str""),is(42L * 1024));
  Object[] data=(Object[])v.get(""String_Node_Str"");
  assertThat(data.length,is(2));
  assertThat((String)((Map<String,Object>)data[0]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((String)((Map<String,Object>)data[0]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((String)((Map<String,Object>)data[1]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((String)((Map<String,Object>)data[1]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  refInfo=refInfo(""String_Node_Str"",DataTypes.STRING,RowGranularity.NODE,""String_Node_Str"",""String_Node_Str"");
  SimpleObjectExpression<Object[]> fsData=(SimpleObjectExpression<Object[]>)resolver.getImplementation(refInfo);
  for (  Object arrayElement : fsData.value()) {
    assertThat(arrayElement,instanceOf(BytesRef.class));
  }
}","@Test public void testFs() throws Exception {
  ReferenceInfo refInfo=refInfo(""String_Node_Str"",DataTypes.STRING,RowGranularity.NODE);
  NestedObjectExpression fs=(NestedObjectExpression)resolver.getImplementation(refInfo);
  Map<String,Object> v=fs.value();
  String total=mapToSortedString((Map<String,Object>)v.get(""String_Node_Str""));
  assertThat(total,is(""String_Node_Str""));
  Object[] disks=(Object[])v.get(""String_Node_Str"");
  assertThat(disks.length,is(2));
  Map<String,Object> disk0=(Map<String,Object>)disks[0];
  assertThat((String)disk0.get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((Long)disk0.get(""String_Node_Str""),is(42L));
  Map<String,Object> disk1=(Map<String,Object>)disks[1];
  assertThat((String)disk1.get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((Long)disk0.get(""String_Node_Str""),is(42L));
  Object[] data=(Object[])v.get(""String_Node_Str"");
  assertThat(data.length,is(2));
  assertThat((String)((Map<String,Object>)data[0]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((String)((Map<String,Object>)data[0]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((String)((Map<String,Object>)data[1]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  assertThat((String)((Map<String,Object>)data[1]).get(""String_Node_Str""),is(resolveCanonicalPath(""String_Node_Str"")));
  refInfo=refInfo(""String_Node_Str"",DataTypes.STRING,RowGranularity.NODE,""String_Node_Str"",""String_Node_Str"");
  SimpleObjectExpression<Object[]> fsData=(SimpleObjectExpression<Object[]>)resolver.getImplementation(refInfo);
  for (  Object arrayElement : fsData.value()) {
    assertThat(arrayElement,instanceOf(BytesRef.class));
  }
}",0.9961067853170188
13187,"@Override public Symbol visitFunction(Function function,Context context){
  if (AndOperator.NAME.equals(function.info().ident().name())) {
    context.multiRelation=false;
    context.seenRelation=null;
    Symbol left=process(function.arguments().get(0),context);
    function.arguments().set(0,left);
    boolean leftMultiRel=context.multiRelation;
    AnalyzedRelation leftRelation=context.seenRelation;
    context.multiRelation=false;
    context.seenRelation=null;
    Symbol right=process(function.arguments().get(1),context);
    function.arguments().set(1,right);
    boolean rightMultiRel=context.multiRelation;
    AnalyzedRelation rightRelation=context.seenRelation;
    if (leftMultiRel && rightMultiRel) {
      context.multiRelation=true;
      return function;
    }
 else     if (leftMultiRel) {
      if (rightRelation != null) {
        context.queries.put(rightRelation,right);
        function.arguments().set(1,Literal.BOOLEAN_TRUE);
        context.seenRelation=null;
        return function;
      }
 else {
        context.multiRelation=true;
        return function;
      }
    }
 else     if (rightMultiRel) {
      if (leftRelation != null) {
        context.queries.put(leftRelation,left);
        function.arguments().set(0,Literal.BOOLEAN_TRUE);
        context.seenRelation=null;
        return function;
      }
 else {
        context.multiRelation=true;
        return function;
      }
    }
    if (leftRelation != rightRelation) {
      if (leftRelation == null) {
        context.seenRelation=rightRelation;
        context.multiRelation=false;
      }
 else       if (rightRelation == null) {
        context.seenRelation=leftRelation;
        context.multiRelation=false;
      }
 else {
        context.queries.put(leftRelation,left);
        function.arguments().set(0,Literal.BOOLEAN_TRUE);
        context.seenRelation=rightRelation;
      }
    }
  }
 else {
    context.seenRelations.clear();
    RelationSplitter.RelationCounter.INSTANCE.process(function,context.seenRelations);
    context.multiRelation=context.seenRelations.size() > 1;
    if (context.seenRelations.size() == 1) {
      context.seenRelation=Iterables.getOnlyElement(context.seenRelations);
    }
 else     if (context.seenRelations.isEmpty()) {
      context.seenRelation=null;
    }
 else {
      context.multiRelation=true;
      context.seenRelation=null;
    }
  }
  return function;
}","@Override public Symbol visitFunction(Function function,Context context){
  if (AndOperator.NAME.equals(function.info().ident().name())) {
    context.multiRelation=false;
    context.seenRelation=null;
    Symbol left=process(function.arguments().get(0),context);
    function.arguments().set(0,left);
    boolean leftMultiRel=context.multiRelation;
    AnalyzedRelation leftRelation=context.seenRelation;
    context.multiRelation=false;
    context.seenRelation=null;
    Symbol right=process(function.arguments().get(1),context);
    function.arguments().set(1,right);
    boolean rightMultiRel=context.multiRelation;
    AnalyzedRelation rightRelation=context.seenRelation;
    if (leftMultiRel && rightMultiRel) {
      context.multiRelation=true;
      return function;
    }
 else     if (leftMultiRel) {
      context.multiRelation=true;
      if (rightRelation != null) {
        context.queries.put(rightRelation,right);
        function.arguments().set(1,Literal.BOOLEAN_TRUE);
        context.seenRelation=null;
        return function;
      }
      return function;
    }
 else     if (rightMultiRel) {
      context.multiRelation=true;
      if (leftRelation != null) {
        context.queries.put(leftRelation,left);
        function.arguments().set(0,Literal.BOOLEAN_TRUE);
        context.seenRelation=null;
        return function;
      }
      return function;
    }
    if (leftRelation != rightRelation) {
      if (leftRelation == null) {
        context.seenRelation=rightRelation;
        context.multiRelation=false;
      }
 else       if (rightRelation == null) {
        context.seenRelation=leftRelation;
        context.multiRelation=false;
      }
 else {
        context.queries.put(leftRelation,left);
        function.arguments().set(0,Literal.BOOLEAN_TRUE);
        context.seenRelation=rightRelation;
      }
    }
  }
 else {
    context.seenRelations.clear();
    RelationSplitter.RelationCounter.INSTANCE.process(function,context.seenRelations);
    context.multiRelation=context.seenRelations.size() > 1;
    if (context.seenRelations.size() == 1) {
      context.seenRelation=Iterables.getOnlyElement(context.seenRelations);
    }
 else     if (context.seenRelations.isEmpty()) {
      context.seenRelation=null;
    }
 else {
      context.multiRelation=true;
      context.seenRelation=null;
    }
  }
  return function;
}",0.9455611390284756
13188,"private void assertGotCancelled(final String statement,@Nullable final Object[] params,boolean killAll) throws Exception {
  final ExecutorService executor=Executors.newSingleThreadExecutor();
  final AtomicReference<Throwable> thrown=new AtomicReference<>();
  try {
    executor.submit(new Runnable(){
      @Override public void run(){
        try {
          execute(statement,params);
        }
 catch (        Throwable e) {
          Throwable unwrapped=Exceptions.unwrap(e);
          thrown.compareAndSet(null,unwrapped);
        }
      }
    }
);
    Thread.sleep(100L);
    if (killAll) {
      execute(""String_Node_Str"");
    }
 else {
      SQLResponse logResponse=execute(""String_Node_Str"",new Object[]{statement});
      String jobId=logResponse.rows()[0][0].toString();
      execute(""String_Node_Str"",new Object[]{jobId});
    }
    executor.shutdown();
    executor.awaitTermination(5L,TimeUnit.SECONDS);
    Throwable exception=thrown.get();
    if (exception != null) {
      assertThat(exception,instanceOf(SQLActionException.class));
      assertThat(((SQLActionException)exception).stackTrace(),anyOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
    }
  }
  finally {
    executor.shutdownNow();
  }
}","private void assertGotCancelled(final String statement,@Nullable final Object[] params,boolean killAll) throws Exception {
  final ExecutorService executor=Executors.newSingleThreadExecutor();
  final AtomicReference<Throwable> thrown=new AtomicReference<>();
  try {
    executor.submit(new Runnable(){
      @Override public void run(){
        try {
          execute(statement,params);
        }
 catch (        Throwable e) {
          Throwable unwrapped=Exceptions.unwrap(e);
          thrown.compareAndSet(null,unwrapped);
        }
      }
    }
);
    Thread.sleep(100L);
    if (killAll) {
      execute(""String_Node_Str"");
    }
 else {
      SQLResponse logResponse=execute(""String_Node_Str"",new Object[]{statement});
      String jobId=logResponse.rows()[0][0].toString();
      execute(""String_Node_Str"",new Object[]{jobId});
    }
    executor.shutdown();
    executor.awaitTermination(5L,TimeUnit.SECONDS);
    Throwable exception=thrown.get();
    if (exception != null) {
      assertThat(exception,instanceOf(SQLActionException.class));
      assertThat(((SQLActionException)exception).stackTrace(),anyOf(containsString(""String_Node_Str""),containsString(""String_Node_Str""),containsString(""String_Node_Str"")));
    }
  }
  finally {
    executor.shutdownNow();
    waitUntilThreadPoolTasksFinished(ThreadPool.Names.SEARCH);
  }
}",0.9760729206228635
13189,"@Override public void collect(int doc) throws IOException {
  topRowUpstream.throwIfKilled();
  checkCircuitBreaker();
  rowCount++;
  if (rowCount % KEEP_ALIVE_AFTER_ROWS == 0) {
    keepAliveListener.keepAlive();
  }
  for (  LuceneCollectorExpression<?> expression : expressions) {
    expression.setNextDocId(doc);
  }
  boolean wantMore=rowReceiver.setNextRow(inputRow);
  if (!wantMore) {
    throw CollectionFinishedEarlyException.INSTANCE;
  }
  if (topRowUpstream.shouldPause()) {
    throw CollectionPauseException.INSTANCE;
  }
}","@Override public void collect(int doc) throws IOException {
  topRowUpstream.throwIfKilled();
  checkCircuitBreaker();
  rowCount++;
  if (rowCount % KEEP_ALIVE_AFTER_ROWS == 0) {
    keepAliveListener.keepAlive();
  }
  for (  LuceneCollectorExpression<?> expression : expressions) {
    expression.setNextDocId(doc);
  }
  boolean wantMore=rowReceiver.setNextRow(inputRow);
  if (topRowUpstream.shouldPause()) {
    throw CollectionPauseException.INSTANCE;
  }
  if (!wantMore) {
    throw CollectionFinishedEarlyException.INSTANCE;
  }
}",0.8981481481481481
13190,"boolean resume(State rightState){
  if (lastRow != null) {
    boolean wantMore=emitRow(lastRow);
    if (!wantMore) {
      LOGGER.trace(""String_Node_Str"");
      return false;
    }
    lastRow=null;
  }
  if (rightState == State.FINISHED) {
    if (receivedRows) {
      LOGGER.trace(""String_Node_Str"");
      upstream.repeat();
    }
 else {
      LOGGER.trace(""String_Node_Str"");
      return false;
    }
  }
 else {
    LOGGER.trace(""String_Node_Str"",upstream);
    upstream.resume(false);
  }
  return true;
}","boolean resume(State rightState){
  if (lastRow != null) {
    boolean wantMore=emitRow(lastRow);
    if (!wantMore) {
      LOGGER.trace(""String_Node_Str"");
      upstream.resume(false);
      return false;
    }
    lastRow=null;
  }
  if (rightState == State.FINISHED) {
    if (receivedRows) {
      LOGGER.trace(""String_Node_Str"");
      upstream.repeat();
    }
 else {
      LOGGER.trace(""String_Node_Str"");
      return false;
    }
  }
 else {
    LOGGER.trace(""String_Node_Str"",upstream);
    upstream.resume(false);
  }
  return true;
}",0.9718045112781954
13191,"public BlockingSortingQueuedRowDownstreamHandle(BlockingSortingQueuedRowDownstream projector,int rowSize){
  this.projector=projector;
  this.row=new RowN(rowSize);
  this.hashCode=hashCode();
}","public BlockingSortingQueuedRowDownstreamHandle(int index,BlockingSortingQueuedRowDownstream projector,int rowSize){
  this.index=index;
  this.projector=projector;
  this.row=new RowN(rowSize);
}",0.8512820512820513
13192,"public void upstreamFinished(){
  int stillRunning=runningHandles.decrementAndGet();
  int remaining=remainingUpstreams.decrementAndGet();
  emit();
  LOGGER.trace(""String_Node_Str"",hashCode,remaining,stillRunning);
  if (remaining == 0) {
    LOGGER.trace(""String_Node_Str"",hashCode);
    downstreamRowReceiver.finish();
  }
}","public void upstreamFinished(){
  runningHandles.decrementAndGet();
  int remaining=remainingUpstreams.decrementAndGet();
  if (!emit()) {
    for (    BlockingSortingQueuedRowDownstreamHandle handle : downstreamHandles) {
      if (!handle.isFinished()) {
        handle.resume();
      }
    }
  }
  if (remaining == 0) {
    LOGGER.trace(""String_Node_Str"",pauseCount,pauseCount / (double)downstreamHandles.size());
    downstreamRowReceiver.finish();
  }
}",0.4402035623409669
13193,"@Override public RowReceiver newRowReceiver(){
  int upstreams=remainingUpstreams.incrementAndGet();
  LOGGER.trace(""String_Node_Str"",hashCode,upstreams);
  runningHandles.incrementAndGet();
  BlockingSortingQueuedRowDownstreamHandle handle=new BlockingSortingQueuedRowDownstreamHandle(this,rowSize);
  downstreamHandles.add(handle);
  return handle;
}","@Override public RowReceiver newRowReceiver(){
  remainingUpstreams.incrementAndGet();
  int handleIdx=runningHandles.getAndIncrement();
  BlockingSortingQueuedRowDownstreamHandle handle=new BlockingSortingQueuedRowDownstreamHandle(handleIdx,this,rowSize);
  downstreamHandles.add(handle);
  return handle;
}",0.403030303030303
13194,"public Object[] poll(){
synchronized (lock) {
    Object[] cells=cellsQueue.poll();
    firstCells=cellsQueue.peekFirst();
    return cells;
  }
}","public Object[] poll(){
  Object[] cells=cellsQueue.poll();
  firstCells=cellsQueue.peekFirst();
  return cells;
}",0.8769230769230769
13195,"@Override public void setUpstream(RowUpstream rowUpstream){
  upstreams.add(rowUpstream);
}","@Override public void setUpstream(RowUpstream rowUpstream){
  this.myUpstream=rowUpstream;
  upstreams.add(rowUpstream);
}",0.8544600938967136
13196,"@Nullable public Object[] firstCells(){
  return firstCells;
}","@Nullable public Object[] firstCells(){
synchronized (lock) {
    return firstCells;
  }
}",0.8157894736842105
13197,"@Override public void finish(){
  if (finished.compareAndSet(false,true)) {
    projector.upstreamFinished();
    LOGGER.trace(""String_Node_Str"",projector.hashCode,hashCode,pauseCount);
  }
}","@Override public void finish(){
  if (finished.compareAndSet(false,true)) {
    projector.upstreamFinished();
  }
}",0.7516339869281046
13198,"public void upstreamFailed(Throwable throwable){
  runningHandles.decrementAndGet();
  downstreamAborted.compareAndSet(false,true);
  int remaining=remainingUpstreams.decrementAndGet();
  LOGGER.trace(""String_Node_Str"",throwable,hashCode,remaining);
  if (remaining == 0) {
    downstreamRowReceiver.fail(throwable);
  }
}","public void upstreamFailed(Throwable throwable){
  runningHandles.decrementAndGet();
  downstreamAborted.compareAndSet(false,true);
  int remaining=remainingUpstreams.decrementAndGet();
  if (remaining == 0) {
    downstreamRowReceiver.fail(throwable);
  }
}",0.8896551724137931
13199,"private void resume(){
synchronized (pauseLock) {
    runningHandles.incrementAndGet();
    if (!pendingPause.getAndSet(false)) {
      paused=false;
      pauseLock.notify();
    }
  }
}","private void resume(){
synchronized (pauseLock) {
    if (!pendingPause.getAndSet(false)) {
      paused=false;
      if (collectorPaused.compareAndSet(true,false)) {
        resumeCollector();
      }
 else {
        resumeThread();
      }
    }
  }
}",0.5772727272727273
13200,"public boolean emitUntil(Object[] until){
  boolean res=true;
synchronized (lock) {
    while (firstCells != null && ordering.compare(firstCells,until) >= 0) {
      Object[] cells=poll();
      row.cells(cells);
      boolean wantMore=downstreamRowReceiver.setNextRow(row);
      pool.checkin(cells);
      if (!wantMore) {
        res=false;
        break;
      }
    }
    int size=cellsQueue.size();
    int running=runningHandles.get();
    if (paused && (size <= RESUME_AFTER || (size < MAX_QUEUE_SIZE && running <= 1))) {
      resume();
    }
  }
  return res;
}","public boolean emitUntil(Object[] until){
  boolean res=true;
synchronized (lock) {
    while (firstCells != null && ordering.compare(firstCells,until) >= 0) {
      Object[] cells=poll();
      row.cells(cells);
      boolean wantMore=downstreamRowReceiver.setNextRow(row);
      pool.checkin(cells);
      if (!wantMore) {
        res=false;
        break;
      }
    }
    int size=cellsQueue.size();
    int running=runningHandles.get();
    if (paused && (size <= RESUME_AFTER || (size < MAX_QUEUE_SIZE && running == 1))) {
      resume();
    }
  }
  return res;
}",0.9982486865148862
13201,"private void pause(){
synchronized (pauseLock) {
    if (pendingPause.compareAndSet(true,false)) {
      pauseCount++;
      try {
        pauseLock.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void pause(){
  for (  RowUpstream upstream : upstreams) {
    upstream.pause();
  }
}",0.297752808988764
13202,"@Override public boolean setNextRow(Row row){
  if (projector.downstreamAborted.get()) {
    return false;
  }
  int size;
synchronized (lock) {
    Object[] cells=addCellsToQueue(row);
    size=cellsQueue.size();
    if (firstCells == null) {
      firstCells=cells;
    }
    if (!paused && size == MAX_QUEUE_SIZE) {
      paused=true;
      pendingPause.set(true);
      runningHandles.decrementAndGet();
    }
  }
  if (paused) {
    pause();
  }
  return size != 1 || projector.emit();
}","@Override public boolean setNextRow(Row row){
  started=true;
  if (projector.downstreamAborted.get()) {
    return false;
  }
  int size;
synchronized (lock) {
    Object[] cells=addCellsToQueue(row);
    size=cellsQueue.size();
    if (firstCells == null) {
      firstCells=cells;
    }
    if (!paused && size == MAX_QUEUE_SIZE) {
      paused=true;
      pendingPause.set(true);
    }
  }
  if (paused) {
    if (projector.anyOtherNotStartedYet(index)) {
      pauseCollector();
      return !projector.downstreamAborted.get();
    }
 else {
      pauseThread();
    }
  }
  return size != 1 || projector.emit();
}",0.7542754275427542
13203,"public synchronized boolean emit(){
  do {
    Object[] currentLowest=lowestToEmit.get();
    Object[] nextLowest=null;
    boolean emptyHandle=false;
    for (    BlockingSortingQueuedRowDownstreamHandle handle : downstreamHandles) {
      if (currentLowest != null && !handle.emitUntil(currentLowest)) {
        downstreamAborted.set(true);
        return false;
      }
      Object[] cells=handle.firstCells();
      if (cells == null) {
        if (!handle.isFinished()) {
          emptyHandle=true;
        }
        continue;
      }
      if (nextLowest == null || ordering.compare(cells,nextLowest) > 0) {
        nextLowest=cells;
      }
    }
    if (emptyHandle) {
      break;
    }
 else {
      lowestToEmit.set(nextLowest);
    }
  }
 while (lowestToEmit.isValid());
  return true;
}","public boolean emit(){
  do {
    Object[] currentLowest=lowestToEmit.get();
    Object[] nextLowest=null;
    boolean emptyHandle=false;
    for (    BlockingSortingQueuedRowDownstreamHandle handle : downstreamHandles) {
      if (currentLowest != null && !handle.emitUntil(currentLowest)) {
        downstreamAborted.set(true);
        return false;
      }
      Object[] cells=handle.firstCells();
      if (cells == null) {
        if (!handle.isFinished()) {
          emptyHandle=true;
          break;
        }
        continue;
      }
      if (nextLowest == null || ordering.compare(cells,nextLowest) > 0) {
        nextLowest=cells;
      }
    }
    if (emptyHandle) {
      break;
    }
 else {
      lowestToEmit.set(nextLowest);
    }
  }
 while (lowestToEmit.isValid());
  return true;
}",0.9813200498132004
13204,"@Override public boolean offer(E e){
  return false;
}","@Override public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {
  return false;
}",0.6585365853658537
13205,"private void setOperationsLog(int size){
  if (size == 0) {
    operationsLog.set(NOOP_OPERATIONS_LOG);
  }
 else {
    Queue<OperationContextLog> oldQ=operationsLog.get();
    EvictingQueue<OperationContextLog> newQ=EvictingQueue.create(size);
    newQ.addAll(oldQ);
    operationsLog.set(newQ);
  }
}","private void setOperationsLog(int size){
  if (size == 0) {
    operationsLog.set(NOOP_OPERATIONS_LOG);
  }
 else {
    Queue<OperationContextLog> oldQ=operationsLog.get();
    BlockingEvictingQueue<OperationContextLog> newQ=new BlockingEvictingQueue<>(size);
    newQ.addAll(oldQ);
    operationsLog.set(newQ);
  }
}",0.7851373182552503
13206,"private void setJobsLog(int size){
  if (size == 0) {
    jobsLog.set(NOOP_JOBS_LOG);
  }
 else {
    Queue<JobContextLog> oldQ=jobsLog.get();
    EvictingQueue<JobContextLog> newQ=EvictingQueue.create(size);
    newQ.addAll(oldQ);
    jobsLog.set(newQ);
  }
}","private void setJobsLog(int size){
  if (size == 0) {
    jobsLog.set(NOOP_JOBS_LOG);
  }
 else {
    Queue<JobContextLog> oldQ=jobsLog.get();
    BlockingEvictingQueue<JobContextLog> newQ=new BlockingEvictingQueue<>(size);
    newQ.addAll(oldQ);
    jobsLog.set(newQ);
  }
}",0.8822429906542056
13207,"@Test public void testSettingsChanges(){
  NodeSettingsService nodeSettingsService=new NodeSettingsService(ImmutableSettings.EMPTY);
  StatsTables stats=new StatsTables(ImmutableSettings.EMPTY,nodeSettingsService);
  assertThat(stats.isEnabled(),is(false));
  assertThat(stats.lastJobsLogSize,is(CrateSettings.STATS_JOBS_LOG_SIZE.defaultValue()));
  assertThat(stats.lastOperationsLogSize,is(CrateSettings.STATS_OPERATIONS_LOG_SIZE.defaultValue()));
  assertThat(stats.jobsLog.get(),Matchers.instanceOf(NoopQueue.class));
  stats.listener.onRefreshSettings(ImmutableSettings.builder().put(CrateSettings.STATS_ENABLED.settingName(),true).put(CrateSettings.STATS_OPERATIONS_LOG_SIZE.settingName(),200).build());
  assertThat(stats.isEnabled(),is(true));
  assertThat(stats.lastJobsLogSize,is(CrateSettings.STATS_JOBS_LOG_SIZE.defaultValue()));
  assertThat(stats.lastOperationsLogSize,is(200));
  assertThat(stats.jobsLog.get(),Matchers.instanceOf(EvictingQueue.class));
  stats.listener.onRefreshSettings(ImmutableSettings.builder().put(CrateSettings.STATS_ENABLED.settingName(),false).build());
  assertThat(stats.jobsLog.get(),Matchers.instanceOf(NoopQueue.class));
  assertThat(stats.isEnabled(),is(false));
}","@Test public void testSettingsChanges(){
  NodeSettingsService nodeSettingsService=new NodeSettingsService(ImmutableSettings.EMPTY);
  StatsTables stats=new StatsTables(ImmutableSettings.EMPTY,nodeSettingsService);
  assertThat(stats.isEnabled(),is(false));
  assertThat(stats.lastJobsLogSize,is(CrateSettings.STATS_JOBS_LOG_SIZE.defaultValue()));
  assertThat(stats.lastOperationsLogSize,is(CrateSettings.STATS_OPERATIONS_LOG_SIZE.defaultValue()));
  assertThat(stats.jobsLog.get(),Matchers.instanceOf(NoopQueue.class));
  stats.listener.onRefreshSettings(ImmutableSettings.builder().put(CrateSettings.STATS_ENABLED.settingName(),true).put(CrateSettings.STATS_OPERATIONS_LOG_SIZE.settingName(),200).build());
  assertThat(stats.isEnabled(),is(true));
  assertThat(stats.lastJobsLogSize,is(CrateSettings.STATS_JOBS_LOG_SIZE.defaultValue()));
  assertThat(stats.lastOperationsLogSize,is(200));
  assertThat(stats.jobsLog.get(),Matchers.instanceOf(BlockingEvictingQueue.class));
  stats.listener.onRefreshSettings(ImmutableSettings.builder().put(CrateSettings.STATS_ENABLED.settingName(),false).build());
  assertThat(stats.jobsLog.get(),Matchers.instanceOf(NoopQueue.class));
  assertThat(stats.isEnabled(),is(false));
}",0.9967078189300412
13208,"static public boolean isValid(BytesRef ip){
  if (ip.length < 7) {
    return false;
  }
  boolean firstSymbolInOctet=true;
  boolean firstSymbolInOctetHigherThenTwo=false;
  boolean precededByZero=false;
  short symbolsInOctet=0;
  short numberOfDots=0;
  for (int i=0; i < ip.length; i++) {
    int sym=ip.bytes[i] & 0xff;
    if (sym < 46 || sym > 57 || sym == 47) {
      return false;
    }
    if (firstSymbolInOctet && (sym >= 48 && sym < 58)) {
      firstSymbolInOctet=false;
      symbolsInOctet++;
      if (sym == 48) {
        precededByZero=true;
      }
      if (sym > 50) {
        firstSymbolInOctetHigherThenTwo=true;
      }
    }
 else     if ((sym == 48 && precededByZero) || symbolsInOctet > 3) {
      return false;
    }
 else     if (sym == 46) {
      if (symbolsInOctet > 2 && firstSymbolInOctetHigherThenTwo) {
        return false;
      }
      firstSymbolInOctet=true;
      numberOfDots++;
      symbolsInOctet=0;
      firstSymbolInOctetHigherThenTwo=false;
      precededByZero=false;
      if (numberOfDots > 3) {
        return false;
      }
    }
 else     if (sym >= 48 && sym < 58 && symbolsInOctet < 3 && !precededByZero) {
      symbolsInOctet++;
    }
 else {
      return false;
    }
    if (symbolsInOctet > 2 && firstSymbolInOctetHigherThenTwo) {
      return false;
    }
  }
  return true;
}","static public boolean isValid(BytesRef ip){
  if (ip.length < 7 && ip.length > 15) {
    return false;
  }
  boolean precededByZero=false;
  short symbolsInOctet=0;
  short numberOfDots=0;
  int segmentValue=0;
  for (int i=0; i < ip.length; i++) {
    int sym=ip.bytes[i] & 0xff;
    if (sym < 46 || sym > 57 || sym == 47) {
      return false;
    }
    if (isDigit(sym) && symbolsInOctet < 3 && !precededByZero) {
      precededByZero=(sym == 48 && symbolsInOctet == 0);
      segmentValue=segmentValue * 10 + (sym - '0');
      symbolsInOctet++;
    }
 else     if (sym == 46 && i < ip.length - 1) {
      numberOfDots++;
      if (numberOfDots > 3) {
        return false;
      }
      segmentValue=0;
      symbolsInOctet=0;
      precededByZero=false;
    }
 else {
      return false;
    }
    if (segmentValue > 255) {
      return false;
    }
  }
  return numberOfDots == 3;
}",0.3946188340807174
13209,"@Test public void testValidation() throws Exception {
  BytesRef[] validIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : validIps) {
    assertEquals(true,IpType.isValid(ip));
  }
  BytesRef[] invalidIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : invalidIps) {
    assertEquals(false,IpType.isValid(ip));
  }
}","@Test public void testValidation() throws Exception {
  BytesRef[] validIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : validIps) {
    assertEquals(true,IpType.isValid(ip));
  }
  BytesRef[] invalidIps={new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str""),new BytesRef(""String_Node_Str"")};
  for (  BytesRef ip : invalidIps) {
    assertEquals(false,IpType.isValid(ip));
  }
}",0.9156414762741651
13210,"public static <K,V>int compareMaps(Map<K,V> m1,Map<K,V> m2){
  Preconditions.checkNotNull(m1,""String_Node_Str"");
  Preconditions.checkNotNull(m2,""String_Node_Str"");
  int sizeCompare=Integer.valueOf(m1.size()).compareTo(m2.size());
  if (sizeCompare != 0)   return sizeCompare;
  for (  K key : m1.keySet()) {
    if (!m1.get(key).equals(m2.get(key)))     return 1;
  }
  return 0;
}","public static <K,V>int compareMaps(Map<K,V> m1,Map<K,V> m2){
  Preconditions.checkNotNull(m1,""String_Node_Str"");
  Preconditions.checkNotNull(m2,""String_Node_Str"");
  int sizeCompare=Integer.valueOf(m1.size()).compareTo(m2.size());
  if (sizeCompare != 0)   return sizeCompare;
  for (  Map.Entry<K,V> entry : m1.entrySet()) {
    if (!entry.getValue().equals(m2.get(entry.getKey()))) {
      return 1;
    }
  }
  return 0;
}",0.8207663782447466
13211,"public static Literal fromObject(Object value){
  Literal literal=null;
  if (value == null) {
    literal=new NullLiteral();
  }
 else   if (value instanceof String) {
    literal=new StringLiteral((String)value);
  }
 else   if (value instanceof Number) {
    if (value instanceof Float || value instanceof Double) {
      literal=new DoubleLiteral(value.toString());
    }
 else     if (value instanceof Short || value instanceof Integer || value instanceof Long) {
      literal=new LongLiteral(value.toString());
    }
  }
 else   if (value instanceof Boolean) {
    literal=new BooleanLiteral(value.toString());
  }
 else   if (value instanceof Object[]) {
    List<Expression> expressions=new ArrayList<>();
    for (    Object o : (Object[])value) {
      expressions.add(fromObject(o));
    }
    literal=new ArrayLiteral(expressions);
  }
 else   if (value instanceof Map) {
    Multimap<String,Expression> map=HashMultimap.create();
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> valueMap=(Map<String,Object>)value;
    for (    String key : valueMap.keySet()) {
      map.put(key,fromObject(valueMap.get(key)));
    }
    literal=new ObjectLiteral(map);
  }
  return literal;
}","public static Literal fromObject(Object value){
  Literal literal=null;
  if (value == null) {
    literal=new NullLiteral();
  }
 else   if (value instanceof String) {
    literal=new StringLiteral((String)value);
  }
 else   if (value instanceof Number) {
    if (value instanceof Float || value instanceof Double) {
      literal=new DoubleLiteral(value.toString());
    }
 else     if (value instanceof Short || value instanceof Integer || value instanceof Long) {
      literal=new LongLiteral(value.toString());
    }
  }
 else   if (value instanceof Boolean) {
    literal=new BooleanLiteral(value.toString());
  }
 else   if (value instanceof Object[]) {
    List<Expression> expressions=new ArrayList<>();
    for (    Object o : (Object[])value) {
      expressions.add(fromObject(o));
    }
    literal=new ArrayLiteral(expressions);
  }
 else   if (value instanceof Map) {
    Multimap<String,Expression> map=HashMultimap.create();
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> valueMap=(Map<String,Object>)value;
    for (    Map.Entry<String,Object> entry : valueMap.entrySet()) {
      map.put(entry.getKey(),fromObject(entry.getValue()));
    }
    literal=new ObjectLiteral(map);
  }
  return literal;
}",0.9663382594417076
13212,"@Override protected Void visitLongLiteral(LongLiteral node,SubscriptContext context){
  validateNestedArrayAccess(context);
  long value=node.getValue();
  if (value < 1 || value > MAX_VALUE) {
    throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",MAX_VALUE));
  }
  context.index(new Long(node.getValue()).intValue());
  return null;
}","@Override protected Void visitLongLiteral(LongLiteral node,SubscriptContext context){
  validateNestedArrayAccess(context);
  long value=node.getValue();
  if (value < 1 || value > MAX_VALUE) {
    throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",MAX_VALUE));
  }
  context.index((int)value);
  return null;
}",0.9361111111111112
13213,"@Override public void startProjection(ExecutionState executionState){
  this.executionState=executionState;
}","@Override public void startProjection(ExecutionState executionState){
}",0.7888888888888889
13214,"public long killJobs(Collection<UUID> toKill){
  long numKilled=0L;
  writeLock.lock();
  for (  KillAllListener killAllListener : killAllListeners) {
    for (    UUID job : toKill) {
      killAllListener.killJob(job);
    }
  }
  try {
    for (    UUID jobId : toKill) {
      JobExecutionContext ctx=activeContexts.get(jobId);
      if (ctx != null) {
        ctx.kill();
        numKilled++;
      }
    }
  }
  finally {
    writeLock.unlock();
  }
  return numKilled;
}","public long killJobs(Collection<UUID> toKill){
  long numKilled=0L;
  writeLock.lock();
  try {
    for (    KillAllListener killAllListener : killAllListeners) {
      for (      UUID job : toKill) {
        killAllListener.killJob(job);
      }
    }
    for (    UUID jobId : toKill) {
      JobExecutionContext ctx=activeContexts.get(jobId);
      if (ctx != null) {
        ctx.kill();
        numKilled++;
      }
    }
  }
  finally {
    writeLock.unlock();
  }
  return numKilled;
}",0.9586776859504132
13215,"public ShardProjectorChain(UUID jobId,int numShardsEstimate,List<Projection> projections,RowDownstream finalDownstream,ProjectorFactory projectorFactory,RamAccountingContext ramAccountingContext){
  this.jobId=jobId;
  this.projections=projections;
  this.executionState=executionState;
  this.ramAccountingContext=ramAccountingContext;
  nodeProjectors=new ArrayList<>();
  int idx=0;
  for (  Projection projection : projections) {
    if (projection.requiredGranularity() == RowGranularity.SHARD) {
      shardProjectionsIndex=idx;
      break;
    }
    idx++;
  }
  Projector previousUpstream=null;
  for (int i=shardProjectionsIndex + 1; i < projections.size(); i++) {
    Projector projector=projectorFactory.create(projections.get(i),ramAccountingContext,jobId);
    nodeProjectors.add(projector);
    if (previousUpstream != null) {
      previousUpstream.downstream(projector);
    }
 else {
      firstNodeProjector=projector;
    }
    previousUpstream=projector;
  }
  if (nodeProjectors.isEmpty()) {
    firstNodeProjector=finalDownstream;
  }
 else {
    nodeProjectors.get(nodeProjectors.size() - 1).downstream(finalDownstream);
  }
  if (shardProjectionsIndex >= 0) {
    shardProjectors=new ArrayList<>((shardProjectionsIndex + 1) * numShardsEstimate);
  }
 else {
    shardProjectors=ImmutableList.of();
  }
}","public ShardProjectorChain(UUID jobId,int numShardsEstimate,List<Projection> projections,RowDownstream finalDownstream,ProjectorFactory projectorFactory,RamAccountingContext ramAccountingContext){
  this.jobId=jobId;
  this.projections=projections;
  this.ramAccountingContext=ramAccountingContext;
  nodeProjectors=new ArrayList<>();
  int idx=0;
  for (  Projection projection : projections) {
    if (projection.requiredGranularity() == RowGranularity.SHARD) {
      shardProjectionsIndex=idx;
      break;
    }
    idx++;
  }
  Projector previousUpstream=null;
  for (int i=shardProjectionsIndex + 1; i < projections.size(); i++) {
    Projector projector=projectorFactory.create(projections.get(i),ramAccountingContext,jobId);
    nodeProjectors.add(projector);
    if (previousUpstream != null) {
      previousUpstream.downstream(projector);
    }
 else {
      firstNodeProjector=projector;
    }
    previousUpstream=projector;
  }
  if (nodeProjectors.isEmpty()) {
    firstNodeProjector=finalDownstream;
  }
 else {
    nodeProjectors.get(nodeProjectors.size() - 1).downstream(finalDownstream);
  }
  if (shardProjectionsIndex >= 0) {
    shardProjectors=new ArrayList<>((shardProjectionsIndex + 1) * numShardsEstimate);
  }
 else {
    shardProjectors=ImmutableList.of();
  }
}",0.985485103132162
13216,"private Tuple<String[],Symbol[]> convertAssignments(Map<Reference,Symbol> assignments){
  String[] assignmentColumns=new String[assignments.size()];
  Symbol[] assignmentSymbols=new Symbol[assignments.size()];
  Iterator<Reference> it=assignments.keySet().iterator();
  int i=0;
  while (it.hasNext()) {
    Reference key=it.next();
    assignmentColumns[i]=key.ident().columnIdent().fqn();
    assignmentSymbols[i]=assignments.get(key);
    i++;
  }
  return new Tuple<>(assignmentColumns,assignmentSymbols);
}","private Tuple<String[],Symbol[]> convertAssignments(Map<Reference,Symbol> assignments){
  String[] assignmentColumns=new String[assignments.size()];
  Symbol[] assignmentSymbols=new Symbol[assignments.size()];
  int i=0;
  for (  Map.Entry<Reference,Symbol> entry : assignments.entrySet()) {
    Reference key=entry.getKey();
    assignmentColumns[i]=key.ident().columnIdent().fqn();
    assignmentSymbols[i]=entry.getValue();
    i++;
  }
  return new Tuple<>(assignmentColumns,assignmentSymbols);
}",0.7675568743818002
13217,"@Test public void selectDynamicObjectAddsSubColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureGreen();
  execute(""String_Node_Str"");
  assertEquals(4,response.rowCount());
  assertEquals(""String_Node_Str"",response.rows()[0][0]);
  short ordinal_position=1;
  assertEquals(ordinal_position++,response.rows()[0][1]);
  assertEquals(""String_Node_Str"",response.rows()[1][0]);
  assertEquals(ordinal_position++,response.rows()[1][1]);
  assertEquals(""String_Node_Str"",response.rows()[2][0]);
  assertEquals(ordinal_position++,response.rows()[2][1]);
  assertEquals(""String_Node_Str"",response.rows()[3][0]);
  assertEquals(ordinal_position,response.rows()[3][1]);
  execute(""String_Node_Str"",new Object[]{new HashMap<String,Object>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
});
  execute(""String_Node_Str"");
  execute(""String_Node_Str"");
  waitForMappingUpdateOnAll(""String_Node_Str"",""String_Node_Str"");
  execute(""String_Node_Str"");
  assertEquals(5,response.rowCount());
  assertEquals(""String_Node_Str"",response.rows()[0][0]);
  ordinal_position=1;
  assertEquals(ordinal_position++,response.rows()[0][1]);
  assertEquals(""String_Node_Str"",response.rows()[1][0]);
  assertEquals(ordinal_position++,response.rows()[1][1]);
  assertEquals(""String_Node_Str"",response.rows()[2][0]);
  assertEquals(ordinal_position++,response.rows()[2][1]);
  assertEquals(""String_Node_Str"",response.rows()[3][0]);
  assertEquals(ordinal_position++,response.rows()[3][1]);
  assertEquals(""String_Node_Str"",response.rows()[4][0]);
  assertEquals(ordinal_position,response.rows()[4][1]);
}","@Test public void selectDynamicObjectAddsSubColumn() throws Exception {
  execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ensureGreen();
  execute(""String_Node_Str"");
  assertEquals(4,response.rowCount());
  assertEquals(""String_Node_Str"",response.rows()[0][0]);
  short ordinal_position=1;
  assertEquals(ordinal_position++,response.rows()[0][1]);
  assertEquals(""String_Node_Str"",response.rows()[1][0]);
  assertEquals(ordinal_position++,response.rows()[1][1]);
  assertEquals(""String_Node_Str"",response.rows()[2][0]);
  assertEquals(ordinal_position++,response.rows()[2][1]);
  assertEquals(""String_Node_Str"",response.rows()[3][0]);
  assertEquals(ordinal_position,response.rows()[3][1]);
  execute(""String_Node_Str"",new Object[]{new HashMap<String,Object>(){
{
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
      put(""String_Node_Str"",""String_Node_Str"");
    }
  }
});
  execute(""String_Node_Str"");
  waitForMappingUpdateOnAll(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  execute(""String_Node_Str"");
  assertEquals(5,response.rowCount());
  assertEquals(""String_Node_Str"",response.rows()[0][0]);
  ordinal_position=1;
  assertEquals(ordinal_position++,response.rows()[0][1]);
  assertEquals(""String_Node_Str"",response.rows()[1][0]);
  assertEquals(ordinal_position++,response.rows()[1][1]);
  assertEquals(""String_Node_Str"",response.rows()[2][0]);
  assertEquals(ordinal_position++,response.rows()[2][1]);
  assertEquals(""String_Node_Str"",response.rows()[3][0]);
  assertEquals(ordinal_position++,response.rows()[3][1]);
  assertEquals(""String_Node_Str"",response.rows()[4][0]);
  assertEquals(ordinal_position,response.rows()[4][1]);
}",0.9818181818181818
13218,"private LuceneDocCollector createDocCollector(OrderBy orderBy,Integer limit,Projector projector,List<Symbol> input) throws Exception {
  CollectNode node=new CollectNode(0,""String_Node_Str"",null,input,ImmutableList.<Projection>of());
  node.whereClause(WhereClause.MATCH_ALL);
  node.orderBy(orderBy);
  node.limit(limit);
  node.whereClause(WhereClause.MATCH_ALL);
  UUID jobId=UUID.randomUUID();
  node.jobId(jobId);
  node.toCollect(input);
  node.maxRowGranularity(RowGranularity.DOC);
  ShardProjectorChain projectorChain=Mockito.mock(ShardProjectorChain.class);
  Mockito.when(projectorChain.newShardDownstreamProjector(Matchers.any(ProjectionToProjectorVisitor.class))).thenReturn(projector);
  JobExecutionContext.Builder builder=jobContextService.newBuilder(jobId);
  jobCollectContext=new JobCollectContext(jobId,node,CLUSTER.getInstance(MapSideDataCollectOperation.class),RAM_ACCOUNTING_CONTEXT,collectingProjector);
  builder.addSubContext(node.executionNodeId(),jobCollectContext);
  LuceneDocCollector collector=(LuceneDocCollector)shardCollectService.getCollector(node,projectorChain,jobCollectContext,0);
  collector.pageSize(PAGE_SIZE);
  return collector;
}","private LuceneDocCollector createDocCollector(OrderBy orderBy,Integer limit,Projector projector,List<Symbol> input) throws Exception {
  CollectNode node=new CollectNode(0,""String_Node_Str"",null,input,ImmutableList.<Projection>of());
  node.whereClause(WhereClause.MATCH_ALL);
  node.orderBy(orderBy);
  node.limit(limit);
  node.whereClause(WhereClause.MATCH_ALL);
  UUID jobId=UUID.randomUUID();
  node.jobId(jobId);
  node.maxRowGranularity(RowGranularity.DOC);
  ShardProjectorChain projectorChain=Mockito.mock(ShardProjectorChain.class);
  Mockito.when(projectorChain.newShardDownstreamProjector(Matchers.any(ProjectionToProjectorVisitor.class))).thenReturn(projector);
  JobExecutionContext.Builder builder=jobContextService.newBuilder(jobId);
  jobCollectContext=new JobCollectContext(jobId,node,CLUSTER.getInstance(MapSideDataCollectOperation.class),RAM_ACCOUNTING_CONTEXT,collectingProjector);
  builder.addSubContext(node.executionNodeId(),jobCollectContext);
  LuceneDocCollector collector=(LuceneDocCollector)shardCollectService.getCollector(node,projectorChain,jobCollectContext,0);
  collector.pageSize(PAGE_SIZE);
  return collector;
}",0.989247311827957
13219,"@Override public void start(){
  if (!this.upstreamResult.isEmpty()) {
    Futures.addCallback(Futures.allAsList(this.upstreamResult),new FutureCallback<List<TaskResult>>(){
      @Override public void onSuccess(      @Nullable List<TaskResult> result){
        doStart(result);
      }
      @Override public void onFailure(      @Nonnull Throwable t){
        throw new TaskExecutionException(AbstractChainedTask.this,t);
      }
    }
);
  }
 else {
    doStart(ImmutableList.<TaskResult>of());
  }
}","@Override public void start(){
  if (!this.upstreamResult.isEmpty()) {
    Futures.addCallback(Futures.allAsList(this.upstreamResult),new FutureCallback<List<TaskResult>>(){
      @Override public void onSuccess(      @Nullable List<TaskResult> result){
        doStart(result);
      }
      @Override public void onFailure(      @Nonnull Throwable t){
        result.setException(t);
      }
    }
);
  }
 else {
    doStart(ImmutableList.<TaskResult>of());
  }
}",0.9235537190082644
13220,"@Override public void onFailure(@Nonnull Throwable t){
  throw new TaskExecutionException(AbstractChainedTask.this,t);
}","@Override public void onFailure(@Nonnull Throwable t){
  result.setException(t);
}",0.7425742574257426
13221,"public static PartitionName toPartitionName(TableInfo tableInfo,List<Assignment> partitionProperties,Object[] parameters){
  Preconditions.checkArgument(tableInfo.isPartitioned(),""String_Node_Str"",tableInfo.ident().fqn());
  Preconditions.checkArgument(partitionProperties.size() == tableInfo.partitionedBy().size(),""String_Node_Str"",tableInfo.ident().fqn(),tableInfo.partitionedBy().size(),partitionProperties.size());
  Map<ColumnIdent,Object> properties=assignmentsToMap(partitionProperties,parameters);
  BytesRef[] values=new BytesRef[properties.size()];
  for (  Map.Entry<ColumnIdent,Object> entry : properties.entrySet()) {
    Object value=entry.getValue();
    int idx=tableInfo.partitionedBy().indexOf(entry.getKey());
    try {
      ReferenceInfo referenceInfo=tableInfo.partitionedByColumns().get(idx);
      Object converted=referenceInfo.type().value(value);
      values[idx]=converted == null ? null : DataTypes.STRING.value(converted);
    }
 catch (    IndexOutOfBoundsException ex) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",entry.getKey().sqlFqn()));
    }
  }
  return new PartitionName(tableInfo.ident().name(),Arrays.asList(values));
}","public static PartitionName toPartitionName(TableInfo tableInfo,List<Assignment> partitionProperties,Object[] parameters){
  Preconditions.checkArgument(tableInfo.isPartitioned(),""String_Node_Str"",tableInfo.ident().fqn());
  Preconditions.checkArgument(partitionProperties.size() == tableInfo.partitionedBy().size(),""String_Node_Str"",tableInfo.ident().fqn(),tableInfo.partitionedBy().size(),partitionProperties.size());
  Map<ColumnIdent,Object> properties=assignmentsToMap(partitionProperties,parameters);
  BytesRef[] values=new BytesRef[properties.size()];
  for (  Map.Entry<ColumnIdent,Object> entry : properties.entrySet()) {
    Object value=entry.getValue();
    int idx=tableInfo.partitionedBy().indexOf(entry.getKey());
    try {
      ReferenceInfo referenceInfo=tableInfo.partitionedByColumns().get(idx);
      Object converted=referenceInfo.type().value(value);
      values[idx]=converted == null ? null : DataTypes.STRING.value(converted);
    }
 catch (    IndexOutOfBoundsException ex) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",entry.getKey().sqlFqn()));
    }
  }
  return new PartitionName(tableInfo.ident(),Arrays.asList(values));
}",0.9970551114850652
13222,"public static String indexName(TableInfo tableInfo,Optional<List<BytesRef>> values){
  if (tableInfo.isPartitioned()) {
    return new PartitionName(tableInfo.ident(),values.get()).stringValue();
  }
 else {
    return tableInfo.ident().name();
  }
}","public static String indexName(TableInfo tableInfo,Optional<List<BytesRef>> values){
  if (tableInfo.isPartitioned()) {
    return new PartitionName(tableInfo.ident(),values.get()).stringValue();
  }
 else {
    return tableInfo.ident().esName();
  }
}",0.9920318725099602
13223,"/** 
 * return the ES index names the query should go to
 */
public static String[] indices(TableInfo tableInfo,WhereClause whereClause){
  String[] indices;
  if (whereClause.noMatch()) {
    indices=org.elasticsearch.common.Strings.EMPTY_ARRAY;
  }
 else   if (!tableInfo.isPartitioned()) {
    indices=new String[]{tableInfo.ident().name()};
  }
 else   if (whereClause.partitions().isEmpty()) {
    if (whereClause.noMatch()) {
      return new String[0];
    }
    indices=new String[tableInfo.partitions().size()];
    int i=0;
    for (    PartitionName partitionName : tableInfo.partitions()) {
      indices[i]=partitionName.stringValue();
      i++;
    }
  }
 else {
    indices=whereClause.partitions().toArray(new String[whereClause.partitions().size()]);
  }
  return indices;
}","/** 
 * return the ES index names the query should go to
 */
public static String[] indices(TableInfo tableInfo,WhereClause whereClause){
  String[] indices;
  if (whereClause.noMatch()) {
    indices=org.elasticsearch.common.Strings.EMPTY_ARRAY;
  }
 else   if (!tableInfo.isPartitioned()) {
    indices=new String[]{tableInfo.ident().esName()};
  }
 else   if (whereClause.partitions().isEmpty()) {
    if (whereClause.noMatch()) {
      return new String[0];
    }
    indices=new String[tableInfo.partitions().size()];
    int i=0;
    for (    PartitionName partitionName : tableInfo.partitions()) {
      indices[i]=partitionName.stringValue();
      i++;
    }
  }
 else {
    indices=whereClause.partitions().toArray(new String[whereClause.partitions().size()]);
  }
  return indices;
}",0.9974779319041616
13224,"@Override public String[] concreteIndices(){
  return new String[]{ident.name()};
}","@Override public String[] concreteIndices(){
  return new String[]{ident.esName()};
}",0.9761904761904762
13225,"public SourceIndexWriterProjection(String tableName,Reference rawSourceReference,List<ColumnIdent> primaryKeys,List<ColumnIdent> partitionedBy,List<BytesRef> partitionValues,@Nullable ColumnIdent clusteredByColumn,int clusteredByIdx,Settings settings,@Nullable String[] includes,@Nullable String[] excludes,boolean autoCreateIndices){
  super(tableName,primaryKeys,clusteredByColumn,settings,autoCreateIndices);
  this.rawSourceReference=rawSourceReference;
  this.includes=includes;
  this.excludes=excludes;
  int currentInputIndex=primaryKeys.size();
  idSymbols=new ArrayList<>(primaryKeys.size());
  for (int i=0; i < primaryKeys.size(); i++) {
    idSymbols.add(new InputColumn(i,null));
  }
  partitionedBySymbols=new ArrayList<>(partitionedBy.size());
  for (int i=0, length=partitionedBy.size(); i < length; i++) {
    int idx=primaryKeys.indexOf(partitionedBy.get(i));
    Symbol partitionSymbol;
    if (partitionValues.size() > i) {
      if (idx > -1) {
        idSymbols.set(idx,Literal.newLiteral(partitionValues.get(i)));
      }
      continue;
    }
    if (idx == -1) {
      partitionSymbol=new InputColumn(currentInputIndex++,null);
    }
 else {
      partitionSymbol=idSymbols.get(idx);
    }
    partitionedBySymbols.add(partitionSymbol);
  }
  if (clusteredByIdx == -1) {
    clusteredBySymbol=new InputColumn(currentInputIndex++,null);
  }
  overwriteDuplicates=settings.getAsBoolean(OVERWRITE_DUPLICATES,OVERWRITE_DUPLICATES_DEFAULT);
  rawSourceSymbol=new InputColumn(currentInputIndex,DataTypes.STRING);
}","public SourceIndexWriterProjection(String tableName,Reference rawSourceReference,List<ColumnIdent> primaryKeys,List<ColumnIdent> partitionedBy,List<BytesRef> partitionValues,@Nullable ColumnIdent clusteredByColumn,int clusteredByIdx,Settings settings,@Nullable String[] includes,@Nullable String[] excludes,boolean autoCreateIndices){
  super(tableName,primaryKeys,clusteredByColumn,settings,autoCreateIndices);
  this.rawSourceReference=rawSourceReference;
  this.includes=includes;
  this.excludes=excludes;
  int currentInputIndex=primaryKeys.size();
  idSymbols=new ArrayList<>(primaryKeys.size());
  for (int i=0; i < primaryKeys.size(); i++) {
    InputColumn ic=new InputColumn(i,null);
    idSymbols.add(ic);
    if (i == clusteredByIdx) {
      clusteredBySymbol=ic;
    }
  }
  partitionedBySymbols=new ArrayList<>(partitionedBy.size());
  for (int i=0, length=partitionedBy.size(); i < length; i++) {
    int idx=primaryKeys.indexOf(partitionedBy.get(i));
    Symbol partitionSymbol;
    if (partitionValues.size() > i) {
      if (idx > -1) {
        idSymbols.set(idx,Literal.newLiteral(partitionValues.get(i)));
      }
      continue;
    }
    if (idx == -1) {
      partitionSymbol=new InputColumn(currentInputIndex++,null);
    }
 else {
      partitionSymbol=idSymbols.get(idx);
    }
    partitionedBySymbols.add(partitionSymbol);
  }
  if (clusteredByIdx == -1) {
    clusteredBySymbol=new InputColumn(currentInputIndex++,null);
  }
  overwriteDuplicates=settings.getAsBoolean(OVERWRITE_DUPLICATES,OVERWRITE_DUPLICATES_DEFAULT);
  rawSourceSymbol=new InputColumn(currentInputIndex,DataTypes.STRING);
}",0.9619771863117872
13226,"@Inject public ShardCollectService(ClusterService clusterService,Settings settings,TransportActionProvider transportActionProvider,ShardId shardId,IndexService indexService,ScriptService scriptService,CacheRecycler cacheRecycler,PageCacheRecycler pageCacheRecycler,BigArrays bigArrays,SQLXContentQueryParser sqlxContentQueryParser,Functions functions,ShardReferenceResolver referenceResolver,BlobIndices blobIndices,BlobShardReferenceResolver blobShardReferenceResolver){
  this.clusterService=clusterService;
  this.shardId=shardId;
  this.indexService=indexService;
  this.scriptService=scriptService;
  this.cacheRecycler=cacheRecycler;
  this.pageCacheRecycler=pageCacheRecycler;
  this.bigArrays=bigArrays;
  this.sqlxContentQueryParser=sqlxContentQueryParser;
  this.queryBuilder=new ESQueryBuilder();
  this.blobIndices=blobIndices;
  isBlobShard=BlobIndices.isBlobShard(this.shardId);
  this.docInputSymbolVisitor=new CollectInputSymbolVisitor<>(functions,(isBlobShard ? BlobReferenceResolver.INSTANCE : LuceneDocLevelReferenceResolver.INSTANCE));
  this.shardImplementationSymbolVisitor=new ImplementationSymbolVisitor((isBlobShard ? blobShardReferenceResolver : referenceResolver),functions,RowGranularity.SHARD);
  this.shardNormalizer=new EvaluatingNormalizer(functions,RowGranularity.SHARD,(isBlobShard ? blobShardReferenceResolver : referenceResolver));
  this.projectorVisitor=new ProjectionToProjectorVisitor(clusterService,settings,transportActionProvider,shardImplementationSymbolVisitor,shardNormalizer);
}","@Inject public ShardCollectService(ClusterService clusterService,Settings settings,TransportActionProvider transportActionProvider,ShardId shardId,IndexService indexService,ScriptService scriptService,CacheRecycler cacheRecycler,PageCacheRecycler pageCacheRecycler,BigArrays bigArrays,SQLXContentQueryParser sqlxContentQueryParser,Functions functions,ShardReferenceResolver referenceResolver,BlobIndices blobIndices,BlobShardReferenceResolver blobShardReferenceResolver){
  this.clusterService=clusterService;
  this.shardId=shardId;
  this.indexService=indexService;
  this.scriptService=scriptService;
  this.cacheRecycler=cacheRecycler;
  this.pageCacheRecycler=pageCacheRecycler;
  this.bigArrays=bigArrays;
  this.sqlxContentQueryParser=sqlxContentQueryParser;
  this.queryBuilder=new ESQueryBuilder();
  this.blobIndices=blobIndices;
  isBlobShard=BlobIndices.isBlobShard(this.shardId);
  DocLevelReferenceResolver<? extends Input<?>> resolver=(isBlobShard ? BlobReferenceResolver.INSTANCE : LuceneDocLevelReferenceResolver.INSTANCE);
  this.docInputSymbolVisitor=new CollectInputSymbolVisitor<>(functions,resolver);
  this.shardImplementationSymbolVisitor=new ImplementationSymbolVisitor((isBlobShard ? blobShardReferenceResolver : referenceResolver),functions,RowGranularity.SHARD);
  this.shardNormalizer=new EvaluatingNormalizer(functions,RowGranularity.SHARD,(isBlobShard ? blobShardReferenceResolver : referenceResolver));
  this.projectorVisitor=new ProjectionToProjectorVisitor(clusterService,settings,transportActionProvider,shardImplementationSymbolVisitor,shardNormalizer);
}",0.935514918190568
13227,"private void addChildImplementations(){
  childImplementations.put(HTTP,new PortExpression(HTTP){
    @Override public Integer value(){
      return portFromAddress(httpServer.info().address().publishAddress());
    }
  }
);
  childImplementations.put(TRANSPORT,new PortExpression(TRANSPORT){
    @Override public Integer value(){
      return portFromAddress(nodeService.stats().getNode().address());
    }
  }
);
}","private void addChildImplementations(){
  childImplementations.put(HTTP,new PortExpression(HTTP){
    @Override public Integer value(){
      if (nodeService.info().getHttp() == null) {
        return null;
      }
      return portFromAddress(nodeService.info().getHttp().address().publishAddress());
    }
  }
);
  childImplementations.put(TRANSPORT,new PortExpression(TRANSPORT){
    @Override public Integer value(){
      return portFromAddress(nodeService.stats().getNode().address());
    }
  }
);
}",0.8893709327548807
13228,"@Inject public NodePortExpression(NodeService nodeService,HttpServer httpServer){
  super(NAME);
  this.nodeService=nodeService;
  this.httpServer=httpServer;
  addChildImplementations();
}","@Inject public NodePortExpression(NodeService nodeService){
  super(NAME);
  this.nodeService=nodeService;
  addChildImplementations();
}",0.8404907975460123
13229,"@Override protected void configure(){
  bind(Settings.class).toInstance(ImmutableSettings.EMPTY);
  OsService osService=mock(OsService.class);
  OsStats osStats=mock(OsStats.class);
  when(osService.stats()).thenReturn(osStats);
  when(osStats.loadAverage()).thenAnswer(new Answer<double[]>(){
    @Override public double[] answer(    InvocationOnMock invocation) throws Throwable {
      if (onWindows) {
        return new double[0];
      }
 else {
        return new double[]{1,5,15};
      }
    }
  }
);
  ByteSizeValue byteSizeValue=mock(ByteSizeValue.class);
  when(byteSizeValue.bytes()).thenReturn(12345342234L);
  when(byteSizeValue.toString()).thenReturn(""String_Node_Str"");
  OsStats.Mem mem=mock(OsStats.Mem.class);
  when(osStats.mem()).thenReturn(mem);
  when(mem.actualFree()).thenReturn(byteSizeValue);
  when(mem.actualUsed()).thenReturn(byteSizeValue);
  when(mem.usedPercent()).thenReturn((short)22);
  when(mem.freePercent()).thenReturn((short)78);
  bind(OsService.class).toInstance(osService);
  NodeService nodeService=mock(NodeService.class);
  NodeStats nodeStats=mock(NodeStats.class);
  when(nodeService.stats()).thenReturn(nodeStats);
  when(nodeStats.getHostname()).thenReturn(""String_Node_Str"");
  DiscoveryNode node=mock(DiscoveryNode.class);
  when(nodeStats.getNode()).thenReturn(node);
  when(nodeStats.getOs()).thenReturn(osStats);
  when(osStats.uptime()).thenReturn(new TimeValue(3600000));
  OsStats.Cpu cpu=mock(OsStats.Cpu.class);
  when(osStats.cpu()).thenReturn(cpu);
  when(cpu.sys()).thenReturn((short)2);
  when(cpu.user()).thenReturn((short)4);
  when(cpu.idle()).thenReturn((short)94);
  when(cpu.stolen()).thenReturn((short)10);
  ProcessStats processStats=mock(ProcessStats.class);
  when(nodeStats.getProcess()).thenReturn(processStats);
  when(processStats.getOpenFileDescriptors()).thenReturn(42L);
  NodeInfo nodeInfo=mock(NodeInfo.class);
  when(nodeService.info()).thenReturn(nodeInfo);
  ProcessInfo processInfo=mock(ProcessInfo.class);
  when(nodeInfo.getProcess()).thenReturn(processInfo);
  when(processInfo.getMaxFileDescriptors()).thenReturn(1000L);
  Discovery discovery=mock(Discovery.class);
  bind(Discovery.class).toInstance(discovery);
  when(discovery.localNode()).thenReturn(node);
  when(node.getId()).thenReturn(""String_Node_Str"");
  when(node.getName()).thenReturn(""String_Node_Str"");
  TransportAddress transportAddress=new InetSocketTransportAddress(""String_Node_Str"",44300);
  when(node.address()).thenReturn(transportAddress);
  NetworkStats.Tcp tcp=mock(NetworkStats.Tcp.class,new Answer<Long>(){
    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {
      return 42L;
    }
  }
);
  NetworkStats networkStats=mock(NetworkStats.class);
  when(networkStats.tcp()).thenReturn(tcp);
  NetworkService networkService=mock(NetworkService.class);
  when(networkService.stats()).thenReturn(networkStats);
  bind(NetworkService.class).toInstance(networkService);
  bind(NodeService.class).toInstance(nodeService);
  NodeEnvironment nodeEnv=mock(NodeEnvironment.class);
  File[] dataLocations=new File[]{new File(""String_Node_Str""),new File(""String_Node_Str"")};
  when(nodeEnv.hasNodeFile()).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      return isDataNode;
    }
  }
);
  when(nodeEnv.nodeDataLocations()).thenReturn(dataLocations);
  bind(NodeEnvironment.class).toInstance(nodeEnv);
  Sigar sigar=mock(Sigar.class);
  SigarService sigarService=mock(SigarService.class);
  when(sigarService.sigarAvailable()).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      return sigarAvailable;
    }
  }
);
  FileSystem fsFoo=mock(FileSystem.class);
  when(fsFoo.getDevName()).thenReturn(""String_Node_Str"");
  when(fsFoo.getDirName()).thenReturn(""String_Node_Str"");
  when(fsFoo.getType()).thenReturn(FileSystem.TYPE_LOCAL_DISK);
  FileSystem fsBar=mock(FileSystem.class);
  when(fsBar.getDevName()).thenReturn(""String_Node_Str"");
  when(fsBar.getDirName()).thenReturn(""String_Node_Str"");
  when(fsBar.getType()).thenReturn(FileSystem.TYPE_LOCAL_DISK);
  FileSystem fsFiltered=mock(FileSystem.class);
  when(fsFiltered.getType()).thenReturn(FileSystem.TYPE_UNKNOWN);
  when(fsFiltered.getDevName()).thenReturn((""String_Node_Str""));
  when(fsFiltered.getDirName()).thenReturn((""String_Node_Str""));
  FileSystemMap map=mock(FileSystemMap.class);
  when(map.getMountPoint(""String_Node_Str"")).thenReturn(fsFoo);
  when(map.getMountPoint(""String_Node_Str"")).thenReturn(fsBar);
  when(map.getMountPoint(""String_Node_Str"")).thenReturn(fsFiltered);
  FileSystemUsage usage=mock(FileSystemUsage.class,new Answer<Long>(){
    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {
      return 42L;
    }
  }
);
  try {
    when(sigar.getFileSystemList()).thenReturn(new FileSystem[]{fsFoo,fsBar,fsFiltered});
    when(sigar.getFileSystemMap()).thenReturn(map);
    when(sigar.getFileSystemUsage(anyString())).thenReturn(usage);
    assertThat(sigar.getFileSystemUsage(""String_Node_Str""),is(usage));
  }
 catch (  SigarException e) {
    e.printStackTrace();
  }
  when(sigarService.sigar()).thenReturn(sigar);
  bind(SigarService.class).toInstance(sigarService);
  try {
    assertThat(sigarService.sigar().getFileSystemMap(),is(map));
  }
 catch (  SigarException e) {
    e.printStackTrace();
  }
  HttpServer httpServer=mock(HttpServer.class);
  HttpInfo httpInfo=mock(HttpInfo.class);
  BoundTransportAddress boundTransportAddress=new BoundTransportAddress(new InetSocketTransportAddress(""String_Node_Str"",44200),new InetSocketTransportAddress(""String_Node_Str"",44200));
  when(httpInfo.address()).thenReturn(boundTransportAddress);
  when(httpServer.info()).thenReturn(httpInfo);
  bind(HttpServer.class).toInstance(httpServer);
  JvmService jvmService=mock(JvmService.class);
  JvmStats jvmStats=mock(JvmStats.class);
  JvmStats.Mem jvmStatsMem=mock(JvmStats.Mem.class);
  ByteSizeValue heapByteSizeValueMax=mock(ByteSizeValue.class);
  when(heapByteSizeValueMax.bytes()).thenReturn(123456L);
  when(jvmStatsMem.getHeapMax()).thenReturn(heapByteSizeValueMax);
  when(jvmStatsMem.getHeapUsed()).thenReturn(heapByteSizeValueMax);
  when(jvmStats.mem()).thenReturn(jvmStatsMem);
  when(jvmService.stats()).thenReturn(jvmStats);
  bind(JvmService.class).toInstance(jvmService);
  bind(ReferenceResolver.class).to(GlobalReferenceResolver.class).asEagerSingleton();
  ThreadPool threadPool=new ThreadPool(getClass().getName());
  bind(ThreadPool.class).toInstance(threadPool);
}","@Override protected void configure(){
  bind(Settings.class).toInstance(ImmutableSettings.EMPTY);
  OsService osService=mock(OsService.class);
  OsStats osStats=mock(OsStats.class);
  when(osService.stats()).thenReturn(osStats);
  when(osStats.loadAverage()).thenAnswer(new Answer<double[]>(){
    @Override public double[] answer(    InvocationOnMock invocation) throws Throwable {
      if (onWindows) {
        return new double[0];
      }
 else {
        return new double[]{1,5,15};
      }
    }
  }
);
  ByteSizeValue byteSizeValue=mock(ByteSizeValue.class);
  when(byteSizeValue.bytes()).thenReturn(12345342234L);
  when(byteSizeValue.toString()).thenReturn(""String_Node_Str"");
  OsStats.Mem mem=mock(OsStats.Mem.class);
  when(osStats.mem()).thenReturn(mem);
  when(mem.actualFree()).thenReturn(byteSizeValue);
  when(mem.actualUsed()).thenReturn(byteSizeValue);
  when(mem.usedPercent()).thenReturn((short)22);
  when(mem.freePercent()).thenReturn((short)78);
  bind(OsService.class).toInstance(osService);
  NodeService nodeService=mock(NodeService.class);
  NodeStats nodeStats=mock(NodeStats.class);
  when(nodeService.stats()).thenReturn(nodeStats);
  when(nodeStats.getHostname()).thenReturn(""String_Node_Str"");
  DiscoveryNode node=mock(DiscoveryNode.class);
  when(nodeStats.getNode()).thenReturn(node);
  when(nodeStats.getOs()).thenReturn(osStats);
  when(osStats.uptime()).thenReturn(new TimeValue(3600000));
  OsStats.Cpu cpu=mock(OsStats.Cpu.class);
  when(osStats.cpu()).thenReturn(cpu);
  when(cpu.sys()).thenReturn((short)2);
  when(cpu.user()).thenReturn((short)4);
  when(cpu.idle()).thenReturn((short)94);
  when(cpu.stolen()).thenReturn((short)10);
  ProcessStats processStats=mock(ProcessStats.class);
  when(nodeStats.getProcess()).thenReturn(processStats);
  when(processStats.getOpenFileDescriptors()).thenReturn(42L);
  NodeInfo nodeInfo=mock(NodeInfo.class);
  when(nodeService.info()).thenReturn(nodeInfo);
  ProcessInfo processInfo=mock(ProcessInfo.class);
  when(nodeInfo.getProcess()).thenReturn(processInfo);
  when(processInfo.getMaxFileDescriptors()).thenReturn(1000L);
  Discovery discovery=mock(Discovery.class);
  bind(Discovery.class).toInstance(discovery);
  when(discovery.localNode()).thenReturn(node);
  when(node.getId()).thenReturn(""String_Node_Str"");
  when(node.getName()).thenReturn(""String_Node_Str"");
  TransportAddress transportAddress=new InetSocketTransportAddress(""String_Node_Str"",44300);
  when(node.address()).thenReturn(transportAddress);
  NetworkStats.Tcp tcp=mock(NetworkStats.Tcp.class,new Answer<Long>(){
    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {
      return 42L;
    }
  }
);
  NetworkStats networkStats=mock(NetworkStats.class);
  when(networkStats.tcp()).thenReturn(tcp);
  NetworkService networkService=mock(NetworkService.class);
  when(networkService.stats()).thenReturn(networkStats);
  bind(NetworkService.class).toInstance(networkService);
  bind(NodeService.class).toInstance(nodeService);
  NodeEnvironment nodeEnv=mock(NodeEnvironment.class);
  File[] dataLocations=new File[]{new File(""String_Node_Str""),new File(""String_Node_Str"")};
  when(nodeEnv.hasNodeFile()).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      return isDataNode;
    }
  }
);
  when(nodeEnv.nodeDataLocations()).thenReturn(dataLocations);
  bind(NodeEnvironment.class).toInstance(nodeEnv);
  Sigar sigar=mock(Sigar.class);
  SigarService sigarService=mock(SigarService.class);
  when(sigarService.sigarAvailable()).then(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      return sigarAvailable;
    }
  }
);
  FileSystem fsFoo=mock(FileSystem.class);
  when(fsFoo.getDevName()).thenReturn(""String_Node_Str"");
  when(fsFoo.getDirName()).thenReturn(""String_Node_Str"");
  when(fsFoo.getType()).thenReturn(FileSystem.TYPE_LOCAL_DISK);
  FileSystem fsBar=mock(FileSystem.class);
  when(fsBar.getDevName()).thenReturn(""String_Node_Str"");
  when(fsBar.getDirName()).thenReturn(""String_Node_Str"");
  when(fsBar.getType()).thenReturn(FileSystem.TYPE_LOCAL_DISK);
  FileSystem fsFiltered=mock(FileSystem.class);
  when(fsFiltered.getType()).thenReturn(FileSystem.TYPE_UNKNOWN);
  when(fsFiltered.getDevName()).thenReturn((""String_Node_Str""));
  when(fsFiltered.getDirName()).thenReturn((""String_Node_Str""));
  FileSystemMap map=mock(FileSystemMap.class);
  when(map.getMountPoint(""String_Node_Str"")).thenReturn(fsFoo);
  when(map.getMountPoint(""String_Node_Str"")).thenReturn(fsBar);
  when(map.getMountPoint(""String_Node_Str"")).thenReturn(fsFiltered);
  FileSystemUsage usage=mock(FileSystemUsage.class,new Answer<Long>(){
    @Override public Long answer(    InvocationOnMock invocation) throws Throwable {
      return 42L;
    }
  }
);
  try {
    when(sigar.getFileSystemList()).thenReturn(new FileSystem[]{fsFoo,fsBar,fsFiltered});
    when(sigar.getFileSystemMap()).thenReturn(map);
    when(sigar.getFileSystemUsage(anyString())).thenReturn(usage);
    assertThat(sigar.getFileSystemUsage(""String_Node_Str""),is(usage));
  }
 catch (  SigarException e) {
    e.printStackTrace();
  }
  when(sigarService.sigar()).thenReturn(sigar);
  bind(SigarService.class).toInstance(sigarService);
  try {
    assertThat(sigarService.sigar().getFileSystemMap(),is(map));
  }
 catch (  SigarException e) {
    e.printStackTrace();
  }
  HttpInfo httpInfo=mock(HttpInfo.class);
  when(nodeInfo.getHttp()).thenReturn(httpInfo);
  BoundTransportAddress boundTransportAddress=new BoundTransportAddress(new InetSocketTransportAddress(""String_Node_Str"",44200),new InetSocketTransportAddress(""String_Node_Str"",44200));
  when(httpInfo.address()).thenReturn(boundTransportAddress);
  JvmService jvmService=mock(JvmService.class);
  JvmStats jvmStats=mock(JvmStats.class);
  JvmStats.Mem jvmStatsMem=mock(JvmStats.Mem.class);
  ByteSizeValue heapByteSizeValueMax=mock(ByteSizeValue.class);
  when(heapByteSizeValueMax.bytes()).thenReturn(123456L);
  when(jvmStatsMem.getHeapMax()).thenReturn(heapByteSizeValueMax);
  when(jvmStatsMem.getHeapUsed()).thenReturn(heapByteSizeValueMax);
  when(jvmStats.mem()).thenReturn(jvmStatsMem);
  when(jvmService.stats()).thenReturn(jvmStats);
  bind(JvmService.class).toInstance(jvmService);
  bind(ReferenceResolver.class).to(GlobalReferenceResolver.class).asEagerSingleton();
  ThreadPool threadPool=new ThreadPool(getClass().getName());
  bind(ThreadPool.class).toInstance(threadPool);
}",0.982986480328118
13230,"@Inject public ShardCollectService(ClusterService clusterService,Settings settings,TransportActionProvider transportActionProvider,ShardId shardId,IndexService indexService,ScriptService scriptService,CacheRecycler cacheRecycler,PageCacheRecycler pageCacheRecycler,BigArrays bigArrays,SQLXContentQueryParser sqlxContentQueryParser,Functions functions,ShardReferenceResolver referenceResolver,BlobIndices blobIndices,BlobShardReferenceResolver blobShardReferenceResolver){
  this.clusterService=clusterService;
  this.shardId=shardId;
  this.indexService=indexService;
  this.scriptService=scriptService;
  this.cacheRecycler=cacheRecycler;
  this.pageCacheRecycler=pageCacheRecycler;
  this.bigArrays=bigArrays;
  this.sqlxContentQueryParser=sqlxContentQueryParser;
  this.queryBuilder=new ESQueryBuilder();
  this.blobIndices=blobIndices;
  isBlobShard=BlobIndices.isBlobShard(this.shardId);
  this.docInputSymbolVisitor=new CollectInputSymbolVisitor<>(functions,(isBlobShard ? BlobReferenceResolver.INSTANCE : LuceneDocLevelReferenceResolver.INSTANCE));
  this.shardImplementationSymbolVisitor=new ImplementationSymbolVisitor((isBlobShard ? blobShardReferenceResolver : referenceResolver),functions,RowGranularity.SHARD);
  this.shardNormalizer=new EvaluatingNormalizer(functions,RowGranularity.SHARD,(isBlobShard ? blobShardReferenceResolver : referenceResolver));
  this.projectorVisitor=new ProjectionToProjectorVisitor(clusterService,settings,transportActionProvider,shardImplementationSymbolVisitor,shardNormalizer);
}","@Inject public ShardCollectService(ClusterService clusterService,Settings settings,TransportActionProvider transportActionProvider,ShardId shardId,IndexService indexService,ScriptService scriptService,CacheRecycler cacheRecycler,PageCacheRecycler pageCacheRecycler,BigArrays bigArrays,SQLXContentQueryParser sqlxContentQueryParser,Functions functions,ShardReferenceResolver referenceResolver,BlobIndices blobIndices,BlobShardReferenceResolver blobShardReferenceResolver){
  this.clusterService=clusterService;
  this.shardId=shardId;
  this.indexService=indexService;
  this.scriptService=scriptService;
  this.cacheRecycler=cacheRecycler;
  this.pageCacheRecycler=pageCacheRecycler;
  this.bigArrays=bigArrays;
  this.sqlxContentQueryParser=sqlxContentQueryParser;
  this.queryBuilder=new ESQueryBuilder();
  this.blobIndices=blobIndices;
  isBlobShard=BlobIndices.isBlobShard(this.shardId);
  DocLevelReferenceResolver<? extends Input<?>> resolver=(isBlobShard ? BlobReferenceResolver.INSTANCE : LuceneDocLevelReferenceResolver.INSTANCE);
  this.docInputSymbolVisitor=new CollectInputSymbolVisitor<>(functions,resolver);
  this.shardImplementationSymbolVisitor=new ImplementationSymbolVisitor((isBlobShard ? blobShardReferenceResolver : referenceResolver),functions,RowGranularity.SHARD);
  this.shardNormalizer=new EvaluatingNormalizer(functions,RowGranularity.SHARD,(isBlobShard ? blobShardReferenceResolver : referenceResolver));
  this.projectorVisitor=new ProjectionToProjectorVisitor(clusterService,settings,transportActionProvider,shardImplementationSymbolVisitor,shardNormalizer);
}",0.935514918190568
13231,"@Override protected String visitQualifiedNameReference(QualifiedNameReference node,Void context){
  List<String> parts=new ArrayList<>();
  for (  String part : node.getName().getParts()) {
    parts.add(formatIdentifier(part));
  }
  return WHITESPACE_JOINER.join(parts);
}","@Override protected String visitQualifiedNameReference(QualifiedNameReference node,Void context){
  List<String> parts=new ArrayList<>();
  for (  String part : node.getName().getParts()) {
    parts.add(formatIdentifier(part));
  }
  return Joiner.on('.').join(parts);
}",0.946788990825688
13232,"@Override protected String visitNode(Node node,Void context){
  throw new UnsupportedOperationException();
}","@Override protected String visitNode(Node node,Void context){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",node.toString()));
}",0.7741935483870968
13233,"/** 
 * Returns the cause throwable of a   {@link org.elasticsearch.transport.RemoteTransportException}and   {@link org.elasticsearch.action.search.ReduceSearchPhaseException}. Also transform throwable to   {@link io.crate.exceptions.CrateException}.
 */
public Throwable esToCrateException(Throwable e){
  e=Exceptions.unwrap(e);
  if (e instanceof IllegalArgumentException || e instanceof ParsingException) {
    return new SQLParseException(e.getMessage(),(Exception)e);
  }
 else   if (e instanceof UnsupportedOperationException) {
    return new UnsupportedFeatureException(e.getMessage());
  }
 else   if (e instanceof DocumentAlreadyExistsException) {
    return new DuplicateKeyException(""String_Node_Str"",e);
  }
 else   if (e instanceof IndexAlreadyExistsException) {
    return new TableAlreadyExistsException(((IndexAlreadyExistsException)e).index().name(),e);
  }
 else   if ((e instanceof InvalidIndexNameException)) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      return new TableAlreadyExistsException(((InvalidIndexNameException)e).index().getName(),e);
    }
    return new InvalidTableNameException(((InvalidIndexNameException)e).index().getName(),e);
  }
 else   if (e instanceof IndexMissingException) {
    return new TableUnknownException(((IndexMissingException)e).index().name(),e);
  }
 else   if (e instanceof ReduceSearchPhaseException && e.getCause() instanceof VersionConflictException) {
    return e.getCause();
  }
  return e;
}","/** 
 * Returns the cause throwable of a   {@link org.elasticsearch.transport.RemoteTransportException}and   {@link org.elasticsearch.action.search.ReduceSearchPhaseException}. Also transform throwable to   {@link io.crate.exceptions.CrateException}.
 */
public Throwable esToCrateException(Throwable e){
  e=Exceptions.unwrap(e);
  if (e instanceof IllegalArgumentException || e instanceof ParsingException) {
    return new SQLParseException(e.getMessage(),(Exception)e);
  }
 else   if (e instanceof UnsupportedOperationException) {
    return new UnsupportedFeatureException(e.getMessage(),(Exception)e);
  }
 else   if (e instanceof DocumentAlreadyExistsException) {
    return new DuplicateKeyException(""String_Node_Str"",e);
  }
 else   if (e instanceof IndexAlreadyExistsException) {
    return new TableAlreadyExistsException(((IndexAlreadyExistsException)e).index().name(),e);
  }
 else   if ((e instanceof InvalidIndexNameException)) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      return new TableAlreadyExistsException(((InvalidIndexNameException)e).index().getName(),e);
    }
    return new InvalidTableNameException(((InvalidIndexNameException)e).index().getName(),e);
  }
 else   if (e instanceof IndexMissingException) {
    return new TableUnknownException(((IndexMissingException)e).index().name(),e);
  }
 else   if (e instanceof ReduceSearchPhaseException && e.getCause() instanceof VersionConflictException) {
    return e.getCause();
  }
  return e;
}",0.9956125548430644
13234,"@Override public SchemaInfo schema(){
  throw new UnsupportedOperationException();
}","@Override public SchemaInfo schema(){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.6942148760330579
13235,"@Override public TableInfo table(){
  throw new UnsupportedOperationException();
}","@Override public TableInfo table(){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.6890756302521008
13236,"@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException();
}","@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.774390243902439
13237,"@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException();
}","@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.774390243902439
13238,"@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException();
}","@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.774390243902439
13239,"@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException();
}","@Override public void upstreamResult(List<ListenableFuture<Object[][]>> result){
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.774390243902439
13240,"@Override public XContentBuilder toXContent(XContentBuilder builder,Params params) throws IOException {
  throw new UnsupportedOperationException();
}","@Override public XContentBuilder toXContent(XContentBuilder builder,Params params) throws IOException {
  throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",getClass().getSimpleName()));
}",0.8021390374331551
13241,"public AggregationCollector(Aggregation a,AggregationFunction aggregationFunction,Input... inputs){
  if (a.fromStep() == Aggregation.Step.PARTIAL && inputs.length > 1) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
switch (a.fromStep()) {
case ITER:
    fromImpl=new FromIter();
  break;
case PARTIAL:
fromImpl=new FromPartial();
break;
case FINAL:
throw new UnsupportedOperationException(""String_Node_Str"");
default :
throw new UnsupportedOperationException();
}
switch (a.toStep()) {
case ITER:
throw new UnsupportedOperationException(""String_Node_Str"");
case PARTIAL:
toImpl=new ToPartial();
break;
case FINAL:
toImpl=new ToFinal();
break;
default :
throw new UnsupportedOperationException();
}
this.inputs=inputs;
this.aggregationFunction=aggregationFunction;
}","public AggregationCollector(Aggregation a,AggregationFunction aggregationFunction,Input... inputs){
  if (a.fromStep() == Aggregation.Step.PARTIAL && inputs.length > 1) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
switch (a.fromStep()) {
case ITER:
    fromImpl=new FromIter();
  break;
case PARTIAL:
fromImpl=new FromPartial();
break;
case FINAL:
throw new UnsupportedOperationException(""String_Node_Str"");
default :
throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",a.fromStep().name()));
}
switch (a.toStep()) {
case ITER:
throw new UnsupportedOperationException(""String_Node_Str"");
case PARTIAL:
toImpl=new ToPartial();
break;
case FINAL:
toImpl=new ToFinal();
break;
default :
throw new UnsupportedOperationException(String.format(Locale.ENGLISH,""String_Node_Str"",a.toStep().name()));
}
this.inputs=inputs;
this.aggregationFunction=aggregationFunction;
}",0.9228070175438596
13242,"@Override public Long load(@Nonnull String key) throws Exception {
  throw new UnsupportedOperationException();
}","@Override public Long load(@Nonnull String key) throws Exception {
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9300411522633744
13243,"@Override public Symbol visitFunction(Function symbol,Void context){
  boolean needsCopy=false;
  List<Symbol> arguments=symbol.arguments();
  for (int i=0; i < arguments.size(); i++) {
    Symbol argument=arguments.get(i);
    arguments.set(i,process(argument,null));
    if (argument.symbolType() == SymbolType.REFERENCE) {
      needsCopy=true;
    }
  }
  try {
    return needsCopy ? symbol.deepCopy() : symbol;
  }
 catch (  IOException e) {
    throw new RuntimeException(SymbolFormatter.format(""String_Node_Str"",symbol),e);
  }
}","@Override public Symbol visitFunction(Function symbol,Void context){
  boolean needsCopy=false;
  List<Symbol> arguments=Lists.newArrayList(symbol.arguments());
  for (int i=0; i < arguments.size(); i++) {
    Symbol argument=arguments.get(i);
    arguments.set(i,process(argument,null));
    if (argument.symbolType() == SymbolType.REFERENCE) {
      needsCopy=true;
    }
  }
  try {
    return needsCopy ? symbol.deepCopy() : symbol;
  }
 catch (  IOException e) {
    throw new RuntimeException(SymbolFormatter.format(""String_Node_Str"",symbol),e);
  }
}",0.9506398537477148
13244,"public void readUnlock(){
  throw new UnsupportedOperationException();
}","public void readUnlock(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8944099378881988
13245,"@Test public void testInsertNestedObjectLiteral() throws Exception {
  InsertAnalysis analysis=(InsertAnalysis)analyze(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  assertThat(analysis.sourceMaps().size(),is(1));
  Object[] arrayValue=(Object[])analysis.sourceMaps().get(0).get(""String_Node_Str"");
  assertThat(arrayValue.length,is(2));
  assertThat(arrayValue[0],instanceOf(Map.class));
  assertThat((String)((Map<String,Object>)arrayValue[0]).get(""String_Node_Str""),is(""String_Node_Str""));
  assertThat((String)((Map<String,Object>)arrayValue[1]).get(""String_Node_Str""),is(""String_Node_Str""));
  assertThat(Arrays.toString((Object[])((Map<String,Object>)arrayValue[0]).get(""String_Node_Str"")),is(""String_Node_Str""));
  assertThat(Arrays.toString((Object[])((Map<String,Object>)arrayValue[1]).get(""String_Node_Str"")),is(""String_Node_Str""));
}","@Test public void testInsertNestedObjectLiteral() throws Exception {
  InsertFromValuesAnalysis analysis=(InsertFromValuesAnalysis)analyze(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  assertThat(analysis.sourceMaps().size(),is(1));
  Object[] arrayValue=(Object[])analysis.sourceMaps().get(0).get(""String_Node_Str"");
  assertThat(arrayValue.length,is(2));
  assertThat(arrayValue[0],instanceOf(Map.class));
  assertThat((String)((Map<String,Object>)arrayValue[0]).get(""String_Node_Str""),is(""String_Node_Str""));
  assertThat((String)((Map<String,Object>)arrayValue[1]).get(""String_Node_Str""),is(""String_Node_Str""));
  assertThat(Arrays.toString((Object[])((Map<String,Object>)arrayValue[0]).get(""String_Node_Str"")),is(""String_Node_Str""));
  assertThat(Arrays.toString((Object[])((Map<String,Object>)arrayValue[1]).get(""String_Node_Str"")),is(""String_Node_Str""));
}",0.9889746416758544
13246,"@Override public void apply(ImmutableSettings.Builder settingsBuilder,Object[] parameters,Expression expression){
  Preconditions.checkArgument(!(expression instanceof ArrayLiteral),String.format(""String_Node_Str"",NUMBER_OF_REPLICAS));
  Object refreshIntervalValue=ExpressionToObjectVisitor.convert(expression,parameters);
  try {
    Long refreshInterval=ExpressionToNumberVisitor.convert(expression,parameters).longValue();
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + REFRESH_INTERVAL + ""String_Node_Str"",e);
  }
  settingsBuilder.put(REFRESH_INTERVAL,refreshIntervalValue.toString());
}","@Override public void apply(ImmutableSettings.Builder settingsBuilder,Object[] parameters,Expression expression){
  Preconditions.checkArgument(!(expression instanceof ArrayLiteral),String.format(""String_Node_Str"",NUMBER_OF_REPLICAS));
  Object refreshIntervalValue=ExpressionToObjectVisitor.convert(expression,parameters);
  try {
    ExpressionToNumberVisitor.convert(expression,parameters).longValue();
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + REFRESH_INTERVAL + ""String_Node_Str"",e);
  }
  settingsBuilder.put(REFRESH_INTERVAL,refreshIntervalValue.toString());
}",0.9835552075176194
13247,"private Iterator<RoutineInfo> customIterators(){
  try {
    Iterator<RoutineInfo> cAnalyzersIterator;
    Iterator<RoutineInfo> cCharFiltersIterator;
    Iterator<RoutineInfo> cTokenFiltersIterator;
    Iterator<RoutineInfo> cTokenizersIterator;
    cAnalyzersIterator=Iterators.transform(ftResolver.getCustomAnalyzers().entrySet().iterator(),new Function<Map.Entry<String,Settings>,RoutineInfo>(){
      @Nullable @Override public RoutineInfo apply(      @Nullable Map.Entry<String,Settings> input){
        return new RoutineInfo(input.getKey(),RoutineType.ANALYZER.getName());
      }
    }
);
    cCharFiltersIterator=Iterators.transform(ftResolver.getCustomCharFilters().entrySet().iterator(),new Function<Map.Entry<String,Settings>,RoutineInfo>(){
      @Nullable @Override public RoutineInfo apply(      @Nullable Map.Entry<String,Settings> input){
        return new RoutineInfo(input.getKey(),RoutineType.CHAR_FILTER.getName());
      }
    }
);
    cTokenFiltersIterator=Iterators.transform(ftResolver.getCustomTokenFilters().entrySet().iterator(),new Function<Map.Entry<String,Settings>,RoutineInfo>(){
      @Nullable @Override public RoutineInfo apply(      @Nullable Map.Entry<String,Settings> input){
        return new RoutineInfo(input.getKey(),RoutineType.TOKEN_FILTER.getName());
      }
    }
);
    cTokenizersIterator=Iterators.transform(ftResolver.getCustomTokenizers().entrySet().iterator(),new Function<Map.Entry<String,Settings>,RoutineInfo>(){
      @Nullable @Override public RoutineInfo apply(      @Nullable Map.Entry<String,Settings> input){
        return new RoutineInfo(input.getKey(),RoutineType.TOKENIZER.getName());
      }
    }
);
    return Iterators.concat(cAnalyzersIterator,cCharFiltersIterator,cTokenFiltersIterator,cTokenizersIterator);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
}","private Iterator<RoutineInfo> customIterators(){
}",0.0519480519480519
13248,"@Nullable @Override public RoutineInfo apply(@Nullable Map.Entry<String,Settings> input){
  return new RoutineInfo(input.getKey(),RoutineType.TOKENIZER.getName());
}","@Nullable @Override public RoutineInfo apply(@Nullable String input){
  return new RoutineInfo(input,RoutineType.TOKENIZER.getName());
}",0.903654485049834
13249,"public RoutineInfos(Functions functions,FulltextAnalyzerResolver ftResolver){
  this.functions=functions;
  this.ftResolver=ftResolver;
}","public RoutineInfos(FulltextAnalyzerResolver ftResolver){
  this.ftResolver=ftResolver;
}",0.7876106194690266
13250,"@Inject protected InformationSchemaCollectService(Functions functions,ReferenceInfos referenceInfos,FulltextAnalyzerResolver ftResolver){
  routineInfos=new RoutineInfos(functions,ftResolver);
  this.docInputSymbolVisitor=new CollectInputSymbolVisitor<>(functions,InformationDocLevelReferenceResolver.INSTANCE);
  tablesIterable=FluentIterable.from(referenceInfos).transformAndConcat(new Function<SchemaInfo,Iterable<TableInfo>>(){
    @Nullable @Override public Iterable<TableInfo> apply(    @Nullable SchemaInfo input){
      return FluentIterable.from(input).filter(new Predicate<TableInfo>(){
        @Override public boolean apply(        @Nullable TableInfo input){
          return !PartitionName.isPartition(input.ident().name());
        }
      }
);
    }
  }
);
  tablePartitionsIterable=FluentIterable.from(new TablePartitionInfos(tablesIterable));
  columnsIterable=FluentIterable.from(tablesIterable).transformAndConcat(new Function<TableInfo,Iterable<ColumnContext>>(){
    @Nullable @Override public Iterable<ColumnContext> apply(    @Nullable TableInfo input){
      return new ColumnsIterator(input);
    }
  }
);
  tableConstraintsIterable=FluentIterable.from(tablesIterable).filter(new Predicate<TableInfo>(){
    @Override public boolean apply(    @Nullable TableInfo input){
      return input != null && input.primaryKey().size() > 0;
    }
  }
);
  routinesIterable=FluentIterable.from(routineInfos).filter(new Predicate<RoutineInfo>(){
    @Override public boolean apply(    @Nullable RoutineInfo input){
      return input != null;
    }
  }
);
  this.iterables=ImmutableMap.of(""String_Node_Str"",tablesIterable,""String_Node_Str"",columnsIterable,""String_Node_Str"",tableConstraintsIterable,""String_Node_Str"",tablePartitionsIterable,""String_Node_Str"",routinesIterable);
}","@Inject protected InformationSchemaCollectService(Functions functions,ReferenceInfos referenceInfos,FulltextAnalyzerResolver ftResolver){
}",0.1438178996378686
13251,"/** 
 * get bucket number by doing modulo hashcode of first row-element
 */
@Override protected int getBucket(@Nullable Object[] row){
  if (row == null || row.length == 0 || row[0] == null) {
    return 0;
  }
 else {
    return Math.abs(row[0].hashCode()) % this.numBuckets;
  }
}","/** 
 * get bucket number by doing modulo hashcode of first row-element
 */
@Override protected int getBucket(@Nullable Object[] row){
  if (row == null || row.length == 0 || row[0] == null) {
    return 0;
  }
 else {
    int hash=row[0].hashCode();
    if (hash == Integer.MIN_VALUE) {
      hash=0;
    }
    return Math.abs(hash) % numBuckets;
  }
}",0.8220472440944881
13252,"@Override public boolean apply(URI input){
  return Math.abs(input.hashCode()) % numReaders == readerNumber;
}","@Override public boolean apply(URI input){
  int hash=input.hashCode();
  if (hash == Integer.MIN_VALUE) {
    hash=0;
  }
  return Math.abs(hash) % numReaders == readerNumber;
}",0.6805555555555556
13253,"private Predicate<URI> generateUriPredicate(FileInput fileInput){
  Predicate<URI> moduloPredicate;
  boolean sharedStorage=Objects.firstNonNull(shared,fileInput.sharedStorageDefault());
  if (sharedStorage) {
    moduloPredicate=new Predicate<URI>(){
      @Override public boolean apply(      URI input){
        return Math.abs(input.hashCode()) % numReaders == readerNumber;
      }
    }
;
  }
 else {
    moduloPredicate=MATCH_ALL_PREDICATE;
  }
  if (globPredicate != null) {
    return Predicates.and(moduloPredicate,globPredicate);
  }
  return moduloPredicate;
}","private Predicate<URI> generateUriPredicate(FileInput fileInput){
  Predicate<URI> moduloPredicate;
  boolean sharedStorage=Objects.firstNonNull(shared,fileInput.sharedStorageDefault());
  if (sharedStorage) {
    moduloPredicate=new Predicate<URI>(){
      @Override public boolean apply(      URI input){
        int hash=input.hashCode();
        if (hash == Integer.MIN_VALUE) {
          hash=0;
        }
        return Math.abs(hash) % numReaders == readerNumber;
      }
    }
;
  }
 else {
    moduloPredicate=MATCH_ALL_PREDICATE;
  }
  if (globPredicate != null) {
    return Predicates.and(moduloPredicate,globPredicate);
  }
  return moduloPredicate;
}",0.8883495145631068
13254,"@Override public void upstreamFinished(){
  if (remainingUpstreams.decrementAndGet() <= 0) {
    rows=grouper.finish();
  }
}","@Override public void upstreamFinished(){
  if (remainingUpstreams.decrementAndGet() <= 0) {
    grouper.finish();
  }
}",0.979591836734694
13255,"@Override public boolean equals(Object obj){
  return false;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  IndexWriterProjection that=(IndexWriterProjection)o;
  if (!bulkActions.equals(that.bulkActions))   return false;
  if (!clusteredBySymbol.equals(that.clusteredBySymbol))   return false;
  if (!concurrency.equals(that.concurrency))   return false;
  if (!Arrays.equals(excludes,that.excludes))   return false;
  if (!idSymbols.equals(that.idSymbols))   return false;
  if (!Arrays.equals(includes,that.includes))   return false;
  if (!partitionedBySymbols.equals(that.partitionedBySymbols))   return false;
  if (!primaryKeys.equals(that.primaryKeys))   return false;
  if (!rawSourceSymbol.equals(that.rawSourceSymbol))   return false;
  if (!tableName.equals(that.tableName))   return false;
  return true;
}",0.0985761226725082
13256,"private void updateDigest(ByteBuffer bbf){
  if (md == null) {
    try {
      md=MessageDigest.getInstance(""String_Node_Str"");
    }
 catch (    NoSuchAlgorithmException e) {
      e.printStackTrace();
    }
  }
  md.update(bbf.slice());
}","private void updateDigest(ByteBuffer bbf) throws IOException {
  if (md == null) {
    try {
      md=MessageDigest.getInstance(""String_Node_Str"");
    }
 catch (    NoSuchAlgorithmException e) {
      throw new IOException(e);
    }
  }
  md.update(bbf.slice());
}",0.7366336633663366
13257,"@Override public void run(){
  try {
    FileInputStream inputStream=new FileInputStream(pendingFile);
    int bufSize=4096;
    int bytesRead;
    int size;
    int maxFileGrowthWait=5;
    int fileGrowthWaited=0;
    byte[] buffer=new byte[bufSize];
    long remainingBytes=bytesToSend;
    while (remainingBytes > 0) {
      size=(int)Math.min(bufSize,remainingBytes);
      bytesRead=inputStream.read(buffer,0,size);
      if (bytesRead < size) {
        waitUntilFileHasGrown(pendingFile);
        fileGrowthWaited++;
        if (fileGrowthWaited == maxFileGrowthWait) {
          throw new HeadChunkFileTooSmallException(pendingFile.getAbsolutePath());
        }
        if (bytesRead < 1) {
          continue;
        }
      }
      remainingBytes-=bytesRead;
      transportService.submitRequest(recipientNode,BlobHeadRequestHandler.Actions.PUT_BLOB_HEAD_CHUNK,new PutBlobHeadChunkRequest(transferId,new BytesArray(buffer,0,bytesRead)),TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
    }
  }
 catch (  FileNotFoundException ex) {
    logger.error(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    logger.error(""String_Node_Str"",ex);
  }
 finally {
    blobTransferTarget.putHeadChunkTransferFinished(transferId);
  }
}","@Override public void run(){
  try {
    try (FileInputStream inputStream=new FileInputStream(pendingFile)){
      int bufSize=4096;
      int bytesRead;
      int size;
      int maxFileGrowthWait=5;
      int fileGrowthWaited=0;
      byte[] buffer=new byte[bufSize];
      long remainingBytes=bytesToSend;
      while (remainingBytes > 0) {
        size=(int)Math.min(bufSize,remainingBytes);
        bytesRead=inputStream.read(buffer,0,size);
        if (bytesRead < size) {
          waitUntilFileHasGrown(pendingFile);
          fileGrowthWaited++;
          if (fileGrowthWaited == maxFileGrowthWait) {
            throw new HeadChunkFileTooSmallException(pendingFile.getAbsolutePath());
          }
          if (bytesRead < 1) {
            continue;
          }
        }
        remainingBytes-=bytesRead;
        transportService.submitRequest(recipientNode,BlobHeadRequestHandler.Actions.PUT_BLOB_HEAD_CHUNK,new PutBlobHeadChunkRequest(transferId,new BytesArray(buffer,0,bytesRead)),TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
      }
    }
   }
 catch (  FileNotFoundException ex) {
    logger.error(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    logger.error(""String_Node_Str"",ex);
  }
 finally {
    blobTransferTarget.putHeadChunkTransferFinished(transferId);
  }
}",0.9759082217973232
13258,"@Override public void run(){
  try {
    final int BUFFER_SIZE=4 * 4096;
    long fileSize=file.length();
    if (fileSize == 0) {
      logger.warn(""String_Node_Str"",request.shardId().index().name(),request.shardId().id(),file.getName());
    }
    FileInputStream fileStream=new FileInputStream(file);
    String filePath=file.getAbsolutePath();
    String relPath=filePath.substring(baseDir.length(),filePath.length());
    byte[] buf=new byte[BUFFER_SIZE];
    int bytesRead=fileStream.read(buf,0,BUFFER_SIZE);
    long bytesReadTotal=0;
    BytesArray content=new BytesArray(buf,0,bytesRead);
    BlobRecoveryStartTransferRequest startTransferRequest=new BlobRecoveryStartTransferRequest(request.recoveryId(),relPath,content,fileSize);
    if (bytesRead > 0) {
      bytesReadTotal+=bytesRead;
      logger.trace(""String_Node_Str"",request.shardId().index().name(),request.shardId().id(),request.targetNode().getName(),relPath,fileSize);
      transportService.submitRequest(request.targetNode(),BlobRecoveryTarget.Actions.START_TRANSFER,startTransferRequest,TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
      boolean isLast=false;
      boolean sentChunks=false;
      while ((bytesRead=fileStream.read(buf,0,BUFFER_SIZE)) > 0) {
        sentChunks=true;
        bytesReadTotal+=bytesRead;
        if (shard.state() == IndexShardState.CLOSED) {
          throw new IndexShardClosedException(shard.shardId());
        }
        if (bytesReadTotal == fileSize) {
          isLast=true;
        }
        content=new BytesArray(buf,0,bytesRead);
        transportService.submitRequest(request.targetNode(),BlobRecoveryTarget.Actions.TRANSFER_CHUNK,new BlobRecoveryChunkRequest(request.recoveryId(),startTransferRequest.transferId(),content,isLast),TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
      }
      if (!isLast && sentChunks) {
        logger.error(""String_Node_Str"",relPath);
        transportService.submitRequest(request.targetNode(),BlobRecoveryTarget.Actions.TRANSFER_CHUNK,new BlobRecoveryChunkRequest(request.recoveryId(),startTransferRequest.transferId(),BytesArray.EMPTY,true),TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
      }
    }
    logger.trace(""String_Node_Str"",request.shardId().index().name(),request.shardId().id(),file.getName(),request.targetNode().getName());
  }
 catch (  IOException ex) {
    logger.error(""String_Node_Str"",ex);
    lastException.set(ex);
  }
 finally {
    latch.countDown();
  }
}","@Override public void run(){
  try {
    final int BUFFER_SIZE=4 * 4096;
    long fileSize=file.length();
    if (fileSize == 0) {
      logger.warn(""String_Node_Str"",request.shardId().index().name(),request.shardId().id(),file.getName());
    }
    try (FileInputStream fileStream=new FileInputStream(file)){
      String filePath=file.getAbsolutePath();
      String relPath=filePath.substring(baseDir.length(),filePath.length());
      byte[] buf=new byte[BUFFER_SIZE];
      int bytesRead=fileStream.read(buf,0,BUFFER_SIZE);
      long bytesReadTotal=0;
      BytesArray content=new BytesArray(buf,0,bytesRead);
      BlobRecoveryStartTransferRequest startTransferRequest=new BlobRecoveryStartTransferRequest(request.recoveryId(),relPath,content,fileSize);
      if (bytesRead > 0) {
        bytesReadTotal+=bytesRead;
        logger.trace(""String_Node_Str"",request.shardId().index().name(),request.shardId().id(),request.targetNode().getName(),relPath,fileSize);
        transportService.submitRequest(request.targetNode(),BlobRecoveryTarget.Actions.START_TRANSFER,startTransferRequest,TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
        boolean isLast=false;
        boolean sentChunks=false;
        while ((bytesRead=fileStream.read(buf,0,BUFFER_SIZE)) > 0) {
          sentChunks=true;
          bytesReadTotal+=bytesRead;
          if (shard.state() == IndexShardState.CLOSED) {
            throw new IndexShardClosedException(shard.shardId());
          }
          if (bytesReadTotal == fileSize) {
            isLast=true;
          }
          content=new BytesArray(buf,0,bytesRead);
          transportService.submitRequest(request.targetNode(),BlobRecoveryTarget.Actions.TRANSFER_CHUNK,new BlobRecoveryChunkRequest(request.recoveryId(),startTransferRequest.transferId(),content,isLast),TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
        }
        if (!isLast && sentChunks) {
          logger.error(""String_Node_Str"",relPath);
          transportService.submitRequest(request.targetNode(),BlobRecoveryTarget.Actions.TRANSFER_CHUNK,new BlobRecoveryChunkRequest(request.recoveryId(),startTransferRequest.transferId(),BytesArray.EMPTY,true),TransportRequestOptions.options(),EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
        }
      }
      logger.trace(""String_Node_Str"",request.shardId().index().name(),request.shardId().id(),file.getName(),request.targetNode().getName());
    }
   }
 catch (  IOException ex) {
    logger.error(""String_Node_Str"",ex);
    lastException.set(ex);
  }
 finally {
    latch.countDown();
  }
}",0.9483189241114311
13259,"@Override public void handleRequest(final RestRequest request,final RestChannel channel){
  final SQLRequestBuilder requestBuilder=new SQLRequestBuilder(client);
  try {
    if (request.hasContent()) {
      SQLXContentSourceContext context=new SQLXContentSourceContext();
      parser=new SQLXContentSourceParser(context);
      parser.parseSource(request.content());
      requestBuilder.stmt(context.stmt());
      requestBuilder.args(context.args());
    }
 else {
      throw new ElasticsearchException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field(""String_Node_Str"",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error(""String_Node_Str"",e1);
    }
    return;
  }
  requestBuilder.execute(new ActionListener<SQLResponse>(){
    @Override public void onResponse(    SQLResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Exception e) {
        logger.debug(""String_Node_Str"",e);
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new CrateThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error(""String_Node_Str"",e1);
      }
    }
  }
);
}","@Override public void handleRequest(final RestRequest request,final RestChannel channel){
  final SQLRequestBuilder requestBuilder=new SQLRequestBuilder(client);
  try {
    if (request.hasContent()) {
      SQLXContentSourceContext context=new SQLXContentSourceContext();
      SQLXContentSourceParser parser=new SQLXContentSourceParser(context);
      parser.parseSource(request.content());
      requestBuilder.stmt(context.stmt());
      requestBuilder.args(context.args());
    }
 else {
      throw new ElasticsearchException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field(""String_Node_Str"",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error(""String_Node_Str"",e1);
    }
    return;
  }
  requestBuilder.execute(new ActionListener<SQLResponse>(){
    @Override public void onResponse(    SQLResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Exception e) {
        logger.debug(""String_Node_Str"",e);
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new CrateThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error(""String_Node_Str"",e1);
      }
    }
  }
);
}",0.9926062846580408
13260,"@Override public void handleRequest(final RestRequest request,final RestChannel channel){
  final SQLRequestBuilder requestBuilder=new SQLRequestBuilder(client);
  try {
    if (request.hasContent()) {
      SQLXContentSourceContext context=new SQLXContentSourceContext();
      parser=new SQLXContentSourceParser(context);
      parser.parseSource(request.content());
      requestBuilder.stmt(context.stmt());
      requestBuilder.args(context.args());
    }
 else {
      throw new ElasticsearchException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field(""String_Node_Str"",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error(""String_Node_Str"",e1);
    }
    return;
  }
  requestBuilder.execute(new ActionListener<SQLResponse>(){
    @Override public void onResponse(    SQLResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Exception e) {
        logger.debug(""String_Node_Str"",e);
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new CrateThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error(""String_Node_Str"",e1);
      }
    }
  }
);
}","@Override public void handleRequest(final RestRequest request,final RestChannel channel){
  final SQLRequestBuilder requestBuilder=new SQLRequestBuilder(client);
  try {
    if (request.hasContent()) {
      SQLXContentSourceContext context=new SQLXContentSourceContext();
      SQLXContentSourceParser parser=new SQLXContentSourceParser(context);
      parser.parseSource(request.content());
      requestBuilder.stmt(context.stmt());
      requestBuilder.args(context.args());
    }
 else {
      throw new ElasticsearchException(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"",e);
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field(""String_Node_Str"",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error(""String_Node_Str"",e1);
    }
    return;
  }
  requestBuilder.execute(new ActionListener<SQLResponse>(){
    @Override public void onResponse(    SQLResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Exception e) {
        logger.debug(""String_Node_Str"",e);
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new CrateThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error(""String_Node_Str"",e1);
      }
    }
  }
);
}",0.9926062846580408
13261,"@Nullable private String encodeIdent(){
  if (values.size() == 0) {
    return null;
  }
  BytesStreamOutput out=new BytesStreamOutput();
  try {
    out.writeVInt(values.size());
    for (    String value : values) {
      DataType.STRING.streamer().writeTo(out,value == null ? value : new BytesRef(value));
    }
    out.close();
  }
 catch (  IOException e) {
  }
  String identBase32=new Base32(true).encodeAsString(out.bytes().toBytes()).toLowerCase(Locale.ROOT);
  return paddingPattern.matcher(identBase32).replaceAll(""String_Node_Str"");
}","@Nullable private String encodeIdent(){
  if (values.size() == 0) {
    return null;
  }
  BytesStreamOutput out=new BytesStreamOutput();
  try {
    out.writeVInt(values.size());
    for (    String value : values) {
      DataType.STRING.streamer().writeTo(out,value == null ? value : new BytesRef(value));
    }
    out.close();
  }
 catch (  IOException e) {
  }
  String identBase32=BASE32.encodeAsString(out.bytes().toBytes()).toLowerCase(Locale.ROOT);
  return PADDING_PATTERN.matcher(identBase32).replaceAll(""String_Node_Str"");
}",0.9584487534626038
13262,"@Nullable public void decodeIdent(@Nullable String ident) throws IOException {
  if (ident == null) {
    return;
  }
  byte[] inputBytes=new Base32(true).decode(ident.toUpperCase(Locale.ROOT));
  BytesStreamInput in=new BytesStreamInput(inputBytes,true);
  int size=in.readVInt();
  for (int i=0; i < size; i++) {
    BytesRef value=(BytesRef)DataType.STRING.streamer().readFrom(in);
    if (value == null) {
      values.add(null);
    }
 else {
      values.add(value.utf8ToString());
    }
  }
}","@Nullable public void decodeIdent(@Nullable String ident) throws IOException {
  if (ident == null) {
    return;
  }
  byte[] inputBytes=BASE32.decode(ident.toUpperCase(Locale.ROOT));
  BytesStreamInput in=new BytesStreamInput(inputBytes,true);
  int size=in.readVInt();
  for (int i=0; i < size; i++) {
    BytesRef value=(BytesRef)DataType.STRING.streamer().readFrom(in);
    if (value == null) {
      values.add(null);
    }
 else {
      values.add(value.utf8ToString());
    }
  }
}",0.9817813765182186
13263,"public LineCollectorExpression<?> getImplementation(ReferenceInfo info){
  LineCollectorExpression<?> expression=implementations.get(info.ident().columnIdent().name());
  if (expression != null) {
    return expression;
  }
  return new ColumnExtractingLineExpression(info.ident().columnIdent());
}","public LineCollectorExpression<?> getImplementation(ReferenceInfo info){
  ExpressionBuilder builder=expressionBuilder.get(info.ident().columnIdent().name());
  if (builder != null) {
    return builder.create();
  }
  return new ColumnExtractingLineExpression(info.ident().columnIdent());
}",0.767402376910017
13264,"@Before public void initTestData() throws Exception {
}","@Before public void initTestData() throws Exception {
  setup.groupBySetup();
  execute(""String_Node_Str"");
  BlobIndices blobIndices=cluster().getInstance(BlobIndices.class);
  blobIndices.createBlobTable(""String_Node_Str"",new NumberOfReplicas(1),5);
  ensureGreen();
}",0.3384615384615385
13265,"private ListenableFuture<Object[][]> getUpstreamResult(int numRows){
  SettableFuture<Object[][]> upstreamResult=SettableFuture.create();
  Object[][] resultRows=new Object[numRows][];
  for (int i=0; i < numRows; i++) {
    double d=(double)numRows * i;
    MinimumAggregation.MinimumAggState<Double> aggState=minAggFunction.newState();
    aggState.setValue(d);
    resultRows[i]=new Object[]{d % 4,aggState};
  }
  upstreamResult.set(resultRows);
  return upstreamResult;
}","private ListenableFuture<Object[][]> getUpstreamResult(int numRows){
  Object[][] resultRows=new Object[numRows][];
  for (int i=0; i < numRows; i++) {
    double d=(double)numRows * i;
    MinimumAggregation.MinimumAggState<Double> aggState=minAggFunction.newState();
    aggState.setValue(d);
    resultRows[i]=new Object[]{d % 4,aggState};
  }
  return Futures.immediateFuture(resultRows);
}",0.8114942528735632
13266,"@Test public void testLocalMerge() throws Exception {
  TopNProjection topNProjection=new TopNProjection(3,TopN.NO_OFFSET,Arrays.<Symbol>asList(new InputColumn(0),new InputColumn(1)),new boolean[]{true,true});
  topNProjection.outputs(Arrays.<Symbol>asList(new InputColumn(0),new InputColumn(1)));
  MergeNode mergeNode=new MergeNode(""String_Node_Str"",2);
  mergeNode.projections(Arrays.asList(groupProjection,topNProjection));
  List<ListenableFuture<Object[][]>> upstreamResults=new ArrayList<>(1);
  for (int i=1; i < 14; i++) {
    upstreamResults.add(getUpstreamResult(i));
  }
  ThreadPool threadPool=new ThreadPool();
  LocalMergeTask localMergeTask=new LocalMergeTask(threadPool,symbolVisitor,mergeNode);
  localMergeTask.upstreamResult(upstreamResults);
  localMergeTask.start();
  List<ListenableFuture<Object[][]>> localMergeResults=localMergeTask.result();
  assertThat(localMergeResults.size(),is(1));
  Object[][] result=localMergeResults.get(0).get();
  assertThat(result.length,is(3));
  assertThat(result[0].length,is(2));
  assertThat((Double)result[0][0],is(3.0));
  assertThat((Double)result[0][1],is(3.0));
  assertThat((Double)result[1][0],is(2.0));
  assertThat((Double)result[1][1],is(2.0));
  assertThat((Double)result[2][0],is(1.0));
  assertThat((Double)result[2][1],is(5.0));
}","@Test public void testLocalMerge() throws Exception {
  for (int run=0; run < 100; run++) {
    TopNProjection topNProjection=new TopNProjection(3,TopN.NO_OFFSET,Arrays.<Symbol>asList(new InputColumn(0),new InputColumn(1)),new boolean[]{true,true});
    topNProjection.outputs(Arrays.<Symbol>asList(new InputColumn(0),new InputColumn(1)));
    MergeNode mergeNode=new MergeNode(""String_Node_Str"",2);
    mergeNode.projections(Arrays.<Projection>asList(groupProjection,topNProjection));
    List<ListenableFuture<Object[][]>> upstreamResults=new ArrayList<>(1);
    for (int i=1; i < 14; i++) {
      upstreamResults.add(getUpstreamResult(i));
    }
    ThreadPool threadPool=new ThreadPool();
    LocalMergeTask localMergeTask=new LocalMergeTask(threadPool,symbolVisitor,mergeNode);
    localMergeTask.upstreamResult(upstreamResults);
    localMergeTask.start();
    ListenableFuture<List<Object[][]>> allAsList=Futures.allAsList(localMergeTask.result());
    Object[][] result=allAsList.get().get(0);
    assertThat(result.length,is(3));
    assertThat(result[0].length,is(2));
    assertThat((Double)result[0][0],is(3.0));
    assertThat((Double)result[0][1],is(3.0));
    assertThat((Double)result[1][0],is(2.0));
    assertThat((Double)result[1][1],is(2.0));
    assertThat((Double)result[2][0],is(1.0));
    assertThat((Double)result[2][1],is(5.0));
  }
}",0.701688555347092
13267,"public static Reference createReference(String tableName,String columnName,DataType dataType){
  return new Reference(new ReferenceInfo(new ReferenceIdent(new TableIdent(null,tableName),columnName),RowGranularity.DOC,dataType));
}","public static Reference createReference(String tableName,ColumnIdent columnIdent,DataType dataType){
  return new Reference(new ReferenceInfo(new ReferenceIdent(new TableIdent(null,tableName),columnIdent),RowGranularity.DOC,dataType));
}",0.8950749464668094
13268,"private FieldExtractor[] buildExtractors(String[] fields,DataType[] types){
  FieldExtractor[] extractors=new FieldExtractor[fields.length];
  int i=0;
  for (  final String field : fields) {
    if (field.equals(""String_Node_Str"")) {
      extractors[i]=new FieldExtractor(){
        @Override public Object extract(        GetResponse response){
          return response.getVersion();
        }
      }
;
    }
 else     if (field.equals(""String_Node_Str"")) {
      extractors[i]=new FieldExtractor(){
        @Override public Object extract(        GetResponse response){
          return new BytesRef(response.getId());
        }
      }
;
    }
 else {
      extractors[i]=new FieldExtractor(){
        @Override public Object extract(        GetResponse response){
          return response.getField(field).getValue();
        }
      }
;
    }
    i++;
  }
  return extractors;
}","private FieldExtractor[] buildExtractors(String[] fields,DataType[] types){
  FieldExtractor[] extractors=new FieldExtractor[fields.length];
  int i=0;
  for (  final String field : fields) {
    if (field.equals(""String_Node_Str"")) {
      extractors[i]=new FieldExtractor(){
        @Override public Object extract(        GetResponse response){
          return response.getVersion();
        }
      }
;
    }
 else     if (field.equals(""String_Node_Str"")) {
      extractors[i]=new FieldExtractor(){
        @Override public Object extract(        GetResponse response){
          return new BytesRef(response.getId());
        }
      }
;
    }
 else {
      extractors[i]=new FieldExtractor(){
        @Override public Object extract(        GetResponse response){
          GetField getField=response.getField(field);
          if (getField != null) {
            return getField.getValue();
          }
          return null;
        }
      }
;
    }
    i++;
  }
  return extractors;
}",0.9346787041954328
13269,"@Override public boolean iterate(CountAggState state,Input... args){
  state.value++;
  return true;
}","@Override public boolean iterate(CountAggState state,Input... args){
  if (args.length > 0 && args[0].value() != null) {
    state.value++;
  }
  return true;
}",0.7786259541984732
13270,"/** 
 * get bucket number by doing modulo hashcode of first row-element
 */
@Override protected int getBucket(@Nullable Object[] row){
  if (row == null || row.length == 0) {
    return 0;
  }
 else {
    return row[0].hashCode() % this.numBuckets;
  }
}","/** 
 * get bucket number by doing modulo hashcode of first row-element
 */
@Override protected int getBucket(@Nullable Object[] row){
  if (row == null || row.length == 0) {
    return 0;
  }
 else {
    return Math.abs(row[0].hashCode()) % this.numBuckets;
  }
}",0.9806949806949808
13271,"@Test public void testDistributedMergeTask() throws Exception {
  ClusterService clusterService=cluster().getInstance(ClusterService.class);
  Functions functions=cluster().getInstance(Functions.class);
  AggregationFunction countAggregation=(AggregationFunction)functions.get(new FunctionIdent(CountAggregation.NAME,ImmutableList.<DataType>of()));
  TransportMergeNodeAction transportMergeNodeAction=cluster().getInstance(TransportMergeNodeAction.class);
  Set<String> nodes=new HashSet<>();
  for (  DiscoveryNode discoveryNode : clusterService.state().nodes()) {
    nodes.add(discoveryNode.getId());
  }
  MergeNode mergeNode=new MergeNode(""String_Node_Str"",2);
  mergeNode.contextId(UUID.randomUUID());
  mergeNode.executionNodes(nodes);
  mergeNode.inputTypes(Arrays.asList(DataType.NULL,DataType.STRING));
  GroupProjection groupProjection=new GroupProjection();
  groupProjection.keys(Arrays.<Symbol>asList(new InputColumn(1)));
  groupProjection.values(Arrays.asList(new Aggregation(countAggregation.info(),ImmutableList.<Symbol>of(new InputColumn(0)),Aggregation.Step.PARTIAL,Aggregation.Step.FINAL)));
  TopNProjection topNProjection=new TopNProjection(10,0,Arrays.<Symbol>asList(new InputColumn(1)),new boolean[]{false});
  topNProjection.outputs(Arrays.<Symbol>asList(new InputColumn(0),new InputColumn(1)));
  mergeNode.projections(Arrays.asList(groupProjection,topNProjection));
  DataType.Streamer<?>[] mapperOutputStreamer=new DataType.Streamer[]{new AggregationStateStreamer(countAggregation),DataType.STRING.streamer()};
  NoopListener noopListener=new NoopListener();
  DistributedMergeTask task=new DistributedMergeTask(transportMergeNodeAction,mergeNode);
  task.start();
  Iterator<String> iterator=nodes.iterator();
  String firstNode=iterator.next();
  DistributedResultRequest request1=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request1.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=1;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  DistributedResultRequest request2=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request2.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=1;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=3;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=3;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  transportMergeNodeAction.mergeRows(firstNode,request1,noopListener);
  transportMergeNodeAction.mergeRows(firstNode,request2,noopListener);
  DistributedResultRequest request3=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request3.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=10;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=20;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  DistributedResultRequest request4=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request4.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=10;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=14;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  String secondNode=iterator.next();
  transportMergeNodeAction.mergeRows(secondNode,request3,noopListener);
  transportMergeNodeAction.mergeRows(secondNode,request4,noopListener);
  assertThat(task.result().size(),is(2));
  Object[][] rows=task.result().get(0).get();
  assertThat(rows.length,is(2));
  assertThat((BytesRef)rows[0][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[0][1],is(3L));
  assertThat((BytesRef)rows[1][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[1][1],is(5L));
  rows=task.result().get(1).get();
  assertThat(rows.length,is(2));
  assertThat((BytesRef)rows[0][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[0][1],is(14L));
  assertThat((BytesRef)rows[1][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[1][1],is(40L));
}","@Test public void testDistributedMergeTask() throws Exception {
  ClusterService clusterService=cluster().getInstance(ClusterService.class);
  Functions functions=cluster().getInstance(Functions.class);
  AggregationFunction countAggregation=(AggregationFunction)functions.get(new FunctionIdent(CountAggregation.NAME,ImmutableList.<DataType>of()));
  TransportMergeNodeAction transportMergeNodeAction=cluster().getInstance(TransportMergeNodeAction.class);
  Set<String> nodes=new HashSet<>();
  for (  DiscoveryNode discoveryNode : clusterService.state().nodes()) {
    nodes.add(discoveryNode.getId());
  }
  MergeNode mergeNode=new MergeNode(""String_Node_Str"",2);
  mergeNode.contextId(UUID.randomUUID());
  mergeNode.executionNodes(nodes);
  mergeNode.inputTypes(Arrays.asList(DataType.NULL,DataType.STRING));
  GroupProjection groupProjection=new GroupProjection();
  groupProjection.keys(Arrays.<Symbol>asList(new InputColumn(1)));
  groupProjection.values(Arrays.asList(new Aggregation(countAggregation.info(),ImmutableList.<Symbol>of(new InputColumn(0)),Aggregation.Step.PARTIAL,Aggregation.Step.FINAL)));
  TopNProjection topNProjection=new TopNProjection(10,0,Arrays.<Symbol>asList(new InputColumn(1)),new boolean[]{false});
  topNProjection.outputs(Arrays.<Symbol>asList(new InputColumn(0),new InputColumn(1)));
  mergeNode.projections(Arrays.asList(groupProjection,topNProjection));
  mergeNode.outputTypes(Arrays.asList(DataType.STRING,DataType.NULL));
  DataType.Streamer<?>[] mapperOutputStreamer=new DataType.Streamer[]{new AggregationStateStreamer(countAggregation),DataType.STRING.streamer()};
  NoopListener noopListener=new NoopListener();
  DistributedMergeTask task=new DistributedMergeTask(transportMergeNodeAction,mergeNode);
  task.start();
  Iterator<String> iterator=nodes.iterator();
  String firstNode=iterator.next();
  DistributedResultRequest request1=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request1.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=1;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  DistributedResultRequest request2=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request2.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=1;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=3;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=3;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  transportMergeNodeAction.mergeRows(firstNode,request1,noopListener);
  transportMergeNodeAction.mergeRows(firstNode,request2,noopListener);
  DistributedResultRequest request3=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request3.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=10;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=20;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  DistributedResultRequest request4=new DistributedResultRequest(mergeNode.contextId(),mapperOutputStreamer);
  request4.rows(new Object[][]{new Object[]{new CountAggregation.CountAggState(){
{
      value=10;
    }
  }
,new BytesRef(""String_Node_Str"")},new Object[]{new CountAggregation.CountAggState(){
{
      value=14;
    }
  }
,new BytesRef(""String_Node_Str"")}});
  String secondNode=iterator.next();
  transportMergeNodeAction.mergeRows(secondNode,request3,noopListener);
  transportMergeNodeAction.mergeRows(secondNode,request4,noopListener);
  assertThat(task.result().size(),is(2));
  Object[][] rows=task.result().get(0).get();
  assertThat(rows.length,is(2));
  assertThat((BytesRef)rows[0][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[0][1],is(3L));
  assertThat((BytesRef)rows[1][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[1][1],is(5L));
  rows=task.result().get(1).get();
  assertThat(rows.length,is(2));
  assertThat((BytesRef)rows[0][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[0][1],is(14L));
  assertThat((BytesRef)rows[1][0],is(new BytesRef(""String_Node_Str"")));
  assertThat((Long)rows[1][1],is(40L));
}",0.9916401742611562
13272,"protected static String expressionToRegex(String patternString,char escapeChar,boolean shouldEscape){
  StringBuilder regex=new StringBuilder(patternString.length() * 2);
  regex.append('^');
  boolean escaped=false;
  for (  char currentChar : patternString.toCharArray()) {
    if (shouldEscape && !escaped && currentChar == escapeChar) {
      escaped=true;
    }
 else {
switch (currentChar) {
case '%':
        if (escaped) {
          regex.append(""String_Node_Str"");
        }
 else {
          regex.append(""String_Node_Str"");
        }
      escaped=false;
    break;
case '_':
  if (escaped) {
    regex.append(""String_Node_Str"");
  }
 else {
    regex.append('.');
  }
escaped=false;
break;
default :
switch (currentChar) {
case '\\':
case '^':
case '$':
case '.':
case '*':
regex.append('\\');
}
regex.append(currentChar);
escaped=false;
}
}
}
regex.append('$');
return regex.toString();
}","protected static String expressionToRegex(String patternString,char escapeChar,boolean shouldEscape){
  StringBuilder regex=new StringBuilder(patternString.length() * 2);
  regex.append('^');
  boolean escaped=false;
  for (  char currentChar : patternString.toCharArray()) {
    if (shouldEscape && !escaped && currentChar == escapeChar) {
      escaped=true;
    }
 else {
switch (currentChar) {
case '%':
        if (escaped) {
          regex.append(""String_Node_Str"");
        }
 else {
          regex.append(""String_Node_Str"");
        }
      escaped=false;
    break;
case '_':
  if (escaped) {
    regex.append(""String_Node_Str"");
  }
 else {
    regex.append('.');
  }
escaped=false;
break;
default :
switch (currentChar) {
case '\\':
case '^':
case '$':
case '.':
case '*':
case '[':
case ']':
case '(':
case ')':
regex.append('\\');
}
regex.append(currentChar);
escaped=false;
}
}
}
regex.append('$');
return regex.toString();
}",0.97828447339848
13273,"@Override public Symbol normalizeSymbol(Function symbol){
  assert(symbol != null);
  assert(symbol.arguments().size() == 2);
  StringLiteral expression=(StringLiteral)symbol.arguments().get(0);
  StringLiteral pattern=(StringLiteral)symbol.arguments().get(1);
  return new BooleanLiteral(matches(expression,pattern));
}","@Override public Symbol normalizeSymbol(Function symbol){
  assert(symbol != null);
  assert(symbol.arguments().size() == 2);
  if (!symbol.arguments().get(0).symbolType().isLiteral()) {
    return symbol;
  }
  StringLiteral expression=(StringLiteral)symbol.arguments().get(0);
  StringLiteral pattern=(StringLiteral)symbol.arguments().get(1);
  return new BooleanLiteral(matches(expression,pattern));
}",0.8839779005524862
13274,"@Override public void convert(Function function,Context context) throws IOException {
  Preconditions.checkNotNull(function);
  Preconditions.checkArgument(function.arguments().size() == 2);
  Symbol left=function.arguments().get(0);
  Symbol right=function.arguments().get(1);
  Preconditions.checkArgument(left.symbolType() == SymbolType.REFERENCE);
  Preconditions.checkArgument(right.symbolType() == SymbolType.SET_LITERAL);
  String refName=((Reference)left).info().ident().columnIdent().fqn();
  SetLiteral setLiteral=(SetLiteral)right;
  context.builder.startObject(""String_Node_Str"").field(refName);
  context.builder.startArray();
  for (  Object o : setLiteral.value()) {
    context.builder.value(o);
  }
  context.builder.endArray().endObject();
}","@Override public void convert(Function function,Context context) throws IOException {
  assert(function != null);
  assert(function.arguments().size() == 2);
  Symbol left=function.arguments().get(0);
  Symbol right=function.arguments().get(1);
  String refName=((Reference)left).info().ident().columnIdent().fqn();
  SetLiteral setLiteral=(SetLiteral)right;
  boolean convertBytesRef=false;
  if (setLiteral.valueType() == DataType.STRING_SET) {
    convertBytesRef=true;
  }
  context.builder.startObject(""String_Node_Str"").field(refName);
  context.builder.startArray();
  for (  Object o : setLiteral.value()) {
    if (convertBytesRef) {
      context.builder.value(((BytesRef)o).utf8ToString());
    }
 else {
      context.builder.value(o);
    }
  }
  context.builder.endArray().endObject();
}",0.3948717948717948
13275,"@Override protected Symbol visitFunctionCall(FunctionCall node,Analysis context){
  List<Symbol> arguments=new ArrayList<>(node.getArguments().size());
  List<DataType> argumentTypes=new ArrayList<>(node.getArguments().size());
  for (  Expression expression : node.getArguments()) {
    ValueSymbol vs=(ValueSymbol)expression.accept(this,context);
    arguments.add(vs);
    argumentTypes.add(vs.valueType());
  }
  FunctionInfo functionInfo=null;
  if (node.isDistinct()) {
    if (argumentTypes.size() > 1) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    FunctionIdent innerIdent=new FunctionIdent(CollectSetAggregation.NAME,argumentTypes);
    FunctionInfo innerInfo=context.getFunctionInfo(innerIdent);
    Function innerFunction=new Function(innerInfo,arguments);
    String nodeName=""String_Node_Str"" + node.getName().toString();
    List<Symbol> outerArguments=new ArrayList<>();
    List<DataType> outerArgumentTypes=new ArrayList<>();
    outerArguments.add(innerFunction);
    outerArgumentTypes.add(DataType.SET_TYPES.get(argumentTypes.get(0).ordinal()));
    FunctionIdent ident=new FunctionIdent(nodeName,outerArgumentTypes);
    functionInfo=context.getFunctionInfo(ident);
    arguments=outerArguments;
  }
 else {
    FunctionIdent ident=new FunctionIdent(node.getName().toString(),argumentTypes);
    functionInfo=context.getFunctionInfo(ident);
  }
  return context.allocateFunction(functionInfo,arguments);
}","@Override protected Symbol visitFunctionCall(FunctionCall node,Analysis context){
  List<Symbol> arguments=new ArrayList<>(node.getArguments().size());
  List<DataType> argumentTypes=new ArrayList<>(node.getArguments().size());
  for (  Expression expression : node.getArguments()) {
    ValueSymbol vs=(ValueSymbol)expression.accept(this,context);
    arguments.add(vs);
    argumentTypes.add(vs.valueType());
  }
  FunctionInfo functionInfo=null;
  if (node.isDistinct()) {
    if (argumentTypes.size() > 1) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    FunctionIdent innerIdent=new FunctionIdent(CollectSetAggregation.NAME,argumentTypes);
    FunctionInfo innerInfo=context.getFunctionInfo(innerIdent);
    Function innerFunction=context.allocateFunction(innerInfo,arguments);
    String nodeName=""String_Node_Str"" + node.getName().toString();
    ImmutableList<Symbol> outerArguments=ImmutableList.<Symbol>of(innerFunction);
    ImmutableList<DataType> outerArgumentTypes=ImmutableList.of(DataType.SET_TYPES.get(argumentTypes.get(0).ordinal()));
    FunctionIdent ident=new FunctionIdent(nodeName,outerArgumentTypes);
    functionInfo=context.getFunctionInfo(ident);
    arguments=outerArguments;
  }
 else {
    FunctionIdent ident=new FunctionIdent(node.getName().toString(),argumentTypes);
    functionInfo=context.getFunctionInfo(ident);
  }
  return context.allocateFunction(functionInfo,arguments);
}",0.9358620689655172
13276,"private Function getFunctionByName(String functionName,Collection c){
  Function function=null;
  Iterator<Function> it=c.iterator();
  while (function == null && it.hasNext()) {
    Function f=it.next();
    if (f.info().ident().name().equals(functionName)) {
      function=f;
    }
  }
  return function;
}","private static Function getFunctionByName(String functionName,Collection c){
  Function function=null;
  Iterator<Function> it=c.iterator();
  while (function == null && it.hasNext()) {
    Function f=it.next();
    if (f.info().ident().name().equals(functionName)) {
      function=f;
    }
  }
  return function;
}",0.9888
13277,"@Test public void testAggregationDistinct(){
  Statement statement=SqlParser.createStatement(""String_Node_Str"");
  Analysis analysis=analyzer.analyze(statement);
  assertFalse(analysis.hasAggregates());
  Function collectionCount=getFunctionByName(CollectionCountFunction.NAME,analysis.functions());
  assertNotNull(collectionCount);
  List<Symbol> args=collectionCount.arguments();
  assertEquals(1,args.size());
  Function innerFunction=(Function)args.get(0);
  assertTrue(innerFunction.info().isAggregate());
  assertEquals(innerFunction.info().ident().name(),CollectSetAggregation.NAME);
  List<Symbol> innerArguments=innerFunction.arguments();
  assertThat(innerArguments.get(0),IsInstanceOf.instanceOf(StringLiteral.class));
  assertThat(((StringLiteral)innerArguments.get(0)).value(),is(""String_Node_Str""));
}","@Test public void testAggregationDistinct(){
  Analysis analysis=analyze(""String_Node_Str"");
  assertTrue(analysis.hasAggregates());
  assertEquals(2,analysis.functions().size());
  Function collectionCount=getFunctionByName(CollectionCountFunction.NAME,analysis.functions());
  Function collectSet=getFunctionByName(CollectSetAggregation.NAME,analysis.functions());
  assertNotNull(collectionCount);
  assertNotNull(collectSet);
  List<Symbol> args=collectionCount.arguments();
  assertEquals(1,args.size());
  Function innerFunction=(Function)args.get(0);
  assertTrue(innerFunction.info().isAggregate());
  assertEquals(innerFunction.info().ident().name(),CollectSetAggregation.NAME);
  List<Symbol> innerArguments=innerFunction.arguments();
  assertThat(innerArguments.get(0),IsInstanceOf.instanceOf(Reference.class));
  assertThat(((Reference)innerArguments.get(0)).info(),IsInstanceOf.instanceOf(ReferenceInfo.class));
  ReferenceInfo refInfo=((Reference)innerArguments.get(0)).info();
  assertThat(refInfo.ident().columnIdent().name(),is(""String_Node_Str""));
  assertThat(refInfo.ident().columnIdent().path().get(0),is(""String_Node_Str""));
  assertSame(collectSet,innerFunction);
}",0.6666666666666666
13278,"/** 
 * collect data on shard or doc level collects data from each shard in a separate thread, collecting the data into a single state through an   {@link java.util.concurrent.ArrayBlockingQueue}.
 * @param collectNode {@link io.crate.planner.node.CollectNode} containing routing information and symbols to collect
 * @return the collect results from all shards on this node that were given in {@link io.crate.planner.plan.CollectNode#routing}
 */
protected ListenableFuture<Object[][]> handleShardCollect(CollectNode collectNode){
  Function whereClause=collectNode.whereClause();
  if (whereClause != null && NormalizationHelper.evaluatesToFalse(whereClause,this.normalizer)) {
    SettableFuture<Object[][]> result=SettableFuture.create();
    result.set(Constants.EMPTY_RESULT);
    return result;
  }
  String localNodeId=clusterService.localNode().id();
  final int numShards=collectNode.routing().numShards(localNodeId);
  List<CrateCollector> shardCollectors=new ArrayList<>(numShards);
  List<Projector> projectors=extractProjectors(collectNode);
  final ShardCollectFuture result=getShardCollectFuture(numShards,projectors,collectNode);
  Map<String,Set<Integer>> shardIdMap=collectNode.routing().locations().get(localNodeId);
  for (  Map.Entry<String,Set<Integer>> entry : shardIdMap.entrySet()) {
    IndexService indexService;
    try {
      indexService=indicesService.indexServiceSafe(entry.getKey());
    }
 catch (    IndexMissingException e) {
      throw new TableUnknownException(entry.getKey(),e);
    }
    for (    Integer shardId : entry.getValue()) {
      Injector shardInjector;
      try {
        shardInjector=indexService.shardInjectorSafe(shardId);
        ShardCollectService shardCollectService=shardInjector.getInstance(ShardCollectService.class);
        CrateCollector crateCollector=shardCollectService.getCollector(collectNode,projectors.get(0));
        shardCollectors.add(crateCollector);
      }
 catch (      IndexShardMissingException e) {
        throw new CrateException(String.format(""String_Node_Str"",shardId,entry.getKey()));
      }
catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
        throw new CrateException(e);
      }
    }
  }
  for (  final CrateCollector shardCollector : shardCollectors) {
    threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
      @Override public void run(){
        shardCollector.doCollect();
        result.shardFinished();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",result.numShards());
        }
      }
    }
);
  }
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",numShards);
  }
  return result;
}","/** 
 * collect data on shard or doc level collects data from each shard in a separate thread, collecting the data into a single state through an   {@link java.util.concurrent.ArrayBlockingQueue}.
 * @param collectNode {@link io.crate.planner.node.CollectNode} containing routing information and symbols to collect
 * @return the collect results from all shards on this node that were given in {@link io.crate.planner.plan.CollectNode#routing}
 */
protected ListenableFuture<Object[][]> handleShardCollect(CollectNode collectNode){
  String localNodeId=clusterService.localNode().id();
  final int numShards=collectNode.routing().numShards(localNodeId);
  List<CrateCollector> shardCollectors=new ArrayList<>(numShards);
  List<Projector> projectors=extractProjectors(collectNode);
  final ShardCollectFuture result=getShardCollectFuture(numShards,projectors,collectNode);
  Function whereClause=collectNode.whereClause();
  if (whereClause != null && NormalizationHelper.evaluatesToFalse(whereClause,this.normalizer)) {
    result.onAllShardsFinished();
    return result;
  }
  Map<String,Set<Integer>> shardIdMap=collectNode.routing().locations().get(localNodeId);
  for (  Map.Entry<String,Set<Integer>> entry : shardIdMap.entrySet()) {
    IndexService indexService;
    try {
      indexService=indicesService.indexServiceSafe(entry.getKey());
    }
 catch (    IndexMissingException e) {
      throw new TableUnknownException(entry.getKey(),e);
    }
    for (    Integer shardId : entry.getValue()) {
      Injector shardInjector;
      try {
        shardInjector=indexService.shardInjectorSafe(shardId);
        ShardCollectService shardCollectService=shardInjector.getInstance(ShardCollectService.class);
        CrateCollector crateCollector=shardCollectService.getCollector(collectNode,projectors.get(0));
        shardCollectors.add(crateCollector);
      }
 catch (      IndexShardMissingException e) {
        throw new CrateException(String.format(""String_Node_Str"",shardId,entry.getKey()));
      }
catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
        throw new CrateException(e);
      }
    }
  }
  for (  final CrateCollector shardCollector : shardCollectors) {
    threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
      @Override public void run(){
        shardCollector.doCollect();
        result.shardFinished();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"",result.numShards());
        }
      }
    }
);
  }
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",numShards);
  }
  return result;
}",0.8449218013943848
13279,"@Before public void prepare(){
  Injector injector=new ModulesBuilder().add(new TestModule()).createInjector();
  Injector shard0Injector=injector.createChildInjector(new TestShardModule(0));
  Injector shard1Injector=injector.createChildInjector(new TestShardModule(1));
  when(indexService.shardInjectorSafe(0)).thenReturn(shard0Injector);
  when(indexService.shardInjectorSafe(1)).thenReturn(shard1Injector);
  when(indexService.shardSafe(0)).thenReturn(shard0Injector.getInstance(IndexShard.class));
  when(indexService.shardSafe(1)).thenReturn(shard1Injector.getInstance(IndexShard.class));
  operation=injector.getInstance(DistributingCollectOperation.class);
}","@Before public void prepare(){
  Injector injector=new ModulesBuilder().add(new OperatorModule()).add(new TestModule()).createInjector();
  Injector shard0Injector=injector.createChildInjector(new TestShardModule(0));
  Injector shard1Injector=injector.createChildInjector(new TestShardModule(1));
  when(indexService.shardInjectorSafe(0)).thenReturn(shard0Injector);
  when(indexService.shardInjectorSafe(1)).thenReturn(shard1Injector);
  when(indexService.shardSafe(0)).thenReturn(shard0Injector.getInstance(IndexShard.class));
  when(indexService.shardSafe(1)).thenReturn(shard1Injector.getInstance(IndexShard.class));
  operation=injector.getInstance(DistributingCollectOperation.class);
}",0.9808823529411764
13280,"@Override public void writeTo(StreamOutput out) throws IOException {
  super.writeTo(out);
  out.writeLong(contextId.getMostSignificantBits());
  out.writeLong(contextId.getLeastSignificantBits());
  out.writeBoolean(failed);
  if (!failed) {
    groupByResult.writeTo(out);
  }
}","@Override public void writeTo(StreamOutput out) throws IOException {
  super.writeTo(out);
  try {
    out.writeLong(contextId.getMostSignificantBits());
    out.writeLong(contextId.getLeastSignificantBits());
    out.writeBoolean(failed);
    if (!failed) {
      groupByResult.writeTo(out);
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    throw e;
  }
}",0.8459214501510574
13281,"@Override public void readFrom(StreamInput in) throws IOException {
  super.readFrom(in);
  try {
    contextId=new UUID(in.readLong(),in.readLong());
    status=jobStatusContext.get(contextId);
    failed=in.readBoolean();
    if (!failed) {
      if (status == null) {
        Streams.copy(in,memoryOutputStream);
      }
 else {
        groupByResult=SQLGroupByResult.readSQLGroupByResult(status.parsedStatement,cacheRecycler,in);
      }
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    throw new IOException(e);
  }
}","@Override public void readFrom(StreamInput in) throws IOException {
  super.readFrom(in);
  try {
    contextId=new UUID(in.readLong(),in.readLong());
    status=jobStatusContext.get(contextId);
    failed=in.readBoolean();
    if (!failed) {
      if (status == null) {
        Streams.copy(in,memoryOutputStream);
      }
 else {
        groupByResult=SQLGroupByResult.readSQLGroupByResult(status.parsedStatement,cacheRecycler,in);
      }
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    throw e;
  }
}",0.9823911028730306
13282,"public synchronized void merge(SQLGroupByResult groupByResult){
  if (reducedRows == null) {
    reducedRows=groupByResult.rows();
  }
 else {
    reducedRows.merge(groupByResult.rows());
  }
  countDown();
}","public void merge(SQLGroupByResult groupByResult){
synchronized (lock) {
    if (reducedRows == null) {
      reducedRows=groupByResult.rows();
    }
 else {
      reducedRows.merge(groupByResult.rows());
    }
  }
  countDown();
}",0.8428246013667426
13283,"public void push(final SQLMapperResultRequest request) throws IOException {
  if (request.groupByResult != null) {
    request.status.merge(request.groupByResult);
    return;
  }
synchronized (lock) {
    SQLReduceJobStatus status=reduceJobs.get(request.contextId);
    if (status == null) {
      List<BytesReference> bytesStreamOutputs=unreadStreams.get(request.contextId);
      if (bytesStreamOutputs == null) {
        bytesStreamOutputs=new ArrayList<>();
        unreadStreams.put(request.contextId,bytesStreamOutputs);
      }
      bytesStreamOutputs.add(request.memoryOutputStream.bytes());
    }
 else {
      mergeFromBytesReference(request.memoryOutputStream.bytes(),status);
    }
  }
}","public void push(final SQLMapperResultRequest request) throws IOException {
  if (request.groupByResult != null) {
    request.status.merge(request.groupByResult);
    return;
  }
synchronized (lock) {
    SQLReduceJobStatus status=reduceJobs.get(request.contextId);
    if (request.failed) {
      status.countDown();
      return;
    }
    if (status == null) {
      List<BytesReference> bytesStreamOutputs=unreadStreams.get(request.contextId);
      if (bytesStreamOutputs == null) {
        bytesStreamOutputs=new ArrayList<>();
        unreadStreams.put(request.contextId,bytesStreamOutputs);
      }
      bytesStreamOutputs.add(request.memoryOutputStream.bytes());
    }
 else {
      mergeFromBytesReference(request.memoryOutputStream.bytes(),status);
    }
  }
}",0.9511533242876526
13284,"private void countDown(){
  if (reduceJobStatusContext != null) {
    if (shardsToProcess.decrementAndGet() == 0) {
      reduceJobStatusContext.remove(contextId);
      set(new SQLReduceJobResponse(terminate(),parsedStatement));
    }
  }
}","/** 
 * countdown the number of shards to process. called implicitly from   {@link #merge(SQLGroupByResult)}
 */
public void countDown(){
  if (reduceJobStatusContext != null) {
    if (shardsToProcess.decrementAndGet() == 0) {
      reduceJobStatusContext.remove(contextId);
      set(new SQLReduceJobResponse(terminate(),parsedStatement));
    }
  }
}",0.7878787878787878
13285,"@Override public BytesRef evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  values.nextValue();
  return values.copyShared();
}","@Override public BytesRef evaluate() throws CrateException {
switch (values.setDocument(docId)) {
case 0:
    return null;
case 1:
  values.nextValue();
return values.copyShared();
default :
throw new GroupByOnArrayUnsupportedException(columnName());
}
}",0.2167487684729064
13286,public abstract ReturnType evaluate();,public abstract ReturnType evaluate() throws CrateException ;,0.7676767676767676
13287,"@Override public Double evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return values.nextValue();
}","@Override public Double evaluate(){
switch (values.setDocument(docId)) {
case 0:
    return null;
case 1:
  return values.nextValue();
default :
throw new GroupByOnArrayUnsupportedException(columnName());
}
}",0.2626865671641791
13288,"@Override public Float evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return ((Double)values.nextValue()).floatValue();
}","@Override public Float evaluate(){
switch (values.setDocument(docId)) {
case 0:
    return null;
case 1:
  return ((Double)values.nextValue()).floatValue();
default :
throw new GroupByOnArrayUnsupportedException(columnName());
}
}",0.7176781002638523
13289,"@Override public Integer evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return ((Long)values.nextValue()).intValue();
}","@Override public Integer evaluate(){
switch (values.setDocument(docId)) {
case 0:
    return null;
case 1:
  return ((Long)values.nextValue()).intValue();
default :
throw new GroupByOnArrayUnsupportedException(columnName());
}
}",0.24
13290,"@Override public Long evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return values.nextValue();
}","@Override public Long evaluate(){
switch (values.setDocument(docId)) {
case 0:
    return null;
case 1:
  return values.nextValue();
default :
throw new GroupByOnArrayUnsupportedException(columnName());
}
}",0.2537764350453172
13291,"@Override public Short evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return ((Long)values.nextValue()).shortValue();
}","@Override public Short evaluate(){
switch (values.setDocument(docId)) {
case 0:
    return null;
case 1:
  return ((Long)values.nextValue()).shortValue();
default :
throw new GroupByOnArrayUnsupportedException(columnName());
}
}",0.2293333333333333
13292,"@SuppressWarnings(""String_Node_Str"") public GroupByRow getRow(){
  ObjectObjectMap m=null;
  Object[] key=new Object[depth];
  for (int i=0; i < depth; i++) {
    boolean last=(i == depth - 1);
    key[i]=expressions.get(i).evaluate();
    if (i == 0) {
      m=maps[getRouting(key[0])];
    }
    Object value=m.get(key[i]);
    if (value == null) {
      if (last) {
        GroupByRow row=GroupByRow.createEmptyRow(new GroupByKey(Arrays.copyOf(key,key.length)),stmt);
        m.put(key[i],row);
        return row;
      }
 else {
        ObjectObjectMap subMap=mapFactories[i].create();
        m.put(key[i],subMap);
        m=subMap;
      }
    }
 else {
      if (last) {
        return (GroupByRow)value;
      }
 else {
        m=(ObjectObjectMap)value;
      }
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public GroupByRow getRow() throws CrateException {
  ObjectObjectMap m=null;
  Object[] key=new Object[depth];
  for (int i=0; i < depth; i++) {
    boolean last=(i == depth - 1);
    key[i]=expressions.get(i).evaluate();
    if (i == 0) {
      m=maps[getRouting(key[0])];
    }
    Object value=m.get(key[i]);
    if (value == null) {
      if (last) {
        GroupByRow row=GroupByRow.createEmptyRow(new GroupByKey(Arrays.copyOf(key,key.length)),stmt);
        m.put(key[i],row);
        return row;
      }
 else {
        ObjectObjectMap subMap=mapFactories[i].create();
        m.put(key[i],subMap);
        m=subMap;
      }
    }
 else {
      if (last) {
        return (GroupByRow)value;
      }
 else {
        m=(ObjectObjectMap)value;
      }
    }
  }
  return null;
}",0.9857761286332716
13293,"public ReduceJobStatusContext(){
}","public ReduceJobStatusContext(CacheRecycler cacheRecycler){
  this.cacheRecycler=cacheRecycler;
}",0.5190839694656488
13294,"private void mergeFromBytesReference(BytesReference bytesReference,SQLReduceJobStatus status) throws IOException {
  SQLGroupByResult sqlGroupByResult=SQLGroupByResult.readSQLGroupByResult(status.parsedStatement.aggregateExpressions,status.seenIdxMapper,new HandlesStreamInput(new BytesStreamInput(bytesReference)));
  status.merge(sqlGroupByResult);
}","private void mergeFromBytesReference(BytesReference bytesReference,SQLReduceJobStatus status) throws IOException {
  SQLGroupByResult sqlGroupByResult=SQLGroupByResult.readSQLGroupByResult(status.parsedStatement,cacheRecycler,new HandlesStreamInput(new BytesStreamInput(bytesReference)));
  status.merge(sqlGroupByResult);
}",0.9260355029585798
13295,"public SQLMapperResultRequest(ReduceJobStatusContext jobStatusContext,CacheRecycler cacheRecycler){
  this.jobStatusContext=jobStatusContext;
  this.cacheRecycler=cacheRecycler;
}","public SQLMapperResultRequest(ReduceJobStatusContext jobStatusContext){
  this.jobStatusContext=jobStatusContext;
  cacheRecycler=jobStatusContext.cacheRecycler();
}",0.7848837209302325
13296,"private void countDown(){
  if (reduceJobStatusContext != null) {
    if (shardsToProcess.decrementAndGet() == 0) {
      reduceJobStatusContext.remove(contextId);
      set(new SQLReduceJobResponse(trimRows(reducedResult.values())));
    }
  }
}","private void countDown(){
  if (reduceJobStatusContext != null) {
    if (shardsToProcess.decrementAndGet() == 0) {
      reduceJobStatusContext.remove(contextId);
      set(new SQLReduceJobResponse(terminate(),parsedStatement));
    }
  }
}",0.8829568788501027
13297,"/** 
 * Collect stats from unassigned/empty shards. On groupBy all existing results are merged together with the unassigned shards results, so it is very important, that this method is called AFTER all partial reducers finished.
 * @param clusterState
 * @param concreteIndices
 * @throws Exception
 */
private void collectUnassignedShardStats(ClusterState clusterState,String[] concreteIndices) throws Exception {
  final GroupShardsIterator shardsItsAll=clusterState.routingTable().allAssignedShardsGrouped(concreteIndices,true);
  String dummyReducer=""String_Node_Str"";
  CrateException exception=null;
  SQLReduceJobStatus reduceJobStatus=null;
  List<List<Object>> collectResults=null;
  if (parsedStatement.hasGroupBy()) {
    reduceJobStatus=new SQLReduceJobStatus(parsedStatement,threadPool,ConcurrentCollections.<GroupByKey,GroupByRow>newConcurrentMap());
  }
 else {
    collectResults=new ArrayList<>(shardsItsAll.size() - shardsIts.size());
  }
  String lastIndex=null;
  for (  final ShardIterator shardIt : shardsItsAll) {
    final ShardRouting shard=shardIt.firstOrNull();
    if (shard == null) {
      try {
        if (parsedStatement.hasGroupBy() || parsedStatement.isGlobalAggregate()) {
          Map<String,Map<GroupByKey,GroupByRow>> shardGroupByCollectResults=statsService.queryGroupBy(parsedStatement.virtualTableName(),new String[]{dummyReducer},lastIndex,parsedStatement,shardIt.shardId().id(),null);
          reduceJobStatus.merge(new SQLGroupByResult(shardGroupByCollectResults.get(dummyReducer).values()));
        }
 else {
          List<List<Object>> shardCollectResults=statsService.query(parsedStatement.virtualTableName(),lastIndex,parsedStatement,shardIt.shardId().id(),null);
          if (shardCollectResults != null) {
            collectResults.addAll(shardCollectResults);
          }
        }
      }
 catch (      CrateException e) {
        exception=e;
      }
catch (      Exception e) {
        exception=new CrateException(e);
      }
      if (exception != null) {
        throw exception;
      }
    }
 else {
      lastIndex=shard.index();
    }
  }
  if (!parsedStatement.hasGroupBy()) {
    onMapperResults(collectResults);
  }
 else {
synchronized (groupByResult) {
      reduceJobStatus.merge(new SQLGroupByResult(groupByResult));
      groupByResult.clear();
      groupByResult.addAll(reduceJobStatus.trimRows(reduceJobStatus.reducedResult.values()));
    }
  }
}","/** 
 * Collect stats from unassigned/empty shards. On groupBy all existing results are merged together with the unassigned shards results, so it is very important, that this method is called AFTER all partial reducers finished.
 * @param clusterState
 * @param concreteIndices
 * @throws Exception
 */
private void collectUnassignedShardStats(ClusterState clusterState,String[] concreteIndices) throws Exception {
  final GroupShardsIterator shardsItsAll=clusterState.routingTable().allAssignedShardsGrouped(concreteIndices,true);
  String dummyReducer=""String_Node_Str"";
  CrateException exception=null;
  SQLReduceJobStatus reduceJobStatus=null;
  List<List<Object>> collectResults=null;
  if (parsedStatement.hasGroupBy()) {
    reduceJobStatus=new SQLReduceJobStatus(parsedStatement,threadPool);
  }
 else {
    collectResults=new ArrayList<>(shardsItsAll.size() - shardsIts.size());
  }
  String lastIndex=null;
  for (  final ShardIterator shardIt : shardsItsAll) {
    final ShardRouting shard=shardIt.firstOrNull();
    if (shard == null) {
      try {
        if (parsedStatement.hasGroupBy() || parsedStatement.isGlobalAggregate()) {
          Rows shardGroupByCollectResults=statsService.queryGroupBy(parsedStatement.virtualTableName(),1,lastIndex,parsedStatement,shardIt.shardId().id(),null);
          reduceJobStatus.merge(new SQLGroupByResult(0,shardGroupByCollectResults));
        }
 else {
          List<List<Object>> shardCollectResults=statsService.query(parsedStatement.virtualTableName(),lastIndex,parsedStatement,shardIt.shardId().id(),null);
          if (shardCollectResults != null) {
            collectResults.addAll(shardCollectResults);
          }
        }
      }
 catch (      CrateException e) {
        exception=e;
      }
catch (      Exception e) {
        exception=new CrateException(e);
      }
      if (exception != null) {
        throw exception;
      }
    }
 else {
      lastIndex=shard.index();
    }
  }
  if (!parsedStatement.hasGroupBy()) {
    onMapperResults(collectResults);
  }
 else {
  }
}",0.6733690795352993
13298,"public ListenableActionFuture<SQLReduceJobResponse> reduceOperationStart(SQLReduceJobRequest request){
  ParsedStatement parsedStatement=sqlParseService.parse(request.request.stmt(),request.request.args());
  SQLReduceJobStatus reduceJobStatus=new SQLReduceJobStatus(parsedStatement,threadPool,resultRecycler.obtain(-1).v(),request.expectedShardResults,request.contextId,reduceJobStatusContext);
  final WeakReference<SQLReduceJobStatus> weakStatus=new WeakReference<>(reduceJobStatus);
  scheduledExecutorService.schedule(new Runnable(){
    @Override public void run(){
      SQLReduceJobStatus status=weakStatus.get();
      if (status != null) {
        status.timeout();
      }
    }
  }
,Constants.GROUP_BY_TIMEOUT,TimeUnit.SECONDS);
  try {
    reduceJobStatusContext.put(request.contextId,reduceJobStatus);
  }
 catch (  IOException e) {
    logger.error(e.getMessage(),e);
  }
  return reduceJobStatus;
}","public ListenableActionFuture<SQLReduceJobResponse> reduceOperationStart(SQLReduceJobRequest request){
  ParsedStatement parsedStatement=sqlParseService.parse(request.request.stmt(),request.request.args());
  SQLReduceJobStatus reduceJobStatus=new SQLReduceJobStatus(parsedStatement,threadPool,request.expectedShardResults,request.contextId,reduceJobStatusContext);
  final WeakReference<SQLReduceJobStatus> weakStatus=new WeakReference<>(reduceJobStatus);
  scheduledExecutorService.schedule(new Runnable(){
    @Override public void run(){
      SQLReduceJobStatus status=weakStatus.get();
      if (status != null) {
        status.timeout();
      }
    }
  }
,Constants.GROUP_BY_TIMEOUT,TimeUnit.SECONDS);
  try {
    reduceJobStatusContext.put(request.contextId,reduceJobStatus);
  }
 catch (  IOException e) {
    logger.error(e.getMessage(),e);
  }
  return reduceJobStatus;
}",0.9833147942157954
13299,"@Inject public TransportSQLReduceHandler(TransportService transportService,ClusterService clusterService,SQLParseService sqlParseService,CacheRecycler cacheRecycler,ThreadPool threadPool){
  this.cacheRecycler=cacheRecycler;
  this.sqlParseService=sqlParseService;
  this.clusterService=clusterService;
  this.transportService=transportService;
  this.threadPool=threadPool;
  this.reduceJobStatusContext=new ReduceJobStatusContext();
  this.scheduledExecutorService=new ScheduledThreadPoolExecutor(2);
  this.resultRecycler=new SoftThreadLocalRecycler<>(new Recycler.C<ConcurrentMap<GroupByKey,GroupByRow>>(){
    @Override public ConcurrentMap<GroupByKey,GroupByRow> newInstance(    int sizing){
      return ConcurrentCollections.newConcurrentMap();
    }
    @Override public void clear(    ConcurrentMap<GroupByKey,GroupByRow> value){
      value.clear();
    }
  }
,10);
}","@Inject public TransportSQLReduceHandler(TransportService transportService,ClusterService clusterService,SQLParseService sqlParseService,CacheRecycler cacheRecycler,ThreadPool threadPool){
  this.cacheRecycler=cacheRecycler;
  this.sqlParseService=sqlParseService;
  this.clusterService=clusterService;
  this.transportService=transportService;
  this.threadPool=threadPool;
  this.reduceJobStatusContext=new ReduceJobStatusContext(cacheRecycler);
  this.scheduledExecutorService=new ScheduledThreadPoolExecutor(2);
}",0.7225806451612903
13300,"@Override public SQLMapperResultRequest newInstance(){
  return new SQLMapperResultRequest(reduceJobStatusContext,cacheRecycler);
}","@Override public SQLMapperResultRequest newInstance(){
  return new SQLMapperResultRequest(reduceJobStatusContext);
}",0.9435483870967742
13301,"@Override public void setNextReader(AtomicReaderContext context){
  super.setNextReader(context);
  values=indexFieldData.load(context).getBytesValues();
}","@Override public void setNextReader(AtomicReaderContext context){
  super.setNextReader(context);
  values=indexFieldData.load(context).getBytesValues(true);
}",0.9872611464968152
13302,"@Override public BytesRef evaluate(){
  BytesRef v=values.getValue(docId);
  if (v != null) {
    return values.makeSafe(v);
  }
  return null;
}","@Override public BytesRef evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  values.nextValue();
  return values.copyShared();
}",0.5589225589225589
13303,"@Override public void setNextReader(AtomicReaderContext context){
  super.setNextReader(context);
  values=((IndexNumericFieldData)indexFieldData).load(context).getDoubleValues();
}","@Override public void setNextReader(AtomicReaderContext context){
  super.setNextReader(context);
  values=(indexFieldData).load(context).getDoubleValues();
}",0.9321533923303836
13304,"@Override public Double evaluate(){
  Double value=values.getValue(docId);
  if (value == 0.0 && !values.hasValue(docId)) {
    return null;
  }
  return value;
}","@Override public Double evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return values.nextValue();
}",0.698961937716263
13305,"@Override public Float evaluate(){
  Float value=((Double)values.getValue(docId)).floatValue();
  if (value == 0 && !values.hasValue(docId)) {
    return null;
  }
  return value;
}","@Override public Float evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return ((Double)values.nextValue()).floatValue();
}",0.6060606060606061
13306,"@Override public Integer evaluate(){
  Integer value=((Long)values.getValue(docId)).intValue();
  if (value == 0 && !values.hasValue(docId)) {
    return null;
  }
  return value;
}","@Override public Integer evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return ((Long)values.nextValue()).intValue();
}",0.6219512195121951
13307,"@Override public Long evaluate(){
  Long value=values.getValue(docId);
  if (value == 0 && !values.hasValue(docId)) {
    return null;
  }
  return value;
}","@Override public Long evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return values.nextValue();
}",0.7046263345195729
13308,"@Override public Short evaluate(){
  Short value=((Long)values.getValue(docId)).shortValue();
  if (value == 0 && !values.hasValue(docId)) {
    return null;
  }
  return value;
}","@Override public Short evaluate(){
  if (values.setDocument(docId) == 0) {
    return null;
  }
  return ((Long)values.nextValue()).shortValue();
}",0.6134969325153374
13309,"public void readFrom(StreamInput in,GroupByKey key,ParsedStatement stmt) throws IOException {
  this.key=key;
  Set<Object> values;
  int valuesSize;
  int seenValuesSize=in.readVInt();
  seenValuesList=new ArrayList<>(seenValuesSize);
  for (int i=0; i < seenValuesSize; i++) {
    valuesSize=in.readVInt();
    values=new HashSet<>(valuesSize);
    for (int j=0; j < valuesSize; j++) {
      values.add(in.readGenericValue());
    }
    seenValuesList.add(values);
  }
  aggStates=new ArrayList<>(stmt.aggregateExpressions().size());
  AggExpr aggExpr;
  int seenIdxIndex=0;
  for (int i=0; i < aggStates.size(); i++) {
    aggExpr=stmt.aggregateExpressions().get(i);
    aggStates.add(i,aggExpr.createAggState());
    aggStates.get(i).readFrom(in);
    if (aggExpr.isDistinct) {
      aggStates.get(i).setSeenValuesRef(seenValuesList.get(stmt.seenIdxMap().get(seenIdxIndex++)));
    }
  }
}","public void readFrom(StreamInput in,GroupByKey key,ParsedStatement stmt) throws IOException {
  this.key=key;
  Set<Object> values;
  int valuesSize;
  int seenValuesSize=in.readVInt();
  seenValuesList=new ArrayList<>(seenValuesSize);
  for (int i=0; i < seenValuesSize; i++) {
    valuesSize=in.readVInt();
    values=new HashSet<>(valuesSize);
    for (int j=0; j < valuesSize; j++) {
      values.add(in.readGenericValue());
    }
    seenValuesList.add(values);
  }
  aggStates=new ArrayList<>(stmt.aggregateExpressions().size());
  AggExpr aggExpr;
  int seenIdxIndex=0;
  for (int i=0; i < stmt.aggregateExpressions().size(); i++) {
    aggExpr=stmt.aggregateExpressions().get(i);
    aggStates.add(i,aggExpr.createAggState());
    aggStates.get(i).readFrom(in);
    if (aggExpr.isDistinct) {
      aggStates.get(i).setSeenValuesRef(seenValuesList.get(stmt.seenIdxMap().get(seenIdxIndex++)));
    }
  }
}",0.9800443458980044
13310,"@Test public void testGroupTree() throws Exception {
  NodeExecutionContext nec=HitchhikerMocks.nodeExecutionContext();
  TableExecutionContext tec=mock(TableExecutionContext.class);
  when(nec.tableContext(anyString(),anyString())).thenReturn(tec);
  when(tec.getCollectorExpression(any(ValueNode.class))).thenReturn(fakeExpression);
  SQLParseService parseService=new SQLParseService(nec);
  ParsedStatement stmt=parseService.parse(""String_Node_Str"");
  CacheRecycler cacheRecycler=new CacheRecycler(ImmutableSettings.EMPTY);
  GroupTree t1=new GroupTree(1,stmt,cacheRecycler);
  GroupTree t2=new GroupTree(1,stmt,cacheRecycler);
  GroupByRow row=t1.getRow();
  row=t1.getRow();
  BytesStreamOutput out=new BytesStreamOutput();
  t1.writeBucket(out,0);
  BytesStreamInput in=new BytesStreamInput(out.bytes());
  t2.readBucket(in,0);
  assertEquals(t2.maps().length,t2.maps().length);
  assertMapEquals(t1.maps()[0],t2.maps()[0]);
}","@Test public void testGroupTree() throws Exception {
  CacheRecycler cacheRecycler=new CacheRecycler(ImmutableSettings.EMPTY);
  NodeExecutionContext nec=HitchhikerMocks.nodeExecutionContext();
  TableExecutionContext tec=mock(TableExecutionContext.class);
  when(nec.tableContext(anyString(),anyString())).thenReturn(tec);
  when(tec.getCollectorExpression(any(ValueNode.class))).thenReturn(fakeExpression);
  SQLParseService parseService=new SQLParseService(nec);
  ParsedStatement stmt=parseService.parse(""String_Node_Str"");
  SQLMapperResultRequest requestSender=new SQLMapperResultRequest();
  GroupTree t1=new GroupTree(1,stmt,cacheRecycler);
  requestSender.contextId=UUID.randomUUID();
  requestSender.groupByResult=new SQLGroupByResult(0,t1);
  t1.getRow();
  t1.getRow();
  BytesStreamOutput out=new BytesStreamOutput();
  requestSender.writeTo(out);
  FutureConcurrentMap<UUID,SQLReduceJobStatus> reduceJobs=FutureConcurrentMap.newMap();
  reduceJobs.put(requestSender.contextId,new SQLReduceJobStatus(stmt,1));
  SQLMapperResultRequest requestReceiver=new SQLMapperResultRequest(reduceJobs,cacheRecycler);
  BytesStreamInput in=new BytesStreamInput(out.bytes());
  requestReceiver.readFrom(in);
  GroupTree t2=(GroupTree)requestReceiver.groupByResult.rows();
  assertEquals(t2.maps().length,t2.maps().length);
  assertMapEquals(t1.maps()[0],t2.maps()[0]);
}",0.2701998262380539
13311,"public static Object[][] sortedRowsToObjectArray(Collection<GroupByRow> rows,ParsedStatement parsedStatement,GroupByFieldExtractor[] fieldExtractors){
  int rowCount=parsedStatement.isGlobalAggregate() ? 1 : Math.max(0,rows.size() - parsedStatement.offset());
  Object[][] result=new Object[rowCount][parsedStatement.outputFields().size()];
  int currentRow=-1;
  int remainingOffset=parsedStatement.offset();
  if (parsedStatement.isGlobalAggregate()) {
    if (rowCount == 0) {
      for (int i=0; i < result[0].length; i++) {
        result[0][i]=parsedStatement.aggregateExpressions().get(i).createAggState().value();
      }
      return result;
    }
 else {
      Iterator<GroupByRow> iter=rows.iterator();
      final GroupByRow resultRow=iter.next();
      while (iter.hasNext()) {
        resultRow.merge(iter.next());
      }
      rows=new ArrayList<GroupByRow>(1){
{
          add(resultRow);
        }
      }
;
    }
  }
  for (  GroupByRow row : rows) {
    if (remainingOffset > 0) {
      remainingOffset--;
      continue;
    }
    currentRow++;
    for (int i=0; i < result[currentRow].length; i++) {
      result[currentRow][i]=fieldExtractors[i].getValue(row);
    }
  }
  return result;
}","public static Object[][] sortedRowsToObjectArray(Collection<GroupByRow> rows,ParsedStatement parsedStatement,GroupByFieldExtractor[] fieldExtractors){
  int rowCount=Math.max(0,rows.size() - parsedStatement.offset());
  Object[][] result=new Object[parsedStatement.isGlobalAggregate() ? 1 : rowCount][parsedStatement.outputFields().size()];
  int currentRow=-1;
  int remainingOffset=parsedStatement.offset();
  if (parsedStatement.isGlobalAggregate()) {
    if (rowCount == 0) {
      for (int i=0; i < result[0].length; i++) {
        result[0][i]=parsedStatement.aggregateExpressions().get(i).createAggState().value();
      }
      return result;
    }
 else {
      Iterator<GroupByRow> iter=rows.iterator();
      final GroupByRow resultRow=iter.next();
      while (iter.hasNext()) {
        resultRow.merge(iter.next());
      }
      rows=new ArrayList<GroupByRow>(1){
{
          add(resultRow);
        }
      }
;
    }
  }
  for (  GroupByRow row : rows) {
    if (remainingOffset > 0) {
      remainingOffset--;
      continue;
    }
    currentRow++;
    for (int i=0; i < result[currentRow].length; i++) {
      result[currentRow][i]=fieldExtractors[i].getValue(row);
    }
  }
  return result;
}",0.9653465346534652
13312,"public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof ParameterInfo))   return false;
  ParameterInfo that=(ParameterInfo)o;
  if (isAllColumn != that.isAllColumn)   return false;
  if (columnName != that.columnName)   return false;
  return true;
}","public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof ParameterInfo))   return false;
  ParameterInfo that=(ParameterInfo)o;
  if (isAllColumn != that.isAllColumn)   return false;
  if (columnName != null && !columnName.equals(that.columnName))   return false;
  if (that.columnName != null && !that.columnName.equals(columnName))   return false;
  return true;
}",0.7869822485207101
13313,"@Override public void collect(int doc) throws IOException {
  groupByFieldLookup.setNextDocId(doc);
  Object[] keyValue=new Object[parsedStatement.groupByColumnNames.size()];
  for (int i=0; i < parsedStatement.groupByColumnNames.size(); i++) {
    keyValue[i]=groupByFieldLookup.lookupField(parsedStatement.groupByColumnNames.get(i));
  }
  GroupByKey key=new GroupByKey(keyValue);
  String reducer=partitionByKey(reducers,key);
  Map<GroupByKey,GroupByRow> resultMap=partitionedResult.get(reducer);
  GroupByRow row=resultMap.get(key);
  if (row == null) {
    row=GroupByRow.createEmptyRow(key,parsedStatement.aggregateExpressions,aggFunctionMap);
    resultMap.put(key,row);
  }
  for (int i=0; i < parsedStatement.aggregateExpressions.size(); i++) {
    AggExpr aggExpr=parsedStatement.aggregateExpressions.get(i);
    Object value=null;
    if (!aggExpr.parameterInfo.isAllColumn && aggExpr.parameterInfo.columnName != null) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    if (aggExpr.parameterInfo.columnName != null) {
      value=groupByFieldLookup.lookupField(aggExpr.parameterInfo.columnName);
    }
    AggFunction function=aggFunctionMap.get(aggExpr.functionName);
    function.iterate(row.aggStates[i],value);
  }
}","@Override public void collect(int doc) throws IOException {
  groupByFieldLookup.setNextDocId(doc);
  Object[] keyValue=new Object[parsedStatement.groupByColumnNames.size()];
  for (int i=0; i < parsedStatement.groupByColumnNames.size(); i++) {
    keyValue[i]=groupByFieldLookup.lookupField(parsedStatement.groupByColumnNames.get(i));
  }
  GroupByKey key=new GroupByKey(keyValue);
  String reducer=partitionByKey(reducers,key);
  Map<GroupByKey,GroupByRow> resultMap=partitionedResult.get(reducer);
  GroupByRow row=resultMap.get(key);
  if (row == null) {
    row=GroupByRow.createEmptyRow(key,parsedStatement.aggregateExpressions,aggFunctionMap);
    resultMap.put(key,row);
  }
  for (int i=0; i < parsedStatement.aggregateExpressions.size(); i++) {
    AggExpr aggExpr=parsedStatement.aggregateExpressions.get(i);
    Object value=null;
    if (!aggExpr.parameterInfo.isAllColumn && aggExpr.parameterInfo.columnName == null) {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",aggExpr.functionName));
    }
    if (aggExpr.parameterInfo.columnName != null) {
      value=groupByFieldLookup.lookupField(aggExpr.parameterInfo.columnName);
    }
    AggFunction function=aggFunctionMap.get(aggExpr.functionName);
    function.iterate(row.aggStates[i],value);
  }
}",0.985121378230227
13314,"public static AggExpr createAggExpr(String aggregateName,String aggregateParam){
  ParameterInfo param;
switch (aggregateName) {
case ""String_Node_Str"":
    param=new ParameterInfo();
  param.isAllColumn=true;
return new AggExpr(CountAggFunction.NAME,param);
case ""String_Node_Str"":
param=new ParameterInfo();
param.columnName=aggregateParam;
return new AggExpr(MinAggFunction.NAME,param);
default :
throw new SQLParseException(""String_Node_Str"" + aggregateName);
}
}","public static AggExpr createAggExpr(String aggregateName,String aggregateParam){
  ParameterInfo param;
switch (aggregateName) {
case ""String_Node_Str"":
case ""String_Node_Str"":
    param=new ParameterInfo();
  param.isAllColumn=true;
return new AggExpr(CountAggFunction.NAME,param);
case ""String_Node_Str"":
param=new ParameterInfo();
param.columnName=aggregateParam;
return new AggExpr(MinAggFunction.NAME,param);
default :
throw new SQLParseException(""String_Node_Str"" + aggregateName);
}
}",0.974947807933194
13315,public abstract AggState createAggState();,public abstract T createAggState();,0.8831168831168831
13316,"public abstract void iterate(AggState state,Object columnValue);","public abstract void iterate(T state,Object columnValue);",0.9256198347107438
13317,public abstract void reduce(AggState other);,public abstract void reduce(T other);,0.8888888888888888
13318,"@Override public AggState createAggState(){
  return new CountAggState();
}","@Override public CountAggState createAggState(){
  return new CountAggState();
}",0.967741935483871
13319,"@Override public void iterate(AggState state,Object columnValue){
  ((CountAggState)state).value++;
}","@Override public void iterate(CountAggState state,Object columnValue){
  state.value++;
}",0.8842105263157894
13320,"@Override public void reduce(AggState other){
}","public void reduce(CountAggState other){
  value+=other.value;
}",0.6666666666666666
13321,"@Override public int compareTo(AggState o){
  CountAggState countAggState=(CountAggState)o;
  return Long.compare(value,countAggState.value);
}","@Override public int compareTo(CountAggState o){
  return Long.compare(value,o.value);
}",0.7532467532467533
13322,"@Override public AggState createAggState(){
  return new MinAggState();
}","@Override public MinAggState createAggState(){
  return new MinAggState();
}",0.9798657718120806
13323,"@Override public void iterate(AggState state,Object columnValue){
  newAggState.value=columnValue;
  state.reduce(newAggState);
}","@Override public void iterate(MinAggState state,Object columnValue){
  newAggState.value=columnValue;
  state.reduce(newAggState);
}",0.9885057471264368
13324,"private void handleAggregateNode(ParsedStatement stmt,ResultColumn column){
  AggregateNode node=(AggregateNode)column.getExpression();
  if (node.getAggregateName().startsWith(""String_Node_Str"")) {
    ValueNode operand=node.getOperand();
    if (operand != null) {
      validateCountOperand(operand);
    }
    AggExpr aggExpr=AggExprFactory.createAggExpr(""String_Node_Str"");
    stmt.resultColumnList.add(aggExpr);
    stmt.aggregateExpressions.add(aggExpr);
    String alias=column.getName() != null ? column.getName() : node.getAggregateName();
    stmt.countRequest(true);
    stmt.addOutputField(alias,node.getAggregateName());
  }
 else   if (node.getAggregateName().startsWith(""String_Node_Str"")) {
    ColumnReference operand=(ColumnReference)node.getOperand();
    if (operand == null) {
      throw new SQLParseException(""String_Node_Str"");
    }
    AggExpr aggExpr=AggExprFactory.createAggExpr(""String_Node_Str"",operand.getColumnName());
    stmt.resultColumnList.add(aggExpr);
    stmt.aggregateExpressions.add(aggExpr);
    String alias=column.getName() != null ? column.getName() : operand.getColumnName();
    stmt.addOutputField(alias,operand.getColumnName());
  }
 else {
    throw new SQLParseException(""String_Node_Str"" + node.getAggregateName());
  }
}","private void handleAggregateNode(ParsedStatement stmt,ResultColumn column){
  AggregateNode node=(AggregateNode)column.getExpression();
  AggExpr aggExpr=getAggregateExpression(node);
  if (aggExpr != null) {
    if (aggExpr.functionName.startsWith(CountAggFunction.NAME)) {
      stmt.countRequest(true);
    }
    stmt.resultColumnList.add(aggExpr);
    stmt.aggregateExpressions.add(aggExpr);
    String alias=aggExpr.toString();
    stmt.addOutputField(alias,node.getAggregateName());
  }
}",0.1909604519774011
13325,"/** 
 * verify that the operand in the count function translates to a count(*) because anything else isn't supported right now.
 * @param operand
 */
private void validateCountOperand(ValueNode operand) throws SQLParseException {
switch (operand.getNodeType()) {
case NodeTypes.PARAMETER_NODE:
    ParameterNode parameterNode=(ParameterNode)operand;
  Object value=args[parameterNode.getParameterNumber()];
if (!value.equals(""String_Node_Str"")) {
  throw new SQLParseException(""String_Node_Str"");
}
break;
case NodeTypes.COLUMN_REFERENCE:
if (!tableContext.primaryKeys().contains(operand.getColumnName())) {
throw new SQLParseException(""String_Node_Str"");
}
break;
default :
throw new SQLParseException(""String_Node_Str"");
}
}","/** 
 * verify that the operand in the count function translates to a count(*) or a column reference referencing the primary key because anything else isn't supported right now.
 * @param operand
 */
private void validateCountOperand(ValueNode operand) throws SQLParseException {
switch (operand.getNodeType()) {
case NodeTypes.PARAMETER_NODE:
    ParameterNode parameterNode=(ParameterNode)operand;
  Object value=args[parameterNode.getParameterNumber()];
if (!value.equals(""String_Node_Str"")) {
  throw new SQLParseException(""String_Node_Str"");
}
break;
case NodeTypes.COLUMN_REFERENCE:
if (!tableContext.primaryKeys().contains(operand.getColumnName())) {
throw new SQLParseException(""String_Node_Str"");
}
break;
default :
throw new SQLParseException(""String_Node_Str"");
}
}",0.966711051930759
13326,"@Override public void messageReceived(SQLMapperResultRequest request,TransportChannel channel) throws Exception {
  SQLReduceJobStatus status=request.status;
  long now=0;
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",clusterService.localNode().getId(),request.contextId);
    now=new Date().getTime();
  }
  status.merge(request.groupByResult);
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",clusterService.localNode().getId(),request.contextId,(new Date().getTime() - now),status.groupByResult.size());
  }
  status.shardsToProcess.countDown();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",clusterService.localNode().getId(),request.contextId,status.shardsToProcess.getCount());
  }
  channel.sendResponse(TransportResponse.Empty.INSTANCE);
}","@Override public void messageReceived(SQLMapperResultRequest request,TransportChannel channel) throws Exception {
  SQLReduceJobStatus status=request.status;
  long now=0;
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",clusterService.localNode().getId(),request.contextId);
    now=new Date().getTime();
  }
  status.merge(request.groupByResult);
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",clusterService.localNode().getId(),request.contextId,(new Date().getTime() - now),status.groupByResult != null ? status.groupByResult.size() : 0);
  }
  status.shardsToProcess.countDown();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"",clusterService.localNode().getId(),request.contextId,status.shardsToProcess.getCount());
  }
  channel.sendResponse(TransportResponse.Empty.INSTANCE);
}",0.9788519637462236
13327,"public Object value(){
  return value;
}",public abstract Object value();,0.6197183098591549
13328,"@Override public void iterate(MinAggState state,Object columnValue){
  newAggState.value=columnValue;
  state.reduce(newAggState);
}","@Override public void iterate(MinAggState state,Object columnValue){
  if (state.compareValue(columnValue) == 1) {
    state.value=columnValue;
  }
}",0.7188612099644128
13329,"@Override public void reduce(AggState other){
}","@Override public void reduce(MinAggState other){
  if (other.value == null) {
    return;
  }
 else   if (value == null) {
    value=other.value;
    return;
  }
  int res=compareTo(other);
  if (res == 1) {
    value=other.value;
  }
}",0.3250883392226148
13330,"@Override public int compareTo(AggState o){
  MinAggState minAggState=(MinAggState)o;
  return super.compareTo(minAggState);
}","@Override public int compareTo(MinAggState o){
  return compareValue(o.value);
}",0.6504854368932039
13331,"@Override public ColumnDefinition getColumnDefinition(String tableName,int ordinalPosition){
  return new ColumnDefinition(tableName,name,""String_Node_Str"",ordinalPosition,false,true);
}","@Override public ColumnDefinition getColumnDefinition(String tableName,int ordinalPosition){
  return new ColumnDefinition(tableName,name,""String_Node_Str"",null,ordinalPosition,false,true);
}",0.986737400530504
13332,"@Override public ColumnDefinition getColumnDefinition(String tableName,int ordinalPosition){
  return new ColumnDefinition(tableName,name,""String_Node_Str"",ordinalPosition,false,true);
}","@Override public ColumnDefinition getColumnDefinition(String tableName,int ordinalPosition){
  return new ColumnDefinition(tableName,name,""String_Node_Str"",null,ordinalPosition,false,true);
}",0.986737400530504
13333,"/** 
 * used to get custom analyzers, tokenizers, token-filters or char-filters with name ``name`` from crate-cluster-settings
 * @param name
 * @param type
 * @return a full settings instance for the thingy with given name and type or null if it does not exists
 */
private Settings getCustomThingy(String name,CustomType type){
  if (name == null) {
    return null;
  }
  String encodedSettings=clusterService.state().metaData().persistentSettings().get(String.format(""String_Node_Str"",SQLService.CUSTOM_ANALYSIS_SETTINGS_PREFIX,type.getName(),name));
  Settings decoded=null;
  if (encodedSettings != null) {
    try {
      decoded=decodeSettings(encodedSettings);
    }
 catch (    IOException e) {
    }
  }
  return decoded;
}","/** 
 * used to get custom analyzers, tokenizers, token-filters or char-filters with name ``name`` from crate-cluster-settings
 * @param name
 * @param type
 * @return a full settings instance for the thingy with given name and type or null if it does not exists
 */
private Settings getCustomThingy(String name,CustomType type){
  if (name == null) {
    return null;
  }
  String encodedSettings=clusterService.state().metaData().persistentSettings().get(String.format(""String_Node_Str"",SQLService.CUSTOM_ANALYSIS_SETTINGS_PREFIX,type.getName(),name));
  Settings decoded=null;
  if (encodedSettings != null) {
    try {
      decoded=decodeSettings(encodedSettings);
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e,type.getName(),name);
    }
  }
  return decoded;
}",0.9607329842931938
13334,"public static Settings decodeSettings(String encodedSettings) throws IOException {
  BytesStreamInput bsi=new BytesStreamInput(encodedSettings.getBytes(),0,encodedSettings.getBytes().length,false);
  return ImmutableSettings.readSettingsFromStream(bsi);
}","public static Settings decodeSettings(String encodedSettings) throws IOException {
  Map<String,String> loaded=new JsonSettingsLoader().load(encodedSettings);
  return ImmutableSettings.builder().put(loaded).build();
}",0.5243128964059197
13335,"public static BytesReference encodeSettings(Settings settings) throws IOException {
  BytesStreamOutput bso=new BytesStreamOutput();
  ImmutableSettings.writeSettingsToStream(settings,bso);
  return bso.bytes();
}","public static BytesReference encodeSettings(Settings settings) throws IOException {
  BytesStreamOutput bso=new BytesStreamOutput();
  XContentBuilder builder=XContentFactory.jsonBuilder(bso);
  builder.startObject();
  for (  Map.Entry<String,String> entry : settings.getAsMap().entrySet()) {
    builder.field(entry.getKey(),entry.getValue());
  }
  builder.endObject();
  builder.flush();
  return bso.bytes();
}",0.4363057324840764
13336,"/** 
 * used to get custom analyzers, tokenizers, token-filters or char-filters with name ``name`` from crate-cluster-settings
 * @param name
 * @param type
 * @return a full settings instance for the thingy with given name and type or null if it does not exists
 */
private Settings getCustomThingy(String name,CustomType type){
  if (name == null) {
    return null;
  }
  String encodedSettings=clusterService.state().metaData().persistentSettings().get(String.format(""String_Node_Str"",SQLService.CUSTOM_ANALYSIS_SETTINGS_PREFIX,type.getName(),name));
  Settings decoded=null;
  if (encodedSettings != null) {
    try {
      decoded=decodeSettings(encodedSettings);
    }
 catch (    IOException e) {
    }
  }
  return decoded;
}","/** 
 * used to get custom analyzers, tokenizers, token-filters or char-filters with name ``name`` from crate-cluster-settings
 * @param name
 * @param type
 * @return a full settings instance for the thingy with given name and type or null if it does not exists
 */
private Settings getCustomThingy(String name,CustomType type){
  if (name == null) {
    return null;
  }
  String encodedSettings=clusterService.state().metaData().persistentSettings().get(String.format(""String_Node_Str"",SQLService.CUSTOM_ANALYSIS_SETTINGS_PREFIX,type.getName(),name));
  Settings decoded=null;
  if (encodedSettings != null) {
    try {
      decoded=decodeSettings(encodedSettings);
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e,type.getName(),name);
    }
  }
  return decoded;
}",0.9607329842931938
13337,"public static Settings decodeSettings(String encodedSettings) throws IOException {
  BytesStreamInput bsi=new BytesStreamInput(encodedSettings.getBytes(),0,encodedSettings.getBytes().length,false);
  return ImmutableSettings.readSettingsFromStream(bsi);
}","public static Settings decodeSettings(String encodedSettings) throws IOException {
  Map<String,String> loaded=new JsonSettingsLoader().load(encodedSettings);
  return ImmutableSettings.builder().put(loaded).build();
}",0.5243128964059197
13338,"public static BytesReference encodeSettings(Settings settings) throws IOException {
  BytesStreamOutput bso=new BytesStreamOutput();
  ImmutableSettings.writeSettingsToStream(settings,bso);
  return bso.bytes();
}","public static BytesReference encodeSettings(Settings settings) throws IOException {
  BytesStreamOutput bso=new BytesStreamOutput();
  XContentBuilder builder=XContentFactory.jsonBuilder(bso);
  builder.startObject();
  for (  Map.Entry<String,String> entry : settings.getAsMap().entrySet()) {
    builder.field(entry.getKey(),entry.getValue());
  }
  builder.endObject();
  builder.flush();
  return bso.bytes();
}",0.4363057324840764
13339,"@Override public void index(ClusterState clusterState){
synchronized (indexLock) {
    try {
      if (!initialized()) {
        init();
      }
      indexWriter.deleteAll();
      doIndex(clusterState);
      searcherManager.maybeRefresh();
      IndexSearcher newIndexSearcher=searcherManager.acquire();
      if (activeSearches.getAndIncrement() == 0) {
        searcherManager.release(indexSearcher);
        indexSearcher=newIndexSearcher;
      }
    }
 catch (    IOException e) {
      throw new CrateException(e);
    }
  }
}","@Override public void index(ClusterState clusterState){
synchronized (indexLock) {
    try {
      if (!initialized()) {
        init();
      }
      indexWriter.deleteAll();
      doIndex(clusterState);
      searcherManager.maybeRefresh();
      if (activeSearches.get() == 0) {
        IndexSearcher newIndexSearcher=searcherManager.acquire();
        searcherManager.release(indexSearcher);
        indexSearcher=newIndexSearcher;
      }
    }
 catch (    IOException e) {
      throw new CrateException(e);
    }
  }
}",0.9132075471698112
13340,"@Override protected void doStop() throws ElasticSearchException {
}","@Override protected void doStop() throws ElasticSearchException {
  logger.info(""String_Node_Str"");
  clusterService.remove(listener);
}",0.6600985221674877
13341,"@Inject public InformationSchemaService(Settings settings,ClusterService clusterService){
  super(settings);
  this.clusterService=clusterService;
  this.dirty=false;
}","@Inject public InformationSchemaService(Settings settings,ClusterService clusterService){
  super(settings);
  this.clusterService=clusterService;
  this.dirty=false;
  logger=Loggers.getLogger(getClass(),settings);
}",0.8727272727272727
13342,"@Override protected void doStart() throws ElasticSearchException {
  clusterService.add(new ClusterStateListener(){
    @Override public void clusterChanged(    ClusterChangedEvent event){
      if (event.metaDataChanged()) {
synchronized (readLock) {
          dirty=true;
        }
      }
    }
  }
);
}","@Override protected void doStart() throws ElasticSearchException {
  logger.info(""String_Node_Str"");
  listener=new ClusterStateListener(){
    @Override public void clusterChanged(    ClusterChangedEvent event){
      if (event.metaDataChanged()) {
synchronized (readLock) {
          dirty=true;
        }
      }
    }
  }
;
  clusterService.add(listener);
}",0.8575712143928036
13343,"@Test public void testSearchInformationSchemaTablesRefresh() throws Exception {
  serviceSetup();
  exec(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
  node.client().execute(SQLAction.INSTANCE,new SQLRequest(""String_Node_Str"")).actionGet();
  Thread.sleep(200);
  exec(""String_Node_Str"");
  assertEquals(4L,response.rowCount());
}","@Test public void testSearchInformationSchemaTablesRefresh() throws Exception {
  serviceSetup();
  exec(""String_Node_Str"");
  assertEquals(3L,response.rowCount());
  node.client().execute(SQLAction.INSTANCE,new SQLRequest(""String_Node_Str"")).actionGet();
  Thread.sleep(10);
  exec(""String_Node_Str"");
  assertEquals(4L,response.rowCount());
}",0.995645863570392
13344,"@Test public void testSelectFromInformationSchemaTable() throws Exception {
  execUsingClient(""String_Node_Str"");
  assertEquals(0L,response.rowCount());
  execUsingClient(""String_Node_Str"");
  Thread.sleep(800);
  execUsingClient(""String_Node_Str"");
  assertEquals(1L,response.rowCount());
  assertEquals(""String_Node_Str"",response.rows()[0][0]);
  assertEquals(5,response.rows()[0][1]);
  assertEquals(1,response.rows()[0][2]);
}","@Test public void testSelectFromInformationSchemaTable() throws Exception {
  execUsingClient(""String_Node_Str"");
  assertEquals(0L,response.rowCount());
  execUsingClient(""String_Node_Str"");
  Thread.sleep(10);
  execUsingClient(""String_Node_Str"");
  assertEquals(1L,response.rowCount());
  assertEquals(""String_Node_Str"",response.rows()[0][0]);
  assertEquals(5,response.rows()[0][1]);
  assertEquals(1,response.rows()[0][2]);
}",0.9965156794425089
13345,"/** 
 * If a primary_key equals a constant value in the given node, and also is defined as the routing key, write the value to the   {@link ParsedStatement} and return true.The  {@link org.cratedb.action.sql.TransportSQLAction} can then make decisions usingthis values if e.g. a  {@link org.elasticsearch.action.get.GetRequest} should be usedinstead of a  {@link org.elasticsearch.action.search.SearchRequest}.
 * @param stmt
 * @param node
 * @return
 * @throws StandardException
 */
private Boolean checkSinglePrimaryAndRouting(ParsedStatement stmt,ValueNode node) throws StandardException {
  List<String> primaryKeys=tableContext.primaryKeys();
  if (primaryKeys.isEmpty()) {
    primaryKeys.add(""String_Node_Str"");
  }
  if (node instanceof BinaryRelationalOperatorNode) {
    ValueNode leftOperand=((BinaryRelationalOperatorNode)node).getLeftOperand();
    ValueNode rightOperand=((BinaryRelationalOperatorNode)node).getRightOperand();
    Object value=null;
    if (leftOperand instanceof ColumnReference) {
      if (tableContext.isRouting(leftOperand.getColumnName()) && primaryKeys.contains(leftOperand.getColumnName())) {
        value=stmt.visitor().evaluateValueNode(tableContext,leftOperand.getColumnName(),rightOperand);
      }
    }
    if (rightOperand instanceof ColumnReference) {
      if (tableContext.isRouting(rightOperand.getColumnName()) && primaryKeys.contains(rightOperand.getColumnName())) {
        value=stmt.visitor().evaluateValueNode(tableContext,rightOperand.getColumnName(),leftOperand);
      }
    }
    if (value != null) {
      stmt.setPlannerResult(PRIMARY_KEY_VALUE,value.toString());
      return true;
    }
  }
  return false;
}","/** 
 * If a primary_key equals a constant value in the given node, and also is defined as the routing key, write the value to the   {@link ParsedStatement} and return true.The  {@link org.cratedb.action.sql.TransportSQLAction} can then make decisions usingthis values if e.g. a  {@link org.elasticsearch.action.get.GetRequest} should be usedinstead of a  {@link org.elasticsearch.action.search.SearchRequest}.
 * @param stmt
 * @param node
 * @return
 * @throws StandardException
 */
private Boolean checkSinglePrimaryAndRouting(ParsedStatement stmt,ValueNode node) throws StandardException {
  List<String> primaryKeys=tableContext.primaryKeys();
  if (primaryKeys.isEmpty()) {
    primaryKeys.add(""String_Node_Str"");
  }
  if (node instanceof BinaryRelationalOperatorNode && ((BinaryRelationalOperatorNode)node).getOperatorType() == XContentGenerator.SQLOperatorTypes.EQUALS) {
    ValueNode leftOperand=((BinaryRelationalOperatorNode)node).getLeftOperand();
    ValueNode rightOperand=((BinaryRelationalOperatorNode)node).getRightOperand();
    Object value=null;
    if (leftOperand instanceof ColumnReference) {
      if (tableContext.isRouting(leftOperand.getColumnName()) && primaryKeys.contains(leftOperand.getColumnName())) {
        value=stmt.visitor().evaluateValueNode(tableContext,leftOperand.getColumnName(),rightOperand);
      }
    }
    if (rightOperand instanceof ColumnReference) {
      if (tableContext.isRouting(rightOperand.getColumnName()) && primaryKeys.contains(rightOperand.getColumnName())) {
        value=stmt.visitor().evaluateValueNode(tableContext,rightOperand.getColumnName(),leftOperand);
      }
    }
    if (value != null) {
      stmt.setPlannerResult(PRIMARY_KEY_VALUE,value.toString());
      return true;
    }
  }
  return false;
}",0.9701535786728483
13346,"public GetRequest buildGetRequest(){
  String id=(String)getPlannerResult(QueryPlanner.PRIMARY_KEY_VALUE);
  GetRequest request=new GetRequest(indices.get(0),NodeExecutionContext.DEFAULT_TYPE,id);
  request.routing(id);
  request.fields(cols());
  return request;
}","public GetRequest buildGetRequest(){
  String id=(String)getPlannerResult(QueryPlanner.PRIMARY_KEY_VALUE);
  GetRequest request=new GetRequest(indices.get(0),NodeExecutionContext.DEFAULT_TYPE,id);
  request.routing(id);
  request.fields(cols());
  request.realtime(true);
  return request;
}",0.9532374100719424
13347,"public ParsedStatement(String stmt,Object[] args,NodeExecutionContext context) throws StandardException {
  this.stmt=stmt;
  this.args=args;
  this.context=context;
  this.plannerResults=new HashMap<String,Object>();
  SQLParser parser=new SQLParser();
  statementNode=parser.parseStatement(stmt);
switch (statementNode.getNodeType()) {
case NodeTypes.INSERT_NODE:
    visitor=new InsertVisitor(this);
  break;
default :
visitor=new QueryVisitor(this);
break;
}
statementNode.accept(visitor);
}","public ParsedStatement(String stmt,Object[] args,NodeExecutionContext context) throws StandardException {
  this.stmt=stmt;
  this.args=args;
  this.context=context;
  this.plannerResults=new HashMap<>();
  SQLParser parser=new SQLParser();
  statementNode=parser.parseStatement(stmt);
switch (statementNode.getNodeType()) {
case NodeTypes.INSERT_NODE:
    visitor=new InsertVisitor(this);
  break;
default :
visitor=new QueryVisitor(this);
break;
}
statementNode.accept(visitor);
}",0.9866939611054248
13348,"private SearchHit searchHitFromGetResponse(GetResponse getResponse){
  Map<String,SearchHitField> searchFields=new HashMap<String,SearchHitField>(getResponse.getFields().size());
  for (  Map.Entry<String,GetField> entry : getResponse.getFields().entrySet()) {
    searchFields.put(entry.getKey(),new InternalSearchHitField(entry.getKey(),entry.getValue().getValues()));
  }
  BytesReference source=null;
  if (getResponse.getSourceInternal() != null) {
    source=getResponse.getSourceAsBytesRef();
  }
  return new InternalSearchHit(0,getResponse.getId(),new StringAndBytesText(getResponse.getType()),source,searchFields);
}","/** 
 * build a SearchHit out of a GetResponse Apply DocumentMapping again as Realtime-GetRequests only fetch from source
 */
private SearchHit searchHitFromGetResponse(NodeExecutionContext.TableExecutionContext tableContext,GetResponse getResponse){
  Map<String,SearchHitField> searchFields=new HashMap<>(getResponse.getFields().size());
  for (  Map.Entry<String,GetField> entry : getResponse.getFields().entrySet()) {
    FieldMapper<?> mapper=tableContext.mapper().mappers().smartNameFieldMapper(entry.getKey());
    List<Object> searchFieldValues=new ArrayList<>(1);
    for (    Object value : entry.getValue().getValues()) {
      if (mapper instanceof DateFieldMapper) {
        searchFieldValues.add(mapper.valueForSearch(((DateFieldMapper)mapper).value(entry.getValue().getValue())));
      }
 else {
        searchFieldValues.add(mapper.valueForSearch(entry.getValue().getValue()));
      }
    }
    searchFields.put(entry.getKey(),new InternalSearchHitField(entry.getKey(),searchFieldValues));
  }
  BytesReference source=null;
  if (getResponse.getSourceInternal() != null) {
    source=getResponse.getSourceAsBytesRef();
  }
  return new InternalSearchHit(0,getResponse.getId(),new StringAndBytesText(getResponse.getType()),source,searchFields);
}",0.5992588671254632
13349,"public void applyGetResponse(GetResponse getResponse){
  this.hit=searchHitFromGetResponse(getResponse);
}","public void applyGetResponse(NodeExecutionContext.TableExecutionContext tableContext,GetResponse getResponse){
  this.hit=searchHitFromGetResponse(tableContext,getResponse);
}",0.7544483985765125
13350,"private List<FieldExtractor> getFieldExtractors(){
  List<FieldExtractor> extractors=new ArrayList<FieldExtractor>(fields.size());
  for (  Tuple<String,String> t : fields) {
    String fn=t.v2();
    FieldExtractor fc=null;
    if (fn.startsWith(""String_Node_Str"")) {
      if (fn.equals(""String_Node_Str"")) {
        fc=new SourceFieldExtractor();
      }
 else       if (fn.equals(""String_Node_Str"")) {
        fc=new FieldExtractor(){
          @Override public Object getValue(){
            return hit.getId();
          }
        }
;
      }
 else       if (fn.equals(""String_Node_Str"")) {
        fc=new FieldExtractor(){
          @Override public Object getValue(){
            return hit.getVersion();
          }
        }
;
      }
 else {
        fc=new HitFieldExtractor(fn);
      }
    }
 else {
      fc=new HitFieldExtractor(fn);
    }
    extractors.add(fc);
  }
  return extractors;
}","private List<FieldExtractor> getFieldExtractors(){
  List<FieldExtractor> extractors=new ArrayList<>(fields.size());
  for (  Tuple<String,String> t : fields) {
    String fn=t.v2();
    FieldExtractor fc=null;
    if (fn.startsWith(""String_Node_Str"")) {
      if (fn.equals(""String_Node_Str"")) {
        fc=new SourceFieldExtractor();
      }
 else       if (fn.equals(""String_Node_Str"")) {
        fc=new FieldExtractor(){
          @Override public Object getValue(){
            return hit.getId();
          }
        }
;
      }
 else       if (fn.equals(""String_Node_Str"")) {
        fc=new FieldExtractor(){
          @Override public Object getValue(){
            return hit.getVersion();
          }
        }
;
      }
 else {
        fc=new HitFieldExtractor(fn);
      }
    }
 else {
      fc=new HitFieldExtractor(fn);
    }
    extractors.add(fc);
  }
  return extractors;
}",0.9922048997772828
13351,"@Test public void testSqlRequestWithArgs() throws Exception {
  String json=sql(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  JSONAssert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",json,true);
}","@Test public void testSqlRequestWithArgs() throws Exception {
  String json=sql(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  JSONAssert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",json,true);
}",0.9736477115117892
13352,"@Test public void testSqlRequest() throws Exception {
  String json=sql(""String_Node_Str"");
  JSONAssert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",json,true);
}","@Test public void testSqlRequest() throws Exception {
  String json=sql(""String_Node_Str"");
  JSONAssert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",json,true);
}",0.9676320272572402
13353,"@Test public void testDeleteWithWhere() throws Exception {
  createIndex(""String_Node_Str"");
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setSource(""String_Node_Str"").execute().actionGet();
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setSource(""String_Node_Str"").execute().actionGet();
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setSource(""String_Node_Str"").execute().actionGet();
  refresh();
  execute(""String_Node_Str"");
  assertEquals(0,response.rows().length);
  execute(""String_Node_Str"");
  assertEquals(2,response.rows().length);
}","@Test public void testDeleteWithWhere() throws Exception {
  createIndex(""String_Node_Str"");
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setSource(""String_Node_Str"").execute().actionGet();
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setSource(""String_Node_Str"").execute().actionGet();
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setSource(""String_Node_Str"").execute().actionGet();
  refresh();
  execute(""String_Node_Str"");
  assertEquals(0,response.rows().length);
  refresh();
  execute(""String_Node_Str"");
  assertEquals(2,response.rows().length);
}",0.9900076863950809
13354,"/** 
 * Generates the path strings through iterating over the path elements
 * @throws StandardException
 */
private void generatePathStrings() throws StandardException {
  StringBuilder xcontentBuilder=new StringBuilder().append(getColumnName());
  StringBuilder sqlBuilder=new StringBuilder().append(getColumnName());
  for (  ValueNode node : path) {
    Object value=null;
    if (node instanceof CharConstantNode) {
      value=((CharConstantNode)node).getString();
      xcontentBuilder.append(""String_Node_Str"").append(value);
      sqlBuilder.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
    }
 else     if (node instanceof NumericConstantNode) {
      value=((NumericConstantNode)node).getValue();
      xcontentBuilder.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
      sqlBuilder.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
      pathContainsNumeric=true;
    }
 else {
      throw new StandardException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  sqlPathString=sqlBuilder.toString();
  xcontentPathString=xcontentBuilder.toString();
}","/** 
 * Generates the path strings by iterating over the path elements
 * @throws StandardException
 */
private void generatePathStrings() throws StandardException {
  StringBuilder xcontentBuilder=new StringBuilder().append(getColumnName());
  StringBuilder sqlBuilder=new StringBuilder().append(getColumnName());
  for (  ValueNode node : path) {
    Object value=null;
    if (node instanceof CharConstantNode) {
      value=((CharConstantNode)node).getString();
      xcontentBuilder.append(""String_Node_Str"").append(value);
      sqlBuilder.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
    }
 else     if (node instanceof NumericConstantNode) {
      value=((NumericConstantNode)node).getValue();
      xcontentBuilder.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
      sqlBuilder.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
      pathContainsNumeric=true;
    }
 else {
      throw new StandardException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  sqlPathString=sqlBuilder.toString();
  xcontentPathString=xcontentBuilder.toString();
}",0.9959767545820296
13355,"@Test public void testSelectNestedColumns() throws Exception {
  ESLogger logger=Loggers.getLogger(""String_Node_Str"");
  logger.setLevel(""String_Node_Str"");
  prepareCreate(""String_Node_Str"").addMapping(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").execute().actionGet();
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setRefresh(true).setSource(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").execute().actionGet();
  execute(""String_Node_Str"" + ""String_Node_Str"");
  assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},response.cols());
  assertEquals(1,response.rows().length);
  assertArrayEquals(new Object[]{""String_Node_Str"",""String_Node_Str"",new ArrayList<String>(){
{
      add(""String_Node_Str"");
    }
  }
},response.rows()[0]);
}","@Test public void testSelectNestedColumns() throws Exception {
  prepareCreate(""String_Node_Str"").addMapping(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").execute().actionGet();
  client().prepareIndex(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").setRefresh(true).setSource(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").execute().actionGet();
  execute(""String_Node_Str"" + ""String_Node_Str"");
  assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},response.cols());
  assertEquals(1,response.rows().length);
  assertArrayEquals(new Object[]{""String_Node_Str"",""String_Node_Str"",new ArrayList<String>(){
{
      add(""String_Node_Str"");
    }
  }
},response.rows()[0]);
}",0.9424019607843136
13356,"@Override public void run(){
  swipeRefreshLayout.setRefreshing(true);
}","@Override public void run(){
  if (webView != null)   webView.destroy();
}",0.589041095890411
13357,"@Override protected void onDestroy(){
  super.onDestroy();
  BroadCastManager.unregister(FinestWebViewActivity.this,key);
  if (webLayout != null) {
    webLayout.removeAllViews();
    webView.destroy();
  }
}","@Override protected void onDestroy(){
  super.onDestroy();
  BroadCastManager.unregister(FinestWebViewActivity.this,key);
  if (webLayout != null)   webLayout.removeAllViews();
  destroyWebView();
}",0.9385749385749386
13358,"@Override protected void onDestroy(){
  super.onDestroy();
  if (webView != null)   webView.destroy();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (webLayout != null) {
    webLayout.removeAllViews();
    webView.destroy();
  }
}",0.8
13359,"protected void bindViews(){
  coordinatorLayout=(CoordinatorLayout)findViewById(R.id.coordinatorLayout);
  appBar=(AppBarLayout)findViewById(R.id.appBar);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  toolbarLayout=(RelativeLayout)findViewById(R.id.toolbarLayout);
  title=(TextView)findViewById(R.id.title);
  urlTv=(TextView)findViewById(R.id.url);
  close=(ImageButton)findViewById(R.id.close);
  back=(ImageButton)findViewById(R.id.back);
  forward=(ImageButton)findViewById(R.id.forward);
  more=(ImageButton)findViewById(R.id.more);
  swipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipeRefreshLayout);
  webView=(WebView)findViewById(R.id.webView);
  gradient=findViewById(R.id.gradient);
  divider=findViewById(R.id.divider);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  menuLayout=(RelativeLayout)findViewById(R.id.menuLayout);
  shadowLayout=(ShadowLayout)findViewById(R.id.shadowLayout);
  menuBackground=(LinearLayout)findViewById(R.id.menuBackground);
  menuRefresh=(LinearLayout)findViewById(R.id.menuRefresh);
  menuRefreshTv=(TextView)findViewById(R.id.menuRefreshTv);
  menuShareVia=(LinearLayout)findViewById(R.id.menuShareVia);
  menuShareViaTv=(TextView)findViewById(R.id.menuShareViaTv);
  menuCopyLink=(LinearLayout)findViewById(R.id.menuCopyLink);
  menuCopyLinkTv=(TextView)findViewById(R.id.menuCopyLinkTv);
  menuOpenWith=(LinearLayout)findViewById(R.id.menuOpenWith);
  menuOpenWithTv=(TextView)findViewById(R.id.menuOpenWithTv);
}","protected void bindViews(){
  coordinatorLayout=(CoordinatorLayout)findViewById(R.id.coordinatorLayout);
  appBar=(AppBarLayout)findViewById(R.id.appBar);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  toolbarLayout=(RelativeLayout)findViewById(R.id.toolbarLayout);
  title=(TextView)findViewById(R.id.title);
  urlTv=(TextView)findViewById(R.id.url);
  close=(ImageButton)findViewById(R.id.close);
  back=(ImageButton)findViewById(R.id.back);
  forward=(ImageButton)findViewById(R.id.forward);
  more=(ImageButton)findViewById(R.id.more);
  swipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipeRefreshLayout);
  gradient=findViewById(R.id.gradient);
  divider=findViewById(R.id.divider);
  progressBar=(ProgressBar)findViewById(R.id.progressBar);
  menuLayout=(RelativeLayout)findViewById(R.id.menuLayout);
  shadowLayout=(ShadowLayout)findViewById(R.id.shadowLayout);
  menuBackground=(LinearLayout)findViewById(R.id.menuBackground);
  menuRefresh=(LinearLayout)findViewById(R.id.menuRefresh);
  menuRefreshTv=(TextView)findViewById(R.id.menuRefreshTv);
  menuShareVia=(LinearLayout)findViewById(R.id.menuShareVia);
  menuShareViaTv=(TextView)findViewById(R.id.menuShareViaTv);
  menuCopyLink=(LinearLayout)findViewById(R.id.menuCopyLink);
  menuCopyLinkTv=(TextView)findViewById(R.id.menuCopyLinkTv);
  menuOpenWith=(LinearLayout)findViewById(R.id.menuOpenWith);
  menuOpenWithTv=(TextView)findViewById(R.id.menuOpenWithTv);
  webLayout=(FrameLayout)findViewById(R.id.webLayout);
  webView=new WebView(getApplicationContext());
  webLayout.addView(webView);
}",0.9411764705882352
13360,"protected void updateIcon(ImageButton icon,@DrawableRes int drawableRes){
  VectorDrawableCompat drawable=(VectorDrawableCompat)ContextCompat.getDrawable(this,drawableRes);
  int[][] states=new int[][]{new int[]{-android.R.attr.state_enabled},new int[]{android.R.attr.state_pressed},new int[]{}};
  int[] colors=new int[]{iconDisabledColor,iconPressedColor,iconDefaultColor};
  ColorStateList colorStateList=new ColorStateList(states,colors);
  drawable.setTintList(colorStateList);
  icon.setImageDrawable(drawable);
}","protected void updateIcon(ImageButton icon,@DrawableRes int drawableRes){
  int[][] states=new int[][]{new int[]{-android.R.attr.state_enabled},new int[]{android.R.attr.state_pressed},new int[]{}};
  int[] colors=new int[]{iconDisabledColor,iconPressedColor,iconDefaultColor};
  ColorStateList colorStateList=new ColorStateList(states,colors);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    VectorDrawable drawable=(VectorDrawable)ContextCompat.getDrawable(this,drawableRes);
    drawable.setTintList(colorStateList);
    icon.setImageDrawable(drawable);
  }
 else {
    VectorDrawableCompat drawable=(VectorDrawableCompat)ContextCompat.getDrawable(this,drawableRes);
    drawable.setTintList(colorStateList);
    icon.setImageDrawable(drawable);
  }
}",0.5933384972889233
13361,"@Override public void onProgressChanged(WebView view,int progress){
  if (progress == 100)   progress=0;
  progressBar.setProgress(progress);
  if (showSwipeRefreshLayout) {
    if (swipeRefreshLayout.isRefreshing() && progress == 0) {
      swipeRefreshLayout.post(new Runnable(){
        @Override public void run(){
          swipeRefreshLayout.setRefreshing(false);
        }
      }
);
    }
    if (!swipeRefreshLayout.isRefreshing() && progress != 0) {
      swipeRefreshLayout.post(new Runnable(){
        @Override public void run(){
          swipeRefreshLayout.setRefreshing(true);
        }
      }
);
    }
  }
}","@Override public void onProgressChanged(WebView view,int progress){
  if (showSwipeRefreshLayout) {
    if (swipeRefreshLayout.isRefreshing() && progress == 100) {
      swipeRefreshLayout.post(new Runnable(){
        @Override public void run(){
          swipeRefreshLayout.setRefreshing(false);
        }
      }
);
    }
    if (!swipeRefreshLayout.isRefreshing() && progress != 100) {
      swipeRefreshLayout.post(new Runnable(){
        @Override public void run(){
          swipeRefreshLayout.setRefreshing(true);
        }
      }
);
    }
  }
  if (progress == 100)   progress=0;
  progressBar.setProgress(progress);
}",0.226475279106858
13362,"protected void getOptions(){
  Intent intent=getIntent();
  if (intent == null)   return;
  TypedValue typedValue=new TypedValue();
  TypedArray a=obtainStyledAttributes(typedValue.data,new int[]{R.attr.colorPrimaryDark,R.attr.colorPrimary,R.attr.colorAccent,android.R.attr.textColorPrimary,android.R.attr.textColorSecondary});
  int colorPrimaryDark=a.getColor(0,ContextCompat.getColor(this,R.color.finestGray));
  int colorPrimary=a.getColor(1,ContextCompat.getColor(this,R.color.finestWhite));
  int colorAccent=a.getColor(2,ContextCompat.getColor(this,R.color.finestBlack));
  int textColorPrimary=a.getColor(3,ContextCompat.getColor(this,R.color.finestBlack));
  int textColorSecondary=a.getColor(4,ContextCompat.getColor(this,R.color.finestSilver));
  a.recycle();
  statusBarColor=intent.getIntExtra(""String_Node_Str"",colorPrimaryDark);
  toolbarColor=intent.getIntExtra(""String_Node_Str"",colorPrimary);
  toolbarScrollFlags=intent.getIntExtra(""String_Node_Str"",AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS);
  iconDefaultColor=intent.getIntExtra(""String_Node_Str"",colorAccent);
  iconDisabledColor=intent.getIntExtra(""String_Node_Str"",ColorHelper.disableColor(iconDefaultColor));
  iconPressedColor=intent.getIntExtra(""String_Node_Str"",iconDefaultColor);
  iconSelector=intent.getIntExtra(""String_Node_Str"",R.drawable.selector_grey);
  showSwipeRefreshLayout=intent.getBooleanExtra(""String_Node_Str"",false);
  swipeRefreshColor=intent.getIntExtra(""String_Node_Str"",colorAccent);
  swipeRefreshColors=intent.getIntArrayExtra(""String_Node_Str"");
  showDivider=intent.getBooleanExtra(""String_Node_Str"",true);
  gradientDivider=intent.getBooleanExtra(""String_Node_Str"",true);
  dividerColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestBlack10));
  dividerHeight=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultDividerHeight));
  showProgressBar=intent.getBooleanExtra(""String_Node_Str"",true);
  progressBarColor=intent.getIntExtra(""String_Node_Str"",colorAccent);
  progressBarHeight=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultProgressBarHeight));
  progressBarPosition=Position.fromSerializable(intent.getSerializableExtra(""String_Node_Str""));
  titleDefault=intent.getStringExtra(""String_Node_Str"");
  updateTitleFromHtml=intent.getBooleanExtra(""String_Node_Str"",true);
  titleSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultTitleSize));
  titleFont=intent.getStringExtra(""String_Node_Str"") == null ? ""String_Node_Str"" : intent.getStringExtra(""String_Node_Str"");
  titleColor=intent.getIntExtra(""String_Node_Str"",textColorPrimary);
  showUrl=intent.getBooleanExtra(""String_Node_Str"",true);
  urlSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultUrlSize));
  urlFont=intent.getStringExtra(""String_Node_Str"") == null ? ""String_Node_Str"" : intent.getStringExtra(""String_Node_Str"");
  urlColor=intent.getIntExtra(""String_Node_Str"",textColorSecondary);
  menuColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestWhite));
  menuDropShadowColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestBlack10));
  menuDropShadowSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultMenuDropShadowSize));
  menuSelector=intent.getIntExtra(""String_Node_Str"",R.drawable.selector_grey);
  menuTextSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultMenuTextSize));
  menuTextFont=intent.getStringExtra(""String_Node_Str"") == null ? ""String_Node_Str"" : intent.getStringExtra(""String_Node_Str"");
  menuTextColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestBlack));
  showMenuRefresh=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResRefresh=intent.getIntExtra(""String_Node_Str"",R.string.refresh);
  showMenuShareVia=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResShareVia=intent.getIntExtra(""String_Node_Str"",R.string.share_via);
  showMenuCopyLink=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResCopyLink=intent.getIntExtra(""String_Node_Str"",R.string.copy_link);
  showMenuOpenWith=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResOpenWith=intent.getIntExtra(""String_Node_Str"",R.string.open_with);
  animationCloseEnter=intent.getIntExtra(""String_Node_Str"",R.anim.modal_activity_close_enter);
  animationCloseExit=intent.getIntExtra(""String_Node_Str"",R.anim.modal_activity_close_exit);
  backPressToClose=intent.getBooleanExtra(""String_Node_Str"",false);
  stringResCopiedToClipboard=intent.getIntExtra(""String_Node_Str"",R.string.copied_to_clipboard);
  webViewJavaScriptEnabled=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewAppCacheEnabled=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewAllowFileAccess=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewUseWideViewPort=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewLoadWithOverviewMode=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewDomStorageEnabled=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewBuiltInZoomControls=intent.getBooleanExtra(""String_Node_Str"",false);
  webViewDisplayZoomControls=intent.getBooleanExtra(""String_Node_Str"",false);
  webViewDesktopMode=intent.getBooleanExtra(""String_Node_Str"",false);
  url=intent.getStringExtra(""String_Node_Str"");
}","protected void getOptions(){
  Intent intent=getIntent();
  if (intent == null)   return;
  TypedValue typedValue=new TypedValue();
  TypedArray a=obtainStyledAttributes(typedValue.data,new int[]{R.attr.colorPrimaryDark,R.attr.colorPrimary,R.attr.colorAccent,android.R.attr.textColorPrimary,android.R.attr.textColorSecondary});
  int colorPrimaryDark=a.getColor(0,ContextCompat.getColor(this,R.color.finestGray));
  int colorPrimary=a.getColor(1,ContextCompat.getColor(this,R.color.finestWhite));
  int colorAccent=a.getColor(2,ContextCompat.getColor(this,R.color.finestBlack));
  int textColorPrimary=a.getColor(3,ContextCompat.getColor(this,R.color.finestBlack));
  int textColorSecondary=a.getColor(4,ContextCompat.getColor(this,R.color.finestSilver));
  a.recycle();
  statusBarColor=intent.getIntExtra(""String_Node_Str"",colorPrimaryDark);
  toolbarColor=intent.getIntExtra(""String_Node_Str"",colorPrimary);
  toolbarScrollFlags=intent.getIntExtra(""String_Node_Str"",AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS);
  iconDefaultColor=intent.getIntExtra(""String_Node_Str"",colorAccent);
  iconDisabledColor=intent.getIntExtra(""String_Node_Str"",ColorHelper.disableColor(iconDefaultColor));
  iconPressedColor=intent.getIntExtra(""String_Node_Str"",iconDefaultColor);
  iconSelector=intent.getIntExtra(""String_Node_Str"",R.drawable.selector_grey);
  showSwipeRefreshLayout=intent.getBooleanExtra(""String_Node_Str"",true);
  swipeRefreshColor=intent.getIntExtra(""String_Node_Str"",colorAccent);
  swipeRefreshColors=intent.getIntArrayExtra(""String_Node_Str"");
  showDivider=intent.getBooleanExtra(""String_Node_Str"",true);
  gradientDivider=intent.getBooleanExtra(""String_Node_Str"",true);
  dividerColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestBlack10));
  dividerHeight=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultDividerHeight));
  showProgressBar=intent.getBooleanExtra(""String_Node_Str"",true);
  progressBarColor=intent.getIntExtra(""String_Node_Str"",colorAccent);
  progressBarHeight=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultProgressBarHeight));
  progressBarPosition=Position.fromSerializable(intent.getSerializableExtra(""String_Node_Str""));
  titleDefault=intent.getStringExtra(""String_Node_Str"");
  updateTitleFromHtml=intent.getBooleanExtra(""String_Node_Str"",true);
  titleSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultTitleSize));
  titleFont=intent.getStringExtra(""String_Node_Str"") == null ? ""String_Node_Str"" : intent.getStringExtra(""String_Node_Str"");
  titleColor=intent.getIntExtra(""String_Node_Str"",textColorPrimary);
  showUrl=intent.getBooleanExtra(""String_Node_Str"",true);
  urlSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultUrlSize));
  urlFont=intent.getStringExtra(""String_Node_Str"") == null ? ""String_Node_Str"" : intent.getStringExtra(""String_Node_Str"");
  urlColor=intent.getIntExtra(""String_Node_Str"",textColorSecondary);
  menuColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestWhite));
  menuDropShadowColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestBlack10));
  menuDropShadowSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultMenuDropShadowSize));
  menuSelector=intent.getIntExtra(""String_Node_Str"",R.drawable.selector_grey);
  menuTextSize=intent.getFloatExtra(""String_Node_Str"",getResources().getDimension(R.dimen.defaultMenuTextSize));
  menuTextFont=intent.getStringExtra(""String_Node_Str"") == null ? ""String_Node_Str"" : intent.getStringExtra(""String_Node_Str"");
  menuTextColor=intent.getIntExtra(""String_Node_Str"",ContextCompat.getColor(this,R.color.finestBlack));
  showMenuRefresh=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResRefresh=intent.getIntExtra(""String_Node_Str"",R.string.refresh);
  showMenuShareVia=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResShareVia=intent.getIntExtra(""String_Node_Str"",R.string.share_via);
  showMenuCopyLink=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResCopyLink=intent.getIntExtra(""String_Node_Str"",R.string.copy_link);
  showMenuOpenWith=intent.getBooleanExtra(""String_Node_Str"",true);
  stringResOpenWith=intent.getIntExtra(""String_Node_Str"",R.string.open_with);
  animationCloseEnter=intent.getIntExtra(""String_Node_Str"",R.anim.modal_activity_close_enter);
  animationCloseExit=intent.getIntExtra(""String_Node_Str"",R.anim.modal_activity_close_exit);
  backPressToClose=intent.getBooleanExtra(""String_Node_Str"",false);
  stringResCopiedToClipboard=intent.getIntExtra(""String_Node_Str"",R.string.copied_to_clipboard);
  webViewJavaScriptEnabled=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewAppCacheEnabled=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewAllowFileAccess=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewUseWideViewPort=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewLoadWithOverviewMode=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewDomStorageEnabled=intent.getBooleanExtra(""String_Node_Str"",true);
  webViewBuiltInZoomControls=intent.getBooleanExtra(""String_Node_Str"",false);
  webViewDisplayZoomControls=intent.getBooleanExtra(""String_Node_Str"",false);
  webViewDesktopMode=intent.getBooleanExtra(""String_Node_Str"",false);
  url=intent.getStringExtra(""String_Node_Str"");
}",0.9993638098700356
13363,"public void onClick(View view){
  if (view.getId() == R.id.defaultTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").showSwipeRefreshLayout(true).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.redTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").statusBarColorRes(R.color.redStatusBar).toolbarColorRes(R.color.redNavBar).titleColorRes(R.color.finestWhite).urlColorRes(R.color.redUrlText).iconDefaultColorRes(R.color.finestWhite).iconSelector(R.drawable.selector_white).progressBarColorRes(R.color.finestWhite).webViewBuiltInZoomControls(true).webViewDisplayZoomControls(true).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.activity_open_enter,R.anim.activity_open_exit,R.anim.activity_close_enter,R.anim.activity_close_exit).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blueTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.blueStatusBar).toolbarColorRes(R.color.blueNavBar).titleColorRes(R.color.finestWhite).urlColorRes(R.color.blueUrlText).iconDefaultColorRes(R.color.finestWhite).iconSelector(R.drawable.selector_white).progressBarColorRes(R.color.finestWhite).showSwipeRefreshLayout(true).swipeRefreshColorRes(R.color.blueNavBar).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_up,R.anim.hold,R.anim.hold,R.anim.slide_down).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blackTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.blackStatusBar).toolbarColorRes(R.color.blackNavBar).titleColorRes(R.color.finestWhite).urlColorRes(R.color.blackUrlText).iconDefaultColorRes(R.color.finestWhite).iconSelector(R.drawable.selector_white).progressBarColorRes(R.color.finestWhite).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_left_in,R.anim.hold,R.anim.hold,R.anim.slide_right_out).show(""String_Node_Str"");
  }
}","public void onClick(View view){
  if (view.getId() == R.id.defaultTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.redTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").statusBarColorRes(R.color.redStatusBar).toolbarColorRes(R.color.redNavBar).titleColorRes(R.color.finestWhite).urlColorRes(R.color.redUrlText).iconDefaultColorRes(R.color.finestWhite).iconSelector(R.drawable.selector_white).progressBarColorRes(R.color.finestWhite).webViewBuiltInZoomControls(true).webViewDisplayZoomControls(true).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.activity_open_enter,R.anim.activity_open_exit,R.anim.activity_close_enter,R.anim.activity_close_exit).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blueTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.blueStatusBar).toolbarColorRes(R.color.blueNavBar).titleColorRes(R.color.finestWhite).urlColorRes(R.color.blueUrlText).iconDefaultColorRes(R.color.finestWhite).iconSelector(R.drawable.selector_white).progressBarColorRes(R.color.finestWhite).showSwipeRefreshLayout(true).swipeRefreshColorRes(R.color.blueNavBar).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_up,R.anim.hold,R.anim.hold,R.anim.slide_down).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blackTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.blackStatusBar).toolbarColorRes(R.color.blackNavBar).titleColorRes(R.color.finestWhite).urlColorRes(R.color.blackUrlText).iconDefaultColorRes(R.color.finestWhite).iconSelector(R.drawable.selector_white).progressBarColorRes(R.color.finestWhite).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_left_in,R.anim.hold,R.anim.hold,R.anim.slide_right_out).show(""String_Node_Str"");
  }
}",0.9928021841648051
13364,"protected void initializeViews(){
  setSupportActionBar(toolbar);
{
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      Window window=getWindow();
      window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
      window.setStatusBarColor(statusBarColor);
    }
  }
{
    appBar.addOnOffsetChangedListener(this);
  }
{
    toolbar.setBackgroundColor(toolbarColor);
    AppBarLayout.LayoutParams params=(AppBarLayout.LayoutParams)toolbar.getLayoutParams();
    params.setScrollFlags(toolbarScrollFlags);
    toolbar.setLayoutParams(params);
  }
{
    title.setText(titleDefault);
    title.setTextSize(TypedValue.COMPLEX_UNIT_PX,titleSize);
    title.setTypeface(TypefaceHelper.get(this,titleFont));
    title.setTextColor(titleColor);
    urlTv.setText(UrlParser.getHost(url));
    urlTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,urlSize);
    urlTv.setTypeface(TypefaceHelper.get(this,urlFont));
    urlTv.setTextColor(urlColor);
    requestCenterLayout();
  }
{
    close.setBackgroundResource(iconSelector);
    back.setBackgroundResource(iconSelector);
    forward.setBackgroundResource(iconSelector);
    more.setBackgroundResource(iconSelector);
    if (showMenuRefresh || showMenuShareVia || showMenuCopyLink|| showMenuOpenWith)     more.setVisibility(View.VISIBLE);
 else     more.setVisibility(View.GONE);
  }
{
    webView.setWebChromeClient(new MyWebChromeClient());
    webView.setWebViewClient(new MyWebViewClient());
    webView.getSettings().setJavaScriptEnabled(webViewJavaScriptEnabled);
    webView.getSettings().setAppCacheEnabled(webViewAppCacheEnabled);
    webView.getSettings().setAllowFileAccess(webViewAllowFileAccess);
    webView.getSettings().setUseWideViewPort(webViewUseWideViewPort);
    webView.getSettings().setLoadWithOverviewMode(webViewLoadWithOverviewMode);
    webView.getSettings().setDomStorageEnabled(webViewDomStorageEnabled);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)     webView.getSettings().setDisplayZoomControls(webViewDisplayZoomControls);
    webView.getSettings().setBuiltInZoomControls(webViewBuiltInZoomControls);
    if (webViewBuiltInZoomControls) {
      ((ViewGroup)webView.getParent()).removeAllViews();
      swipeRefreshLayout.addView(webView);
      swipeRefreshLayout.removeViewAt(1);
    }
    if (webViewDesktopMode)     webView.getSettings().setUserAgentString(""String_Node_Str"");
    webView.loadUrl(url);
  }
{
    swipeRefreshLayout.setEnabled(showSwipeRefreshLayout);
    if (showSwipeRefreshLayout) {
      swipeRefreshLayout.post(new Runnable(){
        @Override public void run(){
          swipeRefreshLayout.setRefreshing(true);
        }
      }
);
    }
    if (swipeRefreshColors == null)     swipeRefreshLayout.setColorSchemeColors(swipeRefreshColor);
 else     swipeRefreshLayout.setColorSchemeColors(swipeRefreshColors);
    swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
      @Override public void onRefresh(){
        webView.reload();
      }
    }
);
  }
{
    gradient.setVisibility(showDivider && gradientDivider ? View.VISIBLE : View.GONE);
    divider.setVisibility(showDivider && !gradientDivider ? View.VISIBLE : View.GONE);
    if (gradientDivider) {
      int dividerWidth=ScreenHelper.getWidth(this);
      Bitmap bitmap=BitmapHelper.getGradientBitmap(dividerWidth,(int)dividerHeight,dividerColor);
      BitmapDrawable drawable=new BitmapDrawable(getResources(),bitmap);
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        gradient.setBackgroundDrawable(drawable);
      }
 else {
        gradient.setBackground(drawable);
      }
      CoordinatorLayout.LayoutParams params=(CoordinatorLayout.LayoutParams)gradient.getLayoutParams();
      params.height=(int)dividerHeight;
      gradient.setLayoutParams(params);
    }
 else {
      divider.setBackgroundColor(dividerColor);
      LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)divider.getLayoutParams();
      params.height=(int)dividerHeight;
      divider.setLayoutParams(params);
    }
  }
{
    progressBar.setVisibility(showProgressBar ? View.VISIBLE : View.GONE);
    progressBar.getProgressDrawable().setColorFilter(progressBarColor,PorterDuff.Mode.SRC_IN);
    progressBar.setMinimumHeight((int)progressBarHeight);
    CoordinatorLayout.LayoutParams params=new CoordinatorLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,(int)progressBarHeight);
    float toolbarHeight=getResources().getDimension(R.dimen.toolbarHeight);
switch (progressBarPosition) {
case TOP_OF_TOOLBAR:
      params.setMargins(0,0,0,0);
    break;
case BOTTON_OF_TOOLBAR:
  params.setMargins(0,(int)toolbarHeight - (int)progressBarHeight,0,0);
break;
case TOP_OF_WEBVIEW:
params.setMargins(0,(int)toolbarHeight,0,0);
break;
case BOTTOM_OF_WEBVIEW:
params.setMargins(0,ScreenHelper.getHeight(this) - (int)progressBarHeight,0,0);
break;
}
progressBar.setLayoutParams(params);
}
{
GradientDrawable drawable=new GradientDrawable();
drawable.setCornerRadius(getResources().getDimension(R.dimen.defaultMenuCornerRadius));
drawable.setColor(menuColor);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) menuBackground.setBackground(drawable);
 else menuBackground.setBackgroundDrawable(drawable);
shadowLayout.setShadowColor(menuDropShadowColor);
shadowLayout.setShadowSize(menuDropShadowSize);
RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)shadowLayout.getLayoutParams();
int margin=(int)(getResources().getDimension(R.dimen.defaultMenuLayoutMargin) - menuDropShadowSize);
params.setMargins(0,margin,margin,0);
shadowLayout.setLayoutParams(params);
menuRefresh.setVisibility(showMenuRefresh ? View.VISIBLE : View.GONE);
menuRefresh.setBackgroundResource(menuSelector);
menuRefreshTv.setText(stringResRefresh);
menuRefreshTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuRefreshTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuRefreshTv.setTextColor(menuTextColor);
menuShareVia.setVisibility(showMenuShareVia ? View.VISIBLE : View.GONE);
menuShareVia.setBackgroundResource(menuSelector);
menuShareViaTv.setText(stringResShareVia);
menuShareViaTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuShareViaTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuShareViaTv.setTextColor(menuTextColor);
menuCopyLink.setVisibility(showMenuCopyLink ? View.VISIBLE : View.GONE);
menuCopyLink.setBackgroundResource(menuSelector);
menuCopyLinkTv.setText(stringResCopyLink);
menuCopyLinkTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuCopyLinkTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuCopyLinkTv.setTextColor(menuTextColor);
menuOpenWith.setVisibility(showMenuOpenWith ? View.VISIBLE : View.GONE);
menuOpenWith.setBackgroundResource(menuSelector);
menuOpenWithTv.setText(stringResOpenWith);
menuOpenWithTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuOpenWithTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuOpenWithTv.setTextColor(menuTextColor);
}
}","protected void initializeViews(){
  setSupportActionBar(toolbar);
{
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      Window window=getWindow();
      window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
      window.setStatusBarColor(statusBarColor);
    }
  }
{
    appBar.addOnOffsetChangedListener(this);
  }
{
    toolbar.setBackgroundColor(toolbarColor);
    AppBarLayout.LayoutParams params=(AppBarLayout.LayoutParams)toolbar.getLayoutParams();
    params.setScrollFlags(toolbarScrollFlags);
    toolbar.setLayoutParams(params);
  }
{
    title.setText(titleDefault);
    title.setTextSize(TypedValue.COMPLEX_UNIT_PX,titleSize);
    title.setTypeface(TypefaceHelper.get(this,titleFont));
    title.setTextColor(titleColor);
    urlTv.setVisibility(showUrl ? View.VISIBLE : View.GONE);
    urlTv.setText(UrlParser.getHost(url));
    urlTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,urlSize);
    urlTv.setTypeface(TypefaceHelper.get(this,urlFont));
    urlTv.setTextColor(urlColor);
    requestCenterLayout();
  }
{
    close.setBackgroundResource(iconSelector);
    back.setBackgroundResource(iconSelector);
    forward.setBackgroundResource(iconSelector);
    more.setBackgroundResource(iconSelector);
    if (showMenuRefresh || showMenuShareVia || showMenuCopyLink|| showMenuOpenWith)     more.setVisibility(View.VISIBLE);
 else     more.setVisibility(View.GONE);
  }
{
    webView.setWebChromeClient(new MyWebChromeClient());
    webView.setWebViewClient(new MyWebViewClient());
    webView.getSettings().setJavaScriptEnabled(webViewJavaScriptEnabled);
    webView.getSettings().setAppCacheEnabled(webViewAppCacheEnabled);
    webView.getSettings().setAllowFileAccess(webViewAllowFileAccess);
    webView.getSettings().setUseWideViewPort(webViewUseWideViewPort);
    webView.getSettings().setLoadWithOverviewMode(webViewLoadWithOverviewMode);
    webView.getSettings().setDomStorageEnabled(webViewDomStorageEnabled);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)     webView.getSettings().setDisplayZoomControls(webViewDisplayZoomControls);
    webView.getSettings().setBuiltInZoomControls(webViewBuiltInZoomControls);
    if (webViewBuiltInZoomControls) {
      ((ViewGroup)webView.getParent()).removeAllViews();
      swipeRefreshLayout.addView(webView);
      swipeRefreshLayout.removeViewAt(1);
    }
    if (webViewDesktopMode)     webView.getSettings().setUserAgentString(""String_Node_Str"");
    webView.loadUrl(url);
  }
{
    swipeRefreshLayout.setEnabled(showSwipeRefreshLayout);
    if (showSwipeRefreshLayout) {
      swipeRefreshLayout.post(new Runnable(){
        @Override public void run(){
          swipeRefreshLayout.setRefreshing(true);
        }
      }
);
    }
    if (swipeRefreshColors == null)     swipeRefreshLayout.setColorSchemeColors(swipeRefreshColor);
 else     swipeRefreshLayout.setColorSchemeColors(swipeRefreshColors);
    swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
      @Override public void onRefresh(){
        webView.reload();
      }
    }
);
  }
{
    gradient.setVisibility(showDivider && gradientDivider ? View.VISIBLE : View.GONE);
    divider.setVisibility(showDivider && !gradientDivider ? View.VISIBLE : View.GONE);
    if (gradientDivider) {
      int dividerWidth=ScreenHelper.getWidth(this);
      Bitmap bitmap=BitmapHelper.getGradientBitmap(dividerWidth,(int)dividerHeight,dividerColor);
      BitmapDrawable drawable=new BitmapDrawable(getResources(),bitmap);
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        gradient.setBackgroundDrawable(drawable);
      }
 else {
        gradient.setBackground(drawable);
      }
      CoordinatorLayout.LayoutParams params=(CoordinatorLayout.LayoutParams)gradient.getLayoutParams();
      params.height=(int)dividerHeight;
      gradient.setLayoutParams(params);
    }
 else {
      divider.setBackgroundColor(dividerColor);
      LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)divider.getLayoutParams();
      params.height=(int)dividerHeight;
      divider.setLayoutParams(params);
    }
  }
{
    progressBar.setVisibility(showProgressBar ? View.VISIBLE : View.GONE);
    progressBar.getProgressDrawable().setColorFilter(progressBarColor,PorterDuff.Mode.SRC_IN);
    progressBar.setMinimumHeight((int)progressBarHeight);
    CoordinatorLayout.LayoutParams params=new CoordinatorLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,(int)progressBarHeight);
    float toolbarHeight=getResources().getDimension(R.dimen.toolbarHeight);
switch (progressBarPosition) {
case TOP_OF_TOOLBAR:
      params.setMargins(0,0,0,0);
    break;
case BOTTON_OF_TOOLBAR:
  params.setMargins(0,(int)toolbarHeight - (int)progressBarHeight,0,0);
break;
case TOP_OF_WEBVIEW:
params.setMargins(0,(int)toolbarHeight,0,0);
break;
case BOTTOM_OF_WEBVIEW:
params.setMargins(0,ScreenHelper.getHeight(this) - (int)progressBarHeight,0,0);
break;
}
progressBar.setLayoutParams(params);
}
{
GradientDrawable drawable=new GradientDrawable();
drawable.setCornerRadius(getResources().getDimension(R.dimen.defaultMenuCornerRadius));
drawable.setColor(menuColor);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) menuBackground.setBackground(drawable);
 else menuBackground.setBackgroundDrawable(drawable);
shadowLayout.setShadowColor(menuDropShadowColor);
shadowLayout.setShadowSize(menuDropShadowSize);
RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)shadowLayout.getLayoutParams();
int margin=(int)(getResources().getDimension(R.dimen.defaultMenuLayoutMargin) - menuDropShadowSize);
params.setMargins(0,margin,margin,0);
shadowLayout.setLayoutParams(params);
menuRefresh.setVisibility(showMenuRefresh ? View.VISIBLE : View.GONE);
menuRefresh.setBackgroundResource(menuSelector);
menuRefreshTv.setText(stringResRefresh);
menuRefreshTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuRefreshTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuRefreshTv.setTextColor(menuTextColor);
menuShareVia.setVisibility(showMenuShareVia ? View.VISIBLE : View.GONE);
menuShareVia.setBackgroundResource(menuSelector);
menuShareViaTv.setText(stringResShareVia);
menuShareViaTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuShareViaTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuShareViaTv.setTextColor(menuTextColor);
menuCopyLink.setVisibility(showMenuCopyLink ? View.VISIBLE : View.GONE);
menuCopyLink.setBackgroundResource(menuSelector);
menuCopyLinkTv.setText(stringResCopyLink);
menuCopyLinkTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuCopyLinkTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuCopyLinkTv.setTextColor(menuTextColor);
menuOpenWith.setVisibility(showMenuOpenWith ? View.VISIBLE : View.GONE);
menuOpenWith.setBackgroundResource(menuSelector);
menuOpenWithTv.setText(stringResOpenWith);
menuOpenWithTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,menuTextSize);
menuOpenWithTv.setTypeface(TypefaceHelper.get(this,menuTextFont));
menuOpenWithTv.setTextColor(menuTextColor);
}
}",0.9957220001402622
13365,"public void onClick(View view){
  if (view.getId() == R.id.defaultTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.redTheme) {
    new FinestWebView.Builder(this).theme(R.style.FinestWebViewTheme).titleDefault(""String_Node_Str"").statusBarColorRes(R.color.redPrimaryDark).toolbarColorRes(R.color.redPrimary).titleColorRes(R.color.finestWhite).urlColorRes(R.color.redPrimaryLight).iconDefaultColorRes(R.color.finestWhite).progressBarColorRes(R.color.finestWhite).webViewBuiltInZoomControls(true).webViewDisplayZoomControls(true).swipeRefreshColorRes(R.color.redPrimaryDark).menuColorRes(R.color.redPrimaryDark).menuTextColorRes(R.color.finestWhite).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.activity_open_enter,R.anim.activity_open_exit,R.anim.activity_close_enter,R.anim.activity_close_exit).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blueTheme) {
    new FinestWebView.Builder(this).theme(R.style.FinestWebViewTheme).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.bluePrimaryDark).toolbarColorRes(R.color.bluePrimary).titleColorRes(R.color.finestWhite).urlColorRes(R.color.bluePrimaryLight).iconDefaultColorRes(R.color.finestWhite).progressBarColorRes(R.color.finestWhite).showSwipeRefreshLayout(true).swipeRefreshColorRes(R.color.bluePrimaryDark).menuSelector(R.drawable.selector_light_theme).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_up,R.anim.hold,R.anim.hold,R.anim.slide_down).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blackTheme) {
    new FinestWebView.Builder(this).theme(R.style.FinestWebViewTheme).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.blackPrimaryDark).toolbarColorRes(R.color.blackPrimary).titleColorRes(R.color.finestWhite).urlColorRes(R.color.blackPrimaryLight).iconDefaultColorRes(R.color.finestWhite).progressBarColorRes(R.color.finestWhite).swipeRefreshColorRes(R.color.blackPrimaryDark).menuSelector(R.drawable.selector_light_theme).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_left_in,R.anim.hold,R.anim.hold,R.anim.slide_right_out).show(""String_Node_Str"");
  }
}","public void onClick(View view){
  if (view.getId() == R.id.defaultTheme) {
    new FinestWebView.Builder(this).titleDefault(""String_Node_Str"").show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.redTheme) {
    new FinestWebView.Builder(this).theme(R.style.FinestWebViewTheme).titleDefault(""String_Node_Str"").statusBarColorRes(R.color.redPrimaryDark).toolbarColorRes(R.color.redPrimary).titleColorRes(R.color.finestWhite).urlColorRes(R.color.redPrimaryLight).iconDefaultColorRes(R.color.finestWhite).progressBarColorRes(R.color.finestWhite).webViewBuiltInZoomControls(true).webViewDisplayZoomControls(true).swipeRefreshColorRes(R.color.redPrimaryDark).menuColorRes(R.color.redPrimaryDark).menuTextColorRes(R.color.finestWhite).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.activity_open_enter,R.anim.activity_open_exit,R.anim.activity_close_enter,R.anim.activity_close_exit).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blueTheme) {
    new FinestWebView.Builder(this).theme(R.style.FinestWebViewTheme).titleDefault(""String_Node_Str"").showUrl(false).toolbarScrollFlags(0).statusBarColorRes(R.color.bluePrimaryDark).toolbarColorRes(R.color.bluePrimary).titleColorRes(R.color.finestWhite).urlColorRes(R.color.bluePrimaryLight).iconDefaultColorRes(R.color.finestWhite).progressBarColorRes(R.color.finestWhite).showSwipeRefreshLayout(true).swipeRefreshColorRes(R.color.bluePrimaryDark).menuSelector(R.drawable.selector_light_theme).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_up,R.anim.hold,R.anim.hold,R.anim.slide_down).show(""String_Node_Str"");
  }
 else   if (view.getId() == R.id.blackTheme) {
    new FinestWebView.Builder(this).theme(R.style.FinestWebViewTheme).titleDefault(""String_Node_Str"").toolbarScrollFlags(0).statusBarColorRes(R.color.blackPrimaryDark).toolbarColorRes(R.color.blackPrimary).titleColorRes(R.color.finestWhite).urlColorRes(R.color.blackPrimaryLight).iconDefaultColorRes(R.color.finestWhite).progressBarColorRes(R.color.finestWhite).swipeRefreshColorRes(R.color.blackPrimaryDark).menuSelector(R.drawable.selector_light_theme).dividerHeight(0).gradientDivider(false).setCustomAnimations(R.anim.slide_left_in,R.anim.hold,R.anim.hold,R.anim.slide_right_out).show(""String_Node_Str"");
  }
}",0.9967069154774972
13366,"@Override public void onDetach(){
  super.onDetach();
  mWebview.destroy();
}","@Override public void onDetach(){
  super.onDetach();
  mView.removeView(mWebview);
  mWebview.removeAllViews();
  mWebview.destroy();
}",0.7230046948356808
13367,"@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.mFileContainer.setVisibility(View.GONE);
    mImageManager.load(holder.mImageView,ImageType.PHOTO,""String_Node_Str"",ScaleType.CENTER_CROP);
  }
 else   if (isImage) {
    holder.mFileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,media.getFilePath(),ScaleType.CENTER_CROP);
    }
 else {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,getBestImageUrl(media),ScaleType.CENTER_CROP);
    }
  }
 else   if (media.isVideo()) {
    holder.mFileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.mImageView);
  }
 else {
    mImageManager.cancelRequestAndClearImageView(holder.mImageView);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.mFileContainer.setVisibility(View.VISIBLE);
    holder.mTitleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.mFileTypeView.setText(fileExtension.toUpperCase(Locale.ROOT));
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.mFileTypeImageView.setImageResource(placeholderResId);
  }
  holder.mImageView.setContentDescription(mContext.getString(R.string.media_grid_item_image_desc,StringUtils.notNullStr(media.getFileName())));
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.mSelectionCountContainer.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.mSelectionCountTextView.setText(String.format(Locale.getDefault(),""String_Node_Str"",count));
    }
 else {
      holder.mSelectionCountTextView.setText(null);
    }
  }
 else {
    holder.mSelectionCountContainer.setVisibility(View.GONE);
    holder.mSelectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.mImageView.getScaleX() != scale) {
    holder.mImageView.setScaleX(scale);
    holder.mImageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.mStateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.mProgressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.mRetryDeleteContainer.setVisibility(View.VISIBLE);
      holder.mImgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.mRetryDeleteContainer.setVisibility(View.GONE);
    }
    holder.mStateTextView.setText(getLabelForMediaUploadState(state));
    holder.mVideoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.mStateContainer.setVisibility(View.GONE);
    holder.mStateContainer.setOnClickListener(null);
    holder.mVideoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}","@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.mFileContainer.setVisibility(View.GONE);
    mImageManager.load(holder.mImageView,ImageType.PHOTO,""String_Node_Str"",ScaleType.CENTER_CROP);
  }
 else   if (isImage) {
    holder.mFileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,media.getFilePath(),ScaleType.CENTER_CROP);
    }
 else {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,getBestImageUrl(media),ScaleType.CENTER_CROP);
    }
  }
 else   if (media.isVideo()) {
    holder.mFileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.mImageView);
  }
 else {
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.mFileContainer.setVisibility(View.VISIBLE);
    holder.mTitleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.mFileTypeView.setText(fileExtension.toUpperCase(Locale.ROOT));
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.mFileTypeImageView.setImageResource(placeholderResId);
  }
  holder.mImageView.setContentDescription(mContext.getString(R.string.media_grid_item_image_desc,StringUtils.notNullStr(media.getFileName())));
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.mSelectionCountContainer.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.mSelectionCountTextView.setText(String.format(Locale.getDefault(),""String_Node_Str"",count));
    }
 else {
      holder.mSelectionCountTextView.setText(null);
    }
  }
 else {
    holder.mSelectionCountContainer.setVisibility(View.GONE);
    holder.mSelectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.mImageView.getScaleX() != scale) {
    holder.mImageView.setScaleX(scale);
    holder.mImageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.mStateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.mProgressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.mRetryDeleteContainer.setVisibility(View.VISIBLE);
      holder.mImgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.mRetryDeleteContainer.setVisibility(View.GONE);
    }
    holder.mStateTextView.setText(getLabelForMediaUploadState(state));
    holder.mVideoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.mStateContainer.setVisibility(View.GONE);
    holder.mStateContainer.setOnClickListener(null);
    holder.mVideoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}",0.9909674041104856
13368,"@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.mFileContainer.setVisibility(View.GONE);
    mImageManager.load(holder.mImageView,ImageType.PHOTO,""String_Node_Str"",ScaleType.CENTER_CROP);
  }
 else   if (isImage) {
    holder.mFileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,media.getFilePath(),ScaleType.CENTER_CROP);
    }
 else {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,getBestImageUrl(media),ScaleType.CENTER_CROP);
    }
  }
 else   if (media.isVideo()) {
    holder.mFileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.mImageView);
  }
 else {
    holder.mImageView.setImageDrawable(null);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.mFileContainer.setVisibility(View.VISIBLE);
    holder.mTitleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.mFileTypeView.setText(fileExtension.toUpperCase(Locale.ROOT));
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.mFileTypeImageView.setImageResource(placeholderResId);
  }
  holder.mImageView.setContentDescription(mContext.getString(R.string.media_grid_item_image_desc,StringUtils.notNullStr(media.getFileName())));
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.mSelectionCountContainer.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.mSelectionCountTextView.setText(String.format(Locale.getDefault(),""String_Node_Str"",count));
    }
 else {
      holder.mSelectionCountTextView.setText(null);
    }
  }
 else {
    holder.mSelectionCountContainer.setVisibility(View.GONE);
    holder.mSelectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.mImageView.getScaleX() != scale) {
    holder.mImageView.setScaleX(scale);
    holder.mImageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.mStateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.mProgressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.mRetryDeleteContainer.setVisibility(View.VISIBLE);
      holder.mImgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.mRetryDeleteContainer.setVisibility(View.GONE);
    }
    holder.mStateTextView.setText(getLabelForMediaUploadState(state));
    holder.mVideoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.mStateContainer.setVisibility(View.GONE);
    holder.mStateContainer.setOnClickListener(null);
    holder.mVideoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}","@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.mFileContainer.setVisibility(View.GONE);
    mImageManager.load(holder.mImageView,ImageType.PHOTO,""String_Node_Str"",ScaleType.CENTER_CROP);
  }
 else   if (isImage) {
    holder.mFileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,media.getFilePath(),ScaleType.CENTER_CROP);
    }
 else {
      mImageManager.load(holder.mImageView,ImageType.PHOTO,getBestImageUrl(media),ScaleType.CENTER_CROP);
    }
  }
 else   if (media.isVideo()) {
    holder.mFileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.mImageView);
  }
 else {
    mImageManager.cancelRequestAndClearImageView(holder.mImageView);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.mFileContainer.setVisibility(View.VISIBLE);
    holder.mTitleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.mFileTypeView.setText(fileExtension.toUpperCase(Locale.ROOT));
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.mFileTypeImageView.setImageResource(placeholderResId);
  }
  holder.mImageView.setContentDescription(mContext.getString(R.string.media_grid_item_image_desc,StringUtils.notNullStr(media.getFileName())));
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.mSelectionCountContainer.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.mSelectionCountTextView.setText(String.format(Locale.getDefault(),""String_Node_Str"",count));
    }
 else {
      holder.mSelectionCountTextView.setText(null);
    }
  }
 else {
    holder.mSelectionCountContainer.setVisibility(View.GONE);
    holder.mSelectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.mImageView.getScaleX() != scale) {
    holder.mImageView.setScaleX(scale);
    holder.mImageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.mStateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.mProgressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.mRetryDeleteContainer.setVisibility(View.VISIBLE);
      holder.mImgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.mRetryDeleteContainer.setVisibility(View.GONE);
    }
    holder.mStateTextView.setText(getLabelForMediaUploadState(state));
    holder.mVideoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.mStateContainer.setVisibility(View.GONE);
    holder.mStateContainer.setOnClickListener(null);
    holder.mVideoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}",0.98711776187378
13369,"@Override public void onMessageReceived(RemoteMessage message){
  Map data=message.getData();
  AppLog.v(T.NOTIFS,""String_Node_Str"");
  if (data == null) {
    AppLog.v(T.NOTIFS,""String_Node_Str"");
    return;
  }
  if (!mAccountStore.hasAccessToken()) {
    return;
  }
  if (PUSH_TYPE_ZENDESK.equals(String.valueOf(data.get(""String_Node_Str"")))) {
    NOTIFICATION_HELPER.handleZendeskNotification(this);
  }
  synchronizedHandleDefaultPush(data);
}","@Override public void onMessageReceived(RemoteMessage message){
  Map data=message.getData();
  AppLog.v(T.NOTIFS,""String_Node_Str"");
  if (data == null) {
    AppLog.v(T.NOTIFS,""String_Node_Str"");
    return;
  }
  if (!mAccountStore.hasAccessToken()) {
    return;
  }
  if (PUSH_TYPE_ZENDESK.equals(String.valueOf(data.get(""String_Node_Str"")))) {
    String zendeskRequestId=String.valueOf(data.get(PUSH_ARG_ZENDESK_REQUEST_ID));
    if (!mZendeskHelper.refreshRequest(this,zendeskRequestId)) {
      NOTIFICATION_HELPER.handleZendeskNotification(this);
    }
  }
  synchronizedHandleDefaultPush(data);
}",0.8525519848771267
13370,"private void setCurrentTag(final ReaderTag tag){
  if (tag == null) {
    return;
  }
  if (isCurrentTag(tag) && hasPostAdapter() && getPostAdapter().isCurrentTag(tag)) {
    return;
  }
  mCurrentTag=tag;
switch (getPostListType()) {
case TAG_FOLLOWED:
    AppPrefs.setReaderTag(tag);
  break;
case TAG_PREVIEW:
mTagPreviewHistory.push(tag.getTagSlug());
break;
case BLOG_PREVIEW:
break;
case SEARCH_RESULTS:
break;
}
getPostAdapter().setCurrentTag(tag);
hideNewPostsBar();
showLoadingProgress(false);
updateCurrentTagIfTime();
}","private void setCurrentTag(final ReaderTag tag){
  if (tag == null) {
    return;
  }
  if (isCurrentTag(tag) && hasPostAdapter() && getPostAdapter().isCurrentTag(tag)) {
    return;
  }
  mCurrentTag=tag;
switch (getPostListType()) {
case TAG_FOLLOWED:
    AppPrefs.setReaderTag(tag);
  break;
case TAG_PREVIEW:
mTagPreviewHistory.push(tag.getTagSlug());
break;
case BLOG_PREVIEW:
case SEARCH_RESULTS:
break;
}
getPostAdapter().setCurrentTag(tag);
hideNewPostsBar();
showLoadingProgress(false);
updateCurrentTagIfTime();
}",0.99335232668566
13371,"/** 
 * Converts the entire log to plain text
 * @param context
 * @return The log as plain text
 */
public static synchronized String toPlainText(Context context){
  StringBuilder sb=new StringBuilder();
  sb.append(getAppInfoHeaderText(context)).append(""String_Node_Str"").append(getDeviceInfoHeaderText(context)).append(""String_Node_Str"");
  Iterator<LogEntry> it=mLogEntries.iterator();
  int lineNum=1;
  while (it.hasNext()) {
    LogEntry entry=it.next();
    sb.append(format(Locale.US,""String_Node_Str"",lineNum)).append(""String_Node_Str"").append(entry.formatLogDate()).append(""String_Node_Str"").append(entry.mLogTag.name()).append(""String_Node_Str"").append(entry.mLogText).append(""String_Node_Str"");
    lineNum++;
  }
  return sb.toString();
}","/** 
 * Converts the entire log to plain text
 * @param context
 * @return The log as plain text
 */
public static synchronized String toPlainText(Context context){
  StringBuilder sb=new StringBuilder();
  sb.append(getAppInfoHeaderText(context)).append(""String_Node_Str"").append(getDeviceInfoHeaderText(context)).append(""String_Node_Str"");
  Iterator<LogEntry> it=new ArrayList<>(mLogEntries).iterator();
  int lineNum=1;
  while (it.hasNext()) {
    LogEntry entry=it.next();
    sb.append(format(Locale.US,""String_Node_Str"",lineNum)).append(""String_Node_Str"").append(entry.formatLogDate()).append(""String_Node_Str"").append(entry.mLogTag.name()).append(""String_Node_Str"").append(entry.mLogText).append(""String_Node_Str"");
    lineNum++;
  }
  return sb.toString();
}",0.9875082182774492
13372,"/** 
 * Returns entire log as html for display (see AppLogViewerActivity)
 * @param context
 * @return Arraylist of Strings containing log messages
 */
public static ArrayList<String> toHtmlList(Context context){
  ArrayList<String> items=new ArrayList<String>();
  items.add(""String_Node_Str"" + getAppInfoHeaderText(context) + ""String_Node_Str"");
  items.add(""String_Node_Str"" + getDeviceInfoHeaderText(context) + ""String_Node_Str"");
  Iterator<LogEntry> it=mLogEntries.iterator();
  while (it.hasNext()) {
    items.add(it.next().toHtml());
  }
  return items;
}","/** 
 * Returns entire log as html for display (see AppLogViewerActivity)
 * @param context
 * @return Arraylist of Strings containing log messages
 */
public static ArrayList<String> toHtmlList(Context context){
  ArrayList<String> items=new ArrayList<String>();
  items.add(""String_Node_Str"" + getAppInfoHeaderText(context) + ""String_Node_Str"");
  items.add(""String_Node_Str"" + getDeviceInfoHeaderText(context) + ""String_Node_Str"");
  Iterator<LogEntry> it=new ArrayList<>(mLogEntries).iterator();
  while (it.hasNext()) {
    items.add(it.next().toHtml());
  }
  return items;
}",0.9851528384279477
13373,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError()) {
    if (mSelectedSite != null && event.error.type == AuthenticationErrorType.INVALID_TOKEN) {
      AuthenticationDialogUtils.showAuthErrorView(this,mSiteStore,mSelectedSite);
    }
    return;
  }
  if (mAccountStore.hasAccessToken()) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_IN);
    GCMRegistrationIntentService.enqueueWork(this,new Intent(this,GCMRegistrationIntentService.class));
    if (mIsMagicLinkLogin) {
      if (mIsMagicLinkSignup) {
        AppPrefs.setShouldTrackMagicLinkSignup(true);
        mDispatcher.dispatch(AccountActionBuilder.newFetchAccountAction());
        if (mJetpackConnectSource != null) {
          ActivityLauncher.continueJetpackConnect(this,mJetpackConnectSource,mSelectedSite);
        }
 else {
          ActivityLauncher.showSignupEpilogue(this,null,null,null,null,true);
        }
      }
 else {
        mLoginAnalyticsListener.trackLoginMagicLinkSucceeded();
        if (mJetpackConnectSource != null) {
          ActivityLauncher.continueJetpackConnect(this,mJetpackConnectSource,mSelectedSite);
        }
 else {
          ActivityLauncher.showLoginEpilogue(this,true,getIntent().getIntegerArrayListExtra(ARG_OLD_SITES_IDS));
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError()) {
    if (mSelectedSite != null && event.error.type == AuthenticationErrorType.INVALID_TOKEN) {
      AuthenticationDialogUtils.showAuthErrorView(this,mSiteStore,mSelectedSite);
    }
    return;
  }
  if (mAccountStore.hasAccessToken()) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_IN);
    if (mIsMagicLinkLogin) {
      if (mIsMagicLinkSignup) {
        AppPrefs.setShouldTrackMagicLinkSignup(true);
        mDispatcher.dispatch(AccountActionBuilder.newFetchAccountAction());
        if (mJetpackConnectSource != null) {
          ActivityLauncher.continueJetpackConnect(this,mJetpackConnectSource,mSelectedSite);
        }
 else {
          ActivityLauncher.showSignupEpilogue(this,null,null,null,null,true);
        }
      }
 else {
        mLoginAnalyticsListener.trackLoginMagicLinkSucceeded();
        if (mJetpackConnectSource != null) {
          ActivityLauncher.continueJetpackConnect(this,mJetpackConnectSource,mSelectedSite);
        }
 else {
          ActivityLauncher.showLoginEpilogue(this,true,getIntent().getIntegerArrayListExtra(ARG_OLD_SITES_IDS));
        }
      }
    }
  }
}",0.9609902475618904
13374,"void trackPluginListOpened(PluginListType listType){
  if (listType == PluginListType.SEARCH) {
    AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_SEARCH_PERFORMED,mViewModel.getSite());
    return;
  }
  Map<String,Object> properties=new HashMap<>();
  String type=null;
switch (listType) {
case SITE:
    type=""String_Node_Str"";
  break;
case FEATURED:
type=""String_Node_Str"";
break;
case POPULAR:
type=""String_Node_Str"";
break;
case NEW:
type=""String_Node_Str"";
break;
}
properties.put(""String_Node_Str"",type);
AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.OPENED_PLUGIN_LIST,mViewModel.getSite(),properties);
}","private void trackPluginListOpened(PluginListType listType){
  if (listType == PluginListType.SEARCH) {
    AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_SEARCH_PERFORMED,mViewModel.getSite());
    return;
  }
  Map<String,Object> properties=new HashMap<>();
  String type=null;
switch (listType) {
case SITE:
    type=""String_Node_Str"";
  break;
case FEATURED:
type=""String_Node_Str"";
break;
case POPULAR:
type=""String_Node_Str"";
break;
case NEW:
type=""String_Node_Str"";
break;
}
properties.put(""String_Node_Str"",type);
AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.OPENED_PLUGIN_LIST,mViewModel.getSite(),properties);
}",0.9938271604938272
13375,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.plugin_browser_activity);
  mViewModel=ViewModelProviders.of(this,mViewModelFactory).get(PluginBrowserViewModel.class);
  mSitePluginsRecycler=findViewById(R.id.installed_plugins_recycler);
  mFeaturedPluginsRecycler=findViewById(R.id.featured_plugins_recycler);
  mPopularPluginsRecycler=findViewById(R.id.popular_plugins_recycler);
  mNewPluginsRecycler=findViewById(R.id.new_plugins_recycler);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState == null) {
    mViewModel.setSite((SiteModel)getIntent().getSerializableExtra(WordPress.SITE));
  }
 else {
    mViewModel.readFromBundle(savedInstanceState);
  }
  mViewModel.start();
  if (mViewModel.getSite() == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  findViewById(R.id.text_manage).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.SITE);
    }
  }
);
  findViewById(R.id.text_all_featured).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.FEATURED);
    }
  }
);
  findViewById(R.id.text_all_popular).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.POPULAR);
    }
  }
);
  findViewById(R.id.text_all_new).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.NEW);
    }
  }
);
  getSupportFragmentManager().addOnBackStackChangedListener(new FragmentManager.OnBackStackChangedListener(){
    @Override public void onBackStackChanged(){
      if (getSupportFragmentManager().getBackStackEntryCount() == 0) {
        mViewModel.setTitle(getString(R.string.plugins));
      }
    }
  }
);
  configureRecycler(mSitePluginsRecycler);
  configureRecycler(mFeaturedPluginsRecycler);
  configureRecycler(mPopularPluginsRecycler);
  configureRecycler(mNewPluginsRecycler);
  setupObservers();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.plugin_browser_activity);
  mViewModel=ViewModelProviders.of(this,mViewModelFactory).get(PluginBrowserViewModel.class);
  mSitePluginsRecycler=findViewById(R.id.installed_plugins_recycler);
  mFeaturedPluginsRecycler=findViewById(R.id.featured_plugins_recycler);
  mPopularPluginsRecycler=findViewById(R.id.popular_plugins_recycler);
  mNewPluginsRecycler=findViewById(R.id.new_plugins_recycler);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  SiteModel siteModel=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  if (siteModel == null) {
    ToastUtils.showToast(this,R.string.blog_not_found);
    finish();
    return;
  }
  if (savedInstanceState == null) {
    mViewModel.setSite(siteModel);
  }
 else {
    mViewModel.readFromBundle(savedInstanceState);
  }
  mViewModel.start();
  findViewById(R.id.text_manage).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.SITE);
    }
  }
);
  findViewById(R.id.text_all_featured).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.FEATURED);
    }
  }
);
  findViewById(R.id.text_all_popular).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.POPULAR);
    }
  }
);
  findViewById(R.id.text_all_new).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showListFragment(PluginListType.NEW);
    }
  }
);
  getSupportFragmentManager().addOnBackStackChangedListener(new FragmentManager.OnBackStackChangedListener(){
    @Override public void onBackStackChanged(){
      if (getSupportFragmentManager().getBackStackEntryCount() == 0) {
        mViewModel.setTitle(getString(R.string.plugins));
      }
    }
  }
);
  configureRecycler(mSitePluginsRecycler);
  configureRecycler(mFeaturedPluginsRecycler);
  configureRecycler(mPopularPluginsRecycler);
  configureRecycler(mNewPluginsRecycler);
  setupObservers();
}",0.9263677498971616
13376,"@Override public void onBindViewHolder(ViewHolder viewHolder,int position){
  PluginBrowserViewHolder holder=(PluginBrowserViewHolder)viewHolder;
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  holder.mNameText.setText(plugin.getDisplayName());
  holder.mAuthorText.setText(plugin.getAuthorName());
  holder.mIcon.setImageUrl(plugin.getIcon(),ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusContainer.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.mStatusContainer.setVisibility(View.GONE);
    holder.mRatingBar.setVisibility(View.VISIBLE);
    holder.mRatingBar.setRating(plugin.getAverageStarRating());
  }
}","@Override public void onBindViewHolder(ViewHolder viewHolder,int position){
  PluginBrowserViewHolder holder=(PluginBrowserViewHolder)viewHolder;
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  holder.mNameText.setText(plugin.getDisplayName());
  holder.mAuthorText.setText(plugin.getAuthorName());
  holder.mIcon.setImageUrl(plugin.getIcon(),ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    boolean isAutoManaged=PluginUtils.isAutoManaged(mViewModel.getSite(),plugin);
    if (isAutoManaged) {
      textResId=R.string.plugin_auto_managed;
      colorResId=R.color.alert_green;
      drawableResId=R.color.transparent;
    }
 else     if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setVisibility(isAutoManaged ? View.GONE : View.VISIBLE);
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusContainer.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.mStatusContainer.setVisibility(View.GONE);
    holder.mRatingBar.setVisibility(View.VISIBLE);
    holder.mRatingBar.setRating(plugin.getAverageStarRating());
  }
}",0.8307873090481787
13377,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.search,menu);
  mSearchMenuItem=menu.findItem(R.id.menu_search);
  mSearchView=(SearchView)mSearchMenuItem.getActionView();
  if (!TextUtils.isEmpty(mViewModel.getSearchQuery())) {
    mSearchMenuItem.expandActionView();
    mSearchView.setQuery(mViewModel.getSearchQuery(),false);
    mSearchView.setOnQueryTextListener(this);
  }
  mSearchMenuItem.setOnActionExpandListener(this);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.search,menu);
  mSearchMenuItem=menu.findItem(R.id.menu_search);
  mSearchView=(SearchView)mSearchMenuItem.getActionView();
  PluginListFragment currentFragment=getCurrentFragment();
  if (currentFragment != null && currentFragment.getListType() == PluginListType.SEARCH) {
    mSearchMenuItem.expandActionView();
    mSearchView.setQuery(mViewModel.getSearchQuery(),false);
    mSearchView.setOnQueryTextListener(this);
  }
  mSearchMenuItem.setOnActionExpandListener(this);
  return super.onCreateOptionsMenu(menu);
}",0.8396811337466785
13378,"private boolean canShowSettings(){
  return mPlugin.isInstalled() && mPlugin.isActive() && !TextUtils.isEmpty(mPlugin.getSettingsUrl());
}","private boolean canShowSettings(){
  return mPlugin.isInstalled() && isNotAutoManaged() && mPlugin.isActive()&& !TextUtils.isEmpty(mPlugin.getSettingsUrl());
}",0.9225589225589226
13379,"private boolean canPluginBeDisabledOrRemoved(){
  if (!mPlugin.isInstalled()) {
    return false;
  }
  String pluginName=mPlugin.getName();
  if (pluginName == null || pluginName.equals(""String_Node_Str"")) {
    return false;
  }
  return !mSite.isAutomatedTransfer() || (!pluginName.equals(""String_Node_Str"") && !pluginName.equals(""String_Node_Str""));
}","private boolean canPluginBeDisabledOrRemoved(){
  if (!mPlugin.isInstalled()) {
    return false;
  }
  if (PluginUtils.isJetpack(mPlugin)) {
    return false;
  }
  return isNotAutoManaged();
}",0.6156648451730419
13380,"private void refreshPluginVersionViews(){
  String pluginVersion=TextUtils.isEmpty(mPlugin.getInstalledVersion()) ? ""String_Node_Str"" : mPlugin.getInstalledVersion();
  String availableVersion=mPlugin.getWPOrgPluginVersion();
  String versionTopText=""String_Node_Str"";
  String versionBottomText=""String_Node_Str"";
  if (mPlugin.isInstalled()) {
    if (PluginUtils.isUpdateAvailable(mPlugin)) {
      versionTopText=String.format(getString(R.string.plugin_available_version),availableVersion);
      versionBottomText=String.format(getString(R.string.plugin_installed_version),pluginVersion);
    }
 else {
      versionTopText=String.format(getString(R.string.plugin_version),pluginVersion);
    }
  }
 else   if (!TextUtils.isEmpty(availableVersion)) {
    versionTopText=String.format(getString(R.string.plugin_version),availableVersion);
  }
  mVersionTopTextView.setText(versionTopText);
  mVersionBottomTextView.setVisibility(TextUtils.isEmpty(versionBottomText) ? View.GONE : View.VISIBLE);
  mVersionBottomTextView.setText(versionBottomText);
  refreshUpdateVersionViews();
}","private void refreshPluginVersionViews(){
  String pluginVersion=TextUtils.isEmpty(mPlugin.getInstalledVersion()) ? ""String_Node_Str"" : mPlugin.getInstalledVersion();
  String availableVersion=mPlugin.getWPOrgPluginVersion();
  String versionTopText=""String_Node_Str"";
  String versionBottomText=""String_Node_Str"";
  if (mPlugin.isInstalled() && isNotAutoManaged()) {
    if (PluginUtils.isUpdateAvailable(mPlugin)) {
      versionTopText=String.format(getString(R.string.plugin_available_version),availableVersion);
      versionBottomText=String.format(getString(R.string.plugin_installed_version),pluginVersion);
    }
 else {
      versionTopText=String.format(getString(R.string.plugin_version),pluginVersion);
    }
  }
 else   if (!TextUtils.isEmpty(availableVersion)) {
    versionTopText=String.format(getString(R.string.plugin_version),availableVersion);
  }
  mVersionTopTextView.setText(versionTopText);
  mVersionBottomTextView.setVisibility(TextUtils.isEmpty(versionBottomText) ? View.GONE : View.VISIBLE);
  mVersionBottomTextView.setText(versionBottomText);
  refreshUpdateVersionViews();
}",0.9899543378995432
13381,"private void refreshViews(){
  View scrollView=findViewById(R.id.scroll_view);
  if (scrollView.getVisibility() != View.VISIBLE) {
    AniUtils.fadeIn(scrollView,AniUtils.Duration.MEDIUM);
  }
  mTitleTextView.setText(mPlugin.getDisplayName());
  mImageBanner.setImageUrl(mPlugin.getBanner(),PHOTO);
  mImageIcon.setImageUrl(mPlugin.getIcon(),PLUGIN_ICON);
  if (mPlugin.doesHaveWPOrgPluginDetails()) {
    mWPOrgPluginDetailsContainer.setVisibility(View.VISIBLE);
    setCollapsibleHtmlText(mDescriptionTextView,mPlugin.getDescriptionAsHtml());
    setCollapsibleHtmlText(mInstallationTextView,mPlugin.getInstallationInstructionsAsHtml());
    setCollapsibleHtmlText(mWhatsNewTextView,mPlugin.getWhatsNewAsHtml());
    setCollapsibleHtmlText(mFaqTextView,mPlugin.getFaqAsHtml());
  }
 else {
    mWPOrgPluginDetailsContainer.setVisibility(View.GONE);
  }
  mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
  if (!TextUtils.isEmpty(mPlugin.getAuthorAsHtml())) {
    mByLineTextView.setText(Html.fromHtml(mPlugin.getAuthorAsHtml()));
  }
 else {
    String authorName=mPlugin.getAuthorName();
    String authorUrl=mPlugin.getAuthorUrl();
    if (TextUtils.isEmpty(authorUrl)) {
      mByLineTextView.setText(String.format(getString(R.string.plugin_byline),authorName));
    }
 else {
      String authorLink=""String_Node_Str"" + authorUrl + ""String_Node_Str""+ authorName+ ""String_Node_Str"";
      String byline=String.format(getString(R.string.plugin_byline),authorLink);
      mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
      mByLineTextView.setText(Html.fromHtml(byline));
    }
  }
  findViewById(R.id.plugin_card_site).setVisibility(mPlugin.isInstalled() ? View.VISIBLE : View.GONE);
  findViewById(R.id.plugin_state_active_container).setVisibility(canPluginBeDisabledOrRemoved() ? View.VISIBLE : View.GONE);
  mSwitchActive.setChecked(mIsActive);
  mSwitchAutoupdates.setChecked(mIsAutoUpdateEnabled);
  refreshPluginVersionViews();
  refreshRatingsViews();
}","private void refreshViews(){
  View scrollView=findViewById(R.id.scroll_view);
  if (scrollView.getVisibility() != View.VISIBLE) {
    AniUtils.fadeIn(scrollView,AniUtils.Duration.MEDIUM);
  }
  mTitleTextView.setText(mPlugin.getDisplayName());
  mImageBanner.setImageUrl(mPlugin.getBanner(),PHOTO);
  mImageIcon.setImageUrl(mPlugin.getIcon(),PLUGIN_ICON);
  if (mPlugin.doesHaveWPOrgPluginDetails()) {
    mWPOrgPluginDetailsContainer.setVisibility(View.VISIBLE);
    setCollapsibleHtmlText(mDescriptionTextView,mPlugin.getDescriptionAsHtml());
    setCollapsibleHtmlText(mInstallationTextView,mPlugin.getInstallationInstructionsAsHtml());
    setCollapsibleHtmlText(mWhatsNewTextView,mPlugin.getWhatsNewAsHtml());
    setCollapsibleHtmlText(mFaqTextView,mPlugin.getFaqAsHtml());
  }
 else {
    mWPOrgPluginDetailsContainer.setVisibility(View.GONE);
  }
  mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
  if (!TextUtils.isEmpty(mPlugin.getAuthorAsHtml())) {
    mByLineTextView.setText(Html.fromHtml(mPlugin.getAuthorAsHtml()));
  }
 else {
    String authorName=mPlugin.getAuthorName();
    String authorUrl=mPlugin.getAuthorUrl();
    if (TextUtils.isEmpty(authorUrl)) {
      mByLineTextView.setText(String.format(getString(R.string.plugin_byline),authorName));
    }
 else {
      String authorLink=""String_Node_Str"" + authorUrl + ""String_Node_Str""+ authorName+ ""String_Node_Str"";
      String byline=String.format(getString(R.string.plugin_byline),authorLink);
      mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
      mByLineTextView.setText(Html.fromHtml(byline));
    }
  }
  findViewById(R.id.plugin_card_site).setVisibility(mPlugin.isInstalled() && isNotAutoManaged() ? View.VISIBLE : View.GONE);
  findViewById(R.id.plugin_state_active_container).setVisibility(canPluginBeDisabledOrRemoved() ? View.VISIBLE : View.GONE);
  mSwitchActive.setChecked(mIsActive);
  mSwitchAutoupdates.setChecked(mIsAutoUpdateEnabled);
  refreshPluginVersionViews();
  refreshRatingsViews();
}",0.9945625308947108
13382,"private void refreshUpdateVersionViews(){
  if (mPlugin.isInstalled()) {
    mInstallButton.setVisibility(View.GONE);
    boolean isUpdateAvailable=PluginUtils.isUpdateAvailable(mPlugin);
    boolean canUpdate=isUpdateAvailable && !mIsUpdatingPlugin;
    mUpdateButton.setVisibility(canUpdate ? View.VISIBLE : View.GONE);
    mInstalledText.setVisibility(isUpdateAvailable || mIsUpdatingPlugin ? View.GONE : View.VISIBLE);
  }
 else {
    mUpdateButton.setVisibility(View.GONE);
    mInstalledText.setVisibility(View.GONE);
    mInstallButton.setVisibility(mIsInstallingPlugin ? View.GONE : View.VISIBLE);
  }
  findViewById(R.id.plugin_update_progress_bar).setVisibility(mIsUpdatingPlugin || mIsInstallingPlugin ? View.VISIBLE : View.GONE);
}","private void refreshUpdateVersionViews(){
  if (mPlugin.isInstalled()) {
    mInstallButton.setVisibility(View.GONE);
    if (isNotAutoManaged()) {
      boolean isUpdateAvailable=PluginUtils.isUpdateAvailable(mPlugin);
      boolean canUpdate=isUpdateAvailable && !mIsUpdatingPlugin;
      mUpdateButton.setVisibility(canUpdate ? View.VISIBLE : View.GONE);
      mInstalledText.setVisibility(isUpdateAvailable || mIsUpdatingPlugin ? View.GONE : View.VISIBLE);
    }
 else {
      mUpdateButton.setVisibility(View.GONE);
      mInstalledText.setVisibility(View.GONE);
    }
  }
 else {
    mUpdateButton.setVisibility(View.GONE);
    mInstalledText.setVisibility(View.GONE);
    mInstallButton.setVisibility(mIsInstallingPlugin ? View.GONE : View.VISIBLE);
  }
  findViewById(R.id.plugin_update_progress_bar).setVisibility(mIsUpdatingPlugin || mIsInstallingPlugin ? View.VISIBLE : View.GONE);
}",0.8454489920586439
13383,"protected @Nullable Object getItem(int position){
  return mItems.getItem(position);
}","private @Nullable Object getItem(int position){
  return mItems.getItem(position);
}",0.9529411764705882
13384,"protected void refreshProgressBars(@Nullable ListState listState){
  if (!isAdded() || getView() == null || listState == null) {
    return;
  }
  mSwipeToRefreshHelper.setRefreshing(listState.isFetchingFirstPage());
  getView().findViewById(R.id.progress).setVisibility(listState.isLoadingMore() ? View.VISIBLE : View.GONE);
}","private void refreshProgressBars(@Nullable ListState listState){
  if (!isAdded() || getView() == null || listState == null) {
    return;
  }
  mSwipeToRefreshHelper.setRefreshing(listState.isFetchingFirstPage());
  getView().findViewById(R.id.progress).setVisibility(listState.isLoadingMore() ? View.VISIBLE : View.GONE);
}",0.98159509202454
13385,"@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  PluginViewHolder holder=(PluginViewHolder)viewHolder;
  holder.mName.setText(plugin.getDisplayName());
  holder.mAuthor.setText(plugin.getAuthorName());
  holder.mIcon.setImageUrl(plugin.getIcon(),WPNetworkImageView.ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusText.setVisibility(View.VISIBLE);
    holder.mStatusIcon.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.mStatusText.setVisibility(View.GONE);
    holder.mStatusIcon.setVisibility(View.GONE);
    holder.mRatingBar.setVisibility(View.VISIBLE);
    holder.mRatingBar.setRating(plugin.getAverageStarRating());
  }
  if (position == getItemCount() - 1) {
    mViewModel.loadMore(mListType);
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  PluginViewHolder holder=(PluginViewHolder)viewHolder;
  holder.mName.setText(plugin.getDisplayName());
  holder.mAuthor.setText(plugin.getAuthorName());
  holder.mIcon.setImageUrl(plugin.getIcon(),WPNetworkImageView.ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isAutoManaged(mViewModel.getSite(),plugin)) {
      textResId=R.string.plugin_auto_managed;
      colorResId=R.color.alert_green;
      drawableResId=R.color.transparent;
    }
 else     if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusText.setVisibility(View.VISIBLE);
    holder.mStatusIcon.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.mStatusText.setVisibility(View.GONE);
    holder.mStatusIcon.setVisibility(View.GONE);
    holder.mRatingBar.setVisibility(View.VISIBLE);
    holder.mRatingBar.setRating(plugin.getAverageStarRating());
  }
  if (position == getItemCount() - 1) {
    mViewModel.loadMore(mListType);
  }
}",0.9443072702331962
13386,"void showEmptyView(boolean show){
  if (isAdded() && getView() != null) {
    getView().findViewById(R.id.text_empty).setVisibility(show ? View.VISIBLE : View.GONE);
  }
}","private void showEmptyView(boolean show){
  if (isAdded() && getView() != null) {
    getView().findViewById(R.id.text_empty).setVisibility(show ? View.VISIBLE : View.GONE);
  }
}",0.9771428571428572
13387,"@Override protected void onBindView(@NonNull View view){
  super.onBindView(view);
  TextView titleView=(TextView)view.findViewById(android.R.id.title);
  if (titleView != null) {
    Resources res=getContext().getResources();
    titleView.setTextSize(TypedValue.COMPLEX_UNIT_PX,res.getDimensionPixelSize(R.dimen.text_sz_large));
    titleView.setTextColor(res.getColor(isEnabled() ? R.color.grey_dark : R.color.grey_lighten_10));
    if (!TextUtils.isEmpty(getDependency())) {
      ViewCompat.setPaddingRelative(titleView,res.getDimensionPixelSize(R.dimen.margin_large),0,0,0);
    }
  }
}","@Override protected void onBindView(@NonNull View view){
  super.onBindView(view);
  TextView titleView=view.findViewById(android.R.id.title);
  if (titleView != null) {
    Resources res=getContext().getResources();
    titleView.setTextSize(TypedValue.COMPLEX_UNIT_PX,res.getDimensionPixelSize(R.dimen.text_sz_large));
    titleView.setTextColor(res.getColor(isEnabled() ? R.color.grey_dark : R.color.grey_lighten_10));
    if (!TextUtils.isEmpty(getDependency())) {
      ViewCompat.setPaddingRelative(titleView,res.getDimensionPixelSize(R.dimen.margin_large),0,0,0);
    }
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    Switch switchControl=getSwitch((ViewGroup)view);
    if (switchControl != null) {
      switchControl.setThumbTintList(ContextCompat.getColorStateList(this.getContext(),R.color.dialog_compound_button));
    }
  }
}",0.8044229440221147
13388,"@Override public void onResume(){
  super.onResume();
  if (NetworkUtils.isNetworkAvailable(getActivity())) {
    mDispatcher.dispatch(AccountActionBuilder.newFetchSettingsAction());
  }
}","@Override public void onResume(){
  super.onResume();
  if (mAccountStore.hasAccessToken() && NetworkUtils.isNetworkAvailable(getActivity())) {
    mDispatcher.dispatch(AccountActionBuilder.newFetchSettingsAction());
  }
}",0.9170731707317074
13389,"@Override public void onClick(View v){
  String error=null;
  CharSequence text=getEditText().getText();
  if (mValidationType == ValidationType.EMAIL) {
    error=ValidationUtils.validateEmail(text) ? getContext().getString(R.string.invalid_email_message) : null;
  }
 else   if (!TextUtils.isEmpty(text) && mValidationType == ValidationType.URL) {
    error=ValidationUtils.validateUrl(text) ? getContext().getString(R.string.invalid_url_message) : null;
  }
  if (error != null) {
    getEditText().setError(error);
  }
 else {
    callChangeListener(text);
    dialog.dismiss();
  }
}","@Override public void onClick(View v){
  String error=null;
  CharSequence text=getEditText().getText();
  if (mValidationType == ValidationType.EMAIL) {
    error=ValidationUtils.validateEmail(text) ? null : getContext().getString(R.string.invalid_email_message);
  }
 else   if (!TextUtils.isEmpty(text) && mValidationType == ValidationType.URL) {
    error=ValidationUtils.validateUrl(text) ? null : getContext().getString(R.string.invalid_url_message);
  }
  if (error != null) {
    getEditText().setError(error);
  }
 else {
    callChangeListener(text);
    dialog.dismiss();
  }
}",0.9761904761904762
13390,"@Override protected void showDialog(Bundle state){
  super.showDialog(state);
  final AlertDialog dialog=(AlertDialog)getDialog();
  Button positiveButton=dialog.getButton(DialogInterface.BUTTON_POSITIVE);
  if (positiveButton != null) {
    positiveButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        String error=null;
        CharSequence text=getEditText().getText();
        if (mValidationType == ValidationType.EMAIL) {
          error=ValidationUtils.validateEmail(text) ? getContext().getString(R.string.invalid_email_message) : null;
        }
 else         if (!TextUtils.isEmpty(text) && mValidationType == ValidationType.URL) {
          error=ValidationUtils.validateUrl(text) ? getContext().getString(R.string.invalid_url_message) : null;
        }
        if (error != null) {
          getEditText().setError(error);
        }
 else {
          callChangeListener(text);
          dialog.dismiss();
        }
      }
    }
);
  }
  CharSequence summary=getSummary();
  if (summary == null || summary.equals(mStringToIgnoreForPrefilling)) {
    getEditText().setText(""String_Node_Str"");
  }
 else {
    getEditText().setText(summary);
    getEditText().setSelection(0,summary.length());
  }
  getEditText().setError(null);
}","@Override protected void showDialog(Bundle state){
  super.showDialog(state);
  final AlertDialog dialog=(AlertDialog)getDialog();
  Button positiveButton=dialog.getButton(DialogInterface.BUTTON_POSITIVE);
  if (positiveButton != null) {
    positiveButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        String error=null;
        CharSequence text=getEditText().getText();
        if (mValidationType == ValidationType.EMAIL) {
          error=ValidationUtils.validateEmail(text) ? null : getContext().getString(R.string.invalid_email_message);
        }
 else         if (!TextUtils.isEmpty(text) && mValidationType == ValidationType.URL) {
          error=ValidationUtils.validateUrl(text) ? null : getContext().getString(R.string.invalid_url_message);
        }
        if (error != null) {
          getEditText().setError(error);
        }
 else {
          callChangeListener(text);
          dialog.dismiss();
        }
      }
    }
);
  }
  CharSequence summary=getSummary();
  if (summary == null || summary.equals(mStringToIgnoreForPrefilling)) {
    getEditText().setText(""String_Node_Str"");
  }
 else {
    getEditText().setText(summary);
    getEditText().setSelection(0,summary.length());
  }
  getEditText().setError(null);
}",0.98923904688701
13391,"@Override public void onClick(View v){
  if (mDialog != null) {
    return;
  }
  AnalyticsTracker.track(Stat.SITE_SETTINGS_LEARN_MORE_CLICKED);
  showDialog();
}","@Override public void onClick(View v){
  if (mDialog != null) {
    return;
  }
  AnalyticsTracker.track(Stat.SITE_SETTINGS_LEARN_MORE_CLICKED);
  if (mOpenInDialog) {
    showDialog();
  }
 else {
    Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(mUrl));
    if (browserIntent.resolveActivity(v.getContext().getPackageManager()) != null) {
      v.getContext().startActivity(browserIntent);
    }
  }
}",0.5586206896551724
13392,"@Override public void onRestoreInstanceState(@NonNull Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
  }
 else {
    super.onRestoreInstanceState(((SavedState)state).getSuperState());
    showDialog();
  }
}","@Override public void onRestoreInstanceState(@NonNull Parcelable state){
  if (!(state instanceof SavedState)) {
    super.onRestoreInstanceState(state);
  }
 else {
    super.onRestoreInstanceState(((SavedState)state).getSuperState());
    if (mOpenInDialog) {
      showDialog();
    }
  }
}",0.929475587703436
13393,"public LearnMorePreference(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.LearnMorePreference);
  for (int i=0; i < array.getIndexCount(); ++i) {
    int index=array.getIndex(i);
    if (index == R.styleable.LearnMorePreference_url) {
      mUrl=array.getString(index);
    }
 else     if (index == R.styleable.LearnMorePreference_useCustomJsFormatting) {
      mUseCustomJsFormatting=array.getBoolean(index,false);
    }
 else     if (index == R.styleable.LearnMorePreference_caption) {
      int id=array.getResourceId(index,-1);
      if (id != -1) {
        mCaption=array.getResources().getString(id);
      }
    }
 else     if (index == R.styleable.LearnMorePreference_button) {
      int id=array.getResourceId(index,-1);
      if (id != -1) {
        mButtonText=array.getResources().getString(id);
      }
    }
 else     if (index == R.styleable.LearnMorePreference_icon) {
      mIcon=array.getResourceId(index,-1);
    }
 else     if (index == R.styleable.LearnMorePreference_layout) {
      mLayout=array.getResourceId(index,-1);
    }
  }
  array.recycle();
}","public LearnMorePreference(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.LearnMorePreference);
  for (int i=0; i < array.getIndexCount(); ++i) {
    int index=array.getIndex(i);
    if (index == R.styleable.LearnMorePreference_url) {
      mUrl=array.getString(index);
    }
 else     if (index == R.styleable.LearnMorePreference_useCustomJsFormatting) {
      mUseCustomJsFormatting=array.getBoolean(index,false);
    }
 else     if (index == R.styleable.LearnMorePreference_caption) {
      int id=array.getResourceId(index,-1);
      if (id != -1) {
        mCaption=array.getResources().getString(id);
      }
    }
 else     if (index == R.styleable.LearnMorePreference_button) {
      int id=array.getResourceId(index,-1);
      if (id != -1) {
        mButtonText=array.getResources().getString(id);
      }
    }
 else     if (index == R.styleable.LearnMorePreference_icon) {
      mIcon=array.getResourceId(index,-1);
    }
 else     if (index == R.styleable.LearnMorePreference_layout) {
      mLayout=array.getResourceId(index,-1);
    }
 else     if (index == R.styleable.LearnMorePreference_openInDialog) {
      mOpenInDialog=array.getBoolean(index,false);
    }
  }
  array.recycle();
}",0.9336065573770492
13394,"private void initSiteSettings(){
  mSiteSettings=SiteSettingsInterface.getInterface(getActivity(),getSelectedSite(),this);
  mSiteSettings.init(true);
}","private void initSiteSettings(){
  mSiteSettings=SiteSettingsInterface.getInterface(getActivity(),getSelectedSite(),this);
  if (mSiteSettings != null) {
    mSiteSettings.init(true);
  }
}",0.8914956011730205
13395,"/** 
 * We can't just use fluxc OnSiteChanged event, as the order of events is not guaranteed -> getSelectedSite() method might return an out of date SiteModel, if the OnSiteChanged event handler in the WPMainActivity wasn't called yet.
 */
public void onSiteChanged(){
  refreshSelectedSiteDetails(getSelectedSite());
  showSiteIconProgressBar(false);
}","/** 
 * We can't just use fluxc OnSiteChanged event, as the order of events is not guaranteed -> getSelectedSite() method might return an out of date SiteModel, if the OnSiteChanged event handler in the WPMainActivity wasn't called yet.
 */
public void onSiteChanged(SiteModel site){
  refreshSelectedSiteDetails(site);
  showSiteIconProgressBar(false);
}",0.9506346967559944
13396,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  AnalyticsTracker.track(Stat.MY_SITE_ICON_UPLOADED);
  EventBus.getDefault().removeStickyEvent(event);
  SiteModel site=getSelectedSite();
  if (site != null) {
    if (isMediaUploadInProgress()) {
      if (event.mediaModelList.size() > 0) {
        MediaModel media=event.mediaModelList.get(0);
        mBlavatarImageView.setImageUrl(media.getUrl(),ImageType.BLAVATAR);
        mSiteSettings.setSiteIconMediaId((int)media.getMediaId());
        mSiteSettings.saveSettings();
      }
    }
 else {
      if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
        UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,site,event.successMessage);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  AnalyticsTracker.track(Stat.MY_SITE_ICON_UPLOADED);
  EventBus.getDefault().removeStickyEvent(event);
  SiteModel site=getSelectedSite();
  if (site != null) {
    if (isMediaUploadInProgress()) {
      if (event.mediaModelList.size() > 0) {
        MediaModel media=event.mediaModelList.get(0);
        mBlavatarImageView.setImageUrl(media.getUrl(),ImageType.BLAVATAR);
        mSiteSettings.setSiteIconMediaId((int)media.getMediaId());
        mSiteSettings.saveSettings();
        showSiteIconProgressBar(false);
      }
    }
 else {
      if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
        UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,site,event.successMessage);
      }
    }
  }
}",0.977628635346756
13397,"private void startSiteIconUpload(final String filePath){
  if (TextUtils.isEmpty(filePath)) {
    ToastUtils.showToast(getActivity(),R.string.error_locating_image,ToastUtils.Duration.SHORT);
    return;
  }
  File file=new File(filePath);
  if (!file.exists()) {
    ToastUtils.showToast(getActivity(),R.string.error_locating_image,ToastUtils.Duration.SHORT);
    return;
  }
  SiteModel site=getSelectedSite();
  if (site != null) {
    MediaModel media=buildMediaModel(file,site);
    UploadService.uploadMedia(getActivity(),media);
  }
}","private void startSiteIconUpload(final String filePath){
  if (TextUtils.isEmpty(filePath)) {
    ToastUtils.showToast(getActivity(),R.string.error_locating_image,ToastUtils.Duration.SHORT);
    return;
  }
  File file=new File(filePath);
  if (!file.exists()) {
    ToastUtils.showToast(getActivity(),R.string.file_error_create,ToastUtils.Duration.SHORT);
    return;
  }
  SiteModel site=getSelectedSite();
  if (site != null) {
    MediaModel media=buildMediaModel(file,site);
    UploadService.uploadMedia(getActivity(),media);
  }
 else {
    ToastUtils.showToast(getActivity(),R.string.error_generic,ToastUtils.Duration.SHORT);
    AppLog.e(T.MAIN,""String_Node_Str"");
  }
}",0.8580803937653815
13398,"@Override public void onPositiveClicked(@NonNull String instanceTag){
switch (instanceTag) {
case TAG_ADD_SITE_ICON_DIALOG:
    ActivityLauncher.showPhotoPickerForResult(getActivity(),MediaBrowserType.SITE_ICON_PICKER,getSelectedSite());
  break;
case TAG_CHANGE_SITE_ICON_DIALOG:
ActivityLauncher.showPhotoPickerForResult(getActivity(),MediaBrowserType.SITE_ICON_PICKER,getSelectedSite());
break;
default :
AppLog.e(T.EDITOR,""String_Node_Str"");
throw new UnsupportedOperationException(""String_Node_Str"");
}
}","@Override public void onPositiveClicked(@NonNull String instanceTag){
switch (instanceTag) {
case TAG_ADD_SITE_ICON_DIALOG:
case TAG_CHANGE_SITE_ICON_DIALOG:
    ActivityLauncher.showPhotoPickerForResult(getActivity(),MediaBrowserType.SITE_ICON_PICKER,getSelectedSite());
  break;
default :
AppLog.e(T.EDITOR,""String_Node_Str"");
throw new UnsupportedOperationException(""String_Node_Str"");
}
}",0.7946725860155383
13399,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSiteChanged(OnSiteChanged event){
  if (getSelectedSite() == null && mSiteStore.hasSite()) {
    setSelectedSite(mSiteStore.getSites().get(0));
  }
  if (getSelectedSite() == null) {
    return;
  }
  SiteModel site=mSiteStore.getSiteByLocalId(getSelectedSite().getId());
  if (site != null) {
    mSelectedSite=site;
  }
  if (getMySiteFragment() != null) {
    getMySiteFragment().onSiteChanged();
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSiteChanged(OnSiteChanged event){
  if (getSelectedSite() == null && mSiteStore.hasSite()) {
    setSelectedSite(mSiteStore.getSites().get(0));
  }
  if (getSelectedSite() == null) {
    return;
  }
  SiteModel site=mSiteStore.getSiteByLocalId(getSelectedSite().getId());
  if (site != null) {
    mSelectedSite=site;
  }
  if (getMySiteFragment() != null) {
    getMySiteFragment().onSiteChanged(site);
  }
}",0.9959758551307848
13400,"@Override public void onNegativeClicked(@NonNull String instanceTag){
  Fragment fragment=getMySiteFragment();
  if (fragment != null) {
    getMySiteFragment().onNegativeClicked(instanceTag);
  }
}","@Override public void onNegativeClicked(@NonNull String instanceTag){
  MySiteFragment fragment=getMySiteFragment();
  if (fragment != null) {
    fragment.onNegativeClicked(instanceTag);
  }
}",0.9514066496163684
13401,"@Override public void onPositiveClicked(@NonNull String instanceTag){
  Fragment fragment=getMySiteFragment();
  if (fragment != null) {
    getMySiteFragment().onPositiveClicked(instanceTag);
  }
}","@Override public void onPositiveClicked(@NonNull String instanceTag){
  MySiteFragment fragment=getMySiteFragment();
  if (fragment != null) {
    getMySiteFragment().onPositiveClicked(instanceTag);
  }
}",0.8805970149253731
13402,"public void setSiteIconMediaId(int siteIconMediaId){
  if (mSettings.siteIconMediaId != siteIconMediaId) {
    mSettings.siteIconMediaId=siteIconMediaId;
  }
}","public void setSiteIconMediaId(int siteIconMediaId){
  mSettings.siteIconMediaId=siteIconMediaId;
}",0.7674418604651163
13403,"public static void addOrUpdatePosts(final ReaderTag tag,ReaderPostList posts){
  if (posts == null || posts.size() == 0) {
    return;
  }
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  SQLiteStatement stmtPosts=db.compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str""+ ""String_Node_Str"");
  db.beginTransaction();
  try {
    String tagName=(tag != null ? tag.getTagSlug() : ""String_Node_Str"");
    int tagType=(tag != null ? tag.tagType.toInt() : 0);
    boolean hasGapMarker=false;
    for (    ReaderPost post : posts) {
      stmtPosts.bindLong(1,post.postId);
      stmtPosts.bindLong(2,post.blogId);
      stmtPosts.bindLong(3,post.feedId);
      stmtPosts.bindLong(4,post.feedItemId);
      stmtPosts.bindString(5,post.getPseudoId());
      stmtPosts.bindString(6,post.getAuthorName());
      stmtPosts.bindString(7,post.getAuthorFirstName());
      stmtPosts.bindLong(8,post.authorId);
      stmtPosts.bindString(9,post.getTitle());
      stmtPosts.bindString(10,maxText(post));
      stmtPosts.bindString(11,post.getExcerpt());
      stmtPosts.bindString(12,post.getFormat());
      stmtPosts.bindString(13,post.getUrl());
      stmtPosts.bindString(14,post.getShortUrl());
      stmtPosts.bindString(15,post.getBlogName());
      stmtPosts.bindString(16,post.getBlogUrl());
      stmtPosts.bindString(17,post.getBlogImageUrl());
      stmtPosts.bindString(18,post.getFeaturedImage());
      stmtPosts.bindString(19,post.getFeaturedVideo());
      stmtPosts.bindString(20,post.getPostAvatar());
      stmtPosts.bindDouble(21,post.score);
      stmtPosts.bindString(22,post.getDatePublished());
      stmtPosts.bindString(23,post.getDateLiked());
      stmtPosts.bindString(24,post.getDateTagged());
      stmtPosts.bindLong(25,post.numReplies);
      stmtPosts.bindLong(26,post.numLikes);
      stmtPosts.bindLong(27,SqlUtils.boolToSql(post.isLikedByCurrentUser));
      stmtPosts.bindLong(28,SqlUtils.boolToSql(post.isFollowedByCurrentUser));
      stmtPosts.bindLong(29,SqlUtils.boolToSql(post.isCommentsOpen));
      stmtPosts.bindLong(30,SqlUtils.boolToSql(post.isExternal));
      stmtPosts.bindLong(31,SqlUtils.boolToSql(post.isPrivate));
      stmtPosts.bindLong(32,SqlUtils.boolToSql(post.isVideoPress));
      stmtPosts.bindLong(33,SqlUtils.boolToSql(post.isJetpack));
      stmtPosts.bindString(34,post.getPrimaryTag());
      stmtPosts.bindString(35,post.getSecondaryTag());
      stmtPosts.bindString(36,post.getAttachmentsJson());
      stmtPosts.bindString(37,post.getDiscoverJson());
      stmtPosts.bindLong(38,post.xpostPostId);
      stmtPosts.bindLong(39,post.xpostBlogId);
      stmtPosts.bindString(40,post.getRailcarJson());
      stmtPosts.bindString(41,tagName);
      stmtPosts.bindLong(42,tagType);
      stmtPosts.bindLong(43,SqlUtils.boolToSql(hasGapMarker));
      stmtPosts.bindString(44,ReaderCardType.toString(post.getCardType()));
      stmtPosts.bindLong(45,SqlUtils.boolToSql(post.useExcerpt));
      stmtPosts.execute();
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmtPosts);
  }
}","public static void addOrUpdatePosts(final ReaderTag tag,ReaderPostList posts){
  if (posts == null || posts.size() == 0) {
    return;
  }
  SQLiteDatabase db=ReaderDatabase.getWritableDb();
  SQLiteStatement stmtPosts=db.compileStatement(""String_Node_Str"" + COLUMN_NAMES + ""String_Node_Str""+ ""String_Node_Str"");
  db.beginTransaction();
  try {
    String tagName=(tag != null ? tag.getTagSlug() : ""String_Node_Str"");
    int tagType=(tag != null ? tag.tagType.toInt() : 0);
    ReaderBlogIdPostId postWithGapMarker=getGapMarkerIdsForTag(tag);
    for (    ReaderPost post : posts) {
      boolean hasGapMarker=postWithGapMarker != null && postWithGapMarker.getPostId() == post.postId && postWithGapMarker.getBlogId() == post.blogId;
      stmtPosts.bindLong(1,post.postId);
      stmtPosts.bindLong(2,post.blogId);
      stmtPosts.bindLong(3,post.feedId);
      stmtPosts.bindLong(4,post.feedItemId);
      stmtPosts.bindString(5,post.getPseudoId());
      stmtPosts.bindString(6,post.getAuthorName());
      stmtPosts.bindString(7,post.getAuthorFirstName());
      stmtPosts.bindLong(8,post.authorId);
      stmtPosts.bindString(9,post.getTitle());
      stmtPosts.bindString(10,maxText(post));
      stmtPosts.bindString(11,post.getExcerpt());
      stmtPosts.bindString(12,post.getFormat());
      stmtPosts.bindString(13,post.getUrl());
      stmtPosts.bindString(14,post.getShortUrl());
      stmtPosts.bindString(15,post.getBlogName());
      stmtPosts.bindString(16,post.getBlogUrl());
      stmtPosts.bindString(17,post.getBlogImageUrl());
      stmtPosts.bindString(18,post.getFeaturedImage());
      stmtPosts.bindString(19,post.getFeaturedVideo());
      stmtPosts.bindString(20,post.getPostAvatar());
      stmtPosts.bindDouble(21,post.score);
      stmtPosts.bindString(22,post.getDatePublished());
      stmtPosts.bindString(23,post.getDateLiked());
      stmtPosts.bindString(24,post.getDateTagged());
      stmtPosts.bindLong(25,post.numReplies);
      stmtPosts.bindLong(26,post.numLikes);
      stmtPosts.bindLong(27,SqlUtils.boolToSql(post.isLikedByCurrentUser));
      stmtPosts.bindLong(28,SqlUtils.boolToSql(post.isFollowedByCurrentUser));
      stmtPosts.bindLong(29,SqlUtils.boolToSql(post.isCommentsOpen));
      stmtPosts.bindLong(30,SqlUtils.boolToSql(post.isExternal));
      stmtPosts.bindLong(31,SqlUtils.boolToSql(post.isPrivate));
      stmtPosts.bindLong(32,SqlUtils.boolToSql(post.isVideoPress));
      stmtPosts.bindLong(33,SqlUtils.boolToSql(post.isJetpack));
      stmtPosts.bindString(34,post.getPrimaryTag());
      stmtPosts.bindString(35,post.getSecondaryTag());
      stmtPosts.bindString(36,post.getAttachmentsJson());
      stmtPosts.bindString(37,post.getDiscoverJson());
      stmtPosts.bindLong(38,post.xpostPostId);
      stmtPosts.bindLong(39,post.xpostBlogId);
      stmtPosts.bindString(40,post.getRailcarJson());
      stmtPosts.bindString(41,tagName);
      stmtPosts.bindLong(42,tagType);
      stmtPosts.bindLong(43,SqlUtils.boolToSql(hasGapMarker));
      stmtPosts.bindString(44,ReaderCardType.toString(post.getCardType()));
      stmtPosts.bindLong(45,SqlUtils.boolToSql(post.useExcerpt));
      stmtPosts.execute();
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
    SqlUtils.closeStatement(stmtPosts);
  }
}",0.964335773244043
13404,"private static void handleUpdatePostsResponse(final ReaderTag tag,final JSONObject jsonObject,final UpdateAction updateAction,final ReaderActions.UpdateResultListener resultListener){
  if (jsonObject == null) {
    resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    return;
  }
  new Thread(){
    @Override public void run(){
      ReaderPostList serverPosts=ReaderPostList.fromJson(jsonObject);
      ReaderActions.UpdateResult updateResult=ReaderPostTable.comparePosts(serverPosts);
      if (updateResult.isNewOrChanged()) {
        ReaderPost postWithGap=null;
        if (tag != null) {
switch (updateAction) {
case REQUEST_NEWER:
            int numServerPosts=serverPosts.size();
          if (numServerPosts >= 2 && ReaderPostTable.getNumPostsWithTag(tag) > 0 && !ReaderPostTable.hasOverlap(serverPosts)) {
            postWithGap=serverPosts.get(numServerPosts - 2);
            serverPosts.remove(numServerPosts - 1);
            AppLog.d(AppLog.T.READER,""String_Node_Str"" + tag.getTagNameForLog());
          }
        ReaderPostTable.removeGapMarkerForTag(tag);
      break;
case REQUEST_OLDER_THAN_GAP:
    ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
  ReaderPostTable.removeGapMarkerForTag(tag);
break;
}
}
ReaderPostTable.addOrUpdatePosts(tag,serverPosts);
if (postWithGap != null) {
ReaderPostTable.setGapMarkerForTag(postWithGap.blogId,postWithGap.postId,tag);
}
}
 else if (updateResult == ReaderActions.UpdateResult.UNCHANGED && updateAction == UpdateAction.REQUEST_OLDER_THAN_GAP) {
ReaderPostTable.removeGapMarkerForTag(tag);
AppLog.w(AppLog.T.READER,""String_Node_Str"");
}
AppLog.d(AppLog.T.READER,""String_Node_Str"" + updateResult.toString());
resultListener.onUpdateResult(updateResult);
}
}
.start();
}","private static void handleUpdatePostsResponse(final ReaderTag tag,final JSONObject jsonObject,final UpdateAction updateAction,final ReaderActions.UpdateResultListener resultListener){
  if (jsonObject == null) {
    resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    return;
  }
  new Thread(){
    @Override public void run(){
      ReaderPostList serverPosts=ReaderPostList.fromJson(jsonObject);
      ReaderActions.UpdateResult updateResult=ReaderPostTable.comparePosts(serverPosts);
      if (updateResult.isNewOrChanged()) {
        ReaderPost postWithGap=null;
        if (tag != null) {
switch (updateAction) {
case REQUEST_NEWER:
            int numServerPosts=serverPosts.size();
          if (numServerPosts >= 2 && ReaderPostTable.getNumPostsWithTag(tag) > 0 && !ReaderPostTable.hasOverlap(serverPosts)) {
            postWithGap=serverPosts.get(numServerPosts - 2);
            serverPosts.remove(numServerPosts - 1);
            ReaderBlogIdPostId gapMarker=ReaderPostTable.getGapMarkerIdsForTag(tag);
            if (gapMarker != null) {
              ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
              ReaderPostTable.removeGapMarkerForTag(tag);
            }
          }
        break;
case REQUEST_OLDER_THAN_GAP:
      ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
    ReaderPostTable.removeGapMarkerForTag(tag);
  break;
case REQUEST_OLDER:
break;
}
}
ReaderPostTable.addOrUpdatePosts(tag,serverPosts);
if (postWithGap != null) {
ReaderPostTable.setGapMarkerForTag(postWithGap.blogId,postWithGap.postId,tag);
AppLog.d(AppLog.T.READER,""String_Node_Str"" + tag.getTagNameForLog());
}
}
 else if (updateResult == ReaderActions.UpdateResult.UNCHANGED && updateAction == UpdateAction.REQUEST_OLDER_THAN_GAP) {
ReaderPostTable.removeGapMarkerForTag(tag);
AppLog.w(AppLog.T.READER,""String_Node_Str"");
}
AppLog.d(AppLog.T.READER,""String_Node_Str"" + updateResult.toString());
resultListener.onUpdateResult(updateResult);
}
}
.start();
}",0.8788687299893276
13405,"private static void requestPostsWithTag(final ReaderTag tag,final UpdateAction updateAction,final ReaderActions.UpdateResultListener resultListener){
  String path=getRelativeEndpointForTag(tag);
  if (TextUtils.isEmpty(path)) {
    resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    return;
  }
  StringBuilder sb=new StringBuilder(path);
  sb.append(""String_Node_Str"").append(ReaderConstants.READER_MAX_POSTS_TO_REQUEST);
  sb.append(""String_Node_Str"");
  String beforeDate;
switch (updateAction) {
case REQUEST_OLDER:
    beforeDate=ReaderPostTable.getOldestDateWithTag(tag);
  break;
case REQUEST_OLDER_THAN_GAP:
beforeDate=ReaderPostTable.getGapMarkerDateForTag(tag);
break;
default :
beforeDate=null;
break;
}
if (!TextUtils.isEmpty(beforeDate)) {
sb.append(""String_Node_Str"").append(UrlUtils.urlEncode(beforeDate));
}
sb.append(""String_Node_Str"");
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
if (updateAction == UpdateAction.REQUEST_NEWER) {
ReaderTagTable.setTagLastUpdated(tag);
}
handleUpdatePostsResponse(tag,jsonObject,updateAction,resultListener);
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.e(AppLog.T.READER,volleyError);
resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
}
}
;
WordPress.getRestClientUtilsV1_2().get(sb.toString(),null,null,listener,errorListener);
}","private static void requestPostsWithTag(final ReaderTag tag,final UpdateAction updateAction,final ReaderActions.UpdateResultListener resultListener){
  String path=getRelativeEndpointForTag(tag);
  if (TextUtils.isEmpty(path)) {
    resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    return;
  }
  StringBuilder sb=new StringBuilder(path);
  sb.append(""String_Node_Str"").append(ReaderConstants.READER_MAX_POSTS_TO_REQUEST);
  sb.append(""String_Node_Str"");
  String beforeDate;
switch (updateAction) {
case REQUEST_OLDER:
    beforeDate=ReaderPostTable.getOldestDateWithTag(tag);
  break;
case REQUEST_OLDER_THAN_GAP:
beforeDate=ReaderPostTable.getGapMarkerDateForTag(tag);
break;
case REQUEST_NEWER:
default :
beforeDate=null;
break;
}
if (!TextUtils.isEmpty(beforeDate)) {
sb.append(""String_Node_Str"").append(UrlUtils.urlEncode(beforeDate));
}
sb.append(""String_Node_Str"");
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
if (updateAction == UpdateAction.REQUEST_NEWER) {
ReaderTagTable.setTagLastUpdated(tag);
}
handleUpdatePostsResponse(tag,jsonObject,updateAction,resultListener);
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.e(AppLog.T.READER,volleyError);
resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
}
}
;
WordPress.getRestClientUtilsV1_2().get(sb.toString(),null,null,listener,errorListener);
}",0.9934340118187788
13406,"@Override public void run(){
  ReaderPostList serverPosts=ReaderPostList.fromJson(jsonObject);
  ReaderActions.UpdateResult updateResult=ReaderPostTable.comparePosts(serverPosts);
  if (updateResult.isNewOrChanged()) {
    ReaderPost postWithGap=null;
    if (tag != null) {
switch (updateAction) {
case REQUEST_NEWER:
        int numServerPosts=serverPosts.size();
      if (numServerPosts >= 2 && ReaderPostTable.getNumPostsWithTag(tag) > 0 && !ReaderPostTable.hasOverlap(serverPosts)) {
        postWithGap=serverPosts.get(numServerPosts - 2);
        serverPosts.remove(numServerPosts - 1);
        AppLog.d(AppLog.T.READER,""String_Node_Str"" + tag.getTagNameForLog());
      }
    ReaderPostTable.removeGapMarkerForTag(tag);
  break;
case REQUEST_OLDER_THAN_GAP:
ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
ReaderPostTable.removeGapMarkerForTag(tag);
break;
}
}
ReaderPostTable.addOrUpdatePosts(tag,serverPosts);
if (postWithGap != null) {
ReaderPostTable.setGapMarkerForTag(postWithGap.blogId,postWithGap.postId,tag);
}
}
 else if (updateResult == ReaderActions.UpdateResult.UNCHANGED && updateAction == UpdateAction.REQUEST_OLDER_THAN_GAP) {
ReaderPostTable.removeGapMarkerForTag(tag);
AppLog.w(AppLog.T.READER,""String_Node_Str"");
}
AppLog.d(AppLog.T.READER,""String_Node_Str"" + updateResult.toString());
resultListener.onUpdateResult(updateResult);
}","@Override public void run(){
  ReaderPostList serverPosts=ReaderPostList.fromJson(jsonObject);
  ReaderActions.UpdateResult updateResult=ReaderPostTable.comparePosts(serverPosts);
  if (updateResult.isNewOrChanged()) {
    ReaderPost postWithGap=null;
    if (tag != null) {
switch (updateAction) {
case REQUEST_NEWER:
        int numServerPosts=serverPosts.size();
      if (numServerPosts >= 2 && ReaderPostTable.getNumPostsWithTag(tag) > 0 && !ReaderPostTable.hasOverlap(serverPosts)) {
        postWithGap=serverPosts.get(numServerPosts - 2);
        serverPosts.remove(numServerPosts - 1);
        ReaderBlogIdPostId gapMarker=ReaderPostTable.getGapMarkerIdsForTag(tag);
        if (gapMarker != null) {
          ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
          ReaderPostTable.removeGapMarkerForTag(tag);
        }
      }
    break;
case REQUEST_OLDER_THAN_GAP:
  ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
ReaderPostTable.removeGapMarkerForTag(tag);
break;
case REQUEST_OLDER:
break;
}
}
ReaderPostTable.addOrUpdatePosts(tag,serverPosts);
if (postWithGap != null) {
ReaderPostTable.setGapMarkerForTag(postWithGap.blogId,postWithGap.postId,tag);
AppLog.d(AppLog.T.READER,""String_Node_Str"" + tag.getTagNameForLog());
}
}
 else if (updateResult == ReaderActions.UpdateResult.UNCHANGED && updateAction == UpdateAction.REQUEST_OLDER_THAN_GAP) {
ReaderPostTable.removeGapMarkerForTag(tag);
AppLog.w(AppLog.T.READER,""String_Node_Str"");
}
AppLog.d(AppLog.T.READER,""String_Node_Str"" + updateResult.toString());
resultListener.onUpdateResult(updateResult);
}",0.8516260162601627
13407,"@Override public boolean onOptionsItemSelected(final MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    return handleBackPressed();
  }
  hidePhotoPicker();
  if (itemId == R.id.menu_save_post) {
    if (!AppPrefs.isAsyncPromoRequired()) {
      showPublishConfirmationOrUpdateIfNotLocalDraft();
    }
 else {
      showAsyncPromoDialog();
    }
  }
 else {
    if (!mShowAztecEditor && (mEditorFragment.isUploadingMedia() || mEditorFragment.isActionInProgress())) {
      ToastUtils.showToast(this,R.string.editor_toast_uploading_please_wait,Duration.SHORT);
      return false;
    }
    if (itemId == R.id.menu_preview_post) {
      mViewPager.setCurrentItem(PAGE_PREVIEW);
    }
 else     if (itemId == R.id.menu_post_settings) {
      InputMethodManager imm=((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE));
      imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
      if (mEditPostSettingsFragment != null) {
        mEditPostSettingsFragment.refreshViews();
      }
      mViewPager.setCurrentItem(PAGE_SETTINGS);
    }
 else     if (itemId == R.id.menu_save_as_draft_or_publish) {
      if (UploadService.hasInProgressMediaUploadsForPost(mPost)) {
        ToastUtils.showToast(EditPostActivity.this,getString(R.string.editor_toast_uploading_please_wait),Duration.SHORT);
        return false;
      }
      updatePostObject();
      if (PostStatus.fromPost(mPost) == PostStatus.DRAFT) {
        if (isDiscardable()) {
          String message=getString(mIsPage ? R.string.error_publish_empty_page : R.string.error_publish_empty_post);
          ToastUtils.showToast(EditPostActivity.this,message,Duration.SHORT);
          return false;
        }
        showPublishConfirmationDialog();
      }
 else {
        if (isDiscardable()) {
          ToastUtils.showToast(EditPostActivity.this,getString(R.string.error_save_empty_draft),Duration.SHORT);
          return false;
        }
        UploadUtils.showSnackbar(findViewById(R.id.editor_activity),R.string.editor_uploading_post);
        if (isNewPost()) {
          mPost.setStatus(PostStatus.DRAFT.toString());
        }
        savePostAndOptionallyFinish(false);
      }
    }
 else     if (itemId == R.id.menu_html_mode) {
      if (mEditorFragment instanceof AztecEditorFragment) {
        ((AztecEditorFragment)mEditorFragment).onToolbarHtmlButtonClicked();
        UploadUtils.showSnackbarSuccessActionOrange(findViewById(R.id.editor_activity),mHtmlModeMenuStateOn ? R.string.menu_html_mode_done_snackbar : R.string.menu_visual_mode_done_snackbar,R.string.menu_undo_snackbar_action,new View.OnClickListener(){
          @Override public void onClick(          View view){
            ((AztecEditorFragment)mEditorFragment).onToolbarHtmlButtonClicked();
          }
        }
);
      }
    }
  }
  return false;
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    return handleBackPressed();
  }
  hidePhotoPicker();
  if (itemId == R.id.menu_save_post) {
    if (AppPrefs.isAsyncPromoRequired() && PostStatus.fromPost(mPost) != PostStatus.DRAFT) {
      showAsyncPromoDialog();
    }
 else {
      showPublishConfirmationOrUpdateIfNotLocalDraft();
    }
  }
 else {
    if (!mShowAztecEditor && (mEditorFragment.isUploadingMedia() || mEditorFragment.isActionInProgress())) {
      ToastUtils.showToast(this,R.string.editor_toast_uploading_please_wait,Duration.SHORT);
      return false;
    }
    if (itemId == R.id.menu_preview_post) {
      mViewPager.setCurrentItem(PAGE_PREVIEW);
    }
 else     if (itemId == R.id.menu_post_settings) {
      InputMethodManager imm=((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE));
      imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
      if (mEditPostSettingsFragment != null) {
        mEditPostSettingsFragment.refreshViews();
      }
      mViewPager.setCurrentItem(PAGE_SETTINGS);
    }
 else     if (itemId == R.id.menu_save_as_draft_or_publish) {
      if (UploadService.hasInProgressMediaUploadsForPost(mPost)) {
        ToastUtils.showToast(EditPostActivity.this,getString(R.string.editor_toast_uploading_please_wait),Duration.SHORT);
        return false;
      }
      updatePostObject();
      if (PostStatus.fromPost(mPost) == PostStatus.DRAFT) {
        if (isDiscardable()) {
          String message=getString(mIsPage ? R.string.error_publish_empty_page : R.string.error_publish_empty_post);
          ToastUtils.showToast(EditPostActivity.this,message,Duration.SHORT);
          return false;
        }
        showPublishConfirmationDialog();
      }
 else {
        if (isDiscardable()) {
          ToastUtils.showToast(EditPostActivity.this,getString(R.string.error_save_empty_draft),Duration.SHORT);
          return false;
        }
        UploadUtils.showSnackbar(findViewById(R.id.editor_activity),R.string.editor_uploading_post);
        if (isNewPost()) {
          mPost.setStatus(PostStatus.DRAFT.toString());
        }
        savePostAndOptionallyFinish(false);
      }
    }
 else     if (itemId == R.id.menu_html_mode) {
      if (mEditorFragment instanceof AztecEditorFragment) {
        ((AztecEditorFragment)mEditorFragment).onToolbarHtmlButtonClicked();
        UploadUtils.showSnackbarSuccessActionOrange(findViewById(R.id.editor_activity),mHtmlModeMenuStateOn ? R.string.menu_html_mode_done_snackbar : R.string.menu_visual_mode_done_snackbar,R.string.menu_undo_snackbar_action,new View.OnClickListener(){
          @Override public void onClick(          View view){
            ((AztecEditorFragment)mEditorFragment).onToolbarHtmlButtonClicked();
          }
        }
);
      }
    }
  }
  return false;
}",0.9565819062445944
13408,"@Override protected void onPostExecute(ReaderTagList tagList){
  if (tagList != null && !tagList.isSameList(mTags)) {
    mTags.clear();
    mTags.addAll(tagList);
    if (mFilterCriteriaLoaderListener != null) {
      mFilterCriteriaLoaderListener.onFilterCriteriasLoaded((List)mTags);
    }
  }
}","@Override protected void onPostExecute(ReaderTagList tagList){
  if (mFilterCriteriaLoaderListener != null) {
    mFilterCriteriaLoaderListener.onFilterCriteriasLoaded((List)tagList);
  }
}",0.7597535934291582
13409,"private static ReaderPost getPostFromCursor(Cursor c){
  if (c == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  int idxText=c.getColumnIndex(""String_Node_Str"");
  if (idxText > -1) {
    post.setText(c.getString(idxText));
  }
  post.postId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.blogId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.feedId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.feedItemId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.authorId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.setPseudoId(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setAuthorName(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setAuthorFirstName(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setBlogName(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setBlogUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setBlogImageUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setExcerpt(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setFormat(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setFeaturedImage(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setFeaturedVideo(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setTitle(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setShortUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setPostAvatar(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDatePublished(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDateLiked(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDateTagged(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.score=c.getDouble(c.getColumnIndex(""String_Node_Str""));
  post.numReplies=c.getInt(c.getColumnIndex(""String_Node_Str""));
  post.numLikes=c.getInt(c.getColumnIndex(""String_Node_Str""));
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isVideoPress=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isJetpack=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.setPrimaryTag(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setSecondaryTag(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setAttachmentsJson(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDiscoverJson(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.xpostPostId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.xpostBlogId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.setRailcarJson(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setCardType(ReaderCardType.fromString(c.getString(c.getColumnIndex(""String_Node_Str""))));
  post.useExcerpt=SqlUtils.sqlToBool(c.getColumnIndex(""String_Node_Str""));
  return post;
}","private static ReaderPost getPostFromCursor(Cursor c){
  if (c == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ReaderPost post=new ReaderPost();
  int idxText=c.getColumnIndex(""String_Node_Str"");
  if (idxText > -1) {
    post.setText(c.getString(idxText));
  }
  post.postId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.blogId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.feedId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.feedItemId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.authorId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.setPseudoId(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setAuthorName(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setAuthorFirstName(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setBlogName(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setBlogUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setBlogImageUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setExcerpt(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setFormat(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setFeaturedImage(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setFeaturedVideo(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setTitle(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setShortUrl(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setPostAvatar(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDatePublished(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDateLiked(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDateTagged(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.score=c.getDouble(c.getColumnIndex(""String_Node_Str""));
  post.numReplies=c.getInt(c.getColumnIndex(""String_Node_Str""));
  post.numLikes=c.getInt(c.getColumnIndex(""String_Node_Str""));
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isVideoPress=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.isJetpack=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  post.setPrimaryTag(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setSecondaryTag(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setAttachmentsJson(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setDiscoverJson(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.xpostPostId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.xpostBlogId=c.getLong(c.getColumnIndex(""String_Node_Str""));
  post.setRailcarJson(c.getString(c.getColumnIndex(""String_Node_Str"")));
  post.setCardType(ReaderCardType.fromString(c.getString(c.getColumnIndex(""String_Node_Str""))));
  post.useExcerpt=SqlUtils.sqlToBool(c.getInt(c.getColumnIndex(""String_Node_Str"")));
  return post;
}",0.9897805831079052
13410,"public static void updatePost(@NonNull ReaderPost post){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",post.getTitle());
  values.put(""String_Node_Str"",post.getText());
  values.put(""String_Node_Str"",post.numReplies);
  values.put(""String_Node_Str"",post.numLikes);
  values.put(""String_Node_Str"",post.isLikedByCurrentUser);
  values.put(""String_Node_Str"",post.isFollowedByCurrentUser);
  values.put(""String_Node_Str"",post.isCommentsOpen);
  ReaderDatabase.getWritableDb().update(""String_Node_Str"",values,""String_Node_Str"",new String[]{post.getPseudoId()});
  ReaderPostList posts=new ReaderPostList();
  posts.add(post);
  addOrUpdatePosts(null,posts);
}","public static void updatePost(@NonNull ReaderPost post){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",post.getTitle());
  values.put(""String_Node_Str"",post.getText());
  values.put(""String_Node_Str"",post.getExcerpt());
  values.put(""String_Node_Str"",post.numReplies);
  values.put(""String_Node_Str"",post.numLikes);
  values.put(""String_Node_Str"",post.isLikedByCurrentUser);
  values.put(""String_Node_Str"",post.isFollowedByCurrentUser);
  values.put(""String_Node_Str"",post.isCommentsOpen);
  values.put(""String_Node_Str"",post.useExcerpt);
  ReaderDatabase.getWritableDb().update(""String_Node_Str"",values,""String_Node_Str"",new String[]{post.getPseudoId()});
  ReaderPostList posts=new ReaderPostList();
  posts.add(post);
  addOrUpdatePosts(null,posts);
}",0.931787175989086
13411,"public boolean shouldShowExcerpt(){
  return isJetpack && useExcerpt;
}","public boolean shouldShowExcerpt(){
  return isJetpack && useExcerpt && hasExcerpt();
}",0.8987341772151899
13412,"private static void handleUpdatePostResponse(final ReaderPost localPost,final JSONObject jsonObject,final UpdateResultListener resultListener){
  if (jsonObject == null) {
    if (resultListener != null) {
      resultListener.onUpdateResult(UpdateResult.FAILED);
    }
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      ReaderPost serverPost=ReaderPost.fromJson(jsonObject);
      if (serverPost.feedId == 0 && localPost.feedId != 0) {
        serverPost.feedId=localPost.feedId;
      }
      if (serverPost.feedItemId == 0 && localPost.feedItemId != 0) {
        serverPost.feedItemId=localPost.feedItemId;
      }
      boolean hasChanges=!serverPost.isSamePost(localPost);
      if (hasChanges) {
        AppLog.d(T.READER,""String_Node_Str"");
        localPost.numReplies=serverPost.numReplies;
        localPost.numLikes=serverPost.numLikes;
        localPost.isFollowedByCurrentUser=serverPost.isFollowedByCurrentUser;
        localPost.isLikedByCurrentUser=serverPost.isLikedByCurrentUser;
        localPost.isCommentsOpen=serverPost.isCommentsOpen;
        localPost.setTitle(serverPost.getTitle());
        localPost.setText(serverPost.getText());
        ReaderPostTable.updatePost(localPost);
      }
      if (handlePostLikes(serverPost,jsonObject)) {
        hasChanges=true;
      }
      if (resultListener != null) {
        final UpdateResult result=(hasChanges ? UpdateResult.CHANGED : UpdateResult.UNCHANGED);
        handler.post(new Runnable(){
          public void run(){
            resultListener.onUpdateResult(result);
          }
        }
);
      }
    }
  }
.start();
}","private static void handleUpdatePostResponse(final ReaderPost localPost,final JSONObject jsonObject,final UpdateResultListener resultListener){
  if (jsonObject == null) {
    if (resultListener != null) {
      resultListener.onUpdateResult(UpdateResult.FAILED);
    }
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      ReaderPost serverPost=ReaderPost.fromJson(jsonObject);
      if (serverPost.feedId == 0 && localPost.feedId != 0) {
        serverPost.feedId=localPost.feedId;
      }
      if (serverPost.feedItemId == 0 && localPost.feedItemId != 0) {
        serverPost.feedItemId=localPost.feedItemId;
      }
      boolean hasChanges=!serverPost.isSamePost(localPost);
      if (hasChanges) {
        AppLog.d(T.READER,""String_Node_Str"");
        localPost.numReplies=serverPost.numReplies;
        localPost.numLikes=serverPost.numLikes;
        localPost.isFollowedByCurrentUser=serverPost.isFollowedByCurrentUser;
        localPost.isLikedByCurrentUser=serverPost.isLikedByCurrentUser;
        localPost.isCommentsOpen=serverPost.isCommentsOpen;
        localPost.useExcerpt=serverPost.useExcerpt;
        localPost.setTitle(serverPost.getTitle());
        localPost.setText(serverPost.getText());
        localPost.setExcerpt(serverPost.getExcerpt());
        ReaderPostTable.updatePost(localPost);
      }
      if (handlePostLikes(serverPost,jsonObject)) {
        hasChanges=true;
      }
      if (resultListener != null) {
        final UpdateResult result=(hasChanges ? UpdateResult.CHANGED : UpdateResult.UNCHANGED);
        handler.post(new Runnable(){
          public void run(){
            resultListener.onUpdateResult(result);
          }
        }
);
      }
    }
  }
.start();
}",0.9687773562882988
13413,"private boolean showPhotoViewer(String imageUrl,View sourceView,int startX,int startY){
  if (!isAdded() || TextUtils.isEmpty(imageUrl)) {
    return false;
  }
  if (!imageUrl.startsWith(""String_Node_Str"")) {
    return false;
  }
  String postContent=(mRenderer != null ? mRenderer.getRenderedHtml() : null);
  boolean isPrivatePost=(mPost != null && mPost.isPrivate);
  EnumSet<PhotoViewerOption> options=EnumSet.noneOf(PhotoViewerOption.class);
  if (isPrivatePost) {
    options.add(ReaderActivityLauncher.PhotoViewerOption.IS_PRIVATE_IMAGE);
  }
  ReaderActivityLauncher.showReaderPhotoViewer(getActivity(),imageUrl,postContent,sourceView,options,startX,startY);
  return true;
}","private boolean showPhotoViewer(String imageUrl,View sourceView,int startX,int startY){
  if (!isAdded() || TextUtils.isEmpty(imageUrl)) {
    return false;
  }
  if (!imageUrl.startsWith(""String_Node_Str"")) {
    return false;
  }
  String postContent=(mPost != null ? mPost.getText() : null);
  boolean isPrivatePost=(mPost != null && mPost.isPrivate);
  EnumSet<PhotoViewerOption> options=EnumSet.noneOf(PhotoViewerOption.class);
  if (isPrivatePost) {
    options.add(ReaderActivityLauncher.PhotoViewerOption.IS_PRIVATE_IMAGE);
  }
  ReaderActivityLauncher.showReaderPhotoViewer(getActivity(),imageUrl,postContent,sourceView,options,startX,startY);
  return true;
}",0.964549483013294
13414,"public String getFirstUsableVideo(){
  Matcher matcher=IFRAME_TAG_PATTERN.matcher(mContent);
  while (matcher.find()) {
    String src=matcher.group(2);
    if (ReaderVideoUtils.canShowVideoThumbnail(src)) {
      return src;
    }
  }
  return null;
}","public String getFirstUsableVideo(){
  Matcher matcher=IFRAME_TAG_PATTERN.matcher(mContent);
  while (matcher.find()) {
    String src=matcher.group(1);
    if (ReaderVideoUtils.canShowVideoThumbnail(src)) {
      return src;
    }
  }
  return null;
}",0.996031746031746
13415,"public void beginScan(ReaderHtmlUtils.HtmlScannerListener listener){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Matcher matcher=IFRAME_TAG_PATTERN.matcher(mContent);
  while (matcher.find()) {
    String tag=matcher.group(1);
    String src=matcher.group(2);
    listener.onTagFound(tag,src);
  }
}","public void beginScan(ReaderHtmlUtils.HtmlScannerListener listener){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Matcher matcher=IFRAME_TAG_PATTERN.matcher(mContent);
  while (matcher.find()) {
    String tag=matcher.group(0);
    String src=matcher.group(1);
    listener.onTagFound(tag,src);
  }
}",0.9046242774566474
13416,"public ReaderImageList getImageList(int maxImageCount,int minImageWidth){
  ReaderImageList imageList=new ReaderImageList(mIsPrivate);
  if (!mContentContainsImages) {
    return imageList;
  }
  Matcher imgMatcher=IMG_TAG_PATTERN.matcher(mContent);
  while (imgMatcher.find()) {
    String imageTag=imgMatcher.group(1);
    String imageUrl=imgMatcher.group(2);
    if (minImageWidth == 0) {
      imageList.addImageUrl(imageUrl);
    }
 else {
      int width=Math.max(ReaderHtmlUtils.getWidthAttrValue(imageTag),ReaderHtmlUtils.getIntQueryParam(imageUrl,""String_Node_Str""));
      if (width >= minImageWidth) {
        imageList.addImageUrl(imageUrl);
        if (maxImageCount > 0 && imageList.size() >= maxImageCount) {
          break;
        }
      }
    }
  }
  return imageList;
}","public ReaderImageList getImageList(int maxImageCount,int minImageWidth){
  ReaderImageList imageList=new ReaderImageList(mIsPrivate);
  if (!mContentContainsImages) {
    return imageList;
  }
  Matcher imgMatcher=IMG_TAG_PATTERN.matcher(mContent);
  while (imgMatcher.find()) {
    String imageTag=imgMatcher.group(0);
    String imageUrl=imgMatcher.group(1);
    if (minImageWidth == 0) {
      imageList.addImageUrl(imageUrl);
    }
 else {
      int width=Math.max(ReaderHtmlUtils.getWidthAttrValue(imageTag),ReaderHtmlUtils.getIntQueryParam(imageUrl,""String_Node_Str""));
      if (width >= minImageWidth) {
        imageList.addImageUrl(imageUrl);
        if (maxImageCount > 0 && imageList.size() >= maxImageCount) {
          break;
        }
      }
    }
  }
  return imageList;
}",0.9481012658227848
13417,"public void beginScan(ReaderHtmlUtils.HtmlScannerListener listener){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!mContentContainsImages) {
    return;
  }
  Matcher imgMatcher=IMG_TAG_PATTERN.matcher(mContent);
  while (imgMatcher.find()) {
    String imageTag=imgMatcher.group(1);
    String imageUrl=imgMatcher.group(2);
    listener.onTagFound(imageTag,imageUrl);
  }
}","public void beginScan(ReaderHtmlUtils.HtmlScannerListener listener){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!mContentContainsImages) {
    return;
  }
  Matcher imgMatcher=IMG_TAG_PATTERN.matcher(mContent);
  while (imgMatcher.find()) {
    String imageTag=imgMatcher.group(0);
    String imageUrl=imgMatcher.group(1);
    listener.onTagFound(imageTag,imageUrl);
  }
}",0.8349056603773585
13418,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN,sticky=true) public void onSiteCreationStateUpdated(SiteCreationState event){
  AppLog.i(T.NUX,""String_Node_Str"" + event.getStepName());
  mProgressContainer.setVisibility(View.VISIBLE);
  mErrorContainer.setVisibility(View.GONE);
  configureBackButton();
switch (event.getStep()) {
case IDLE:
    getView().announceForAccessibility(getText(R.string.notification_site_creation_title_in_progress));
  disableUntil(0);
configureImage(false);
break;
case NEW_SITE:
disableUntil(R.id.site_creation_creating_laying_foundation);
configureImage(false);
break;
case FETCHING_NEW_SITE:
disableUntil(R.id.site_creation_creating_fetching_info);
configureImage(false);
break;
case SET_TAGLINE:
disableUntil(R.id.site_creation_creating_configuring_content);
configureImage(false);
break;
case SET_THEME:
disableUntil(R.id.site_creation_creating_configuring_theme);
configureImage(false);
break;
case FAILURE:
getView().announceForAccessibility(getText(R.string.notification_site_creation_failed));
configureImage(true);
mProgressContainer.setVisibility(View.GONE);
mErrorContainer.setVisibility(View.VISIBLE);
handleFailure((SiteCreationState)event.getPayload());
NetworkUtils.checkConnection(getContext());
break;
case PRELOAD:
disableUntil(R.id.site_creation_creating_preparing_frontend);
configureImage(false);
mPreviewWebViewClient=loadWebview();
break;
case SUCCESS:
getView().announceForAccessibility(getText(R.string.notification_site_creation_title_success));
mNewSiteLocalId=(Integer)event.getPayload();
if (mPreviewWebViewClient == null) {
loadWebview();
}
 else {
mWebViewLoadedInTime=mPreviewWebViewClient.mIsPageFinished;
}
mutateToCompleted(mWebViewLoadedInTime);
break;
}
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN,sticky=true) public void onSiteCreationStateUpdated(SiteCreationState event){
  AppLog.i(T.NUX,""String_Node_Str"" + event.getStepName());
  mProgressContainer.setVisibility(View.VISIBLE);
  mErrorContainer.setVisibility(View.GONE);
  configureBackButton();
  CharSequence statusAnnouncement=""String_Node_Str"";
switch (event.getStep()) {
case IDLE:
    statusAnnouncement=getText(R.string.notification_site_creation_title_in_progress);
  disableUntil(0);
configureImage(false);
break;
case NEW_SITE:
statusAnnouncement=getText(R.string.site_creation_creating_laying_foundation);
disableUntil(R.id.site_creation_creating_laying_foundation);
configureImage(false);
break;
case FETCHING_NEW_SITE:
statusAnnouncement=getText(R.string.site_creation_creating_fetching_info);
disableUntil(R.id.site_creation_creating_fetching_info);
configureImage(false);
break;
case SET_TAGLINE:
statusAnnouncement=getText(R.string.site_creation_creating_configuring_content);
disableUntil(R.id.site_creation_creating_configuring_content);
configureImage(false);
break;
case SET_THEME:
statusAnnouncement=getText(R.string.site_creation_creating_configuring_theme);
disableUntil(R.id.site_creation_creating_configuring_theme);
configureImage(false);
break;
case FAILURE:
statusAnnouncement=getText(R.string.notification_site_creation_failed);
configureImage(true);
mProgressContainer.setVisibility(View.GONE);
mErrorContainer.setVisibility(View.VISIBLE);
handleFailure((SiteCreationState)event.getPayload());
NetworkUtils.checkConnection(getContext());
break;
case PRELOAD:
statusAnnouncement=getText(R.string.site_creation_creating_preparing_frontend);
disableUntil(R.id.site_creation_creating_preparing_frontend);
configureImage(false);
mPreviewWebViewClient=loadWebview();
break;
case SUCCESS:
statusAnnouncement=getText(R.string.notification_site_creation_title_success);
mNewSiteLocalId=(Integer)event.getPayload();
if (mPreviewWebViewClient == null) {
loadWebview();
}
 else {
mWebViewLoadedInTime=mPreviewWebViewClient.mIsPageFinished;
}
mutateToCompleted(mWebViewLoadedInTime);
break;
}
getView().announceForAccessibility(statusAnnouncement);
}",0.8324898785425101
13419,"private ReaderTag getReaderTagFromBundleParams(PersistableBundle bundle){
  String slug=bundle.getString(ARG_TAG_PARAM_SLUG);
  String displayName=bundle.getString(ARG_TAG_PARAM_DISPLAY_NAME);
  String title=bundle.getString(ARG_TAG_PARAM_TITLE);
  String endpoint=bundle.getString(ARG_TAG_PARAM_ENDPOINT);
  int tagType=bundle.getInt(ARG_TAG_PARAM_TAGTYPE);
  ReaderTag tag=new ReaderTag(slug,displayName,title,endpoint,ReaderTagType.values()[tagType]);
  return tag;
}","private ReaderTag getReaderTagFromBundleParams(PersistableBundle bundle){
  String slug=bundle.getString(ARG_TAG_PARAM_SLUG);
  String displayName=bundle.getString(ARG_TAG_PARAM_DISPLAY_NAME);
  String title=bundle.getString(ARG_TAG_PARAM_TITLE);
  String endpoint=bundle.getString(ARG_TAG_PARAM_ENDPOINT);
  int tagType=bundle.getInt(ARG_TAG_PARAM_TAGTYPE);
  ReaderTag tag=new ReaderTag(slug,displayName,title,endpoint,ReaderTagType.fromInt(tagType));
  return tag;
}",0.979765708200213
13420,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAutomatedTransferInitiated(OnAutomatedTransferInitiated event){
  if (isFinishing()) {
    return;
  }
  if (!event.isError()) {
    handleAutomatedTransferFailed(event.error.message);
  }
 else {
    mDispatcher.dispatch(SiteActionBuilder.newCheckAutomatedTransferStatusAction(mSite));
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAutomatedTransferInitiated(OnAutomatedTransferInitiated event){
  if (isFinishing()) {
    return;
  }
  if (event.isError()) {
    handleAutomatedTransferFailed(event.error.message);
  }
 else {
    mDispatcher.dispatch(SiteActionBuilder.newCheckAutomatedTransferStatusAction(mSite));
  }
}",0.9986893840104848
13421,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAutomatedTransferStatusChecked(OnAutomatedTransferStatusChecked event){
  if (isFinishing()) {
    return;
  }
  if (!event.isError()) {
    handleAutomatedTransferFailed(event.error.message);
  }
 else {
    if (event.isCompleted) {
      cancelAutomatedTransferDialog();
      handlePluginInstalled();
    }
 else {
      mAutomatedTransferProgressDialog.setProgress(event.currentStep);
      mAutomatedTransferProgressDialog.setMax(event.totalSteps);
      if (mHandler == null) {
        mHandler=new Handler();
      }
      mHandler.postDelayed(new Runnable(){
        @Override public void run(){
          mDispatcher.dispatch(SiteActionBuilder.newCheckAutomatedTransferStatusAction(mSite));
        }
      }
,1000);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAutomatedTransferStatusChecked(OnAutomatedTransferStatusChecked event){
  if (isFinishing()) {
    return;
  }
  if (event.isError()) {
    handleAutomatedTransferFailed(event.error.message);
  }
 else {
    if (event.isCompleted) {
      cancelAutomatedTransferDialog();
      handlePluginInstalled();
    }
 else {
      mAutomatedTransferProgressDialog.setProgress(event.currentStep);
      mAutomatedTransferProgressDialog.setMax(event.totalSteps);
      if (mHandler == null) {
        mHandler=new Handler();
      }
      mHandler.postDelayed(new Runnable(){
        @Override public void run(){
          mDispatcher.dispatch(SiteActionBuilder.newCheckAutomatedTransferStatusAction(mSite));
        }
      }
,1000);
    }
  }
}",0.999395039322444
13422,"private void showEmptyView(@StringRes int titleResId,@StringRes int descriptionResId,@StringRes int buttonResId){
  if (isAdded() && mEmptyView != null) {
    mEmptyView.setVisibility(View.VISIBLE);
    mFilterDivider.setVisibility(View.GONE);
    mRecyclerView.setVisibility(View.GONE);
    mConnectJetpackView.setVisibility(View.GONE);
    setFilterViewScrollable(false);
    ((TextView)mEmptyView.findViewById(R.id.text_empty)).setText(titleResId);
    TextView descriptionTextView=(TextView)mEmptyView.findViewById(R.id.text_empty_description);
    if (descriptionResId > 0) {
      descriptionTextView.setText(descriptionResId);
    }
 else {
      descriptionTextView.setVisibility(View.GONE);
    }
    TextView btnAction=(TextView)mEmptyView.findViewById(R.id.button_empty_action);
    if (buttonResId > 0) {
      btnAction.setText(buttonResId);
      btnAction.setVisibility(View.VISIBLE);
    }
 else {
      btnAction.setVisibility(View.GONE);
    }
    btnAction.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        performActionForActiveFilter();
      }
    }
);
  }
}","@SuppressLint(""String_Node_Str"") private void showEmptyView(@StringRes int titleResId,@StringRes int descriptionResId,@StringRes int buttonResId){
  if (isAdded() && mEmptyView != null) {
    mEmptyView.setVisibility(View.VISIBLE);
    mFilterDivider.setVisibility(View.GONE);
    mRecyclerView.setVisibility(View.GONE);
    mConnectJetpackView.setVisibility(View.GONE);
    setFilterViewScrollable(false);
    ((TextView)mEmptyView.findViewById(R.id.text_empty)).setText(titleResId);
    TextView descriptionTextView=(TextView)mEmptyView.findViewById(R.id.text_empty_description);
    if (descriptionResId > 0) {
      descriptionTextView.setText(descriptionResId);
    }
 else {
      descriptionTextView.setVisibility(View.GONE);
    }
    TextView btnAction=(TextView)mEmptyView.findViewById(R.id.button_empty_action);
    if (buttonResId > 0) {
      btnAction.setText(buttonResId);
      btnAction.setVisibility(View.VISIBLE);
    }
 else {
      btnAction.setVisibility(View.GONE);
    }
    btnAction.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        performActionForActiveFilter();
      }
    }
);
  }
}",0.9856832971800434
13423,"public static BitmapDrawable getAztecPlaceholderDrawableFromResID(Context context,@DrawableRes int drawableId,int maxImageSizeForVisualEditor){
  Drawable drawable=ContextCompat.getDrawable(context,drawableId);
  Bitmap bitmap;
  if (drawable instanceof BitmapDrawable) {
    bitmap=((BitmapDrawable)drawable).getBitmap();
    bitmap=ImageUtils.getScaledBitmapAtLongestSide(bitmap,maxImageSizeForVisualEditor);
  }
 else   if (drawable instanceof VectorDrawableCompat || drawable instanceof VectorDrawable) {
    bitmap=Bitmap.createBitmap(maxImageSizeForVisualEditor,maxImageSizeForVisualEditor,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
    drawable.draw(canvas);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + drawable.getClass().getName());
  }
  bitmap.setDensity(DisplayMetrics.DENSITY_DEFAULT);
  return new BitmapDrawable(context.getResources(),bitmap);
}","public static BitmapDrawable getAztecPlaceholderDrawableFromResID(Context context,@DrawableRes int drawableId,int maxImageSizeForVisualEditor){
  Drawable drawable=ContextCompat.getDrawable(context,drawableId);
  Bitmap bitmap;
  if (drawable instanceof BitmapDrawable) {
    bitmap=((BitmapDrawable)drawable).getBitmap();
    bitmap=ImageUtils.getScaledBitmapAtLongestSide(bitmap,maxImageSizeForVisualEditor);
  }
 else   if (drawable instanceof VectorDrawableCompat || Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && drawable instanceof VectorDrawable) {
    bitmap=Bitmap.createBitmap(maxImageSizeForVisualEditor,maxImageSizeForVisualEditor,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
    drawable.draw(canvas);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + drawable.getClass().getName());
  }
  bitmap.setDensity(DisplayMetrics.DENSITY_DEFAULT);
  return new BitmapDrawable(context.getResources(),bitmap);
}",0.971571072319202
13424,"/** 
 * If the user has selected a language other than the device default, return that language code, else just return the device default language code.
 * @return The 2-letter language code (example ""en"")
 */
private static String getLanguage(Context context){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  if (prefs.contains(LANGUAGE_KEY)) {
    return prefs.getString(LANGUAGE_KEY,""String_Node_Str"");
  }
  return LanguageUtils.getCurrentDeviceLanguageCode(context);
}","/** 
 * If the user has selected a language other than the device default, return that language code, else just return the device default language code.
 * @return The 2-letter language code (example ""en"")
 */
private static String getLanguage(Context context){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  return prefs.getString(LANGUAGE_KEY,LanguageUtils.getCurrentDeviceLanguageCode());
}",0.8221512247071352
13425,"/** 
 * Gets a locale for the given language code.
 * @param languageCode The 2-letter language code (example ""en""). If null or empty will returnthe current default locale.
 */
public static Locale languageLocale(@Nullable String languageCode){
  if (TextUtils.isEmpty(languageCode)) {
    return Locale.getDefault();
  }
  if (languageCode.length() > NO_REGION_LANG_CODE_LEN) {
    return new Locale(languageCode.substring(0,NO_REGION_LANG_CODE_LEN),languageCode.substring(REGION_SUBSTRING_INDEX));
  }
  return new Locale(languageCode);
}","/** 
 * Gets a locale for the given language code.
 * @param languageCode The 2-letter language code (example ""en""). If null or empty will returnthe current default locale.
 */
public static Locale languageLocale(@Nullable String languageCode){
  if (TextUtils.isEmpty(languageCode)) {
    return Locale.getDefault();
  }
  if (languageCode.contains(""String_Node_Str"")) {
    String[] opts=languageCode.split(""String_Node_Str"");
    if (opts.length >= 2) {
      return new Locale(opts[0],opts[1]);
    }
 else {
      return new Locale(opts[0]);
    }
  }
  return new Locale(languageCode);
}",0.6884377758164166
13426,"/** 
 * Update resources for the current session.
 * @param context The current active context
 * @param language The 2-letter language code (example ""en"")
 * @return The modified context containing the updated localized resources
 */
private static Context updateResources(Context context,String language){
  Locale locale=new Locale(language);
  Locale.setDefault(locale);
  Resources res=context.getResources();
  Configuration config=new Configuration(res.getConfiguration());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    config.setLocale(locale);
    context=context.createConfigurationContext(config);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) {
    config.locale=locale;
    res.updateConfiguration(config,res.getDisplayMetrics());
  }
  return context;
}","/** 
 * Update resources for the current session.
 * @param context The current active context
 * @param language The 2-letter language code (example ""en"")
 * @return The modified context containing the updated localized resources
 */
private static Context updateResources(Context context,String language){
  Locale locale=languageLocale(language);
  Locale.setDefault(locale);
  Resources res=context.getResources();
  Configuration config=new Configuration(res.getConfiguration());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    config.setLocale(locale);
    context=context.createConfigurationContext(config);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N_MR1) {
    config.locale=locale;
    res.updateConfiguration(config,res.getDisplayMetrics());
  }
  return context;
}",0.9926017262638718
13427,"/** 
 * Compare the language for the current context with another language.
 * @param language The language to compare
 * @return True if the languages are the same, else false
 */
public static boolean isSameLanguage(@NonNull String language){
  Locale newLocale=languageLocale(language);
  return Locale.getDefault().getLanguage().equals(newLocale.getLanguage());
}","/** 
 * Compare the language for the current context with another language.
 * @param language The language to compare
 * @return True if the languages are the same, else false
 */
public static boolean isSameLanguage(@NonNull String language){
  Locale newLocale=languageLocale(language);
  return Locale.getDefault().toString().equals(newLocale.toString());
}",0.9478021978021978
13428,"@Override public void onBackPressed(){
  if (isCommentEdited()) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(new ContextThemeWrapper(this,R.style.Calypso_Dialog));
    dialogBuilder.setTitle(getResources().getText(R.string.cancel_edit));
    dialogBuilder.setMessage(getResources().getText(R.string.sure_to_cancel_edit_comment));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        finish();
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    super.onBackPressed();
  }
}","@Override public void onBackPressed(){
  if (isCommentEdited()) {
    cancelEditCommentConfirmation();
  }
 else {
    super.onBackPressed();
  }
}",0.2731614135625597
13429,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.comment_edit_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  loadComment(getIntent());
  ActivityId.trackLastActivity(ActivityId.COMMENT_EDITOR);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.comment_edit_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  loadComment(getIntent());
  if (icicle != null) {
    if (icicle.getBoolean(ARG_CANCEL_EDITING_COMMENT_DIALOG_VISIBLE,false)) {
      cancelEditCommentConfirmation();
    }
  }
  ActivityId.trackLastActivity(ActivityId.COMMENT_EDITOR);
}",0.7778855480116392
13430,"@Override public void onBackPressed(){
  if (isCommentEdited()) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditCommentActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.cancel_edit));
    dialogBuilder.setMessage(getResources().getText(R.string.sure_to_cancel_edit_comment));
    dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        finish();
      }
    }
);
    dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    super.onBackPressed();
  }
}","@Override public void onBackPressed(){
  if (isCommentEdited()) {
    cancelEditCommentConfirmation();
  }
 else {
    super.onBackPressed();
  }
}",0.2747791952894995
13431,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.comment_edit_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  loadComment(getIntent());
  ActivityId.trackLastActivity(ActivityId.COMMENT_EDITOR);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.comment_edit_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  loadComment(getIntent());
  if (icicle != null) {
    if (icicle.getBoolean(ARG_CANCEL_EDITING_COMMENT_DIALOG_VISIBLE,false)) {
      cancelEditCommentConfirmation();
    }
  }
  ActivityId.trackLastActivity(ActivityId.COMMENT_EDITOR);
}",0.7778855480116392
13432,"@Override protected void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mCommentsModel == null && mCommentFollowersModel == null) {
    showHideNoResultsUI(true);
    mTotalsLabel.setVisibility(View.GONE);
    mTopPagerContainer.setVisibility(View.GONE);
    return;
  }
  mTopPagerContainer.setVisibility(View.VISIBLE);
  if (mCommentFollowersModel != null) {
    mTotalsLabel.setVisibility(View.VISIBLE);
    int totalNumberOfFollowers=mCommentFollowersModel.getTotal();
    String totalCommentsFollowers=getString(R.string.stats_comments_total_comments_followers);
    mTotalsLabel.setText(String.format(totalCommentsFollowers,FormatUtils.formatDecimal(totalNumberOfFollowers)));
  }
  ArrayAdapter adapter=null;
  if (mTopPagerSelectedButtonIndex == 0 && hasAuthors()) {
    adapter=new AuthorsAdapter(getActivity(),getAuthors());
  }
 else   if (mTopPagerSelectedButtonIndex == 1 && hasPosts()) {
    adapter=new PostsAndPagesAdapter(getActivity(),getPosts());
  }
  if (adapter != null) {
    StatsUIHelper.reloadLinearLayout(getActivity(),adapter,mList,getMaxNumberOfItemsToShowInList());
    showHideNoResultsUI(false);
  }
 else {
    showHideNoResultsUI(true);
  }
}","@Override protected void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mCommentsModel == null && mCommentFollowersModel == null) {
    showHideNoResultsUI(true);
    mTotalsLabel.setVisibility(View.GONE);
    mTopPagerContainer.setVisibility(View.GONE);
    return;
  }
  mTopPagerContainer.setVisibility(View.VISIBLE);
  if (mCommentFollowersModel != null) {
    mTotalsLabel.setVisibility(View.VISIBLE);
    int totalNumberOfFollowers=mCommentFollowersModel.getTotal();
    String totalCommentsFollowers=getString(R.string.stats_comments_total_comments_followers);
    mTotalsLabel.setText(String.format(totalCommentsFollowers,FormatUtils.formatDecimal(totalNumberOfFollowers)));
  }
  ArrayAdapter adapter=null;
  if (mTopPagerSelectedButtonIndex == 0 && hasAuthors()) {
    adapter=new AuthorsAdapter(getActivity(),getAuthors());
  }
 else   if (mTopPagerSelectedButtonIndex == 1 && hasPosts()) {
    adapter=new PostsAndPagesAdapter(getActivity(),getPosts(),true);
  }
  if (adapter != null) {
    StatsUIHelper.reloadLinearLayout(getActivity(),adapter,mList,getMaxNumberOfItemsToShowInList());
    showHideNoResultsUI(false);
  }
 else {
    showHideNoResultsUI(true);
  }
}",0.9978911851539436
13433,"@Override protected void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (hasTopPostsAndPages()) {
    List<StatsPostModel> postViews=mTopPostsAndPagesModel.getTopPostsAndPages();
    ArrayAdapter adapter=new PostsAndPagesAdapter(getActivity(),postViews);
    StatsUIHelper.reloadLinearLayout(getActivity(),adapter,mList,getMaxNumberOfItemsToShowInList());
    showHideNoResultsUI(false);
  }
 else {
    showHideNoResultsUI(true);
  }
}","@Override protected void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (hasTopPostsAndPages()) {
    List<StatsPostModel> postViews=mTopPostsAndPagesModel.getTopPostsAndPages();
    ArrayAdapter adapter=new PostsAndPagesAdapter(getActivity(),postViews,false);
    StatsUIHelper.reloadLinearLayout(getActivity(),adapter,mList,getMaxNumberOfItemsToShowInList());
    showHideNoResultsUI(false);
  }
 else {
    showHideNoResultsUI(true);
  }
}",0.9932584269662922
13434,"@Override @NonNull public View getView(int position,View convertView,@NonNull ViewGroup parent){
  View rowView=convertView;
  if (rowView == null) {
    rowView=mInflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(rowView);
    rowView.setTag(viewHolder);
  }
  final StatsPostModel currentRowData=mList.get(position);
  StatsViewHolder holder=(StatsViewHolder)rowView.getTag();
  holder.setEntryTextOpenDetailsPage(currentRowData);
  holder.setMoreButtonOpenInReader(currentRowData);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(currentRowData.getTotals()));
  holder.totalsTextView.setContentDescription(StringUtils.getQuantityString(holder.totalsTextView.getContext(),R.string.stats_comments_zero_desc,R.string.stats_comments_one_desc,R.string.stats_comments_many_desc,currentRowData.getTotals()));
  holder.networkImageView.setVisibility(View.GONE);
  return rowView;
}","@Override @NonNull public View getView(int position,View convertView,@NonNull ViewGroup parent){
  View rowView=convertView;
  if (rowView == null) {
    rowView=mInflater.inflate(R.layout.stats_list_cell,parent,false);
    StatsViewHolder viewHolder=new StatsViewHolder(rowView);
    rowView.setTag(viewHolder);
  }
  final StatsPostModel currentRowData=mList.get(position);
  StatsViewHolder holder=(StatsViewHolder)rowView.getTag();
  holder.setEntryTextOpenDetailsPage(currentRowData);
  holder.setMoreButtonOpenInReader(currentRowData);
  holder.totalsTextView.setText(FormatUtils.formatDecimal(currentRowData.getTotals()));
  if (mAnnounceValueAsComments) {
    holder.totalsTextView.setContentDescription(StringUtils.getQuantityString(holder.totalsTextView.getContext(),R.string.stats_comments_zero_desc,R.string.stats_comments_one_desc,R.string.stats_comments_many_desc,currentRowData.getTotals()));
  }
 else {
    holder.totalsTextView.setContentDescription(StringUtils.getQuantityString(holder.totalsTextView.getContext(),R.string.stats_views_zero_desc,R.string.stats_views_one_desc,R.string.stats_views_many_desc,currentRowData.getTotals()));
  }
  holder.networkImageView.setVisibility(View.GONE);
  return rowView;
}",0.8679245283018868
13435,"public PostsAndPagesAdapter(Context context,List<StatsPostModel> list){
  super(context,R.layout.stats_list_cell,list);
  mList=list;
  mInflater=LayoutInflater.from(context);
}","public PostsAndPagesAdapter(Context context,List<StatsPostModel> list,boolean announceValueAsComments){
  super(context,R.layout.stats_list_cell,list);
  mList=list;
  mInflater=LayoutInflater.from(context);
  mAnnounceValueAsComments=announceValueAsComments;
}",0.8082191780821918
13436,"private void showListEditorDialog(int titleRes,int headerRes){
  mDialog=new Dialog(getActivity(),R.style.Calypso_SiteSettingsTheme);
  mDialog.setOnDismissListener(this);
  mDialog.setContentView(getListEditorView(getString(headerRes)));
  mDialog.show();
  WPActivityUtils.addToolbarToDialog(this,mDialog,getString(titleRes));
}","private void showListEditorDialog(int titleRes,int headerRes){
  mDialog=new Dialog(getActivity(),R.style.Calypso_SiteSettingsTheme);
  mDialog.setOnDismissListener(this);
  mDialog.setTitle(titleRes);
  mDialog.setContentView(getListEditorView(getString(headerRes)));
  mDialog.show();
  WPActivityUtils.addToolbarToDialog(this,mDialog,getString(titleRes));
}",0.9565217391304348
13437,"private View getListEditorView(String headerText){
  Context themer=new ContextThemeWrapper(getActivity(),R.style.Calypso_SiteSettingsTheme);
  View view=View.inflate(themer,R.layout.list_editor,null);
  ((TextView)view.findViewById(R.id.list_editor_header_text)).setText(headerText);
  mAdapter=null;
  final EmptyViewRecyclerView list=(EmptyViewRecyclerView)view.findViewById(android.R.id.list);
  list.setLayoutManager(new SmoothScrollLinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false,getResources().getInteger(android.R.integer.config_mediumAnimTime)));
  list.setAdapter(getAdapter());
  list.setEmptyView(view.findViewById(R.id.empty_view));
  list.addOnItemTouchListener(new RecyclerViewItemClickListener(getActivity(),list,new RecyclerViewItemClickListener.OnItemClickListener(){
    @Override public void onItemClick(    View view,    int position){
      if (mActionMode != null) {
        getAdapter().toggleItemSelected(position);
        mActionMode.invalidate();
        if (getAdapter().getItemsSelected().size() <= 0) {
          mActionMode.finish();
        }
      }
    }
    @Override public void onLongItemClick(    View view,    int position){
      if (mActionMode == null) {
        if (view.isHapticFeedbackEnabled()) {
          view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
        }
        mDialog.getWindow().getDecorView().startActionMode(new ActionModeCallback());
        getAdapter().setItemSelected(position);
        mActionMode.invalidate();
      }
    }
  }
));
  view.findViewById(R.id.fab_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
      final EditText input=new EditText(getActivity());
      WPPrefUtils.layoutAsInput(input);
      input.setWidth(getResources().getDimensionPixelSize(R.dimen.list_editor_input_max_width));
      input.setHint(R.string.site_settings_list_editor_input_hint);
      builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String entry=input.getText().toString();
          if (!TextUtils.isEmpty(entry) && !mEditingList.contains(entry)) {
            if (mEditingList == mSiteSettings.getJetpackWhitelistKeys() && !isValidIpOrRange(entry)) {
              ToastUtils.showToast(getActivity(),R.string.invalid_ip_or_range);
              return;
            }
            mEditingList.add(entry);
            getAdapter().notifyItemInserted(getAdapter().getItemCount() - 1);
            list.post(new Runnable(){
              @Override public void run(){
                list.smoothScrollToPosition(getAdapter().getItemCount() - 1);
              }
            }
);
            mSiteSettings.saveSettings();
            AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.SITE_SETTINGS_ADDED_LIST_ITEM,mSite);
          }
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      final AlertDialog alertDialog=builder.create();
      int spacing=getResources().getDimensionPixelSize(R.dimen.dlp_padding_start);
      alertDialog.setView(input,spacing,spacing,spacing,0);
      alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
      alertDialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);
      alertDialog.setOnDismissListener(new DialogInterface.OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          alertDialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        }
      }
);
      alertDialog.show();
      Button positive=alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
      Button negative=alertDialog.getButton(DialogInterface.BUTTON_NEGATIVE);
      if (positive != null)       WPPrefUtils.layoutAsFlatButton(positive);
      if (negative != null)       WPPrefUtils.layoutAsFlatButton(negative);
    }
  }
);
  return view;
}","private View getListEditorView(String headerText){
  Context themer=new ContextThemeWrapper(getActivity(),R.style.Calypso_SiteSettingsTheme);
  View view=View.inflate(themer,R.layout.list_editor,null);
  ((TextView)view.findViewById(R.id.list_editor_header_text)).setText(headerText);
  mAdapter=null;
  final EmptyViewRecyclerView list=view.findViewById(android.R.id.list);
  list.setLayoutManager(new SmoothScrollLinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false,getResources().getInteger(android.R.integer.config_mediumAnimTime)));
  list.setAdapter(getAdapter());
  list.setEmptyView(view.findViewById(R.id.empty_view));
  list.addOnItemTouchListener(new RecyclerViewItemClickListener(getActivity(),list,new RecyclerViewItemClickListener.OnItemClickListener(){
    @Override public void onItemClick(    View view,    int position){
      if (mActionMode != null) {
        getAdapter().toggleItemSelected(position);
        mActionMode.invalidate();
        if (getAdapter().getItemsSelected().size() <= 0) {
          mActionMode.finish();
        }
      }
    }
    @Override public void onLongItemClick(    View view,    int position){
      if (mActionMode == null) {
        if (view.isHapticFeedbackEnabled()) {
          view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
        }
        mDialog.getWindow().getDecorView().startActionMode(new ActionModeCallback());
        getAdapter().setItemSelected(position);
        mActionMode.invalidate();
      }
    }
  }
));
  view.findViewById(R.id.fab_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
      final EditText input=new EditText(getActivity());
      WPPrefUtils.layoutAsInput(input);
      input.setWidth(getResources().getDimensionPixelSize(R.dimen.list_editor_input_max_width));
      input.setHint(R.string.site_settings_list_editor_input_hint);
      builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String entry=input.getText().toString();
          if (!TextUtils.isEmpty(entry) && !mEditingList.contains(entry)) {
            if (mEditingList == mSiteSettings.getJetpackWhitelistKeys() && !isValidIpOrRange(entry)) {
              ToastUtils.showToast(getActivity(),R.string.invalid_ip_or_range);
              return;
            }
            mEditingList.add(entry);
            getAdapter().notifyItemInserted(getAdapter().getItemCount() - 1);
            list.post(new Runnable(){
              @Override public void run(){
                list.smoothScrollToPosition(getAdapter().getItemCount() - 1);
              }
            }
);
            mSiteSettings.saveSettings();
            AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.SITE_SETTINGS_ADDED_LIST_ITEM,mSite);
          }
        }
      }
);
      builder.setNegativeButton(R.string.cancel,null);
      final AlertDialog alertDialog=builder.create();
      int spacing=getResources().getDimensionPixelSize(R.dimen.dlp_padding_start);
      alertDialog.setView(input,spacing,spacing,spacing,0);
      alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
      alertDialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);
      alertDialog.setOnDismissListener(new DialogInterface.OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          alertDialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        }
      }
);
      alertDialog.show();
      Button positive=alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
      Button negative=alertDialog.getButton(DialogInterface.BUTTON_NEGATIVE);
      if (positive != null)       WPPrefUtils.layoutAsFlatButton(positive);
      if (negative != null)       WPPrefUtils.layoutAsFlatButton(negative);
    }
  }
);
  return view;
}",0.9971734054319774
13438,"@Override public void onChildViewAdded(View parent,View child){
  if (child.getId() == android.R.id.title && child instanceof TextView) {
    TextView title=(TextView)child;
    WPPrefUtils.layoutAsBody2(title);
  }
 else {
    TextView title=(TextView)child.findViewById(android.R.id.title);
    if (title != null)     WPPrefUtils.layoutAsSubhead(title);
  }
}","@Override public void onChildViewAdded(View parent,View child){
  if (child.getId() == android.R.id.title && child instanceof TextView) {
    TextView title=(TextView)child;
    WPPrefUtils.layoutAsBody2(title);
  }
 else {
    TextView title=child.findViewById(android.R.id.title);
    if (title != null)     WPPrefUtils.layoutAsSubhead(title);
  }
}",0.9859550561797752
13439,"private boolean setupMorePreferenceScreen(){
  if (mMorePreference == null || !isAdded())   return false;
  String title=getString(R.string.site_settings_discussion_title);
  Dialog dialog=mMorePreference.getDialog();
  if (dialog != null) {
    setupPreferenceList((ListView)dialog.findViewById(android.R.id.list),getResources());
    WPActivityUtils.addToolbarToDialog(this,dialog,title);
    return true;
  }
  return false;
}","private boolean setupMorePreferenceScreen(){
  if (mMorePreference == null || !isAdded())   return false;
  String title=getString(R.string.site_settings_discussion_title);
  Dialog dialog=mMorePreference.getDialog();
  if (dialog != null) {
    dialog.setTitle(title);
    setupPreferenceList((ListView)dialog.findViewById(android.R.id.list),getResources());
    WPActivityUtils.addToolbarToDialog(this,dialog,title);
    return true;
  }
  return false;
}",0.9683972911963884
13440,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onStockMediaListFetched(StockMediaStore.OnStockMediaListFetched event){
  if (mSearchQuery == null || !mSearchQuery.equals(event.searchTerm)) {
    return;
  }
  mIsFetching=false;
  showProgress(false);
  if (event.isError()) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    mCanLoadMore=false;
    return;
  }
  mNextPage=event.nextPage;
  mCanLoadMore=event.canLoadMore;
  if (event.nextPage == 2) {
    mAdapter.setMediaList(event.mediaList);
  }
 else {
    mAdapter.addMediaList(event.mediaList);
  }
  showEmptyView(mAdapter.isEmpty() && !TextUtils.isEmpty(mSearchQuery));
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onStockMediaListFetched(StockMediaStore.OnStockMediaListFetched event){
  if (mSearchQuery == null || !mSearchQuery.equals(event.searchTerm)) {
    return;
  }
  mIsFetching=false;
  showProgress(false);
  if (event.isError()) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    ToastUtils.showToast(this,R.string.media_generic_error);
    mCanLoadMore=false;
    return;
  }
  mNextPage=event.nextPage;
  mCanLoadMore=event.canLoadMore;
  if (event.nextPage == 2) {
    mAdapter.setMediaList(event.mediaList);
  }
 else {
    mAdapter.addMediaList(event.mediaList);
  }
  showEmptyView(mAdapter.isEmpty() && !TextUtils.isEmpty(mSearchQuery));
}",0.9567068843151172
13441,"private void fetchStockMedia(@Nullable String searchQuery,int page){
  if (mIsFetching || !NetworkUtils.checkConnection(this)) {
    return;
  }
  if (TextUtils.isEmpty(searchQuery)) {
    mAdapter.clear();
    return;
  }
  if (page == 1) {
    mAdapter.clear();
  }
  showProgress(true);
  mIsFetching=true;
  showEmptyView(false);
  mSearchQuery=searchQuery;
  AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + page);
  StockMediaStore.FetchStockMediaListPayload payload=new StockMediaStore.FetchStockMediaListPayload(searchQuery,page);
  mDispatcher.dispatch(StockMediaActionBuilder.newFetchStockMediaAction(payload));
}","private void fetchStockMedia(@Nullable String searchQuery,int page){
  if ((mIsFetching && page != 1) || !NetworkUtils.checkConnection(this)) {
    return;
  }
  mSearchQuery=searchQuery;
  if (TextUtils.isEmpty(searchQuery)) {
    mIsFetching=false;
    mAdapter.clear();
    showEmptyView(true);
    return;
  }
  if (page == 1) {
    mAdapter.clear();
  }
  showProgress(true);
  mIsFetching=true;
  showEmptyView(false);
  AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + page);
  StockMediaStore.FetchStockMediaListPayload payload=new StockMediaStore.FetchStockMediaListPayload(searchQuery,page);
  mDispatcher.dispatch(StockMediaActionBuilder.newFetchStockMediaAction(payload));
}",0.9083910700538876
13442,"@Override protected void setupContent(ViewGroup rootView){
  rootView.findViewById(R.id.site_creation_card_blog).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mSiteCreationListener != null) {
        mSiteCreationListener.withCategory(ThemeStore.MOBILE_FRIENDLY_CATEGORY_BLOG);
      }
    }
  }
);
  rootView.findViewById(R.id.site_creation_card_website).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mSiteCreationListener != null) {
        mSiteCreationListener.withCategory(ThemeStore.MOBILE_FRIENDLY_CATEGORY_WEBSITE);
      }
    }
  }
);
  rootView.findViewById(R.id.site_creation_card_portfolio).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mSiteCreationListener != null) {
        mSiteCreationListener.withCategory(ThemeStore.MOBILE_FRIENDLY_CATEGORY_PORTFOLIO);
      }
    }
  }
);
}","@Override protected void setupContent(ViewGroup rootView){
  getActivity().setTitle(R.string.site_creation_category_title);
  rootView.findViewById(R.id.site_creation_card_blog).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mSiteCreationListener != null) {
        mSiteCreationListener.withCategory(ThemeStore.MOBILE_FRIENDLY_CATEGORY_BLOG);
      }
    }
  }
);
  rootView.findViewById(R.id.site_creation_card_website).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mSiteCreationListener != null) {
        mSiteCreationListener.withCategory(ThemeStore.MOBILE_FRIENDLY_CATEGORY_WEBSITE);
      }
    }
  }
);
  rootView.findViewById(R.id.site_creation_card_portfolio).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mSiteCreationListener != null) {
        mSiteCreationListener.withCategory(ThemeStore.MOBILE_FRIENDLY_CATEGORY_PORTFOLIO);
      }
    }
  }
);
}",0.967869500741473
13443,"@Override protected void setupContent(ViewGroup rootView){
  RecyclerView recyclerView=rootView.findViewById(R.id.recycler_view);
  recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  recyclerView.setAdapter(mSiteCreationDomainAdapter);
  View bottomShadow=rootView.findViewById(R.id.bottom_shadow);
  bottomShadow.setVisibility(View.VISIBLE);
  ViewGroup bottomButtons=rootView.findViewById(R.id.bottom_buttons);
  bottomButtons.setVisibility(View.VISIBLE);
  mFinishButton=rootView.findViewById(R.id.finish_button);
  mFinishButton.setVisibility(View.VISIBLE);
  mFinishButton.setEnabled(mSelectedDomain != null);
  mFinishButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mSiteCreationListener.withDomain(mSelectedDomain);
    }
  }
);
}","@Override protected void setupContent(ViewGroup rootView){
  getActivity().setTitle(R.string.site_creation_domain_selection_title);
  RecyclerView recyclerView=rootView.findViewById(R.id.recycler_view);
  recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  recyclerView.setAdapter(mSiteCreationDomainAdapter);
  View bottomShadow=rootView.findViewById(R.id.bottom_shadow);
  bottomShadow.setVisibility(View.VISIBLE);
  ViewGroup bottomButtons=rootView.findViewById(R.id.bottom_buttons);
  bottomButtons.setVisibility(View.VISIBLE);
  mFinishButton=rootView.findViewById(R.id.finish_button);
  mFinishButton.setVisibility(View.VISIBLE);
  mFinishButton.setEnabled(mSelectedDomain != null);
  mFinishButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mSiteCreationListener.withDomain(mSelectedDomain);
    }
  }
);
}",0.9573847051955632
13444,"@Override protected void setupContent(ViewGroup rootView){
  mScrollView=rootView.findViewById(R.id.scroll_view);
  mSiteTitleInput=rootView.findViewById(R.id.site_creation_site_title_row);
  mSiteTitleInput.addTextChangedListener(this);
  mSiteTitleInput.setOnEditorCommitListener(new WPLoginInputRow.OnEditorCommitListener(){
    @Override public void onEditorCommit(){
      mSiteTaglineInput.getEditText().requestFocus();
    }
  }
);
  mSiteTaglineInput=rootView.findViewById(R.id.site_creation_site_tagline_row);
  mSiteTaglineInput.addTextChangedListener(this);
  mSiteTaglineInput.setOnEditorCommitListener(new WPLoginInputRow.OnEditorCommitListener(){
    @Override public void onEditorCommit(){
      next();
    }
  }
);
  ViewGroup bottomButtons=rootView.findViewById(R.id.bottom_buttons);
  bottomButtons.setVisibility(View.VISIBLE);
}","@Override protected void setupContent(ViewGroup rootView){
  getActivity().setTitle(R.string.site_creation_site_details_title);
  mScrollView=rootView.findViewById(R.id.scroll_view);
  mSiteTitleInput=rootView.findViewById(R.id.site_creation_site_title_row);
  mSiteTitleInput.addTextChangedListener(this);
  mSiteTitleInput.setOnEditorCommitListener(new WPLoginInputRow.OnEditorCommitListener(){
    @Override public void onEditorCommit(){
      mSiteTaglineInput.getEditText().requestFocus();
    }
  }
);
  mSiteTaglineInput=rootView.findViewById(R.id.site_creation_site_tagline_row);
  mSiteTaglineInput.addTextChangedListener(this);
  mSiteTaglineInput.setOnEditorCommitListener(new WPLoginInputRow.OnEditorCommitListener(){
    @Override public void onEditorCommit(){
      next();
    }
  }
);
  ViewGroup bottomButtons=rootView.findViewById(R.id.bottom_buttons);
  bottomButtons.setVisibility(View.VISIBLE);
}",0.9609065155807366
13445,"@Override protected void setupContent(ViewGroup rootView){
  RecyclerView recyclerView=(RecyclerView)rootView.findViewById(R.id.recycler_view);
  recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  recyclerView.setAdapter(mSiteCreationThemeAdapter);
}","@Override protected void setupContent(ViewGroup rootView){
  getActivity().setTitle(R.string.site_creation_theme_selection_title);
  RecyclerView recyclerView=(RecyclerView)rootView.findViewById(R.id.recycler_view);
  recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  recyclerView.setAdapter(mSiteCreationThemeAdapter);
}",0.8827361563517915
13446,"private void initShareActionMediaButton(final ViewGroup layout,boolean sharingMediaFile){
  mShareMediaBtn=(Button)layout.findViewById(R.id.secondary_button);
  addShareActionListener(mShareMediaBtn,ShareAction.SHARE_TO_MEDIA_LIBRARY);
  mShareMediaBtn.setVisibility(sharingMediaFile ? View.VISIBLE : View.GONE);
  mShareMediaBtn.setText(R.string.share_action_media);
}","private void initShareActionMediaButton(final ViewGroup layout,boolean sharingMediaFile){
  mShareMediaBtn=layout.findViewById(R.id.secondary_button);
  addShareActionListener(mShareMediaBtn,ShareAction.SHARE_TO_MEDIA_LIBRARY);
  mShareMediaBtn.setVisibility(sharingMediaFile ? View.VISIBLE : View.GONE);
  mShareMediaBtn.setText(R.string.share_action_media);
}",0.989041095890411
13447,"private void initRecyclerView(ViewGroup layout){
  mRecyclerView=(RecyclerView)layout.findViewById(R.id.recycler_view);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  mRecyclerView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
  mRecyclerView.setItemAnimator(null);
  mRecyclerView.setAdapter(createSiteAdapter());
}","private void initRecyclerView(ViewGroup layout){
  mRecyclerView=layout.findViewById(R.id.recycler_view);
  mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  mRecyclerView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
  mRecyclerView.setItemAnimator(null);
  mRecyclerView.setAdapter(createSiteAdapter());
}",0.9796511627906976
13448,"private void initShareActionPostButton(final ViewGroup layout){
  mSharePostBtn=(Button)layout.findViewById(R.id.primary_button);
  addShareActionListener(mSharePostBtn,ShareAction.SHARE_TO_POST);
  mSharePostBtn.setVisibility(View.VISIBLE);
  mSharePostBtn.setText(R.string.share_action_post);
}","private void initShareActionPostButton(final ViewGroup layout){
  mSharePostBtn=layout.findViewById(R.id.primary_button);
  addShareActionListener(mSharePostBtn,ShareAction.SHARE_TO_POST);
  mSharePostBtn.setVisibility(View.VISIBLE);
  mSharePostBtn.setText(R.string.share_action_post);
}",0.9863013698630136
13449,"public View configureView(final View view){
  final BasicNoteBlockHolder noteBlockHolder=(BasicNoteBlockHolder)view.getTag();
  if (hasImageMediaItem()) {
    noteBlockHolder.getImageView().setVisibility(View.VISIBLE);
    WordPress.sImageLoader.get(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),new ImageLoader.ImageListener(){
      @Override public void onResponse(      ImageLoader.ImageContainer response,      boolean isImmediate){
        if (!mHasAnimatedBadge && response.getBitmap() != null && view.getContext() != null) {
          mHasAnimatedBadge=true;
          noteBlockHolder.getImageView().setImageBitmap(response.getBitmap());
          Animation pop=AnimationUtils.loadAnimation(view.getContext(),R.anim.pop);
          noteBlockHolder.getImageView().startAnimation(pop);
          noteBlockHolder.getImageView().setVisibility(View.VISIBLE);
        }
      }
      @Override public void onErrorResponse(      VolleyError volleyError){
        noteBlockHolder.hideImageView();
      }
    }
);
  }
 else {
    noteBlockHolder.hideImageView();
  }
  if (hasVideoMediaItem()) {
    noteBlockHolder.getVideoView().setVideoURI(Uri.parse(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str"")));
    noteBlockHolder.getVideoView().setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.hideVideoView();
  }
  if (!TextUtils.isEmpty(getNoteText())) {
    if (mIsBadge) {
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);
      params.gravity=Gravity.CENTER_HORIZONTAL;
      noteBlockHolder.getTextView().setLayoutParams(params);
      noteBlockHolder.getTextView().setGravity(Gravity.CENTER_HORIZONTAL);
      noteBlockHolder.getTextView().setPadding(0,DisplayUtils.dpToPx(view.getContext(),8),0,0);
    }
 else {
      noteBlockHolder.getTextView().setGravity(Gravity.NO_GRAVITY);
      noteBlockHolder.getTextView().setPadding(0,0,0,0);
    }
    noteBlockHolder.getTextView().setText(getNoteText());
    noteBlockHolder.getTextView().setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.getTextView().setVisibility(View.GONE);
  }
  view.setBackgroundColor(mBackgroundColor);
  return view;
}","public View configureView(final View view){
  final BasicNoteBlockHolder noteBlockHolder=(BasicNoteBlockHolder)view.getTag();
  if (hasImageMediaItem()) {
    noteBlockHolder.getImageView().setVisibility(View.VISIBLE);
    WordPress.sImageLoader.get(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),new ImageLoader.ImageListener(){
      @Override public void onResponse(      ImageLoader.ImageContainer response,      boolean isImmediate){
        if (!mHasAnimatedBadge && response.getBitmap() != null && view.getContext() != null) {
          mHasAnimatedBadge=true;
          noteBlockHolder.getImageView().setImageBitmap(response.getBitmap());
          Animation pop=AnimationUtils.loadAnimation(view.getContext(),R.anim.pop);
          noteBlockHolder.getImageView().startAnimation(pop);
          noteBlockHolder.getImageView().setVisibility(View.VISIBLE);
        }
      }
      @Override public void onErrorResponse(      VolleyError volleyError){
        noteBlockHolder.hideImageView();
      }
    }
);
    if (mIsBadge) {
      noteBlockHolder.getImageView().setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
    }
  }
 else {
    noteBlockHolder.hideImageView();
  }
  if (hasVideoMediaItem()) {
    noteBlockHolder.getVideoView().setVideoURI(Uri.parse(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str"")));
    noteBlockHolder.getVideoView().setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.hideVideoView();
  }
  if (!TextUtils.isEmpty(getNoteText())) {
    if (mIsBadge) {
      LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);
      params.gravity=Gravity.CENTER_HORIZONTAL;
      noteBlockHolder.getTextView().setLayoutParams(params);
      noteBlockHolder.getTextView().setGravity(Gravity.CENTER_HORIZONTAL);
      noteBlockHolder.getTextView().setPadding(0,DisplayUtils.dpToPx(view.getContext(),8),0,0);
    }
 else {
      noteBlockHolder.getTextView().setGravity(Gravity.NO_GRAVITY);
      noteBlockHolder.getTextView().setPadding(0,0,0,0);
    }
    noteBlockHolder.getTextView().setText(getNoteText());
    noteBlockHolder.getTextView().setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.getTextView().setVisibility(View.GONE);
  }
  view.setBackgroundColor(mBackgroundColor);
  return view;
}",0.9719706770159552
13450,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mUsernamesContainer=(ViewGroup)view.findViewById(R.id.usernames);
  mUsernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      EditTextUtils.showSoftInput(mUsernameEditText);
    }
  }
);
  if (TextUtils.isEmpty(mCurrentRole)) {
    mCurrentRole=getDefaultRole();
  }
  mUsernameEditText=(MultiUsernameEditText)view.findViewById(R.id.invite_usernames);
  mUsernameEditText.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View view,    int i,    KeyEvent keyEvent){
      return keyEvent.getKeyCode() == KeyEvent.KEYCODE_DEL && keyEvent.getAction() == KeyEvent.ACTION_DOWN && removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.setOnBackspacePressedListener(new MultiUsernameEditText.OnBackspacePressedListener(){
    @Override public boolean onBackspacePressed(){
      return removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    private boolean shouldIgnoreChanges=false;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (shouldIgnoreChanges) {
        return;
      }
      shouldIgnoreChanges=true;
      if (mUsernameButtons.size() >= MAX_NUMBER_OF_INVITEES && !TextUtils.isEmpty(s)) {
        resetEditTextContent(mUsernameEditText);
      }
 else       if (endsWithDelimiter(mUsernameEditText.getText().toString())) {
        addUsername(mUsernameEditText,null);
      }
      shouldIgnoreChanges=false;
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,null);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,null);
      }
    }
  }
);
  if (!mUsernameButtons.isEmpty()) {
    mUsernameErrorViews.clear();
    populateUsernameButtons(new ArrayList<>(mUsernameButtons.keySet()));
  }
 else   if (!mUsernames.isEmpty()) {
    populateUsernameButtons(new ArrayList<>(mUsernames));
  }
  mRoleTextView=(TextView)view.findViewById(R.id.role);
  refreshRoleTextView();
  ImageView imgRoleInfo=(ImageView)view.findViewById(R.id.imgRoleInfo);
  imgRoleInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.openUrlExternal(v.getContext(),URL_USER_ROLES_DOCUMENTATION);
    }
  }
);
  if (mInviteRoles.size() > 1) {
    view.findViewById(R.id.role_container).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        RoleSelectDialogFragment.show(PeopleInviteFragment.this,0,mSite);
      }
    }
);
  }
 else {
    mRoleTextView.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);
  }
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)view.findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)view.findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mUsernamesContainer=(ViewGroup)view.findViewById(R.id.usernames);
  mUsernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      EditTextUtils.showSoftInput(mUsernameEditText);
    }
  }
);
  if (TextUtils.isEmpty(mCurrentRole)) {
    mCurrentRole=getDefaultRole();
  }
  mUsernameEditText=(MultiUsernameEditText)view.findViewById(R.id.invite_usernames);
  mUsernameEditText.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View view,    int i,    KeyEvent keyEvent){
      return keyEvent.getKeyCode() == KeyEvent.KEYCODE_DEL && keyEvent.getAction() == KeyEvent.ACTION_DOWN && removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.setOnBackspacePressedListener(new MultiUsernameEditText.OnBackspacePressedListener(){
    @Override public boolean onBackspacePressed(){
      return removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    private boolean shouldIgnoreChanges=false;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (shouldIgnoreChanges) {
        return;
      }
      shouldIgnoreChanges=true;
      if (mUsernameButtons.size() >= MAX_NUMBER_OF_INVITEES && !TextUtils.isEmpty(s)) {
        resetEditTextContent(mUsernameEditText);
      }
 else       if (endsWithDelimiter(mUsernameEditText.getText().toString())) {
        addUsername(mUsernameEditText,null);
      }
      shouldIgnoreChanges=false;
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,null);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,null);
      }
    }
  }
);
  if (!mUsernameButtons.isEmpty()) {
    mUsernameErrorViews.clear();
    populateUsernameButtons(new ArrayList<>(mUsernameButtons.keySet()));
  }
 else   if (!mUsernames.isEmpty()) {
    populateUsernameButtons(new ArrayList<>(mUsernames));
  }
  mRoleTextView=(TextView)view.findViewById(R.id.role);
  refreshRoleTextView();
  ImageView imgRoleInfo=(ImageView)view.findViewById(R.id.imgRoleInfo);
  imgRoleInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.openUrlExternal(v.getContext(),URL_USER_ROLES_DOCUMENTATION);
    }
  }
);
  if (mInviteRoles.size() > 1) {
    view.findViewById(R.id.role_container).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        RoleSelectDialogFragment.show(PeopleInviteFragment.this,0,mSite);
      }
    }
);
  }
 else {
    mRoleTextView.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);
  }
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)view.findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)view.findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
  getActivity().setTitle(R.string.invite_people);
}",0.9943013448826076
13451,"private void setActionBarTitleToThemeName(){
  String themeName=getIntent().getStringExtra(THEME_NAME);
  if (getSupportActionBar() != null && themeName != null) {
    setTitle(""String_Node_Str"");
    getSupportActionBar().setTitle(themeName);
  }
}","private void setActionBarTitleToThemeName(){
  String themeName=getIntent().getStringExtra(THEME_NAME);
  if (getSupportActionBar() != null && themeName != null) {
    getSupportActionBar().setTitle(themeName);
  }
}",0.9290322580645162
13452,"void setTitle(String title){
  Toolbar toolbar=getToolbar();
  if (toolbar != null) {
    toolbar.setTitle(title);
  }
}","void setTitle(String title){
  Toolbar toolbar=getToolbar();
  if (toolbar != null) {
    toolbar.setTitle(title);
  }
  if (getActivity() != null) {
    getActivity().setTitle(title);
  }
}",0.7741935483870968
13453,"@Override public void onBindViewHolder(ViewHolder viewHolder,int position){
  PluginBrowserViewHolder holder=(PluginBrowserViewHolder)viewHolder;
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  holder.nameText.setText(plugin.getDisplayName());
  holder.authorText.setText(plugin.getAuthorName());
  holder.icon.setImageUrl(plugin.getIcon(),ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusContainer.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.statusContainer.setVisibility(View.GONE);
    holder.ratingBar.setVisibility(View.VISIBLE);
    holder.ratingBar.setRating(plugin.getAverageStarRating());
  }
}","@Override public void onBindViewHolder(ViewHolder viewHolder,int position){
  PluginBrowserViewHolder holder=(PluginBrowserViewHolder)viewHolder;
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  holder.mNameText.setText(plugin.getDisplayName());
  holder.mAuthorText.setText(plugin.getAuthorName());
  holder.mIcon.setImageUrl(plugin.getIcon(),ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusContainer.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.mStatusContainer.setVisibility(View.GONE);
    holder.mRatingBar.setVisibility(View.VISIBLE);
    holder.mRatingBar.setRating(plugin.getAverageStarRating());
  }
}",0.9941444372153546
13454,"@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  PluginViewHolder holder=(PluginViewHolder)viewHolder;
  holder.name.setText(plugin.getDisplayName());
  holder.author.setText(plugin.getAuthorName());
  holder.icon.setImageUrl(plugin.getIcon(),WPNetworkImageView.ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusText.setVisibility(View.VISIBLE);
    holder.mStatusIcon.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.statusText.setVisibility(View.GONE);
    holder.statusIcon.setVisibility(View.GONE);
    holder.ratingBar.setVisibility(View.VISIBLE);
    holder.ratingBar.setRating(plugin.getAverageStarRating());
  }
  if (position == getItemCount() - 1) {
    mViewModel.loadMore(mListType);
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder viewHolder,int position){
  ImmutablePluginModel plugin=(ImmutablePluginModel)getItem(position);
  if (plugin == null) {
    return;
  }
  PluginViewHolder holder=(PluginViewHolder)viewHolder;
  holder.mName.setText(plugin.getDisplayName());
  holder.mAuthor.setText(plugin.getAuthorName());
  holder.mIcon.setImageUrl(plugin.getIcon(),WPNetworkImageView.ImageType.PLUGIN_ICON);
  if (plugin.isInstalled()) {
    @StringRes int textResId;
    @ColorRes int colorResId;
    @DrawableRes int drawableResId;
    if (PluginUtils.isUpdateAvailable(plugin)) {
      textResId=R.string.plugin_needs_update;
      colorResId=R.color.alert_yellow;
      drawableResId=R.drawable.plugin_update_available_icon;
    }
 else     if (plugin.isActive()) {
      textResId=R.string.plugin_active;
      colorResId=R.color.alert_green;
      drawableResId=R.drawable.ic_checkmark_green_24dp;
    }
 else {
      textResId=R.string.plugin_inactive;
      colorResId=R.color.grey;
      drawableResId=R.drawable.ic_cross_grey_600_24dp;
    }
    holder.mStatusText.setText(textResId);
    holder.mStatusText.setTextColor(getResources().getColor(colorResId));
    holder.mStatusIcon.setImageResource(drawableResId);
    holder.mStatusText.setVisibility(View.VISIBLE);
    holder.mStatusIcon.setVisibility(View.VISIBLE);
    holder.mRatingBar.setVisibility(View.GONE);
  }
 else {
    holder.mStatusText.setVisibility(View.GONE);
    holder.mStatusIcon.setVisibility(View.GONE);
    holder.mRatingBar.setVisibility(View.VISIBLE);
    holder.mRatingBar.setRating(plugin.getAverageStarRating());
  }
  if (position == getItemCount() - 1) {
    mViewModel.loadMore(mListType);
  }
}",0.993886462882096
13455,"public static Map<Integer,CategoryModel> getAllCategories(){
  String sqlCommand=sqlSelectAllCategories() + ""String_Node_Str"";
  Cursor cursor=WordPress.wpDB.getDatabase().rawQuery(sqlCommand,null);
  if (cursor == null || !cursor.moveToFirst() || cursor.getCount() == 0) {
    return null;
  }
  Map<Integer,CategoryModel> models=new HashMap<>();
  for (int i=0; i < cursor.getCount(); ++i) {
    CategoryModel model=new CategoryModel();
    model.deserializeFromDatabase(cursor);
    models.put(model.id,model);
    cursor.moveToNext();
  }
  return models;
}","public static SparseArrayCompat<CategoryModel> getAllCategories(){
  String sqlCommand=sqlSelectAllCategories() + ""String_Node_Str"";
  Cursor cursor=WordPress.wpDB.getDatabase().rawQuery(sqlCommand,null);
  if (cursor == null || !cursor.moveToFirst() || cursor.getCount() == 0) {
    return null;
  }
  SparseArrayCompat<CategoryModel> models=new SparseArrayCompat<>();
  for (int i=0; i < cursor.getCount(); ++i) {
    CategoryModel model=new CategoryModel();
    model.deserializeFromDatabase(cursor);
    models.put(model.id,model);
    cursor.moveToNext();
  }
  return models;
}",0.9143356643356644
13456,"public Map<Long,JSONObject> getBlogSettings(){
  return mBlogSettings;
}","public LongSparseArray<JSONObject> getBlogSettings(){
  return mBlogSettings;
}",0.8874172185430463
13457,"public void updateJson(JSONObject json){
  mBlogSettings=new HashMap<>();
  mOtherSettings=JSONUtils.queryJSON(json,KEY_OTHER,new JSONObject());
  mWPComSettings=JSONUtils.queryJSON(json,KEY_WPCOM,new JSONObject());
  JSONArray siteSettingsArray=JSONUtils.queryJSON(json,KEY_BLOGS,new JSONArray());
  for (int i=0; i < siteSettingsArray.length(); i++) {
    try {
      JSONObject siteSetting=siteSettingsArray.getJSONObject(i);
      mBlogSettings.put(siteSetting.optLong(KEY_BLOG_ID),siteSetting);
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
    }
  }
}","public void updateJson(JSONObject json){
  mBlogSettings=new LongSparseArray<>();
  mOtherSettings=JSONUtils.queryJSON(json,KEY_OTHER,new JSONObject());
  mWPComSettings=JSONUtils.queryJSON(json,KEY_WPCOM,new JSONObject());
  JSONArray siteSettingsArray=JSONUtils.queryJSON(json,KEY_BLOGS,new JSONArray());
  for (int i=0; i < siteSettingsArray.length(); i++) {
    try {
      JSONObject siteSetting=siteSettingsArray.getJSONObject(i);
      mBlogSettings.put(siteSetting.optLong(KEY_BLOG_ID),siteSetting);
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.NOTIFS,""String_Node_Str"");
    }
  }
}",0.9817578772802652
13458,"/** 
 * Sets values from a local database   {@link Cursor}.
 */
public void deserializeOptionsDatabaseCursor(Cursor cursor,Map<Integer,CategoryModel> models){
  if (cursor == null || !cursor.moveToFirst() || cursor.getCount() == 0) {
    return;
  }
  localTableId=getIntFromCursor(cursor,ID_COLUMN_NAME);
  address=getStringFromCursor(cursor,ADDRESS_COLUMN_NAME);
  username=getStringFromCursor(cursor,USERNAME_COLUMN_NAME);
  password=getStringFromCursor(cursor,PASSWORD_COLUMN_NAME);
  title=getStringFromCursor(cursor,TITLE_COLUMN_NAME);
  tagline=getStringFromCursor(cursor,TAGLINE_COLUMN_NAME);
  languageId=getIntFromCursor(cursor,LANGUAGE_COLUMN_NAME);
  privacy=getIntFromCursor(cursor,PRIVACY_COLUMN_NAME);
  defaultCategory=getIntFromCursor(cursor,DEF_CATEGORY_COLUMN_NAME);
  defaultPostFormat=getStringFromCursor(cursor,DEF_POST_FORMAT_COLUMN_NAME);
  location=getBooleanFromCursor(cursor,LOCATION_COLUMN_NAME);
  hasVerifiedCredentials=getBooleanFromCursor(cursor,CREDS_VERIFIED_COLUMN_NAME);
  allowComments=getBooleanFromCursor(cursor,ALLOW_COMMENTS_COLUMN_NAME);
  sendPingbacks=getBooleanFromCursor(cursor,SEND_PINGBACKS_COLUMN_NAME);
  receivePingbacks=getBooleanFromCursor(cursor,RECEIVE_PINGBACKS_COLUMN_NAME);
  shouldCloseAfter=getBooleanFromCursor(cursor,SHOULD_CLOSE_AFTER_COLUMN_NAME);
  closeCommentAfter=getIntFromCursor(cursor,CLOSE_AFTER_COLUMN_NAME);
  sortCommentsBy=getIntFromCursor(cursor,SORT_BY_COLUMN_NAME);
  shouldThreadComments=getBooleanFromCursor(cursor,SHOULD_THREAD_COLUMN_NAME);
  threadingLevels=getIntFromCursor(cursor,THREADING_COLUMN_NAME);
  shouldPageComments=getBooleanFromCursor(cursor,SHOULD_PAGE_COLUMN_NAME);
  commentsPerPage=getIntFromCursor(cursor,PAGING_COLUMN_NAME);
  commentApprovalRequired=getBooleanFromCursor(cursor,MANUAL_APPROVAL_COLUMN_NAME);
  commentsRequireIdentity=getBooleanFromCursor(cursor,IDENTITY_REQUIRED_COLUMN_NAME);
  commentsRequireUserAccount=getBooleanFromCursor(cursor,USER_ACCOUNT_REQUIRED_COLUMN_NAME);
  commentAutoApprovalKnownUsers=getBooleanFromCursor(cursor,WHITELIST_COLUMN_NAME);
  startOfWeek=getStringFromCursor(cursor,START_OF_WEEK_COLUMN_NAME);
  dateFormat=getStringFromCursor(cursor,DATE_FORMAT_COLUMN_NAME);
  timeFormat=getStringFromCursor(cursor,TIME_FORMAT_COLUMN_NAME);
  timezone=getStringFromCursor(cursor,TIMEZONE_COLUMN_NAME);
  postsPerPage=getIntFromCursor(cursor,POSTS_PER_PAGE_COLUMN_NAME);
  ampSupported=getBooleanFromCursor(cursor,AMP_SUPPORTED_COLUMN_NAME);
  ampEnabled=getBooleanFromCursor(cursor,AMP_ENABLED_COLUMN_NAME);
  String moderationKeys=getStringFromCursor(cursor,MODERATION_KEYS_COLUMN_NAME);
  String blacklistKeys=getStringFromCursor(cursor,BLACKLIST_KEYS_COLUMN_NAME);
  holdForModeration=new ArrayList<>();
  blacklist=new ArrayList<>();
  if (!TextUtils.isEmpty(moderationKeys)) {
    Collections.addAll(holdForModeration,moderationKeys.split(""String_Node_Str""));
  }
  if (!TextUtils.isEmpty(blacklistKeys)) {
    Collections.addAll(blacklist,blacklistKeys.split(""String_Node_Str""));
  }
  sharingLabel=getStringFromCursor(cursor,SHARING_LABEL_COLUMN_NAME);
  sharingButtonStyle=getStringFromCursor(cursor,SHARING_BUTTON_STYLE_COLUMN_NAME);
  allowReblogButton=getBooleanFromCursor(cursor,ALLOW_REBLOG_BUTTON_COLUMN_NAME);
  allowLikeButton=getBooleanFromCursor(cursor,ALLOW_LIKE_BUTTON_COLUMN_NAME);
  allowCommentLikes=getBooleanFromCursor(cursor,ALLOW_COMMENT_LIKES_COLUMN_NAME);
  twitterUsername=getStringFromCursor(cursor,TWITTER_USERNAME_COLUMN_NAME);
  setRelatedPostsFlags(Math.max(0,getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME)));
  String cachedCategories=getStringFromCursor(cursor,CATEGORIES_COLUMN_NAME);
  String cachedFormats=getStringFromCursor(cursor,POST_FORMATS_COLUMN_NAME);
  if (models != null && !TextUtils.isEmpty(cachedCategories)) {
    String[] split=cachedCategories.split(""String_Node_Str"");
    categories=new CategoryModel[split.length];
    for (int i=0; i < split.length; ++i) {
      int catId=Integer.parseInt(split[i]);
      categories[i]=models.get(catId);
    }
  }
  if (!TextUtils.isEmpty(cachedFormats)) {
    String[] split=cachedFormats.split(""String_Node_Str"");
    postFormats=new HashMap<>();
    for (    String format : split) {
      String[] kvp=format.split(""String_Node_Str"");
      postFormats.put(kvp[0],kvp[1]);
    }
  }
  int cachedRelatedPosts=getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME);
  if (cachedRelatedPosts != -1) {
    setRelatedPostsFlags(cachedRelatedPosts);
  }
  isInLocalTable=true;
}","/** 
 * Sets values from a local database   {@link Cursor}.
 */
public void deserializeOptionsDatabaseCursor(Cursor cursor,SparseArrayCompat<CategoryModel> models){
  if (cursor == null || !cursor.moveToFirst() || cursor.getCount() == 0) {
    return;
  }
  localTableId=getIntFromCursor(cursor,ID_COLUMN_NAME);
  address=getStringFromCursor(cursor,ADDRESS_COLUMN_NAME);
  username=getStringFromCursor(cursor,USERNAME_COLUMN_NAME);
  password=getStringFromCursor(cursor,PASSWORD_COLUMN_NAME);
  title=getStringFromCursor(cursor,TITLE_COLUMN_NAME);
  tagline=getStringFromCursor(cursor,TAGLINE_COLUMN_NAME);
  languageId=getIntFromCursor(cursor,LANGUAGE_COLUMN_NAME);
  privacy=getIntFromCursor(cursor,PRIVACY_COLUMN_NAME);
  defaultCategory=getIntFromCursor(cursor,DEF_CATEGORY_COLUMN_NAME);
  defaultPostFormat=getStringFromCursor(cursor,DEF_POST_FORMAT_COLUMN_NAME);
  location=getBooleanFromCursor(cursor,LOCATION_COLUMN_NAME);
  hasVerifiedCredentials=getBooleanFromCursor(cursor,CREDS_VERIFIED_COLUMN_NAME);
  allowComments=getBooleanFromCursor(cursor,ALLOW_COMMENTS_COLUMN_NAME);
  sendPingbacks=getBooleanFromCursor(cursor,SEND_PINGBACKS_COLUMN_NAME);
  receivePingbacks=getBooleanFromCursor(cursor,RECEIVE_PINGBACKS_COLUMN_NAME);
  shouldCloseAfter=getBooleanFromCursor(cursor,SHOULD_CLOSE_AFTER_COLUMN_NAME);
  closeCommentAfter=getIntFromCursor(cursor,CLOSE_AFTER_COLUMN_NAME);
  sortCommentsBy=getIntFromCursor(cursor,SORT_BY_COLUMN_NAME);
  shouldThreadComments=getBooleanFromCursor(cursor,SHOULD_THREAD_COLUMN_NAME);
  threadingLevels=getIntFromCursor(cursor,THREADING_COLUMN_NAME);
  shouldPageComments=getBooleanFromCursor(cursor,SHOULD_PAGE_COLUMN_NAME);
  commentsPerPage=getIntFromCursor(cursor,PAGING_COLUMN_NAME);
  commentApprovalRequired=getBooleanFromCursor(cursor,MANUAL_APPROVAL_COLUMN_NAME);
  commentsRequireIdentity=getBooleanFromCursor(cursor,IDENTITY_REQUIRED_COLUMN_NAME);
  commentsRequireUserAccount=getBooleanFromCursor(cursor,USER_ACCOUNT_REQUIRED_COLUMN_NAME);
  commentAutoApprovalKnownUsers=getBooleanFromCursor(cursor,WHITELIST_COLUMN_NAME);
  startOfWeek=getStringFromCursor(cursor,START_OF_WEEK_COLUMN_NAME);
  dateFormat=getStringFromCursor(cursor,DATE_FORMAT_COLUMN_NAME);
  timeFormat=getStringFromCursor(cursor,TIME_FORMAT_COLUMN_NAME);
  timezone=getStringFromCursor(cursor,TIMEZONE_COLUMN_NAME);
  postsPerPage=getIntFromCursor(cursor,POSTS_PER_PAGE_COLUMN_NAME);
  ampSupported=getBooleanFromCursor(cursor,AMP_SUPPORTED_COLUMN_NAME);
  ampEnabled=getBooleanFromCursor(cursor,AMP_ENABLED_COLUMN_NAME);
  String moderationKeys=getStringFromCursor(cursor,MODERATION_KEYS_COLUMN_NAME);
  String blacklistKeys=getStringFromCursor(cursor,BLACKLIST_KEYS_COLUMN_NAME);
  holdForModeration=new ArrayList<>();
  blacklist=new ArrayList<>();
  if (!TextUtils.isEmpty(moderationKeys)) {
    Collections.addAll(holdForModeration,moderationKeys.split(""String_Node_Str""));
  }
  if (!TextUtils.isEmpty(blacklistKeys)) {
    Collections.addAll(blacklist,blacklistKeys.split(""String_Node_Str""));
  }
  sharingLabel=getStringFromCursor(cursor,SHARING_LABEL_COLUMN_NAME);
  sharingButtonStyle=getStringFromCursor(cursor,SHARING_BUTTON_STYLE_COLUMN_NAME);
  allowReblogButton=getBooleanFromCursor(cursor,ALLOW_REBLOG_BUTTON_COLUMN_NAME);
  allowLikeButton=getBooleanFromCursor(cursor,ALLOW_LIKE_BUTTON_COLUMN_NAME);
  allowCommentLikes=getBooleanFromCursor(cursor,ALLOW_COMMENT_LIKES_COLUMN_NAME);
  twitterUsername=getStringFromCursor(cursor,TWITTER_USERNAME_COLUMN_NAME);
  setRelatedPostsFlags(Math.max(0,getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME)));
  String cachedCategories=getStringFromCursor(cursor,CATEGORIES_COLUMN_NAME);
  String cachedFormats=getStringFromCursor(cursor,POST_FORMATS_COLUMN_NAME);
  if (models != null && !TextUtils.isEmpty(cachedCategories)) {
    String[] split=cachedCategories.split(""String_Node_Str"");
    categories=new CategoryModel[split.length];
    for (int i=0; i < split.length; ++i) {
      int catId=Integer.parseInt(split[i]);
      categories[i]=models.get(catId);
    }
  }
  if (!TextUtils.isEmpty(cachedFormats)) {
    String[] split=cachedFormats.split(""String_Node_Str"");
    postFormats=new HashMap<>();
    for (    String format : split) {
      String[] kvp=format.split(""String_Node_Str"");
      postFormats.put(kvp[0],kvp[1]);
    }
  }
  int cachedRelatedPosts=getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME);
  if (cachedRelatedPosts != -1) {
    setRelatedPostsFlags(cachedRelatedPosts);
  }
  isInLocalTable=true;
}",0.9971175166297116
13459,"private void setCategories(){
  if (mSiteSettings.isSameCategoryList(mCategoryPref.getEntryValues())) {
    mCategoryPref.setValue(String.valueOf(mSiteSettings.getDefaultCategory()));
    mCategoryPref.setSummary(mSiteSettings.getDefaultCategoryForDisplay());
    return;
  }
  Map<Integer,String> categories=mSiteSettings.getCategoryNames();
  CharSequence[] entries=new CharSequence[categories.size()];
  CharSequence[] values=new CharSequence[categories.size()];
  int i=0;
  for (  Integer key : categories.keySet()) {
    entries[i]=categories.get(key);
    values[i]=String.valueOf(key);
    if (key == UNCATEGORIZED_CATEGORY_ID) {
      CharSequence temp=entries[0];
      entries[0]=entries[i];
      entries[i]=temp;
      temp=values[0];
      values[0]=values[i];
      values[i]=temp;
    }
    ++i;
  }
  mCategoryPref.setEntries(entries);
  mCategoryPref.setEntryValues(values);
  mCategoryPref.setValue(String.valueOf(mSiteSettings.getDefaultCategory()));
  mCategoryPref.setSummary(mSiteSettings.getDefaultCategoryForDisplay());
}","private void setCategories(){
  if (mSiteSettings.isSameCategoryList(mCategoryPref.getEntryValues())) {
    mCategoryPref.setValue(String.valueOf(mSiteSettings.getDefaultCategory()));
    mCategoryPref.setSummary(mSiteSettings.getDefaultCategoryForDisplay());
    return;
  }
  SparseArrayCompat<String> categories=mSiteSettings.getCategoryNames();
  CharSequence[] entries=new CharSequence[categories.size()];
  CharSequence[] values=new CharSequence[categories.size()];
  int i=0;
  int numOfCategories=categories.size();
  for (int j=0; j < numOfCategories; j++) {
    int key=categories.keyAt(j);
    entries[i]=categories.get(key);
    values[i]=String.valueOf(key);
    if (key == UNCATEGORIZED_CATEGORY_ID) {
      CharSequence temp=entries[0];
      entries[0]=entries[i];
      entries[i]=temp;
      temp=values[0];
      values[0]=values[i];
      values[i]=temp;
    }
    ++i;
  }
  mCategoryPref.setEntries(entries);
  mCategoryPref.setEntryValues(values);
  mCategoryPref.setValue(String.valueOf(mSiteSettings.getDefaultCategory()));
  mCategoryPref.setSummary(mSiteSettings.getDefaultCategoryForDisplay());
}",0.9317972350230416
13460,"/** 
 * Need to defer loading the cached settings to a thread so it completes after initialization.
 */
private void loadCachedSettings(){
  Cursor localSettings=SiteSettingsTable.getSettings(mSite.getId());
  if (localSettings != null && localSettings.getCount() > 0) {
    mSettings.isInLocalTable=true;
    Map<Integer,CategoryModel> cachedModels=SiteSettingsTable.getAllCategories();
    mSettings.deserializeOptionsDatabaseCursor(localSettings,cachedModels);
    mSettings.language=languageIdToLanguageCode(Integer.toString(mSettings.languageId));
    if (mSettings.language == null) {
      setLanguageCode(LanguageUtils.getPatchedCurrentDeviceLanguage(null));
    }
    mRemoteSettings.language=mSettings.language;
    mRemoteSettings.languageId=mSettings.languageId;
    notifyUpdatedOnUiThread();
  }
 else {
    mSettings.isInLocalTable=false;
    mSettings.localTableId=mSite.getId();
    setAddress(mSite.getUrl());
    setUsername(mSite.getUsername());
    setPassword(mSite.getPassword());
    setTitle(mSite.getName());
  }
  if (!SiteUtils.isAccessedViaWPComRest(mSite)) {
    setUsername(mSite.getUsername());
    setPassword(mSite.getPassword());
  }
  if (localSettings != null) {
    localSettings.close();
  }
}","/** 
 * Need to defer loading the cached settings to a thread so it completes after initialization.
 */
private void loadCachedSettings(){
  Cursor localSettings=SiteSettingsTable.getSettings(mSite.getId());
  if (localSettings != null && localSettings.getCount() > 0) {
    mSettings.isInLocalTable=true;
    SparseArrayCompat<CategoryModel> cachedModels=SiteSettingsTable.getAllCategories();
    mSettings.deserializeOptionsDatabaseCursor(localSettings,cachedModels);
    mSettings.language=languageIdToLanguageCode(Integer.toString(mSettings.languageId));
    if (mSettings.language == null) {
      setLanguageCode(LanguageUtils.getPatchedCurrentDeviceLanguage(null));
    }
    mRemoteSettings.language=mSettings.language;
    mRemoteSettings.languageId=mSettings.languageId;
    notifyUpdatedOnUiThread();
  }
 else {
    mSettings.isInLocalTable=false;
    mSettings.localTableId=mSite.getId();
    setAddress(mSite.getUrl());
    setUsername(mSite.getUsername());
    setPassword(mSite.getPassword());
    setTitle(mSite.getName());
  }
  if (!SiteUtils.isAccessedViaWPComRest(mSite)) {
    setUsername(mSite.getUsername());
    setPassword(mSite.getPassword());
  }
  if (localSettings != null) {
    localSettings.close();
  }
}",0.9894736842105264
13461,"public @NonNull Map<Integer,String> getCategoryNames(){
  Map<Integer,String> categoryNames=new HashMap<>();
  if (mSettings.categories != null && mSettings.categories.length > 0) {
    for (    CategoryModel model : mSettings.categories) {
      categoryNames.put(model.id,Html.fromHtml(model.name).toString());
    }
  }
  return categoryNames;
}","public @NonNull SparseArrayCompat<String> getCategoryNames(){
  SparseArrayCompat<String> categoryNames=new SparseArrayCompat<>();
  if (mSettings.categories != null && mSettings.categories.length > 0) {
    for (    CategoryModel model : mSettings.categories) {
      categoryNames.put(model.id,Html.fromHtml(model.name).toString());
    }
  }
  return categoryNames;
}",0.8885793871866295
13462,"private float getCurrentMediaProgress(){
  float currentMediaProgress=0.0f;
  int size=sNotificationData.mediaItemToProgressMap.values().size();
  for (  Float itemProgress : sNotificationData.mediaItemToProgressMap.values()) {
    currentMediaProgress+=(itemProgress / size);
  }
  return currentMediaProgress;
}","private float getCurrentMediaProgress(){
  float currentMediaProgress=0.0f;
  int size=sNotificationData.mediaItemToProgressMap.size();
  for (int i=0; i < size; i++) {
    float itemProgress=sNotificationData.mediaItemToProgressMap.get(i);
    currentMediaProgress+=(itemProgress / size);
  }
  return currentMediaProgress;
}",0.5383411580594679
13463,"private void injectCache(File file,String avatarUrl) throws IOException {
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final long currentTimeMs=System.currentTimeMillis();
  final Date currentTime=new Date(currentTimeMs);
  final long fiveMinutesLaterMs=currentTimeMs + 5 * 60 * 1000;
  final Date fiveMinutesLater=new Date(fiveMinutesLaterMs);
  Cache.Entry entry=new Cache.Entry();
  entry.data=new byte[(int)file.length()];
  DataInputStream dis=new DataInputStream(new FileInputStream(file));
  dis.readFully(entry.data);
  dis.close();
  entry.etag=null;
  entry.softTtl=fiveMinutesLaterMs;
  entry.ttl=fiveMinutesLaterMs;
  entry.serverDate=currentTimeMs;
  entry.lastModified=currentTimeMs;
  entry.responseHeaders=new TreeMap<>();
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"" + mAccountStore.getAccount().getAvatarUrl() + ""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",String.valueOf(file.length()));
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",sdf.format(currentTime));
  entry.responseHeaders.put(""String_Node_Str"",sdf.format(fiveMinutesLater));
  entry.responseHeaders.put(""String_Node_Str"",sdf.format(currentTime));
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"" + avatarUrl + ""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",String.valueOf(currentTimeMs));
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",String.valueOf(currentTimeMs));
  WordPress.sRequestQueue.getCache().put(Request.Method.GET + ""String_Node_Str"" + avatarUrl,entry);
}","private void injectCache(File file,String avatarUrl) throws IOException {
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ROOT);
  final long currentTimeMs=System.currentTimeMillis();
  final Date currentTime=new Date(currentTimeMs);
  final long fiveMinutesLaterMs=currentTimeMs + 5 * 60 * 1000;
  final Date fiveMinutesLater=new Date(fiveMinutesLaterMs);
  Cache.Entry entry=new Cache.Entry();
  entry.data=new byte[(int)file.length()];
  DataInputStream dis=new DataInputStream(new FileInputStream(file));
  dis.readFully(entry.data);
  dis.close();
  entry.etag=null;
  entry.softTtl=fiveMinutesLaterMs;
  entry.ttl=fiveMinutesLaterMs;
  entry.serverDate=currentTimeMs;
  entry.lastModified=currentTimeMs;
  entry.responseHeaders=new TreeMap<>();
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"" + mAccountStore.getAccount().getAvatarUrl() + ""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",String.valueOf(file.length()));
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",sdf.format(currentTime));
  entry.responseHeaders.put(""String_Node_Str"",sdf.format(fiveMinutesLater));
  entry.responseHeaders.put(""String_Node_Str"",sdf.format(currentTime));
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"" + avatarUrl + ""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",String.valueOf(currentTimeMs));
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",""String_Node_Str"");
  entry.responseHeaders.put(""String_Node_Str"",String.valueOf(currentTimeMs));
  WordPress.sRequestQueue.getCache().put(Request.Method.GET + ""String_Node_Str"" + avatarUrl,entry);
}",0.9971209213051824
13464,"private static String getPageDateHeaderText(Context context,PostModel page){
  if (page.isLocalDraft()) {
    return context.getString(R.string.local_draft);
  }
 else   if (PostStatus.fromPost(page) == PostStatus.SCHEDULED) {
    return DateUtils.formatDateTime(context,DateTimeUtils.timestampFromIso8601Millis(page.getDateCreated()),DateUtils.FORMAT_ABBREV_ALL);
  }
 else {
    Date dtCreated=DateTimeUtils.dateUTCFromIso8601(page.getDateCreated());
    Date dtNow=DateTimeUtils.nowUTC();
    int daysBetween=DateTimeUtils.daysBetween(dtCreated,dtNow);
    if (daysBetween == 0) {
      return context.getString(R.string.today);
    }
 else     if (daysBetween == 1) {
      return context.getString(R.string.yesterday);
    }
 else     if (DateTimeUtils.isSameMonthAndYear(dtCreated,dtNow)) {
      return String.format(context.getString(R.string.days_ago),daysBetween);
    }
 else     if (DateTimeUtils.isSameYear(dtCreated,dtNow)) {
      return new SimpleDateFormat(""String_Node_Str"").format(dtCreated);
    }
 else {
      return new SimpleDateFormat(""String_Node_Str"").format(dtCreated);
    }
  }
}","private static String getPageDateHeaderText(Context context,PostModel page){
  if (page.isLocalDraft()) {
    return context.getString(R.string.local_draft);
  }
 else   if (PostStatus.fromPost(page) == PostStatus.SCHEDULED) {
    return DateUtils.formatDateTime(context,DateTimeUtils.timestampFromIso8601Millis(page.getDateCreated()),DateUtils.FORMAT_ABBREV_ALL);
  }
 else {
    Date dtCreated=DateTimeUtils.dateUTCFromIso8601(page.getDateCreated());
    Date dtNow=DateTimeUtils.nowUTC();
    int daysBetween=DateTimeUtils.daysBetween(dtCreated,dtNow);
    if (daysBetween == 0) {
      return context.getString(R.string.today);
    }
 else     if (daysBetween == 1) {
      return context.getString(R.string.yesterday);
    }
 else     if (DateTimeUtils.isSameMonthAndYear(dtCreated,dtNow)) {
      return String.format(context.getString(R.string.days_ago),daysBetween);
    }
 else     if (DateTimeUtils.isSameYear(dtCreated,dtNow)) {
      return new SimpleDateFormat(""String_Node_Str"",Locale.getDefault()).format(dtCreated);
    }
 else {
      return new SimpleDateFormat(""String_Node_Str"",Locale.getDefault()).format(dtCreated);
    }
  }
}",0.9822852081488044
13465,"protected void updateUI(){
  super.updateUI();
  if (!isAdded() || !hasDataAvailable()) {
    return;
  }
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_most_popular_item,(ViewGroup)mResultContainer.getRootView(),false);
  int dayOfTheWeek=mInsightsPopularModel.getHighestDayOfWeek();
  Calendar c=Calendar.getInstance();
  c.setFirstDayOfWeek(Calendar.MONDAY);
  c.setTimeInMillis(System.currentTimeMillis());
switch (dayOfTheWeek) {
case 0:
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  break;
case 1:
c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);
break;
case 2:
c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);
break;
case 3:
c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);
break;
case 4:
c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);
break;
case 5:
c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
break;
case 6:
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
break;
}
DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
final TextView mostPopularDayTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day);
mostPopularDayTextView.setText(formatter.format(c.getTime()));
final TextView mostPopularDayPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day_percent);
mostPopularDayPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_views),roundToInteger(mInsightsPopularModel.getHighestDayPercent())));
TextView mostPopularHourTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour);
DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(getActivity());
c.set(Calendar.HOUR_OF_DAY,mInsightsPopularModel.getHighestHour());
c.set(Calendar.MINUTE,0);
mostPopularHourTextView.setText(timeFormat.format(c.getTime()));
final TextView mostPopularHourPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour_percent);
mostPopularHourPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_views),roundToInteger(mInsightsPopularModel.getHighestHourPercent())));
mResultContainer.addView(ll);
}","protected void updateUI(){
  super.updateUI();
  if (!isAdded() || !hasDataAvailable()) {
    return;
  }
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_most_popular_item,(ViewGroup)mResultContainer.getRootView(),false);
  int dayOfTheWeek=mInsightsPopularModel.getHighestDayOfWeek();
  Calendar c=Calendar.getInstance();
  c.setFirstDayOfWeek(Calendar.MONDAY);
  c.setTimeInMillis(System.currentTimeMillis());
switch (dayOfTheWeek) {
case 0:
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
  break;
case 1:
c.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);
break;
case 2:
c.set(Calendar.DAY_OF_WEEK,Calendar.WEDNESDAY);
break;
case 3:
c.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);
break;
case 4:
c.set(Calendar.DAY_OF_WEEK,Calendar.FRIDAY);
break;
case 5:
c.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
break;
case 6:
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
break;
}
DateFormat formatter=new SimpleDateFormat(""String_Node_Str"",Locale.getDefault());
final TextView mostPopularDayTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day);
mostPopularDayTextView.setText(formatter.format(c.getTime()));
final TextView mostPopularDayPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_day_percent);
mostPopularDayPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_views),roundToInteger(mInsightsPopularModel.getHighestDayPercent())));
TextView mostPopularHourTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour);
DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(getActivity());
c.set(Calendar.HOUR_OF_DAY,mInsightsPopularModel.getHighestHour());
c.set(Calendar.MINUTE,0);
mostPopularHourTextView.setText(timeFormat.format(c.getTime()));
final TextView mostPopularHourPercentTextView=(TextView)ll.findViewById(R.id.stats_most_popular_hour_percent);
mostPopularHourPercentTextView.setText(String.format(getString(R.string.stats_insights_most_popular_percent_views),roundToInteger(mInsightsPopularModel.getHighestHourPercent())));
mResultContainer.addView(ll);
}",0.9952198852772468
13466,"public static String getSinceLabel(Context ctx,String dataSubscribed){
  Date currentDateTime=new Date();
  try {
    SimpleDateFormat from=new SimpleDateFormat(""String_Node_Str"");
    Date date=from.parse(dataSubscribed);
    long currentDifference=Math.abs(StatsUtils.getDateDiff(date,currentDateTime,TimeUnit.SECONDS));
    if (currentDifference <= 45) {
      return ctx.getString(R.string.stats_followers_seconds_ago);
    }
    if (currentDifference < 90) {
      return ctx.getString(R.string.stats_followers_a_minute_ago);
    }
    if (currentDifference <= 2700) {
      long minutes=StatsUtils.roundUp(currentDifference,60);
      String followersMinutes=ctx.getString(R.string.stats_followers_minutes);
      return String.format(followersMinutes,minutes);
    }
    if (currentDifference <= 5400) {
      return ctx.getString(R.string.stats_followers_an_hour_ago);
    }
    if (currentDifference <= 79200) {
      long hours=StatsUtils.roundUp(currentDifference,60 * 60);
      String followersHours=ctx.getString(R.string.stats_followers_hours);
      return String.format(followersHours,hours);
    }
    if (currentDifference <= 129600) {
      return ctx.getString(R.string.stats_followers_a_day);
    }
    if (currentDifference <= 2160000) {
      long days=StatsUtils.roundUp(currentDifference,86400);
      String followersDays=ctx.getString(R.string.stats_followers_days);
      return String.format(followersDays,days);
    }
    if (currentDifference <= 3888000) {
      return ctx.getString(R.string.stats_followers_a_month);
    }
    if (currentDifference <= 29808000) {
      long months=StatsUtils.roundUp(currentDifference,2678400);
      String followersMonths=ctx.getString(R.string.stats_followers_months);
      return String.format(followersMonths,months);
    }
    if (currentDifference <= 47260800) {
      return ctx.getString(R.string.stats_followers_a_year);
    }
    long years=StatsUtils.roundUp(currentDifference,31536000);
    String followersYears=ctx.getString(R.string.stats_followers_years);
    return String.format(followersYears,years);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.STATS,e);
  }
  return ""String_Node_Str"";
}","public static String getSinceLabel(Context ctx,String dataSubscribed){
  Date currentDateTime=new Date();
  try {
    SimpleDateFormat from=new SimpleDateFormat(""String_Node_Str"",Locale.ROOT);
    Date date=from.parse(dataSubscribed);
    long currentDifference=Math.abs(StatsUtils.getDateDiff(date,currentDateTime,TimeUnit.SECONDS));
    if (currentDifference <= 45) {
      return ctx.getString(R.string.stats_followers_seconds_ago);
    }
    if (currentDifference < 90) {
      return ctx.getString(R.string.stats_followers_a_minute_ago);
    }
    if (currentDifference <= 2700) {
      long minutes=StatsUtils.roundUp(currentDifference,60);
      String followersMinutes=ctx.getString(R.string.stats_followers_minutes);
      return String.format(followersMinutes,minutes);
    }
    if (currentDifference <= 5400) {
      return ctx.getString(R.string.stats_followers_an_hour_ago);
    }
    if (currentDifference <= 79200) {
      long hours=StatsUtils.roundUp(currentDifference,60 * 60);
      String followersHours=ctx.getString(R.string.stats_followers_hours);
      return String.format(followersHours,hours);
    }
    if (currentDifference <= 129600) {
      return ctx.getString(R.string.stats_followers_a_day);
    }
    if (currentDifference <= 2160000) {
      long days=StatsUtils.roundUp(currentDifference,86400);
      String followersDays=ctx.getString(R.string.stats_followers_days);
      return String.format(followersDays,days);
    }
    if (currentDifference <= 3888000) {
      return ctx.getString(R.string.stats_followers_a_month);
    }
    if (currentDifference <= 29808000) {
      long months=StatsUtils.roundUp(currentDifference,2678400);
      String followersMonths=ctx.getString(R.string.stats_followers_months);
      return String.format(followersMonths,months);
    }
    if (currentDifference <= 47260800) {
      return ctx.getString(R.string.stats_followers_a_year);
    }
    long years=StatsUtils.roundUp(currentDifference,31536000);
    String followersYears=ctx.getString(R.string.stats_followers_years);
    return String.format(followersYears,years);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.STATS,e);
  }
  return ""String_Node_Str"";
}",0.9972665148063782
13467,"/** 
 * Get the current date in the form of ""yyyy-MM-dd HH:mm:ss""
 */
private static String getCurrentDatetime(){
  String pattern=""String_Node_Str"";
  SimpleDateFormat sdf=new SimpleDateFormat(pattern);
  return sdf.format(new Date());
}","/** 
 * Get the current date in the form of ""yyyy-MM-dd HH:mm:ss""
 */
private static String getCurrentDatetime(){
  String pattern=""String_Node_Str"";
  SimpleDateFormat sdf=new SimpleDateFormat(pattern,Locale.ROOT);
  return sdf.format(new Date());
}",0.9754098360655736
13468,"public static String getPublishedEndpointPeriodDateParameters(StatsTimeframe timeframe,String date){
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return null;
  }
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT);
    Calendar c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    Date parsedDate=sdf.parse(date);
    c.setTime(parsedDate);
    final String after;
    final String before;
switch (timeframe) {
case DAY:
      after=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
    c.add(Calendar.DAY_OF_YEAR,+1);
  before=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case WEEK:
c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
after=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
c.add(Calendar.DAY_OF_YEAR,+1);
before=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case MONTH:
c.set(Calendar.DAY_OF_MONTH,c.getActualMaximum(Calendar.DAY_OF_MONTH));
c.add(Calendar.DAY_OF_YEAR,+1);
before=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
c.setTime(parsedDate);
c.set(Calendar.DAY_OF_MONTH,c.getActualMinimum(Calendar.DAY_OF_MONTH));
after=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case YEAR:
c.set(Calendar.MONTH,Calendar.DECEMBER);
c.set(Calendar.DAY_OF_MONTH,31);
c.add(Calendar.DAY_OF_YEAR,+1);
before=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
c.setTime(parsedDate);
c.set(Calendar.MONTH,Calendar.JANUARY);
c.set(Calendar.DAY_OF_MONTH,1);
after=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
default :
AppLog.w(AppLog.T.STATS,""String_Node_Str"");
return null;
}
return ""String_Node_Str"" + after + ""String_Node_Str""+ before;
}
 catch (ParseException e) {
AppLog.e(AppLog.T.UTILS,e);
return null;
}
}","@SuppressLint(""String_Node_Str"") public static String getPublishedEndpointPeriodDateParameters(StatsTimeframe timeframe,String date){
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return null;
  }
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT);
    Calendar c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    Date parsedDate=sdf.parse(date);
    c.setTime(parsedDate);
    final String after;
    final String before;
switch (timeframe) {
case DAY:
      after=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
    c.add(Calendar.DAY_OF_YEAR,+1);
  before=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case WEEK:
c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
after=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
c.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);
c.add(Calendar.DAY_OF_YEAR,+1);
before=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case MONTH:
c.set(Calendar.DAY_OF_MONTH,c.getActualMaximum(Calendar.DAY_OF_MONTH));
c.add(Calendar.DAY_OF_YEAR,+1);
before=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
c.setTime(parsedDate);
c.set(Calendar.DAY_OF_MONTH,c.getActualMinimum(Calendar.DAY_OF_MONTH));
after=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case YEAR:
c.set(Calendar.MONTH,Calendar.DECEMBER);
c.set(Calendar.DAY_OF_MONTH,31);
c.add(Calendar.DAY_OF_YEAR,+1);
before=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
c.setTime(parsedDate);
c.set(Calendar.MONTH,Calendar.JANUARY);
c.set(Calendar.DAY_OF_MONTH,1);
after=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
default :
AppLog.w(AppLog.T.STATS,""String_Node_Str"");
return null;
}
return ""String_Node_Str"" + after + ""String_Node_Str""+ before;
}
 catch (ParseException e) {
AppLog.e(AppLog.T.UTILS,e);
return null;
}
}",0.9751596877217884
13469,"private static String getCurrentDateTimeTZ(String blogTimeZoneOption,String pattern){
  Date date=new Date();
  SimpleDateFormat gmtDf=new SimpleDateFormat(pattern);
  if (blogTimeZoneOption == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return gmtDf.format(date);
  }
  AppLog.v(T.STATS,""String_Node_Str"" + blogTimeZoneOption);
  String timezoneNormalized;
  if (TextUtils.isEmpty(blogTimeZoneOption) || blogTimeZoneOption.equals(""String_Node_Str"") || blogTimeZoneOption.equals(""String_Node_Str"")) {
    timezoneNormalized=""String_Node_Str"";
  }
 else {
    String[] timezoneSplitted=org.apache.commons.lang3.StringUtils.split(blogTimeZoneOption,""String_Node_Str"");
    timezoneNormalized=timezoneSplitted[0];
    if (timezoneSplitted.length > 1 && timezoneSplitted[1].equals(""String_Node_Str"")) {
      timezoneNormalized+=""String_Node_Str"";
    }
    if (timezoneNormalized.startsWith(""String_Node_Str"")) {
      timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
    }
 else {
      if (timezoneNormalized.startsWith(""String_Node_Str"")) {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
 else {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
    }
  }
  AppLog.v(T.STATS,""String_Node_Str"" + timezoneNormalized);
  gmtDf.setTimeZone(TimeZone.getTimeZone(timezoneNormalized));
  return gmtDf.format(date);
}","private static String getCurrentDateTimeTZ(String blogTimeZoneOption,String pattern){
  Date date=new Date();
  SimpleDateFormat gmtDf=new SimpleDateFormat(pattern,Locale.ROOT);
  if (blogTimeZoneOption == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return gmtDf.format(date);
  }
  AppLog.v(T.STATS,""String_Node_Str"" + blogTimeZoneOption);
  String timezoneNormalized;
  if (TextUtils.isEmpty(blogTimeZoneOption) || blogTimeZoneOption.equals(""String_Node_Str"") || blogTimeZoneOption.equals(""String_Node_Str"")) {
    timezoneNormalized=""String_Node_Str"";
  }
 else {
    String[] timezoneSplitted=org.apache.commons.lang3.StringUtils.split(blogTimeZoneOption,""String_Node_Str"");
    timezoneNormalized=timezoneSplitted[0];
    if (timezoneSplitted.length > 1 && timezoneSplitted[1].equals(""String_Node_Str"")) {
      timezoneNormalized+=""String_Node_Str"";
    }
    if (timezoneNormalized.startsWith(""String_Node_Str"")) {
      timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
    }
 else {
      if (timezoneNormalized.startsWith(""String_Node_Str"")) {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
 else {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
    }
  }
  AppLog.v(T.STATS,""String_Node_Str"" + timezoneNormalized);
  gmtDf.setTimeZone(TimeZone.getTimeZone(timezoneNormalized));
  return gmtDf.format(date);
}",0.9956741167988464
13470,"/** 
 * Get the current date in the form of yyyy-MM-dd (EX: 2013-07-18) 
 */
public static String getCurrentDate(){
  SimpleDateFormat sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT);
  return sdf.format(new Date());
}","/** 
 * Get the current date in the form of yyyy-MM-dd (EX: 2013-07-18) 
 */
public static String getCurrentDate(){
  SimpleDateFormat sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT,Locale.ROOT);
  return sdf.format(new Date());
}",0.975103734439834
13471,"public static String parseDate(String timestamp,String fromFormat,String toFormat){
  SimpleDateFormat from=new SimpleDateFormat(fromFormat);
  SimpleDateFormat to=new SimpleDateFormat(toFormat);
  try {
    Date date=from.parse(timestamp);
    return to.format(date);
  }
 catch (  ParseException e) {
    AppLog.e(T.STATS,e);
  }
  return ""String_Node_Str"";
}","public static String parseDate(String timestamp,String fromFormat,String toFormat){
  SimpleDateFormat from=new SimpleDateFormat(fromFormat,Locale.getDefault());
  SimpleDateFormat to=new SimpleDateFormat(toFormat,Locale.getDefault());
  try {
    Date date=from.parse(timestamp);
    return to.format(date);
  }
 catch (  ParseException e) {
    AppLog.e(T.STATS,e);
  }
  return ""String_Node_Str"";
}",0.94750656167979
13472,"private String getDateForDisplayInLabels(String date,StatsTimeframe timeframe){
  String prefix=getString(R.string.stats_for);
switch (timeframe) {
case DAY:
    return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_SHORT_FORMAT));
case WEEK:
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT);
    final Date parsedDate=sdf.parse(date);
    Calendar c=Calendar.getInstance();
    c.setTime(parsedDate);
    String endDateLabel=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    c.add(Calendar.DAY_OF_WEEK,-6);
    String startDateLabel=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    return String.format(prefix,startDateLabel + ""String_Node_Str"" + endDateLabel);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.UTILS,e);
    return ""String_Node_Str"";
  }
case MONTH:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_FORMAT));
case YEAR:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_YEAR_FORMAT));
}
return ""String_Node_Str"";
}","private String getDateForDisplayInLabels(String date,StatsTimeframe timeframe){
  String prefix=getString(R.string.stats_for);
switch (timeframe) {
case DAY:
    return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_SHORT_FORMAT));
case WEEK:
  try {
    SimpleDateFormat sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT,Locale.getDefault());
    final Date parsedDate=sdf.parse(date);
    Calendar c=Calendar.getInstance();
    c.setTime(parsedDate);
    String endDateLabel=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    c.add(Calendar.DAY_OF_WEEK,-6);
    String startDateLabel=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    return String.format(prefix,startDateLabel + ""String_Node_Str"" + endDateLabel);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.UTILS,e);
    return ""String_Node_Str"";
  }
case MONTH:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_FORMAT));
case YEAR:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_YEAR_FORMAT));
}
return ""String_Node_Str"";
}",0.9861415025528812
13473,"private String getDateForDisplayInLabels(String date,StatsTimeframe timeframe){
  String prefix=getString(R.string.stats_for);
switch (timeframe) {
case DAY:
    return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_SHORT_FORMAT));
case WEEK:
  try {
    SimpleDateFormat sdf;
    Calendar c;
    final Date parsedDate;
    sdf=new SimpleDateFormat(""String_Node_Str"");
    parsedDate=sdf.parse(date);
    c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    c.setTime(parsedDate);
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
    String startDateLabel=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    c.add(Calendar.DAY_OF_WEEK,+6);
    String endDateLabel=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    return String.format(prefix,startDateLabel + ""String_Node_Str"" + endDateLabel);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.UTILS,e);
    return ""String_Node_Str"";
  }
case MONTH:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_FORMAT));
case YEAR:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_YEAR_FORMAT));
}
return ""String_Node_Str"";
}","private String getDateForDisplayInLabels(String date,StatsTimeframe timeframe){
  String prefix=getString(R.string.stats_for);
switch (timeframe) {
case DAY:
    return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_SHORT_FORMAT));
case WEEK:
  try {
    SimpleDateFormat sdf;
    Calendar c;
    final Date parsedDate;
    sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ROOT);
    parsedDate=sdf.parse(date);
    c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    c.setTime(parsedDate);
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
    String startDateLabel=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    c.add(Calendar.DAY_OF_WEEK,+6);
    String endDateLabel=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    return String.format(prefix,startDateLabel + ""String_Node_Str"" + endDateLabel);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.UTILS,e);
    return ""String_Node_Str"";
  }
case MONTH:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_FORMAT));
case YEAR:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_YEAR_FORMAT));
}
return ""String_Node_Str"";
}",0.989788972089857
13474,"protected void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph(mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  mNoActivtyThisPeriodContainer.setVisibility(View.GONE);
  OverviewLabel selectedStatsType=mOverviewItems[mSelectedOverviewItemIndex];
  mLegendContainer.setVisibility(View.VISIBLE);
  mLegendLabel.setText(StringUtils.capitalize(selectedStatsType.getLabel().toLowerCase()));
switch (selectedStatsType) {
case VIEWS:
    mVisitorsCheckboxContainer.setVisibility(View.VISIBLE);
  mVisitorsCheckbox.setEnabled(true);
mVisitorsCheckbox.setChecked(mIsCheckboxChecked);
break;
default :
mVisitorsCheckboxContainer.setVisibility(View.GONE);
break;
}
final String[] horLabels=new String[dataToShowOnGraph.length];
mStatsDate=new String[dataToShowOnGraph.length];
GraphView.GraphViewData[] mainSeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
GraphView.GraphViewData[] secondarySeriesItems=null;
if (mIsCheckboxChecked && selectedStatsType == OverviewLabel.VIEWS) {
secondarySeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
}
final boolean[] weekendDays;
if (getTimeframe() == StatsTimeframe.DAY) {
weekendDays=new boolean[dataToShowOnGraph.length];
}
 else {
weekendDays=null;
}
boolean atLeastOneResultIsAvailable=false;
for (int i=0; i < dataToShowOnGraph.length; i++) {
int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
currentItemValue=dataToShowOnGraph[i].getViews();
break;
case VISITORS:
currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
mainSeriesItems[i]=new GraphView.GraphViewData(i,currentItemValue);
if (currentItemValue > 0) {
atLeastOneResultIsAvailable=true;
}
if (mIsCheckboxChecked && secondarySeriesItems != null) {
secondarySeriesItems[i]=new GraphView.GraphViewData(i,dataToShowOnGraph[i].getVisitors());
}
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
if (weekendDays != null) {
SimpleDateFormat from=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT);
try {
Date date=from.parse(currentItemStatsDate);
Calendar c=Calendar.getInstance();
c.setFirstDayOfWeek(Calendar.MONDAY);
c.setTimeInMillis(date.getTime());
weekendDays[i]=c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY || c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY;
}
 catch (ParseException e) {
weekendDays[i]=false;
AppLog.e(AppLog.T.STATS,e);
}
}
}
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
GraphViewSeries mainSeriesOnScreen=new GraphViewSeries(mainSeriesItems);
mainSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_main_series);
mainSeriesOnScreen.getStyle().outerColor=getResources().getColor(R.color.grey_lighten_30_translucent_50);
mainSeriesOnScreen.getStyle().highlightColor=getResources().getColor(R.color.stats_bar_graph_main_series_highlight);
mainSeriesOnScreen.getStyle().outerhighlightColor=getResources().getColor(R.color.stats_bar_graph_outer_highlight);
mainSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
mGraphView.addSeries(mainSeriesOnScreen);
if (mIsCheckboxChecked && secondarySeriesItems != null && selectedStatsType == OverviewLabel.VIEWS) {
GraphViewSeries secondarySeries=new GraphViewSeries(secondarySeriesItems);
secondarySeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),10);
secondarySeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_secondary_series);
secondarySeries.getStyle().highlightColor=getResources().getColor(R.color.orange_fire);
mGraphView.addSeries(secondarySeries);
}
switch (selectedStatsType) {
case VISITORS:
double maxYValue=getMaxYValueForVisitorsAndView(dataToShowOnGraph);
mGraphView.setManualYAxisBounds(maxYValue,0d);
break;
default :
mGraphView.setManualYAxis(false);
break;
}
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.getGraphViewStyle().setMaxColumnWidth(DisplayUtils.dpToPx(getActivity(),StatsConstants.STATS_GRAPH_BAR_MAX_COLUMN_WIDTH_DP));
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
mNoActivtyThisPeriodContainer.setVisibility(atLeastOneResultIsAvailable ? View.GONE : View.VISIBLE);
mGraphView.setClickable(atLeastOneResultIsAvailable);
mGraphView.setWeekendDays(weekendDays);
if (mPrevNumberOfBarsGraph != -1 && mPrevNumberOfBarsGraph != dataToShowOnGraph.length) {
mSelectedBarGraphBarIndex=-1;
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
onBarTapped(getDefaultBarIndex(dataToShowOnGraph));
mGraphView.highlightBar(getDefaultBarIndex(dataToShowOnGraph));
return;
}
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
int barSelectedOnGraph;
if (mSelectedBarGraphBarIndex == -1) {
barSelectedOnGraph=getDefaultBarIndex(dataToShowOnGraph);
}
 else if (mSelectedBarGraphBarIndex < dataToShowOnGraph.length) {
barSelectedOnGraph=mSelectedBarGraphBarIndex;
}
 else {
barSelectedOnGraph=getDefaultBarIndex(dataToShowOnGraph);
mSelectedBarGraphBarIndex=barSelectedOnGraph;
}
updateUIBelowTheGraph(barSelectedOnGraph);
mGraphView.highlightBar(barSelectedOnGraph);
}","protected void updateUI(){
  if (!isAdded()) {
    return;
  }
  if (mVisitsData == null) {
    setupNoResultsUI(false);
    return;
  }
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph(mVisitsData);
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupNoResultsUI(false);
    return;
  }
  mNoActivtyThisPeriodContainer.setVisibility(View.GONE);
  OverviewLabel selectedStatsType=mOverviewItems[mSelectedOverviewItemIndex];
  mLegendContainer.setVisibility(View.VISIBLE);
  mLegendLabel.setText(StringUtils.capitalize(selectedStatsType.getLabel().toLowerCase()));
switch (selectedStatsType) {
case VIEWS:
    mVisitorsCheckboxContainer.setVisibility(View.VISIBLE);
  mVisitorsCheckbox.setEnabled(true);
mVisitorsCheckbox.setChecked(mIsCheckboxChecked);
break;
default :
mVisitorsCheckboxContainer.setVisibility(View.GONE);
break;
}
final String[] horLabels=new String[dataToShowOnGraph.length];
mStatsDate=new String[dataToShowOnGraph.length];
GraphView.GraphViewData[] mainSeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
GraphView.GraphViewData[] secondarySeriesItems=null;
if (mIsCheckboxChecked && selectedStatsType == OverviewLabel.VIEWS) {
secondarySeriesItems=new GraphView.GraphViewData[dataToShowOnGraph.length];
}
final boolean[] weekendDays;
if (getTimeframe() == StatsTimeframe.DAY) {
weekendDays=new boolean[dataToShowOnGraph.length];
}
 else {
weekendDays=null;
}
boolean atLeastOneResultIsAvailable=false;
for (int i=0; i < dataToShowOnGraph.length; i++) {
int currentItemValue=0;
switch (selectedStatsType) {
case VIEWS:
currentItemValue=dataToShowOnGraph[i].getViews();
break;
case VISITORS:
currentItemValue=dataToShowOnGraph[i].getVisitors();
break;
case LIKES:
currentItemValue=dataToShowOnGraph[i].getLikes();
break;
case COMMENTS:
currentItemValue=dataToShowOnGraph[i].getComments();
break;
}
mainSeriesItems[i]=new GraphView.GraphViewData(i,currentItemValue);
if (currentItemValue > 0) {
atLeastOneResultIsAvailable=true;
}
if (mIsCheckboxChecked && secondarySeriesItems != null) {
secondarySeriesItems[i]=new GraphView.GraphViewData(i,dataToShowOnGraph[i].getVisitors());
}
String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
horLabels[i]=getDateLabelForBarInGraph(currentItemStatsDate);
mStatsDate[i]=currentItemStatsDate;
if (weekendDays != null) {
SimpleDateFormat from=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT,Locale.ROOT);
try {
Date date=from.parse(currentItemStatsDate);
Calendar c=Calendar.getInstance();
c.setFirstDayOfWeek(Calendar.MONDAY);
c.setTimeInMillis(date.getTime());
weekendDays[i]=c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY || c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY;
}
 catch (ParseException e) {
weekendDays[i]=false;
AppLog.e(AppLog.T.STATS,e);
}
}
}
if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
}
 else {
mGraphContainer.removeAllViews();
mGraphView=new StatsBarGraph(getActivity());
mGraphContainer.addView(mGraphView);
}
mGraphView.removeAllSeries();
GraphViewSeries mainSeriesOnScreen=new GraphViewSeries(mainSeriesItems);
mainSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_main_series);
mainSeriesOnScreen.getStyle().outerColor=getResources().getColor(R.color.grey_lighten_30_translucent_50);
mainSeriesOnScreen.getStyle().highlightColor=getResources().getColor(R.color.stats_bar_graph_main_series_highlight);
mainSeriesOnScreen.getStyle().outerhighlightColor=getResources().getColor(R.color.stats_bar_graph_outer_highlight);
mainSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(getActivity(),5);
mGraphView.addSeries(mainSeriesOnScreen);
if (mIsCheckboxChecked && secondarySeriesItems != null && selectedStatsType == OverviewLabel.VIEWS) {
GraphViewSeries secondarySeries=new GraphViewSeries(secondarySeriesItems);
secondarySeries.getStyle().padding=DisplayUtils.dpToPx(getActivity(),10);
secondarySeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_secondary_series);
secondarySeries.getStyle().highlightColor=getResources().getColor(R.color.orange_fire);
mGraphView.addSeries(secondarySeries);
}
switch (selectedStatsType) {
case VISITORS:
double maxYValue=getMaxYValueForVisitorsAndView(dataToShowOnGraph);
mGraphView.setManualYAxisBounds(maxYValue,0d);
break;
default :
mGraphView.setManualYAxis(false);
break;
}
mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
mGraphView.getGraphViewStyle().setMaxColumnWidth(DisplayUtils.dpToPx(getActivity(),StatsConstants.STATS_GRAPH_BAR_MAX_COLUMN_WIDTH_DP));
mGraphView.setHorizontalLabels(horLabels);
mGraphView.setGestureListener(this);
mNoActivtyThisPeriodContainer.setVisibility(atLeastOneResultIsAvailable ? View.GONE : View.VISIBLE);
mGraphView.setClickable(atLeastOneResultIsAvailable);
mGraphView.setWeekendDays(weekendDays);
if (mPrevNumberOfBarsGraph != -1 && mPrevNumberOfBarsGraph != dataToShowOnGraph.length) {
mSelectedBarGraphBarIndex=-1;
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
onBarTapped(getDefaultBarIndex(dataToShowOnGraph));
mGraphView.highlightBar(getDefaultBarIndex(dataToShowOnGraph));
return;
}
mPrevNumberOfBarsGraph=dataToShowOnGraph.length;
int barSelectedOnGraph;
if (mSelectedBarGraphBarIndex == -1) {
barSelectedOnGraph=getDefaultBarIndex(dataToShowOnGraph);
}
 else if (mSelectedBarGraphBarIndex < dataToShowOnGraph.length) {
barSelectedOnGraph=mSelectedBarGraphBarIndex;
}
 else {
barSelectedOnGraph=getDefaultBarIndex(dataToShowOnGraph);
mSelectedBarGraphBarIndex=barSelectedOnGraph;
}
updateUIBelowTheGraph(barSelectedOnGraph);
mGraphView.highlightBar(barSelectedOnGraph);
}",0.9989482909728308
13475,"@Override public void onBarTapped(int tappedBar){
  if (!isAdded()) {
    return;
  }
  mSelectedBarGraphBarIndex=tappedBar;
  updateUIBelowTheGraph(tappedBar);
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  String date=mStatsDate[tappedBar];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  String calculatedDate=null;
  try {
    SimpleDateFormat sdf;
    Calendar c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    final Date parsedDate;
switch (getTimeframe()) {
case DAY:
      calculatedDate=date;
    break;
case WEEK:
  sdf=new SimpleDateFormat(""String_Node_Str"");
parsedDate=sdf.parse(date);
c.setTime(parsedDate);
c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
c.add(Calendar.DAY_OF_WEEK,+6);
calculatedDate=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case MONTH:
sdf=new SimpleDateFormat(""String_Node_Str"");
parsedDate=sdf.parse(date);
c.setTime(parsedDate);
c.set(Calendar.DAY_OF_MONTH,c.getActualMaximum(Calendar.DAY_OF_MONTH));
calculatedDate=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case YEAR:
sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT);
parsedDate=sdf.parse(date);
c.setTime(parsedDate);
c.set(Calendar.MONTH,Calendar.DECEMBER);
c.set(Calendar.DAY_OF_MONTH,31);
calculatedDate=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
}
}
 catch (ParseException e) {
AppLog.e(AppLog.T.UTILS,e);
}
if (calculatedDate == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + date);
return;
}
if (mListener != null) {
SiteModel site=mSiteStore.getSiteByLocalId(getLocalTableBlogID());
if (site != null && SiteUtils.isAccessedViaWPComRest(site)) {
mListener.onDateChanged(site.getSiteId(),getTimeframe(),calculatedDate);
}
}
AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.STATS_TAPPED_BAR_CHART,mSiteStore.getSiteByLocalId(getLocalTableBlogID()));
}","@Override public void onBarTapped(int tappedBar){
  if (!isAdded()) {
    return;
  }
  mSelectedBarGraphBarIndex=tappedBar;
  updateUIBelowTheGraph(tappedBar);
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  String date=mStatsDate[tappedBar];
  if (date == null) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"");
    return;
  }
  String calculatedDate=null;
  try {
    SimpleDateFormat sdf;
    Calendar c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    final Date parsedDate;
switch (getTimeframe()) {
case DAY:
      calculatedDate=date;
    break;
case WEEK:
  sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ROOT);
parsedDate=sdf.parse(date);
c.setTime(parsedDate);
c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
c.add(Calendar.DAY_OF_WEEK,+6);
calculatedDate=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case MONTH:
sdf=new SimpleDateFormat(""String_Node_Str"",Locale.ROOT);
parsedDate=sdf.parse(date);
c.setTime(parsedDate);
c.set(Calendar.DAY_OF_MONTH,c.getActualMaximum(Calendar.DAY_OF_MONTH));
calculatedDate=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
case YEAR:
sdf=new SimpleDateFormat(StatsConstants.STATS_INPUT_DATE_FORMAT,Locale.ROOT);
parsedDate=sdf.parse(date);
c.setTime(parsedDate);
c.set(Calendar.MONTH,Calendar.DECEMBER);
c.set(Calendar.DAY_OF_MONTH,31);
calculatedDate=StatsUtils.msToLocalizedString(c.getTimeInMillis(),StatsConstants.STATS_INPUT_DATE_FORMAT);
break;
}
}
 catch (ParseException e) {
AppLog.e(AppLog.T.UTILS,e);
}
if (calculatedDate == null) {
AppLog.w(AppLog.T.STATS,""String_Node_Str"" + date);
return;
}
if (mListener != null) {
SiteModel site=mSiteStore.getSiteByLocalId(getLocalTableBlogID());
if (site != null && SiteUtils.isAccessedViaWPComRest(site)) {
mListener.onDateChanged(site.getSiteId(),getTimeframe(),calculatedDate);
}
}
AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.STATS_TAPPED_BAR_CHART,mSiteStore.getSiteByLocalId(getLocalTableBlogID()));
}",0.9845094664371772
13476,"public WPLinearLayoutSizeBound(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.WPLinearLayoutSizeBound);
  mMaxWidth=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxWidth,Integer.MAX_VALUE);
  mMaxHeight=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxHeight,Integer.MAX_VALUE);
}","public WPLinearLayoutSizeBound(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.WPLinearLayoutSizeBound);
  mMaxWidth=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxWidth,Integer.MAX_VALUE);
  mMaxHeight=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxHeight,Integer.MAX_VALUE);
  a.recycle();
}",0.981226533166458
13477,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.plugin_list_fragment,container,false);
  mRecycler=view.findViewById(R.id.recycler);
  mRecycler.setLayoutManager(new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false));
  mRecycler.addItemDecoration(new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL_LIST));
  mSwipeToRefreshHelper=buildSwipeToRefreshHelper((CustomSwipeRefreshLayout)view.findViewById(R.id.ptr_layout),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      mViewModel.pullToRefresh(mListType);
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.plugin_list_fragment,container,false);
  mRecycler=view.findViewById(R.id.recycler);
  mRecycler.setLayoutManager(new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false));
  mRecycler.addItemDecoration(new DividerItemDecoration(getActivity(),DividerItemDecoration.VERTICAL));
  mSwipeToRefreshHelper=buildSwipeToRefreshHelper((CustomSwipeRefreshLayout)view.findViewById(R.id.ptr_layout),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      mViewModel.pullToRefresh(mListType);
    }
  }
);
  return view;
}",0.9965010496850945
13478,"public SignupBottomSheetDialog(@NonNull final Context context,@NonNull final SignupSheetListener signupSheetListener){
  super(context);
  final View layout=LayoutInflater.from(context).inflate(R.layout.signup_bottom_sheet_dialog,null,false);
  Button termsOfServiceText=(Button)layout.findViewById(R.id.signup_tos);
  termsOfServiceText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      signupSheetListener.onSignupSheetTermsOfServiceClicked();
    }
  }
);
  termsOfServiceText.setText(Html.fromHtml(String.format(context.getResources().getString(R.string.signup_terms_of_service_text),""String_Node_Str"",""String_Node_Str"")));
  Button signupWithEmailButton=(Button)layout.findViewById(R.id.signup_email);
  signupWithEmailButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      signupSheetListener.onSignupSheetEmailClicked();
    }
  }
);
  Button signupWithGoogleButton=(Button)layout.findViewById(R.id.signup_google);
  signupWithGoogleButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      signupSheetListener.onSignupSheetGoogleClicked();
    }
  }
);
  setOnCancelListener(new OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      signupSheetListener.onSignupSheetCanceled();
    }
  }
);
  setContentView(layout);
  final BottomSheetBehavior behavior=BottomSheetBehavior.from((View)layout.getParent());
  setOnShowListener(new OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      behavior.setPeekHeight(layout.getHeight());
    }
  }
);
}","public SignupBottomSheetDialog(@NonNull final Context context,@NonNull final SignupSheetListener signupSheetListener){
  super(context);
  final View layout=LayoutInflater.from(context).inflate(R.layout.signup_bottom_sheet_dialog,null);
  Button termsOfServiceText=(Button)layout.findViewById(R.id.signup_tos);
  termsOfServiceText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      signupSheetListener.onSignupSheetTermsOfServiceClicked();
    }
  }
);
  termsOfServiceText.setText(Html.fromHtml(String.format(context.getResources().getString(R.string.signup_terms_of_service_text),""String_Node_Str"",""String_Node_Str"")));
  Button signupWithEmailButton=(Button)layout.findViewById(R.id.signup_email);
  signupWithEmailButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      signupSheetListener.onSignupSheetEmailClicked();
    }
  }
);
  Button signupWithGoogleButton=(Button)layout.findViewById(R.id.signup_google);
  signupWithGoogleButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      signupSheetListener.onSignupSheetGoogleClicked();
    }
  }
);
  setOnCancelListener(new OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      signupSheetListener.onSignupSheetCanceled();
    }
  }
);
  setContentView(layout);
  final BottomSheetBehavior behavior=BottomSheetBehavior.from((View)layout.getParent());
  setOnShowListener(new OnShowListener(){
    @Override public void onShow(    DialogInterface dialog){
      behavior.setPeekHeight(layout.getHeight());
    }
  }
);
}",0.9982089552238806
13479,"private ViewGroup buttonizeUsername(final String username){
  if (!isAdded()) {
    return null;
  }
  final ViewGroup usernameButton=(ViewGroup)LayoutInflater.from(getActivity()).inflate(R.layout.invite_username_button,null);
  final TextView usernameTextView=(TextView)usernameButton.findViewById(R.id.username);
  usernameTextView.setText(username);
  mUsernamesContainer.addView(usernameButton,mUsernamesContainer.getChildCount() - 1);
  final ImageButton delete=(ImageButton)usernameButton.findViewById(R.id.username_delete);
  delete.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      removeUsername(username);
    }
  }
);
  return usernameButton;
}","private ViewGroup buttonizeUsername(final String username){
  if (!isAdded()) {
    return null;
  }
  final ViewGroup usernameButton=(ViewGroup)LayoutInflater.from(getActivity()).inflate(R.layout.invite_username_button,mUsernamesContainer,false);
  final TextView usernameTextView=(TextView)usernameButton.findViewById(R.id.username);
  usernameTextView.setText(username);
  mUsernamesContainer.addView(usernameButton,mUsernamesContainer.getChildCount() - 1);
  final ImageButton delete=(ImageButton)usernameButton.findViewById(R.id.username_delete);
  delete.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      removeUsername(username);
    }
  }
);
  return usernameButton;
}",0.9797344514325648
13480,"private void updateUsernameError(String username,@Nullable String usernameResult){
  if (!isAdded()) {
    return;
  }
  TextView usernameErrorTextView;
  if (mUsernameErrorViews.containsKey(username)) {
    usernameErrorTextView=(TextView)mUsernameErrorViews.get(username);
    if (usernameResult == null || usernameResult.equals(FLAG_SUCCESS)) {
      ((ViewGroup)usernameErrorTextView.getParent()).removeView(usernameErrorTextView);
      mUsernameErrorViews.remove(username);
      return;
    }
  }
 else {
    if (usernameResult == null || usernameResult.equals(FLAG_SUCCESS)) {
      return;
    }
    usernameErrorTextView=(TextView)LayoutInflater.from(getActivity()).inflate(R.layout.people_invite_error_view,null);
    final ViewGroup usernameErrorsContainer=(ViewGroup)getView().findViewById(R.id.username_errors_container);
    usernameErrorsContainer.addView(usernameErrorTextView);
    mUsernameErrorViews.put(username,usernameErrorTextView);
  }
  usernameErrorTextView.setText(usernameResult);
}","private void updateUsernameError(String username,@Nullable String usernameResult){
  if (!isAdded()) {
    return;
  }
  TextView usernameErrorTextView;
  if (mUsernameErrorViews.containsKey(username)) {
    usernameErrorTextView=(TextView)mUsernameErrorViews.get(username);
    if (usernameResult == null || usernameResult.equals(FLAG_SUCCESS)) {
      ((ViewGroup)usernameErrorTextView.getParent()).removeView(usernameErrorTextView);
      mUsernameErrorViews.remove(username);
      return;
    }
  }
 else {
    if (usernameResult == null || usernameResult.equals(FLAG_SUCCESS)) {
      return;
    }
    final ViewGroup usernameErrorsContainer=(ViewGroup)getView().findViewById(R.id.username_errors_container);
    usernameErrorTextView=(TextView)LayoutInflater.from(getActivity()).inflate(R.layout.people_invite_error_view,usernameErrorsContainer,false);
    usernameErrorsContainer.addView(usernameErrorTextView);
    mUsernameErrorViews.put(username,usernameErrorTextView);
  }
  usernameErrorTextView.setText(usernameResult);
}",0.870542256961407
13481,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View v=inflater.inflate(R.layout.related_posts_dialog,null,false);
  mShowRelatedPosts=(Switch)v.findViewById(R.id.toggle_related_posts_switch);
  mShowHeader=(CheckBox)v.findViewById(R.id.show_header_checkbox);
  mShowImages=(CheckBox)v.findViewById(R.id.show_images_checkbox);
  mPreviewHeader=(TextView)v.findViewById(R.id.preview_header);
  mRelatedPostsListHeader=(TextView)v.findViewById(R.id.related_posts_list_header);
  mRelatedPostsList=(LinearLayout)v.findViewById(R.id.related_posts_list);
  mPreviewImages=new ArrayList<>();
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image1));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image2));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image3));
  Bundle args=getArguments();
  if (args != null) {
    mShowRelatedPosts.setChecked(args.getBoolean(SHOW_RELATED_POSTS_KEY));
    mShowHeader.setChecked(args.getBoolean(SHOW_HEADER_KEY));
    mShowImages.setChecked(args.getBoolean(SHOW_IMAGES_KEY));
  }
  toggleShowHeader(mShowHeader.isChecked());
  toggleShowImages(mShowImages.isChecked());
  mShowRelatedPosts.setOnCheckedChangeListener(this);
  mShowHeader.setOnCheckedChangeListener(this);
  mShowImages.setOnCheckedChangeListener(this);
  toggleViews(mShowRelatedPosts.isChecked());
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  View titleView=inflater.inflate(R.layout.detail_list_preference_title,null);
  TextView titleText=((TextView)titleView.findViewById(R.id.title));
  titleText.setText(R.string.site_settings_related_posts_title);
  titleText.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT));
  builder.setCustomTitle(titleView);
  builder.setPositiveButton(android.R.string.ok,this);
  builder.setNegativeButton(R.string.cancel,this);
  builder.setView(v);
  return builder.create();
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  LayoutInflater inflater=getActivity().getLayoutInflater();
  View v=inflater.inflate(R.layout.related_posts_dialog,null);
  mShowRelatedPosts=(Switch)v.findViewById(R.id.toggle_related_posts_switch);
  mShowHeader=(CheckBox)v.findViewById(R.id.show_header_checkbox);
  mShowImages=(CheckBox)v.findViewById(R.id.show_images_checkbox);
  mPreviewHeader=(TextView)v.findViewById(R.id.preview_header);
  mRelatedPostsListHeader=(TextView)v.findViewById(R.id.related_posts_list_header);
  mRelatedPostsList=(LinearLayout)v.findViewById(R.id.related_posts_list);
  mPreviewImages=new ArrayList<>();
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image1));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image2));
  mPreviewImages.add((ImageView)v.findViewById(R.id.related_post_image3));
  Bundle args=getArguments();
  if (args != null) {
    mShowRelatedPosts.setChecked(args.getBoolean(SHOW_RELATED_POSTS_KEY));
    mShowHeader.setChecked(args.getBoolean(SHOW_HEADER_KEY));
    mShowImages.setChecked(args.getBoolean(SHOW_IMAGES_KEY));
  }
  toggleShowHeader(mShowHeader.isChecked());
  toggleShowImages(mShowImages.isChecked());
  mShowRelatedPosts.setOnCheckedChangeListener(this);
  mShowHeader.setOnCheckedChangeListener(this);
  mShowImages.setOnCheckedChangeListener(this);
  toggleViews(mShowRelatedPosts.isChecked());
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  View titleView=inflater.inflate(R.layout.detail_list_preference_title,null);
  TextView titleText=((TextView)titleView.findViewById(R.id.title));
  titleText.setText(R.string.site_settings_related_posts_title);
  titleText.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT));
  builder.setCustomTitle(titleView);
  builder.setPositiveButton(android.R.string.ok,this);
  builder.setNegativeButton(R.string.cancel,this);
  builder.setView(v);
  return builder.create();
}",0.9985576923076924
13482,"public static String getLongLikeLabelText(Context context,int numLikes,boolean isLikedByCurrentUser){
  if (isLikedByCurrentUser) {
switch (numLikes) {
case 1:
      return context.getString(R.string.reader_likes_only_you);
case 2:
    return context.getString(R.string.reader_likes_you_and_one);
default :
  String youAndMultiLikes=context.getString(R.string.reader_likes_you_and_multi);
return String.format(youAndMultiLikes,numLikes - 1);
}
}
 else {
if (numLikes == 1) {
return context.getString(R.string.reader_likes_one);
}
 else {
String likes=context.getString(R.string.reader_likes_multi);
return String.format(LocaleManager.getSafeLocale(context),likes,numLikes);
}
}
}","public static String getLongLikeLabelText(Context context,int numLikes,boolean isLikedByCurrentUser){
  if (isLikedByCurrentUser) {
switch (numLikes) {
case 1:
      return context.getString(R.string.reader_likes_only_you);
case 2:
    return context.getString(R.string.reader_likes_you_and_one);
default :
  String youAndMultiLikes=context.getString(R.string.reader_likes_you_and_multi);
return String.format(LocaleManager.getSafeLocale(context),youAndMultiLikes,numLikes - 1);
}
}
 else {
if (numLikes == 1) {
return context.getString(R.string.reader_likes_one);
}
 else {
String likes=context.getString(R.string.reader_likes_multi);
return String.format(LocaleManager.getSafeLocale(context),likes,numLikes);
}
}
}",0.9734767025089606
13483,"private void showBlogInfo(ReaderBlog blogInfo){
  if (blogInfo == null || blogInfo.isSameAs(mBlogInfo)) {
    return;
  }
  mBlogInfo=blogInfo;
  ViewGroup layoutInfo=(ViewGroup)findViewById(R.id.layout_blog_info);
  TextView txtBlogName=(TextView)layoutInfo.findViewById(R.id.text_blog_name);
  TextView txtDomain=(TextView)layoutInfo.findViewById(R.id.text_domain);
  TextView txtDescription=(TextView)layoutInfo.findViewById(R.id.text_blog_description);
  TextView txtFollowCount=(TextView)layoutInfo.findViewById(R.id.text_blog_follow_count);
  if (blogInfo.hasName()) {
    txtBlogName.setText(blogInfo.getName());
  }
 else {
    txtBlogName.setText(R.string.reader_untitled_post);
  }
  if (blogInfo.hasUrl()) {
    txtDomain.setText(UrlUtils.getHost(blogInfo.getUrl()));
    txtDomain.setVisibility(View.VISIBLE);
  }
 else {
    txtDomain.setVisibility(View.GONE);
  }
  if (blogInfo.hasDescription()) {
    txtDescription.setText(blogInfo.getDescription());
    txtDescription.setVisibility(View.VISIBLE);
  }
 else {
    txtDescription.setVisibility(View.GONE);
  }
  try {
    txtFollowCount.setText(String.format(getContext().getString(R.string.reader_label_follow_count),blogInfo.numSubscribers));
  }
 catch (  ArithmeticException exception) {
    txtFollowCount.setText(String.format(Locale.US,getContext().getString(R.string.reader_label_follow_count),blogInfo.numSubscribers));
  }
  if (!mAccountStore.hasAccessToken()) {
    mFollowButton.setVisibility(View.GONE);
  }
 else {
    mFollowButton.setVisibility(View.VISIBLE);
    mFollowButton.setIsFollowed(blogInfo.isFollowing);
    mFollowButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        toggleFollowStatus();
      }
    }
);
  }
  if (layoutInfo.getVisibility() != View.VISIBLE) {
    layoutInfo.setVisibility(View.VISIBLE);
  }
  if (mBlogInfoListener != null) {
    mBlogInfoListener.onBlogInfoLoaded(blogInfo);
  }
}","private void showBlogInfo(ReaderBlog blogInfo){
  if (blogInfo == null || blogInfo.isSameAs(mBlogInfo)) {
    return;
  }
  mBlogInfo=blogInfo;
  ViewGroup layoutInfo=(ViewGroup)findViewById(R.id.layout_blog_info);
  TextView txtBlogName=(TextView)layoutInfo.findViewById(R.id.text_blog_name);
  TextView txtDomain=(TextView)layoutInfo.findViewById(R.id.text_domain);
  TextView txtDescription=(TextView)layoutInfo.findViewById(R.id.text_blog_description);
  TextView txtFollowCount=(TextView)layoutInfo.findViewById(R.id.text_blog_follow_count);
  if (blogInfo.hasName()) {
    txtBlogName.setText(blogInfo.getName());
  }
 else {
    txtBlogName.setText(R.string.reader_untitled_post);
  }
  if (blogInfo.hasUrl()) {
    txtDomain.setText(UrlUtils.getHost(blogInfo.getUrl()));
    txtDomain.setVisibility(View.VISIBLE);
  }
 else {
    txtDomain.setVisibility(View.GONE);
  }
  if (blogInfo.hasDescription()) {
    txtDescription.setText(blogInfo.getDescription());
    txtDescription.setVisibility(View.VISIBLE);
  }
 else {
    txtDescription.setVisibility(View.GONE);
  }
  try {
    txtFollowCount.setText(String.format(LocaleManager.getSafeLocale(getContext()),getContext().getString(R.string.reader_label_follow_count),blogInfo.numSubscribers));
  }
 catch (  ArithmeticException exception) {
    txtFollowCount.setText(String.format(LocaleManager.getSafeLocale(getContext()),getContext().getString(R.string.reader_label_follow_count),blogInfo.numSubscribers));
  }
  if (!mAccountStore.hasAccessToken()) {
    mFollowButton.setVisibility(View.GONE);
  }
 else {
    mFollowButton.setVisibility(View.VISIBLE);
    mFollowButton.setIsFollowed(blogInfo.isFollowing);
    mFollowButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        toggleFollowStatus();
      }
    }
);
  }
  if (layoutInfo.getVisibility() != View.VISIBLE) {
    layoutInfo.setVisibility(View.VISIBLE);
  }
  if (mBlogInfoListener != null) {
    mBlogInfoListener.onBlogInfoLoaded(blogInfo);
  }
}",0.9803822937625756
13484,"private static void purge(){
  SQLiteDatabase db=getWritableDb();
  db.beginTransaction();
  try {
    int numPostsDeleted=ReaderPostTable.purge(db);
    if (numPostsDeleted > 0) {
      AppLog.i(T.READER,String.format(""String_Node_Str"",numPostsDeleted));
      int numCommentsDeleted=ReaderCommentTable.purge(db);
      if (numCommentsDeleted > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numCommentsDeleted));
      }
      int numLikesDeleted=ReaderLikeTable.purge(db);
      if (numLikesDeleted > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numLikesDeleted));
      }
      int numThumbsPurged=ReaderThumbnailTable.purge(db);
      if (numThumbsPurged > 0) {
        AppLog.i(T.READER,String.format(""String_Node_Str"",numThumbsPurged));
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}","private static void purge(){
  SQLiteDatabase db=getWritableDb();
  db.beginTransaction();
  try {
    int numPostsDeleted=ReaderPostTable.purge(db);
    if (numPostsDeleted > 0) {
      AppLog.i(T.READER,String.format(Locale.ENGLISH,""String_Node_Str"",numPostsDeleted));
      int numCommentsDeleted=ReaderCommentTable.purge(db);
      if (numCommentsDeleted > 0) {
        AppLog.i(T.READER,String.format(Locale.ENGLISH,""String_Node_Str"",numCommentsDeleted));
      }
      int numLikesDeleted=ReaderLikeTable.purge(db);
      if (numLikesDeleted > 0) {
        AppLog.i(T.READER,String.format(Locale.ENGLISH,""String_Node_Str"",numLikesDeleted));
      }
      int numThumbsPurged=ReaderThumbnailTable.purge(db);
      if (numThumbsPurged > 0) {
        AppLog.i(T.READER,String.format(Locale.ENGLISH,""String_Node_Str"",numThumbsPurged));
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}",0.9667774086378738
13485,"public static void updateFollowedStatus(){
  SQLiteStatement statement=ReaderDatabase.getWritableDb().compileStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    int count=statement.executeUpdateDelete();
    if (count > 0) {
      AppLog.d(AppLog.T.READER,String.format(""String_Node_Str"",count));
    }
  }
  finally {
    statement.close();
  }
}","public static void updateFollowedStatus(){
  SQLiteStatement statement=ReaderDatabase.getWritableDb().compileStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    int count=statement.executeUpdateDelete();
    if (count > 0) {
      AppLog.d(AppLog.T.READER,String.format(Locale.ENGLISH,""String_Node_Str"",count));
    }
  }
  finally {
    statement.close();
  }
}",0.9362808842652796
13486,"private static int purgePostsForTag(SQLiteDatabase db,ReaderTag tag){
  int numPosts=getNumPostsWithTag(tag);
  if (numPosts <= MAX_POSTS_PER_TAG) {
    return 0;
  }
  String[] args={tag.getTagSlug(),Integer.toString(tag.tagType.toInt()),Integer.toString(MAX_POSTS_PER_TAG)};
  String where=""String_Node_Str"" + ""String_Node_Str"" + getSortColumnForTag(tag) + ""String_Node_Str"";
  int numDeleted=db.delete(""String_Node_Str"",where,args);
  AppLog.d(AppLog.T.READER,String.format(""String_Node_Str"",numDeleted,tag.getTagNameForLog()));
  return numDeleted;
}","private static int purgePostsForTag(SQLiteDatabase db,ReaderTag tag){
  int numPosts=getNumPostsWithTag(tag);
  if (numPosts <= MAX_POSTS_PER_TAG) {
    return 0;
  }
  String[] args={tag.getTagSlug(),Integer.toString(tag.tagType.toInt()),Integer.toString(MAX_POSTS_PER_TAG)};
  String where=""String_Node_Str"" + ""String_Node_Str"" + getSortColumnForTag(tag) + ""String_Node_Str"";
  int numDeleted=db.delete(""String_Node_Str"",where,args);
  AppLog.d(AppLog.T.READER,String.format(Locale.ENGLISH,""String_Node_Str"",numDeleted,tag.getTagNameForLog()));
  return numDeleted;
}",0.9866429207479964
13487,"@Override public String getLabel(){
  if (isTagDisplayNameAlphaNumeric()) {
    return getTagDisplayName().toLowerCase();
  }
 else   if (hasTagTitle()) {
    return getTagTitle();
  }
 else {
    return getTagDisplayName();
  }
}","@Override public String getLabel(){
  if (isTagDisplayNameAlphaNumeric()) {
    return getTagDisplayName().toLowerCase(Locale.ROOT);
  }
 else   if (hasTagTitle()) {
    return getTagTitle();
  }
 else {
    return getTagDisplayName();
  }
}",0.9766454352441614
13488,"public boolean isTagTopic(){
  String endpoint=getEndpoint();
  return endpoint.toLowerCase().contains(""String_Node_Str"");
}","public boolean isTagTopic(){
  String endpoint=getEndpoint();
  return endpoint.toLowerCase(Locale.ROOT).contains(""String_Node_Str"");
}",0.9575289575289576
13489,"public boolean isListTopic(){
  String endpoint=getEndpoint();
  return endpoint.toLowerCase().contains(""String_Node_Str"");
}","public boolean isListTopic(){
  String endpoint=getEndpoint();
  return endpoint.toLowerCase(Locale.ROOT).contains(""String_Node_Str"");
}",0.9578544061302682
13490,"private void showNotificationForBuilder(NotificationCompat.Builder builder,Context context,String wpcomNoteID,int pushId,boolean notifyUser){
  if (builder == null || context == null) {
    return;
  }
  Intent resultIntent=new Intent(context,WPMainActivity.class);
  resultIntent.putExtra(WPMainActivity.ARG_OPENED_FROM_PUSH,true);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsListFragment.NOTE_ID_EXTRA,wpcomNoteID);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean shouldReceiveNotifications=prefs.getBoolean(context.getString(R.string.wp_pref_notifications_master),true);
  if (shouldReceiveNotifications) {
    if (notifyUser) {
      boolean shouldVibrate=prefs.getBoolean(context.getString(R.string.wp_pref_notification_vibrate),false);
      boolean shouldBlinkLight=prefs.getBoolean(context.getString(R.string.wp_pref_notification_light),true);
      String notificationSound=prefs.getString(context.getString(R.string.wp_pref_custom_notification_sound),context.getString(R.string.notification_settings_item_sights_and_sounds_choose_sound_default));
      if (!TextUtils.isEmpty(notificationSound) && !notificationSound.trim().toLowerCase().startsWith(""String_Node_Str"")) {
        builder.setSound(Uri.parse(notificationSound));
      }
      if (shouldVibrate) {
        builder.setVibrate(new long[]{500,500,500});
      }
      if (shouldBlinkLight) {
        builder.setLights(0xff0000ff,1000,5000);
      }
    }
 else {
      builder.setVibrate(null);
      builder.setSound(null);
    }
    Intent notificationDeletedIntent=new Intent(context,NotificationDismissBroadcastReceiver.class);
    notificationDeletedIntent.putExtra(""String_Node_Str"",pushId);
    notificationDeletedIntent.setAction(String.valueOf(pushId));
    PendingIntent pendingDeleteIntent=PendingIntent.getBroadcast(context,pushId,notificationDeletedIntent,0);
    builder.setDeleteIntent(pendingDeleteIntent);
    builder.setCategory(NotificationCompat.CATEGORY_SOCIAL);
    PendingIntent pendingIntent=PendingIntent.getActivity(context,pushId,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_UPDATE_CURRENT);
    builder.setContentIntent(pendingIntent);
    NotificationManagerCompat notificationManager=NotificationManagerCompat.from(context);
    notificationManager.notify(pushId,builder.build());
  }
}","private void showNotificationForBuilder(NotificationCompat.Builder builder,Context context,String wpcomNoteID,int pushId,boolean notifyUser){
  if (builder == null || context == null) {
    return;
  }
  Intent resultIntent=new Intent(context,WPMainActivity.class);
  resultIntent.putExtra(WPMainActivity.ARG_OPENED_FROM_PUSH,true);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsListFragment.NOTE_ID_EXTRA,wpcomNoteID);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean shouldReceiveNotifications=prefs.getBoolean(context.getString(R.string.wp_pref_notifications_master),true);
  if (shouldReceiveNotifications) {
    if (notifyUser) {
      boolean shouldVibrate=prefs.getBoolean(context.getString(R.string.wp_pref_notification_vibrate),false);
      boolean shouldBlinkLight=prefs.getBoolean(context.getString(R.string.wp_pref_notification_light),true);
      String notificationSound=prefs.getString(context.getString(R.string.wp_pref_custom_notification_sound),context.getString(R.string.notification_settings_item_sights_and_sounds_choose_sound_default));
      if (!TextUtils.isEmpty(notificationSound) && !notificationSound.trim().toLowerCase(Locale.ROOT).startsWith(""String_Node_Str"")) {
        builder.setSound(Uri.parse(notificationSound));
      }
      if (shouldVibrate) {
        builder.setVibrate(new long[]{500,500,500});
      }
      if (shouldBlinkLight) {
        builder.setLights(0xff0000ff,1000,5000);
      }
    }
 else {
      builder.setVibrate(null);
      builder.setSound(null);
    }
    Intent notificationDeletedIntent=new Intent(context,NotificationDismissBroadcastReceiver.class);
    notificationDeletedIntent.putExtra(""String_Node_Str"",pushId);
    notificationDeletedIntent.setAction(String.valueOf(pushId));
    PendingIntent pendingDeleteIntent=PendingIntent.getBroadcast(context,pushId,notificationDeletedIntent,0);
    builder.setDeleteIntent(pendingDeleteIntent);
    builder.setCategory(NotificationCompat.CATEGORY_SOCIAL);
    PendingIntent pendingIntent=PendingIntent.getActivity(context,pushId,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_UPDATE_CURRENT);
    builder.setContentIntent(pendingIntent);
    NotificationManagerCompat notificationManager=NotificationManagerCompat.from(context);
    notificationManager.notify(pushId,builder.build());
  }
}",0.9978578383641676
13491,"protected void lowerCaseEditable(Editable editable){
  String lowerCase=editable.toString().toLowerCase();
  if (!lowerCase.equals(editable.toString())) {
    editable.replace(0,editable.length(),lowerCase);
  }
}","protected void lowerCaseEditable(Editable editable){
  String lowerCase=editable.toString().toLowerCase(Locale.getDefault());
  if (!lowerCase.equals(editable.toString())) {
    editable.replace(0,editable.length(),lowerCase);
  }
}",0.9573033707865168
13492,"/** 
 * Create a display name from the email address by taking everything before the ""@"" symbol, removing all non-letters and non-periods, replacing periods with spaces, and capitalizing the first letter of each word.
 * @return {@link String} to be the display name
 */
private String createDisplayNameFromEmail(){
  String username=mEmailAddress.split(""String_Node_Str"")[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
  String[] array=username.split(""String_Node_Str"");
  StringBuilder builder=new StringBuilder();
  for (  String s : array) {
    String capitalized=s.substring(0,1).toUpperCase() + s.substring(1);
    builder.append(capitalized.concat(""String_Node_Str""));
  }
  return builder.toString().trim();
}","/** 
 * Create a display name from the email address by taking everything before the ""@"" symbol, removing all non-letters and non-periods, replacing periods with spaces, and capitalizing the first letter of each word.
 * @return {@link String} to be the display name
 */
private String createDisplayNameFromEmail(){
  String username=mEmailAddress.split(""String_Node_Str"")[0].replaceAll(""String_Node_Str"",""String_Node_Str"");
  String[] array=username.split(""String_Node_Str"");
  StringBuilder builder=new StringBuilder();
  for (  String s : array) {
    String capitalized=s.substring(0,1).toUpperCase(Locale.getDefault()) + s.substring(1);
    builder.append(capitalized.concat(""String_Node_Str""));
  }
  return builder.toString().trim();
}",0.9870307167235496
13493,"/** 
 * Create a username from the email address by taking everything before the ""@"" symbol and removing all non-alphanumeric characters.
 * @return {@link String} to be the username
 */
private String createUsernameFromEmail(){
  return mEmailAddress.split(""String_Node_Str"")[0].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
}","/** 
 * Create a username from the email address by taking everything before the ""@"" symbol and removing all non-alphanumeric characters.
 * @return {@link String} to be the username
 */
private String createUsernameFromEmail(){
  return mEmailAddress.split(""String_Node_Str"")[0].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.ROOT);
}",0.984263233190272
13494,"private String getUsernameQueryFromDisplayName(){
  return mDisplayName.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
}","private String getUsernameQueryFromDisplayName(){
  return mDisplayName.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase(Locale.ROOT);
}",0.96028880866426
13495,"private void updateStatusViews(){
  if (!isAdded() || mComment == null) {
    return;
  }
  final int statusTextResId;
  final int statusColor;
  CommentStatus commentStatus=CommentStatus.fromString(mComment.getStatus());
switch (commentStatus) {
case APPROVED:
    statusTextResId=R.string.comment_status_approved;
  statusColor=ContextCompat.getColor(getActivity(),R.color.notification_status_unapproved_dark);
break;
case UNAPPROVED:
statusTextResId=R.string.comment_status_unapproved;
statusColor=ContextCompat.getColor(getActivity(),R.color.notification_status_unapproved_dark);
break;
case SPAM:
statusTextResId=R.string.comment_status_spam;
statusColor=ContextCompat.getColor(getActivity(),R.color.comment_status_spam);
break;
case TRASH:
default :
statusTextResId=R.string.comment_status_trash;
statusColor=ContextCompat.getColor(getActivity(),R.color.comment_status_spam);
break;
}
if (canLike()) {
mBtnLikeComment.setVisibility(View.VISIBLE);
if (mComment != null) {
toggleLikeButton(mComment.getILike());
}
 else if (mNote != null) {
mNote.hasLikedComment();
}
}
if (mIsUsersBlog && commentStatus != CommentStatus.APPROVED) {
mTxtStatus.setText(getString(statusTextResId).toUpperCase());
mTxtStatus.setTextColor(statusColor);
if (mTxtStatus.getVisibility() != View.VISIBLE) {
mTxtStatus.clearAnimation();
AniUtils.fadeIn(mTxtStatus,AniUtils.Duration.LONG);
}
}
 else {
mTxtStatus.setVisibility(View.GONE);
}
if (canModerate()) {
setModerateButtonForStatus(commentStatus);
mBtnModerateComment.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
performModerateAction();
}
}
);
mBtnModerateComment.setVisibility(View.VISIBLE);
}
 else {
mBtnModerateComment.setVisibility(View.GONE);
}
if (canMarkAsSpam()) {
mBtnSpamComment.setVisibility(View.VISIBLE);
if (commentStatus == CommentStatus.SPAM) {
mBtnSpamCommentText.setText(R.string.mnu_comment_unspam);
}
 else {
mBtnSpamCommentText.setText(R.string.mnu_comment_spam);
}
}
 else {
mBtnSpamComment.setVisibility(View.GONE);
}
if (canTrash()) {
mBtnTrashComment.setVisibility(View.VISIBLE);
if (commentStatus == CommentStatus.TRASH) {
mBtnModerateIcon.setImageResource(R.drawable.ic_undo_grey_24dp);
mBtnModerateTextView.setText(R.string.mnu_comment_untrash);
mBtnTrashCommentText.setText(R.string.mnu_comment_delete_permanently);
}
 else {
mBtnTrashCommentText.setText(R.string.mnu_comment_trash);
}
}
 else {
mBtnTrashComment.setVisibility(View.GONE);
}
if (canEdit()) {
mBtnEditComment.setVisibility(View.VISIBLE);
}
mLayoutButtons.setVisibility(View.VISIBLE);
}","private void updateStatusViews(){
  if (!isAdded() || mComment == null) {
    return;
  }
  final int statusTextResId;
  final int statusColor;
  CommentStatus commentStatus=CommentStatus.fromString(mComment.getStatus());
switch (commentStatus) {
case APPROVED:
    statusTextResId=R.string.comment_status_approved;
  statusColor=ContextCompat.getColor(getActivity(),R.color.notification_status_unapproved_dark);
break;
case UNAPPROVED:
statusTextResId=R.string.comment_status_unapproved;
statusColor=ContextCompat.getColor(getActivity(),R.color.notification_status_unapproved_dark);
break;
case SPAM:
statusTextResId=R.string.comment_status_spam;
statusColor=ContextCompat.getColor(getActivity(),R.color.comment_status_spam);
break;
case TRASH:
default :
statusTextResId=R.string.comment_status_trash;
statusColor=ContextCompat.getColor(getActivity(),R.color.comment_status_spam);
break;
}
if (canLike()) {
mBtnLikeComment.setVisibility(View.VISIBLE);
if (mComment != null) {
toggleLikeButton(mComment.getILike());
}
 else if (mNote != null) {
mNote.hasLikedComment();
}
}
if (mIsUsersBlog && commentStatus != CommentStatus.APPROVED) {
mTxtStatus.setText(getString(statusTextResId).toUpperCase(Locale.getDefault()));
mTxtStatus.setTextColor(statusColor);
if (mTxtStatus.getVisibility() != View.VISIBLE) {
mTxtStatus.clearAnimation();
AniUtils.fadeIn(mTxtStatus,AniUtils.Duration.LONG);
}
}
 else {
mTxtStatus.setVisibility(View.GONE);
}
if (canModerate()) {
setModerateButtonForStatus(commentStatus);
mBtnModerateComment.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
performModerateAction();
}
}
);
mBtnModerateComment.setVisibility(View.VISIBLE);
}
 else {
mBtnModerateComment.setVisibility(View.GONE);
}
if (canMarkAsSpam()) {
mBtnSpamComment.setVisibility(View.VISIBLE);
if (commentStatus == CommentStatus.SPAM) {
mBtnSpamCommentText.setText(R.string.mnu_comment_unspam);
}
 else {
mBtnSpamCommentText.setText(R.string.mnu_comment_spam);
}
}
 else {
mBtnSpamComment.setVisibility(View.GONE);
}
if (canTrash()) {
mBtnTrashComment.setVisibility(View.VISIBLE);
if (commentStatus == CommentStatus.TRASH) {
mBtnModerateIcon.setImageResource(R.drawable.ic_undo_grey_24dp);
mBtnModerateTextView.setText(R.string.mnu_comment_untrash);
mBtnTrashCommentText.setText(R.string.mnu_comment_delete_permanently);
}
 else {
mBtnTrashCommentText.setText(R.string.mnu_comment_trash);
}
}
 else {
mBtnTrashComment.setVisibility(View.GONE);
}
if (canEdit()) {
mBtnEditComment.setVisibility(View.VISIBLE);
}
mLayoutButtons.setVisibility(View.VISIBLE);
}",0.996298460939022
13496,"private SiteList filteredSitesByText(SiteList sites){
  SiteList filteredSiteList=new SiteList();
  for (int i=0; i < sites.size(); i++) {
    SiteRecord record=sites.get(i);
    String siteNameLowerCase=record.mBlogName.toLowerCase();
    String hostNameLowerCase=record.mHomeURL.toLowerCase();
    if (siteNameLowerCase.contains(mLastSearch.toLowerCase()) || hostNameLowerCase.contains(mLastSearch.toLowerCase())) {
      filteredSiteList.add(record);
    }
  }
  return filteredSiteList;
}","private SiteList filteredSitesByText(SiteList sites){
  SiteList filteredSiteList=new SiteList();
  for (int i=0; i < sites.size(); i++) {
    SiteRecord record=sites.get(i);
    String siteNameLowerCase=record.mBlogName.toLowerCase(Locale.getDefault());
    String hostNameLowerCase=record.mHomeURL.toLowerCase(Locale.ROOT);
    if (siteNameLowerCase.contains(mLastSearch.toLowerCase(Locale.getDefault())) || hostNameLowerCase.contains(mLastSearch.toLowerCase(Locale.ROOT))) {
      filteredSiteList.add(record);
    }
  }
  return filteredSiteList;
}",0.942528735632184
13497,"private void deleteMedia(final ArrayList<Integer> ids){
  final ArrayList<MediaModel> mediaToDelete=new ArrayList<>();
  int processedItemCount=0;
  for (  int currentId : ids) {
    MediaModel mediaModel=mMediaStore.getMediaWithLocalId(currentId);
    if (mediaModel == null) {
      continue;
    }
    if (UploadService.isPendingOrInProgressMediaUpload(mediaModel)) {
      MediaStore.CancelMediaPayload payload=new MediaStore.CancelMediaPayload(mSite,mediaModel,false);
      mDispatcher.dispatch(MediaActionBuilder.newCancelMediaUploadAction(payload));
    }
    if (mediaModel.getUploadState() != null && MediaUtils.isLocalFile(mediaModel.getUploadState().toLowerCase())) {
      mDispatcher.dispatch(MediaActionBuilder.newRemoveMediaAction(mediaModel));
    }
 else {
      mediaToDelete.add(mediaModel);
      mediaModel.setUploadState(MediaUploadState.DELETING);
      mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction(mediaModel));
    }
    processedItemCount++;
  }
  if (processedItemCount != ids.size()) {
    ToastUtils.showToast(this,R.string.cannot_delete_multi_media_items,ToastUtils.Duration.LONG);
  }
  if (!mediaToDelete.isEmpty()) {
    startMediaDeleteService(mediaToDelete);
  }
}","private void deleteMedia(final ArrayList<Integer> ids){
  final ArrayList<MediaModel> mediaToDelete=new ArrayList<>();
  int processedItemCount=0;
  for (  int currentId : ids) {
    MediaModel mediaModel=mMediaStore.getMediaWithLocalId(currentId);
    if (mediaModel == null) {
      continue;
    }
    if (UploadService.isPendingOrInProgressMediaUpload(mediaModel)) {
      MediaStore.CancelMediaPayload payload=new MediaStore.CancelMediaPayload(mSite,mediaModel,false);
      mDispatcher.dispatch(MediaActionBuilder.newCancelMediaUploadAction(payload));
    }
    if (mediaModel.getUploadState() != null && MediaUtils.isLocalFile(mediaModel.getUploadState().toLowerCase(Locale.ROOT))) {
      mDispatcher.dispatch(MediaActionBuilder.newRemoveMediaAction(mediaModel));
    }
 else {
      mediaToDelete.add(mediaModel);
      mediaModel.setUploadState(MediaUploadState.DELETING);
      mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction(mediaModel));
    }
    processedItemCount++;
  }
  if (processedItemCount != ids.size()) {
    ToastUtils.showToast(this,R.string.cannot_delete_multi_media_items,ToastUtils.Duration.LONG);
  }
  if (!mediaToDelete.isEmpty()) {
    startMediaDeleteService(mediaToDelete);
  }
}",0.9954973393368808
13498,"@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  holder.mImageView.setTag(null);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.mFileContainer.setVisibility(View.GONE);
    holder.mImageView.setImageUrl(null,WPNetworkImageView.ImageType.PHOTO);
  }
 else   if (isImage) {
    holder.mFileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      loadLocalImage(media.getFilePath(),holder.mImageView);
    }
 else {
      holder.mImageView.setImageUrl(getBestImageUrl(media),WPNetworkImageView.ImageType.PHOTO);
    }
  }
 else   if (media.isVideo()) {
    holder.mFileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.mImageView);
  }
 else {
    holder.mImageView.setImageDrawable(null);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.mFileContainer.setVisibility(View.VISIBLE);
    holder.mTitleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.mFileTypeView.setText(fileExtension.toUpperCase());
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.mFileTypeImageView.setImageResource(placeholderResId);
  }
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.mSelectionCountContainer.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.mSelectionCountTextView.setText(Integer.toString(count));
    }
 else {
      holder.mSelectionCountTextView.setText(null);
    }
  }
 else {
    holder.mSelectionCountContainer.setVisibility(View.GONE);
    holder.mSelectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.mImageView.getScaleX() != scale) {
    holder.mImageView.setScaleX(scale);
    holder.mImageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.mStateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.mProgressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.mRetryDeleteContainer.setVisibility(View.VISIBLE);
      holder.mImgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.mRetryDeleteContainer.setVisibility(View.GONE);
    }
    holder.mStateTextView.setText(getLabelForMediaUploadState(state));
    holder.mVideoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.mStateContainer.setVisibility(View.GONE);
    holder.mStateContainer.setOnClickListener(null);
    holder.mVideoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}","@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  holder.mImageView.setTag(null);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.mFileContainer.setVisibility(View.GONE);
    holder.mImageView.setImageUrl(null,WPNetworkImageView.ImageType.PHOTO);
  }
 else   if (isImage) {
    holder.mFileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      loadLocalImage(media.getFilePath(),holder.mImageView);
    }
 else {
      holder.mImageView.setImageUrl(getBestImageUrl(media),WPNetworkImageView.ImageType.PHOTO);
    }
  }
 else   if (media.isVideo()) {
    holder.mFileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.mImageView);
  }
 else {
    holder.mImageView.setImageDrawable(null);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.mFileContainer.setVisibility(View.VISIBLE);
    holder.mTitleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.mFileTypeView.setText(fileExtension.toUpperCase(Locale.ROOT));
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.mFileTypeImageView.setImageResource(placeholderResId);
  }
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.mSelectionCountContainer.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setVisibility(View.VISIBLE);
    holder.mSelectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.mSelectionCountTextView.setText(Integer.toString(count));
    }
 else {
      holder.mSelectionCountTextView.setText(null);
    }
  }
 else {
    holder.mSelectionCountContainer.setVisibility(View.GONE);
    holder.mSelectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.mImageView.getScaleX() != scale) {
    holder.mImageView.setScaleX(scale);
    holder.mImageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.mStateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.mProgressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.mRetryDeleteContainer.setVisibility(View.VISIBLE);
      holder.mImgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.mRetryDeleteContainer.setVisibility(View.GONE);
    }
    holder.mStateTextView.setText(getLabelForMediaUploadState(state));
    holder.mVideoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.mStateContainer.setVisibility(View.GONE);
    holder.mStateContainer.setOnClickListener(null);
    holder.mVideoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}",0.9984745527666066
13499,"private void showMetaData(){
  mTitleView.setText(mMedia.getTitle());
  mAltTextView.setText(mMedia.getAlt());
  if (isMediaFromEditor()) {
    mLinkView.setText(mEditorImageMetaData.getLinkUrl());
    mLinkTargetNewWindowView.setChecked(mEditorImageMetaData.isLinkTargetBlank());
    findViewById(R.id.edit_description_container).setVisibility(View.GONE);
    findViewById(R.id.divider_dimensions).setVisibility(View.GONE);
    setupAlignmentSpinner();
    setupImageSizeSeekBar();
  }
 else {
    mDescriptionView.setText(mMedia.getDescription());
    findViewById(R.id.card1).setVisibility(View.GONE);
    findViewById(R.id.edit_link_container).setVisibility(View.GONE);
  }
  mCaptionView.setText(mMedia.getCaption());
  TextView txtUrl=findViewById(R.id.text_url);
  txtUrl.setText(mMedia.getUrl());
  TextView txtFilename=findViewById(R.id.text_filename);
  txtFilename.setText(mMedia.getFileName());
  TextView txtFileType=findViewById(R.id.text_filetype);
  txtFileType.setText(StringUtils.notNullStr(mMedia.getFileExtension()).toUpperCase());
  showImageDimensions(mMedia.getWidth(),mMedia.getHeight());
  String uploadDate=null;
  if (mMedia.getUploadDate() != null) {
    Date date=DateTimeUtils.dateFromIso8601(mMedia.getUploadDate());
    if (date != null) {
      uploadDate=SimpleDateFormat.getDateInstance().format(date);
    }
  }
  TextView txtUploadDate=findViewById(R.id.text_upload_date);
  TextView txtUploadDateLabel=findViewById(R.id.text_upload_date_label);
  if (uploadDate != null) {
    txtUploadDate.setVisibility(View.VISIBLE);
    txtUploadDateLabel.setVisibility(View.VISIBLE);
    txtUploadDate.setText(uploadDate);
  }
 else {
    txtUploadDate.setVisibility(View.GONE);
    txtUploadDateLabel.setVisibility(View.GONE);
  }
  TextView txtDuration=findViewById(R.id.text_duration);
  TextView txtDurationLabel=findViewById(R.id.text_duration_label);
  if (mMedia.getLength() > 0) {
    txtDuration.setVisibility(View.VISIBLE);
    txtDurationLabel.setVisibility(View.VISIBLE);
    txtDuration.setText(DateUtils.formatElapsedTime(mMedia.getLength()));
  }
 else {
    txtDuration.setVisibility(View.GONE);
    txtDurationLabel.setVisibility(View.GONE);
    findViewById(R.id.divider_duration).setVisibility(View.GONE);
  }
  boolean hasUrl=!TextUtils.isEmpty(mMedia.getUrl());
  View txtCopyUrl=findViewById(R.id.text_copy_url);
  txtCopyUrl.setVisibility(hasUrl ? View.VISIBLE : View.GONE);
  if (hasUrl) {
    txtCopyUrl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        copyMediaUrlToClipboard();
      }
    }
);
  }
}","private void showMetaData(){
  mTitleView.setText(mMedia.getTitle());
  mAltTextView.setText(mMedia.getAlt());
  if (isMediaFromEditor()) {
    mLinkView.setText(mEditorImageMetaData.getLinkUrl());
    mLinkTargetNewWindowView.setChecked(mEditorImageMetaData.isLinkTargetBlank());
    findViewById(R.id.edit_description_container).setVisibility(View.GONE);
    findViewById(R.id.divider_dimensions).setVisibility(View.GONE);
    setupAlignmentSpinner();
    setupImageSizeSeekBar();
  }
 else {
    mDescriptionView.setText(mMedia.getDescription());
    findViewById(R.id.card1).setVisibility(View.GONE);
    findViewById(R.id.edit_link_container).setVisibility(View.GONE);
  }
  mCaptionView.setText(mMedia.getCaption());
  TextView txtUrl=findViewById(R.id.text_url);
  txtUrl.setText(mMedia.getUrl());
  TextView txtFilename=findViewById(R.id.text_filename);
  txtFilename.setText(mMedia.getFileName());
  TextView txtFileType=findViewById(R.id.text_filetype);
  txtFileType.setText(StringUtils.notNullStr(mMedia.getFileExtension()).toUpperCase(Locale.ROOT));
  showImageDimensions(mMedia.getWidth(),mMedia.getHeight());
  String uploadDate=null;
  if (mMedia.getUploadDate() != null) {
    Date date=DateTimeUtils.dateFromIso8601(mMedia.getUploadDate());
    if (date != null) {
      uploadDate=SimpleDateFormat.getDateInstance().format(date);
    }
  }
  TextView txtUploadDate=findViewById(R.id.text_upload_date);
  TextView txtUploadDateLabel=findViewById(R.id.text_upload_date_label);
  if (uploadDate != null) {
    txtUploadDate.setVisibility(View.VISIBLE);
    txtUploadDateLabel.setVisibility(View.VISIBLE);
    txtUploadDate.setText(uploadDate);
  }
 else {
    txtUploadDate.setVisibility(View.GONE);
    txtUploadDateLabel.setVisibility(View.GONE);
  }
  TextView txtDuration=findViewById(R.id.text_duration);
  TextView txtDurationLabel=findViewById(R.id.text_duration_label);
  if (mMedia.getLength() > 0) {
    txtDuration.setVisibility(View.VISIBLE);
    txtDurationLabel.setVisibility(View.VISIBLE);
    txtDuration.setText(DateUtils.formatElapsedTime(mMedia.getLength()));
  }
 else {
    txtDuration.setVisibility(View.GONE);
    txtDurationLabel.setVisibility(View.GONE);
    findViewById(R.id.divider_duration).setVisibility(View.GONE);
  }
  boolean hasUrl=!TextUtils.isEmpty(mMedia.getUrl());
  View txtCopyUrl=findViewById(R.id.text_copy_url);
  txtCopyUrl.setVisibility(hasUrl ? View.VISIBLE : View.GONE);
  if (hasUrl) {
    txtCopyUrl.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        copyMediaUrlToClipboard();
      }
    }
);
  }
}",0.9978971515962533
13500,"private void definitelyDeleteBackspaceDeletedMediaItems(){
  for (  String mediaId : mAztecBackspaceDeletedMediaItemIds) {
    if (!TextUtils.isEmpty(mediaId)) {
      MediaModel mediaModel=mMediaStore.getMediaWithLocalId(StringUtils.stringToInt(mediaId));
      if (mediaModel == null) {
        continue;
      }
      if (mediaModel.getUploadState() != null && MediaUtils.isLocalFile(mediaModel.getUploadState().toLowerCase()) && !UploadService.isPendingOrInProgressMediaUpload(mediaModel)) {
        mDispatcher.dispatch(MediaActionBuilder.newRemoveMediaAction(mediaModel));
      }
    }
  }
}","private void definitelyDeleteBackspaceDeletedMediaItems(){
  for (  String mediaId : mAztecBackspaceDeletedMediaItemIds) {
    if (!TextUtils.isEmpty(mediaId)) {
      MediaModel mediaModel=mMediaStore.getMediaWithLocalId(StringUtils.stringToInt(mediaId));
      if (mediaModel == null) {
        continue;
      }
      if (mediaModel.getUploadState() != null && MediaUtils.isLocalFile(mediaModel.getUploadState().toLowerCase(Locale.ROOT)) && !UploadService.isPendingOrInProgressMediaUpload(mediaModel)) {
        mDispatcher.dispatch(MediaActionBuilder.newRemoveMediaAction(mediaModel));
      }
    }
  }
}",0.9908864954432476
13501,"public void filter(final String text){
  final List<TermModel> allTags=mAllTags;
  new Thread(new Runnable(){
    @Override public void run(){
      final List<TermModel> filteredTags=new ArrayList<>();
      if (TextUtils.isEmpty(text)) {
        filteredTags.addAll(allTags);
      }
 else {
        for (        TermModel tag : allTags) {
          if (tag.getName().toLowerCase().contains(text.toLowerCase())) {
            filteredTags.add(tag);
          }
        }
      }
      ((Activity)mContext).runOnUiThread(new Runnable(){
        @Override public void run(){
          mFilteredTags=filteredTags;
          notifyDataSetChanged();
        }
      }
);
    }
  }
).start();
}","public void filter(final String text){
  final List<TermModel> allTags=mAllTags;
  new Thread(new Runnable(){
    @Override public void run(){
      final List<TermModel> filteredTags=new ArrayList<>();
      if (TextUtils.isEmpty(text)) {
        filteredTags.addAll(allTags);
      }
 else {
        for (        TermModel tag : allTags) {
          if (tag.getName().toLowerCase(Locale.getDefault()).contains(text.toLowerCase(Locale.getDefault()))) {
            filteredTags.add(tag);
          }
        }
      }
      ((Activity)mContext).runOnUiThread(new Runnable(){
        @Override public void run(){
          mFilteredTags=filteredTags;
          notifyDataSetChanged();
        }
      }
);
    }
  }
).start();
}",0.9703808180535968
13502,"private void retrieveSiteDomain(){
  Bundle args=getArguments();
  mSiteDomain=getString(R.string.wordpress_dot_com).toLowerCase();
  if (args != null) {
    mSiteDomain=args.getString(SITE_DOMAIN_KEY);
  }
}","private void retrieveSiteDomain(){
  Bundle args=getArguments();
  mSiteDomain=getString(R.string.wordpress_dot_com).toLowerCase(Locale.ROOT);
  if (args != null) {
    mSiteDomain=args.getString(SITE_DOMAIN_KEY);
  }
}",0.97423887587822
13503,"private boolean isUrlConfirmationTextValid(){
  String confirmationText=mUrlConfirmation.getText().toString().trim().toLowerCase();
  String hintText=mSiteDomain.toLowerCase();
  return confirmationText.equals(hintText);
}","private boolean isUrlConfirmationTextValid(){
  String confirmationText=mUrlConfirmation.getText().toString().trim().toLowerCase(Locale.ROOT);
  String hintText=mSiteDomain.toLowerCase(Locale.ROOT);
  return confirmationText.equals(hintText);
}",0.9527896995708156
13504,"@Override protected void showDialog(Bundle state){
  Context context=getContext();
  Resources res=context.getResources();
  AlertDialog.Builder builder=new AlertDialog.Builder(context,R.style.Calypso_AlertDialog);
  mWhichButtonClicked=DialogInterface.BUTTON_NEGATIVE;
  builder.setPositiveButton(android.R.string.ok,this);
  builder.setNegativeButton(res.getString(R.string.cancel).toUpperCase(),this);
  if (mDetails == null) {
    mDetails=new String[getEntries() == null ? 1 : getEntries().length];
  }
  mListAdapter=new DetailListAdapter(getContext(),R.layout.detail_list_preference,mDetails);
  mStartingValue=getValue();
  mSelectedIndex=findIndexOfValue(mStartingValue);
  builder.setSingleChoiceItems(mListAdapter,mSelectedIndex,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      mSelectedIndex=which;
    }
  }
);
  View titleView=View.inflate(getContext(),R.layout.detail_list_preference_title,null);
  if (titleView != null) {
    TextView titleText=(TextView)titleView.findViewById(R.id.title);
    if (titleText != null) {
      titleText.setText(getTitle());
    }
    builder.setCustomTitle(titleView);
  }
 else {
    builder.setTitle(getTitle());
  }
  if ((mDialog=builder.create()) == null) {
    return;
  }
  if (state != null) {
    mDialog.onRestoreInstanceState(state);
  }
  mDialog.setOnDismissListener(this);
  mDialog.show();
  ListView listView=mDialog.getListView();
  Button positive=mDialog.getButton(DialogInterface.BUTTON_POSITIVE);
  Button negative=mDialog.getButton(DialogInterface.BUTTON_NEGATIVE);
  if (listView != null) {
    listView.setDividerHeight(0);
    listView.setClipToPadding(true);
    listView.setPadding(0,0,0,res.getDimensionPixelSize(R.dimen.site_settings_divider_height));
  }
  if (positive != null) {
    positive.setTextColor(res.getColor(R.color.blue_medium));
  }
  if (negative != null) {
    negative.setTextColor(res.getColor(R.color.blue_medium));
  }
}","@Override protected void showDialog(Bundle state){
  Context context=getContext();
  Resources res=context.getResources();
  AlertDialog.Builder builder=new AlertDialog.Builder(context,R.style.Calypso_AlertDialog);
  mWhichButtonClicked=DialogInterface.BUTTON_NEGATIVE;
  builder.setPositiveButton(android.R.string.ok,this);
  builder.setNegativeButton(res.getString(R.string.cancel).toUpperCase(Locale.getDefault()),this);
  if (mDetails == null) {
    mDetails=new String[getEntries() == null ? 1 : getEntries().length];
  }
  mListAdapter=new DetailListAdapter(getContext(),R.layout.detail_list_preference,mDetails);
  mStartingValue=getValue();
  mSelectedIndex=findIndexOfValue(mStartingValue);
  builder.setSingleChoiceItems(mListAdapter,mSelectedIndex,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      mSelectedIndex=which;
    }
  }
);
  View titleView=View.inflate(getContext(),R.layout.detail_list_preference_title,null);
  if (titleView != null) {
    TextView titleText=(TextView)titleView.findViewById(R.id.title);
    if (titleText != null) {
      titleText.setText(getTitle());
    }
    builder.setCustomTitle(titleView);
  }
 else {
    builder.setTitle(getTitle());
  }
  if ((mDialog=builder.create()) == null) {
    return;
  }
  if (state != null) {
    mDialog.onRestoreInstanceState(state);
  }
  mDialog.setOnDismissListener(this);
  mDialog.show();
  ListView listView=mDialog.getListView();
  Button positive=mDialog.getButton(DialogInterface.BUTTON_POSITIVE);
  Button negative=mDialog.getButton(DialogInterface.BUTTON_NEGATIVE);
  if (listView != null) {
    listView.setDividerHeight(0);
    listView.setClipToPadding(true);
    listView.setPadding(0,0,0,res.getDimensionPixelSize(R.dimen.site_settings_divider_height));
  }
  if (positive != null) {
    positive.setTextColor(res.getColor(R.color.blue_medium));
  }
  if (negative != null) {
    negative.setTextColor(res.getColor(R.color.blue_medium));
  }
}",0.9952321204516938
13505,"public void setSharingButtonStyle(String sharingButtonStyle){
  if (TextUtils.isEmpty(sharingButtonStyle)) {
    mSettings.sharingButtonStyle=STANDARD_SHARING_BUTTON_STYLE;
  }
 else {
    mSettings.sharingButtonStyle=sharingButtonStyle.toLowerCase();
  }
}","public void setSharingButtonStyle(String sharingButtonStyle){
  if (TextUtils.isEmpty(sharingButtonStyle)) {
    mSettings.sharingButtonStyle=STANDARD_SHARING_BUTTON_STYLE;
  }
 else {
    mSettings.sharingButtonStyle=sharingButtonStyle.toLowerCase(Locale.ROOT);
  }
}",0.979047619047619
13506,"/** 
 * Sets the default post format.
 * @param format if null or empty default format is set to {@link SiteSettingsInterface#STANDARD_POST_FORMAT_KEY}
 */
public void setDefaultFormat(String format){
  if (TextUtils.isEmpty(format)) {
    mSettings.defaultPostFormat=STANDARD_POST_FORMAT_KEY;
  }
 else {
    mSettings.defaultPostFormat=format.toLowerCase();
  }
}","/** 
 * Sets the default post format.
 * @param format if null or empty default format is set to {@link SiteSettingsInterface#STANDARD_POST_FORMAT_KEY}
 */
public void setDefaultFormat(String format){
  if (TextUtils.isEmpty(format)) {
    mSettings.defaultPostFormat=STANDARD_POST_FORMAT_KEY;
  }
 else {
    mSettings.defaultPostFormat=format.toLowerCase(Locale.ROOT);
  }
}",0.9851551956815114
13507,"public void filter(final String text){
  mFilteredTags.clear();
  if (TextUtils.isEmpty(text)) {
    mFilteredTags.addAll(mAllTags);
  }
 else {
    for (    TermModel tag : mAllTags) {
      if (tag.getName().toLowerCase().contains(text.toLowerCase())) {
        mFilteredTags.add(tag);
      }
    }
  }
  notifyDataSetChanged();
  showEmptyView(mFilteredTags.isEmpty());
}","public void filter(final String text){
  mFilteredTags.clear();
  if (TextUtils.isEmpty(text)) {
    mFilteredTags.addAll(mAllTags);
  }
 else {
    for (    TermModel tag : mAllTags) {
      if (tag.getName().toLowerCase(Locale.getDefault()).contains(text.toLowerCase(Locale.getDefault()))) {
        mFilteredTags.add(tag);
      }
    }
  }
  notifyDataSetChanged();
  showEmptyView(mFilteredTags.isEmpty());
}",0.9467005076142132
13508,"private void loadImage(String mediaUri){
  if (TextUtils.isEmpty(mediaUri)) {
    showLoadingError();
    return;
  }
  mImageView.setVisibility(View.VISIBLE);
  int width=DisplayUtils.getDisplayPixelWidth(getActivity());
  int height=DisplayUtils.getDisplayPixelHeight(getActivity());
  int size=Math.max(width,height);
  if (mediaUri.startsWith(""String_Node_Str"")) {
    showProgress(true);
    String imageUrl=mediaUri;
    if (SiteUtils.isPhotonCapable(mSite)) {
      imageUrl=PhotonUtils.getPhotonImageUrl(mediaUri,size,0);
    }
    mImageLoader.get(imageUrl,new ImageLoader.ImageListener(){
      @Override public void onResponse(      ImageLoader.ImageContainer response,      boolean isImmediate){
        if (isAdded() && response.getBitmap() != null) {
          showProgress(false);
          setBitmap(response.getBitmap());
        }
      }
      @Override public void onErrorResponse(      VolleyError error){
        AppLog.e(AppLog.T.MEDIA,error);
        if (isAdded()) {
          showProgress(false);
          showLoadingError();
        }
      }
    }
,size,0);
  }
 else {
    new LocalImageTask(mediaUri,size).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}","private void loadImage(String mediaUri){
  if (TextUtils.isEmpty(mediaUri)) {
    showLoadingError();
    return;
  }
  mImageView.setVisibility(View.VISIBLE);
  int width=DisplayUtils.getDisplayPixelWidth(getActivity());
  int height=DisplayUtils.getDisplayPixelHeight(getActivity());
  int size=Math.max(width,height);
  if (mediaUri.startsWith(""String_Node_Str"")) {
    showProgress(true);
    String imageUrl=mediaUri;
    if (mSite == null || SiteUtils.isPhotonCapable(mSite)) {
      imageUrl=PhotonUtils.getPhotonImageUrl(mediaUri,size,0);
    }
    mImageLoader.get(imageUrl,new ImageLoader.ImageListener(){
      @Override public void onResponse(      ImageLoader.ImageContainer response,      boolean isImmediate){
        if (isAdded() && response.getBitmap() != null) {
          showProgress(false);
          setBitmap(response.getBitmap());
        }
      }
      @Override public void onErrorResponse(      VolleyError error){
        AppLog.e(AppLog.T.MEDIA,error);
        if (isAdded()) {
          showProgress(false);
          showLoadingError();
        }
      }
    }
,size,0);
  }
 else {
    new LocalImageTask(mediaUri,size).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}",0.9929255097794424
13509,"/** 
 * @param site optional site this media is associated with
 * @param media media model
 * @param autoPlay true = play video/audio after fragment is created
 */
public static MediaPreviewFragment newInstance(SiteModel site,MediaModel media,boolean autoPlay){
  Bundle args=new Bundle();
  args.putString(ARG_MEDIA_CONTENT_URI,media.getUrl());
  args.putString(ARG_TITLE,media.getTitle());
  args.putBoolean(ARG_AUTOPLAY,autoPlay);
  if (site != null) {
    args.putSerializable(WordPress.SITE,site);
  }
  if (media.isVideo() && !TextUtils.isEmpty(media.getThumbnailUrl())) {
    args.putString(ARG_VIDEO_THUMB,media.getThumbnailUrl());
  }
  MediaPreviewFragment fragment=new MediaPreviewFragment();
  fragment.setArguments(args);
  return fragment;
}","/** 
 * @param site optional site this media is associated with
 * @param media media model
 * @param autoPlay true = play video/audio after fragment is created
 */
public static MediaPreviewFragment newInstance(@Nullable SiteModel site,@NonNull MediaModel media,boolean autoPlay){
  Bundle args=new Bundle();
  args.putString(ARG_MEDIA_CONTENT_URI,media.getUrl());
  args.putString(ARG_TITLE,media.getTitle());
  args.putBoolean(ARG_AUTOPLAY,autoPlay);
  if (site != null) {
    args.putSerializable(WordPress.SITE,site);
  }
  if (media.isVideo() && !TextUtils.isEmpty(media.getThumbnailUrl())) {
    args.putString(ARG_VIDEO_THUMB,media.getThumbnailUrl());
  }
  MediaPreviewFragment fragment=new MediaPreviewFragment();
  fragment.setArguments(args);
  return fragment;
}",0.9875898105813194
13510,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  View view=inflater.inflate(R.layout.media_grid_fragment,container,false);
  mRecycler=(RecyclerView)view.findViewById(R.id.recycler);
  mRecycler.setHasFixedSize(true);
  int numColumns=MediaGridAdapter.getColumnCount(getActivity());
  mGridManager=new GridLayoutManager(getActivity(),numColumns);
  mRecycler.setLayoutManager(mGridManager);
  mRecycler.setAdapter(getAdapter());
  final int minDistance=WPMediaUtils.getFlingDistanceToDisableThumbLoading(getActivity());
  mRecycler.setOnFlingListener(new RecyclerView.OnFlingListener(){
    @Override public boolean onFling(    int velocityX,    int velocityY){
      if (Math.abs(velocityY) > minDistance) {
        getAdapter().setLoadThumbnails(false);
      }
      return false;
    }
  }
);
  mRecycler.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == RecyclerView.SCROLL_STATE_IDLE) {
        getAdapter().setLoadThumbnails(true);
      }
    }
  }
);
  mEmptyView=(TextView)view.findViewById(R.id.empty_view);
  mSwipeToRefreshHelper=buildSwipeToRefreshHelper((CustomSwipeRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!isAdded()) {
        return;
      }
      if (!NetworkUtils.checkConnection(getActivity())) {
        updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
        setRefreshing(false);
        return;
      }
      fetchMediaList(false);
    }
  }
);
  if (savedInstanceState != null) {
    restoreState(savedInstanceState);
  }
  setFilter(mFilter);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  View view=inflater.inflate(R.layout.media_grid_fragment,container,false);
  mRecycler=view.findViewById(R.id.recycler);
  mRecycler.setHasFixedSize(true);
  int numColumns=MediaGridAdapter.getColumnCount(getActivity());
  mGridManager=new GridLayoutManager(getActivity(),numColumns);
  mRecycler.setLayoutManager(mGridManager);
  mRecycler.setAdapter(getAdapter());
  final int minDistance=WPMediaUtils.getFlingDistanceToDisableThumbLoading(getActivity());
  mRecycler.setOnFlingListener(new RecyclerView.OnFlingListener(){
    @Override public boolean onFling(    int velocityX,    int velocityY){
      if (Math.abs(velocityY) > minDistance) {
        getAdapter().setLoadThumbnails(false);
      }
      return false;
    }
  }
);
  mRecycler.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == RecyclerView.SCROLL_STATE_IDLE) {
        getAdapter().setLoadThumbnails(true);
      }
    }
  }
);
  mEmptyView=(TextView)view.findViewById(R.id.empty_view);
  mRecycler.setEmptyView(mEmptyView);
  mSwipeToRefreshHelper=buildSwipeToRefreshHelper((CustomSwipeRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
    @Override public void onRefreshStarted(){
      if (!isAdded()) {
        return;
      }
      if (!NetworkUtils.checkConnection(getActivity())) {
        updateEmptyView(EmptyViewMessageType.NETWORK_ERROR);
        setRefreshing(false);
        return;
      }
      fetchMediaList(false);
    }
  }
);
  if (savedInstanceState != null) {
    restoreState(savedInstanceState);
  }
  setFilter(mFilter);
  return view;
}",0.9862651875330164
13511,"@Override protected WebViewClient createWebViewClient(List<String> allowedURL){
  mWebViewClient=new JetpackConnectionWebViewClient(this,mAccountStore,(SiteModel)getIntent().getSerializableExtra(WordPress.SITE));
  return mWebViewClient;
}","@Override protected WebViewClient createWebViewClient(List<String> allowedURL){
  mWebViewClient=new JetpackConnectionWebViewClient(this,mAccountStore,mSite);
  return mWebViewClient;
}",0.8679245283018868
13512,"public void cancel(){
  if (!flowFinished) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.STATS_CANCELED_INSTALL_JETPACK);
  }
}","public void cancel(){
  if (!mFlowFinished) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.STATS_CANCELED_INSTALL_JETPACK);
  }
}",0.9886792452830188
13513,"public void onRestoreInstanceState(Bundle savedInstanceState){
  redirectPage=savedInstanceState.getString(REDIRECT_PAGE_STATE_ITEM);
  flowFinished=savedInstanceState.getBoolean(FLOW_FINISHED);
}","public void onRestoreInstanceState(Bundle savedInstanceState){
  mRedirectPage=savedInstanceState.getString(REDIRECT_PAGE_STATE_ITEM);
  mFlowFinished=savedInstanceState.getBoolean(FLOW_FINISHED);
}",0.9847715736040608
13514,"void activityResult(Context context,int requestCode){
  if (requestCode == JETPACK_LOGIN) {
    JetpackConnectionWebViewActivity.openJetpackConnectionFlow(context,redirectPage,mSiteModel);
    activity.finish();
  }
}","void activityResult(Context context,int requestCode){
  if (requestCode == JETPACK_LOGIN) {
    JetpackConnectionWebViewActivity.openJetpackConnectionFlow(context,mRedirectPage,mSiteModel);
    mActivity.finish();
  }
}",0.9862385321100916
13515,"@Override public boolean shouldOverrideUrlLoading(WebView view,String stringUrl){
  try {
    final Uri url=Uri.parse(stringUrl);
    final String loadedHost=url.getHost();
    if (loadedHost == null) {
      return false;
    }
    final String loadedPath=url.getPath();
    final String currentSiteHost=Uri.parse(mSiteModel.getUrl()).getHost();
    if (loadedHost.equals(currentSiteHost) && loadedPath != null && loadedPath.contains(LOGIN_PATH) && stringUrl.contains(REDIRECT_PARAMETER)) {
      redirectPage=extractRedirect(stringUrl);
      loginToWPCom(view,mSiteModel);
      return true;
    }
 else     if (loadedHost.equals(currentSiteHost) && loadedPath != null && loadedPath.contains(ADMIN_PATH) && redirectPage != null) {
      view.loadUrl(redirectPage);
      redirectPage=null;
      return true;
    }
 else     if (loadedHost.equals(WORDPRESS_COM_HOST) && loadedPath != null && (loadedPath.equals(WPCOM_LOG_IN_PATH_1) || loadedPath.equals(WPCOM_LOG_IN_PATH_2)) && stringUrl.contains(REDIRECT_PARAMETER)) {
      redirectPage=extractRedirect(stringUrl);
      Intent loginIntent=new Intent(activity,LoginActivity.class);
      LoginMode.JETPACK_STATS.putInto(loginIntent);
      activity.startActivityForResult(loginIntent,JETPACK_LOGIN);
      return true;
    }
 else     if (loadedHost.equals(JETPACK_DEEPLINK_URI.getHost()) && url.getScheme().equals(JETPACK_DEEPLINK_URI.getScheme())) {
      Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setData(url);
      intent.putExtra(SITE,mSiteModel);
      activity.startActivity(intent);
      activity.finish();
      flowFinished=true;
      AnalyticsTracker.track(AnalyticsTracker.Stat.STATS_COMPLETED_INSTALL_JETPACK);
      return true;
    }
  }
 catch (  UnsupportedEncodingException e) {
    AppLog.e(AppLog.T.API,""String_Node_Str"",e);
  }
  return false;
}","@Override public boolean shouldOverrideUrlLoading(WebView view,String stringUrl){
  try {
    final Uri url=Uri.parse(stringUrl);
    final String loadedHost=url.getHost();
    if (loadedHost == null) {
      return false;
    }
    final String loadedPath=url.getPath();
    final String currentSiteHost=Uri.parse(mSiteModel.getUrl()).getHost();
    if (loadedHost.equals(currentSiteHost) && loadedPath != null && loadedPath.contains(LOGIN_PATH) && stringUrl.contains(REDIRECT_PARAMETER)) {
      mRedirectPage=extractRedirect(stringUrl);
      loginToWPCom(view,mSiteModel);
      return true;
    }
 else     if (loadedHost.equals(currentSiteHost) && loadedPath != null && loadedPath.contains(ADMIN_PATH) && mRedirectPage != null) {
      view.loadUrl(mRedirectPage);
      mRedirectPage=null;
      return true;
    }
 else     if (loadedHost.equals(WORDPRESS_COM_HOST) && loadedPath != null && (loadedPath.equals(WPCOM_LOG_IN_PATH_1) || loadedPath.equals(WPCOM_LOG_IN_PATH_2)) && stringUrl.contains(REDIRECT_PARAMETER)) {
      mRedirectPage=extractRedirect(stringUrl);
      Intent loginIntent=new Intent(mActivity,LoginActivity.class);
      LoginMode.JETPACK_STATS.putInto(loginIntent);
      mActivity.startActivityForResult(loginIntent,JETPACK_LOGIN);
      return true;
    }
 else     if (loadedHost.equals(JETPACK_DEEPLINK_URI.getHost()) && url.getScheme().equals(JETPACK_DEEPLINK_URI.getScheme())) {
      Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setData(url);
      intent.putExtra(SITE,mSiteModel);
      mActivity.startActivity(intent);
      mActivity.finish();
      mFlowFinished=true;
      AnalyticsTracker.track(AnalyticsTracker.Stat.STATS_COMPLETED_INSTALL_JETPACK);
      return true;
    }
  }
 catch (  UnsupportedEncodingException e) {
    AppLog.e(AppLog.T.API,""String_Node_Str"",e);
  }
  return false;
}",0.9810400866738896
13516,"public void onSaveInstanceState(Bundle outState){
  outState.putString(REDIRECT_PAGE_STATE_ITEM,redirectPage);
  outState.putBoolean(FLOW_FINISHED,flowFinished);
}","public void onSaveInstanceState(Bundle outState){
  outState.putString(REDIRECT_PAGE_STATE_ITEM,mRedirectPage);
  outState.putBoolean(FLOW_FINISHED,mFlowFinished);
}",0.9817073170731708
13517,"JetpackConnectionWebViewClient(Activity activity,AccountStore accountStore,SiteModel mSiteModel){
  this.activity=activity;
  this.accountStore=accountStore;
  this.mSiteModel=mSiteModel;
}","JetpackConnectionWebViewClient(Activity activity,AccountStore accountStore,SiteModel siteModel){
  mActivity=activity;
  mAccountStore=accountStore;
  mSiteModel=siteModel;
}",0.9256198347107438
13518,"private void loginToWPCom(WebView view,SiteModel site){
  String authenticationURL=WPWebViewActivity.getSiteLoginUrl(site);
  String postData=WPWebViewActivity.getAuthenticationPostData(authenticationURL,redirectPage,site.getUsername(),site.getPassword(),accountStore.getAccessToken());
  view.postUrl(authenticationURL,postData.getBytes());
}","private void loginToWPCom(WebView view,SiteModel site){
  String authenticationURL=WPWebViewActivity.getSiteLoginUrl(site);
  String postData=WPWebViewActivity.getAuthenticationPostData(authenticationURL,mRedirectPage,site.getUsername(),site.getPassword(),mAccountStore.getAccessToken());
  view.postUrl(authenticationURL,postData.getBytes());
}",0.9912790697674418
13519,"@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  holder.imageView.setTag(null);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.fileContainer.setVisibility(View.GONE);
    holder.imageView.setImageUrl(null,WPNetworkImageView.ImageType.PHOTO);
  }
 else   if (isImage) {
    holder.fileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      loadLocalImage(media.getFilePath(),holder.imageView);
    }
 else {
      holder.imageView.setImageUrl(getBestImageUrl(media),WPNetworkImageView.ImageType.PHOTO);
    }
  }
 else   if (media.isVideo()) {
    holder.fileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.imageView);
  }
 else {
    holder.imageView.setImageDrawable(null);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.fileContainer.setVisibility(View.VISIBLE);
    holder.titleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.fileTypeView.setText(fileExtension.toUpperCase());
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.fileTypeImageView.setImageResource(placeholderResId);
  }
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.selectionCountTextView.setVisibility(View.VISIBLE);
    holder.selectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.selectionCountTextView.setText(Integer.toString(count));
    }
 else {
      holder.selectionCountTextView.setText(null);
    }
  }
 else {
    holder.selectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.imageView.getScaleX() != scale) {
    holder.imageView.setScaleX(scale);
    holder.imageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.stateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.progressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.retryDeleteContainer.setVisibility(View.VISIBLE);
      holder.imgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.retryDeleteContainer.setVisibility(View.GONE);
    }
    holder.stateTextView.setText(getLabelForMediaUploadState(state));
    holder.videoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.stateContainer.setVisibility(View.GONE);
    holder.stateContainer.setOnClickListener(null);
    holder.videoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}","@Override public void onBindViewHolder(GridViewHolder holder,int position){
  if (!isValidPosition(position)) {
    return;
  }
  MediaModel media=mMediaList.get(position);
  holder.imageView.setTag(null);
  String strState=media.getUploadState();
  MediaUploadState state=MediaUploadState.fromString(strState);
  boolean isLocalFile=MediaUtils.isLocalFile(strState) && !TextUtils.isEmpty(media.getFilePath());
  boolean isSelected=isItemSelected(media.getId());
  boolean canSelect=canSelectPosition(position);
  boolean isImage=media.getMimeType() != null && media.getMimeType().startsWith(""String_Node_Str"");
  if (!mLoadThumbnails) {
    holder.fileContainer.setVisibility(View.GONE);
    holder.imageView.setImageUrl(null,WPNetworkImageView.ImageType.PHOTO);
  }
 else   if (isImage) {
    holder.fileContainer.setVisibility(View.GONE);
    if (isLocalFile) {
      loadLocalImage(media.getFilePath(),holder.imageView);
    }
 else {
      holder.imageView.setImageUrl(getBestImageUrl(media),WPNetworkImageView.ImageType.PHOTO);
    }
  }
 else   if (media.isVideo()) {
    holder.fileContainer.setVisibility(View.GONE);
    loadVideoThumbnail(media,holder.imageView);
  }
 else {
    holder.imageView.setImageDrawable(null);
    String fileName=media.getFileName();
    String title=media.getTitle();
    String fileExtension=MediaUtils.getExtensionForMimeType(media.getMimeType());
    holder.fileContainer.setVisibility(View.VISIBLE);
    holder.titleView.setText(TextUtils.isEmpty(title) ? fileName : title);
    holder.fileTypeView.setText(fileExtension.toUpperCase());
    int placeholderResId=WPMediaUtils.getPlaceholder(fileName);
    holder.fileTypeImageView.setImageResource(placeholderResId);
  }
  if (mBrowserType.canMultiselect() && canSelect) {
    holder.selectionCountContainer.setVisibility(View.VISIBLE);
    holder.selectionCountTextView.setVisibility(View.VISIBLE);
    holder.selectionCountTextView.setSelected(isSelected);
    if (isSelected) {
      int count=mSelectedItems.indexOf(media.getId()) + 1;
      holder.selectionCountTextView.setText(Integer.toString(count));
    }
 else {
      holder.selectionCountTextView.setText(null);
    }
  }
 else {
    holder.selectionCountContainer.setVisibility(View.GONE);
    holder.selectionCountTextView.setVisibility(View.GONE);
  }
  float scale=isSelected ? SCALE_SELECTED : SCALE_NORMAL;
  if (holder.imageView.getScaleX() != scale) {
    holder.imageView.setScaleX(scale);
    holder.imageView.setScaleY(scale);
  }
  if (state != MediaUploadState.UPLOADED) {
    holder.stateContainer.setVisibility(View.VISIBLE);
    boolean showProgress=state == MediaUploadState.UPLOADING || state == MediaUploadState.DELETING;
    holder.progressUpload.setVisibility(showProgress ? View.VISIBLE : View.GONE);
    if (state == MediaUploadState.FAILED || state == MediaUploadState.QUEUED) {
      holder.retryDeleteContainer.setVisibility(View.VISIBLE);
      holder.imgRetry.setVisibility(state == MediaUploadState.FAILED ? View.VISIBLE : View.GONE);
    }
 else {
      holder.retryDeleteContainer.setVisibility(View.GONE);
    }
    holder.stateTextView.setText(getLabelForMediaUploadState(state));
    holder.videoOverlayContainer.setVisibility(View.GONE);
  }
 else {
    holder.stateContainer.setVisibility(View.GONE);
    holder.stateContainer.setOnClickListener(null);
    holder.videoOverlayContainer.setVisibility(media.isVideo() ? View.VISIBLE : View.GONE);
  }
  if (position == getItemCount() - 1 && !mHasRetrievedAll && mCallback != null) {
    mCallback.onAdapterFetchMoreData();
  }
}",0.9798830075617064
13520,"public WPLinearLayoutSizeBound(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.WPLinearLayoutSizeBound);
  mMaxWidth=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxWidth,Integer.MAX_VALUE);
  mMaxHeight=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxHeight,Integer.MAX_VALUE);
}","public WPLinearLayoutSizeBound(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.WPLinearLayoutSizeBound);
  mMaxWidth=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxWidth,Integer.MAX_VALUE);
  mMaxHeight=a.getDimensionPixelSize(R.styleable.WPLinearLayoutSizeBound_maxHeight,Integer.MAX_VALUE);
  a.recycle();
}",0.981226533166458
13521,"private static Intent preparePictureLibraryIntent(String title,boolean multiSelect){
  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
  intent.setType(""String_Node_Str"");
  if (multiSelect) {
    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);
  }
  return Intent.createChooser(intent,title);
}","private static Intent preparePictureLibraryIntent(String title,boolean multiSelect){
  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
  intent.setType(""String_Node_Str"");
  if (multiSelect) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);
    }
  }
  return Intent.createChooser(intent,title);
}",0.8846715328467153
13522,"private static Intent prepareVideoLibraryIntent(Context context,boolean multiSelect){
  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
  intent.setType(""String_Node_Str"");
  if (multiSelect) {
    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);
  }
  return Intent.createChooser(intent,context.getString(R.string.pick_video));
}","private static Intent prepareVideoLibraryIntent(Context context,boolean multiSelect){
  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
  intent.setType(""String_Node_Str"");
  if (multiSelect) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);
    }
  }
  return Intent.createChooser(intent,context.getString(R.string.pick_video));
}",0.8950863213811421
13523,"@Override protected void onDraw(Canvas canvas){
  int[] selectorIndices=getIndices();
  setIndices(new int[0]);
  setIndices(selectorIndices);
  setDisplayValues();
  float elementHeight=getSelectorElementHeight();
  float x=((getRight() - getLeft()) / 2.0f);
  float y=getScrollOffset();
  Paint paint=mInputView.getPaint();
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setColor(getResources().getColor(R.color.blue_medium));
  int alpha=isEnabled() ? 255 : 96;
  paint.setAlpha(alpha);
  mPaint.setAlpha(alpha);
  int offset=getResources().getDimensionPixelSize(R.dimen.margin_medium);
  for (int i=0; i < DISPLAY_COUNT; ++i) {
    String scrollSelectorValue;
    if (mFormatter != null) {
      scrollSelectorValue=mFormatter.format(mDisplayValues[i]);
    }
 else {
      scrollSelectorValue=String.valueOf(mDisplayValues[i]);
    }
    if (i == MIDDLE_INDEX) {
      canvas.drawText(scrollSelectorValue,x,y - ((paint.descent() + paint.ascent()) / 2) - offset,paint);
    }
 else {
      canvas.drawText(scrollSelectorValue,x,y - ((mPaint.descent() + mPaint.ascent()) / 2) - offset,mPaint);
    }
    y+=elementHeight;
  }
}","@Override protected void onDraw(Canvas canvas){
  int[] selectorIndices=getIndices();
  setIndices(mEmptyIndices);
  setIndices(selectorIndices);
  setDisplayValues();
  float elementHeight=getSelectorElementHeight();
  float x=((getRight() - getLeft()) / 2.0f);
  float y=getScrollOffset();
  Paint paint=mInputView.getPaint();
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setColor(getResources().getColor(R.color.blue_medium));
  int alpha=isEnabled() ? 255 : 96;
  paint.setAlpha(alpha);
  mPaint.setAlpha(alpha);
  int offset=getResources().getDimensionPixelSize(R.dimen.margin_medium);
  for (int i=0; i < DISPLAY_COUNT; ++i) {
    String scrollSelectorValue;
    if (mFormatter != null) {
      scrollSelectorValue=mFormatter.format(mDisplayValues[i]);
    }
 else {
      scrollSelectorValue=String.valueOf(mDisplayValues[i]);
    }
    if (i == MIDDLE_INDEX) {
      canvas.drawText(scrollSelectorValue,x,y - ((paint.descent() + paint.ascent()) / 2) - offset,paint);
    }
 else {
      canvas.drawText(scrollSelectorValue,x,y - ((mPaint.descent() + mPaint.ascent()) / 2) - offset,mPaint);
    }
    y+=elementHeight;
  }
}",0.989863375936536
13524,"String generateNewAnonID(){
  String uuid=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
  AppLog.d(AppLog.T.STATS,""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ uuid);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  final SharedPreferences.Editor editor=preferences.edit();
  editor.putString(getAnonIdPrefKey(),uuid);
  editor.commit();
  mAnonID=uuid;
  return uuid;
}","String generateNewAnonID(){
  String uuid=UUID.randomUUID().toString().replace(""String_Node_Str"",""String_Node_Str"");
  AppLog.d(AppLog.T.STATS,""String_Node_Str"" + this.getClass().getSimpleName() + ""String_Node_Str""+ uuid);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  final SharedPreferences.Editor editor=preferences.edit();
  editor.putString(getAnonIdPrefKey(),uuid);
  editor.apply();
  mAnonID=uuid;
  return uuid;
}",0.9882352941176472
13525,"void clearAnonID(){
  mAnonID=null;
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  if (preferences.contains(getAnonIdPrefKey())) {
    final SharedPreferences.Editor editor=preferences.edit();
    editor.remove(getAnonIdPrefKey());
    editor.commit();
  }
}","void clearAnonID(){
  mAnonID=null;
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  if (preferences.contains(getAnonIdPrefKey())) {
    final SharedPreferences.Editor editor=preferences.edit();
    editor.remove(getAnonIdPrefKey());
    editor.apply();
  }
}",0.9817578772802652
13526,"@SuppressLint(""String_Node_Str"") @Override protected void setUp() throws Exception {
  super.setUp();
  mInstrumentation=getInstrumentation();
  Activity activity=getActivity();
  mSetUpLatch=new CountDownLatch(1);
  mDomLoadedCallbackLatch=new CountDownLatch(1);
  mSetUpLatch.countDown();
  String htmlEditor=Utils.getHtmlFromFile(activity,""String_Node_Str"");
  if (htmlEditor != null) {
    htmlEditor=htmlEditor.replace(""String_Node_Str"",getActivity().getString(R.string.visual_editor));
    htmlEditor=htmlEditor.replace(""String_Node_Str"",String.valueOf(Build.VERSION.SDK_INT));
    htmlEditor=htmlEditor.replace(""String_Node_Str"",""String_Node_Str"" + getActivity().getString(R.string.edit) + ""String_Node_Str""+ ""String_Node_Str""+ getActivity().getString(R.string.uploading)+ ""String_Node_Str""+ ""String_Node_Str""+ getActivity().getString(R.string.uploading_gallery_placeholder)+ ""String_Node_Str"");
  }
  final String finalHtmlEditor=htmlEditor;
  activity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView=new EditorWebView(mInstrumentation.getContext(),null);
      if (Build.VERSION.SDK_INT < 17) {
        mWebView.setJsCallbackReceiver(new MockJsCallbackReceiver(new EditorFragmentForTests()));
      }
 else {
        mWebView.addJavascriptInterface(new MockJsCallbackReceiver(new EditorFragmentForTests()),JS_CALLBACK_HANDLER);
      }
      mWebView.loadDataWithBaseURL(""String_Node_Str"",finalHtmlEditor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      mSetUpLatch.countDown();
    }
  }
);
}","@Override protected void setUp() throws Exception {
  super.setUp();
  mInstrumentation=getInstrumentation();
  Activity activity=getActivity();
  mSetUpLatch=new CountDownLatch(1);
  mDomLoadedCallbackLatch=new CountDownLatch(1);
  mSetUpLatch.countDown();
  String htmlEditor=Utils.getHtmlFromFile(activity,""String_Node_Str"");
  if (htmlEditor != null) {
    htmlEditor=htmlEditor.replace(""String_Node_Str"",getActivity().getString(R.string.visual_editor));
    htmlEditor=htmlEditor.replace(""String_Node_Str"",String.valueOf(Build.VERSION.SDK_INT));
    htmlEditor=htmlEditor.replace(""String_Node_Str"",""String_Node_Str"" + getActivity().getString(R.string.edit) + ""String_Node_Str""+ ""String_Node_Str""+ getActivity().getString(R.string.uploading)+ ""String_Node_Str""+ ""String_Node_Str""+ getActivity().getString(R.string.uploading_gallery_placeholder)+ ""String_Node_Str"");
  }
  final String finalHtmlEditor=htmlEditor;
  activity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView=new EditorWebView(mInstrumentation.getContext(),null);
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
        mWebView.setJsCallbackReceiver(new MockJsCallbackReceiver(new EditorFragmentForTests()));
      }
 else {
        mWebView.addJavascriptInterface(new MockJsCallbackReceiver(new EditorFragmentForTests()),JS_CALLBACK_HANDLER);
      }
      mWebView.loadDataWithBaseURL(""String_Node_Str"",finalHtmlEditor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      mSetUpLatch.countDown();
    }
  }
);
}",0.9783101327290386
13527,"@Override public void run(){
  mWebView=new EditorWebView(mInstrumentation.getContext(),null);
  if (Build.VERSION.SDK_INT < 17) {
    mWebView.setJsCallbackReceiver(new MockJsCallbackReceiver(new EditorFragmentForTests()));
  }
 else {
    mWebView.addJavascriptInterface(new MockJsCallbackReceiver(new EditorFragmentForTests()),JS_CALLBACK_HANDLER);
  }
  mWebView.loadDataWithBaseURL(""String_Node_Str"",finalHtmlEditor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  mSetUpLatch.countDown();
}","@Override public void run(){
  mWebView=new EditorWebView(mInstrumentation.getContext(),null);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
    mWebView.setJsCallbackReceiver(new MockJsCallbackReceiver(new EditorFragmentForTests()));
  }
 else {
    mWebView.addJavascriptInterface(new MockJsCallbackReceiver(new EditorFragmentForTests()),JS_CALLBACK_HANDLER);
  }
  mWebView.loadDataWithBaseURL(""String_Node_Str"",finalHtmlEditor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  mSetUpLatch.countDown();
}",0.9673704414587332
13528,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginUpdated(OnSitePluginUpdated event){
  if (isFinishing())   return;
  mIsUpdatingPlugin=false;
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type);
    refreshPluginVersionViews();
    showUpdateFailedSnackbar();
    return;
  }
  refreshSitePluginFromStore();
  refreshViews();
  showSuccessfulUpdateSnackbar();
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_UPDATED,mSite);
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginUpdated(OnSitePluginUpdated event){
  if (isFinishing())   return;
  mIsUpdatingPlugin=false;
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    refreshPluginVersionViews();
    showUpdateFailedSnackbar();
    return;
  }
  refreshSitePluginFromStore();
  refreshViews();
  showSuccessfulUpdateSnackbar();
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_UPDATED,mSite);
}",0.9632286995515696
13529,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginDeleted(OnSitePluginDeleted event){
  if (isFinishing())   return;
  mIsRemovingPlugin=false;
  cancelRemovePluginProgressDialog();
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type);
    String toastMessage=getString(R.string.plugin_updated_failed_detailed,mSitePlugin.getDisplayName(),event.error.message);
    ToastUtils.showToast(this,toastMessage,Duration.LONG);
    return;
  }
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_REMOVED,mSite);
  String toastMessage=getString(R.string.plugin_removed_successfully,mSitePlugin.getDisplayName());
  ToastUtils.showToast(this,toastMessage,Duration.LONG);
  finish();
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginDeleted(OnSitePluginDeleted event){
  if (isFinishing())   return;
  mIsRemovingPlugin=false;
  cancelRemovePluginProgressDialog();
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    String toastMessage=getString(R.string.plugin_updated_failed_detailed,mSitePlugin.getDisplayName(),event.error.message);
    ToastUtils.showToast(this,toastMessage,Duration.LONG);
    return;
  }
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_REMOVED,mSite);
  String toastMessage=getString(R.string.plugin_removed_successfully,mSitePlugin.getDisplayName());
  ToastUtils.showToast(this,toastMessage,Duration.LONG);
  finish();
}",0.9743589743589745
13530,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void OnSitePluginInstalled(OnSitePluginInstalled event){
  if (isFinishing())   return;
  mIsUpdatingPlugin=false;
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type);
    refreshPluginVersionViews();
    showInstallFailedSnackbar();
    return;
  }
  mSitePlugin=event.plugin;
  refreshViews();
  showSuccessfulInstallSnackbar();
  invalidateOptionsMenu();
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_INSTALLED,mSite);
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void OnSitePluginInstalled(OnSitePluginInstalled event){
  if (isFinishing())   return;
  mIsUpdatingPlugin=false;
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    refreshPluginVersionViews();
    showInstallFailedSnackbar();
    return;
  }
  mSitePlugin=event.plugin;
  refreshViews();
  showSuccessfulInstallSnackbar();
  invalidateOptionsMenu();
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.PLUGIN_INSTALLED,mSite);
}",0.9651656754460493
13531,"private void refreshUpdateVersionViews(){
  if (mSitePlugin != null) {
    mInstallButton.setVisibility(View.GONE);
    boolean isUpdateAvailable=PluginUtils.isUpdateAvailable(mSitePlugin,mWPOrgPlugin);
    boolean canUpdate=isUpdateAvailable && !mIsUpdatingPlugin;
    mUpdateButton.setVisibility(canUpdate ? View.VISIBLE : View.GONE);
    findViewById(R.id.plugin_installed).setVisibility(isUpdateAvailable || mIsUpdatingPlugin ? View.GONE : View.VISIBLE);
    if (canUpdate) {
      mUpdateButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          dispatchUpdatePluginAction();
        }
      }
);
    }
  }
 else   if (mWPOrgPlugin != null) {
    mUpdateButton.setVisibility(View.GONE);
    mInstallButton.setVisibility(View.VISIBLE);
    mInstallButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        dispatchInstallPluginAction();
      }
    }
);
  }
  findViewById(R.id.plugin_update_progress_bar).setVisibility(mIsUpdatingPlugin ? View.VISIBLE : View.GONE);
}","private void refreshUpdateVersionViews(){
  if (mSitePlugin != null) {
    mInstallButton.setVisibility(View.GONE);
    boolean isUpdateAvailable=PluginUtils.isUpdateAvailable(mSitePlugin,mWPOrgPlugin);
    boolean canUpdate=isUpdateAvailable && !mIsUpdatingPlugin;
    mUpdateButton.setVisibility(canUpdate ? View.VISIBLE : View.GONE);
    findViewById(R.id.plugin_installed).setVisibility(isUpdateAvailable || mIsUpdatingPlugin ? View.GONE : View.VISIBLE);
    if (canUpdate) {
      mUpdateButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          dispatchUpdatePluginAction();
        }
      }
);
    }
  }
 else   if (mWPOrgPlugin != null) {
    mUpdateButton.setVisibility(View.GONE);
    mInstallButton.setVisibility(mIsUpdatingPlugin ? View.GONE : View.VISIBLE);
    mInstallButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        dispatchInstallPluginAction();
      }
    }
);
  }
  findViewById(R.id.plugin_update_progress_bar).setVisibility(mIsUpdatingPlugin ? View.VISIBLE : View.GONE);
}",0.985546522131888
13532,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginsFetched(PluginStore.OnSitePluginsFetched event){
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type);
    mSitePluginsListStatus.setValue(PluginListStatus.ERROR);
    return;
  }
  mSitePluginsListStatus.setValue(PluginListStatus.DONE);
  reloadSitePlugins();
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginsFetched(PluginStore.OnSitePluginsFetched event){
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    mSitePluginsListStatus.setValue(PluginListStatus.ERROR);
    return;
  }
  mSitePluginsListStatus.setValue(PluginListStatus.DONE);
  reloadSitePlugins();
}",0.9515938606847698
13533,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginDirectoryFetched(PluginStore.OnPluginDirectoryFetched event){
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.type);
    if (event.type == PluginDirectoryType.NEW) {
      mNewPluginsListStatus.setValue(PluginListStatus.ERROR);
    }
 else     if (event.type == PluginDirectoryType.POPULAR) {
      mPopularPluginsListStatus.setValue(PluginListStatus.ERROR);
    }
    return;
  }
  PluginListStatus listStatus=event.canLoadMore ? PluginListStatus.CAN_LOAD_MORE : PluginListStatus.DONE;
switch (event.type) {
case NEW:
    reloadNewPlugins();
  mNewPluginsListStatus.setValue(listStatus);
break;
case POPULAR:
reloadPopularPlugins();
mPopularPluginsListStatus.setValue(listStatus);
break;
}
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginDirectoryFetched(PluginStore.OnPluginDirectoryFetched event){
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.type + ""String_Node_Str""+ event.error.message);
    if (event.type == PluginDirectoryType.NEW) {
      mNewPluginsListStatus.setValue(PluginListStatus.ERROR);
    }
 else     if (event.type == PluginDirectoryType.POPULAR) {
      mPopularPluginsListStatus.setValue(PluginListStatus.ERROR);
    }
    return;
  }
  PluginListStatus listStatus=event.canLoadMore ? PluginListStatus.CAN_LOAD_MORE : PluginListStatus.DONE;
switch (event.type) {
case NEW:
    reloadNewPlugins();
  mNewPluginsListStatus.setValue(listStatus);
break;
case POPULAR:
reloadPopularPlugins();
mPopularPluginsListStatus.setValue(listStatus);
break;
}
}",0.9756387403446228
13534,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginDirectorySearched(PluginStore.OnPluginDirectorySearched event){
  if (mSearchQuery == null || !mSearchQuery.equals(event.searchTerm)) {
    return;
  }
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"");
    mSearchPluginsListStatus.setValue(PluginListStatus.ERROR);
    return;
  }
  mSearchResults.setValue(event.plugins);
  mSearchPluginsListStatus.setValue(PluginListStatus.DONE);
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginDirectorySearched(PluginStore.OnPluginDirectorySearched event){
  if (mSearchQuery == null || !mSearchQuery.equals(event.searchTerm)) {
    return;
  }
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    mSearchPluginsListStatus.setValue(PluginListStatus.ERROR);
    return;
  }
  mSearchResults.setValue(event.plugins);
  mSearchPluginsListStatus.setValue(PluginListStatus.DONE);
}",0.9439252336448598
13535,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(KEY_LOGIN_FINISHED,mLoginFinished);
  outState.putString(KEY_REQUESTED_USERNAME,mRequestedUsername);
  outState.putString(KEY_REQUESTED_PASSWORD,mRequestedPassword);
  outState.putIntegerArrayList(KEY_REQUESTED_PASSWORD,mOldSitesIDs);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(KEY_LOGIN_FINISHED,mLoginFinished);
  outState.putString(KEY_REQUESTED_USERNAME,mRequestedUsername);
  outState.putString(KEY_REQUESTED_PASSWORD,mRequestedPassword);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
}",0.9619181946403385
13536,"/** 
 * Set up both primary toolbar for navigation and search, and secondary toolbar for master switch.
 */
private void setUpToolbars(){
  Toolbar toolbar=findViewById(R.id.toolbar_with_search);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(R.string.notification_settings);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setDisplayShowTitleEnabled(true);
  }
  boolean isMasterChecked=mSharedPreferences.getBoolean(getString(R.string.wp_pref_notifications_master),true);
  hideDisabledView(isMasterChecked);
  mToolbarSwitch=findViewById(R.id.toolbar_with_switch);
  mToolbarSwitch.inflateMenu(R.menu.notifications_settings_secondary);
  mToolbarSwitch.setContentDescription(getString(R.string.notification_settings_switch_desc));
  mToolbarSwitch.setTitle(isMasterChecked ? getString(R.string.notification_settings_master_status_on) : getString(R.string.notification_settings_master_status_off));
  MenuItem menuItem=mToolbarSwitch.getMenu().findItem(R.id.master_switch);
  mMasterSwitch=(SwitchCompat)menuItem.getActionView();
  mToolbarSwitch.setLabelFor(mMasterSwitch.getId());
  mMasterSwitch.setChecked(isMasterChecked);
  mMasterSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      hideDisabledView(isChecked);
      mToolbarSwitch.setContentDescription(getString(R.string.notification_settings_switch_desc));
      mToolbarSwitch.setTitle(isChecked ? getString(R.string.notification_settings_master_status_on) : getString(R.string.notification_settings_master_status_off));
      mSharedPreferences.edit().putBoolean(getString(R.string.wp_pref_notifications_master),isChecked).apply();
      if (isChecked) {
        AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_SETTINGS_APP_NOTIFICATIONS_ENABLED);
      }
 else {
        AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_SETTINGS_APP_NOTIFICATIONS_DISABLED);
      }
    }
  }
);
  mMasterSwitch.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      Toast.makeText(NotificationsSettingsActivity.this,mMasterSwitch.isChecked() ? getString(R.string.notification_settings_master_hint_on) : getString(R.string.notification_settings_master_hint_off),Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}","/** 
 * Set up both primary toolbar for navigation and search, and secondary toolbar for master switch.
 */
private void setUpToolbars(){
  Toolbar toolbar=findViewById(R.id.toolbar_with_search);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(R.string.notification_settings);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setDisplayShowTitleEnabled(true);
  }
  boolean isMasterChecked=mSharedPreferences.getBoolean(getString(R.string.wp_pref_notifications_master),true);
  hideDisabledView(isMasterChecked);
  mToolbarSwitch=findViewById(R.id.toolbar_with_switch);
  mToolbarSwitch.inflateMenu(R.menu.notifications_settings_secondary);
  mToolbarSwitch.setContentDescription(getString(R.string.notification_settings_switch_desc));
  mToolbarSwitch.setTitle(isMasterChecked ? getString(R.string.notification_settings_master_status_on) : getString(R.string.notification_settings_master_status_off));
  MenuItem menuItem=mToolbarSwitch.getMenu().findItem(R.id.master_switch);
  mMasterSwitch=(SwitchCompat)menuItem.getActionView();
  ViewCompat.setLabelFor(mToolbarSwitch,mMasterSwitch.getId());
  mMasterSwitch.setChecked(isMasterChecked);
  mMasterSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      hideDisabledView(isChecked);
      mToolbarSwitch.setContentDescription(getString(R.string.notification_settings_switch_desc));
      mToolbarSwitch.setTitle(isChecked ? getString(R.string.notification_settings_master_status_on) : getString(R.string.notification_settings_master_status_off));
      mSharedPreferences.edit().putBoolean(getString(R.string.wp_pref_notifications_master),isChecked).apply();
      if (isChecked) {
        AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_SETTINGS_APP_NOTIFICATIONS_ENABLED);
      }
 else {
        AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_SETTINGS_APP_NOTIFICATIONS_DISABLED);
      }
    }
  }
);
  mMasterSwitch.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      Toast.makeText(NotificationsSettingsActivity.this,mMasterSwitch.isChecked() ? getString(R.string.notification_settings_master_hint_on) : getString(R.string.notification_settings_master_hint_off),Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}",0.9922418937736224
13537,"private DomainViewHolder(View itemView){
  super(itemView);
  mRadioButton=itemView.findViewById(R.id.radio_button);
  mTextView=itemView.findViewById(R.id.text);
}","private DomainViewHolder(View itemView){
  super(itemView);
  mRadioButton=itemView.findViewById(R.id.radio_button);
}",0.8368794326241135
13538,"private void bindSuggest(final DomainViewHolder domainViewHolder,int position){
  final String suggestion=getItem(position);
  final boolean onSelectedItem=suggestion.equals(mSelectedDomain);
  domainViewHolder.mRadioButton.setChecked(onSelectedItem);
  domainViewHolder.mTextView.setText(suggestion);
  View.OnClickListener clickListener=new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!onSelectedItem) {
        mSelectedDomain=suggestion;
        notifyDataSetChanged();
        mOnAdapterListener.onSelectionChange(suggestion);
      }
    }
  }
;
  domainViewHolder.itemView.setOnClickListener(clickListener);
  domainViewHolder.mRadioButton.setOnClickListener(clickListener);
}","private void bindSuggest(final DomainViewHolder domainViewHolder,int position){
  final String suggestion=getItem(position);
  final boolean onSelectedItem=suggestion.equals(mSelectedDomain);
  domainViewHolder.mRadioButton.setChecked(onSelectedItem);
  domainViewHolder.mRadioButton.setText(suggestion);
  View.OnClickListener clickListener=new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!onSelectedItem) {
        mSelectedDomain=suggestion;
        notifyDataSetChanged();
        mOnAdapterListener.onSelectionChange(suggestion);
      }
    }
  }
;
  domainViewHolder.mRadioButton.setOnClickListener(clickListener);
}",0.9235209235209236
13539,"@SuppressLint(""String_Node_Str"") @Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          showBlogPreview();
        }
      }
);
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  view.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}","@SuppressLint(""String_Node_Str"") @Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          showBlogPreview();
        }
      }
);
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnClickListener(null);
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnClickListener(null);
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  view.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}",0.9838998211091234
13540,"@SuppressLint(""String_Node_Str"") @Override public View configureView(View view){
  final NoteHeaderBlockHolder noteBlockHolder=(NoteHeaderBlockHolder)view.getTag();
  Spannable spannable=NotificationsUtils.getSpannableContentForRanges(mHeaderArray.optJSONObject(0));
  noteBlockHolder.nameTextView.setText(spannable);
  noteBlockHolder.avatarImageView.setImageUrl(getAvatarUrl(),mImageType);
  if (!TextUtils.isEmpty(getUserUrl())) {
    noteBlockHolder.avatarImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        long siteId=Long.valueOf(JSONUtils.queryJSON(mHeaderArray,""String_Node_Str"",0));
        long userId=Long.valueOf(JSONUtils.queryJSON(mHeaderArray,""String_Node_Str"",0));
        String siteUrl=getUserUrl();
        if (siteId > 0 && userId > 0) {
          mGravatarClickedListener.onGravatarClicked(siteId,userId,siteUrl);
        }
      }
    }
);
    noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
  }
 else {
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.snippetTextView.setText(getSnippet());
  if (mIsComment) {
    View footerView=view.findViewById(R.id.header_footer);
    View footerCommentView=view.findViewById(R.id.header_footer_comment);
    footerView.setVisibility(View.GONE);
    footerCommentView.setVisibility(View.VISIBLE);
  }
  return view;
}","@SuppressLint(""String_Node_Str"") @Override public View configureView(View view){
  final NoteHeaderBlockHolder noteBlockHolder=(NoteHeaderBlockHolder)view.getTag();
  Spannable spannable=NotificationsUtils.getSpannableContentForRanges(mHeaderArray.optJSONObject(0));
  noteBlockHolder.nameTextView.setText(spannable);
  noteBlockHolder.avatarImageView.setImageUrl(getAvatarUrl(),mImageType);
  if (!TextUtils.isEmpty(getUserUrl())) {
    noteBlockHolder.avatarImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        long siteId=Long.valueOf(JSONUtils.queryJSON(mHeaderArray,""String_Node_Str"",0));
        long userId=Long.valueOf(JSONUtils.queryJSON(mHeaderArray,""String_Node_Str"",0));
        String siteUrl=getUserUrl();
        if (siteId > 0 && userId > 0) {
          mGravatarClickedListener.onGravatarClicked(siteId,userId,siteUrl);
        }
      }
    }
);
    noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
  }
 else {
    noteBlockHolder.avatarImageView.setOnClickListener(null);
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.snippetTextView.setText(getSnippet());
  if (mIsComment) {
    View footerView=view.findViewById(R.id.header_footer);
    View footerCommentView=view.findViewById(R.id.header_footer_comment);
    footerView.setVisibility(View.GONE);
    footerCommentView.setVisibility(View.VISIBLE);
  }
  return view;
}",0.9784722222222222
13541,"@SuppressLint(""String_Node_Str"") @Override public View configureView(View view){
  final UserActionNoteBlockHolder noteBlockHolder=(UserActionNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(getNoteText().toString());
  String linkedText=null;
  if (hasUserUrlAndTitle()) {
    linkedText=getUserBlogTitle();
  }
 else   if (hasUserUrl()) {
    linkedText=getUserUrl();
  }
  if (!TextUtils.isEmpty(linkedText)) {
    noteBlockHolder.urlTextView.setText(linkedText);
    noteBlockHolder.urlTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.urlTextView.setVisibility(View.GONE);
  }
  if (hasUserBlogTagline()) {
    noteBlockHolder.taglineTextView.setText(getUserBlogTagline());
    noteBlockHolder.taglineTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.taglineTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          showBlogPreview();
        }
      }
);
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
      noteBlockHolder.rootView.setEnabled(true);
      noteBlockHolder.rootView.setOnClickListener(mOnClickListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
      noteBlockHolder.rootView.setEnabled(false);
      noteBlockHolder.rootView.setOnClickListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  return view;
}","@SuppressLint(""String_Node_Str"") @Override public View configureView(View view){
  final UserActionNoteBlockHolder noteBlockHolder=(UserActionNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(getNoteText().toString());
  String linkedText=null;
  if (hasUserUrlAndTitle()) {
    linkedText=getUserBlogTitle();
  }
 else   if (hasUserUrl()) {
    linkedText=getUserUrl();
  }
  if (!TextUtils.isEmpty(linkedText)) {
    noteBlockHolder.urlTextView.setText(linkedText);
    noteBlockHolder.urlTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.urlTextView.setVisibility(View.GONE);
  }
  if (hasUserBlogTagline()) {
    noteBlockHolder.taglineTextView.setText(getUserBlogTagline());
    noteBlockHolder.taglineTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.taglineTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
      noteBlockHolder.rootView.setEnabled(true);
      noteBlockHolder.rootView.setOnClickListener(mOnClickListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
      noteBlockHolder.rootView.setEnabled(false);
      noteBlockHolder.rootView.setOnClickListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.rootView.setOnClickListener(null);
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  return view;
}",0.9338016752229128
13542,"@Override public void onResponse(ImageLoader.ImageContainer response,boolean isImmediate){
  if (response.getBitmap() == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
  }
  TextView view=getView();
  if (view == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return;
  }
  int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
  if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
    maxWidth=mMaxSize;
  }
  Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
  remote.setRemoteDrawable(drawable,maxWidth);
  if (!isImmediate) {
    view.setText(view.getText());
  }
}","@Override public void onResponse(ImageLoader.ImageContainer response,boolean isImmediate){
  if (response.getBitmap() == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
  }
  TextView view=getView();
  if (view == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return;
  }
  int maxWidth=view.getWidth() - ViewCompat.getPaddingStart(view) - ViewCompat.getPaddingEnd(view);
  if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
    maxWidth=mMaxSize;
  }
  Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
  remote.setRemoteDrawable(drawable,maxWidth);
  if (!isImmediate) {
    view.setText(view.getText());
  }
}",0.9571106094808126
13543,"@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - view.getPaddingLeft() - view.getPaddingRight();
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}","@Override public Drawable getDrawable(String source){
  if (mImageLoader == null || mLoadingDrawable == null || mFailedDrawable == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (TextUtils.isEmpty(source)) {
    return null;
  }
  if (source.startsWith(""String_Node_Str"")) {
    source=""String_Node_Str"" + source;
  }
  if (mMaxSize > 0) {
    source=PhotonUtils.getPhotonImageUrl(source,mMaxSize,0);
  }
  final RemoteDrawable remote=new RemoteDrawable(mLoadingDrawable,mFailedDrawable);
  mImageLoader.get(source,new ImageLoader.ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
      remote.displayFailed();
      TextView view=getView();
      if (view != null) {
        view.invalidate();
      }
    }
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      if (response.getBitmap() == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
      }
      TextView view=getView();
      if (view == null) {
        AppLog.w(T.UTILS,""String_Node_Str"");
        return;
      }
      int maxWidth=view.getWidth() - ViewCompat.getPaddingStart(view) - ViewCompat.getPaddingEnd(view);
      if (mMaxSize > 0 && (maxWidth > mMaxSize || maxWidth == 0)) {
        maxWidth=mMaxSize;
      }
      Drawable drawable=new BitmapDrawable(view.getContext().getResources(),response.getBitmap());
      remote.setRemoteDrawable(drawable,maxWidth);
      if (!isImmediate) {
        view.setText(view.getText());
      }
    }
  }
);
  return remote;
}",0.9814634146341464
13544,"public void setToolbarLeftPadding(int paddingLeft){
  ViewCompat.setPaddingRelative(mToolbar,paddingLeft,mToolbar.getPaddingTop(),mToolbar.getPaddingRight(),mToolbar.getPaddingBottom());
}","public void setToolbarLeftPadding(int paddingLeft){
  ViewCompat.setPaddingRelative(mToolbar,paddingLeft,mToolbar.getPaddingTop(),ViewCompat.getPaddingEnd(mToolbar),mToolbar.getPaddingBottom());
}",0.921875
13545,"public void setToolbarRightPadding(int paddingRight){
  ViewCompat.setPaddingRelative(mToolbar,mToolbar.getPaddingLeft(),mToolbar.getPaddingTop(),paddingRight,mToolbar.getPaddingBottom());
}","public void setToolbarRightPadding(int paddingRight){
  ViewCompat.setPaddingRelative(mToolbar,ViewCompat.getPaddingStart(mToolbar),mToolbar.getPaddingTop(),paddingRight,mToolbar.getPaddingBottom());
}",0.8491048593350383
13546,"private void moveBottomButtons(){
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    mBottomButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
    if (getResources().getInteger(R.integer.isSW600DP) == 0) {
      setSecondaryButtonVisible(true);
    }
 else {
      setSecondaryButtonVisible(false);
    }
    ViewCompat.setPaddingRelative(mIconSwitcher,mIconSwitcher.getPaddingLeft(),mIconSwitcher.getPaddingBottom(),mIconSwitcher.getPaddingRight(),mIconSwitcher.getPaddingBottom());
  }
 else {
    mBottomButtonsLayout.setOrientation(LinearLayout.VERTICAL);
    setSecondaryButtonVisible(false);
    ViewCompat.setPaddingRelative(mIconSwitcher,mIconSwitcher.getPaddingLeft(),0,mIconSwitcher.getPaddingRight(),mIconSwitcher.getPaddingBottom());
  }
}","private void moveBottomButtons(){
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    mBottomButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
    if (getResources().getInteger(R.integer.isSW600DP) == 0) {
      setSecondaryButtonVisible(true);
    }
 else {
      setSecondaryButtonVisible(false);
    }
    ViewCompat.setPaddingRelative(mIconSwitcher,ViewCompat.getPaddingStart(mIconSwitcher),mIconSwitcher.getPaddingBottom(),ViewCompat.getPaddingEnd(mIconSwitcher),mIconSwitcher.getPaddingBottom());
  }
 else {
    mBottomButtonsLayout.setOrientation(LinearLayout.VERTICAL);
    setSecondaryButtonVisible(false);
    ViewCompat.setPaddingRelative(mIconSwitcher,ViewCompat.getPaddingStart(mIconSwitcher),0,ViewCompat.getPaddingEnd(mIconSwitcher),mIconSwitcher.getPaddingBottom());
  }
}",0.881851400730816
13547,"@Override public void onGlobalLayout(){
  mTabLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  if (mTabLayout.getChildCount() > 0) {
    int tabLayoutWidth=0;
    LinearLayout tabFirstChild=(LinearLayout)mTabLayout.getChildAt(0);
    for (int i=0; i < mTabLayout.getTabCount(); i++) {
      LinearLayout tabView=(LinearLayout)(tabFirstChild.getChildAt(i));
      tabLayoutWidth+=(tabView.getMeasuredWidth() + tabView.getPaddingLeft() + tabView.getPaddingRight());
    }
    int displayWidth=DisplayUtils.getDisplayPixelWidth(MediaBrowserActivity.this);
    if (tabLayoutWidth < displayWidth) {
      mTabLayout.setTabMode(TabLayout.MODE_FIXED);
      mTabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
    }
  }
}","@Override public void onGlobalLayout(){
  mTabLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
  if (mTabLayout.getChildCount() > 0) {
    int tabLayoutWidth=0;
    LinearLayout tabFirstChild=(LinearLayout)mTabLayout.getChildAt(0);
    for (int i=0; i < mTabLayout.getTabCount(); i++) {
      LinearLayout tabView=(LinearLayout)(tabFirstChild.getChildAt(i));
      tabLayoutWidth+=(tabView.getMeasuredWidth() + ViewCompat.getPaddingStart(tabView) + ViewCompat.getPaddingEnd(tabView));
    }
    int displayWidth=DisplayUtils.getDisplayPixelWidth(MediaBrowserActivity.this);
    if (tabLayoutWidth < displayWidth) {
      mTabLayout.setTabMode(TabLayout.MODE_FIXED);
      mTabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
    }
  }
}",0.9641649763353616
13548,"private void setupTabs(){
  if (shouldShowTabs()) {
    int normalColor=ContextCompat.getColor(this,R.color.blue_light);
    int selectedColor=ContextCompat.getColor(this,R.color.white);
    mTabLayout.setTabTextColors(normalColor,selectedColor);
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_all));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_images));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_documents));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_videos));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_audio));
    mTabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener(){
      @Override public void onTabSelected(      TabLayout.Tab tab){
        setFilter(getFilterForPosition(tab.getPosition()));
      }
      @Override public void onTabUnselected(      TabLayout.Tab tab){
      }
      @Override public void onTabReselected(      TabLayout.Tab tab){
        setFilter(getFilterForPosition(tab.getPosition()));
      }
    }
);
    mTabLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        mTabLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
        if (mTabLayout.getChildCount() > 0) {
          int tabLayoutWidth=0;
          LinearLayout tabFirstChild=(LinearLayout)mTabLayout.getChildAt(0);
          for (int i=0; i < mTabLayout.getTabCount(); i++) {
            LinearLayout tabView=(LinearLayout)(tabFirstChild.getChildAt(i));
            tabLayoutWidth+=(tabView.getMeasuredWidth() + tabView.getPaddingLeft() + tabView.getPaddingRight());
          }
          int displayWidth=DisplayUtils.getDisplayPixelWidth(MediaBrowserActivity.this);
          if (tabLayoutWidth < displayWidth) {
            mTabLayout.setTabMode(TabLayout.MODE_FIXED);
            mTabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
          }
        }
      }
    }
);
  }
 else {
    mTabLayout.setVisibility(View.GONE);
  }
}","private void setupTabs(){
  if (shouldShowTabs()) {
    int normalColor=ContextCompat.getColor(this,R.color.blue_light);
    int selectedColor=ContextCompat.getColor(this,R.color.white);
    mTabLayout.setTabTextColors(normalColor,selectedColor);
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_all));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_images));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_documents));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_videos));
    mTabLayout.addTab(mTabLayout.newTab().setText(R.string.media_audio));
    mTabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener(){
      @Override public void onTabSelected(      TabLayout.Tab tab){
        setFilter(getFilterForPosition(tab.getPosition()));
      }
      @Override public void onTabUnselected(      TabLayout.Tab tab){
      }
      @Override public void onTabReselected(      TabLayout.Tab tab){
        setFilter(getFilterForPosition(tab.getPosition()));
      }
    }
);
    mTabLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        mTabLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
        if (mTabLayout.getChildCount() > 0) {
          int tabLayoutWidth=0;
          LinearLayout tabFirstChild=(LinearLayout)mTabLayout.getChildAt(0);
          for (int i=0; i < mTabLayout.getTabCount(); i++) {
            LinearLayout tabView=(LinearLayout)(tabFirstChild.getChildAt(i));
            tabLayoutWidth+=(tabView.getMeasuredWidth() + ViewCompat.getPaddingStart(tabView) + ViewCompat.getPaddingEnd(tabView));
          }
          int displayWidth=DisplayUtils.getDisplayPixelWidth(MediaBrowserActivity.this);
          if (tabLayoutWidth < displayWidth) {
            mTabLayout.setTabMode(TabLayout.MODE_FIXED);
            mTabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
          }
        }
      }
    }
);
  }
 else {
    mTabLayout.setVisibility(View.GONE);
  }
}",0.9872258375512172
13549,"@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  ViewCompat.setPaddingRelative(view,paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}","@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingStart=ViewCompat.getPaddingStart(view);
  int paddingTop=view.getPaddingTop();
  int paddingEnd=ViewCompat.getPaddingEnd(view);
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingStart=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingStart=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  ViewCompat.setPaddingRelative(view,paddingStart,paddingTop,paddingEnd,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}",0.9861852003829844
13550,"@Override public void onDraw(Canvas c,RecyclerView parent,RecyclerView.State state){
  int left=parent.getPaddingLeft();
  int right=parent.getWidth() - parent.getPaddingRight();
  int childCount=parent.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=parent.getChildAt(i);
    RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();
    int top=child.getBottom() + params.bottomMargin;
    int bottom=top + mDivider.getIntrinsicHeight();
    mDivider.setBounds(left,top,right,bottom);
    mDivider.draw(c);
  }
}","@Override public void onDraw(Canvas c,RecyclerView parent,RecyclerView.State state){
  int left=ViewCompat.getPaddingStart(parent);
  int right=parent.getWidth() - ViewCompat.getPaddingEnd(parent);
  int childCount=parent.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=parent.getChildAt(i);
    RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();
    int top=child.getBottom() + params.bottomMargin;
    int bottom=top + mDivider.getIntrinsicHeight();
    mDivider.setBounds(left,top,right,bottom);
    mDivider.draw(c);
  }
}",0.946817785527463
13551,"private void setupPlansUI(){
  if (mAvailablePlans == null || mAvailablePlans.length == 0) {
    ToastUtils.showToast(PlansActivity.this,R.string.plans_loading_error,ToastUtils.Duration.LONG);
    finish();
    return;
  }
  hideProgress();
  mViewPager.setAdapter(getPageAdapter());
  int normalColor=ContextCompat.getColor(this,R.color.blue_light);
  int selectedColor=ContextCompat.getColor(this,R.color.white);
  mTabLayout.setTabTextColors(normalColor,selectedColor);
  mTabLayout.setupWithViewPager(mViewPager);
  mTabLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mTabLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      if (mTabLayout.getChildCount() > 0) {
        int tabLayoutWidth=0;
        LinearLayout tabFirstChild=(LinearLayout)mTabLayout.getChildAt(0);
        for (int i=0; i < mTabLayout.getTabCount(); i++) {
          LinearLayout tabView=(LinearLayout)(tabFirstChild.getChildAt(i));
          tabLayoutWidth+=(tabView.getMeasuredWidth() + tabView.getPaddingLeft() + tabView.getPaddingRight());
        }
        int displayWidth=DisplayUtils.getDisplayPixelWidth(PlansActivity.this);
        if (tabLayoutWidth < displayWidth) {
          mTabLayout.setTabMode(TabLayout.MODE_FIXED);
          mTabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
        }
      }
    }
  }
);
  if (mViewPager.getVisibility() != View.VISIBLE) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      revealViewPager();
    }
 else {
      mViewPager.setVisibility(View.VISIBLE);
      mTabLayout.setVisibility(View.VISIBLE);
      showManageBar();
    }
  }
}","private void setupPlansUI(){
  if (mAvailablePlans == null || mAvailablePlans.length == 0) {
    ToastUtils.showToast(PlansActivity.this,R.string.plans_loading_error,ToastUtils.Duration.LONG);
    finish();
    return;
  }
  hideProgress();
  mViewPager.setAdapter(getPageAdapter());
  int normalColor=ContextCompat.getColor(this,R.color.blue_light);
  int selectedColor=ContextCompat.getColor(this,R.color.white);
  mTabLayout.setTabTextColors(normalColor,selectedColor);
  mTabLayout.setupWithViewPager(mViewPager);
  mTabLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mTabLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      if (mTabLayout.getChildCount() > 0) {
        int tabLayoutWidth=0;
        LinearLayout tabFirstChild=(LinearLayout)mTabLayout.getChildAt(0);
        for (int i=0; i < mTabLayout.getTabCount(); i++) {
          LinearLayout tabView=(LinearLayout)(tabFirstChild.getChildAt(i));
          tabLayoutWidth+=(tabView.getMeasuredWidth() + ViewCompat.getPaddingStart(tabView) + ViewCompat.getPaddingEnd(tabView));
        }
        int displayWidth=DisplayUtils.getDisplayPixelWidth(PlansActivity.this);
        if (tabLayoutWidth < displayWidth) {
          mTabLayout.setTabMode(TabLayout.MODE_FIXED);
          mTabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
        }
      }
    }
  }
);
  if (mViewPager.getVisibility() != View.VISIBLE) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      revealViewPager();
    }
 else {
      mViewPager.setVisibility(View.VISIBLE);
      mTabLayout.setVisibility(View.VISIBLE);
      showManageBar();
    }
  }
}",0.9798540145985402
13552,"@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view == null)   return;
  EditText editText=getEditText();
  ViewParent oldParent=editText.getParent();
  if (oldParent != view) {
    if (oldParent != null && oldParent instanceof ViewGroup) {
      ViewGroup groupParent=(ViewGroup)oldParent;
      groupParent.removeView(editText);
      ViewCompat.setPaddingRelative(groupParent,groupParent.getPaddingLeft(),0,groupParent.getPaddingRight(),groupParent.getPaddingBottom());
    }
    onAddEditTextToDialogView(view,editText);
  }
  WPPrefUtils.layoutAsInput(editText);
  editText.setSelection(editText.getText().length());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    editText.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);
  }
  TextView message=(TextView)view.findViewById(android.R.id.message);
  WPPrefUtils.layoutAsDialogMessage(message);
  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)message.getLayoutParams();
  int leftMargin=0;
  int bottomMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  layoutParams.setMargins(0,layoutParams.topMargin,0,bottomMargin);
  MarginLayoutParamsCompat.setMarginStart(layoutParams,leftMargin);
  MarginLayoutParamsCompat.setMarginEnd(layoutParams,layoutParams.rightMargin);
  message.setLayoutParams(layoutParams);
}","@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view == null)   return;
  EditText editText=getEditText();
  ViewParent oldParent=editText.getParent();
  if (oldParent != view) {
    if (oldParent != null && oldParent instanceof ViewGroup) {
      ViewGroup groupParent=(ViewGroup)oldParent;
      groupParent.removeView(editText);
      ViewCompat.setPaddingRelative(groupParent,ViewCompat.getPaddingStart(groupParent),0,ViewCompat.getPaddingEnd(groupParent),groupParent.getPaddingBottom());
    }
    onAddEditTextToDialogView(view,editText);
  }
  WPPrefUtils.layoutAsInput(editText);
  editText.setSelection(editText.getText().length());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    editText.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);
  }
  TextView message=(TextView)view.findViewById(android.R.id.message);
  WPPrefUtils.layoutAsDialogMessage(message);
  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)message.getLayoutParams();
  int leftMargin=0;
  int bottomMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  layoutParams.setMargins(0,layoutParams.topMargin,0,bottomMargin);
  MarginLayoutParamsCompat.setMarginStart(layoutParams,leftMargin);
  MarginLayoutParamsCompat.setMarginEnd(layoutParams,layoutParams.rightMargin);
  message.setLayoutParams(layoutParams);
}",0.9619131975199292
13553,"/** 
 * Padding information are reset when changing the background Drawable on a View. The reason why setting an image resets the padding is because 9-patch images can encode padding. <p> See http://stackoverflow.com/a/10469121 and http://www.mail-archive.com/android-developers@googlegroups.com/msg09595.html
 * @param v               The view to apply the background resource
 * @param backgroundResId The resource ID
 */
private static void setViewBackgroundWithoutResettingPadding(final View v,final int backgroundResId){
  final int paddingBottom=v.getPaddingBottom(), paddingLeft=v.getPaddingLeft();
  final int paddingRight=v.getPaddingRight(), paddingTop=v.getPaddingTop();
  v.setBackgroundResource(backgroundResId);
  ViewCompat.setPaddingRelative(v,paddingLeft,paddingTop,paddingRight,paddingBottom);
}","/** 
 * Padding information are reset when changing the background Drawable on a View. The reason why setting an image resets the padding is because 9-patch images can encode padding. <p> See http://stackoverflow.com/a/10469121 and http://www.mail-archive.com/android-developers@googlegroups.com/msg09595.html
 * @param v               The view to apply the background resource
 * @param backgroundResId The resource ID
 */
private static void setViewBackgroundWithoutResettingPadding(final View v,final int backgroundResId){
  final int paddingBottom=v.getPaddingBottom(), paddingLeft=ViewCompat.getPaddingStart(v);
  final int paddingRight=ViewCompat.getPaddingEnd(v), paddingTop=v.getPaddingTop();
  v.setBackgroundResource(backgroundResId);
  ViewCompat.setPaddingRelative(v,paddingLeft,paddingTop,paddingRight,paddingBottom);
}",0.7489361702127659
13554,"public void drawVertical(Canvas c,RecyclerView parent){
  final int left=parent.getPaddingLeft();
  final int right=parent.getWidth() - parent.getPaddingRight();
  final int childCount=parent.getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=parent.getChildAt(i);
    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();
    final int top=child.getBottom() + params.bottomMargin;
    final int bottom=top + mDivider.getIntrinsicHeight();
    mDivider.setBounds(left,top,right,bottom);
    mDivider.draw(c);
  }
}","public void drawVertical(Canvas c,RecyclerView parent){
  final int left=ViewCompat.getPaddingStart(parent);
  final int right=parent.getWidth() - ViewCompat.getPaddingEnd(parent);
  final int childCount=parent.getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=parent.getChildAt(i);
    final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();
    final int top=child.getBottom() + params.bottomMargin;
    final int bottom=top + mDivider.getIntrinsicHeight();
    mDivider.setBounds(left,top,right,bottom);
    mDivider.draw(c);
  }
}",0.947996589940324
13555,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec) - getPaddingRight() - getPaddingLeft();
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  boolean growHeight=widthMode != MeasureSpec.UNSPECIFIED;
  int width=0;
  int height=getPaddingTop();
  int currentWidth=getPaddingLeft();
  int currentHeight=0;
  boolean newLine=false;
  int spacing=0;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    View child=getChildAt(i);
    measureChild(child,widthMeasureSpec,heightMeasureSpec);
    LayoutParams lp=(LayoutParams)child.getLayoutParams();
    spacing=mHorizontalSpacing;
    if (lp.horizontalSpacing >= 0) {
      spacing=lp.horizontalSpacing;
    }
    if (growHeight && currentWidth + child.getMeasuredWidth() > widthSize) {
      height+=currentHeight + mVerticalSpacing;
      currentHeight=0;
      width=Math.max(width,currentWidth - spacing);
      currentWidth=getPaddingLeft();
      newLine=true;
    }
 else {
      newLine=false;
    }
    lp.x=currentWidth;
    lp.y=height;
    currentWidth+=child.getMeasuredWidth() + spacing;
    currentHeight=Math.max(currentHeight,child.getMeasuredHeight());
  }
  if (!newLine) {
    width=Math.max(width,currentWidth - spacing);
  }
  width+=getPaddingRight();
  height+=currentHeight + getPaddingBottom();
  setMeasuredDimension(resolveSize(width,widthMeasureSpec),resolveSize(height,heightMeasureSpec));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec) - ViewCompat.getPaddingEnd(this) - ViewCompat.getPaddingStart(this);
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  boolean growHeight=widthMode != MeasureSpec.UNSPECIFIED;
  int width=0;
  int height=getPaddingTop();
  int currentWidth=ViewCompat.getPaddingStart(this);
  int currentHeight=0;
  boolean newLine=false;
  int spacing=0;
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    View child=getChildAt(i);
    measureChild(child,widthMeasureSpec,heightMeasureSpec);
    LayoutParams lp=(LayoutParams)child.getLayoutParams();
    spacing=mHorizontalSpacing;
    if (lp.horizontalSpacing >= 0) {
      spacing=lp.horizontalSpacing;
    }
    if (growHeight && currentWidth + child.getMeasuredWidth() > widthSize) {
      height+=currentHeight + mVerticalSpacing;
      currentHeight=0;
      width=Math.max(width,currentWidth - spacing);
      currentWidth=ViewCompat.getPaddingStart(this);
      newLine=true;
    }
 else {
      newLine=false;
    }
    lp.x=currentWidth;
    lp.y=height;
    currentWidth+=child.getMeasuredWidth() + spacing;
    currentHeight=Math.max(currentHeight,child.getMeasuredHeight());
  }
  if (!newLine) {
    width=Math.max(width,currentWidth - spacing);
  }
  width+=ViewCompat.getPaddingEnd(this);
  height+=currentHeight + getPaddingBottom();
  setMeasuredDimension(resolveSize(width,widthMeasureSpec),resolveSize(height,heightMeasureSpec));
}",0.656084656084656
13556,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int targetWidth=HeaderGridView.this.getMeasuredWidth() - HeaderGridView.this.getPaddingLeft() - HeaderGridView.this.getPaddingRight();
  widthMeasureSpec=MeasureSpec.makeMeasureSpec(targetWidth,MeasureSpec.getMode(widthMeasureSpec));
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int targetWidth=HeaderGridView.this.getMeasuredWidth() - ViewCompat.getPaddingStart(HeaderGridView.this) - ViewCompat.getPaddingEnd(HeaderGridView.this);
  widthMeasureSpec=MeasureSpec.makeMeasureSpec(targetWidth,MeasureSpec.getMode(widthMeasureSpec));
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
}",0.90694626474443
13557,"@Nullable Object getItem(int position){
  if (position < size()) {
    return get(position);
  }
  return null;
}","@Nullable Object getItem(int position){
  if (position >= 0 && position < size()) {
    return get(position);
  }
  return null;
}",0.9300411522633744
13558,"private void dispatchRemovePluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  mRemovePluginProgressDialog.setMessage(getRemovingPluginMessage());
  DeleteSitePluginPayload payload=new DeleteSitePluginPayload(mSite,getSitePlugin());
  mDispatcher.dispatch(PluginActionBuilder.newDeleteSitePluginAction(payload));
}","protected void dispatchRemovePluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  mRemovePluginProgressDialog.setMessage(getRemovingPluginMessage());
  DeleteSitePluginPayload payload=new DeleteSitePluginPayload(mSite,getSitePlugin());
  mDispatcher.dispatch(PluginActionBuilder.newDeleteSitePluginAction(payload));
}",0.9824561403508772
13559,"private void showPluginInfoPopup(){
  if (getWPOrgPlugin() == null)   return;
  List<Map<String,String>> data=new ArrayList<>();
  int[] to={R.id.text1,R.id.text2};
  String[] from={KEY_LABEL,KEY_TEXT};
  String[] labels={getString(R.string.plugin_info_version),getString(R.string.plugin_info_lastupdated),getString(R.string.plugin_info_requires_version),getString(R.string.plugin_info_your_version)};
  Map<String,String> mapVersion=new HashMap<>();
  mapVersion.put(KEY_LABEL,labels[0]);
  mapVersion.put(KEY_TEXT,StringUtils.notNullStr(getWPOrgPlugin().getVersion()));
  data.add(mapVersion);
  Map<String,String> mapUpdated=new HashMap<>();
  mapUpdated.put(KEY_LABEL,labels[1]);
  mapUpdated.put(KEY_TEXT,timespanFromUpdateDate(StringUtils.notNullStr(getWPOrgPlugin().getLastUpdated())));
  data.add(mapUpdated);
  Map<String,String> mapRequiredVer=new HashMap<>();
  mapRequiredVer.put(KEY_LABEL,labels[2]);
  mapRequiredVer.put(KEY_TEXT,StringUtils.notNullStr(getWPOrgPlugin().getRequiredWordPressVersion()));
  data.add(mapRequiredVer);
  Map<String,String> mapThisVer=new HashMap<>();
  mapThisVer.put(KEY_LABEL,labels[3]);
  mapThisVer.put(KEY_TEXT,!TextUtils.isEmpty(mSite.getSoftwareVersion()) ? mSite.getSoftwareVersion() : ""String_Node_Str"");
  data.add(mapThisVer);
  SimpleAdapter adapter=new SimpleAdapter(this,data,R.layout.plugin_info_row,from,to);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setAdapter(adapter,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  builder.show();
}","protected void showPluginInfoPopup(){
  if (getWPOrgPlugin() == null)   return;
  List<Map<String,String>> data=new ArrayList<>();
  int[] to={R.id.text1,R.id.text2};
  String[] from={KEY_LABEL,KEY_TEXT};
  String[] labels={getString(R.string.plugin_info_version),getString(R.string.plugin_info_lastupdated),getString(R.string.plugin_info_requires_version),getString(R.string.plugin_info_your_version)};
  Map<String,String> mapVersion=new HashMap<>();
  mapVersion.put(KEY_LABEL,labels[0]);
  mapVersion.put(KEY_TEXT,StringUtils.notNullStr(getWPOrgPlugin().getVersion()));
  data.add(mapVersion);
  Map<String,String> mapUpdated=new HashMap<>();
  mapUpdated.put(KEY_LABEL,labels[1]);
  mapUpdated.put(KEY_TEXT,timespanFromUpdateDate(StringUtils.notNullStr(getWPOrgPlugin().getLastUpdated())));
  data.add(mapUpdated);
  Map<String,String> mapRequiredVer=new HashMap<>();
  mapRequiredVer.put(KEY_LABEL,labels[2]);
  mapRequiredVer.put(KEY_TEXT,StringUtils.notNullStr(getWPOrgPlugin().getRequiredWordPressVersion()));
  data.add(mapRequiredVer);
  Map<String,String> mapThisVer=new HashMap<>();
  mapThisVer.put(KEY_LABEL,labels[3]);
  mapThisVer.put(KEY_TEXT,!TextUtils.isEmpty(mSite.getSoftwareVersion()) ? mSite.getSoftwareVersion() : ""String_Node_Str"");
  data.add(mapThisVer);
  SimpleAdapter adapter=new SimpleAdapter(this,data,R.layout.plugin_info_row,from,to);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setCancelable(true);
  builder.setAdapter(adapter,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  builder.show();
}",0.9963898916967509
13560,"private void toggleText(@NonNull final TextView textView,@NonNull ImageView chevron){
  AniUtils.Duration duration=AniUtils.Duration.SHORT;
  boolean isExpanded=textView.getVisibility() == View.VISIBLE;
  if (isExpanded) {
    AniUtils.fadeOut(textView,duration);
  }
 else {
    AniUtils.fadeIn(textView,duration);
  }
  float startRotate=isExpanded ? -180f : 0f;
  float endRotate=isExpanded ? 0f : -180f;
  ObjectAnimator animRotate=ObjectAnimator.ofFloat(chevron,View.ROTATION,startRotate,endRotate);
  animRotate.setDuration(duration.toMillis(this));
  animRotate.start();
}","protected void toggleText(@NonNull final TextView textView,@NonNull ImageView chevron){
  AniUtils.Duration duration=AniUtils.Duration.SHORT;
  boolean isExpanded=textView.getVisibility() == View.VISIBLE;
  if (isExpanded) {
    AniUtils.fadeOut(textView,duration);
  }
 else {
    AniUtils.fadeIn(textView,duration);
  }
  float startRotate=isExpanded ? -180f : 0f;
  float endRotate=isExpanded ? 0f : -180f;
  ObjectAnimator animRotate=ObjectAnimator.ofFloat(chevron,View.ROTATION,startRotate,endRotate);
  animRotate.setDuration(duration.toMillis(this));
  animRotate.start();
}",0.9896551724137932
13561,"private String getWpOrgReviewsUrl(){
  return ""String_Node_Str"" + mSlug + ""String_Node_Str"";
}","protected String getWpOrgReviewsUrl(){
  return ""String_Node_Str"" + mSlug + ""String_Node_Str"";
}",0.9578947368421052
13562,"private void disableAndRemovePlugin(){
  if (!canPluginBeDisabledOrRemoved()) {
    return;
  }
  mIsRemovingPlugin=true;
  showRemovePluginProgressDialog();
  mIsActive=false;
  dispatchConfigurePluginAction(false);
}","protected void disableAndRemovePlugin(){
  if (!canPluginBeDisabledOrRemoved()) {
    return;
  }
  mIsRemovingPlugin=true;
  showRemovePluginProgressDialog();
  mIsActive=false;
  dispatchConfigurePluginAction(false);
}",0.9726027397260274
13563,"private void dispatchUpdatePluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!PluginUtils.isUpdateAvailable(getSitePlugin(),getWPOrgPlugin()) || mIsUpdatingPlugin) {
    return;
  }
  mIsUpdatingPlugin=true;
  refreshUpdateVersionViews();
  UpdateSitePluginPayload payload=new UpdateSitePluginPayload(mSite,getSitePlugin());
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginAction(payload));
}","protected void dispatchUpdatePluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!PluginUtils.isUpdateAvailable(getSitePlugin(),getWPOrgPlugin()) || mIsUpdatingPlugin) {
    return;
  }
  mIsUpdatingPlugin=true;
  refreshUpdateVersionViews();
  UpdateSitePluginPayload payload=new UpdateSitePluginPayload(mSite,getSitePlugin());
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginAction(payload));
}",0.9863636363636364
13564,"private void openUrl(@Nullable String url){
  if (url != null) {
    ActivityLauncher.openUrlExternal(this,url);
  }
}","protected void openUrl(@Nullable String url){
  if (url != null) {
    ActivityLauncher.openUrlExternal(this,url);
  }
}",0.9663865546218487
13565,"private String getWpOrgPluginUrl(){
  return ""String_Node_Str"" + mSlug;
}","protected String getWpOrgPluginUrl(){
  return ""String_Node_Str"" + mSlug;
}",0.945945945945946
13566,"private void dispatchConfigurePluginAction(boolean forceUpdate){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!forceUpdate && mIsConfiguringPlugin) {
    return;
  }
  if (getSitePlugin() == null) {
    return;
  }
  mIsConfiguringPlugin=true;
  getSitePlugin().setIsActive(mIsActive);
  getSitePlugin().setIsAutoUpdateEnabled(mIsAutoUpdateEnabled);
  mDispatcher.dispatch(PluginActionBuilder.newConfigureSitePluginAction(new ConfigureSitePluginPayload(mSite,getSitePlugin())));
}","protected void dispatchConfigurePluginAction(boolean forceUpdate){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!forceUpdate && mIsConfiguringPlugin) {
    return;
  }
  if (getSitePlugin() == null) {
    return;
  }
  mIsConfiguringPlugin=true;
  getSitePlugin().setIsActive(mIsActive);
  getSitePlugin().setIsAutoUpdateEnabled(mIsAutoUpdateEnabled);
  mDispatcher.dispatch(PluginActionBuilder.newConfigureSitePluginAction(new ConfigureSitePluginPayload(mSite,getSitePlugin())));
}",0.9880715705765408
13567,"private void setupViews(){
  mContainer=findViewById(R.id.plugin_detail_container);
  mTitleTextView=findViewById(R.id.text_title);
  mByLineTextView=findViewById(R.id.text_byline);
  mVersionTopTextView=findViewById(R.id.plugin_version_top);
  mVersionBottomTextView=findViewById(R.id.plugin_version_bottom);
  mUpdateButton=findViewById(R.id.plugin_btn_update);
  mInstallButton=findViewById(R.id.plugin_btn_install);
  mSwitchActive=findViewById(R.id.plugin_state_active);
  mSwitchAutoupdates=findViewById(R.id.plugin_state_autoupdates);
  mImageBanner=findViewById(R.id.image_banner);
  mImageIcon=findViewById(R.id.image_icon);
  Drawable rightDrawable=AppCompatResources.getDrawable(this,R.drawable.ic_info_outline_grey_dark_18dp);
  mVersionTopTextView.setCompoundDrawablesWithIntrinsicBounds(null,null,rightDrawable,null);
  mDescriptionTextView=findViewById(R.id.plugin_description_text);
  mDescriptionChevron=findViewById(R.id.plugin_description_chevron);
  findViewById(R.id.plugin_description_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mDescriptionTextView,mDescriptionChevron);
    }
  }
);
  mInstallationTextView=findViewById(R.id.plugin_installation_text);
  mInstallationChevron=findViewById(R.id.plugin_installation_chevron);
  findViewById(R.id.plugin_installation_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mInstallationTextView,mInstallationChevron);
    }
  }
);
  mWhatsNewTextView=findViewById(R.id.plugin_whatsnew_text);
  mWhatsNewChevron=findViewById(R.id.plugin_whatsnew_chevron);
  findViewById(R.id.plugin_whatsnew_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mWhatsNewTextView,mWhatsNewChevron);
    }
  }
);
  if (getSitePlugin() == null) {
    toggleText(mDescriptionTextView,mDescriptionChevron);
  }
 else   if (PluginUtils.isUpdateAvailable(getSitePlugin(),getWPOrgPlugin())) {
    toggleText(mWhatsNewTextView,mWhatsNewChevron);
  }
  mFaqTextView=findViewById(R.id.plugin_faq_text);
  mFaqChevron=findViewById(R.id.plugin_faq_chevron);
  findViewById(R.id.plugin_faq_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mFaqTextView,mFaqChevron);
    }
  }
);
  mVersionTopTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showPluginInfoPopup();
    }
  }
);
  mSwitchActive.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsActive=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  mSwitchAutoupdates.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsAutoUpdateEnabled=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  View settingsView=findViewById(R.id.plugin_settings_page);
  if (canShowSettings()) {
    settingsView.setVisibility(View.VISIBLE);
    settingsView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        openUrl(getSitePlugin().getSettingsUrl());
      }
    }
);
  }
 else {
    settingsView.setVisibility(View.GONE);
  }
  findViewById(R.id.plugin_wp_org_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      openUrl(getWpOrgPluginUrl());
    }
  }
);
  findViewById(R.id.plugin_home_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String url=null;
      if (getSitePlugin() != null) {
        url=getSitePlugin().getPluginUrl();
      }
 else       if (getWPOrgPlugin() != null) {
        url=getWPOrgPlugin().getHomepageUrl();
      }
      if (TextUtils.isEmpty(url)) {
        openUrl(url);
      }
    }
  }
);
  findViewById(R.id.read_reviews_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      openUrl(getWpOrgReviewsUrl());
    }
  }
);
  int toolbarHeight=DisplayUtils.getActionBarHeight(this);
  ImageView imgScrim=findViewById(R.id.image_gradient_scrim);
  imgScrim.getLayoutParams().height=toolbarHeight * 2;
  refreshViews();
}","private void setupViews(){
  mContainer=findViewById(R.id.plugin_detail_container);
  mTitleTextView=findViewById(R.id.text_title);
  mByLineTextView=findViewById(R.id.text_byline);
  mVersionTopTextView=findViewById(R.id.plugin_version_top);
  mVersionBottomTextView=findViewById(R.id.plugin_version_bottom);
  mUpdateButton=findViewById(R.id.plugin_btn_update);
  mInstallButton=findViewById(R.id.plugin_btn_install);
  mSwitchActive=findViewById(R.id.plugin_state_active);
  mSwitchAutoupdates=findViewById(R.id.plugin_state_autoupdates);
  mImageBanner=findViewById(R.id.image_banner);
  mImageIcon=findViewById(R.id.image_icon);
  Drawable rightDrawable=AppCompatResources.getDrawable(this,R.drawable.ic_info_outline_grey_dark_18dp);
  mVersionTopTextView.setCompoundDrawablesWithIntrinsicBounds(null,null,rightDrawable,null);
  mDescriptionTextView=findViewById(R.id.plugin_description_text);
  mDescriptionChevron=findViewById(R.id.plugin_description_chevron);
  findViewById(R.id.plugin_description_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mDescriptionTextView,mDescriptionChevron);
    }
  }
);
  mInstallationTextView=findViewById(R.id.plugin_installation_text);
  mInstallationChevron=findViewById(R.id.plugin_installation_chevron);
  findViewById(R.id.plugin_installation_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mInstallationTextView,mInstallationChevron);
    }
  }
);
  mWhatsNewTextView=findViewById(R.id.plugin_whatsnew_text);
  mWhatsNewChevron=findViewById(R.id.plugin_whatsnew_chevron);
  findViewById(R.id.plugin_whatsnew_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mWhatsNewTextView,mWhatsNewChevron);
    }
  }
);
  if (getSitePlugin() == null) {
    toggleText(mDescriptionTextView,mDescriptionChevron);
  }
 else   if (PluginUtils.isUpdateAvailable(getSitePlugin(),getWPOrgPlugin())) {
    toggleText(mWhatsNewTextView,mWhatsNewChevron);
  }
  mFaqTextView=findViewById(R.id.plugin_faq_text);
  mFaqChevron=findViewById(R.id.plugin_faq_chevron);
  findViewById(R.id.plugin_faq_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mFaqTextView,mFaqChevron);
    }
  }
);
  mVersionTopTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showPluginInfoPopup();
    }
  }
);
  mSwitchActive.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsActive=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  mSwitchAutoupdates.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsAutoUpdateEnabled=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  View settingsView=findViewById(R.id.plugin_settings_page);
  if (canShowSettings()) {
    settingsView.setVisibility(View.VISIBLE);
    settingsView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        openUrl(getSitePlugin().getSettingsUrl());
      }
    }
);
  }
 else {
    settingsView.setVisibility(View.GONE);
  }
  findViewById(R.id.plugin_wp_org_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      openUrl(getWpOrgPluginUrl());
    }
  }
);
  findViewById(R.id.plugin_home_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String url=null;
      if (getSitePlugin() != null) {
        url=getSitePlugin().getPluginUrl();
      }
 else       if (getWPOrgPlugin() != null) {
        url=getWPOrgPlugin().getHomepageUrl();
      }
      openUrl(url);
    }
  }
);
  findViewById(R.id.read_reviews_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      openUrl(getWpOrgReviewsUrl());
    }
  }
);
  int toolbarHeight=DisplayUtils.getActionBarHeight(this);
  ImageView imgScrim=findViewById(R.id.image_gradient_scrim);
  imgScrim.getLayoutParams().height=toolbarHeight * 2;
  refreshViews();
}",0.9922532093846836
13568,"private void dispatchInstallPluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  mIsUpdatingPlugin=true;
  refreshUpdateVersionViews();
  PluginStore.InstallSitePluginPayload payload=new InstallSitePluginPayload(mSite,mSlug);
  mDispatcher.dispatch(PluginActionBuilder.newInstallSitePluginAction(payload));
}","protected void dispatchInstallPluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  mIsUpdatingPlugin=true;
  refreshUpdateVersionViews();
  PluginStore.InstallSitePluginPayload payload=new InstallSitePluginPayload(mSite,mSlug);
  mDispatcher.dispatch(PluginActionBuilder.newInstallSitePluginAction(payload));
}",0.982089552238806
13569,"private void moveBottomButtons(){
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    mBottomButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
    if (getResources().getInteger(R.integer.isSW600DP) == 0) {
      setSecondaryButtonVisible(true);
    }
 else {
      setSecondaryButtonVisible(false);
    }
    mIconSwitcher.setPadding(mIconSwitcher.getPaddingLeft(),mIconSwitcher.getPaddingBottom(),mIconSwitcher.getPaddingRight(),mIconSwitcher.getPaddingBottom());
  }
 else {
    mBottomButtonsLayout.setOrientation(LinearLayout.VERTICAL);
    setSecondaryButtonVisible(false);
    mIconSwitcher.setPadding(mIconSwitcher.getPaddingLeft(),0,mIconSwitcher.getPaddingRight(),mIconSwitcher.getPaddingBottom());
  }
}","private void moveBottomButtons(){
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    mBottomButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
    if (getResources().getInteger(R.integer.isSW600DP) == 0) {
      setSecondaryButtonVisible(true);
    }
 else {
      setSecondaryButtonVisible(false);
    }
    ViewCompat.setPaddingRelative(mIconSwitcher,mIconSwitcher.getPaddingLeft(),mIconSwitcher.getPaddingBottom(),mIconSwitcher.getPaddingRight(),mIconSwitcher.getPaddingBottom());
  }
 else {
    mBottomButtonsLayout.setOrientation(LinearLayout.VERTICAL);
    setSecondaryButtonVisible(false);
    ViewCompat.setPaddingRelative(mIconSwitcher,mIconSwitcher.getPaddingLeft(),0,mIconSwitcher.getPaddingRight(),mIconSwitcher.getPaddingBottom());
  }
}",0.9118773946360154
13570,"@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  view.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}","@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  ViewCompat.setPaddingRelative(view,paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}",0.9960126495256428
13571,"@NonNull @Override public View getView(int position,@Nullable View convertView,@NonNull ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(mResourceId,parent,false);
  TextView textView=(TextView)rowView.findViewById(R.id.categoryRowText);
  CategoryNode node=getItem(position);
  if (node != null) {
    textView.setText(StringEscapeUtils.unescapeHtml4(node.getName()));
    textView.setPadding(DisplayUtils.dpToPx(getContext(),16) * node.getLevel(),0,DisplayUtils.dpToPx(getContext(),16),0);
  }
  return rowView;
}","@NonNull @Override public View getView(int position,@Nullable View convertView,@NonNull ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(mResourceId,parent,false);
  TextView textView=(TextView)rowView.findViewById(R.id.categoryRowText);
  CategoryNode node=getItem(position);
  if (node != null) {
    textView.setText(StringEscapeUtils.unescapeHtml4(node.getName()));
    ViewCompat.setPaddingRelative(textView,DisplayUtils.dpToPx(getContext(),16) * node.getLevel(),0,DisplayUtils.dpToPx(getContext(),16),0);
  }
  return rowView;
}",0.9707509881422924
13572,"@Override public View getDropDownView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(mResourceId,parent,false);
  TextView textView=(TextView)rowView.findViewById(R.id.categoryRowText);
  textView.setText(StringEscapeUtils.unescapeHtml4(getItem(position).getName()));
  CategoryNode node=getItem(position);
  if (node != null) {
    textView.setText(StringEscapeUtils.unescapeHtml4(node.getName()));
    textView.setPadding(DisplayUtils.dpToPx(getContext(),16) * (node.getLevel() + 1),0,DisplayUtils.dpToPx(getContext(),16),0);
  }
  return rowView;
}","@Override public View getDropDownView(int position,View convertView,ViewGroup parent){
  LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View rowView=inflater.inflate(mResourceId,parent,false);
  TextView textView=(TextView)rowView.findViewById(R.id.categoryRowText);
  textView.setText(StringEscapeUtils.unescapeHtml4(getItem(position).getName()));
  CategoryNode node=getItem(position);
  if (node != null) {
    textView.setText(StringEscapeUtils.unescapeHtml4(node.getName()));
    ViewCompat.setPaddingRelative(textView,DisplayUtils.dpToPx(getContext(),16) * (node.getLevel() + 1),0,DisplayUtils.dpToPx(getContext(),16),0);
  }
  return rowView;
}",0.9734386216798278
13573,"@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view == null)   return;
  EditText editText=getEditText();
  ViewParent oldParent=editText.getParent();
  if (oldParent != view) {
    if (oldParent != null && oldParent instanceof ViewGroup) {
      ViewGroup groupParent=(ViewGroup)oldParent;
      groupParent.removeView(editText);
      groupParent.setPadding(groupParent.getPaddingLeft(),0,groupParent.getPaddingRight(),groupParent.getPaddingBottom());
    }
    onAddEditTextToDialogView(view,editText);
  }
  WPPrefUtils.layoutAsInput(editText);
  editText.setSelection(editText.getText().length());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    editText.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);
  }
  TextView message=(TextView)view.findViewById(android.R.id.message);
  WPPrefUtils.layoutAsDialogMessage(message);
  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)message.getLayoutParams();
  int leftMargin=0;
  int bottomMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  layoutParams.setMargins(0,layoutParams.topMargin,0,bottomMargin);
  MarginLayoutParamsCompat.setMarginStart(layoutParams,leftMargin);
  MarginLayoutParamsCompat.setMarginEnd(layoutParams,layoutParams.rightMargin);
  message.setLayoutParams(layoutParams);
}","@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view == null)   return;
  EditText editText=getEditText();
  ViewParent oldParent=editText.getParent();
  if (oldParent != view) {
    if (oldParent != null && oldParent instanceof ViewGroup) {
      ViewGroup groupParent=(ViewGroup)oldParent;
      groupParent.removeView(editText);
      ViewCompat.setPaddingRelative(groupParent,groupParent.getPaddingLeft(),0,groupParent.getPaddingRight(),groupParent.getPaddingBottom());
    }
    onAddEditTextToDialogView(view,editText);
  }
  WPPrefUtils.layoutAsInput(editText);
  editText.setSelection(editText.getText().length());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    editText.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);
  }
  TextView message=(TextView)view.findViewById(android.R.id.message);
  WPPrefUtils.layoutAsDialogMessage(message);
  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)message.getLayoutParams();
  int leftMargin=0;
  int bottomMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  layoutParams.setMargins(0,layoutParams.topMargin,0,bottomMargin);
  MarginLayoutParamsCompat.setMarginStart(layoutParams,leftMargin);
  MarginLayoutParamsCompat.setMarginEnd(layoutParams,layoutParams.rightMargin);
  message.setLayoutParams(layoutParams);
}",0.9805912212600776
13574,"@Override protected void onBindView(@NonNull View view){
  super.onBindView(view);
  TextView titleView=(TextView)view.findViewById(android.R.id.title);
  if (titleView != null) {
    Resources res=getContext().getResources();
    titleView.setTextSize(TypedValue.COMPLEX_UNIT_PX,res.getDimensionPixelSize(R.dimen.text_sz_large));
    titleView.setTextColor(res.getColor(isEnabled() ? R.color.grey_dark : R.color.grey_lighten_10));
    if (!TextUtils.isEmpty(getDependency())) {
      titleView.setPadding(res.getDimensionPixelSize(R.dimen.margin_large),0,0,0);
    }
  }
}","@Override protected void onBindView(@NonNull View view){
  super.onBindView(view);
  TextView titleView=(TextView)view.findViewById(android.R.id.title);
  if (titleView != null) {
    Resources res=getContext().getResources();
    titleView.setTextSize(TypedValue.COMPLEX_UNIT_PX,res.getDimensionPixelSize(R.dimen.text_sz_large));
    titleView.setTextColor(res.getColor(isEnabled() ? R.color.grey_dark : R.color.grey_lighten_10));
    if (!TextUtils.isEmpty(getDependency())) {
      ViewCompat.setPaddingRelative(titleView,res.getDimensionPixelSize(R.dimen.margin_large),0,0,0);
    }
  }
}",0.9665236051502146
13575,"/** 
 * Padding information are reset when changing the background Drawable on a View. The reason why setting an image resets the padding is because 9-patch images can encode padding. See http://stackoverflow.com/a/10469121 and http://www.mail-archive.com/android-developers@googlegroups.com/msg09595.html
 * @param v The view to apply the background resource
 * @param backgroundResId The resource ID
 */
private static void setViewBackgroundWithoutResettingPadding(final View v,final int backgroundResId){
  final int paddingBottom=v.getPaddingBottom(), paddingLeft=v.getPaddingLeft();
  final int paddingRight=v.getPaddingRight(), paddingTop=v.getPaddingTop();
  v.setBackgroundResource(backgroundResId);
  v.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);
}","/** 
 * Padding information are reset when changing the background Drawable on a View. The reason why setting an image resets the padding is because 9-patch images can encode padding. <p> See http://stackoverflow.com/a/10469121 and http://www.mail-archive.com/android-developers@googlegroups.com/msg09595.html
 * @param v               The view to apply the background resource
 * @param backgroundResId The resource ID
 */
private static void setViewBackgroundWithoutResettingPadding(final View v,final int backgroundResId){
  final int paddingBottom=v.getPaddingBottom(), paddingLeft=v.getPaddingLeft();
  final int paddingRight=v.getPaddingRight(), paddingTop=v.getPaddingTop();
  v.setBackgroundResource(backgroundResId);
  ViewCompat.setPaddingRelative(v,paddingLeft,paddingTop,paddingRight,paddingBottom);
}",0.975456261799874
13576,"@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view == null)   return;
  EditText editText=getEditText();
  ViewParent oldParent=editText.getParent();
  if (oldParent != view) {
    if (oldParent != null && oldParent instanceof ViewGroup) {
      ViewGroup groupParent=(ViewGroup)oldParent;
      groupParent.removeView(editText);
      groupParent.setPadding(groupParent.getPaddingLeft(),0,groupParent.getPaddingRight(),groupParent.getPaddingBottom());
    }
    onAddEditTextToDialogView(view,editText);
  }
  WPPrefUtils.layoutAsInput(editText);
  editText.setSelection(editText.getText().length());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    editText.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);
  }
  TextView message=(TextView)view.findViewById(android.R.id.message);
  WPPrefUtils.layoutAsDialogMessage(message);
  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)message.getLayoutParams();
  int leftMargin=0;
  int bottomMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  layoutParams.setMargins(leftMargin,layoutParams.topMargin,layoutParams.rightMargin,bottomMargin);
  message.setLayoutParams(layoutParams);
}","@Override protected void onBindDialogView(final View view){
  super.onBindDialogView(view);
  if (view == null)   return;
  EditText editText=getEditText();
  ViewParent oldParent=editText.getParent();
  if (oldParent != view) {
    if (oldParent != null && oldParent instanceof ViewGroup) {
      ViewGroup groupParent=(ViewGroup)oldParent;
      groupParent.removeView(editText);
      groupParent.setPadding(groupParent.getPaddingLeft(),0,groupParent.getPaddingRight(),groupParent.getPaddingBottom());
    }
    onAddEditTextToDialogView(view,editText);
  }
  WPPrefUtils.layoutAsInput(editText);
  editText.setSelection(editText.getText().length());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    editText.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);
  }
  TextView message=(TextView)view.findViewById(android.R.id.message);
  WPPrefUtils.layoutAsDialogMessage(message);
  ViewGroup.MarginLayoutParams layoutParams=(ViewGroup.MarginLayoutParams)message.getLayoutParams();
  int leftMargin=0;
  int bottomMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_small);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    leftMargin=view.getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  layoutParams.setMargins(0,layoutParams.topMargin,0,bottomMargin);
  MarginLayoutParamsCompat.setMarginStart(layoutParams,leftMargin);
  MarginLayoutParamsCompat.setMarginEnd(layoutParams,layoutParams.rightMargin);
  message.setLayoutParams(layoutParams);
}",0.9359054138145612
13577,"void setupTopModulePager(LayoutInflater inflater,ViewGroup container,View view,String[] buttonTitles){
  int dp4=DisplayUtils.dpToPx(view.getContext(),4);
  int dp80=DisplayUtils.dpToPx(view.getContext(),80);
  for (int i=0; i < buttonTitles.length; i++) {
    CheckedTextView rb=(CheckedTextView)inflater.inflate(R.layout.stats_top_module_pager_button,container,false);
    RadioGroup.LayoutParams params=new RadioGroup.LayoutParams(RadioGroup.LayoutParams.MATCH_PARENT,RadioGroup.LayoutParams.WRAP_CONTENT);
    params.weight=1;
    if (i == 0) {
      params.setMargins(0,0,dp4,0);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        params.setMarginEnd(dp4);
      }
    }
 else {
      params.setMargins(dp4,0,0,0);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        params.setMarginStart(dp4);
      }
    }
    rb.setMinimumWidth(dp80);
    rb.setGravity(Gravity.CENTER);
    rb.setLayoutParams(params);
    rb.setText(buttonTitles[i]);
    rb.setChecked(i == mTopPagerSelectedButtonIndex);
    rb.setOnClickListener(TopModulePagerOnClickListener);
    mTopPagerContainer.addView(rb);
  }
  mTopPagerContainer.setVisibility(View.VISIBLE);
}","void setupTopModulePager(LayoutInflater inflater,ViewGroup container,View view,String[] buttonTitles){
  int dp4=DisplayUtils.dpToPx(view.getContext(),4);
  int dp80=DisplayUtils.dpToPx(view.getContext(),80);
  for (int i=0; i < buttonTitles.length; i++) {
    CheckedTextView rb=(CheckedTextView)inflater.inflate(R.layout.stats_top_module_pager_button,container,false);
    RadioGroup.LayoutParams params=new RadioGroup.LayoutParams(RadioGroup.LayoutParams.MATCH_PARENT,RadioGroup.LayoutParams.WRAP_CONTENT);
    params.weight=1;
    if (i == 0) {
      MarginLayoutParamsCompat.setMarginEnd(params,dp4);
    }
 else {
      MarginLayoutParamsCompat.setMarginStart(params,dp4);
    }
    rb.setMinimumWidth(dp80);
    rb.setGravity(Gravity.CENTER);
    rb.setLayoutParams(params);
    rb.setText(buttonTitles[i]);
    rb.setChecked(i == mTopPagerSelectedButtonIndex);
    rb.setOnClickListener(TopModulePagerOnClickListener);
    mTopPagerContainer.addView(rb);
  }
  mTopPagerContainer.setVisibility(View.VISIBLE);
}",0.814748201438849
13578,"private void showMap(final List<GeoviewModel> countries){
  if (!isAdded()) {
    return;
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"" + Build.VERSION.SDK_INT);
    return;
  }
  int dp4=DisplayUtils.dpToPx(mTopPagerContainer.getContext(),4);
  LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  layoutParams.setMargins(0,0,dp4,0);
  mTopPagerContainer.setLayoutParams(layoutParams);
  mTopPagerContainer.removeAllViews();
  mTopPagerContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mTopPagerContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      if (!isAdded()) {
        return;
      }
      StringBuilder dataToLoad=new StringBuilder();
      for (int i=0; i < countries.size(); i++) {
        final GeoviewModel currentCountry=countries.get(i);
        dataToLoad.append(""String_Node_Str"").append(currentCountry.getCountryFullName()).append(""String_Node_Str"").append(currentCountry.getViews()).append(""String_Node_Str"");
      }
      String label=getResources().getString(getTotalsLabelResId());
      String htmlPage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + label + ""String_Node_Str""+ dataToLoad+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      WebView webView=new WebView(getActivity());
      mTopPagerContainer.addView(webView);
      int width=mTopPagerContainer.getWidth();
      int height=width * 3 / 4;
      LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)webView.getLayoutParams();
      params.width=WebView.LayoutParams.MATCH_PARENT;
      params.height=height;
      webView.setLayoutParams(params);
      webView.setWebViewClient(new MyWebViewClient());
      webView.getSettings().setJavaScriptEnabled(true);
      webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
      webView.loadData(htmlPage,""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  mTopPagerContainer.setVisibility(View.VISIBLE);
}","private void showMap(final List<GeoviewModel> countries){
  if (!isAdded()) {
    return;
  }
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR2) {
    AppLog.w(AppLog.T.STATS,""String_Node_Str"" + Build.VERSION.SDK_INT);
    return;
  }
  int dp4=DisplayUtils.dpToPx(mTopPagerContainer.getContext(),4);
  LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  MarginLayoutParamsCompat.setMarginEnd(layoutParams,dp4);
  mTopPagerContainer.setLayoutParams(layoutParams);
  mTopPagerContainer.removeAllViews();
  mTopPagerContainer.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mTopPagerContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      if (!isAdded()) {
        return;
      }
      StringBuilder dataToLoad=new StringBuilder();
      for (int i=0; i < countries.size(); i++) {
        final GeoviewModel currentCountry=countries.get(i);
        dataToLoad.append(""String_Node_Str"").append(currentCountry.getCountryFullName()).append(""String_Node_Str"").append(currentCountry.getViews()).append(""String_Node_Str"");
      }
      String label=getResources().getString(getTotalsLabelResId());
      String htmlPage=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + label + ""String_Node_Str""+ dataToLoad+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      WebView webView=new WebView(getActivity());
      mTopPagerContainer.addView(webView);
      int width=mTopPagerContainer.getWidth();
      int height=width * 3 / 4;
      LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)webView.getLayoutParams();
      params.width=WebView.LayoutParams.MATCH_PARENT;
      params.height=height;
      webView.setLayoutParams(params);
      webView.setWebViewClient(new MyWebViewClient());
      webView.getSettings().setJavaScriptEnabled(true);
      webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
      webView.loadData(htmlPage,""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  mTopPagerContainer.setVisibility(View.VISIBLE);
}",0.9865650691798676
13579,"@Provides @Singleton public static ViewModelProvider.Factory provideViewModelFactory(ViewModelSubComponent.Builder subComponentBuilder){
  ArrayMap<Class<? extends ViewModel>,Provider<ViewModel>> viewModelMap=new ArrayMap<>();
  final ViewModelSubComponent subComp=subComponentBuilder.build();
  viewModelMap.put(PluginBrowserViewModel.class,new Provider<ViewModel>(){
    @Override public ViewModel get(){
      return subComp.pluginBrowserViewModel();
    }
  }
);
  return new ViewModelFactory(viewModelMap);
}","@Provides @Singleton static ViewModelProvider.Factory provideViewModelFactory(ViewModelSubComponent.Builder subComponentBuilder){
  ArrayMap<Class<? extends ViewModel>,Provider<ViewModel>> viewModelMap=new ArrayMap<>();
  final ViewModelSubComponent subComp=subComponentBuilder.build();
  viewModelMap.put(PluginBrowserViewModel.class,new Provider<ViewModel>(){
    @Override public ViewModel get(){
      return subComp.pluginBrowserViewModel();
    }
  }
);
  return new ViewModelFactory(viewModelMap);
}",0.9931305201177624
13580,"@Inject public ViewModelFactory(ArrayMap<Class<? extends ViewModel>,Provider<ViewModel>> viewModelsMap){
  this.mViewModelsMap=viewModelsMap;
}","@Inject ViewModelFactory(ArrayMap<Class<? extends ViewModel>,Provider<ViewModel>> viewModelsMap){
  this.mViewModelsMap=viewModelsMap;
}",0.974910394265233
13581,"@NonNull @Override public <T extends ViewModel>T create(@NonNull Class<T> viewModelClass){
  Provider<? extends ViewModel> creator=mViewModelsMap.get(viewModelClass);
  if (creator == null) {
    for (    Map.Entry<Class<? extends ViewModel>,Provider<ViewModel>> entry : mViewModelsMap.entrySet()) {
      if (viewModelClass.isAssignableFrom(entry.getKey())) {
        creator=entry.getValue();
        break;
      }
    }
  }
  if (creator == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + viewModelClass + ""String_Node_Str""+ ""String_Node_Str"");
  }
  return (T)creator.get();
}","@SuppressWarnings(""String_Node_Str"") @NonNull @Override public <T extends ViewModel>T create(@NonNull Class<T> viewModelClass){
  Provider<? extends ViewModel> creator=mViewModelsMap.get(viewModelClass);
  if (creator == null) {
    for (    Map.Entry<Class<? extends ViewModel>,Provider<ViewModel>> entry : mViewModelsMap.entrySet()) {
      if (viewModelClass.isAssignableFrom(entry.getKey())) {
        creator=entry.getValue();
        break;
      }
    }
  }
  if (creator == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + viewModelClass + ""String_Node_Str""+ ""String_Node_Str"");
  }
  return (T)creator.get();
}",0.9700889248181084
13582,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mViewModel=ViewModelProviders.of(getActivity()).get(PluginBrowserViewModel.class);
  mListType=(PluginListType)getArguments().getSerializable(ARG_LIST_TYPE);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getActivity().getApplication()).component().inject(this);
  mViewModel=ViewModelProviders.of(getActivity(),mViewModelFactory).get(PluginBrowserViewModel.class);
  mListType=(PluginListType)getArguments().getSerializable(ARG_LIST_TYPE);
}",0.8514851485148515
13583,"private void showProgress(boolean show){
  findViewById(R.id.progress).setVisibility(show ? View.VISIBLE : View.GONE);
}","protected void showProgress(boolean show){
  findViewById(R.id.progress).setVisibility(show ? View.VISIBLE : View.GONE);
}",0.9669421487603306
13584,"private void reloadPluginWithSlug(@NonNull String slug){
  int index=mItems.indexOfPluginWithSlug(slug);
  if (index != -1) {
    notifyItemChanged(index);
  }
}","void reloadPluginWithSlug(@NonNull String slug){
  int index=mItems.indexOfPluginWithSlug(slug);
  if (index != -1) {
    notifyItemChanged(index);
  }
}",0.9745222929936306
13585,"private void reloadPluginAdapterAndVisibility(@NonNull PluginListType pluginType,List<?> plugins){
  PluginBrowserAdapter adapter;
  View cardView;
switch (pluginType) {
case POPULAR:
    adapter=(PluginBrowserAdapter)mPopularPluginsRecycler.getAdapter();
  cardView=findViewById(R.id.popular_plugins_cardview);
break;
case NEW:
adapter=(PluginBrowserAdapter)mNewPluginsRecycler.getAdapter();
cardView=findViewById(R.id.new_plugins_cardview);
break;
case SEARCH:
return;
default :
adapter=(PluginBrowserAdapter)mSitePluginsRecycler.getAdapter();
cardView=findViewById(R.id.installed_plugins_cardview);
break;
}
adapter.setPlugins(plugins);
int newVisibility=plugins.size() > 0 ? View.VISIBLE : View.GONE;
int oldVisibility=cardView.getVisibility();
if (newVisibility == View.VISIBLE && oldVisibility != View.VISIBLE) {
AniUtils.fadeIn(cardView,AniUtils.Duration.MEDIUM);
}
 else if (newVisibility != View.VISIBLE && oldVisibility == View.VISIBLE) {
AniUtils.fadeOut(cardView,AniUtils.Duration.MEDIUM);
}
}","protected void reloadPluginAdapterAndVisibility(@NonNull PluginListType pluginType,List<?> plugins){
  PluginBrowserAdapter adapter;
  View cardView;
switch (pluginType) {
case POPULAR:
    adapter=(PluginBrowserAdapter)mPopularPluginsRecycler.getAdapter();
  cardView=findViewById(R.id.popular_plugins_cardview);
break;
case NEW:
adapter=(PluginBrowserAdapter)mNewPluginsRecycler.getAdapter();
cardView=findViewById(R.id.new_plugins_cardview);
break;
case SEARCH:
return;
default :
adapter=(PluginBrowserAdapter)mSitePluginsRecycler.getAdapter();
cardView=findViewById(R.id.installed_plugins_cardview);
break;
}
adapter.setPlugins(plugins);
int newVisibility=plugins.size() > 0 ? View.VISIBLE : View.GONE;
int oldVisibility=cardView.getVisibility();
if (newVisibility == View.VISIBLE && oldVisibility != View.VISIBLE) {
AniUtils.fadeIn(cardView,AniUtils.Duration.MEDIUM);
}
 else if (newVisibility != View.VISIBLE && oldVisibility == View.VISIBLE) {
AniUtils.fadeOut(cardView,AniUtils.Duration.MEDIUM);
}
}",0.9940357852882704
13586,"private void showListFragment(@NonNull PluginListType listType){
  PluginListFragment listFragment=getListFragment();
  if (listFragment != null) {
    listFragment.setListType(listType);
  }
 else {
    listFragment=PluginListFragment.newInstance(mViewModel.getSite(),listType);
    getSupportFragmentManager().beginTransaction().add(R.id.fragment_container,listFragment,PluginListFragment.TAG).addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).commit();
  }
  mViewModel.setTitle(getTitleForListType(listType));
}","protected void showListFragment(@NonNull PluginListType listType){
  PluginListFragment listFragment=getListFragment();
  if (listFragment != null) {
    listFragment.setListType(listType);
  }
 else {
    listFragment=PluginListFragment.newInstance(mViewModel.getSite(),listType);
    getSupportFragmentManager().beginTransaction().add(R.id.fragment_container,listFragment,PluginListFragment.TAG).addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).commit();
  }
  mViewModel.setTitle(getTitleForListType(listType));
}",0.9889705882352942
13587,"private void showProgress(boolean show){
  if (isAdded()) {
    getView().findViewById(R.id.progress).setVisibility(show ? View.VISIBLE : View.GONE);
  }
}","protected void showProgress(boolean show){
  if (isAdded() && getView() != null) {
    getView().findViewById(R.id.progress).setVisibility(show ? View.VISIBLE : View.GONE);
  }
}",0.9129129129129128
13588,"private void reloadPluginWithSlug(@NonNull String slug){
  int index=mItems.indexOfPluginWithSlug(slug);
  if (index != -1) {
    notifyItemChanged(index);
  }
}","void reloadPluginWithSlug(@NonNull String slug){
  int index=mItems.indexOfPluginWithSlug(slug);
  if (index != -1) {
    notifyItemChanged(index);
  }
}",0.9745222929936306
13589,"private void submitSearch(@Nullable final String query,boolean delayed){
  if (delayed) {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (StringUtils.equals(query,getSearchQuery())) {
          submitSearch(query,false);
        }
      }
    }
,250);
  }
 else {
    clearSearchResults();
    if (shouldSearch()) {
      fetchPlugins(PluginListType.SEARCH,false);
    }
 else {
      mSearchPluginsListStatus.setValue(PluginListStatus.DONE);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void submitSearch(@Nullable final String query,boolean delayed){
  if (delayed) {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (StringUtils.equals(query,getSearchQuery())) {
          submitSearch(query,false);
        }
      }
    }
,250);
  }
 else {
    clearSearchResults();
    if (shouldSearch()) {
      fetchPlugins(PluginListType.SEARCH,false);
    }
 else {
      mSearchPluginsListStatus.setValue(PluginListStatus.DONE);
    }
  }
}",0.9503407984420644
13590,"public static void validateUsernames(final List<String> usernames,String role,long dotComBlogId,final ValidateUsernameCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        JSONObject errors=jsonObject.optJSONObject(""String_Node_Str"");
        int errorredUsernameCount=0;
        if (errors != null) {
          for (          String username : usernames) {
            JSONObject userError=errors.optJSONObject(username);
            if (userError == null) {
              continue;
            }
            errorredUsernameCount++;
switch (userError.optString(""String_Node_Str"")) {
case ""String_Node_Str"":
switch (userError.optString(""String_Node_Str"")) {
case ""String_Node_Str"":
                callback.onUsernameValidation(username,ValidationResult.USER_NOT_FOUND);
              continue;
case ""String_Node_Str"":
            callback.onUsernameValidation(username,ValidationResult.INVALID_EMAIL);
          continue;
      }
    break;
case ""String_Node_Str"":
  callback.onUsernameValidation(username,ValidationResult.ALREADY_MEMBER);
continue;
case ""String_Node_Str"":
callback.onUsernameValidation(username,ValidationResult.ALREADY_FOLLOWING);
continue;
case ""String_Node_Str"":
callback.onUsernameValidation(username,ValidationResult.BLOCKED_INVITES);
continue;
}
callback.onError();
callback.onValidationFinished();
return;
}
}
JSONArray succeededUsernames=jsonObject.optJSONArray(""String_Node_Str"");
if (succeededUsernames == null) {
callback.onError();
callback.onValidationFinished();
return;
}
int succeededUsernameCount=0;
for (int i=0; i < succeededUsernames.length(); i++) {
String username=succeededUsernames.optString(i);
if (usernames.contains(username)) {
succeededUsernameCount++;
callback.onUsernameValidation(username,ValidationResult.USER_FOUND);
}
}
if (errorredUsernameCount + succeededUsernameCount != usernames.size()) {
callback.onError();
callback.onValidationFinished();
}
callback.onValidationFinished();
}
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.e(AppLog.T.API,volleyError);
if (callback != null) {
callback.onError();
}
}
}
;
String path=String.format(Locale.US,""String_Node_Str"",dotComBlogId);
Map<String,String> params=new HashMap<>();
for (String username : usernames) {
params.put(""String_Node_Str"" + username + ""String_Node_Str"",username);
}
params.put(""String_Node_Str"",role);
WordPress.getRestClientUtilsV1_1().post(path,params,null,listener,errorListener);
}","public static void validateUsernames(final List<String> usernames,String role,long dotComBlogId,final ValidateUsernameCallback callback){
  com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      if (jsonObject != null && callback != null) {
        JSONObject errors=jsonObject.optJSONObject(""String_Node_Str"");
        int errorredUsernameCount=0;
        if (errors != null) {
          for (          String username : usernames) {
            JSONObject userError=errors.optJSONObject(username);
            if (userError == null) {
              continue;
            }
            errorredUsernameCount++;
switch (userError.optString(""String_Node_Str"")) {
case ""String_Node_Str"":
switch (userError.optString(""String_Node_Str"")) {
case ""String_Node_Str"":
                callback.onUsernameValidation(username,ValidationResult.INVALID_EMAIL);
              continue;
case ""String_Node_Str"":
default :
            callback.onUsernameValidation(username,ValidationResult.USER_NOT_FOUND);
          continue;
      }
case ""String_Node_Str"":
    callback.onUsernameValidation(username,ValidationResult.ALREADY_MEMBER);
  continue;
case ""String_Node_Str"":
callback.onUsernameValidation(username,ValidationResult.ALREADY_FOLLOWING);
continue;
case ""String_Node_Str"":
callback.onUsernameValidation(username,ValidationResult.BLOCKED_INVITES);
continue;
}
callback.onError();
callback.onValidationFinished();
return;
}
}
JSONArray succeededUsernames=jsonObject.optJSONArray(""String_Node_Str"");
if (succeededUsernames == null) {
callback.onError();
callback.onValidationFinished();
return;
}
int succeededUsernameCount=0;
for (int i=0; i < succeededUsernames.length(); i++) {
String username=succeededUsernames.optString(i);
if (usernames.contains(username)) {
succeededUsernameCount++;
callback.onUsernameValidation(username,ValidationResult.USER_FOUND);
}
}
if (errorredUsernameCount + succeededUsernameCount != usernames.size()) {
callback.onError();
callback.onValidationFinished();
}
callback.onValidationFinished();
}
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.e(AppLog.T.API,volleyError);
if (callback != null) {
callback.onError();
}
}
}
;
String path=String.format(Locale.US,""String_Node_Str"",dotComBlogId);
Map<String,String> params=new HashMap<>();
for (String username : usernames) {
params.put(""String_Node_Str"" + username + ""String_Node_Str"",username);
}
params.put(""String_Node_Str"",role);
WordPress.getRestClientUtilsV1_1().post(path,params,null,listener,errorListener);
}",0.9457393250046616
13591,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginDirectorySearched(PluginStore.OnPluginDirectorySearched event){
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"");
    mSearchPluginsListStatus.setValue(PluginListStatus.ERROR);
    return;
  }
  setSearchResults(event.searchTerm,event.plugins);
  mSearchPluginsListStatus.setValue(PluginListStatus.DONE);
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginDirectorySearched(PluginStore.OnPluginDirectorySearched event){
  if (!mSearchQuery.equals(event.searchTerm)) {
    return;
  }
  if (event.isError()) {
    AppLog.e(AppLog.T.PLUGINS,""String_Node_Str"");
    mSearchPluginsListStatus.setValue(PluginListStatus.ERROR);
    return;
  }
  mSearchResults.setValue(event.plugins);
  mSearchPluginsListStatus.setValue(PluginListStatus.DONE);
}",0.8942731277533039
13592,"@Override public void onChanged(@Nullable String slug){
  if (!TextUtils.isEmpty(slug) && mRecycler.getAdapter() != null) {
    showProgress(true);
    ((PluginListAdapter)mRecycler.getAdapter()).reloadPluginWithSlug(slug);
  }
}","@Override public void onChanged(@Nullable String slug){
  if (!TextUtils.isEmpty(slug) && mRecycler.getAdapter() != null) {
    ((PluginListAdapter)mRecycler.getAdapter()).reloadPluginWithSlug(slug);
  }
}",0.9447004608294932
13593,"private void setupObservers(){
  mViewModel.getSitePlugins().observe(this,new Observer<List<SitePluginModel>>(){
    @Override public void onChanged(    @Nullable final List<SitePluginModel> sitePlugins){
      if (mListType == PluginListType.SITE) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getNewPlugins().observe(this,new Observer<List<WPOrgPluginModel>>(){
    @Override public void onChanged(    @Nullable final List<WPOrgPluginModel> newPlugins){
      if (mListType == PluginListType.NEW) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getPopularPlugins().observe(this,new Observer<List<WPOrgPluginModel>>(){
    @Override public void onChanged(    @Nullable final List<WPOrgPluginModel> popularPlugins){
      if (mListType == PluginListType.POPULAR) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getSearchResults().observe(this,new Observer<List<WPOrgPluginModel>>(){
    @Override public void onChanged(    @Nullable final List<WPOrgPluginModel> popularPlugins){
      if (mListType == PluginListType.SEARCH) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getNewPluginsListStatus().observe(this,new Observer<PluginBrowserViewModel.PluginListStatus>(){
    @Override public void onChanged(    @Nullable PluginBrowserViewModel.PluginListStatus listStatus){
      if (mListType == PluginListType.NEW) {
        showProgress(listStatus == PluginBrowserViewModel.PluginListStatus.FETCHING || listStatus == PluginBrowserViewModel.PluginListStatus.LOADING_MORE);
      }
    }
  }
);
  mViewModel.getPopularPluginsListStatus().observe(this,new Observer<PluginBrowserViewModel.PluginListStatus>(){
    @Override public void onChanged(    @Nullable PluginBrowserViewModel.PluginListStatus listStatus){
      if (mListType == PluginListType.POPULAR) {
        showProgress(listStatus == PluginBrowserViewModel.PluginListStatus.FETCHING || listStatus == PluginBrowserViewModel.PluginListStatus.LOADING_MORE);
      }
    }
  }
);
  mViewModel.getSearchPluginsListStatus().observe(this,new Observer<PluginBrowserViewModel.PluginListStatus>(){
    @Override public void onChanged(    @Nullable PluginBrowserViewModel.PluginListStatus listStatus){
      if (mListType == PluginListType.SEARCH) {
        showProgress(listStatus == PluginBrowserViewModel.PluginListStatus.FETCHING || listStatus == PluginBrowserViewModel.PluginListStatus.LOADING_MORE);
        if (listStatus == PluginBrowserViewModel.PluginListStatus.ERROR) {
          ToastUtils.showToast(getActivity(),R.string.plugin_search_error);
        }
        showEmptyView(mViewModel.shouldShowEmptySearchResultsView());
      }
    }
  }
);
  mViewModel.getLastUpdatedWpOrgPluginSlug().observe(this,new Observer<String>(){
    @Override public void onChanged(    @Nullable String slug){
      if (!TextUtils.isEmpty(slug) && mRecycler.getAdapter() != null) {
        showProgress(true);
        ((PluginListAdapter)mRecycler.getAdapter()).reloadPluginWithSlug(slug);
      }
    }
  }
);
}","private void setupObservers(){
  mViewModel.getSitePlugins().observe(this,new Observer<List<SitePluginModel>>(){
    @Override public void onChanged(    @Nullable final List<SitePluginModel> sitePlugins){
      if (mListType == PluginListType.SITE) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getNewPlugins().observe(this,new Observer<List<WPOrgPluginModel>>(){
    @Override public void onChanged(    @Nullable final List<WPOrgPluginModel> newPlugins){
      if (mListType == PluginListType.NEW) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getPopularPlugins().observe(this,new Observer<List<WPOrgPluginModel>>(){
    @Override public void onChanged(    @Nullable final List<WPOrgPluginModel> popularPlugins){
      if (mListType == PluginListType.POPULAR) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getSearchResults().observe(this,new Observer<List<WPOrgPluginModel>>(){
    @Override public void onChanged(    @Nullable final List<WPOrgPluginModel> popularPlugins){
      if (mListType == PluginListType.SEARCH) {
        reloadPlugins();
      }
    }
  }
);
  mViewModel.getNewPluginsListStatus().observe(this,new Observer<PluginBrowserViewModel.PluginListStatus>(){
    @Override public void onChanged(    @Nullable PluginBrowserViewModel.PluginListStatus listStatus){
      if (mListType == PluginListType.NEW) {
        showProgress(listStatus == PluginBrowserViewModel.PluginListStatus.FETCHING || listStatus == PluginBrowserViewModel.PluginListStatus.LOADING_MORE);
      }
    }
  }
);
  mViewModel.getPopularPluginsListStatus().observe(this,new Observer<PluginBrowserViewModel.PluginListStatus>(){
    @Override public void onChanged(    @Nullable PluginBrowserViewModel.PluginListStatus listStatus){
      if (mListType == PluginListType.POPULAR) {
        showProgress(listStatus == PluginBrowserViewModel.PluginListStatus.FETCHING || listStatus == PluginBrowserViewModel.PluginListStatus.LOADING_MORE);
      }
    }
  }
);
  mViewModel.getSearchPluginsListStatus().observe(this,new Observer<PluginBrowserViewModel.PluginListStatus>(){
    @Override public void onChanged(    @Nullable PluginBrowserViewModel.PluginListStatus listStatus){
      if (mListType == PluginListType.SEARCH) {
        showProgress(listStatus == PluginBrowserViewModel.PluginListStatus.FETCHING || listStatus == PluginBrowserViewModel.PluginListStatus.LOADING_MORE);
        if (listStatus == PluginBrowserViewModel.PluginListStatus.ERROR) {
          ToastUtils.showToast(getActivity(),R.string.plugin_search_error);
        }
        showEmptyView(mViewModel.shouldShowEmptySearchResultsView());
      }
    }
  }
);
  mViewModel.getLastUpdatedWpOrgPluginSlug().observe(this,new Observer<String>(){
    @Override public void onChanged(    @Nullable String slug){
      if (!TextUtils.isEmpty(slug) && mRecycler.getAdapter() != null) {
        ((PluginListAdapter)mRecycler.getAdapter()).reloadPluginWithSlug(slug);
      }
    }
  }
);
}",0.9953255425709516
13594,"@Override public void onDetach(){
  super.onDetach();
  mLoginListener=null;
  if (mGoogleApiClient.isConnected()) {
    mGoogleApiClient.stopAutoManage(getActivity());
    mGoogleApiClient.disconnect();
  }
}","@Override public void onDetach(){
  super.onDetach();
  mLoginListener=null;
  mGoogleApiClient.stopAutoManage(getActivity());
  if (mGoogleApiClient.isConnected()) {
    mGoogleApiClient.disconnect();
  }
}",0.7548076923076923
13595,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getActivity().getApplication()).component().inject(this);
  setRetainInstance(true);
  addPreferencesFromResource(R.xml.app_settings);
  mLanguagePreference=(DetailListPreference)findPreference(getString(R.string.pref_key_language));
  mLanguagePreference.setOnPreferenceChangeListener(this);
  findPreference(getString(R.string.pref_key_language)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_device_settings)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_app_about)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_oss_licenses)).setOnPreferenceClickListener(this);
  mOptimizedImage=(WPSwitchPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_optimize_image,this);
  mImageMaxSizePref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_image_width,this);
  mImageQualityPref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_image_quality,this);
  mOptimizedVideo=(WPSwitchPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_optimize_video,this);
  mVideoWidthPref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_video_width,this);
  mVideoEncorderBitratePref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_video_encoder_bitrate,this);
  mOptimizedImage.setChecked(AppPrefs.isImageOptimize());
  setDetailListPreferenceValue(mImageMaxSizePref,String.valueOf(AppPrefs.getImageOptimizeMaxSize()),getLabelForImageMaxSizeValue(AppPrefs.getImageOptimizeMaxSize()));
  setDetailListPreferenceValue(mImageQualityPref,String.valueOf(AppPrefs.getImageOptimizeQuality()),getLabelForImageQualityValue(AppPrefs.getImageOptimizeQuality()));
  mOptimizedVideo.setChecked(AppPrefs.isVideoOptimize());
  setDetailListPreferenceValue(mVideoWidthPref,String.valueOf(AppPrefs.getVideoOptimizeWidth()),getLabelForVideoMaxWidthValue(AppPrefs.getVideoOptimizeWidth()));
  setDetailListPreferenceValue(mVideoEncorderBitratePref,String.valueOf(AppPrefs.getVideoOptimizeQuality()),getLabelForVideoEncoderBitrateValue(AppPrefs.getVideoOptimizeQuality()));
  if (!WPMediaUtils.isVideoOptimizationAvailable()) {
    WPPrefUtils.removePreference(this,R.string.pref_key_optimize_media,R.string.pref_key_optimize_video);
    WPPrefUtils.removePreference(this,R.string.pref_key_optimize_media,R.string.pref_key_site_video_width);
    WPPrefUtils.removePreference(this,R.string.pref_key_optimize_media,R.string.pref_key_site_video_encoder_bitrate);
  }
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  updateEditorSettings();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getActivity().getApplication()).component().inject(this);
  setRetainInstance(true);
  addPreferencesFromResource(R.xml.app_settings);
  findPreference(getString(R.string.pref_key_send_usage)).setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (newValue == null)       return false;
      AnalyticsTracker.flush();
      AnalyticsTracker.setHasUserOptedOut(!(boolean)newValue);
      return true;
    }
  }
);
  mLanguagePreference=(DetailListPreference)findPreference(getString(R.string.pref_key_language));
  mLanguagePreference.setOnPreferenceChangeListener(this);
  findPreference(getString(R.string.pref_key_language)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_device_settings)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_app_about)).setOnPreferenceClickListener(this);
  findPreference(getString(R.string.pref_key_oss_licenses)).setOnPreferenceClickListener(this);
  mOptimizedImage=(WPSwitchPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_optimize_image,this);
  mImageMaxSizePref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_image_width,this);
  mImageQualityPref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_image_quality,this);
  mOptimizedVideo=(WPSwitchPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_optimize_video,this);
  mVideoWidthPref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_video_width,this);
  mVideoEncorderBitratePref=(DetailListPreference)WPPrefUtils.getPrefAndSetChangeListener(this,R.string.pref_key_site_video_encoder_bitrate,this);
  mOptimizedImage.setChecked(AppPrefs.isImageOptimize());
  setDetailListPreferenceValue(mImageMaxSizePref,String.valueOf(AppPrefs.getImageOptimizeMaxSize()),getLabelForImageMaxSizeValue(AppPrefs.getImageOptimizeMaxSize()));
  setDetailListPreferenceValue(mImageQualityPref,String.valueOf(AppPrefs.getImageOptimizeQuality()),getLabelForImageQualityValue(AppPrefs.getImageOptimizeQuality()));
  mOptimizedVideo.setChecked(AppPrefs.isVideoOptimize());
  setDetailListPreferenceValue(mVideoWidthPref,String.valueOf(AppPrefs.getVideoOptimizeWidth()),getLabelForVideoMaxWidthValue(AppPrefs.getVideoOptimizeWidth()));
  setDetailListPreferenceValue(mVideoEncorderBitratePref,String.valueOf(AppPrefs.getVideoOptimizeQuality()),getLabelForVideoEncoderBitrateValue(AppPrefs.getVideoOptimizeQuality()));
  if (!WPMediaUtils.isVideoOptimizationAvailable()) {
    WPPrefUtils.removePreference(this,R.string.pref_key_optimize_media,R.string.pref_key_optimize_video);
    WPPrefUtils.removePreference(this,R.string.pref_key_optimize_media,R.string.pref_key_site_video_width);
    WPPrefUtils.removePreference(this,R.string.pref_key_optimize_media,R.string.pref_key_site_video_encoder_bitrate);
  }
  mSettings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  updateEditorSettings();
}",0.933792199278925
13596,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  updateLanguagePreference(getResources().getConfiguration().locale.toString());
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  updateLanguagePreference(getResources().getConfiguration().locale.toString());
  AnalyticsTracker.flush();
}",0.933649289099526
13597,"public static void init(Context context){
  loadPrefHasUserOptedOut(context);
}","public static void init(Context context){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean hasUserOptedOut=!prefs.getBoolean(""String_Node_Str"",true);
  if (hasUserOptedOut != mHasUserOptedOut) {
    mHasUserOptedOut=hasUserOptedOut;
  }
}",0.3722222222222222
13598,"public void setToolbarLeftPadding(int paddingLeft){
  mToolbar.setPadding(paddingLeft,mToolbar.getPaddingTop(),mToolbar.getPaddingRight(),mToolbar.getPaddingBottom());
}","public void setToolbarLeftPadding(int paddingLeft){
  ViewCompat.setPaddingRelative(mToolbar,paddingLeft,mToolbar.getPaddingTop(),mToolbar.getPaddingRight(),mToolbar.getPaddingBottom());
}",0.9131652661064426
13599,"public void setToolbarRightPadding(int paddingRight){
  mToolbar.setPadding(mToolbar.getPaddingLeft(),mToolbar.getPaddingTop(),paddingRight,mToolbar.getPaddingBottom());
}","public void setToolbarRightPadding(int paddingRight){
  ViewCompat.setPaddingRelative(mToolbar,mToolbar.getPaddingLeft(),mToolbar.getPaddingTop(),paddingRight,mToolbar.getPaddingBottom());
}",0.9141274238227148
13600,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final View view;
  if (convertView == null) {
    view=mInflater.inflate(R.layout.filter_spinner_item,parent,false);
    final TextView text=(TextView)view.findViewById(R.id.text);
    FilterCriteria selectedCriteria=(FilterCriteria)getItem(position);
    text.setText(selectedCriteria.getLabel());
    if (mSpinnerTextColor != 0) {
      text.setTextColor(mSpinnerTextColor);
    }
    if (mSpinnerDrawableRight != 0) {
      text.setCompoundDrawablesWithIntrinsicBounds(0,0,mSpinnerDrawableRight,0);
      text.setCompoundDrawablePadding(getResources().getDimensionPixelSize(R.dimen.margin_medium));
      text.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
    }
  }
 else {
    view=convertView;
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final View view;
  if (convertView == null) {
    view=mInflater.inflate(R.layout.filter_spinner_item,parent,false);
    final TextView text=(TextView)view.findViewById(R.id.text);
    FilterCriteria selectedCriteria=(FilterCriteria)getItem(position);
    text.setText(selectedCriteria.getLabel());
    if (mSpinnerTextColor != 0) {
      text.setTextColor(mSpinnerTextColor);
    }
    if (mSpinnerDrawableRight != 0) {
      text.setCompoundDrawablePadding(getResources().getDimensionPixelSize(R.dimen.margin_medium));
      text.setGravity(Gravity.CENTER_VERTICAL | Gravity.START);
    }
  }
 else {
    view=convertView;
  }
  return view;
}",0.9425587467362924
13601,"public void setToolbarLeftAndRightPadding(int paddingLeft,int paddingRight){
  mToolbar.setPadding(paddingLeft,mToolbar.getPaddingTop(),paddingRight,mToolbar.getPaddingBottom());
}","public void setToolbarLeftAndRightPadding(int paddingLeft,int paddingRight){
  ViewCompat.setPaddingRelative(mToolbar,paddingLeft,mToolbar.getPaddingTop(),paddingRight,mToolbar.getPaddingBottom());
}",0.9182058047493404
13602,"@Override public void onResume(){
  super.onResume();
  refreshSelectedSiteDetails();
  if (ServiceUtils.isServiceRunning(getActivity(),StatsService.class)) {
    getActivity().stopService(new Intent(getActivity(),StatsService.class));
  }
  long delayMs=getResources().getInteger(R.integer.fab_animation_delay);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (isAdded() && (mFabView.getVisibility() != View.VISIBLE || mFabView.getTranslationY() != 0)) {
        AniUtils.showFab(mFabView,true);
      }
    }
  }
,delayMs);
}","@Override public void onResume(){
  super.onResume();
  refreshSelectedSiteDetails();
  if (ServiceUtils.isServiceRunning(getActivity(),StatsService.class)) {
    getActivity().stopService(new Intent(getActivity(),StatsService.class));
  }
  if (getSelectedSite() != null) {
    long delayMs=getResources().getInteger(R.integer.fab_animation_delay);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (isAdded() && (mFabView.getVisibility() != View.VISIBLE || mFabView.getTranslationY() != 0)) {
          AniUtils.showFab(mFabView,true);
        }
      }
    }
,delayMs);
  }
}",0.9535864978902954
13603,"/** 
 * Save the Views state manually so multiple instances of the compound View can exist in the same layout.
 */
@Override public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putParcelable(KEY_SUPER_STATE,saveViewsState());
  return bundle;
}","/** 
 * Save the Views state manually so multiple instances of the compound View can exist in the same layout.
 */
@Override public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  Parcelable editTextState=mEditText.onSaveInstanceState();
  bundle.putParcelable(KEY_SUPER_STATE,new SavedState(super.onSaveInstanceState(),editTextState));
  return bundle;
}",0.8031007751937984
13604,"@Override public void onResume(){
  super.onResume();
  refreshSelectedSiteDetails();
  if (ServiceUtils.isServiceRunning(getActivity(),StatsService.class)) {
    getActivity().stopService(new Intent(getActivity(),StatsService.class));
  }
  long delayMs=getResources().getInteger(R.integer.fab_animation_delay);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (isAdded() && (mFabView.getVisibility() != View.VISIBLE || mFabView.getTranslationY() != 0)) {
        AniUtils.showFab(mFabView,true);
      }
    }
  }
,delayMs);
}","@Override public void onResume(){
  super.onResume();
  refreshSelectedSiteDetails();
  if (ServiceUtils.isServiceRunning(getActivity(),StatsService.class)) {
    getActivity().stopService(new Intent(getActivity(),StatsService.class));
  }
  if (getSelectedSite() != null) {
    long delayMs=getResources().getInteger(R.integer.fab_animation_delay);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (isAdded() && (mFabView.getVisibility() != View.VISIBLE || mFabView.getTranslationY() != 0)) {
          AniUtils.showFab(mFabView,true);
        }
      }
    }
,delayMs);
  }
}",0.9535864978902954
13605,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  SiteModel site=getSelectedSite();
  if (site != null && event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,site,event.successMessage);
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  EventBus.getDefault().removeStickyEvent(event);
  SiteModel site=getSelectedSite();
  if (site != null && event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,site,event.successMessage);
  }
}",0.9417249417249416
13606,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),false,event.mediaModelList,mSite,event.successMessage);
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(sticky=true,threadMode=ThreadMode.MAIN) public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  EventBus.getDefault().removeStickyEvent(event);
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),false,event.mediaModelList,mSite,event.successMessage);
    updateMediaGridForTheseMedia(event.mediaModelList);
  }
}",0.7558282208588957
13607,"@Override public void onStart(){
  super.onStart();
  registerReceiver(mReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
  mDispatcher.register(this);
  EventBus.getDefault().register(this);
}","@Override public void onStart(){
  super.onStart();
  registerReceiver(mReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
  mDispatcher.register(this);
  EventBus.getDefault().registerSticky(this);
}",0.986046511627907
13608,"private String buildSuccessMessageForMedia(int mediaItemsUploaded){
  String successMessage=String.format(mContext.getString(R.string.media_all_files_uploaded_successfully),mediaItemsUploaded);
  return successMessage;
}","private String buildSuccessMessageForMedia(int mediaItemsUploaded){
  String successMessage=mediaItemsUploaded == 1 ? mContext.getString(R.string.media_file_uploaded) : String.format(mContext.getString(R.string.media_all_files_uploaded_successfully),mediaItemsUploaded);
  return successMessage;
}",0.851063829787234
13609,"void updateNotificationSuccessForMedia(@NonNull List<MediaModel> mediaList,@NonNull SiteModel site){
  if (mediaList != null && !mediaList.isEmpty()) {
    String snackbarMessage=buildSnackbarSuccessMessageForMedia(mediaList.size());
    EventBus.getDefault().post(new UploadService.UploadMediaSuccessEvent(mediaList,snackbarMessage));
  }
  if (!WordPress.sAppIsInTheBackground) {
    return;
  }
  AppLog.d(AppLog.T.MEDIA,""String_Node_Str"");
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForMedia(site);
  Intent notificationIntent=new Intent(mContext,MediaBrowserActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(R.drawable.ic_my_sites_24dp);
  notificationBuilder.setColor(mContext.getResources().getColor(R.color.blue_wordpress));
  String notificationTitle=buildSuccessMessageForMedia(mediaList.size());
  String notificationMessage=TextUtils.isEmpty(site.getName()) ? mContext.getString(R.string.untitled) : site.getName();
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(notificationMessage);
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (mediaList != null && !mediaList.isEmpty()) {
    ArrayList<MediaModel> mediaToIncludeInPost=new ArrayList<>(mediaList);
    Intent writePostIntent=new Intent(mContext,EditPostActivity.class);
    writePostIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
    writePostIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    writePostIntent.putExtra(WordPress.SITE,site);
    writePostIntent.putExtra(EditPostActivity.EXTRA_IS_PAGE,false);
    writePostIntent.putExtra(EditPostActivity.EXTRA_INSERT_MEDIA,mediaToIncludeInPost);
    writePostIntent.setAction(String.valueOf(notificationId));
    PendingIntent actionPendingIntent=PendingIntent.getActivity(mContext,RequestCodes.EDIT_POST,writePostIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    notificationBuilder.addAction(0,mContext.getString(R.string.media_files_uploaded_write_post),actionPendingIntent);
  }
  doNotify(notificationId,notificationBuilder.build());
}","void updateNotificationSuccessForMedia(@NonNull List<MediaModel> mediaList,@NonNull SiteModel site){
  if (mediaList != null && !mediaList.isEmpty()) {
    String snackbarMessage=buildSnackbarSuccessMessageForMedia(mediaList.size());
    EventBus.getDefault().postSticky(new UploadService.UploadMediaSuccessEvent(mediaList,snackbarMessage));
  }
  if (!WordPress.sAppIsInTheBackground) {
    return;
  }
  AppLog.d(AppLog.T.MEDIA,""String_Node_Str"");
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForMedia(site);
  Intent notificationIntent=new Intent(mContext,MediaBrowserActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(R.drawable.ic_my_sites_24dp);
  notificationBuilder.setColor(mContext.getResources().getColor(R.color.blue_wordpress));
  String notificationTitle=buildSuccessMessageForMedia(mediaList.size());
  String notificationMessage=TextUtils.isEmpty(site.getName()) ? mContext.getString(R.string.untitled) : site.getName();
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(notificationMessage);
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (mediaList != null && !mediaList.isEmpty()) {
    ArrayList<MediaModel> mediaToIncludeInPost=new ArrayList<>(mediaList);
    Intent writePostIntent=new Intent(mContext,EditPostActivity.class);
    writePostIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
    writePostIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    writePostIntent.putExtra(WordPress.SITE,site);
    writePostIntent.putExtra(EditPostActivity.EXTRA_IS_PAGE,false);
    writePostIntent.putExtra(EditPostActivity.EXTRA_INSERT_MEDIA,mediaToIncludeInPost);
    writePostIntent.setAction(String.valueOf(notificationId));
    PendingIntent actionPendingIntent=PendingIntent.getActivity(mContext,RequestCodes.EDIT_POST,writePostIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    notificationBuilder.addAction(0,mContext.getString(R.string.media_files_uploaded_write_post),actionPendingIntent);
  }
  doNotify(notificationId,notificationBuilder.build());
}",0.998825831702544
13610,"void updateNotificationErrorForPost(@NonNull PostModel post,@NonNull SiteModel site,String errorMessage,int overrideMediaNotUploadedCount){
  AppLog.d(AppLog.T.POSTS,""String_Node_Str"" + errorMessage);
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForPost(post);
  Intent notificationIntent=new Intent(mContext,PostsListActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,post.isPage());
  notificationIntent.putExtra(PostsListActivity.EXTRA_TARGET_POST_LOCAL_ID,post.getId());
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(android.R.drawable.stat_notify_error);
  String postTitle=TextUtils.isEmpty(post.getTitle()) ? mContext.getString(R.string.untitled) : post.getTitle();
  String notificationTitle=String.format(mContext.getString(R.string.upload_failed_param),postTitle);
  String newErrorMessage=buildErrorMessageMixed(overrideMediaNotUploadedCount);
  String snackbarMessage=buildSnackbarErrorMessage(newErrorMessage,errorMessage);
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(newErrorMessage);
  notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(newErrorMessage));
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (AppPrefs.isAztecEditorEnabled()) {
    Intent publishIntent=UploadService.getUploadPostServiceIntent(mContext,post,PostUtils.isFirstTimePublish(post),false,true);
    PendingIntent actionPendingIntent=PendingIntent.getService(mContext,0,publishIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    notificationBuilder.addAction(0,mContext.getString(R.string.retry),actionPendingIntent).setColor(mContext.getResources().getColor(R.color.orange_jazzy));
  }
  EventBus.getDefault().post(new UploadService.UploadErrorEvent(post,snackbarMessage));
  doNotify(notificationId,notificationBuilder.build());
}","void updateNotificationErrorForPost(@NonNull PostModel post,@NonNull SiteModel site,String errorMessage,int overrideMediaNotUploadedCount){
  AppLog.d(AppLog.T.POSTS,""String_Node_Str"" + errorMessage);
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForPost(post);
  Intent notificationIntent=new Intent(mContext,PostsListActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,post.isPage());
  notificationIntent.putExtra(PostsListActivity.EXTRA_TARGET_POST_LOCAL_ID,post.getId());
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(android.R.drawable.stat_notify_error);
  String postTitle=TextUtils.isEmpty(post.getTitle()) ? mContext.getString(R.string.untitled) : post.getTitle();
  String notificationTitle=String.format(mContext.getString(R.string.upload_failed_param),postTitle);
  String newErrorMessage=buildErrorMessageMixed(overrideMediaNotUploadedCount);
  String snackbarMessage=buildSnackbarErrorMessage(newErrorMessage,errorMessage);
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(newErrorMessage);
  notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(newErrorMessage));
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (AppPrefs.isAztecEditorEnabled()) {
    Intent publishIntent=UploadService.getUploadPostServiceIntent(mContext,post,PostUtils.isFirstTimePublish(post),false,true);
    PendingIntent actionPendingIntent=PendingIntent.getService(mContext,0,publishIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    notificationBuilder.addAction(0,mContext.getString(R.string.retry),actionPendingIntent).setColor(mContext.getResources().getColor(R.color.orange_jazzy));
  }
  EventBus.getDefault().postSticky(new UploadService.UploadErrorEvent(post,snackbarMessage));
  doNotify(notificationId,notificationBuilder.build());
}",0.9987244897959184
13611,"void updateNotificationErrorForMedia(@NonNull List<MediaModel> mediaList,@NonNull SiteModel site,String errorMessage){
  AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + errorMessage);
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForMedia(site);
  Intent notificationIntent=new Intent(mContext,MediaBrowserActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(android.R.drawable.stat_notify_error);
  String siteName=TextUtils.isEmpty(site.getName()) ? mContext.getString(R.string.untitled) : site.getName();
  String notificationTitle=String.format(mContext.getString(R.string.upload_failed_param),siteName);
  String newErrorMessage=buildErrorMessageForMedia(mediaList.size());
  String snackbarMessage=buildSnackbarErrorMessage(newErrorMessage,errorMessage);
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(newErrorMessage);
  notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(newErrorMessage));
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (mediaList != null && !mediaList.isEmpty()) {
    ArrayList<MediaModel> mediaListToRetry=new ArrayList<>();
    mediaListToRetry.addAll(mediaList);
    Intent publishIntent=UploadService.getUploadMediaServiceIntent(mContext,mediaListToRetry,true);
    PendingIntent actionPendingIntent=PendingIntent.getService(mContext,1,publishIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    notificationBuilder.addAction(0,mContext.getString(R.string.retry),actionPendingIntent).setColor(mContext.getResources().getColor(R.color.orange_jazzy));
  }
  EventBus.getDefault().post(new UploadService.UploadErrorEvent(mediaList,snackbarMessage));
  doNotify(notificationId,notificationBuilder.build());
}","void updateNotificationErrorForMedia(@NonNull List<MediaModel> mediaList,@NonNull SiteModel site,String errorMessage){
  AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + errorMessage);
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForMedia(site);
  Intent notificationIntent=new Intent(mContext,MediaBrowserActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(android.R.drawable.stat_notify_error);
  String siteName=TextUtils.isEmpty(site.getName()) ? mContext.getString(R.string.untitled) : site.getName();
  String notificationTitle=String.format(mContext.getString(R.string.upload_failed_param),siteName);
  String newErrorMessage=buildErrorMessageForMedia(mediaList.size());
  String snackbarMessage=buildSnackbarErrorMessage(newErrorMessage,errorMessage);
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(newErrorMessage);
  notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(newErrorMessage));
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  if (mediaList != null && !mediaList.isEmpty()) {
    ArrayList<MediaModel> mediaListToRetry=new ArrayList<>();
    mediaListToRetry.addAll(mediaList);
    Intent publishIntent=UploadService.getUploadMediaServiceIntent(mContext,mediaListToRetry,true);
    PendingIntent actionPendingIntent=PendingIntent.getService(mContext,1,publishIntent,PendingIntent.FLAG_CANCEL_CURRENT);
    notificationBuilder.addAction(0,mContext.getString(R.string.retry),actionPendingIntent).setColor(mContext.getResources().getColor(R.color.orange_jazzy));
  }
  EventBus.getDefault().postSticky(new UploadService.UploadErrorEvent(mediaList,snackbarMessage));
  doNotify(notificationId,notificationBuilder.build());
}",0.9986601161232692
13612,"private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  String toastText=getString(R.string.no_network_message);
  if (NetworkUtils.isNetworkAvailable(this)) {
    ThemeModel theme=TextUtils.isEmpty(themeId) ? null : mThemeStore.getWpComThemeByThemeId(themeId.replace(""String_Node_Str"",""String_Node_Str""));
    if (theme != null) {
      Map<String,Object> themeProperties=new HashMap<>();
      themeProperties.put(THEME_ID,themeId);
      theme.setActive(isActiveThemeForSite(theme.getThemeId()));
switch (type) {
case PREVIEW:
        AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_PREVIEWED_SITE,mSite,themeProperties);
      break;
case DEMO:
    AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_DEMO_ACCESSED,mSite,themeProperties);
  break;
case DETAILS:
AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_DETAILS_ACCESSED,mSite,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_SUPPORT_ACCESSED,mSite,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,mSite,theme,type);
return;
}
 else {
toastText=getString(R.string.could_not_load_theme);
}
}
ToastUtils.showToast(this,toastText,ToastUtils.Duration.SHORT);
}","private void startWebActivity(String themeId,ThemeWebActivity.ThemeWebActivityType type){
  if (!NetworkUtils.checkConnection(this))   return;
  ThemeModel theme=TextUtils.isEmpty(themeId) ? null : mThemeStore.getWpComThemeByThemeId(themeId.replace(""String_Node_Str"",""String_Node_Str""));
  if (theme == null) {
    theme=mThemeStore.getInstalledThemeByThemeId(mSite,themeId);
    if (theme == null) {
      ToastUtils.showToast(this,R.string.could_not_load_theme);
      return;
    }
  }
  Map<String,Object> themeProperties=new HashMap<>();
  themeProperties.put(THEME_ID,themeId);
  theme.setActive(isActiveThemeForSite(theme.getThemeId()));
switch (type) {
case PREVIEW:
    AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_PREVIEWED_SITE,mSite,themeProperties);
  break;
case DEMO:
AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_DEMO_ACCESSED,mSite,themeProperties);
break;
case DETAILS:
AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_DETAILS_ACCESSED,mSite,themeProperties);
break;
case SUPPORT:
AnalyticsUtils.trackWithSiteDetails(Stat.THEMES_SUPPORT_ACCESSED,mSite,themeProperties);
break;
}
ThemeWebActivity.openTheme(this,mSite,theme,type);
}",0.6624095359727543
13613,"void setThemeList(@NonNull List<ThemeModel> themes){
  mAllThemes.clear();
  mAllThemes.addAll(themes);
  mFilteredThemes.clear();
  mFilteredThemes.addAll(themes);
  if (!TextUtils.isEmpty(mQuery)) {
    getFilter().filter(mQuery);
  }
 else {
    updateHeaders();
    notifyDataSetChanged();
  }
}","void setThemeList(@NonNull List<ThemeModel> themes){
  mAllThemes.clear();
  mAllThemes.addAll(themes);
  mFilteredThemes.clear();
  mFilteredThemes.addAll(themes);
  if (!TextUtils.isEmpty(mQuery)) {
    getFilter().filter(mQuery);
  }
 else {
    notifyDataSetChanged();
  }
}",0.9636048526863084
13614,"@SuppressWarnings(""String_Node_Str"") @Override protected void publishResults(CharSequence constraint,FilterResults results){
  mFilteredThemes.clear();
  mFilteredThemes.addAll((List<ThemeModel>)results.values);
  updateHeaders();
  ThemeBrowserAdapter.this.notifyDataSetChanged();
}","@SuppressWarnings(""String_Node_Str"") @Override protected void publishResults(CharSequence constraint,FilterResults results){
  mFilteredThemes.clear();
  mFilteredThemes.addAll((List<ThemeModel>)results.values);
  ThemeBrowserAdapter.this.notifyDataSetChanged();
}",0.9652650822669104
13615,"@Override public Filter getFilter(){
  return new Filter(){
    @SuppressWarnings(""String_Node_Str"") @Override protected void publishResults(    CharSequence constraint,    FilterResults results){
      mFilteredThemes.clear();
      mFilteredThemes.addAll((List<ThemeModel>)results.values);
      updateHeaders();
      ThemeBrowserAdapter.this.notifyDataSetChanged();
    }
    @Override protected FilterResults performFiltering(    CharSequence constraint){
      List<ThemeModel> filtered=new ArrayList<>();
      if (TextUtils.isEmpty(constraint)) {
        mQuery=null;
        filtered.addAll(mAllThemes);
      }
 else {
        mQuery=constraint.toString();
        String lcConstraint=constraint.toString().toLowerCase();
        for (        ThemeModel theme : mAllThemes) {
          if (theme.getName().toLowerCase().contains(lcConstraint)) {
            filtered.add(theme);
          }
        }
      }
      FilterResults results=new FilterResults();
      results.values=filtered;
      return results;
    }
  }
;
}","@Override public Filter getFilter(){
  return new Filter(){
    @SuppressWarnings(""String_Node_Str"") @Override protected void publishResults(    CharSequence constraint,    FilterResults results){
      mFilteredThemes.clear();
      mFilteredThemes.addAll((List<ThemeModel>)results.values);
      ThemeBrowserAdapter.this.notifyDataSetChanged();
    }
    @Override protected FilterResults performFiltering(    CharSequence constraint){
      List<ThemeModel> filtered=new ArrayList<>();
      if (TextUtils.isEmpty(constraint)) {
        mQuery=null;
        filtered.addAll(mAllThemes);
      }
 else {
        mQuery=constraint.toString();
        String lcConstraint=constraint.toString().toLowerCase();
        for (        ThemeModel theme : mAllThemes) {
          if (theme.getName().toLowerCase().contains(lcConstraint)) {
            filtered.add(theme);
          }
        }
      }
      FilterResults results=new FilterResults();
      results.values=filtered;
      return results;
    }
  }
;
}",0.9887530562347188
13616,"ThemeBrowserAdapter(Context context,boolean isWpCom,ThemeBrowserFragmentCallback callback){
  mContext=context;
  mInflater=LayoutInflater.from(context);
  mCallback=callback;
  mViewWidth=AppPrefs.getThemeImageSizeWidth();
  mIsWpCom=isWpCom;
}","ThemeBrowserAdapter(Context context,ThemeBrowserFragmentCallback callback){
  mContext=context;
  mInflater=LayoutInflater.from(context);
  mCallback=callback;
  mViewWidth=AppPrefs.getThemeImageSizeWidth();
}",0.920704845814978
13617,"ThemeViewHolder(View view){
  cardView=view.findViewById(R.id.theme_grid_card);
  imageView=view.findViewById(R.id.theme_grid_item_image);
  nameView=view.findViewById(R.id.theme_grid_item_name);
  priceView=view.findViewById(R.id.theme_grid_item_price);
  activeView=view.findViewById(R.id.theme_grid_item_active);
  imageButton=view.findViewById(R.id.theme_grid_item_image_button);
  frameLayout=view.findViewById(R.id.theme_grid_item_image_layout);
  detailsView=view.findViewById(R.id.theme_grid_item_details);
  headerView=view.findViewById(R.id.section_header);
  headerText=headerView.findViewById(R.id.section_header_text);
  headerCount=headerView.findViewById(R.id.section_header_count);
}","ThemeViewHolder(View view){
  cardView=view.findViewById(R.id.theme_grid_card);
  imageView=view.findViewById(R.id.theme_grid_item_image);
  nameView=view.findViewById(R.id.theme_grid_item_name);
  priceView=view.findViewById(R.id.theme_grid_item_price);
  activeView=view.findViewById(R.id.theme_grid_item_active);
  imageButton=view.findViewById(R.id.theme_grid_item_image_button);
  frameLayout=view.findViewById(R.id.theme_grid_item_image_layout);
  detailsView=view.findViewById(R.id.theme_grid_item_details);
}",0.8493827160493828
13618,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ThemeViewHolder holder;
  if (convertView == null || convertView.getTag() == null) {
    convertView=mInflater.inflate(R.layout.theme_grid_item,parent,false);
    holder=new ThemeViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(ThemeViewHolder)convertView.getTag();
  }
  configureThemeImageSize(parent);
  ThemeModel theme=mFilteredThemes.get(position);
  String screenshotURL=theme.getScreenshotUrl();
  String themeId=theme.getThemeId();
  boolean isPremium=!theme.isFree();
  boolean isCurrent=theme.getActive();
  holder.nameView.setText(theme.getName());
  if (isPremium) {
    holder.priceView.setText(theme.getPriceText());
    holder.priceView.setVisibility(View.VISIBLE);
  }
 else {
    holder.priceView.setVisibility(View.GONE);
  }
  if (!screenshotURL.startsWith(ThemeWebActivity.THEME_HTTP_PREFIX)) {
    if (screenshotURL.startsWith(""String_Node_Str"")) {
      screenshotURL=screenshotURL.substring(2);
    }
    screenshotURL=ThemeWebActivity.THEME_HTTPS_PROTOCOL + screenshotURL;
  }
  configureImageView(holder,screenshotURL,themeId,isCurrent);
  configureImageButton(holder,themeId,isPremium,isCurrent);
  configureCardView(holder,isCurrent);
  ThemeSectionHeader header=mHeaders.get(position);
  if (header != null) {
    holder.headerView.setVisibility(View.VISIBLE);
    holder.headerText.setText(header.text);
    holder.headerCount.setText(String.valueOf(header.count));
  }
 else {
    holder.headerView.setVisibility(View.GONE);
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ThemeViewHolder holder;
  if (convertView == null || convertView.getTag() == null) {
    convertView=mInflater.inflate(R.layout.theme_grid_item,parent,false);
    holder=new ThemeViewHolder(convertView);
    convertView.setTag(holder);
  }
 else {
    holder=(ThemeViewHolder)convertView.getTag();
  }
  configureThemeImageSize(parent);
  ThemeModel theme=mFilteredThemes.get(position);
  String screenshotURL=theme.getScreenshotUrl();
  String themeId=theme.getThemeId();
  boolean isPremium=!theme.isFree();
  boolean isCurrent=theme.getActive();
  holder.nameView.setText(theme.getName());
  if (isPremium) {
    holder.priceView.setText(theme.getPriceText());
    holder.priceView.setVisibility(View.VISIBLE);
  }
 else {
    holder.priceView.setVisibility(View.GONE);
  }
  if (!screenshotURL.startsWith(ThemeWebActivity.THEME_HTTP_PREFIX)) {
    if (screenshotURL.startsWith(""String_Node_Str"")) {
      screenshotURL=screenshotURL.substring(2);
    }
    screenshotURL=ThemeWebActivity.THEME_HTTPS_PROTOCOL + screenshotURL;
  }
  configureImageView(holder,screenshotURL,themeId,isCurrent);
  configureImageButton(holder,themeId,isPremium,isCurrent);
  configureCardView(holder,isCurrent);
  return convertView;
}",0.8842832469775475
13619,"private ThemeBrowserAdapter getAdapter(){
  if (mAdapter == null) {
    mAdapter=new ThemeBrowserAdapter(getActivity(),mSite.isWPCom(),mCallback);
  }
  return mAdapter;
}","private ThemeBrowserAdapter getAdapter(){
  if (mAdapter == null) {
    mAdapter=new ThemeBrowserAdapter(getActivity(),mCallback);
  }
  return mAdapter;
}",0.950920245398773
13620,"public static String getUrl(SiteModel site,ThemeModel theme,ThemeWebActivityType type,boolean isPremium){
switch (type) {
case PREVIEW:
    String domain=isPremium ? THEME_DOMAIN_PREMIUM : THEME_DOMAIN_PUBLIC;
  return String.format(THEME_URL_PREVIEW,UrlUtils.getHost(site.getUrl()),domain,theme.getThemeId());
case DEMO:
String url=theme.getDemoUrl();
if (url.contains(""String_Node_Str"")) {
return url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
 else {
return url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
case DETAILS:
return String.format(THEME_URL_DETAILS,theme.getThemeId());
case SUPPORT:
return String.format(THEME_URL_SUPPORT,theme.getThemeId());
default :
return ""String_Node_Str"";
}
}","public static String getUrl(SiteModel site,ThemeModel theme,ThemeWebActivityType type,boolean isPremium){
  if (theme.isWpComTheme()) {
switch (type) {
case PREVIEW:
      String domain=isPremium ? THEME_DOMAIN_PREMIUM : THEME_DOMAIN_PUBLIC;
    return String.format(THEME_URL_PREVIEW,UrlUtils.getHost(site.getUrl()),domain,theme.getThemeId());
case DEMO:
  String url=theme.getDemoUrl();
if (url.contains(""String_Node_Str"")) {
  return url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
 else {
  return url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
case DETAILS:
return String.format(THEME_URL_DETAILS,theme.getThemeId());
case SUPPORT:
return String.format(THEME_URL_SUPPORT,theme.getThemeId());
}
}
 else {
switch (type) {
case PREVIEW:
return site.getAdminUrl() + ""String_Node_Str"" + theme.getThemeId();
case DEMO:
return site.getAdminUrl() + ""String_Node_Str"" + theme.getThemeId();
case DETAILS:
case SUPPORT:
return theme.getThemeUrl();
}
}
return ""String_Node_Str"";
}",0.8271386430678466
13621,"public static void openTheme(Activity activity,SiteModel site,ThemeModel theme,ThemeWebActivityType type){
  String url=getUrl(site,theme,type,false);
  if (type == ThemeWebActivityType.PREVIEW) {
    ActivityLauncher.openUrlExternal(activity,url);
  }
 else {
    openWPCOMURL(activity,url,theme,site);
  }
}","public static void openTheme(Activity activity,SiteModel site,ThemeModel theme,ThemeWebActivityType type){
  String url=getUrl(site,theme,type,false);
  if (TextUtils.isEmpty(url)) {
    ToastUtils.showToast(activity,R.string.could_not_load_theme);
    return;
  }
  if (type == ThemeWebActivityType.PREVIEW || !theme.isWpComTheme()) {
    ActivityLauncher.openUrlExternal(activity,url);
  }
 else {
    openWPCOMURL(activity,url,theme,site);
  }
}",0.8163804491413474
13622,"private void setModerateButtonForStatus(CommentStatus status){
  if (status == CommentStatus.APPROVED) {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_orange_jazzy_24dp);
    mBtnModerateTextView.setText(R.string.comment_status_approved);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.notification_status_unapproved_dark));
  }
 else {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_grey_24dp);
    mBtnModerateTextView.setText(R.string.mnu_comment_approve);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.grey));
  }
}","private void setModerateButtonForStatus(CommentStatus status){
  if (status == CommentStatus.APPROVED) {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_orange_jazzy_24dp);
    mBtnModerateTextView.setText(R.string.comment_status_approved);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.orange_jazzy));
  }
 else {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_grey_24dp);
    mBtnModerateTextView.setText(R.string.mnu_comment_approve);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.grey));
  }
}",0.9615699100572364
13623,"private void setModerateButtonForStatus(CommentStatus status){
  if (status == CommentStatus.APPROVED) {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_orange_jazzy_24dp);
    mBtnModerateTextView.setText(R.string.comment_status_approved);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.notification_status_unapproved_dark));
  }
 else {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_grey_24dp);
    mBtnModerateTextView.setText(R.string.mnu_comment_approve);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.grey));
  }
}","private void setModerateButtonForStatus(CommentStatus status){
  if (status == CommentStatus.APPROVED) {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_orange_jazzy_24dp);
    mBtnModerateTextView.setText(R.string.comment_status_approved);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.orange_jazzy));
  }
 else {
    mBtnModerateIcon.setImageResource(R.drawable.ic_checkmark_grey_24dp);
    mBtnModerateTextView.setText(R.string.mnu_comment_approve);
    mBtnModerateTextView.setTextColor(ContextCompat.getColor(getActivity(),R.color.grey));
  }
}",0.9615699100572364
13624,"private void submitSearch(@Nullable final String query,boolean delayed){
  mSearchQuery=query;
  if (delayed && !TextUtils.isEmpty(query)) {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (StringUtils.equals(query,mSearchQuery)) {
          submitSearch(query,false);
        }
      }
    }
,250);
  }
 else {
    mSearchResults.clear();
    PluginListFragment fragment=showListFragment(PluginListType.SEARCH);
    fragment.showEmptyView(false);
    if (!TextUtils.isEmpty(mSearchQuery)) {
      fetchPlugins(PluginListType.SEARCH,false);
    }
  }
}","private void submitSearch(@Nullable final String query,boolean delayed){
  mSearchQuery=query;
  if (delayed) {
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (StringUtils.equals(query,mSearchQuery)) {
          submitSearch(query,false);
        }
      }
    }
,250);
  }
 else {
    mSearchResults.clear();
    PluginListFragment fragment=showListFragment(PluginListType.SEARCH);
    fragment.showEmptyView(false);
    if (!TextUtils.isEmpty(mSearchQuery)) {
      fetchPlugins(PluginListType.SEARCH,false);
    }
  }
}",0.9748482220294884
13625,"@Override public boolean onMenuItemActionCollapse(MenuItem menuItem){
  hideListFragment();
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem menuItem){
  mSearchView.setOnQueryTextListener(null);
  hideListFragment();
  return true;
}",0.8307692307692308
13626,"@Override public boolean onMenuItemActionExpand(MenuItem menuItem){
  return true;
}","@Override public boolean onMenuItemActionExpand(MenuItem menuItem){
  submitSearch(null,true);
  mSearchView.setOnQueryTextListener(this);
  return true;
}",0.702928870292887
13627,"private void hideListFragment(){
  if (getFragmentManager().getBackStackEntryCount() > 0) {
    getFragmentManager().popBackStack();
  }
  setTitle(R.string.plugins);
}","private void hideListFragment(){
  if (getFragmentManager().getBackStackEntryCount() > 0) {
    onBackPressed();
  }
}",0.7692307692307693
13628,"private PluginListFragment showListFragment(@NonNull PluginListType listType){
  PluginListFragment listFragment;
  Fragment fragment=getListFragment();
  if (fragment != null) {
    listFragment=(PluginListFragment)fragment;
    listFragment.setListType(listType);
  }
 else {
    listFragment=PluginListFragment.newInstance(mSite,listType);
    getFragmentManager().beginTransaction().add(R.id.fragment_container,listFragment,PluginListFragment.TAG).addToBackStack(null).commit();
  }
  return listFragment;
}","private PluginListFragment showListFragment(@NonNull PluginListType listType){
  PluginListFragment listFragment=getListFragment();
  if (listFragment != null) {
    listFragment.setListType(listType);
  }
 else {
    listFragment=PluginListFragment.newInstance(mSite,listType);
    getFragmentManager().beginTransaction().add(R.id.fragment_container,listFragment,PluginListFragment.TAG).addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).commit();
  }
  return listFragment;
}",0.8295566502463054
13629,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.search,menu);
  mSearchMenuItem=menu.findItem(R.id.menu_search);
  mSearchView=(SearchView)mSearchMenuItem.getActionView();
  if (!TextUtils.isEmpty(mSearchQuery)) {
    mSearchMenuItem.expandActionView();
    onQueryTextSubmit(mSearchQuery);
    mSearchView.setQuery(mSearchQuery,true);
  }
  mSearchMenuItem.setOnActionExpandListener(this);
  mSearchView.setOnQueryTextListener(this);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.search,menu);
  mSearchMenuItem=menu.findItem(R.id.menu_search);
  mSearchView=(SearchView)mSearchMenuItem.getActionView();
  if (!TextUtils.isEmpty(mSearchQuery)) {
    mSearchMenuItem.expandActionView();
    onQueryTextSubmit(mSearchQuery);
    mSearchView.setQuery(mSearchQuery,true);
  }
  mSearchMenuItem.setOnActionExpandListener(this);
  return super.onCreateOptionsMenu(menu);
}",0.914
13630,"private void refreshViews(){
  if (mWPOrgPlugin != null) {
    mTitleTextView.setText(mWPOrgPlugin.getName());
    mImageBanner.setImageUrl(mWPOrgPlugin.getBanner(),PHOTO);
    mImageIcon.setImageUrl(mWPOrgPlugin.getIcon(),PLUGIN_ICON);
    setCollapsibleHtmlText(mDescriptionTextView,mWPOrgPlugin.getDescriptionAsHtml());
    setCollapsibleHtmlText(mInstallationTextView,mWPOrgPlugin.getInstallationInstructionsAsHtml());
    setCollapsibleHtmlText(mWhatsNewTextView,mWPOrgPlugin.getWhatsNewAsHtml());
    setCollapsibleHtmlText(mFaqTextView,mWPOrgPlugin.getFaqAsHtml());
    mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
    mByLineTextView.setText(Html.fromHtml(mWPOrgPlugin.getAuthorAsHtml()));
  }
 else {
    mTitleTextView.setText(mSitePlugin.getDisplayName());
    if (TextUtils.isEmpty(mSitePlugin.getAuthorUrl())) {
      mByLineTextView.setText(String.format(getString(R.string.plugin_byline),mSitePlugin.getAuthorName()));
    }
 else {
      String authorLink=""String_Node_Str"" + mSitePlugin.getAuthorUrl() + ""String_Node_Str""+ mSitePlugin.getAuthorName()+ ""String_Node_Str"";
      String byline=String.format(getString(R.string.plugin_byline),authorLink);
      mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
      mByLineTextView.setText(Html.fromHtml(byline));
    }
  }
  if (!canPluginBeDisabledOrRemoved()) {
    findViewById(R.id.plugin_state_active_container).setVisibility(View.GONE);
  }
 else   if (mSitePlugin != null) {
    mSwitchActive.setChecked(mIsActive);
    mSwitchAutoupdates.setChecked(mIsAutoUpdateEnabled);
  }
  findViewById(R.id.plugin_card_site).setVisibility(mSitePlugin != null ? View.VISIBLE : View.GONE);
  refreshPluginVersionViews();
  refreshRatingsViews();
}","private void refreshViews(){
  if (mWPOrgPlugin != null) {
    mTitleTextView.setText(mWPOrgPlugin.getName());
    mImageBanner.setImageUrl(mWPOrgPlugin.getBanner(),PHOTO);
    mImageIcon.setImageUrl(mWPOrgPlugin.getIcon(),PLUGIN_ICON);
    setCollapsibleHtmlText(mDescriptionTextView,mWPOrgPlugin.getDescriptionAsHtml());
    setCollapsibleHtmlText(mInstallationTextView,mWPOrgPlugin.getInstallationInstructionsAsHtml());
    setCollapsibleHtmlText(mWhatsNewTextView,mWPOrgPlugin.getWhatsNewAsHtml());
    setCollapsibleHtmlText(mFaqTextView,mWPOrgPlugin.getFaqAsHtml());
    mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
    mByLineTextView.setText(Html.fromHtml(mWPOrgPlugin.getAuthorAsHtml()));
  }
 else {
    mTitleTextView.setText(mSitePlugin.getDisplayName());
    if (TextUtils.isEmpty(mSitePlugin.getAuthorUrl())) {
      mByLineTextView.setText(String.format(getString(R.string.plugin_byline),mSitePlugin.getAuthorName()));
    }
 else {
      String authorLink=""String_Node_Str"" + mSitePlugin.getAuthorUrl() + ""String_Node_Str""+ mSitePlugin.getAuthorName()+ ""String_Node_Str"";
      String byline=String.format(getString(R.string.plugin_byline),authorLink);
      mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
      mByLineTextView.setText(Html.fromHtml(byline));
    }
  }
  if (!canPluginBeDisabledOrRemoved()) {
    findViewById(R.id.plugin_state_active_container).setVisibility(View.GONE);
  }
 else   if (mSitePlugin != null) {
    mSwitchActive.setChecked(mIsActive);
  }
  mSwitchAutoupdates.setChecked(mIsAutoUpdateEnabled);
  findViewById(R.id.plugin_card_site).setVisibility(mSitePlugin != null ? View.VISIBLE : View.GONE);
  refreshPluginVersionViews();
  refreshRatingsViews();
}",0.9982896237172176
13631,"private void refreshViews(){
  boolean hasPlugin=mSitePlugin != null || mWPOrgPlugin != null;
  View scrollView=findViewById(R.id.scroll_view);
  if (hasPlugin && scrollView.getVisibility() != View.VISIBLE) {
    AniUtils.fadeIn(scrollView,AniUtils.Duration.MEDIUM);
  }
 else   if (!hasPlugin) {
    scrollView.setVisibility(View.GONE);
  }
  if (mWPOrgPlugin != null) {
    mTitleTextView.setText(mWPOrgPlugin.getName());
    mImageBanner.setImageUrl(mWPOrgPlugin.getBanner(),PHOTO);
    mImageIcon.setImageUrl(mWPOrgPlugin.getIcon(),PLUGIN_ICON);
    setCollapsibleHtmlText(mDescriptionTextView,mWPOrgPlugin.getDescriptionAsHtml());
    setCollapsibleHtmlText(mInstallationTextView,mWPOrgPlugin.getInstallationInstructionsAsHtml());
    setCollapsibleHtmlText(mWhatsNewTextView,mWPOrgPlugin.getWhatsNewAsHtml());
    setCollapsibleHtmlText(mFaqTextView,mWPOrgPlugin.getFaqAsHtml());
    mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
    mByLineTextView.setText(Html.fromHtml(mWPOrgPlugin.getAuthorAsHtml()));
  }
 else   if (mSitePlugin != null) {
    mTitleTextView.setText(mSitePlugin.getDisplayName());
    if (TextUtils.isEmpty(mSitePlugin.getAuthorUrl())) {
      mByLineTextView.setText(String.format(getString(R.string.plugin_byline),mSitePlugin.getAuthorName()));
    }
 else {
      String authorLink=""String_Node_Str"" + mSitePlugin.getAuthorUrl() + ""String_Node_Str""+ mSitePlugin.getAuthorName()+ ""String_Node_Str"";
      String byline=String.format(getString(R.string.plugin_byline),authorLink);
      mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
      mByLineTextView.setText(Html.fromHtml(byline));
    }
  }
  if (!canPluginBeDisabledOrRemoved()) {
    findViewById(R.id.plugin_state_active_container).setVisibility(View.GONE);
  }
 else   if (mSitePlugin != null) {
    mSwitchActive.setChecked(mIsActive);
    mSwitchAutoupdates.setChecked(mIsAutoUpdateEnabled);
  }
  findViewById(R.id.plugin_card_site).setVisibility(mSitePlugin != null ? View.VISIBLE : View.GONE);
  refreshPluginVersionViews();
  refreshRatingsViews();
}","private void refreshViews(){
  boolean hasPlugin=mSitePlugin != null || mWPOrgPlugin != null;
  View scrollView=findViewById(R.id.scroll_view);
  if (hasPlugin && scrollView.getVisibility() != View.VISIBLE) {
    AniUtils.fadeIn(scrollView,AniUtils.Duration.MEDIUM);
  }
 else   if (!hasPlugin) {
    scrollView.setVisibility(View.GONE);
  }
  if (mWPOrgPlugin != null) {
    mTitleTextView.setText(mWPOrgPlugin.getName());
    mImageBanner.setImageUrl(mWPOrgPlugin.getBanner(),PHOTO);
    mImageIcon.setImageUrl(mWPOrgPlugin.getIcon(),PLUGIN_ICON);
    setCollapsibleHtmlText(mDescriptionTextView,mWPOrgPlugin.getDescriptionAsHtml());
    setCollapsibleHtmlText(mInstallationTextView,mWPOrgPlugin.getInstallationInstructionsAsHtml());
    setCollapsibleHtmlText(mWhatsNewTextView,mWPOrgPlugin.getWhatsNewAsHtml());
    setCollapsibleHtmlText(mFaqTextView,mWPOrgPlugin.getFaqAsHtml());
    mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
    mByLineTextView.setText(Html.fromHtml(mWPOrgPlugin.getAuthorAsHtml()));
  }
 else   if (mSitePlugin != null) {
    mTitleTextView.setText(mSitePlugin.getDisplayName());
    if (TextUtils.isEmpty(mSitePlugin.getAuthorUrl())) {
      mByLineTextView.setText(String.format(getString(R.string.plugin_byline),mSitePlugin.getAuthorName()));
    }
 else {
      String authorLink=""String_Node_Str"" + mSitePlugin.getAuthorUrl() + ""String_Node_Str""+ mSitePlugin.getAuthorName()+ ""String_Node_Str"";
      String byline=String.format(getString(R.string.plugin_byline),authorLink);
      mByLineTextView.setMovementMethod(WPLinkMovementMethod.getInstance());
      mByLineTextView.setText(Html.fromHtml(byline));
    }
  }
  if (!canPluginBeDisabledOrRemoved()) {
    findViewById(R.id.plugin_state_active_container).setVisibility(View.GONE);
  }
 else   if (mSitePlugin != null) {
    mSwitchActive.setChecked(mIsActive);
  }
  mSwitchAutoupdates.setChecked(mIsAutoUpdateEnabled);
  findViewById(R.id.plugin_card_site).setVisibility(mSitePlugin != null ? View.VISIBLE : View.GONE);
  refreshPluginVersionViews();
  refreshRatingsViews();
}",0.998567335243553
13632,"private void addLastTakenPicture(){
  try {
    WPMediaUtils.scanMediaFile(this,mMediaCapturePath);
    File f=new File(mMediaCapturePath);
    Uri capturedImageUri=Uri.fromFile(f);
    if (addMedia(capturedImageUri,true)) {
      this.sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
    }
 else {
      ToastUtils.showToast(this,R.string.gallery_error,Duration.SHORT);
    }
  }
 catch (  RuntimeException|OutOfMemoryError e) {
    AppLog.e(T.EDITOR,e);
  }
}","private void addLastTakenPicture(){
  try {
    WPMediaUtils.scanMediaFile(this,mMediaCapturePath);
    File f=new File(mMediaCapturePath);
    Uri capturedImageUri=Uri.fromFile(f);
    if (addMedia(capturedImageUri,true)) {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
        final Intent scanIntent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        scanIntent.setData(capturedImageUri);
        sendBroadcast(scanIntent);
      }
 else {
        this.sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
      }
    }
 else {
      ToastUtils.showToast(this,R.string.gallery_error,Duration.SHORT);
    }
  }
 catch (  RuntimeException|OutOfMemoryError e) {
    AppLog.e(T.EDITOR,e);
  }
}",0.7823485415108452
13633,"@Override public void run(){
  if (mSitesList.computeVerticalScrollRange() > mSitesList.getHeight()) {
    mBottomShadow.setVisibility(View.VISIBLE);
    mBottomButtonsContainer.setBackgroundResource(R.color.white);
    ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button_Grey,R.attr.colorButtonNormal);
  }
 else {
    mBottomShadow.setVisibility(View.GONE);
    mBottomButtonsContainer.setBackground(null);
    ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button,R.attr.colorButtonNormal);
  }
}","@Override public void run(){
  if (!isAdded()) {
    return;
  }
  if (mSitesList.computeVerticalScrollRange() > mSitesList.getHeight()) {
    mBottomShadow.setVisibility(View.VISIBLE);
    mBottomButtonsContainer.setBackgroundResource(R.color.white);
    ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button_Grey,R.attr.colorButtonNormal);
  }
 else {
    mBottomShadow.setVisibility(View.GONE);
    mBottomButtonsContainer.setBackground(null);
    ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button,R.attr.colorButtonNormal);
  }
}",0.9691252144082332
13634,"private void setNewAdapter(){
  mAdapter=new SitePickerAdapter(getActivity(),R.layout.login_epilogue_sites_listitem,0,""String_Node_Str"",false,new SitePickerAdapter.OnDataLoadedListener(){
    @Override public void onBeforeLoad(    boolean isEmpty){
    }
    @Override public void onAfterLoad(){
      mSitesList.post(new Runnable(){
        @Override public void run(){
          if (mSitesList.computeVerticalScrollRange() > mSitesList.getHeight()) {
            mBottomShadow.setVisibility(View.VISIBLE);
            mBottomButtonsContainer.setBackgroundResource(R.color.white);
            ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button_Grey,R.attr.colorButtonNormal);
          }
 else {
            mBottomShadow.setVisibility(View.GONE);
            mBottomButtonsContainer.setBackground(null);
            ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button,R.attr.colorButtonNormal);
          }
        }
      }
);
    }
  }
,new SitePickerAdapter.HeaderHandler(){
    @Override public RecyclerView.ViewHolder onCreateViewHolder(    LayoutInflater layoutInflater,    ViewGroup parent,    boolean attachToRoot){
      return new LoginHeaderViewHolder(layoutInflater.inflate(R.layout.login_epilogue_header,parent,false));
    }
    @Override public void onBindViewHolder(    RecyclerView.ViewHolder holder,    SiteList sites){
      refreshAccountDetails((LoginHeaderViewHolder)holder,sites);
    }
  }
,mOldSitesIds);
}","private void setNewAdapter(){
  mAdapter=new SitePickerAdapter(getActivity(),R.layout.login_epilogue_sites_listitem,0,""String_Node_Str"",false,new SitePickerAdapter.OnDataLoadedListener(){
    @Override public void onBeforeLoad(    boolean isEmpty){
    }
    @Override public void onAfterLoad(){
      mSitesList.post(new Runnable(){
        @Override public void run(){
          if (!isAdded()) {
            return;
          }
          if (mSitesList.computeVerticalScrollRange() > mSitesList.getHeight()) {
            mBottomShadow.setVisibility(View.VISIBLE);
            mBottomButtonsContainer.setBackgroundResource(R.color.white);
            ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button_Grey,R.attr.colorButtonNormal);
          }
 else {
            mBottomShadow.setVisibility(View.GONE);
            mBottomButtonsContainer.setBackground(null);
            ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button,R.attr.colorButtonNormal);
          }
        }
      }
);
    }
  }
,new SitePickerAdapter.HeaderHandler(){
    @Override public RecyclerView.ViewHolder onCreateViewHolder(    LayoutInflater layoutInflater,    ViewGroup parent,    boolean attachToRoot){
      return new LoginHeaderViewHolder(layoutInflater.inflate(R.layout.login_epilogue_header,parent,false));
    }
    @Override public void onBindViewHolder(    RecyclerView.ViewHolder holder,    SiteList sites){
      refreshAccountDetails((LoginHeaderViewHolder)holder,sites);
    }
  }
,mOldSitesIds);
}",0.9804177545691906
13635,"@Override public void onAfterLoad(){
  mSitesList.post(new Runnable(){
    @Override public void run(){
      if (mSitesList.computeVerticalScrollRange() > mSitesList.getHeight()) {
        mBottomShadow.setVisibility(View.VISIBLE);
        mBottomButtonsContainer.setBackgroundResource(R.color.white);
        ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button_Grey,R.attr.colorButtonNormal);
      }
 else {
        mBottomShadow.setVisibility(View.GONE);
        mBottomButtonsContainer.setBackground(null);
        ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button,R.attr.colorButtonNormal);
      }
    }
  }
);
}","@Override public void onAfterLoad(){
  mSitesList.post(new Runnable(){
    @Override public void run(){
      if (!isAdded()) {
        return;
      }
      if (mSitesList.computeVerticalScrollRange() > mSitesList.getHeight()) {
        mBottomShadow.setVisibility(View.VISIBLE);
        mBottomButtonsContainer.setBackgroundResource(R.color.white);
        ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button_Grey,R.attr.colorButtonNormal);
      }
 else {
        mBottomShadow.setVisibility(View.GONE);
        mBottomButtonsContainer.setBackground(null);
        ViewUtils.setButtonBackgroundColor(getContext(),mConnectMore,R.style.WordPress_Button,R.attr.colorButtonNormal);
      }
    }
  }
);
}",0.9663394109396914
13636,"@Override public void onRedoEnabled(){
  invalidateOptionsHandler.removeCallbacks(invalidateOptionsRunnable);
  invalidateOptionsHandler.postDelayed(invalidateOptionsRunnable,getResources().getInteger(android.R.integer.config_mediumAnimTime));
}","@Override public void onRedoEnabled(){
  if (!isAdded()) {
    return;
  }
  invalidateOptionsHandler.removeCallbacks(invalidateOptionsRunnable);
  invalidateOptionsHandler.postDelayed(invalidateOptionsRunnable,getResources().getInteger(android.R.integer.config_mediumAnimTime));
}",0.9315589353612168
13637,"@Override public void onUndoEnabled(){
  invalidateOptionsHandler.removeCallbacks(invalidateOptionsRunnable);
  invalidateOptionsHandler.postDelayed(invalidateOptionsRunnable,getResources().getInteger(android.R.integer.config_mediumAnimTime));
}","@Override public void onUndoEnabled(){
  if (!isAdded()) {
    return;
  }
  invalidateOptionsHandler.removeCallbacks(invalidateOptionsRunnable);
  invalidateOptionsHandler.postDelayed(invalidateOptionsRunnable,getResources().getInteger(android.R.integer.config_mediumAnimTime));
}",0.9315589353612168
13638,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(MediaPreviewFragment.ARG_MEDIA_ID,mMediaId);
  outState.putString(MediaPreviewFragment.ARG_MEDIA_CONTENT_URI,mContentUri);
  if (mMediaIdList != null) {
    outState.putStringArrayList(ARG_ID_LIST,mMediaIdList);
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putSerializable(WordPress.SITE,mSite);
  outState.putInt(MediaPreviewFragment.ARG_MEDIA_ID,mMediaId);
  outState.putString(MediaPreviewFragment.ARG_MEDIA_CONTENT_URI,mContentUri);
  if (mMediaIdList != null) {
    outState.putStringArrayList(ARG_ID_LIST,mMediaIdList);
  }
}",0.930939226519337
13639,"private void savePostAsync(final AfterSavePostListener listener){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        updatePostObject(false);
      }
 catch (      IllegalEditorStateException e) {
        AppLog.e(T.EDITOR,""String_Node_Str"");
        return;
      }
      savePostToDb();
      if (listener != null) {
        listener.onPostSave();
      }
    }
  }
).start();
}","private void savePostAsync(final AfterSavePostListener listener){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        updatePostObject(false);
      }
 catch (      EditorFragmentNotAddedException e) {
        AppLog.e(T.EDITOR,""String_Node_Str"");
        return;
      }
      savePostToDb();
      if (listener != null) {
        listener.onPostSave();
      }
    }
  }
).start();
}",0.953995157384988
13640,"private boolean updatePostObject(){
  try {
    updatePostObject(false);
  }
 catch (  IllegalEditorStateException e) {
    AppLog.e(T.EDITOR,""String_Node_Str"");
    return false;
  }
  return true;
}","private boolean updatePostObject(){
  try {
    updatePostObject(false);
  }
 catch (  EditorFragmentNotAddedException e) {
    AppLog.e(T.EDITOR,""String_Node_Str"");
    return false;
  }
  return true;
}",0.905940594059406
13641,"/** 
 * Updates post object with content of this fragment
 */
public boolean updatePostContent(boolean isAutoSave) throws IllegalEditorStateException {
  if (mPost == null) {
    return false;
  }
  String title=StringUtils.notNullStr((String)mEditorFragment.getTitle());
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    try {
      postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
    }
 catch (    RuntimeException e) {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  String content;
  if (mPost.isLocalDraft()) {
    CharacterStyle[] characterStyles=postContent.getSpans(0,postContent.length(),CharacterStyle.class);
    for (    CharacterStyle characterStyle : characterStyles) {
      if (characterStyle instanceof SuggestionSpan) {
        postContent.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContent);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (!isAutoSave) {
      MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(0,postContent.length(),MediaGalleryImageSpan.class);
      for (      MediaGalleryImageSpan gallerySpan : gallerySpans) {
        int start=postContent.getSpanStart(gallerySpan);
        postContent.removeSpan(gallerySpan);
        postContent.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
      }
    }
    WPImageSpan[] imageSpans=postContent.getSpans(0,postContent.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null) {
          continue;
        }
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(mediaFile);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
        }
        int tagStart=postContent.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContent.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContent.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContent.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContent.toString();
  }
  boolean titleChanged=PostUtils.updatePostTitleIfDifferent(mPost,title);
  boolean contentChanged=PostUtils.updatePostContentIfDifferent(mPost,content);
  if (!mPost.isLocalDraft() && (titleChanged || contentChanged)) {
    mPost.setIsLocallyChanged(true);
  }
  return titleChanged || contentChanged;
}","/** 
 * Updates post object with content of this fragment
 */
public boolean updatePostContent(boolean isAutoSave) throws EditorFragmentNotAddedException {
  if (mPost == null) {
    return false;
  }
  String title=StringUtils.notNullStr((String)mEditorFragment.getTitle());
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    try {
      postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
    }
 catch (    RuntimeException e) {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  String content;
  if (mPost.isLocalDraft()) {
    CharacterStyle[] characterStyles=postContent.getSpans(0,postContent.length(),CharacterStyle.class);
    for (    CharacterStyle characterStyle : characterStyles) {
      if (characterStyle instanceof SuggestionSpan) {
        postContent.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContent);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (!isAutoSave) {
      MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(0,postContent.length(),MediaGalleryImageSpan.class);
      for (      MediaGalleryImageSpan gallerySpan : gallerySpans) {
        int start=postContent.getSpanStart(gallerySpan);
        postContent.removeSpan(gallerySpan);
        postContent.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
      }
    }
    WPImageSpan[] imageSpans=postContent.getSpans(0,postContent.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null) {
          continue;
        }
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(mediaFile);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
        }
        int tagStart=postContent.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContent.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContent.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContent.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContent.toString();
  }
  boolean titleChanged=PostUtils.updatePostTitleIfDifferent(mPost,title);
  boolean contentChanged=PostUtils.updatePostContentIfDifferent(mPost,content);
  if (!mPost.isLocalDraft() && (titleChanged || contentChanged)) {
    mPost.setIsLocallyChanged(true);
  }
  return titleChanged || contentChanged;
}",0.9957485575463104
13642,"@Override public void run(){
  titleText.setText(""String_Node_Str"");
  contentText.setText(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",mFragment.getTitle());
    assertEquals(""String_Node_Str"",mFragment.getContent());
  }
 catch (  IllegalEditorStateException e) {
    throw new RuntimeException();
  }
  htmlButton.performClick();
  uiThreadLatch2.countDown();
}","@Override public void run(){
  titleText.setText(""String_Node_Str"");
  contentText.setText(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",mFragment.getTitle());
    assertEquals(""String_Node_Str"",mFragment.getContent());
  }
 catch (  EditorFragmentNotAddedException e) {
    throw new RuntimeException();
  }
  htmlButton.performClick();
  uiThreadLatch2.countDown();
}",0.9479166666666666
13643,"public void testHtmlModeToggleTextTransfer() throws InterruptedException, IllegalEditorStateException {
  waitForOnDomLoaded();
  final View view=mFragment.getView();
  if (view == null) {
    throw (new IllegalStateException(""String_Node_Str""));
  }
  final ToggleButton htmlButton=(ToggleButton)view.findViewById(R.id.format_bar_button_html);
  String content=mFragment.getContent().toString();
  final EditTextWithKeyBackListener titleText=(EditTextWithKeyBackListener)view.findViewById(R.id.sourceview_title);
  final EditTextWithKeyBackListener contentText=(EditTextWithKeyBackListener)view.findViewById(R.id.sourceview_content);
  final CountDownLatch uiThreadLatch1=new CountDownLatch(1);
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      htmlButton.performClick();
      uiThreadLatch1.countDown();
    }
  }
);
  uiThreadLatch1.await();
  waitFor(500);
  assertEquals(""String_Node_Str"",titleText.getText().toString());
  assertEquals(content,contentText.getText().toString());
  final CountDownLatch uiThreadLatch2=new CountDownLatch(1);
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      titleText.setText(""String_Node_Str"");
      contentText.setText(""String_Node_Str"");
      try {
        assertEquals(""String_Node_Str"",mFragment.getTitle());
        assertEquals(""String_Node_Str"",mFragment.getContent());
      }
 catch (      IllegalEditorStateException e) {
        throw new RuntimeException();
      }
      htmlButton.performClick();
      uiThreadLatch2.countDown();
    }
  }
);
  uiThreadLatch2.await();
  waitFor(300);
  assertEquals(""String_Node_Str"",mFragment.getTitle());
  assertEquals(""String_Node_Str"",mFragment.getContent());
}","public void testHtmlModeToggleTextTransfer() throws InterruptedException, EditorFragmentNotAddedException {
  waitForOnDomLoaded();
  final View view=mFragment.getView();
  if (view == null) {
    throw (new IllegalStateException(""String_Node_Str""));
  }
  final ToggleButton htmlButton=(ToggleButton)view.findViewById(R.id.format_bar_button_html);
  String content=mFragment.getContent().toString();
  final EditTextWithKeyBackListener titleText=(EditTextWithKeyBackListener)view.findViewById(R.id.sourceview_title);
  final EditTextWithKeyBackListener contentText=(EditTextWithKeyBackListener)view.findViewById(R.id.sourceview_content);
  final CountDownLatch uiThreadLatch1=new CountDownLatch(1);
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      htmlButton.performClick();
      uiThreadLatch1.countDown();
    }
  }
);
  uiThreadLatch1.await();
  waitFor(500);
  assertEquals(""String_Node_Str"",titleText.getText().toString());
  assertEquals(content,contentText.getText().toString());
  final CountDownLatch uiThreadLatch2=new CountDownLatch(1);
  mActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      titleText.setText(""String_Node_Str"");
      contentText.setText(""String_Node_Str"");
      try {
        assertEquals(""String_Node_Str"",mFragment.getTitle());
        assertEquals(""String_Node_Str"",mFragment.getContent());
      }
 catch (      EditorFragmentNotAddedException e) {
        throw new RuntimeException();
      }
      htmlButton.performClick();
      uiThreadLatch2.countDown();
    }
  }
);
  uiThreadLatch2.await();
  waitFor(300);
  assertEquals(""String_Node_Str"",mFragment.getTitle());
  assertEquals(""String_Node_Str"",mFragment.getContent());
}",0.983749274521184
13644,"/** 
 * Returns the contents of the title field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getTitle() throws IllegalEditorStateException {
  if (!isAdded()) {
    throw new IllegalEditorStateException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mTitle=mSourceViewTitle.getText().toString();
    return StringUtils.notNullStr(mTitle);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetTitleCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetTitleCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mTitle.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","/** 
 * Returns the contents of the title field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getTitle() throws EditorFragmentNotAddedException {
  if (!isAdded()) {
    throw new EditorFragmentNotAddedException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mTitle=mSourceViewTitle.getText().toString();
    return StringUtils.notNullStr(mTitle);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetTitleCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetTitleCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mTitle.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9726829268292684
13645,"/** 
 * Returns the contents of the content field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getContent() throws IllegalEditorStateException {
  if (!isAdded()) {
    throw new IllegalEditorStateException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mContentHtml=mSourceViewContent.getText().toString();
    return StringUtils.notNullStr(mContentHtml);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetContentCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetContentCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mContentHtml);
}","/** 
 * Returns the contents of the content field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getContent() throws EditorFragmentNotAddedException {
  if (!isAdded()) {
    throw new EditorFragmentNotAddedException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mContentHtml=mSourceViewContent.getText().toString();
    return StringUtils.notNullStr(mContentHtml);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetContentCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetContentCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mContentHtml);
}",0.972139303482587
13646,"private void toggleHtmlMode(final ToggleButton toggleButton){
  if (!isAdded()) {
    return;
  }
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.HTML_BUTTON_TAPPED);
  if (!mUploadingMedia.isEmpty() || isActionInProgress()) {
    toggleButton.setChecked(false);
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
    return;
  }
  clearFormatBarButtons();
  updateFormatBarEnabledState(true);
  if (toggleButton.isChecked()) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        if (!isAdded()) {
          return;
        }
        try {
          getTitle();
          getContent();
        }
 catch (        IllegalEditorStateException e) {
          AppLog.e(T.EDITOR,""String_Node_Str"");
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              toggleButton.setChecked(false);
            }
          }
);
          return;
        }
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            mSourceViewTitle.setText(mTitle);
            SpannableString spannableContent=new SpannableString(mContentHtml);
            HtmlStyleUtils.styleHtmlForDisplay(spannableContent);
            mSourceViewContent.setText(spannableContent);
            mWebView.setVisibility(View.GONE);
            mSourceView.setVisibility(View.VISIBLE);
            mSourceViewContent.requestFocus();
            mSourceViewContent.setSelection(0);
            InputMethodManager imm=((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE));
            imm.showSoftInput(mSourceViewContent,InputMethodManager.SHOW_IMPLICIT);
          }
        }
);
      }
    }
);
    thread.start();
  }
 else {
    mWebView.setVisibility(View.VISIBLE);
    mSourceView.setVisibility(View.GONE);
    mTitle=mSourceViewTitle.getText().toString();
    mContentHtml=mSourceViewContent.getText().toString();
    updateVisualEditorFields();
    mWebView.execJavaScriptFromString(""String_Node_Str"");
    mWebView.execJavaScriptFromString(""String_Node_Str"");
  }
}","private void toggleHtmlMode(final ToggleButton toggleButton){
  if (!isAdded()) {
    return;
  }
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.HTML_BUTTON_TAPPED);
  if (!mUploadingMedia.isEmpty() || isActionInProgress()) {
    toggleButton.setChecked(false);
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
    return;
  }
  clearFormatBarButtons();
  updateFormatBarEnabledState(true);
  if (toggleButton.isChecked()) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        if (!isAdded()) {
          return;
        }
        try {
          getTitle();
          getContent();
        }
 catch (        EditorFragmentNotAddedException e) {
          AppLog.e(T.EDITOR,""String_Node_Str"");
          return;
        }
        if (!isAdded()) {
          return;
        }
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            mSourceViewTitle.setText(mTitle);
            SpannableString spannableContent=new SpannableString(mContentHtml);
            HtmlStyleUtils.styleHtmlForDisplay(spannableContent);
            mSourceViewContent.setText(spannableContent);
            mWebView.setVisibility(View.GONE);
            mSourceView.setVisibility(View.VISIBLE);
            mSourceViewContent.requestFocus();
            mSourceViewContent.setSelection(0);
            InputMethodManager imm=((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE));
            imm.showSoftInput(mSourceViewContent,InputMethodManager.SHOW_IMPLICIT);
          }
        }
);
      }
    }
);
    thread.start();
  }
 else {
    mWebView.setVisibility(View.VISIBLE);
    mSourceView.setVisibility(View.GONE);
    mTitle=mSourceViewTitle.getText().toString();
    mContentHtml=mSourceViewContent.getText().toString();
    updateVisualEditorFields();
    mWebView.execJavaScriptFromString(""String_Node_Str"");
    mWebView.execJavaScriptFromString(""String_Node_Str"");
  }
}",0.9459847036328872
13647,"@Override public void onSaveInstanceState(Bundle outState){
  try {
    outState.putCharSequence(ATTR_TITLE,getTitle());
    outState.putCharSequence(ATTR_CONTENT,getContent());
  }
 catch (  IllegalEditorStateException e) {
    AppLog.e(T.EDITOR,""String_Node_Str"");
  }
}","@Override public void onSaveInstanceState(Bundle outState){
  try {
    outState.putCharSequence(ATTR_TITLE,getTitle());
    outState.putCharSequence(ATTR_CONTENT,getContent());
  }
 catch (  EditorFragmentNotAddedException e) {
    AppLog.e(T.EDITOR,""String_Node_Str"");
  }
}",0.927007299270073
13648,public abstract CharSequence getContent() throws IllegalEditorStateException ;,public abstract CharSequence getContent() throws EditorFragmentNotAddedException ;,0.8625
13649,public abstract CharSequence getTitle() throws IllegalEditorStateException ;,public abstract CharSequence getTitle() throws EditorFragmentNotAddedException ;,0.8589743589743589
13650,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST_LOCAL_ID) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
        mIsPromo=extras.getBoolean(EXTRA_IS_PROMO);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      String postFormat=""String_Node_Str"";
      if (mSite.isUsingWpComRestApi()) {
        categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
        postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      }
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
      mPost.setStatus(PostStatus.PUBLISHED.toString());
    }
 else     if (extras != null) {
      mPost=mPostStore.getPostByLocalPostId(extras.getInt(EXTRA_POST_LOCAL_ID));
      if (mPost != null) {
        initializePostObject();
      }
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    mIsNewPost=savedInstanceState.getBoolean(STATE_KEY_IS_NEW_POST,false);
    if (savedInstanceState.containsKey(STATE_KEY_POST_REMOTE_ID)) {
      mPost=mPostStore.getPostByRemotePostId(savedInstanceState.getLong(STATE_KEY_POST_REMOTE_ID),mSite);
      initializePostObject();
    }
 else     if (savedInstanceState.containsKey(STATE_KEY_POST_LOCAL_ID)) {
      mPost=mPostStore.getPostByLocalPostId(savedInstanceState.getInt(STATE_KEY_POST_LOCAL_ID));
      initializePostObject();
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
 else {
    UploadService.cancelFinalNotification(this,mPost);
    resetUploadingMediaToFailedIfPostHasNotMediaInProgressOrQueued();
  }
  setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoPicker();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoPicker();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost(mPost);
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  if (mShowAztecEditor) {
    View overlay=findViewById(R.id.view_overlay);
    RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)overlay.getLayoutParams();
    layoutParams.bottomMargin=getResources().getDimensionPixelOffset(R.dimen.aztec_format_bar_height);
    overlay.setLayoutParams(layoutParams);
  }
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST_LOCAL_ID) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
        mIsPromo=extras.getBoolean(EXTRA_IS_PROMO);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      String postFormat=""String_Node_Str"";
      if (mSite.isUsingWpComRestApi()) {
        categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
        postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      }
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
      mPost.setStatus(PostStatus.PUBLISHED.toString());
    }
 else     if (extras != null) {
      mPost=mPostStore.getPostByLocalPostId(extras.getInt(EXTRA_POST_LOCAL_ID));
      if (mPost != null) {
        initializePostObject();
      }
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    mIsNewPost=savedInstanceState.getBoolean(STATE_KEY_IS_NEW_POST,false);
    if (savedInstanceState.containsKey(STATE_KEY_POST_REMOTE_ID)) {
      mPost=mPostStore.getPostByRemotePostId(savedInstanceState.getLong(STATE_KEY_POST_REMOTE_ID),mSite);
      initializePostObject();
    }
 else     if (savedInstanceState.containsKey(STATE_KEY_POST_LOCAL_ID)) {
      mPost=mPostStore.getPostByLocalPostId(savedInstanceState.getInt(STATE_KEY_POST_LOCAL_ID));
      initializePostObject();
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
 else {
    UploadService.cancelFinalNotification(this,mPost);
    resetUploadingMediaToFailedIfPostHasNotMediaInProgressOrQueued();
  }
  setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoPicker();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoPicker();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost(mPost);
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}",0.9693447079778756
13651,"private void showBottomBar(){
  if (!isBottomBarShowing() && mBrowserType != MediaBrowserType.AZTEC_EDITOR_PICKER) {
    AniUtils.animateBottomBar(mBottomBar,true);
  }
}","private void showBottomBar(){
  if (!isBottomBarShowing() && canShowBottomBar()) {
    AniUtils.animateBottomBar(mBottomBar,true);
  }
}",0.7908496732026143
13652,"private void hideBottomBar(){
  if (isBottomBarShowing() && mBrowserType != MediaBrowserType.AZTEC_EDITOR_PICKER) {
    AniUtils.animateBottomBar(mBottomBar,false);
  }
}","private void hideBottomBar(){
  if (isBottomBarShowing() && canShowBottomBar()) {
    AniUtils.animateBottomBar(mBottomBar,false);
  }
}",0.7908496732026143
13653,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.photo_picker_fragment,container,false);
  mRecycler=(RecyclerView)view.findViewById(R.id.recycler);
  mRecycler.setHasFixedSize(true);
  final int minDistance=WPMediaUtils.getFlingDistanceToDisableThumbLoading(getActivity());
  mRecycler.setOnFlingListener(new RecyclerView.OnFlingListener(){
    @Override public boolean onFling(    int velocityX,    int velocityY){
      if (Math.abs(velocityY) > minDistance) {
        getAdapter().setLoadThumbnails(false);
      }
      return false;
    }
  }
);
  mRecycler.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == RecyclerView.SCROLL_STATE_IDLE) {
        getAdapter().setLoadThumbnails(true);
      }
    }
  }
);
  mBottomBar=view.findViewById(R.id.bottom_bar);
  if (mBrowserType == MediaBrowserType.AZTEC_EDITOR_PICKER) {
    mBottomBar.setVisibility(View.GONE);
  }
 else {
    mBottomBar.findViewById(R.id.icon_camera).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mBrowserType.isSingleImagePicker()) {
          doIconClicked(PhotoPickerIcon.ANDROID_CAPTURE_PHOTO);
        }
 else {
          showCameraPopupMenu(v);
        }
      }
    }
);
    mBottomBar.findViewById(R.id.icon_picker).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mBrowserType.isSingleImagePicker()) {
          doIconClicked(PhotoPickerIcon.ANDROID_CHOOSE_PHOTO);
        }
 else {
          showPickerPopupMenu(v);
        }
      }
    }
);
    View wpMedia=mBottomBar.findViewById(R.id.icon_wpmedia);
    if (mSite == null) {
      wpMedia.setVisibility(View.GONE);
    }
 else {
      wpMedia.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          doIconClicked(PhotoPickerIcon.WP_MEDIA);
        }
      }
);
    }
  }
  mSoftAskContainer=(ViewGroup)view.findViewById(R.id.container_soft_ask);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.photo_picker_fragment,container,false);
  mRecycler=(RecyclerView)view.findViewById(R.id.recycler);
  mRecycler.setHasFixedSize(true);
  final int minDistance=WPMediaUtils.getFlingDistanceToDisableThumbLoading(getActivity());
  mRecycler.setOnFlingListener(new RecyclerView.OnFlingListener(){
    @Override public boolean onFling(    int velocityX,    int velocityY){
      if (Math.abs(velocityY) > minDistance) {
        getAdapter().setLoadThumbnails(false);
      }
      return false;
    }
  }
);
  mRecycler.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == RecyclerView.SCROLL_STATE_IDLE) {
        getAdapter().setLoadThumbnails(true);
      }
    }
  }
);
  mBottomBar=view.findViewById(R.id.bottom_bar);
  if (!canShowBottomBar()) {
    mBottomBar.setVisibility(View.GONE);
  }
 else {
    mBottomBar.findViewById(R.id.icon_camera).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mBrowserType.isSingleImagePicker()) {
          doIconClicked(PhotoPickerIcon.ANDROID_CAPTURE_PHOTO);
        }
 else {
          showCameraPopupMenu(v);
        }
      }
    }
);
    mBottomBar.findViewById(R.id.icon_picker).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mBrowserType.isSingleImagePicker()) {
          doIconClicked(PhotoPickerIcon.ANDROID_CHOOSE_PHOTO);
        }
 else {
          showPickerPopupMenu(v);
        }
      }
    }
);
    View wpMedia=mBottomBar.findViewById(R.id.icon_wpmedia);
    if (mSite == null) {
      wpMedia.setVisibility(View.GONE);
    }
 else {
      wpMedia.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          doIconClicked(PhotoPickerIcon.WP_MEDIA);
        }
      }
);
    }
  }
  mSoftAskContainer=(ViewGroup)view.findViewById(R.id.container_soft_ask);
  return view;
}",0.985061315496098
13654,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  savePostAsync(null);
  outState.putInt(STATE_KEY_POST_LOCAL_ID,mPost.getId());
  if (!mPost.isLocalDraft()) {
    outState.putLong(STATE_KEY_POST_REMOTE_ID,mPost.getRemotePostId());
  }
  outState.putBoolean(STATE_KEY_IS_NEW_POST,mIsNewPost);
  outState.putSerializable(WordPress.SITE,mSite);
  outState.putParcelableArrayList(STATE_KEY_DROPPED_MEDIA_URIS,mDroppedMediaUris);
  if (mEditorFragment != null) {
    getFragmentManager().putFragment(outState,STATE_KEY_EDITOR_FRAGMENT,mEditorFragment);
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  savePostAsync(null);
  outState.putInt(STATE_KEY_POST_LOCAL_ID,mPost.getId());
  if (!mPost.isLocalDraft()) {
    outState.putLong(STATE_KEY_POST_REMOTE_ID,mPost.getRemotePostId());
  }
  outState.putBoolean(STATE_KEY_IS_NEW_POST,mIsNewPost);
  outState.putBoolean(STATE_KEY_IS_PHOTO_PICKER_VISIBLE,isPhotoPickerShowing());
  outState.putSerializable(WordPress.SITE,mSite);
  outState.putParcelableArrayList(STATE_KEY_DROPPED_MEDIA_URIS,mDroppedMediaUris);
  if (mEditorFragment != null) {
    getFragmentManager().putFragment(outState,STATE_KEY_EDITOR_FRAGMENT,mEditorFragment);
  }
}",0.9375481881264456
13655,"@Override public void onMediaToolbarButtonClicked(MediaToolbarAction button){
switch (button) {
case CAMERA:
    mPhotoPickerFragment.showCameraPopupMenu(findViewById(button.getButtonId()));
  break;
case GALLERY:
mPhotoPickerFragment.showPickerPopupMenu(findViewById(button.getButtonId()));
break;
case LIBRARY:
mPhotoPickerFragment.doIconClicked(PhotoPickerIcon.WP_MEDIA);
break;
}
}","@Override public void onMediaToolbarButtonClicked(MediaToolbarAction action){
  if (!isPhotoPickerShowing())   return;
switch (action) {
case CAMERA:
    mPhotoPickerFragment.showCameraPopupMenu(findViewById(action.getButtonId()));
  break;
case GALLERY:
mPhotoPickerFragment.showPickerPopupMenu(findViewById(action.getButtonId()));
break;
case LIBRARY:
mPhotoPickerFragment.doIconClicked(PhotoPickerIcon.WP_MEDIA);
break;
}
}",0.8902589395807645
13656,"public void enableMediaMode(boolean enable){
  formattingToolbar.enableMediaMode(enable);
  formattingToolbar.toggleMediaToolbar();
  getActivity().invalidateOptionsMenu();
}","public void enableMediaMode(boolean enable){
  formattingToolbar.enableMediaMode(enable);
  if (enable) {
    formattingToolbar.showMediaToolbar();
  }
 else {
    formattingToolbar.hideMediaToolbar();
  }
  getActivity().invalidateOptionsMenu();
}",0.7251184834123223
13657,"@Override public boolean onToolbarMediaButtonClicked(){
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.MEDIA_BUTTON_TAPPED);
  if (isActionInProgress()) {
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
  }
  if (source.isFocused()) {
    ToastUtils.showToast(getActivity(),R.string.alert_insert_image_html_mode,ToastUtils.Duration.LONG);
  }
 else {
    mEditorFragmentListener.onAddMediaClicked();
    return true;
  }
  return true;
}","@Override public boolean onToolbarMediaButtonClicked(){
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.MEDIA_BUTTON_TAPPED);
  if (isActionInProgress()) {
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
  }
  if (source.isFocused()) {
    ToastUtils.showToast(getActivity(),R.string.alert_insert_image_html_mode,ToastUtils.Duration.LONG);
  }
 else {
    mEditorFragmentListener.onAddMediaClicked();
  }
  return true;
}",0.9788092835519676
13658,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST_LOCAL_ID) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
        mIsPromo=extras.getBoolean(EXTRA_IS_PROMO);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      String postFormat=""String_Node_Str"";
      if (mSite.isUsingWpComRestApi()) {
        categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
        postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      }
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
      mPost.setStatus(PostStatus.PUBLISHED.toString());
    }
 else     if (extras != null) {
      mPost=mPostStore.getPostByLocalPostId(extras.getInt(EXTRA_POST_LOCAL_ID));
      if (mPost != null) {
        initializePostObject();
      }
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    mIsNewPost=savedInstanceState.getBoolean(STATE_KEY_IS_NEW_POST,false);
    if (savedInstanceState.containsKey(STATE_KEY_POST_REMOTE_ID)) {
      mPost=mPostStore.getPostByRemotePostId(savedInstanceState.getLong(STATE_KEY_POST_REMOTE_ID),mSite);
      initializePostObject();
    }
 else     if (savedInstanceState.containsKey(STATE_KEY_POST_LOCAL_ID)) {
      mPost=mPostStore.getPostByLocalPostId(savedInstanceState.getInt(STATE_KEY_POST_LOCAL_ID));
      initializePostObject();
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
 else {
    UploadService.cancelFinalNotification(this,mPost);
    resetUploadingMediaToFailedIfPostHasNotMediaInProgressOrQueued();
  }
  setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoPicker();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoPicker();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost(mPost);
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  if (mShowAztecEditor) {
    View overlay=findViewById(R.id.view_overlay);
    RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)overlay.getLayoutParams();
    layoutParams.bottomMargin=getResources().getDimensionPixelOffset(R.dimen.aztec_format_bar_height);
    overlay.setLayoutParams(layoutParams);
  }
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST_LOCAL_ID) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
        mIsPromo=extras.getBoolean(EXTRA_IS_PROMO);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      String postFormat=""String_Node_Str"";
      if (mSite.isUsingWpComRestApi()) {
        categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
        postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      }
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
      mPost.setStatus(PostStatus.PUBLISHED.toString());
    }
 else     if (extras != null) {
      mPost=mPostStore.getPostByLocalPostId(extras.getInt(EXTRA_POST_LOCAL_ID));
      if (mPost != null) {
        initializePostObject();
      }
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    mIsNewPost=savedInstanceState.getBoolean(STATE_KEY_IS_NEW_POST,false);
    if (savedInstanceState.containsKey(STATE_KEY_POST_REMOTE_ID)) {
      mPost=mPostStore.getPostByRemotePostId(savedInstanceState.getLong(STATE_KEY_POST_REMOTE_ID),mSite);
      initializePostObject();
    }
 else     if (savedInstanceState.containsKey(STATE_KEY_POST_LOCAL_ID)) {
      mPost=mPostStore.getPostByLocalPostId(savedInstanceState.getInt(STATE_KEY_POST_LOCAL_ID));
      initializePostObject();
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
 else {
    UploadService.cancelFinalNotification(this,mPost);
    resetUploadingMediaToFailedIfPostHasNotMediaInProgressOrQueued();
  }
  setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(SiteUtils.getSiteNameOrHomeURL(mSite));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoPicker();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoPicker();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost(mPost);
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}",0.9693447079778756
13659,"private void registerPostModelsForMedia(List<MediaModel> mediaList,boolean isRetry){
  if (mediaList != null && !mediaList.isEmpty()) {
    Set<PostModel> postsToRefresh=PostUtils.getPostsThatIncludeAnyOfTheseMedia(mPostStore,mediaList);
    for (    PostModel post : postsToRefresh) {
      mUploadStore.registerPostModel(post,mediaList);
      if (isThisPostTotallyNewOrFailed(post)) {
        mPostUploadNotifier.addPostInfoToForegroundNotification(post,null);
      }
    }
    if (isRetry) {
      AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_UPLOAD_MEDIA_ERROR_RETRY);
      EventBus.getDefault().post(new UploadService.UploadMediaRetryEvent(mediaList));
    }
  }
}","private void registerPostModelsForMedia(List<MediaModel> mediaList,boolean isRetry){
  if (mediaList != null && !mediaList.isEmpty()) {
    Set<PostModel> postsToRefresh=PostUtils.getPostsThatIncludeAnyOfTheseMedia(mPostStore,mediaList);
    for (    PostModel post : postsToRefresh) {
      if (!mUploadStore.isRegisteredPostModel(post)) {
        mUploadStore.registerPostModel(post,mediaList);
      }
    }
    if (isRetry) {
      AnalyticsTracker.track(AnalyticsTracker.Stat.NOTIFICATION_UPLOAD_MEDIA_ERROR_RETRY);
      EventBus.getDefault().post(new UploadService.UploadMediaRetryEvent(mediaList));
    }
  }
}",0.8595548733691482
13660,"private void unpackPostIntent(@NonNull Intent intent){
  PostModel post=mPostStore.getPostByLocalPostId(intent.getIntExtra(KEY_LOCAL_POST_ID,0));
  if (post != null) {
    boolean shouldTrackAnalytics=intent.getBooleanExtra(KEY_SHOULD_TRACK_ANALYTICS,false);
    if (shouldTrackAnalytics) {
      mPostUploadHandler.registerPostForAnalyticsTracking(post);
    }
    mPostUploadNotifier.cancelFinalNotification(this,post);
    if (intent.getBooleanExtra(KEY_SHOULD_PUBLISH,false)) {
      makePostPublishable(post);
      PostUtils.trackSavePostAnalytics(post,mSiteStore.getSiteByLocalId(post.getLocalSiteId()));
    }
    if (intent.getBooleanExtra(KEY_SHOULD_RETRY,false)) {
      if (AppPrefs.isAztecEditorEnabled()) {
        if (!NetworkUtils.isNetworkAvailable(this)) {
          rebuildNotificationError(post,getString(R.string.no_network_message));
          return;
        }
        aztecRetryUpload(post);
      }
 else {
        ToastUtils.showToast(this,R.string.retry_needs_aztec);
      }
      return;
    }
    if (isThisPostTotallyNewOrFailed(post)) {
      mPostUploadNotifier.addPostInfoToForegroundNotification(post,null);
    }
    if (!hasPendingOrInProgressMediaUploadsForPost(post)) {
      mPostUploadHandler.upload(post);
    }
 else {
      List<MediaModel> activeMedia=MediaUploadHandler.getPendingOrInProgressMediaUploadsForPost(post);
      mUploadStore.registerPostModel(post,activeMedia);
    }
  }
}","private void unpackPostIntent(@NonNull Intent intent){
  PostModel post=mPostStore.getPostByLocalPostId(intent.getIntExtra(KEY_LOCAL_POST_ID,0));
  if (post != null) {
    boolean shouldTrackAnalytics=intent.getBooleanExtra(KEY_SHOULD_TRACK_ANALYTICS,false);
    if (shouldTrackAnalytics) {
      mPostUploadHandler.registerPostForAnalyticsTracking(post);
    }
    mPostUploadNotifier.cancelFinalNotification(this,post);
    if (intent.getBooleanExtra(KEY_SHOULD_PUBLISH,false)) {
      makePostPublishable(post);
      PostUtils.trackSavePostAnalytics(post,mSiteStore.getSiteByLocalId(post.getLocalSiteId()));
    }
    if (intent.getBooleanExtra(KEY_SHOULD_RETRY,false)) {
      if (AppPrefs.isAztecEditorEnabled()) {
        if (!NetworkUtils.isNetworkAvailable(this)) {
          rebuildNotificationError(post,getString(R.string.no_network_message));
          return;
        }
        aztecRetryUpload(post);
      }
 else {
        ToastUtils.showToast(this,R.string.retry_needs_aztec);
      }
      return;
    }
    if (isThisPostTotallyNewOrFailed(post) && !PostUploadHandler.isPostUploadingOrQueued(post)) {
      mPostUploadNotifier.addPostInfoToForegroundNotification(post,null);
    }
    if (!hasPendingOrInProgressMediaUploadsForPost(post)) {
      mPostUploadHandler.upload(post);
    }
 else {
      List<MediaModel> activeMedia=MediaUploadHandler.getPendingOrInProgressMediaUploadsForPost(post);
      mUploadStore.registerPostModel(post,activeMedia);
    }
  }
}",0.9821673525377228
13661,"private void refreshPluginVersionViews(){
  if (TextUtils.isEmpty(mPlugin.getVersion())) {
    mInstalledVersionTextView.setVisibility(View.GONE);
  }
 else {
    mInstalledVersionTextView.setVisibility(View.VISIBLE);
    mInstalledVersionTextView.setText(getString(R.string.plugin_installed_version,mPlugin.getVersion()));
  }
  if (!PluginUtils.isUpdateAvailable(mPlugin,mPluginInfo)) {
    mAvailableVersionTextView.setVisibility(View.GONE);
  }
 else {
    mAvailableVersionTextView.setVisibility(View.VISIBLE);
    mAvailableVersionTextView.setText(getString(R.string.plugin_available_version,mPluginInfo.getVersion()));
  }
  refreshUpdateVersionViews();
}","private void refreshPluginVersionViews(){
  if (TextUtils.isEmpty(mPlugin.getVersion())) {
    mInstalledVersionTextView.setVisibility(View.GONE);
  }
 else {
    mInstalledVersionTextView.setVisibility(View.VISIBLE);
    mInstalledVersionTextView.setText(getString(R.string.plugin_installed_version,mPlugin.getVersion()));
  }
  if (!PluginUtils.isUpdateAvailable(mPlugin,mWPOrgPlugin)) {
    mAvailableVersionTextView.setVisibility(View.GONE);
  }
 else {
    mAvailableVersionTextView.setVisibility(View.VISIBLE);
    mAvailableVersionTextView.setText(getString(R.string.plugin_available_version,mWPOrgPlugin.getVersion()));
  }
  refreshUpdateVersionViews();
}",0.9683257918552036
13662,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onWPOrgPluginFetched(PluginStore.OnWPOrgPluginFetched event){
  if (isFinishing()) {
    return;
  }
  if (event.isError()) {
    AppLog.e(AppLog.T.API,""String_Node_Str"" + event.error.type);
    return;
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onWPOrgPluginFetched(OnWPOrgPluginFetched event){
  if (isFinishing()) {
    return;
  }
  if (event.isError()) {
    AppLog.e(AppLog.T.API,""String_Node_Str"" + event.error.type);
    return;
  }
  if (!TextUtils.isEmpty(mPlugin.getSlug()) && mPlugin.getSlug().equals(event.pluginSlug)) {
    mWPOrgPlugin=mPluginStore.getWPOrgPluginBySlug(event.pluginSlug);
    refreshPluginVersionViews();
  }
}",0.7282051282051282
13663,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  String pluginName;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    pluginName=getIntent().getStringExtra(KEY_PLUGIN_NAME);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    pluginName=savedInstanceState.getString(KEY_PLUGIN_NAME);
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,Duration.SHORT);
    finish();
    return;
  }
  mPlugin=mPluginStore.getSitePluginByName(mSite,pluginName);
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  if (savedInstanceState == null) {
    mIsActive=mPlugin.isActive();
    mIsAutoUpdateEnabled=mPlugin.isAutoUpdateEnabled();
    mDispatcher.dispatch(PluginActionBuilder.newFetchWporgPluginAction(mPlugin.getSlug()));
  }
 else {
    mIsConfiguringPlugin=savedInstanceState.getBoolean(KEY_IS_CONFIGURING_PLUGIN);
    mIsUpdatingPlugin=savedInstanceState.getBoolean(KEY_IS_UPDATING_PLUGIN);
    mIsRemovingPlugin=savedInstanceState.getBoolean(KEY_IS_REMOVING_PLUGIN);
    mIsActive=savedInstanceState.getBoolean(KEY_IS_ACTIVE);
    mIsAutoUpdateEnabled=savedInstanceState.getBoolean(KEY_IS_AUTO_UPDATE_ENABLED);
    mIsShowingRemovePluginConfirmationDialog=savedInstanceState.getBoolean(KEY_IS_SHOWING_REMOVE_PLUGIN_CONFIRMATION_DIALOG);
  }
  mPluginInfo=PluginUtils.getPluginInfo(mPluginStore,mPlugin);
  setContentView(R.layout.plugin_detail_activity);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(mPlugin.getDisplayName());
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setElevation(0);
  }
  setupViews();
  if (mIsShowingRemovePluginConfirmationDialog) {
    confirmRemovePlugin();
  }
  if (mIsRemovingPlugin) {
    showRemovePluginProgressDialog();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  String pluginName;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    pluginName=getIntent().getStringExtra(KEY_PLUGIN_NAME);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    pluginName=savedInstanceState.getString(KEY_PLUGIN_NAME);
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,Duration.SHORT);
    finish();
    return;
  }
  mPlugin=mPluginStore.getSitePluginByName(mSite,pluginName);
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  if (savedInstanceState == null) {
    mIsActive=mPlugin.isActive();
    mIsAutoUpdateEnabled=mPlugin.isAutoUpdateEnabled();
    mDispatcher.dispatch(PluginActionBuilder.newFetchWporgPluginAction(mPlugin.getSlug()));
  }
 else {
    mIsConfiguringPlugin=savedInstanceState.getBoolean(KEY_IS_CONFIGURING_PLUGIN);
    mIsUpdatingPlugin=savedInstanceState.getBoolean(KEY_IS_UPDATING_PLUGIN);
    mIsRemovingPlugin=savedInstanceState.getBoolean(KEY_IS_REMOVING_PLUGIN);
    mIsActive=savedInstanceState.getBoolean(KEY_IS_ACTIVE);
    mIsAutoUpdateEnabled=savedInstanceState.getBoolean(KEY_IS_AUTO_UPDATE_ENABLED);
    mIsShowingRemovePluginConfirmationDialog=savedInstanceState.getBoolean(KEY_IS_SHOWING_REMOVE_PLUGIN_CONFIRMATION_DIALOG);
  }
  mWPOrgPlugin=PluginUtils.getWPOrgPlugin(mPluginStore,mPlugin);
  setContentView(R.layout.plugin_detail_activity);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(mPlugin.getDisplayName());
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setElevation(0);
  }
  setupViews();
  if (mIsShowingRemovePluginConfirmationDialog) {
    confirmRemovePlugin();
  }
  if (mIsRemovingPlugin) {
    showRemovePluginProgressDialog();
  }
}",0.9903890160183066
13664,"private void dispatchUpdatePluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!PluginUtils.isUpdateAvailable(mPlugin,mPluginInfo) || mIsUpdatingPlugin) {
    return;
  }
  mIsUpdatingPlugin=true;
  refreshUpdateVersionViews();
  UpdateSitePluginPayload payload=new UpdateSitePluginPayload(mSite,mPlugin);
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginAction(payload));
}","private void dispatchUpdatePluginAction(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!PluginUtils.isUpdateAvailable(mPlugin,mWPOrgPlugin) || mIsUpdatingPlugin) {
    return;
  }
  mIsUpdatingPlugin=true;
  refreshUpdateVersionViews();
  UpdateSitePluginPayload payload=new UpdateSitePluginPayload(mSite,mPlugin);
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginAction(payload));
}",0.974910394265233
13665,"private void refreshUpdateVersionViews(){
  boolean isUpdateAvailable=PluginUtils.isUpdateAvailable(mPlugin,mPluginInfo);
  if (isUpdateAvailable && !mIsUpdatingPlugin) {
    mUpdateTextView.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateTextView.setVisibility(View.GONE);
  }
  if (mIsUpdatingPlugin) {
    mUpdateProgressBar.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateProgressBar.setVisibility(View.GONE);
  }
}","private void refreshUpdateVersionViews(){
  boolean isUpdateAvailable=PluginUtils.isUpdateAvailable(mPlugin,mWPOrgPlugin);
  if (isUpdateAvailable && !mIsUpdatingPlugin) {
    mUpdateTextView.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateTextView.setVisibility(View.GONE);
  }
  if (mIsUpdatingPlugin) {
    mUpdateProgressBar.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateProgressBar.setVisibility(View.GONE);
  }
}",0.9894736842105264
13666,"@Override public void onBindViewHolder(ViewHolder holder,int position){
  SitePluginModel pluginModel=getItem(position);
  if (pluginModel != null) {
    PluginViewHolder pluginHolder=(PluginViewHolder)holder;
    pluginHolder.name.setText(pluginModel.getDisplayName());
    pluginHolder.status.setText(getPluginStatusText(pluginModel));
    WPOrgPluginModel pluginInfo=PluginUtils.getPluginInfo(mPluginStore,pluginModel);
    if (pluginInfo == null) {
      mDispatcher.dispatch(PluginActionBuilder.newFetchWporgPluginAction(pluginModel.getSlug()));
    }
    String iconUrl=pluginInfo != null ? pluginInfo.getIcon() : ""String_Node_Str"";
    pluginHolder.icon.setImageUrl(iconUrl,ImageType.PLUGIN_ICON);
    if (pluginInfo != null && PluginUtils.isUpdateAvailable(pluginModel,pluginInfo)) {
      pluginHolder.updateAvailableIcon.setVisibility(View.VISIBLE);
    }
 else {
      pluginHolder.updateAvailableIcon.setVisibility(View.GONE);
    }
  }
}","@Override public void onBindViewHolder(ViewHolder holder,int position){
  SitePluginModel pluginModel=getItem(position);
  if (pluginModel != null) {
    PluginViewHolder pluginHolder=(PluginViewHolder)holder;
    pluginHolder.name.setText(pluginModel.getDisplayName());
    pluginHolder.status.setText(getPluginStatusText(pluginModel));
    WPOrgPluginModel wpOrgPlugin=PluginUtils.getWPOrgPlugin(mPluginStore,pluginModel);
    if (wpOrgPlugin == null) {
      mDispatcher.dispatch(PluginActionBuilder.newFetchWporgPluginAction(pluginModel.getSlug()));
    }
    String iconUrl=wpOrgPlugin != null ? wpOrgPlugin.getIcon() : ""String_Node_Str"";
    pluginHolder.icon.setImageUrl(iconUrl,ImageType.PLUGIN_ICON);
    if (wpOrgPlugin != null && PluginUtils.isUpdateAvailable(pluginModel,wpOrgPlugin)) {
      pluginHolder.updateAvailableIcon.setVisibility(View.VISIBLE);
    }
 else {
      pluginHolder.updateAvailableIcon.setVisibility(View.GONE);
    }
  }
}",0.8694284216046145
13667,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onWPOrgPluginFetched(OnWPOrgPluginFetched event){
  if (isFinishing()) {
    return;
  }
  if (event.isError()) {
    AppLog.e(T.API,""String_Node_Str"" + event.error.type);
    return;
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onWPOrgPluginFetched(OnWPOrgPluginFetched event){
  if (isFinishing()) {
    return;
  }
  if (event.isError()) {
    AppLog.e(T.API,""String_Node_Str"" + event.error.type);
    return;
  }
  if (!TextUtils.isEmpty(event.pluginSlug)) {
    mAdapter.refreshPluginWithSlug(event.pluginSlug);
  }
}",0.8419452887537994
13668,"static boolean isUpdateAvailable(SitePluginModel plugin,WPOrgPluginModel pluginInfo){
  if (pluginInfo == null || TextUtils.isEmpty(plugin.getVersion()) || TextUtils.isEmpty(pluginInfo.getVersion())) {
    return false;
  }
  Version currentVersion=new Version(plugin.getVersion());
  Version availableVersion=new Version(pluginInfo.getVersion());
  return currentVersion.compareTo(availableVersion) == -1;
}","static boolean isUpdateAvailable(SitePluginModel plugin,WPOrgPluginModel wpOrgPlugin){
  if (wpOrgPlugin == null || TextUtils.isEmpty(plugin.getVersion()) || TextUtils.isEmpty(wpOrgPlugin.getVersion())) {
    return false;
  }
  Version currentVersion=new Version(plugin.getVersion());
  Version availableVersion=new Version(wpOrgPlugin.getVersion());
  return currentVersion.compareTo(availableVersion) == -1;
}",0.8073170731707318
13669,"private void setupViews(){
  mContainer=findViewById(R.id.plugin_detail_container);
  mTitleTextView=findViewById(R.id.text_title);
  mByLineTextView=findViewById(R.id.text_byline);
  mVersionTopTextView=findViewById(R.id.plugin_version_top);
  mVersionBottomTextView=findViewById(R.id.plugin_version_bottom);
  mUpdateTextView=findViewById(R.id.plugin_btn_update);
  mUpdateProgressBar=findViewById(R.id.plugin_update_progress_bar);
  mSwitchActive=findViewById(R.id.plugin_state_active);
  mSwitchAutoupdates=findViewById(R.id.plugin_state_autoupdates);
  mImageBanner=findViewById(R.id.image_banner);
  mImageIcon=findViewById(R.id.image_icon);
  mDescriptionTextView=findViewById(R.id.plugin_description);
  mDescriptionChevron=findViewById(R.id.plugin_description_chevron);
  findViewById(R.id.plugin_description_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mDescriptionTextView,mDescriptionChevron);
    }
  }
);
  mVersionTopTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showPluginInfoPopup();
    }
  }
);
  mSwitchActive.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsActive=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  mSwitchAutoupdates.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsAutoUpdateEnabled=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  mUpdateTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      dispatchUpdatePluginAction();
    }
  }
);
  View settingsView=findViewById(R.id.plugin_settings_page);
  if (canShowSettings()) {
    settingsView.setVisibility(View.VISIBLE);
    settingsView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
 else {
    settingsView.setVisibility(View.GONE);
  }
  findViewById(R.id.plugin_wp_org_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ActivityLauncher.openUrlExternal(PluginDetailActivity.this,getWpOrgPluginUrl());
    }
  }
);
  findViewById(R.id.plugin_home_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ActivityLauncher.openUrlExternal(PluginDetailActivity.this,mSitePlugin.getPluginUrl());
    }
  }
);
  refreshViews();
}","private void setupViews(){
  mContainer=findViewById(R.id.plugin_detail_container);
  mTitleTextView=findViewById(R.id.text_title);
  mByLineTextView=findViewById(R.id.text_byline);
  mVersionTopTextView=findViewById(R.id.plugin_version_top);
  mVersionBottomTextView=findViewById(R.id.plugin_version_bottom);
  mUpdateTextView=findViewById(R.id.plugin_btn_update);
  mUpdateProgressBar=findViewById(R.id.plugin_update_progress_bar);
  mSwitchActive=findViewById(R.id.plugin_state_active);
  mSwitchAutoupdates=findViewById(R.id.plugin_state_autoupdates);
  mImageBanner=findViewById(R.id.image_banner);
  mImageIcon=findViewById(R.id.image_icon);
  mDescriptionTextView=findViewById(R.id.plugin_description);
  mDescriptionChevron=findViewById(R.id.plugin_description_chevron);
  findViewById(R.id.plugin_description_container).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleText(mDescriptionTextView,mDescriptionChevron);
    }
  }
);
  mVersionTopTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showPluginInfoPopup();
    }
  }
);
  if (!canPluginBeDisabledOrRemoved()) {
    mSwitchActive.setVisibility(View.GONE);
  }
 else {
    mSwitchActive.setOnCheckedChangeListener(new OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton compoundButton,      boolean b){
        if (compoundButton.isPressed()) {
          mIsActive=b;
          dispatchConfigurePluginAction(false);
        }
      }
    }
);
  }
  mSwitchAutoupdates.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean b){
      if (compoundButton.isPressed()) {
        mIsAutoUpdateEnabled=b;
        dispatchConfigurePluginAction(false);
      }
    }
  }
);
  mUpdateTextView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      dispatchUpdatePluginAction();
    }
  }
);
  View settingsView=findViewById(R.id.plugin_settings_page);
  if (canShowSettings()) {
    settingsView.setVisibility(View.VISIBLE);
    settingsView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
 else {
    settingsView.setVisibility(View.GONE);
  }
  findViewById(R.id.plugin_wp_org_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ActivityLauncher.openUrlExternal(PluginDetailActivity.this,getWpOrgPluginUrl());
    }
  }
);
  findViewById(R.id.plugin_home_page).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ActivityLauncher.openUrlExternal(PluginDetailActivity.this,mSitePlugin.getPluginUrl());
    }
  }
);
  refreshViews();
}",0.9784505788067676
13670,"public BitmapDrawable getAztecPlaceholderDrawableFromResID(int drawableId){
  Drawable drawable=getResources().getDrawable(drawableId);
  Bitmap bitmap;
  if (drawable instanceof BitmapDrawable) {
    bitmap=((BitmapDrawable)drawable).getBitmap();
    bitmap=ImageUtils.getScaledBitmapAtLongestSide(bitmap,maxImageWidthForVisualEditor);
  }
 else   if (drawable instanceof VectorDrawable) {
    bitmap=getScaledBitmapFromVectorDrawable((VectorDrawable)drawable,maxImageWidthForVisualEditor,maxImageWidthForVisualEditor);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  bitmap.setDensity(DisplayMetrics.DENSITY_DEFAULT);
  return new BitmapDrawable(getResources(),bitmap);
}","public BitmapDrawable getAztecPlaceholderDrawableFromResID(@DrawableRes int drawableId){
  Drawable drawable=getResources().getDrawable(drawableId);
  Bitmap bitmap;
  if (drawable instanceof BitmapDrawable) {
    bitmap=((BitmapDrawable)drawable).getBitmap();
    bitmap=ImageUtils.getScaledBitmapAtLongestSide(bitmap,maxImageWidthForVisualEditor);
  }
 else   if (drawable instanceof VectorDrawableCompat || drawable instanceof VectorDrawable) {
    bitmap=Bitmap.createBitmap(maxImageWidthForVisualEditor,maxImageWidthForVisualEditor,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
    drawable.draw(canvas);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  bitmap.setDensity(DisplayMetrics.DENSITY_DEFAULT);
  return new BitmapDrawable(getResources(),bitmap);
}",0.8154724159797083
13671,"boolean hasChanges(){
  return !StringUtils.equals(mTerm.getName(),EditTextUtils.getText(mNameView)) || !StringUtils.equals(mTerm.getDescription(),EditTextUtils.getText(mDescriptionView));
}","boolean hasChanges(){
  return !TextUtils.isEmpty(mTerm.getName()) && (!StringUtils.equals(mTerm.getName(),EditTextUtils.getText(mNameView)) || !StringUtils.equals(mTerm.getDescription(),EditTextUtils.getText(mDescriptionView)));
}",0.9026128266033254
13672,"public static TagDetailFragment newInstance(@Nullable TermModel term){
  TagDetailFragment fragment=new TagDetailFragment();
  Bundle args=new Bundle();
  if (term == null) {
    args.putBoolean(ARGS_IS_NEW_TERM,true);
    term=new TermModel();
    term.setTaxonomy(TaxonomyStore.DEFAULT_TAXONOMY_TAG);
  }
  args.putSerializable(ARGS_TERM,term);
  fragment.setArguments(args);
  return fragment;
}","public static TagDetailFragment newInstance(@Nullable TermModel term){
  TagDetailFragment fragment=new TagDetailFragment();
  Bundle args=new Bundle();
  if (term == null) {
    args.putBoolean(ARGS_IS_NEW_TERM,true);
    term=new TermModel();
    term.setName(""String_Node_Str"");
    term.setDescription(""String_Node_Str"");
    term.setTaxonomy(TaxonomyStore.DEFAULT_TAXONOMY_TAG);
  }
  args.putSerializable(ARGS_TERM,term);
  fragment.setArguments(args);
  return fragment;
}",0.9076396807297604
13673,"private void saveTag(@NonNull TermModel term,boolean isNewTerm){
  if (TextUtils.isEmpty(term.getName())) {
    return;
  }
  if (isNewTerm && termExists(term.getName())) {
    ToastUtils.showToast(this,R.string.error_tag_exists);
    return;
  }
  showProgressDialog(R.string.dlg_saving_tag);
  Action action=TaxonomyActionBuilder.newPushTermAction(new TaxonomyStore.RemoteTermPayload(term,mSite));
  mDispatcher.dispatch(action);
}","private void saveTag(@NonNull TermModel term,boolean isNewTerm){
  if (isNewTerm && tagExists(term.getName())) {
    ToastUtils.showToast(this,R.string.error_tag_exists);
    return;
  }
  showProgressDialog(R.string.dlg_saving_tag);
  Action action=TaxonomyActionBuilder.newPushTermAction(new TaxonomyStore.RemoteTermPayload(term,mSite));
  mDispatcher.dispatch(action);
}",0.9205955334987592
13674,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == EDITOR_MEDIA_SETTINGS) {
    if (mTappedMediaPredicate != null) {
      if (data == null || data.getExtras() == null) {
        return;
      }
      EditorImageMetaData metaData=data.getParcelableExtra(ARG_EDITOR_IMAGE_METADATA);
      if (metaData.isRemoved()) {
        String editorContentBeforeImageIsRemoved=""String_Node_Str"";
        if (isHistoryEnabled()) {
          editorContentBeforeImageIsRemoved=content.toFormattedHtml();
        }
        CaptionExtensionsKt.removeImageCaption(content,mTappedMediaPredicate);
        content.removeMedia(mTappedMediaPredicate);
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(editorContentBeforeImageIsRemoved);
        }
      }
 else {
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(content.toFormattedHtml());
        }
        AztecAttributes attributes=content.getElementAttributes(mTappedMediaPredicate);
        attributes.setValue(ATTR_SRC,metaData.getSrc());
        if (!TextUtils.isEmpty(metaData.getTitle())) {
          attributes.setValue(ATTR_TITLE,metaData.getTitle());
        }
 else {
          attributes.removeAttribute(ATTR_TITLE);
        }
        if (!TextUtils.isEmpty(metaData.getAlt())) {
          attributes.setValue(ATTR_ALT,metaData.getAlt());
        }
 else {
          attributes.removeAttribute(ATTR_ALT);
        }
        attributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
        attributes.setValue(ATTR_DIMEN_HEIGHT,metaData.getHeight());
        if (!TextUtils.isEmpty(metaData.getLinkUrl())) {
          AztecAttributes linkAttributes=MediaLinkExtensionsKt.getMediaLinkAttributes(content,mTappedMediaPredicate);
          linkAttributes.setValue(""String_Node_Str"",""String_Node_Str"");
          linkAttributes.removeAttribute(""String_Node_Str"");
          if (metaData.isLinkTargetBlank()) {
            linkAttributes.setValue(ATTR_TARGET,""String_Node_Str"");
          }
 else {
            linkAttributes.removeAttribute(ATTR_TARGET);
          }
          MediaLinkExtensionsKt.addLinkToMedia(content,mTappedMediaPredicate,UrlUtils.addUrlSchemeIfNeeded(metaData.getLinkUrl(),false),linkAttributes);
        }
 else {
          MediaLinkExtensionsKt.removeLinkFromMedia(content,mTappedMediaPredicate);
        }
        AttributesWithClass attributesWithClass=getAttributesWithClass(attributes);
        attributesWithClass.removeClassStartingWith(ATTR_ALIGN);
        attributesWithClass.removeClassStartingWith(ATTR_SIZE_DASH);
        attributesWithClass.removeClassStartingWith(ATTR_IMAGE_WP_DASH);
        if (!TextUtils.isEmpty(metaData.getCaption())) {
          AztecAttributes captionAttributes=CaptionExtensionsKt.getImageCaptionAttributes(content,mTappedMediaPredicate);
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            captionAttributes.setValue(ATTR_ALIGN,ATTR_ALIGN + metaData.getAlign());
          }
 else {
            captionAttributes.removeAttribute(ATTR_ALIGN);
          }
          captionAttributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
          CaptionExtensionsKt.setImageCaption(content,mTappedMediaPredicate,metaData.getCaption(),captionAttributes);
          List<IAztecAttributedSpan> tappedImageSpan=getSpansForPredicate(content.getEditableText(),mTappedMediaPredicate,true);
          if (tappedImageSpan.size() > 0) {
            int imageSpanEnd=content.getEditableText().getSpanEnd(tappedImageSpan.get(0));
            CaptionShortcodeSpan[] captions=content.getEditableText().getSpans(imageSpanEnd,imageSpanEnd,CaptionShortcodeSpan.class);
            if (captions.length > 0) {
              int captionStart=content.getEditableText().getSpanStart(captions[0]);
              int captionEnd=content.getEditableText().getSpanEnd(captions[0]);
              int captionFlags=content.getEditableText().getSpanFlags(captions[0]);
              if (content.getEditableText().charAt(captionEnd - 1) == '\n') {
                captionEnd--;
              }
              String expectedString=""String_Node_Str"" + metaData.getCaption();
              CharSequence actualContent=content.getEditableText().subSequence(imageSpanEnd,captionEnd);
              if (captionEnd == imageSpanEnd + expectedString.length() && actualContent.toString().equals(expectedString)) {
                content.disableTextChangedListener();
                content.getEditableText().delete(imageSpanEnd,imageSpanEnd + 1);
                content.getEditableText().setSpan(captions[0],captionStart,captionEnd - 1,captionFlags);
                content.enableTextChangedListener();
                content.fromHtml(content.toHtml(false));
              }
            }
          }
        }
 else {
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            attributesWithClass.addClass(ATTR_ALIGN + metaData.getAlign());
          }
          CaptionExtensionsKt.removeImageCaption(content,mTappedMediaPredicate);
        }
        if (!TextUtils.isEmpty(metaData.getSize())) {
          attributesWithClass.addClass(metaData.getSize());
        }
        if (!TextUtils.isEmpty(metaData.getAttachmentId())) {
          attributesWithClass.addClass(ATTR_IMAGE_WP_DASH + metaData.getAttachmentId());
        }
        attributes.setValue(ATTR_CLASS,attributesWithClass.getAttributes().getValue(ATTR_CLASS));
        attributes.removeAttribute(TEMP_IMAGE_ID);
        content.updateElementAttributes(mTappedMediaPredicate,attributes);
      }
      mTappedMediaPredicate=null;
      if (isHistoryEnabled()) {
        content.history.handleHistory(content);
      }
    }
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == EDITOR_MEDIA_SETTINGS) {
    if (mTappedMediaPredicate != null) {
      if (data == null || data.getExtras() == null) {
        return;
      }
      EditorImageMetaData metaData=data.getParcelableExtra(ARG_EDITOR_IMAGE_METADATA);
      if (metaData.isRemoved()) {
        String editorContentBeforeImageIsRemoved=""String_Node_Str"";
        if (isHistoryEnabled()) {
          editorContentBeforeImageIsRemoved=content.toFormattedHtml();
        }
        CaptionExtensionsKt.removeImageCaption(content,mTappedMediaPredicate);
        content.removeMedia(mTappedMediaPredicate);
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(editorContentBeforeImageIsRemoved);
        }
      }
 else {
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(content.toFormattedHtml());
        }
        AztecAttributes attributes=content.getElementAttributes(mTappedMediaPredicate);
        attributes.setValue(ATTR_SRC,metaData.getSrc());
        if (!TextUtils.isEmpty(metaData.getTitle())) {
          attributes.setValue(ATTR_TITLE,metaData.getTitle());
        }
 else {
          attributes.removeAttribute(ATTR_TITLE);
        }
        if (!TextUtils.isEmpty(metaData.getAlt())) {
          attributes.setValue(ATTR_ALT,metaData.getAlt());
        }
 else {
          attributes.removeAttribute(ATTR_ALT);
        }
        attributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
        attributes.setValue(ATTR_DIMEN_HEIGHT,metaData.getHeight());
        if (!TextUtils.isEmpty(metaData.getLinkUrl())) {
          AztecAttributes linkAttributes=MediaLinkExtensionsKt.getMediaLinkAttributes(content,mTappedMediaPredicate);
          linkAttributes.setValue(""String_Node_Str"",""String_Node_Str"");
          linkAttributes.removeAttribute(""String_Node_Str"");
          if (metaData.isLinkTargetBlank()) {
            linkAttributes.setValue(ATTR_TARGET,""String_Node_Str"");
          }
 else {
            linkAttributes.removeAttribute(ATTR_TARGET);
          }
          MediaLinkExtensionsKt.addLinkToMedia(content,mTappedMediaPredicate,UrlUtils.addUrlSchemeIfNeeded(metaData.getLinkUrl(),false),linkAttributes);
        }
 else {
          MediaLinkExtensionsKt.removeLinkFromMedia(content,mTappedMediaPredicate);
        }
        AttributesWithClass attributesWithClass=getAttributesWithClass(attributes);
        attributesWithClass.removeClassStartingWith(ATTR_ALIGN);
        attributesWithClass.removeClassStartingWith(ATTR_SIZE_DASH);
        attributesWithClass.removeClassStartingWith(ATTR_IMAGE_WP_DASH);
        if (!TextUtils.isEmpty(metaData.getCaption())) {
          AztecAttributes captionAttributes=CaptionExtensionsKt.getImageCaptionAttributes(content,mTappedMediaPredicate);
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            captionAttributes.setValue(ATTR_ALIGN,ATTR_ALIGN + metaData.getAlign());
          }
 else {
            captionAttributes.removeAttribute(ATTR_ALIGN);
          }
          captionAttributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
          CaptionExtensionsKt.setImageCaption(content,mTappedMediaPredicate,metaData.getCaption(),captionAttributes);
          content.fromHtml(content.toHtml(false));
        }
 else {
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            attributesWithClass.addClass(ATTR_ALIGN + metaData.getAlign());
          }
          CaptionExtensionsKt.removeImageCaption(content,mTappedMediaPredicate);
        }
        if (!TextUtils.isEmpty(metaData.getSize())) {
          attributesWithClass.addClass(metaData.getSize());
        }
        if (!TextUtils.isEmpty(metaData.getAttachmentId())) {
          attributesWithClass.addClass(ATTR_IMAGE_WP_DASH + metaData.getAttachmentId());
        }
        attributes.setValue(ATTR_CLASS,attributesWithClass.getAttributes().getValue(ATTR_CLASS));
        attributes.removeAttribute(TEMP_IMAGE_ID);
        content.updateElementAttributes(mTappedMediaPredicate,attributes);
      }
      mTappedMediaPredicate=null;
      if (isHistoryEnabled()) {
        content.history.handleHistory(content);
      }
    }
  }
}",0.8470353761833582
13675,"@Override public void onMediaDeleted(AztecAttributes aztecAttributes){
  String localMediaId=aztecAttributes.getValue(ATTR_ID_WP);
  mUploadingMediaProgressMax.remove(localMediaId);
  if (!TextUtils.isEmpty(localMediaId)) {
    mEditorFragmentListener.onMediaDeleted(localMediaId);
    removeCaptionFromDeletedMedia(localMediaId);
  }
}","@Override public void onMediaDeleted(AztecAttributes aztecAttributes){
  String localMediaId=aztecAttributes.getValue(ATTR_ID_WP);
  mUploadingMediaProgressMax.remove(localMediaId);
  if (!TextUtils.isEmpty(localMediaId)) {
    mEditorFragmentListener.onMediaDeleted(localMediaId);
  }
}",0.9213483146067416
13676,"public void activateTheme(String themeId){
  if (!mSite.isUsingWpComRestApi()) {
    AppLog.i(T.THEMES,""String_Node_Str"");
    return;
  }
  ThemeModel theme=mThemeStore.getInstalledThemeByThemeId(mSite,themeId);
  if (theme == null) {
    theme=mThemeStore.getWpComThemeByThemeId(themeId);
    if (theme == null) {
      AppLog.w(T.THEMES,""String_Node_Str"");
      return;
    }
    if (mSite.isJetpackConnected()) {
      mDispatcher.dispatch(ThemeActionBuilder.newInstallThemeAction(new ActivateThemePayload(mSite,theme)));
      return;
    }
  }
  mDispatcher.dispatch(ThemeActionBuilder.newActivateThemeAction(new ActivateThemePayload(mSite,theme)));
}","public void activateTheme(String themeId){
  if (!mSite.isUsingWpComRestApi()) {
    AppLog.i(T.THEMES,""String_Node_Str"");
    return;
  }
  ThemeModel theme=mThemeStore.getInstalledThemeByThemeId(mSite,themeId);
  if (theme == null) {
    theme=mThemeStore.getWpComThemeByThemeId(themeId);
    if (theme == null) {
      AppLog.w(T.THEMES,""String_Node_Str"");
      return;
    }
    if (mSite.isJetpackConnected()) {
      mDispatcher.dispatch(ThemeActionBuilder.newInstallThemeAction(new SiteThemePayload(mSite,theme)));
      return;
    }
  }
  mDispatcher.dispatch(ThemeActionBuilder.newActivateThemeAction(new SiteThemePayload(mSite,theme)));
}",0.8073394495412844
13677,"@Override public void onClick(View v){
  getDialog().cancel();
  if (!AppPrefs.isAztecEditorEnabled()) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_POSITIVE);
    AppPrefs.setAztecEditorEnabled(true);
    AppPrefs.setVisualEditorEnabled(false);
    SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());
    preferences.edit().putString(getString(R.string.pref_key_editor_type),""String_Node_Str"").apply();
  }
  ActivityLauncher.addNewPostOrPageForResult(getActivity(),((WPMainActivity)getActivity()).getSelectedSite(),false,true);
}","@Override public void onClick(View v){
  getDialog().cancel();
  if (!AppPrefs.isAztecEditorEnabled()) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_POSITIVE);
    AppPrefs.setAztecEditorEnabled(true);
    AppPrefs.setVisualEditorEnabled(false);
    AppPrefs.setNewEditorPromoRequired(false);
  }
  ActivityLauncher.addNewPostOrPageForResult(getActivity(),((WPMainActivity)getActivity()).getSelectedSite(),false,true);
}",0.5370548604427334
13678,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ImageView image=(ImageView)view.findViewById(R.id.promo_dialog_image);
  image.setImageResource(mDrawableResId);
  LinearLayout imageContainer=(LinearLayout)view.findViewById(R.id.promo_dialog_image_container);
  imageContainer.setVisibility(DisplayUtils.isLandscape(getActivity()) ? View.GONE : View.VISIBLE);
  WPTextView title=(WPTextView)view.findViewById(R.id.promo_dialog_title);
  title.setText(mTitleResId);
  WPTextView titleBeta=(WPTextView)view.findViewById(R.id.promo_dialog_title_beta);
  titleBeta.setText(mTitleBetaId);
  WPTextView description=(WPTextView)view.findViewById(R.id.promo_dialog_description);
  description.setText(mDescriptionResId);
  WPTextView link=(WPTextView)view.findViewById(R.id.promo_dialog_link);
  link.setText(mLinkResId);
  if (mLinkOnClickListener == null) {
    link.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        ActivityLauncher.showAztecEditorReleaseNotes(getActivity());
        AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_LINK);
      }
    }
);
  }
 else {
    link.setOnClickListener(mLinkOnClickListener);
  }
  Button buttonNegative=(Button)view.findViewById(R.id.promo_dialog_button_negative);
  buttonNegative.setText(mButtonNegativeResId);
  if (mNegativeButtonOnClickListener == null) {
    buttonNegative.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        getDialog().cancel();
        AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_NEGATIVE);
      }
    }
);
  }
 else {
    buttonNegative.setOnClickListener(mNegativeButtonOnClickListener);
  }
  Button buttonPositive=(Button)view.findViewById(R.id.promo_dialog_button_positive);
  buttonPositive.setText(mButtonPositiveResId);
  if (mPositiveButtonOnClickListener == null) {
    buttonPositive.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getDialog().cancel();
        if (!AppPrefs.isAztecEditorEnabled()) {
          AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_POSITIVE);
          AppPrefs.setAztecEditorEnabled(true);
          AppPrefs.setVisualEditorEnabled(false);
          SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());
          preferences.edit().putString(getString(R.string.pref_key_editor_type),""String_Node_Str"").apply();
        }
        ActivityLauncher.addNewPostOrPageForResult(getActivity(),((WPMainActivity)getActivity()).getSelectedSite(),false,true);
      }
    }
);
  }
 else {
    buttonPositive.setOnClickListener(mPositiveButtonOnClickListener);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  ImageView image=(ImageView)view.findViewById(R.id.promo_dialog_image);
  image.setImageResource(mDrawableResId);
  LinearLayout imageContainer=(LinearLayout)view.findViewById(R.id.promo_dialog_image_container);
  imageContainer.setVisibility(DisplayUtils.isLandscape(getActivity()) ? View.GONE : View.VISIBLE);
  WPTextView title=(WPTextView)view.findViewById(R.id.promo_dialog_title);
  title.setText(mTitleResId);
  WPTextView titleBeta=(WPTextView)view.findViewById(R.id.promo_dialog_title_beta);
  titleBeta.setText(mTitleBetaId);
  WPTextView description=(WPTextView)view.findViewById(R.id.promo_dialog_description);
  description.setText(mDescriptionResId);
  WPTextView link=(WPTextView)view.findViewById(R.id.promo_dialog_link);
  link.setText(mLinkResId);
  if (mLinkOnClickListener == null) {
    link.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        ActivityLauncher.showAztecEditorReleaseNotes(getActivity());
        AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_LINK);
      }
    }
);
  }
 else {
    link.setOnClickListener(mLinkOnClickListener);
  }
  Button buttonNegative=(Button)view.findViewById(R.id.promo_dialog_button_negative);
  buttonNegative.setText(mButtonNegativeResId);
  if (mNegativeButtonOnClickListener == null) {
    buttonNegative.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        getDialog().cancel();
        AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_NEGATIVE);
      }
    }
);
  }
 else {
    buttonNegative.setOnClickListener(mNegativeButtonOnClickListener);
  }
  Button buttonPositive=(Button)view.findViewById(R.id.promo_dialog_button_positive);
  buttonPositive.setText(mButtonPositiveResId);
  if (mPositiveButtonOnClickListener == null) {
    buttonPositive.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getDialog().cancel();
        if (!AppPrefs.isAztecEditorEnabled()) {
          AnalyticsTracker.track(AnalyticsTracker.Stat.EDITOR_AZTEC_PROMO_POSITIVE);
          AppPrefs.setAztecEditorEnabled(true);
          AppPrefs.setVisualEditorEnabled(false);
          AppPrefs.setNewEditorPromoRequired(false);
        }
        ActivityLauncher.addNewPostOrPageForResult(getActivity(),((WPMainActivity)getActivity()).getSelectedSite(),false,true);
      }
    }
);
  }
 else {
    buttonPositive.setOnClickListener(mPositiveButtonOnClickListener);
  }
}",0.9583103764921946
13679,"public static boolean isVisualEditorEnabled(){
  return isVisualEditorAvailable() && getBoolean(DeletablePrefKey.VISUAL_EDITOR_ENABLED,!isAztecEditorEnabled());
}","public static boolean isVisualEditorEnabled(){
  return isVisualEditorAvailable() && getBoolean(UndeletablePrefKey.VISUAL_EDITOR_ENABLED,!isAztecEditorEnabled());
}",0.9877300613496932
13680,"public static void setAztecEditorToolbarExpanded(boolean isExpanded){
  setBoolean(DeletablePrefKey.AZTEC_EDITOR_TOOLBAR_EXPANDED,isExpanded);
}","public static void setAztecEditorToolbarExpanded(boolean isExpanded){
  setBoolean(UndeletablePrefKey.AZTEC_EDITOR_TOOLBAR_EXPANDED,isExpanded);
}",0.986206896551724
13681,"public static boolean isAztecEditorToolbarExpanded(){
  return getBoolean(DeletablePrefKey.AZTEC_EDITOR_TOOLBAR_EXPANDED,false);
}","public static boolean isAztecEditorToolbarExpanded(){
  return getBoolean(UndeletablePrefKey.AZTEC_EDITOR_TOOLBAR_EXPANDED,false);
}",0.9847328244274808
13682,"public static void setAztecEditorEnabled(boolean isEnabled){
  setBoolean(DeletablePrefKey.AZTEC_EDITOR_ENABLED,isEnabled);
  AnalyticsTracker.track(isEnabled ? Stat.EDITOR_AZTEC_TOGGLED_ON : Stat.EDITOR_AZTEC_TOGGLED_OFF);
}","public static void setAztecEditorEnabled(boolean isEnabled){
  setBoolean(UndeletablePrefKey.AZTEC_EDITOR_ENABLED,isEnabled);
  AnalyticsTracker.track(isEnabled ? Stat.EDITOR_AZTEC_TOGGLED_ON : Stat.EDITOR_AZTEC_TOGGLED_OFF);
}",0.991150442477876
13683,"public static void setVisualEditorEnabled(boolean visualEditorEnabled){
  setBoolean(DeletablePrefKey.VISUAL_EDITOR_ENABLED,visualEditorEnabled);
  AnalyticsTracker.track(visualEditorEnabled ? Stat.EDITOR_HYBRID_TOGGLED_ON : Stat.EDITOR_HYBRID_TOGGLED_OFF);
}","public static void setVisualEditorEnabled(boolean visualEditorEnabled){
  setBoolean(UndeletablePrefKey.VISUAL_EDITOR_ENABLED,visualEditorEnabled);
  AnalyticsTracker.track(visualEditorEnabled ? Stat.EDITOR_HYBRID_TOGGLED_ON : Stat.EDITOR_HYBRID_TOGGLED_OFF);
}",0.9923076923076924
13684,"public static boolean isAztecEditorEnabled(){
  return getBoolean(DeletablePrefKey.AZTEC_EDITOR_ENABLED,false);
}","public static boolean isAztecEditorEnabled(){
  return getBoolean(UndeletablePrefKey.AZTEC_EDITOR_ENABLED,false);
}",0.9824561403508772
13685,"private void updateEditorSettings(){
  if (!AppPrefs.isVisualEditorAvailable()) {
    PreferenceScreen preferenceScreen=(PreferenceScreen)findPreference(getActivity().getString(R.string.pref_key_account_settings_root));
    PreferenceCategory editor=(PreferenceCategory)findPreference(getActivity().getString(R.string.pref_key_editor));
    if (preferenceScreen != null && editor != null) {
      preferenceScreen.removePreference(editor);
    }
  }
 else {
    final ListPreference editorTypePreference=(ListPreference)findPreference(getActivity().getString(R.string.pref_key_editor_type));
    editorTypePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      final Preference preference,      final Object value){
        if (value != null) {
          int index=Integer.parseInt(value.toString());
          CharSequence[] entries=editorTypePreference.getEntries();
          editorTypePreference.setSummary(entries[index]);
switch (index) {
case IDX_VISUAL_EDITOR:
            AppPrefs.setAztecEditorEnabled(false);
          AppPrefs.setVisualEditorEnabled(true);
        break;
case IDX_AZTEC_EDITOR:
      AppPrefs.setAztecEditorEnabled(true);
    AppPrefs.setVisualEditorEnabled(false);
  AppPrefs.setNewEditorPromoRequired(false);
break;
default :
AppPrefs.setAztecEditorEnabled(false);
AppPrefs.setVisualEditorEnabled(false);
break;
}
toggleEditorFooterPreference();
return true;
}
 else {
return false;
}
}
}
);
String editorTypeKey=getString(R.string.pref_key_editor_type);
String editorTypeSetting=mSettings.getString(editorTypeKey,""String_Node_Str"");
if (!editorTypeSetting.equalsIgnoreCase(""String_Node_Str"")) {
CharSequence[] entries=editorTypePreference.getEntries();
editorTypePreference.setSummary(entries[Integer.parseInt(editorTypeSetting)]);
}
toggleEditorFooterPreference();
}
}","private void updateEditorSettings(){
  if (!AppPrefs.isVisualEditorAvailable()) {
    PreferenceScreen preferenceScreen=(PreferenceScreen)findPreference(getActivity().getString(R.string.pref_key_account_settings_root));
    PreferenceCategory editor=(PreferenceCategory)findPreference(getActivity().getString(R.string.pref_key_editor));
    if (preferenceScreen != null && editor != null) {
      preferenceScreen.removePreference(editor);
    }
  }
 else {
    final ListPreference editorTypePreference=(ListPreference)findPreference(getActivity().getString(R.string.pref_key_editor_type));
    editorTypePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      final Preference preference,      final Object value){
        if (value != null) {
          int index=Integer.parseInt(value.toString());
          CharSequence[] entries=editorTypePreference.getEntries();
          editorTypePreference.setSummary(entries[index]);
switch (index) {
case IDX_VISUAL_EDITOR:
            AppPrefs.setAztecEditorEnabled(false);
          AppPrefs.setVisualEditorEnabled(true);
        break;
case IDX_AZTEC_EDITOR:
      AppPrefs.setAztecEditorEnabled(true);
    AppPrefs.setVisualEditorEnabled(false);
  AppPrefs.setNewEditorPromoRequired(false);
break;
default :
AppPrefs.setAztecEditorEnabled(false);
AppPrefs.setVisualEditorEnabled(false);
break;
}
toggleEditorFooterPreference();
return true;
}
 else {
return false;
}
}
}
);
final int editorTypeSetting;
if (AppPrefs.isAztecEditorEnabled()) {
editorTypeSetting=IDX_AZTEC_EDITOR;
}
 else if (AppPrefs.isVisualEditorEnabled()) {
editorTypeSetting=IDX_VISUAL_EDITOR;
}
 else {
editorTypeSetting=IDX_LEGACY_EDITOR;
}
CharSequence[] entries=editorTypePreference.getEntries();
editorTypePreference.setSummary(entries[editorTypeSetting]);
editorTypePreference.setValueIndex(editorTypeSetting);
toggleEditorFooterPreference();
}
}",0.8598179453836151
13686,"@Override public void onVideoPressInfoRequested(final String videoId){
  String videoUrl=mMediaStore.getUrlForSiteVideoWithVideoPressGuid(mSite,videoId);
  if (videoUrl.isEmpty()) {
    if (PermissionUtils.checkAndRequestCameraAndStoragePermissions(this,WPPermissionUtils.EDITOR_MEDIA_PERMISSION_REQUEST_CODE)) {
      runOnUiThread(new Runnable(){
        @Override public void run(){
          if (mPendingVideoPressInfoRequests == null) {
            mPendingVideoPressInfoRequests=new ArrayList<>();
          }
          mPendingVideoPressInfoRequests.add(videoId);
          refreshBlogMedia();
        }
      }
);
    }
 else {
      AppLockManager.getInstance().setExtendedTimeout();
    }
  }
  String posterUrl=WPMediaUtils.getVideoPressVideoPosterFromURL(videoUrl);
  mEditorFragment.setUrlForVideoPressId(videoId,videoUrl,posterUrl);
}","@Override public void onVideoPressInfoRequested(final String videoId){
  String videoUrl=mMediaStore.getUrlForSiteVideoWithVideoPressGuid(mSite,videoId);
  if (videoUrl == null) {
    AppLog.w(T.EDITOR,""String_Node_Str"" + videoId + ""String_Node_Str""+ mSite.getUrl()+ ""String_Node_Str"");
    return;
  }
  if (videoUrl.isEmpty()) {
    if (PermissionUtils.checkAndRequestCameraAndStoragePermissions(this,WPPermissionUtils.EDITOR_MEDIA_PERMISSION_REQUEST_CODE)) {
      runOnUiThread(new Runnable(){
        @Override public void run(){
          if (mPendingVideoPressInfoRequests == null) {
            mPendingVideoPressInfoRequests=new ArrayList<>();
          }
          mPendingVideoPressInfoRequests.add(videoId);
          refreshBlogMedia();
        }
      }
);
    }
 else {
      AppLockManager.getInstance().setExtendedTimeout();
    }
  }
  String posterUrl=WPMediaUtils.getVideoPressVideoPosterFromURL(videoUrl);
  mEditorFragment.setUrlForVideoPressId(videoId,videoUrl,posterUrl);
}",0.919241192411924
13687,"private void verifyMediaOnlyUploadsAndNotify(){
  if (!mMediaBatchUploaded.isEmpty()) {
    ArrayList<MediaModel> standAloneMediaItems=new ArrayList<>();
    for (    MediaModel media : mMediaBatchUploaded) {
      MediaModel currentMedia=mMediaStore.getMediaWithLocalId(media.getId());
      if (currentMedia.getLocalPostId() == 0 && MediaUploadState.fromString(currentMedia.getUploadState()) == MediaUploadState.UPLOADED) {
        standAloneMediaItems.add(currentMedia);
      }
    }
    if (!standAloneMediaItems.isEmpty()) {
      SiteModel site=mSiteStore.getSiteByLocalId(standAloneMediaItems.get(0).getLocalSiteId());
      mPostUploadNotifier.updateNotificationSuccessForMedia(standAloneMediaItems,site);
      mMediaBatchUploaded.clear();
    }
  }
}","private void verifyMediaOnlyUploadsAndNotify(){
  if (!mMediaBatchUploaded.isEmpty()) {
    ArrayList<MediaModel> standAloneMediaItems=new ArrayList<>();
    for (    MediaModel media : mMediaBatchUploaded) {
      MediaModel currentMedia=mMediaStore.getMediaWithLocalId(media.getId());
      if (currentMedia != null && currentMedia.getLocalPostId() == 0 && MediaUploadState.fromString(currentMedia.getUploadState()) == MediaUploadState.UPLOADED) {
        standAloneMediaItems.add(currentMedia);
      }
    }
    if (!standAloneMediaItems.isEmpty()) {
      SiteModel site=mSiteStore.getSiteByLocalId(standAloneMediaItems.get(0).getLocalSiteId());
      mPostUploadNotifier.updateNotificationSuccessForMedia(standAloneMediaItems,site);
      mMediaBatchUploaded.clear();
    }
  }
}",0.9844760672703752
13688,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_aztec_editor,container,false);
  if (getActivity() instanceof EditorFragmentActivity) {
    ((EditorFragmentActivity)getActivity()).initializeEditorFragment();
  }
  title=(AztecText)view.findViewById(R.id.title);
  content=(AztecText)view.findViewById(R.id.aztec);
  source=(SourceViewEditText)view.findViewById(R.id.source);
  title.setOnTouchListener(this);
  content.setOnTouchListener(this);
  source.setOnTouchListener(this);
  title.setOnImeBackListener(this);
  content.setOnImeBackListener(this);
  source.setOnImeBackListener(this);
  source.setHint(""String_Node_Str"" + getString(R.string.editor_content_hint) + ""String_Node_Str"");
  formattingToolbar=(AztecToolbar)view.findViewById(R.id.formatting_toolbar);
  formattingToolbar.setExpanded(mIsToolbarExpanded);
  title.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      formattingToolbar.enableFormatButtons(!hasFocus);
    }
  }
);
  content.setOnDragListener(mOnDragListener);
  source.setOnDragListener(mOnDragListener);
  setHasOptionsMenu(true);
  invalidateOptionsHandler=new Handler();
  invalidateOptionsRunnable=new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        getActivity().invalidateOptionsMenu();
      }
    }
  }
;
  content.refreshText();
  mAztecReady=true;
  ImageButton titleBeta=(ImageButton)view.findViewById(R.id.title_beta);
  titleBeta.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mEditorBetaClickListener.onBetaClicked();
    }
  }
);
  Aztec.Factory.with(content,source,formattingToolbar,this).setImageGetter(aztecImageLoader).setVideoThumbnailGetter(aztecVideoLoader).setOnImeBackListener(this).setHistoryListener(this).setOnImageTappedListener(this).setOnVideoTappedListener(this).setOnMediaDeletedListener(this).addPlugin(new WordPressCommentsPlugin(content)).addPlugin(new MoreToolbarButton(content)).addPlugin(new CaptionShortcodePlugin()).addPlugin(new VideoShortcodePlugin()).addPlugin(new AudioShortcodePlugin());
  new BlockElementWatcher(content).add(new CaptionHandler(content)).install(content);
  mEditorFragmentListener.onEditorFragmentInitialized();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_aztec_editor,container,false);
  if (getActivity() instanceof EditorFragmentActivity) {
    ((EditorFragmentActivity)getActivity()).initializeEditorFragment();
  }
  title=(AztecText)view.findViewById(R.id.title);
  content=(AztecText)view.findViewById(R.id.aztec);
  source=(SourceViewEditText)view.findViewById(R.id.source);
  title.setOnTouchListener(this);
  content.setOnTouchListener(this);
  source.setOnTouchListener(this);
  title.setOnImeBackListener(this);
  content.setOnImeBackListener(this);
  source.setOnImeBackListener(this);
  title.setFilters(new InputFilter[]{replaceEnterKeyWithSpaceInputFilter});
  source.setHint(""String_Node_Str"" + getString(R.string.editor_content_hint) + ""String_Node_Str"");
  formattingToolbar=(AztecToolbar)view.findViewById(R.id.formatting_toolbar);
  formattingToolbar.setExpanded(mIsToolbarExpanded);
  title.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      formattingToolbar.enableFormatButtons(!hasFocus);
    }
  }
);
  content.setOnDragListener(mOnDragListener);
  source.setOnDragListener(mOnDragListener);
  setHasOptionsMenu(true);
  invalidateOptionsHandler=new Handler();
  invalidateOptionsRunnable=new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        getActivity().invalidateOptionsMenu();
      }
    }
  }
;
  content.refreshText();
  mAztecReady=true;
  ImageButton titleBeta=(ImageButton)view.findViewById(R.id.title_beta);
  titleBeta.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mEditorBetaClickListener.onBetaClicked();
    }
  }
);
  Aztec.Factory.with(content,source,formattingToolbar,this).setImageGetter(aztecImageLoader).setVideoThumbnailGetter(aztecVideoLoader).setOnImeBackListener(this).setHistoryListener(this).setOnImageTappedListener(this).setOnVideoTappedListener(this).setOnMediaDeletedListener(this).addPlugin(new WordPressCommentsPlugin(content)).addPlugin(new MoreToolbarButton(content)).addPlugin(new CaptionShortcodePlugin()).addPlugin(new VideoShortcodePlugin()).addPlugin(new AudioShortcodePlugin());
  new BlockElementWatcher(content).add(new CaptionHandler(content)).install(content);
  mEditorFragmentListener.onEditorFragmentInitialized();
  return view;
}",0.9844262295081968
13689,"@Override public void onFocusChange(View view,boolean hasFocus){
  if (hasFocus && !isDisplayingEmailHints && !hasDismissedEmailHints) {
    isDisplayingEmailHints=true;
    getEmailHints();
  }
}","@Override public void onFocusChange(View view,boolean hasFocus){
  if (hasFocus && !mIsDisplayingEmailHints && !mHasDismissedEmailHints) {
    mIsDisplayingEmailHints=true;
    getEmailHints();
  }
}",0.9772151898734176
13690,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == EMAIL_CREDENTIALS_REQUEST_CODE) {
    if (resultCode == RESULT_OK) {
      Credential credential=data.getParcelableExtra(Credential.EXTRA_KEY);
      mEmailInput.getEditText().setText(credential.getId());
      next(getCleanedEmail());
    }
 else {
      hasDismissedEmailHints=true;
      mEmailInput.getEditText().postDelayed(new Runnable(){
        @Override public void run(){
          if (isAdded()) {
            EditTextUtils.showSoftInput(mEmailInput.getEditText());
          }
        }
      }
,getResources().getInteger(android.R.integer.config_mediumAnimTime));
    }
    isDisplayingEmailHints=false;
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == EMAIL_CREDENTIALS_REQUEST_CODE) {
    if (resultCode == RESULT_OK) {
      Credential credential=data.getParcelableExtra(Credential.EXTRA_KEY);
      mEmailInput.getEditText().setText(credential.getId());
      next(getCleanedEmail());
    }
 else {
      mHasDismissedEmailHints=true;
      mEmailInput.getEditText().postDelayed(new Runnable(){
        @Override public void run(){
          if (isAdded()) {
            EditTextUtils.showSoftInput(mEmailInput.getEditText());
          }
        }
      }
,getResources().getInteger(android.R.integer.config_mediumAnimTime));
    }
    mIsDisplayingEmailHints=false;
  }
}",0.9961685823754788
13691,"@Override protected void setupContent(ViewGroup rootView){
  mEmailInput=rootView.findViewById(R.id.login_email_row);
  if (BuildConfig.DEBUG) {
    mEmailInput.getEditText().setText(BuildConfig.DEBUG_WPCOM_LOGIN_EMAIL);
  }
  mEmailInput.addTextChangedListener(this);
  mEmailInput.setOnEditorCommitListener(this);
  mEmailInput.getEditText().setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus && !isDisplayingEmailHints && !hasDismissedEmailHints) {
        isDisplayingEmailHints=true;
        getEmailHints();
      }
    }
  }
);
  mEmailInput.getEditText().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      if (!isDisplayingEmailHints && !hasDismissedEmailHints) {
        isDisplayingEmailHints=true;
        getEmailHints();
      }
    }
  }
);
  LinearLayout googleLoginButton=rootView.findViewById(R.id.login_google_button);
  googleLoginButton.setOnClickListener(new OnClickListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onClick(    View view){
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_BUTTON_CLICK);
      EditTextUtils.hideSoftInput(mEmailInput.getEditText());
      if (NetworkUtils.checkConnection(getActivity())) {
        mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);
        mIsSocialLogin=true;
        mLoginListener.showGoogleLoginScreen(LoginEmailFragment.this);
      }
    }
  }
);
}","@Override protected void setupContent(ViewGroup rootView){
  mEmailInput=rootView.findViewById(R.id.login_email_row);
  if (BuildConfig.DEBUG) {
    mEmailInput.getEditText().setText(BuildConfig.DEBUG_WPCOM_LOGIN_EMAIL);
  }
  mEmailInput.addTextChangedListener(this);
  mEmailInput.setOnEditorCommitListener(this);
  mEmailInput.getEditText().setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus && !mIsDisplayingEmailHints && !mHasDismissedEmailHints) {
        mIsDisplayingEmailHints=true;
        getEmailHints();
      }
    }
  }
);
  mEmailInput.getEditText().setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      if (!mIsDisplayingEmailHints && !mHasDismissedEmailHints) {
        mIsDisplayingEmailHints=true;
        getEmailHints();
      }
    }
  }
);
  LinearLayout googleLoginButton=rootView.findViewById(R.id.login_google_button);
  googleLoginButton.setOnClickListener(new OnClickListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onClick(    View view){
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_BUTTON_CLICK);
      EditTextUtils.hideSoftInput(mEmailInput.getEditText());
      if (NetworkUtils.checkConnection(getActivity())) {
        mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);
        mIsSocialLogin=true;
        mLoginListener.showGoogleLoginScreen(LoginEmailFragment.this);
      }
    }
  }
);
}",0.9941022280471822
13692,"@Override public void onActivityCreated(@Nullable Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null) {
    mOldSitesIDs=savedInstanceState.getIntegerArrayList(KEY_OLD_SITES_IDS);
    mRequestedEmail=savedInstanceState.getString(KEY_REQUESTED_EMAIL);
    mGoogleEmail=savedInstanceState.getString(KEY_GOOGLE_EMAIL);
    mIsSocialLogin=savedInstanceState.getBoolean(KEY_IS_SOCIAL);
    isDisplayingEmailHints=savedInstanceState.getBoolean(KEY_IS_DISPLAYING_EMAIL_HINTS);
    hasDismissedEmailHints=savedInstanceState.getBoolean(KEY_HAS_DISMISSED_EMAIL_HINTS);
  }
 else {
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_EMAIL_FORM_VIEWED);
  }
}","@Override public void onActivityCreated(@Nullable Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null) {
    mOldSitesIDs=savedInstanceState.getIntegerArrayList(KEY_OLD_SITES_IDS);
    mRequestedEmail=savedInstanceState.getString(KEY_REQUESTED_EMAIL);
    mGoogleEmail=savedInstanceState.getString(KEY_GOOGLE_EMAIL);
    mIsSocialLogin=savedInstanceState.getBoolean(KEY_IS_SOCIAL);
    mIsDisplayingEmailHints=savedInstanceState.getBoolean(KEY_IS_DISPLAYING_EMAIL_HINTS);
    mHasDismissedEmailHints=savedInstanceState.getBoolean(KEY_HAS_DISMISSED_EMAIL_HINTS);
  }
 else {
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_EMAIL_FORM_VIEWED);
  }
}",0.9957567185289956
13693,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
  outState.putString(KEY_REQUESTED_EMAIL,mRequestedEmail);
  outState.putString(KEY_GOOGLE_EMAIL,mGoogleEmail);
  outState.putBoolean(KEY_IS_SOCIAL,mIsSocialLogin);
  outState.putBoolean(KEY_IS_DISPLAYING_EMAIL_HINTS,isDisplayingEmailHints);
  outState.putBoolean(KEY_HAS_DISMISSED_EMAIL_HINTS,hasDismissedEmailHints);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
  outState.putString(KEY_REQUESTED_EMAIL,mRequestedEmail);
  outState.putString(KEY_GOOGLE_EMAIL,mGoogleEmail);
  outState.putBoolean(KEY_IS_SOCIAL,mIsSocialLogin);
  outState.putBoolean(KEY_IS_DISPLAYING_EMAIL_HINTS,mIsDisplayingEmailHints);
  outState.putBoolean(KEY_HAS_DISMISSED_EMAIL_HINTS,mHasDismissedEmailHints);
}",0.993801652892562
13694,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginUpdated(OnSitePluginUpdated event){
  mIsUpdatingPlugin=false;
  if (event.isError()) {
    AppLog.e(AppLog.T.API,""String_Node_Str"" + event.error.type);
    refreshPluginVersionViews();
    showUpdateFailedSnackbar();
    return;
  }
  mPlugin=mPluginStore.getSitePluginByName(mSite,mPlugin.getName());
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  refreshViews();
  showSuccessfulUpdateSnackbar();
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginUpdated(OnSitePluginUpdated event){
  mIsUpdatingPlugin=false;
  if (event.isError()) {
    AppLog.e(AppLog.T.API,""String_Node_Str"" + event.error.type);
    refreshPluginVersionViews();
    showUpdateFailedSnackbar();
    return;
  }
  String pluginName=mPlugin.getName();
  mPlugin=mPluginStore.getSitePluginByName(mSite,pluginName);
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  refreshViews();
  showSuccessfulUpdateSnackbar();
}",0.9516666666666668
13695,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginConfigured(OnSitePluginConfigured event){
  if (event.isError()) {
    ToastUtils.showToast(this,getString(R.string.plugin_configuration_failed,event.error.message));
    if (mIsRemovingPlugin) {
      mIsRemovingPlugin=false;
      cancelRemovePluginProgressDialog();
      showPluginRemoveFailedSnackbar();
    }
    return;
  }
  mPlugin=mPluginStore.getSitePluginByName(mSite,mPlugin.getName());
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  refreshViews();
  if (mIsRemovingPlugin && !mPlugin.isActive()) {
    dispatchRemovePluginAction();
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSitePluginConfigured(OnSitePluginConfigured event){
  if (event.isError()) {
    ToastUtils.showToast(this,getString(R.string.plugin_configuration_failed,event.error.message));
    if (mIsRemovingPlugin) {
      mIsRemovingPlugin=false;
      cancelRemovePluginProgressDialog();
      showPluginRemoveFailedSnackbar();
    }
    return;
  }
  String pluginName=mPlugin.getName();
  mPlugin=mPluginStore.getSitePluginByName(mSite,pluginName);
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  refreshViews();
  if (mIsRemovingPlugin && !mPlugin.isActive()) {
    dispatchRemovePluginAction();
  }
}",0.9613848202396804
13696,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == EDITOR_MEDIA_SETTINGS) {
    if (mTappedMediaPredicate != null) {
      if (data == null || data.getExtras() == null) {
        return;
      }
      EditorImageMetaData metaData=data.getParcelableExtra(ARG_EDITOR_IMAGE_METADATA);
      if (metaData.isRemoved()) {
        String editorContentBeforeImageIsRemoved=""String_Node_Str"";
        if (isHistoryEnabled()) {
          editorContentBeforeImageIsRemoved=content.toFormattedHtml();
        }
        content.removeMedia(mTappedMediaPredicate);
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(editorContentBeforeImageIsRemoved);
        }
      }
 else {
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(content.toFormattedHtml());
        }
        AztecAttributes attributes=content.getElementAttributes(mTappedMediaPredicate);
        attributes.setValue(ATTR_SRC,metaData.getSrc());
        if (!TextUtils.isEmpty(metaData.getTitle())) {
          attributes.setValue(ATTR_TITLE,metaData.getTitle());
        }
 else {
          attributes.removeAttribute(ATTR_TITLE);
        }
        if (!TextUtils.isEmpty(metaData.getAlt())) {
          attributes.setValue(ATTR_ALT,metaData.getAlt());
        }
 else {
          attributes.removeAttribute(ATTR_ALT);
        }
        attributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
        attributes.setValue(ATTR_DIMEN_HEIGHT,metaData.getHeight());
        if (!TextUtils.isEmpty(metaData.getLinkUrl())) {
          String existingLink=MediaLinkExtensionsKt.getMediaLink(content,mTappedMediaPredicate);
          if (TextUtils.isEmpty(existingLink)) {
            AztecAttributes linkAttributes=new AztecAttributes();
            if (metaData.isLinkTargetBlank()) {
              linkAttributes.setValue(ATTR_TARGET,""String_Node_Str"");
            }
            MediaLinkExtensionsKt.addLinkToMedia(content,mTappedMediaPredicate,metaData.getLinkUrl(),linkAttributes);
          }
 else {
            AztecAttributes linkAttributes=MediaLinkExtensionsKt.getMediaLinkAttributes(content,mTappedMediaPredicate);
            if (metaData.isLinkTargetBlank()) {
              linkAttributes.setValue(ATTR_TARGET,""String_Node_Str"");
            }
 else {
              linkAttributes.removeAttribute(ATTR_TARGET);
            }
            MediaLinkExtensionsKt.addLinkToMedia(content,mTappedMediaPredicate,metaData.getLinkUrl(),linkAttributes);
          }
        }
 else {
          MediaLinkExtensionsKt.removeLinkFromMedia(content,mTappedMediaPredicate);
        }
        AttributesWithClass attributesWithClass=getAttributesWithClass(attributes);
        attributesWithClass.removeClassStartingWith(ATTR_ALIGN);
        attributesWithClass.removeClassStartingWith(ATTR_SIZE_DASH);
        attributesWithClass.removeClassStartingWith(ATTR_IMAGE_WP_DASH);
        if (!TextUtils.isEmpty(metaData.getCaption())) {
          AztecAttributes captionAttributes=CaptionExtensionsKt.getImageCaptionAttributes(content,mTappedMediaPredicate);
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            captionAttributes.setValue(ATTR_ALIGN,ATTR_ALIGN + metaData.getAlign());
          }
 else {
            captionAttributes.removeAttribute(ATTR_ALIGN);
          }
          captionAttributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
          CaptionExtensionsKt.setImageCaption(content,mTappedMediaPredicate,metaData.getCaption(),captionAttributes);
        }
 else {
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            attributesWithClass.addClass(ATTR_ALIGN + metaData.getAlign());
          }
          CaptionExtensionsKt.removeImageCaption(content,mTappedMediaPredicate);
        }
        if (!TextUtils.isEmpty(metaData.getSize())) {
          attributesWithClass.addClass(metaData.getSize());
        }
        if (!TextUtils.isEmpty(metaData.getAttachmentId())) {
          attributesWithClass.addClass(ATTR_IMAGE_WP_DASH + metaData.getAttachmentId());
        }
        attributes.setValue(ATTR_CLASS,attributesWithClass.getAttributes().getValue(ATTR_CLASS));
        attributes.removeAttribute(TEMP_IMAGE_ID);
        content.updateElementAttributes(mTappedMediaPredicate,attributes);
      }
      mTappedMediaPredicate=null;
      if (isHistoryEnabled()) {
        content.history.handleHistory(content);
      }
    }
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == EDITOR_MEDIA_SETTINGS) {
    if (mTappedMediaPredicate != null) {
      if (data == null || data.getExtras() == null) {
        return;
      }
      EditorImageMetaData metaData=data.getParcelableExtra(ARG_EDITOR_IMAGE_METADATA);
      if (metaData.isRemoved()) {
        String editorContentBeforeImageIsRemoved=""String_Node_Str"";
        if (isHistoryEnabled()) {
          editorContentBeforeImageIsRemoved=content.toFormattedHtml();
        }
        content.removeMedia(mTappedMediaPredicate);
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(editorContentBeforeImageIsRemoved);
        }
      }
 else {
        if (isHistoryEnabled()) {
          content.history.beforeTextChanged(content.toFormattedHtml());
        }
        AztecAttributes attributes=content.getElementAttributes(mTappedMediaPredicate);
        attributes.setValue(ATTR_SRC,metaData.getSrc());
        if (!TextUtils.isEmpty(metaData.getTitle())) {
          attributes.setValue(ATTR_TITLE,metaData.getTitle());
        }
 else {
          attributes.removeAttribute(ATTR_TITLE);
        }
        if (!TextUtils.isEmpty(metaData.getAlt())) {
          attributes.setValue(ATTR_ALT,metaData.getAlt());
        }
 else {
          attributes.removeAttribute(ATTR_ALT);
        }
        attributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
        attributes.setValue(ATTR_DIMEN_HEIGHT,metaData.getHeight());
        if (!TextUtils.isEmpty(metaData.getLinkUrl())) {
          String existingLink=MediaLinkExtensionsKt.getMediaLink(content,mTappedMediaPredicate);
          AztecAttributes linkAttributes;
          if (TextUtils.isEmpty(existingLink)) {
            linkAttributes=new AztecAttributes();
          }
 else {
            linkAttributes=MediaLinkExtensionsKt.getMediaLinkAttributes(content,mTappedMediaPredicate);
          }
          linkAttributes.setValue(""String_Node_Str"",""String_Node_Str"");
          if (metaData.isLinkTargetBlank()) {
            linkAttributes.setValue(ATTR_TARGET,""String_Node_Str"");
          }
 else {
            linkAttributes.removeAttribute(ATTR_TARGET);
          }
          MediaLinkExtensionsKt.removeLinkFromMedia(content,mTappedMediaPredicate);
          MediaLinkExtensionsKt.addLinkToMedia(content,mTappedMediaPredicate,UrlUtils.addUrlSchemeIfNeeded(metaData.getLinkUrl(),false),linkAttributes);
        }
 else {
          MediaLinkExtensionsKt.removeLinkFromMedia(content,mTappedMediaPredicate);
        }
        AttributesWithClass attributesWithClass=getAttributesWithClass(attributes);
        attributesWithClass.removeClassStartingWith(ATTR_ALIGN);
        attributesWithClass.removeClassStartingWith(ATTR_SIZE_DASH);
        attributesWithClass.removeClassStartingWith(ATTR_IMAGE_WP_DASH);
        if (!TextUtils.isEmpty(metaData.getCaption())) {
          AztecAttributes captionAttributes=CaptionExtensionsKt.getImageCaptionAttributes(content,mTappedMediaPredicate);
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            captionAttributes.setValue(ATTR_ALIGN,ATTR_ALIGN + metaData.getAlign());
          }
 else {
            captionAttributes.removeAttribute(ATTR_ALIGN);
          }
          captionAttributes.setValue(ATTR_DIMEN_WIDTH,metaData.getWidth());
          CaptionExtensionsKt.setImageCaption(content,mTappedMediaPredicate,metaData.getCaption(),captionAttributes);
        }
 else {
          if (!TextUtils.isEmpty(metaData.getAlign())) {
            attributesWithClass.addClass(ATTR_ALIGN + metaData.getAlign());
          }
          CaptionExtensionsKt.removeImageCaption(content,mTappedMediaPredicate);
        }
        if (!TextUtils.isEmpty(metaData.getSize())) {
          attributesWithClass.addClass(metaData.getSize());
        }
        if (!TextUtils.isEmpty(metaData.getAttachmentId())) {
          attributesWithClass.addClass(ATTR_IMAGE_WP_DASH + metaData.getAttachmentId());
        }
        attributes.setValue(ATTR_CLASS,attributesWithClass.getAttributes().getValue(ATTR_CLASS));
        attributes.removeAttribute(TEMP_IMAGE_ID);
        content.updateElementAttributes(mTappedMediaPredicate,attributes);
      }
      mTappedMediaPredicate=null;
      if (isHistoryEnabled()) {
        content.history.handleHistory(content);
      }
    }
  }
}",0.9076458076793912
13697,"private void updatePluginVersion(){
  if (NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!isUpdateAvailable() || isUpdatingVersion) {
    return;
  }
  UpdateSitePluginVersionPayload payload=new UpdateSitePluginVersionPayload(mSite,mPlugin);
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginVersionAction(payload));
}","private void updatePluginVersion(){
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  if (!isUpdateAvailable() || isUpdatingVersion) {
    return;
  }
  UpdateSitePluginVersionPayload payload=new UpdateSitePluginVersionPayload(mSite,mPlugin);
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginVersionAction(payload));
}",0.9985443959243084
13698,"private void refreshUpdateVersionViews(){
  boolean isUpdateAvailable=!isUpdateAvailable();
  if (isUpdateAvailable && !isUpdatingVersion) {
    mUpdateVersionTextView.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateVersionTextView.setVisibility(View.GONE);
  }
  if (isUpdatingVersion) {
    mUpdateVersionProgressBar.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateVersionProgressBar.setVisibility(View.GONE);
  }
}","private void refreshUpdateVersionViews(){
  boolean isUpdateAvailable=isUpdateAvailable();
  if (isUpdateAvailable && !isUpdatingVersion) {
    mUpdateVersionTextView.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateVersionTextView.setVisibility(View.GONE);
  }
  if (isUpdatingVersion) {
    mUpdateVersionProgressBar.setVisibility(View.VISIBLE);
  }
 else {
    mUpdateVersionProgressBar.setVisibility(View.GONE);
  }
}",0.9988221436984688
13699,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError()) {
    endProgress();
    AppLog.e(T.API,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_FAILED,event.getClass().getSimpleName(),event.error.type.toString(),event.error.message);
    if (isSocialLogin) {
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_FAILURE,event.getClass().getSimpleName(),event.error.type.toString(),event.error.message);
    }
    if (isAdded()) {
      handleAuthError(event.error.type,event.error.message);
    }
    return;
  }
  AppLog.i(T.NUX,""String_Node_Str"" + event.toString());
  if (isSocialLoginConnect) {
    PushSocialLoginPayload payload=new PushSocialLoginPayload(mIdToken,mService);
    mDispatcher.dispatch(AccountActionBuilder.newPushSocialConnectAction(payload));
  }
 else {
    doFinishLogin();
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError()) {
    endProgress();
    AppLog.e(T.API,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_FAILED,event.getClass().getSimpleName(),event.error.type.toString(),event.error.message);
    if (mIsSocialLogin) {
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_FAILURE,event.getClass().getSimpleName(),event.error.type.toString(),event.error.message);
    }
    if (isAdded()) {
      handleAuthError(event.error.type,event.error.message);
    }
    return;
  }
  AppLog.i(T.NUX,""String_Node_Str"" + event.toString());
  if (mIsSocialLoginConnect) {
    PushSocialLoginPayload payload=new PushSocialLoginPayload(mIdToken,mService);
    mDispatcher.dispatch(AccountActionBuilder.newPushSocialConnectAction(payload));
  }
 else {
    doFinishLogin();
  }
}",0.9970267591674926
13700,"@Override protected void onLoginFinished(){
  mLoginListener.trackAnalyticsSignIn(mAccountStore,mSiteStore,true);
  if (isSocialLogin) {
    mLoginListener.loggedInViaSocialAccount(mOldSitesIDs);
  }
 else {
    mLoginListener.loggedInViaPassword(mOldSitesIDs);
  }
}","@Override protected void onLoginFinished(){
  mLoginListener.trackAnalyticsSignIn(mAccountStore,mSiteStore,true);
  if (mIsSocialLogin) {
    mLoginListener.loggedInViaSocialAccount(mOldSitesIDs);
  }
 else {
    mLoginListener.loggedInViaPassword(mOldSitesIDs);
  }
}",0.994392523364486
13701,"@Override protected void setupBottomButtons(Button secondaryButton,Button primaryButton){
  secondaryButton.setText(R.string.login_text_otp);
  secondaryButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (isAdded()) {
        doAuthAction(R.string.requesting_otp,""String_Node_Str"",true);
      }
    }
  }
);
  secondaryButton.setText(getString(sentSmsCode ? R.string.login_text_otp_another : R.string.login_text_otp));
  mSecondaryButton=secondaryButton;
  primaryButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      next();
    }
  }
);
}","@Override protected void setupBottomButtons(Button secondaryButton,Button primaryButton){
  secondaryButton.setText(R.string.login_text_otp);
  secondaryButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (isAdded()) {
        doAuthAction(R.string.requesting_otp,""String_Node_Str"",true);
      }
    }
  }
);
  secondaryButton.setText(getString(mSentSmsCode ? R.string.login_text_otp_another : R.string.login_text_otp));
  mSecondaryButton=secondaryButton;
  primaryButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      next();
    }
  }
);
}",0.9976322020520916
13702,"@Override protected void setupLabel(@NonNull TextView label){
  label.setText(sentSmsCode ? getString(R.string.enter_verification_code_sms,mPhoneNumber) : getString(R.string.enter_verification_code));
  mLabel=label;
}","@Override protected void setupLabel(@NonNull TextView label){
  label.setText(mSentSmsCode ? getString(R.string.enter_verification_code_sms,mPhoneNumber) : getString(R.string.enter_verification_code));
  mLabel=label;
}",0.9931350114416476
13703,"private void setTextForSms(){
  mLabel.setText(getString(R.string.enter_verification_code_sms,mPhoneNumber));
  mSecondaryButton.setText(getString(R.string.login_text_otp_another));
  sentSmsCode=true;
}","private void setTextForSms(){
  mLabel.setText(getString(R.string.enter_verification_code_sms,mPhoneNumber));
  mSecondaryButton.setText(getString(R.string.login_text_otp_another));
  mSentSmsCode=true;
}",0.9926289926289926
13704,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSocialChanged(OnSocialChanged event){
  if (event.isError()) {
switch (event.error.type) {
case INVALID_TWO_STEP_CODE:
      endProgress();
switch (mType) {
case TWO_FACTOR_TYPE_AUTHENTICATOR:
      mNonceAuthenticator=event.error.nonce;
    break;
case TWO_FACTOR_TYPE_BACKUP:
  mNonceBackup=event.error.nonce;
break;
case TWO_FACTOR_TYPE_SMS:
mNonceSms=event.error.nonce;
break;
}
show2FaError(getString(R.string.invalid_verification_code));
break;
case INVALID_TWO_STEP_NONCE:
case NO_PHONE_NUMBER_FOR_ACCOUNT:
case SMS_AUTHENTICATION_UNAVAILABLE:
case SMS_CODE_THROTTLED:
endProgress();
showErrorDialog(event.error.message);
AppLog.e(T.API,event.error.type + ""String_Node_Str"" + event.error.message);
mNonceSms=event.error.nonce;
break;
case UNABLE_CONNECT:
AppLog.e(T.API,""String_Node_Str"");
break;
case USER_ALREADY_ASSOCIATED:
AppLog.e(T.API,""String_Node_Str"");
break;
}
if (isSocialLoginConnect) {
mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_CONNECT_FAILURE);
doFinishLogin();
}
}
 else if (!TextUtils.isEmpty(event.phoneNumber) && !TextUtils.isEmpty(event.nonce)) {
endProgress();
mPhoneNumber=event.phoneNumber;
mNonceSms=event.nonce;
setTextForSms();
}
 else {
if (isSocialLoginConnect) {
mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_CONNECT_SUCCESS);
}
doFinishLogin();
}
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSocialChanged(OnSocialChanged event){
  if (event.isError()) {
switch (event.error.type) {
case INVALID_TWO_STEP_CODE:
      endProgress();
switch (mType) {
case TWO_FACTOR_TYPE_AUTHENTICATOR:
      mNonceAuthenticator=event.error.nonce;
    break;
case TWO_FACTOR_TYPE_BACKUP:
  mNonceBackup=event.error.nonce;
break;
case TWO_FACTOR_TYPE_SMS:
mNonceSms=event.error.nonce;
break;
}
show2FaError(getString(R.string.invalid_verification_code));
break;
case INVALID_TWO_STEP_NONCE:
case NO_PHONE_NUMBER_FOR_ACCOUNT:
case SMS_AUTHENTICATION_UNAVAILABLE:
case SMS_CODE_THROTTLED:
endProgress();
showErrorDialog(event.error.message);
AppLog.e(T.API,event.error.type + ""String_Node_Str"" + event.error.message);
mNonceSms=event.error.nonce;
break;
case UNABLE_CONNECT:
AppLog.e(T.API,""String_Node_Str"");
break;
case USER_ALREADY_ASSOCIATED:
AppLog.e(T.API,""String_Node_Str"");
break;
}
if (mIsSocialLoginConnect) {
mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_CONNECT_FAILURE);
doFinishLogin();
}
}
 else if (!TextUtils.isEmpty(event.phoneNumber) && !TextUtils.isEmpty(event.nonce)) {
endProgress();
mPhoneNumber=event.phoneNumber;
mNonceSms=event.nonce;
setTextForSms();
}
 else {
if (mIsSocialLoginConnect) {
mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_CONNECT_SUCCESS);
}
doFinishLogin();
}
}",0.997855611150822
13705,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mEmailAddress=getArguments().getString(ARG_EMAIL_ADDRESS);
  mPassword=getArguments().getString(ARG_PASSWORD);
  mNonceAuthenticator=getArguments().getString(ARG_2FA_NONCE_AUTHENTICATOR);
  mNonceBackup=getArguments().getString(ARG_2FA_NONCE_BACKUP);
  mNonceSms=getArguments().getString(ARG_2FA_NONCE_SMS);
  mUserId=getArguments().getString(ARG_2FA_USER_ID);
  mIdToken=getArguments().getString(ARG_2FA_ID_TOKEN);
  isSocialLogin=getArguments().getBoolean(ARG_2FA_IS_SOCIAL);
  isSocialLoginConnect=getArguments().getBoolean(ARG_2FA_IS_SOCIAL_CONNECT);
  mService=getArguments().getString(ARG_2FA_SOCIAL_SERVICE);
  if (savedInstanceState != null) {
    mNonceAuthenticator=savedInstanceState.getString(KEY_NONCE_AUTHENTICATOR);
    mNonceBackup=savedInstanceState.getString(KEY_NONCE_BACKUP);
    mNonceSms=savedInstanceState.getString(KEY_NONCE_SMS);
    mType=savedInstanceState.getString(KEY_2FA_TYPE);
    mPhoneNumber=savedInstanceState.getString(KEY_SMS_NUMBER);
    sentSmsCode=savedInstanceState.getBoolean(KEY_SMS_SENT);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mEmailAddress=getArguments().getString(ARG_EMAIL_ADDRESS);
  mPassword=getArguments().getString(ARG_PASSWORD);
  mNonceAuthenticator=getArguments().getString(ARG_2FA_NONCE_AUTHENTICATOR);
  mNonceBackup=getArguments().getString(ARG_2FA_NONCE_BACKUP);
  mNonceSms=getArguments().getString(ARG_2FA_NONCE_SMS);
  mUserId=getArguments().getString(ARG_2FA_USER_ID);
  mIdToken=getArguments().getString(ARG_2FA_ID_TOKEN);
  mIsSocialLogin=getArguments().getBoolean(ARG_2FA_IS_SOCIAL);
  mIsSocialLoginConnect=getArguments().getBoolean(ARG_2FA_IS_SOCIAL_CONNECT);
  mService=getArguments().getString(ARG_2FA_SOCIAL_SERVICE);
  if (savedInstanceState != null) {
    mNonceAuthenticator=savedInstanceState.getString(KEY_NONCE_AUTHENTICATOR);
    mNonceBackup=savedInstanceState.getString(KEY_NONCE_BACKUP);
    mNonceSms=savedInstanceState.getString(KEY_NONCE_SMS);
    mType=savedInstanceState.getString(KEY_2FA_TYPE);
    mPhoneNumber=savedInstanceState.getString(KEY_SMS_NUMBER);
    mSentSmsCode=savedInstanceState.getBoolean(KEY_SMS_SENT);
  }
}",0.9960474308300395
13706,"private void doAuthAction(@StringRes int messageId,String twoStepCode,boolean shouldSendTwoStepSMS){
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  mInProgressMessageId=messageId;
  startProgress();
  mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);
  if (isSocialLogin) {
    if (shouldSendTwoStepSMS) {
      PushSocialSmsPayload payload=new PushSocialSmsPayload(mUserId,mNonceSms);
      mDispatcher.dispatch(AccountActionBuilder.newPushSocialSmsAction(payload));
    }
 else {
      setAuthCodeTypeAndNonce(twoStepCode);
      PushSocialAuthPayload payload=new PushSocialAuthPayload(mUserId,mType,mNonce,twoStepCode);
      mDispatcher.dispatch(AccountActionBuilder.newPushSocialAuthAction(payload));
    }
  }
 else {
    AuthenticatePayload payload=new AuthenticatePayload(mEmailAddress,mPassword);
    payload.twoStepCode=twoStepCode;
    payload.shouldSendTwoStepSms=shouldSendTwoStepSMS;
    mDispatcher.dispatch(AuthenticationActionBuilder.newAuthenticateAction(payload));
  }
}","private void doAuthAction(@StringRes int messageId,String twoStepCode,boolean shouldSendTwoStepSMS){
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  mInProgressMessageId=messageId;
  startProgress();
  mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);
  if (mIsSocialLogin) {
    if (shouldSendTwoStepSMS) {
      PushSocialSmsPayload payload=new PushSocialSmsPayload(mUserId,mNonceSms);
      mDispatcher.dispatch(AccountActionBuilder.newPushSocialSmsAction(payload));
    }
 else {
      setAuthCodeTypeAndNonce(twoStepCode);
      PushSocialAuthPayload payload=new PushSocialAuthPayload(mUserId,mType,mNonce,twoStepCode);
      mDispatcher.dispatch(AccountActionBuilder.newPushSocialAuthAction(payload));
    }
  }
 else {
    AuthenticatePayload payload=new AuthenticatePayload(mEmailAddress,mPassword);
    payload.twoStepCode=twoStepCode;
    payload.shouldSendTwoStepSms=shouldSendTwoStepSMS;
    mDispatcher.dispatch(AuthenticationActionBuilder.newAuthenticateAction(payload));
  }
}",0.9985358711566618
13707,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(KEY_IN_PROGRESS_MESSAGE_ID,mInProgressMessageId);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
  outState.putString(KEY_NONCE_AUTHENTICATOR,mNonceAuthenticator);
  outState.putString(KEY_NONCE_BACKUP,mNonceBackup);
  outState.putString(KEY_NONCE_SMS,mNonceSms);
  outState.putString(KEY_2FA_TYPE,mType);
  outState.putString(KEY_SMS_NUMBER,mPhoneNumber);
  outState.putBoolean(KEY_SMS_SENT,sentSmsCode);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(KEY_IN_PROGRESS_MESSAGE_ID,mInProgressMessageId);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
  outState.putString(KEY_NONCE_AUTHENTICATOR,mNonceAuthenticator);
  outState.putString(KEY_NONCE_BACKUP,mNonceBackup);
  outState.putString(KEY_NONCE_SMS,mNonceSms);
  outState.putString(KEY_2FA_TYPE,mType);
  outState.putString(KEY_SMS_NUMBER,mPhoneNumber);
  outState.putBoolean(KEY_SMS_SENT,mSentSmsCode);
}",0.997229916897507
13708,"@Override protected @LayoutRes int getProgressBarText(){
  return isSocialLogin ? R.string.logging_in : R.string.checking_email;
}","@Override protected @LayoutRes int getProgressBarText(){
  return mIsSocialLogin ? R.string.logging_in : R.string.checking_email;
}",0.9885057471264368
13709,"@Override protected void onHelp(){
  if (mLoginListener != null) {
    if (isSocialLogin) {
      mLoginListener.helpSocialEmailScreen(mGoogleEmail);
    }
 else {
      mLoginListener.helpEmailScreen(EditTextUtils.getText(mEmailInput.getEditText()));
    }
  }
}","@Override protected void onHelp(){
  if (mLoginListener != null) {
    if (mIsSocialLogin) {
      mLoginListener.helpSocialEmailScreen(mGoogleEmail);
    }
 else {
      mLoginListener.helpEmailScreen(EditTextUtils.getText(mEmailInput.getEditText()));
    }
  }
}",0.9943074003795066
13710,"@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  mEmailInput.setError(null);
  isSocialLogin=false;
}","@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  mEmailInput.setError(null);
  mIsSocialLogin=false;
}",0.9891696750902528
13711,"@Override protected void setupContent(ViewGroup rootView){
  mEmailInput=rootView.findViewById(R.id.login_email_row);
  if (BuildConfig.DEBUG) {
    mEmailInput.getEditText().setText(BuildConfig.DEBUG_WPCOM_LOGIN_EMAIL);
  }
  mEmailInput.addTextChangedListener(this);
  mEmailInput.setOnEditorCommitListener(this);
  LinearLayout googleLoginButton=rootView.findViewById(R.id.login_google_button);
  googleLoginButton.setOnClickListener(new OnClickListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onClick(    View view){
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_BUTTON_CLICK);
      ActivityUtils.hideKeyboard(getActivity().getCurrentFocus());
      if (NetworkUtils.checkConnection(getActivity())) {
        mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);
        isSocialLogin=true;
        mLoginListener.showGoogleLoginScreen(LoginEmailFragment.this);
      }
    }
  }
);
}","@Override protected void setupContent(ViewGroup rootView){
  mEmailInput=rootView.findViewById(R.id.login_email_row);
  if (BuildConfig.DEBUG) {
    mEmailInput.getEditText().setText(BuildConfig.DEBUG_WPCOM_LOGIN_EMAIL);
  }
  mEmailInput.addTextChangedListener(this);
  mEmailInput.setOnEditorCommitListener(this);
  LinearLayout googleLoginButton=rootView.findViewById(R.id.login_google_button);
  googleLoginButton.setOnClickListener(new OnClickListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onClick(    View view){
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_BUTTON_CLICK);
      ActivityUtils.hideKeyboard(getActivity().getCurrentFocus());
      if (NetworkUtils.checkConnection(getActivity())) {
        mOldSitesIDs=SiteUtils.getCurrentSiteIds(mSiteStore,false);
        mIsSocialLogin=true;
        mLoginListener.showGoogleLoginScreen(LoginEmailFragment.this);
      }
    }
  }
);
}",0.9984
13712,"@Override public void onActivityCreated(@Nullable Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null) {
    mOldSitesIDs=savedInstanceState.getIntegerArrayList(KEY_OLD_SITES_IDS);
    mRequestedEmail=savedInstanceState.getString(KEY_REQUESTED_EMAIL);
    mGoogleEmail=savedInstanceState.getString(KEY_GOOGLE_EMAIL);
    isSocialLogin=savedInstanceState.getBoolean(KEY_IS_SOCIAL);
  }
 else {
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_EMAIL_FORM_VIEWED);
  }
}","@Override public void onActivityCreated(@Nullable Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null) {
    mOldSitesIDs=savedInstanceState.getIntegerArrayList(KEY_OLD_SITES_IDS);
    mRequestedEmail=savedInstanceState.getString(KEY_REQUESTED_EMAIL);
    mGoogleEmail=savedInstanceState.getString(KEY_GOOGLE_EMAIL);
    mIsSocialLogin=savedInstanceState.getBoolean(KEY_IS_SOCIAL);
  }
 else {
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_EMAIL_FORM_VIEWED);
  }
}",0.9971563981042654
13713,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
  outState.putString(KEY_REQUESTED_EMAIL,mRequestedEmail);
  outState.putString(KEY_GOOGLE_EMAIL,mGoogleEmail);
  outState.putBoolean(KEY_IS_SOCIAL,isSocialLogin);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putIntegerArrayList(KEY_OLD_SITES_IDS,mOldSitesIDs);
  outState.putString(KEY_REQUESTED_EMAIL,mRequestedEmail);
  outState.putString(KEY_GOOGLE_EMAIL,mGoogleEmail);
  outState.putBoolean(KEY_IS_SOCIAL,mIsSocialLogin);
}",0.9954337899543378
13714,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mEmailAddress=getArguments().getString(ARG_EMAIL_ADDRESS);
  mPassword=getArguments().getString(ARG_PASSWORD);
  mIdToken=getArguments().getString(ARG_SOCIAL_ID_TOKEN);
  mService=getArguments().getString(ARG_SOCIAL_SERVICE);
  isSocialLogin=getArguments().getBoolean(ARG_SOCIAL_LOGIN);
  if (savedInstanceState != null) {
    mRequestedPassword=savedInstanceState.getString(KEY_REQUESTED_PASSWORD);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mEmailAddress=getArguments().getString(ARG_EMAIL_ADDRESS);
  mPassword=getArguments().getString(ARG_PASSWORD);
  mIdToken=getArguments().getString(ARG_SOCIAL_ID_TOKEN);
  mService=getArguments().getString(ARG_SOCIAL_SERVICE);
  mIsSocialLogin=getArguments().getBoolean(ARG_SOCIAL_LOGIN);
  if (savedInstanceState != null) {
    mRequestedPassword=savedInstanceState.getString(KEY_REQUESTED_PASSWORD);
  }
}",0.9970267591674926
13715,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError()) {
    endProgress();
    AppLog.e(T.API,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    if (isAdded()) {
      handleAuthError(event.error.type,event.error.message);
    }
    return;
  }
  AppLog.i(T.NUX,""String_Node_Str"" + event.toString());
  if (isSocialLogin) {
    PushSocialLoginPayload payload=new PushSocialLoginPayload(mIdToken,mService);
    mDispatcher.dispatch(AccountActionBuilder.newPushSocialConnectAction(payload));
  }
 else {
    saveCredentialsInSmartLock(mLoginListener,mEmailAddress,mRequestedPassword);
    doFinishLogin();
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError()) {
    endProgress();
    AppLog.e(T.API,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    if (isAdded()) {
      handleAuthError(event.error.type,event.error.message);
    }
    return;
  }
  AppLog.i(T.NUX,""String_Node_Str"" + event.toString());
  if (mIsSocialLogin) {
    PushSocialLoginPayload payload=new PushSocialLoginPayload(mIdToken,mService);
    mDispatcher.dispatch(AccountActionBuilder.newPushSocialConnectAction(payload));
  }
 else {
    saveCredentialsInSmartLock(mLoginListener,mEmailAddress,mRequestedPassword);
    doFinishLogin();
  }
}",0.9980145598941098
13716,"@Override protected void onLoginFinished(){
  mLoginListener.trackAnalyticsSignIn(mAccountStore,mSiteStore,true);
  if (isSocialLogin) {
    mLoginListener.loggedInViaSocialAccount(mOldSitesIDs);
  }
 else {
    mLoginListener.loggedInViaPassword(mOldSitesIDs);
  }
}","@Override protected void onLoginFinished(){
  mLoginListener.trackAnalyticsSignIn(mAccountStore,mSiteStore,true);
  if (mIsSocialLogin) {
    mLoginListener.loggedInViaSocialAccount(mOldSitesIDs);
  }
 else {
    mLoginListener.loggedInViaPassword(mOldSitesIDs);
  }
}",0.994392523364486
13717,"@Override protected void setupLabel(@NonNull TextView label){
  label.setText(isSocialLogin ? R.string.enter_wpcom_password_google : R.string.enter_wpcom_password);
}","@Override protected void setupLabel(@NonNull TextView label){
  label.setText(mIsSocialLogin ? R.string.enter_wpcom_password_google : R.string.enter_wpcom_password);
}",0.990990990990991
13718,"private void handleAuthError(AccountStore.AuthenticationErrorType error,String errorMessage){
  if (error != AccountStore.AuthenticationErrorType.NEEDS_2FA) {
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_FAILED,error.getClass().getSimpleName(),error.toString(),errorMessage);
    if (isSocialLogin) {
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_FAILURE,error.getClass().getSimpleName(),error.toString(),errorMessage);
    }
  }
switch (error) {
case INCORRECT_USERNAME_OR_PASSWORD:
case NOT_AUTHENTICATED:
    showPasswordError();
  break;
case NEEDS_2FA:
saveCredentialsInSmartLock(mLoginListener,mEmailAddress,mPassword);
if (isSocialLogin) {
mLoginListener.needs2faSocialConnect(mEmailAddress,mRequestedPassword,mIdToken,mService);
}
 else {
mLoginListener.needs2fa(mEmailAddress,mRequestedPassword);
}
break;
case INVALID_REQUEST:
default :
AppLog.e(T.NUX,""String_Node_Str"" + errorMessage);
ToastUtils.showToast(getActivity(),errorMessage == null ? getString(R.string.error_generic) : errorMessage);
break;
}
}","private void handleAuthError(AccountStore.AuthenticationErrorType error,String errorMessage){
  if (error != AccountStore.AuthenticationErrorType.NEEDS_2FA) {
    mLoginListener.track(AnalyticsTracker.Stat.LOGIN_FAILED,error.getClass().getSimpleName(),error.toString(),errorMessage);
    if (mIsSocialLogin) {
      mLoginListener.track(AnalyticsTracker.Stat.LOGIN_SOCIAL_FAILURE,error.getClass().getSimpleName(),error.toString(),errorMessage);
    }
  }
switch (error) {
case INCORRECT_USERNAME_OR_PASSWORD:
case NOT_AUTHENTICATED:
    showPasswordError();
  break;
case NEEDS_2FA:
saveCredentialsInSmartLock(mLoginListener,mEmailAddress,mPassword);
if (mIsSocialLogin) {
mLoginListener.needs2faSocialConnect(mEmailAddress,mRequestedPassword,mIdToken,mService);
}
 else {
mLoginListener.needs2fa(mEmailAddress,mRequestedPassword);
}
break;
case INVALID_REQUEST:
default :
AppLog.e(T.NUX,""String_Node_Str"" + errorMessage);
ToastUtils.showToast(getActivity(),errorMessage == null ? getString(R.string.error_generic) : errorMessage);
break;
}
}",0.9971181556195964
13719,"@Override public void onResponse(JSONObject response){
  ThemeTable.setCurrentTheme(WordPress.wpDB.getDatabase(),String.valueOf(site.getSiteId()),themeId);
  setState(SiteCreationPhase.SUCCESS);
}","@Override public void onResponse(JSONObject response){
  mThemeStore.setActiveThemeForSite(site,themeModel);
  setState(SiteCreationPhase.SUCCESS);
}",0.7594202898550725
13720,"private void activateTheme(final SiteModel site,final String themeId){
  WordPress.getRestClientUtils().setTheme(site.getSiteId(),themeId,new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      ThemeTable.setCurrentTheme(WordPress.wpDB.getDatabase(),String.valueOf(site.getSiteId()),themeId);
      setState(SiteCreationPhase.SUCCESS);
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      setState(SiteCreationPhase.FAILURE);
    }
  }
);
}","private void activateTheme(final SiteModel site,final ThemeModel themeModel){
  WordPress.getRestClientUtils().setTheme(site.getSiteId(),themeModel.getThemeId(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      mThemeStore.setActiveThemeForSite(site,themeModel);
      setState(SiteCreationPhase.SUCCESS);
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      setState(SiteCreationPhase.FAILURE);
    }
  }
);
}",0.731203007518797
13721,"@Override public int onStartCommand(@Nullable Intent intent,int flags,int startId){
  if (intent == null) {
    return START_NOT_STICKY;
  }
  setState(SiteCreationPhase.NEW_SITE);
  final String siteTitle=intent.getStringExtra(ARG_SITE_TITLE);
  final String siteSlug=intent.getStringExtra(ARG_SITE_SLUG);
  mSiteTagline=intent.getStringExtra(ARG_SITE_TAGLINE);
  mSiteTheme=intent.getStringExtra(ARG_SITE_THEME);
  final String language=LanguageUtils.getPatchedCurrentDeviceLanguage(this);
  SiteStore.NewSitePayload newSitePayload=new SiteStore.NewSitePayload(siteSlug,siteTitle,language,SiteStore.SiteVisibility.PUBLIC,false);
  mDispatcher.dispatch(SiteActionBuilder.newCreateNewSiteAction(newSitePayload));
  AppLog.i(T.NUX,""String_Node_Str"" + siteTitle + ""String_Node_Str""+ siteSlug);
  return START_REDELIVER_INTENT;
}","@Override public int onStartCommand(@Nullable Intent intent,int flags,int startId){
  if (intent == null) {
    return START_NOT_STICKY;
  }
  setState(SiteCreationPhase.NEW_SITE);
  final String siteTitle=intent.getStringExtra(ARG_SITE_TITLE);
  final String siteSlug=intent.getStringExtra(ARG_SITE_SLUG);
  mSiteTagline=intent.getStringExtra(ARG_SITE_TAGLINE);
  String themeId=intent.getStringExtra(ARG_SITE_THEME_ID);
  mSiteTheme=mThemeStore.getWpComThemeByThemeId(themeId);
  final String language=LanguageUtils.getPatchedCurrentDeviceLanguage(this);
  SiteStore.NewSitePayload newSitePayload=new SiteStore.NewSitePayload(siteSlug,siteTitle,language,SiteStore.SiteVisibility.PUBLIC,false);
  mDispatcher.dispatch(SiteActionBuilder.newCreateNewSiteAction(newSitePayload));
  AppLog.i(T.NUX,""String_Node_Str"" + siteTitle + ""String_Node_Str""+ siteSlug);
  return START_REDELIVER_INTENT;
}",0.9504950495049505
13722,"public static void createSite(Context context,String siteTitle,String siteTagline,String siteSlug,String siteTheme){
  Intent intent=new Intent(context,SiteCreationService.class);
  intent.putExtra(ARG_SITE_TITLE,siteTitle);
  intent.putExtra(ARG_SITE_TAGLINE,siteTagline);
  intent.putExtra(ARG_SITE_SLUG,siteSlug);
  intent.putExtra(ARG_SITE_THEME,siteTheme);
  context.startService(intent);
}","public static void createSite(Context context,String siteTitle,String siteTagline,String siteSlug,String siteThemeId){
  Intent intent=new Intent(context,SiteCreationService.class);
  intent.putExtra(ARG_SITE_TITLE,siteTitle);
  intent.putExtra(ARG_SITE_TAGLINE,siteTagline);
  intent.putExtra(ARG_SITE_SLUG,siteSlug);
  intent.putExtra(ARG_SITE_THEME_ID,siteThemeId);
  context.startService(intent);
}",0.9912170639899625
13723,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.plugin_detail_activity);
  String pluginName;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    pluginName=getIntent().getStringExtra(KEY_PLUGIN_NAME);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    pluginName=savedInstanceState.getString(KEY_PLUGIN_NAME);
  }
  mPlugin=mPluginStore.getPluginByName(mSite,pluginName);
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,Duration.SHORT);
    finish();
    return;
  }
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setElevation(0);
  }
  setupViews();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.plugin_detail_activity);
  String pluginName;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    pluginName=getIntent().getStringExtra(KEY_PLUGIN_NAME);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    pluginName=savedInstanceState.getString(KEY_PLUGIN_NAME);
  }
  mPlugin=mPluginStore.getSitePluginByName(mSite,pluginName);
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,Duration.SHORT);
    finish();
    return;
  }
  if (mPlugin == null) {
    ToastUtils.showToast(this,R.string.plugin_not_found,Duration.SHORT);
    finish();
    return;
  }
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setElevation(0);
  }
  setupViews();
}",0.99830220713073
13724,"private void dispatchUpdateAction(){
  mDispatcher.dispatch(PluginActionBuilder.newUpdatePluginAction(new UpdatePluginPayload(mSite,mPlugin)));
}","private void dispatchUpdateAction(){
  mDispatcher.dispatch(PluginActionBuilder.newUpdateSitePluginAction(new UpdateSitePluginPayload(mSite,mPlugin)));
}",0.9731543624161074
13725,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginChanged(OnPluginChanged event){
  if (event.isError()) {
    return;
  }
  refreshPluginList();
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onPluginChanged(OnSitePluginUpdated event){
  if (event.isError()) {
    return;
  }
  refreshPluginList();
}",0.9692307692307692
13726,"@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final int maxWidth=ImageUtils.getMaximumThumbnailWidthForEditor(getActivity());
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    AztecAttributes attributes=new AztecAttributes();
    attributes.setValue(ATTR_SRC,mediaUrl);
    setAttributeValuesIfNotDefault(attributes,mediaFile);
    if (mediaFile.isVideo()) {
      addVideoUploadingClassIfMissing(attributes);
      content.insertVideo(getLoadingVideoPlaceholder(),attributes);
      overlayVideoIcon(0,new MediaPredicate(mediaUrl,ATTR_SRC));
    }
 else {
      content.insertImage(getLoadingImagePlaceholder(),attributes);
    }
    final String posterURL=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : mediaUrl;
    imageLoader.get(posterURL,new ImageLoader.ImageListener(){
      private void replaceDrawable(      Drawable newDrawable){
        AztecMediaSpan[] imageOrVideoSpans=content.getText().getSpans(0,content.getText().length(),AztecMediaSpan.class);
        for (        AztecMediaSpan currentClass : imageOrVideoSpans) {
          if (currentClass.getAttributes().hasAttribute(ATTR_SRC) && mediaUrl.equals(currentClass.getAttributes().getValue(ATTR_SRC))) {
            currentClass.setDrawable(newDrawable);
          }
        }
        content.refreshText();
      }
      private void showErrorPlaceholder(){
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        replaceDrawable(drawable);
      }
      @Override public void onErrorResponse(      VolleyError error){
        if (!isAdded()) {
          return;
        }
        showErrorPlaceholder();
      }
      @Override public void onResponse(      ImageLoader.ImageContainer container,      boolean isImmediate){
        if (!isAdded()) {
          return;
        }
        Bitmap downloadedBitmap=container.getBitmap();
        if (downloadedBitmap == null) {
          if (isImmediate) {
            return;
          }
          showErrorPlaceholder();
          return;
        }
        AztecAttributes attributes=new AztecAttributes();
        attributes.setValue(ATTR_SRC,mediaUrl);
        setAttributeValuesIfNotDefault(attributes,mediaFile);
        int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
        if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
          ToastUtils.showToast(getActivity(),R.string.error_media_small);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
          replaceDrawable(drawable);
          return;
        }
        Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,maxWidth);
        replaceDrawable(new BitmapDrawable(getResources(),resizedBitmap));
      }
    }
,maxWidth,0);
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    final String safeMediaPreviewUrl=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : Utils.escapeQuotes(mediaUrl);
    AztecAttributes attrs=new AztecAttributes();
    attrs.setValue(ATTR_ID_WP,localMediaId);
    attrs.setValue(ATTR_SRC,Utils.escapeQuotes(mediaUrl));
    attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
    addDefaultSizeClassIfMissing(attrs);
    Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaPreviewUrl,maxWidth);
    MediaPredicate localMediaIdPredicate=MediaPredicate.getLocalMediaIdPredicate(localMediaId);
    if (bitmapToShow != null) {
      if (mediaFile.isVideo()) {
        addVideoUploadingClassIfMissing(attrs);
        content.insertVideo(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.error_media_load);
      Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
      drawable.setBounds(0,0,maxWidth,maxWidth);
      content.insertImage(drawable,attrs);
    }
    overlayProgressingMedia(localMediaIdPredicate);
    mUploadingMediaProgressMax.put(localMediaId,0f);
    if (mediaFile.isVideo()) {
      overlayVideoIcon(2,localMediaIdPredicate);
    }
    content.updateElementAttributes(localMediaIdPredicate,attrs);
    content.resetAttributedMediaSpan(localMediaIdPredicate);
  }
}","@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final int maxWidth=ImageUtils.getMaximumThumbnailWidthForEditor(getActivity());
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    AztecAttributes attributes=new AztecAttributes();
    attributes.setValue(ATTR_SRC,mediaUrl);
    setAttributeValuesIfNotDefault(attributes,mediaFile);
    if (mediaFile.isVideo()) {
      addVideoUploadingClassIfMissing(attributes);
      content.insertVideo(getLoadingVideoPlaceholder(),attributes);
      overlayVideoIcon(0,new MediaPredicate(mediaUrl,ATTR_SRC));
    }
 else {
      content.insertImage(getLoadingImagePlaceholder(),attributes);
    }
    final String posterURL=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : mediaUrl;
    imageLoader.get(posterURL,new ImageLoader.ImageListener(){
      private void replaceDrawable(      Drawable newDrawable){
        AztecMediaSpan[] imageOrVideoSpans=content.getText().getSpans(0,content.getText().length(),AztecMediaSpan.class);
        for (        AztecMediaSpan currentClass : imageOrVideoSpans) {
          if (currentClass.getAttributes().hasAttribute(ATTR_SRC) && mediaUrl.equals(currentClass.getAttributes().getValue(ATTR_SRC))) {
            currentClass.setDrawable(newDrawable);
          }
        }
        content.refreshText();
      }
      private void showErrorPlaceholder(){
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        replaceDrawable(drawable);
      }
      @Override public void onErrorResponse(      VolleyError error){
        if (!isAdded()) {
          return;
        }
        showErrorPlaceholder();
      }
      @Override public void onResponse(      ImageLoader.ImageContainer container,      boolean isImmediate){
        if (!isAdded()) {
          return;
        }
        Bitmap downloadedBitmap=container.getBitmap();
        if (downloadedBitmap == null) {
          if (isImmediate) {
            return;
          }
          showErrorPlaceholder();
          return;
        }
        AztecAttributes attributes=new AztecAttributes();
        attributes.setValue(ATTR_SRC,mediaUrl);
        setAttributeValuesIfNotDefault(attributes,mediaFile);
        int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
        if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
          ToastUtils.showToast(getActivity(),R.string.error_media_small);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
          replaceDrawable(drawable);
          return;
        }
        Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,maxWidth);
        replaceDrawable(new BitmapDrawable(getResources(),resizedBitmap));
      }
    }
,maxWidth,0);
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    final String safeMediaPreviewUrl=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : Utils.escapeQuotes(mediaUrl);
    AztecAttributes attrs=new AztecAttributes();
    attrs.setValue(ATTR_ID_WP,localMediaId);
    attrs.setValue(ATTR_SRC,Utils.escapeQuotes(mediaUrl));
    attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
    addDefaultSizeClassIfMissing(attrs);
    int[] bitmapDimensions=ImageUtils.getImageSize(Uri.parse(safeMediaPreviewUrl),getActivity());
    int realBitmapWidth=bitmapDimensions[0];
    Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaPreviewUrl,maxWidth > realBitmapWidth && realBitmapWidth > 0 ? realBitmapWidth : maxWidth);
    MediaPredicate localMediaIdPredicate=MediaPredicate.getLocalMediaIdPredicate(localMediaId);
    if (bitmapToShow != null) {
      if (mediaFile.isVideo()) {
        addVideoUploadingClassIfMissing(attrs);
        content.insertVideo(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.error_media_load);
      Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
      drawable.setBounds(0,0,maxWidth,maxWidth);
      content.insertImage(drawable,attrs);
    }
    overlayProgressingMedia(localMediaIdPredicate);
    mUploadingMediaProgressMax.put(localMediaId,0f);
    if (mediaFile.isVideo()) {
      overlayVideoIcon(2,localMediaIdPredicate);
    }
    content.updateElementAttributes(localMediaIdPredicate,attrs);
    content.resetAttributedMediaSpan(localMediaIdPredicate);
  }
}",0.977618997583272
13727,"private void verifyMediaOnlyUploadsAndNotify(){
  if (!mMediaBatchUploaded.isEmpty()) {
    ArrayList<MediaModel> standAloneMediaItems=new ArrayList<>();
    for (    MediaModel media : mMediaBatchUploaded) {
      MediaModel currentMedia=mMediaStore.getMediaWithLocalId(media.getId());
      if (currentMedia.getLocalPostId() == 0) {
        standAloneMediaItems.add(currentMedia);
      }
    }
    if (!standAloneMediaItems.isEmpty()) {
      SiteModel site=mSiteStore.getSiteByLocalId(standAloneMediaItems.get(0).getLocalSiteId());
      mPostUploadNotifier.updateNotificationSuccessForMedia(standAloneMediaItems,site);
      mMediaBatchUploaded.clear();
    }
  }
}","private void verifyMediaOnlyUploadsAndNotify(){
  if (!mMediaBatchUploaded.isEmpty()) {
    ArrayList<MediaModel> standAloneMediaItems=new ArrayList<>();
    for (    MediaModel media : mMediaBatchUploaded) {
      MediaModel currentMedia=mMediaStore.getMediaWithLocalId(media.getId());
      if (currentMedia.getLocalPostId() == 0 && MediaUploadState.fromString(currentMedia.getUploadState()) == MediaUploadState.UPLOADED) {
        standAloneMediaItems.add(currentMedia);
      }
    }
    if (!standAloneMediaItems.isEmpty()) {
      SiteModel site=mSiteStore.getSiteByLocalId(standAloneMediaItems.get(0).getLocalSiteId());
      mPostUploadNotifier.updateNotificationSuccessForMedia(standAloneMediaItems,site);
      mMediaBatchUploaded.clear();
    }
  }
}",0.9364081062194268
13728,"@Override protected Boolean doInBackground(Void... nada){
  if (mIsPage) {
    tmpPosts=mPostStore.getPagesForSite(mSite);
  }
 else {
    tmpPosts=mPostStore.getPostsForSite(mSite);
  }
  for (  PostModel hiddenPost : mHiddenPosts) {
    tmpPosts.remove(hiddenPost);
  }
  if (mLoadMode == LoadMode.IF_CHANGED && PostUtils.postListsAreEqual(mPosts,tmpPosts)) {
    boolean postsAreUploading=false;
    for (    PostModel post : tmpPosts) {
      if (UploadService.isPostUploadingOrQueued(post)) {
        postsAreUploading=true;
        break;
      }
    }
    if (!postsAreUploading) {
      return false;
    }
  }
  mFeaturedImageUrls.clear();
  boolean isPrivate=!SiteUtils.isPhotonCapable(mSite);
  for (  PostModel post : tmpPosts) {
    String imageUrl=null;
    if (post.getFeaturedImageId() != 0) {
      MediaModel media=mMediaStore.getSiteMediaWithId(mSite,post.getFeaturedImageId());
      if (media != null) {
        imageUrl=media.getUrl();
      }
 else {
        mediaIdsToUpdate.add(post.getFeaturedImageId());
      }
    }
 else {
      imageUrl=new ReaderImageScanner(post.getContent(),isPrivate).getLargestImage();
    }
    if (!TextUtils.isEmpty(imageUrl)) {
      mFeaturedImageUrls.put(post.getId(),imageUrl);
    }
  }
  return true;
}","@Override protected Boolean doInBackground(Void... nada){
  if (mIsPage) {
    tmpPosts=mPostStore.getPagesForSite(mSite);
  }
 else {
    tmpPosts=mPostStore.getPostsForSite(mSite);
  }
  tmpPosts.removeAll(mHiddenPosts);
  if (mLoadMode == LoadMode.IF_CHANGED && PostUtils.postListsAreEqual(mPosts,tmpPosts)) {
    boolean postsAreUploading=false;
    for (    PostModel post : tmpPosts) {
      if (UploadService.isPostUploadingOrQueued(post)) {
        postsAreUploading=true;
        break;
      }
    }
    if (!postsAreUploading) {
      return false;
    }
  }
  mFeaturedImageUrls.clear();
  boolean isPrivate=!SiteUtils.isPhotonCapable(mSite);
  for (  PostModel post : tmpPosts) {
    String imageUrl=null;
    if (post.getFeaturedImageId() != 0) {
      MediaModel media=mMediaStore.getSiteMediaWithId(mSite,post.getFeaturedImageId());
      if (media != null) {
        imageUrl=media.getUrl();
      }
 else {
        mediaIdsToUpdate.add(post.getFeaturedImageId());
      }
    }
 else {
      imageUrl=new ReaderImageScanner(post.getContent(),isPrivate).getLargestImage();
    }
    if (!TextUtils.isEmpty(imageUrl)) {
      mFeaturedImageUrls.put(post.getId(),imageUrl);
    }
  }
  return true;
}",0.964098426784994
13729,"/** 
 * Get the URL of the WordPress login page.
 * @return URL of the login page.
 */
public static String getSiteLoginUrl(SiteModel site){
  String loginURL=site.getLoginUrl();
  if (loginURL == null) {
    if (site.getUrl() != null) {
      return site.getUrl() + ""String_Node_Str"";
    }
 else {
      return site.getXmlRpcUrl().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return loginURL;
}","/** 
 * Get the URL of the WordPress login page.
 * @return URL of the login page.
 */
public static String getSiteLoginUrl(SiteModel site){
  if (site.isJetpackConnected()) {
    return WPCOM_LOGIN_URL;
  }
  String loginURL=site.getLoginUrl();
  if (loginURL == null) {
    if (site.getUrl() != null) {
      return site.getUrl() + ""String_Node_Str"";
    }
 else {
      return site.getXmlRpcUrl().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  return loginURL;
}",0.9242937853107344
13730,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),true,event.mediaModelList,event.successMessage);
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,event.successMessage);
  }
}",0.98989898989899
13731,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),true,event.mediaModelList,event.successMessage);
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),false,event.mediaModelList,event.successMessage);
  }
}",0.9891472868217054
13732,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),true,event.mediaModelList,event.successMessage);
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(UploadService.UploadMediaSuccessEvent event){
  if (event.mediaModelList != null && !event.mediaModelList.isEmpty()) {
    UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,event.successMessage);
  }
}",0.98989898989899
13733,"private void updatePostUploadProgressBar(ProgressBar view,PostModel post){
  if (UploadService.isPostUploadingOrQueued(post) || UploadService.hasInProgressMediaUploadsForPost(post)) {
    view.setVisibility(View.VISIBLE);
    int overallProgress=Math.round(UploadService.getMediaUploadProgressForPost(post) * 100);
    view.setProgress(Math.min(MAX_DISPLAYED_UPLOAD_PROGRESS,overallProgress));
  }
 else {
    view.setVisibility(View.GONE);
  }
}","private void updatePostUploadProgressBar(ProgressBar view,PostModel post){
  if (!mUploadStore.isFailedPost(post) && (UploadService.isPostUploadingOrQueued(post) || UploadService.hasInProgressMediaUploadsForPost(post))) {
    view.setVisibility(View.VISIBLE);
    int overallProgress=Math.round(UploadService.getMediaUploadProgressForPost(post) * 100);
    view.setProgress(Math.min(MAX_DISPLAYED_UPLOAD_PROGRESS,overallProgress));
  }
 else {
    view.setVisibility(View.GONE);
  }
}",0.9591397849462364
13734,"@Override public void onActivityResult(int request,int result,Intent data){
  super.onActivityResult(request,result,data);
switch (request) {
case REQUEST_CONNECT:
    if (result != RESULT_OK) {
      shouldResolveError=false;
    }
  if (!mGoogleApiClient.isConnecting() && !mGoogleApiClient.isConnected()) {
    mGoogleApiClient.connect();
  }
 else {
    showAccountDialog();
  }
isResolvingError=false;
break;
case REQUEST_LOGIN:
if (result == RESULT_OK) {
GoogleSignInResult signInResult=Auth.GoogleSignInApi.getSignInResultFromIntent(data);
if (signInResult.isSuccess()) {
try {
  GoogleSignInAccount account=signInResult.getSignInAccount();
  mGoogleEmail=account.getEmail();
  PushSocialLoginPayload payload=new PushSocialLoginPayload(account.getIdToken(),SERVICE_TYPE_GOOGLE);
  mDispatcher.dispatch(AccountActionBuilder.newPushSocialLoginAction(payload));
}
 catch (NullPointerException exception) {
  disconnectGoogleClient();
  AppLog.e(T.NUX,""String_Node_Str"",exception);
  showErrorDialog(getString(R.string.login_error_generic));
}
}
 else {
switch (signInResult.getStatus().getStatusCode()) {
case GoogleSignInStatusCodes.INTERNAL_ERROR:
  AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic) + getString(R.string.login_error_suffix_internal));
break;
case GoogleSignInStatusCodes.INVALID_ACCOUNT:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic) + getString(R.string.login_error_suffix_invalid));
break;
case GoogleSignInStatusCodes.NETWORK_ERROR:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.error_generic_network));
break;
case GoogleSignInStatusCodes.SIGN_IN_CANCELLED:
AppLog.e(T.NUX,""String_Node_Str"");
break;
case GoogleSignInStatusCodes.SIGN_IN_FAILED:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
case GoogleSignInStatusCodes.SIGN_IN_REQUIRED:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
default :
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
}
}
}
 else {
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
}
break;
}
}","@Override public void onActivityResult(int request,int result,Intent data){
  super.onActivityResult(request,result,data);
switch (request) {
case REQUEST_CONNECT:
    if (result != RESULT_OK) {
      shouldResolveError=false;
    }
  if (!mGoogleApiClient.isConnecting() && !mGoogleApiClient.isConnected()) {
    mGoogleApiClient.connect();
  }
 else {
    showAccountDialog();
  }
isResolvingError=false;
break;
case REQUEST_LOGIN:
if (result == RESULT_OK) {
GoogleSignInResult signInResult=Auth.GoogleSignInApi.getSignInResultFromIntent(data);
if (signInResult.isSuccess()) {
try {
  GoogleSignInAccount account=signInResult.getSignInAccount();
  mGoogleEmail=account.getEmail();
  PushSocialLoginPayload payload=new PushSocialLoginPayload(account.getIdToken(),SERVICE_TYPE_GOOGLE);
  mDispatcher.dispatch(AccountActionBuilder.newPushSocialLoginAction(payload));
}
 catch (NullPointerException exception) {
  disconnectGoogleClient();
  AppLog.e(T.NUX,""String_Node_Str"",exception);
  showErrorDialog(getString(R.string.login_error_generic));
}
}
 else {
switch (signInResult.getStatus().getStatusCode()) {
case GoogleSignInStatusCodes.INTERNAL_ERROR:
  AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
case GoogleSignInStatusCodes.INVALID_ACCOUNT:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic) + getString(R.string.login_error_suffix_invalid));
break;
case GoogleSignInStatusCodes.NETWORK_ERROR:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.error_generic_network));
break;
case GoogleSignInStatusCodes.SIGN_IN_CANCELLED:
AppLog.e(T.NUX,""String_Node_Str"");
break;
case GoogleSignInStatusCodes.SIGN_IN_FAILED:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
case GoogleSignInStatusCodes.SIGN_IN_REQUIRED:
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
default :
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
break;
}
}
}
 else {
AppLog.e(T.NUX,""String_Node_Str"");
showErrorDialog(getString(R.string.login_error_generic));
}
break;
}
}",0.9888042991491268
13735,"void updateNotificationError(@NonNull PostModel post,@NonNull SiteModel site,String errorMessage){
  AppLog.d(AppLog.T.POSTS,""String_Node_Str"" + errorMessage);
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForPost(post);
  Intent notificationIntent=new Intent(mContext,PostsListActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,post.isPage());
  notificationIntent.putExtra(PostsListActivity.EXTRA_TARGET_POST_LOCAL_ID,post.getId());
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(R.drawable.ic_my_sites_24dp);
  notificationBuilder.setColor(mContext.getResources().getColor(R.color.blue_wordpress));
  String postTitle=TextUtils.isEmpty(post.getTitle()) ? mContext.getString(R.string.untitled) : post.getTitle();
  String notificationTitle=String.format(mContext.getString(R.string.upload_failed_param),postTitle);
  String newErrorMessage=""String_Node_Str"";
  int postItemsNotUploaded=sNotificationData.totalPostItems - sNotificationData.currentPostItem;
  int mediaItemsNotUploaded=sNotificationData.totalMediaItems - sNotificationData.currentMediaItem;
  if (postItemsNotUploaded > 0) {
    newErrorMessage+=postItemsNotUploaded + ""String_Node_Str"" + getPagesAndOrPostsString();
    if (mediaItemsNotUploaded > 0) {
      newErrorMessage+=""String_Node_Str"";
    }
  }
  if (mediaItemsNotUploaded > 0) {
    newErrorMessage+=String.format(mContext.getString(R.string.media_files_not_uploaded),mediaItemsNotUploaded);
    if (mediaItemsNotUploaded < sNotificationData.currentMediaItem) {
      newErrorMessage+=""String_Node_Str"" + String.format(mContext.getString(R.string.media_files_uploaded_succcessfully),(sNotificationData.currentMediaItem - mediaItemsNotUploaded));
    }
  }
  if (newErrorMessage.length() > 0) {
    newErrorMessage+=""String_Node_Str"" + errorMessage;
  }
 else {
    newErrorMessage=errorMessage;
  }
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(newErrorMessage);
  notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(errorMessage));
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  doNotify(notificationId,notificationBuilder.build());
}","void updateNotificationError(@NonNull PostModel post,@NonNull SiteModel site,String errorMessage){
  AppLog.d(AppLog.T.POSTS,""String_Node_Str"" + errorMessage);
  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(mContext.getApplicationContext());
  long notificationId=getNotificationIdForPost(post);
  Intent notificationIntent=new Intent(mContext,PostsListActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  notificationIntent.putExtra(WordPress.SITE,site);
  notificationIntent.putExtra(PostsListActivity.EXTRA_VIEW_PAGES,post.isPage());
  notificationIntent.putExtra(PostsListActivity.EXTRA_TARGET_POST_LOCAL_ID,post.getId());
  notificationIntent.setAction(String.valueOf(notificationId));
  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,(int)notificationId,notificationIntent,PendingIntent.FLAG_ONE_SHOT);
  notificationBuilder.setSmallIcon(R.drawable.ic_my_sites_24dp);
  notificationBuilder.setColor(mContext.getResources().getColor(R.color.blue_wordpress));
  String postTitle=TextUtils.isEmpty(post.getTitle()) ? mContext.getString(R.string.untitled) : post.getTitle();
  String notificationTitle=String.format(mContext.getString(R.string.upload_failed_param),postTitle);
  String newErrorMessage=""String_Node_Str"";
  int postItemsNotUploaded=sNotificationData.totalPostItems > 0 ? sNotificationData.totalPostItems - (sNotificationData.currentPostItem - 1) : 0;
  int mediaItemsNotUploaded=sNotificationData.totalMediaItems - sNotificationData.currentMediaItem;
  if (postItemsNotUploaded > 0) {
    newErrorMessage+=postItemsNotUploaded + ""String_Node_Str"" + getPagesAndOrPostsString();
    if (mediaItemsNotUploaded > 0) {
      newErrorMessage+=""String_Node_Str"";
    }
  }
  if (mediaItemsNotUploaded > 0) {
    newErrorMessage+=String.format(mContext.getString(R.string.media_files_not_uploaded),mediaItemsNotUploaded);
    if (mediaItemsNotUploaded < sNotificationData.currentMediaItem) {
      newErrorMessage+=""String_Node_Str"" + String.format(mContext.getString(R.string.media_files_uploaded_succcessfully),(sNotificationData.currentMediaItem - mediaItemsNotUploaded));
    }
  }
  if (newErrorMessage.length() > 0) {
    newErrorMessage+=""String_Node_Str"" + errorMessage;
  }
 else {
    newErrorMessage=errorMessage;
  }
  notificationBuilder.setContentTitle(notificationTitle);
  notificationBuilder.setContentText(newErrorMessage);
  notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(newErrorMessage));
  notificationBuilder.setContentIntent(pendingIntent);
  notificationBuilder.setAutoCancel(true);
  doNotify(notificationId,notificationBuilder.build());
}",0.9900662251655628
13736,"private void resetNotificationCounters(){
  sNotificationData.currentPostItem=0;
  sNotificationData.currentMediaItem=0;
  sNotificationData.totalMediaItems=0;
  sNotificationData.totalPostItems=0;
  sNotificationData.totalPageItemsIncludedInPostCount=0;
  sNotificationData.mediaItemToProgressMap.clear();
}","private void resetNotificationCounters(){
  sNotificationData.currentPostItem=0;
  sNotificationData.currentMediaItem=0;
  sNotificationData.totalMediaItems=0;
  sNotificationData.totalPostItems=0;
  sNotificationData.totalPageItemsIncludedInPostCount=0;
  sNotificationData.mediaItemToProgressMap.clear();
  sNotificationData.mUploadedPostsCounted.clear();
}",0.9235382308845578
13737,"void incrementUploadedPostCountFromForegroundNotificationOrFinish(@NonNull PostModel post){
  sNotificationData.currentPostItem++;
  if (post.isPage()) {
    sNotificationData.totalPageItemsIncludedInPostCount--;
  }
  if (!removeNotificationAndStopForegroundServiceIfNoItemsInQueue()) {
    updateForegroundNotification(post);
  }
}","void incrementUploadedPostCountFromForegroundNotificationOrFinish(@NonNull PostModel post){
  if (isPostAlreadyInPostCount(post)) {
    return;
  }
 else {
    addPostToPostCount(post);
  }
  sNotificationData.currentPostItem++;
  if (post.isPage()) {
    sNotificationData.totalPageItemsIncludedInPostCount--;
  }
  if (!removeNotificationAndStopForegroundServiceIfNoItemsInQueue()) {
    updateForegroundNotification(post);
  }
}",0.8717277486910995
13738,"private void cancelPostUploadMatchingMedia(@NonNull MediaModel media,String errorMessage){
  PostModel postToCancel=mPostStore.getPostByLocalPostId(media.getLocalPostId());
  if (postToCancel == null)   return;
  SiteModel site=mSiteStore.getSiteByLocalId(postToCancel.getLocalSiteId());
  mPostUploadNotifier.cancelNotification(postToCancel);
  if (mUploadStore.isPendingPost(postToCancel) || mUploadStore.isCancelledPost(postToCancel)) {
    String message=UploadUtils.getErrorMessage(this,postToCancel,errorMessage,true);
    mPostUploadNotifier.updateNotificationError(postToCancel,site,message);
  }
  mPostUploadHandler.unregisterPostForAnalyticsTracking(postToCancel);
  EventBus.getDefault().post(new PostEvents.PostUploadCanceled(postToCancel.getLocalSiteId()));
}","private void cancelPostUploadMatchingMedia(@NonNull MediaModel media,String errorMessage){
  PostModel postToCancel=mPostStore.getPostByLocalPostId(media.getLocalPostId());
  if (postToCancel == null)   return;
  SiteModel site=mSiteStore.getSiteByLocalId(postToCancel.getLocalSiteId());
  mPostUploadNotifier.cancelNotification(postToCancel);
  if (!mUploadStore.isPendingPost(postToCancel) && !mUploadStore.isCancelledPost(postToCancel)) {
    String message=UploadUtils.getErrorMessage(this,postToCancel,errorMessage,true);
    mPostUploadNotifier.updateNotificationError(postToCancel,site,message);
  }
  mPostUploadHandler.unregisterPostForAnalyticsTracking(postToCancel);
  EventBus.getDefault().post(new PostEvents.PostUploadCanceled(postToCancel.getLocalSiteId()));
}",0.9418604651162792
13739,"private static void openWPCOMURL(Activity activity,String url,Theme currentTheme,SiteModel site,Boolean isCurrentTheme){
  if (activity == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    ToastUtils.showToast(activity,R.string.invalid_site_url_message,ToastUtils.Duration.SHORT);
    return;
  }
  String authURL=ThemeWebActivity.getSiteLoginUrl(site);
  Intent intent=new Intent(activity,ThemeWebActivity.class);
  intent.putExtra(WPWebViewActivity.URL_TO_LOAD,url);
  intent.putExtra(WPWebViewActivity.AUTHENTICATION_URL,authURL);
  intent.putExtra(WPWebViewActivity.LOCAL_BLOG_ID,site.getId());
  intent.putExtra(WPWebViewActivity.USE_GLOBAL_WPCOM_USER,true);
  intent.putExtra(IS_PREMIUM_THEME,currentTheme.isPremium());
  intent.putExtra(IS_CURRENT_THEME,isCurrentTheme);
  intent.putExtra(THEME_NAME,currentTheme.getName());
  intent.putExtra(ThemeBrowserActivity.THEME_ID,currentTheme.getId());
  activity.startActivityForResult(intent,ThemeBrowserActivity.ACTIVATE_THEME);
}","private static void openWPCOMURL(Activity activity,String url,ThemeModel currentTheme,SiteModel site,Boolean isCurrentTheme){
  if (activity == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    ToastUtils.showToast(activity,R.string.invalid_site_url_message,ToastUtils.Duration.SHORT);
    return;
  }
  String authURL=ThemeWebActivity.getSiteLoginUrl(site);
  Intent intent=new Intent(activity,ThemeWebActivity.class);
  intent.putExtra(WPWebViewActivity.URL_TO_LOAD,url);
  intent.putExtra(WPWebViewActivity.AUTHENTICATION_URL,authURL);
  intent.putExtra(WPWebViewActivity.LOCAL_BLOG_ID,site.getId());
  intent.putExtra(WPWebViewActivity.USE_GLOBAL_WPCOM_USER,true);
  intent.putExtra(IS_CURRENT_THEME,isCurrentTheme);
  intent.putExtra(THEME_NAME,currentTheme.getName());
  intent.putExtra(ThemeBrowserActivity.THEME_ID,currentTheme.getId());
  activity.startActivityForResult(intent,ThemeBrowserActivity.ACTIVATE_THEME);
}",0.9684111268269684
13740,"private static void requestAndOpenCurrentTheme(final Activity activity,final SiteModel site){
  WordPress.getRestClientUtilsV1_1().getCurrentTheme(site.getSiteId(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      try {
        Theme currentTheme=Theme.fromJSONV1_1(response,site);
        if (currentTheme != null) {
          currentTheme.setIsCurrent(true);
          ThemeTable.saveTheme(WordPress.wpDB.getDatabase(),currentTheme);
          ThemeTable.setCurrentTheme(WordPress.wpDB.getDatabase(),String.valueOf(site.getSiteId()),currentTheme.getId());
          openTheme(activity,site,currentTheme.getId(),ThemeWebActivityType.PREVIEW,true);
        }
      }
 catch (      JSONException e) {
        ToastUtils.showToast(activity,R.string.could_not_load_theme);
        AppLog.e(AppLog.T.THEMES,e);
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.e(AppLog.T.THEMES,error);
    }
  }
);
}","private static void requestAndOpenCurrentTheme(final Activity activity,final SiteModel site){
  openTheme(activity,site,null,ThemeWebActivityType.PREVIEW,true);
}",0.2679022746419545
13741,"public static String getUrl(SiteModel site,Theme theme,ThemeWebActivityType type,boolean isPremium){
  String url=""String_Node_Str"";
  String homeURL=site.getUrl();
  String domain=isPremium ? THEME_DOMAIN_PREMIUM : THEME_DOMAIN_PUBLIC;
switch (type) {
case PREVIEW:
    url=String.format(THEME_URL_PREVIEW,homeURL,domain,theme.getId());
  break;
case DEMO:
url=theme.getDemoURI();
if (url.contains(""String_Node_Str"")) {
url=url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
 else {
url=url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
break;
case DETAILS:
String currentURL=homeURL.replaceFirst(THEME_HTTPS_PREFIX,""String_Node_Str"");
url=String.format(THEME_URL_DETAILS,currentURL,theme.getId());
break;
case SUPPORT:
url=String.format(THEME_URL_SUPPORT,theme.getId());
break;
default :
break;
}
return url;
}","public static String getUrl(SiteModel site,ThemeModel theme,ThemeWebActivityType type,boolean isPremium){
  String url=""String_Node_Str"";
  String homeURL=site.getUrl();
  String domain=isPremium ? THEME_DOMAIN_PREMIUM : THEME_DOMAIN_PUBLIC;
switch (type) {
case PREVIEW:
    url=String.format(THEME_URL_PREVIEW,homeURL,domain,theme.getId());
  break;
case DEMO:
url=theme.getDemoUrl();
if (url.contains(""String_Node_Str"")) {
url=url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
 else {
url=url + ""String_Node_Str"" + THEME_URL_DEMO_PARAMETER;
}
break;
case DETAILS:
String currentURL=homeURL.replaceFirst(THEME_HTTPS_PREFIX,""String_Node_Str"");
url=String.format(THEME_URL_DETAILS,currentURL,theme.getId());
break;
case SUPPORT:
url=String.format(THEME_URL_SUPPORT,theme.getId());
break;
default :
break;
}
return url;
}",0.9945222154595252
13742,"public static void openTheme(Activity activity,SiteModel site,String themeId,ThemeWebActivityType type,boolean isCurrentTheme){
  Theme currentTheme=ThemeTable.getTheme(WordPress.wpDB.getDatabase(),String.valueOf(site.getSiteId()),themeId);
  if (currentTheme == null) {
    ToastUtils.showToast(activity,R.string.could_not_load_theme);
    return;
  }
  String url=getUrl(site,currentTheme,type,currentTheme.isPremium());
  if (type == ThemeWebActivityType.PREVIEW) {
    ActivityLauncher.openUrlExternal(activity,url);
  }
 else {
    openWPCOMURL(activity,url,currentTheme,site,isCurrentTheme);
  }
}","public static void openTheme(Activity activity,SiteModel site,String themeId,ThemeWebActivityType type,boolean isCurrentTheme){
  ThemeModel currentTheme=null;
  if (currentTheme == null) {
    ToastUtils.showToast(activity,R.string.could_not_load_theme);
    return;
  }
  String url=getUrl(site,currentTheme,type,false);
  if (type == ThemeWebActivityType.PREVIEW) {
    ActivityLauncher.openUrlExternal(activity,url);
  }
 else {
    openWPCOMURL(activity,url,currentTheme,site,isCurrentTheme);
  }
}",0.7631103074141049
13743,"public static void openCurrentTheme(Activity activity,SiteModel site,ThemeWebActivityType type){
  String themeId=ThemeTable.getCurrentThemeId(WordPress.wpDB.getDatabase(),String.valueOf(site.getSiteId()));
  if (themeId.isEmpty()) {
    requestAndOpenCurrentTheme(activity,site);
  }
 else {
    openTheme(activity,site,themeId,type,true);
  }
}","public static void openCurrentTheme(Activity activity,SiteModel site,ThemeWebActivityType type){
  String themeId=""String_Node_Str"";
  if (themeId.isEmpty()) {
    requestAndOpenCurrentTheme(activity,site);
  }
 else {
    openTheme(activity,site,themeId,type,true);
  }
}",0.4174757281553398
13744,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_activate) {
    Intent returnIntent=new Intent();
    setResult(RESULT_OK,returnIntent);
    returnIntent.putExtra(ThemeBrowserActivity.THEME_ID,getIntent().getStringExtra(ThemeBrowserActivity.THEME_ID));
    finish();
    return true;
  }
 else {
    return super.onOptionsItemSelected(item);
  }
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_activate) {
    Intent returnIntent=new Intent();
    setResult(RESULT_OK,returnIntent);
    returnIntent.putExtra(ThemeBrowserActivity.THEME_ID,getIntent().getStringExtra(ThemeBrowserActivity.THEME_ID));
    finish();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9821882951653944
13745,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  final SiteModel site;
  if (savedInstanceState == null) {
    site=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    site=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  if (site == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(site)));
  }
  FragmentManager fragmentManager=getFragmentManager();
  Fragment siteSettingsFragment=fragmentManager.findFragmentByTag(KEY_SETTINGS_FRAGMENT);
  if (siteSettingsFragment == null) {
    siteSettingsFragment=new SiteSettingsFragment();
    siteSettingsFragment.setArguments(getIntent().getExtras());
    fragmentManager.beginTransaction().replace(android.R.id.content,siteSettingsFragment,KEY_SETTINGS_FRAGMENT).commit();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  }
  FragmentManager fragmentManager=getFragmentManager();
  Fragment siteSettingsFragment=fragmentManager.findFragmentByTag(KEY_SETTINGS_FRAGMENT);
  if (siteSettingsFragment == null) {
    siteSettingsFragment=new SiteSettingsFragment();
    siteSettingsFragment.setArguments(getIntent().getExtras());
    fragmentManager.beginTransaction().replace(android.R.id.content,siteSettingsFragment,KEY_SETTINGS_FRAGMENT).commit();
  }
}",0.9838709677419356
13746,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.theme_browser_activity);
  if (savedInstanceState == null) {
    AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.THEMES_ACCESSED_THEMES_BROWSER,mSite);
    mThemeBrowserFragment=ThemeBrowserFragment.newInstance(mSite);
    mThemeSearchFragment=ThemeSearchFragment.newInstance(mSite);
    addBrowserFragment();
  }
  setCurrentThemeFromDB();
  showToolbar();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.theme_browser_activity);
  if (savedInstanceState == null) {
    AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.THEMES_ACCESSED_THEMES_BROWSER,mSite);
    mThemeBrowserFragment=ThemeBrowserFragment.newInstance(mSite);
    mThemeSearchFragment=ThemeSearchFragment.newInstance(mSite);
    addBrowserFragment();
  }
  showToolbar();
}",0.984958217270195
13747,"@Override protected void onResume(){
  super.onResume();
  showCorrectToolbar();
  mIsRunning=true;
  ActivityId.trackLastActivity(ActivityId.THEMES);
  fetchThemesIfNoneAvailable();
  fetchPurchasedThemes();
}","@Override protected void onResume(){
  super.onResume();
  showCorrectToolbar();
  mIsRunning=true;
  ActivityId.trackLastActivity(ActivityId.THEMES);
  fetchThemesIfNoneAvailable();
}",0.934010152284264
13748,"@Override public void onRestoreInstanceState(Parcelable state){
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    PrefListItems items=(PrefListItems)bundle.getSerializable(KEY_LIST_ITEMS);
    setListItems(items);
    state=bundle.getParcelable(KEY_SUPER_STATE);
  }
  super.onRestoreInstanceState(state);
}","@Override public void onRestoreInstanceState(Parcelable state){
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    PrefListItemsWrapper listWrapper=(PrefListItemsWrapper)bundle.getSerializable(KEY_LIST_ITEMS);
    if (listWrapper != null) {
      PrefListItems items=listWrapper.getList();
      setListItems(items);
    }
    state=bundle.getParcelable(KEY_SUPER_STATE);
  }
  super.onRestoreInstanceState(state);
}",0.7900262467191601
13749,"@Override public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putSerializable(KEY_LIST_ITEMS,mListItems);
  bundle.putParcelable(KEY_SUPER_STATE,super.onSaveInstanceState());
  return bundle;
}","@Override public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putSerializable(KEY_LIST_ITEMS,new PrefListItemsWrapper(mListItems));
  bundle.putParcelable(KEY_SUPER_STATE,super.onSaveInstanceState());
  return bundle;
}",0.9444444444444444
13750,"/** 
 * Initialize the image width SeekBar and accompanying EditText
 */
private void setupWidthSeekBar(final SeekBar widthSeekBar,final EditText widthText,int imageWidth){
  widthSeekBar.setMax(mMaxImageWidth / 10);
  if (imageWidth != 0) {
    widthSeekBar.setProgress(imageWidth / 10);
    widthText.setText(String.valueOf(imageWidth) + ""String_Node_Str"");
  }
  widthSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (progress == 0) {
        progress=1;
      }
      widthText.setText(progress * 10 + ""String_Node_Str"");
    }
  }
);
  widthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        widthText.setText(""String_Node_Str"");
      }
    }
  }
);
  widthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
      widthSeekBar.setProgress(width / 10);
      widthText.setSelection((String.valueOf(width).length()));
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
      return true;
    }
  }
);
}","/** 
 * Initialize the image width SeekBar and accompanying EditText
 */
private void setupWidthSeekBar(final SeekBar widthSeekBar,final EditText widthText,int imageWidth){
  widthSeekBar.setMax(mMaxImageWidth / 10);
  if (imageWidth != 0) {
    widthSeekBar.setProgress(imageWidth / 10);
    widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),imageWidth));
  }
  widthSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (progress == 0) {
        progress=1;
      }
      widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
    }
  }
);
  widthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        widthText.setText(""String_Node_Str"");
      }
    }
  }
);
  widthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
      int progress=width / 10;
      if (widthSeekBar.getProgress() == progress) {
        widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
      }
 else {
        widthSeekBar.setProgress(progress);
      }
      widthText.setSelection((String.valueOf(width).length()));
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
      return true;
    }
  }
);
}",0.8850542721959366
13751,"@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (progress == 0) {
    progress=1;
  }
  widthText.setText(progress * 10 + ""String_Node_Str"");
}","@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (progress == 0) {
    progress=1;
  }
  widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
}",0.8115942028985508
13752,"@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
  widthSeekBar.setProgress(width / 10);
  widthText.setSelection((String.valueOf(width).length()));
  InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
  return true;
}","@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
  int progress=width / 10;
  if (widthSeekBar.getProgress() == progress) {
    widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
  }
 else {
    widthSeekBar.setProgress(progress);
  }
  widthText.setSelection((String.valueOf(width).length()));
  InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
  return true;
}",0.8190644307149162
13753,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_aztec_editor,container,false);
  loadingImagePlaceholder=getResources().getDrawable(R.drawable.ic_gridicons_video_camera);
  loadingImagePlaceholder.setBounds(0,0,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
  loadingVideoPlaceholder=getResources().getDrawable(R.drawable.ic_gridicons_image);
  loadingVideoPlaceholder.setBounds(0,0,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
  if (getActivity() instanceof EditorFragmentActivity) {
    ((EditorFragmentActivity)getActivity()).initializeEditorFragment();
  }
  mUploadingMediaProgressMax=new HashMap<>();
  mFailedMediaIds=new HashSet<>();
  title=(AztecText)view.findViewById(R.id.title);
  content=(AztecText)view.findViewById(R.id.aztec);
  source=(SourceViewEditText)view.findViewById(R.id.source);
  source.setHint(""String_Node_Str"" + getString(R.string.editor_content_hint) + ""String_Node_Str"");
  formattingToolbar=(AztecToolbar)view.findViewById(R.id.formatting_toolbar);
  formattingToolbar.setExpanded(mIsToolbarExpanded);
  title.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      formattingToolbar.enableFormatButtons(!hasFocus);
    }
  }
);
  content.setOnDragListener(mOnDragListener);
  source.setOnDragListener(mOnDragListener);
  setHasOptionsMenu(true);
  invalidateOptionsHandler=new Handler();
  invalidateOptionsRunnable=new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        getActivity().invalidateOptionsMenu();
      }
    }
  }
;
  content.refreshText();
  mAztecReady=true;
  AppCompatTextView titleBeta=(AppCompatTextView)view.findViewById(R.id.title_beta);
  titleBeta.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mEditorBetaClickListener.onBetaClicked();
    }
  }
);
  Aztec.Factory.with(content,source,formattingToolbar,this).setImageGetter(aztecImageLoader).setVideoThumbnailGetter(aztecVideoLoader).setOnImeBackListener(this).setHistoryListener(this).setOnImageTappedListener(this).setOnVideoTappedListener(this).setOnMediaDeletedListener(this).addPlugin(new WordPressCommentsPlugin(content)).addPlugin(new MoreToolbarButton(content)).addPlugin(new CaptionShortcodePlugin()).addPlugin(new VideoShortcodePlugin()).addPlugin(new AudioShortcodePlugin());
  new BlockElementWatcher(content).add(new CaptionHandler()).install(content);
  mEditorFragmentListener.onEditorFragmentInitialized();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_aztec_editor,container,false);
  loadingImagePlaceholder=getResources().getDrawable(R.drawable.ic_gridicons_image);
  loadingImagePlaceholder.setBounds(0,0,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
  loadingVideoPlaceholder=getResources().getDrawable(R.drawable.ic_gridicons_video_camera);
  loadingVideoPlaceholder.setBounds(0,0,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
  if (getActivity() instanceof EditorFragmentActivity) {
    ((EditorFragmentActivity)getActivity()).initializeEditorFragment();
  }
  mUploadingMediaProgressMax=new HashMap<>();
  mFailedMediaIds=new HashSet<>();
  title=(AztecText)view.findViewById(R.id.title);
  content=(AztecText)view.findViewById(R.id.aztec);
  source=(SourceViewEditText)view.findViewById(R.id.source);
  source.setHint(""String_Node_Str"" + getString(R.string.editor_content_hint) + ""String_Node_Str"");
  formattingToolbar=(AztecToolbar)view.findViewById(R.id.formatting_toolbar);
  formattingToolbar.setExpanded(mIsToolbarExpanded);
  title.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      formattingToolbar.enableFormatButtons(!hasFocus);
    }
  }
);
  content.setOnDragListener(mOnDragListener);
  source.setOnDragListener(mOnDragListener);
  setHasOptionsMenu(true);
  invalidateOptionsHandler=new Handler();
  invalidateOptionsRunnable=new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        getActivity().invalidateOptionsMenu();
      }
    }
  }
;
  content.refreshText();
  mAztecReady=true;
  AppCompatTextView titleBeta=(AppCompatTextView)view.findViewById(R.id.title_beta);
  titleBeta.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mEditorBetaClickListener.onBetaClicked();
    }
  }
);
  Aztec.Factory.with(content,source,formattingToolbar,this).setImageGetter(aztecImageLoader).setVideoThumbnailGetter(aztecVideoLoader).setOnImeBackListener(this).setHistoryListener(this).setOnImageTappedListener(this).setOnVideoTappedListener(this).setOnMediaDeletedListener(this).addPlugin(new WordPressCommentsPlugin(content)).addPlugin(new MoreToolbarButton(content)).addPlugin(new CaptionShortcodePlugin()).addPlugin(new VideoShortcodePlugin()).addPlugin(new AudioShortcodePlugin());
  new BlockElementWatcher(content).add(new CaptionHandler()).install(content);
  mEditorFragmentListener.onEditorFragmentInitialized();
  return view;
}",0.9936779471922648
13754,"/** 
 * Initialize the image width SeekBar and accompanying EditText
 */
private void setupWidthSeekBar(final SeekBar widthSeekBar,final EditText widthText,int imageWidth){
  widthSeekBar.setMax(mMaxImageWidth / 10);
  if (imageWidth != 0) {
    widthSeekBar.setProgress(imageWidth / 10);
    widthText.setText(String.valueOf(imageWidth) + ""String_Node_Str"");
  }
  widthSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (progress == 0) {
        progress=1;
      }
      widthText.setText(progress * 10 + ""String_Node_Str"");
    }
  }
);
  widthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        widthText.setText(""String_Node_Str"");
      }
    }
  }
);
  widthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
      widthSeekBar.setProgress(width / 10);
      widthText.setSelection((String.valueOf(width).length()));
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
      return true;
    }
  }
);
}","/** 
 * Initialize the image width SeekBar and accompanying EditText
 */
private void setupWidthSeekBar(final SeekBar widthSeekBar,final EditText widthText,int imageWidth){
  widthSeekBar.setMax(mMaxImageWidth / 10);
  if (imageWidth != 0) {
    widthSeekBar.setProgress(imageWidth / 10);
    widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),imageWidth));
  }
  widthSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (progress == 0) {
        progress=1;
      }
      widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
    }
  }
);
  widthText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        widthText.setText(""String_Node_Str"");
      }
    }
  }
);
  widthText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
      int progress=width / 10;
      if (widthSeekBar.getProgress() == progress) {
        widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
      }
 else {
        widthSeekBar.setProgress(progress);
      }
      widthText.setSelection((String.valueOf(width).length()));
      InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
      return true;
    }
  }
);
}",0.8850542721959366
13755,"@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (progress == 0) {
    progress=1;
  }
  widthText.setText(progress * 10 + ""String_Node_Str"");
}","@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (progress == 0) {
    progress=1;
  }
  widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
}",0.8115942028985508
13756,"@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
  widthSeekBar.setProgress(width / 10);
  widthText.setSelection((String.valueOf(width).length()));
  InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
  return true;
}","@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  int width=getEditTextIntegerClamped(widthText,10,mMaxImageWidth);
  int progress=width / 10;
  if (widthSeekBar.getProgress() == progress) {
    widthText.setText(String.format(Locale.US,getString(R.string.pixel_suffix),progress * 10));
  }
 else {
    widthSeekBar.setProgress(progress);
  }
  widthText.setSelection((String.valueOf(width).length()));
  InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(widthText.getWindowToken(),InputMethodManager.RESULT_UNCHANGED_SHOWN);
  return true;
}",0.8190644307149162
13757,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.media_settings_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeAsUpIndicator(R.drawable.ic_close_white_24dp);
    actionBar.setTitle(R.string.media);
    actionBar.setShowHideAnimationEnabled(true);
    makeStatusAndToolbarTransparent();
  }
  mImageView=(ImageView)findViewById(R.id.image_preview);
  mTitleView=(EditText)findViewById(R.id.edit_title);
  mCaptionView=(EditText)findViewById(R.id.edit_caption);
  mAltTextView=(EditText)findViewById(R.id.edit_alt_text);
  mDescriptionView=(EditText)findViewById(R.id.edit_description);
  mFabView=(FloatingActionButton)findViewById(R.id.fab_button);
  int mediaId;
  if (savedInstanceState != null) {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    mediaId=savedInstanceState.getInt(ARG_MEDIA_LOCAL_ID);
  }
 else {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    mediaId=getIntent().getIntExtra(ARG_MEDIA_LOCAL_ID,0);
  }
  mMedia=mMediaStore.getMediaWithLocalId(mediaId);
  if (mMedia == null) {
    delayedFinishWithError();
    return;
  }
  int displayHeight=DisplayUtils.getDisplayPixelHeight(this);
  int imageHeight=(int)(displayHeight * 0.4);
  mImageView.getLayoutParams().height=imageHeight;
  if (shouldShowFab()) {
    int fabHeight=DisplayUtils.dpToPx(this,56);
    ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)mFabView.getLayoutParams();
    int topMargin=imageHeight - (fabHeight / 2);
    int rightMargin=getResources().getDimensionPixelSize(R.dimen.fab_margin);
    params.setMargins(0,topMargin,rightMargin,0);
  }
  int toolbarHeight=DisplayUtils.getActionBarHeight(this);
  ImageView imgGradient=(ImageView)findViewById(R.id.image_gradient);
  imgGradient.getLayoutParams().height=toolbarHeight * 3;
  ImageView imgPlayVideo=(ImageView)findViewById(R.id.image_play_video);
  imgPlayVideo.setVisibility(mMedia.isVideo() ? View.VISIBLE : View.GONE);
  findViewById(R.id.edit_alt_text_layout).setVisibility(mMedia.isVideo() ? View.GONE : View.VISIBLE);
  View.OnClickListener listener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      showFullScreen();
    }
  }
;
  mFabView.setOnClickListener(listener);
  mImageView.setOnClickListener(listener);
  imgPlayVideo.setOnClickListener(listener);
  showMediaMetaData();
  loadImage();
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.media_settings_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeAsUpIndicator(R.drawable.ic_close_white_24dp);
    actionBar.setTitle(R.string.media);
    makeStatusAndToolbarTransparent();
    actionBar.setShowHideAnimationEnabled(true);
  }
  mImageView=(ImageView)findViewById(R.id.image_preview);
  mTitleView=(EditText)findViewById(R.id.edit_title);
  mCaptionView=(EditText)findViewById(R.id.edit_caption);
  mAltTextView=(EditText)findViewById(R.id.edit_alt_text);
  mDescriptionView=(EditText)findViewById(R.id.edit_description);
  mFabView=(FloatingActionButton)findViewById(R.id.fab_button);
  int mediaId;
  if (savedInstanceState != null) {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    mediaId=savedInstanceState.getInt(ARG_MEDIA_LOCAL_ID);
  }
 else {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    mediaId=getIntent().getIntExtra(ARG_MEDIA_LOCAL_ID,0);
  }
  mMedia=mMediaStore.getMediaWithLocalId(mediaId);
  if (mMedia == null) {
    delayedFinishWithError();
    return;
  }
  int displayHeight=DisplayUtils.getDisplayPixelHeight(this);
  int imageHeight=(int)(displayHeight * 0.4);
  mImageView.getLayoutParams().height=imageHeight;
  if (shouldShowFab()) {
    int fabHeight=DisplayUtils.dpToPx(this,56);
    ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)mFabView.getLayoutParams();
    int topMargin=imageHeight - (fabHeight / 2);
    int rightMargin=getResources().getDimensionPixelSize(R.dimen.fab_margin);
    params.setMargins(0,topMargin,rightMargin,0);
  }
  int toolbarHeight=DisplayUtils.getActionBarHeight(this);
  ImageView imgGradient=(ImageView)findViewById(R.id.image_gradient);
  imgGradient.getLayoutParams().height=toolbarHeight * 3;
  ImageView imgPlayVideo=(ImageView)findViewById(R.id.image_play_video);
  imgPlayVideo.setVisibility(mMedia.isVideo() ? View.VISIBLE : View.GONE);
  findViewById(R.id.edit_alt_text_layout).setVisibility(mMedia.isVideo() ? View.GONE : View.VISIBLE);
  View.OnClickListener listener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      showFullScreen();
    }
  }
;
  mFabView.setOnClickListener(listener);
  mImageView.setOnClickListener(listener);
  imgPlayVideo.setOnClickListener(listener);
  showMediaMetaData();
  loadImage();
}",0.9853107344632768
13758,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(ARG_MEDIA_CONTENT_URI,mContentUri);
  outState.putBoolean(ARG_IS_VIDEO,mIsVideo);
  if (mSite != null) {
    outState.putSerializable(WordPress.SITE,mSite);
  }
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(ARG_MEDIA_CONTENT_URI,mContentUri);
  outState.putBoolean(ARG_IS_VIDEO,mIsVideo);
  outState.putBoolean(ARG_IS_AUDIO,mIsAudio);
  if (mSite != null) {
    outState.putSerializable(WordPress.SITE,mSite);
  }
}",0.9253246753246752
13759,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.media_settings_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeAsUpIndicator(R.drawable.ic_close_white_24dp);
    actionBar.setTitle(R.string.media);
    makeStatusAndToolbarTransparent();
    actionBar.setShowHideAnimationEnabled(true);
  }
  mImageView=(ImageView)findViewById(R.id.image_preview);
  mTitleView=(EditText)findViewById(R.id.edit_title);
  mCaptionView=(EditText)findViewById(R.id.edit_caption);
  mAltTextView=(EditText)findViewById(R.id.edit_alt_text);
  mDescriptionView=(EditText)findViewById(R.id.edit_description);
  mFabView=(FloatingActionButton)findViewById(R.id.fab_button);
  int mediaId;
  if (savedInstanceState != null) {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    mediaId=savedInstanceState.getInt(ARG_MEDIA_LOCAL_ID);
  }
 else {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    mediaId=getIntent().getIntExtra(ARG_MEDIA_LOCAL_ID,0);
  }
  mMedia=mMediaStore.getMediaWithLocalId(mediaId);
  if (mMedia == null) {
    delayedFinishWithError();
    return;
  }
  int displayHeight=DisplayUtils.getDisplayPixelHeight(this);
  int imageHeight=(int)(displayHeight * 0.4);
  mImageView.getLayoutParams().height=imageHeight;
  if (shouldShowFab()) {
    int fabHeight=DisplayUtils.dpToPx(this,56);
    ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)mFabView.getLayoutParams();
    int topMargin=imageHeight - (fabHeight / 2);
    int rightMargin=getResources().getDimensionPixelSize(R.dimen.fab_margin);
    params.setMargins(0,topMargin,rightMargin,0);
  }
  int toolbarHeight=DisplayUtils.getActionBarHeight(this);
  ImageView imgGradient=(ImageView)findViewById(R.id.image_gradient);
  imgGradient.getLayoutParams().height=toolbarHeight * 3;
  ImageView imgPlayVideo=(ImageView)findViewById(R.id.image_play_video);
  imgPlayVideo.setVisibility(mMedia.isVideo() ? View.VISIBLE : View.GONE);
  findViewById(R.id.edit_alt_text_layout).setVisibility(mMedia.isVideo() ? View.GONE : View.VISIBLE);
  View.OnClickListener listener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      showFullScreen();
    }
  }
;
  mFabView.setOnClickListener(listener);
  mImageView.setOnClickListener(listener);
  imgPlayVideo.setOnClickListener(listener);
  showMediaMetaData();
  loadImage();
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.media_settings_activity);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeAsUpIndicator(R.drawable.ic_close_white_24dp);
    actionBar.setTitle(R.string.media);
    actionBar.setShowHideAnimationEnabled(true);
    makeStatusAndToolbarTransparent();
  }
  mImageView=(ImageView)findViewById(R.id.image_preview);
  mTitleView=(EditText)findViewById(R.id.edit_title);
  mCaptionView=(EditText)findViewById(R.id.edit_caption);
  mAltTextView=(EditText)findViewById(R.id.edit_alt_text);
  mDescriptionView=(EditText)findViewById(R.id.edit_description);
  mFabView=(FloatingActionButton)findViewById(R.id.fab_button);
  int mediaId;
  if (savedInstanceState != null) {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    mediaId=savedInstanceState.getInt(ARG_MEDIA_LOCAL_ID);
  }
 else {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    mediaId=getIntent().getIntExtra(ARG_MEDIA_LOCAL_ID,0);
  }
  mMedia=mMediaStore.getMediaWithLocalId(mediaId);
  if (mMedia == null) {
    delayedFinishWithError();
    return;
  }
  int displayHeight=DisplayUtils.getDisplayPixelHeight(this);
  int imageHeight=(int)(displayHeight * 0.4);
  mImageView.getLayoutParams().height=imageHeight;
  if (shouldShowFab()) {
    int fabHeight=DisplayUtils.dpToPx(this,56);
    ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)mFabView.getLayoutParams();
    int topMargin=imageHeight - (fabHeight / 2);
    int rightMargin=getResources().getDimensionPixelSize(R.dimen.fab_margin);
    params.setMargins(0,topMargin,rightMargin,0);
  }
  int toolbarHeight=DisplayUtils.getActionBarHeight(this);
  ImageView imgGradient=(ImageView)findViewById(R.id.image_gradient);
  imgGradient.getLayoutParams().height=toolbarHeight * 3;
  ImageView imgPlayVideo=(ImageView)findViewById(R.id.image_play_video);
  imgPlayVideo.setVisibility(mMedia.isVideo() ? View.VISIBLE : View.GONE);
  findViewById(R.id.edit_alt_text_layout).setVisibility(mMedia.isVideo() ? View.GONE : View.VISIBLE);
  View.OnClickListener listener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      showFullScreen();
    }
  }
;
  mFabView.setOnClickListener(listener);
  mImageView.setOnClickListener(listener);
  imgPlayVideo.setOnClickListener(listener);
  showMediaMetaData();
  loadImage();
}",0.9815442561205272
13760,"private void publishPost(){
  AccountModel account=mAccountStore.getAccount();
  if (!account.getEmailVerified()) {
    String message=TextUtils.isEmpty(account.getEmail()) ? getString(R.string.editor_confirm_email_prompt_message) : String.format(getString(R.string.editor_confirm_email_prompt_message_with_email),account.getEmail());
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setTitle(R.string.editor_confirm_email_prompt_title).setMessage(message).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        ToastUtils.showToast(EditPostActivity.this,getString(R.string.toast_saving_post_as_draft));
        savePostAndFinish();
      }
    }
).setNegativeButton(R.string.editor_confirm_email_prompt_negative,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mDispatcher.dispatch(AccountActionBuilder.newSendVerificationEmailAction());
      }
    }
);
    builder.create().show();
    return;
  }
  boolean postUpdateSuccessful=updatePostObject();
  if (!postUpdateSuccessful) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      boolean isFirstTimePublish=isFirstTimePublish();
      boolean postUpdateSuccessful=updatePostObject();
      if (!postUpdateSuccessful) {
        return;
      }
      boolean isPublishable=PostUtils.isPublishable(mPost);
      saveResult(isPublishable,false);
      if (isPublishable) {
        if (NetworkUtils.isNetworkAvailable(getBaseContext())) {
          if (mEditorFragment.hasFailedMediaUploads()) {
            EditPostActivity.this.runOnUiThread(new Runnable(){
              @Override public void run(){
                showRemoveFailedUploadsDialog();
              }
            }
);
          }
 else {
            savePostOnlineAndFinishAsync(isFirstTimePublish);
          }
        }
 else {
          savePostLocallyAndFinishAsync();
        }
      }
 else {
        EditPostActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            String message=getString(mIsPage ? R.string.error_publish_empty_page_param : R.string.error_publish_empty_post_param);
            ToastUtils.showToast(EditPostActivity.this,message,Duration.SHORT);
          }
        }
);
      }
    }
  }
).start();
}","private void publishPost(){
  AccountModel account=mAccountStore.getAccount();
  if (!account.getEmailVerified()) {
    String message=TextUtils.isEmpty(account.getEmail()) ? getString(R.string.editor_confirm_email_prompt_message) : String.format(getString(R.string.editor_confirm_email_prompt_message_with_email),account.getEmail());
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setTitle(R.string.editor_confirm_email_prompt_title).setMessage(message).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        ToastUtils.showToast(EditPostActivity.this,getString(R.string.toast_saving_post_as_draft));
        savePostAndFinish();
      }
    }
).setNegativeButton(R.string.editor_confirm_email_prompt_negative,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mDispatcher.dispatch(AccountActionBuilder.newSendVerificationEmailAction());
      }
    }
);
    builder.create().show();
    return;
  }
  boolean postUpdateSuccessful=updatePostObject();
  if (!postUpdateSuccessful) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      boolean isFirstTimePublish=isFirstTimePublish();
      boolean postUpdateSuccessful=updatePostObject();
      if (!postUpdateSuccessful) {
        return;
      }
      boolean isPublishable=PostUtils.isPublishable(mPost);
      saveResult(isPublishable,false);
      if (isPublishable) {
        if (NetworkUtils.isNetworkAvailable(getBaseContext())) {
          if (mEditorFragment.hasFailedMediaUploads()) {
            EditPostActivity.this.runOnUiThread(new Runnable(){
              @Override public void run(){
                showRemoveFailedUploadsDialog();
              }
            }
);
          }
 else {
            savePostOnlineAndFinishAsync(isFirstTimePublish);
          }
        }
 else {
          savePostLocallyAndFinishAsync();
        }
      }
 else {
        EditPostActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            String message=getString(mIsPage ? R.string.error_publish_empty_page : R.string.error_publish_empty_post);
            ToastUtils.showToast(EditPostActivity.this,message,Duration.SHORT);
          }
        }
);
      }
    }
  }
).start();
}",0.9975010412328196
13761,"public static void publishPost(Activity activity,final PostModel post,SiteModel site,Dispatcher dispatcher){
  if (!NetworkUtils.isNetworkAvailable(activity)) {
    ToastUtils.showToast(activity,R.string.error_publish_no_network,ToastUtils.Duration.SHORT);
    return;
  }
  if (!PostUtils.isPublishable(post)) {
    String message=activity.getString(post.isPage() ? R.string.error_publish_empty_page_param : R.string.error_publish_empty_post_param);
    ToastUtils.showToast(activity,message,ToastUtils.Duration.SHORT);
    return;
  }
  PostUtils.updatePublishDateIfShouldBePublishedImmediately(post);
  boolean isFirstTimePublish=PostStatus.fromPost(post) == PostStatus.DRAFT || (PostStatus.fromPost(post) == PostStatus.PUBLISHED && post.isLocalDraft());
  post.setStatus(PostStatus.PUBLISHED.toString());
  dispatcher.dispatch(PostActionBuilder.newUpdatePostAction(post));
  if (isFirstTimePublish) {
    UploadService.uploadPostAndTrackAnalytics(activity,post);
  }
 else {
    UploadService.uploadPost(activity,post);
  }
  PostUtils.trackSavePostAnalytics(post,site);
}","public static void publishPost(Activity activity,final PostModel post,SiteModel site,Dispatcher dispatcher){
  if (!NetworkUtils.isNetworkAvailable(activity)) {
    ToastUtils.showToast(activity,R.string.error_publish_no_network,ToastUtils.Duration.SHORT);
    return;
  }
  if (!PostUtils.isPublishable(post)) {
    String message=activity.getString(post.isPage() ? R.string.error_publish_empty_page : R.string.error_publish_empty_post);
    ToastUtils.showToast(activity,message,ToastUtils.Duration.SHORT);
    return;
  }
  PostUtils.updatePublishDateIfShouldBePublishedImmediately(post);
  boolean isFirstTimePublish=PostStatus.fromPost(post) == PostStatus.DRAFT || (PostStatus.fromPost(post) == PostStatus.PUBLISHED && post.isLocalDraft());
  post.setStatus(PostStatus.PUBLISHED.toString());
  dispatcher.dispatch(PostActionBuilder.newUpdatePostAction(post));
  if (isFirstTimePublish) {
    UploadService.uploadPostAndTrackAnalytics(activity,post);
  }
 else {
    UploadService.uploadPost(activity,post);
  }
  PostUtils.trackSavePostAnalytics(post,site);
}",0.9654205607476636
13762,"/** 
 * Returns an error message string for a failed post upload.
 */
public static @NonNull String getErrorMessageFromPostError(Context context,PostModel post,PostError error){
switch (error.type) {
case UNKNOWN_POST:
    return post.isPage() ? context.getString(R.string.error_unknown_page_param) : context.getString(R.string.error_unknown_post_param);
case UNKNOWN_POST_TYPE:
  return context.getString(R.string.error_unknown_post_type);
case UNAUTHORIZED:
return post.isPage() ? context.getString(R.string.error_refresh_unauthorized_pages) : context.getString(R.string.error_refresh_unauthorized_posts);
}
return TextUtils.isEmpty(error.message) ? error.type.toString() : error.message;
}","/** 
 * Returns an error message string for a failed post upload.
 */
public static @NonNull String getErrorMessageFromPostError(Context context,PostModel post,PostError error){
switch (error.type) {
case UNKNOWN_POST:
    return post.isPage() ? context.getString(R.string.error_unknown_page) : context.getString(R.string.error_unknown_post);
case UNKNOWN_POST_TYPE:
  return context.getString(R.string.error_unknown_post_type);
case UNAUTHORIZED:
return post.isPage() ? context.getString(R.string.error_refresh_unauthorized_pages) : context.getString(R.string.error_refresh_unauthorized_posts);
}
return TextUtils.isEmpty(error.message) ? error.type.toString() : error.message;
}",0.9912536443148688
13763,"/** 
 * Returns a post-type specific error message string.
 */
static @NonNull String getErrorMessage(Context context,PostModel post,String errorMessage,boolean isMediaError){
  String baseErrorString;
  if (post.isPage()) {
    if (isMediaError) {
      baseErrorString=context.getString(R.string.error_upload_page_media_params);
    }
 else {
      baseErrorString=context.getString(R.string.error_upload_page_params);
    }
  }
 else {
    if (isMediaError) {
      baseErrorString=context.getString(R.string.error_upload_post_media_params);
    }
 else {
      baseErrorString=context.getString(R.string.error_upload_post_params);
    }
  }
  return String.format(baseErrorString,errorMessage);
}","/** 
 * Returns a post-type specific error message string.
 */
static @NonNull String getErrorMessage(Context context,PostModel post,String errorMessage,boolean isMediaError){
  String baseErrorString;
  if (post.isPage()) {
    if (isMediaError) {
      baseErrorString=context.getString(R.string.error_upload_page_media_param);
    }
 else {
      baseErrorString=context.getString(R.string.error_upload_page_param);
    }
  }
 else {
    if (isMediaError) {
      baseErrorString=context.getString(R.string.error_upload_post_media_param);
    }
 else {
      baseErrorString=context.getString(R.string.error_upload_post_param);
    }
  }
  return String.format(baseErrorString,errorMessage);
}",0.997134670487106
13764,"private void publishPost(){
  AccountModel account=mAccountStore.getAccount();
  if (!account.getEmailVerified()) {
    String message=TextUtils.isEmpty(account.getEmail()) ? getString(R.string.editor_confirm_email_prompt_message) : String.format(getString(R.string.editor_confirm_email_prompt_message_with_email),account.getEmail());
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setTitle(R.string.editor_confirm_email_prompt_title).setMessage(message).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        ToastUtils.showToast(EditPostActivity.this,getString(R.string.toast_saving_post_as_draft));
        savePostAndFinish();
      }
    }
).setNegativeButton(R.string.editor_confirm_email_prompt_negative,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mDispatcher.dispatch(AccountActionBuilder.newSendVerificationEmailAction());
      }
    }
);
    builder.create().show();
    return;
  }
  boolean postUpdateSuccessful=updatePostObject();
  if (!postUpdateSuccessful) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      boolean isFirstTimePublish=isFirstTimePublish();
      boolean postUpdateSuccessful=updatePostObject();
      if (!postUpdateSuccessful) {
        return;
      }
      boolean isPublishable=PostUtils.isPublishable(mPost);
      saveResult(isPublishable,false);
      if (isPublishable) {
        if (NetworkUtils.isNetworkAvailable(getBaseContext())) {
          if (mEditorFragment.hasFailedMediaUploads()) {
            EditPostActivity.this.runOnUiThread(new Runnable(){
              @Override public void run(){
                showRemoveFailedUploadsDialog();
              }
            }
);
          }
 else {
            savePostOnlineAndFinishAsync(isFirstTimePublish);
          }
        }
 else {
          savePostLocallyAndFinishAsync();
        }
      }
 else {
        EditPostActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            String postType=getString(mIsPage ? R.string.page : R.string.post).toLowerCase();
            String message=getString(R.string.error_publish_empty_post_param,postType);
            ToastUtils.showToast(EditPostActivity.this,message,Duration.SHORT);
          }
        }
);
      }
    }
  }
).start();
}","private void publishPost(){
  AccountModel account=mAccountStore.getAccount();
  if (!account.getEmailVerified()) {
    String message=TextUtils.isEmpty(account.getEmail()) ? getString(R.string.editor_confirm_email_prompt_message) : String.format(getString(R.string.editor_confirm_email_prompt_message_with_email),account.getEmail());
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setTitle(R.string.editor_confirm_email_prompt_title).setMessage(message).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        ToastUtils.showToast(EditPostActivity.this,getString(R.string.toast_saving_post_as_draft));
        savePostAndFinish();
      }
    }
).setNegativeButton(R.string.editor_confirm_email_prompt_negative,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mDispatcher.dispatch(AccountActionBuilder.newSendVerificationEmailAction());
      }
    }
);
    builder.create().show();
    return;
  }
  boolean postUpdateSuccessful=updatePostObject();
  if (!postUpdateSuccessful) {
    return;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      boolean isFirstTimePublish=isFirstTimePublish();
      boolean postUpdateSuccessful=updatePostObject();
      if (!postUpdateSuccessful) {
        return;
      }
      boolean isPublishable=PostUtils.isPublishable(mPost);
      saveResult(isPublishable,false);
      if (isPublishable) {
        if (NetworkUtils.isNetworkAvailable(getBaseContext())) {
          if (mEditorFragment.hasFailedMediaUploads()) {
            EditPostActivity.this.runOnUiThread(new Runnable(){
              @Override public void run(){
                showRemoveFailedUploadsDialog();
              }
            }
);
          }
 else {
            savePostOnlineAndFinishAsync(isFirstTimePublish);
          }
        }
 else {
          savePostLocallyAndFinishAsync();
        }
      }
 else {
        EditPostActivity.this.runOnUiThread(new Runnable(){
          @Override public void run(){
            String message=getString(mIsPage ? R.string.error_publish_empty_page_param : R.string.error_publish_empty_post_param);
            ToastUtils.showToast(EditPostActivity.this,message,Duration.SHORT);
          }
        }
);
      }
    }
  }
).start();
}",0.961562178828366
13765,"public static void publishPost(Activity activity,final PostModel post,SiteModel site,Dispatcher dispatcher){
  if (!NetworkUtils.isNetworkAvailable(activity)) {
    ToastUtils.showToast(activity,R.string.error_publish_no_network,ToastUtils.Duration.SHORT);
    return;
  }
  if (!PostUtils.isPublishable(post)) {
    String postType=activity.getString(post.isPage() ? R.string.page : R.string.post).toLowerCase();
    String message=activity.getString(R.string.error_publish_empty_post_param,postType);
    ToastUtils.showToast(activity,message,ToastUtils.Duration.SHORT);
    return;
  }
  PostUtils.updatePublishDateIfShouldBePublishedImmediately(post);
  boolean isFirstTimePublish=PostStatus.fromPost(post) == PostStatus.DRAFT || (PostStatus.fromPost(post) == PostStatus.PUBLISHED && post.isLocalDraft());
  post.setStatus(PostStatus.PUBLISHED.toString());
  dispatcher.dispatch(PostActionBuilder.newUpdatePostAction(post));
  if (isFirstTimePublish) {
    UploadService.uploadPostAndTrackAnalytics(activity,post);
  }
 else {
    UploadService.uploadPost(activity,post);
  }
  PostUtils.trackSavePostAnalytics(post,site);
}","public static void publishPost(Activity activity,final PostModel post,SiteModel site,Dispatcher dispatcher){
  if (!NetworkUtils.isNetworkAvailable(activity)) {
    ToastUtils.showToast(activity,R.string.error_publish_no_network,ToastUtils.Duration.SHORT);
    return;
  }
  if (!PostUtils.isPublishable(post)) {
    String message=activity.getString(post.isPage() ? R.string.error_publish_empty_page_param : R.string.error_publish_empty_post_param);
    ToastUtils.showToast(activity,message,ToastUtils.Duration.SHORT);
    return;
  }
  PostUtils.updatePublishDateIfShouldBePublishedImmediately(post);
  boolean isFirstTimePublish=PostStatus.fromPost(post) == PostStatus.DRAFT || (PostStatus.fromPost(post) == PostStatus.PUBLISHED && post.isLocalDraft());
  post.setStatus(PostStatus.PUBLISHED.toString());
  dispatcher.dispatch(PostActionBuilder.newUpdatePostAction(post));
  if (isFirstTimePublish) {
    UploadService.uploadPostAndTrackAnalytics(activity,post);
  }
 else {
    UploadService.uploadPost(activity,post);
  }
  PostUtils.trackSavePostAnalytics(post,site);
}",0.9473684210526316
13766,"/** 
 * Returns an error message string for a failed post upload.
 */
public static @NonNull String getErrorMessageFromPostError(Context context,PostModel post,PostError error){
switch (error.type) {
case UNKNOWN_POST:
    String postType=context.getString(post.isPage() ? R.string.page : R.string.post).toLowerCase();
  return context.getString(R.string.error_unknown_post_param,postType);
case UNKNOWN_POST_TYPE:
return context.getString(R.string.error_unknown_post_type);
case UNAUTHORIZED:
return post.isPage() ? context.getString(R.string.error_refresh_unauthorized_pages) : context.getString(R.string.error_refresh_unauthorized_posts);
}
return TextUtils.isEmpty(error.message) ? error.type.toString() : error.message;
}","/** 
 * Returns an error message string for a failed post upload.
 */
public static @NonNull String getErrorMessageFromPostError(Context context,PostModel post,PostError error){
switch (error.type) {
case UNKNOWN_POST:
    return post.isPage() ? context.getString(R.string.error_unknown_page_param) : context.getString(R.string.error_unknown_post_param);
case UNKNOWN_POST_TYPE:
  return context.getString(R.string.error_unknown_post_type);
case UNAUTHORIZED:
return post.isPage() ? context.getString(R.string.error_refresh_unauthorized_pages) : context.getString(R.string.error_refresh_unauthorized_posts);
}
return TextUtils.isEmpty(error.message) ? error.type.toString() : error.message;
}",0.8631875881523272
13767,"/** 
 * Returns a post-type specific error message string.
 */
static @NonNull String getErrorMessage(Context context,PostModel post,String errorMessage,boolean isMediaError){
  String baseErrorString=context.getString(isMediaError ? R.string.error_upload_post_media_params : R.string.error_upload_post_params);
  String postType=context.getString(post.isPage() ? R.string.page : R.string.post).toLowerCase();
  return String.format(baseErrorString,postType,errorMessage);
}","/** 
 * Returns a post-type specific error message string.
 */
static @NonNull String getErrorMessage(Context context,PostModel post,String errorMessage,boolean isMediaError){
  String baseErrorString;
  if (post.isPage()) {
    if (isMediaError) {
      baseErrorString=context.getString(R.string.error_upload_page_media_params);
    }
 else {
      baseErrorString=context.getString(R.string.error_upload_page_params);
    }
  }
 else {
    if (isMediaError) {
      baseErrorString=context.getString(R.string.error_upload_post_media_params);
    }
 else {
      baseErrorString=context.getString(R.string.error_upload_post_params);
    }
  }
  return String.format(baseErrorString,errorMessage);
}",0.5996592844974447
13768,"@Override public void onMediaItemSelected(View sourceView,int localMediaId){
  MediaModel media=mMediaStore.getMediaWithLocalId(localMediaId);
  if (media == null) {
    AppLog.w(AppLog.T.MEDIA,""String_Node_Str"" + localMediaId);
    ToastUtils.showToast(this,R.string.error_media_load);
    return;
  }
  if (mBrowserType.isPicker()) {
    Intent intent=new Intent();
    ArrayList<Long> remoteMediaIds=new ArrayList<>();
    remoteMediaIds.add(media.getMediaId());
    intent.putExtra(RESULT_IDS,ListUtils.toLongArray(remoteMediaIds));
    setResult(RESULT_OK,intent);
    finish();
  }
 else {
    String mimeType=StringUtils.notNullStr(media.getMimeType()).toLowerCase();
    if (mimeType.startsWith(""String_Node_Str"") || mimeType.startsWith(""String_Node_Str"")) {
      MediaPreviewActivity.showPreview(this,sourceView,mSite,localMediaId);
    }
  }
}","@Override public void onMediaItemSelected(View sourceView,int localMediaId){
  MediaModel media=mMediaStore.getMediaWithLocalId(localMediaId);
  if (media == null) {
    AppLog.w(AppLog.T.MEDIA,""String_Node_Str"" + localMediaId);
    ToastUtils.showToast(this,R.string.error_media_load);
    return;
  }
  if (mBrowserType.isPicker()) {
    Intent intent=new Intent();
    ArrayList<Long> remoteMediaIds=new ArrayList<>();
    remoteMediaIds.add(media.getMediaId());
    intent.putExtra(RESULT_IDS,ListUtils.toLongArray(remoteMediaIds));
    setResult(RESULT_OK,intent);
    finish();
  }
 else {
    String mimeType=StringUtils.notNullStr(media.getMimeType()).toLowerCase();
    if (mimeType.startsWith(""String_Node_Str"") || mimeType.startsWith(""String_Node_Str"")) {
      if (media.getUploadState() != null && MediaUtils.isLocalFile(media.getUploadState().toLowerCase())) {
        MediaPreviewActivity.showPreview(this,sourceView,media.getFilePath(),mimeType.startsWith(""String_Node_Str""));
      }
 else {
        MediaPreviewActivity.showPreview(this,sourceView,mSite,localMediaId);
      }
    }
  }
}",0.8520408163265306
13769,"private void checkSmartLockPasswordAndStartLogin(){
  if (!mSmartLockCompleted && mSmartLockHelper == null) {
    mSmartLockHelper=new SmartLockHelper(this);
    mSmartLockHelper.initSmartLockForPasswords();
  }
 else {
    startLogin();
  }
}","private void checkSmartLockPasswordAndStartLogin(){
  boolean smartLockStarted=false;
  if (!mSmartLockCompleted && mSmartLockHelper == null) {
    mSmartLockHelper=new SmartLockHelper(this);
    smartLockStarted=mSmartLockHelper.initSmartLockForPasswords();
  }
  if (!smartLockStarted) {
    startLogin();
  }
}",0.8597122302158273
13770,"public void initSmartLockForPasswords(){
  FragmentActivity activity=getActivityAndCheckAvailability();
  if (activity == null) {
    return;
  }
  mCredentialsClient=new GoogleApiClient.Builder(activity).addConnectionCallbacks((ConnectionCallbacks)activity).enableAutoManage(activity,(OnConnectionFailedListener)activity).addApi(Auth.CREDENTIALS_API).build();
}","public boolean initSmartLockForPasswords(){
  FragmentActivity activity=getActivityAndCheckAvailability();
  if (activity == null) {
    return false;
  }
  mCredentialsClient=new GoogleApiClient.Builder(activity).addConnectionCallbacks((ConnectionCallbacks)activity).enableAutoManage(activity,(OnConnectionFailedListener)activity).addApi(Auth.CREDENTIALS_API).build();
  return true;
}",0.9572192513368984
13771,"@Override public void onResponse(ImageLoader.ImageContainer response,boolean isImmediate){
  Bitmap bitmap=response.getBitmap();
  if (bitmap == null) {
    callbacks.onImageLoading(null);
  }
 else {
    BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),bitmap);
    callbacks.onImageLoaded(bitmapDrawable);
  }
}","@Override public void onResponse(ImageLoader.ImageContainer response,boolean isImmediate){
  Bitmap bitmap=response.getBitmap();
  if (bitmap == null && !isImmediate) {
    callbacks.onImageFailed();
  }
 else {
    BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),bitmap);
    callbacks.onImageLoaded(bitmapDrawable);
  }
}",0.5446559297218155
13772,"@Override public void loadImage(String url,final Callbacks callbacks,int maxWidth){
  if (new File(url).exists()) {
    int orientation=ImageUtils.getImageOrientation(this.context,url);
    byte[] bytes=ImageUtils.createThumbnailFromUri(context,Uri.parse(url),maxWidth,null,orientation);
    if (bytes != null) {
      Bitmap bitmap=BitmapFactory.decodeByteArray(bytes,0,bytes.length);
      BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),bitmap);
      callbacks.onImageLoaded(bitmapDrawable);
    }
 else {
      callbacks.onImageFailed();
    }
    return;
  }
  WordPress.sImageLoader.get(url,new ImageLoader.ImageListener(){
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      Bitmap bitmap=response.getBitmap();
      if (bitmap == null) {
        callbacks.onImageLoading(null);
      }
 else {
        BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),bitmap);
        callbacks.onImageLoaded(bitmapDrawable);
      }
    }
    @Override public void onErrorResponse(    VolleyError error){
      callbacks.onImageFailed();
    }
  }
,maxWidth,0);
}","@Override public void loadImage(String url,final Callbacks callbacks,int maxWidth){
  final int maxWidthForEditor=ImageUtils.getMaximumThumbnailWidthForEditor(context);
  if (new File(url).exists()) {
    int orientation=ImageUtils.getImageOrientation(this.context,url);
    byte[] bytes=ImageUtils.createThumbnailFromUri(context,Uri.parse(url),maxWidthForEditor,null,orientation);
    if (bytes != null) {
      Bitmap bitmap=BitmapFactory.decodeByteArray(bytes,0,bytes.length);
      BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),bitmap);
      callbacks.onImageLoaded(bitmapDrawable);
    }
 else {
      callbacks.onImageFailed();
    }
    return;
  }
  Drawable drawable=context.getResources().getDrawable(R.drawable.ic_gridicons_image);
  drawable.setBounds(0,0,AztecEditorFragment.DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,AztecEditorFragment.DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
  callbacks.onImageLoading(drawable);
  WordPress.sImageLoader.get(url,new ImageLoader.ImageListener(){
    @Override public void onResponse(    ImageLoader.ImageContainer response,    boolean isImmediate){
      Bitmap bitmap=response.getBitmap();
      if (bitmap == null && !isImmediate) {
        callbacks.onImageFailed();
      }
 else {
        BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),bitmap);
        callbacks.onImageLoaded(bitmapDrawable);
      }
    }
    @Override public void onErrorResponse(    VolleyError error){
      callbacks.onImageFailed();
    }
  }
,maxWidthForEditor,0);
}",0.849112426035503
13773,"public void loadVideoThumbnail(final String url,final Html.VideoThumbnailGetter.Callbacks callbacks,final int maxWidth){
  if (TextUtils.isEmpty(url) || maxWidth <= 0) {
    callbacks.onThumbnailFailed();
    return;
  }
  new AsyncTask<Void,Void,Bitmap>(){
    protected Bitmap doInBackground(    Void... params){
      callbacks.onThumbnailLoading(null);
      if (new File(url).exists()) {
        Bitmap thumb=ThumbnailUtils.createVideoThumbnail(url,MediaStore.Images.Thumbnails.FULL_SCREEN_KIND);
        return ImageUtils.getScaledBitmapAtLongestSide(thumb,maxWidth);
      }
      return ImageUtils.getVideoFrameFromVideo(url,maxWidth);
    }
    protected void onPostExecute(    Bitmap thumb){
      if (thumb == null) {
        callbacks.onThumbnailFailed();
      }
      BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),thumb);
      callbacks.onThumbnailLoaded(bitmapDrawable);
    }
  }
.execute();
}","public void loadVideoThumbnail(final String url,final Html.VideoThumbnailGetter.Callbacks callbacks,final int maxWidth){
  final int maxWidthForEditor=ImageUtils.getMaximumThumbnailWidthForEditor(context);
  if (TextUtils.isEmpty(url) || maxWidthForEditor <= 0) {
    callbacks.onThumbnailFailed();
    return;
  }
  Drawable drawable=context.getResources().getDrawable(R.drawable.ic_gridicons_video_camera);
  drawable.setBounds(0,0,AztecEditorFragment.DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,AztecEditorFragment.DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
  callbacks.onThumbnailLoading(drawable);
  new AsyncTask<Void,Void,Bitmap>(){
    protected Bitmap doInBackground(    Void... params){
      if (new File(url).exists()) {
        Bitmap thumb=ThumbnailUtils.createVideoThumbnail(url,MediaStore.Images.Thumbnails.FULL_SCREEN_KIND);
        return ImageUtils.getScaledBitmapAtLongestSide(thumb,maxWidthForEditor);
      }
      return ImageUtils.getVideoFrameFromVideo(url,maxWidthForEditor);
    }
    protected void onPostExecute(    Bitmap thumb){
      if (thumb == null) {
        callbacks.onThumbnailFailed();
      }
      BitmapDrawable bitmapDrawable=new BitmapDrawable(context.getResources(),thumb);
      callbacks.onThumbnailLoaded(bitmapDrawable);
    }
  }
.execute();
}",0.8043184885290149
13774,"protected Bitmap doInBackground(Void... params){
  callbacks.onThumbnailLoading(null);
  if (new File(url).exists()) {
    Bitmap thumb=ThumbnailUtils.createVideoThumbnail(url,MediaStore.Images.Thumbnails.FULL_SCREEN_KIND);
    return ImageUtils.getScaledBitmapAtLongestSide(thumb,maxWidth);
  }
  return ImageUtils.getVideoFrameFromVideo(url,maxWidth);
}","protected Bitmap doInBackground(Void... params){
  if (new File(url).exists()) {
    Bitmap thumb=ThumbnailUtils.createVideoThumbnail(url,MediaStore.Images.Thumbnails.FULL_SCREEN_KIND);
    return ImageUtils.getScaledBitmapAtLongestSide(thumb,maxWidthForEditor);
  }
  return ImageUtils.getVideoFrameFromVideo(url,maxWidthForEditor);
}",0.9188405797101448
13775,"@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final int maxWidth=ImageUtils.getMaximumThumbnailWidthForEditor(getActivity());
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    final Drawable placeholder;
    if (mediaFile.isVideo()) {
      placeholder=getResources().getDrawable(R.drawable.ic_gridicons_video_camera);
    }
 else {
      placeholder=getResources().getDrawable(R.drawable.ic_gridicons_image);
    }
    placeholder.setBounds(0,0,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
    AztecAttributes attributes=new AztecAttributes();
    attributes.setValue(ATTR_SRC,mediaUrl);
    setAttributeValuesIfNotDefault(attributes,mediaFile);
    if (mediaFile.isVideo()) {
      content.insertVideo(placeholder,attributes);
    }
 else {
      content.insertImage(placeholder,attributes);
    }
    final String posterURL=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : mediaUrl;
    imageLoader.get(posterURL,new ImageLoader.ImageListener(){
      private void replaceDrawable(      Drawable newDrawable){
        AztecMediaSpan[] imageOrVideoSpans=content.getText().getSpans(0,content.getText().length(),AztecMediaSpan.class);
        for (        AztecMediaSpan currentClass : imageOrVideoSpans) {
          if (currentClass.getAttributes().hasAttribute(ATTR_SRC) && mediaUrl.equals(currentClass.getAttributes().getValue(ATTR_SRC))) {
            currentClass.setDrawable(newDrawable);
          }
        }
        content.refreshText();
      }
      private void showErrorPlaceholder(){
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        replaceDrawable(drawable);
      }
      @Override public void onErrorResponse(      VolleyError error){
        if (!isAdded()) {
          return;
        }
        showErrorPlaceholder();
      }
      @Override public void onResponse(      ImageLoader.ImageContainer container,      boolean isImmediate){
        if (!isAdded()) {
          return;
        }
        Bitmap downloadedBitmap=container.getBitmap();
        if (downloadedBitmap == null) {
          if (isImmediate) {
            return;
          }
          showErrorPlaceholder();
          return;
        }
        AztecAttributes attributes=new AztecAttributes();
        attributes.setValue(ATTR_SRC,mediaUrl);
        setAttributeValuesIfNotDefault(attributes,mediaFile);
        int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
        if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
          ToastUtils.showToast(getActivity(),R.string.error_media_small);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
          replaceDrawable(drawable);
          return;
        }
        Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,maxWidth);
        replaceDrawable(new BitmapDrawable(getResources(),resizedBitmap));
        if (mediaFile.isVideo()) {
          addVideoUploadingClassIfMissing(attributes);
          content.insertVideo(new BitmapDrawable(getResources(),resizedBitmap),attributes);
          overlayVideoIcon(0,new MediaPredicate(mediaUrl,ATTR_SRC));
        }
 else {
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
    }
,maxWidth,0);
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    final String safeMediaPreviewUrl=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : Utils.escapeQuotes(mediaUrl);
    AztecAttributes attrs=new AztecAttributes();
    attrs.setValue(ATTR_ID_WP,localMediaId);
    attrs.setValue(ATTR_SRC,Utils.escapeQuotes(mediaUrl));
    attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
    addDefaultSizeClassIfMissing(attrs);
    Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaPreviewUrl,maxWidth);
    MediaPredicate localMediaIdPredicate=MediaPredicate.getLocalMediaIdPredicate(localMediaId);
    if (bitmapToShow != null) {
      if (mediaFile.isVideo()) {
        addVideoUploadingClassIfMissing(attrs);
        content.insertVideo(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.error_media_load);
      Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
      drawable.setBounds(0,0,maxWidth,maxWidth);
      content.insertImage(drawable,attrs);
    }
    overlayProgressingMedia(localMediaIdPredicate);
    mUploadingMediaProgressMax.put(localMediaId,0f);
    if (mediaFile.isVideo()) {
      overlayVideoIcon(2,localMediaIdPredicate);
    }
    content.updateElementAttributes(localMediaIdPredicate,attrs);
    content.resetAttributedMediaSpan(localMediaIdPredicate);
  }
}","@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final int maxWidth=ImageUtils.getMaximumThumbnailWidthForEditor(getActivity());
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    final Drawable placeholder;
    if (mediaFile.isVideo()) {
      placeholder=getResources().getDrawable(R.drawable.ic_gridicons_video_camera);
    }
 else {
      placeholder=getResources().getDrawable(R.drawable.ic_gridicons_image);
    }
    placeholder.setBounds(0,0,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP,DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP);
    AztecAttributes attributes=new AztecAttributes();
    attributes.setValue(ATTR_SRC,mediaUrl);
    setAttributeValuesIfNotDefault(attributes,mediaFile);
    if (mediaFile.isVideo()) {
      addVideoUploadingClassIfMissing(attributes);
      content.insertVideo(placeholder,attributes);
      overlayVideoIcon(0,new MediaPredicate(mediaUrl,ATTR_SRC));
    }
 else {
      content.insertImage(placeholder,attributes);
    }
    final String posterURL=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : mediaUrl;
    imageLoader.get(posterURL,new ImageLoader.ImageListener(){
      private void replaceDrawable(      Drawable newDrawable){
        AztecMediaSpan[] imageOrVideoSpans=content.getText().getSpans(0,content.getText().length(),AztecMediaSpan.class);
        for (        AztecMediaSpan currentClass : imageOrVideoSpans) {
          if (currentClass.getAttributes().hasAttribute(ATTR_SRC) && mediaUrl.equals(currentClass.getAttributes().getValue(ATTR_SRC))) {
            currentClass.setDrawable(newDrawable);
          }
        }
        content.refreshText();
      }
      private void showErrorPlaceholder(){
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        replaceDrawable(drawable);
      }
      @Override public void onErrorResponse(      VolleyError error){
        if (!isAdded()) {
          return;
        }
        showErrorPlaceholder();
      }
      @Override public void onResponse(      ImageLoader.ImageContainer container,      boolean isImmediate){
        if (!isAdded()) {
          return;
        }
        Bitmap downloadedBitmap=container.getBitmap();
        if (downloadedBitmap == null) {
          if (isImmediate) {
            return;
          }
          showErrorPlaceholder();
          return;
        }
        AztecAttributes attributes=new AztecAttributes();
        attributes.setValue(ATTR_SRC,mediaUrl);
        setAttributeValuesIfNotDefault(attributes,mediaFile);
        int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
        if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
          ToastUtils.showToast(getActivity(),R.string.error_media_small);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
          replaceDrawable(drawable);
          return;
        }
        Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,maxWidth);
        replaceDrawable(new BitmapDrawable(getResources(),resizedBitmap));
      }
    }
,maxWidth,0);
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    final String safeMediaPreviewUrl=mediaFile.isVideo() ? Utils.escapeQuotes(StringUtils.notNullStr(mediaFile.getThumbnailURL())) : Utils.escapeQuotes(mediaUrl);
    AztecAttributes attrs=new AztecAttributes();
    attrs.setValue(ATTR_ID_WP,localMediaId);
    attrs.setValue(ATTR_SRC,Utils.escapeQuotes(mediaUrl));
    attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
    addDefaultSizeClassIfMissing(attrs);
    Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaPreviewUrl,maxWidth);
    MediaPredicate localMediaIdPredicate=MediaPredicate.getLocalMediaIdPredicate(localMediaId);
    if (bitmapToShow != null) {
      if (mediaFile.isVideo()) {
        addVideoUploadingClassIfMissing(attrs);
        content.insertVideo(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.error_media_load);
      Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
      drawable.setBounds(0,0,maxWidth,maxWidth);
      content.insertImage(drawable,attrs);
    }
    overlayProgressingMedia(localMediaIdPredicate);
    mUploadingMediaProgressMax.put(localMediaId,0f);
    if (mediaFile.isVideo()) {
      overlayVideoIcon(2,localMediaIdPredicate);
    }
    content.updateElementAttributes(localMediaIdPredicate,attrs);
    content.resetAttributedMediaSpan(localMediaIdPredicate);
  }
}",0.9495048534170016
13776,"@Override public void onResponse(ImageLoader.ImageContainer container,boolean isImmediate){
  if (!isAdded()) {
    return;
  }
  Bitmap downloadedBitmap=container.getBitmap();
  if (downloadedBitmap == null) {
    if (isImmediate) {
      return;
    }
    showErrorPlaceholder();
    return;
  }
  AztecAttributes attributes=new AztecAttributes();
  attributes.setValue(ATTR_SRC,mediaUrl);
  setAttributeValuesIfNotDefault(attributes,mediaFile);
  int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
  if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
    ToastUtils.showToast(getActivity(),R.string.error_media_small);
    Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
    replaceDrawable(drawable);
    return;
  }
  Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,maxWidth);
  replaceDrawable(new BitmapDrawable(getResources(),resizedBitmap));
  if (mediaFile.isVideo()) {
    addVideoUploadingClassIfMissing(attributes);
    content.insertVideo(new BitmapDrawable(getResources(),resizedBitmap),attributes);
    overlayVideoIcon(0,new MediaPredicate(mediaUrl,ATTR_SRC));
  }
 else {
    content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
  }
}","@Override public void onResponse(ImageLoader.ImageContainer container,boolean isImmediate){
  if (!isAdded()) {
    return;
  }
  Bitmap downloadedBitmap=container.getBitmap();
  if (downloadedBitmap == null) {
    if (isImmediate) {
      return;
    }
    showErrorPlaceholder();
    return;
  }
  AztecAttributes attributes=new AztecAttributes();
  attributes.setValue(ATTR_SRC,mediaUrl);
  setAttributeValuesIfNotDefault(attributes,mediaFile);
  int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
  if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
    ToastUtils.showToast(getActivity(),R.string.error_media_small);
    Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
    replaceDrawable(drawable);
    return;
  }
  Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,maxWidth);
  replaceDrawable(new BitmapDrawable(getResources(),resizedBitmap));
}",0.8597014925373134
13777,"public static Uri getOptimizedMedia(Activity activity,String path,boolean isVideo){
  if (isVideo) {
    return null;
  }
  int resizeWidth=AppPrefs.getImageOptimizeWidth() > 0 ? AppPrefs.getImageOptimizeWidth() : Integer.MAX_VALUE;
  int quality=AppPrefs.getImageOptimizeQuality();
  if (resizeWidth == Integer.MAX_VALUE && quality == 100) {
    return null;
  }
  String optimizedPath=ImageUtils.optimizeImage(activity,path,resizeWidth,quality);
  if (optimizedPath == null) {
    AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
    AnalyticsTracker.track(AnalyticsTracker.Stat.MEDIA_PHOTO_OPTIMIZE_ERROR);
  }
 else {
    AnalyticsTracker.track(AnalyticsTracker.Stat.MEDIA_PHOTO_OPTIMIZED);
    return Uri.parse(optimizedPath);
  }
  return null;
}","public static Uri getOptimizedMedia(Activity activity,String path,boolean isVideo){
  if (isVideo) {
    return null;
  }
  int resizeWidth=AppPrefs.getImageOptimizeWidth() > 1 ? AppPrefs.getImageOptimizeWidth() : Integer.MAX_VALUE;
  int quality=AppPrefs.getImageOptimizeQuality();
  if (resizeWidth == Integer.MAX_VALUE && quality == 100) {
    return null;
  }
  String optimizedPath=ImageUtils.optimizeImage(activity,path,resizeWidth,quality);
  if (optimizedPath == null) {
    AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
    AnalyticsTracker.track(AnalyticsTracker.Stat.MEDIA_PHOTO_OPTIMIZE_ERROR);
  }
 else {
    AnalyticsTracker.track(AnalyticsTracker.Stat.MEDIA_PHOTO_OPTIMIZED);
    return Uri.parse(optimizedPath);
  }
  return null;
}",0.998663101604278
13778,"@Override public void onSettingsUpdated(Exception error){
  if (error == null) {
    updatePostFormat(mSiteSettings.getDefaultPostFormat());
  }
}","@Override public void onSettingsUpdated(Exception error){
  if (error == null && mEditPostActivityHook != null) {
    updatePostFormat(mSiteSettings.getDefaultPostFormat());
  }
}",0.8984615384615384
13779,"private void fetchSiteSettingsAndUpdateDefaultPostFormatIfNecessary(){
  if (!TextUtils.isEmpty(getPost().getPostFormat())) {
    return;
  }
  mSiteSettings=SiteSettingsInterface.getInterface(getActivity(),getSite(),new SiteSettingsListener(){
    @Override public void onSettingsUpdated(    Exception error){
      if (error == null) {
        updatePostFormat(mSiteSettings.getDefaultPostFormat());
      }
    }
    @Override public void onSettingsSaved(    Exception error){
    }
    @Override public void onCredentialsValidated(    Exception error){
    }
  }
);
  if (mSiteSettings != null) {
    mSiteSettings.init(true);
  }
}","private void fetchSiteSettingsAndUpdateDefaultPostFormatIfNecessary(){
  if (!TextUtils.isEmpty(getPost().getPostFormat())) {
    return;
  }
  mSiteSettings=SiteSettingsInterface.getInterface(getActivity(),getSite(),new SiteSettingsListener(){
    @Override public void onSettingsUpdated(    Exception error){
      if (error == null && mEditPostActivityHook != null) {
        updatePostFormat(mSiteSettings.getDefaultPostFormat());
      }
    }
    @Override public void onSettingsSaved(    Exception error){
    }
    @Override public void onCredentialsValidated(    Exception error){
    }
  }
);
  if (mSiteSettings != null) {
    mSiteSettings.init(true);
  }
}",0.9747126436781608
13780,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.edit_post_settings_fragment,container,false);
  if (rootView == null) {
    return null;
  }
  mExcerptTextView=(TextView)rootView.findViewById(R.id.post_excerpt);
  mSlugTextView=(TextView)rootView.findViewById(R.id.post_slug);
  mLocationTextView=(TextView)rootView.findViewById(R.id.post_location);
  mCategoriesTextView=(TextView)rootView.findViewById(R.id.post_categories);
  mTagsTextView=(TextView)rootView.findViewById(R.id.post_tags);
  mStatusTextView=(TextView)rootView.findViewById(R.id.post_status);
  mPostFormatTextView=(TextView)rootView.findViewById(R.id.post_format);
  mPasswordTextView=(TextView)rootView.findViewById(R.id.post_password);
  mPublishDateTextView=(TextView)rootView.findViewById(R.id.publish_date);
  mFeaturedImageView=(WPNetworkImageView)rootView.findViewById(R.id.post_featured_image);
  mFeaturedImageButton=(Button)rootView.findViewById(R.id.post_add_featured_image_button);
  CardView featuredImageCardView=(CardView)rootView.findViewById(R.id.post_featured_image_card_view);
  if (AppPrefs.isVisualEditorEnabled() || AppPrefs.isAztecEditorEnabled()) {
    registerForContextMenu(mFeaturedImageView);
    mFeaturedImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        view.showContextMenu();
      }
    }
);
    mFeaturedImageButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        launchFeaturedMediaPicker();
      }
    }
);
  }
 else {
    featuredImageCardView.setVisibility(View.GONE);
  }
  mExcerptContainer=(LinearLayout)rootView.findViewById(R.id.post_excerpt_container);
  mExcerptContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostExcerptDialog();
    }
  }
);
  final LinearLayout slugContainer=(LinearLayout)rootView.findViewById(R.id.post_slug_container);
  slugContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showSlugDialog();
    }
  }
);
  final LinearLayout locationContainer=(LinearLayout)rootView.findViewById(R.id.post_location_container);
  locationContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showLocationPickerOrPopupMenu(view);
    }
  }
);
  mCategoriesContainer=(LinearLayout)rootView.findViewById(R.id.post_categories_container);
  mCategoriesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showCategoriesActivity();
    }
  }
);
  mTagsContainer=(LinearLayout)rootView.findViewById(R.id.post_tags_container);
  mTagsContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showTagsActivity();
    }
  }
);
  final LinearLayout statusContainer=(LinearLayout)rootView.findViewById(R.id.post_status_container);
  statusContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showStatusDialog();
    }
  }
);
  mFormatContainer=(LinearLayout)rootView.findViewById(R.id.post_format_container);
  mFormatContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostFormatDialog();
    }
  }
);
  final LinearLayout passwordContainer=(LinearLayout)rootView.findViewById(R.id.post_password_container);
  passwordContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostPasswordDialog();
    }
  }
);
  final LinearLayout publishDateContainer=(LinearLayout)rootView.findViewById(R.id.publish_date_container);
  publishDateContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostDateSelectionDialog();
    }
  }
);
  if (getPost().isPage()) {
    final View categoriesTagsContainer=rootView.findViewById(R.id.post_categories_and_tags_card);
    final View formatBottomSeparator=rootView.findViewById(R.id.post_format_bottom_separator);
    categoriesTagsContainer.setVisibility(View.GONE);
    formatBottomSeparator.setVisibility(View.GONE);
    mFormatContainer.setVisibility(View.GONE);
  }
  refreshViews();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.edit_post_settings_fragment,container,false);
  if (rootView == null) {
    return null;
  }
  mExcerptTextView=(TextView)rootView.findViewById(R.id.post_excerpt);
  mSlugTextView=(TextView)rootView.findViewById(R.id.post_slug);
  mLocationTextView=(TextView)rootView.findViewById(R.id.post_location);
  mCategoriesTextView=(TextView)rootView.findViewById(R.id.post_categories);
  mTagsTextView=(TextView)rootView.findViewById(R.id.post_tags);
  mStatusTextView=(TextView)rootView.findViewById(R.id.post_status);
  mPostFormatTextView=(TextView)rootView.findViewById(R.id.post_format);
  mPasswordTextView=(TextView)rootView.findViewById(R.id.post_password);
  mPublishDateTextView=(TextView)rootView.findViewById(R.id.publish_date);
  mFeaturedImageView=(WPNetworkImageView)rootView.findViewById(R.id.post_featured_image);
  mFeaturedImageButton=(Button)rootView.findViewById(R.id.post_add_featured_image_button);
  CardView featuredImageCardView=(CardView)rootView.findViewById(R.id.post_featured_image_card_view);
  if (AppPrefs.isVisualEditorEnabled() || AppPrefs.isAztecEditorEnabled()) {
    registerForContextMenu(mFeaturedImageView);
    mFeaturedImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        view.showContextMenu();
      }
    }
);
    mFeaturedImageButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        launchFeaturedMediaPicker();
      }
    }
);
  }
 else {
    featuredImageCardView.setVisibility(View.GONE);
  }
  mExcerptContainer=(LinearLayout)rootView.findViewById(R.id.post_excerpt_container);
  mExcerptContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostExcerptDialog();
    }
  }
);
  final LinearLayout slugContainer=(LinearLayout)rootView.findViewById(R.id.post_slug_container);
  slugContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showSlugDialog();
    }
  }
);
  final LinearLayout locationContainer=(LinearLayout)rootView.findViewById(R.id.post_location_container);
  locationContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showLocationPickerOrPopupMenu(view);
    }
  }
);
  mCategoriesContainer=(LinearLayout)rootView.findViewById(R.id.post_categories_container);
  mCategoriesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showCategoriesActivity();
    }
  }
);
  mTagsContainer=(LinearLayout)rootView.findViewById(R.id.post_tags_container);
  mTagsContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showTagsActivity();
    }
  }
);
  final LinearLayout statusContainer=(LinearLayout)rootView.findViewById(R.id.post_status_container);
  statusContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showStatusDialog();
    }
  }
);
  mFormatContainer=(LinearLayout)rootView.findViewById(R.id.post_format_container);
  mFormatContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostFormatDialog();
    }
  }
);
  final LinearLayout passwordContainer=(LinearLayout)rootView.findViewById(R.id.post_password_container);
  passwordContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostPasswordDialog();
    }
  }
);
  final LinearLayout publishDateContainer=(LinearLayout)rootView.findViewById(R.id.publish_date_container);
  publishDateContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      showPostDateSelectionDialog();
    }
  }
);
  if (getPost().isPage()) {
    final View categoriesTagsContainer=rootView.findViewById(R.id.post_categories_and_tags_card);
    final View formatBottomSeparator=rootView.findViewById(R.id.post_format_bottom_separator);
    categoriesTagsContainer.setVisibility(View.GONE);
    formatBottomSeparator.setVisibility(View.GONE);
    mFormatContainer.setVisibility(View.GONE);
  }
  return rootView;
}",0.997974797479748
13781,"@Override public void run(){
  getActivity().invalidateOptionsMenu();
}","@Override public void run(){
  if (isAdded()) {
    getActivity().invalidateOptionsMenu();
  }
}",0.8502994011976048
13782,"@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      imageLoader.get(mediaUrl,new ImageLoader.ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
          ToastUtils.showToast(getActivity(),R.string.error_media_load);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          content.insertImage(drawable,attributes);
        }
        @Override public void onResponse(        ImageLoader.ImageContainer container,        boolean isImmediate){
          Bitmap downloadedBitmap=container.getBitmap();
          if (downloadedBitmap == null) {
            return;
          }
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
          if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
            ToastUtils.showToast(getActivity(),R.string.error_media_small);
            Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
            content.insertImage(drawable,attributes);
            return;
          }
          Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
,0,0);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_ID_WP,localMediaId);
      attrs.setValue(ATTR_SRC,safeMediaUrl);
      attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
      addDefaultSizeClassIfMissing(attrs);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        drawable.setBounds(0,0,maxWidth,maxWidth);
        content.insertImage(drawable,attrs);
      }
      AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.setOverlay(localMediaIdPredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(localMediaIdPredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
      content.updateElementAttributes(localMediaIdPredicate,attrs);
      content.resetAttributedMediaSpan(localMediaIdPredicate);
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}","@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      imageLoader.get(mediaUrl,new ImageLoader.ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
          if (!isAdded()) {
            return;
          }
          ToastUtils.showToast(getActivity(),R.string.error_media_load);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          content.insertImage(drawable,attributes);
        }
        @Override public void onResponse(        ImageLoader.ImageContainer container,        boolean isImmediate){
          Bitmap downloadedBitmap=container.getBitmap();
          if (downloadedBitmap == null || !isAdded()) {
            return;
          }
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
          if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
            ToastUtils.showToast(getActivity(),R.string.error_media_small);
            Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
            content.insertImage(drawable,attributes);
            return;
          }
          Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
,0,0);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_ID_WP,localMediaId);
      attrs.setValue(ATTR_SRC,safeMediaUrl);
      attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
      addDefaultSizeClassIfMissing(attrs);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        drawable.setBounds(0,0,maxWidth,maxWidth);
        content.insertImage(drawable,attrs);
      }
      AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.setOverlay(localMediaIdPredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(localMediaIdPredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
      content.updateElementAttributes(localMediaIdPredicate,attrs);
      content.resetAttributedMediaSpan(localMediaIdPredicate);
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}",0.9903746097814776
13783,"@Override public void onResponse(ImageLoader.ImageContainer container,boolean isImmediate){
  Bitmap downloadedBitmap=container.getBitmap();
  if (downloadedBitmap == null) {
    return;
  }
  AztecAttributes attributes=new AztecAttributes();
  attributes.setValue(ATTR_SRC,mediaUrl);
  setAttributeValuesIfNotDefault(attributes,mediaFile);
  int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
  if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
    ToastUtils.showToast(getActivity(),R.string.error_media_small);
    Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
    content.insertImage(drawable,attributes);
    return;
  }
  Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
  content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
}","@Override public void onResponse(ImageLoader.ImageContainer container,boolean isImmediate){
  Bitmap downloadedBitmap=container.getBitmap();
  if (downloadedBitmap == null || !isAdded()) {
    return;
  }
  AztecAttributes attributes=new AztecAttributes();
  attributes.setValue(ATTR_SRC,mediaUrl);
  setAttributeValuesIfNotDefault(attributes,mediaFile);
  int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
  if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
    ToastUtils.showToast(getActivity(),R.string.error_media_small);
    Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
    content.insertImage(drawable,attributes);
    return;
  }
  Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
  content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
}",0.9928425357873212
13784,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_aztec_editor,container,false);
  mUploadingMedia=new HashMap<>();
  mFailedMediaIds=new HashSet<>();
  title=(AztecText)view.findViewById(R.id.title);
  content=(AztecText)view.findViewById(R.id.aztec);
  source=(SourceViewEditText)view.findViewById(R.id.source);
  source.setHint(""String_Node_Str"" + getString(R.string.edit_hint) + ""String_Node_Str"");
  formattingToolbar=(AztecToolbar)view.findViewById(R.id.formatting_toolbar);
  formattingToolbar.setExpanded(mIsToolbarExpanded);
  title.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      formattingToolbar.enableFormatButtons(!hasFocus);
    }
  }
);
  content.setOnDragListener(mOnDragListener);
  source.setOnDragListener(mOnDragListener);
  setHasOptionsMenu(true);
  invalidateOptionsHandler=new Handler();
  invalidateOptionsRunnable=new Runnable(){
    @Override public void run(){
      getActivity().invalidateOptionsMenu();
    }
  }
;
  AppCompatTextView titleBeta=(AppCompatTextView)view.findViewById(R.id.title_beta);
  titleBeta.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mEditorBetaClickListener.onBetaClicked();
    }
  }
);
  Aztec.Factory.with(content,source,formattingToolbar,this).setImageGetter(imageLoader).setOnImeBackListener(this).setHistoryListener(this).setOnImageTappedListener(this).addPlugin(new WordPressCommentsPlugin(content)).addPlugin(new MoreToolbarButton(content));
  mEditorFragmentListener.onEditorFragmentInitialized();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_aztec_editor,container,false);
  mUploadingMedia=new HashMap<>();
  mFailedMediaIds=new HashSet<>();
  title=(AztecText)view.findViewById(R.id.title);
  content=(AztecText)view.findViewById(R.id.aztec);
  source=(SourceViewEditText)view.findViewById(R.id.source);
  source.setHint(""String_Node_Str"" + getString(R.string.edit_hint) + ""String_Node_Str"");
  formattingToolbar=(AztecToolbar)view.findViewById(R.id.formatting_toolbar);
  formattingToolbar.setExpanded(mIsToolbarExpanded);
  title.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      formattingToolbar.enableFormatButtons(!hasFocus);
    }
  }
);
  content.setOnDragListener(mOnDragListener);
  source.setOnDragListener(mOnDragListener);
  setHasOptionsMenu(true);
  invalidateOptionsHandler=new Handler();
  invalidateOptionsRunnable=new Runnable(){
    @Override public void run(){
      if (isAdded()) {
        getActivity().invalidateOptionsMenu();
      }
    }
  }
;
  AppCompatTextView titleBeta=(AppCompatTextView)view.findViewById(R.id.title_beta);
  titleBeta.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      mEditorBetaClickListener.onBetaClicked();
    }
  }
);
  Aztec.Factory.with(content,source,formattingToolbar,this).setImageGetter(imageLoader).setOnImeBackListener(this).setHistoryListener(this).setOnImageTappedListener(this).addPlugin(new WordPressCommentsPlugin(content)).addPlugin(new MoreToolbarButton(content));
  mEditorFragmentListener.onEditorFragmentInitialized();
  return view;
}",0.9888666856979732
13785,"@Override public void onErrorResponse(VolleyError error){
  ToastUtils.showToast(getActivity(),R.string.error_media_load);
  Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
  AztecAttributes attributes=new AztecAttributes();
  attributes.setValue(ATTR_SRC,mediaUrl);
  setAttributeValuesIfNotDefault(attributes,mediaFile);
  content.insertImage(drawable,attributes);
}","@Override public void onErrorResponse(VolleyError error){
  if (!isAdded()) {
    return;
  }
  ToastUtils.showToast(getActivity(),R.string.error_media_load);
  Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
  AztecAttributes attributes=new AztecAttributes();
  attributes.setValue(ATTR_SRC,mediaUrl);
  setAttributeValuesIfNotDefault(attributes,mediaFile);
  content.insertImage(drawable,attributes);
}",0.9578454332552692
13786,"/** 
 * Has priority 9 on OnPostUploaded events, which ensures that PostUploadHandler is the first to receive and process OnPostUploaded events, before they trickle down to other subscribers.
 */
@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN,priority=9) public void onPostUploaded(OnPostUploaded event){
  SiteModel site=mSiteStore.getSiteByLocalId(event.post.getLocalSiteId());
  if (event.isError()) {
    AppLog.w(T.POSTS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    Context context=WordPress.getContext();
    String errorMessage=UploadUtils.getErrorMessageFromPostError(context,event.post,event.error);
    String notificationMessage=UploadUtils.getErrorMessage(context,event.post,errorMessage);
    mPostUploadNotifier.updateNotificationError(event.post,site,notificationMessage,false);
    sFirstPublishPosts.remove(event.post.getId());
  }
 else {
    mPostUploadNotifier.cancelNotification(event.post);
    boolean isFirstTimePublish=sFirstPublishPosts.remove(event.post.getId());
    mPostUploadNotifier.updateNotificationSuccess(event.post,site,isFirstTimePublish);
    if (isFirstTimePublish) {
      if (sCurrentUploadingPostAnalyticsProperties != null) {
        sCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",event.post.getRemotePostId());
      }
      AnalyticsUtils.trackWithSiteDetails(Stat.EDITOR_PUBLISHED_POST,mSiteStore.getSiteByLocalId(event.post.getLocalSiteId()),sCurrentUploadingPostAnalyticsProperties);
    }
  }
  finishUpload();
}","/** 
 * Has priority 9 on OnPostUploaded events, which ensures that PostUploadHandler is the first to receive and process OnPostUploaded events, before they trickle down to other subscribers.
 */
@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN,priority=9) public void onPostUploaded(OnPostUploaded event){
  SiteModel site=mSiteStore.getSiteByLocalId(event.post.getLocalSiteId());
  if (event.isError()) {
    AppLog.w(T.POSTS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    Context context=WordPress.getContext();
    String errorMessage=UploadUtils.getErrorMessageFromPostError(context,event.post,event.error);
    String notificationMessage=UploadUtils.getErrorMessage(context,event.post,errorMessage);
    mPostUploadNotifier.updateNotificationError(event.post,site,notificationMessage,false);
    mPostUploadNotifier.cancelNotification(event.post);
    sFirstPublishPosts.remove(event.post.getId());
  }
 else {
    mPostUploadNotifier.cancelNotification(event.post);
    boolean isFirstTimePublish=sFirstPublishPosts.remove(event.post.getId());
    mPostUploadNotifier.updateNotificationSuccess(event.post,site,isFirstTimePublish);
    if (isFirstTimePublish) {
      if (sCurrentUploadingPostAnalyticsProperties != null) {
        sCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",event.post.getRemotePostId());
      }
      AnalyticsUtils.trackWithSiteDetails(Stat.EDITOR_PUBLISHED_POST,mSiteStore.getSiteByLocalId(event.post.getLocalSiteId()),sCurrentUploadingPostAnalyticsProperties);
    }
  }
  finishUpload();
}",0.9821996185632548
13787,"private void handleMediaUploadCompletedLegacy(OnMediaUploaded event){
  if (sCurrentUploadingPost == null || mMediaLatchMap.get(event.media.getId()) == null) {
    AppLog.i(T.POSTS,""String_Node_Str"" + event.media.getId() + ""String_Node_Str"");
    return;
  }
  if (event.isError()) {
    AppLog.w(T.POSTS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    SiteModel site=mSiteStore.getSiteByLocalId(sCurrentUploadingPost.getLocalSiteId());
    Context context=WordPress.getContext();
    String errorMessage=UploadUtils.getErrorMessageFromMediaError(context,event.error);
    String notificationMessage=UploadUtils.getErrorMessage(context,sCurrentUploadingPost,errorMessage);
    mPostUploadNotifier.updateNotificationError(sCurrentUploadingPost,site,notificationMessage,true);
    sFirstPublishPosts.remove(sCurrentUploadingPost.getId());
    finishUpload();
    return;
  }
  if (event.canceled) {
    return;
  }
  if (event.completed) {
    AppLog.i(T.POSTS,""String_Node_Str"" + event.media.getId() + ""String_Node_Str""+ sCurrentUploadingPost.getId());
    mMediaLatchMap.get(event.media.getId()).countDown();
    mMediaLatchMap.remove(event.media.getId());
  }
 else {
    mPostUploadNotifier.updateNotificationProgress(sCurrentUploadingPost,event.progress);
  }
}","private void handleMediaUploadCompletedLegacy(OnMediaUploaded event){
  if (sCurrentUploadingPost == null || mMediaLatchMap.get(event.media.getId()) == null) {
    AppLog.i(T.POSTS,""String_Node_Str"" + event.media.getId() + ""String_Node_Str"");
    return;
  }
  if (event.isError()) {
    AppLog.w(T.POSTS,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    SiteModel site=mSiteStore.getSiteByLocalId(sCurrentUploadingPost.getLocalSiteId());
    Context context=WordPress.getContext();
    String errorMessage=UploadUtils.getErrorMessageFromMediaError(context,event.error);
    String notificationMessage=UploadUtils.getErrorMessage(context,sCurrentUploadingPost,errorMessage);
    mPostUploadNotifier.cancelNotification(sCurrentUploadingPost);
    mPostUploadNotifier.updateNotificationError(sCurrentUploadingPost,site,notificationMessage,true);
    sFirstPublishPosts.remove(sCurrentUploadingPost.getId());
    finishUpload();
    return;
  }
  if (event.canceled) {
    return;
  }
  if (event.completed) {
    AppLog.i(T.POSTS,""String_Node_Str"" + event.media.getId() + ""String_Node_Str""+ sCurrentUploadingPost.getId());
    mMediaLatchMap.get(event.media.getId()).countDown();
    mMediaLatchMap.remove(event.media.getId());
  }
 else {
    mPostUploadNotifier.updateNotificationProgress(sCurrentUploadingPost,event.progress);
  }
}",0.974878140232471
13788,"@Override protected void onPostExecute(Boolean pushActionWasDispatched){
  if (!pushActionWasDispatched) {
    mPostUploadNotifier.updateNotificationError(mPost,mSite,mErrorMessage,mIsMediaError);
    finishUpload();
  }
}","@Override protected void onPostExecute(Boolean pushActionWasDispatched){
  if (!pushActionWasDispatched) {
    mPostUploadNotifier.cancelNotification(mPost);
    mPostUploadNotifier.updateNotificationError(mPost,mSite,mErrorMessage,mIsMediaError);
    finishUpload();
  }
}",0.896969696969697
13789,"@Override public void saveSettings(){
  super.saveSettings();
  final Map<String,String> params=serializeDotComParams();
  if (params == null || params.isEmpty())   return;
  WordPress.getRestClientUtils().setGeneralSiteSettings(mSite.getSiteId(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      AppLog.d(AppLog.T.API,""String_Node_Str"");
      notifySavedOnUiThread(null);
      mRemoteSettings.copyFrom(mSettings);
      if (response != null) {
        JSONObject updated=response.optJSONObject(""String_Node_Str"");
        if (updated == null)         return;
        HashMap<String,Object> properties=new HashMap<>();
        Iterator<String> keys=updated.keys();
        while (keys.hasNext()) {
          String currentKey=keys.next();
          Object currentValue=updated.opt(currentKey);
          if (currentValue != null) {
            properties.put(SAVED_ITEM_PREFIX + currentKey,currentValue);
          }
        }
        AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.SITE_SETTINGS_SAVED_REMOTELY,mSite,properties);
      }
      if (mSite.isJetpackConnected()) {
        saveJetpackSettings();
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.w(AppLog.T.API,""String_Node_Str"" + error);
      notifySavedOnUiThread(error);
    }
  }
,params);
}","@Override public void saveSettings(){
  super.saveSettings();
  if (mSite.isJetpackConnected()) {
    saveJetpackSettings();
  }
  final Map<String,String> params=serializeDotComParams();
  if (params == null || params.isEmpty())   return;
  WordPress.getRestClientUtils().setGeneralSiteSettings(mSite.getSiteId(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      AppLog.d(AppLog.T.API,""String_Node_Str"");
      notifySavedOnUiThread(null);
      mRemoteSettings.copyFrom(mSettings);
      if (response != null) {
        JSONObject updated=response.optJSONObject(""String_Node_Str"");
        if (updated == null)         return;
        HashMap<String,Object> properties=new HashMap<>();
        Iterator<String> keys=updated.keys();
        while (keys.hasNext()) {
          String currentKey=keys.next();
          Object currentValue=updated.opt(currentKey);
          if (currentValue != null) {
            properties.put(SAVED_ITEM_PREFIX + currentKey,currentValue);
          }
        }
        AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.SITE_SETTINGS_SAVED_REMOTELY,mSite,properties);
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.w(AppLog.T.API,""String_Node_Str"" + error);
      notifySavedOnUiThread(error);
    }
  }
,params);
}",0.947632711621234
13790,"@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImage();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  view.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}","@Override public View configureView(View view){
  final CommentUserNoteBlockHolder noteBlockHolder=(CommentUserNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(Html.fromHtml(""String_Node_Str"" + getNoteText().toString() + ""String_Node_Str""));
  noteBlockHolder.agoTextView.setText(DateTimeUtils.timeSpanFromTimestamp(getTimestamp(),WordPress.getContext()));
  if (!TextUtils.isEmpty(getMetaHomeTitle()) || !TextUtils.isEmpty(getMetaSiteUrl())) {
    noteBlockHolder.bulletTextView.setVisibility(View.VISIBLE);
    noteBlockHolder.siteTextView.setVisibility(View.VISIBLE);
    if (!TextUtils.isEmpty(getMetaHomeTitle())) {
      noteBlockHolder.siteTextView.setText(getMetaHomeTitle());
    }
 else {
      noteBlockHolder.siteTextView.setText(getMetaSiteUrl().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    noteBlockHolder.bulletTextView.setVisibility(View.GONE);
    noteBlockHolder.siteTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  noteBlockHolder.commentTextView.setText(NotificationsUtils.getSpannableContentForRanges(getNoteData().optJSONObject(""String_Node_Str""),noteBlockHolder.commentTextView,getOnNoteBlockTextClickListener(),false));
  int paddingLeft=view.getPaddingLeft();
  int paddingTop=view.getPaddingTop();
  int paddingRight=view.getPaddingRight();
  int paddingBottom=view.getPaddingBottom();
  if (mCommentStatus == CommentStatus.UNAPPROVED) {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_unapproved_background);
    }
 else {
      view.setBackgroundResource(R.drawable.comment_unapproved_background);
    }
    noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    noteBlockHolder.agoTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.siteTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.nameTextView.setTextColor(mUnapprovedTextColor);
    noteBlockHolder.commentTextView.setTextColor(mUnapprovedTextColor);
  }
 else {
    if (hasCommentNestingLevel()) {
      paddingLeft=mIndentedLeftPadding;
      view.setBackgroundResource(R.drawable.comment_reply_background);
      noteBlockHolder.dividerView.setVisibility(View.INVISIBLE);
    }
 else {
      view.setBackgroundColor(mNormalBackgroundColor);
      noteBlockHolder.dividerView.setVisibility(View.VISIBLE);
    }
    noteBlockHolder.agoTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.bulletTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.siteTextView.setTextColor(mAgoTextColor);
    noteBlockHolder.nameTextView.setTextColor(mNormalTextColor);
    noteBlockHolder.commentTextView.setTextColor(mNormalTextColor);
  }
  view.setPadding(paddingLeft,paddingTop,paddingRight,paddingBottom);
  if (mStatusChanged) {
    mStatusChanged=false;
    view.setAlpha(0.4f);
    view.animate().alpha(1.0f).start();
  }
  return view;
}",0.9982046678635548
13791,"@Override public View configureView(View view){
  final UserActionNoteBlockHolder noteBlockHolder=(UserActionNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(getNoteText().toString());
  String linkedText=null;
  if (hasUserUrlAndTitle()) {
    linkedText=getUserBlogTitle();
  }
 else   if (hasUserUrl()) {
    linkedText=getUserUrl();
  }
  if (!TextUtils.isEmpty(linkedText)) {
    noteBlockHolder.urlTextView.setText(linkedText);
    noteBlockHolder.urlTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.urlTextView.setVisibility(View.GONE);
  }
  if (hasUserBlogTagline()) {
    noteBlockHolder.taglineTextView.setText(getUserBlogTagline());
    noteBlockHolder.taglineTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.taglineTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
      noteBlockHolder.rootView.setEnabled(true);
      noteBlockHolder.rootView.setOnClickListener(mOnClickListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
      noteBlockHolder.rootView.setEnabled(false);
      noteBlockHolder.rootView.setOnClickListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImage();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  return view;
}","@Override public View configureView(View view){
  final UserActionNoteBlockHolder noteBlockHolder=(UserActionNoteBlockHolder)view.getTag();
  noteBlockHolder.nameTextView.setText(getNoteText().toString());
  String linkedText=null;
  if (hasUserUrlAndTitle()) {
    linkedText=getUserBlogTitle();
  }
 else   if (hasUserUrl()) {
    linkedText=getUserUrl();
  }
  if (!TextUtils.isEmpty(linkedText)) {
    noteBlockHolder.urlTextView.setText(linkedText);
    noteBlockHolder.urlTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.urlTextView.setVisibility(View.GONE);
  }
  if (hasUserBlogTagline()) {
    noteBlockHolder.taglineTextView.setText(getUserBlogTagline());
    noteBlockHolder.taglineTextView.setVisibility(View.VISIBLE);
  }
 else {
    noteBlockHolder.taglineTextView.setVisibility(View.GONE);
  }
  if (hasImageMediaItem()) {
    String imageUrl=GravatarUtils.fixGravatarUrl(getNoteMediaItem().optString(""String_Node_Str"",""String_Node_Str""),getAvatarSize());
    noteBlockHolder.avatarImageView.setImageUrl(imageUrl,WPNetworkImageView.ImageType.AVATAR);
    if (!TextUtils.isEmpty(getUserUrl())) {
      noteBlockHolder.avatarImageView.setOnTouchListener(mOnGravatarTouchListener);
      noteBlockHolder.rootView.setEnabled(true);
      noteBlockHolder.rootView.setOnClickListener(mOnClickListener);
    }
 else {
      noteBlockHolder.avatarImageView.setOnTouchListener(null);
      noteBlockHolder.rootView.setEnabled(false);
      noteBlockHolder.rootView.setOnClickListener(null);
    }
  }
 else {
    noteBlockHolder.avatarImageView.showDefaultGravatarImageAndNullifyUrl();
    noteBlockHolder.avatarImageView.setOnTouchListener(null);
  }
  return view;
}",0.996150429375185
13792,"@Override public void onBindViewHolder(ConnectionViewHolder holder,int position){
  final PublicizeConnection connection=mConnections.get(position);
  holder.txtUser.setText(connection.getExternalDisplayName());
  holder.divider.setVisibility(position == 0 ? View.GONE : View.VISIBLE);
  if (connection.hasExternalProfilePictureUrl()) {
    holder.imgAvatar.setImageUrl(connection.getExternalProfilePictureUrl(),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultGravatarImage();
  }
  holder.btnConnect.setAction(PublicizeConstants.ConnectAction.DISCONNECT);
  holder.btnConnect.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mActionListener != null) {
        mActionListener.onRequestDisconnect(connection);
      }
    }
  }
);
}","@Override public void onBindViewHolder(ConnectionViewHolder holder,int position){
  final PublicizeConnection connection=mConnections.get(position);
  holder.txtUser.setText(connection.getExternalDisplayName());
  holder.divider.setVisibility(position == 0 ? View.GONE : View.VISIBLE);
  if (connection.hasExternalProfilePictureUrl()) {
    holder.imgAvatar.setImageUrl(connection.getExternalProfilePictureUrl(),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultGravatarImageAndNullifyUrl();
  }
  holder.btnConnect.setAction(PublicizeConstants.ConnectAction.DISCONNECT);
  holder.btnConnect.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mActionListener != null) {
        mActionListener.onRequestDisconnect(connection);
      }
    }
  }
);
}",0.9921450151057402
13793,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (holder instanceof PostHeaderHolder) {
    PostHeaderHolder headerHolder=(PostHeaderHolder)holder;
    headerHolder.mHeaderView.setPost(mPost);
    if (mIsHeaderClickEnabled) {
      headerHolder.mHeaderView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          ReaderActivityLauncher.showReaderPostDetail(view.getContext(),mPost.blogId,mPost.postId);
        }
      }
);
    }
    return;
  }
  final ReaderComment comment=getItem(position);
  if (comment == null) {
    return;
  }
  final CommentHolder commentHolder=(CommentHolder)holder;
  commentHolder.txtAuthor.setText(comment.getAuthorName());
  java.util.Date dtPublished=DateTimeUtils.dateFromIso8601(comment.getPublished());
  commentHolder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(dtPublished,WordPress.getContext()));
  if (comment.hasAuthorAvatar()) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(comment.getAuthorAvatar(),mAvatarSz);
    commentHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    commentHolder.imgAvatar.showDefaultGravatarImage();
  }
  if (comment.hasAuthorBlogId()) {
    View.OnClickListener authorListener=new View.OnClickListener(){
      @Override public void onClick(      View view){
        ReaderActivityLauncher.showReaderBlogPreview(view.getContext(),comment.authorBlogId);
      }
    }
;
    commentHolder.imgAvatar.setOnClickListener(authorListener);
    commentHolder.txtAuthor.setOnClickListener(authorListener);
  }
 else {
    commentHolder.imgAvatar.setOnClickListener(null);
    commentHolder.txtAuthor.setOnClickListener(null);
  }
  if (comment.authorId == mPost.authorId) {
    commentHolder.txtAuthor.setTextColor(mColorAuthor);
  }
 else {
    commentHolder.txtAuthor.setTextColor(mColorNotAuthor);
  }
  int indentWidth;
  if (comment.parentId != 0 && comment.level > 0) {
    indentWidth=Math.min(MAX_INDENT_LEVEL,comment.level) * mIndentPerLevel;
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)commentHolder.spacerIndent.getLayoutParams();
    params.width=indentWidth;
    commentHolder.spacerIndent.setVisibility(View.VISIBLE);
  }
 else {
    indentWidth=0;
    commentHolder.spacerIndent.setVisibility(View.GONE);
  }
  int maxImageWidth=mContentWidth - indentWidth;
  CommentUtils.displayHtmlComment(commentHolder.txtText,comment.getText(),maxImageWidth,mImageLoader);
  if (mHighlightCommentId != 0 && mHighlightCommentId == comment.commentId) {
    commentHolder.container.setBackgroundColor(mColorHighlight);
    commentHolder.progress.setVisibility(mShowProgressForHighlightedComment ? View.VISIBLE : View.GONE);
  }
 else {
    commentHolder.container.setBackgroundColor(Color.WHITE);
    commentHolder.progress.setVisibility(View.GONE);
  }
  if (!mAccountStore.hasAccessToken()) {
    commentHolder.replyView.setVisibility(View.GONE);
  }
 else {
    commentHolder.replyView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mReplyListener != null) {
          mReplyListener.onRequestReply(comment.commentId);
        }
      }
    }
);
    if (mAnimateLikeCommentId != 0 && mAnimateLikeCommentId == comment.commentId) {
      commentHolder.countLikes.postDelayed(new Runnable(){
        @Override public void run(){
          ReaderAnim.animateLikeButton(commentHolder.countLikes.getImageView(),true);
        }
      }
,400);
      mAnimateLikeCommentId=0;
    }
  }
  showLikeStatus(commentHolder,position);
  if (mMoreCommentsExist && mDataRequestedListener != null && (position >= getItemCount() - NUM_HEADERS)) {
    mDataRequestedListener.onRequestData();
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (holder instanceof PostHeaderHolder) {
    PostHeaderHolder headerHolder=(PostHeaderHolder)holder;
    headerHolder.mHeaderView.setPost(mPost);
    if (mIsHeaderClickEnabled) {
      headerHolder.mHeaderView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          ReaderActivityLauncher.showReaderPostDetail(view.getContext(),mPost.blogId,mPost.postId);
        }
      }
);
    }
    return;
  }
  final ReaderComment comment=getItem(position);
  if (comment == null) {
    return;
  }
  final CommentHolder commentHolder=(CommentHolder)holder;
  commentHolder.txtAuthor.setText(comment.getAuthorName());
  java.util.Date dtPublished=DateTimeUtils.dateFromIso8601(comment.getPublished());
  commentHolder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(dtPublished,WordPress.getContext()));
  if (comment.hasAuthorAvatar()) {
    String avatarUrl=GravatarUtils.fixGravatarUrl(comment.getAuthorAvatar(),mAvatarSz);
    commentHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    commentHolder.imgAvatar.showDefaultGravatarImageAndNullifyUrl();
  }
  if (comment.hasAuthorBlogId()) {
    View.OnClickListener authorListener=new View.OnClickListener(){
      @Override public void onClick(      View view){
        ReaderActivityLauncher.showReaderBlogPreview(view.getContext(),comment.authorBlogId);
      }
    }
;
    commentHolder.imgAvatar.setOnClickListener(authorListener);
    commentHolder.txtAuthor.setOnClickListener(authorListener);
  }
 else {
    commentHolder.imgAvatar.setOnClickListener(null);
    commentHolder.txtAuthor.setOnClickListener(null);
  }
  if (comment.authorId == mPost.authorId) {
    commentHolder.txtAuthor.setTextColor(mColorAuthor);
  }
 else {
    commentHolder.txtAuthor.setTextColor(mColorNotAuthor);
  }
  int indentWidth;
  if (comment.parentId != 0 && comment.level > 0) {
    indentWidth=Math.min(MAX_INDENT_LEVEL,comment.level) * mIndentPerLevel;
    RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)commentHolder.spacerIndent.getLayoutParams();
    params.width=indentWidth;
    commentHolder.spacerIndent.setVisibility(View.VISIBLE);
  }
 else {
    indentWidth=0;
    commentHolder.spacerIndent.setVisibility(View.GONE);
  }
  int maxImageWidth=mContentWidth - indentWidth;
  CommentUtils.displayHtmlComment(commentHolder.txtText,comment.getText(),maxImageWidth,mImageLoader);
  if (mHighlightCommentId != 0 && mHighlightCommentId == comment.commentId) {
    commentHolder.container.setBackgroundColor(mColorHighlight);
    commentHolder.progress.setVisibility(mShowProgressForHighlightedComment ? View.VISIBLE : View.GONE);
  }
 else {
    commentHolder.container.setBackgroundColor(Color.WHITE);
    commentHolder.progress.setVisibility(View.GONE);
  }
  if (!mAccountStore.hasAccessToken()) {
    commentHolder.replyView.setVisibility(View.GONE);
  }
 else {
    commentHolder.replyView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mReplyListener != null) {
          mReplyListener.onRequestReply(comment.commentId);
        }
      }
    }
);
    if (mAnimateLikeCommentId != 0 && mAnimateLikeCommentId == comment.commentId) {
      commentHolder.countLikes.postDelayed(new Runnable(){
        @Override public void run(){
          ReaderAnim.animateLikeButton(commentHolder.countLikes.getImageView(),true);
        }
      }
,400);
      mAnimateLikeCommentId=0;
    }
  }
  showLikeStatus(commentHolder,position);
  if (mMoreCommentsExist && mDataRequestedListener != null && (position >= getItemCount() - NUM_HEADERS)) {
    mDataRequestedListener.onRequestData();
  }
}",0.9982838283828382
13794,"private void renderXPost(int position,ReaderXPostViewHolder holder){
  final ReaderPost post=getItem(position);
  if (post == null) {
    return;
  }
  if (post.hasPostAvatar()) {
    holder.imgAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(post.getPostAvatar(),mAvatarSzSmall),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultGravatarImage();
  }
  if (post.hasBlogImageUrl()) {
    holder.imgBlavatar.setImageUrl(GravatarUtils.fixGravatarUrl(post.getBlogImageUrl(),mAvatarSzSmall),WPNetworkImageView.ImageType.BLAVATAR);
  }
 else {
    holder.imgBlavatar.showDefaultBlavatarImage();
  }
  holder.txtTitle.setText(ReaderXPostUtils.getXPostTitle(post));
  holder.txtSubtitle.setText(ReaderXPostUtils.getXPostSubtitleHtml(post));
  checkLoadMore(position);
}","private void renderXPost(int position,ReaderXPostViewHolder holder){
  final ReaderPost post=getItem(position);
  if (post == null) {
    return;
  }
  if (post.hasPostAvatar()) {
    holder.imgAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(post.getPostAvatar(),mAvatarSzSmall),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultGravatarImageAndNullifyUrl();
  }
  if (post.hasBlogImageUrl()) {
    holder.imgBlavatar.setImageUrl(GravatarUtils.fixGravatarUrl(post.getBlogImageUrl(),mAvatarSzSmall),WPNetworkImageView.ImageType.BLAVATAR);
  }
 else {
    holder.imgBlavatar.showDefaultBlavatarImageAndNullifyUrl();
  }
  holder.txtTitle.setText(ReaderXPostUtils.getXPostTitle(post));
  holder.txtSubtitle.setText(ReaderXPostUtils.getXPostSubtitleHtml(post));
  checkLoadMore(position);
}",0.9838509316770186
13795,"private void showDiscoverData(final ReaderPostViewHolder postHolder,final ReaderPost post){
  final ReaderPostDiscoverData discoverData=post.getDiscoverData();
  if (discoverData == null) {
    postHolder.layoutDiscover.setVisibility(View.GONE);
    return;
  }
  postHolder.layoutDiscover.setVisibility(View.VISIBLE);
  postHolder.txtDiscover.setText(discoverData.getAttributionHtml());
switch (discoverData.getDiscoverType()) {
case EDITOR_PICK:
    if (discoverData.hasAvatarUrl()) {
      postHolder.imgDiscoverAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),WPNetworkImageView.ImageType.AVATAR);
    }
 else {
      postHolder.imgDiscoverAvatar.showDefaultGravatarImage();
    }
  postHolder.layoutDiscover.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mPostSelectedListener != null) {
        mPostSelectedListener.onPostSelected(post);
      }
    }
  }
);
break;
case SITE_PICK:
if (discoverData.hasAvatarUrl()) {
postHolder.imgDiscoverAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),WPNetworkImageView.ImageType.BLAVATAR);
}
 else {
postHolder.imgDiscoverAvatar.showDefaultBlavatarImage();
}
postHolder.layoutDiscover.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (discoverData.getBlogId() != 0) {
  ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),discoverData.getBlogId());
}
 else if (discoverData.hasBlogUrl()) {
  ReaderActivityLauncher.openUrl(v.getContext(),discoverData.getBlogUrl());
}
}
}
);
break;
default :
postHolder.layoutDiscover.setVisibility(View.GONE);
break;
}
}","private void showDiscoverData(final ReaderPostViewHolder postHolder,final ReaderPost post){
  final ReaderPostDiscoverData discoverData=post.getDiscoverData();
  if (discoverData == null) {
    postHolder.layoutDiscover.setVisibility(View.GONE);
    return;
  }
  postHolder.layoutDiscover.setVisibility(View.VISIBLE);
  postHolder.txtDiscover.setText(discoverData.getAttributionHtml());
switch (discoverData.getDiscoverType()) {
case EDITOR_PICK:
    if (discoverData.hasAvatarUrl()) {
      postHolder.imgDiscoverAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),WPNetworkImageView.ImageType.AVATAR);
    }
 else {
      postHolder.imgDiscoverAvatar.showDefaultGravatarImageAndNullifyUrl();
    }
  postHolder.layoutDiscover.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mPostSelectedListener != null) {
        mPostSelectedListener.onPostSelected(post);
      }
    }
  }
);
break;
case SITE_PICK:
if (discoverData.hasAvatarUrl()) {
postHolder.imgDiscoverAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),WPNetworkImageView.ImageType.BLAVATAR);
}
 else {
postHolder.imgDiscoverAvatar.showDefaultBlavatarImageAndNullifyUrl();
}
postHolder.layoutDiscover.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (discoverData.getBlogId() != 0) {
  ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),discoverData.getBlogId());
}
 else if (discoverData.hasBlogUrl()) {
  ReaderActivityLauncher.openUrl(v.getContext(),discoverData.getBlogUrl());
}
}
}
);
break;
default :
postHolder.layoutDiscover.setVisibility(View.GONE);
break;
}
}",0.9923664122137404
13796,"@Override public void onBindViewHolder(UserViewHolder holder,int position){
  final ReaderUser user=mUsers.get(position);
  holder.txtName.setText(user.getDisplayName());
  if (user.hasUrl()) {
    holder.txtUrl.setVisibility(View.VISIBLE);
    holder.txtUrl.setText(user.getUrlDomain());
    holder.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (user.hasBlogId()) {
          ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),user.blogId);
        }
      }
    }
);
  }
 else {
    holder.txtUrl.setVisibility(View.GONE);
    holder.itemView.setOnClickListener(null);
  }
  if (user.hasAvatarUrl()) {
    holder.imgAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(user.getAvatarUrl(),mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultGravatarImage();
  }
}","@Override public void onBindViewHolder(UserViewHolder holder,int position){
  final ReaderUser user=mUsers.get(position);
  holder.txtName.setText(user.getDisplayName());
  if (user.hasUrl()) {
    holder.txtUrl.setVisibility(View.VISIBLE);
    holder.txtUrl.setText(user.getUrlDomain());
    holder.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (user.hasBlogId()) {
          ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),user.blogId);
        }
      }
    }
);
  }
 else {
    holder.txtUrl.setVisibility(View.GONE);
    holder.itemView.setOnClickListener(null);
  }
  if (user.hasAvatarUrl()) {
    holder.imgAvatar.setImageUrl(GravatarUtils.fixGravatarUrl(user.getAvatarUrl(),mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultGravatarImageAndNullifyUrl();
  }
}",0.9926842993809792
13797,"public void showDefaultGravatarImage(){
  if (getContext() == null)   return;
  try {
    new ShapeBitmapTask(ShapeType.CIRCLE,null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,BitmapFactory.decodeResource(getContext().getResources(),R.drawable.ic_placeholder_gravatar_grey_lighten_20_100dp));
  }
 catch (  RejectedExecutionException e) {
    AppLog.w(AppLog.T.UTILS,""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
}","private void showDefaultGravatarImage(){
  if (getContext() == null)   return;
  try {
    new ShapeBitmapTask(ShapeType.CIRCLE,null).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,BitmapFactory.decodeResource(getContext().getResources(),R.drawable.ic_placeholder_gravatar_grey_lighten_20_100dp));
  }
 catch (  RejectedExecutionException e) {
    AppLog.w(AppLog.T.UTILS,""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.972909305064782
13798,"public void showDefaultBlavatarImage(){
  setImageResource(R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp);
}","private void showDefaultBlavatarImage(){
  setImageResource(R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp);
}",0.9620253164556962
13799,"ThemeViewHolder(View view){
  cardView=(CardView)view.findViewById(R.id.theme_grid_card);
  imageView=(NetworkImageView)view.findViewById(R.id.theme_grid_item_image);
  nameView=(TextView)view.findViewById(R.id.theme_grid_item_name);
  priceView=(TextView)view.findViewById(R.id.theme_grid_item_price);
  activeView=(TextView)view.findViewById(R.id.theme_grid_item_active);
  imageButton=(ImageButton)view.findViewById(R.id.theme_grid_item_image_button);
  frameLayout=(FrameLayout)view.findViewById(R.id.theme_grid_item_image_layout);
  detailsView=(RelativeLayout)view.findViewById(R.id.theme_grid_item_details);
}","ThemeViewHolder(View view){
  cardView=(CardView)view.findViewById(R.id.theme_grid_card);
  imageView=(WPNetworkImageView)view.findViewById(R.id.theme_grid_item_image);
  nameView=(TextView)view.findViewById(R.id.theme_grid_item_name);
  priceView=(TextView)view.findViewById(R.id.theme_grid_item_price);
  activeView=(TextView)view.findViewById(R.id.theme_grid_item_active);
  imageButton=(ImageButton)view.findViewById(R.id.theme_grid_item_image_button);
  frameLayout=(FrameLayout)view.findViewById(R.id.theme_grid_item_image_layout);
  detailsView=(RelativeLayout)view.findViewById(R.id.theme_grid_item_details);
}",0.9983792544570502
13800,"private void configureImageView(ThemeViewHolder themeViewHolder,String screenshotURL,final String themeId,final boolean isCurrent){
  String requestURL=(String)themeViewHolder.imageView.getTag();
  if (requestURL == null) {
    requestURL=screenshotURL;
    themeViewHolder.imageView.setDefaultImageResId(R.drawable.theme_loading);
    themeViewHolder.imageView.setTag(requestURL);
  }
  if (!requestURL.equals(screenshotURL)) {
    requestURL=screenshotURL;
  }
  themeViewHolder.imageView.setImageUrl(requestURL + THEME_IMAGE_PARAMETER + mViewWidth,WordPress.sImageLoader);
  themeViewHolder.frameLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (isCurrent) {
        mCallback.onTryAndCustomizeSelected(themeId);
      }
 else {
        mCallback.onViewSelected(themeId);
      }
    }
  }
);
}","private void configureImageView(ThemeViewHolder themeViewHolder,String screenshotURL,final String themeId,final boolean isCurrent){
  String requestURL=(String)themeViewHolder.imageView.getTag();
  if (requestURL == null) {
    requestURL=screenshotURL;
    themeViewHolder.imageView.setDefaultImageResId(R.drawable.theme_loading);
    themeViewHolder.imageView.setTag(requestURL);
  }
  if (!requestURL.equals(screenshotURL)) {
    requestURL=screenshotURL;
  }
  themeViewHolder.imageView.setImageUrl(requestURL + THEME_IMAGE_PARAMETER + mViewWidth,WPNetworkImageView.ImageType.PHOTO);
  themeViewHolder.frameLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (isCurrent) {
        mCallback.onTryAndCustomizeSelected(themeId);
      }
 else {
        mCallback.onViewSelected(themeId);
      }
    }
  }
);
}",0.9699074074074074
13801,"@Override public void onMovedToScrapHeap(View view){
  NetworkImageView niv=(NetworkImageView)view.findViewById(R.id.theme_grid_item_image);
  if (niv != null) {
    String requestUrl=(String)niv.getTag();
    if (requestUrl != null) {
      ImageContainer container=WordPress.sImageLoader.get(requestUrl,new ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
        }
        @Override public void onResponse(        ImageContainer response,        boolean isImmediate){
        }
      }
);
      container.cancelRequest();
    }
  }
}","@Override public void onMovedToScrapHeap(View view){
  WPNetworkImageView niv=(WPNetworkImageView)view.findViewById(R.id.theme_grid_item_image);
  if (niv != null) {
    String requestUrl=(String)niv.getTag();
    if (requestUrl != null) {
      ImageContainer container=WordPress.sImageLoader.get(requestUrl,new ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
        }
        @Override public void onResponse(        ImageContainer response,        boolean isImmediate){
        }
      }
);
      container.cancelRequest();
    }
  }
}",0.996551724137931
13802,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onMediaUploaded(OnMediaUploaded event){
  if (event.isError()) {
    AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    String errorMessage=WPMediaUtils.getErrorMessage(this,WPMediaUtils.isImageOptimizationEnabled(this,mSite),event.media,event.error);
    if (errorMessage != null) {
      ToastUtils.showToast(this,errorMessage,ToastUtils.Duration.LONG);
    }
 else {
      showMediaToastError(R.string.media_upload_error,event.error.message);
    }
    updateViews();
  }
 else   if (event.completed) {
    String title=""String_Node_Str"";
    if (event.media != null) {
      title=event.media.getTitle();
    }
    AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + title + ""String_Node_Str"");
    updateViews();
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onMediaUploaded(OnMediaUploaded event){
  if (event.isError()) {
    AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + event.error.type + ""String_Node_Str""+ event.error.message);
    String errorMessage=WPMediaUtils.getErrorMessage(this,mSite,event.media,event.error);
    if (errorMessage != null) {
      ToastUtils.showToast(this,errorMessage,ToastUtils.Duration.LONG);
    }
 else {
      showMediaToastError(R.string.media_upload_error,event.error.message);
    }
    updateViews();
  }
 else   if (event.completed) {
    String title=""String_Node_Str"";
    if (event.media != null) {
      title=event.media.getTitle();
    }
    AppLog.d(AppLog.T.MEDIA,""String_Node_Str"" + title + ""String_Node_Str"");
    updateViews();
  }
}",0.967741935483871
13803,"private void onUploadError(MediaModel media,MediaStore.MediaError error){
  String localMediaId=String.valueOf(media.getId());
  Map<String,Object> properties=null;
  MediaFile mf=FluxCUtils.mediaFileFromMediaModel(media);
  if (mf != null) {
    properties=AnalyticsUtils.getMediaProperties(this,mf.isVideo(),null,mf.getFilePath());
    properties.put(""String_Node_Str"",error.type.name());
  }
  AnalyticsTracker.track(Stat.EDITOR_UPLOAD_MEDIA_FAILED,properties);
  String errorMessage=WPMediaUtils.getErrorMessage(this,WPMediaUtils.isImageOptimizationEnabled(this,mSite),media,error);
  if (errorMessage == null) {
    errorMessage=TextUtils.isEmpty(error.message) ? getString(R.string.tap_to_try_again) : error.message;
  }
  if (mEditorMediaUploadListener != null) {
    mEditorMediaUploadListener.onMediaUploadFailed(localMediaId,errorMessage);
  }
  removeMediaFromPendingList(media);
}","private void onUploadError(MediaModel media,MediaStore.MediaError error){
  String localMediaId=String.valueOf(media.getId());
  Map<String,Object> properties=null;
  MediaFile mf=FluxCUtils.mediaFileFromMediaModel(media);
  if (mf != null) {
    properties=AnalyticsUtils.getMediaProperties(this,mf.isVideo(),null,mf.getFilePath());
    properties.put(""String_Node_Str"",error.type.name());
  }
  AnalyticsTracker.track(Stat.EDITOR_UPLOAD_MEDIA_FAILED,properties);
  String errorMessage=WPMediaUtils.getErrorMessage(this,mSite,media,error);
  if (errorMessage == null) {
    errorMessage=TextUtils.isEmpty(error.message) ? getString(R.string.tap_to_try_again) : error.message;
  }
  if (mEditorMediaUploadListener != null) {
    mEditorMediaUploadListener.onMediaUploadFailed(localMediaId,errorMessage);
  }
  removeMediaFromPendingList(media);
}",0.9677790563866512
13804,"private @NonNull String getErrorMessageFromMediaError(OnMediaUploaded event){
  String errorMessage=WPMediaUtils.getErrorMessage(mContext,true,event.media,event.error);
  if (errorMessage == null) {
    errorMessage=TextUtils.isEmpty(event.error.message) ? event.error.type.toString() : event.error.message;
  }
  return errorMessage;
}","private @NonNull String getErrorMessageFromMediaError(OnMediaUploaded event){
  String errorMessage=WPMediaUtils.getErrorMessage(mContext,true,true,event.media,event.error);
  if (errorMessage == null) {
    errorMessage=TextUtils.isEmpty(event.error.message) ? event.error.type.toString() : event.error.message;
  }
  return errorMessage;
}",0.9926144756277696
13805,"/** 
 * Given a media error returns the error message to display on the UI.
 * @param error The media error occurred
 * @return String  The associated error message.
 */
public static String getErrorMessage(final Context context,boolean suggestMediaOptimization,final MediaModel media,final MediaStore.MediaError error){
  if (context == null || media == null || error == null) {
    return null;
  }
switch (error.type) {
case FS_READ_PERMISSION_DENIED:
    return context.getString(R.string.error_media_insufficient_fs_permissions);
case NOT_FOUND:
  return context.getString(R.string.error_media_not_found);
case AUTHORIZATION_REQUIRED:
return context.getString(R.string.media_error_no_permission_upload);
case REQUEST_TOO_LARGE:
if (media.isVideo()) {
return context.getString(R.string.media_error_http_too_large_video_upload);
}
 else {
if (!suggestMediaOptimization) {
  return context.getString(R.string.media_error_http_too_large_photo_upload);
}
 else {
  return context.getString(R.string.media_error_http_too_large_photo_upload) + ""String_Node_Str"" + context.getString(R.string.media_error_suggest_optimize_image);
}
}
case SERVER_ERROR:
return context.getString(R.string.media_error_internal_server_error);
case TIMEOUT:
return context.getString(R.string.media_error_timeout);
case CONNECTION_ERROR:
return context.getString(R.string.connection_error) + ""String_Node_Str"" + context.getString(R.string.media_error_generic_connection_error);
case EXCEEDS_FILESIZE_LIMIT:
return context.getString(R.string.media_error_exceeds_php_filesize);
case EXCEEDS_MEMORY_LIMIT:
return context.getString(R.string.media_error_exceeds_memory_limit);
case PARSE_ERROR:
return context.getString(R.string.error_media_parse_error);
}
return null;
}","public static String getErrorMessage(final Context context,boolean isImageOptimizationEnabled,boolean isVideoOptimizationEnabled,final MediaModel media,final MediaStore.MediaError error){
  if (context == null || media == null || error == null) {
    return null;
  }
switch (error.type) {
case FS_READ_PERMISSION_DENIED:
    return context.getString(R.string.error_media_insufficient_fs_permissions);
case NOT_FOUND:
  return context.getString(R.string.error_media_not_found);
case AUTHORIZATION_REQUIRED:
return context.getString(R.string.media_error_no_permission_upload);
case REQUEST_TOO_LARGE:
if (media.isVideo()) {
return context.getString(R.string.media_error_http_too_large_video_upload);
}
 else {
if (isImageOptimizationEnabled) {
  return context.getString(R.string.media_error_http_too_large_photo_upload);
}
 else {
  return context.getString(R.string.media_error_http_too_large_photo_upload) + ""String_Node_Str"" + context.getString(R.string.media_error_suggest_optimize_image);
}
}
case SERVER_ERROR:
return context.getString(R.string.media_error_internal_server_error);
case TIMEOUT:
return context.getString(R.string.media_error_timeout);
case CONNECTION_ERROR:
return context.getString(R.string.connection_error) + ""String_Node_Str"" + context.getString(R.string.media_error_generic_connection_error);
case EXCEEDS_FILESIZE_LIMIT:
return context.getString(R.string.media_error_exceeds_php_filesize);
case EXCEEDS_MEMORY_LIMIT:
return context.getString(R.string.media_error_exceeds_memory_limit);
case PARSE_ERROR:
return context.getString(R.string.error_media_parse_error);
}
return null;
}",0.9229390681003584
13806,"@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      imageLoader.get(mediaUrl,new ImageLoader.ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
          ToastUtils.showToast(getActivity(),R.string.error_media_load);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          content.insertImage(drawable,attributes);
        }
        @Override public void onResponse(        ImageLoader.ImageContainer container,        boolean isImmediate){
          Bitmap downloadedBitmap=container.getBitmap();
          if (downloadedBitmap == null) {
            return;
          }
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
          if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
            ToastUtils.showToast(getActivity(),R.string.error_media_small);
            Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
            content.insertImage(drawable,attributes);
            return;
          }
          Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
,0,0);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_ID_WP,localMediaId);
      attrs.setValue(ATTR_SRC,safeMediaUrl);
      attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
      addDefaultSizeClassIfMissing(attrs);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        drawable.setBounds(0,0,maxWidth,maxWidth);
        content.insertImage(drawable,attrs);
      }
      AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.setOverlay(localMediaIdPredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(localMediaIdPredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
      content.updateElementAttributes(localMediaIdPredicate,attrs);
      content.refreshText();
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}","@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      imageLoader.get(mediaUrl,new ImageLoader.ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
          ToastUtils.showToast(getActivity(),R.string.error_media_load);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          content.insertImage(drawable,attributes);
        }
        @Override public void onResponse(        ImageLoader.ImageContainer container,        boolean isImmediate){
          Bitmap downloadedBitmap=container.getBitmap();
          if (downloadedBitmap == null) {
            return;
          }
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
          if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
            ToastUtils.showToast(getActivity(),R.string.error_media_small);
            Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
            content.insertImage(drawable,attributes);
            return;
          }
          Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
,0,0);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_ID_WP,localMediaId);
      attrs.setValue(ATTR_SRC,safeMediaUrl);
      attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
      addDefaultSizeClassIfMissing(attrs);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        drawable.setBounds(0,0,maxWidth,maxWidth);
        content.insertImage(drawable,attrs);
      }
      AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.setOverlay(localMediaIdPredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(localMediaIdPredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
      content.updateElementAttributes(localMediaIdPredicate,attrs);
      content.resetAttributedMediaSpan(localMediaIdPredicate);
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}",0.9928759894459104
13807,"public void onMediaTapped(final String localMediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    if (mUploadingMedia.containsKey(localMediaId)) {
      mEditorFragmentListener.onMediaUploadCancelClicked(localMediaId,true);
switch (mediaType) {
case IMAGE:
        content.removeMedia(mTappedImagePredicate);
      break;
case VIDEO:
  }
  mUploadingMedia.remove(localMediaId);
}
 else {
  ToastUtils.showToast(getActivity(),R.string.upload_finished_toast).show();
}
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (mFailedMediaIds.contains(localMediaId)) {
mEditorFragmentListener.onMediaRetryClicked(localMediaId);
}
switch (mediaType) {
case IMAGE:
AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(mTappedImagePredicate));
attributesWithClass.removeClass(ATTR_STATUS_FAILED);
attributesWithClass.addClass(ATTR_STATUS_UPLOADING);
content.setOverlay(mTappedImagePredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
progressDrawable.setBounds(0,0,0,4);
content.setOverlay(mTappedImagePredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
content.updateElementAttributes(mTappedImagePredicate,attributesWithClass.getAttributes());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.remove(localMediaId);
mUploadingMedia.put(localMediaId,mediaType);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
dialogBundle.putBoolean(EXTRA_ENABLED_AZTEC,true);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
break;
}
}","public void onMediaTapped(final String localMediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    if (mUploadingMedia.containsKey(localMediaId)) {
      mEditorFragmentListener.onMediaUploadCancelClicked(localMediaId,true);
switch (mediaType) {
case IMAGE:
        content.removeMedia(mTappedImagePredicate);
      break;
case VIDEO:
  }
  mUploadingMedia.remove(localMediaId);
}
 else {
  ToastUtils.showToast(getActivity(),R.string.upload_finished_toast).show();
}
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (mFailedMediaIds.contains(localMediaId)) {
mEditorFragmentListener.onMediaRetryClicked(localMediaId);
}
switch (mediaType) {
case IMAGE:
AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(mTappedImagePredicate));
attributesWithClass.removeClass(ATTR_STATUS_FAILED);
attributesWithClass.addClass(ATTR_STATUS_UPLOADING);
content.setOverlay(mTappedImagePredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
progressDrawable.setBounds(0,0,0,4);
content.setOverlay(mTappedImagePredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
content.updateElementAttributes(mTappedImagePredicate,attributesWithClass.getAttributes());
content.resetAttributedMediaSpan(mTappedImagePredicate);
break;
case VIDEO:
}
mFailedMediaIds.remove(localMediaId);
mUploadingMedia.put(localMediaId,mediaType);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
dialogBundle.putBoolean(EXTRA_ENABLED_AZTEC,true);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
break;
}
}",0.9929797191887676
13808,"@Override public void onMediaUploadSucceeded(final String localMediaId,final MediaFile mediaFile){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    String remoteUrl=Utils.escapeQuotes(mediaFile.getFileURL());
    if (mediaType.equals(MediaType.IMAGE)) {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_SRC,remoteUrl);
      addDefaultSizeClassIfMissing(attrs);
      ImagePredicate predicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.clearOverlays(predicate);
      content.updateElementAttributes(predicate,attrs);
      content.refreshText();
      mUploadingMedia.remove(localMediaId);
    }
 else     if (mediaType.equals(MediaType.VIDEO)) {
    }
  }
}","@Override public void onMediaUploadSucceeded(final String localMediaId,final MediaFile mediaFile){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    String remoteUrl=Utils.escapeQuotes(mediaFile.getFileURL());
    if (mediaType.equals(MediaType.IMAGE)) {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_SRC,remoteUrl);
      addDefaultSizeClassIfMissing(attrs);
      ImagePredicate predicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.resetAttributedMediaSpan(predicate);
      content.clearOverlays(predicate);
      content.updateElementAttributes(predicate,attrs);
      mUploadingMedia.remove(localMediaId);
    }
 else     if (mediaType.equals(MediaType.VIDEO)) {
    }
  }
}",0.9503105590062112
13809,"@Override public void onMediaUploadProgress(final String localMediaId,final float progress){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
    content.setOverlayLevel(localMediaIdPredicate,1,(int)(progress * 10000));
    content.refreshText();
  }
}","@Override public void onMediaUploadProgress(final String localMediaId,final float progress){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
    content.setOverlayLevel(localMediaIdPredicate,1,(int)(progress * 10000));
    content.resetAttributedMediaSpan(localMediaIdPredicate);
  }
}",0.9407894736842104
13810,"@Override public void onMediaUploadFailed(final String localMediaId,final String errorMessage){
  if (!isAdded()) {
    return;
  }
  MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
switch (mediaType) {
case IMAGE:
      AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(ImagePredicate.getLocalMediaIdPredicate(localMediaId)));
    attributesWithClass.removeClass(ATTR_STATUS_UPLOADING);
  attributesWithClass.addClass(ATTR_STATUS_FAILED);
overlayFailedMedia(localMediaId,attributesWithClass.getAttributes());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.add(localMediaId);
mUploadingMedia.remove(localMediaId);
}
}","@Override public void onMediaUploadFailed(final String localMediaId,final String errorMessage){
  if (!isAdded()) {
    return;
  }
  MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
switch (mediaType) {
case IMAGE:
      ImagePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
    AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(localMediaIdPredicate));
  attributesWithClass.removeClass(ATTR_STATUS_UPLOADING);
attributesWithClass.addClass(ATTR_STATUS_FAILED);
overlayFailedMedia(localMediaId,attributesWithClass.getAttributes());
content.resetAttributedMediaSpan(localMediaIdPredicate);
break;
case VIDEO:
}
mFailedMediaIds.add(localMediaId);
mUploadingMedia.remove(localMediaId);
}
}",0.8554376657824934
13811,"/** 
 * Given a media error returns the error message to display on the UI.
 * @param error The media error occurred
 * @return String  The associated error message.
 */
public static String getErrorMessage(final Context context,boolean suggestMediaOptimization,final MediaModel media,final MediaStore.MediaError error){
  if (context == null || media == null || error == null) {
    return null;
  }
switch (error.type) {
case FS_READ_PERMISSION_DENIED:
    return context.getString(R.string.error_media_insufficient_fs_permissions);
case NOT_FOUND:
  return context.getString(R.string.error_media_not_found);
case AUTHORIZATION_REQUIRED:
return context.getString(R.string.media_error_no_permission_upload);
case REQUEST_TOO_LARGE:
if (media.isVideo()) {
return context.getString(R.string.media_error_http_too_large_video_upload);
}
 else {
if (!suggestMediaOptimization) {
  return context.getString(R.string.media_error_http_too_large_photo_upload);
}
 else {
  return context.getString(R.string.media_error_http_too_large_photo_upload) + ""String_Node_Str"" + context.getString(R.string.media_error_suggest_optimize_image);
}
}
case SERVER_ERROR:
return context.getString(R.string.media_error_internal_server_error);
case TIMEOUT:
return context.getString(R.string.media_error_timeout);
case CONNECTION_ERROR:
return context.getString(R.string.media_error_generic_connection_error);
case EXCEEDS_FILESIZE_LIMIT:
return context.getString(R.string.media_error_exceeds_php_filesize);
case EXCEEDS_MEMORY_LIMIT:
return context.getString(R.string.media_error_exceeds_memory_limit);
case PARSE_ERROR:
return context.getString(R.string.error_media_parse_error);
}
return null;
}","/** 
 * Given a media error returns the error message to display on the UI.
 * @param error The media error occurred
 * @return String  The associated error message.
 */
public static String getErrorMessage(final Context context,boolean suggestMediaOptimization,final MediaModel media,final MediaStore.MediaError error){
  if (context == null || media == null || error == null) {
    return null;
  }
switch (error.type) {
case FS_READ_PERMISSION_DENIED:
    return context.getString(R.string.error_media_insufficient_fs_permissions);
case NOT_FOUND:
  return context.getString(R.string.error_media_not_found);
case AUTHORIZATION_REQUIRED:
return context.getString(R.string.media_error_no_permission_upload);
case REQUEST_TOO_LARGE:
if (media.isVideo()) {
return context.getString(R.string.media_error_http_too_large_video_upload);
}
 else {
if (!suggestMediaOptimization) {
  return context.getString(R.string.media_error_http_too_large_photo_upload);
}
 else {
  return context.getString(R.string.media_error_http_too_large_photo_upload) + ""String_Node_Str"" + context.getString(R.string.media_error_suggest_optimize_image);
}
}
case SERVER_ERROR:
return context.getString(R.string.media_error_internal_server_error);
case TIMEOUT:
return context.getString(R.string.media_error_timeout);
case CONNECTION_ERROR:
return context.getString(R.string.connection_error) + ""String_Node_Str"" + context.getString(R.string.media_error_generic_connection_error);
case EXCEEDS_FILESIZE_LIMIT:
return context.getString(R.string.media_error_exceeds_php_filesize);
case EXCEEDS_MEMORY_LIMIT:
return context.getString(R.string.media_error_exceeds_memory_limit);
case PARSE_ERROR:
return context.getString(R.string.error_media_parse_error);
}
return null;
}",0.98036917667741
13812,"@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      imageLoader.get(mediaUrl,new ImageLoader.ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
          ToastUtils.showToast(getActivity(),R.string.error_media_load);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          content.insertImage(drawable,attributes);
        }
        @Override public void onResponse(        ImageLoader.ImageContainer container,        boolean isImmediate){
          Bitmap downloadedBitmap=container.getBitmap();
          if (downloadedBitmap == null) {
            return;
          }
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
          if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
            ToastUtils.showToast(getActivity(),R.string.error_media_small);
            Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
            content.insertImage(drawable,attributes);
            return;
          }
          Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
,0,0);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_ID_WP,localMediaId);
      attrs.setValue(ATTR_SRC,safeMediaUrl);
      attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        drawable.setBounds(0,0,maxWidth,maxWidth);
        content.insertImage(drawable,attrs);
      }
      AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.setOverlay(localMediaIdPredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(localMediaIdPredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
      content.updateElementAttributes(localMediaIdPredicate,attrs);
      content.refreshText();
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}","@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      imageLoader.get(mediaUrl,new ImageLoader.ImageListener(){
        @Override public void onErrorResponse(        VolleyError error){
          ToastUtils.showToast(getActivity(),R.string.error_media_load);
          Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          content.insertImage(drawable,attributes);
        }
        @Override public void onResponse(        ImageLoader.ImageContainer container,        boolean isImmediate){
          Bitmap downloadedBitmap=container.getBitmap();
          if (downloadedBitmap == null) {
            return;
          }
          AztecAttributes attributes=new AztecAttributes();
          attributes.setValue(ATTR_SRC,mediaUrl);
          setAttributeValuesIfNotDefault(attributes,mediaFile);
          int minimumDimension=DisplayUtils.dpToPx(getActivity(),MIN_BITMAP_DIMENSION_DP);
          if (downloadedBitmap.getHeight() < minimumDimension || downloadedBitmap.getWidth() < minimumDimension) {
            ToastUtils.showToast(getActivity(),R.string.error_media_small);
            Drawable drawable=getResources().getDrawable(R.drawable.ic_image_loading_grey_a_40_48dp);
            content.insertImage(drawable,attributes);
            return;
          }
          Bitmap resizedBitmap=ImageUtils.getScaledBitmapAtLongestSide(downloadedBitmap,DisplayUtils.getDisplayPixelWidth(getActivity()));
          content.insertImage(new BitmapDrawable(getResources(),resizedBitmap),attributes);
        }
      }
,0,0);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_ID_WP,localMediaId);
      attrs.setValue(ATTR_SRC,safeMediaUrl);
      attrs.setValue(ATTR_CLASS,ATTR_STATUS_UPLOADING);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertImage(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable drawable=getResources().getDrawable(R.drawable.ic_image_failed_grey_a_40_48dp);
        drawable.setBounds(0,0,maxWidth,maxWidth);
        content.insertImage(drawable,attrs);
      }
      AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.setOverlay(localMediaIdPredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(localMediaIdPredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
      content.updateElementAttributes(localMediaIdPredicate,attrs);
      content.resetAttributedMediaSpan(localMediaIdPredicate);
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}",0.9927942353883108
13813,"public void onMediaTapped(final String localMediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    if (mUploadingMedia.containsKey(localMediaId)) {
      mEditorFragmentListener.onMediaUploadCancelClicked(localMediaId,true);
switch (mediaType) {
case IMAGE:
        content.removeMedia(mTappedImagePredicate);
      break;
case VIDEO:
  }
  mUploadingMedia.remove(localMediaId);
}
 else {
  ToastUtils.showToast(getActivity(),R.string.upload_finished_toast).show();
}
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (mFailedMediaIds.contains(localMediaId)) {
mEditorFragmentListener.onMediaRetryClicked(localMediaId);
}
switch (mediaType) {
case IMAGE:
AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(mTappedImagePredicate));
attributesWithClass.removeClass(ATTR_STATUS_FAILED);
attributesWithClass.addClass(ATTR_STATUS_UPLOADING);
content.setOverlay(mTappedImagePredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
progressDrawable.setBounds(0,0,0,4);
content.setOverlay(mTappedImagePredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
content.updateElementAttributes(mTappedImagePredicate,attributesWithClass.getAttributes());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.remove(localMediaId);
mUploadingMedia.put(localMediaId,mediaType);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
dialogBundle.putBoolean(EXTRA_ENABLED_AZTEC,true);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
break;
}
}","public void onMediaTapped(final String localMediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    if (mUploadingMedia.containsKey(localMediaId)) {
      mEditorFragmentListener.onMediaUploadCancelClicked(localMediaId,true);
switch (mediaType) {
case IMAGE:
        content.removeMedia(mTappedImagePredicate);
      break;
case VIDEO:
  }
  mUploadingMedia.remove(localMediaId);
}
 else {
  ToastUtils.showToast(getActivity(),R.string.upload_finished_toast).show();
}
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (mFailedMediaIds.contains(localMediaId)) {
mEditorFragmentListener.onMediaRetryClicked(localMediaId);
}
switch (mediaType) {
case IMAGE:
AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(mTappedImagePredicate));
attributesWithClass.removeClass(ATTR_STATUS_FAILED);
attributesWithClass.addClass(ATTR_STATUS_UPLOADING);
content.setOverlay(mTappedImagePredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
progressDrawable.setBounds(0,0,0,4);
content.setOverlay(mTappedImagePredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
content.updateElementAttributes(mTappedImagePredicate,attributesWithClass.getAttributes());
content.resetAttributedMediaSpan(mTappedImagePredicate);
break;
case VIDEO:
}
mFailedMediaIds.remove(localMediaId);
mUploadingMedia.put(localMediaId,mediaType);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
dialogBundle.putBoolean(EXTRA_ENABLED_AZTEC,true);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
break;
}
}",0.9929797191887676
13814,"@Override public void onMediaUploadSucceeded(final String localMediaId,final MediaFile mediaFile){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    String remoteUrl=Utils.escapeQuotes(mediaFile.getFileURL());
    if (mediaType.equals(MediaType.IMAGE)) {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_SRC,remoteUrl);
      ImagePredicate predicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.clearOverlays(predicate);
      content.updateElementAttributes(predicate,attrs);
      content.refreshText();
      mUploadingMedia.remove(localMediaId);
    }
 else     if (mediaType.equals(MediaType.VIDEO)) {
    }
  }
}","@Override public void onMediaUploadSucceeded(final String localMediaId,final MediaFile mediaFile){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    String remoteUrl=Utils.escapeQuotes(mediaFile.getFileURL());
    if (mediaType.equals(MediaType.IMAGE)) {
      AztecAttributes attrs=new AztecAttributes();
      attrs.setValue(ATTR_SRC,remoteUrl);
      ImagePredicate predicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
      content.resetAttributedMediaSpan(predicate);
      content.clearOverlays(predicate);
      content.updateElementAttributes(predicate,attrs);
      mUploadingMedia.remove(localMediaId);
    }
 else     if (mediaType.equals(MediaType.VIDEO)) {
    }
  }
}",0.94750656167979
13815,"@Override public void onMediaUploadProgress(final String localMediaId,final float progress){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
    content.setOverlayLevel(localMediaIdPredicate,1,(int)(progress * 10000));
    content.refreshText();
  }
}","@Override public void onMediaUploadProgress(final String localMediaId,final float progress){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    AztecText.AttributePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
    content.setOverlayLevel(localMediaIdPredicate,1,(int)(progress * 10000));
    content.resetAttributedMediaSpan(localMediaIdPredicate);
  }
}",0.9407894736842104
13816,"@Override public void onMediaUploadFailed(final String localMediaId,final String errorMessage){
  if (!isAdded()) {
    return;
  }
  MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
switch (mediaType) {
case IMAGE:
      AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(ImagePredicate.getLocalMediaIdPredicate(localMediaId)));
    attributesWithClass.removeClass(ATTR_STATUS_UPLOADING);
  attributesWithClass.addClass(ATTR_STATUS_FAILED);
overlayFailedMedia(localMediaId,attributesWithClass.getAttributes());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.add(localMediaId);
mUploadingMedia.remove(localMediaId);
}
}","@Override public void onMediaUploadFailed(final String localMediaId,final String errorMessage){
  if (!isAdded()) {
    return;
  }
  MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
switch (mediaType) {
case IMAGE:
      ImagePredicate localMediaIdPredicate=ImagePredicate.getLocalMediaIdPredicate(localMediaId);
    AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(localMediaIdPredicate));
  attributesWithClass.removeClass(ATTR_STATUS_UPLOADING);
attributesWithClass.addClass(ATTR_STATUS_FAILED);
overlayFailedMedia(localMediaId,attributesWithClass.getAttributes());
content.resetAttributedMediaSpan(localMediaIdPredicate);
break;
case VIDEO:
}
mFailedMediaIds.add(localMediaId);
mUploadingMedia.remove(localMediaId);
}
}",0.8554376657824934
13817,"private void updatePostFormatKeysAndNames(){
  if (!isAdded()) {
    return;
  }
  mPostFormatKeys=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_keys)));
  mPostFormatNames=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_display_names)));
  List<PostFormatModel> postFormatModels=mSiteStore.getPostFormats(mSite);
  for (  PostFormatModel postFormatModel : postFormatModels) {
    if (!mPostFormatKeys.contains(postFormatModel.getSlug())) {
      mPostFormatKeys.add(postFormatModel.getSlug());
      mPostFormatNames.add(postFormatModel.getDisplayName());
    }
  }
}","private void updatePostFormatKeysAndNames(){
  if (getActivity() == null) {
    return;
  }
  mPostFormatKeys=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_keys)));
  mPostFormatNames=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_display_names)));
  List<PostFormatModel> postFormatModels=mSiteStore.getPostFormats(mSite);
  for (  PostFormatModel postFormatModel : postFormatModels) {
    if (!mPostFormatKeys.contains(postFormatModel.getSlug())) {
      mPostFormatKeys.add(postFormatModel.getSlug());
      mPostFormatNames.add(postFormatModel.getDisplayName());
    }
  }
}",0.9757623143080532
13818,"private void saveMedia(){
  String[] permissionList={Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE};
  if (!PermissionUtils.checkAndRequestPermissions(this,WPPermissionUtils.MEDIA_PREVIEW_PERMISSION_REQUEST_CODE,permissionList)) {
    return;
  }
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  MediaModel media=mMediaStore.getMediaWithLocalId(mMediaId);
  if (media == null) {
    ToastUtils.showToast(this,R.string.error_media_not_found);
    return;
  }
  ToastUtils.showToast(this,R.string.media_downloading);
  DownloadManager dm=(DownloadManager)getSystemService(DOWNLOAD_SERVICE);
  DownloadManager.Request request=new DownloadManager.Request(Uri.parse(media.getUrl()));
  request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,media.getFileName());
  request.allowScanningByMediaScanner();
  request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE);
  mDownloadId=dm.enqueue(request);
  invalidateOptionsMenu();
}","private void saveMedia(){
  String[] permissionList={Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE};
  if (!PermissionUtils.checkAndRequestPermissions(this,WPPermissionUtils.MEDIA_PREVIEW_PERMISSION_REQUEST_CODE,permissionList)) {
    return;
  }
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  MediaModel media=mMediaStore.getMediaWithLocalId(mMediaId);
  if (media == null) {
    ToastUtils.showToast(this,R.string.error_media_not_found);
    return;
  }
  DownloadManager dm=(DownloadManager)getSystemService(DOWNLOAD_SERVICE);
  DownloadManager.Request request=new DownloadManager.Request(Uri.parse(media.getUrl()));
  try {
    request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,media.getFileName());
  }
 catch (  IllegalStateException error) {
    AppLog.e(AppLog.T.MEDIA,error);
    ToastUtils.showToast(MediaPreviewActivity.this,R.string.error_media_save);
    return;
  }
  request.allowScanningByMediaScanner();
  request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE);
  mDownloadId=dm.enqueue(request);
  invalidateOptionsMenu();
  ToastUtils.showToast(this,R.string.media_downloading);
}",0.8646209386281588
13819,"private String getSaveButtonText(){
  if (!mSite.getHasCapabilityPublishPosts()) {
    return getString(R.string.submit_for_review);
  }
switch (PostStatus.fromPost(mPost)) {
case SCHEDULED:
    return getString(R.string.schedule_verb);
case PUBLISHED:
case UNKNOWN:
  if (mPost.isLocalDraft()) {
    return getString(R.string.publish_post);
  }
 else {
    return getString(R.string.update_verb);
  }
default :
if (mPost.isLocalDraft()) {
  return getString(R.string.save);
}
 else {
  return getString(R.string.update_verb);
}
}
}","private String getSaveButtonText(){
  if (SiteUtils.isAccessedViaWPComRest(mSite) && !mSite.getHasCapabilityPublishPosts()) {
    return getString(R.string.submit_for_review);
  }
switch (PostStatus.fromPost(mPost)) {
case SCHEDULED:
    return getString(R.string.schedule_verb);
case PUBLISHED:
case UNKNOWN:
  if (mPost.isLocalDraft()) {
    return getString(R.string.publish_post);
  }
 else {
    return getString(R.string.update_verb);
  }
default :
if (mPost.isLocalDraft()) {
  return getString(R.string.save);
}
 else {
  return getString(R.string.update_verb);
}
}
}",0.9611562782294488
13820,"@Override public void onSettingsUpdated(Exception error){
  if (error == null && TextUtils.isEmpty(mPost.getPostFormat())) {
    mPost.setPostFormat(mSiteSettings.getDefaultPostFormat());
    if (mPostFormatKeys != null && mPostFormatNames != null && mPostFormatTextView != null) {
      int idx=mPostFormatKeys.indexOf(mPost.getPostFormat());
      if (idx != -1) {
        mPostFormatTextView.setText(getPostFormatNameFromKey(mPost.getPostFormat()));
      }
    }
  }
}","@Override public void onSettingsUpdated(Exception error){
  if (error == null && TextUtils.isEmpty(mPost.getPostFormat())) {
    updatePostFormat(mSiteSettings.getDefaultPostFormat());
  }
}",0.5619335347432024
13821,"private void updateSiteAndFetchPostOrFinishActivity(Bundle savedInstanceState){
  int localPostId;
  if (savedInstanceState == null) {
    if (getArguments() != null) {
      mSite=(SiteModel)getArguments().getSerializable(WordPress.SITE);
      localPostId=getArguments().getInt(EXTRA_POST_LOCAL_ID);
    }
 else {
      mSite=(SiteModel)getActivity().getIntent().getSerializableExtra(WordPress.SITE);
      localPostId=getActivity().getIntent().getIntExtra(EXTRA_POST_LOCAL_ID,0);
    }
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    localPostId=savedInstanceState.getInt(EXTRA_POST_LOCAL_ID);
  }
  if (mSite == null) {
    ToastUtils.showToast(getActivity(),R.string.blog_not_found,ToastUtils.Duration.SHORT);
    getActivity().finish();
  }
  if (localPostId != 0) {
    mPost=mPostStore.getPostByLocalPostId(localPostId);
  }
  if (mPost == null) {
    ToastUtils.showToast(getActivity(),R.string.post_not_found,ToastUtils.Duration.SHORT);
    getActivity().finish();
  }
  fetchSiteSettingsAndUpdatePostFormat();
}","private void updateSiteAndFetchPostOrFinishActivity(Bundle savedInstanceState){
  int localPostId;
  if (savedInstanceState == null) {
    if (getArguments() != null) {
      mSite=(SiteModel)getArguments().getSerializable(WordPress.SITE);
      localPostId=getArguments().getInt(EXTRA_POST_LOCAL_ID);
    }
 else {
      mSite=(SiteModel)getActivity().getIntent().getSerializableExtra(WordPress.SITE);
      localPostId=getActivity().getIntent().getIntExtra(EXTRA_POST_LOCAL_ID,0);
    }
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    localPostId=savedInstanceState.getInt(EXTRA_POST_LOCAL_ID);
  }
  if (mSite == null) {
    ToastUtils.showToast(getActivity(),R.string.blog_not_found,ToastUtils.Duration.SHORT);
    getActivity().finish();
  }
  if (localPostId != 0) {
    mPost=mPostStore.getPostByLocalPostId(localPostId);
  }
  if (mPost == null) {
    ToastUtils.showToast(getActivity(),R.string.post_not_found,ToastUtils.Duration.SHORT);
    getActivity().finish();
  }
}",0.9798464491362764
13822,"private void initSettingsFields(){
  mExcerptTextView.setText(mPost.getExcerpt());
  mSlugTextView.setText(mPost.getSlug());
  mPostFormatTextView.setText(getPostFormatNameFromKey(mPost.getPostFormat()));
  mPasswordTextView.setText(mPost.getPassword());
  updateTagsTextView();
  updateStatusTextView();
  updatePublishDateTextView();
  updateCategoriesTextView();
  if (AppPrefs.isVisualEditorEnabled() || AppPrefs.isAztecEditorEnabled()) {
    updateFeaturedImage(mPost.getFeaturedImageId());
  }
}","private void initSettingsFields(){
  mExcerptTextView.setText(mPost.getExcerpt());
  mSlugTextView.setText(mPost.getSlug());
  mPasswordTextView.setText(mPost.getPassword());
  updatePostFormatTextView();
  updateTagsTextView();
  updateStatusTextView();
  updatePublishDateTextView();
  updateCategoriesTextView();
  if (AppPrefs.isVisualEditorEnabled() || AppPrefs.isAztecEditorEnabled()) {
    updateFeaturedImage(mPost.getFeaturedImageId());
  }
}",0.8298319327731093
13823,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getActivity().getApplicationContext()).component().inject(this);
  mDispatcher.register(this);
  if (getActivity() != null) {
    PreferenceManager.setDefaultValues(getActivity(),R.xml.account_settings,false);
  }
  updateSiteAndFetchPostOrFinishActivity(savedInstanceState);
  updatePostFormatKeysAndNames();
  mDispatcher.dispatch(SiteActionBuilder.newFetchPostFormatsAction(mSite));
  if (!mPost.isPage()) {
    mDispatcher.dispatch(TaxonomyActionBuilder.newFetchCategoriesAction(mSite));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getActivity().getApplicationContext()).component().inject(this);
  mDispatcher.register(this);
  if (getActivity() != null) {
    PreferenceManager.setDefaultValues(getActivity(),R.xml.account_settings,false);
  }
  updateSiteAndFetchPostOrFinishActivity(savedInstanceState);
  updatePostFormatKeysAndNames();
  fetchSiteSettingsAndUpdateDefaultPostFormat();
  mDispatcher.dispatch(SiteActionBuilder.newFetchPostFormatsAction(mSite));
  if (!mPost.isPage()) {
    mDispatcher.dispatch(TaxonomyActionBuilder.newFetchCategoriesAction(mSite));
  }
}",0.9612648221343874
13824,"private void showPostFormatDialog(){
  int checkedItem=0;
  if (!TextUtils.isEmpty(mPost.getPostFormat())) {
    for (int i=0; i < mPostFormatKeys.size(); i++) {
      if (mPost.getPostFormat().equals(mPostFormatKeys.get(i))) {
        checkedItem=i;
        break;
      }
    }
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  builder.setTitle(R.string.post_settings_post_format);
  builder.setSingleChoiceItems(mPostFormatNames.toArray(new CharSequence[0]),checkedItem,null);
  builder.setPositiveButton(R.string.dialog_button_ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      ListView listView=((AlertDialog)dialog).getListView();
      String formatName=(String)listView.getAdapter().getItem(listView.getCheckedItemPosition());
      mPostFormatTextView.setText(formatName);
      mPost.setPostFormat(getPostFormatKeyFromName(formatName));
    }
  }
);
  builder.setNegativeButton(R.string.cancel,null);
  builder.show();
}","private void showPostFormatDialog(){
  int checkedItem=0;
  if (!TextUtils.isEmpty(mPost.getPostFormat())) {
    for (int i=0; i < mPostFormatKeys.size(); i++) {
      if (mPost.getPostFormat().equals(mPostFormatKeys.get(i))) {
        checkedItem=i;
        break;
      }
    }
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  builder.setTitle(R.string.post_settings_post_format);
  builder.setSingleChoiceItems(mPostFormatNames.toArray(new CharSequence[0]),checkedItem,null);
  builder.setPositiveButton(R.string.dialog_button_ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      ListView listView=((AlertDialog)dialog).getListView();
      String formatName=(String)listView.getAdapter().getItem(listView.getCheckedItemPosition());
      updatePostFormat(getPostFormatKeyFromName(formatName));
    }
  }
);
  builder.setNegativeButton(R.string.cancel,null);
  builder.show();
}",0.9696969696969696
13825,"@Override public void onDestroy(){
  for (  MediaModel oneUpload : mInProgressUploads) {
    cancelUpload(oneUpload);
  }
  mDispatcher.unregister(this);
  EventBus.getDefault().unregister(this);
  AppLog.i(T.MEDIA,""String_Node_Str"");
  super.onDestroy();
}","@Override public void onDestroy(){
  for (  MediaModel oneUpload : mInProgressUploads) {
    cancelUpload(oneUpload,false);
  }
  mDispatcher.unregister(this);
  EventBus.getDefault().unregister(this);
  AppLog.i(T.MEDIA,""String_Node_Str"");
  super.onDestroy();
}",0.9884615384615384
13826,"@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(PostEvents.PostMediaCanceled event){
  if (event.post == null) {
    return;
  }
  for (  MediaModel inProgressUpload : mInProgressUploads) {
    if (inProgressUpload.getLocalPostId() == event.post.getId()) {
      cancelUpload(inProgressUpload);
    }
  }
  for (  MediaModel pendingUpload : mPendingUploads) {
    if (pendingUpload.getLocalPostId() == event.post.getId()) {
      cancelUpload(pendingUpload);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void onEventMainThread(PostEvents.PostMediaCanceled event){
  if (event.post == null) {
    return;
  }
  for (  MediaModel inProgressUpload : mInProgressUploads) {
    if (inProgressUpload.getLocalPostId() == event.post.getId()) {
      cancelUpload(inProgressUpload,true);
    }
  }
  for (  MediaModel pendingUpload : mPendingUploads) {
    if (pendingUpload.getLocalPostId() == event.post.getId()) {
      cancelUpload(pendingUpload,true);
    }
  }
}",0.9898785425101214
13827,"private void dispatchCancelAction(@NonNull final MediaModel media,@NonNull final SiteModel site){
  AppLog.i(T.MEDIA,""String_Node_Str"" + media.getId() + ""String_Node_Str""+ media.getFilePath());
  CancelMediaPayload payload=new CancelMediaPayload(site,media);
  mDispatcher.dispatch(MediaActionBuilder.newCancelMediaUploadAction(payload));
}","private void dispatchCancelAction(@NonNull final MediaModel media,@NonNull final SiteModel site,boolean delete){
  AppLog.i(T.MEDIA,""String_Node_Str"" + media.getId() + ""String_Node_Str""+ media.getFilePath());
  CancelMediaPayload payload=new CancelMediaPayload(site,media,delete);
  mDispatcher.dispatch(MediaActionBuilder.newCancelMediaUploadAction(payload));
}",0.9686609686609686
13828,"private void cancelUpload(MediaModel oneUpload){
  if (oneUpload != null) {
    SiteModel site=mSiteStore.getSiteByLocalId(oneUpload.getLocalSiteId());
    if (site != null) {
      dispatchCancelAction(oneUpload,site);
    }
 else {
      AppLog.i(T.MEDIA,""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","private void cancelUpload(MediaModel oneUpload,boolean delete){
  if (oneUpload != null) {
    SiteModel site=mSiteStore.getSiteByLocalId(oneUpload.getLocalSiteId());
    if (site != null) {
      dispatchCancelAction(oneUpload,site,delete);
    }
 else {
      AppLog.i(T.MEDIA,""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.9655172413793104
13829,"@Override public void onMediaUploadCancelClicked(String localMediaId,boolean delete){
  if (!TextUtils.isEmpty(localMediaId)) {
    MediaModel mediaModel=mMediaStore.getMediaWithLocalId(Integer.valueOf(localMediaId));
    if (mediaModel != null) {
      CancelMediaPayload payload=new CancelMediaPayload(mSite,mediaModel,delete);
      mDispatcher.dispatch(MediaActionBuilder.newCancelMediaUploadAction(payload));
    }
  }
 else {
    ToastUtils.showToast(this,getString(R.string.error_all_media_upload_canceled));
    EventBus.getDefault().post(new PostEvents.PostMediaCanceled(mPost));
  }
}","@Override public void onMediaUploadCancelClicked(String localMediaId){
  if (!TextUtils.isEmpty(localMediaId)) {
    MediaModel mediaModel=mMediaStore.getMediaWithLocalId(Integer.valueOf(localMediaId));
    if (mediaModel != null) {
      CancelMediaPayload payload=new CancelMediaPayload(mSite,mediaModel);
      mDispatcher.dispatch(MediaActionBuilder.newCancelMediaUploadAction(payload));
    }
  }
 else {
    ToastUtils.showToast(this,getString(R.string.error_all_media_upload_canceled));
    EventBus.getDefault().post(new PostEvents.PostMediaCanceled(mPost));
  }
}",0.981132075471698
13830,"@Override public void onMediaUploadCancelClicked(String mediaId,boolean delete){
}","@Override public void onMediaUploadCancelClicked(String mediaId){
}",0.8993288590604027
13831,"public void onMediaTapped(final String localMediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    if (mUploadingMediaProgressMax.containsKey(localMediaId)) {
      mEditorFragmentListener.onMediaUploadCancelClicked(localMediaId,true);
switch (mediaType) {
case IMAGE:
        content.removeMedia(mTappedImagePredicate);
      break;
case VIDEO:
  }
  mUploadingMediaProgressMax.remove(localMediaId);
}
 else {
  ToastUtils.showToast(getActivity(),R.string.upload_finished_toast).show();
}
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (mFailedMediaIds.contains(localMediaId)) {
mEditorFragmentListener.onMediaRetryClicked(localMediaId);
}
switch (mediaType) {
case IMAGE:
AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(mTappedImagePredicate));
attributesWithClass.removeClass(ATTR_STATUS_FAILED);
content.setOverlay(mTappedImagePredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
progressDrawable.setBounds(0,0,0,4);
content.setOverlay(mTappedImagePredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
content.updateElementAttributes(mTappedImagePredicate,attributesWithClass.getAttributes());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.remove(localMediaId);
mUploadingMediaProgressMax.put(localMediaId,0f);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
dialogBundle.putBoolean(EXTRA_ENABLED_AZTEC,true);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
break;
}
}","public void onMediaTapped(final String localMediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    if (mUploadingMediaProgressMax.containsKey(localMediaId)) {
      mEditorFragmentListener.onMediaUploadCancelClicked(localMediaId);
switch (mediaType) {
case IMAGE:
        content.removeMedia(mTappedImagePredicate);
      break;
case VIDEO:
  }
  mUploadingMediaProgressMax.remove(localMediaId);
}
 else {
  ToastUtils.showToast(getActivity(),R.string.upload_finished_toast).show();
}
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (mFailedMediaIds.contains(localMediaId)) {
mEditorFragmentListener.onMediaRetryClicked(localMediaId);
}
switch (mediaType) {
case IMAGE:
AttributesWithClass attributesWithClass=new AttributesWithClass(content.getElementAttributes(mTappedImagePredicate));
attributesWithClass.removeClass(ATTR_STATUS_FAILED);
content.setOverlay(mTappedImagePredicate,0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL);
Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
progressDrawable.setBounds(0,0,0,4);
content.setOverlay(mTappedImagePredicate,1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP);
content.updateElementAttributes(mTappedImagePredicate,attributesWithClass.getAttributes());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.remove(localMediaId);
mUploadingMediaProgressMax.put(localMediaId,0f);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
dialogBundle.putBoolean(EXTRA_ENABLED_AZTEC,true);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(AppLog.T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
break;
}
}",0.9993420186866692
13832,"public void onMediaTapped(final String mediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    if (TextUtils.isEmpty(mediaId) || StringUtils.stringToInt(mediaId) <= 0) {
      return;
    }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
  mEditorFragmentListener.onMediaUploadCancelClicked(mediaId,true);
  mWebView.post(new Runnable(){
    @Override public void run(){
switch (mediaType) {
case IMAGE:
        mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
      break;
case VIDEO:
    mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
}
mUploadingMedia.remove(mediaId);
}
}
);
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (TextUtils.isEmpty(mediaId) || StringUtils.stringToInt(mediaId) <= 0) {
return;
}
mEditorFragmentListener.onMediaRetryClicked(mediaId);
mWebView.post(new Runnable(){
@Override public void run(){
switch (mediaType) {
case IMAGE:
mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
break;
case VIDEO:
mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
}
mFailedMediaIds.remove(mediaId);
mUploadingMedia.put(mediaId,mediaType);
}
}
);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
mWebView.notifyVisibilityChanged(false);
break;
}
}","public void onMediaTapped(final String mediaId,final MediaType mediaType,final JSONObject meta,String uploadStatus){
  if (mediaType == null || !isAdded()) {
    return;
  }
switch (uploadStatus) {
case ATTR_STATUS_UPLOADING:
    if (TextUtils.isEmpty(mediaId) || StringUtils.stringToInt(mediaId) <= 0) {
      return;
    }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
  mEditorFragmentListener.onMediaUploadCancelClicked(mediaId);
  mWebView.post(new Runnable(){
    @Override public void run(){
switch (mediaType) {
case IMAGE:
        mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
      break;
case VIDEO:
    mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
}
mUploadingMedia.remove(mediaId);
}
}
);
dialog.dismiss();
}
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case ATTR_STATUS_FAILED:
if (TextUtils.isEmpty(mediaId) || StringUtils.stringToInt(mediaId) <= 0) {
return;
}
mEditorFragmentListener.onMediaRetryClicked(mediaId);
mWebView.post(new Runnable(){
@Override public void run(){
switch (mediaType) {
case IMAGE:
mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
break;
case VIDEO:
mWebView.execJavaScriptFromString(""String_Node_Str"" + mediaId + ""String_Node_Str"");
}
mFailedMediaIds.remove(mediaId);
mUploadingMedia.put(mediaId,mediaType);
}
}
);
break;
default :
if (!mediaType.equals(MediaType.IMAGE)) {
return;
}
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setImageLoader(mImageLoader);
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString(EXTRA_MAX_WIDTH,mBlogSettingMaxImageWidth);
dialogBundle.putBoolean(EXTRA_IMAGE_FEATURED,mFeaturedImageSupported);
try {
final String imageSrc=meta.getString(ATTR_SRC);
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put(ATTR_SRC,UrlUtils.makeHttps(imageSrc));
}
}
 catch (JSONException e) {
AppLog.e(T.EDITOR,""String_Node_Str"");
}
dialogBundle.putString(EXTRA_IMAGE_META,meta.toString());
String imageId=JSONUtils.getString(meta,ATTR_ID_ATTACHMENT);
if (!imageId.isEmpty()) {
dialogBundle.putBoolean(EXTRA_FEATURED,mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
mWebView.notifyVisibilityChanged(false);
break;
}
}",0.999282330988948
13833,"@Override public void onMediaRemoved(String mediaId){
  mUploadingMedia.remove(mediaId);
  mFailedMediaIds.remove(mediaId);
  mEditorFragmentListener.onMediaUploadCancelClicked(mediaId,true);
}","@Override public void onMediaRemoved(String mediaId){
  mUploadingMedia.remove(mediaId);
  mFailedMediaIds.remove(mediaId);
  mEditorFragmentListener.onMediaUploadCancelClicked(mediaId);
}",0.9868766404199476
13834,"void onMediaUploadCancelClicked(String mediaId,boolean delete);",void onMediaUploadCancelClicked(String mediaId);,0.8648648648648649
13835,"@Override public void onMediaUploadCancelClicked(String mediaId,boolean delete){
}","@Override public void onMediaUploadCancelClicked(String mediaId){
}",0.8993288590604027
13836,"private void showMessageViewIfNecessary(){
  final ViewGroup messageView=(ViewGroup)findViewById(R.id.message_container);
  if (mPost == null || mIsUpdatingPost || PostUploadService.isPostUploading(mPost) || (!mPost.isLocallyChanged() && !mPost.isLocalDraft()) && PostStatus.fromPost(mPost) != PostStatus.DRAFT) {
    messageView.setVisibility(View.GONE);
    return;
  }
  TextView messageText=(TextView)messageView.findViewById(R.id.message_text);
  if (mPost.isLocallyChanged()) {
    messageText.setText(R.string.local_changes_explainer);
  }
 else   if (mPost.isLocalDraft()) {
    messageText.setText(R.string.local_draft_explainer);
  }
 else   if (PostStatus.fromPost(mPost) == PostStatus.DRAFT) {
    messageText.setText(R.string.draft_explainer);
  }
  View btnPublish=messageView.findViewById(R.id.btn_publish);
  btnPublish.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AniUtils.animateBottomBar(messageView,false);
      publishPost();
    }
  }
);
  View btnRevert=messageView.findViewById(R.id.btn_revert);
  btnRevert.setVisibility(mPost.isLocallyChanged() ? View.VISIBLE : View.GONE);
  if (mPost.isLocallyChanged()) {
    btnRevert.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        AniUtils.animateBottomBar(messageView,false);
        revertPost();
        AnalyticsTracker.track(Stat.EDITOR_DISCARDED_CHANGES);
      }
    }
);
  }
  if (mPost.isLocallyChanged()) {
    RelativeLayout.LayoutParams paramsMessage=(RelativeLayout.LayoutParams)messageText.getLayoutParams();
    paramsMessage.addRule(RelativeLayout.LEFT_OF,0);
    paramsMessage.addRule(RelativeLayout.CENTER_VERTICAL,0);
    ViewGroup.MarginLayoutParams marginsMessage=(ViewGroup.MarginLayoutParams)messageText.getLayoutParams();
    marginsMessage.bottomMargin=getResources().getDimensionPixelSize(R.dimen.margin_small);
    ViewGroup buttonsView=(ViewGroup)messageView.findViewById(R.id.layout_buttons);
    RelativeLayout.LayoutParams paramsButtons=(RelativeLayout.LayoutParams)buttonsView.getLayoutParams();
    paramsButtons.addRule(RelativeLayout.BELOW,R.id.message_text);
    ViewGroup.MarginLayoutParams marginsButtons=(ViewGroup.MarginLayoutParams)buttonsView.getLayoutParams();
    marginsButtons.bottomMargin=getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  messageView.setVisibility(View.INVISIBLE);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (!isFinishing() && messageView.getVisibility() != View.VISIBLE) {
        AniUtils.animateBottomBar(messageView,true);
      }
    }
  }
,1000);
}","private void showMessageViewIfNecessary(){
  final ViewGroup messageView=(ViewGroup)findViewById(R.id.message_container);
  if (mPost == null || mIsUpdatingPost || PostUploadService.isPostUploadingOrQueued(mPost) || (!mPost.isLocallyChanged() && !mPost.isLocalDraft()) && PostStatus.fromPost(mPost) != PostStatus.DRAFT) {
    messageView.setVisibility(View.GONE);
    return;
  }
  TextView messageText=(TextView)messageView.findViewById(R.id.message_text);
  if (mPost.isLocallyChanged()) {
    messageText.setText(R.string.local_changes_explainer);
  }
 else   if (mPost.isLocalDraft()) {
    messageText.setText(R.string.local_draft_explainer);
  }
 else   if (PostStatus.fromPost(mPost) == PostStatus.DRAFT) {
    messageText.setText(R.string.draft_explainer);
  }
  View btnPublish=messageView.findViewById(R.id.btn_publish);
  btnPublish.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AniUtils.animateBottomBar(messageView,false);
      publishPost();
    }
  }
);
  View btnRevert=messageView.findViewById(R.id.btn_revert);
  btnRevert.setVisibility(mPost.isLocallyChanged() ? View.VISIBLE : View.GONE);
  if (mPost.isLocallyChanged()) {
    btnRevert.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        AniUtils.animateBottomBar(messageView,false);
        revertPost();
        AnalyticsTracker.track(Stat.EDITOR_DISCARDED_CHANGES);
      }
    }
);
  }
  if (mPost.isLocallyChanged()) {
    RelativeLayout.LayoutParams paramsMessage=(RelativeLayout.LayoutParams)messageText.getLayoutParams();
    paramsMessage.addRule(RelativeLayout.LEFT_OF,0);
    paramsMessage.addRule(RelativeLayout.CENTER_VERTICAL,0);
    ViewGroup.MarginLayoutParams marginsMessage=(ViewGroup.MarginLayoutParams)messageText.getLayoutParams();
    marginsMessage.bottomMargin=getResources().getDimensionPixelSize(R.dimen.margin_small);
    ViewGroup buttonsView=(ViewGroup)messageView.findViewById(R.id.layout_buttons);
    RelativeLayout.LayoutParams paramsButtons=(RelativeLayout.LayoutParams)buttonsView.getLayoutParams();
    paramsButtons.addRule(RelativeLayout.BELOW,R.id.message_text);
    ViewGroup.MarginLayoutParams marginsButtons=(ViewGroup.MarginLayoutParams)buttonsView.getLayoutParams();
    marginsButtons.bottomMargin=getResources().getDimensionPixelSize(R.dimen.margin_large);
  }
  messageView.setVisibility(View.INVISIBLE);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (!isFinishing() && messageView.getVisibility() != View.VISIBLE) {
        AniUtils.animateBottomBar(messageView,true);
      }
    }
  }
,1000);
}",0.9984962406015038
13837,"@Override public void onPostButtonClicked(int buttonType,PostModel post){
  if (!isAdded())   return;
  post=mPostStore.getPostByLocalPostId(post.getId());
  if (post == null) {
    loadPosts(LoadMode.FORCED);
    return;
  }
switch (buttonType) {
case PostListButton.BUTTON_EDIT:
    ActivityLauncher.editPostOrPageForResult(getActivity(),mSite,post);
  break;
case PostListButton.BUTTON_SUBMIT:
case PostListButton.BUTTON_SYNC:
case PostListButton.BUTTON_PUBLISH:
publishPost(post);
break;
case PostListButton.BUTTON_VIEW:
ActivityLauncher.browsePostOrPage(getActivity(),mSite,post);
break;
case PostListButton.BUTTON_PREVIEW:
ActivityLauncher.viewPostPreviewForResult(getActivity(),mSite,post,mIsPage);
break;
case PostListButton.BUTTON_STATS:
ActivityLauncher.viewStatsSinglePostDetails(getActivity(),mSite,post,mIsPage);
break;
case PostListButton.BUTTON_TRASH:
case PostListButton.BUTTON_DELETE:
if (!PostUploadService.isPostUploading(post)) {
trashPost(post);
}
break;
}
}","@Override public void onPostButtonClicked(int buttonType,PostModel post){
  if (!isAdded())   return;
  post=mPostStore.getPostByLocalPostId(post.getId());
  if (post == null) {
    loadPosts(LoadMode.FORCED);
    return;
  }
switch (buttonType) {
case PostListButton.BUTTON_EDIT:
    if (PostUploadService.isPostUploadingOrQueued(post)) {
      PostUploadService.cancelQueuedPostUpload(post);
    }
  ActivityLauncher.editPostOrPageForResult(getActivity(),mSite,post);
break;
case PostListButton.BUTTON_SUBMIT:
case PostListButton.BUTTON_SYNC:
case PostListButton.BUTTON_PUBLISH:
publishPost(post);
break;
case PostListButton.BUTTON_VIEW:
ActivityLauncher.browsePostOrPage(getActivity(),mSite,post);
break;
case PostListButton.BUTTON_PREVIEW:
ActivityLauncher.viewPostPreviewForResult(getActivity(),mSite,post,mIsPage);
break;
case PostListButton.BUTTON_STATS:
ActivityLauncher.viewStatsSinglePostDetails(getActivity(),mSite,post,mIsPage);
break;
case PostListButton.BUTTON_TRASH:
case PostListButton.BUTTON_DELETE:
if (!PostUploadService.isPostUploadingOrQueued(post)) {
trashPost(post);
}
break;
}
}",0.9389716482460356
13838,"@Override protected Boolean doInBackground(Void... nada){
  if (mIsPage) {
    tmpPosts=mPostStore.getPagesForSite(mSite);
  }
 else {
    tmpPosts=mPostStore.getPostsForSite(mSite);
  }
  for (  PostModel hiddenPost : mHiddenPosts) {
    tmpPosts.remove(hiddenPost);
  }
  if (mLoadMode == LoadMode.IF_CHANGED && PostUtils.postListsAreEqual(mPosts,tmpPosts)) {
    boolean postsAreUploading=false;
    for (    PostModel post : tmpPosts) {
      if (PostUploadService.isPostUploading(post)) {
        postsAreUploading=true;
        break;
      }
    }
    if (!postsAreUploading) {
      return false;
    }
  }
  String imageUrl=null;
  mFeaturedImageUrls.clear();
  for (  PostModel post : tmpPosts) {
    if (post.isLocalDraft()) {
      imageUrl=null;
    }
 else     if (post.getFeaturedImageId() != 0) {
      MediaModel media=mMediaStore.getSiteMediaWithId(mSite,post.getFeaturedImageId());
      if (media != null) {
        imageUrl=media.getUrl();
      }
 else {
        imageUrl=null;
      }
      if (TextUtils.isEmpty(imageUrl)) {
        mediaIdsToUpdate.add(post.getFeaturedImageId());
      }
    }
 else     if (StringUtils.isNotEmpty(post.getContent())) {
      ReaderImageScanner scanner=new ReaderImageScanner(post.getContent(),mSite.isPrivate());
      imageUrl=scanner.getLargestImage();
    }
 else {
      imageUrl=null;
    }
    if (!TextUtils.isEmpty(imageUrl)) {
      mFeaturedImageUrls.put(post.getId(),ReaderUtils.getResizedImageUrl(imageUrl,mPhotonWidth,mPhotonHeight,mSite.isPrivate()));
    }
  }
  return true;
}","@Override protected Boolean doInBackground(Void... nada){
  if (mIsPage) {
    tmpPosts=mPostStore.getPagesForSite(mSite);
  }
 else {
    tmpPosts=mPostStore.getPostsForSite(mSite);
  }
  for (  PostModel hiddenPost : mHiddenPosts) {
    tmpPosts.remove(hiddenPost);
  }
  if (mLoadMode == LoadMode.IF_CHANGED && PostUtils.postListsAreEqual(mPosts,tmpPosts)) {
    boolean postsAreUploading=false;
    for (    PostModel post : tmpPosts) {
      if (PostUploadService.isPostUploadingOrQueued(post)) {
        postsAreUploading=true;
        break;
      }
    }
    if (!postsAreUploading) {
      return false;
    }
  }
  String imageUrl=null;
  mFeaturedImageUrls.clear();
  for (  PostModel post : tmpPosts) {
    if (post.isLocalDraft()) {
      imageUrl=null;
    }
 else     if (post.getFeaturedImageId() != 0) {
      MediaModel media=mMediaStore.getSiteMediaWithId(mSite,post.getFeaturedImageId());
      if (media != null) {
        imageUrl=media.getUrl();
      }
 else {
        imageUrl=null;
      }
      if (TextUtils.isEmpty(imageUrl)) {
        mediaIdsToUpdate.add(post.getFeaturedImageId());
      }
    }
 else     if (StringUtils.isNotEmpty(post.getContent())) {
      ReaderImageScanner scanner=new ReaderImageScanner(post.getContent(),mSite.isPrivate());
      imageUrl=scanner.getLargestImage();
    }
 else {
      imageUrl=null;
    }
    if (!TextUtils.isEmpty(imageUrl)) {
      mFeaturedImageUrls.put(post.getId(),ReaderUtils.getResizedImageUrl(imageUrl,mPhotonWidth,mPhotonHeight,mSite.isPrivate()));
    }
  }
  return true;
}",0.9974293059125964
13839,"private boolean canPublishPost(PostModel post){
  return post != null && !PostUploadService.isPostUploading(post) && (post.isLocallyChanged() || post.isLocalDraft() || PostStatus.fromPost(post) == PostStatus.DRAFT);
}","private boolean canPublishPost(PostModel post){
  return post != null && !PostUploadService.isPostUploadingOrQueued(post) && (post.isLocallyChanged() || post.isLocalDraft() || PostStatus.fromPost(post) == PostStatus.DRAFT);
}",0.9819004524886876
13840,"private void updateStatusText(TextView txtStatus,PostModel post){
  if ((PostStatus.fromPost(post) == PostStatus.PUBLISHED) && !post.isLocalDraft() && !post.isLocallyChanged()) {
    txtStatus.setVisibility(View.GONE);
  }
 else {
    int statusTextResId=0;
    int statusIconResId=0;
    int statusColorResId=R.color.grey_darken_10;
    if (PostUploadService.isPostUploading(post)) {
      statusTextResId=R.string.post_uploading;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.isLocalDraft()) {
      statusTextResId=R.string.local_draft;
      statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.isLocallyChanged()) {
      statusTextResId=R.string.local_changes;
      statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
      statusColorResId=R.color.alert_yellow;
    }
 else {
switch (PostStatus.fromPost(post)) {
case DRAFT:
        statusTextResId=R.string.draft;
      statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
    statusColorResId=R.color.alert_yellow;
  break;
case PRIVATE:
statusTextResId=R.string.post_private;
break;
case PENDING:
statusTextResId=R.string.pending_review;
statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
statusColorResId=R.color.alert_yellow;
break;
case SCHEDULED:
statusTextResId=R.string.scheduled;
statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
statusColorResId=R.color.alert_yellow;
break;
case TRASHED:
statusTextResId=R.string.trashed;
statusIconResId=R.drawable.ic_pages_alert_red_16dp;
statusColorResId=R.color.alert_red;
break;
}
}
Resources resources=txtStatus.getContext().getResources();
txtStatus.setTextColor(resources.getColor(statusColorResId));
txtStatus.setText(statusTextResId != 0 ? resources.getString(statusTextResId) : ""String_Node_Str"");
Drawable drawable=(statusIconResId != 0 ? resources.getDrawable(statusIconResId) : null);
txtStatus.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);
txtStatus.setVisibility(View.VISIBLE);
}
}","private void updateStatusText(TextView txtStatus,PostModel post){
  if ((PostStatus.fromPost(post) == PostStatus.PUBLISHED) && !post.isLocalDraft() && !post.isLocallyChanged()) {
    txtStatus.setVisibility(View.GONE);
  }
 else {
    int statusTextResId=0;
    int statusIconResId=0;
    int statusColorResId=R.color.grey_darken_10;
    if (PostUploadService.isPostUploadingOrQueued(post)) {
      statusTextResId=R.string.post_uploading;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.isLocalDraft()) {
      statusTextResId=R.string.local_draft;
      statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
      statusColorResId=R.color.alert_yellow;
    }
 else     if (post.isLocallyChanged()) {
      statusTextResId=R.string.local_changes;
      statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
      statusColorResId=R.color.alert_yellow;
    }
 else {
switch (PostStatus.fromPost(post)) {
case DRAFT:
        statusTextResId=R.string.draft;
      statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
    statusColorResId=R.color.alert_yellow;
  break;
case PRIVATE:
statusTextResId=R.string.post_private;
break;
case PENDING:
statusTextResId=R.string.pending_review;
statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
statusColorResId=R.color.alert_yellow;
break;
case SCHEDULED:
statusTextResId=R.string.scheduled;
statusIconResId=R.drawable.noticon_scheduled_alert_yellow_16dp;
statusColorResId=R.color.alert_yellow;
break;
case TRASHED:
statusTextResId=R.string.trashed;
statusIconResId=R.drawable.ic_pages_alert_red_16dp;
statusColorResId=R.color.alert_red;
break;
}
}
Resources resources=txtStatus.getContext().getResources();
txtStatus.setTextColor(resources.getColor(statusColorResId));
txtStatus.setText(statusTextResId != 0 ? resources.getString(statusTextResId) : ""String_Node_Str"");
Drawable drawable=(statusIconResId != 0 ? resources.getDrawable(statusIconResId) : null);
txtStatus.setCompoundDrawablesWithIntrinsicBounds(drawable,null,null,null);
txtStatus.setVisibility(View.VISIBLE);
}
}",0.998075998075998
13841,"/** 
 * Removes a post from the queued post list given its local ID.
 * @return the post that was removed - if no post was removed, returns null
 */
private PostModel removeQueuedPostByLocalId(int localPostId){
synchronized (mPostsList) {
    Iterator<PostModel> iterator=mPostsList.iterator();
    while (iterator.hasNext()) {
      PostModel postModel=iterator.next();
      if (postModel.getId() == localPostId) {
        iterator.remove();
        return postModel;
      }
    }
  }
  return null;
}","/** 
 * Removes a post from the queued post list given its local ID.
 * @return the post that was removed - if no post was removed, returns null
 */
private PostModel removeQueuedPostByLocalId(int localPostId){
synchronized (mQueuedPostsList) {
    Iterator<PostModel> iterator=mQueuedPostsList.iterator();
    while (iterator.hasNext()) {
      PostModel postModel=iterator.next();
      if (postModel.getId() == localPostId) {
        iterator.remove();
        return postModel;
      }
    }
  }
  return null;
}",0.9882352941176472
13842,"private void uploadNextPost(){
synchronized (mPostsList) {
    if (mCurrentTask == null) {
      mCurrentUploadingPost=null;
      mCurrentUploadingPostAnalyticsProperties=null;
      if (mPostsList.size() > 0) {
        if (!mUseLegacyMode) {
          PostModel nextPost=getNextUploadablePost();
          if (nextPost != null) {
            mCurrentUploadingPost=nextPost;
            mCurrentTask=new UploadPostTask();
            mCurrentTask.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,mCurrentUploadingPost);
          }
        }
 else {
          mCurrentUploadingPost=mPostsList.remove(0);
          mCurrentTask=new UploadPostTask();
          mCurrentTask.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,mCurrentUploadingPost);
        }
      }
 else {
        stopSelf();
      }
    }
  }
}","private void uploadNextPost(){
synchronized (mQueuedPostsList) {
    if (mCurrentTask == null) {
      mCurrentUploadingPost=null;
      mCurrentUploadingPostAnalyticsProperties=null;
      if (mQueuedPostsList.size() > 0) {
        if (!mUseLegacyMode) {
          PostModel nextPost=getNextUploadablePost();
          if (nextPost != null) {
            mCurrentUploadingPost=nextPost;
            mCurrentTask=new UploadPostTask();
            mCurrentTask.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,mCurrentUploadingPost);
          }
        }
 else {
          mCurrentUploadingPost=mQueuedPostsList.remove(0);
          mCurrentTask=new UploadPostTask();
          mCurrentTask.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,mCurrentUploadingPost);
        }
      }
 else {
        stopSelf();
      }
    }
  }
}",0.9888888888888888
13843,"private PostModel getNextUploadablePost(){
  Iterator<PostModel> iterator=mPostsList.iterator();
  while (iterator.hasNext()) {
    PostModel postModel=iterator.next();
    if (!MediaUploadService.hasPendingMediaUploadsForPost(postModel)) {
      PostModel latestPost=mPostStore.getPostByLocalPostId(postModel.getId());
      iterator.remove();
      return latestPost;
    }
  }
  AppLog.d(T.POSTS,""String_Node_Str"");
  return null;
}","private PostModel getNextUploadablePost(){
  Iterator<PostModel> iterator=mQueuedPostsList.iterator();
  while (iterator.hasNext()) {
    PostModel postModel=iterator.next();
    if (!MediaUploadService.hasPendingMediaUploadsForPost(postModel)) {
      PostModel latestPost=mPostStore.getPostByLocalPostId(postModel.getId());
      iterator.remove();
      return latestPost;
    }
  }
  AppLog.d(T.POSTS,""String_Node_Str"");
  return null;
}",0.9931506849315068
13844,"/** 
 * Adds a post to the queue.
 */
public static void addPostToUpload(PostModel post){
synchronized (mPostsList) {
    mPostsList.add(post);
  }
}","/** 
 * Adds a post to the queue.
 */
public static void addPostToUpload(PostModel post){
synchronized (mQueuedPostsList) {
    mQueuedPostsList.add(post);
  }
}",0.9612903225806452
13845,"private void showNotificationsForPendingMediaPosts(){
  for (  PostModel postModel : mPostsList) {
    if (MediaUploadService.hasPendingMediaUploadsForPost(postModel)) {
      if (!mPostUploadNotifier.isDisplayingNotificationForPost(postModel)) {
        mPostUploadNotifier.createNotificationForPost(postModel,getString(R.string.uploading_post_media));
      }
    }
  }
}","private void showNotificationsForPendingMediaPosts(){
  for (  PostModel postModel : mQueuedPostsList) {
    if (MediaUploadService.hasPendingMediaUploadsForPost(postModel)) {
      if (!mPostUploadNotifier.isDisplayingNotificationForPost(postModel)) {
        mPostUploadNotifier.createNotificationForPost(postModel,getString(R.string.uploading_post_media));
      }
    }
  }
}",0.9920212765957448
13846,"/** 
 * Returns true if the passed post is either uploading or waiting to be uploaded.
 */
public static boolean isPostUploading(PostModel post){
  if (mCurrentUploadingPost != null && mCurrentUploadingPost.getId() == post.getId()) {
    return true;
  }
  if (mPostsList.size() > 0) {
synchronized (mPostsList) {
      for (      PostModel queuedPost : mPostsList) {
        if (queuedPost.getId() == post.getId()) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Returns true if the passed post is currently uploading. Except for legacy mode, a post counts as 'uploading' if the post content itself is being uploaded - a post waiting for media to finish uploading counts as 'waiting to be uploaded' until the media uploads complete.
 */
public static boolean isPostUploading(PostModel post){
  return mCurrentUploadingPost != null && mCurrentUploadingPost.getId() == post.getId();
}",0.4665936473165389
13847,"@Override public int onStartCommand(Intent intent,int flags,int startId){
synchronized (mPostsList) {
    if (mPostsList.size() == 0 || mContext == null) {
      stopSelf();
      return START_NOT_STICKY;
    }
  }
  uploadNextPost();
  showNotificationsForPendingMediaPosts();
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
synchronized (mQueuedPostsList) {
    if (mQueuedPostsList.size() == 0 || mContext == null) {
      stopSelf();
      return START_NOT_STICKY;
    }
  }
  uploadNextPost();
  showNotificationsForPendingMediaPosts();
  return START_STICKY;
}",0.9805194805194806
13848,"private void finishUpload(){
synchronized (mPostsList) {
    mCurrentTask=null;
    mCurrentUploadingPost=null;
    mCurrentUploadingPostAnalyticsProperties=null;
  }
  uploadNextPost();
}","private void finishUpload(){
synchronized (mQueuedPostsList) {
    mCurrentTask=null;
    mCurrentUploadingPost=null;
    mCurrentUploadingPostAnalyticsProperties=null;
  }
  uploadNextPost();
}",0.9842931937172776
13849,"public WPPrefView(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){
  super(context,attrs,defStyleAttr,defStyleRes);
  initView(context,attrs);
}","@TargetApi(Build.VERSION_CODES.LOLLIPOP) public WPPrefView(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){
  super(context,attrs,defStyleAttr,defStyleRes);
  initView(context,attrs);
}",0.889487870619946
13850,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError() && mSelectedSite != null) {
    AuthenticationDialogUtils.showAuthErrorView(this,mSelectedSite);
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onAuthenticationChanged(OnAuthenticationChanged event){
  if (event.isError() && mSelectedSite != null && event.error.type == AuthenticationErrorType.INVALID_TOKEN) {
    AuthenticationDialogUtils.showAuthErrorView(this,mSelectedSite);
  }
}",0.897822445561139
13851,"private void handleSiteRemoved(){
  if (!FluxCUtils.isSignedInWPComOrHasWPOrgSite(mAccountStore,mSiteStore)) {
    resetFragments();
    ActivityLauncher.showSignInForResult(this);
  }
 else {
    SiteModel site=getSelectedSite();
    if (site != null) {
      ActivityLauncher.showSitePickerForResult(this,site);
    }
  }
}","private void handleSiteRemoved(){
  if (!FluxCUtils.isSignedInWPComOrHasWPOrgSite(mAccountStore,mSiteStore)) {
    resetFragments();
    setSelectedSite(null);
    ActivityLauncher.showSignInForResult(this);
  }
 else {
    SiteModel site=getSelectedSite();
    if (site != null) {
      ActivityLauncher.showSitePickerForResult(this,site);
    }
  }
}",0.9601181683899556
13852,"private void showStatsActivityForSite(@NonNull SiteModel site,NoteBlockRangeType rangeType){
  if (isFinishing())   return;
  if (rangeType == NoteBlockRangeType.FOLLOW) {
    Intent intent=new Intent(this,StatsViewAllActivity.class);
    intent.putExtra(StatsAbstractFragment.ARGS_VIEW_TYPE,StatsViewType.FOLLOWERS);
    intent.putExtra(StatsAbstractFragment.ARGS_TIMEFRAME,StatsTimeframe.DAY);
    intent.putExtra(StatsAbstractFragment.ARGS_SELECTED_DATE,""String_Node_Str"");
    intent.putExtra(WordPress.SITE,site);
    intent.putExtra(StatsViewAllActivity.ARG_STATS_VIEW_ALL_TITLE,getString(R.string.stats_view_followers));
    startActivity(intent);
  }
 else {
    ActivityLauncher.viewBlogStats(this,site);
  }
}","private void showStatsActivityForSite(@NonNull SiteModel site,NoteBlockRangeType rangeType){
  if (isFinishing())   return;
  if (rangeType == NoteBlockRangeType.FOLLOW) {
    Intent intent=new Intent(this,StatsViewAllActivity.class);
    intent.putExtra(StatsAbstractFragment.ARGS_VIEW_TYPE,StatsViewType.FOLLOWERS);
    intent.putExtra(StatsAbstractFragment.ARGS_TIMEFRAME,StatsTimeframe.DAY);
    intent.putExtra(StatsAbstractFragment.ARGS_SELECTED_DATE,""String_Node_Str"");
    intent.putExtra(StatsAbstractFragment.ARGS_IS_SINGLE_VIEW,true);
    intent.putExtra(StatsActivity.ARG_LOCAL_TABLE_SITE_ID,site.getId());
    intent.putExtra(StatsViewAllActivity.ARG_STATS_VIEW_ALL_TITLE,getString(R.string.stats_view_followers));
    startActivity(intent);
  }
 else {
    ActivityLauncher.viewBlogStats(this,site);
  }
}",0.9128738621586476
13853,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplicationContext()).component().inject(this);
  int localPostId;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    localPostId=getIntent().getIntExtra(KEY_LOCAL_POST_ID,0);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    localPostId=savedInstanceState.getInt(KEY_LOCAL_POST_ID,0);
  }
  mPost=mPostStore.getPostByLocalPostId(localPostId);
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.post_settings_tags_fragment);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  mTagsEditText=(EditText)findViewById(R.id.tags_edit_text);
  RecyclerView recyclerView=(RecyclerView)findViewById(R.id.tags_suggestion_list);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(new LinearLayoutManager(this));
  mAdapter=new TagsRecyclerViewAdapter(this);
  mAdapter.setAllTags(mTaxonomyStore.getTagsForPost(mPost,mSite));
  recyclerView.setAdapter(mAdapter);
  if (mTagsEditText != null) {
    mTagsEditText.addTextChangedListener(this);
    String tags=TextUtils.join(""String_Node_Str"",mPost.getTagNameList());
    if (!tags.equals(""String_Node_Str"")) {
      tags+=""String_Node_Str"";
      mTagsEditText.setText(tags);
      mTagsEditText.setSelection(mTagsEditText.length());
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplicationContext()).component().inject(this);
  int localPostId;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    localPostId=getIntent().getIntExtra(KEY_LOCAL_POST_ID,0);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    localPostId=savedInstanceState.getInt(KEY_LOCAL_POST_ID,0);
  }
  mPost=mPostStore.getPostByLocalPostId(localPostId);
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.post_settings_tags_fragment);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  mTagsEditText=(EditText)findViewById(R.id.tags_edit_text);
  RecyclerView recyclerView=(RecyclerView)findViewById(R.id.tags_suggestion_list);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(new LinearLayoutManager(this));
  mAdapter=new TagsRecyclerViewAdapter(this);
  mAdapter.setAllTags(mTaxonomyStore.getTagsForSite(mSite));
  recyclerView.setAdapter(mAdapter);
  if (mTagsEditText != null) {
    mTagsEditText.addTextChangedListener(this);
    String tags=TextUtils.join(""String_Node_Str"",mPost.getTagNameList());
    if (!tags.equals(""String_Node_Str"")) {
      tags+=""String_Node_Str"";
      mTagsEditText.setText(tags);
      mTagsEditText.setSelection(mTagsEditText.length());
    }
  }
}",0.9951130116065976
13854,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onTaxonomyChanged(TaxonomyStore.OnTaxonomyChanged event){
switch (event.causeOfChange) {
case FETCH_TAGS:
    mAdapter.setAllTags(mTaxonomyStore.getTagsForPost(mPost,mSite));
  filterListForCurrentText();
break;
}
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onTaxonomyChanged(TaxonomyStore.OnTaxonomyChanged event){
switch (event.causeOfChange) {
case FETCH_TAGS:
    mAdapter.setAllTags(mTaxonomyStore.getTagsForSite(mSite));
  filterListForCurrentText();
break;
}
}",0.9733333333333334
13855,"private void filterListForCurrentText(){
  String text=mTagsEditText.getText().toString();
  if (!TextUtils.isEmpty(text)) {
    int endIndex=text.lastIndexOf(""String_Node_Str"");
    if (endIndex == -1) {
      mAdapter.filter(text);
    }
 else     if (endIndex + 1 <= text.length()) {
      String textToFilter=text.substring(endIndex + 1);
      mAdapter.filter(textToFilter);
    }
  }
}","private void filterListForCurrentText(){
  String text=mTagsEditText.getText().toString();
  int endIndex=text.lastIndexOf(""String_Node_Str"");
  if (endIndex == -1) {
    mAdapter.filter(text);
  }
 else {
    String textToFilter=text.substring(endIndex + 1);
    mAdapter.filter(textToFilter);
  }
}",0.8683068017366136
13856,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  String[] tagsArray;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    tagsArray=getIntent().getStringArrayExtra(KEY_TAG_LIST);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
    tagsArray=savedInstanceState.getStringArray(KEY_TAG_LIST);
  }
  mTagList=tagsArray != null ? Arrays.asList(tagsArray) : new ArrayList<String>();
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.post_settings_tags_fragment);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  mTagsEditText=(SuggestionAutoCompleteText)findViewById(R.id.tags_edit_text);
  RecyclerView recyclerView=(RecyclerView)findViewById(R.id.tags_suggestion_list);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(new LinearLayoutManager(this));
  mAdapter=new TagsRecyclerViewAdapter(this);
  recyclerView.setAdapter(mAdapter);
  String tags=TextUtils.join(""String_Node_Str"",mTagList);
  if (!tags.equals(""String_Node_Str"") && mTagsEditText != null) {
    mTagsEditText.setText(tags);
    mTagsEditText.addTextChangedListener(this);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  String[] tagsArray=null;
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
    tagsArray=getIntent().getStringArrayExtra(KEY_TAG_LIST);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  setContentView(R.layout.post_settings_tags_fragment);
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  mTagsEditText=(SuggestionAutoCompleteText)findViewById(R.id.tags_edit_text);
  RecyclerView recyclerView=(RecyclerView)findViewById(R.id.tags_suggestion_list);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(new LinearLayoutManager(this));
  mAdapter=new TagsRecyclerViewAdapter(this);
  recyclerView.setAdapter(mAdapter);
  if (mTagsEditText != null) {
    mTagsEditText.addTextChangedListener(this);
    String tags=TextUtils.join(""String_Node_Str"",tagsArray);
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
}",0.8362445414847162
13857,"private void startGravatarUpload(final String filePath){
  File file=new File(filePath);
  if (!file.exists()) {
    Toast.makeText(getActivity(),getString(R.string.error_locating_image),Toast.LENGTH_SHORT).show();
    return;
  }
  showGravatarProgressBar(true);
  GravatarApi.uploadGravatar(file,mAccountStore.getAccount().getEmail(),mAccountStore.getAccessToken(),new GravatarApi.GravatarUploadListener(){
    @Override public void onSuccess(){
      EventBus.getDefault().post(new GravatarUploadFinished(filePath,true));
    }
    @Override public void onError(){
      EventBus.getDefault().post(new GravatarUploadFinished(filePath,false));
    }
  }
);
}","private void startGravatarUpload(final String filePath){
  if (TextUtils.isEmpty(filePath)) {
    Toast.makeText(getActivity(),getString(R.string.error_locating_image),Toast.LENGTH_SHORT).show();
    return;
  }
  File file=new File(filePath);
  if (!file.exists()) {
    Toast.makeText(getActivity(),getString(R.string.error_locating_image),Toast.LENGTH_SHORT).show();
    return;
  }
  showGravatarProgressBar(true);
  GravatarApi.uploadGravatar(file,mAccountStore.getAccount().getEmail(),mAccountStore.getAccessToken(),new GravatarApi.GravatarUploadListener(){
    @Override public void onSuccess(){
      EventBus.getDefault().post(new GravatarUploadFinished(filePath,true));
    }
    @Override public void onError(){
      EventBus.getDefault().post(new GravatarUploadFinished(filePath,false));
    }
  }
);
}",0.8406779661016949
13858,"private void fetchMedia(Uri mediaUri){
  if (!MediaUtils.isInMediaStore(mediaUri)) {
    Uri downloadedUri=MediaUtils.downloadExternalMedia(getActivity(),mediaUri);
    if (downloadedUri != null) {
      startGravatarUpload(getRealPathFromURI(downloadedUri));
    }
 else {
      Toast.makeText(getActivity(),getString(R.string.error_downloading_image),Toast.LENGTH_SHORT).show();
    }
  }
 else {
    startGravatarUpload(getRealPathFromURI(mediaUri));
  }
}","private void fetchMedia(Uri mediaUri){
  if (!MediaUtils.isInMediaStore(mediaUri)) {
    Uri downloadedUri=MediaUtils.downloadExternalMedia(getActivity(),mediaUri);
    if (downloadedUri != null) {
      startGravatarUpload(MediaUtils.getRealPathFromURI(getActivity(),downloadedUri));
    }
 else {
      Toast.makeText(getActivity(),getString(R.string.error_downloading_image),Toast.LENGTH_SHORT).show();
    }
  }
 else {
    startGravatarUpload(MediaUtils.getRealPathFromURI(getActivity(),mediaUri));
  }
}",0.9483471074380164
13859,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case RequestCodes.PICTURE_LIBRARY:
case RequestCodes.VIDEO_LIBRARY:
    if (resultCode == Activity.RESULT_OK && data != null) {
      Uri imageUri=data.getData();
      String mimeType=getContentResolver().getType(imageUri);
      fetchMedia(imageUri,mimeType);
      trackAddMediaFromDeviceEvents(false,requestCode == RequestCodes.VIDEO_LIBRARY,imageUri);
    }
  break;
case RequestCodes.TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
  Uri uri;
  Uri optimizedMedia=WPMediaUtils.getOptimizedMedia(this,mSite,mMediaCapturePath,false);
  if (optimizedMedia != null) {
    uri=optimizedMedia;
  }
 else {
    uri=Uri.parse(mMediaCapturePath);
  }
  mMediaCapturePath=null;
  queueFileForUpload(uri,getContentResolver().getType(uri));
  trackAddMediaFromDeviceEvents(true,false,uri);
}
break;
case RequestCodes.TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri uri=MediaUtils.getLastRecordedVideoUri(this);
queueFileForUpload(uri,getContentResolver().getType(uri));
trackAddMediaFromDeviceEvents(true,true,uri);
}
break;
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case RequestCodes.PICTURE_LIBRARY:
case RequestCodes.VIDEO_LIBRARY:
    if (resultCode == Activity.RESULT_OK && data != null) {
      Uri imageUri=data.getData();
      String mimeType=getContentResolver().getType(imageUri);
      fetchMedia(imageUri,mimeType);
      trackAddMediaFromDeviceEvents(false,requestCode == RequestCodes.VIDEO_LIBRARY,imageUri);
    }
  break;
case RequestCodes.TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
  Uri uri=getOptimizedPictureIfNecessary(Uri.parse(mMediaCapturePath));
  mMediaCapturePath=null;
  queueFileForUpload(uri,getContentResolver().getType(uri));
  trackAddMediaFromDeviceEvents(true,false,uri);
}
break;
case RequestCodes.TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri uri=MediaUtils.getLastRecordedVideoUri(this);
queueFileForUpload(uri,getContentResolver().getType(uri));
trackAddMediaFromDeviceEvents(true,true,uri);
}
break;
}
}",0.8979591836734694
13860,"private void fetchMedia(Uri mediaUri,final String mimeType){
  if (!MediaUtils.isInMediaStore(mediaUri)) {
    Uri downloadedUri=null;
    try {
      downloadedUri=MediaUtils.downloadExternalMedia(MediaBrowserActivity.this,mediaUri);
    }
 catch (    IllegalStateException e) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + mediaUri.toString(),e);
      CrashlyticsUtils.logException(e,AppLog.T.MEDIA,""String_Node_Str"" + mediaUri.toString() + ""String_Node_Str"");
    }
    if (downloadedUri != null) {
      queueFileForUpload(downloadedUri,mimeType);
    }
 else {
      Toast.makeText(MediaBrowserActivity.this,getString(R.string.error_downloading_image),Toast.LENGTH_SHORT).show();
    }
  }
 else {
    queueFileForUpload(mediaUri,mimeType);
  }
}","private void fetchMedia(Uri mediaUri,final String mimeType){
  if (!MediaUtils.isInMediaStore(mediaUri)) {
    Uri downloadedUri=null;
    try {
      downloadedUri=MediaUtils.downloadExternalMedia(MediaBrowserActivity.this,mediaUri);
    }
 catch (    IllegalStateException e) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + mediaUri.toString(),e);
      CrashlyticsUtils.logException(e,AppLog.T.MEDIA,""String_Node_Str"" + mediaUri.toString() + ""String_Node_Str"");
    }
    if (downloadedUri != null) {
      queueFileForUpload(getOptimizedPictureIfNecessary(downloadedUri),mimeType);
    }
 else {
      Toast.makeText(MediaBrowserActivity.this,getString(R.string.error_downloading_image),Toast.LENGTH_SHORT).show();
    }
  }
 else {
    queueFileForUpload(getOptimizedPictureIfNecessary(mediaUri),mimeType);
  }
}",0.9416983523447402
13861,"private void queueFileForUpload(Uri uri,String mimeType){
  String path=MediaUtils.getRealPathFromURI(this,uri);
  if (path == null || path.equals(""String_Node_Str"")) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  File file=new File(path);
  if (!file.exists()) {
    return;
  }
  MediaModel media=mMediaStore.instantiateMediaModel();
  String filename=org.wordpress.android.fluxc.utils.MediaUtils.getFileName(path);
  String fileExtension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
  if (mimeType == null) {
    mimeType=getContentResolver().getType(uri);
    if (mimeType == null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
    }
    if (mimeType == null) {
      mimeType=""String_Node_Str"";
    }
  }
  if (fileExtension == null) {
    fileExtension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
    filename+=""String_Node_Str"" + fileExtension;
  }
  media.setFileName(filename);
  media.setFilePath(path);
  media.setLocalSiteId(mSite.getId());
  media.setFileExtension(fileExtension);
  media.setMimeType(mimeType);
  media.setUploadState(MediaUploadState.QUEUED.name());
  media.setUploadDate(DateTimeUtils.iso8601UTCFromTimestamp(System.currentTimeMillis() / 1000));
  mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction(media));
  addMediaToUploadService(media);
}","private void queueFileForUpload(Uri uri,String mimeType){
  String path=MediaUtils.getRealPathFromURI(this,uri);
  if (TextUtils.isEmpty(path)) {
    Toast.makeText(this,getString(R.string.file_not_found),Toast.LENGTH_SHORT).show();
    return;
  }
  File file=new File(path);
  if (!file.exists()) {
    return;
  }
  MediaModel media=mMediaStore.instantiateMediaModel();
  String filename=org.wordpress.android.fluxc.utils.MediaUtils.getFileName(path);
  String fileExtension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
  if (mimeType == null) {
    mimeType=getContentResolver().getType(uri);
    if (mimeType == null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
    }
    if (mimeType == null) {
      mimeType=""String_Node_Str"";
    }
  }
  if (fileExtension == null) {
    fileExtension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
    filename+=""String_Node_Str"" + fileExtension;
  }
  media.setFileName(filename);
  media.setFilePath(path);
  media.setLocalSiteId(mSite.getId());
  media.setFileExtension(fileExtension);
  media.setMimeType(mimeType);
  media.setUploadState(MediaUploadState.QUEUED.name());
  media.setUploadDate(DateTimeUtils.iso8601UTCFromTimestamp(System.currentTimeMillis() / 1000));
  mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction(media));
  addMediaToUploadService(media);
}",0.9429793300071276
13862,"@Override protected Bitmap doInBackground(Void... params){
  byte[] bytes=ImageUtils.createThumbnailFromUri(MediaPreviewActivity.this,Uri.parse(mMediaUri),mSize,null,0);
  if (bytes != null) {
    return BitmapFactory.decodeByteArray(bytes,0,bytes.length);
  }
  return null;
}","@Override protected Bitmap doInBackground(Void... params){
  int orientation=ImageUtils.getImageOrientation(MediaPreviewActivity.this,mMediaUri);
  byte[] bytes=ImageUtils.createThumbnailFromUri(MediaPreviewActivity.this,Uri.parse(mMediaUri),mSize,null,orientation);
  if (bytes != null) {
    return BitmapFactory.decodeByteArray(bytes,0,bytes.length);
  }
  return null;
}",0.847926267281106
13863,"private boolean addMediaVisualEditor(Uri uri,boolean isVideo){
  String path=MediaUtils.getRealPathFromURI(this,uri);
  if (path == null) {
    ToastUtils.showToast(this,R.string.file_not_found,Duration.SHORT);
    return false;
  }
  Uri optimizedMedia=WPMediaUtils.getOptimizedMedia(this,mSite,path,isVideo);
  if (optimizedMedia != null) {
    uri=optimizedMedia;
    path=MediaUtils.getRealPathFromURI(this,uri);
  }
 else {
    Uri rotatedMedia=WPMediaUtils.fixOrientationIssue(this,path,isVideo);
    if (rotatedMedia != null) {
      uri=rotatedMedia;
      path=MediaUtils.getRealPathFromURI(this,uri);
    }
  }
  MediaModel media=queueFileForUpload(uri,getContentResolver().getType(uri));
  MediaFile mediaFile=FluxCUtils.mediaFileFromMediaModel(media);
  if (media != null) {
    mEditorFragment.appendMediaFile(mediaFile,path,mImageLoader);
  }
  return true;
}","private boolean addMediaVisualEditor(Uri uri,boolean isVideo){
  String path=MediaUtils.getRealPathFromURI(this,uri);
  if (path == null) {
    ToastUtils.showToast(this,R.string.file_not_found,Duration.SHORT);
    return false;
  }
  Uri optimizedMedia=WPMediaUtils.getOptimizedMedia(this,mSite,path,isVideo);
  if (optimizedMedia != null) {
    uri=optimizedMedia;
    path=MediaUtils.getRealPathFromURI(this,uri);
  }
 else {
    if (!mSite.isWPCom()) {
      Uri rotatedMedia=WPMediaUtils.fixOrientationIssue(this,path,isVideo);
      if (rotatedMedia != null) {
        uri=rotatedMedia;
        path=MediaUtils.getRealPathFromURI(this,uri);
      }
    }
 else {
      if (mShowNewEditor) {
        Uri rotatedMedia=WPMediaUtils.fixOrientationIssue(this,path,isVideo);
        if (rotatedMedia != null) {
          path=MediaUtils.getRealPathFromURI(this,rotatedMedia);
        }
      }
    }
  }
  MediaModel media=queueFileForUpload(uri,getContentResolver().getType(uri));
  MediaFile mediaFile=FluxCUtils.mediaFileFromMediaModel(media);
  if (media != null) {
    mEditorFragment.appendMediaFile(mediaFile,path,mImageLoader);
  }
  return true;
}",0.8260226712666338
13864,"public static int getExifOrientation(String path){
  ExifInterface exif;
  try {
    exif=new ExifInterface(path);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.UTILS,e);
    return 0;
  }
  int exifOrientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,0);
switch (exifOrientation) {
case ExifInterface.ORIENTATION_NORMAL:
    return 0;
case ExifInterface.ORIENTATION_ROTATE_90:
  return 90;
case ExifInterface.ORIENTATION_ROTATE_180:
return 180;
case ExifInterface.ORIENTATION_ROTATE_270:
return 270;
default :
return 0;
}
}","public static int getExifOrientation(String path){
  if (TextUtils.isEmpty(path)) {
    AppLog.w(AppLog.T.UTILS,""String_Node_Str"");
    return 0;
  }
  ExifInterface exif;
  try {
    exif=new ExifInterface(path);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",e);
    return 0;
  }
  int exifOrientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,0);
switch (exifOrientation) {
case ExifInterface.ORIENTATION_NORMAL:
    return 0;
case ExifInterface.ORIENTATION_ROTATE_90:
  return 90;
case ExifInterface.ORIENTATION_ROTATE_180:
return 180;
case ExifInterface.ORIENTATION_ROTATE_270:
return 270;
default :
return 0;
}
}",0.7422852376980817
13865,"public static int getImageOrientation(Context ctx,String filePath){
  Uri curStream;
  int orientation=0;
  filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  if (!filePath.contains(""String_Node_Str""))   curStream=Uri.parse(""String_Node_Str"" + filePath);
 else   curStream=Uri.parse(filePath);
  try {
    Cursor cur=ctx.getContentResolver().query(curStream,new String[]{MediaStore.Images.Media.ORIENTATION},null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        orientation=cur.getInt(cur.getColumnIndex(MediaStore.Images.Media.ORIENTATION));
      }
      cur.close();
    }
  }
 catch (  Exception errReadingContentResolver) {
    AppLog.e(AppLog.T.UTILS,errReadingContentResolver);
  }
  if (orientation == 0) {
    orientation=getExifOrientation(filePath);
  }
  return orientation;
}","public static int getImageOrientation(Context ctx,String filePath){
  if (TextUtils.isEmpty(filePath) || ctx == null) {
    AppLog.w(AppLog.T.UTILS,""String_Node_Str"");
    return 0;
  }
  Uri curStream;
  int orientation=0;
  filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  if (!filePath.contains(""String_Node_Str""))   curStream=Uri.parse(""String_Node_Str"" + filePath);
 else   curStream=Uri.parse(filePath);
  try {
    Cursor cur=ctx.getContentResolver().query(curStream,new String[]{MediaStore.Images.Media.ORIENTATION},null,null,null);
    if (cur != null) {
      if (cur.moveToFirst()) {
        orientation=cur.getInt(cur.getColumnIndex(MediaStore.Images.Media.ORIENTATION));
      }
      cur.close();
    }
  }
 catch (  Exception errReadingContentResolver) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + filePath,errReadingContentResolver);
  }
  if (orientation == 0) {
    orientation=getExifOrientation(filePath);
  }
  return orientation;
}",0.91846921797005
13866,"/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  File resizedImageFile;
  FileOutputStream out;
  try {
    resizedImageFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(resizedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=resizedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}","/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix;
    int dotPos=fileName.indexOf('.');
    if (dotPos > 0) {
      prefix=fileName.substring(0,dotPos);
    }
 else {
      prefix=fileName;
    }
    if (prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}",0.8683435304781328
13867,"private static boolean resizeImageAndWriteToStream(Context context,Uri imageUri,String fileExtension,int maxWidth,int orientation,int quality,OutputStream outStream) throws OutOfMemoryError, IOException {
  String realFilePath=getRealFilePath(context,imageUri);
  BitmapFactory.Options optBounds=new BitmapFactory.Options();
  optBounds.inJustDecodeBounds=true;
  try {
    BitmapFactory.decodeFile(realFilePath,optBounds);
  }
 catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + realFilePath,e);
    throw e;
  }
  int scale=1;
  if (maxWidth > 0 && optBounds.outWidth > maxWidth) {
    double d=Math.pow(2,(int)Math.round(Math.log(maxWidth / (double)optBounds.outWidth) / Math.log(0.5)));
    scale=(int)d;
  }
  BitmapFactory.Options optActual=new BitmapFactory.Options();
  optActual.inSampleSize=scale;
  final Bitmap bmpResized;
  try {
    bmpResized=BitmapFactory.decodeFile(realFilePath,optActual);
  }
 catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + realFilePath,e);
    throw e;
  }
  if (bmpResized == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    throw new IOException(""String_Node_Str"");
  }
  float percentage=(float)maxWidth / bmpResized.getWidth();
  float proportionateHeight=bmpResized.getHeight() * percentage;
  int finalHeight=(int)Math.rint(proportionateHeight);
  float scaleWidth=((float)maxWidth) / bmpResized.getWidth();
  float scaleHeight=((float)finalHeight) / bmpResized.getHeight();
  float scaleBy=Math.min(scaleWidth,scaleHeight);
  Matrix matrix=new Matrix();
  matrix.postScale(scaleBy,scaleBy);
  if (orientation != 0) {
    matrix.setRotate(orientation);
  }
  Bitmap.CompressFormat fmt;
  if (fileExtension != null && (fileExtension.equals(""String_Node_Str"") || fileExtension.equals(""String_Node_Str""))) {
    fmt=Bitmap.CompressFormat.PNG;
  }
 else {
    fmt=Bitmap.CompressFormat.JPEG;
  }
  final Bitmap bmpRotated;
  try {
    bmpRotated=Bitmap.createBitmap(bmpResized,0,0,bmpResized.getWidth(),bmpResized.getHeight(),matrix,true);
  }
 catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",e);
    throw e;
  }
catch (  NullPointerException e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",e);
    throw e;
  }
  if (bmpRotated == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    throw new IOException(""String_Node_Str"");
  }
  return bmpRotated.compress(fmt,quality,outStream);
}","private static boolean resizeImageAndWriteToStream(Context context,Uri imageUri,String fileExtension,int maxWidth,int orientation,int quality,OutputStream outStream) throws OutOfMemoryError, IOException {
  String realFilePath=MediaUtils.getRealPathFromURI(context,imageUri);
  BitmapFactory.Options optBounds=new BitmapFactory.Options();
  optBounds.inJustDecodeBounds=true;
  try {
    BitmapFactory.decodeFile(realFilePath,optBounds);
  }
 catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + realFilePath,e);
    throw e;
  }
  int scale=1;
  if (maxWidth > 0 && optBounds.outWidth > maxWidth) {
    double d=Math.pow(2,(int)Math.round(Math.log(maxWidth / (double)optBounds.outWidth) / Math.log(0.5)));
    scale=(int)d;
  }
  BitmapFactory.Options optActual=new BitmapFactory.Options();
  optActual.inSampleSize=scale;
  final Bitmap bmpResized;
  try {
    bmpResized=BitmapFactory.decodeFile(realFilePath,optActual);
  }
 catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"" + realFilePath,e);
    throw e;
  }
  if (bmpResized == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    throw new IOException(""String_Node_Str"");
  }
  float percentage=(float)maxWidth / bmpResized.getWidth();
  float proportionateHeight=bmpResized.getHeight() * percentage;
  int finalHeight=(int)Math.rint(proportionateHeight);
  float scaleWidth=((float)maxWidth) / bmpResized.getWidth();
  float scaleHeight=((float)finalHeight) / bmpResized.getHeight();
  float scaleBy=Math.min(scaleWidth,scaleHeight);
  Matrix matrix=new Matrix();
  matrix.postScale(scaleBy,scaleBy);
  if (orientation != 0) {
    matrix.setRotate(orientation);
  }
  Bitmap.CompressFormat fmt;
  if (fileExtension != null && (fileExtension.equals(""String_Node_Str"") || fileExtension.equals(""String_Node_Str""))) {
    fmt=Bitmap.CompressFormat.PNG;
  }
 else {
    fmt=Bitmap.CompressFormat.JPEG;
  }
  final Bitmap bmpRotated;
  try {
    bmpRotated=Bitmap.createBitmap(bmpResized,0,0,bmpResized.getWidth(),bmpResized.getHeight(),matrix,true);
  }
 catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",e);
    throw e;
  }
catch (  NullPointerException e) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"",e);
    throw e;
  }
  if (bmpRotated == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    throw new IOException(""String_Node_Str"");
  }
  return bmpRotated.compress(fmt,quality,outStream);
}",0.9942669942669944
13868,"private void updateSiteOrFinishActivity(Bundle savedInstanceState){
  if (savedInstanceState == null) {
    if (getArguments() != null) {
      mSite=(SiteModel)getArguments().getSerializable(WordPress.SITE);
    }
 else {
      mSite=(SiteModel)getActivity().getIntent().getSerializableExtra(WordPress.SITE);
    }
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  if (mSite == null) {
    ToastUtils.showToast(getActivity(),R.string.blog_not_found,ToastUtils.Duration.SHORT);
    getActivity().finish();
  }
}","private void updateSiteOrFinishActivity(){
  if (getArguments() != null) {
    mSite=(SiteModel)getArguments().getSerializable(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)getActivity().getIntent().getSerializableExtra(WordPress.SITE);
  }
  if (mSite == null) {
    ToastUtils.showToast(getActivity(),R.string.blog_not_found,ToastUtils.Duration.SHORT);
    getActivity().finish();
  }
}",0.5911016949152542
13869,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  updateSiteOrFinishActivity(savedInstanceState);
  setRetainInstance(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  updateSiteOrFinishActivity();
  if (savedInstanceState != null) {
    String roleValue=savedInstanceState.getString(KEY_SELECTED_ROLE);
    if (!TextUtils.isEmpty(roleValue)) {
      mRole=Role.fromString(roleValue);
    }
    ArrayList<String> retainedUsernames=savedInstanceState.getStringArrayList(KEY_USERNAMES);
    if (retainedUsernames != null) {
      mUsernames.clear();
      mUsernames.addAll(retainedUsernames);
    }
  }
  setRetainInstance(true);
}",0.4184782608695652
13870,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mUsernamesContainer=(ViewGroup)view.findViewById(R.id.usernames);
  mUsernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      EditTextUtils.showSoftInput(mUsernameEditText);
    }
  }
);
  Role role=mRole;
  if (role == null) {
    role=getDefaultRole();
  }
  mUsernameEditText=(MultiUsernameEditText)view.findViewById(R.id.invite_usernames);
  mUsernameEditText.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View view,    int i,    KeyEvent keyEvent){
      return keyEvent.getKeyCode() == KeyEvent.KEYCODE_DEL && keyEvent.getAction() == KeyEvent.ACTION_DOWN && removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.setOnBackspacePressedListener(new MultiUsernameEditText.OnBackspacePressedListener(){
    @Override public boolean onBackspacePressed(){
      return removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    private boolean shouldIgnoreChanges=false;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (shouldIgnoreChanges) {
        return;
      }
      shouldIgnoreChanges=true;
      if (mUsernameButtons.size() >= MAX_NUMBER_OF_INVITEES && !TextUtils.isEmpty(s)) {
        resetEditTextContent(mUsernameEditText);
      }
 else       if (endsWithDelimiter(mUsernameEditText.getText().toString())) {
        addUsername(mUsernameEditText,null);
      }
      shouldIgnoreChanges=false;
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,null);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,null);
      }
    }
  }
);
  if (mUsernameButtons.size() > 0) {
    ArrayList<String> usernames=new ArrayList<>(mUsernameButtons.keySet());
    populateUsernameButtons(usernames);
  }
  mRoleTextView=(TextView)view.findViewById(R.id.role);
  setRole(role);
  ImageView imgRoleInfo=(ImageView)view.findViewById(R.id.imgRoleInfo);
  imgRoleInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.openUrlExternal(v.getContext(),URL_USER_ROLES_DOCUMENTATION);
    }
  }
);
  if (Role.inviteRoles(mSite).length > 1) {
    view.findViewById(R.id.role_container).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        RoleSelectDialogFragment.show(PeopleInviteFragment.this,0,mSite);
      }
    }
);
  }
 else {
    mRoleTextView.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);
  }
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)view.findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)view.findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mUsernamesContainer=(ViewGroup)view.findViewById(R.id.usernames);
  mUsernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      EditTextUtils.showSoftInput(mUsernameEditText);
    }
  }
);
  Role role=mRole;
  if (role == null) {
    role=getDefaultRole();
  }
  mUsernameEditText=(MultiUsernameEditText)view.findViewById(R.id.invite_usernames);
  mUsernameEditText.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View view,    int i,    KeyEvent keyEvent){
      return keyEvent.getKeyCode() == KeyEvent.KEYCODE_DEL && keyEvent.getAction() == KeyEvent.ACTION_DOWN && removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.setOnBackspacePressedListener(new MultiUsernameEditText.OnBackspacePressedListener(){
    @Override public boolean onBackspacePressed(){
      return removeLastEnteredUsername();
    }
  }
);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    private boolean shouldIgnoreChanges=false;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (shouldIgnoreChanges) {
        return;
      }
      shouldIgnoreChanges=true;
      if (mUsernameButtons.size() >= MAX_NUMBER_OF_INVITEES && !TextUtils.isEmpty(s)) {
        resetEditTextContent(mUsernameEditText);
      }
 else       if (endsWithDelimiter(mUsernameEditText.getText().toString())) {
        addUsername(mUsernameEditText,null);
      }
      shouldIgnoreChanges=false;
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,null);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,null);
      }
    }
  }
);
  if (!mUsernameButtons.isEmpty()) {
    mUsernameErrorViews.clear();
    populateUsernameButtons(new ArrayList<>(mUsernameButtons.keySet()));
  }
 else   if (!mUsernames.isEmpty()) {
    populateUsernameButtons(new ArrayList<>(mUsernames));
  }
  mRoleTextView=(TextView)view.findViewById(R.id.role);
  setRole(role);
  ImageView imgRoleInfo=(ImageView)view.findViewById(R.id.imgRoleInfo);
  imgRoleInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ActivityLauncher.openUrlExternal(v.getContext(),URL_USER_ROLES_DOCUMENTATION);
    }
  }
);
  if (Role.inviteRoles(mSite).length > 1) {
    view.findViewById(R.id.role_container).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        RoleSelectDialogFragment.show(PeopleInviteFragment.this,0,mSite);
      }
    }
);
  }
 else {
    mRoleTextView.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);
  }
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)view.findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)view.findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
}",0.9704347826086956
13871,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  boolean showEditMenu=mMediaId != 0 && mSite != null && mEnableMetadata && !hasEditFragment();
  boolean showSaveMenu=mMediaId != 0 && mSite != null && !mSite.isPrivate();
  boolean showShareMenu=mMediaId != 0 && mSite != null && !mSite.isPrivate();
  MenuItem mnuEdit=menu.findItem(R.id.menu_edit);
  mnuEdit.setVisible(showEditMenu);
  MenuItem mnuSave=menu.findItem(R.id.menu_save);
  mnuSave.setVisible(showSaveMenu);
  mnuSave.setEnabled(mDownloadId == 0);
  MenuItem mnuShare=menu.findItem(R.id.menu_share);
  mnuShare.setVisible(showShareMenu);
  return super.onPrepareOptionsMenu(menu);
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  boolean showEditMenu=mMediaId != 0 && mSite != null && mEnableMetadata && !mIsClosable;
  boolean showSaveMenu=mMediaId != 0 && mSite != null && !mSite.isPrivate();
  boolean showShareMenu=mMediaId != 0 && mSite != null && !mSite.isPrivate();
  MenuItem mnuEdit=menu.findItem(R.id.menu_edit);
  mnuEdit.setVisible(showEditMenu);
  MenuItem mnuSave=menu.findItem(R.id.menu_save);
  mnuSave.setVisible(showSaveMenu);
  mnuSave.setEnabled(mDownloadId == 0);
  MenuItem mnuShare=menu.findItem(R.id.menu_share);
  mnuShare.setVisible(showShareMenu);
  return super.onPrepareOptionsMenu(menu);
}",0.9785276073619632
13872,"private void setLookClosable(boolean lookClosable){
  if (mToolbar != null) {
    mToolbar.setNavigationIcon(lookClosable ? R.drawable.ic_close_white_24dp : R.drawable.ic_arrow_left_white_24dp);
  }
}","private void setLookClosable(boolean lookClosable){
  mIsClosable=lookClosable;
  if (mToolbar != null) {
    mToolbar.setNavigationIcon(lookClosable ? R.drawable.ic_close_white_24dp : R.drawable.ic_arrow_left_white_24dp);
  }
}",0.9345794392523364
13873,"private Uri getOptimizedPictureIfNecessary(Uri originalUri){
  String filePath=MediaUtils.getRealPathFromURI(this,originalUri);
  if (TextUtils.isEmpty(filePath)) {
    return originalUri;
  }
  Uri optimizedMedia=WPMediaUtils.getOptimizedMedia(this,mSite,filePath,false);
  if (optimizedMedia != null) {
    return optimizedMedia;
  }
  return originalUri;
}","private Uri getOptimizedPictureIfNecessary(Uri originalUri){
  String filePath=MediaUtils.getRealPathFromURI(this,originalUri);
  if (TextUtils.isEmpty(filePath)) {
    return originalUri;
  }
  Uri optimizedMedia=WPMediaUtils.getOptimizedMedia(this,mSite,filePath,false);
  if (optimizedMedia != null) {
    return optimizedMedia;
  }
 else {
    if (!mSite.isWPCom()) {
      Uri rotatedMedia=WPMediaUtils.fixOrientationIssue(this,filePath,false);
      if (rotatedMedia != null) {
        return rotatedMedia;
      }
    }
  }
  return originalUri;
}",0.7404162102957283
13874,"/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix;
    int dotPos=fileName.indexOf('.');
    if (dotPos > 0) {
      prefix=fileName.substring(0,dotPos) + ""String_Node_Str"";
    }
 else {
      prefix=fileName + ""String_Node_Str"";
    }
    if (prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}","/** 
 * Given the path to an image, rotate it by using EXIF info
 * @param context the passed context
 * @param path the path to the original image
 * @return the path to the rotated image or null
 */
public static String rotateImageIfNecessary(Context context,String path){
  if (context == null || TextUtils.isEmpty(path)) {
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    return null;
  }
  int orientation=getImageOrientation(context,path);
  if (orientation == 0) {
    return null;
  }
  String mimeType=MediaUtils.getMediaFileMimeType(file);
  if (mimeType.equals(""String_Node_Str"")) {
    return null;
  }
  Uri srcImageUri=Uri.parse(path);
  if (srcImageUri == null) {
    return null;
  }
  String fileName=MediaUtils.getMediaFileName(file,mimeType);
  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName).toLowerCase();
  int selectedWidth=getImageSize(srcImageUri,context)[0];
  if (selectedWidth == 0) {
    return null;
  }
  File rotatedImageFile;
  FileOutputStream out;
  try {
    String prefix;
    int dotPos=fileName.indexOf('.');
    if (dotPos > 0) {
      prefix=fileName.substring(0,dotPos);
    }
 else {
      prefix=fileName;
    }
    if (prefix.length() < 3) {
      prefix=""String_Node_Str"";
    }
    rotatedImageFile=File.createTempFile(prefix,""String_Node_Str"" + fileExtension);
    out=new FileOutputStream(rotatedImageFile);
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  SecurityException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
  try {
    boolean res=resizeImageAndWriteToStream(context,srcImageUri,fileExtension,selectedWidth,orientation,85,out);
    if (!res) {
      AppLog.w(AppLog.T.MEDIA,""String_Node_Str"");
      return null;
    }
  }
 catch (  IOException e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
catch (  OutOfMemoryError e) {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
    return null;
  }
 finally {
    try {
      out.flush();
      out.close();
    }
 catch (    IOException e) {
    }
  }
  String tempFilePath=rotatedImageFile.getPath();
  if (!TextUtils.isEmpty(tempFilePath)) {
    return tempFilePath;
  }
 else {
    AppLog.e(AppLog.T.MEDIA,""String_Node_Str"");
  }
  return null;
}",0.9760479041916168
13875,"public void handleEditPostResult(int resultCode,Intent data){
  if (resultCode != Activity.RESULT_OK || data == null || !isAdded()) {
    return;
  }
  boolean hasChanges=data.getBooleanExtra(EditPostActivity.EXTRA_HAS_CHANGES,false);
  if (!hasChanges) {
    return;
  }
  boolean savedLocally=data.getBooleanExtra(EditPostActivity.EXTRA_SAVED_AS_LOCAL_DRAFT,false);
  if (savedLocally && !NetworkUtils.isNetworkAvailable(getActivity())) {
    ToastUtils.showToast(getActivity(),R.string.error_publish_no_network,ToastUtils.Duration.SHORT);
    return;
  }
  final PostModel post=(PostModel)data.getSerializableExtra(EditPostActivity.EXTRA_POST);
  boolean hasUnfinishedMedia=data.getBooleanExtra(EditPostActivity.EXTRA_HAS_UNFINISHED_MEDIA,false);
  if (hasUnfinishedMedia) {
    showSnackbar(R.string.editor_post_saved_locally_unfinished_media,R.string.button_edit,new View.OnClickListener(){
      @Override public void onClick(      View v){
        ActivityLauncher.editPostOrPageForResult(getActivity(),mSite,post);
      }
    }
);
  }
  boolean isPublishable=post != null && PostUtils.isPublishable(post);
  boolean isScheduledPost=post != null && PostStatus.fromPost(post) == PostStatus.SCHEDULED;
  boolean isDraft=post != null && PostStatus.fromPost(post) == PostStatus.DRAFT;
  if (isPublishable) {
    View.OnClickListener publishPostListener=new View.OnClickListener(){
      @Override public void onClick(      View v){
        publishPost(post);
      }
    }
;
    int message;
    if (isDraft) {
      message=savedLocally ? R.string.editor_draft_saved_locally : R.string.editor_draft_saved_online;
    }
 else {
      message=savedLocally ? R.string.editor_post_saved_locally : R.string.editor_post_saved_online;
    }
    int buttonLabel=isScheduledPost ? R.string.button_sync : R.string.button_publish;
    showSnackbar(message,buttonLabel,publishPostListener);
  }
 else {
    if (savedLocally) {
      ToastUtils.showToast(getActivity(),R.string.editor_draft_saved_locally);
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.editor_draft_saved_online);
    }
  }
}","public void handleEditPostResult(int resultCode,Intent data){
  if (resultCode != Activity.RESULT_OK || data == null || !isAdded()) {
    return;
  }
  boolean hasChanges=data.getBooleanExtra(EditPostActivity.EXTRA_HAS_CHANGES,false);
  if (!hasChanges) {
    return;
  }
  boolean savedLocally=data.getBooleanExtra(EditPostActivity.EXTRA_SAVED_AS_LOCAL_DRAFT,false);
  if (savedLocally && !NetworkUtils.isNetworkAvailable(getActivity())) {
    ToastUtils.showToast(getActivity(),R.string.error_publish_no_network,ToastUtils.Duration.SHORT);
    return;
  }
  final PostModel post=(PostModel)data.getSerializableExtra(EditPostActivity.EXTRA_POST);
  boolean hasUnfinishedMedia=data.getBooleanExtra(EditPostActivity.EXTRA_HAS_UNFINISHED_MEDIA,false);
  if (hasUnfinishedMedia) {
    showSnackbar(R.string.editor_post_saved_locally_unfinished_media,R.string.button_edit,new View.OnClickListener(){
      @Override public void onClick(      View v){
        ActivityLauncher.editPostOrPageForResult(getActivity(),mSite,post);
      }
    }
);
    return;
  }
  View.OnClickListener publishPostListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      publishPost(post);
    }
  }
;
  boolean isScheduledPost=post != null && PostStatus.fromPost(post) == PostStatus.SCHEDULED;
  if (isScheduledPost) {
    if (savedLocally) {
      showSnackbar(R.string.editor_post_saved_locally,R.string.button_sync,publishPostListener);
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.editor_scheduled_post_saved_online);
    }
    return;
  }
  boolean isPublishable=post != null && PostUtils.isPublishable(post);
  boolean isDraft=post != null && PostStatus.fromPost(post) == PostStatus.DRAFT;
  if (isPublishable) {
    int message;
    if (isDraft) {
      message=savedLocally ? R.string.editor_draft_saved_locally : R.string.editor_draft_saved_online;
    }
 else {
      message=savedLocally ? R.string.editor_post_saved_locally : R.string.editor_post_saved_online;
    }
    showSnackbar(message,R.string.button_publish,publishPostListener);
  }
 else {
    if (savedLocally) {
      ToastUtils.showToast(getActivity(),R.string.editor_draft_saved_locally);
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.editor_draft_saved_online);
    }
  }
}",0.6874289611275289
13876,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.welcome_activity);
  if (savedInstanceState == null) {
    addLoginPrologueFragment();
  }
  mLoginNavigationController=new LoginNavigationController(LoginState.PROLOGUE,this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.welcome_activity);
  if (savedInstanceState == null) {
    addLoginPrologueFragment();
  }
}",0.8652037617554859
13877,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  if (savedInstanceState != null) {
    mPostExcerpt=savedInstanceState.getString(EXCERPT_TAG,""String_Node_Str"");
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  LayoutInflater factory=LayoutInflater.from(getActivity());
  View textEntryView=factory.inflate(R.layout.post_excerpt_dialog,null);
  builder.setView(textEntryView);
  builder.setTitle(R.string.post_excerpt);
  builder.setNegativeButton(R.string.cancel,null);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  AlertDialog dialog=builder.create();
  EditText editText=(EditText)textEntryView.findViewById(R.id.post_excerpt_dialog_edit_text);
  editText.setText(mPostExcerpt);
  return dialog;
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity(),R.style.Calypso_AlertDialog);
  LayoutInflater factory=LayoutInflater.from(getActivity());
  View textEntryView=factory.inflate(R.layout.post_excerpt_dialog,null);
  builder.setView(textEntryView);
  builder.setTitle(R.string.post_excerpt);
  builder.setNegativeButton(R.string.cancel,null);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  AlertDialog dialog=builder.create();
  EditText editText=(EditText)textEntryView.findViewById(R.id.post_excerpt_dialog_edit_text);
  editText.setText(mPostExcerpt);
  return dialog;
}",0.9304245283018868
13878,"public static SignInDialogFragment newInstance(String title,String message,int imageSource,int numberOfButtons,String firstButtonLabel,String secondButtonLabel,String thirdButtonLabel,int firstButtonAction,int secondButtonAction,int thirdButtonAction,String tellMeMoreButtonFaqId,String tellMeMoreButtonSectionId){
  SignInDialogFragment adf=new SignInDialogFragment();
  Bundle bundle=new Bundle();
  bundle.putString(ARG_TITLE,title);
  bundle.putString(ARG_DESCRIPTION,message);
  bundle.putInt(ARG_IMAGE,imageSource);
  bundle.putInt(ARG_NUMBER_OF_BUTTONS,numberOfButtons);
  bundle.putString(ARG_FIRST_BUTTON_LABEL,firstButtonLabel);
  bundle.putString(ARG_SECOND_BUTTON_LABEL,secondButtonLabel);
  bundle.putString(ARG_THIRD_BUTTON_LABEL,thirdButtonLabel);
  bundle.putInt(ARG_FIRST_BUTTON_ACTION,firstButtonAction);
  bundle.putInt(ARG_SECOND_BUTTON_ACTION,secondButtonAction);
  bundle.putInt(ARG_THIRD_BUTTON_ACTION,thirdButtonAction);
  bundle.putString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_FAQ_ID,tellMeMoreButtonFaqId);
  bundle.putString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_SECTION_ID,tellMeMoreButtonSectionId);
  adf.setArguments(bundle);
  adf.setStyle(DialogFragment.STYLE_NO_TITLE,android.R.style.Theme);
  return adf;
}","public static SignInDialogFragment newInstance(String title,String message,int imageSource,int numberOfButtons,String firstButtonLabel,String secondButtonLabel,String thirdButtonLabel,int secondButtonAction,int thirdButtonAction,String tellMeMoreButtonFaqId,String tellMeMoreButtonSectionId){
  SignInDialogFragment adf=new SignInDialogFragment();
  Bundle bundle=new Bundle();
  bundle.putString(ARG_TITLE,title);
  bundle.putString(ARG_DESCRIPTION,message);
  bundle.putInt(ARG_IMAGE,imageSource);
  bundle.putInt(ARG_NUMBER_OF_BUTTONS,numberOfButtons);
  bundle.putString(ARG_FIRST_BUTTON_LABEL,firstButtonLabel);
  bundle.putString(ARG_SECOND_BUTTON_LABEL,secondButtonLabel);
  bundle.putString(ARG_THIRD_BUTTON_LABEL,thirdButtonLabel);
  bundle.putInt(ARG_SECOND_BUTTON_ACTION,secondButtonAction);
  bundle.putInt(ARG_THIRD_BUTTON_ACTION,thirdButtonAction);
  bundle.putString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_FAQ_ID,tellMeMoreButtonFaqId);
  bundle.putString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_SECTION_ID,tellMeMoreButtonSectionId);
  adf.setArguments(bundle);
  adf.setStyle(DialogFragment.STYLE_NO_TITLE,android.R.style.Theme);
  return adf;
}",0.6574539363484088
13879,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  getDialog().getWindow().setBackgroundDrawable(getResources().getDrawable(R.color.nux_alert_bg));
  View v=inflater.inflate(R.layout.signin_dialog_fragment,container,false);
  mImageView=(ImageView)v.findViewById(R.id.nux_dialog_image);
  mTitleTextView=(WPTextView)v.findViewById(R.id.nux_dialog_title);
  mDescriptionTextView=(WPTextView)v.findViewById(R.id.nux_dialog_description);
  mFooterBottomButton=(WPTextView)v.findViewById(R.id.nux_dialog_first_button);
  mFooterTopButton=(WPTextView)v.findViewById(R.id.nux_dialog_third_button);
  mFooterCenterButton=(WPTextView)v.findViewById(R.id.nux_dialog_second_button);
  final Bundle arguments=getArguments();
  mTitleTextView.setText(arguments.getString(ARG_TITLE));
  mDescriptionTextView.setText(arguments.getString(ARG_DESCRIPTION));
  mImageView.setImageResource(arguments.getInt(ARG_IMAGE));
  View.OnClickListener clickListenerDismiss=new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismissAllowingStateLoss();
    }
  }
;
  View.OnClickListener clickListenerSecondButton=new View.OnClickListener(){
    @Override public void onClick(    View v){
      onClickAction(v,arguments.getInt(ARG_SECOND_BUTTON_ACTION,0),arguments);
    }
  }
;
  View.OnClickListener clickListenerThirdButton=new View.OnClickListener(){
    @Override public void onClick(    View v){
      onClickAction(v,arguments.getInt(ARG_THIRD_BUTTON_ACTION,0),arguments);
    }
  }
;
switch (arguments.getInt(ARG_NUMBER_OF_BUTTONS,1)) {
case 1:
    mFooterCenterButton.setText(arguments.getString(ARG_FIRST_BUTTON_LABEL));
  mFooterCenterButton.setOnClickListener(clickListenerDismiss);
mFooterBottomButton.setVisibility(View.GONE);
mFooterTopButton.setVisibility(View.GONE);
break;
case 2:
mFooterBottomButton.setText(arguments.getString(ARG_FIRST_BUTTON_LABEL));
mFooterTopButton.setText(arguments.getString(ARG_SECOND_BUTTON_LABEL));
mFooterCenterButton.setVisibility(View.GONE);
mFooterTopButton.setOnClickListener(clickListenerSecondButton);
break;
case 3:
mFooterBottomButton.setText(arguments.getString(ARG_FIRST_BUTTON_LABEL));
mFooterCenterButton.setText(arguments.getString(ARG_SECOND_BUTTON_LABEL));
mFooterCenterButton.setOnClickListener(clickListenerSecondButton);
mFooterTopButton.setText(arguments.getString(ARG_THIRD_BUTTON_LABEL));
mFooterTopButton.setOnClickListener(clickListenerThirdButton);
break;
}
v.setClickable(true);
v.setOnClickListener(clickListenerDismiss);
mFooterBottomButton.setOnClickListener(clickListenerDismiss);
return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (getDialog().getWindow() != null) {
    getDialog().getWindow().setBackgroundDrawable(getResources().getDrawable(R.color.nux_alert_bg));
  }
  View v=inflater.inflate(R.layout.signin_dialog_fragment,container,false);
  ImageView imageView=(ImageView)v.findViewById(R.id.nux_dialog_image);
  WPTextView titleTextView=(WPTextView)v.findViewById(R.id.nux_dialog_title);
  WPTextView descriptionTextView=(WPTextView)v.findViewById(R.id.nux_dialog_description);
  WPTextView footerBottomButton=(WPTextView)v.findViewById(R.id.nux_dialog_first_button);
  WPTextView footerTopButton=(WPTextView)v.findViewById(R.id.nux_dialog_third_button);
  WPTextView footerCenterButton=(WPTextView)v.findViewById(R.id.nux_dialog_second_button);
  final Bundle arguments=getArguments();
  titleTextView.setText(arguments.getString(ARG_TITLE));
  descriptionTextView.setText(arguments.getString(ARG_DESCRIPTION));
  imageView.setImageResource(arguments.getInt(ARG_IMAGE));
  View.OnClickListener clickListenerDismiss=new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismissAllowingStateLoss();
    }
  }
;
  View.OnClickListener clickListenerSecondButton=new View.OnClickListener(){
    @Override public void onClick(    View v){
      onClickAction(v,arguments.getInt(ARG_SECOND_BUTTON_ACTION,0),arguments);
    }
  }
;
  View.OnClickListener clickListenerThirdButton=new View.OnClickListener(){
    @Override public void onClick(    View v){
      onClickAction(v,arguments.getInt(ARG_THIRD_BUTTON_ACTION,0),arguments);
    }
  }
;
switch (arguments.getInt(ARG_NUMBER_OF_BUTTONS,1)) {
case 1:
    footerCenterButton.setText(arguments.getString(ARG_FIRST_BUTTON_LABEL));
  footerCenterButton.setOnClickListener(clickListenerDismiss);
footerBottomButton.setVisibility(View.GONE);
footerTopButton.setVisibility(View.GONE);
break;
case 2:
footerBottomButton.setText(arguments.getString(ARG_FIRST_BUTTON_LABEL));
footerTopButton.setText(arguments.getString(ARG_SECOND_BUTTON_LABEL));
footerCenterButton.setVisibility(View.GONE);
footerTopButton.setOnClickListener(clickListenerSecondButton);
break;
case 3:
footerBottomButton.setText(arguments.getString(ARG_FIRST_BUTTON_LABEL));
footerCenterButton.setText(arguments.getString(ARG_SECOND_BUTTON_LABEL));
footerCenterButton.setOnClickListener(clickListenerSecondButton);
footerTopButton.setText(arguments.getString(ARG_THIRD_BUTTON_LABEL));
footerTopButton.setOnClickListener(clickListenerThirdButton);
break;
}
v.setClickable(true);
v.setOnClickListener(clickListenerDismiss);
footerBottomButton.setOnClickListener(clickListenerDismiss);
return v;
}",0.9283710491864596
13880,"private void onClickAction(View v,int action,Bundle arguments){
  if (!isAdded()) {
    return;
  }
switch (action) {
case ACTION_OPEN_URL:
    String url=arguments.getString(ARG_OPEN_URL_PARAM);
  if (TextUtils.isEmpty(url)) {
    return;
  }
ActivityLauncher.openUrlExternal(getContext(),url);
break;
case ACTION_OPEN_SUPPORT_CHAT:
HelpshiftHelper.getInstance().addMetaData(MetadataKey.USER_ENTERED_URL,arguments.getString(SignInFragment.ENTERED_URL_KEY));
HelpshiftHelper.getInstance().addMetaData(MetadataKey.USER_ENTERED_USERNAME,arguments.getString(SignInFragment.ENTERED_USERNAME_KEY));
Tag origin=(Tag)arguments.getSerializable(HelpshiftHelper.ORIGIN_KEY);
HelpshiftHelper.getInstance().showConversation(getActivity(),mSiteStore,origin,mAccountStore.getAccount().getUserName());
dismissAllowingStateLoss();
break;
case ACTION_OPEN_APPLICATION_LOG:
startActivity(new Intent(v.getContext(),AppLogViewerActivity.class));
dismissAllowingStateLoss();
break;
case ACTION_OPEN_FAQ_PAGE:
String faqid=arguments.getString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_FAQ_ID);
String sectionid=arguments.getString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_SECTION_ID);
if (faqid != null) {
Support.showSingleFAQ(getActivity(),faqid);
}
 else if (sectionid != null) {
Support.showFAQSection(getActivity(),sectionid);
}
break;
default :
case ACTION_FINISH:
getActivity().finish();
break;
}
}","private void onClickAction(View v,int action,Bundle arguments){
  if (!isAdded()) {
    return;
  }
switch (action) {
case ACTION_OPEN_URL:
    String url=arguments.getString(ARG_OPEN_URL_PARAM);
  if (TextUtils.isEmpty(url)) {
    return;
  }
ActivityLauncher.openUrlExternal(getContext(),url);
break;
case ACTION_OPEN_SUPPORT_CHAT:
HelpshiftHelper.getInstance().addMetaData(MetadataKey.USER_ENTERED_URL,arguments.getString(SignInFragment.ENTERED_URL_KEY));
HelpshiftHelper.getInstance().addMetaData(MetadataKey.USER_ENTERED_USERNAME,arguments.getString(SignInFragment.ENTERED_USERNAME_KEY));
Tag origin=(Tag)arguments.getSerializable(HelpshiftHelper.ORIGIN_KEY);
HelpshiftHelper.getInstance().showConversation(getActivity(),mSiteStore,origin,mAccountStore.getAccount().getUserName());
dismissAllowingStateLoss();
break;
case ACTION_OPEN_APPLICATION_LOG:
startActivity(new Intent(v.getContext(),AppLogViewerActivity.class));
dismissAllowingStateLoss();
break;
case ACTION_OPEN_FAQ_PAGE:
String faqId=arguments.getString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_FAQ_ID);
String sectionId=arguments.getString(ARG_TELL_ME_MORE_BUTTON_PARAM_NAME_SECTION_ID);
if (faqId != null) {
Support.showSingleFAQ(getActivity(),faqId);
}
 else if (sectionId != null) {
Support.showFAQSection(getActivity(),sectionId);
}
break;
default :
case ACTION_FINISH:
getActivity().finish();
break;
}
}",0.9956204379562044
13881,"private void showGenericErrorDialog(String errorMessage,String faqId,String faqSection){
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  SignInDialogFragment nuxAlert;
  int faqAction=SignInDialogFragment.ACTION_OPEN_SUPPORT_CHAT;
  String thirdButtonLabel=getString(R.string.contact_us);
  if (!TextUtils.isEmpty(faqId) || !TextUtils.isEmpty(faqSection)) {
    faqAction=SignInDialogFragment.ACTION_OPEN_FAQ_PAGE;
    thirdButtonLabel=getString(R.string.tell_me_more);
  }
  nuxAlert=SignInDialogFragment.newInstance(getString(org.wordpress.android.R.string.nux_cannot_log_in),errorMessage,R.drawable.ic_notice_white_64dp,3,getString(R.string.cancel),getString(R.string.reader_title_applog),thirdButtonLabel,SignInDialogFragment.ACTION_OPEN_SUPPORT_CHAT,SignInDialogFragment.ACTION_OPEN_APPLICATION_LOG,faqAction,faqId,faqSection);
  Bundle bundle=nuxAlert.getArguments();
  bundle.putSerializable(HelpshiftHelper.ORIGIN_KEY,HelpshiftHelper.chooseHelpshiftLoginTag(mJetpackCallbacks.isJetpackAuth(),isWPComLogin() && !mSelfHosted));
  nuxAlert.setArguments(bundle);
  ft.add(nuxAlert,""String_Node_Str"");
  ft.commitAllowingStateLoss();
}","private void showGenericErrorDialog(String errorMessage,String faqId,String faqSection){
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  SignInDialogFragment nuxAlert;
  int faqAction=SignInDialogFragment.ACTION_OPEN_SUPPORT_CHAT;
  String thirdButtonLabel=getString(R.string.contact_us);
  if (!TextUtils.isEmpty(faqId) || !TextUtils.isEmpty(faqSection)) {
    faqAction=SignInDialogFragment.ACTION_OPEN_FAQ_PAGE;
    thirdButtonLabel=getString(R.string.tell_me_more);
  }
  nuxAlert=SignInDialogFragment.newInstance(getString(org.wordpress.android.R.string.nux_cannot_log_in),errorMessage,R.drawable.ic_notice_white_64dp,3,getString(R.string.cancel),getString(R.string.reader_title_applog),thirdButtonLabel,SignInDialogFragment.ACTION_OPEN_APPLICATION_LOG,faqAction,faqId,faqSection);
  Bundle bundle=nuxAlert.getArguments();
  bundle.putSerializable(HelpshiftHelper.ORIGIN_KEY,HelpshiftHelper.chooseHelpshiftLoginTag(mJetpackCallbacks.isJetpackAuth(),isWPComLogin() && !mSelfHosted));
  nuxAlert.setArguments(bundle);
  ft.add(nuxAlert,""String_Node_Str"");
  ft.commitAllowingStateLoss();
}",0.9797356828193832
13882,"public static void viewBlogSettingsForResult(Activity activity,Blog blog){
  if (blog == null)   return;
  Intent intent=new Intent(activity,BlogPreferencesActivity.class);
  intent.putExtra(WordPress.SITE,site);
  activity.startActivityForResult(intent,RequestCodes.SITE_SETTINGS);
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.OPENED_BLOG_SETTINGS,site);
}","public static void viewBlogSettingsForResult(Activity activity,SiteModel site){
  Intent intent=new Intent(activity,BlogPreferencesActivity.class);
  intent.putExtra(WordPress.SITE,site);
  activity.startActivityForResult(intent,RequestCodes.SITE_SETTINGS);
  AnalyticsUtils.trackWithSiteDetails(AnalyticsTracker.Stat.OPENED_BLOG_SETTINGS,site);
}",0.9262865090403338
13883,"private void prepareUploadAnalytics(){
  mCurrentUploadingPostAnalyticsProperties=new HashMap<>();
  mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",AnalyticsUtils.getWordCount(mPost.getContent()));
  if (hasGallery()) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (mHasImage) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (mHasVideo) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (mHasCategory) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (!mPost.getTagNameList().isEmpty()) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",AppPrefs.isVisualEditorEnabled());
}","private void prepareUploadAnalytics(String postContent){
  mCurrentUploadingPostAnalyticsProperties=new HashMap<>();
  mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",AnalyticsUtils.getWordCount(mPost.getContent()));
  if (hasGallery()) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (!mHasImage) {
    String imageTagsPattern=""String_Node_Str"";
    Pattern pattern=Pattern.compile(imageTagsPattern);
    Matcher matcher=pattern.matcher(postContent);
    mHasImage=matcher.find();
  }
  if (mHasImage) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (!mHasVideo) {
    String videoTagsPattern=""String_Node_Str"";
    Pattern pattern=Pattern.compile(videoTagsPattern);
    Matcher matcher=pattern.matcher(postContent);
    mHasVideo=matcher.find();
  }
  if (mHasVideo) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (mHasCategory) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  if (!mPost.getTagNameList().isEmpty()) {
    mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",true);
  }
  mCurrentUploadingPostAnalyticsProperties.put(""String_Node_Str"",AppPrefs.isVisualEditorEnabled());
}",0.7942583732057417
13884,"@Override protected Boolean doInBackground(PostModel... posts){
  mPost=posts[0];
  String postTitle=TextUtils.isEmpty(mPost.getTitle()) ? getString(R.string.untitled) : mPost.getTitle();
  String uploadingPostTitle=String.format(getString(R.string.posting_post),postTitle);
  String uploadingPostMessage=String.format(getString(R.string.sending_content),mPost.isPage() ? getString(R.string.page).toLowerCase() : getString(R.string.post).toLowerCase());
  mPostUploadNotifier.updateNotificationNewPost(mPost,uploadingPostTitle,uploadingPostMessage);
  mSite=mSiteStore.getSiteByLocalId(mPost.getLocalSiteId());
  if (mSite == null) {
    mErrorMessage=mContext.getString(R.string.blog_not_found);
    return false;
  }
  if (TextUtils.isEmpty(mPost.getStatus())) {
    mPost.setStatus(PostStatus.PUBLISHED.toString());
  }
  String content=mPost.getContent();
  if (content.length() > 0 && content.charAt(0) == '\u200B') {
    content=content.substring(1,content.length());
  }
  content=processPostMedia(content);
  mPost.setContent(content);
  if (mIsMediaError) {
    return false;
  }
  if (mPost.getCategoryIdList().size() > 0) {
    mHasCategory=true;
  }
  if (mUseLegacyMode && featuredImageID != -1) {
    mPost.setFeaturedImageId(featuredImageID);
  }
  EventBus.getDefault().post(new PostUploadStarted(mPost.getLocalSiteId()));
  RemotePostPayload payload=new RemotePostPayload(mPost,mSite);
  mDispatcher.dispatch(PostActionBuilder.newPushPostAction(payload));
  if (mFirstPublishPosts.contains(mPost.getId())) {
    prepareUploadAnalytics();
  }
  return true;
}","@Override protected Boolean doInBackground(PostModel... posts){
  mPost=posts[0];
  String postTitle=TextUtils.isEmpty(mPost.getTitle()) ? getString(R.string.untitled) : mPost.getTitle();
  String uploadingPostTitle=String.format(getString(R.string.posting_post),postTitle);
  String uploadingPostMessage=String.format(getString(R.string.sending_content),mPost.isPage() ? getString(R.string.page).toLowerCase() : getString(R.string.post).toLowerCase());
  mPostUploadNotifier.updateNotificationNewPost(mPost,uploadingPostTitle,uploadingPostMessage);
  mSite=mSiteStore.getSiteByLocalId(mPost.getLocalSiteId());
  if (mSite == null) {
    mErrorMessage=mContext.getString(R.string.blog_not_found);
    return false;
  }
  if (TextUtils.isEmpty(mPost.getStatus())) {
    mPost.setStatus(PostStatus.PUBLISHED.toString());
  }
  String content=mPost.getContent();
  if (content.length() > 0 && content.charAt(0) == '\u200B') {
    content=content.substring(1,content.length());
  }
  content=processPostMedia(content);
  mPost.setContent(content);
  if (mIsMediaError) {
    return false;
  }
  if (mPost.getCategoryIdList().size() > 0) {
    mHasCategory=true;
  }
  if (mUseLegacyMode && featuredImageID != -1) {
    mPost.setFeaturedImageId(featuredImageID);
  }
  if (mFirstPublishPosts.contains(mPost.getId())) {
    prepareUploadAnalytics(mPost.getContent());
  }
  EventBus.getDefault().post(new PostUploadStarted(mPost.getLocalSiteId()));
  RemotePostPayload payload=new RemotePostPayload(mPost,mSite);
  mDispatcher.dispatch(PostActionBuilder.newPushPostAction(payload));
  return true;
}",0.9318181818181818
13885,"private void sendMagicLinkRequest(){
  disableRequestEmailButtonAndShowProgressDialog();
  Map<String,String> params=new HashMap<>();
  params.put(EMAIL_KEY,mEmail);
  params.put(CLIENT_ID_KEY,BuildConfig.OAUTH_APP_ID);
  params.put(CLIENT_SECRET_KEY,BuildConfig.OAUTH_APP_SECRET);
  WordPress.getRestClientUtilsV1_1().sendLoginEmail(params,new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      if (mListener != null) {
        mProgressDialog.cancel();
        AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_REQUESTED);
        mListener.onMagicLinkSent();
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      HashMap<String,String> errorProperties=new HashMap<>();
      errorProperties.put(ERROR_KEY,error.getMessage());
      AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_FAILED,errorProperties);
      if (getView() != null) {
        Snackbar.make(getView(),R.string.magic_link_unavailable_error_message,Snackbar.LENGTH_SHORT);
      }
      if (mListener != null) {
        mListener.onEnterPasswordRequested();
      }
    }
  }
);
}","private void sendMagicLinkRequest(){
  if (!NetworkUtils.isNetworkAvailable(getActivity())) {
    ToastUtils.showToast(getActivity(),R.string.no_network_message,ToastUtils.Duration.LONG);
    return;
  }
  disableRequestEmailButtonAndShowProgressDialog();
  Map<String,String> params=new HashMap<>();
  params.put(EMAIL_KEY,mEmail);
  params.put(CLIENT_ID_KEY,BuildConfig.OAUTH_APP_ID);
  params.put(CLIENT_SECRET_KEY,BuildConfig.OAUTH_APP_SECRET);
  WordPress.getRestClientUtilsV1_1().sendLoginEmail(params,new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      mProgressDialog.cancel();
      AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_REQUESTED);
      if (mListener != null) {
        mListener.onMagicLinkSent();
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      HashMap<String,String> errorProperties=new HashMap<>();
      errorProperties.put(ERROR_KEY,error.getMessage());
      AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_FAILED,errorProperties);
      mProgressDialog.cancel();
      if (isAdded()) {
        ToastUtils.showToast(getActivity(),R.string.magic_link_unavailable_error_message,ToastUtils.Duration.LONG);
      }
      if (mListener != null) {
        mListener.onEnterPasswordRequested();
      }
    }
  }
);
}",0.7500971628449281
13886,"@Override public void onResponse(JSONObject response){
  if (mListener != null) {
    mProgressDialog.cancel();
    AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_REQUESTED);
    mListener.onMagicLinkSent();
  }
}","@Override public void onResponse(JSONObject response){
  mProgressDialog.cancel();
  AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_REQUESTED);
  if (mListener != null) {
    mListener.onMagicLinkSent();
  }
}",0.8628318584070797
13887,"@Override public void onErrorResponse(VolleyError error){
  HashMap<String,String> errorProperties=new HashMap<>();
  errorProperties.put(ERROR_KEY,error.getMessage());
  AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_FAILED,errorProperties);
  if (getView() != null) {
    Snackbar.make(getView(),R.string.magic_link_unavailable_error_message,Snackbar.LENGTH_SHORT);
  }
  if (mListener != null) {
    mListener.onEnterPasswordRequested();
  }
}","@Override public void onErrorResponse(VolleyError error){
  HashMap<String,String> errorProperties=new HashMap<>();
  errorProperties.put(ERROR_KEY,error.getMessage());
  AnalyticsTracker.track(AnalyticsTracker.Stat.LOGIN_MAGIC_LINK_FAILED,errorProperties);
  mProgressDialog.cancel();
  if (isAdded()) {
    ToastUtils.showToast(getActivity(),R.string.magic_link_unavailable_error_message,ToastUtils.Duration.LONG);
  }
  if (mListener != null) {
    mListener.onEnterPasswordRequested();
  }
}",0.608786610878661
13888,"public void showStatsActivityForSite(@NonNull SiteModel site,NoteBlockRangeType rangeType){
  if (isFinishing())   return;
  if (rangeType == NoteBlockRangeType.FOLLOW) {
    Intent intent=new Intent(this,StatsViewAllActivity.class);
    intent.putExtra(StatsAbstractFragment.ARGS_VIEW_TYPE,StatsViewType.FOLLOWERS);
    intent.putExtra(StatsAbstractFragment.ARGS_TIMEFRAME,StatsTimeframe.DAY);
    intent.putExtra(StatsAbstractFragment.ARGS_SELECTED_DATE,""String_Node_Str"");
    intent.putExtra(WordPress.SITE,site);
    intent.putExtra(StatsViewAllActivity.ARG_STATS_VIEW_ALL_TITLE,getString(R.string.stats_view_followers));
    startActivity(intent);
  }
 else {
    ActivityLauncher.viewBlogStats(this,site);
  }
}","private void showStatsActivityForSite(@NonNull SiteModel site,NoteBlockRangeType rangeType){
  if (isFinishing())   return;
  if (rangeType == NoteBlockRangeType.FOLLOW) {
    Intent intent=new Intent(this,StatsViewAllActivity.class);
    intent.putExtra(StatsAbstractFragment.ARGS_VIEW_TYPE,StatsViewType.FOLLOWERS);
    intent.putExtra(StatsAbstractFragment.ARGS_TIMEFRAME,StatsTimeframe.DAY);
    intent.putExtra(StatsAbstractFragment.ARGS_SELECTED_DATE,""String_Node_Str"");
    intent.putExtra(WordPress.SITE,site);
    intent.putExtra(StatsViewAllActivity.ARG_STATS_VIEW_ALL_TITLE,getString(R.string.stats_view_followers));
    startActivity(intent);
  }
 else {
    ActivityLauncher.viewBlogStats(this,site);
  }
}",0.9923451635351428
13889,"private @NonNull String getErrorMessage(PostModel post,String specificMessage){
  String postType=getString(post.isPage() ? R.string.page : R.string.post).toLowerCase();
  return String.format(mContext.getResources().getText(R.string.error_upload).toString(),postType,specificMessage);
}","private @NonNull String getErrorMessage(PostModel post,String specificMessage){
  String postType=getString(post.isPage() ? R.string.page : R.string.post).toLowerCase();
  return String.format(mContext.getResources().getText(R.string.error_upload_params).toString(),postType,specificMessage);
}",0.9879518072289156
13890,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
      String postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
    }
 else     if (extras != null) {
      mPost=(PostModel)extras.getSerializable(EXTRA_POST);
      if (mPost != null) {
        mOriginalPost=mPost.clone();
        mIsPage=mPost.isPage();
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoChooser();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoChooser();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost();
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      String postFormat=""String_Node_Str"";
      if (mSite.isWPCom() || mSite.isJetpackConnected()) {
        categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
        postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      }
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
    }
 else     if (extras != null) {
      mPost=(PostModel)extras.getSerializable(EXTRA_POST);
      if (mPost != null) {
        mOriginalPost=mPost.clone();
        mIsPage=mPost.isPage();
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoChooser();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoChooser();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost();
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}",0.9799815214043732
13891,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
      String postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
    }
 else     if (extras != null) {
      mPost=(PostModel)extras.getSerializable(EXTRA_POST);
      if (mPost != null) {
        mOriginalPost=mPost.clone();
        mIsPage=mPost.isPage();
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoChooser();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoChooser();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost();
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowAztecEditor=AppPrefs.isAztecEditorEnabled();
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        mSite=mSiteStore.getSiteByLocalId(localSiteId);
      }
      if (extras != null) {
        mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      }
      mIsNewPost=true;
      if (mSite == null) {
        showErrorAndFinish(R.string.blog_not_found);
        return;
      }
      if (!mSite.isVisible()) {
        showErrorAndFinish(R.string.error_blog_hidden);
        return;
      }
      List<Long> categories=new ArrayList<>();
      String postFormat=""String_Node_Str"";
      if (mSite.isWPCom() || mSite.isJetpackConnected()) {
        categories.add((long)SiteSettingsInterface.getDefaultCategory(WordPress.getContext()));
        postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      }
      mPost=mPostStore.instantiatePostModel(mSite,mIsPage,categories,postFormat);
    }
 else     if (extras != null) {
      mPost=(PostModel)extras.getSerializable(EXTRA_POST);
      if (mPost != null) {
        mOriginalPost=mPost.clone();
        mIsPage=mPost.isPage();
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(mImageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
        hidePhotoChooser();
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        hidePhotoChooser();
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost();
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}",0.9799815214043732
13892,"private void buildAndShowNotificationFromNoteData(Context context,Bundle data){
  if (data == null) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  final String wpcomNoteID=data.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"");
  if (TextUtils.isEmpty(wpcomNoteID)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  NotificationsUtils.buildNoteObjectFromBundleAndSaveIt(data);
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged(true));
  NotificationsActions.downloadNoteAndUpdateDB(wpcomNoteID,null,null);
  String noteType=StringUtils.notNullStr(data.getString(PUSH_ARG_TYPE));
  String title=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_TITLE));
  if (title == null) {
    title=context.getString(R.string.app_name);
  }
  String message=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_MSG));
  long thisTime=System.currentTimeMillis();
  if (AppPrefs.getLastPushNotificationWpcomNoteId().equals(wpcomNoteID)) {
    long seconds=TimeUnit.MILLISECONDS.toSeconds(thisTime - AppPrefs.getLastPushNotificationTime());
    if (seconds <= 1) {
      AppLog.w(T.NOTIFS,""String_Node_Str"");
      return;
    }
  }
  AppPrefs.setLastPushNotificationTime(thisTime);
  AppPrefs.setLastPushNotificationWpcomNoteId(wpcomNoteID);
  int pushId=0;
  for (  Integer id : sActiveNotificationsMap.keySet()) {
    if (id == null) {
      continue;
    }
    Bundle noteBundle=sActiveNotificationsMap.get(id);
    if (noteBundle != null && noteBundle.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"").equals(wpcomNoteID)) {
      pushId=id;
      sActiveNotificationsMap.put(pushId,data);
      break;
    }
  }
  if (pushId == 0) {
    pushId=PUSH_NOTIFICATION_ID + sActiveNotificationsMap.size();
    sActiveNotificationsMap.put(pushId,data);
  }
  if (NotificationsUtils.isNotificationsEnabled(context)) {
    Map<String,Object> properties=new HashMap<>();
    if (!TextUtils.isEmpty(noteType)) {
      if (noteType.equals(PUSH_TYPE_COMMENT)) {
        properties.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        properties.put(""String_Node_Str"",noteType);
      }
    }
    bumpPushNotificationsAnalytics(Stat.PUSH_NOTIFICATION_RECEIVED,data,properties);
    AnalyticsTracker.flush();
  }
  NotificationCompat.Builder builder=getNotificationBuilder(context,title,message);
  Bitmap largeIconBitmap=getLargeIconBitmap(context,data.getString(""String_Node_Str""),shouldCircularizeNoteIcon(noteType));
  if (largeIconBitmap != null) {
    builder.setLargeIcon(largeIconBitmap);
  }
  showSingleNotificationForBuilder(context,builder,noteType,wpcomNoteID,pushId,true);
  showGroupNotificationForBuilder(context,builder,wpcomNoteID,message,false);
}","private void buildAndShowNotificationFromNoteData(Context context,Bundle data){
  if (data == null) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  final String wpcomNoteID=data.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"");
  if (TextUtils.isEmpty(wpcomNoteID)) {
    AppLog.e(T.NOTIFS,""String_Node_Str"");
    return;
  }
  NotificationsUtils.buildNoteObjectFromBundleAndSaveIt(data);
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged(true));
  NotificationsActions.downloadNoteAndUpdateDB(wpcomNoteID,null,null);
  String noteType=StringUtils.notNullStr(data.getString(PUSH_ARG_TYPE));
  String title=StringEscapeUtils.unescapeHtml4(data.getString(PUSH_ARG_TITLE));
  if (title == null) {
    title=context.getString(R.string.app_name);
  }
  String message=StringEscapeUtils.unescapeHtml4(data.getString(PUSH_ARG_MSG));
  long thisTime=System.currentTimeMillis();
  if (AppPrefs.getLastPushNotificationWpcomNoteId().equals(wpcomNoteID)) {
    long seconds=TimeUnit.MILLISECONDS.toSeconds(thisTime - AppPrefs.getLastPushNotificationTime());
    if (seconds <= 1) {
      AppLog.w(T.NOTIFS,""String_Node_Str"");
      return;
    }
  }
  AppPrefs.setLastPushNotificationTime(thisTime);
  AppPrefs.setLastPushNotificationWpcomNoteId(wpcomNoteID);
  int pushId=0;
  for (  Integer id : sActiveNotificationsMap.keySet()) {
    if (id == null) {
      continue;
    }
    Bundle noteBundle=sActiveNotificationsMap.get(id);
    if (noteBundle != null && noteBundle.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"").equals(wpcomNoteID)) {
      pushId=id;
      sActiveNotificationsMap.put(pushId,data);
      break;
    }
  }
  if (pushId == 0) {
    pushId=PUSH_NOTIFICATION_ID + sActiveNotificationsMap.size();
    sActiveNotificationsMap.put(pushId,data);
  }
  if (NotificationsUtils.isNotificationsEnabled(context)) {
    Map<String,Object> properties=new HashMap<>();
    if (!TextUtils.isEmpty(noteType)) {
      if (noteType.equals(PUSH_TYPE_COMMENT)) {
        properties.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        properties.put(""String_Node_Str"",noteType);
      }
    }
    bumpPushNotificationsAnalytics(Stat.PUSH_NOTIFICATION_RECEIVED,data,properties);
    AnalyticsTracker.flush();
  }
  NotificationCompat.Builder builder=getNotificationBuilder(context,title,message);
  Bitmap largeIconBitmap=getLargeIconBitmap(context,data.getString(""String_Node_Str""),shouldCircularizeNoteIcon(noteType));
  if (largeIconBitmap != null) {
    builder.setLargeIcon(largeIconBitmap);
  }
  showSingleNotificationForBuilder(context,builder,noteType,wpcomNoteID,pushId,true);
  showGroupNotificationForBuilder(context,builder,wpcomNoteID,message,false);
}",0.9996300406955236
13893,"private void rebuildAndUpdateNotificationsOnSystemBar(Context context,Bundle data){
  String noteType=StringUtils.notNullStr(data.getString(PUSH_ARG_TYPE));
  Bundle authPNBundle=sActiveNotificationsMap.remove(AUTH_PUSH_NOTIFICATION_ID);
  ;
  if (authPNBundle != null) {
    handlePushAuth(context,authPNBundle);
    if (sActiveNotificationsMap.size() > 0 && noteType.equals(PUSH_TYPE_PUSH_AUTH)) {
      data=sActiveNotificationsMap.values().iterator().next();
    }
 else     if (noteType.equals(PUSH_TYPE_PUSH_AUTH)) {
      sActiveNotificationsMap.put(AUTH_PUSH_NOTIFICATION_ID,authPNBundle);
      return;
    }
  }
  Bitmap largeIconBitmap=null;
  String title=getNotificationTitleOrAppNameFromBundle(context,data);
  String message=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_MSG));
  NotificationCompat.Builder builder=null;
  String wpcomNoteID=null;
  if (sActiveNotificationsMap.size() == 1) {
    Bundle remainingNote=sActiveNotificationsMap.values().iterator().next();
    if (remainingNote != null) {
      String remainingNoteTitle=StringEscapeUtils.unescapeHtml(remainingNote.getString(PUSH_ARG_TITLE));
      if (!TextUtils.isEmpty(remainingNoteTitle)) {
        title=remainingNoteTitle;
      }
      String remainingNoteMessage=StringEscapeUtils.unescapeHtml(remainingNote.getString(PUSH_ARG_MSG));
      if (!TextUtils.isEmpty(remainingNoteMessage)) {
        message=remainingNoteMessage;
      }
      largeIconBitmap=getLargeIconBitmap(context,remainingNote.getString(""String_Node_Str""),shouldCircularizeNoteIcon(remainingNote.getString(PUSH_ARG_TYPE)));
      builder=getNotificationBuilder(context,title,message);
      long timeStampToShow=DateTimeUtils.timestampFromIso8601Millis(remainingNote.getString(""String_Node_Str""));
      timeStampToShow=timeStampToShow != 0 ? timeStampToShow : remainingNote.getLong(""String_Node_Str"",System.currentTimeMillis());
      builder.setWhen(timeStampToShow);
      noteType=StringUtils.notNullStr(remainingNote.getString(PUSH_ARG_TYPE));
      wpcomNoteID=remainingNote.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"");
      if (!sActiveNotificationsMap.isEmpty()) {
        showSingleNotificationForBuilder(context,builder,noteType,wpcomNoteID,sActiveNotificationsMap.keyAt(0),false);
      }
    }
  }
  if (builder == null) {
    builder=getNotificationBuilder(context,title,message);
  }
  if (largeIconBitmap == null) {
    largeIconBitmap=getLargeIconBitmap(context,data.getString(""String_Node_Str""),shouldCircularizeNoteIcon(PUSH_TYPE_BADGE_RESET));
  }
  if (wpcomNoteID == null) {
    wpcomNoteID=AppPrefs.getLastPushNotificationWpcomNoteId();
  }
  if (largeIconBitmap != null) {
    builder.setLargeIcon(largeIconBitmap);
  }
  showGroupNotificationForBuilder(context,builder,wpcomNoteID,message,false);
  if (authPNBundle != null) {
    sActiveNotificationsMap.put(AUTH_PUSH_NOTIFICATION_ID,authPNBundle);
  }
}","private void rebuildAndUpdateNotificationsOnSystemBar(Context context,Bundle data){
  String noteType=StringUtils.notNullStr(data.getString(PUSH_ARG_TYPE));
  Bundle authPNBundle=sActiveNotificationsMap.remove(AUTH_PUSH_NOTIFICATION_ID);
  ;
  if (authPNBundle != null) {
    handlePushAuth(context,authPNBundle);
    if (sActiveNotificationsMap.size() > 0 && noteType.equals(PUSH_TYPE_PUSH_AUTH)) {
      data=sActiveNotificationsMap.values().iterator().next();
    }
 else     if (noteType.equals(PUSH_TYPE_PUSH_AUTH)) {
      sActiveNotificationsMap.put(AUTH_PUSH_NOTIFICATION_ID,authPNBundle);
      return;
    }
  }
  Bitmap largeIconBitmap=null;
  String title=getNotificationTitleOrAppNameFromBundle(context,data);
  String message=StringEscapeUtils.unescapeHtml4(data.getString(PUSH_ARG_MSG));
  NotificationCompat.Builder builder=null;
  String wpcomNoteID=null;
  if (sActiveNotificationsMap.size() == 1) {
    Bundle remainingNote=sActiveNotificationsMap.values().iterator().next();
    if (remainingNote != null) {
      String remainingNoteTitle=StringEscapeUtils.unescapeHtml4(remainingNote.getString(PUSH_ARG_TITLE));
      if (!TextUtils.isEmpty(remainingNoteTitle)) {
        title=remainingNoteTitle;
      }
      String remainingNoteMessage=StringEscapeUtils.unescapeHtml4(remainingNote.getString(PUSH_ARG_MSG));
      if (!TextUtils.isEmpty(remainingNoteMessage)) {
        message=remainingNoteMessage;
      }
      largeIconBitmap=getLargeIconBitmap(context,remainingNote.getString(""String_Node_Str""),shouldCircularizeNoteIcon(remainingNote.getString(PUSH_ARG_TYPE)));
      builder=getNotificationBuilder(context,title,message);
      long timeStampToShow=DateTimeUtils.timestampFromIso8601Millis(remainingNote.getString(""String_Node_Str""));
      timeStampToShow=timeStampToShow != 0 ? timeStampToShow : remainingNote.getLong(""String_Node_Str"",System.currentTimeMillis());
      builder.setWhen(timeStampToShow);
      noteType=StringUtils.notNullStr(remainingNote.getString(PUSH_ARG_TYPE));
      wpcomNoteID=remainingNote.getString(PUSH_ARG_NOTE_ID,""String_Node_Str"");
      if (!sActiveNotificationsMap.isEmpty()) {
        showSingleNotificationForBuilder(context,builder,noteType,wpcomNoteID,sActiveNotificationsMap.keyAt(0),false);
      }
    }
  }
  if (builder == null) {
    builder=getNotificationBuilder(context,title,message);
  }
  if (largeIconBitmap == null) {
    largeIconBitmap=getLargeIconBitmap(context,data.getString(""String_Node_Str""),shouldCircularizeNoteIcon(PUSH_TYPE_BADGE_RESET));
  }
  if (wpcomNoteID == null) {
    wpcomNoteID=AppPrefs.getLastPushNotificationWpcomNoteId();
  }
  if (largeIconBitmap != null) {
    builder.setLargeIcon(largeIconBitmap);
  }
  showGroupNotificationForBuilder(context,builder,wpcomNoteID,message,false);
  if (authPNBundle != null) {
    sActiveNotificationsMap.put(AUTH_PUSH_NOTIFICATION_ID,authPNBundle);
  }
}",0.9994828477848646
13894,"private String getNotificationTitleOrAppNameFromBundle(Context context,Bundle data){
  String title=StringEscapeUtils.unescapeHtml(data.getString(PUSH_ARG_TITLE));
  if (title == null) {
    title=context.getString(R.string.app_name);
  }
  return title;
}","private String getNotificationTitleOrAppNameFromBundle(Context context,Bundle data){
  String title=StringEscapeUtils.unescapeHtml4(data.getString(PUSH_ARG_TITLE));
  if (title == null) {
    title=context.getString(R.string.app_name);
  }
  return title;
}",0.9980506822612084
13895,"private void showGroupNotificationForBuilder(Context context,NotificationCompat.Builder builder,String wpcomNoteID,String message,boolean notifyUser){
  if (builder == null || context == null) {
    return;
  }
  Bundle authPNBundle=sActiveNotificationsMap.remove(AUTH_PUSH_NOTIFICATION_ID);
  if (sActiveNotificationsMap.size() > 1) {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle pushBundle : sActiveNotificationsMap.values()) {
      if (noteCtr > MAX_INBOX_ITEMS) {
        break;
      }
      if (pushBundle == null || pushBundle.getString(PUSH_ARG_MSG) == null) {
        continue;
      }
      if (pushBundle.getString(PUSH_ARG_TYPE,""String_Node_Str"").equals(PUSH_TYPE_COMMENT)) {
        String pnTitle=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_TITLE)));
        String pnMessage=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnTitle + ""String_Node_Str"" + pnMessage);
      }
 else {
        String pnMessage=StringEscapeUtils.unescapeHtml((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnMessage);
      }
      noteCtr++;
    }
    if (sActiveNotificationsMap.size() > MAX_INBOX_ITEMS) {
      inboxStyle.setSummaryText(String.format(context.getString(R.string.more_notifications),sActiveNotificationsMap.size() - MAX_INBOX_ITEMS));
    }
    String subject=String.format(context.getString(R.string.new_notifications),sActiveNotificationsMap.size());
    NotificationCompat.Builder groupBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_my_sites_white_24dp).setColor(context.getResources().getColor(R.color.blue_wordpress)).setGroup(NOTIFICATION_GROUP_KEY).setGroupSummary(true).setAutoCancel(true).setTicker(message).setContentTitle(context.getString(R.string.app_name)).setContentText(subject).setStyle(inboxStyle);
    showNotificationForBuilder(groupBuilder,context,wpcomNoteID,GROUP_NOTIFICATION_ID,notifyUser);
  }
 else {
    builder.setGroupSummary(true);
    showNotificationForBuilder(builder,context,wpcomNoteID,GROUP_NOTIFICATION_ID,notifyUser);
  }
  if (authPNBundle != null) {
    sActiveNotificationsMap.put(AUTH_PUSH_NOTIFICATION_ID,authPNBundle);
  }
}","private void showGroupNotificationForBuilder(Context context,NotificationCompat.Builder builder,String wpcomNoteID,String message,boolean notifyUser){
  if (builder == null || context == null) {
    return;
  }
  Bundle authPNBundle=sActiveNotificationsMap.remove(AUTH_PUSH_NOTIFICATION_ID);
  if (sActiveNotificationsMap.size() > 1) {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle pushBundle : sActiveNotificationsMap.values()) {
      if (noteCtr > MAX_INBOX_ITEMS) {
        break;
      }
      if (pushBundle == null || pushBundle.getString(PUSH_ARG_MSG) == null) {
        continue;
      }
      if (pushBundle.getString(PUSH_ARG_TYPE,""String_Node_Str"").equals(PUSH_TYPE_COMMENT)) {
        String pnTitle=StringEscapeUtils.unescapeHtml4((pushBundle.getString(PUSH_ARG_TITLE)));
        String pnMessage=StringEscapeUtils.unescapeHtml4((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnTitle + ""String_Node_Str"" + pnMessage);
      }
 else {
        String pnMessage=StringEscapeUtils.unescapeHtml4((pushBundle.getString(PUSH_ARG_MSG)));
        inboxStyle.addLine(pnMessage);
      }
      noteCtr++;
    }
    if (sActiveNotificationsMap.size() > MAX_INBOX_ITEMS) {
      inboxStyle.setSummaryText(String.format(context.getString(R.string.more_notifications),sActiveNotificationsMap.size() - MAX_INBOX_ITEMS));
    }
    String subject=String.format(context.getString(R.string.new_notifications),sActiveNotificationsMap.size());
    NotificationCompat.Builder groupBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_my_sites_white_24dp).setColor(context.getResources().getColor(R.color.blue_wordpress)).setGroup(NOTIFICATION_GROUP_KEY).setGroupSummary(true).setAutoCancel(true).setTicker(message).setContentTitle(context.getString(R.string.app_name)).setContentText(subject).setStyle(inboxStyle);
    showNotificationForBuilder(groupBuilder,context,wpcomNoteID,GROUP_NOTIFICATION_ID,notifyUser);
  }
 else {
    builder.setGroupSummary(true);
    showNotificationForBuilder(builder,context,wpcomNoteID,GROUP_NOTIFICATION_ID,notifyUser);
  }
  if (authPNBundle != null) {
    sActiveNotificationsMap.put(AUTH_PUSH_NOTIFICATION_ID,authPNBundle);
  }
}",0.99934022432373
13896,"private void onCommentCreated(OnCommentChanged event){
  mIsSubmittingReply=false;
  mEditReply.setEnabled(true);
  mSubmitReplyBtn.setVisibility(View.VISIBLE);
  getView().findViewById(R.id.progress_submit_comment).setVisibility(View.GONE);
  updateStatusViews();
  if (event.isError()) {
    if (isAdded()) {
      String strUnEscapeHTML=StringEscapeUtils.unescapeHtml(event.error.message);
      ToastUtils.showToast(getActivity(),strUnEscapeHTML,ToastUtils.Duration.LONG);
      EditTextUtils.showSoftInput(mEditReply);
    }
    return;
  }
  if (mOnCommentChangeListener != null) {
    mOnCommentChangeListener.onCommentChanged(ChangeType.REPLIED);
  }
  if (isAdded()) {
    ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
    mEditReply.setText(null);
    mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
  }
  if (mComment != null && !(CommentStatus.fromString(mComment.getStatus()) == CommentStatus.APPROVED)) {
    moderateComment(CommentStatus.APPROVED);
  }
}","private void onCommentCreated(OnCommentChanged event){
  mIsSubmittingReply=false;
  mEditReply.setEnabled(true);
  mSubmitReplyBtn.setVisibility(View.VISIBLE);
  getView().findViewById(R.id.progress_submit_comment).setVisibility(View.GONE);
  updateStatusViews();
  if (event.isError()) {
    if (isAdded()) {
      String strUnEscapeHTML=StringEscapeUtils.unescapeHtml4(event.error.message);
      ToastUtils.showToast(getActivity(),strUnEscapeHTML,ToastUtils.Duration.LONG);
      EditTextUtils.showSoftInput(mEditReply);
    }
    return;
  }
  if (mOnCommentChangeListener != null) {
    mOnCommentChangeListener.onCommentChanged(ChangeType.REPLIED);
  }
  if (isAdded()) {
    ToastUtils.showToast(getActivity(),getString(R.string.note_reply_successful));
    mEditReply.setText(null);
    mEditReply.getAutoSaveTextHelper().clearSavedText(mEditReply);
  }
  if (mComment != null && !(CommentStatus.fromString(mComment.getStatus()) == CommentStatus.APPROVED)) {
    moderateComment(CommentStatus.APPROVED);
  }
}",0.9995085995085996
13897,"protected void updateUI(){
  super.updateUI();
  if (!isAdded() || !hasDataAvailable()) {
    return;
  }
  if (!mInsightsLatestPostModel.isLatestPostAvailable()) {
    return;
  }
  TextView moduleTitle=(TextView)getView().findViewById(R.id.stats_module_title);
  moduleTitle.setOnClickListener(ViewsTabOnClickListener);
  moduleTitle.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_latest_post_item,(ViewGroup)mResultContainer.getRootView(),false);
  String trendLabel=getString(R.string.stats_insights_latest_post_trend);
  String sinceLabel=StatsUtils.getSinceLabel(getActivity(),mInsightsLatestPostModel.getPostDate()).toLowerCase();
  String postTitle=StringEscapeUtils.unescapeHtml(mInsightsLatestPostModel.getPostTitle());
  if (TextUtils.isEmpty(postTitle)) {
    postTitle=getString(R.string.stats_insights_latest_post_no_title);
  }
  final String trendLabelFormatted=String.format(trendLabel,sinceLabel,postTitle);
  int startIndex, endIndex;
  startIndex=trendLabelFormatted.indexOf(postTitle);
  endIndex=startIndex + postTitle.length() + 1;
  Spannable descriptionTextToSpan=new SpannableString(trendLabelFormatted);
  descriptionTextToSpan.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.stats_link_text_color)),startIndex,endIndex,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  TextView trendLabelTextField=(TextView)ll.findViewById(R.id.stats_post_trend_label);
  trendLabelTextField.setText(descriptionTextToSpan);
  trendLabelTextField.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StatsUtils.openPostInReaderOrInAppWebview(getActivity(),mInsightsLatestPostModel.getBlogID(),String.valueOf(mInsightsLatestPostModel.getPostID()),StatsConstants.ITEM_TYPE_POST,mInsightsLatestPostModel.getPostURL());
    }
  }
);
  LinearLayout tabs=(LinearLayout)ll.findViewById(R.id.stats_latest_post_tabs);
  for (int i=0; i < tabs.getChildCount(); i++) {
    LinearLayout currentTab=(LinearLayout)tabs.getChildAt(i);
switch (i) {
case 0:
      setupTab(currentTab,FormatUtils.formatDecimal(mInsightsLatestPostModel.getPostViewsCount()),StatsVisitorsAndViewsFragment.OverviewLabel.VIEWS);
    break;
case 1:
  setupTab(currentTab,FormatUtils.formatDecimal(mInsightsLatestPostModel.getPostLikeCount()),StatsVisitorsAndViewsFragment.OverviewLabel.LIKES);
break;
case 2:
setupTab(currentTab,FormatUtils.formatDecimal(mInsightsLatestPostModel.getPostCommentCount()),StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS);
break;
}
}
mResultContainer.addView(ll);
}","protected void updateUI(){
  super.updateUI();
  if (!isAdded() || !hasDataAvailable()) {
    return;
  }
  if (!mInsightsLatestPostModel.isLatestPostAvailable()) {
    return;
  }
  TextView moduleTitle=(TextView)getView().findViewById(R.id.stats_module_title);
  moduleTitle.setOnClickListener(ViewsTabOnClickListener);
  moduleTitle.setTextColor(getResources().getColor(R.color.stats_link_text_color));
  LinearLayout ll=(LinearLayout)getActivity().getLayoutInflater().inflate(R.layout.stats_insights_latest_post_item,(ViewGroup)mResultContainer.getRootView(),false);
  String trendLabel=getString(R.string.stats_insights_latest_post_trend);
  String sinceLabel=StatsUtils.getSinceLabel(getActivity(),mInsightsLatestPostModel.getPostDate()).toLowerCase();
  String postTitle=StringEscapeUtils.unescapeHtml4(mInsightsLatestPostModel.getPostTitle());
  if (TextUtils.isEmpty(postTitle)) {
    postTitle=getString(R.string.stats_insights_latest_post_no_title);
  }
  final String trendLabelFormatted=String.format(trendLabel,sinceLabel,postTitle);
  int startIndex, endIndex;
  startIndex=trendLabelFormatted.indexOf(postTitle);
  endIndex=startIndex + postTitle.length() + 1;
  Spannable descriptionTextToSpan=new SpannableString(trendLabelFormatted);
  descriptionTextToSpan.setSpan(new ForegroundColorSpan(getResources().getColor(R.color.stats_link_text_color)),startIndex,endIndex,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  TextView trendLabelTextField=(TextView)ll.findViewById(R.id.stats_post_trend_label);
  trendLabelTextField.setText(descriptionTextToSpan);
  trendLabelTextField.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StatsUtils.openPostInReaderOrInAppWebview(getActivity(),mInsightsLatestPostModel.getBlogID(),String.valueOf(mInsightsLatestPostModel.getPostID()),StatsConstants.ITEM_TYPE_POST,mInsightsLatestPostModel.getPostURL());
    }
  }
);
  LinearLayout tabs=(LinearLayout)ll.findViewById(R.id.stats_latest_post_tabs);
  for (int i=0; i < tabs.getChildCount(); i++) {
    LinearLayout currentTab=(LinearLayout)tabs.getChildAt(i);
switch (i) {
case 0:
      setupTab(currentTab,FormatUtils.formatDecimal(mInsightsLatestPostModel.getPostViewsCount()),StatsVisitorsAndViewsFragment.OverviewLabel.VIEWS);
    break;
case 1:
  setupTab(currentTab,FormatUtils.formatDecimal(mInsightsLatestPostModel.getPostLikeCount()),StatsVisitorsAndViewsFragment.OverviewLabel.LIKES);
break;
case 2:
setupTab(currentTab,FormatUtils.formatDecimal(mInsightsLatestPostModel.getPostCommentCount()),StatsVisitorsAndViewsFragment.OverviewLabel.COMMENTS);
break;
}
}
mResultContainer.addView(ll);
}",0.999810999811
13898,"private static String getCurrentDateTimeTZ(String blogTimeZoneOption,String pattern){
  Date date=new Date();
  SimpleDateFormat gmtDf=new SimpleDateFormat(pattern);
  if (blogTimeZoneOption == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return gmtDf.format(date);
  }
  AppLog.v(T.STATS,""String_Node_Str"" + blogTimeZoneOption);
  String timezoneNormalized;
  if (TextUtils.isEmpty(blogTimeZoneOption) || blogTimeZoneOption.equals(""String_Node_Str"") || blogTimeZoneOption.equals(""String_Node_Str"")) {
    timezoneNormalized=""String_Node_Str"";
  }
 else {
    String[] timezoneSplitted=org.apache.commons.lang.StringUtils.split(blogTimeZoneOption,""String_Node_Str"");
    timezoneNormalized=timezoneSplitted[0];
    if (timezoneSplitted.length > 1 && timezoneSplitted[1].equals(""String_Node_Str"")) {
      timezoneNormalized+=""String_Node_Str"";
    }
    if (timezoneNormalized.startsWith(""String_Node_Str"")) {
      timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
    }
 else {
      if (timezoneNormalized.startsWith(""String_Node_Str"")) {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
 else {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
    }
  }
  AppLog.v(T.STATS,""String_Node_Str"" + timezoneNormalized);
  gmtDf.setTimeZone(TimeZone.getTimeZone(timezoneNormalized));
  return gmtDf.format(date);
}","private static String getCurrentDateTimeTZ(String blogTimeZoneOption,String pattern){
  Date date=new Date();
  SimpleDateFormat gmtDf=new SimpleDateFormat(pattern);
  if (blogTimeZoneOption == null) {
    AppLog.w(T.UTILS,""String_Node_Str"");
    return gmtDf.format(date);
  }
  AppLog.v(T.STATS,""String_Node_Str"" + blogTimeZoneOption);
  String timezoneNormalized;
  if (TextUtils.isEmpty(blogTimeZoneOption) || blogTimeZoneOption.equals(""String_Node_Str"") || blogTimeZoneOption.equals(""String_Node_Str"")) {
    timezoneNormalized=""String_Node_Str"";
  }
 else {
    String[] timezoneSplitted=org.apache.commons.lang3.StringUtils.split(blogTimeZoneOption,""String_Node_Str"");
    timezoneNormalized=timezoneSplitted[0];
    if (timezoneSplitted.length > 1 && timezoneSplitted[1].equals(""String_Node_Str"")) {
      timezoneNormalized+=""String_Node_Str"";
    }
    if (timezoneNormalized.startsWith(""String_Node_Str"")) {
      timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
    }
 else {
      if (timezoneNormalized.startsWith(""String_Node_Str"")) {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
 else {
        timezoneNormalized=""String_Node_Str"" + timezoneNormalized;
      }
    }
  }
  AppLog.v(T.STATS,""String_Node_Str"" + timezoneNormalized);
  gmtDf.setTimeZone(TimeZone.getTimeZone(timezoneNormalized));
  return gmtDf.format(date);
}",0.9996378123868164
13899,"public void setEntryTextOpenDetailsPage(final StatsPostModel currentItem){
  if (entryTextView == null) {
    return;
  }
  String name=StringEscapeUtils.unescapeHtml(currentItem.getTitle());
  entryTextView.setText(name);
  rowContent.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ActivityLauncher.viewStatsSinglePostDetails(view.getContext(),currentItem);
    }
  }
);
  entryTextView.setTextColor(entryTextView.getContext().getResources().getColor(R.color.stats_link_text_color));
}","public void setEntryTextOpenDetailsPage(final StatsPostModel currentItem){
  if (entryTextView == null) {
    return;
  }
  String name=StringEscapeUtils.unescapeHtml4(currentItem.getTitle());
  entryTextView.setText(name);
  rowContent.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ActivityLauncher.viewStatsSinglePostDetails(view.getContext(),currentItem);
    }
  }
);
  entryTextView.setTextColor(entryTextView.getContext().getResources().getColor(R.color.stats_link_text_color));
}",0.9990783410138248
13900,"private static void showMessage(Context context,int[] allWidgets,String message,SiteStore siteStore){
  if (allWidgets.length == 0) {
    return;
  }
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);
  for (  int widgetId : allWidgets) {
    RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.stats_widget_layout);
    int remoteBlogID=getRemoteBlogIDFromWidgetID(widgetId);
    SiteModel site=siteStore.getSiteBySiteId(remoteBlogID);
    String name;
    if (site != null) {
      name=context.getString(R.string.stats_widget_name_for_blog);
      name=String.format(name,StringEscapeUtils.unescapeHtml(SiteUtils.getSiteNameOrHomeURL(site)));
    }
 else {
      name=context.getString(R.string.stats_widget_name);
    }
    remoteViews.setTextViewText(R.id.blog_title,name);
    remoteViews.setViewVisibility(R.id.stats_widget_error_container,View.VISIBLE);
    remoteViews.setViewVisibility(R.id.stats_widget_values_container,View.GONE);
    remoteViews.setTextViewText(R.id.stats_widget_error_text,message);
    Intent intent=new Intent(context,WPMainActivity.class);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    intent.setAction(""String_Node_Str"");
    intent.addCategory(""String_Node_Str"");
    PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,0);
    remoteViews.setOnClickPendingIntent(R.id.stats_widget_outer_container,pendingIntent);
    appWidgetManager.updateAppWidget(widgetId,remoteViews);
  }
}","private static void showMessage(Context context,int[] allWidgets,String message,SiteStore siteStore){
  if (allWidgets.length == 0) {
    return;
  }
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);
  for (  int widgetId : allWidgets) {
    RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.stats_widget_layout);
    int remoteBlogID=getRemoteBlogIDFromWidgetID(widgetId);
    SiteModel site=siteStore.getSiteBySiteId(remoteBlogID);
    String name;
    if (site != null) {
      name=context.getString(R.string.stats_widget_name_for_blog);
      name=String.format(name,StringEscapeUtils.unescapeHtml4(SiteUtils.getSiteNameOrHomeURL(site)));
    }
 else {
      name=context.getString(R.string.stats_widget_name);
    }
    remoteViews.setTextViewText(R.id.blog_title,name);
    remoteViews.setViewVisibility(R.id.stats_widget_error_container,View.VISIBLE);
    remoteViews.setViewVisibility(R.id.stats_widget_values_container,View.GONE);
    remoteViews.setTextViewText(R.id.stats_widget_error_text,message);
    Intent intent=new Intent(context,WPMainActivity.class);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    intent.setAction(""String_Node_Str"");
    intent.addCategory(""String_Node_Str"");
    PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,0);
    remoteViews.setOnClickPendingIntent(R.id.stats_widget_outer_container,pendingIntent);
    appWidgetManager.updateAppWidget(widgetId,remoteViews);
  }
}",0.9996789727126806
13901,"private static void showStatsData(Context context,int[] allWidgets,SiteModel site,JSONObject data){
  if (allWidgets.length == 0) {
    return;
  }
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);
  String name=context.getString(R.string.stats_widget_name_for_blog);
  name=String.format(name,StringEscapeUtils.unescapeHtml(SiteUtils.getSiteNameOrHomeURL(site)));
  for (  int widgetId : allWidgets) {
    RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.stats_widget_layout);
    remoteViews.setTextViewText(R.id.blog_title,name);
    remoteViews.setViewVisibility(R.id.stats_widget_error_container,View.GONE);
    remoteViews.setViewVisibility(R.id.stats_widget_values_container,View.VISIBLE);
    updateTabValue(context,remoteViews,R.id.stats_widget_views,data.optString(""String_Node_Str"",""String_Node_Str""));
    updateTabValue(context,remoteViews,R.id.stats_widget_visitors,data.optString(""String_Node_Str"",""String_Node_Str""));
    updateTabValue(context,remoteViews,R.id.stats_widget_comments,data.optString(""String_Node_Str"",""String_Node_Str""));
    updateTabValue(context,remoteViews,R.id.stats_widget_likes,data.optString(""String_Node_Str"",""String_Node_Str""));
    Intent intent=new Intent(context,StatsActivity.class);
    intent.putExtra(WordPress.SITE,site);
    intent.putExtra(StatsActivity.ARG_LAUNCHED_FROM,StatsActivity.StatsLaunchedFrom.STATS_WIDGET);
    intent.putExtra(StatsActivity.ARG_DESIRED_TIMEFRAME,StatsTimeframe.DAY);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent pendingIntent=PendingIntent.getActivity(context,site.getId(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
    remoteViews.setOnClickPendingIntent(R.id.stats_widget_outer_container,pendingIntent);
    appWidgetManager.updateAppWidget(widgetId,remoteViews);
  }
}","private static void showStatsData(Context context,int[] allWidgets,SiteModel site,JSONObject data){
  if (allWidgets.length == 0) {
    return;
  }
  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);
  String name=context.getString(R.string.stats_widget_name_for_blog);
  name=String.format(name,StringEscapeUtils.unescapeHtml4(SiteUtils.getSiteNameOrHomeURL(site)));
  for (  int widgetId : allWidgets) {
    RemoteViews remoteViews=new RemoteViews(context.getPackageName(),R.layout.stats_widget_layout);
    remoteViews.setTextViewText(R.id.blog_title,name);
    remoteViews.setViewVisibility(R.id.stats_widget_error_container,View.GONE);
    remoteViews.setViewVisibility(R.id.stats_widget_values_container,View.VISIBLE);
    updateTabValue(context,remoteViews,R.id.stats_widget_views,data.optString(""String_Node_Str"",""String_Node_Str""));
    updateTabValue(context,remoteViews,R.id.stats_widget_visitors,data.optString(""String_Node_Str"",""String_Node_Str""));
    updateTabValue(context,remoteViews,R.id.stats_widget_comments,data.optString(""String_Node_Str"",""String_Node_Str""));
    updateTabValue(context,remoteViews,R.id.stats_widget_likes,data.optString(""String_Node_Str"",""String_Node_Str""));
    Intent intent=new Intent(context,StatsActivity.class);
    intent.putExtra(WordPress.SITE,site);
    intent.putExtra(StatsActivity.ARG_LAUNCHED_FROM,StatsActivity.StatsLaunchedFrom.STATS_WIDGET);
    intent.putExtra(StatsActivity.ARG_DESIRED_TIMEFRAME,StatsTimeframe.DAY);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent pendingIntent=PendingIntent.getActivity(context,site.getId(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
    remoteViews.setOnClickPendingIntent(R.id.stats_widget_outer_container,pendingIntent);
    appWidgetManager.updateAppWidget(widgetId,remoteViews);
  }
}",0.999731255038968
13902,"private void blockBlogForPost(final ReaderPost post){
  if (post == null || !isAdded() || !hasPostAdapter() || !NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final BlockedBlogResult blockResult=ReaderBlogActions.blockBlogFromReader(post.blogId,actionListener);
  AnalyticsUtils.trackWithSiteId(AnalyticsTracker.Stat.READER_BLOG_BLOCKED,mCurrentBlogId != 0 ? mCurrentBlogId : null);
  getPostAdapter().removePostsInBlog(post.blogId);
  View.OnClickListener undoListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderBlogActions.undoBlockBlogFromReader(blockResult);
      refreshPosts();
    }
  }
;
  Snackbar.make(getView(),getString(R.string.reader_toast_blog_blocked),Snackbar.LENGTH_LONG).setAction(R.string.undo,undoListener).show();
}","private void blockBlogForPost(final ReaderPost post){
  if (post == null || !isAdded() || !hasPostAdapter() || !NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final BlockedBlogResult blockResult=ReaderBlogActions.blockBlogFromReader(post.blogId,actionListener);
  AnalyticsUtils.trackWithSiteId(AnalyticsTracker.Stat.READER_BLOG_BLOCKED,mCurrentBlogId);
  getPostAdapter().removePostsInBlog(post.blogId);
  View.OnClickListener undoListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      ReaderBlogActions.undoBlockBlogFromReader(blockResult);
      refreshPosts();
    }
  }
;
  Snackbar.make(getView(),getString(R.string.reader_toast_blog_blocked),Snackbar.LENGTH_LONG).setAction(R.string.undo,undoListener).show();
}",0.9867761057911536
13903,"private void addMediaToUploadService(@NonNull MediaModel media){
  if (mUploadService == null) {
    startMediaUploadService();
    mPendingUploads.add(media);
  }
 else {
    mUploadService.addMediaToQueue(media);
  }
}","private void addMediaToUploadService(@NonNull MediaModel media){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    AppLog.v(AppLog.T.MEDIA,""String_Node_Str"");
    return;
  }
  ArrayList<MediaModel> mediaList=new ArrayList<>();
  mediaList.add(media);
  MediaUploadService.startService(this,mSite,mediaList);
}",0.3383458646616541
13904,"@Override protected void onDestroy(){
  super.onDestroy();
  doUnbindDeleteService();
  doUnbindUploadService();
}","@Override protected void onDestroy(){
  super.onDestroy();
  doUnbindDeleteService();
}",0.8656716417910447
13905,"public WordPressDB(Context ctx){
  db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
  db.execSQL(CREATE_TABLE_QUICKPRESS_SHORTCUTS);
  db.execSQL(CREATE_TABLE_THEMES);
  SiteSettingsTable.createTable(db);
  SuggestionTable.createTables(db);
  NotificationsTable.createTables(db);
  int currentVersion=db.getVersion();
  boolean isNewInstall=(currentVersion == 0);
  if (!isNewInstall && currentVersion != DATABASE_VERSION) {
    AppLog.d(T.DB,""String_Node_Str"" + currentVersion + ""String_Node_Str""+ DATABASE_VERSION);
  }
switch (currentVersion) {
case 0:
    currentVersion++;
case 1:
  currentVersion=9;
case 9:
currentVersion++;
case 10:
currentVersion++;
case 11:
currentVersion++;
case 12:
currentVersion++;
case 13:
currentVersion++;
case 14:
currentVersion++;
case 15:
currentVersion++;
case 16:
currentVersion++;
case 17:
currentVersion++;
case 18:
currentVersion++;
case 19:
currentVersion++;
case 20:
currentVersion++;
case 21:
currentVersion++;
case 22:
currentVersion++;
case 23:
currentVersion++;
case 24:
currentVersion++;
case 25:
currentVersion++;
case 26:
db.execSQL(DROP_TABLE_PREFIX + NOTES_TABLE);
currentVersion++;
case 27:
currentVersion++;
case 28:
currentVersion++;
case 29:
currentVersion++;
case 30:
currentVersion++;
case 31:
currentVersion++;
case 32:
currentVersion++;
case 33:
currentVersion++;
case 34:
currentVersion++;
case 35:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 36:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 37:
resetThemeTable();
currentVersion++;
case 38:
currentVersion++;
case 39:
currentVersion++;
case 40:
currentVersion++;
case 41:
currentVersion++;
case 42:
currentVersion++;
case 43:
currentVersion++;
case 44:
PeopleTable.createTables(db);
currentVersion++;
case 45:
currentVersion++;
case 46:
AppPrefs.setVisualEditorAvailable(true);
AppPrefs.setVisualEditorEnabled(true);
currentVersion++;
case 47:
PeopleTable.reset(db);
currentVersion++;
case 48:
PeopleTable.createViewersTable(db);
currentVersion++;
case 49:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 51:
SiteSettingsTable.addOptimizedImageToSiteSettingsTable(db);
currentVersion++;
}
db.setVersion(DATABASE_VERSION);
}","public WordPressDB(Context ctx){
  db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
  db.execSQL(CREATE_TABLE_QUICKPRESS_SHORTCUTS);
  db.execSQL(CREATE_TABLE_THEMES);
  SiteSettingsTable.createTable(db);
  SuggestionTable.createTables(db);
  NotificationsTable.createTables(db);
  int currentVersion=db.getVersion();
  boolean isNewInstall=(currentVersion == 0);
  if (!isNewInstall && currentVersion != DATABASE_VERSION) {
    AppLog.d(T.DB,""String_Node_Str"" + currentVersion + ""String_Node_Str""+ DATABASE_VERSION);
  }
switch (currentVersion) {
case 0:
    currentVersion++;
case 1:
  currentVersion=9;
case 9:
currentVersion++;
case 10:
currentVersion++;
case 11:
currentVersion++;
case 12:
currentVersion++;
case 13:
currentVersion++;
case 14:
currentVersion++;
case 15:
currentVersion++;
case 16:
currentVersion++;
case 17:
currentVersion++;
case 18:
currentVersion++;
case 19:
currentVersion++;
case 20:
currentVersion++;
case 21:
currentVersion++;
case 22:
currentVersion++;
case 23:
currentVersion++;
case 24:
currentVersion++;
case 25:
currentVersion++;
case 26:
db.execSQL(DROP_TABLE_PREFIX + NOTES_TABLE);
currentVersion++;
case 27:
currentVersion++;
case 28:
currentVersion++;
case 29:
currentVersion++;
case 30:
currentVersion++;
case 31:
currentVersion++;
case 32:
currentVersion++;
case 33:
currentVersion++;
case 34:
currentVersion++;
case 35:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 36:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 37:
resetThemeTable();
currentVersion++;
case 38:
currentVersion++;
case 39:
currentVersion++;
case 40:
currentVersion++;
case 41:
currentVersion++;
case 42:
currentVersion++;
case 43:
currentVersion++;
case 44:
PeopleTable.createTables(db);
currentVersion++;
case 45:
currentVersion++;
case 46:
AppPrefs.setVisualEditorAvailable(true);
AppPrefs.setVisualEditorEnabled(true);
currentVersion++;
case 47:
PeopleTable.reset(db);
currentVersion++;
case 48:
PeopleTable.createViewersTable(db);
currentVersion++;
case 49:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 50:
currentVersion++;
case 51:
SiteSettingsTable.addOptimizedImageToSiteSettingsTable(db);
currentVersion++;
case 52:
try {
SiteSettingsTable.addOptimizedImageToSiteSettingsTable(db);
}
 catch (SQLiteException e) {
}
currentVersion++;
}
db.setVersion(DATABASE_VERSION);
}",0.9662027833001988
13906,"public WordPressDB(Context ctx){
  db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
  db.execSQL(CREATE_TABLE_QUICKPRESS_SHORTCUTS);
  db.execSQL(CREATE_TABLE_THEMES);
  SiteSettingsTable.createTable(db);
  SuggestionTable.createTables(db);
  NotificationsTable.createTables(db);
  int currentVersion=db.getVersion();
  boolean isNewInstall=(currentVersion == 0);
  if (!isNewInstall && currentVersion != DATABASE_VERSION) {
    AppLog.d(T.DB,""String_Node_Str"" + currentVersion + ""String_Node_Str""+ DATABASE_VERSION);
  }
switch (currentVersion) {
case 0:
    currentVersion++;
case 1:
  currentVersion=9;
case 9:
currentVersion++;
case 10:
currentVersion++;
case 11:
currentVersion++;
case 12:
currentVersion++;
case 13:
currentVersion++;
case 14:
currentVersion++;
case 15:
currentVersion++;
case 16:
currentVersion++;
case 17:
currentVersion++;
case 18:
currentVersion++;
case 19:
currentVersion++;
case 20:
currentVersion++;
case 21:
currentVersion++;
case 22:
currentVersion++;
case 23:
currentVersion++;
case 24:
currentVersion++;
case 25:
currentVersion++;
case 26:
db.execSQL(DROP_TABLE_PREFIX + NOTES_TABLE);
currentVersion++;
case 27:
currentVersion++;
case 28:
currentVersion++;
case 29:
currentVersion++;
case 30:
currentVersion++;
case 31:
currentVersion++;
case 32:
currentVersion++;
case 33:
currentVersion++;
case 34:
currentVersion++;
case 35:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 36:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 37:
resetThemeTable();
currentVersion++;
case 38:
currentVersion++;
case 39:
currentVersion++;
case 40:
currentVersion++;
case 41:
currentVersion++;
case 42:
currentVersion++;
case 43:
currentVersion++;
case 44:
PeopleTable.createTables(db);
currentVersion++;
case 45:
currentVersion++;
case 46:
AppPrefs.setVisualEditorAvailable(true);
AppPrefs.setVisualEditorEnabled(true);
currentVersion++;
case 47:
PeopleTable.reset(db);
currentVersion++;
case 48:
PeopleTable.createViewersTable(db);
currentVersion++;
case 49:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 51:
SiteSettingsTable.addOptimizedImageToSiteSettingsTable(db);
currentVersion++;
}
db.setVersion(DATABASE_VERSION);
}","public WordPressDB(Context ctx){
  db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
  db.execSQL(CREATE_TABLE_QUICKPRESS_SHORTCUTS);
  db.execSQL(CREATE_TABLE_THEMES);
  SiteSettingsTable.createTable(db);
  SuggestionTable.createTables(db);
  NotificationsTable.createTables(db);
  int currentVersion=db.getVersion();
  boolean isNewInstall=(currentVersion == 0);
  if (!isNewInstall && currentVersion != DATABASE_VERSION) {
    AppLog.d(T.DB,""String_Node_Str"" + currentVersion + ""String_Node_Str""+ DATABASE_VERSION);
  }
switch (currentVersion) {
case 0:
    currentVersion++;
case 1:
  currentVersion=9;
case 9:
currentVersion++;
case 10:
currentVersion++;
case 11:
currentVersion++;
case 12:
currentVersion++;
case 13:
currentVersion++;
case 14:
currentVersion++;
case 15:
currentVersion++;
case 16:
currentVersion++;
case 17:
currentVersion++;
case 18:
currentVersion++;
case 19:
currentVersion++;
case 20:
currentVersion++;
case 21:
currentVersion++;
case 22:
currentVersion++;
case 23:
currentVersion++;
case 24:
currentVersion++;
case 25:
currentVersion++;
case 26:
db.execSQL(DROP_TABLE_PREFIX + NOTES_TABLE);
currentVersion++;
case 27:
currentVersion++;
case 28:
currentVersion++;
case 29:
currentVersion++;
case 30:
currentVersion++;
case 31:
currentVersion++;
case 32:
currentVersion++;
case 33:
currentVersion++;
case 34:
currentVersion++;
case 35:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 36:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 37:
resetThemeTable();
currentVersion++;
case 38:
currentVersion++;
case 39:
currentVersion++;
case 40:
currentVersion++;
case 41:
currentVersion++;
case 42:
currentVersion++;
case 43:
currentVersion++;
case 44:
PeopleTable.createTables(db);
currentVersion++;
case 45:
currentVersion++;
case 46:
AppPrefs.setVisualEditorAvailable(true);
AppPrefs.setVisualEditorEnabled(true);
currentVersion++;
case 47:
PeopleTable.reset(db);
currentVersion++;
case 48:
PeopleTable.createViewersTable(db);
currentVersion++;
case 49:
ctx.deleteDatabase(""String_Node_Str"");
currentVersion++;
case 50:
currentVersion=52;
case 52:
SiteSettingsTable.addOptimizedImageToSiteSettingsTable(db);
currentVersion++;
}
db.setVersion(DATABASE_VERSION);
}",0.9931849159472966
13907,void inject(AddCategoryActivity object);,void inject(HtmlToSpannedConverter object);,0.6265060240963856
13908,"@Override public boolean equals(Object other){
  if (!(other instanceof SiteSettingsModel))   return false;
  SiteSettingsModel otherModel=(SiteSettingsModel)other;
  return localTableId == otherModel.localTableId && address.equals(otherModel.address) && username.equals(otherModel.username) && password.equals(otherModel.password) && title.equals(otherModel.title) && tagline.equals(otherModel.tagline) && languageId == otherModel.languageId && privacy == otherModel.privacy && location == otherModel.location && defaultPostFormat.equals(otherModel.defaultPostFormat) && defaultCategory == otherModel.defaultCategory && showRelatedPosts == otherModel.showRelatedPosts && showRelatedPostHeader == otherModel.showRelatedPostHeader && showRelatedPostImages == otherModel.showRelatedPostImages && allowComments == otherModel.allowComments && sendPingbacks == otherModel.sendPingbacks && receivePingbacks == otherModel.receivePingbacks && closeCommentAfter == otherModel.closeCommentAfter && sortCommentsBy == otherModel.sortCommentsBy && threadingLevels == otherModel.threadingLevels && commentsPerPage == otherModel.commentsPerPage && commentApprovalRequired == otherModel.commentApprovalRequired && commentsRequireIdentity == otherModel.commentsRequireIdentity && commentsRequireUserAccount == otherModel.commentsRequireUserAccount && commentAutoApprovalKnownUsers == otherModel.commentAutoApprovalKnownUsers && maxLinks == otherModel.maxLinks && holdForModeration != null && holdForModeration.equals(otherModel.holdForModeration) && blacklist != null && blacklist.equals(otherModel.blacklist);
}","@Override public boolean equals(Object other){
  if (!(other instanceof SiteSettingsModel))   return false;
  SiteSettingsModel otherModel=(SiteSettingsModel)other;
  return localTableId == otherModel.localTableId && ((address == null && otherModel.address == null) || (address != null && otherModel.address != null && address.equals(otherModel.address))) && ((username == null && otherModel.username == null) || (username != null && otherModel.username != null && username.equals(otherModel.username))) && ((password == null && otherModel.password == null) || (password != null && otherModel.password != null && password.equals(otherModel.password))) && ((title == null && otherModel.title == null) || (title != null && otherModel.title != null && title.equals(otherModel.title))) && ((tagline == null && otherModel.tagline == null) || (tagline != null && otherModel.tagline != null && tagline.equals(otherModel.tagline))) && languageId == otherModel.languageId && privacy == otherModel.privacy && location == otherModel.location && optimizeImage == otherModel.optimizeImage && defaultPostFormat.equals(otherModel.defaultPostFormat) && defaultCategory == otherModel.defaultCategory && showRelatedPosts == otherModel.showRelatedPosts && showRelatedPostHeader == otherModel.showRelatedPostHeader && showRelatedPostImages == otherModel.showRelatedPostImages && allowComments == otherModel.allowComments && sendPingbacks == otherModel.sendPingbacks && receivePingbacks == otherModel.receivePingbacks && closeCommentAfter == otherModel.closeCommentAfter && sortCommentsBy == otherModel.sortCommentsBy && threadingLevels == otherModel.threadingLevels && commentsPerPage == otherModel.commentsPerPage && commentApprovalRequired == otherModel.commentApprovalRequired && commentsRequireIdentity == otherModel.commentsRequireIdentity && commentsRequireUserAccount == otherModel.commentsRequireUserAccount && commentAutoApprovalKnownUsers == otherModel.commentAutoApprovalKnownUsers && maxLinks == otherModel.maxLinks && holdForModeration != null && otherModel.holdForModeration != null && holdForModeration.equals(otherModel.holdForModeration) && blacklist != null && otherModel.blacklist != null && blacklist.equals(otherModel.blacklist);
}",0.8314606741573034
13909,"/** 
 * Sets values from a local database   {@link Cursor}.
 */
public void deserializeOptionsDatabaseCursor(Cursor cursor,Map<Integer,CategoryModel> models){
  if (cursor == null || !cursor.moveToFirst() || cursor.getCount() == 0)   return;
  localTableId=getIntFromCursor(cursor,ID_COLUMN_NAME);
  address=getStringFromCursor(cursor,ADDRESS_COLUMN_NAME);
  username=getStringFromCursor(cursor,USERNAME_COLUMN_NAME);
  password=getStringFromCursor(cursor,PASSWORD_COLUMN_NAME);
  title=getStringFromCursor(cursor,TITLE_COLUMN_NAME);
  tagline=getStringFromCursor(cursor,TAGLINE_COLUMN_NAME);
  languageId=getIntFromCursor(cursor,LANGUAGE_COLUMN_NAME);
  privacy=getIntFromCursor(cursor,PRIVACY_COLUMN_NAME);
  defaultCategory=getIntFromCursor(cursor,DEF_CATEGORY_COLUMN_NAME);
  defaultPostFormat=getStringFromCursor(cursor,DEF_POST_FORMAT_COLUMN_NAME);
  location=getBooleanFromCursor(cursor,LOCATION_COLUMN_NAME);
  hasVerifiedCredentials=getBooleanFromCursor(cursor,CREDS_VERIFIED_COLUMN_NAME);
  allowComments=getBooleanFromCursor(cursor,ALLOW_COMMENTS_COLUMN_NAME);
  sendPingbacks=getBooleanFromCursor(cursor,SEND_PINGBACKS_COLUMN_NAME);
  receivePingbacks=getBooleanFromCursor(cursor,RECEIVE_PINGBACKS_COLUMN_NAME);
  shouldCloseAfter=getBooleanFromCursor(cursor,SHOULD_CLOSE_AFTER_COLUMN_NAME);
  closeCommentAfter=getIntFromCursor(cursor,CLOSE_AFTER_COLUMN_NAME);
  sortCommentsBy=getIntFromCursor(cursor,SORT_BY_COLUMN_NAME);
  shouldThreadComments=getBooleanFromCursor(cursor,SHOULD_THREAD_COLUMN_NAME);
  threadingLevels=getIntFromCursor(cursor,THREADING_COLUMN_NAME);
  shouldPageComments=getBooleanFromCursor(cursor,SHOULD_PAGE_COLUMN_NAME);
  commentsPerPage=getIntFromCursor(cursor,PAGING_COLUMN_NAME);
  commentApprovalRequired=getBooleanFromCursor(cursor,MANUAL_APPROVAL_COLUMN_NAME);
  commentsRequireIdentity=getBooleanFromCursor(cursor,IDENTITY_REQUIRED_COLUMN_NAME);
  commentsRequireUserAccount=getBooleanFromCursor(cursor,USER_ACCOUNT_REQUIRED_COLUMN_NAME);
  commentAutoApprovalKnownUsers=getBooleanFromCursor(cursor,WHITELIST_COLUMN_NAME);
  String moderationKeys=getStringFromCursor(cursor,MODERATION_KEYS_COLUMN_NAME);
  String blacklistKeys=getStringFromCursor(cursor,BLACKLIST_KEYS_COLUMN_NAME);
  holdForModeration=new ArrayList<>();
  blacklist=new ArrayList<>();
  if (!TextUtils.isEmpty(moderationKeys)) {
    Collections.addAll(holdForModeration,moderationKeys.split(""String_Node_Str""));
  }
  if (!TextUtils.isEmpty(blacklistKeys)) {
    Collections.addAll(blacklist,blacklistKeys.split(""String_Node_Str""));
  }
  setRelatedPostsFlags(Math.max(0,getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME)));
  String cachedCategories=getStringFromCursor(cursor,CATEGORIES_COLUMN_NAME);
  String cachedFormats=getStringFromCursor(cursor,POST_FORMATS_COLUMN_NAME);
  if (models != null && !TextUtils.isEmpty(cachedCategories)) {
    String[] split=cachedCategories.split(""String_Node_Str"");
    categories=new CategoryModel[split.length];
    for (int i=0; i < split.length; ++i) {
      int catId=Integer.parseInt(split[i]);
      categories[i]=models.get(catId);
    }
  }
  if (!TextUtils.isEmpty(cachedFormats)) {
    String[] split=cachedFormats.split(""String_Node_Str"");
    postFormats=new HashMap<>();
    for (    String format : split) {
      String[] kvp=format.split(""String_Node_Str"");
      postFormats.put(kvp[0],kvp[1]);
    }
  }
  int cachedRelatedPosts=getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME);
  if (cachedRelatedPosts != -1) {
    setRelatedPostsFlags(cachedRelatedPosts);
  }
  isInLocalTable=true;
}","/** 
 * Sets values from a local database   {@link Cursor}.
 */
public void deserializeOptionsDatabaseCursor(Cursor cursor,Map<Integer,CategoryModel> models){
  if (cursor == null || !cursor.moveToFirst() || cursor.getCount() == 0)   return;
  localTableId=getIntFromCursor(cursor,ID_COLUMN_NAME);
  address=getStringFromCursor(cursor,ADDRESS_COLUMN_NAME);
  username=getStringFromCursor(cursor,USERNAME_COLUMN_NAME);
  password=getStringFromCursor(cursor,PASSWORD_COLUMN_NAME);
  title=getStringFromCursor(cursor,TITLE_COLUMN_NAME);
  tagline=getStringFromCursor(cursor,TAGLINE_COLUMN_NAME);
  languageId=getIntFromCursor(cursor,LANGUAGE_COLUMN_NAME);
  privacy=getIntFromCursor(cursor,PRIVACY_COLUMN_NAME);
  defaultCategory=getIntFromCursor(cursor,DEF_CATEGORY_COLUMN_NAME);
  defaultPostFormat=getStringFromCursor(cursor,DEF_POST_FORMAT_COLUMN_NAME);
  location=getBooleanFromCursor(cursor,LOCATION_COLUMN_NAME);
  optimizeImage=getBooleanFromCursor(cursor,OPTIMIZE_IMAGE_COLUMN_NAME);
  hasVerifiedCredentials=getBooleanFromCursor(cursor,CREDS_VERIFIED_COLUMN_NAME);
  allowComments=getBooleanFromCursor(cursor,ALLOW_COMMENTS_COLUMN_NAME);
  sendPingbacks=getBooleanFromCursor(cursor,SEND_PINGBACKS_COLUMN_NAME);
  receivePingbacks=getBooleanFromCursor(cursor,RECEIVE_PINGBACKS_COLUMN_NAME);
  shouldCloseAfter=getBooleanFromCursor(cursor,SHOULD_CLOSE_AFTER_COLUMN_NAME);
  closeCommentAfter=getIntFromCursor(cursor,CLOSE_AFTER_COLUMN_NAME);
  sortCommentsBy=getIntFromCursor(cursor,SORT_BY_COLUMN_NAME);
  shouldThreadComments=getBooleanFromCursor(cursor,SHOULD_THREAD_COLUMN_NAME);
  threadingLevels=getIntFromCursor(cursor,THREADING_COLUMN_NAME);
  shouldPageComments=getBooleanFromCursor(cursor,SHOULD_PAGE_COLUMN_NAME);
  commentsPerPage=getIntFromCursor(cursor,PAGING_COLUMN_NAME);
  commentApprovalRequired=getBooleanFromCursor(cursor,MANUAL_APPROVAL_COLUMN_NAME);
  commentsRequireIdentity=getBooleanFromCursor(cursor,IDENTITY_REQUIRED_COLUMN_NAME);
  commentsRequireUserAccount=getBooleanFromCursor(cursor,USER_ACCOUNT_REQUIRED_COLUMN_NAME);
  commentAutoApprovalKnownUsers=getBooleanFromCursor(cursor,WHITELIST_COLUMN_NAME);
  String moderationKeys=getStringFromCursor(cursor,MODERATION_KEYS_COLUMN_NAME);
  String blacklistKeys=getStringFromCursor(cursor,BLACKLIST_KEYS_COLUMN_NAME);
  holdForModeration=new ArrayList<>();
  blacklist=new ArrayList<>();
  if (!TextUtils.isEmpty(moderationKeys)) {
    Collections.addAll(holdForModeration,moderationKeys.split(""String_Node_Str""));
  }
  if (!TextUtils.isEmpty(blacklistKeys)) {
    Collections.addAll(blacklist,blacklistKeys.split(""String_Node_Str""));
  }
  setRelatedPostsFlags(Math.max(0,getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME)));
  String cachedCategories=getStringFromCursor(cursor,CATEGORIES_COLUMN_NAME);
  String cachedFormats=getStringFromCursor(cursor,POST_FORMATS_COLUMN_NAME);
  if (models != null && !TextUtils.isEmpty(cachedCategories)) {
    String[] split=cachedCategories.split(""String_Node_Str"");
    categories=new CategoryModel[split.length];
    for (int i=0; i < split.length; ++i) {
      int catId=Integer.parseInt(split[i]);
      categories[i]=models.get(catId);
    }
  }
  if (!TextUtils.isEmpty(cachedFormats)) {
    String[] split=cachedFormats.split(""String_Node_Str"");
    postFormats=new HashMap<>();
    for (    String format : split) {
      String[] kvp=format.split(""String_Node_Str"");
      postFormats.put(kvp[0],kvp[1]);
    }
  }
  int cachedRelatedPosts=getIntFromCursor(cursor,RELATED_POSTS_COLUMN_NAME);
  if (cachedRelatedPosts != -1) {
    setRelatedPostsFlags(cachedRelatedPosts);
  }
  isInLocalTable=true;
}",0.9898512442652578
13910,"/** 
 * Creates the   {@link ContentValues} object to store this category data in a local database.
 */
public ContentValues serializeToDatabase(){
  ContentValues values=new ContentValues();
  values.put(ID_COLUMN_NAME,localTableId);
  values.put(ADDRESS_COLUMN_NAME,address);
  values.put(USERNAME_COLUMN_NAME,username);
  values.put(PASSWORD_COLUMN_NAME,password);
  values.put(TITLE_COLUMN_NAME,title);
  values.put(TAGLINE_COLUMN_NAME,tagline);
  values.put(PRIVACY_COLUMN_NAME,privacy);
  values.put(LANGUAGE_COLUMN_NAME,languageId);
  values.put(LOCATION_COLUMN_NAME,location);
  values.put(DEF_CATEGORY_COLUMN_NAME,defaultCategory);
  values.put(CATEGORIES_COLUMN_NAME,categoryIdList(categories));
  values.put(DEF_POST_FORMAT_COLUMN_NAME,defaultPostFormat);
  values.put(POST_FORMATS_COLUMN_NAME,postFormatList(postFormats));
  values.put(CREDS_VERIFIED_COLUMN_NAME,hasVerifiedCredentials);
  values.put(RELATED_POSTS_COLUMN_NAME,getRelatedPostsFlags());
  values.put(ALLOW_COMMENTS_COLUMN_NAME,allowComments);
  values.put(SEND_PINGBACKS_COLUMN_NAME,sendPingbacks);
  values.put(RECEIVE_PINGBACKS_COLUMN_NAME,receivePingbacks);
  values.put(SHOULD_CLOSE_AFTER_COLUMN_NAME,shouldCloseAfter);
  values.put(CLOSE_AFTER_COLUMN_NAME,closeCommentAfter);
  values.put(SORT_BY_COLUMN_NAME,sortCommentsBy);
  values.put(SHOULD_THREAD_COLUMN_NAME,shouldThreadComments);
  values.put(THREADING_COLUMN_NAME,threadingLevels);
  values.put(SHOULD_PAGE_COLUMN_NAME,shouldPageComments);
  values.put(PAGING_COLUMN_NAME,commentsPerPage);
  values.put(MANUAL_APPROVAL_COLUMN_NAME,commentApprovalRequired);
  values.put(IDENTITY_REQUIRED_COLUMN_NAME,commentsRequireIdentity);
  values.put(USER_ACCOUNT_REQUIRED_COLUMN_NAME,commentsRequireUserAccount);
  values.put(WHITELIST_COLUMN_NAME,commentAutoApprovalKnownUsers);
  String moderationKeys=""String_Node_Str"";
  if (holdForModeration != null) {
    for (    String key : holdForModeration) {
      moderationKeys+=key + ""String_Node_Str"";
    }
  }
  String blacklistKeys=""String_Node_Str"";
  if (blacklist != null) {
    for (    String key : blacklist) {
      blacklistKeys+=key + ""String_Node_Str"";
    }
  }
  values.put(MODERATION_KEYS_COLUMN_NAME,moderationKeys);
  values.put(BLACKLIST_KEYS_COLUMN_NAME,blacklistKeys);
  return values;
}","/** 
 * Creates the   {@link ContentValues} object to store this category data in a local database.
 */
public ContentValues serializeToDatabase(){
  ContentValues values=new ContentValues();
  values.put(ID_COLUMN_NAME,localTableId);
  values.put(ADDRESS_COLUMN_NAME,address);
  values.put(USERNAME_COLUMN_NAME,username);
  values.put(PASSWORD_COLUMN_NAME,password);
  values.put(TITLE_COLUMN_NAME,title);
  values.put(TAGLINE_COLUMN_NAME,tagline);
  values.put(PRIVACY_COLUMN_NAME,privacy);
  values.put(LANGUAGE_COLUMN_NAME,languageId);
  values.put(LOCATION_COLUMN_NAME,location);
  values.put(OPTIMIZE_IMAGE_COLUMN_NAME,optimizeImage);
  values.put(DEF_CATEGORY_COLUMN_NAME,defaultCategory);
  values.put(CATEGORIES_COLUMN_NAME,categoryIdList(categories));
  values.put(DEF_POST_FORMAT_COLUMN_NAME,defaultPostFormat);
  values.put(POST_FORMATS_COLUMN_NAME,postFormatList(postFormats));
  values.put(CREDS_VERIFIED_COLUMN_NAME,hasVerifiedCredentials);
  values.put(RELATED_POSTS_COLUMN_NAME,getRelatedPostsFlags());
  values.put(ALLOW_COMMENTS_COLUMN_NAME,allowComments);
  values.put(SEND_PINGBACKS_COLUMN_NAME,sendPingbacks);
  values.put(RECEIVE_PINGBACKS_COLUMN_NAME,receivePingbacks);
  values.put(SHOULD_CLOSE_AFTER_COLUMN_NAME,shouldCloseAfter);
  values.put(CLOSE_AFTER_COLUMN_NAME,closeCommentAfter);
  values.put(SORT_BY_COLUMN_NAME,sortCommentsBy);
  values.put(SHOULD_THREAD_COLUMN_NAME,shouldThreadComments);
  values.put(THREADING_COLUMN_NAME,threadingLevels);
  values.put(SHOULD_PAGE_COLUMN_NAME,shouldPageComments);
  values.put(PAGING_COLUMN_NAME,commentsPerPage);
  values.put(MANUAL_APPROVAL_COLUMN_NAME,commentApprovalRequired);
  values.put(IDENTITY_REQUIRED_COLUMN_NAME,commentsRequireIdentity);
  values.put(USER_ACCOUNT_REQUIRED_COLUMN_NAME,commentsRequireUserAccount);
  values.put(WHITELIST_COLUMN_NAME,commentAutoApprovalKnownUsers);
  String moderationKeys=""String_Node_Str"";
  if (holdForModeration != null) {
    for (    String key : holdForModeration) {
      moderationKeys+=key + ""String_Node_Str"";
    }
  }
  String blacklistKeys=""String_Node_Str"";
  if (blacklist != null) {
    for (    String key : blacklist) {
      blacklistKeys+=key + ""String_Node_Str"";
    }
  }
  values.put(MODERATION_KEYS_COLUMN_NAME,moderationKeys);
  values.put(BLACKLIST_KEYS_COLUMN_NAME,blacklistKeys);
  return values;
}",0.9879101899827288
13911,"/** 
 * Copies data from another   {@link SiteSettingsModel}.
 */
public void copyFrom(SiteSettingsModel other){
  if (other == null)   return;
  isInLocalTable=other.isInLocalTable;
  hasVerifiedCredentials=other.hasVerifiedCredentials;
  localTableId=other.localTableId;
  address=other.address;
  username=other.username;
  password=other.password;
  title=other.title;
  tagline=other.tagline;
  language=other.language;
  languageId=other.languageId;
  privacy=other.privacy;
  location=other.location;
  defaultCategory=other.defaultCategory;
  categories=other.categories;
  defaultPostFormat=other.defaultPostFormat;
  postFormats=other.postFormats;
  showRelatedPosts=other.showRelatedPosts;
  showRelatedPostHeader=other.showRelatedPostHeader;
  showRelatedPostImages=other.showRelatedPostImages;
  allowComments=other.allowComments;
  sendPingbacks=other.sendPingbacks;
  receivePingbacks=other.receivePingbacks;
  shouldCloseAfter=other.shouldCloseAfter;
  closeCommentAfter=other.closeCommentAfter;
  sortCommentsBy=other.sortCommentsBy;
  shouldThreadComments=other.shouldThreadComments;
  threadingLevels=other.threadingLevels;
  shouldPageComments=other.shouldPageComments;
  commentsPerPage=other.commentsPerPage;
  commentApprovalRequired=other.commentApprovalRequired;
  commentsRequireIdentity=other.commentsRequireIdentity;
  commentsRequireUserAccount=other.commentsRequireUserAccount;
  commentAutoApprovalKnownUsers=other.commentAutoApprovalKnownUsers;
  maxLinks=other.maxLinks;
  if (other.holdForModeration != null) {
    holdForModeration=new ArrayList<>(other.holdForModeration);
  }
  if (other.blacklist != null) {
    blacklist=new ArrayList<>(other.blacklist);
  }
}","/** 
 * Copies data from another   {@link SiteSettingsModel}.
 */
public void copyFrom(SiteSettingsModel other){
  if (other == null)   return;
  isInLocalTable=other.isInLocalTable;
  hasVerifiedCredentials=other.hasVerifiedCredentials;
  localTableId=other.localTableId;
  address=other.address;
  username=other.username;
  password=other.password;
  title=other.title;
  tagline=other.tagline;
  language=other.language;
  languageId=other.languageId;
  privacy=other.privacy;
  location=other.location;
  optimizeImage=other.optimizeImage;
  defaultCategory=other.defaultCategory;
  categories=other.categories;
  defaultPostFormat=other.defaultPostFormat;
  postFormats=other.postFormats;
  showRelatedPosts=other.showRelatedPosts;
  showRelatedPostHeader=other.showRelatedPostHeader;
  showRelatedPostImages=other.showRelatedPostImages;
  allowComments=other.allowComments;
  sendPingbacks=other.sendPingbacks;
  receivePingbacks=other.receivePingbacks;
  shouldCloseAfter=other.shouldCloseAfter;
  closeCommentAfter=other.closeCommentAfter;
  sortCommentsBy=other.sortCommentsBy;
  shouldThreadComments=other.shouldThreadComments;
  threadingLevels=other.threadingLevels;
  shouldPageComments=other.shouldPageComments;
  commentsPerPage=other.commentsPerPage;
  commentApprovalRequired=other.commentApprovalRequired;
  commentsRequireIdentity=other.commentsRequireIdentity;
  commentsRequireUserAccount=other.commentsRequireUserAccount;
  commentAutoApprovalKnownUsers=other.commentAutoApprovalKnownUsers;
  maxLinks=other.maxLinks;
  if (other.holdForModeration != null) {
    holdForModeration=new ArrayList<>(other.holdForModeration);
  }
  if (other.blacklist != null) {
    blacklist=new ArrayList<>(other.blacklist);
  }
}",0.9892285298398836
13912,"@Override public void onRequestPermissionsResult(int requestCode,@NonNull String permissions[],@NonNull int[] grantResults){
switch (requestCode) {
case LOCATION_PERMISSION_REQUEST_CODE:
    boolean shouldShowLocation=false;
  for (  int grantResult : grantResults) {
    if (grantResult == PackageManager.PERMISSION_GRANTED) {
      shouldShowLocation=true;
    }
  }
if (shouldShowLocation) {
  mEditPostSettingsFragment.showLocationSearch();
  if (SiteSettingsInterface.getGeotagging(this) && isNewPost()) {
    mEditPostSettingsFragment.searchLocation();
  }
  return;
}
ToastUtils.showToast(this,getString(R.string.add_location_permission_required));
break;
case MEDIA_PERMISSION_REQUEST_CODE:
boolean shouldShowContextMenu=true;
for (int i=0; i < grantResults.length; ++i) {
switch (permissions[i]) {
case Manifest.permission.CAMERA:
if (grantResults[i] == PackageManager.PERMISSION_DENIED) {
shouldShowContextMenu=false;
}
break;
case Manifest.permission.WRITE_EXTERNAL_STORAGE:
if (grantResults[i] == PackageManager.PERMISSION_DENIED) {
shouldShowContextMenu=false;
}
 else {
registerReceiver(mGalleryReceiver,new IntentFilter(LegacyEditorFragment.ACTION_MEDIA_GALLERY_TOUCHED));
refreshBlogMedia();
}
break;
}
}
if (shouldShowContextMenu) {
if (mMenuView != null) {
super.openContextMenu(mMenuView);
mMenuView=null;
}
}
 else {
ToastUtils.showToast(this,getString(R.string.access_media_permission_required));
}
break;
case DRAG_AND_DROP_MEDIA_PERMISSION_REQUEST_CODE:
boolean mediaAccessGranted=false;
for (int i=0; i < grantResults.length; ++i) {
switch (permissions[i]) {
case Manifest.permission.WRITE_EXTERNAL_STORAGE:
if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
mediaAccessGranted=true;
}
break;
}
}
if (mediaAccessGranted) {
runOnUiThread(mFetchMediaRunnable);
}
 else {
ToastUtils.showToast(this,getString(R.string.access_media_permission_required));
}
default :
break;
}
}","@Override public void onRequestPermissionsResult(int requestCode,@NonNull String permissions[],@NonNull int[] grantResults){
switch (requestCode) {
case LOCATION_PERMISSION_REQUEST_CODE:
    boolean shouldShowLocation=false;
  for (  int grantResult : grantResults) {
    if (grantResult == PackageManager.PERMISSION_GRANTED) {
      shouldShowLocation=true;
    }
  }
if (shouldShowLocation) {
  mEditPostSettingsFragment.showLocationSearch();
  if (SiteSettingsInterface.getInterface(this,mSite,null).init(false).getLocation() && isNewPost()) {
    mEditPostSettingsFragment.searchLocation();
  }
  return;
}
ToastUtils.showToast(this,getString(R.string.add_location_permission_required));
break;
case MEDIA_PERMISSION_REQUEST_CODE:
boolean shouldShowContextMenu=true;
for (int i=0; i < grantResults.length; ++i) {
switch (permissions[i]) {
case Manifest.permission.CAMERA:
if (grantResults[i] == PackageManager.PERMISSION_DENIED) {
shouldShowContextMenu=false;
}
break;
case Manifest.permission.WRITE_EXTERNAL_STORAGE:
if (grantResults[i] == PackageManager.PERMISSION_DENIED) {
shouldShowContextMenu=false;
}
 else {
registerReceiver(mGalleryReceiver,new IntentFilter(LegacyEditorFragment.ACTION_MEDIA_GALLERY_TOUCHED));
refreshBlogMedia();
}
break;
}
}
if (shouldShowContextMenu) {
if (mMenuView != null) {
super.openContextMenu(mMenuView);
mMenuView=null;
}
}
 else {
ToastUtils.showToast(this,getString(R.string.access_media_permission_required));
}
break;
case DRAG_AND_DROP_MEDIA_PERMISSION_REQUEST_CODE:
boolean mediaAccessGranted=false;
for (int i=0; i < grantResults.length; ++i) {
switch (permissions[i]) {
case Manifest.permission.WRITE_EXTERNAL_STORAGE:
if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
mediaAccessGranted=true;
}
break;
}
}
if (mediaAccessGranted) {
runOnUiThread(mFetchMediaRunnable);
}
 else {
ToastUtils.showToast(this,getString(R.string.access_media_permission_required));
}
default :
break;
}
}",0.982839313572543
13913,"private void initLocation(ViewGroup rootView){
  if (!mPost.supportsLocation())   return;
  View locationRootView=((ViewStub)rootView.findViewById(R.id.stub_post_location_settings)).inflate();
  TextView locationLabel=((TextView)locationRootView.findViewById(R.id.locationLabel));
  locationLabel.setText(getResources().getString(R.string.location).toUpperCase());
  mLocationText=(TextView)locationRootView.findViewById(R.id.locationText);
  mLocationText.setOnClickListener(this);
  mLocationAddSection=locationRootView.findViewById(R.id.sectionLocationAdd);
  mLocationSearchSection=locationRootView.findViewById(R.id.sectionLocationSearch);
  mLocationViewSection=locationRootView.findViewById(R.id.sectionLocationView);
  Button addLocation=(Button)locationRootView.findViewById(R.id.addLocation);
  addLocation.setOnClickListener(this);
  mButtonSearchLocation=(Button)locationRootView.findViewById(R.id.searchLocation);
  mButtonSearchLocation.setOnClickListener(this);
  mLocationEditText=(EditText)locationRootView.findViewById(R.id.searchLocationText);
  mLocationEditText.setOnEditorActionListener(this);
  mLocationEditText.addTextChangedListener(mLocationEditTextWatcher);
  Button updateLocation=(Button)locationRootView.findViewById(R.id.updateLocation);
  Button removeLocation=(Button)locationRootView.findViewById(R.id.removeLocation);
  updateLocation.setOnClickListener(this);
  removeLocation.setOnClickListener(this);
  if (SiteSettingsInterface.getGeotagging(getActivity()) && !checkForLocationPermission())   return;
  if (mPost.hasLocation()) {
    showLocationView();
    PostLocation location=mPost.getLocation();
    setLocation(location.getLatitude(),location.getLongitude());
  }
 else {
    EditPostActivity activity=(EditPostActivity)getActivity();
    if (SiteSettingsInterface.getGeotagging(activity) && activity.isNewPost()) {
      searchLocation();
    }
 else {
      showLocationAdd();
    }
  }
}","private void initLocation(ViewGroup rootView){
  if (!mPost.supportsLocation())   return;
  View locationRootView=((ViewStub)rootView.findViewById(R.id.stub_post_location_settings)).inflate();
  TextView locationLabel=((TextView)locationRootView.findViewById(R.id.locationLabel));
  locationLabel.setText(getResources().getString(R.string.location).toUpperCase());
  mLocationText=(TextView)locationRootView.findViewById(R.id.locationText);
  mLocationText.setOnClickListener(this);
  mLocationAddSection=locationRootView.findViewById(R.id.sectionLocationAdd);
  mLocationSearchSection=locationRootView.findViewById(R.id.sectionLocationSearch);
  mLocationViewSection=locationRootView.findViewById(R.id.sectionLocationView);
  Button addLocation=(Button)locationRootView.findViewById(R.id.addLocation);
  addLocation.setOnClickListener(this);
  mButtonSearchLocation=(Button)locationRootView.findViewById(R.id.searchLocation);
  mButtonSearchLocation.setOnClickListener(this);
  mLocationEditText=(EditText)locationRootView.findViewById(R.id.searchLocationText);
  mLocationEditText.setOnEditorActionListener(this);
  mLocationEditText.addTextChangedListener(mLocationEditTextWatcher);
  Button updateLocation=(Button)locationRootView.findViewById(R.id.updateLocation);
  Button removeLocation=(Button)locationRootView.findViewById(R.id.removeLocation);
  updateLocation.setOnClickListener(this);
  removeLocation.setOnClickListener(this);
  if (SiteSettingsInterface.getInterface(getActivity(),mSite,null).init(false).getLocation() && !checkForLocationPermission())   return;
  if (mPost.hasLocation()) {
    showLocationView();
    PostLocation location=mPost.getLocation();
    setLocation(location.getLatitude(),location.getLongitude());
  }
 else {
    EditPostActivity activity=(EditPostActivity)getActivity();
    if (SiteSettingsInterface.getInterface(getActivity(),mSite,null).init(false).getLocation() && activity.isNewPost()) {
      searchLocation();
    }
 else {
      showLocationAdd();
    }
  }
}",0.9607495568498354
13914,"/** 
 * Request remote site data via the WordPress REST API.
 */
@Override protected void fetchRemoteData(){
  fetchCategories();
  WordPress.getRestClientUtils().getGeneralSettings(mSite.getSiteId(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      AppLog.d(AppLog.T.API,""String_Node_Str"");
      credentialsVerified(true);
      mRemoteSettings.localTableId=mSite.getId();
      deserializeDotComRestResponse(mSite,response);
      if (!mRemoteSettings.equals(mSettings)) {
        final Map<String,String> currentPostFormats=mSettings.postFormats;
        mSettings.copyFrom(mRemoteSettings);
        mSettings.postFormats=currentPostFormats;
        SiteSettingsTable.saveSettings(mSettings);
        notifyUpdatedOnUiThread(null);
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.w(AppLog.T.API,""String_Node_Str"" + error);
      notifyUpdatedOnUiThread(error);
    }
  }
);
}","/** 
 * Request remote site data via the WordPress REST API.
 */
@Override protected void fetchRemoteData(){
  fetchCategories();
  WordPress.getRestClientUtils().getGeneralSettings(mSite.getSiteId(),new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      AppLog.d(AppLog.T.API,""String_Node_Str"");
      credentialsVerified(true);
      mRemoteSettings.localTableId=mSite.getId();
      deserializeDotComRestResponse(mSite,response);
      if (!mRemoteSettings.equals(mSettings)) {
        final Map<String,String> currentPostFormats=mSettings.postFormats;
        boolean location=mSettings.location;
        boolean optimizeImage=mSettings.optimizeImage;
        mSettings.copyFrom(mRemoteSettings);
        mSettings.postFormats=currentPostFormats;
        mSettings.location=location;
        mSettings.optimizeImage=optimizeImage;
        SiteSettingsTable.saveSettings(mSettings);
        notifyUpdatedOnUiThread(null);
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      AppLog.w(AppLog.T.API,""String_Node_Str"" + error);
      notifyUpdatedOnUiThread(error);
    }
  }
);
}",0.916439600363306
13915,"public void setEditingEnabled(boolean enabled){
  final Preference[] editablePreference={mTitlePref,mTaglinePref,mPrivacyPref,mLanguagePref,mUsernamePref,mPasswordPref,mLocationPref,mCategoryPref,mFormatPref,mAllowCommentsPref,mAllowCommentsNested,mSendPingbacksPref,mSendPingbacksNested,mReceivePingbacksPref,mReceivePingbacksNested,mIdentityRequiredPreference,mUserAccountRequiredPref,mSortByPref,mWhitelistPref,mRelatedPostsPref,mCloseAfterPref,mPagingPref,mThreadingPref,mMultipleLinksPref,mModerationHoldPref,mBlacklistPref,mUploadAndLinkPref,mDeleteSitePref};
  for (  Preference preference : editablePreference) {
    if (preference != null)     preference.setEnabled(enabled);
  }
  mEditingEnabled=enabled;
}","public void setEditingEnabled(boolean enabled){
  final Preference[] editablePreference={mTitlePref,mTaglinePref,mPrivacyPref,mLanguagePref,mUsernamePref,mPasswordPref,mLocationPref,mCategoryPref,mFormatPref,mAllowCommentsPref,mAllowCommentsNested,mSendPingbacksPref,mSendPingbacksNested,mReceivePingbacksPref,mReceivePingbacksNested,mIdentityRequiredPreference,mUserAccountRequiredPref,mSortByPref,mWhitelistPref,mRelatedPostsPref,mCloseAfterPref,mPagingPref,mThreadingPref,mMultipleLinksPref,mModerationHoldPref,mBlacklistPref,mOptimizeImage,mDeleteSitePref};
  for (  Preference preference : editablePreference) {
    if (preference != null)     preference.setEnabled(enabled);
  }
  mEditingEnabled=enabled;
}",0.9804195804195804
13916,"/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  mTitlePref=(EditTextPreference)getChangePref(R.string.pref_key_site_title);
  mTaglinePref=(EditTextPreference)getChangePref(R.string.pref_key_site_tagline);
  mAddressPref=(EditTextPreference)getChangePref(R.string.pref_key_site_address);
  mPrivacyPref=(DetailListPreference)getChangePref(R.string.pref_key_site_visibility);
  mLanguagePref=(DetailListPreference)getChangePref(R.string.pref_key_site_language);
  mUsernamePref=(EditTextPreference)getChangePref(R.string.pref_key_site_username);
  mPasswordPref=(EditTextPreference)getChangePref(R.string.pref_key_site_password);
  mLocationPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_location);
  mCategoryPref=(DetailListPreference)getChangePref(R.string.pref_key_site_category);
  mFormatPref=(DetailListPreference)getChangePref(R.string.pref_key_site_format);
  mAllowCommentsPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments);
  mAllowCommentsNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments_nested);
  mSendPingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks);
  mSendPingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks_nested);
  mReceivePingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks);
  mReceivePingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks_nested);
  mIdentityRequiredPreference=(WPSwitchPreference)getChangePref(R.string.pref_key_site_identity_required);
  mUserAccountRequiredPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_user_account_required);
  mSortByPref=(DetailListPreference)getChangePref(R.string.pref_key_site_sort_by);
  mWhitelistPref=(DetailListPreference)getChangePref(R.string.pref_key_site_whitelist);
  mMorePreference=(PreferenceScreen)getClickPref(R.string.pref_key_site_more_discussion);
  mRelatedPostsPref=getClickPref(R.string.pref_key_site_related_posts);
  mCloseAfterPref=getClickPref(R.string.pref_key_site_close_after);
  mPagingPref=getClickPref(R.string.pref_key_site_paging);
  mThreadingPref=getClickPref(R.string.pref_key_site_threading);
  mMultipleLinksPref=getClickPref(R.string.pref_key_site_multiple_links);
  mModerationHoldPref=getClickPref(R.string.pref_key_site_moderation_hold);
  mBlacklistPref=getClickPref(R.string.pref_key_site_blacklist);
  mUploadAndLinkPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_upload_and_link_image);
  mStartOverPref=getClickPref(R.string.pref_key_site_start_over);
  mExportSitePref=getClickPref(R.string.pref_key_site_export_site);
  mDeleteSitePref=getClickPref(R.string.pref_key_site_delete_site);
  sortLanguages();
  if (SiteUtils.isAccessibleViaWPComAPI(mSite)) {
    removeSelfHostedOnlyPreferences();
  }
 else {
    removeDotComOnlyPreferences();
  }
  if ((!mSite.isWPCom() && !mSite.isSelfHostedAdmin()) || (mSite.isWPCom() && !mSite.getHasCapabilityManageOptions())) {
    hideAdminRequiredPreferences();
  }
}","/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  mTitlePref=(EditTextPreference)getChangePref(R.string.pref_key_site_title);
  mTaglinePref=(EditTextPreference)getChangePref(R.string.pref_key_site_tagline);
  mAddressPref=(EditTextPreference)getChangePref(R.string.pref_key_site_address);
  mPrivacyPref=(DetailListPreference)getChangePref(R.string.pref_key_site_visibility);
  mLanguagePref=(DetailListPreference)getChangePref(R.string.pref_key_site_language);
  mUsernamePref=(EditTextPreference)getChangePref(R.string.pref_key_site_username);
  mPasswordPref=(EditTextPreference)getChangePref(R.string.pref_key_site_password);
  mLocationPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_location);
  mCategoryPref=(DetailListPreference)getChangePref(R.string.pref_key_site_category);
  mFormatPref=(DetailListPreference)getChangePref(R.string.pref_key_site_format);
  mAllowCommentsPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments);
  mAllowCommentsNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments_nested);
  mSendPingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks);
  mSendPingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks_nested);
  mReceivePingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks);
  mReceivePingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks_nested);
  mIdentityRequiredPreference=(WPSwitchPreference)getChangePref(R.string.pref_key_site_identity_required);
  mUserAccountRequiredPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_user_account_required);
  mSortByPref=(DetailListPreference)getChangePref(R.string.pref_key_site_sort_by);
  mWhitelistPref=(DetailListPreference)getChangePref(R.string.pref_key_site_whitelist);
  mMorePreference=(PreferenceScreen)getClickPref(R.string.pref_key_site_more_discussion);
  mRelatedPostsPref=getClickPref(R.string.pref_key_site_related_posts);
  mCloseAfterPref=getClickPref(R.string.pref_key_site_close_after);
  mPagingPref=getClickPref(R.string.pref_key_site_paging);
  mThreadingPref=getClickPref(R.string.pref_key_site_threading);
  mMultipleLinksPref=getClickPref(R.string.pref_key_site_multiple_links);
  mModerationHoldPref=getClickPref(R.string.pref_key_site_moderation_hold);
  mBlacklistPref=getClickPref(R.string.pref_key_site_blacklist);
  mOptimizeImage=(WPSwitchPreference)getChangePref(R.string.pref_key_optimize_image);
  mStartOverPref=getClickPref(R.string.pref_key_site_start_over);
  mExportSitePref=getClickPref(R.string.pref_key_site_export_site);
  mDeleteSitePref=getClickPref(R.string.pref_key_site_delete_site);
  sortLanguages();
  if (SiteUtils.isAccessibleViaWPComAPI(mSite)) {
    removeSelfHostedOnlyPreferences();
  }
 else {
    removeDotComOnlyPreferences();
  }
  if ((!mSite.isWPCom() && !mSite.isSelfHostedAdmin()) || (mSite.isWPCom() && !mSite.getHasCapabilityManageOptions())) {
    hideAdminRequiredPreferences();
  }
  mLocationPref.setChecked(mSiteSettings.getLocation());
  mOptimizeImage.setChecked(mSiteSettings.getOptmizeImage());
}",0.9723653395784544
13917,"private void setPreferencesFromSiteSettings(){
  mLocationPref.setChecked(mSiteSettings.getLocation());
  changeEditTextPreferenceValue(mTitlePref,mSiteSettings.getTitle());
  changeEditTextPreferenceValue(mTaglinePref,mSiteSettings.getTagline());
  changeEditTextPreferenceValue(mAddressPref,mSiteSettings.getAddress());
  changeEditTextPreferenceValue(mUsernamePref,mSiteSettings.getUsername());
  changeEditTextPreferenceValue(mPasswordPref,mSiteSettings.getPassword());
  changeLanguageValue(mSiteSettings.getLanguageCode());
  setDetailListPreferenceValue(mPrivacyPref,String.valueOf(mSiteSettings.getPrivacy()),mSiteSettings.getPrivacyDescription());
  setCategories();
  setPostFormats();
  setAllowComments(mSiteSettings.getAllowComments());
  setSendPingbacks(mSiteSettings.getSendPingbacks());
  setReceivePingbacks(mSiteSettings.getReceivePingbacks());
  setDetailListPreferenceValue(mSortByPref,String.valueOf(mSiteSettings.getCommentSorting()),mSiteSettings.getSortingDescription());
  int approval=mSiteSettings.getManualApproval() ? mSiteSettings.getUseCommentWhitelist() ? 0 : -1 : 1;
  setDetailListPreferenceValue(mWhitelistPref,String.valueOf(approval),getWhitelistSummary(approval));
  String s=StringUtils.getQuantityString(getActivity(),R.string.site_settings_multiple_links_summary_zero,R.string.site_settings_multiple_links_summary_one,R.string.site_settings_multiple_links_summary_other,mSiteSettings.getMultipleLinks());
  mMultipleLinksPref.setSummary(s);
  mIdentityRequiredPreference.setChecked(mSiteSettings.getIdentityRequired());
  mUserAccountRequiredPref.setChecked(mSiteSettings.getUserAccountRequired());
  mThreadingPref.setSummary(mSiteSettings.getThreadingDescription());
  mCloseAfterPref.setSummary(mSiteSettings.getCloseAfterDescriptionForPeriod());
  mPagingPref.setSummary(mSiteSettings.getPagingDescription());
  mRelatedPostsPref.setSummary(mSiteSettings.getRelatedPostsDescription());
  mModerationHoldPref.setSummary(mSiteSettings.getModerationHoldDescription());
  mBlacklistPref.setSummary(mSiteSettings.getBlacklistDescription());
}","private void setPreferencesFromSiteSettings(){
  mLocationPref.setChecked(mSiteSettings.getLocation());
  mOptimizeImage.setChecked(mSiteSettings.getOptmizeImage());
  changeEditTextPreferenceValue(mTitlePref,mSiteSettings.getTitle());
  changeEditTextPreferenceValue(mTaglinePref,mSiteSettings.getTagline());
  changeEditTextPreferenceValue(mAddressPref,mSiteSettings.getAddress());
  changeEditTextPreferenceValue(mUsernamePref,mSiteSettings.getUsername());
  changeEditTextPreferenceValue(mPasswordPref,mSiteSettings.getPassword());
  changeLanguageValue(mSiteSettings.getLanguageCode());
  setDetailListPreferenceValue(mPrivacyPref,String.valueOf(mSiteSettings.getPrivacy()),mSiteSettings.getPrivacyDescription());
  setCategories();
  setPostFormats();
  setAllowComments(mSiteSettings.getAllowComments());
  setSendPingbacks(mSiteSettings.getSendPingbacks());
  setReceivePingbacks(mSiteSettings.getReceivePingbacks());
  setDetailListPreferenceValue(mSortByPref,String.valueOf(mSiteSettings.getCommentSorting()),mSiteSettings.getSortingDescription());
  int approval=mSiteSettings.getManualApproval() ? mSiteSettings.getUseCommentWhitelist() ? 0 : -1 : 1;
  setDetailListPreferenceValue(mWhitelistPref,String.valueOf(approval),getWhitelistSummary(approval));
  String s=StringUtils.getQuantityString(getActivity(),R.string.site_settings_multiple_links_summary_zero,R.string.site_settings_multiple_links_summary_one,R.string.site_settings_multiple_links_summary_other,mSiteSettings.getMultipleLinks());
  mMultipleLinksPref.setSummary(s);
  mIdentityRequiredPreference.setChecked(mSiteSettings.getIdentityRequired());
  mUserAccountRequiredPref.setChecked(mSiteSettings.getUserAccountRequired());
  mThreadingPref.setSummary(mSiteSettings.getThreadingDescription());
  mCloseAfterPref.setSummary(mSiteSettings.getCloseAfterDescriptionForPeriod());
  mPagingPref.setSummary(mSiteSettings.getPagingDescription());
  mRelatedPostsPref.setSummary(mSiteSettings.getRelatedPostsDescription());
  mModerationHoldPref.setSummary(mSiteSettings.getModerationHoldDescription());
  mBlacklistPref.setSummary(mSiteSettings.getBlacklistDescription());
}",0.9853358561967832
13918,"@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  if (newValue == null || !mEditingEnabled)   return false;
  if (preference == mTitlePref) {
    mSiteSettings.setTitle(newValue.toString());
    changeEditTextPreferenceValue(mTitlePref,mSiteSettings.getTitle());
  }
 else   if (preference == mTaglinePref) {
    mSiteSettings.setTagline(newValue.toString());
    changeEditTextPreferenceValue(mTaglinePref,mSiteSettings.getTagline());
  }
 else   if (preference == mAddressPref) {
    mSiteSettings.setAddress(newValue.toString());
    changeEditTextPreferenceValue(mAddressPref,mSiteSettings.getAddress());
  }
 else   if (preference == mLanguagePref) {
    if (!mSiteSettings.setLanguageCode(newValue.toString())) {
      AppLog.w(AppLog.T.SETTINGS,""String_Node_Str"" + newValue.toString() + ""String_Node_Str"");
      ToastUtils.showToast(getActivity(),R.string.site_settings_unknown_language_code_error);
    }
    changeLanguageValue(mSiteSettings.getLanguageCode());
  }
 else   if (preference == mPrivacyPref) {
    mSiteSettings.setPrivacy(Integer.parseInt(newValue.toString()));
    setDetailListPreferenceValue(mPrivacyPref,String.valueOf(mSiteSettings.getPrivacy()),mSiteSettings.getPrivacyDescription());
  }
 else   if (preference == mAllowCommentsPref || preference == mAllowCommentsNested) {
    setAllowComments((Boolean)newValue);
  }
 else   if (preference == mSendPingbacksPref || preference == mSendPingbacksNested) {
    setSendPingbacks((Boolean)newValue);
  }
 else   if (preference == mReceivePingbacksPref || preference == mReceivePingbacksNested) {
    setReceivePingbacks((Boolean)newValue);
  }
 else   if (preference == mCloseAfterPref) {
    mSiteSettings.setCloseAfter(Integer.parseInt(newValue.toString()));
    mCloseAfterPref.setSummary(mSiteSettings.getCloseAfterDescription());
  }
 else   if (preference == mSortByPref) {
    mSiteSettings.setCommentSorting(Integer.parseInt(newValue.toString()));
    setDetailListPreferenceValue(mSortByPref,newValue.toString(),mSiteSettings.getSortingDescription());
  }
 else   if (preference == mThreadingPref) {
    mSiteSettings.setThreadingLevels(Integer.parseInt(newValue.toString()));
    mThreadingPref.setSummary(mSiteSettings.getThreadingDescription());
  }
 else   if (preference == mPagingPref) {
    mSiteSettings.setPagingCount(Integer.parseInt(newValue.toString()));
    mPagingPref.setSummary(mSiteSettings.getPagingDescription());
  }
 else   if (preference == mIdentityRequiredPreference) {
    mSiteSettings.setIdentityRequired((Boolean)newValue);
  }
 else   if (preference == mUserAccountRequiredPref) {
    mSiteSettings.setUserAccountRequired((Boolean)newValue);
  }
 else   if (preference == mWhitelistPref) {
    updateWhitelistSettings(Integer.parseInt(newValue.toString()));
  }
 else   if (preference == mMultipleLinksPref) {
    mSiteSettings.setMultipleLinks(Integer.parseInt(newValue.toString()));
    String s=StringUtils.getQuantityString(getActivity(),R.string.site_settings_multiple_links_summary_zero,R.string.site_settings_multiple_links_summary_one,R.string.site_settings_multiple_links_summary_other,mSiteSettings.getMultipleLinks());
    mMultipleLinksPref.setSummary(s);
  }
 else   if (preference == mUsernamePref) {
    mSiteSettings.setUsername(newValue.toString());
    changeEditTextPreferenceValue(mUsernamePref,mSiteSettings.getUsername());
  }
 else   if (preference == mPasswordPref) {
    mSiteSettings.setPassword(newValue.toString());
    changeEditTextPreferenceValue(mPasswordPref,mSiteSettings.getPassword());
  }
 else   if (preference == mLocationPref) {
    mSiteSettings.setLocation((Boolean)newValue);
  }
 else   if (preference == mCategoryPref) {
    mSiteSettings.setDefaultCategory(Integer.parseInt(newValue.toString()));
    setDetailListPreferenceValue(mCategoryPref,newValue.toString(),mSiteSettings.getDefaultCategoryForDisplay());
  }
 else   if (preference == mFormatPref) {
    mSiteSettings.setDefaultFormat(newValue.toString());
    setDetailListPreferenceValue(mFormatPref,newValue.toString(),mSiteSettings.getDefaultPostFormatDisplay());
  }
 else   if (preference == mRelatedPostsPref) {
    mRelatedPostsPref.setSummary(newValue.toString());
  }
 else   if (preference == mModerationHoldPref) {
    mModerationHoldPref.setSummary(mSiteSettings.getModerationHoldDescription());
  }
 else   if (preference == mBlacklistPref) {
    mBlacklistPref.setSummary(mSiteSettings.getBlacklistDescription());
  }
 else {
    return false;
  }
  mSiteSettings.saveSettings();
  return true;
}","@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  if (newValue == null || !mEditingEnabled)   return false;
  if (preference == mTitlePref) {
    mSiteSettings.setTitle(newValue.toString());
    changeEditTextPreferenceValue(mTitlePref,mSiteSettings.getTitle());
  }
 else   if (preference == mTaglinePref) {
    mSiteSettings.setTagline(newValue.toString());
    changeEditTextPreferenceValue(mTaglinePref,mSiteSettings.getTagline());
  }
 else   if (preference == mAddressPref) {
    mSiteSettings.setAddress(newValue.toString());
    changeEditTextPreferenceValue(mAddressPref,mSiteSettings.getAddress());
  }
 else   if (preference == mLanguagePref) {
    if (!mSiteSettings.setLanguageCode(newValue.toString())) {
      AppLog.w(AppLog.T.SETTINGS,""String_Node_Str"" + newValue.toString() + ""String_Node_Str"");
      ToastUtils.showToast(getActivity(),R.string.site_settings_unknown_language_code_error);
    }
    changeLanguageValue(mSiteSettings.getLanguageCode());
  }
 else   if (preference == mPrivacyPref) {
    mSiteSettings.setPrivacy(Integer.parseInt(newValue.toString()));
    setDetailListPreferenceValue(mPrivacyPref,String.valueOf(mSiteSettings.getPrivacy()),mSiteSettings.getPrivacyDescription());
  }
 else   if (preference == mAllowCommentsPref || preference == mAllowCommentsNested) {
    setAllowComments((Boolean)newValue);
  }
 else   if (preference == mSendPingbacksPref || preference == mSendPingbacksNested) {
    setSendPingbacks((Boolean)newValue);
  }
 else   if (preference == mReceivePingbacksPref || preference == mReceivePingbacksNested) {
    setReceivePingbacks((Boolean)newValue);
  }
 else   if (preference == mCloseAfterPref) {
    mSiteSettings.setCloseAfter(Integer.parseInt(newValue.toString()));
    mCloseAfterPref.setSummary(mSiteSettings.getCloseAfterDescription());
  }
 else   if (preference == mSortByPref) {
    mSiteSettings.setCommentSorting(Integer.parseInt(newValue.toString()));
    setDetailListPreferenceValue(mSortByPref,newValue.toString(),mSiteSettings.getSortingDescription());
  }
 else   if (preference == mThreadingPref) {
    mSiteSettings.setThreadingLevels(Integer.parseInt(newValue.toString()));
    mThreadingPref.setSummary(mSiteSettings.getThreadingDescription());
  }
 else   if (preference == mPagingPref) {
    mSiteSettings.setPagingCount(Integer.parseInt(newValue.toString()));
    mPagingPref.setSummary(mSiteSettings.getPagingDescription());
  }
 else   if (preference == mIdentityRequiredPreference) {
    mSiteSettings.setIdentityRequired((Boolean)newValue);
  }
 else   if (preference == mUserAccountRequiredPref) {
    mSiteSettings.setUserAccountRequired((Boolean)newValue);
  }
 else   if (preference == mWhitelistPref) {
    updateWhitelistSettings(Integer.parseInt(newValue.toString()));
  }
 else   if (preference == mMultipleLinksPref) {
    mSiteSettings.setMultipleLinks(Integer.parseInt(newValue.toString()));
    String s=StringUtils.getQuantityString(getActivity(),R.string.site_settings_multiple_links_summary_zero,R.string.site_settings_multiple_links_summary_one,R.string.site_settings_multiple_links_summary_other,mSiteSettings.getMultipleLinks());
    mMultipleLinksPref.setSummary(s);
  }
 else   if (preference == mUsernamePref) {
    mSiteSettings.setUsername(newValue.toString());
    changeEditTextPreferenceValue(mUsernamePref,mSiteSettings.getUsername());
  }
 else   if (preference == mPasswordPref) {
    mSiteSettings.setPassword(newValue.toString());
    changeEditTextPreferenceValue(mPasswordPref,mSiteSettings.getPassword());
  }
 else   if (preference == mLocationPref) {
    mSiteSettings.setLocation((Boolean)newValue);
  }
 else   if (preference == mOptimizeImage) {
    mSiteSettings.setOptimizeImage((Boolean)newValue);
  }
 else   if (preference == mCategoryPref) {
    mSiteSettings.setDefaultCategory(Integer.parseInt(newValue.toString()));
    setDetailListPreferenceValue(mCategoryPref,newValue.toString(),mSiteSettings.getDefaultCategoryForDisplay());
  }
 else   if (preference == mFormatPref) {
    mSiteSettings.setDefaultFormat(newValue.toString());
    setDetailListPreferenceValue(mFormatPref,newValue.toString(),mSiteSettings.getDefaultPostFormatDisplay());
  }
 else   if (preference == mRelatedPostsPref) {
    mRelatedPostsPref.setSummary(newValue.toString());
  }
 else   if (preference == mModerationHoldPref) {
    mModerationHoldPref.setSummary(mSiteSettings.getModerationHoldDescription());
  }
 else   if (preference == mBlacklistPref) {
    mBlacklistPref.setSummary(mSiteSettings.getBlacklistDescription());
  }
 else {
    return false;
  }
  mSiteSettings.saveSettings();
  return true;
}",0.9697823026102024
13919,"/** 
 * Gets the geo-tagging value stored in   {@link SharedPreferences}, false by default.
 */
public static boolean getGeotagging(Context context){
  return siteSettingsPreferences(context).getBoolean(LOCATION_PREF_KEY,false);
}","/** 
 * Gets the geo-tagging value
 */
public boolean getGeotagging(){
  return mSettings.location;
}",0.56797583081571
13920,"/** 
 * Need to defer loading the cached settings to a thread so it completes after initialization.
 */
private void loadCachedSettings(){
  Cursor localSettings=SiteSettingsTable.getSettings(mSite.getSiteId());
  if (localSettings != null) {
    Map<Integer,CategoryModel> cachedModels=SiteSettingsTable.getAllCategories();
    mSettings.deserializeOptionsDatabaseCursor(localSettings,cachedModels);
    mSettings.language=languageIdToLanguageCode(Integer.toString(mSettings.languageId));
    if (mSettings.language == null) {
      setLanguageCode(LanguageUtils.getPatchedCurrentDeviceLanguage(null));
    }
    mRemoteSettings.language=mSettings.language;
    mRemoteSettings.languageId=mSettings.languageId;
    mRemoteSettings.location=mSettings.location;
    localSettings.close();
    notifyUpdatedOnUiThread(null);
  }
 else {
    mSettings.isInLocalTable=false;
    setAddress(mSite.getUrl());
    setUsername(mSite.getUsername());
    setPassword(mSite.getPassword());
    setTitle(mSite.getName());
  }
}","/** 
 * Need to defer loading the cached settings to a thread so it completes after initialization.
 */
private void loadCachedSettings(){
  Cursor localSettings=SiteSettingsTable.getSettings(mSite.getId());
  if (localSettings != null) {
    Map<Integer,CategoryModel> cachedModels=SiteSettingsTable.getAllCategories();
    mSettings.deserializeOptionsDatabaseCursor(localSettings,cachedModels);
    mSettings.language=languageIdToLanguageCode(Integer.toString(mSettings.languageId));
    if (mSettings.language == null) {
      setLanguageCode(LanguageUtils.getPatchedCurrentDeviceLanguage(null));
    }
    mRemoteSettings.language=mSettings.language;
    mRemoteSettings.languageId=mSettings.languageId;
    mRemoteSettings.location=mSettings.location;
    mRemoteSettings.optimizeImage=mSettings.optimizeImage;
    localSettings.close();
    notifyUpdatedOnUiThread(null);
  }
 else {
    mSettings.isInLocalTable=false;
    setAddress(mSite.getUrl());
    setUsername(mSite.getUsername());
    setPassword(mSite.getPassword());
    setTitle(mSite.getName());
  }
}",0.9697841726618706
13921,"public void saveSettings(){
  SiteSettingsTable.saveSettings(mSettings);
  siteSettingsPreferences(mActivity).edit().putString(LANGUAGE_PREF_KEY,mSettings.language).apply();
  siteSettingsPreferences(mActivity).edit().putBoolean(LOCATION_PREF_KEY,mSettings.location).apply();
  siteSettingsPreferences(mActivity).edit().putInt(DEF_CATEGORY_PREF_KEY,mSettings.defaultCategory).apply();
  siteSettingsPreferences(mActivity).edit().putString(DEF_FORMAT_PREF_KEY,mSettings.defaultPostFormat).apply();
}","public void saveSettings(){
  SiteSettingsTable.saveSettings(mSettings);
  siteSettingsPreferences(mActivity).edit().putString(LANGUAGE_PREF_KEY,mSettings.language).apply();
  siteSettingsPreferences(mActivity).edit().putInt(DEF_CATEGORY_PREF_KEY,mSettings.defaultCategory).apply();
  siteSettingsPreferences(mActivity).edit().putString(DEF_FORMAT_PREF_KEY,mSettings.defaultPostFormat).apply();
}",0.7785234899328859
13922,"@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AttributesImpl attrs=new AttributesImpl();
      attrs.addAttribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",localMediaId);
      attrs.addAttribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",safeMediaUrl);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow == null) {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        bitmapToShow=BitmapFactory.decodeResource(getResources(),R.drawable.ic_gridicons_image);
      }
      content.insertMedia(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      content.setOverlay(ImagePredicate.localMediaIdPredicate(localMediaId),0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL,attrs);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(ImagePredicate.localMediaIdPredicate(localMediaId),1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP,attrs);
      content.refreshText();
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}","@Override public void appendMediaFile(final MediaFile mediaFile,final String mediaUrl,ImageLoader imageLoader){
  final String safeMediaUrl=Utils.escapeQuotes(mediaUrl);
  if (URLUtil.isNetworkUrl(mediaUrl)) {
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
    mActionStartedAt=System.currentTimeMillis();
  }
 else {
    String localMediaId=String.valueOf(mediaFile.getId());
    if (mediaFile.isVideo()) {
      ToastUtils.showToast(getActivity(),R.string.media_insert_unimplemented);
    }
 else {
      AttributesImpl attrs=new AttributesImpl();
      attrs.addAttribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",localMediaId);
      attrs.addAttribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",safeMediaUrl);
      int maxWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      Bitmap bitmapToShow=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),safeMediaUrl,maxWidth);
      if (bitmapToShow != null) {
        content.insertMedia(new BitmapDrawable(getResources(),bitmapToShow),attrs);
      }
 else {
        ToastUtils.showToast(getActivity(),R.string.error_media_load);
        Drawable d=getResources().getDrawable(R.drawable.ic_gridicons_image);
        d.setBounds(0,0,maxWidth,maxWidth);
        content.insertMedia(d,attrs);
      }
      content.setOverlay(ImagePredicate.localMediaIdPredicate(localMediaId),0,new ColorDrawable(getResources().getColor(R.color.media_shade_overlay_color)),Gravity.FILL,attrs);
      Drawable progressDrawable=getResources().getDrawable(android.R.drawable.progress_horizontal);
      progressDrawable.setBounds(0,0,0,4);
      content.setOverlay(ImagePredicate.localMediaIdPredicate(localMediaId),1,progressDrawable,Gravity.FILL_HORIZONTAL | Gravity.TOP,attrs);
      content.refreshText();
      mUploadingMedia.put(localMediaId,MediaType.IMAGE);
    }
  }
}",0.853725392474458
13923,"@Override public void onMediaUploadSucceeded(final String localMediaId,final MediaFile mediaFile){
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    String remoteUrl=Utils.escapeQuotes(mediaFile.getFileURL());
    if (mediaType.equals(MediaType.IMAGE)) {
      AttributesImpl attrs=new AttributesImpl();
      attrs.addAttribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteUrl);
      content.clearOverlays(ImagePredicate.localMediaIdPredicate(localMediaId),attrs);
      content.refreshText();
      mUploadingMedia.remove(localMediaId);
    }
 else     if (mediaType.equals(MediaType.VIDEO)) {
    }
  }
}","@Override public void onMediaUploadSucceeded(final String localMediaId,final MediaFile mediaFile){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    String remoteUrl=Utils.escapeQuotes(mediaFile.getFileURL());
    if (mediaType.equals(MediaType.IMAGE)) {
      AttributesImpl attrs=new AttributesImpl();
      attrs.addAttribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",remoteUrl);
      content.clearOverlays(ImagePredicate.localMediaIdPredicate(localMediaId),attrs);
      content.refreshText();
      mUploadingMedia.remove(localMediaId);
    }
 else     if (mediaType.equals(MediaType.VIDEO)) {
    }
  }
}",0.9743954480796586
13924,"@Override public void onMediaUploadProgress(final String localMediaId,final float progress){
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    AttributesWithClass attributesWithClass=new AttributesWithClass(content.getMediaAttributes(ImagePredicate.localMediaIdPredicate(localMediaId)));
    attributesWithClass.addClass(""String_Node_Str"");
    content.setOverlayLevel(ImagePredicate.localMediaIdPredicate(localMediaId),1,(int)(progress * 10000),attributesWithClass.getAttributesIml());
    content.refreshText();
  }
}","@Override public void onMediaUploadProgress(final String localMediaId,final float progress){
  if (!isAdded()) {
    return;
  }
  final MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
    AttributesWithClass attributesWithClass=new AttributesWithClass(content.getMediaAttributes(ImagePredicate.localMediaIdPredicate(localMediaId)));
    attributesWithClass.addClass(""String_Node_Str"");
    content.setOverlayLevel(ImagePredicate.localMediaIdPredicate(localMediaId),1,(int)(progress * 10000),attributesWithClass.getAttributesIml());
    content.refreshText();
  }
}",0.9690189328743546
13925,"@Override public void onMediaUploadFailed(final String localMediaId,final String errorMessage){
  MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
switch (mediaType) {
case IMAGE:
      AttributesWithClass attributesWithClass=new AttributesWithClass(content.getMediaAttributes(ImagePredicate.localMediaIdPredicate(localMediaId)));
    attributesWithClass.removeClass(""String_Node_Str"");
  attributesWithClass.addClass(""String_Node_Str"");
overlayFailedMedia(localMediaId,attributesWithClass.getAttributesIml());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.add(localMediaId);
mUploadingMedia.remove(localMediaId);
}
}","@Override public void onMediaUploadFailed(final String localMediaId,final String errorMessage){
  if (!isAdded()) {
    return;
  }
  MediaType mediaType=mUploadingMedia.get(localMediaId);
  if (mediaType != null) {
switch (mediaType) {
case IMAGE:
      AttributesWithClass attributesWithClass=new AttributesWithClass(content.getMediaAttributes(ImagePredicate.localMediaIdPredicate(localMediaId)));
    attributesWithClass.removeClass(""String_Node_Str"");
  attributesWithClass.addClass(""String_Node_Str"");
overlayFailedMedia(localMediaId,attributesWithClass.getAttributesIml());
content.refreshText();
break;
case VIDEO:
}
mFailedMediaIds.add(localMediaId);
mUploadingMedia.remove(localMediaId);
}
}",0.9736070381231672
13926,"/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  mTitlePref=(EditTextPreference)getChangePref(R.string.pref_key_site_title);
  mTaglinePref=(EditTextPreference)getChangePref(R.string.pref_key_site_tagline);
  mAddressPref=(EditTextPreference)getChangePref(R.string.pref_key_site_address);
  mPrivacyPref=(DetailListPreference)getChangePref(R.string.pref_key_site_visibility);
  mLanguagePref=(DetailListPreference)getChangePref(R.string.pref_key_site_language);
  mUsernamePref=(EditTextPreference)getChangePref(R.string.pref_key_site_username);
  mPasswordPref=(EditTextPreference)getChangePref(R.string.pref_key_site_password);
  mLocationPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_location);
  mCategoryPref=(DetailListPreference)getChangePref(R.string.pref_key_site_category);
  mFormatPref=(DetailListPreference)getChangePref(R.string.pref_key_site_format);
  mAllowCommentsPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments);
  mAllowCommentsNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments_nested);
  mSendPingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks);
  mSendPingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks_nested);
  mReceivePingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks);
  mReceivePingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks_nested);
  mIdentityRequiredPreference=(WPSwitchPreference)getChangePref(R.string.pref_key_site_identity_required);
  mUserAccountRequiredPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_user_account_required);
  mSortByPref=(DetailListPreference)getChangePref(R.string.pref_key_site_sort_by);
  mWhitelistPref=(DetailListPreference)getChangePref(R.string.pref_key_site_whitelist);
  mMorePreference=(PreferenceScreen)getClickPref(R.string.pref_key_site_more_discussion);
  mRelatedPostsPref=getClickPref(R.string.pref_key_site_related_posts);
  mCloseAfterPref=getClickPref(R.string.pref_key_site_close_after);
  mPagingPref=getClickPref(R.string.pref_key_site_paging);
  mThreadingPref=getClickPref(R.string.pref_key_site_threading);
  mMultipleLinksPref=getClickPref(R.string.pref_key_site_multiple_links);
  mModerationHoldPref=getClickPref(R.string.pref_key_site_moderation_hold);
  mBlacklistPref=getClickPref(R.string.pref_key_site_blacklist);
  mUploadAndLinkPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_upload_and_link_image);
  mStartOverPref=getClickPref(R.string.pref_key_site_start_over);
  mExportSitePref=getClickPref(R.string.pref_key_site_export_site);
  mDeleteSitePref=getClickPref(R.string.pref_key_site_delete_site);
  sortLanguages();
  if (SiteUtils.isAccessibleViaWPComAPI(mSite)) {
    removeSelfHostedOnlyPreferences();
  }
 else {
    removeDotComOnlyPreferences();
  }
  if ((!mSite.isWPCom() && !mSite.isSelfHostedAdmin()) || (mSite.isWPCom() && !mSite.getHasCapabilityManageOptions())) {
    hideAdminRequiredPreferences();
  }
}","/** 
 * Helper method to retrieve   {@link Preference} references and initialize any data.
 */
private void initPreferences(){
  mTitlePref=(EditTextPreference)getChangePref(R.string.pref_key_site_title);
  mTaglinePref=(EditTextPreference)getChangePref(R.string.pref_key_site_tagline);
  mAddressPref=(EditTextPreference)getChangePref(R.string.pref_key_site_address);
  mPrivacyPref=(DetailListPreference)getChangePref(R.string.pref_key_site_visibility);
  mLanguagePref=(DetailListPreference)getChangePref(R.string.pref_key_site_language);
  mUsernamePref=(EditTextPreference)getChangePref(R.string.pref_key_site_username);
  mPasswordPref=(EditTextPreference)getChangePref(R.string.pref_key_site_password);
  mLocationPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_location);
  mCategoryPref=(DetailListPreference)getChangePref(R.string.pref_key_site_category);
  mFormatPref=(DetailListPreference)getChangePref(R.string.pref_key_site_format);
  mAllowCommentsPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments);
  mAllowCommentsNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_allow_comments_nested);
  mSendPingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks);
  mSendPingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_send_pingbacks_nested);
  mReceivePingbacksPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks);
  mReceivePingbacksNested=(WPSwitchPreference)getChangePref(R.string.pref_key_site_receive_pingbacks_nested);
  mIdentityRequiredPreference=(WPSwitchPreference)getChangePref(R.string.pref_key_site_identity_required);
  mUserAccountRequiredPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_user_account_required);
  mSortByPref=(DetailListPreference)getChangePref(R.string.pref_key_site_sort_by);
  mWhitelistPref=(DetailListPreference)getChangePref(R.string.pref_key_site_whitelist);
  mMorePreference=(PreferenceScreen)getClickPref(R.string.pref_key_site_more_discussion);
  mRelatedPostsPref=getClickPref(R.string.pref_key_site_related_posts);
  mCloseAfterPref=getClickPref(R.string.pref_key_site_close_after);
  mPagingPref=getClickPref(R.string.pref_key_site_paging);
  mThreadingPref=getClickPref(R.string.pref_key_site_threading);
  mMultipleLinksPref=getClickPref(R.string.pref_key_site_multiple_links);
  mModerationHoldPref=getClickPref(R.string.pref_key_site_moderation_hold);
  mBlacklistPref=getClickPref(R.string.pref_key_site_blacklist);
  mUploadAndLinkPref=(WPSwitchPreference)getChangePref(R.string.pref_key_site_upload_and_link_image);
  mStartOverPref=getClickPref(R.string.pref_key_site_start_over);
  mExportSitePref=getClickPref(R.string.pref_key_site_export_site);
  mDeleteSitePref=getClickPref(R.string.pref_key_site_delete_site);
  sortLanguages();
  boolean isAccessibleViaWPComAPI=SiteUtils.isAccessibleViaWPComAPI(mSite);
  if (isAccessibleViaWPComAPI) {
    removeSelfHostedOnlyPreferences();
  }
 else {
    removeDotComOnlyPreferences();
  }
  if ((!isAccessibleViaWPComAPI && !mSite.isSelfHostedAdmin()) || (isAccessibleViaWPComAPI && !mSite.getHasCapabilityManageOptions())) {
    hideAdminRequiredPreferences();
  }
}",0.9807119335110552
13927,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.edit_post_settings_fragment,container,false);
  if (rootView == null || mPost == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mExcerptEditText=(EditText)rootView.findViewById(R.id.postExcerpt);
  mPasswordEditText=(EditText)rootView.findViewById(R.id.post_password);
  mPubDateText=(TextView)rootView.findViewById(R.id.pubDate);
  mPubDateText.setOnClickListener(this);
  mStatusSpinner=(Spinner)rootView.findViewById(R.id.status);
  mStatusSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      updatePostSettingsAndSaveButton();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mSectionCategories=((ViewGroup)rootView.findViewById(R.id.sectionCategories));
  TextView featuredImageLabel=(TextView)rootView.findViewById(R.id.featuredImageLabel);
  mFeaturedImageView=(NetworkImageView)rootView.findViewById(R.id.featuredImage);
  mFeaturedImageButton=(Button)rootView.findViewById(R.id.addFeaturedImage);
  if (AppPrefs.isVisualEditorEnabled() || AppPrefs.isAztecEditorEnabled()) {
    registerForContextMenu(mFeaturedImageView);
    mFeaturedImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        view.showContextMenu();
      }
    }
);
    mFeaturedImageButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        launchMediaGalleryActivity();
      }
    }
);
  }
 else {
    featuredImageLabel.setVisibility(View.GONE);
    mFeaturedImageView.setVisibility(View.GONE);
    mFeaturedImageButton.setVisibility(View.GONE);
  }
  if (mPost.isPage()) {
    mExcerptEditText.setVisibility(View.GONE);
    rootView.findViewById(R.id.sectionTags).setVisibility(View.GONE);
    rootView.findViewById(R.id.sectionCategories).setVisibility(View.GONE);
    rootView.findViewById(R.id.postFormatLabel).setVisibility(View.GONE);
    rootView.findViewById(R.id.postFormat).setVisibility(View.GONE);
  }
 else {
    mPostFormatKeys=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_keys)));
    mPostFormatNames=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_display_names)));
    List<PostFormatModel> postFormatModels=mSiteStore.getPostFormats(mSite);
    for (    PostFormatModel postFormatModel : postFormatModels) {
      mPostFormatKeys.add(postFormatModel.getSlug());
      mPostFormatNames.add(postFormatModel.getDisplayName());
    }
    if (mPostFormatKeys.contains(POST_FORMAT_STANDARD_KEY)) {
      mPostFormatKeys.add(0,POST_FORMAT_STANDARD_KEY);
      mPostFormatNames.add(0,getResources().getString(R.string.post_format_standard));
    }
    mPostFormatSpinner=(Spinner)rootView.findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<>(getActivity(),R.layout.simple_spinner_item,mPostFormatNames);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    mPostFormatSpinner.setAdapter(pfAdapter);
    String activePostFormat=POST_FORMAT_STANDARD_KEY;
    if (!TextUtils.isEmpty(mPost.getPostFormat())) {
      activePostFormat=mPost.getPostFormat();
    }
    for (int i=0; i < mPostFormatKeys.size(); i++) {
      if (mPostFormatKeys.get(i).equals(activePostFormat))       mPostFormatSpinner.setSelection(i);
    }
    mPostFormatSpinner.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View view,      MotionEvent motionEvent){
        return false;
      }
    }
);
    mTagsEditText=(SuggestionAutoCompleteText)rootView.findViewById(R.id.tags);
    if (mTagsEditText != null) {
      mTagsEditText.setTokenizer(new SuggestionAutoCompleteText.CommaTokenizer());
      setupSuggestionServiceAndAdapter();
    }
  }
  initSettingsFields();
  populateSelectedCategories();
  initLocation(rootView);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.edit_post_settings_fragment,container,false);
  if (rootView == null || mPost == null) {
    return null;
  }
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mExcerptEditText=(EditText)rootView.findViewById(R.id.postExcerpt);
  mPasswordEditText=(EditText)rootView.findViewById(R.id.post_password);
  mPubDateText=(TextView)rootView.findViewById(R.id.pubDate);
  mPubDateText.setOnClickListener(this);
  mStatusSpinner=(Spinner)rootView.findViewById(R.id.status);
  mStatusSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      updatePostSettingsAndSaveButton();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mSectionCategories=((ViewGroup)rootView.findViewById(R.id.sectionCategories));
  TextView featuredImageLabel=(TextView)rootView.findViewById(R.id.featuredImageLabel);
  mFeaturedImageView=(NetworkImageView)rootView.findViewById(R.id.featuredImage);
  mFeaturedImageButton=(Button)rootView.findViewById(R.id.addFeaturedImage);
  if (AppPrefs.isVisualEditorEnabled() || AppPrefs.isAztecEditorEnabled()) {
    registerForContextMenu(mFeaturedImageView);
    mFeaturedImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        view.showContextMenu();
      }
    }
);
    mFeaturedImageButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        launchMediaGalleryActivity();
      }
    }
);
  }
 else {
    featuredImageLabel.setVisibility(View.GONE);
    mFeaturedImageView.setVisibility(View.GONE);
    mFeaturedImageButton.setVisibility(View.GONE);
  }
  if (mPost.isPage()) {
    mExcerptEditText.setVisibility(View.GONE);
    rootView.findViewById(R.id.sectionTags).setVisibility(View.GONE);
    rootView.findViewById(R.id.sectionCategories).setVisibility(View.GONE);
    rootView.findViewById(R.id.postFormatLabel).setVisibility(View.GONE);
    rootView.findViewById(R.id.postFormat).setVisibility(View.GONE);
  }
 else {
    mPostFormatKeys=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_keys)));
    mPostFormatNames=new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.post_format_display_names)));
    List<PostFormatModel> postFormatModels=mSiteStore.getPostFormats(mSite);
    for (    PostFormatModel postFormatModel : postFormatModels) {
      if (!mPostFormatKeys.contains(postFormatModel.getSlug())) {
        mPostFormatKeys.add(postFormatModel.getSlug());
        mPostFormatNames.add(postFormatModel.getDisplayName());
      }
    }
    mPostFormatSpinner=(Spinner)rootView.findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<>(getActivity(),R.layout.simple_spinner_item,mPostFormatNames);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    mPostFormatSpinner.setAdapter(pfAdapter);
    String activePostFormat=POST_FORMAT_STANDARD_KEY;
    if (!TextUtils.isEmpty(mPost.getPostFormat())) {
      activePostFormat=mPost.getPostFormat();
    }
    for (int i=0; i < mPostFormatKeys.size(); i++) {
      if (mPostFormatKeys.get(i).equals(activePostFormat))       mPostFormatSpinner.setSelection(i);
    }
    mPostFormatSpinner.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View view,      MotionEvent motionEvent){
        return false;
      }
    }
);
    mTagsEditText=(SuggestionAutoCompleteText)rootView.findViewById(R.id.tags);
    if (mTagsEditText != null) {
      mTagsEditText.setTokenizer(new SuggestionAutoCompleteText.CommaTokenizer());
      setupSuggestionServiceAndAdapter();
    }
  }
  initSettingsFields();
  populateSelectedCategories();
  initLocation(rootView);
  return rootView;
}",0.9666355576294914
13928,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onNewSiteCreated(OnNewSiteCreated event){
  AppLog.i(T.NUX,event.toString());
  if (event.isError()) {
    endProgress();
    showError(event.error.type,event.error.message);
    return;
  }
  if (event.dryRun) {
    mNewSitePayload.dryRun=false;
    mDispatcher.dispatch(SiteActionBuilder.newCreateNewSiteAction(mNewSitePayload));
    updateProgress(getString(R.string.creating_your_site));
    AppLog.i(T.NUX,""String_Node_Str"" + mNewSitePayload.siteTitle + ""String_Node_Str""+ mNewSitePayload.siteName);
    return;
  }
  mDispatcher.dispatch(SiteActionBuilder.newFetchSitesAction());
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onNewSiteCreated(OnNewSiteCreated event){
  AppLog.i(T.NUX,event.toString());
  if (event.isError()) {
    endProgress();
    showError(event.error.type,event.error.message);
    return;
  }
  if (event.dryRun) {
    mNewSitePayload.dryRun=false;
    mDispatcher.dispatch(SiteActionBuilder.newCreateNewSiteAction(mNewSitePayload));
    updateProgress(getString(R.string.creating_your_site));
    AppLog.i(T.NUX,""String_Node_Str"" + mNewSitePayload.siteTitle + ""String_Node_Str""+ mNewSitePayload.siteName);
    return;
  }
  AnalyticsTracker.track(AnalyticsTracker.Stat.CREATED_SITE);
  mDispatcher.dispatch(SiteActionBuilder.newFetchSitesAction());
}",0.9560906515580736
13929,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onNewSiteCreated(OnNewSiteCreated event){
  AppLog.i(T.NUX,event.toString());
  if (event.isError()) {
    endProgress();
    AnalyticsTracker.track(AnalyticsTracker.Stat.CREATE_ACCOUNT_FAILED);
    showSiteError(event.error.type,event.error.message);
    return;
  }
  if (event.dryRun) {
    updateProgress(getString(R.string.creating_your_account));
    mNewSitePayload.dryRun=false;
    mNewAccountPayload.dryRun=false;
    mDispatcher.dispatch(AccountActionBuilder.newCreateNewAccountAction(mNewAccountPayload));
    return;
  }
  fetchSiteAndAccount();
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onNewSiteCreated(OnNewSiteCreated event){
  AppLog.i(T.NUX,event.toString());
  if (event.isError()) {
    endProgress();
    AnalyticsTracker.track(AnalyticsTracker.Stat.CREATE_ACCOUNT_FAILED);
    showSiteError(event.error.type,event.error.message);
    return;
  }
  if (event.dryRun) {
    updateProgress(getString(R.string.creating_your_account));
    mNewSitePayload.dryRun=false;
    mNewAccountPayload.dryRun=false;
    mDispatcher.dispatch(AccountActionBuilder.newCreateNewAccountAction(mNewAccountPayload));
    return;
  }
  AnalyticsTracker.track(AnalyticsTracker.Stat.CREATED_SITE);
  fetchSiteAndAccount();
}",0.9543446244477172
13930,"public void handleDiscoveryError(DiscoveryError error,final String failedEndpoint){
  AppLog.e(T.API,""String_Node_Str"" + error);
  endProgress();
  if (!isAdded()) {
    return;
  }
switch (error) {
case ERRONEOUS_SSL_CERTIFICATE:
    SelfSignedSSLUtils.showSSLWarningDialog(getActivity(),mMemorizingTrustManager,new Callback(){
      @Override public void certificateTrusted(){
        if (failedEndpoint == null) {
          return;
        }
        startProgress(getString(R.string.signing_in));
        mDispatcher.dispatch(AuthenticationActionBuilder.newDiscoverEndpointAction(failedEndpoint));
      }
    }
);
  break;
case HTTP_AUTH_REQUIRED:
askForHttpAuthCredentials(failedEndpoint);
break;
case WORDPRESS_COM_SITE:
signInAndFetchBlogListWPCom();
break;
case NO_SITE_ERROR:
showGenericErrorDialog(getResources().getString(R.string.no_site_error),NO_SITE_HELPSHIFT_FAQ_ID,NO_SITE_HELPSHIFT_FAQ_SECTION);
break;
case INVALID_URL:
showUrlError(R.string.invalid_site_url_message);
break;
case MISSING_XMLRPC_METHOD:
showGenericErrorDialog(getResources().getString(R.string.xmlrpc_missing_method_error),MISSING_XMLRPC_METHOD_HELPSHIFT_FAQ_ID,MISSING_XMLRPC_METHOD_HELPSHIFT_FAQ_SECTION);
break;
case XMLRPC_BLOCKED:
showGenericErrorDialog(getResources().getString(R.string.xmlrpc_post_blocked_error),XMLRPC_BLOCKED_HELPSHIFT_FAQ_ID,XMLRPC_BLOCKED_HELPSHIFT_FAQ_SECTION);
break;
case XMLRPC_FORBIDDEN:
showGenericErrorDialog(getResources().getString(R.string.xmlrpc_endpoint_forbidden_error),XMLRPC_BLOCKED_HELPSHIFT_FAQ_ID,XMLRPC_BLOCKED_HELPSHIFT_FAQ_SECTION);
break;
case GENERIC_ERROR:
default :
showGenericErrorDialog(getResources().getString(R.string.nux_cannot_log_in));
break;
}
}","public void handleDiscoveryError(DiscoveryError error,final String failedEndpoint){
  AppLog.e(T.API,""String_Node_Str"" + error);
  endProgress();
  if (!isAdded()) {
    return;
  }
switch (error) {
case ERRONEOUS_SSL_CERTIFICATE:
    SelfSignedSSLUtils.showSSLWarningDialog(getActivity(),mMemorizingTrustManager,new Callback(){
      @Override public void certificateTrusted(){
        if (failedEndpoint == null) {
          return;
        }
        startProgress(getString(R.string.signing_in));
        mDispatcher.dispatch(AuthenticationActionBuilder.newDiscoverEndpointAction(failedEndpoint));
      }
    }
);
  break;
case HTTP_AUTH_REQUIRED:
askForHttpAuthCredentials(failedEndpoint);
break;
case WORDPRESS_COM_SITE:
signInAndFetchBlogListWPCom();
break;
case NO_SITE_ERROR:
showGenericErrorDialog(getResources().getString(R.string.no_site_error),NO_SITE_HELPSHIFT_FAQ_ID,NO_SITE_HELPSHIFT_FAQ_SECTION);
break;
case INVALID_URL:
showUrlError(R.string.invalid_site_url_message);
AnalyticsTracker.track(Stat.LOGIN_INSERTED_INVALID_URL);
break;
case MISSING_XMLRPC_METHOD:
showGenericErrorDialog(getResources().getString(R.string.xmlrpc_missing_method_error),MISSING_XMLRPC_METHOD_HELPSHIFT_FAQ_ID,MISSING_XMLRPC_METHOD_HELPSHIFT_FAQ_SECTION);
break;
case XMLRPC_BLOCKED:
showGenericErrorDialog(getResources().getString(R.string.xmlrpc_post_blocked_error),XMLRPC_BLOCKED_HELPSHIFT_FAQ_ID,XMLRPC_BLOCKED_HELPSHIFT_FAQ_SECTION);
break;
case XMLRPC_FORBIDDEN:
showGenericErrorDialog(getResources().getString(R.string.xmlrpc_endpoint_forbidden_error),XMLRPC_BLOCKED_HELPSHIFT_FAQ_ID,XMLRPC_BLOCKED_HELPSHIFT_FAQ_SECTION);
break;
case GENERIC_ERROR:
default :
showGenericErrorDialog(getResources().getString(R.string.nux_cannot_log_in));
break;
}
}",0.9834446703456288
13931,"@Override public void onClick(View v){
  if (mDialog != null)   return;
  AnalyticsTracker.track(AnalyticsTracker.Stat.SITE_SETTINGS_LEARN_MORE_CLICKED);
  showDialog();
}","@Override public void onClick(View v){
  if (mDialog != null)   return;
  AnalyticsTracker.track(Stat.SITE_SETTINGS_LEARN_MORE_CLICKED);
  showDialog();
}",0.9476923076923076
13932,"@Override public void onPageFinished(WebView webView,String url){
  super.onPageFinished(webView,url);
  if (mDialog != null) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.SITE_SETTINGS_LEARN_MORE_CLICKED);
    webView.loadUrl(SUPPORT_CONTENT_JS);
    mDialog.setContentView(webView);
    webView.scrollTo(0,0);
  }
}","@Override public void onPageFinished(WebView webView,String url){
  super.onPageFinished(webView,url);
  if (mDialog != null) {
    AnalyticsTracker.track(Stat.SITE_SETTINGS_LEARN_MORE_LOADED);
    webView.loadUrl(SUPPORT_CONTENT_JS);
    mDialog.setContentView(webView);
    webView.scrollTo(0,0);
  }
}",0.9616613418530352
13933,"private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  final String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  final String siteName=EditTextUtils.getText(mSiteTitleTextField).trim();
  final String language=LanguageUtils.getPatchedCurrentDeviceLanguage(getActivity());
  NewSitePayload newSitePayload=new NewSitePayload(siteName,siteUrl,language,SiteVisibility.PUBLIC,false);
  mDispatcher.dispatch(SiteActionBuilder.newCreateNewSiteAction(newSitePayload));
  updateProgress(getString(R.string.create_new_blog_wpcom));
  AppLog.i(T.NUX,""String_Node_Str"" + siteName + ""String_Node_Str""+ siteUrl);
}","private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.creating_your_site));
  final String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  final String siteTitle=EditTextUtils.getText(mSiteTitleTextField).trim();
  final String language=LanguageUtils.getPatchedCurrentDeviceLanguage(getActivity());
  NewSitePayload newSitePayload=new NewSitePayload(siteUrl,siteTitle,language,SiteVisibility.PUBLIC,false);
  mDispatcher.dispatch(SiteActionBuilder.newCreateNewSiteAction(newSitePayload));
  AppLog.i(T.NUX,""String_Node_Str"" + siteTitle + ""String_Node_Str""+ siteUrl);
}",0.91755468311834
13934,"private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.validating_user_data));
  clearErrors();
  mSitesFetched=false;
  mAccountSettingsFetched=false;
  mAccountFetched=false;
  String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  mEmail=EditTextUtils.getText(mEmailTextField).trim();
  mUsername=EditTextUtils.getText(mUsernameTextField).trim();
  mPassword=EditTextUtils.getText(mPasswordTextField).trim();
  String siteName=siteUrlToSiteName(siteUrl);
  String language=LanguageUtils.getPatchedCurrentDeviceLanguage(getActivity());
  mNewAccountPayload=new NewAccountPayload(mUsername,mPassword,mEmail,true);
  mNewSitePayload=new NewSitePayload(siteName,siteUrl,language,SiteVisibility.PUBLIC,true);
  mDispatcher.dispatch(AccountActionBuilder.newCreateNewAccountAction(mNewAccountPayload));
  updateProgress(getString(R.string.validating_site_data));
  AppLog.i(T.NUX,""String_Node_Str"" + mUsername + ""String_Node_Str""+ mEmail+ ""String_Node_Str""+ siteName+ ""String_Node_Str""+ siteUrl);
}","private void validateAndCreateUserAndBlog(){
  if (mSystemService.getActiveNetworkInfo() == null) {
    AlertUtils.showAlert(getActivity(),R.string.no_network_title,R.string.no_network_message);
    return;
  }
  if (!isUserDataValid()) {
    return;
  }
  if (View.VISIBLE == mProgressBarSignIn.getVisibility()) {
    return;
  }
  startProgress(getString(R.string.validating_user_data));
  clearErrors();
  mSitesFetched=false;
  mAccountSettingsFetched=false;
  mAccountFetched=false;
  String siteUrl=EditTextUtils.getText(mSiteUrlTextField).trim();
  mEmail=EditTextUtils.getText(mEmailTextField).trim();
  mUsername=EditTextUtils.getText(mUsernameTextField).trim();
  mPassword=EditTextUtils.getText(mPasswordTextField).trim();
  String siteTitle=siteUrlToSiteName(siteUrl);
  String language=LanguageUtils.getPatchedCurrentDeviceLanguage(getActivity());
  mNewAccountPayload=new NewAccountPayload(mUsername,mPassword,mEmail,true);
  mNewSitePayload=new NewSitePayload(siteUrl,siteTitle,language,SiteVisibility.PUBLIC,true);
  mDispatcher.dispatch(AccountActionBuilder.newCreateNewAccountAction(mNewAccountPayload));
  updateProgress(getString(R.string.validating_site_data));
  AppLog.i(T.NUX,""String_Node_Str"" + mUsername + ""String_Node_Str""+ mEmail+ ""String_Node_Str""+ siteTitle+ ""String_Node_Str""+ siteUrl);
}",0.8402277039848197
13935,"private MediaModel queueFileForUpload(Uri uri,String mimeType,ArrayList<Long> mediaIdOut,String startingState){
  String path=getRealPathFromURI(uri);
  if (TextUtils.isEmpty(path)) {
    Toast.makeText(this,R.string.editor_toast_invalid_path,Toast.LENGTH_SHORT).show();
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    Toast.makeText(this,R.string.file_not_found,Toast.LENGTH_SHORT).show();
    return null;
  }
  MediaModel media=mMediaStore.instantiateMediaModel();
  AppLog.i(T.MEDIA,""String_Node_Str"" + media.getId());
  String filename=org.wordpress.android.fluxc.utils.MediaUtils.getFileName(path);
  String fileExtension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
  if (mimeType == null) {
    mimeType=getContentResolver().getType(uri);
    if (mimeType == null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
    }
    if (mimeType == null) {
      mimeType=""String_Node_Str"";
    }
  }
  if (fileExtension == null) {
    fileExtension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
    filename+=""String_Node_Str"" + fileExtension;
  }
  media.setFileName(filename);
  media.setFilePath(path);
  media.setLocalSiteId(mSite.getId());
  media.setFileExtension(fileExtension);
  media.setMimeType(mimeType);
  media.setUploadState(MediaUploadState.QUEUED.toString());
  media.setUploadDate(DateTimeUtils.iso8601UTCFromTimestamp(System.currentTimeMillis() / 1000));
  mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction(media));
  mPendingUploads.add(media);
  startMediaUploadService();
  return media;
}","private MediaModel queueFileForUpload(Uri uri,String mimeType,ArrayList<Long> mediaIdOut,String startingState){
  String path=getRealPathFromURI(uri);
  if (TextUtils.isEmpty(path)) {
    Toast.makeText(this,R.string.editor_toast_invalid_path,Toast.LENGTH_SHORT).show();
    return null;
  }
  File file=new File(path);
  if (!file.exists()) {
    Toast.makeText(this,R.string.file_not_found,Toast.LENGTH_SHORT).show();
    return null;
  }
  MediaModel media=mMediaStore.instantiateMediaModel();
  AppLog.i(T.MEDIA,""String_Node_Str"" + media.getId());
  String filename=org.wordpress.android.fluxc.utils.MediaUtils.getFileName(path);
  String fileExtension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
  if (mimeType == null) {
    mimeType=getContentResolver().getType(uri);
    if (mimeType == null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
    }
    if (mimeType == null) {
      mimeType=""String_Node_Str"";
    }
  }
  if (fileExtension == null) {
    fileExtension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
    filename+=""String_Node_Str"" + fileExtension;
  }
  if (org.wordpress.android.fluxc.utils.MediaUtils.isVideoMimeType(mimeType)) {
    media.setThumbnailUrl(getVideoThumbnail(path));
  }
  media.setFileName(filename);
  media.setFilePath(path);
  media.setLocalSiteId(mSite.getId());
  media.setFileExtension(fileExtension);
  media.setMimeType(mimeType);
  media.setUploadState(MediaUploadState.QUEUED.toString());
  media.setUploadDate(DateTimeUtils.iso8601UTCFromTimestamp(System.currentTimeMillis() / 1000));
  mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction(media));
  mPendingUploads.add(media);
  startMediaUploadService();
  return media;
}",0.9598108747044918
13936,"public static MediaFile fromMediaModel(MediaModel media){
  if (media == null) {
    return null;
  }
  MediaFile mediaFile=new MediaFile();
  mediaFile.setBlogId(String.valueOf(media.getLocalSiteId()));
  mediaFile.setMediaId(String.valueOf(media.getMediaId()));
  mediaFile.setId(media.getId());
  mediaFile.setFileName(media.getFileName());
  mediaFile.setFilePath(media.getFilePath());
  mediaFile.setMimeType(media.getMimeType());
  mediaFile.setThumbnailURL(media.getThumbnailUrl());
  mediaFile.setFileURL(media.getUrl());
  mediaFile.setTitle(media.getTitle());
  mediaFile.setDescription(media.getDescription());
  mediaFile.setCaption(media.getCaption());
  mediaFile.setUploadState(media.getUploadState());
  return mediaFile;
}","public static MediaFile fromMediaModel(MediaModel media){
  if (media == null) {
    return null;
  }
  MediaFile mediaFile=new MediaFile();
  mediaFile.setBlogId(String.valueOf(media.getLocalSiteId()));
  mediaFile.setMediaId(String.valueOf(media.getMediaId()));
  mediaFile.setId(media.getId());
  mediaFile.setFileName(media.getFileName());
  mediaFile.setFilePath(media.getFilePath());
  mediaFile.setMimeType(media.getMimeType());
  mediaFile.setThumbnailURL(media.getThumbnailUrl());
  mediaFile.setFileURL(media.getUrl());
  mediaFile.setTitle(media.getTitle());
  mediaFile.setDescription(media.getDescription());
  mediaFile.setCaption(media.getCaption());
  mediaFile.setUploadState(media.getUploadState());
  mediaFile.setVideo(org.wordpress.android.fluxc.utils.MediaUtils.isVideoMimeType(media.getMimeType()));
  mediaFile.setVideoPressShortCode(ShortcodeUtils.getVideoPressShortcodeFromId(media.getVideoPressGuid()));
  return mediaFile;
}",0.8740390301596689
13937,"public static MediaModel fromMediaFile(MediaFile file){
  if (file == null) {
    return null;
  }
  MediaModel mediaModel=new MediaModel();
  mediaModel.setFileName(file.getFileName());
  mediaModel.setFilePath(file.getFilePath());
  mediaModel.setFileExtension(org.wordpress.android.fluxc.utils.MediaUtils.getExtension(file.getFilePath()));
  mediaModel.setMimeType(file.getMimeType());
  mediaModel.setThumbnailUrl(file.getThumbnailURL());
  mediaModel.setUrl(file.getFileURL());
  mediaModel.setTitle(file.getTitle());
  mediaModel.setDescription(file.getDescription());
  mediaModel.setCaption(file.getCaption());
  mediaModel.setMediaId(Long.valueOf(file.getMediaId()));
  mediaModel.setId(file.getId());
  mediaModel.setUploadState(file.getUploadState());
  mediaModel.setLocalSiteId(Integer.valueOf(file.getBlogId()));
  return mediaModel;
}","public static MediaModel fromMediaFile(MediaFile file){
  if (file == null) {
    return null;
  }
  MediaModel mediaModel=new MediaModel();
  mediaModel.setFileName(file.getFileName());
  mediaModel.setFilePath(file.getFilePath());
  mediaModel.setFileExtension(org.wordpress.android.fluxc.utils.MediaUtils.getExtension(file.getFilePath()));
  mediaModel.setMimeType(file.getMimeType());
  mediaModel.setThumbnailUrl(file.getThumbnailURL());
  mediaModel.setUrl(file.getFileURL());
  mediaModel.setTitle(file.getTitle());
  mediaModel.setDescription(file.getDescription());
  mediaModel.setCaption(file.getCaption());
  mediaModel.setMediaId(Long.valueOf(file.getMediaId()));
  mediaModel.setId(file.getId());
  mediaModel.setUploadState(file.getUploadState());
  mediaModel.setLocalSiteId(Integer.valueOf(file.getBlogId()));
  mediaModel.setVideoPressGuid(ShortcodeUtils.getVideoPressIdFromShortCode(file.getVideoPressShortCode()));
  return mediaModel;
}",0.9401993355481728
13938,"@Override public void onReceive(Context context,Intent intent){
  super.onReceive(context,intent);
  ((WordPress)context.getApplicationContext()).component().inject(this);
}","@Override public void onReceive(Context context,Intent intent){
  ((WordPress)context.getApplicationContext()).component().inject(this);
  super.onReceive(context,intent);
}",0.7976878612716763
13939,"@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSiteChanged(OnSiteChanged event){
  if (!isFinishing()) {
    getAdapter().loadSites();
  }
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(threadMode=ThreadMode.MAIN) public void onSiteChanged(OnSiteChanged event){
  mDebouncer.debounce(Void.class,new Runnable(){
    @Override public void run(){
      if (!isFinishing()) {
        getAdapter().loadSites();
      }
    }
  }
,200,TimeUnit.MILLISECONDS);
}",0.7334669338677354
13940,"@Override protected void onStart(){
  super.onStart();
}","@Override protected void onStart(){
  super.onStart();
  mDispatcher.register(this);
}",0.7887323943661971
13941,"@Override protected void onStop(){
  super.onStop();
}","@Override protected void onStop(){
  mDispatcher.unregister(this);
  super.onStop();
}",0.7714285714285715
13942,"void loadSites(){
  if (mIsTaskRunning) {
    AppLog.w(AppLog.T.UTILS,""String_Node_Str"");
  }
 else {
    new LoadSitesTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
}","void loadSites(){
  new LoadSitesTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.6715328467153284
13943,"void setVisibilityForSelectedSites(boolean makeVisible){
  SiteList sites=getSelectedSites();
  if (sites != null && sites.size() > 0) {
    for (    SiteRecord site : sites) {
      int index=mSites.indexOfSite(site);
      if (index > -1) {
        mSites.get(index).isHidden=!makeVisible;
      }
    }
  }
}","void setVisibilityForSelectedSites(boolean makeVisible){
  SiteList sites=getSelectedSites();
  if (sites != null && sites.size() > 0) {
    for (    SiteRecord site : sites) {
      int index=mAllSites.indexOfSite(site);
      if (index > -1) {
        mAllSites.get(index).isHidden=!makeVisible;
      }
    }
  }
  notifyDataSetChanged();
}",0.9510703363914372
13944,"void setEnableEditMode(boolean enable){
  if (mIsMultiSelectEnabled == enable)   return;
  if (enable) {
    mShowHiddenSites=true;
    mShowSelfHostedSites=false;
  }
 else {
    mShowHiddenSites=false;
    mShowSelfHostedSites=true;
  }
  mIsMultiSelectEnabled=enable;
  mSelectedPositions.clear();
  loadSites();
}","void setEnableEditMode(boolean enable){
  if (mIsMultiSelectEnabled == enable)   return;
  if (enable) {
    mShowHiddenSites=true;
    mShowSelfHostedSites=false;
  }
 else {
    mShowHiddenSites=false;
    mShowSelfHostedSites=true;
  }
  mIsMultiSelectEnabled=enable;
  mSelectedPositions.clear();
  if (enable) {
    loadSites();
  }
}",0.926829268292683
13945,"@Override protected Boolean doInBackground(Post... posts){
  mPost=posts[0];
  String postTitle=TextUtils.isEmpty(mPost.getTitle()) ? getString(R.string.untitled) : mPost.getTitle();
  String uploadingPostTitle=String.format(getString(R.string.posting_post),postTitle);
  String uploadingPostMessage=String.format(getString(R.string.sending_content),mPost.isPage() ? getString(R.string.page).toLowerCase() : getString(R.string.post).toLowerCase());
  mPostUploadNotifier=new PostUploadNotifier(mPost,uploadingPostTitle,uploadingPostMessage);
  mBlog=WordPress.wpDB.instantiateBlogByLocalId(mPost.getLocalTableBlogId());
  if (mBlog == null) {
    mErrorMessage=mContext.getString(R.string.blog_not_found);
    return false;
  }
  mClient=XMLRPCFactory.instantiate(mBlog.getUri(),mBlog.getHttpuser(),mBlog.getHttppassword());
  if (TextUtils.isEmpty(mPost.getPostStatus())) {
    mPost.setPostStatus(PostStatus.toString(PostStatus.PUBLISHED));
  }
  String descriptionContent=processPostMedia(mPost.getDescription());
  String moreContent=""String_Node_Str"";
  if (!TextUtils.isEmpty(mPost.getMoreText())) {
    moreContent=processPostMedia(mPost.getMoreText());
  }
  if (mIsMediaError) {
    return false;
  }
  JSONArray categoriesJsonArray=mPost.getJSONCategories();
  String[] postCategories=null;
  if (categoriesJsonArray != null) {
    if (categoriesJsonArray.length() > 0) {
      mHasCategory=true;
    }
    postCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        postCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        AppLog.e(T.POSTS,e);
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!mPost.isPage()) {
    if (!TextUtils.isEmpty(mPost.getPostFormat())) {
      contentStruct.put(""String_Node_Str"",mPost.getPostFormat());
    }
  }
  contentStruct.put(""String_Node_Str"",(mPost.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",mPost.getTitle());
  long pubDate=mPost.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!TextUtils.isEmpty(moreContent)) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    mPost.setMoreText(""String_Node_Str"");
  }
  if (mPost.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!mPost.isPage()) {
    contentStruct.put(""String_Node_Str"",mPost.getKeywords());
    if (postCategories != null && postCategories.length > 0) {
      contentStruct.put(""String_Node_Str"",postCategories);
    }
  }
  contentStruct.put(""String_Node_Str"",mPost.getPostExcerpt());
  contentStruct.put((mPost.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",mPost.getPostStatus());
  if (mPost.supportsLocation()) {
    JSONObject remoteGeoLatitude=mPost.getCustomField(""String_Node_Str"");
    JSONObject remoteGeoLongitude=mPost.getCustomField(""String_Node_Str"");
    JSONObject remoteGeoPublic=mPost.getCustomField(""String_Node_Str"");
    Map<Object,Object> hLatitude=new HashMap<Object,Object>();
    Map<Object,Object> hLongitude=new HashMap<Object,Object>();
    Map<Object,Object> hPublic=new HashMap<Object,Object>();
    try {
      if (remoteGeoLatitude != null) {
        hLatitude.put(""String_Node_Str"",remoteGeoLatitude.getInt(""String_Node_Str""));
      }
      if (remoteGeoLongitude != null) {
        hLongitude.put(""String_Node_Str"",remoteGeoLongitude.getInt(""String_Node_Str""));
      }
      if (remoteGeoPublic != null) {
        hPublic.put(""String_Node_Str"",remoteGeoPublic.getInt(""String_Node_Str""));
      }
      if (mPost.hasLocation()) {
        PostLocation location=mPost.getLocation();
        hLatitude.put(""String_Node_Str"",""String_Node_Str"");
        hLongitude.put(""String_Node_Str"",""String_Node_Str"");
        hPublic.put(""String_Node_Str"",""String_Node_Str"");
        hLatitude.put(""String_Node_Str"",location.getLatitude());
        hLongitude.put(""String_Node_Str"",location.getLongitude());
        hPublic.put(""String_Node_Str"",1);
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.EDITOR,e);
    }
    if (!hLatitude.isEmpty() && !hLongitude.isEmpty() && !hPublic.isEmpty()) {
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (mUseLegacyMode) {
    if (featuredImageID != -1) {
      contentStruct.put(""String_Node_Str"",featuredImageID);
    }
  }
 else   if (mPost.featuredImageHasChanged()) {
    if (mPost.getFeaturedImageId() < 1 && !mPost.isLocalDraft()) {
      contentStruct.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      contentStruct.put(""String_Node_Str"",mPost.getFeaturedImageId());
    }
  }
  if (!TextUtils.isEmpty(mPost.getQuickPostType())) {
    mClient.addQuickPostHeader(mPost.getQuickPostType());
  }
  contentStruct.put(""String_Node_Str"",mPost.getPassword());
  Object[] params;
  if (mPost.isLocalDraft())   params=new Object[]{mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),contentStruct,false};
 else   params=new Object[]{mPost.getRemotePostId(),mBlog.getUsername(),mBlog.getPassword(),contentStruct,false};
  try {
    EventBus.getDefault().post(new PostUploadStarted(mPost.getLocalTableBlogId()));
    if (mPost.isLocalDraft()) {
      Object object=mClient.call(""String_Node_Str"",params);
      if (object instanceof String) {
        mPost.setRemotePostId((String)object);
      }
    }
 else {
      mClient.call(""String_Node_Str"",params);
    }
    mIsFirstPublishing=mPost.hasChangedFromDraftToPublished() || (mPost.isLocalDraft() && mPost.getStatusEnum() == PostStatus.PUBLISHED);
    mPost.setLocalDraft(false);
    mPost.setLocalChange(false);
    WordPress.wpDB.updatePost(mPost);
    if (mIsFirstPublishing) {
      trackUploadAnalytics();
    }
    ApiHelper.updateSinglePost(mBlog.getLocalTableBlogId(),mPost.getRemotePostId(),mPost.isPage());
    return true;
  }
 catch (  final XMLRPCException e) {
    setUploadPostErrorMessage(e);
  }
catch (  IOException e) {
    setUploadPostErrorMessage(e);
  }
catch (  XmlPullParserException e) {
    setUploadPostErrorMessage(e);
  }
  return false;
}","@Override protected Boolean doInBackground(Post... posts){
  mPost=posts[0];
  String postTitle=TextUtils.isEmpty(mPost.getTitle()) ? getString(R.string.untitled) : mPost.getTitle();
  String uploadingPostTitle=String.format(getString(R.string.posting_post),postTitle);
  String uploadingPostMessage=String.format(getString(R.string.sending_content),mPost.isPage() ? getString(R.string.page).toLowerCase() : getString(R.string.post).toLowerCase());
  mPostUploadNotifier=new PostUploadNotifier(mPost,uploadingPostTitle,uploadingPostMessage);
  mBlog=WordPress.wpDB.instantiateBlogByLocalId(mPost.getLocalTableBlogId());
  if (mBlog == null) {
    mErrorMessage=mContext.getString(R.string.blog_not_found);
    return false;
  }
  mClient=XMLRPCFactory.instantiate(mBlog.getUri(),mBlog.getHttpuser(),mBlog.getHttppassword());
  if (TextUtils.isEmpty(mPost.getPostStatus())) {
    mPost.setPostStatus(PostStatus.toString(PostStatus.PUBLISHED));
  }
  String descriptionContent=mPost.getDescription();
  if (descriptionContent.length() > 0 && descriptionContent.charAt(0) == '\u200B') {
    descriptionContent=descriptionContent.substring(1,descriptionContent.length());
  }
  descriptionContent=processPostMedia(descriptionContent);
  String moreContent=""String_Node_Str"";
  if (!TextUtils.isEmpty(mPost.getMoreText())) {
    moreContent=processPostMedia(mPost.getMoreText());
  }
  if (mIsMediaError) {
    return false;
  }
  JSONArray categoriesJsonArray=mPost.getJSONCategories();
  String[] postCategories=null;
  if (categoriesJsonArray != null) {
    if (categoriesJsonArray.length() > 0) {
      mHasCategory=true;
    }
    postCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        postCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        AppLog.e(T.POSTS,e);
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!mPost.isPage()) {
    if (!TextUtils.isEmpty(mPost.getPostFormat())) {
      contentStruct.put(""String_Node_Str"",mPost.getPostFormat());
    }
  }
  contentStruct.put(""String_Node_Str"",(mPost.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",mPost.getTitle());
  long pubDate=mPost.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!TextUtils.isEmpty(moreContent)) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    mPost.setMoreText(""String_Node_Str"");
  }
  if (mPost.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!mPost.isPage()) {
    contentStruct.put(""String_Node_Str"",mPost.getKeywords());
    if (postCategories != null && postCategories.length > 0) {
      contentStruct.put(""String_Node_Str"",postCategories);
    }
  }
  contentStruct.put(""String_Node_Str"",mPost.getPostExcerpt());
  contentStruct.put((mPost.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",mPost.getPostStatus());
  if (mPost.supportsLocation()) {
    JSONObject remoteGeoLatitude=mPost.getCustomField(""String_Node_Str"");
    JSONObject remoteGeoLongitude=mPost.getCustomField(""String_Node_Str"");
    JSONObject remoteGeoPublic=mPost.getCustomField(""String_Node_Str"");
    Map<Object,Object> hLatitude=new HashMap<Object,Object>();
    Map<Object,Object> hLongitude=new HashMap<Object,Object>();
    Map<Object,Object> hPublic=new HashMap<Object,Object>();
    try {
      if (remoteGeoLatitude != null) {
        hLatitude.put(""String_Node_Str"",remoteGeoLatitude.getInt(""String_Node_Str""));
      }
      if (remoteGeoLongitude != null) {
        hLongitude.put(""String_Node_Str"",remoteGeoLongitude.getInt(""String_Node_Str""));
      }
      if (remoteGeoPublic != null) {
        hPublic.put(""String_Node_Str"",remoteGeoPublic.getInt(""String_Node_Str""));
      }
      if (mPost.hasLocation()) {
        PostLocation location=mPost.getLocation();
        hLatitude.put(""String_Node_Str"",""String_Node_Str"");
        hLongitude.put(""String_Node_Str"",""String_Node_Str"");
        hPublic.put(""String_Node_Str"",""String_Node_Str"");
        hLatitude.put(""String_Node_Str"",location.getLatitude());
        hLongitude.put(""String_Node_Str"",location.getLongitude());
        hPublic.put(""String_Node_Str"",1);
      }
    }
 catch (    JSONException e) {
      AppLog.e(T.EDITOR,e);
    }
    if (!hLatitude.isEmpty() && !hLongitude.isEmpty() && !hPublic.isEmpty()) {
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (mUseLegacyMode) {
    if (featuredImageID != -1) {
      contentStruct.put(""String_Node_Str"",featuredImageID);
    }
  }
 else   if (mPost.featuredImageHasChanged()) {
    if (mPost.getFeaturedImageId() < 1 && !mPost.isLocalDraft()) {
      contentStruct.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      contentStruct.put(""String_Node_Str"",mPost.getFeaturedImageId());
    }
  }
  if (!TextUtils.isEmpty(mPost.getQuickPostType())) {
    mClient.addQuickPostHeader(mPost.getQuickPostType());
  }
  contentStruct.put(""String_Node_Str"",mPost.getPassword());
  Object[] params;
  if (mPost.isLocalDraft())   params=new Object[]{mBlog.getRemoteBlogId(),mBlog.getUsername(),mBlog.getPassword(),contentStruct,false};
 else   params=new Object[]{mPost.getRemotePostId(),mBlog.getUsername(),mBlog.getPassword(),contentStruct,false};
  try {
    EventBus.getDefault().post(new PostUploadStarted(mPost.getLocalTableBlogId()));
    if (mPost.isLocalDraft()) {
      Object object=mClient.call(""String_Node_Str"",params);
      if (object instanceof String) {
        mPost.setRemotePostId((String)object);
      }
    }
 else {
      mClient.call(""String_Node_Str"",params);
    }
    mIsFirstPublishing=mPost.hasChangedFromDraftToPublished() || (mPost.isLocalDraft() && mPost.getStatusEnum() == PostStatus.PUBLISHED);
    mPost.setLocalDraft(false);
    mPost.setLocalChange(false);
    WordPress.wpDB.updatePost(mPost);
    if (mIsFirstPublishing) {
      trackUploadAnalytics();
    }
    ApiHelper.updateSinglePost(mBlog.getLocalTableBlogId(),mPost.getRemotePostId(),mPost.isPage());
    return true;
  }
 catch (  final XMLRPCException e) {
    setUploadPostErrorMessage(e);
  }
catch (  IOException e) {
    setUploadPostErrorMessage(e);
  }
catch (  XmlPullParserException e) {
    setUploadPostErrorMessage(e);
  }
  return false;
}",0.9810961313012896
13946,"private void startMediaUploadService(ArrayList<MediaModel> mediaToUpload){
  if (mUploadService != null) {
    if (mediaToUpload != null && !mediaToUpload.isEmpty()) {
      for (      MediaModel media : mediaToUpload) {
        mUploadService.addMediaToQueue(media);
      }
    }
  }
 else   if (NetworkUtils.isNetworkAvailable(this)) {
    Intent intent=new Intent(this,MediaUploadService.class);
    intent.putExtra(MediaUploadService.SITE_KEY,mSite);
    if (mediaToUpload != null) {
      intent.putExtra(MediaUploadService.MEDIA_LIST_KEY,mediaToUpload);
      bindService(intent,mUploadConnection,Context.BIND_AUTO_CREATE | Context.BIND_ABOVE_CLIENT);
    }
    startService(intent);
  }
}","private void startMediaUploadService(ArrayList<MediaModel> mediaToUpload){
  if (mUploadService != null) {
    if (mediaToUpload != null && !mediaToUpload.isEmpty()) {
      for (      MediaModel media : mediaToUpload) {
        mUploadService.addMediaToQueue(media);
      }
    }
  }
 else   if (NetworkUtils.isNetworkAvailable(this)) {
    Intent intent=new Intent(this,MediaUploadService.class);
    intent.putExtra(MediaUploadService.SITE_KEY,mSite);
    if (mediaToUpload != null) {
      intent.putExtra(MediaUploadService.MEDIA_LIST_KEY,mediaToUpload.toArray());
      bindService(intent,mUploadConnection,Context.BIND_AUTO_CREATE | Context.BIND_ABOVE_CLIENT);
    }
    startService(intent);
  }
}",0.992867332382311
13947,"private void queueFileForUpload(Uri uri,String mimetype){
  String path=getRealPathFromURI(uri);
  if (path == null || path.equals(""String_Node_Str"")) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  File file=new File(path);
  if (!file.exists()) {
    return;
  }
  MediaModel currentUpload=new MediaModel();
  String filename=org.wordpress.android.fluxc.utils.MediaUtils.getFileName(path);
  currentUpload.setFileName(filename);
  currentUpload.setFilePath(path);
  if (mimetype == null) {
    mimetype=getContentResolver().getType(uri);
    String fileExtension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
    if (mimetype == null) {
      mimetype=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
    }
    if (mimetype == null) {
      mimetype=""String_Node_Str"";
    }
  }
  currentUpload.setMimeType(mimetype);
  addMediaToUploadService(currentUpload);
  MediaModel media=new MediaModel();
  String extension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
  String mimeType=org.wordpress.android.fluxc.utils.MediaUtils.getMimeTypeForExtension(extension);
  media.setFilePath(path);
  media.setSiteId(mSite.getSiteId());
  media.setFileExtension(extension);
  media.setMimeType(mimeType);
  media.setUploadState(MediaUploadState.QUEUED.toString());
  addMediaToUploadService(media);
}","private void queueFileForUpload(Uri uri,String mimeType){
  String path=getRealPathFromURI(uri);
  if (path == null || path.equals(""String_Node_Str"")) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  File file=new File(path);
  if (!file.exists()) {
    return;
  }
  MediaModel media=new MediaModel();
  String filename=org.wordpress.android.fluxc.utils.MediaUtils.getFileName(path);
  String fileExtension=org.wordpress.android.fluxc.utils.MediaUtils.getExtension(path);
  if (mimeType == null) {
    mimeType=getContentResolver().getType(uri);
    if (mimeType == null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
    }
    if (mimeType == null) {
      mimeType=""String_Node_Str"";
    }
  }
  if (fileExtension == null) {
    fileExtension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
    filename+=""String_Node_Str"" + fileExtension;
  }
  media.setFileName(filename);
  media.setFilePath(path);
  media.setSiteId(mSite.getSiteId());
  media.setFileExtension(fileExtension);
  media.setMimeType(mimeType);
  media.setUploadState(MediaUploadState.QUEUED.toString());
  addMediaToUploadService(media);
}",0.4500963391136801
13948,"private static List<SiteModel> getSelfHostedSitesFromDeprecatedDB(Context context){
  List<SiteModel> siteList=new ArrayList<>();
  try {
    SQLiteDatabase db=context.getApplicationContext().openOrCreateDatabase(DEPRECATED_DATABASE_NAME,0,null);
    String[] fields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String byString=""String_Node_Str"";
    Cursor c=db.query(DEPRECATED_BLOGS_TABLE,fields,byString,null,null,null,null);
    int numRows=c.getCount();
    c.moveToFirst();
    for (int i=0; i < numRows; i++) {
      SiteModel siteModel=new SiteModel();
      siteModel.setUsername(c.getString(0));
      siteModel.setPassword(c.getString(1));
      siteModel.setXmlRpcUrl(c.getString(2));
      siteList.add(siteModel);
      c.moveToNext();
    }
    c.close();
  }
 catch (  SQLException e) {
  }
  return siteList;
}","private static List<SiteModel> getSelfHostedSitesFromDeprecatedDB(Context context){
  List<SiteModel> siteList=new ArrayList<>();
  try {
    SQLiteDatabase db=context.getApplicationContext().openOrCreateDatabase(DEPRECATED_DATABASE_NAME,0,null);
    String[] fields=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String encryptedEmptyPassword=""String_Node_Str"";
    String byString=String.format(""String_Node_Str"",encryptedEmptyPassword);
    Cursor c=db.query(DEPRECATED_BLOGS_TABLE,fields,byString,null,null,null,null);
    int numRows=c.getCount();
    c.moveToFirst();
    for (int i=0; i < numRows; i++) {
      SiteModel siteModel=new SiteModel();
      siteModel.setUsername(c.getString(0));
      siteModel.setPassword(c.getString(1));
      siteModel.setXmlRpcUrl(c.getString(2));
      siteList.add(siteModel);
      c.moveToNext();
    }
    c.close();
  }
 catch (  SQLException e) {
  }
  return siteList;
}",0.949528563505269
13949,"@Override public void onStart(){
  super.onStart();
  mDispatcher.register(this);
  EventBus.getDefault().register(this);
}","@Override public void onStart(){
  super.onStart();
  EventBus.getDefault().register(this);
}",0.8611111111111112
13950,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_GALLERY.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)|| (extras != null && extras.getInt(""String_Node_Str"",-1) > -1)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        SiteModel site=mSiteStore.getSiteByLocalId(localSiteId);
        if (site == null) {
          showErrorAndFinish(R.string.blog_not_found);
          return;
        }
        if (!site.isVisible()) {
          showErrorAndFinish(R.string.error_blog_hidden);
          return;
        }
        mSite=site;
      }
      mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      mIsNewPost=true;
      mNewPostLatch=new CountDownLatch(1);
      List<Long> categories=new ArrayList<>();
      String postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      InstantiatePostPayload payload=new InstantiatePostPayload(mSite,mIsPage,categories,postFormat);
      mDispatcher.dispatch(PostActionBuilder.newInstantiatePostAction(payload));
      try {
        mNewPostLatch.await(1000,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (mPost == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 else     if (extras != null) {
      mPost=(PostModel)extras.getSerializable(EXTRA_POST);
      if (mPost != null) {
        mOriginalPost=mPost.clone();
        mIsPage=mPost.isPage();
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(WordPress.imageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost();
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((WordPress)getApplication()).component().inject(this);
  mDispatcher.register(this);
  setContentView(R.layout.new_edit_post_activity);
  if (savedInstanceState == null) {
    mSite=(SiteModel)getIntent().getSerializableExtra(WordPress.SITE);
  }
 else {
    mSite=(SiteModel)savedInstanceState.getSerializable(WordPress.SITE);
  }
  PreferenceManager.setDefaultValues(this,R.xml.account_settings,false);
  mShowNewEditor=AppPrefs.isVisualEditorEnabled();
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  FragmentManager fragmentManager=getFragmentManager();
  Bundle extras=getIntent().getExtras();
  String action=getIntent().getAction();
  if (savedInstanceState == null) {
    if (!getIntent().hasExtra(EXTRA_POST) || Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)|| NEW_MEDIA_GALLERY.equals(action)|| NEW_MEDIA_POST.equals(action)|| getIntent().hasExtra(EXTRA_IS_QUICKPRESS)|| (extras != null && extras.getInt(""String_Node_Str"",-1) > -1)) {
      if (getIntent().hasExtra(EXTRA_QUICKPRESS_BLOG_ID)) {
        int localSiteId=getIntent().getIntExtra(EXTRA_QUICKPRESS_BLOG_ID,-1);
        SiteModel site=mSiteStore.getSiteByLocalId(localSiteId);
        if (site == null) {
          showErrorAndFinish(R.string.blog_not_found);
          return;
        }
        if (!site.isVisible()) {
          showErrorAndFinish(R.string.error_blog_hidden);
          return;
        }
        mSite=site;
      }
      mIsPage=extras.getBoolean(EXTRA_IS_PAGE);
      mIsNewPost=true;
      mNewPostLatch=new CountDownLatch(1);
      List<Long> categories=new ArrayList<>();
      String postFormat=SiteSettingsInterface.getDefaultFormat(WordPress.getContext());
      InstantiatePostPayload payload=new InstantiatePostPayload(mSite,mIsPage,categories,postFormat);
      mDispatcher.dispatch(PostActionBuilder.newInstantiatePostAction(payload));
      try {
        mNewPostLatch.await(1000,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (mPost == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
 else     if (extras != null) {
      mPost=(PostModel)extras.getSerializable(EXTRA_POST);
      if (mPost != null) {
        mOriginalPost=mPost.clone();
        mIsPage=mPost.isPage();
      }
    }
 else {
      showErrorAndFinish(R.string.post_not_found);
      return;
    }
  }
 else {
    mDroppedMediaUris=savedInstanceState.getParcelable(STATE_KEY_DROPPED_MEDIA_URIS);
    if (savedInstanceState.containsKey(STATE_KEY_ORIGINAL_POST)) {
      try {
        mPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_CURRENT_POST);
        mOriginalPost=(PostModel)savedInstanceState.getSerializable(STATE_KEY_ORIGINAL_POST);
      }
 catch (      ClassCastException e) {
        mPost=null;
      }
    }
    mEditorFragment=(EditorFragmentAbstract)fragmentManager.getFragment(savedInstanceState,STATE_KEY_EDITOR_FRAGMENT);
    if (mEditorFragment instanceof EditorMediaUploadListener) {
      mEditorMediaUploadListener=(EditorMediaUploadListener)mEditorFragment;
    }
  }
  if (mSite == null) {
    ToastUtils.showToast(this,R.string.blog_not_found,ToastUtils.Duration.SHORT);
    finish();
    return;
  }
  if (mHasSetPostContent=mEditorFragment != null) {
    mEditorFragment.setImageLoader(WordPress.imageLoader);
  }
  if (mPost == null) {
    showErrorAndFinish(R.string.post_not_found);
    return;
  }
  if (mIsNewPost) {
    trackEditorCreatedPost(action,getIntent());
  }
  setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
  mSectionsPagerAdapter=new SectionsPagerAdapter(fragmentManager);
  mViewPager=(WPViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOffscreenPageLimit(2);
  mViewPager.setPagingEnabled(false);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      invalidateOptionsMenu();
      if (position == PAGE_CONTENT) {
        setTitle(StringUtils.unescapeHTML(SiteUtils.getSiteNameOrHomeURL(mSite)));
      }
 else       if (position == PAGE_SETTINGS) {
        setTitle(mPost.isPage() ? R.string.page_settings : R.string.post_settings);
      }
 else       if (position == PAGE_PREVIEW) {
        setTitle(mPost.isPage() ? R.string.preview_page : R.string.preview_post);
        savePostAsync(new AfterSavePostListener(){
          @Override public void onPostSave(){
            if (mEditPostPreviewFragment != null) {
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  if (mEditPostPreviewFragment != null) {
                    mEditPostPreviewFragment.loadPost();
                  }
                }
              }
);
            }
          }
        }
);
      }
    }
  }
);
  ActivityId.trackLastActivity(ActivityId.POST_EDITOR);
}",0.9970588235294118
13951,"/** 
 * Checks if two posts have differing data
 */
public static boolean postHasEdits(PostModel oldPost,PostModel newPost){
  if (oldPost == null) {
    return newPost != null;
  }
  return newPost == null || !(StringUtils.equals(oldPost.getTitle(),newPost.getTitle()) && StringUtils.equals(oldPost.getContent(),newPost.getContent()) && StringUtils.equals(oldPost.getExcerpt(),newPost.getExcerpt())&& StringUtils.equals(oldPost.getStatus(),newPost.getStatus())&& StringUtils.equals(oldPost.getPassword(),newPost.getPassword())&& StringUtils.equals(oldPost.getPostFormat(),newPost.getPostFormat())&& StringUtils.equals(oldPost.getDateCreated(),newPost.getDateCreated())&& oldPost.getTagIdList().containsAll(newPost.getTagIdList())&& newPost.getTagIdList().containsAll(oldPost.getTagIdList())&& oldPost.getCategoryIdList().containsAll(newPost.getCategoryIdList())&& newPost.getCategoryIdList().containsAll(oldPost.getCategoryIdList())&& PostLocation.equals(oldPost.getLocation(),newPost.getLocation()));
}","/** 
 * Checks if two posts have differing data
 */
public static boolean postHasEdits(PostModel oldPost,PostModel newPost){
  if (oldPost == null) {
    return newPost != null;
  }
  return newPost == null || !(StringUtils.equals(oldPost.getTitle(),newPost.getTitle()) && StringUtils.equals(oldPost.getContent(),newPost.getContent()) && StringUtils.equals(oldPost.getExcerpt(),newPost.getExcerpt())&& StringUtils.equals(oldPost.getStatus(),newPost.getStatus())&& StringUtils.equals(oldPost.getPassword(),newPost.getPassword())&& StringUtils.equals(oldPost.getPostFormat(),newPost.getPostFormat())&& StringUtils.equals(oldPost.getDateCreated(),newPost.getDateCreated())&& oldPost.getTagNameList().containsAll(newPost.getTagNameList())&& newPost.getTagNameList().containsAll(oldPost.getTagNameList())&& oldPost.getCategoryIdList().containsAll(newPost.getCategoryIdList())&& newPost.getCategoryIdList().containsAll(oldPost.getCategoryIdList())&& PostLocation.equals(oldPost.getLocation(),newPost.getLocation()));
}",0.988095238095238
13952,"private void trackUploadAnalytics(){
  Map<String,Object> properties=new HashMap<>();
  properties.put(""String_Node_Str"",AnalyticsUtils.getWordCount(mPost.getContent()));
  if (hasGallery()) {
    properties.put(""String_Node_Str"",true);
  }
  if (mHasImage) {
    properties.put(""String_Node_Str"",true);
  }
  if (mHasVideo) {
    properties.put(""String_Node_Str"",true);
  }
  if (mHasCategory) {
    properties.put(""String_Node_Str"",true);
  }
  if (!mPost.getTagIdList().isEmpty()) {
    properties.put(""String_Node_Str"",true);
  }
  properties.put(""String_Node_Str"",AppPrefs.isVisualEditorEnabled());
  AnalyticsUtils.trackWithSiteDetails(Stat.EDITOR_PUBLISHED_POST,mSite,properties);
}","private void trackUploadAnalytics(){
  Map<String,Object> properties=new HashMap<>();
  properties.put(""String_Node_Str"",AnalyticsUtils.getWordCount(mPost.getContent()));
  if (hasGallery()) {
    properties.put(""String_Node_Str"",true);
  }
  if (mHasImage) {
    properties.put(""String_Node_Str"",true);
  }
  if (mHasVideo) {
    properties.put(""String_Node_Str"",true);
  }
  if (mHasCategory) {
    properties.put(""String_Node_Str"",true);
  }
  if (!mPost.getTagNameList().isEmpty()) {
    properties.put(""String_Node_Str"",true);
  }
  properties.put(""String_Node_Str"",AppPrefs.isVisualEditorEnabled());
  AnalyticsUtils.trackWithSiteDetails(Stat.EDITOR_PUBLISHED_POST,mSite,properties);
}",0.9956521739130436
13953,"@Override public void onCreate(){
  super.onCreate();
  long startDate=SystemClock.elapsedRealtime();
  mContext=this;
  ProfilingUtils.start(""String_Node_Str"");
  AppLog.enableRecording(true);
  AppLog.i(T.UTILS,""String_Node_Str"");
  if (!PackageUtils.isDebugBuild()) {
    Fabric.with(this,new Crashlytics());
  }
  versionName=PackageUtils.getVersionName(this);
  initWpDb();
  enableHttpResponseCache(mContext);
  EventBus.TAG=""String_Node_Str"";
  EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false).throwSubscriberException(true).installDefaultEventBus();
  EventBus.getDefault().register(this);
  RestClientUtils.setUserAgent(getUserAgent());
  setupVolleyQueue();
  if (!AppLockManager.getInstance().isAppLockFeatureEnabled()) {
    AppLockManager.getInstance().enableDefaultAppLockIfAvailable(this);
  }
  if (AppLockManager.getInstance().isAppLockFeatureEnabled()) {
    AppLockManager.getInstance().getAppLock().setExemptActivities(new String[]{""String_Node_Str""});
  }
  HelpshiftHelper.init(this);
  ApplicationLifecycleMonitor applicationLifecycleMonitor=new ApplicationLifecycleMonitor();
  registerComponentCallbacks(applicationLifecycleMonitor);
  registerActivityLifecycleCallbacks(applicationLifecycleMonitor);
  initAnalytics(SystemClock.elapsedRealtime() - startDate);
  WPActivityUtils.applyLocale(getContext());
}","@Override public void onCreate(){
  super.onCreate();
  long startDate=SystemClock.elapsedRealtime();
  mContext=this;
  ProfilingUtils.start(""String_Node_Str"");
  AppLog.enableRecording(true);
  AppLog.i(T.UTILS,""String_Node_Str"");
  if (!PackageUtils.isDebugBuild()) {
    Fabric.with(this,new Crashlytics());
  }
  versionName=PackageUtils.getVersionName(this);
  initWpDb();
  enableHttpResponseCache(mContext);
  EventBus.TAG=""String_Node_Str"";
  EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false).throwSubscriberException(true).installDefaultEventBus();
  EventBus.getDefault().register(this);
  RestClientUtils.setUserAgent(getUserAgent());
  setupVolleyQueue();
  if (!AppLockManager.getInstance().isAppLockFeatureEnabled()) {
    AppLockManager.getInstance().enableDefaultAppLockIfAvailable(this);
  }
  if (AppLockManager.getInstance().isAppLockFeatureEnabled()) {
    AppLockManager.getInstance().getAppLock().setExemptActivities(new String[]{""String_Node_Str""});
  }
  HelpshiftHelper.init(this);
  ApplicationLifecycleMonitor applicationLifecycleMonitor=new ApplicationLifecycleMonitor();
  registerComponentCallbacks(applicationLifecycleMonitor);
  registerActivityLifecycleCallbacks(applicationLifecycleMonitor);
  initAnalytics(SystemClock.elapsedRealtime() - startDate);
  WPActivityUtils.applyLocale(getContext());
  AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
}",0.977395048439182
13954,"private synchronized void updatePostObject(boolean isAutosave){
  if (mPost == null) {
    AppLog.e(AppLog.T.POSTS,""String_Node_Str"");
    return;
  }
  if (mEditorFragment != null) {
    if (mShowNewEditor) {
      updatePostContentNewEditor(isAutosave,(String)mEditorFragment.getTitle(),(String)mEditorFragment.getContent());
    }
 else {
      updatePostContent(isAutosave);
    }
  }
  if (mEditPostSettingsFragment != null) {
    mEditPostSettingsFragment.updatePostSettings();
  }
}","private synchronized void updatePostObject(boolean isAutosave) throws IllegalEditorStateException {
  if (mPost == null) {
    AppLog.e(AppLog.T.POSTS,""String_Node_Str"");
    return;
  }
  if (mEditorFragment != null) {
    if (mShowNewEditor) {
      updatePostContentNewEditor(isAutosave,(String)mEditorFragment.getTitle(),(String)mEditorFragment.getContent());
    }
 else {
      updatePostContent(isAutosave);
    }
  }
  if (mEditPostSettingsFragment != null) {
    mEditPostSettingsFragment.updatePostSettings();
  }
}",0.9644970414201184
13955,"private void savePostAsync(final AfterSavePostListener listener){
  new Thread(new Runnable(){
    @Override public void run(){
      updatePostObject(false);
      savePostToDb();
      if (listener != null) {
        listener.onPostSave();
      }
    }
  }
).start();
}","private void savePostAsync(final AfterSavePostListener listener){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        updatePostObject(false);
      }
 catch (      IllegalEditorStateException e) {
        AppLog.e(T.EDITOR,""String_Node_Str"");
        return;
      }
      savePostToDb();
      if (listener != null) {
        listener.onPostSave();
      }
    }
  }
).start();
}",0.7964860907759883
13956,"private boolean publishPost(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    ToastUtils.showToast(this,R.string.error_publish_no_network,Duration.SHORT);
    return false;
  }
  if (mEditorFragment.hasFailedMediaUploads()) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.editor_toast_failed_uploads).setPositiveButton(R.string.editor_remove_failed_uploads,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mEditorFragment.removeAllFailedMediaUploads();
      }
    }
).setNegativeButton(android.R.string.cancel,null);
    builder.create().show();
    return true;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      updatePostObject(false);
      savePostToDb();
      if (!mPost.isPublishable()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            ToastUtils.showToast(EditPostActivity.this,R.string.error_publish_empty_post,Duration.SHORT);
          }
        }
);
        return;
      }
      PostUtils.trackSavePostAnalytics(mPost);
      PostUploadService.addPostToUpload(mPost);
      PostUploadService.setLegacyMode(!mShowNewEditor);
      startService(new Intent(EditPostActivity.this,PostUploadService.class));
      setResult(RESULT_OK);
      finish();
    }
  }
).start();
  return true;
}","private boolean publishPost(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    ToastUtils.showToast(this,R.string.error_publish_no_network,Duration.SHORT);
    return false;
  }
  if (mEditorFragment.hasFailedMediaUploads()) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.editor_toast_failed_uploads).setPositiveButton(R.string.editor_remove_failed_uploads,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mEditorFragment.removeAllFailedMediaUploads();
      }
    }
).setNegativeButton(android.R.string.cancel,null);
    builder.create().show();
    return true;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        updatePostObject(false);
      }
 catch (      IllegalEditorStateException e) {
        AppLog.e(T.EDITOR,""String_Node_Str"");
        return;
      }
      savePostToDb();
      if (!mPost.isPublishable()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            ToastUtils.showToast(EditPostActivity.this,R.string.error_publish_empty_post,Duration.SHORT);
          }
        }
);
        return;
      }
      PostUtils.trackSavePostAnalytics(mPost);
      PostUploadService.addPostToUpload(mPost);
      PostUploadService.setLegacyMode(!mShowNewEditor);
      startService(new Intent(EditPostActivity.this,PostUploadService.class));
      setResult(RESULT_OK);
      finish();
    }
  }
).start();
  return true;
}",0.9521843825249398
13957,"/** 
 * Updates post object with content of this fragment
 */
public void updatePostContent(boolean isAutoSave){
  Post post=getPost();
  if (post == null) {
    return;
  }
  String title=StringUtils.notNullStr((String)mEditorFragment.getTitle());
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    try {
      postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
    }
 catch (    IndexOutOfBoundsException e) {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  String content;
  if (post.isLocalDraft()) {
    CharacterStyle[] characterStyles=postContent.getSpans(0,postContent.length(),CharacterStyle.class);
    for (    CharacterStyle characterStyle : characterStyles) {
      if (characterStyle instanceof SuggestionSpan) {
        postContent.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContent);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (!isAutoSave) {
      MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(0,postContent.length(),MediaGalleryImageSpan.class);
      for (      MediaGalleryImageSpan gallerySpan : gallerySpans) {
        int start=postContent.getSpanStart(gallerySpan);
        postContent.removeSpan(gallerySpan);
        postContent.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
      }
    }
    WPImageSpan[] imageSpans=postContent.getSpans(0,postContent.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null)         continue;
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(wpIS);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
          WordPress.wpDB.saveMediaFile(mediaFile);
        }
        int tagStart=postContent.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContent.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContent.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContent.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContent.toString();
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMoreText(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMoreText(""String_Node_Str"");
  }
  if (!post.isLocalDraft()) {
    post.setLocalChange(true);
  }
}","/** 
 * Updates post object with content of this fragment
 */
public void updatePostContent(boolean isAutoSave) throws IllegalEditorStateException {
  Post post=getPost();
  if (post == null) {
    return;
  }
  String title=StringUtils.notNullStr((String)mEditorFragment.getTitle());
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    try {
      postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
    }
 catch (    IndexOutOfBoundsException e) {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  String content;
  if (post.isLocalDraft()) {
    CharacterStyle[] characterStyles=postContent.getSpans(0,postContent.length(),CharacterStyle.class);
    for (    CharacterStyle characterStyle : characterStyles) {
      if (characterStyle instanceof SuggestionSpan) {
        postContent.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContent);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (!isAutoSave) {
      MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(0,postContent.length(),MediaGalleryImageSpan.class);
      for (      MediaGalleryImageSpan gallerySpan : gallerySpans) {
        int start=postContent.getSpanStart(gallerySpan);
        postContent.removeSpan(gallerySpan);
        postContent.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
      }
    }
    WPImageSpan[] imageSpans=postContent.getSpans(0,postContent.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null)         continue;
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(wpIS);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
          WordPress.wpDB.saveMediaFile(mediaFile);
        }
        int tagStart=postContent.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContent.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContent.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContent.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContent.toString();
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMoreText(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMoreText(""String_Node_Str"");
  }
  if (!post.isLocalDraft()) {
    post.setLocalChange(true);
  }
}",0.994815668202765
13958,"private void handleGalleryImageUploadedLegacyEditor(Long galleryId,String localId,String remoteId){
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  int selectionStart=0;
  int selectionEnd=postContent.length();
  MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(selectionStart,selectionEnd,MediaGalleryImageSpan.class);
  if (gallerySpans.length != 0) {
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      MediaGallery gallery=gallerySpan.getMediaGallery();
      if (gallery.getUniqueId() == galleryId) {
        ArrayList<String> galleryIds=gallery.getIds();
        galleryIds.add(remoteId);
        gallery.setIds(galleryIds);
        gallerySpan.setMediaGallery(gallery);
        int spanStart=postContent.getSpanStart(gallerySpan);
        int spanEnd=postContent.getSpanEnd(gallerySpan);
        postContent.setSpan(gallerySpan,spanStart,spanEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
  }
}","private void handleGalleryImageUploadedLegacyEditor(Long galleryId,String localId,String remoteId){
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
  }
 else {
    try {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
 catch (    IllegalEditorStateException e) {
      AppLog.e(T.EDITOR,""String_Node_Str"");
      return;
    }
  }
  int selectionStart=0;
  int selectionEnd=postContent.length();
  MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(selectionStart,selectionEnd,MediaGalleryImageSpan.class);
  if (gallerySpans.length != 0) {
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      MediaGallery gallery=gallerySpan.getMediaGallery();
      if (gallery.getUniqueId() == galleryId) {
        ArrayList<String> galleryIds=gallery.getIds();
        galleryIds.add(remoteId);
        gallery.setIds(galleryIds);
        gallerySpan.setMediaGallery(gallery);
        int spanStart=postContent.getSpanStart(gallerySpan);
        int spanEnd=postContent.getSpanEnd(gallerySpan);
        postContent.setSpan(gallerySpan,spanStart,spanEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
  }
}",0.949138966760112
13959,"/** 
 * Returns the contents of the title field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getTitle(){
  if (!isAdded()) {
    return ""String_Node_Str"";
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mTitle=mSourceViewTitle.getText().toString();
    return StringUtils.notNullStr(mTitle);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetTitleCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetTitleCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mTitle.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","/** 
 * Returns the contents of the title field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getTitle() throws IllegalEditorStateException {
  if (!isAdded()) {
    throw new IllegalEditorStateException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mTitle=mSourceViewTitle.getText().toString();
    return StringUtils.notNullStr(mTitle);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetTitleCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetTitleCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mTitle.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9502762430939228
13960,"/** 
 * Returns the contents of the content field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getContent(){
  if (!isAdded()) {
    return ""String_Node_Str"";
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mContentHtml=mSourceViewContent.getText().toString();
    return StringUtils.notNullStr(mContentHtml);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetContentCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetContentCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mContentHtml);
}","/** 
 * Returns the contents of the content field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getContent() throws IllegalEditorStateException {
  if (!isAdded()) {
    throw new IllegalEditorStateException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mContentHtml=mSourceViewContent.getText().toString();
    return StringUtils.notNullStr(mContentHtml);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetContentCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetContentCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mContentHtml);
}",0.9492567913890312
13961,"private void toggleHtmlMode(final ToggleButton toggleButton){
  if (!isAdded()) {
    return;
  }
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.HTML_BUTTON_TAPPED);
  if (!mUploadingMedia.isEmpty() || isActionInProgress()) {
    toggleButton.setChecked(false);
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
    return;
  }
  clearFormatBarButtons();
  updateFormatBarEnabledState(true);
  if (toggleButton.isChecked()) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        if (!isAdded()) {
          return;
        }
        getTitle();
        getContent();
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            mSourceViewTitle.setText(mTitle);
            SpannableString spannableContent=new SpannableString(mContentHtml);
            HtmlStyleUtils.styleHtmlForDisplay(spannableContent);
            mSourceViewContent.setText(spannableContent);
            mWebView.setVisibility(View.GONE);
            mSourceView.setVisibility(View.VISIBLE);
            mSourceViewContent.requestFocus();
            mSourceViewContent.setSelection(0);
            InputMethodManager imm=((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE));
            imm.showSoftInput(mSourceViewContent,InputMethodManager.SHOW_IMPLICIT);
          }
        }
);
      }
    }
);
    thread.start();
  }
 else {
    mWebView.setVisibility(View.VISIBLE);
    mSourceView.setVisibility(View.GONE);
    mTitle=mSourceViewTitle.getText().toString();
    mContentHtml=mSourceViewContent.getText().toString();
    updateVisualEditorFields();
    mWebView.execJavaScriptFromString(""String_Node_Str"");
    mWebView.execJavaScriptFromString(""String_Node_Str"");
  }
}","private void toggleHtmlMode(final ToggleButton toggleButton){
  if (!isAdded()) {
    return;
  }
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.HTML_BUTTON_TAPPED);
  if (!mUploadingMedia.isEmpty() || isActionInProgress()) {
    toggleButton.setChecked(false);
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
    return;
  }
  clearFormatBarButtons();
  updateFormatBarEnabledState(true);
  if (toggleButton.isChecked()) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        if (!isAdded()) {
          return;
        }
        try {
          getTitle();
          getContent();
        }
 catch (        IllegalEditorStateException e) {
          AppLog.e(T.EDITOR,""String_Node_Str"");
          return;
        }
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            mSourceViewTitle.setText(mTitle);
            SpannableString spannableContent=new SpannableString(mContentHtml);
            HtmlStyleUtils.styleHtmlForDisplay(spannableContent);
            mSourceViewContent.setText(spannableContent);
            mWebView.setVisibility(View.GONE);
            mSourceView.setVisibility(View.VISIBLE);
            mSourceViewContent.requestFocus();
            mSourceViewContent.setSelection(0);
            InputMethodManager imm=((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE));
            imm.showSoftInput(mSourceViewContent,InputMethodManager.SHOW_IMPLICIT);
          }
        }
);
      }
    }
);
    thread.start();
  }
 else {
    mWebView.setVisibility(View.VISIBLE);
    mSourceView.setVisibility(View.GONE);
    mTitle=mSourceViewTitle.getText().toString();
    mContentHtml=mSourceViewContent.getText().toString();
    updateVisualEditorFields();
    mWebView.execJavaScriptFromString(""String_Node_Str"");
    mWebView.execJavaScriptFromString(""String_Node_Str"");
  }
}",0.953457796476466
13962,"@Override public void onSaveInstanceState(Bundle outState){
  outState.putCharSequence(KEY_TITLE,getTitle());
  outState.putCharSequence(KEY_CONTENT,getContent());
}","@Override public void onSaveInstanceState(Bundle outState){
  try {
    outState.putCharSequence(KEY_TITLE,getTitle());
    outState.putCharSequence(KEY_CONTENT,getContent());
  }
 catch (  IllegalEditorStateException e) {
    AppLog.e(T.EDITOR,""String_Node_Str"");
  }
}",0.7586206896551724
13963,public abstract CharSequence getContent();,public abstract CharSequence getContent() throws IllegalEditorStateException ;,0.7
13964,public abstract CharSequence getTitle();,public abstract CharSequence getTitle() throws IllegalEditorStateException ;,0.6896551724137931
13965,"private synchronized void updatePostObject(boolean isAutosave){
  if (mPost == null) {
    AppLog.e(AppLog.T.POSTS,""String_Node_Str"");
    return;
  }
  if (mEditorFragment != null) {
    if (mShowNewEditor) {
      updatePostContentNewEditor(isAutosave,(String)mEditorFragment.getTitle(),(String)mEditorFragment.getContent());
    }
 else {
      updatePostContent(isAutosave);
    }
  }
  if (mEditPostSettingsFragment != null) {
    mEditPostSettingsFragment.updatePostSettings();
  }
}","private synchronized void updatePostObject(boolean isAutosave) throws IllegalEditorStateException {
  if (mPost == null) {
    AppLog.e(AppLog.T.POSTS,""String_Node_Str"");
    return;
  }
  if (mEditorFragment != null) {
    if (mShowNewEditor) {
      updatePostContentNewEditor(isAutosave,(String)mEditorFragment.getTitle(),(String)mEditorFragment.getContent());
    }
 else {
      updatePostContent(isAutosave);
    }
  }
  if (mEditPostSettingsFragment != null) {
    mEditPostSettingsFragment.updatePostSettings();
  }
}",0.9644970414201184
13966,"private void savePostAsync(final AfterSavePostListener listener){
  new Thread(new Runnable(){
    @Override public void run(){
      updatePostObject(false);
      savePostToDb();
      if (listener != null) {
        listener.onPostSave();
      }
    }
  }
).start();
}","private void savePostAsync(final AfterSavePostListener listener){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        updatePostObject(false);
      }
 catch (      IllegalEditorStateException e) {
        AppLog.e(T.EDITOR,""String_Node_Str"");
        return;
      }
      savePostToDb();
      if (listener != null) {
        listener.onPostSave();
      }
    }
  }
).start();
}",0.7964860907759883
13967,"private boolean publishPost(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    ToastUtils.showToast(this,R.string.error_publish_no_network,Duration.SHORT);
    return false;
  }
  if (mEditorFragment.hasFailedMediaUploads()) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.editor_toast_failed_uploads).setPositiveButton(R.string.editor_remove_failed_uploads,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mEditorFragment.removeAllFailedMediaUploads();
      }
    }
).setNegativeButton(android.R.string.cancel,null);
    builder.create().show();
    return true;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      updatePostObject(false);
      savePostToDb();
      if (!mPost.isPublishable()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            ToastUtils.showToast(EditPostActivity.this,R.string.error_publish_empty_post,Duration.SHORT);
          }
        }
);
        return;
      }
      PostUtils.trackSavePostAnalytics(mPost);
      PostUploadService.addPostToUpload(mPost);
      PostUploadService.setLegacyMode(!mShowNewEditor);
      startService(new Intent(EditPostActivity.this,PostUploadService.class));
      setResult(RESULT_OK);
      finish();
    }
  }
).start();
  return true;
}","private boolean publishPost(){
  if (!NetworkUtils.isNetworkAvailable(this)) {
    ToastUtils.showToast(this,R.string.error_publish_no_network,Duration.SHORT);
    return false;
  }
  if (mEditorFragment.hasFailedMediaUploads()) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.editor_toast_failed_uploads).setPositiveButton(R.string.editor_remove_failed_uploads,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        mEditorFragment.removeAllFailedMediaUploads();
      }
    }
).setNegativeButton(android.R.string.cancel,null);
    builder.create().show();
    return true;
  }
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        updatePostObject(false);
      }
 catch (      IllegalEditorStateException e) {
        AppLog.e(T.EDITOR,""String_Node_Str"");
        return;
      }
      savePostToDb();
      if (!mPost.isPublishable()) {
        mHandler.post(new Runnable(){
          @Override public void run(){
            ToastUtils.showToast(EditPostActivity.this,R.string.error_publish_empty_post,Duration.SHORT);
          }
        }
);
        return;
      }
      PostUtils.trackSavePostAnalytics(mPost);
      PostUploadService.addPostToUpload(mPost);
      PostUploadService.setLegacyMode(!mShowNewEditor);
      startService(new Intent(EditPostActivity.this,PostUploadService.class));
      setResult(RESULT_OK);
      finish();
    }
  }
).start();
  return true;
}",0.9521843825249398
13968,"/** 
 * Updates post object with content of this fragment
 */
public void updatePostContent(boolean isAutoSave){
  Post post=getPost();
  if (post == null) {
    return;
  }
  String title=StringUtils.notNullStr((String)mEditorFragment.getTitle());
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    try {
      postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
    }
 catch (    IndexOutOfBoundsException e) {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  String content;
  if (post.isLocalDraft()) {
    CharacterStyle[] characterStyles=postContent.getSpans(0,postContent.length(),CharacterStyle.class);
    for (    CharacterStyle characterStyle : characterStyles) {
      if (characterStyle instanceof SuggestionSpan) {
        postContent.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContent);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (!isAutoSave) {
      MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(0,postContent.length(),MediaGalleryImageSpan.class);
      for (      MediaGalleryImageSpan gallerySpan : gallerySpans) {
        int start=postContent.getSpanStart(gallerySpan);
        postContent.removeSpan(gallerySpan);
        postContent.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
      }
    }
    WPImageSpan[] imageSpans=postContent.getSpans(0,postContent.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null)         continue;
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(wpIS);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
          WordPress.wpDB.saveMediaFile(mediaFile);
        }
        int tagStart=postContent.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContent.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContent.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContent.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContent.toString();
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMoreText(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMoreText(""String_Node_Str"");
  }
  if (!post.isLocalDraft()) {
    post.setLocalChange(true);
  }
}","/** 
 * Updates post object with content of this fragment
 */
public void updatePostContent(boolean isAutoSave) throws IllegalEditorStateException {
  Post post=getPost();
  if (post == null) {
    return;
  }
  String title=StringUtils.notNullStr((String)mEditorFragment.getTitle());
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    try {
      postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
    }
 catch (    IndexOutOfBoundsException e) {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  String content;
  if (post.isLocalDraft()) {
    CharacterStyle[] characterStyles=postContent.getSpans(0,postContent.length(),CharacterStyle.class);
    for (    CharacterStyle characterStyle : characterStyles) {
      if (characterStyle instanceof SuggestionSpan) {
        postContent.removeSpan(characterStyle);
      }
    }
    content=WPHtml.toHtml(postContent);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (!isAutoSave) {
      MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(0,postContent.length(),MediaGalleryImageSpan.class);
      for (      MediaGalleryImageSpan gallerySpan : gallerySpans) {
        int start=postContent.getSpanStart(gallerySpan);
        postContent.removeSpan(gallerySpan);
        postContent.insert(start,WPHtml.getGalleryShortcode(gallerySpan));
      }
    }
    WPImageSpan[] imageSpans=postContent.getSpans(0,postContent.length(),WPImageSpan.class);
    if (imageSpans.length != 0) {
      for (      WPImageSpan wpIS : imageSpans) {
        MediaFile mediaFile=wpIS.getMediaFile();
        if (mediaFile == null)         continue;
        if (mediaFile.getMediaId() != null) {
          updateMediaFileOnServer(wpIS);
        }
 else {
          mediaFile.setFileName(wpIS.getImageSource().toString());
          mediaFile.setFilePath(wpIS.getImageSource().toString());
          WordPress.wpDB.saveMediaFile(mediaFile);
        }
        int tagStart=postContent.getSpanStart(wpIS);
        if (!isAutoSave) {
          postContent.removeSpan(wpIS);
          if (mediaFile.getMediaId() != null && mediaFile.getMediaId().length() > 0) {
            postContent.insert(tagStart,WPHtml.getContent(wpIS));
          }
 else {
            postContent.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
          }
        }
      }
    }
    content=postContent.toString();
  }
  String moreTag=""String_Node_Str"";
  post.setTitle(title);
  if (post.isLocalDraft() && content.contains(moreTag)) {
    post.setDescription(content.substring(0,content.indexOf(moreTag)));
    post.setMoreText(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
  }
 else {
    post.setDescription(content);
    post.setMoreText(""String_Node_Str"");
  }
  if (!post.isLocalDraft()) {
    post.setLocalChange(true);
  }
}",0.994815668202765
13969,"private void handleGalleryImageUploadedLegacyEditor(Long galleryId,String localId,String remoteId){
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
  }
 else {
    postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
  }
  int selectionStart=0;
  int selectionEnd=postContent.length();
  MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(selectionStart,selectionEnd,MediaGalleryImageSpan.class);
  if (gallerySpans.length != 0) {
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      MediaGallery gallery=gallerySpan.getMediaGallery();
      if (gallery.getUniqueId() == galleryId) {
        ArrayList<String> galleryIds=gallery.getIds();
        galleryIds.add(remoteId);
        gallery.setIds(galleryIds);
        gallerySpan.setMediaGallery(gallery);
        int spanStart=postContent.getSpanStart(gallerySpan);
        int spanEnd=postContent.getSpanEnd(gallerySpan);
        postContent.setSpan(gallerySpan,spanStart,spanEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
  }
}","private void handleGalleryImageUploadedLegacyEditor(Long galleryId,String localId,String remoteId){
  SpannableStringBuilder postContent;
  if (mEditorFragment.getSpannedContent() != null) {
    postContent=new SpannableStringBuilder(mEditorFragment.getSpannedContent());
  }
 else {
    try {
      postContent=new SpannableStringBuilder(StringUtils.notNullStr((String)mEditorFragment.getContent()));
    }
 catch (    IllegalEditorStateException e) {
      AppLog.e(T.EDITOR,""String_Node_Str"");
      return;
    }
  }
  int selectionStart=0;
  int selectionEnd=postContent.length();
  MediaGalleryImageSpan[] gallerySpans=postContent.getSpans(selectionStart,selectionEnd,MediaGalleryImageSpan.class);
  if (gallerySpans.length != 0) {
    for (    MediaGalleryImageSpan gallerySpan : gallerySpans) {
      MediaGallery gallery=gallerySpan.getMediaGallery();
      if (gallery.getUniqueId() == galleryId) {
        ArrayList<String> galleryIds=gallery.getIds();
        galleryIds.add(remoteId);
        gallery.setIds(galleryIds);
        gallerySpan.setMediaGallery(gallery);
        int spanStart=postContent.getSpanStart(gallerySpan);
        int spanEnd=postContent.getSpanEnd(gallerySpan);
        postContent.setSpan(gallerySpan,spanStart,spanEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
  }
}",0.949138966760112
13970,"/** 
 * Returns the contents of the title field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getTitle(){
  if (!isAdded()) {
    return ""String_Node_Str"";
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mTitle=mSourceViewTitle.getText().toString();
    return StringUtils.notNullStr(mTitle);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetTitleCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetTitleCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mTitle.replaceAll(""String_Node_Str"",""String_Node_Str""));
}","/** 
 * Returns the contents of the title field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getTitle() throws IllegalEditorStateException {
  if (!isAdded()) {
    throw new IllegalEditorStateException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mTitle=mSourceViewTitle.getText().toString();
    return StringUtils.notNullStr(mTitle);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetTitleCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetTitleCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mTitle.replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.9502762430939228
13971,"/** 
 * Returns the contents of the content field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getContent(){
  if (!isAdded()) {
    return ""String_Node_Str"";
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mContentHtml=mSourceViewContent.getText().toString();
    return StringUtils.notNullStr(mContentHtml);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetContentCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetContentCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mContentHtml);
}","/** 
 * Returns the contents of the content field from the JavaScript editor. Should be called from a background thread where possible.
 */
@Override public CharSequence getContent() throws IllegalEditorStateException {
  if (!isAdded()) {
    throw new IllegalEditorStateException();
  }
  if (mSourceView != null && mSourceView.getVisibility() == View.VISIBLE) {
    mContentHtml=mSourceViewContent.getText().toString();
    return StringUtils.notNullStr(mContentHtml);
  }
  if (Looper.myLooper() == Looper.getMainLooper()) {
    AppLog.d(T.EDITOR,""String_Node_Str"");
  }
  mGetContentCountDownLatch=new CountDownLatch(1);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      mWebView.execJavaScriptFromString(""String_Node_Str"");
    }
  }
);
  try {
    mGetContentCountDownLatch.await(1,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.EDITOR,e);
    Thread.currentThread().interrupt();
  }
  return StringUtils.notNullStr(mContentHtml);
}",0.9492567913890312
13972,"private void toggleHtmlMode(final ToggleButton toggleButton){
  if (!isAdded()) {
    return;
  }
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.HTML_BUTTON_TAPPED);
  if (!mUploadingMedia.isEmpty() || isActionInProgress()) {
    toggleButton.setChecked(false);
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
    return;
  }
  clearFormatBarButtons();
  updateFormatBarEnabledState(true);
  if (toggleButton.isChecked()) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        if (!isAdded()) {
          return;
        }
        getTitle();
        getContent();
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            mSourceViewTitle.setText(mTitle);
            SpannableString spannableContent=new SpannableString(mContentHtml);
            HtmlStyleUtils.styleHtmlForDisplay(spannableContent);
            mSourceViewContent.setText(spannableContent);
            mWebView.setVisibility(View.GONE);
            mSourceView.setVisibility(View.VISIBLE);
            mSourceViewContent.requestFocus();
            mSourceViewContent.setSelection(0);
            InputMethodManager imm=((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE));
            imm.showSoftInput(mSourceViewContent,InputMethodManager.SHOW_IMPLICIT);
          }
        }
);
      }
    }
);
    thread.start();
  }
 else {
    mWebView.setVisibility(View.VISIBLE);
    mSourceView.setVisibility(View.GONE);
    mTitle=mSourceViewTitle.getText().toString();
    mContentHtml=mSourceViewContent.getText().toString();
    updateVisualEditorFields();
    mWebView.execJavaScriptFromString(""String_Node_Str"");
    mWebView.execJavaScriptFromString(""String_Node_Str"");
  }
}","private void toggleHtmlMode(final ToggleButton toggleButton){
  if (!isAdded()) {
    return;
  }
  mEditorFragmentListener.onTrackableEvent(TrackableEvent.HTML_BUTTON_TAPPED);
  if (!mUploadingMedia.isEmpty() || isActionInProgress()) {
    toggleButton.setChecked(false);
    ToastUtils.showToast(getActivity(),R.string.alert_action_while_uploading,ToastUtils.Duration.LONG);
    return;
  }
  clearFormatBarButtons();
  updateFormatBarEnabledState(true);
  if (toggleButton.isChecked()) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        if (!isAdded()) {
          return;
        }
        try {
          getTitle();
          getContent();
        }
 catch (        IllegalEditorStateException e) {
          AppLog.e(T.EDITOR,""String_Node_Str"");
          return;
        }
        getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            mSourceViewTitle.setText(mTitle);
            SpannableString spannableContent=new SpannableString(mContentHtml);
            HtmlStyleUtils.styleHtmlForDisplay(spannableContent);
            mSourceViewContent.setText(spannableContent);
            mWebView.setVisibility(View.GONE);
            mSourceView.setVisibility(View.VISIBLE);
            mSourceViewContent.requestFocus();
            mSourceViewContent.setSelection(0);
            InputMethodManager imm=((InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE));
            imm.showSoftInput(mSourceViewContent,InputMethodManager.SHOW_IMPLICIT);
          }
        }
);
      }
    }
);
    thread.start();
  }
 else {
    mWebView.setVisibility(View.VISIBLE);
    mSourceView.setVisibility(View.GONE);
    mTitle=mSourceViewTitle.getText().toString();
    mContentHtml=mSourceViewContent.getText().toString();
    updateVisualEditorFields();
    mWebView.execJavaScriptFromString(""String_Node_Str"");
    mWebView.execJavaScriptFromString(""String_Node_Str"");
  }
}",0.953457796476466
13973,"@Override public void onSaveInstanceState(Bundle outState){
  outState.putCharSequence(KEY_TITLE,getTitle());
  outState.putCharSequence(KEY_CONTENT,getContent());
}","@Override public void onSaveInstanceState(Bundle outState){
  try {
    outState.putCharSequence(KEY_TITLE,getTitle());
    outState.putCharSequence(KEY_CONTENT,getContent());
  }
 catch (  IllegalEditorStateException e) {
    AppLog.e(T.EDITOR,""String_Node_Str"");
  }
}",0.7586206896551724
13974,public abstract CharSequence getContent();,public abstract CharSequence getContent() throws IllegalEditorStateException ;,0.7
13975,public abstract CharSequence getTitle();,public abstract CharSequence getTitle() throws IllegalEditorStateException ;,0.6896551724137931
13976,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  configureBlogsSettings(mBlogsCategory,false);
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  mSearchMenuItemCollapsed=true;
  configureBlogsSettings(mBlogsCategory,false);
  return true;
}",0.8873720136518771
13977,"@Override public boolean onMenuItemActionExpand(MenuItem item){
  configureBlogsSettings(mBlogsCategory,true);
  return true;
}","@Override public boolean onMenuItemActionExpand(MenuItem item){
  mSearchMenuItemCollapsed=false;
  configureBlogsSettings(mBlogsCategory,true);
  return true;
}",0.8819444444444444
13978,"@Override public boolean onQueryTextChange(String newText){
  configureBlogsSettings(mBlogsCategory,true);
  return true;
}","@Override public boolean onQueryTextChange(String newText){
  configureBlogsSettings(mBlogsCategory,!mSearchMenuItemCollapsed);
  return true;
}",0.906367041198502
13979,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.notifications_settings,menu);
  mSearchMenuItem=menu.findItem(R.id.menu_notifications_settings_search);
  mSearchView=(SearchView)MenuItemCompat.getActionView(mSearchMenuItem);
  mSearchView.setQueryHint(getString(R.string.search_sites));
  mBlogsCategory=(PreferenceCategory)findPreference(getString(R.string.pref_notification_blogs));
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      configureBlogsSettings(mBlogsCategory,true);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      configureBlogsSettings(mBlogsCategory,true);
      return true;
    }
  }
);
  MenuItemCompat.setOnActionExpandListener(mSearchMenuItem,new MenuItemCompat.OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      configureBlogsSettings(mBlogsCategory,true);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      configureBlogsSettings(mBlogsCategory,false);
      return true;
    }
  }
);
  updateSearchMenuVisibility();
  if (!TextUtils.isEmpty(mRestoredQuery)) {
    mSearchMenuItem.expandActionView();
    mSearchView.setQuery(mRestoredQuery,true);
  }
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.notifications_settings,menu);
  mSearchMenuItem=menu.findItem(R.id.menu_notifications_settings_search);
  mSearchView=(SearchView)MenuItemCompat.getActionView(mSearchMenuItem);
  mSearchView.setQueryHint(getString(R.string.search_sites));
  mBlogsCategory=(PreferenceCategory)findPreference(getString(R.string.pref_notification_blogs));
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      configureBlogsSettings(mBlogsCategory,true);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      configureBlogsSettings(mBlogsCategory,!mSearchMenuItemCollapsed);
      return true;
    }
  }
);
  MenuItemCompat.setOnActionExpandListener(mSearchMenuItem,new MenuItemCompat.OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      mSearchMenuItemCollapsed=false;
      configureBlogsSettings(mBlogsCategory,true);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      mSearchMenuItemCollapsed=true;
      configureBlogsSettings(mBlogsCategory,false);
      return true;
    }
  }
);
  updateSearchMenuVisibility();
  if (!TextUtils.isEmpty(mRestoredQuery)) {
    mSearchMenuItem.expandActionView();
    mSearchView.setQuery(mRestoredQuery,true);
  }
}",0.9637124912770412
13980,"public static void browsePostOrPage(Context context,Blog blog,Post post){
  if (blog == null || post == null || TextUtils.isEmpty(post.getPermaLink()))   return;
  String url=UrlUtils.appendUrlParameter(post.getPermaLink(),""String_Node_Str"",""String_Node_Str"");
  WPWebViewActivity.openUrlByUsingBlogCredentials(context,blog,post,url);
}","public static void browsePostOrPage(Context context,Blog blog,Post post){
  if (blog == null || post == null || TextUtils.isEmpty(post.getPermaLink()))   return;
  String url=UrlUtils.appendUrlParameter(post.getPermaLink(),""String_Node_Str"",""String_Node_Str"");
  WPWebViewActivity.openPostOrPage(context,blog,post,url);
}",0.9467275494672754
13981,"private static void openWPCOMURL(Context context,String url,String user){
  if (context == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(context,context.getResources().getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    return;
  }
  if (TextUtils.isEmpty(user)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  Intent intent=new Intent(context,WPWebViewActivity.class);
  intent.putExtra(WPWebViewActivity.AUTHENTICATION_USER,user);
  intent.putExtra(WPWebViewActivity.URL_TO_LOAD,url);
  intent.putExtra(WPWebViewActivity.AUTHENTICATION_URL,WPCOM_LOGIN_URL);
  context.startActivity(intent);
}","private static void openWPCOMURL(Context context,String url){
  if (context == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(context,context.getResources().getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    return;
  }
  Intent intent=new Intent(context,WPWebViewActivity.class);
  intent.putExtra(WPWebViewActivity.USE_GLOBAL_WPCOM_USER,true);
  intent.putExtra(WPWebViewActivity.URL_TO_LOAD,url);
  intent.putExtra(WPWebViewActivity.AUTHENTICATION_URL,WPCOM_LOGIN_URL);
  context.startActivity(intent);
}",0.8892025405786874
13982,"@Override protected void loadContent(){
  Bundle extras=getIntent().getExtras();
  if (extras == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    finish();
    return;
  }
  String addressToLoad=extras.getString(URL_TO_LOAD);
  String username=extras.getString(AUTHENTICATION_USER,""String_Node_Str"");
  String password=extras.getString(AUTHENTICATION_PASSWD,""String_Node_Str"");
  String authURL=extras.getString(AUTHENTICATION_URL);
  if (TextUtils.isEmpty(addressToLoad) || !UrlUtils.isValidUrlAndHostNotNull(addressToLoad)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(this,getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    finish();
  }
  if (TextUtils.isEmpty(authURL) && TextUtils.isEmpty(username) && TextUtils.isEmpty(password)) {
    String referrerUrl=extras.getString(REFERRER_URL);
    if (!TextUtils.isEmpty(referrerUrl)) {
      Map<String,String> headers=new HashMap<>();
      headers.put(""String_Node_Str"",referrerUrl);
      loadUrl(addressToLoad,headers);
    }
 else {
      loadUrl(addressToLoad);
    }
  }
 else {
    if (TextUtils.isEmpty(authURL) || !UrlUtils.isValidUrlAndHostNotNull(authURL)) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
      Toast.makeText(this,getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
      finish();
    }
    if (TextUtils.isEmpty(username)) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
      Toast.makeText(this,getText(R.string.incorrect_credentials),Toast.LENGTH_SHORT).show();
      finish();
    }
    loadAuthenticatedUrl(authURL,addressToLoad,username,password);
  }
}","@Override protected void loadContent(){
  Bundle extras=getIntent().getExtras();
  if (extras == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    finish();
    return;
  }
  String addressToLoad=extras.getString(URL_TO_LOAD);
  String username=extras.getString(AUTHENTICATION_USER,""String_Node_Str"");
  String password=extras.getString(AUTHENTICATION_PASSWD,""String_Node_Str"");
  String authURL=extras.getString(AUTHENTICATION_URL);
  if (extras.getBoolean(USE_GLOBAL_WPCOM_USER,false)) {
    username=AccountHelper.getDefaultAccount().getUserName();
  }
  if (TextUtils.isEmpty(addressToLoad) || !UrlUtils.isValidUrlAndHostNotNull(addressToLoad)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(this,getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    finish();
  }
  if (TextUtils.isEmpty(authURL) && TextUtils.isEmpty(username) && TextUtils.isEmpty(password)) {
    String referrerUrl=extras.getString(REFERRER_URL);
    if (!TextUtils.isEmpty(referrerUrl)) {
      Map<String,String> headers=new HashMap<>();
      headers.put(""String_Node_Str"",referrerUrl);
      loadUrl(addressToLoad,headers);
    }
 else {
      loadUrl(addressToLoad);
    }
  }
 else {
    if (TextUtils.isEmpty(authURL) || !UrlUtils.isValidUrlAndHostNotNull(authURL)) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
      Toast.makeText(this,getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
      finish();
    }
    if (TextUtils.isEmpty(username)) {
      AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
      Toast.makeText(this,getText(R.string.incorrect_credentials),Toast.LENGTH_SHORT).show();
      finish();
    }
    loadAuthenticatedUrl(authURL,addressToLoad,username,password);
  }
}",0.9638625592417062
13983,"public static void openUrlByUsingWPCOMCredentials(Context context,String url,String user){
  openWPCOMURL(context,url,user);
}","public static void openUrlByUsingWPCOMCredentials(Context context,String url){
  openWPCOMURL(context,url);
}",0.9276595744680852
13984,"public void showWebViewActivityForUrl(String url){
  if (isFinishing() || url == null)   return;
  if (url.contains(DOMAIN_WPCOM)) {
    WPWebViewActivity.openUrlByUsingWPCOMCredentials(this,url,AccountHelper.getDefaultAccount().getUserName());
  }
 else {
    WPWebViewActivity.openURL(this,url);
  }
}","public void showWebViewActivityForUrl(String url){
  if (isFinishing() || url == null)   return;
  if (url.contains(DOMAIN_WPCOM)) {
    WPWebViewActivity.openUrlByUsingWPCOMCredentials(this,url);
  }
 else {
    WPWebViewActivity.openURL(this,url);
  }
}",0.913978494623656
13985,"private void showPurchasesDialog(final Blog currentBlog){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.premium_upgrades_title);
  builder.setMessage(R.string.premium_upgrades_message);
  builder.setPositiveButton(R.string.show_purchases,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOW_CLICKED);
      WPWebViewActivity.openUrlByUsingWPCOMCredentials(getActivity(),WORDPRESS_PURCHASES_URL,AccountHelper.getCurrentUsernameForBlog(currentBlog));
    }
  }
);
  builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  builder.show();
  AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOWN);
}","private void showPurchasesDialog(final Blog currentBlog){
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.premium_upgrades_title);
  builder.setMessage(R.string.premium_upgrades_message);
  builder.setPositiveButton(R.string.show_purchases,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOW_CLICKED);
      WPWebViewActivity.openUrlByUsingWPCOMCredentials(getActivity(),WORDPRESS_PURCHASES_URL);
    }
  }
);
  builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  builder.show();
  AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.SITE_SETTINGS_DELETE_SITE_PURCHASES_SHOWN);
}",0.9735132433783108
13986,"private static void openUrlInternal(Context context,@NonNull String url){
  if (WPUrlUtils.isWordPressCom(url)) {
    WPWebViewActivity.openUrlByUsingWPCOMCredentials(context,url,AccountHelper.getDefaultAccount().getUserName());
  }
 else {
    WPWebViewActivity.openURL(context,url,ReaderConstants.HTTP_REFERER_URL);
  }
}","private static void openUrlInternal(Context context,@NonNull String url){
  if (WPUrlUtils.isWordPressCom(url)) {
    WPWebViewActivity.openUrlByUsingWPCOMCredentials(context,url);
  }
 else {
    WPWebViewActivity.openURL(context,url,ReaderConstants.HTTP_REFERER_URL);
  }
}",0.919732441471572
13987,"public void setEntryTextOrLink(final String linkURL,String linkName){
  if (entryTextView == null) {
    return;
  }
  entryTextView.setText(linkName);
  if (TextUtils.isEmpty(linkURL)) {
    entryTextView.setTextColor(entryTextView.getContext().getResources().getColor(R.color.stats_text_color));
    rowContent.setClickable(false);
    return;
  }
  rowContent.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String url=linkURL;
      AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
      if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        url=UrlUtils.makeHttps(url);
        if (url.contains(""String_Node_Str"")) {
          if (!url.contains(""String_Node_Str"") && !url.contains(""String_Node_Str"")) {
            url+=""String_Node_Str"";
          }
        }
 else {
          url+=""String_Node_Str"";
        }
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        String statsAuthenticatedUser=AccountHelper.getDefaultAccount().getUserName();
        if (org.apache.commons.lang.StringUtils.isEmpty(statsAuthenticatedUser)) {
        }
        WPWebViewActivity.openUrlByUsingWPCOMCredentials(view.getContext(),url,statsAuthenticatedUser);
      }
 else       if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        WPWebViewActivity.openURL(view.getContext(),url);
      }
    }
  }
);
  entryTextView.setTextColor(entryTextView.getContext().getResources().getColor(R.color.stats_link_text_color));
}","public void setEntryTextOrLink(final String linkURL,String linkName){
  if (entryTextView == null) {
    return;
  }
  entryTextView.setText(linkName);
  if (TextUtils.isEmpty(linkURL)) {
    entryTextView.setTextColor(entryTextView.getContext().getResources().getColor(R.color.stats_text_color));
    rowContent.setClickable(false);
    return;
  }
  rowContent.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      String url=linkURL;
      AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
      if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        url=UrlUtils.makeHttps(url);
        if (url.contains(""String_Node_Str"")) {
          if (!url.contains(""String_Node_Str"") && !url.contains(""String_Node_Str"")) {
            url+=""String_Node_Str"";
          }
        }
 else {
          url+=""String_Node_Str"";
        }
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        String statsAuthenticatedUser=AccountHelper.getDefaultAccount().getUserName();
        if (org.apache.commons.lang.StringUtils.isEmpty(statsAuthenticatedUser)) {
        }
        WPWebViewActivity.openUrlByUsingWPCOMCredentials(view.getContext(),url);
      }
 else       if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        WPWebViewActivity.openURL(view.getContext(),url);
      }
    }
  }
);
  entryTextView.setTextColor(entryTextView.getContext().getResources().getColor(R.color.stats_link_text_color));
}",0.9927467675812046
13988,"@Override public boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){
  int action=event.getAction();
  if (action == MotionEvent.ACTION_UP) {
    int x=(int)event.getX();
    int y=(int)event.getY();
    x-=widget.getTotalPaddingLeft();
    y-=widget.getTotalPaddingTop();
    x+=widget.getScrollX();
    y+=widget.getScrollY();
    Layout layout=widget.getLayout();
    if (layout == null) {
      return super.onTouchEvent(widget,buffer,event);
    }
    int line=layout.getLineForVertical(y);
    int off=layout.getOffsetForHorizontal(line,x);
    URLSpan[] link=buffer.getSpans(off,off,URLSpan.class);
    if (link.length != 0) {
      String url=link[0].getURL();
      AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
      if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        url=UrlUtils.makeHttps(url);
        if (url.contains(""String_Node_Str"")) {
          if (!url.contains(""String_Node_Str"") && !url.contains(""String_Node_Str"")) {
            url+=""String_Node_Str"";
          }
        }
 else {
          url+=""String_Node_Str"";
        }
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        String statsAuthenticatedUser=AccountHelper.getDefaultAccount().getUserName();
        if (org.apache.commons.lang.StringUtils.isEmpty(statsAuthenticatedUser)) {
          return super.onTouchEvent(widget,buffer,event);
        }
        WPWebViewActivity.openUrlByUsingWPCOMCredentials(widget.getContext(),url,statsAuthenticatedUser);
        return true;
      }
 else       if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        WPWebViewActivity.openURL(widget.getContext(),url);
        return true;
      }
    }
  }
  return super.onTouchEvent(widget,buffer,event);
}","@Override public boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){
  int action=event.getAction();
  if (action == MotionEvent.ACTION_UP) {
    int x=(int)event.getX();
    int y=(int)event.getY();
    x-=widget.getTotalPaddingLeft();
    y-=widget.getTotalPaddingTop();
    x+=widget.getScrollX();
    y+=widget.getScrollY();
    Layout layout=widget.getLayout();
    if (layout == null) {
      return super.onTouchEvent(widget,buffer,event);
    }
    int line=layout.getLineForVertical(y);
    int off=layout.getOffsetForHorizontal(line,x);
    URLSpan[] link=buffer.getSpans(off,off,URLSpan.class);
    if (link.length != 0) {
      String url=link[0].getURL();
      AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
      if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        url=UrlUtils.makeHttps(url);
        if (url.contains(""String_Node_Str"")) {
          if (!url.contains(""String_Node_Str"") && !url.contains(""String_Node_Str"")) {
            url+=""String_Node_Str"";
          }
        }
 else {
          url+=""String_Node_Str"";
        }
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        String statsAuthenticatedUser=AccountHelper.getDefaultAccount().getUserName();
        if (org.apache.commons.lang.StringUtils.isEmpty(statsAuthenticatedUser)) {
          return super.onTouchEvent(widget,buffer,event);
        }
        WPWebViewActivity.openUrlByUsingWPCOMCredentials(widget.getContext(),url);
        return true;
      }
 else       if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        AppLog.d(AppLog.T.UTILS,""String_Node_Str"" + url);
        WPWebViewActivity.openURL(widget.getContext(),url);
        return true;
      }
    }
  }
  return super.onTouchEvent(widget,buffer,event);
}",0.9937106918238994
13989,"private static void openWPCOMURL(Activity activity,String url,Theme currentTheme,Blog blog,Boolean isCurrentTheme){
  if (activity == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(activity,activity.getResources().getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    return;
  }
  String authURL=ThemeWebActivity.getBlogLoginUrl(blog);
  Intent intent=new Intent(activity,ThemeWebActivity.class);
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_USER,blog.getUsername());
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_PASSWD,blog.getPassword());
  intent.putExtra(ThemeWebActivity.URL_TO_LOAD,url);
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_URL,authURL);
  intent.putExtra(ThemeWebActivity.LOCAL_BLOG_ID,blog.getLocalTableBlogId());
  intent.putExtra(IS_PREMIUM_THEME,currentTheme.isPremium());
  intent.putExtra(IS_CURRENT_THEME,isCurrentTheme);
  intent.putExtra(THEME_NAME,currentTheme.getName());
  intent.putExtra(ThemeBrowserActivity.THEME_ID,currentTheme.getId());
  activity.startActivityForResult(intent,ThemeBrowserActivity.ACTIVATE_THEME);
}","private static void openWPCOMURL(Activity activity,String url,Theme currentTheme,Blog blog,boolean isCurrentTheme){
  if (activity == null) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(url)) {
    AppLog.e(AppLog.T.UTILS,""String_Node_Str"");
    Toast.makeText(activity,activity.getResources().getText(R.string.invalid_site_url_message),Toast.LENGTH_SHORT).show();
    return;
  }
  String authURL=ThemeWebActivity.getBlogLoginUrl(blog);
  Intent intent=new Intent(activity,ThemeWebActivity.class);
  intent.putExtra(ThemeWebActivity.URL_TO_LOAD,url);
  intent.putExtra(ThemeWebActivity.AUTHENTICATION_URL,authURL);
  intent.putExtra(ThemeWebActivity.LOCAL_BLOG_ID,blog.getLocalTableBlogId());
  intent.putExtra(WPWebViewActivity.USE_GLOBAL_WPCOM_USER,true);
  intent.putExtra(IS_PREMIUM_THEME,currentTheme.isPremium());
  intent.putExtra(IS_CURRENT_THEME,isCurrentTheme);
  intent.putExtra(THEME_NAME,currentTheme.getName());
  intent.putExtra(ThemeBrowserActivity.THEME_ID,currentTheme.getId());
  activity.startActivityForResult(intent,ThemeBrowserActivity.ACTIVATE_THEME);
}",0.853836262323189
13990,"private void onWPComEmailCheckError(boolean forceWordPressComDisplay){
  if (!isAdded()) {
    return;
  }
  if (forceWordPressComDisplay) {
    showSelfHostedSignInForm();
    return;
  }
  if (isUsernameEmail()) {
    showSelfHostedSignInForm();
  }
 else {
    showPasswordFieldAndFocus();
  }
}","private void onWPComEmailCheckError(boolean forceWordPressComDisplay){
  if (!isAdded()) {
    return;
  }
  if (forceWordPressComDisplay) {
    showPasswordFieldAndFocus();
    return;
  }
  if (isUsernameEmail()) {
    showSelfHostedSignInForm();
  }
 else {
    showPasswordFieldAndFocus();
  }
}",0.7470686767169179
13991,"private void handleBadgeResetPN(Context context,Bundle data){
  if (data == null || !data.containsKey(PUSH_ARG_NOTE_ID)) {
    return;
  }
  removeNotificationWithNoteIdFromSystemBar(context,data.getString(PUSH_ARG_NOTE_ID,""String_Node_Str""));
  if (sActiveNotificationsMap.size() > 0) {
    rebuildAndUpdateNotificationsOnSystemBar(context,data);
  }
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged());
}","private void handleBadgeResetPN(Context context,Bundle data){
  if (data == null || !data.containsKey(PUSH_ARG_NOTE_ID)) {
    return;
  }
  removeNotificationWithNoteIdFromSystemBar(context,data.getString(PUSH_ARG_NOTE_ID,""String_Node_Str""));
  if (sActiveNotificationsMap.size() > 0) {
    rebuildAndUpdateNotificationsOnSystemBar(context,data);
  }
  EventBus.getDefault().post(new NotificationEvents.NotificationsChanged(sActiveNotificationsMap.size() > 0));
}",0.9619686800894854
13992,"private void launchWithNoteId(){
  if (isFinishing() || getIntent() == null)   return;
  GCMMessageService.remove2FANotification(this);
  NotificationsUtils.validate2FAuthorizationTokenFromIntentExtras(getIntent(),new NotificationsUtils.TwoFactorAuthCallback(){
    @Override public void onTokenValid(    String token,    String title,    String message){
      NotificationsUtils.showPushAuthAlert(WPMainActivity.this,token,title,message);
    }
    @Override public void onTokenInvalid(){
      ToastUtils.showToast(WPMainActivity.this,R.string.push_auth_expired,ToastUtils.Duration.LONG);
      AnalyticsTracker.track(AnalyticsTracker.Stat.PUSH_AUTHENTICATION_EXPIRED);
    }
  }
);
  mViewPager.setCurrentItem(WPMainTabAdapter.TAB_NOTIFS);
  if (GCMMessageService.getNotificationsCount() <= 1) {
    String noteId=getIntent().getStringExtra(NotificationsListFragment.NOTE_ID_EXTRA);
    if (!TextUtils.isEmpty(noteId)) {
      GCMMessageService.bumpPushNotificationsTappedAnalytics(noteId);
      String voiceReply=null;
      Bundle remoteInput=RemoteInput.getResultsFromIntent(getIntent());
      if (remoteInput != null) {
        CharSequence replyText=remoteInput.getCharSequence(EXTRA_VOICE_OR_INLINE_REPLY);
        if (replyText != null) {
          voiceReply=replyText.toString();
        }
      }
      if (voiceReply != null) {
        NotificationsProcessingService.startServiceForReply(this,noteId,voiceReply);
        finish();
        return;
      }
 else {
        boolean shouldShowKeyboard=getIntent().getBooleanExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,false);
        NotificationsListFragment.openNoteForReply(this,noteId,shouldShowKeyboard,voiceReply);
      }
    }
 else {
      AppLog.e(T.NOTIFS,""String_Node_Str"");
      return;
    }
  }
 else {
    GCMMessageService.bumpPushNotificationsTappedAllAnalytics();
  }
  GCMMessageService.removeAllNotifications(this);
}","private void launchWithNoteId(){
  if (isFinishing() || getIntent() == null)   return;
  GCMMessageService.remove2FANotification(this);
  NotificationsUtils.validate2FAuthorizationTokenFromIntentExtras(getIntent(),new NotificationsUtils.TwoFactorAuthCallback(){
    @Override public void onTokenValid(    String token,    String title,    String message){
      NotificationsUtils.showPushAuthAlert(WPMainActivity.this,token,title,message);
    }
    @Override public void onTokenInvalid(){
      ToastUtils.showToast(WPMainActivity.this,R.string.push_auth_expired,ToastUtils.Duration.LONG);
      AnalyticsTracker.track(AnalyticsTracker.Stat.PUSH_AUTHENTICATION_EXPIRED);
    }
  }
);
  NotificationsActions.updateSeenNotes();
  mViewPager.setCurrentItem(WPMainTabAdapter.TAB_NOTIFS);
  if (GCMMessageService.getNotificationsCount() <= 1) {
    String noteId=getIntent().getStringExtra(NotificationsListFragment.NOTE_ID_EXTRA);
    if (!TextUtils.isEmpty(noteId)) {
      GCMMessageService.bumpPushNotificationsTappedAnalytics(noteId);
      String voiceReply=null;
      Bundle remoteInput=RemoteInput.getResultsFromIntent(getIntent());
      if (remoteInput != null) {
        CharSequence replyText=remoteInput.getCharSequence(EXTRA_VOICE_OR_INLINE_REPLY);
        if (replyText != null) {
          voiceReply=replyText.toString();
        }
      }
      if (voiceReply != null) {
        NotificationsProcessingService.startServiceForReply(this,noteId,voiceReply);
        finish();
        return;
      }
 else {
        boolean shouldShowKeyboard=getIntent().getBooleanExtra(NotificationsListFragment.NOTE_INSTANT_REPLY_EXTRA,false);
        NotificationsListFragment.openNoteForReply(this,noteId,shouldShowKeyboard,voiceReply);
      }
    }
 else {
      AppLog.e(T.NOTIFS,""String_Node_Str"");
      return;
    }
  }
 else {
    GCMMessageService.bumpPushNotificationsTappedAllAnalytics();
  }
  GCMMessageService.removeAllNotifications(this);
}",0.9891528925619836
13993,"@Override public void onPageSelected(int position){
  AppPrefs.setMainTabIndex(position);
switch (position) {
case WPMainTabAdapter.TAB_MY_SITE:
    setTabLayoutElevation(mAppBarElevation);
  break;
case WPMainTabAdapter.TAB_READER:
setTabLayoutElevation(0);
break;
case WPMainTabAdapter.TAB_ME:
setTabLayoutElevation(mAppBarElevation);
break;
case WPMainTabAdapter.TAB_NOTIFS:
setTabLayoutElevation(mAppBarElevation);
Fragment fragment=mTabAdapter.getFragment(position);
if (fragment instanceof NotificationsListFragment) {
((NotificationsListFragment)fragment).clearPendingNotificationsItemsOnUI();
}
break;
}
trackLastVisibleTab(position,true);
}","@Override public void onPageSelected(int position){
  AppPrefs.setMainTabIndex(position);
switch (position) {
case WPMainTabAdapter.TAB_MY_SITE:
    setTabLayoutElevation(mAppBarElevation);
  break;
case WPMainTabAdapter.TAB_READER:
setTabLayoutElevation(0);
break;
case WPMainTabAdapter.TAB_ME:
setTabLayoutElevation(mAppBarElevation);
break;
case WPMainTabAdapter.TAB_NOTIFS:
setTabLayoutElevation(mAppBarElevation);
Fragment fragment=mTabAdapter.getFragment(position);
if (fragment instanceof OnScrollToTopListener) {
((OnScrollToTopListener)fragment).onScrollToTop();
}
break;
}
trackLastVisibleTab(position,true);
}",0.8794326241134752
13994,"@Override public void onCreate(Bundle savedInstanceState){
  ProfilingUtils.split(""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  mViewPager=(WPViewPager)findViewById(R.id.viewpager_main);
  mViewPager.setOffscreenPageLimit(WPMainTabAdapter.NUM_TABS - 1);
  mTabAdapter=new WPMainTabAdapter(getFragmentManager());
  mViewPager.setAdapter(mTabAdapter);
  mConnectionBar=(TextView)findViewById(R.id.connection_bar);
  mConnectionBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AniUtils.animateBottomBar(mConnectionBar,false);
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          if (!isFinishing()) {
            checkConnection();
          }
        }
      }
,2000);
    }
  }
);
  mTabLayout=(WPMainTabLayout)findViewById(R.id.tab_layout);
  mTabLayout.createTabs();
  mTabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener(){
    @Override public void onTabSelected(    TabLayout.Tab tab){
      mViewPager.setCurrentItem(tab.getPosition());
    }
    @Override public void onTabUnselected(    TabLayout.Tab tab){
    }
    @Override public void onTabReselected(    TabLayout.Tab tab){
      Fragment fragment=mTabAdapter.getFragment(tab.getPosition());
      if (fragment instanceof OnScrollToTopListener) {
        ((OnScrollToTopListener)fragment).onScrollToTop();
      }
    }
  }
);
  mAppBarElevation=getResources().getDimensionPixelSize(R.dimen.appbar_elevation);
  mViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(mTabLayout));
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      AppPrefs.setMainTabIndex(position);
switch (position) {
case WPMainTabAdapter.TAB_MY_SITE:
        setTabLayoutElevation(mAppBarElevation);
      break;
case WPMainTabAdapter.TAB_READER:
    setTabLayoutElevation(0);
  break;
case WPMainTabAdapter.TAB_ME:
setTabLayoutElevation(mAppBarElevation);
break;
case WPMainTabAdapter.TAB_NOTIFS:
setTabLayoutElevation(mAppBarElevation);
Fragment fragment=mTabAdapter.getFragment(position);
if (fragment instanceof NotificationsListFragment) {
((NotificationsListFragment)fragment).clearPendingNotificationsItemsOnUI();
}
break;
}
trackLastVisibleTab(position,true);
}
@Override public void onPageScrollStateChanged(int state){
}
@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
if (position == WPMainTabAdapter.TAB_MY_SITE) {
EventBus.getDefault().post(new MainViewPagerScrolled(positionOffset));
}
}
}
);
if (savedInstanceState == null) {
if (AccountHelper.isSignedIn()) {
boolean openedFromPush=(getIntent() != null && getIntent().getBooleanExtra(ARG_OPENED_FROM_PUSH,false));
if (openedFromPush) {
getIntent().putExtra(ARG_OPENED_FROM_PUSH,false);
launchWithNoteId();
}
 else {
int position=AppPrefs.getMainTabIndex();
if (mTabAdapter.isValidPosition(position) && position != mViewPager.getCurrentItem()) {
mViewPager.setCurrentItem(position);
}
checkMagicLinkSignIn();
}
}
 else {
ActivityLauncher.showSignInForResult(this);
}
}
}","@Override public void onCreate(Bundle savedInstanceState){
  ProfilingUtils.split(""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  mViewPager=(WPViewPager)findViewById(R.id.viewpager_main);
  mViewPager.setOffscreenPageLimit(WPMainTabAdapter.NUM_TABS - 1);
  mTabAdapter=new WPMainTabAdapter(getFragmentManager());
  mViewPager.setAdapter(mTabAdapter);
  mConnectionBar=(TextView)findViewById(R.id.connection_bar);
  mConnectionBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AniUtils.animateBottomBar(mConnectionBar,false);
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          if (!isFinishing()) {
            checkConnection();
          }
        }
      }
,2000);
    }
  }
);
  mTabLayout=(WPMainTabLayout)findViewById(R.id.tab_layout);
  mTabLayout.createTabs();
  mTabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener(){
    @Override public void onTabSelected(    TabLayout.Tab tab){
      mViewPager.setCurrentItem(tab.getPosition());
    }
    @Override public void onTabUnselected(    TabLayout.Tab tab){
    }
    @Override public void onTabReselected(    TabLayout.Tab tab){
      Fragment fragment=mTabAdapter.getFragment(tab.getPosition());
      if (fragment instanceof OnScrollToTopListener) {
        ((OnScrollToTopListener)fragment).onScrollToTop();
      }
    }
  }
);
  mAppBarElevation=getResources().getDimensionPixelSize(R.dimen.appbar_elevation);
  mViewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(mTabLayout));
  mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      AppPrefs.setMainTabIndex(position);
switch (position) {
case WPMainTabAdapter.TAB_MY_SITE:
        setTabLayoutElevation(mAppBarElevation);
      break;
case WPMainTabAdapter.TAB_READER:
    setTabLayoutElevation(0);
  break;
case WPMainTabAdapter.TAB_ME:
setTabLayoutElevation(mAppBarElevation);
break;
case WPMainTabAdapter.TAB_NOTIFS:
setTabLayoutElevation(mAppBarElevation);
Fragment fragment=mTabAdapter.getFragment(position);
if (fragment instanceof OnScrollToTopListener) {
((OnScrollToTopListener)fragment).onScrollToTop();
}
break;
}
trackLastVisibleTab(position,true);
}
@Override public void onPageScrollStateChanged(int state){
}
@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
if (position == WPMainTabAdapter.TAB_MY_SITE) {
EventBus.getDefault().post(new MainViewPagerScrolled(positionOffset));
}
}
}
);
if (savedInstanceState == null) {
if (AccountHelper.isSignedIn()) {
boolean openedFromPush=(getIntent() != null && getIntent().getBooleanExtra(ARG_OPENED_FROM_PUSH,false));
if (openedFromPush) {
getIntent().putExtra(ARG_OPENED_FROM_PUSH,false);
launchWithNoteId();
}
 else {
int position=AppPrefs.getMainTabIndex();
if (mTabAdapter.isValidPosition(position) && position != mViewPager.getCurrentItem()) {
mViewPager.setCurrentItem(position);
}
checkMagicLinkSignIn();
}
}
 else {
ActivityLauncher.showSignInForResult(this);
}
}
}",0.977276288982918
13995,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comment_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        onBackPressed();
      }
    }
);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
    mHasUpdatedComments=savedInstanceState.getBoolean(KEY_HAS_UPDATED_COMMENTS);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    mCommentId=getIntent().getLongExtra(ReaderConstants.ARG_COMMENT_ID,0);
    if (NetworkUtils.isNetworkAvailable(this)) {
      ReaderCommentTable.purgeCommentsForPost(mBlogId,mPostId);
    }
  }
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(CustomSwipeRefreshLayout)findViewById(R.id.swipe_to_refresh),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      updatePostAndComments();
    }
  }
);
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  int spacingHorizontal=0;
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView.addItemDecoration(new RecyclerItemDecoration(spacingHorizontal,spacingVertical));
  mCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mEditComment=(SuggestionAutoCompleteText)mCommentBox.findViewById(R.id.edit_comment);
  mEditComment.getAutoSaveTextHelper().setUniqueId(String.format(LanguageUtils.getCurrentDeviceLanguage(this),""String_Node_Str"",AccountHelper.getCurrentUsernameForBlog(null),mPostId,mBlogId));
  mSubmitReplyBtn=mCommentBox.findViewById(R.id.btn_submit_reply);
  if (!loadPost()) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
    return;
  }
  mRecyclerView.setAdapter(getCommentAdapter());
  if (savedInstanceState != null) {
    setReplyToCommentId(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(this,(int)mBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions((int)mBlogId,this,mSuggestionServiceConnectionManager,mPost.isWP());
  if (mSuggestionAdapter != null) {
    mEditComment.setAdapter(mSuggestionAdapter);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reader_activity_comment_list);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null) {
    setSupportActionBar(toolbar);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        onBackPressed();
      }
    }
);
  }
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState != null) {
    mBlogId=savedInstanceState.getLong(ReaderConstants.ARG_BLOG_ID);
    mPostId=savedInstanceState.getLong(ReaderConstants.ARG_POST_ID);
    mRestorePosition=savedInstanceState.getInt(ReaderConstants.KEY_RESTORE_POSITION);
    mHasUpdatedComments=savedInstanceState.getBoolean(KEY_HAS_UPDATED_COMMENTS);
  }
 else {
    mBlogId=getIntent().getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
    mPostId=getIntent().getLongExtra(ReaderConstants.ARG_POST_ID,0);
    mCommentId=getIntent().getLongExtra(ReaderConstants.ARG_COMMENT_ID,0);
    if (NetworkUtils.isNetworkAvailable(this)) {
      ReaderCommentTable.purgeCommentsForPost(mBlogId,mPostId);
    }
  }
  mSwipeToRefreshHelper=new SwipeToRefreshHelper(this,(CustomSwipeRefreshLayout)findViewById(R.id.swipe_to_refresh),new SwipeToRefreshHelper.RefreshListener(){
    @Override public void onRefreshStarted(){
      updatePostAndComments();
    }
  }
);
  mRecyclerView=(ReaderRecyclerView)findViewById(R.id.recycler_view);
  int spacingHorizontal=0;
  int spacingVertical=DisplayUtils.dpToPx(this,1);
  mRecyclerView.addItemDecoration(new RecyclerItemDecoration(spacingHorizontal,spacingVertical));
  mCommentBox=(ViewGroup)findViewById(R.id.layout_comment_box);
  mEditComment=(SuggestionAutoCompleteText)mCommentBox.findViewById(R.id.edit_comment);
  mEditComment.getAutoSaveTextHelper().setUniqueId(String.format(Locale.US,""String_Node_Str"",AccountHelper.getCurrentUsernameForBlog(null),mPostId,mBlogId));
  mSubmitReplyBtn=mCommentBox.findViewById(R.id.btn_submit_reply);
  if (!loadPost()) {
    ToastUtils.showToast(this,R.string.reader_toast_err_get_post);
    finish();
    return;
  }
  mRecyclerView.setAdapter(getCommentAdapter());
  if (savedInstanceState != null) {
    setReplyToCommentId(savedInstanceState.getLong(KEY_REPLY_TO_COMMENT_ID));
  }
  refreshComments();
  mSuggestionServiceConnectionManager=new SuggestionServiceConnectionManager(this,(int)mBlogId);
  mSuggestionAdapter=SuggestionUtils.setupSuggestions((int)mBlogId,this,mSuggestionServiceConnectionManager,mPost.isWP());
  if (mSuggestionAdapter != null) {
    mEditComment.setAdapter(mSuggestionAdapter);
  }
}",0.991251562221032
13996,"@Override public boolean onKeyPreIme(int keyCode,KeyEvent event){
  if (event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    setFocusableInTouchMode(false);
    clearFocus();
    if (mBackListener != null) {
      mBackListener.onEditTextBack();
    }
  }
  return super.dispatchKeyEvent(event);
}","@Override public boolean onKeyPreIme(int keyCode,KeyEvent event){
  if (event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    setFocusableInTouchMode(false);
    clearFocus();
    if (mBackListener != null) {
      mBackListener.onEditTextBack();
    }
  }
  return super.onKeyPreIme(keyCode,event);
}",0.9455081001472754
13997,"public void process(){
  mNoteId=mIntent.getStringExtra(ARG_NOTE_ID);
  mActionType=mIntent.getStringExtra(ARG_ACTION_TYPE);
  mPushId=GROUP_NOTIFICATION_ID;
  if (mIntent.hasExtra(ARG_ACTION_REPLY_TEXT)) {
    mReplyText=mIntent.getStringExtra(ARG_ACTION_REPLY_TEXT);
  }
  if (TextUtils.isEmpty(mReplyText)) {
    Bundle remoteInput=RemoteInput.getResultsFromIntent(mIntent);
    if (remoteInput != null) {
      obtainReplyTextFromRemoteInputBundle(remoteInput);
    }
  }
  if (mActionType != null) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && mActionType.equals(ARG_ACTION_REPLY)) {
    }
 else {
      showIntermediateMessageToUser(getProcessingTitleForAction(mActionType));
    }
    if (mIntent.hasExtra(ARG_NOTE_BUNDLE)) {
      Bundle payload=mIntent.getBundleExtra(ARG_NOTE_BUNDLE);
      if (payload.containsKey(PUSH_ARG_NOTE_FULL_DATA)) {
        String base64FullData=payload.getString(PUSH_ARG_NOTE_FULL_DATA);
        mNote=new Note.Schema().buildFromBase64EncodedData(mNoteId,base64FullData);
      }
    }
    if (mNote == null) {
      RestRequest.Listener listener=new RestRequest.Listener(){
        @Override public void onResponse(        JSONObject response){
          if (response != null && !response.optBoolean(""String_Node_Str"")) {
            buildNoteFromJSONObject(response);
            performRequestedAction();
          }
        }
      }
;
      RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
        @Override public void onErrorResponse(        VolleyError error){
          requestFailed(mActionType);
        }
      }
;
      getNoteFromNoteId(mNoteId,listener,errorListener);
    }
 else {
      performRequestedAction();
    }
  }
 else {
    requestFailed(null);
  }
}","public void process(){
  mNoteId=mIntent.getStringExtra(ARG_NOTE_ID);
  mActionType=mIntent.getStringExtra(ARG_ACTION_TYPE);
  mPushId=GROUP_NOTIFICATION_ID;
  if (mIntent.hasExtra(ARG_ACTION_REPLY_TEXT)) {
    mReplyText=mIntent.getStringExtra(ARG_ACTION_REPLY_TEXT);
  }
  if (TextUtils.isEmpty(mReplyText)) {
    Bundle remoteInput=RemoteInput.getResultsFromIntent(mIntent);
    if (remoteInput != null) {
      obtainReplyTextFromRemoteInputBundle(remoteInput);
    }
  }
  if (mActionType != null) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && mActionType.equals(ARG_ACTION_REPLY)) {
    }
 else {
      showIntermediateMessageToUser(getProcessingTitleForAction(mActionType));
    }
    if (mIntent.hasExtra(ARG_NOTE_BUNDLE)) {
      Bundle payload=mIntent.getBundleExtra(ARG_NOTE_BUNDLE);
      if (payload.containsKey(PUSH_ARG_NOTE_FULL_DATA)) {
        String base64FullData=payload.getString(PUSH_ARG_NOTE_FULL_DATA);
        mNote=Note.buildFromBase64EncodedData(mNoteId,base64FullData);
      }
    }
    if (mNote == null) {
      RestRequest.Listener listener=new RestRequest.Listener(){
        @Override public void onResponse(        JSONObject response){
          if (response == null) {
            AppLog.w(AppLog.T.NOTIFS,""String_Node_Str"");
          }
          if (response != null && !response.optBoolean(""String_Node_Str"")) {
            buildNoteFromJSONObject(response);
            performRequestedAction();
          }
        }
      }
;
      RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
        @Override public void onErrorResponse(        VolleyError error){
          requestFailed(mActionType);
        }
      }
;
      getNoteFromNoteId(mNoteId,listener,errorListener);
    }
 else {
      performRequestedAction();
    }
  }
 else {
    requestFailed(null);
  }
}",0.9655555555555556
13998,"/** 
 * Converts the entire log to plain text
 * @param context
 * @return The log as plain text
 */
public static String toPlainText(Context context){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + PackageUtils.getVersionName(context)).append(""String_Node_Str"").append(""String_Node_Str"" + DeviceUtils.getInstance().getDeviceName(context)).append(""String_Node_Str"");
  Iterator<LogEntry> it=mLogEntries.iterator();
  int lineNum=1;
  while (it.hasNext()) {
    sb.append(String.format(""String_Node_Str"",lineNum)).append(it.next().mLogText).append(""String_Node_Str"");
    lineNum++;
  }
  return sb.toString();
}","/** 
 * Converts the entire log to plain text
 * @param context
 * @return The log as plain text
 */
public static String toPlainText(Context context){
  StringBuilder sb=new StringBuilder();
  sb.append(getAppInfoHeaderText(context)).append(""String_Node_Str"").append(getDeviceInfoHeaderText(context)).append(""String_Node_Str"");
  Iterator<LogEntry> it=mLogEntries.iterator();
  int lineNum=1;
  while (it.hasNext()) {
    sb.append(String.format(""String_Node_Str"",lineNum)).append(it.next().mLogText).append(""String_Node_Str"");
    lineNum++;
  }
  return sb.toString();
}",0.8172043010752689
13999,"/** 
 * Returns entire log as html for display (see AppLogViewerActivity)
 * @param context
 * @return Arraylist of Strings containing log messages
 */
public static ArrayList<String> toHtmlList(Context context){
  ArrayList<String> items=new ArrayList<String>();
  items.add(""String_Node_Str"" + PackageUtils.getVersionName(context) + ""String_Node_Str"");
  items.add(""String_Node_Str"" + DeviceUtils.getInstance().getDeviceName(context) + ""String_Node_Str"");
  Iterator<LogEntry> it=mLogEntries.iterator();
  while (it.hasNext()) {
    items.add(it.next().toHtml());
  }
  return items;
}","/** 
 * Returns entire log as html for display (see AppLogViewerActivity)
 * @param context
 * @return Arraylist of Strings containing log messages
 */
public static ArrayList<String> toHtmlList(Context context){
  ArrayList<String> items=new ArrayList<String>();
  items.add(""String_Node_Str"" + getAppInfoHeaderText(context) + ""String_Node_Str"");
  items.add(""String_Node_Str"" + getDeviceInfoHeaderText(context) + ""String_Node_Str"");
  Iterator<LogEntry> it=mLogEntries.iterator();
  while (it.hasNext()) {
    items.add(it.next().toHtml());
  }
  return items;
}",0.8149435273675065
14000,"public String getDeviceName(Context context){
  String manufacturer=Build.MANUFACTURER;
  String undecodedModel=Build.MODEL;
  String model=null;
  try {
    Properties prop=new Properties();
    InputStream fileStream;
    fileStream=context.getAssets().open(""String_Node_Str"");
    prop.load(fileStream);
    fileStream.close();
    String decodedModel=prop.getProperty(undecodedModel.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (decodedModel != null && !decodedModel.trim().equals(""String_Node_Str"")) {
      model=decodedModel;
    }
  }
 catch (  IOException e) {
    AppLog.e(T.UTILS,e.getMessage());
  }
  if (model == null) {
    if (undecodedModel.startsWith(manufacturer)) {
      model=capitalize(undecodedModel);
    }
 else {
      model=capitalize(manufacturer) + ""String_Node_Str"" + undecodedModel;
    }
  }
  return model;
}","public String getDeviceName(Context context){
  String manufacturer=Build.MANUFACTURER;
  String undecodedModel=Build.MODEL;
  String model=null;
  try {
    Properties prop=new Properties();
    InputStream fileStream;
    fileStream=context.getAssets().open(""String_Node_Str"");
    prop.load(fileStream);
    fileStream.close();
    String decodedModel=prop.getProperty(undecodedModel.replaceAll(""String_Node_Str"",""String_Node_Str""));
    if (decodedModel != null && !decodedModel.trim().equals(""String_Node_Str"")) {
      model=decodedModel;
    }
  }
 catch (  IOException e) {
    AppLog.e(T.UTILS,""String_Node_Str"",e);
    AppLog.d(T.UTILS,""String_Node_Str"" + ""String_Node_Str"");
  }
  if (model == null) {
    if (undecodedModel.startsWith(manufacturer)) {
      model=capitalize(undecodedModel);
    }
 else {
      model=capitalize(manufacturer) + ""String_Node_Str"" + undecodedModel;
    }
  }
  return model;
}",0.9470124013528748
