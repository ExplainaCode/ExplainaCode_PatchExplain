record_number,buggy_code,fixed_code,code_similarity
28001,"public void setImplementedInterfaces(List<ObjectType> implementedInterfaces){
  for (  ObjectType type : implementedInterfaces) {
    registry.registerTypeImplementingInterface(this,type);
  }
  this.implementedInterfaces=ImmutableList.copyOf(implementedInterfaces);
}","public void setImplementedInterfaces(List<ObjectType> implementedInterfaces){
  if (isConstructor()) {
    for (    ObjectType type : implementedInterfaces) {
      registry.registerTypeImplementingInterface(this,type);
    }
    this.implementedInterfaces=ImmutableList.copyOf(implementedInterfaces);
  }
 else {
    throw new UnsupportedOperationException();
  }
}",0.8296529968454258
28002,"private void addExpr(Node n,int minPrecedence,Context context){
  if ((NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == Context.IN_FOR_INIT_CLAUSE) && (n.isIn()))) {
    add(""String_Node_Str"");
    add(n,clearContextForNoInOperator(context));
    add(""String_Node_Str"");
  }
 else {
    add(n,context);
  }
}","private void addExpr(Node n,int minPrecedence,Context context){
  if ((NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
    add(""String_Node_Str"");
    add(n,Context.OTHER);
    add(""String_Node_Str"");
  }
 else {
    add(n,context);
  }
}",0.944
28003,"public void testObjectLit(){
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
}","public void testObjectLit(){
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
  assertPrint(""String_Node_Str"",""String_Node_Str"");
}",0.9015151515151516
28004,"private void traverse(Node node){
  if (!shouldVisit(node)) {
    return;
  }
  int visits=0;
  do {
    for (Node c=node.getFirstChild(); c != null; c=c.getNext()) {
      traverse(c);
    }
    visit(node);
    visits++;
    Preconditions.checkState(visits < 10000,""String_Node_Str"");
  }
 while (shouldRetraverse(node));
  exitNode(node);
}","private void traverse(Node node){
  if (!shouldVisit(node)) {
    return;
  }
  int visits=0;
  do {
    Node c=node.getFirstChild();
    while (c != null) {
      Node next=c.getNext();
      traverse(c);
      c=next;
    }
    visit(node);
    visits++;
    Preconditions.checkState(visits < 10000,""String_Node_Str"");
  }
 while (shouldRetraverse(node));
  exitNode(node);
}",0.8694444444444445
28005,"public void testSuppressEs5StrictWarning(){
  CompilerOptions options=createCompilerOptions();
  options.setWarningLevel(DiagnosticGroups.ES5_STRICT,CheckLevel.WARNING);
  testSame(options,""String_Node_Str"" + ""String_Node_Str"");
}","public void testSuppressEs5StrictWarning(){
  CompilerOptions options=createCompilerOptions();
  options.setWarningLevel(DiagnosticGroups.ES5_STRICT,CheckLevel.WARNING);
  test(options,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
}",0.9535864978902954
28006,"public void testVarDeclarationsIntoFor(){
  CompilerOptions options=createCompilerOptions();
  options.collapseVariableDeclarations=false;
  String code=""String_Node_Str"";
  testSame(options,code);
  options.collapseVariableDeclarations=false;
  test(options,code,""String_Node_Str"");
}","public void testVarDeclarationsIntoFor(){
  CompilerOptions options=createCompilerOptions();
  options.collapseVariableDeclarations=false;
  String code=""String_Node_Str"";
  testSame(options,code);
  options.collapseVariableDeclarations=true;
  test(options,code,""String_Node_Str"");
}",0.9876977152899824
28007,"protected Node parse(String[] original,CompilerOptions options){
  Compiler compiler=new Compiler();
  List<SourceFile> inputs=Lists.newArrayList();
  for (int i=0; i < original.length; i++) {
    inputs.add(SourceFile.fromCode(""String_Node_Str"" + i,original[i]));
  }
  compiler.init(externs,inputs,options);
  checkUnexpectedErrorsOrWarnings(compiler,0);
  Node all=compiler.parseInputs();
  checkUnexpectedErrorsOrWarnings(compiler,0);
  Node n=all.getLastChild();
  Node externs=all.getFirstChild();
  (new CreateSyntheticBlocks(compiler,""String_Node_Str"",""String_Node_Str"")).process(externs,n);
  (new Normalize(compiler,false)).process(externs,n);
  (MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(externs,n);
  (new Denormalize(compiler)).process(externs,n);
  return n;
}","protected Node parse(String[] original,CompilerOptions options){
  Compiler compiler=new Compiler();
  List<SourceFile> inputs=Lists.newArrayList();
  for (int i=0; i < original.length; i++) {
    inputs.add(SourceFile.fromCode(""String_Node_Str"" + i,original[i]));
  }
  compiler.init(externs,inputs,options);
  checkUnexpectedErrorsOrWarnings(compiler,0);
  Node all=compiler.parseInputs();
  checkUnexpectedErrorsOrWarnings(compiler,0);
  Node n=all.getLastChild();
  Node externs=all.getFirstChild();
  (new CreateSyntheticBlocks(compiler,""String_Node_Str"",""String_Node_Str"")).process(externs,n);
  return n;
}",0.8615819209039548
28008,"/** 
 * This is the meat of the type checking.  It is basically one big switch, with each case representing one type of parse tree node.  The individual cases are usually pretty straightforward.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */
@Override public void visit(NodeTraversal t,Node n,Node parent){
  JSType childType;
  JSType leftType, rightType;
  Node left, right;
  boolean typeable=true;
switch (n.getType()) {
case Token.NAME:
    typeable=visitName(t,n,parent);
  break;
case Token.PARAM_LIST:
if (!parent.isFunction()) {
  ensureTyped(t,n,getJSType(n.getFirstChild()));
}
 else {
  typeable=false;
}
break;
case Token.COMMA:
ensureTyped(t,n,getJSType(n.getLastChild()));
break;
case Token.TRUE:
case Token.FALSE:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.THIS:
ensureTyped(t,n,t.getScope().getTypeOfThis());
break;
case Token.NULL:
ensureTyped(t,n,NULL_TYPE);
break;
case Token.NUMBER:
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.STRING:
ensureTyped(t,n,STRING_TYPE);
break;
case Token.STRING_KEY:
typeable=false;
break;
case Token.GETTER_DEF:
case Token.SETTER_DEF:
break;
case Token.ARRAYLIT:
ensureTyped(t,n,ARRAY_TYPE);
break;
case Token.REGEXP:
ensureTyped(t,n,REGEXP_TYPE);
break;
case Token.GETPROP:
visitGetProp(t,n,parent);
typeable=!(parent.isAssign() && parent.getFirstChild() == n);
break;
case Token.GETELEM:
visitGetElem(t,n);
typeable=false;
break;
case Token.VAR:
visitVar(t,n);
typeable=false;
break;
case Token.NEW:
visitNew(t,n);
typeable=true;
break;
case Token.CALL:
visitCall(t,n);
typeable=!parent.isExprResult();
break;
case Token.RETURN:
visitReturn(t,n);
typeable=false;
break;
case Token.DEC:
case Token.INC:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.NOT:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.VOID:
ensureTyped(t,n,VOID_TYPE);
break;
case Token.TYPEOF:
ensureTyped(t,n,STRING_TYPE);
break;
case Token.BITNOT:
childType=getJSType(n.getFirstChild());
if (!childType.matchesInt32Context()) {
report(t,n,BIT_OPERATION,NodeUtil.opToStr(n.getType()),childType.toString());
}
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.POS:
case Token.NEG:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.EQ:
case Token.NE:
case Token.SHEQ:
case Token.SHNE:
{
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined();
TernaryValue result=TernaryValue.UNKNOWN;
if (n.getType() == Token.EQ || n.getType() == Token.NE) {
result=leftTypeRestricted.testForEquality(rightTypeRestricted);
if (n.isNE()) {
result=result.not();
}
}
 else {
if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
result=n.getType() == Token.SHEQ ? TernaryValue.FALSE : TernaryValue.TRUE;
}
}
if (result != TernaryValue.UNKNOWN) {
report(t,n,DETERMINISTIC_TEST,leftType.toString(),rightType.toString(),result.toString());
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
}
case Token.LT:
case Token.LE:
case Token.GT:
case Token.GE:
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
if (rightType.isNumber()) {
validator.expectNumber(t,n,leftType,""String_Node_Str"");
}
 else if (leftType.isNumber()) {
validator.expectNumber(t,n,rightType,""String_Node_Str"");
}
 else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
}
 else {
String message=""String_Node_Str"";
validator.expectString(t,n,leftType,message);
validator.expectNotNullOrUndefined(t,n,leftType,message,getNativeType(STRING_TYPE));
message=""String_Node_Str"";
validator.expectString(t,n,rightType,message);
validator.expectNotNullOrUndefined(t,n,rightType,message,getNativeType(STRING_TYPE));
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.IN:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right);
validator.expectObject(t,n,rightType,""String_Node_Str"");
validator.expectString(t,left,leftType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.INSTANCEOF:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right).restrictByNotNullOrUndefined();
validator.expectAnyObject(t,left,leftType,""String_Node_Str"");
validator.expectActualObject(t,right,rightType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.ASSIGN:
visitAssign(t,n);
typeable=false;
break;
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.ASSIGN_URSH:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
case Token.ASSIGN_BITOR:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_SUB:
case Token.ASSIGN_ADD:
case Token.ASSIGN_MUL:
case Token.LSH:
case Token.RSH:
case Token.URSH:
case Token.DIV:
case Token.MOD:
case Token.BITOR:
case Token.BITXOR:
case Token.BITAND:
case Token.SUB:
case Token.ADD:
case Token.MUL:
visitBinaryOperator(n.getType(),t,n);
break;
case Token.DELPROP:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.CASE:
JSType switchType=getJSType(parent.getFirstChild());
JSType caseType=getJSType(n.getFirstChild());
validator.expectSwitchMatchesCase(t,n,switchType,caseType);
typeable=false;
break;
case Token.WITH:
{
Node child=n.getFirstChild();
childType=getJSType(child);
validator.expectObject(t,child,childType,""String_Node_Str"");
typeable=false;
break;
}
case Token.FUNCTION:
visitFunction(t,n);
break;
case Token.LABEL:
case Token.LABEL_NAME:
case Token.SWITCH:
case Token.BREAK:
case Token.CATCH:
case Token.TRY:
case Token.SCRIPT:
case Token.EXPR_RESULT:
case Token.BLOCK:
case Token.EMPTY:
case Token.DEFAULT_CASE:
case Token.CONTINUE:
case Token.DEBUGGER:
case Token.THROW:
typeable=false;
break;
case Token.DO:
case Token.FOR:
case Token.IF:
case Token.WHILE:
typeable=false;
break;
case Token.AND:
case Token.HOOK:
case Token.OBJECTLIT:
case Token.OR:
if (n.getJSType() != null) {
ensureTyped(t,n);
}
 else {
if ((n.isObjectLit()) && (parent.getJSType() instanceof EnumType)) {
ensureTyped(t,n,parent.getJSType());
}
 else {
ensureTyped(t,n);
}
}
if (n.isObjectLit()) {
for (Node key : n.children()) {
visitObjLitKey(t,key,n);
}
}
break;
default :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
ensureTyped(t,n);
break;
}
typeable=typeable && !inExterns;
if (typeable) {
doPercentTypedAccounting(t,n);
}
checkNoTypeCheckSection(n,false);
}","/** 
 * This is the meat of the type checking.  It is basically one big switch, with each case representing one type of parse tree node.  The individual cases are usually pretty straightforward.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */
@Override public void visit(NodeTraversal t,Node n,Node parent){
  JSType childType;
  JSType leftType, rightType;
  Node left, right;
  boolean typeable=true;
switch (n.getType()) {
case Token.NAME:
    typeable=visitName(t,n,parent);
  break;
case Token.PARAM_LIST:
if (!parent.isFunction()) {
  ensureTyped(t,n,getJSType(n.getFirstChild()));
}
 else {
  typeable=false;
}
break;
case Token.COMMA:
ensureTyped(t,n,getJSType(n.getLastChild()));
break;
case Token.TRUE:
case Token.FALSE:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.THIS:
ensureTyped(t,n,t.getScope().getTypeOfThis());
break;
case Token.NULL:
ensureTyped(t,n,NULL_TYPE);
break;
case Token.NUMBER:
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.STRING:
ensureTyped(t,n,STRING_TYPE);
break;
case Token.STRING_KEY:
typeable=false;
break;
case Token.GETTER_DEF:
case Token.SETTER_DEF:
break;
case Token.ARRAYLIT:
ensureTyped(t,n,ARRAY_TYPE);
break;
case Token.REGEXP:
ensureTyped(t,n,REGEXP_TYPE);
break;
case Token.GETPROP:
visitGetProp(t,n,parent);
typeable=!(parent.isAssign() && parent.getFirstChild() == n);
break;
case Token.GETELEM:
visitGetElem(t,n);
typeable=false;
break;
case Token.VAR:
visitVar(t,n);
typeable=false;
break;
case Token.NEW:
visitNew(t,n);
typeable=true;
break;
case Token.CALL:
visitCall(t,n);
typeable=!parent.isExprResult();
break;
case Token.RETURN:
visitReturn(t,n);
typeable=false;
break;
case Token.DEC:
case Token.INC:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.NOT:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.VOID:
ensureTyped(t,n,VOID_TYPE);
break;
case Token.TYPEOF:
ensureTyped(t,n,STRING_TYPE);
break;
case Token.BITNOT:
childType=getJSType(n.getFirstChild());
if (!childType.matchesInt32Context()) {
report(t,n,BIT_OPERATION,NodeUtil.opToStr(n.getType()),childType.toString());
}
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.POS:
case Token.NEG:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.EQ:
case Token.NE:
case Token.SHEQ:
case Token.SHNE:
{
left=n.getFirstChild();
right=n.getLastChild();
if (left.isTypeOf()) {
if (right.isString()) {
checkTypeofString(t,right,right.getString());
}
}
 else if (right.isTypeOf() && left.isString()) {
checkTypeofString(t,left,left.getString());
}
leftType=getJSType(left);
rightType=getJSType(right);
JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined();
TernaryValue result=TernaryValue.UNKNOWN;
if (n.getType() == Token.EQ || n.getType() == Token.NE) {
result=leftTypeRestricted.testForEquality(rightTypeRestricted);
if (n.isNE()) {
result=result.not();
}
}
 else {
if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
result=n.getType() == Token.SHEQ ? TernaryValue.FALSE : TernaryValue.TRUE;
}
}
if (result != TernaryValue.UNKNOWN) {
report(t,n,DETERMINISTIC_TEST,leftType.toString(),rightType.toString(),result.toString());
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
}
case Token.LT:
case Token.LE:
case Token.GT:
case Token.GE:
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
if (rightType.isNumber()) {
validator.expectNumber(t,n,leftType,""String_Node_Str"");
}
 else if (leftType.isNumber()) {
validator.expectNumber(t,n,rightType,""String_Node_Str"");
}
 else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
}
 else {
String message=""String_Node_Str"";
validator.expectString(t,n,leftType,message);
validator.expectNotNullOrUndefined(t,n,leftType,message,getNativeType(STRING_TYPE));
message=""String_Node_Str"";
validator.expectString(t,n,rightType,message);
validator.expectNotNullOrUndefined(t,n,rightType,message,getNativeType(STRING_TYPE));
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.IN:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right);
validator.expectObject(t,n,rightType,""String_Node_Str"");
validator.expectString(t,left,leftType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.INSTANCEOF:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right).restrictByNotNullOrUndefined();
validator.expectAnyObject(t,left,leftType,""String_Node_Str"");
validator.expectActualObject(t,right,rightType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.ASSIGN:
visitAssign(t,n);
typeable=false;
break;
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.ASSIGN_URSH:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
case Token.ASSIGN_BITOR:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_SUB:
case Token.ASSIGN_ADD:
case Token.ASSIGN_MUL:
case Token.LSH:
case Token.RSH:
case Token.URSH:
case Token.DIV:
case Token.MOD:
case Token.BITOR:
case Token.BITXOR:
case Token.BITAND:
case Token.SUB:
case Token.ADD:
case Token.MUL:
visitBinaryOperator(n.getType(),t,n);
break;
case Token.DELPROP:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.CASE:
JSType switchType=getJSType(parent.getFirstChild());
JSType caseType=getJSType(n.getFirstChild());
validator.expectSwitchMatchesCase(t,n,switchType,caseType);
typeable=false;
break;
case Token.WITH:
{
Node child=n.getFirstChild();
childType=getJSType(child);
validator.expectObject(t,child,childType,""String_Node_Str"");
typeable=false;
break;
}
case Token.FUNCTION:
visitFunction(t,n);
break;
case Token.LABEL:
case Token.LABEL_NAME:
case Token.SWITCH:
case Token.BREAK:
case Token.CATCH:
case Token.TRY:
case Token.SCRIPT:
case Token.EXPR_RESULT:
case Token.BLOCK:
case Token.EMPTY:
case Token.DEFAULT_CASE:
case Token.CONTINUE:
case Token.DEBUGGER:
case Token.THROW:
typeable=false;
break;
case Token.DO:
case Token.FOR:
case Token.IF:
case Token.WHILE:
typeable=false;
break;
case Token.AND:
case Token.HOOK:
case Token.OBJECTLIT:
case Token.OR:
if (n.getJSType() != null) {
ensureTyped(t,n);
}
 else {
if ((n.isObjectLit()) && (parent.getJSType() instanceof EnumType)) {
ensureTyped(t,n,parent.getJSType());
}
 else {
ensureTyped(t,n);
}
}
if (n.isObjectLit()) {
for (Node key : n.children()) {
visitObjLitKey(t,key,n);
}
}
break;
default :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
ensureTyped(t,n);
break;
}
typeable=typeable && !inExterns;
if (typeable) {
doPercentTypedAccounting(t,n);
}
checkNoTypeCheckSection(n,false);
}",0.9785629804849202
28009,"Candidate(String varName,Node defCfgNode,Node use,Node useCfgNode){
  Preconditions.checkArgument(use.isName());
  this.varName=varName;
  this.defCfgNode=defCfgNode;
  this.use=use;
  this.useCfgNode=useCfgNode;
}","Candidate(String varName,Definition defMetadata,Node use,Node useCfgNode){
  Preconditions.checkArgument(use.isName());
  this.varName=varName;
  this.defMetadata=defMetadata;
  this.use=use;
  this.useCfgNode=useCfgNode;
}",0.8283752860411899
28010,"private boolean canInline(){
  if (defCfgNode.isFunction()) {
    return false;
  }
  getDefinition(defCfgNode,null);
  getNumUseInUseCfgNode(useCfgNode,null);
  if (def == null) {
    return false;
  }
  if (def.isAssign() && !NodeUtil.isExprAssign(def.getParent())) {
    return false;
  }
  if (checkRightOf(def,defCfgNode,SIDE_EFFECT_PREDICATE)) {
    return false;
  }
  if (checkLeftOf(use,useCfgNode,SIDE_EFFECT_PREDICATE)) {
    return false;
  }
  if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {
    return false;
  }
  if (numUseWithinUseCfgNode != 1) {
    return false;
  }
  if (NodeUtil.isWithinLoop(use)) {
    return false;
  }
  Collection<Node> uses=reachingUses.getUses(varName,defCfgNode);
  if (uses.size() != 1) {
    return false;
  }
  if (NodeUtil.has(def.getLastChild(),new Predicate<Node>(){
    @Override public boolean apply(    Node input){
switch (input.getType()) {
case Token.GETELEM:
case Token.GETPROP:
case Token.ARRAYLIT:
case Token.OBJECTLIT:
case Token.REGEXP:
case Token.NEW:
        return true;
    }
    return false;
  }
}
,new Predicate<Node>(){
  @Override public boolean apply(  Node input){
    return !input.isFunction();
  }
}
)) {
  return false;
}
if (NodeUtil.isStatementBlock(defCfgNode.getParent()) && defCfgNode.getNext() != useCfgNode) {
  CheckPathsBetweenNodes<Node,ControlFlowGraph.Branch> pathCheck=new CheckPathsBetweenNodes<Node,ControlFlowGraph.Branch>(cfg,cfg.getDirectedGraphNode(defCfgNode),cfg.getDirectedGraphNode(useCfgNode),SIDE_EFFECT_PREDICATE,Predicates.<DiGraphEdge<Node,ControlFlowGraph.Branch>>alwaysTrue(),false);
  if (pathCheck.somePathsSatisfyPredicate()) {
    return false;
  }
}
return true;
}","private boolean canInline(){
  if (getDefCfgNode().isFunction()) {
    return false;
  }
  for (  Var dependency : defMetadata.depends) {
    if (inlinedNewDependencies.contains(dependency)) {
      return false;
    }
  }
  getDefinition(getDefCfgNode(),null);
  getNumUseInUseCfgNode(useCfgNode,null);
  if (def == null) {
    return false;
  }
  if (def.isAssign() && !NodeUtil.isExprAssign(def.getParent())) {
    return false;
  }
  if (checkRightOf(def,getDefCfgNode(),SIDE_EFFECT_PREDICATE)) {
    return false;
  }
  if (checkLeftOf(use,useCfgNode,SIDE_EFFECT_PREDICATE)) {
    return false;
  }
  if (NodeUtil.mayHaveSideEffects(def.getLastChild())) {
    return false;
  }
  if (numUseWithinUseCfgNode != 1) {
    return false;
  }
  if (NodeUtil.isWithinLoop(use)) {
    return false;
  }
  Collection<Node> uses=reachingUses.getUses(varName,getDefCfgNode());
  if (uses.size() != 1) {
    return false;
  }
  if (NodeUtil.has(def.getLastChild(),new Predicate<Node>(){
    @Override public boolean apply(    Node input){
switch (input.getType()) {
case Token.GETELEM:
case Token.GETPROP:
case Token.ARRAYLIT:
case Token.OBJECTLIT:
case Token.REGEXP:
case Token.NEW:
        return true;
    }
    return false;
  }
}
,new Predicate<Node>(){
  @Override public boolean apply(  Node input){
    return !input.isFunction();
  }
}
)) {
  return false;
}
if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() != useCfgNode) {
  CheckPathsBetweenNodes<Node,ControlFlowGraph.Branch> pathCheck=new CheckPathsBetweenNodes<Node,ControlFlowGraph.Branch>(cfg,cfg.getDirectedGraphNode(getDefCfgNode()),cfg.getDirectedGraphNode(useCfgNode),SIDE_EFFECT_PREDICATE,Predicates.<DiGraphEdge<Node,ControlFlowGraph.Branch>>alwaysTrue(),false);
  if (pathCheck.somePathsSatisfyPredicate()) {
    return false;
  }
}
return true;
}",0.905852417302799
28011,"@Override public void enterScope(NodeTraversal t){
  if (t.inGlobalScope()) {
    return;
  }
  if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
    return;
  }
  ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
  Preconditions.checkState(t.getScopeRoot().isFunction());
  cfa.process(null,t.getScopeRoot().getLastChild());
  cfg=cfa.getCfg();
  reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
  reachingDef.analyze();
  candidates=Lists.newLinkedList();
  new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
  reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
  reachingUses.analyze();
  for (  Candidate c : candidates) {
    if (c.canInline()) {
      c.inlineVariable();
    }
  }
}","@Override public void enterScope(NodeTraversal t){
  if (t.inGlobalScope()) {
    return;
  }
  if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
    return;
  }
  ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,true);
  Preconditions.checkState(t.getScopeRoot().isFunction());
  cfa.process(null,t.getScopeRoot().getLastChild());
  cfg=cfa.getCfg();
  reachingDef=new MustBeReachingVariableDef(cfg,t.getScope(),compiler);
  reachingDef.analyze();
  candidates=Lists.newLinkedList();
  new NodeTraversal(compiler,new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
  reachingUses=new MaybeReachingVariableUse(cfg,t.getScope(),compiler);
  reachingUses.analyze();
  for (  Candidate c : candidates) {
    if (c.canInline()) {
      c.inlineVariable();
      if (!c.defMetadata.depends.isEmpty()) {
        inlinedNewDependencies.add(t.getScope().getVar(c.varName));
      }
    }
  }
}",0.9310734463276836
28012,"/** 
 * Gets the must reaching definition of a given node. The node must be one of the control flow graph nodes.
 * @param name name of the variable. It can only be names of local variablethat are not function parameters, escaped variables or variables declared in catch.
 * @param useNode the location of the use where the definition reaches.
 */
Node getDef(String name,Node useNode){
  Preconditions.checkArgument(getCfg().hasNode(useNode));
  GraphNode<Node,Branch> n=getCfg().getNode(useNode);
  FlowState<MustDef> state=n.getAnnotation();
  Definition def=state.getIn().reachingDef.get(jsScope.getVar(name));
  if (def == null) {
    return null;
  }
 else {
    return def.node;
  }
}","/** 
 * Gets the must reaching definition of a given node.
 * @param name name of the variable. It can only be names of local variablethat are not function parameters, escaped variables or variables declared in catch.
 * @param useNode the location of the use where the definition reaches.
 */
Definition getDef(String name,Node useNode){
  Preconditions.checkArgument(getCfg().hasNode(useNode));
  GraphNode<Node,Branch> n=getCfg().getNode(useNode);
  FlowState<MustDef> state=n.getAnnotation();
  return state.getIn().reachingDef.get(jsScope.getVar(name));
}",0.832933653077538
28013,"boolean dependsOnOuterScopeVars(String name,Node useNode){
  Preconditions.checkArgument(getCfg().hasNode(useNode));
  GraphNode<Node,Branch> n=getCfg().getNode(useNode);
  FlowState<MustDef> state=n.getAnnotation();
  Definition def=state.getIn().reachingDef.get(jsScope.getVar(name));
  if (def.unknownDependencies) {
    return true;
  }
  for (  Var s : def.depends) {
    if (s.scope != jsScope) {
      return true;
    }
  }
  return false;
}","boolean dependsOnOuterScopeVars(Definition def){
  if (def.unknownDependencies) {
    return true;
  }
  for (  Var s : def.depends) {
    if (s.scope != jsScope) {
      return true;
    }
  }
  return false;
}",0.6
28014,"public void testFunctionParams1(){
  computeDefUse(""String_Node_Str"");
  assertSame(def,defUse.getDef(""String_Node_Str"",use));
}","public void testFunctionParams1(){
  computeDefUse(""String_Node_Str"");
  assertSame(def,defUse.getDefNode(""String_Node_Str"",use));
}",0.9846153846153848
28015,"public void testFunctionParams2(){
  computeDefUse(""String_Node_Str"");
  assertNotSame(def,defUse.getDef(""String_Node_Str"",use));
}","public void testFunctionParams2(){
  computeDefUse(""String_Node_Str"");
  assertNotSame(def,defUse.getDefNode(""String_Node_Str"",use));
}",0.9849624060150376
28016,"/** 
 * The use of x at U: is the definition of x at D:.
 */
private void assertMatch(String src){
  computeDefUse(src);
  assertSame(def,defUse.getDef(""String_Node_Str"",use));
}","/** 
 * The use of x at U: is the definition of x at D:.
 */
private void assertMatch(String src){
  computeDefUse(src);
  assertSame(def,defUse.getDefNode(""String_Node_Str"",use));
}",0.9888888888888888
28017,"public void testArgumentsObjectEscaped(){
  computeDefUse(""String_Node_Str"");
  assertNotSame(def,defUse.getDef(""String_Node_Str"",use));
}","public void testArgumentsObjectEscaped(){
  computeDefUse(""String_Node_Str"");
  assertNotSame(def,defUse.getDefNode(""String_Node_Str"",use));
}",0.9857142857142858
28018,"/** 
 * The use of x at U: is not the definition of x at D:.
 */
private void assertNotMatch(String src){
  computeDefUse(src);
  assertNotSame(def,defUse.getDef(""String_Node_Str"",use));
}","/** 
 * The use of x at U: is not the definition of x at D:.
 */
private void assertNotMatch(String src){
  computeDefUse(src);
  assertNotSame(def,defUse.getDefNode(""String_Node_Str"",use));
}",0.9894736842105264
28019,"public void testArgumentsObjectModifications(){
  computeDefUse(""String_Node_Str"");
  assertNotSame(def,defUse.getDef(""String_Node_Str"",use));
}","public void testArgumentsObjectModifications(){
  computeDefUse(""String_Node_Str"");
  assertNotSame(def,defUse.getDefNode(""String_Node_Str"",use));
}",0.9863013698630136
28020,"@Override public void addDeclaredName(String name){
  Preconditions.checkState(!name.equals(ARGUMENTS));
  if (!declarations.containsKey(name)) {
    declarations.put(name,getUniqueName(name));
  }
}","@Override public void addDeclaredName(String name){
  if (whitelist.contains(name)) {
    delegate.addDeclaredName(name);
  }
}",0.6625766871165644
28021,"@Override public String getReplacementName(String oldName){
  return declarations.get(oldName);
}","@Override public String getReplacementName(String oldName){
  return whitelist.contains(oldName) ? delegate.getReplacementName(oldName) : null;
}",0.7107438016528925
28022,"@Override public boolean stripConstIfReplaced(){
  return removeConstness;
}","@Override public boolean stripConstIfReplaced(){
  return delegate.stripConstIfReplaced();
}",0.8095238095238095
28023,"@Override public Renamer forChildScope(){
  return new InlineRenamer(uniqueIdSupplier,idPrefix,false);
}","@Override public Renamer forChildScope(){
  return new WhitelistedRenamer(delegate.forChildScope(),whitelist);
}",0.7129629629629629
28024,"private void findAliases(NodeTraversal t){
  Scope scope=t.getScope();
  for (  Var v : scope.getVarIterable()) {
    Node n=v.getNode();
    int type=n.getType();
    Node parent=n.getParent();
    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
      String name=n.getString();
      Var aliasVar=scope.getVar(name);
      aliases.put(name,aliasVar);
      String qualifiedName=aliasVar.getInitialValue().getQualifiedName();
      transformation.addAlias(name,qualifiedName);
    }
 else     if (v.isBleedingFunction()) {
    }
 else     if (parent.getType() == Token.LP) {
    }
 else {
      report(t,n,GOOG_SCOPE_NON_ALIAS_LOCAL,n.getString());
    }
  }
}","private void findAliases(NodeTraversal t){
  Scope scope=t.getScope();
  for (  Var v : scope.getVarIterable()) {
    Node n=v.getNode();
    int type=n.getType();
    Node parent=n.getParent();
    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
      String name=n.getString();
      Var aliasVar=scope.getVar(name);
      aliases.put(name,aliasVar);
      String qualifiedName=aliasVar.getInitialValue().getQualifiedName();
      transformation.addAlias(name,qualifiedName);
      int rootIndex=qualifiedName.indexOf(""String_Node_Str"");
      if (rootIndex != -1) {
        String qNameRoot=qualifiedName.substring(0,rootIndex);
        if (!aliases.containsKey(qNameRoot)) {
          forbiddenLocals.add(qNameRoot);
        }
      }
    }
 else     if (v.isBleedingFunction()) {
    }
 else     if (parent.getType() == Token.LP) {
    }
 else {
      report(t,n,GOOG_SCOPE_NON_ALIAS_LOCAL,n.getString());
    }
  }
}",0.8415300546448088
28025,"@Override public void exitScope(NodeTraversal t){
  if (t.getScopeDepth() == 2) {
    aliases.clear();
    transformation=null;
  }
}","@Override public void exitScope(NodeTraversal t){
  if (t.getScopeDepth() > 2) {
    findNamespaceShadows(t);
  }
  if (t.getScopeDepth() == 2) {
    renameNamespaceShadows(t);
    aliases.clear();
    forbiddenLocals.clear();
    transformation=null;
    hasNamespaceShadows=false;
  }
}",0.5938242280285035
28026,"/** 
 * @param iterator The to use while inspecting the nodebeginning with the deepest ancestor.
 */
private LocalVarMotion(Node nameNode,FunctionlessLocalScope iterator){
  Preconditions.checkArgument(nameNode.isName());
  Node valueNode=NodeUtil.getAssignedValue(nameNode);
  this.varName=nameNode.getString();
  this.valueHasSideEffects=valueNode != null && NodeUtil.mayHaveSideEffects(valueNode);
  this.iterator=iterator;
  advanceLookAhead(true);
}","/** 
 * @param iterator The iterator to use while inspecting the nodebeginning with the deepest ancestor.
 */
private LocalVarMotion(Node nameNode,FunctionlessLocalScope iterator){
  Preconditions.checkArgument(nameNode.isName());
  Node valueNode=NodeUtil.getAssignedValue(nameNode);
  this.varName=nameNode.getString();
  this.valueHasSideEffects=valueNode != null && NodeUtil.mayHaveSideEffects(valueNode);
  this.iterator=iterator;
  advanceLookAhead(true);
}",0.990185387131952
28027,"private void advanceLookAhead(boolean atStart){
  if (!atStart) {
    if (lookAhead == null) {
      return;
    }
    Node curNode=iterator.current();
    if (curNode.isName() && varName.equals(curNode.getString())) {
      lookAhead=null;
      return;
    }
  }
  if (!iterator.hasNext()) {
    lookAhead=null;
    return;
  }
  Node nextNode=iterator.next();
  Node nextParent=iterator.currentParent();
  int type=nextNode.getType();
  if (valueHasSideEffects) {
    if (type == Token.NAME && !varName.equals(nextNode.getString())) {
      boolean blocked=false;
      if (nextParent == null) {
        blocked=true;
      }
 else {
        boolean assignsName=(nextParent.isAssign() && nextNode == nextParent.getFirstChild());
        boolean isVarDeclaration=(nextParent.isVar());
        if (!assignsName && !isVarDeclaration) {
          blocked=true;
        }
      }
      if (blocked) {
        lookAhead=null;
        return;
      }
    }
  }
  if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) && type != Token.NAME || type == Token.NAME && nextParent.isCatch()) {
    lookAhead=null;
    return;
  }
  lookAhead=nextNode;
}","private void advanceLookAhead(boolean atStart){
  if (!atStart) {
    if (lookAhead == null) {
      return;
    }
    Node curNode=iterator.current();
    if (curNode.isName() && varName.equals(curNode.getString())) {
      lookAhead=null;
      return;
    }
  }
  if (!iterator.hasNext()) {
    lookAhead=null;
    return;
  }
  Node nextNode=iterator.next();
  Node nextParent=iterator.currentParent();
  int type=nextNode.getType();
  if (valueHasSideEffects) {
    boolean readsState=false;
    if ((nextNode.isName() && !varName.equals(nextNode.getString())) || (nextNode.isGetProp() || nextNode.isGetElem())) {
      if (nextParent == null || !NodeUtil.isVarOrSimpleAssignLhs(nextNode,nextParent)) {
        readsState=true;
      }
    }
 else     if (nextNode.isCall() || nextNode.isNew()) {
      readsState=true;
    }
    if (readsState) {
      lookAhead=null;
      return;
    }
  }
  if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) && type != Token.NAME || type == Token.NAME && nextParent.isCatch()) {
    lookAhead=null;
    return;
  }
  lookAhead=nextNode;
}",0.4837837837837838
28028,"/** 
 * Returns a   {@code CompilerEnvirons} suitable for using Rhinoin an IDE environment.  Most features are enabled by default. The  {@link ErrorReporter} is set to an {@link ErrorCollector}.
 */
public static CompilerEnvirons ideEnvirons(){
  CompilerEnvirons env=new CompilerEnvirons();
  env.setRecoverFromErrors(true);
  env.setRecordingComments(true);
  env.setStrictMode(true);
  env.setWarnTrailingComma(true);
  env.setLanguageVersion(170);
  env.setReservedKeywordAsIdentifier(true);
  env.setAllowKeywordAsObjectPropertyName(true);
  env.setIdeMode(true);
  env.setErrorReporter(new ErrorCollector());
  return env;
}","/** 
 * Returns a   {@code CompilerEnvirons} suitable for using Rhinoin an IDE environment.  Most features are enabled by default. The  {@link ErrorReporter} is set to an {@link ErrorCollector}.
 */
public static CompilerEnvirons ideEnvirons(){
  CompilerEnvirons env=new CompilerEnvirons();
  env.setRecoverFromErrors(true);
  env.setRecordingComments(true);
  env.setStrictMode(true);
  env.setWarnTrailingComma(true);
  env.setLanguageVersion(170);
  env.setReservedKeywordAsIdentifier(true);
  env.setIdeMode(true);
  env.setErrorReporter(new ErrorCollector());
  return env;
}",0.893476465730801
28029,"public CompilerEnvirons(){
  errorReporter=DefaultErrorReporter.instance;
  languageVersion=Context.VERSION_DEFAULT;
  generateDebugInfo=true;
  reservedKeywordAsIdentifier=true;
  allowKeywordAsObjectPropertyName=false;
  allowMemberExprAsFunctionName=false;
  xmlAvailable=true;
  optimizationLevel=0;
  generatingSource=true;
  strictMode=false;
  warningAsError=false;
  generateObserverCount=false;
  allowSharpComments=false;
}","public CompilerEnvirons(){
  errorReporter=DefaultErrorReporter.instance;
  languageVersion=Context.VERSION_DEFAULT;
  generateDebugInfo=true;
  reservedKeywordAsIdentifier=true;
  allowMemberExprAsFunctionName=false;
  xmlAvailable=true;
  optimizationLevel=0;
  generatingSource=true;
  strictMode=false;
  warningAsError=false;
  generateObserverCount=false;
  allowSharpComments=false;
}",0.9490291262135924
28030,"public void initFromContext(Context cx){
  setErrorReporter(cx.getErrorReporter());
  languageVersion=cx.getLanguageVersion();
  generateDebugInfo=(!cx.isGeneratingDebugChanged() || cx.isGeneratingDebug());
  reservedKeywordAsIdentifier=cx.hasFeature(Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
  allowKeywordAsObjectPropertyName=(languageVersion >= Context.VERSION_1_8);
  allowMemberExprAsFunctionName=cx.hasFeature(Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
  strictMode=cx.hasFeature(Context.FEATURE_STRICT_MODE);
  warningAsError=cx.hasFeature(Context.FEATURE_WARNING_AS_ERROR);
  xmlAvailable=cx.hasFeature(Context.FEATURE_E4X);
  optimizationLevel=cx.getOptimizationLevel();
  generatingSource=cx.isGeneratingSource();
  activationNames=cx.activationNames;
  generateObserverCount=cx.generateObserverCount;
}","public void initFromContext(Context cx){
  setErrorReporter(cx.getErrorReporter());
  languageVersion=cx.getLanguageVersion();
  generateDebugInfo=(!cx.isGeneratingDebugChanged() || cx.isGeneratingDebug());
  reservedKeywordAsIdentifier=cx.hasFeature(Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
  allowMemberExprAsFunctionName=cx.hasFeature(Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
  strictMode=cx.hasFeature(Context.FEATURE_STRICT_MODE);
  warningAsError=cx.hasFeature(Context.FEATURE_WARNING_AS_ERROR);
  xmlAvailable=cx.hasFeature(Context.FEATURE_E4X);
  optimizationLevel=cx.getOptimizationLevel();
  generatingSource=cx.isGeneratingSource();
  activationNames=cx.activationNames;
  generateObserverCount=cx.generateObserverCount;
}",0.950986632718014
28031,"private ObjectLiteral objectLiteral() throws IOException {
  int pos=ts.tokenBeg, lineno=ts.lineno;
  int afterComma=-1;
  List<ObjectProperty> elems=new ArrayList<ObjectProperty>();
  Set<String> getterNames=null;
  Set<String> setterNames=null;
  if (this.inUseStrictDirective) {
    getterNames=new HashSet<String>();
    setterNames=new HashSet<String>();
  }
  Comment objJsdocNode=getAndResetJsDoc();
  commaLoop:   for (; ; ) {
    String propertyName=null;
    int entryKind=PROP_ENTRY;
    int tt=peekToken();
    Comment jsdocNode=getAndResetJsDoc();
switch (tt) {
case Token.NAME:
      afterComma=-1;
    Name name=createNameNode();
  propertyName=ts.getString();
int ppos=ts.tokenBeg;
consumeToken();
if ((peekToken() != Token.COLON && (""String_Node_Str"".equals(propertyName) || ""String_Node_Str"".equals(propertyName)))) {
boolean isGet=""String_Node_Str"".equals(propertyName);
entryKind=isGet ? GET_ENTRY : SET_ENTRY;
AstNode pname=objliteralProperty();
if (pname == null) {
propertyName=null;
}
 else {
propertyName=ts.getString();
ObjectProperty objectProp=getterSetterProperty(ppos,pname,isGet);
pname.setJsDocNode(jsdocNode);
elems.add(objectProp);
}
}
 else {
AstNode pname=name;
pname.setJsDocNode(jsdocNode);
elems.add(plainProperty(pname,tt));
}
break;
case Token.RC:
if (afterComma != -1) warnTrailingComma(pos,elems,afterComma);
break commaLoop;
default :
AstNode pname=objliteralProperty();
if (pname == null) {
propertyName=null;
}
 else {
afterComma=-1;
propertyName=ts.getString();
pname.setJsDocNode(jsdocNode);
elems.add(plainProperty(pname,tt));
}
break;
}
if (this.inUseStrictDirective && propertyName != null) {
switch (entryKind) {
case PROP_ENTRY:
if (getterNames.contains(propertyName) || setterNames.contains(propertyName)) {
addError(""String_Node_Str"",propertyName);
}
getterNames.add(propertyName);
setterNames.add(propertyName);
break;
case GET_ENTRY:
if (getterNames.contains(propertyName)) {
addError(""String_Node_Str"",propertyName);
}
getterNames.add(propertyName);
break;
case SET_ENTRY:
if (setterNames.contains(propertyName)) {
addError(""String_Node_Str"",propertyName);
}
setterNames.add(propertyName);
break;
}
}
getAndResetJsDoc();
jsdocNode=null;
if (matchToken(Token.COMMA)) {
afterComma=ts.tokenEnd;
}
 else {
break commaLoop;
}
}
mustMatchToken(Token.RC,""String_Node_Str"");
ObjectLiteral pn=new ObjectLiteral(pos,ts.tokenEnd - pos);
if (objJsdocNode != null) {
pn.setJsDocNode(objJsdocNode);
}
pn.setElements(elems);
pn.setLineno(lineno);
return pn;
}","private ObjectLiteral objectLiteral() throws IOException {
  int pos=ts.tokenBeg, lineno=ts.lineno;
  int afterComma=-1;
  List<ObjectProperty> elems=new ArrayList<ObjectProperty>();
  Set<String> getterNames=null;
  Set<String> setterNames=null;
  if (this.inUseStrictDirective) {
    getterNames=new HashSet<String>();
    setterNames=new HashSet<String>();
  }
  Comment objJsdocNode=getAndResetJsDoc();
  commaLoop:   for (; ; ) {
    String propertyName=null;
    int entryKind=PROP_ENTRY;
    int tt=peekToken();
    Comment jsdocNode=getAndResetJsDoc();
switch (tt) {
case Token.NAME:
      afterComma=-1;
    Name name=createNameNode();
  propertyName=ts.getString();
int ppos=ts.tokenBeg;
consumeToken();
int peeked=peekToken();
boolean maybeGetterOrSetter=""String_Node_Str"".equals(propertyName) || ""String_Node_Str"".equals(propertyName);
if (maybeGetterOrSetter && peeked != Token.COMMA && peeked != Token.COLON && peeked != Token.RC) {
boolean isGet=""String_Node_Str"".equals(propertyName);
entryKind=isGet ? GET_ENTRY : SET_ENTRY;
AstNode pname=objliteralProperty();
if (pname == null) {
propertyName=null;
}
 else {
propertyName=ts.getString();
ObjectProperty objectProp=getterSetterProperty(ppos,pname,isGet);
pname.setJsDocNode(jsdocNode);
elems.add(objectProp);
}
}
 else {
AstNode pname=name;
pname.setJsDocNode(jsdocNode);
elems.add(plainProperty(pname,tt));
}
break;
case Token.RC:
if (afterComma != -1) warnTrailingComma(pos,elems,afterComma);
break commaLoop;
default :
AstNode pname=objliteralProperty();
if (pname == null) {
propertyName=null;
}
 else {
afterComma=-1;
propertyName=ts.getString();
pname.setJsDocNode(jsdocNode);
elems.add(plainProperty(pname,tt));
}
break;
}
if (this.inUseStrictDirective && propertyName != null) {
switch (entryKind) {
case PROP_ENTRY:
if (getterNames.contains(propertyName) || setterNames.contains(propertyName)) {
addError(""String_Node_Str"",propertyName);
}
getterNames.add(propertyName);
setterNames.add(propertyName);
break;
case GET_ENTRY:
if (getterNames.contains(propertyName)) {
addError(""String_Node_Str"",propertyName);
}
getterNames.add(propertyName);
break;
case SET_ENTRY:
if (setterNames.contains(propertyName)) {
addError(""String_Node_Str"",propertyName);
}
setterNames.add(propertyName);
break;
}
}
getAndResetJsDoc();
jsdocNode=null;
if (matchToken(Token.COMMA)) {
afterComma=ts.tokenEnd;
}
 else {
break commaLoop;
}
}
mustMatchToken(Token.RC,""String_Node_Str"");
ObjectLiteral pn=new ObjectLiteral(pos,ts.tokenEnd - pos);
if (objJsdocNode != null) {
pn.setJsDocNode(objJsdocNode);
}
pn.setElements(elems);
pn.setLineno(lineno);
return pn;
}",0.943108504398827
28032,"/** 
 * Handles any construct following a ""."" or "".."" operator.
 * @param pn the left-hand side (target) of the operator.  Never null.
 * @return a PropertyGet, XmlMemberGet, or ErrorNode
 */
private AstNode propertyAccess(int tt,AstNode pn) throws IOException {
  if (pn == null)   codeBug();
  int memberTypeFlags=0, lineno=ts.lineno, dotPos=ts.tokenBeg;
  consumeToken();
  if (tt == Token.DOTDOT) {
    mustHaveXML();
    memberTypeFlags=Node.DESCENDANTS_FLAG;
  }
  if (!compilerEnv.isXmlAvailable()) {
    int maybeName=nextToken();
    if (maybeName != Token.NAME && !(compilerEnv.isAllowKeywordAsObjectPropertyName() && TokenStream.isKeyword(ts.getString()))) {
      reportError(""String_Node_Str"");
    }
    Name name=createNameNode(true,Token.GETPROP);
    PropertyGet pg=new PropertyGet(pn,name,dotPos);
    pg.setLineno(lineno);
    return pg;
  }
  AstNode ref=null;
  int token=nextToken();
switch (token) {
case Token.THROW:
    saveNameTokenData(ts.tokenBeg,""String_Node_Str"",ts.lineno);
  ref=propertyName(-1,""String_Node_Str"",memberTypeFlags);
break;
case Token.NAME:
ref=propertyName(-1,ts.getString(),memberTypeFlags);
break;
case Token.MUL:
saveNameTokenData(ts.tokenBeg,""String_Node_Str"",ts.lineno);
ref=propertyName(-1,""String_Node_Str"",memberTypeFlags);
break;
case Token.XMLATTR:
ref=attributeAccess();
break;
default :
if (compilerEnv.isReservedKeywordAsIdentifier()) {
String name=Token.keywordToName(token);
if (name != null) {
saveNameTokenData(ts.tokenBeg,name,ts.lineno);
ref=propertyName(-1,name,memberTypeFlags);
break;
}
}
reportError(""String_Node_Str"");
return makeErrorNode();
}
boolean xml=ref instanceof XmlRef;
InfixExpression result=xml ? new XmlMemberGet() : new PropertyGet();
if (xml && tt == Token.DOT) result.setType(Token.DOT);
int pos=pn.getPosition();
result.setPosition(pos);
result.setLength(getNodeEnd(ref) - pos);
result.setOperatorPosition(dotPos - pos);
result.setLineno(pn.getLineno());
result.setLeft(pn);
result.setRight(ref);
return result;
}","/** 
 * Handles any construct following a ""."" or "".."" operator.
 * @param pn the left-hand side (target) of the operator.  Never null.
 * @return a PropertyGet, XmlMemberGet, or ErrorNode
 */
private AstNode propertyAccess(int tt,AstNode pn) throws IOException {
  if (pn == null)   codeBug();
  int memberTypeFlags=0, lineno=ts.lineno, dotPos=ts.tokenBeg;
  consumeToken();
  if (tt == Token.DOTDOT) {
    mustHaveXML();
    memberTypeFlags=Node.DESCENDANTS_FLAG;
  }
  if (!compilerEnv.isXmlAvailable()) {
    int maybeName=nextToken();
    if (maybeName != Token.NAME && !(compilerEnv.isReservedKeywordAsIdentifier() && TokenStream.isKeyword(ts.getString()))) {
      reportError(""String_Node_Str"");
    }
    Name name=createNameNode(true,Token.GETPROP);
    PropertyGet pg=new PropertyGet(pn,name,dotPos);
    pg.setLineno(lineno);
    return pg;
  }
  AstNode ref=null;
  int token=nextToken();
switch (token) {
case Token.THROW:
    saveNameTokenData(ts.tokenBeg,""String_Node_Str"",ts.lineno);
  ref=propertyName(-1,""String_Node_Str"",memberTypeFlags);
break;
case Token.NAME:
ref=propertyName(-1,ts.getString(),memberTypeFlags);
break;
case Token.MUL:
saveNameTokenData(ts.tokenBeg,""String_Node_Str"",ts.lineno);
ref=propertyName(-1,""String_Node_Str"",memberTypeFlags);
break;
case Token.XMLATTR:
ref=attributeAccess();
break;
default :
if (compilerEnv.isReservedKeywordAsIdentifier()) {
String name=Token.keywordToName(token);
if (name != null) {
saveNameTokenData(ts.tokenBeg,name,ts.lineno);
ref=propertyName(-1,name,memberTypeFlags);
break;
}
}
reportError(""String_Node_Str"");
return makeErrorNode();
}
boolean xml=ref instanceof XmlRef;
InfixExpression result=xml ? new XmlMemberGet() : new PropertyGet();
if (xml && tt == Token.DOT) result.setType(Token.DOT);
int pos=pn.getPosition();
result.setPosition(pos);
result.setLength(getNodeEnd(ref) - pos);
result.setOperatorPosition(dotPos - pos);
result.setLineno(pn.getLineno());
result.setLeft(pn);
result.setRight(ref);
return result;
}",0.9857393044783588
28033,"@Override protected void setUp() throws Exception {
  super.setUp();
  allowKeywordsAsObjectLiteralsKeys=false;
}","@Override protected void setUp() throws Exception {
  super.setUp();
  environment=new CompilerEnvirons();
}",0.7058823529411765
28034,"public void testParseObjectLiteral2(){
  expectParseErrors(""String_Node_Str"",new String[]{""String_Node_Str""});
  allowKeywordsAsObjectLiteralsKeys=true;
  parse(""String_Node_Str"");
}","public void testParseObjectLiteral2(){
  environment.setReservedKeywordAsIdentifier(false);
  expectParseErrors(""String_Node_Str"",new String[]{""String_Node_Str""});
  environment.setReservedKeywordAsIdentifier(true);
  parse(""String_Node_Str"");
}",0.7353629976580797
28035,"public void testParseObjectLiteral1(){
  allowKeywordsAsObjectLiteralsKeys=true;
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
}","public void testParseObjectLiteral1(){
  environment.setReservedKeywordAsIdentifier(true);
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
}",0.9240506329113924
28036,"private AstRoot parseAsReader(String string) throws IOException {
  CompilerEnvirons environment=new CompilerEnvirons();
  TestErrorReporter testErrorReporter=new TestErrorReporter(null,null);
  environment.setErrorReporter(testErrorReporter);
  environment.setRecordingComments(true);
  environment.setRecordingLocalJsDocComments(true);
  Parser p=new Parser(environment,testErrorReporter);
  AstRoot script=p.parse(new StringReader(string),null,0);
  assertTrue(testErrorReporter.hasEncounteredAllErrors());
  assertTrue(testErrorReporter.hasEncounteredAllWarnings());
  return script;
}","private AstRoot parseAsReader(String string) throws IOException {
  TestErrorReporter testErrorReporter=new TestErrorReporter(null,null);
  environment.setErrorReporter(testErrorReporter);
  environment.setRecordingComments(true);
  environment.setRecordingLocalJsDocComments(true);
  Parser p=new Parser(environment,testErrorReporter);
  AstRoot script=p.parse(new StringReader(string),null,0);
  assertTrue(testErrorReporter.hasEncounteredAllErrors());
  assertTrue(testErrorReporter.hasEncounteredAllWarnings());
  return script;
}",0.9510240427426536
28037,"public void testParseKeywordPropertyAccess(){
  allowKeywordsAsObjectLiteralsKeys=true;
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
}","public void testParseKeywordPropertyAccess(){
  environment.setReservedKeywordAsIdentifier(true);
  parse(""String_Node_Str"");
  parse(""String_Node_Str"");
}",0.84
28038,"private AstRoot parse(String string,final String[] errors,final String[] warnings,boolean jsdoc){
  CompilerEnvirons environment=new CompilerEnvirons();
  environment.setReservedKeywordAsIdentifier(allowKeywordsAsObjectLiteralsKeys);
  TestErrorReporter testErrorReporter=new TestErrorReporter(errors,warnings){
    @Override public EvaluatorException runtimeError(    String message,    String sourceName,    int line,    String lineSource,    int lineOffset){
      if (errors == null) {
        throw new UnsupportedOperationException();
      }
      return new EvaluatorException(message,sourceName,line,lineSource,lineOffset);
    }
  }
;
  environment.setErrorReporter(testErrorReporter);
  environment.setRecordingComments(true);
  environment.setRecordingLocalJsDocComments(jsdoc);
  Parser p=new Parser(environment,testErrorReporter);
  AstRoot script=null;
  try {
    script=p.parse(string,null,0);
  }
 catch (  EvaluatorException e) {
    if (errors == null) {
      throw e;
    }
  }
  assertTrue(testErrorReporter.hasEncounteredAllErrors());
  assertTrue(testErrorReporter.hasEncounteredAllWarnings());
  return script;
}","private AstRoot parse(String string,final String[] errors,final String[] warnings,boolean jsdoc){
  TestErrorReporter testErrorReporter=new TestErrorReporter(errors,warnings){
    @Override public EvaluatorException runtimeError(    String message,    String sourceName,    int line,    String lineSource,    int lineOffset){
      if (errors == null) {
        throw new UnsupportedOperationException();
      }
      return new EvaluatorException(message,sourceName,line,lineSource,lineOffset);
    }
  }
;
  environment.setErrorReporter(testErrorReporter);
  environment.setRecordingComments(true);
  environment.setRecordingLocalJsDocComments(jsdoc);
  Parser p=new Parser(environment,testErrorReporter);
  AstRoot script=null;
  try {
    script=p.parse(string,null,0);
  }
 catch (  EvaluatorException e) {
    if (errors == null) {
      throw e;
    }
  }
  assertTrue(testErrorReporter.hasEncounteredAllErrors());
  assertTrue(testErrorReporter.hasEncounteredAllWarnings());
  return script;
}",0.9364485981308412
28039,"/** 
 * Parses the JavaScript text given by a reader.
 * @param sourceString Source code from the file.
 * @param errorReporter An error.
 * @param logger A logger.
 * @return The AST of the given text.
 * @throws IOException
 */
public static Node parse(StaticSourceFile sourceFile,String sourceString,Config config,ErrorReporter errorReporter,Logger logger) throws IOException {
  Context cx=Context.enter();
  cx.setErrorReporter(errorReporter);
  cx.setLanguageVersion(Context.VERSION_1_5);
  CompilerEnvirons compilerEnv=new CompilerEnvirons();
  compilerEnv.initFromContext(cx);
  compilerEnv.setRecordingComments(true);
  compilerEnv.setRecordingLocalJsDocComments(true);
  compilerEnv.setWarnTrailingComma(config.languageMode == LanguageMode.ECMASCRIPT3);
  boolean acceptEs5=config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;
  compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);
  compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);
  compilerEnv.setAllowMemberExprAsFunctionName(false);
  compilerEnv.setIdeMode(config.isIdeMode);
  compilerEnv.setRecoverFromErrors(config.isIdeMode);
  Parser p=new Parser(compilerEnv,errorReporter);
  AstRoot astRoot=null;
  try {
    astRoot=p.parse(sourceString,sourceFile.getName(),1);
  }
 catch (  EvaluatorException e) {
    logger.info(""String_Node_Str"" + sourceFile.getName() + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    Context.exit();
  }
  Node root=null;
  if (astRoot != null) {
    root=IRFactory.transformTree(astRoot,sourceFile,sourceString,config,errorReporter);
    root.setIsSyntheticBlock(true);
  }
  return root;
}","/** 
 * Parses the JavaScript text given by a reader.
 * @param sourceString Source code from the file.
 * @param errorReporter An error.
 * @param logger A logger.
 * @return The AST of the given text.
 * @throws IOException
 */
public static Node parse(StaticSourceFile sourceFile,String sourceString,Config config,ErrorReporter errorReporter,Logger logger) throws IOException {
  Context cx=Context.enter();
  cx.setErrorReporter(errorReporter);
  cx.setLanguageVersion(Context.VERSION_1_5);
  CompilerEnvirons compilerEnv=new CompilerEnvirons();
  compilerEnv.initFromContext(cx);
  compilerEnv.setRecordingComments(true);
  compilerEnv.setRecordingLocalJsDocComments(true);
  compilerEnv.setWarnTrailingComma(config.languageMode == LanguageMode.ECMASCRIPT3);
  boolean acceptEs5=config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;
  compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);
  compilerEnv.setAllowMemberExprAsFunctionName(false);
  compilerEnv.setIdeMode(config.isIdeMode);
  compilerEnv.setRecoverFromErrors(config.isIdeMode);
  Parser p=new Parser(compilerEnv,errorReporter);
  AstRoot astRoot=null;
  try {
    astRoot=p.parse(sourceString,sourceFile.getName(),1);
  }
 catch (  EvaluatorException e) {
    logger.info(""String_Node_Str"" + sourceFile.getName() + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    Context.exit();
  }
  Node root=null;
  if (astRoot != null) {
    root=IRFactory.transformTree(astRoot,sourceFile,sourceString,config,errorReporter);
    root.setIsSyntheticBlock(true);
  }
  return root;
}",0.980539861895794
28040,"private FlowScope traverseNew(Node n,FlowScope scope){
  Node constructor=n.getFirstChild();
  scope=traverse(constructor,scope);
  JSType constructorType=constructor.getJSType();
  JSType type=null;
  if (constructorType != null) {
    constructorType=constructorType.restrictByNotNullOrUndefined();
    if (constructorType.isUnknownType()) {
      type=getNativeType(UNKNOWN_TYPE);
    }
 else {
      FunctionType ct=constructorType.toMaybeFunctionType();
      if (ct == null && constructorType instanceof FunctionType) {
        ct=(FunctionType)constructorType;
      }
      if (ct != null && ct.isConstructor()) {
        type=ct.getInstanceType();
      }
    }
  }
  n.setJSType(type);
  for (Node arg=constructor.getNext(); arg != null; arg=arg.getNext()) {
    scope=traverse(arg,scope);
  }
  return scope;
}","private FlowScope traverseNew(Node n,FlowScope scope){
  scope=traverseChildren(n,scope);
  Node constructor=n.getFirstChild();
  JSType constructorType=constructor.getJSType();
  JSType type=null;
  if (constructorType != null) {
    constructorType=constructorType.restrictByNotNullOrUndefined();
    if (constructorType.isUnknownType()) {
      type=getNativeType(UNKNOWN_TYPE);
    }
 else {
      FunctionType ct=constructorType.toMaybeFunctionType();
      if (ct == null && constructorType instanceof FunctionType) {
        ct=(FunctionType)constructorType;
      }
      if (ct != null && ct.isConstructor()) {
        type=ct.getInstanceType();
        backwardsInferenceFromCallSite(n,ct);
      }
    }
  }
  n.setJSType(type);
  return scope;
}",0.8390367553865653
28041,"/** 
 * Gets the type of   {@code this} in this function.
 */
@Override public ObjectType getTypeOfThis(){
  return typeOfThis.isNoObjectType() ? registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;
}","/** 
 * Gets the type of   {@code this} in this function.
 */
@Override public ObjectType getTypeOfThis(){
  return typeOfThis.isNoObjectType() ? registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE) : typeOfThis;
}",0.9699769053117784
28042,"@Override public void process(Node externs,Node root){
  (new NodeTraversal(compiler,this)).traverse(root);
}","@Override public void process(Node externs,Node root){
  (new NodeTraversal(compiler,this)).traverseRoots(externs,root);
}",0.9437229437229436
28043,"boolean dependsOnOuterScopeVars(String name,Node useNode){
  Preconditions.checkArgument(getCfg().hasNode(useNode));
  GraphNode<Node,Branch> n=getCfg().getNode(useNode);
  FlowState<MustDef> state=n.getAnnotation();
  Definition def=state.getIn().reachingDef.get(jsScope.getVar(name));
  for (  Var s : def.depends) {
    if (s.scope != jsScope) {
      return true;
    }
  }
  return false;
}","boolean dependsOnOuterScopeVars(String name,Node useNode){
  Preconditions.checkArgument(getCfg().hasNode(useNode));
  GraphNode<Node,Branch> n=getCfg().getNode(useNode);
  FlowState<MustDef> state=n.getAnnotation();
  Definition def=state.getIn().reachingDef.get(jsScope.getVar(name));
  if (def.unknownDependencies) {
    return true;
  }
  for (  Var s : def.depends) {
    if (s.scope != jsScope) {
      return true;
    }
  }
  return false;
}",0.9360189573459716
28044,"/** 
 * Computes all the local variables that rValue reads from and store that in the def's depends set.
 */
private void computeDependence(final Definition def,Node rValue){
  NodeTraversal.traverse(compiler,rValue,new AbstractCfgNodeTraversalCallback(){
    @Override public void visit(    NodeTraversal t,    Node n,    Node parent){
      if (n.isName() && jsScope.isDeclared(n.getString(),true)) {
        def.depends.add(jsScope.getVar(n.getString()));
      }
    }
  }
);
}","/** 
 * Computes all the local variables that rValue reads from and store that in the def's depends set.
 */
private void computeDependence(final Definition def,Node rValue){
  NodeTraversal.traverse(compiler,rValue,new AbstractCfgNodeTraversalCallback(){
    @Override public void visit(    NodeTraversal t,    Node n,    Node parent){
      if (n.isName()) {
        Var dep=jsScope.getVar(n.getString());
        if (dep == null) {
          def.unknownDependencies=true;
        }
 else {
          def.depends.add(dep);
        }
      }
    }
  }
);
}",0.7764932562620424
28045,"@Override public void visit(NodeTraversal t,Node n,Node parent){
  if (n.isName() && jsScope.isDeclared(n.getString(),true)) {
    def.depends.add(jsScope.getVar(n.getString()));
  }
}","@Override public void visit(NodeTraversal t,Node n,Node parent){
  if (n.isName()) {
    Var dep=jsScope.getVar(n.getString());
    if (dep == null) {
      def.unknownDependencies=true;
    }
 else {
      def.depends.add(dep);
    }
  }
}",0.4528301886792453
28046,"public void testInlineAcrossSideEffect1(){
  inline(""String_Node_Str"",""String_Node_Str"");
}","public void testInlineAcrossSideEffect1(){
  noInline(""String_Node_Str"");
}",0.8674698795180723
28047,"public void testInlineExpression9(){
  inline(""String_Node_Str"",""String_Node_Str"");
}","public void testInlineExpression9(){
  inline(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
}",0.8095238095238095
28048,"public void testInlineExpression8(){
  inline(""String_Node_Str"",""String_Node_Str"");
}","public void testInlineExpression8(){
  inline(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
}",0.8095238095238095
28049,"public void testCanInlineAcrossNoSideEffect(){
  inline(""String_Node_Str"",""String_Node_Str"");
}","public void testCanInlineAcrossNoSideEffect(){
  noInline(""String_Node_Str"");
}",0.8735632183908046
28050,"/** 
 * Visits an assignment <code>lvalue = rvalue</code>. If the <code>lvalue</code> is a prototype modification, we change the schema of the object type it is referring to.
 * @param t the traversal
 * @param assign the assign node(<code>assign.isAssign()</code> is an implicit invariant)
 */
private void visitAssign(NodeTraversal t,Node assign){
  JSDocInfo info=assign.getJSDocInfo();
  Node lvalue=assign.getFirstChild();
  Node rvalue=assign.getLastChild();
  if (lvalue.isGetProp()) {
    Node object=lvalue.getFirstChild();
    JSType objectJsType=getJSType(object);
    String property=lvalue.getLastChild().getString();
    if (object.isGetProp()) {
      JSType jsType=getJSType(object.getFirstChild());
      if (jsType.isInterface() && object.getLastChild().getString().equals(""String_Node_Str"")) {
        visitInterfaceGetprop(t,assign,object,property,lvalue,rvalue);
      }
    }
    checkEnumAlias(t,info,rvalue);
    if (property.equals(""String_Node_Str"")) {
      if (objectJsType != null && objectJsType.isFunctionType()) {
        FunctionType functionType=objectJsType.toMaybeFunctionType();
        if (functionType.isConstructor()) {
          JSType rvalueType=rvalue.getJSType();
          validator.expectObject(t,rvalue,rvalueType,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
          return;
        }
      }
    }
    if (object.isGetProp()) {
      Node object2=object.getFirstChild();
      String property2=NodeUtil.getStringValue(object.getLastChild());
      if (""String_Node_Str"".equals(property2)) {
        JSType jsType=getJSType(object2);
        if (jsType.isFunctionType()) {
          FunctionType functionType=jsType.toMaybeFunctionType();
          if (functionType.isConstructor() || functionType.isInterface()) {
            checkDeclaredPropertyInheritance(t,assign,functionType,property,info,getJSType(rvalue));
          }
        }
      }
    }
    ObjectType type=ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
    if (type != null) {
      if (type.hasProperty(property) && !type.isPropertyTypeInferred(property) && !propertyIsImplicitCast(type,property)) {
        validator.expectCanAssignToPropertyOf(t,assign,getJSType(rvalue),type.getPropertyType(property),object,property);
        return;
      }
    }
  }
  JSType leftType=getJSType(lvalue);
  if (lvalue.isQualifiedName()) {
    JSType rvalueType=getJSType(assign.getLastChild());
    Var var=t.getScope().getVar(lvalue.getQualifiedName());
    if (var != null) {
      if (var.isTypeInferred()) {
        return;
      }
      if (var.getType() != null) {
        leftType=var.getType();
      }
    }
  }
  Node rightChild=assign.getLastChild();
  JSType rightType=getJSType(rightChild);
  if (validator.expectCanAssignTo(t,assign,rightType,leftType,""String_Node_Str"")) {
    ensureTyped(t,assign,rightType);
  }
 else {
    ensureTyped(t,assign);
  }
}","/** 
 * Visits an assignment <code>lvalue = rvalue</code>. If the <code>lvalue</code> is a prototype modification, we change the schema of the object type it is referring to.
 * @param t the traversal
 * @param assign the assign node(<code>assign.isAssign()</code> is an implicit invariant)
 */
private void visitAssign(NodeTraversal t,Node assign){
  JSDocInfo info=assign.getJSDocInfo();
  Node lvalue=assign.getFirstChild();
  Node rvalue=assign.getLastChild();
  if (lvalue.isGetProp()) {
    Node object=lvalue.getFirstChild();
    JSType objectJsType=getJSType(object);
    String property=lvalue.getLastChild().getString();
    if (object.isGetProp()) {
      JSType jsType=getJSType(object.getFirstChild());
      if (jsType.isInterface() && object.getLastChild().getString().equals(""String_Node_Str"")) {
        visitInterfaceGetprop(t,assign,object,property,lvalue,rvalue);
      }
    }
    checkEnumAlias(t,info,rvalue);
    if (property.equals(""String_Node_Str"")) {
      if (objectJsType != null && objectJsType.isFunctionType()) {
        FunctionType functionType=objectJsType.toMaybeFunctionType();
        if (functionType.isConstructor()) {
          JSType rvalueType=rvalue.getJSType();
          validator.expectObject(t,rvalue,rvalueType,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
          return;
        }
      }
    }
    if (object.isGetProp()) {
      Node object2=object.getFirstChild();
      String property2=NodeUtil.getStringValue(object.getLastChild());
      if (""String_Node_Str"".equals(property2)) {
        JSType jsType=getJSType(object2);
        if (jsType.isFunctionType()) {
          FunctionType functionType=jsType.toMaybeFunctionType();
          if (functionType.isConstructor() || functionType.isInterface()) {
            checkDeclaredPropertyInheritance(t,assign,functionType,property,info,getJSType(rvalue));
          }
        }
      }
    }
    ObjectType type=ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
    if (type != null) {
      if (type.hasProperty(property) && !type.isPropertyTypeInferred(property) && !propertyIsImplicitCast(type,property)) {
        JSType expectedType=type.getPropertyType(property);
        if (!expectedType.isUnknownType()) {
          validator.expectCanAssignToPropertyOf(t,assign,getJSType(rvalue),expectedType,object,property);
          return;
        }
      }
    }
  }
  JSType leftType=getJSType(lvalue);
  if (lvalue.isQualifiedName()) {
    JSType rvalueType=getJSType(assign.getLastChild());
    Var var=t.getScope().getVar(lvalue.getQualifiedName());
    if (var != null) {
      if (var.isTypeInferred()) {
        return;
      }
      if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() && t.getScope() != var.getScope()) {
        return;
      }
      if (var.getType() != null) {
        leftType=var.getType();
      }
    }
  }
  Node rightChild=assign.getLastChild();
  JSType rightType=getJSType(rightChild);
  if (validator.expectCanAssignTo(t,assign,rightType,leftType,""String_Node_Str"")) {
    ensureTyped(t,assign,rightType);
  }
 else {
    ensureTyped(t,assign);
  }
}",0.9467000835421888
28051,"void setPrototypeBasedOn(ObjectType baseType,Node propertyNode){
  if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType()|| !(baseType instanceof PrototypeObjectType)) {
    baseType=new PrototypeObjectType(registry,this.getReferenceName() + ""String_Node_Str"",baseType);
  }
  setPrototype((PrototypeObjectType)baseType,propertyNode);
}","void setPrototypeBasedOn(ObjectType baseType,Node propertyNode){
  if (baseType.hasReferenceName() || isNativeObjectType() || baseType.isFunctionPrototypeType()) {
    baseType=new PrototypeObjectType(registry,this.getReferenceName() + ""String_Node_Str"",baseType);
  }
  setPrototype(baseType,propertyNode);
}",0.9035087719298246
28052,"@Override public void clearCachedValues(){
  super.clearCachedValues();
  if (subTypes != null) {
    for (    FunctionType subType : subTypes) {
      subType.clearCachedValues();
    }
  }
  if (!isNativeObjectType()) {
    if (hasInstanceType()) {
      getInstanceType().clearCachedValues();
    }
    if (prototypeSlot != null) {
      ((PrototypeObjectType)prototypeSlot.getType()).clearCachedValues();
    }
  }
}","@Override public void clearCachedValues(){
  super.clearCachedValues();
  if (subTypes != null) {
    for (    FunctionType subType : subTypes) {
      subType.clearCachedValues();
    }
  }
  if (!isNativeObjectType()) {
    if (hasInstanceType()) {
      getInstanceType().clearCachedValues();
    }
    if (prototypeSlot != null) {
      ((ObjectType)prototypeSlot.getType()).clearCachedValues();
    }
  }
}",0.9891696750902528
28053,"/** 
 * Gets the   {@code prototype} property of this function type. This isequivalent to  {@code (ObjectType) getPropertyType(""prototype"")}.
 */
public ObjectType getPrototype(){
  if (prototypeSlot == null) {
    setPrototype(new PrototypeObjectType(registry,this.getReferenceName() + ""String_Node_Str"",registry.getNativeObjectType(OBJECT_TYPE),isNativeObjectType()),null);
  }
  return (ObjectType)prototypeSlot.getType();
}","/** 
 * Gets the   {@code prototype} property of this function type. This isequivalent to  {@code (ObjectType) getPropertyType(""prototype"")}.
 */
public ObjectType getPrototype(){
  if (prototypeSlot == null) {
    String refName=getReferenceName();
    if (refName == null) {
      setPrototype(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),null);
    }
 else {
      setPrototype(new PrototypeObjectType(registry,this.getReferenceName() + ""String_Node_Str"",registry.getNativeObjectType(OBJECT_TYPE),isNativeObjectType()),null);
    }
  }
  return (ObjectType)prototypeSlot.getType();
}",0.833984375
28054,"/** 
 * Sets the prototype.
 * @param prototype the prototype. If this value is {@code null} it willsilently be discarded.
 */
boolean setPrototype(PrototypeObjectType prototype,Node propertyNode){
  if (prototype == null) {
    return false;
  }
  if (isConstructor() && prototype == getInstanceType()) {
    return false;
  }
  PrototypeObjectType oldPrototype=prototypeSlot == null ? null : (PrototypeObjectType)prototypeSlot.getType();
  boolean replacedPrototype=oldPrototype != null;
  this.prototypeSlot=new Property(""String_Node_Str"",prototype,true,propertyNode == null ? source : propertyNode);
  prototype.setOwnerFunction(this);
  if (oldPrototype != null) {
    oldPrototype.setOwnerFunction(null);
  }
  if (isConstructor() || isInterface()) {
    FunctionType superClass=getSuperClassConstructor();
    if (superClass != null) {
      superClass.addSubType(this);
    }
    if (isInterface()) {
      for (      ObjectType interfaceType : getExtendedInterfaces()) {
        if (interfaceType.getConstructor() != null) {
          interfaceType.getConstructor().addSubType(this);
        }
      }
    }
  }
  if (replacedPrototype) {
    clearCachedValues();
  }
  return true;
}","/** 
 * Sets the prototype.
 * @param prototype the prototype. If this value is {@code null} it willsilently be discarded.
 */
boolean setPrototype(ObjectType prototype,Node propertyNode){
  if (prototype == null) {
    return false;
  }
  if (isConstructor() && prototype == getInstanceType()) {
    return false;
  }
  ObjectType oldPrototype=prototypeSlot == null ? null : (ObjectType)prototypeSlot.getType();
  boolean replacedPrototype=oldPrototype != null;
  this.prototypeSlot=new Property(""String_Node_Str"",prototype,true,propertyNode == null ? source : propertyNode);
  prototype.setOwnerFunction(this);
  if (oldPrototype != null) {
    oldPrototype.setOwnerFunction(null);
  }
  if (isConstructor() || isInterface()) {
    FunctionType superClass=getSuperClassConstructor();
    if (superClass != null) {
      superClass.addSubType(this);
    }
    if (isInterface()) {
      for (      ObjectType interfaceType : getExtendedInterfaces()) {
        if (interfaceType.getConstructor() != null) {
          interfaceType.getConstructor().addSubType(this);
        }
      }
    }
  }
  if (replacedPrototype) {
    clearCachedValues();
  }
  return true;
}",0.9885544722339976
28055,"/** 
 * Tests that defining a property of a function's   {@code prototype} adds theproperty to it instance type.
 */
public void testFunctionPrototypeAndImplicitPrototype1(){
  FunctionType constructor=registry.createConstructorType(null,null,null,null);
  ObjectType instance=constructor.getInstanceType();
  ObjectType prototype=(ObjectType)constructor.getPropertyType(""String_Node_Str"");
  prototype.defineDeclaredProperty(""String_Node_Str"",DATE_TYPE,null);
  assertEquals(NATIVE_PROPERTIES_COUNT + 1,instance.getPropertiesCount());
}","/** 
 * Tests that defining a property of a function's   {@code prototype} adds theproperty to it instance type.
 */
public void testFunctionPrototypeAndImplicitPrototype1(){
  FunctionType constructor=registry.createConstructorType(""String_Node_Str"",null,null,null);
  ObjectType instance=constructor.getInstanceType();
  ObjectType prototype=(ObjectType)constructor.getPropertyType(""String_Node_Str"");
  prototype.defineDeclaredProperty(""String_Node_Str"",DATE_TYPE,null);
  assertEquals(NATIVE_PROPERTIES_COUNT + 1,instance.getPropertiesCount());
}",0.9806807727690892
28056,"@Override public void matchConstraint(ObjectType constraintObj){
  if (constraintObj.isRecordType()) {
    for (    String prop : constraintObj.getOwnPropertyNames()) {
      JSType propType=constraintObj.getPropertyType(prop);
      if (!isPropertyTypeDeclared(prop)) {
        JSType typeToInfer=propType;
        if (!hasProperty(prop)) {
          typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
        }
        defineInferredProperty(prop,typeToInfer,null);
      }
    }
  }
}","@Override public void matchConstraint(ObjectType constraintObj){
  if (hasReferenceName()) {
    return;
  }
  if (constraintObj.isRecordType()) {
    for (    String prop : constraintObj.getOwnPropertyNames()) {
      JSType propType=constraintObj.getPropertyType(prop);
      if (!isPropertyTypeDeclared(prop)) {
        JSType typeToInfer=propType;
        if (!hasProperty(prop)) {
          typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
        }
        defineInferredProperty(prop,typeToInfer,null);
      }
    }
  }
}",0.9590316573556796
28057,"@Override void endFile(){
  super.endFile();
  if (!preferLineBreakAtEndOfFile) {
    return;
  }
  if (lineLength > lineLengthThreshold / 2) {
    append(""String_Node_Str"");
    startNewLine();
  }
 else   if (prevCutPosition > 0) {
    for (int i=prevCutPosition; i < code.length() - 1; i++) {
      code.setCharAt(i,code.charAt(i + 1));
    }
    code.setLength(code.length() - 1);
    lineStartPosition=prevLineStartPosition;
    lineLength=code.length() - lineStartPosition;
    reportLineCut(lineIndex,prevCutPosition,false);
    lineIndex--;
    prevCutPosition=0;
    prevLineStartPosition=0;
    append(""String_Node_Str"");
    startNewLine();
  }
 else {
  }
}","@Override void endFile(){
  super.endFile();
  if (!preferLineBreakAtEndOfFile) {
    return;
  }
  if (lineLength > lineLengthThreshold / 2) {
    append(""String_Node_Str"");
    startNewLine();
  }
 else   if (prevCutPosition > 0) {
    code.setCharAt(prevCutPosition,' ');
    lineStartPosition=prevLineStartPosition;
    lineLength=code.length() - lineStartPosition;
    reportLineCut(lineIndex,prevCutPosition + 1,false);
    lineIndex--;
    prevCutPosition=0;
    prevLineStartPosition=0;
    append(""String_Node_Str"");
    startNewLine();
  }
 else {
  }
}",0.8571428571428571
28058,"public void testPreferLineBreakAtEndOfFile(){
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public void testPreferLineBreakAtEndOfFile(){
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertLineBreakAtEndOfFile(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.90104772991851
28059,"/** 
 * TypeExpression := BasicTypeExpression | '?' BasicTypeExpression | '!' BasicTypeExpression | BasicTypeExpression '?' | BasicTypeExpression '!' | '?'
 */
private Node parseTypeExpression(JsDocToken token){
  if (token == JsDocToken.QMARK) {
    token=next();
    if (token == JsDocToken.COMMA || token == JsDocToken.EQUALS || token == JsDocToken.RC || token == JsDocToken.RP || token == JsDocToken.PIPE) {
      restoreLookAhead(token);
      return newNode(Token.QMARK);
    }
    return wrapNode(Token.QMARK,parseBasicTypeExpression(token));
  }
 else   if (token == JsDocToken.BANG) {
    return wrapNode(Token.BANG,parseBasicTypeExpression(next()));
  }
 else {
    Node basicTypeExpr=parseBasicTypeExpression(token);
    if (basicTypeExpr != null) {
      if (match(JsDocToken.QMARK)) {
        next();
        return wrapNode(Token.QMARK,basicTypeExpr);
      }
 else       if (match(JsDocToken.BANG)) {
        next();
        return wrapNode(Token.BANG,basicTypeExpr);
      }
    }
    return basicTypeExpr;
  }
}","/** 
 * TypeExpression := BasicTypeExpression | '?' BasicTypeExpression | '!' BasicTypeExpression | BasicTypeExpression '?' | BasicTypeExpression '!' | '?'
 */
private Node parseTypeExpression(JsDocToken token){
  if (token == JsDocToken.QMARK) {
    token=next();
    if (token == JsDocToken.COMMA || token == JsDocToken.EQUALS || token == JsDocToken.RB || token == JsDocToken.RC || token == JsDocToken.RP || token == JsDocToken.PIPE) {
      restoreLookAhead(token);
      return newNode(Token.QMARK);
    }
    return wrapNode(Token.QMARK,parseBasicTypeExpression(token));
  }
 else   if (token == JsDocToken.BANG) {
    return wrapNode(Token.BANG,parseBasicTypeExpression(next()));
  }
 else {
    Node basicTypeExpr=parseBasicTypeExpression(token);
    if (basicTypeExpr != null) {
      if (match(JsDocToken.QMARK)) {
        next();
        return wrapNode(Token.QMARK,basicTypeExpr);
      }
 else       if (match(JsDocToken.BANG)) {
        next();
        return wrapNode(Token.BANG,basicTypeExpr);
      }
    }
    return basicTypeExpr;
  }
}",0.9875120076849184
28060,"private void tryConvertToNumber(Node n){
switch (n.getType()) {
case Token.NUMBER:
    return;
case Token.AND:
case Token.OR:
case Token.COMMA:
  tryConvertToNumber(n.getLastChild());
return;
case Token.HOOK:
tryConvertToNumber(n.getChildAtIndex(1));
tryConvertToNumber(n.getLastChild());
return;
case Token.NAME:
if (!NodeUtil.isUndefined(n)) {
return;
}
break;
}
Double result=NodeUtil.getNumberValue(n);
if (result == null) {
return;
}
double value=result;
Node replacement=NodeUtil.numberNode(value,n);
n.getParent().replaceChild(n,replacement);
reportCodeChange();
}","private void tryConvertToNumber(Node n){
switch (n.getType()) {
case Token.NUMBER:
    return;
case Token.AND:
case Token.OR:
case Token.COMMA:
  tryConvertToNumber(n.getLastChild());
return;
case Token.HOOK:
tryConvertToNumber(n.getChildAtIndex(1));
tryConvertToNumber(n.getLastChild());
return;
case Token.NAME:
if (!NodeUtil.isUndefined(n)) {
return;
}
break;
}
Double result=NodeUtil.getNumberValue(n);
if (result == null) {
return;
}
double value=result;
Node replacement=NodeUtil.numberNode(value,n);
if (replacement.isEquivalentTo(n)) {
return;
}
n.getParent().replaceChild(n,replacement);
reportCodeChange();
}",0.960470984020185
28061,"public void testInvertibleOperators(){
  Map<String,String> inverses=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
  Set<String> comparators=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Set<String> equalitors=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"");
  Set<String> uncomparables=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"");
  List<String> operators=ImmutableList.copyOf(inverses.values());
  for (int iOperandA=0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
    for (int iOperandB=0; iOperandB < LITERAL_OPERANDS.size(); iOperandB++) {
      for (int iOp=0; iOp < operators.size(); iOp++) {
        String a=LITERAL_OPERANDS.get(iOperandA);
        String b=LITERAL_OPERANDS.get(iOperandB);
        String op=operators.get(iOp);
        String inverse=inverses.get(op);
        if (comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
          assertSameResults(join(a,op,b),""String_Node_Str"");
          assertSameResults(join(a,inverse,b),""String_Node_Str"");
        }
 else         if (a.equals(b) && equalitors.contains(op)) {
          if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"")) {
            foldSame(join(a,op,b));
            foldSame(join(a,inverse,b));
          }
 else {
            assertSameResults(join(a,op,b),""String_Node_Str"");
            assertSameResults(join(a,inverse,b),""String_Node_Str"");
          }
        }
 else {
          assertNotSameResults(join(a,op,b),join(a,inverse,b));
        }
      }
    }
  }
}","public void testInvertibleOperators(){
  Map<String,String> inverses=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
  Set<String> comparators=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Set<String> equalitors=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"");
  Set<String> uncomparables=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"");
  List<String> operators=ImmutableList.copyOf(inverses.values());
  for (int iOperandA=0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
    for (int iOperandB=0; iOperandB < LITERAL_OPERANDS.size(); iOperandB++) {
      for (int iOp=0; iOp < operators.size(); iOp++) {
        String a=LITERAL_OPERANDS.get(iOperandA);
        String b=LITERAL_OPERANDS.get(iOperandB);
        String op=operators.get(iOp);
        String inverse=inverses.get(op);
        if (comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
          assertSameResults(join(a,op,b),""String_Node_Str"");
          assertSameResults(join(a,inverse,b),""String_Node_Str"");
        }
 else         if (a.equals(b) && equalitors.contains(op)) {
          if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"")) {
            foldSame(join(a,op,b));
            foldSame(join(a,inverse,b));
          }
 else {
            assertSameResults(join(a,op,b),""String_Node_Str"");
            assertSameResults(join(a,inverse,b),""String_Node_Str"");
          }
        }
 else {
          assertNotSameResults(join(a,op,b),join(a,inverse,b));
        }
      }
    }
  }
}",0.9919038913554452
28062,"/** 
 * Activates Common JS module processing.
 */
public void setProcessCommonJSModules(boolean processCommonJSModules){
  this.processCommonJSModules=processCommonJSModules;
}","/** 
 * Rewrites CommonJS modulee so that modules can be concatenated together, by renaming all globals to avoid conflicting with other modules.
 */
public void setProcessCommonJSModules(boolean processCommonJSModules){
  this.processCommonJSModules=processCommonJSModules;
}",0.6238938053097345
28063,"/** 
 * Get the return value of calling ""bind"" on this function with the specified number of arguments. If -1 is passed, then we will return a result that accepts any parameters.
 */
public FunctionType getBindReturnType(int argsToBind){
  FunctionBuilder builder=new FunctionBuilder(registry).withReturnType(getReturnType());
  if (argsToBind >= 0) {
    Node origParams=getParametersNode();
    if (origParams != null) {
      Node params=origParams.cloneTree();
      for (int i=1; i < argsToBind && params.getFirstChild() != null; i++) {
        params.removeFirstChild();
      }
      builder.withParamsNode(params);
    }
  }
  return builder.build();
}","/** 
 * Get the return value of calling ""bind"" on this function with the specified number of arguments. If -1 is passed, then we will return a result that accepts any parameters.
 */
public FunctionType getBindReturnType(int argsToBind){
  FunctionBuilder builder=new FunctionBuilder(registry).withReturnType(getReturnType());
  if (argsToBind >= 0) {
    Node origParams=getParametersNode();
    if (origParams != null) {
      Node params=origParams.cloneTree();
      for (int i=1; i < argsToBind && params.getFirstChild() != null; i++) {
        if (params.getFirstChild().isVarArgs()) {
          break;
        }
        params.removeFirstChild();
      }
      builder.withParamsNode(params);
    }
  }
  return builder.build();
}",0.9448818897637796
28064,"void add(String newcode){
  maybeEndStatement();
  if (newcode.length() == 0) {
    return;
  }
  char c=newcode.charAt(0);
  if ((isWordChar(c) || c == '\\') && isWordChar(getLastChar())) {
    append(""String_Node_Str"");
  }
  append(newcode);
}","void add(String newcode){
  maybeEndStatement();
  if (newcode.length() == 0) {
    return;
  }
  char c=newcode.charAt(0);
  if ((isWordChar(c) || c == '\\') && isWordChar(getLastChar())) {
    append(""String_Node_Str"");
  }
 else   if (c == '/' && getLastChar() == '/') {
    append(""String_Node_Str"");
  }
  append(newcode);
}",0.8556521739130435
28065,"JSType getGreatestSubtypeHelper(JSType that){
  if (that.isRecordType()) {
    RecordType thatRecord=(RecordType)that;
    RecordTypeBuilder builder=new RecordTypeBuilder(registry);
    for (    String property : properties.keySet()) {
      if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
        return registry.getNativeObjectType(JSTypeNative.NO_TYPE);
      }
      builder.addProperty(property,getPropertyType(property),getPropertyNode(property));
    }
    for (    String property : thatRecord.properties.keySet()) {
      if (!hasProperty(property)) {
        builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));
      }
    }
    return builder.build();
  }
  JSType greatestSubtype=registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  JSType thatRestrictedToObj=registry.getNativeType(JSTypeNative.OBJECT_TYPE).getGreatestSubtype(that);
  if (!thatRestrictedToObj.isEmptyType()) {
    for (    Map.Entry<String,JSType> entry : properties.entrySet()) {
      String propName=entry.getKey();
      JSType propType=entry.getValue();
      UnionTypeBuilder builder=new UnionTypeBuilder(registry);
      for (      ObjectType alt : registry.getEachReferenceTypeWithProperty(propName)) {
        JSType altPropType=alt.getPropertyType(propName);
        if (altPropType != null && !alt.isEquivalentTo(this) && alt.isSubtype(that) && (propType.isUnknownType() || altPropType.isUnknownType() || altPropType.isEquivalentTo(propType))) {
          builder.addAlternate(alt);
        }
      }
      greatestSubtype=greatestSubtype.getLeastSupertype(builder.build());
    }
  }
  return greatestSubtype;
}","JSType getGreatestSubtypeHelper(JSType that){
  if (that.isRecordType()) {
    RecordType thatRecord=that.toMaybeRecordType();
    RecordTypeBuilder builder=new RecordTypeBuilder(registry);
    for (    String property : properties.keySet()) {
      if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
        return registry.getNativeObjectType(JSTypeNative.NO_TYPE);
      }
      builder.addProperty(property,getPropertyType(property),getPropertyNode(property));
    }
    for (    String property : thatRecord.properties.keySet()) {
      if (!hasProperty(property)) {
        builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));
      }
    }
    return builder.build();
  }
  JSType greatestSubtype=registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  JSType thatRestrictedToObj=registry.getNativeType(JSTypeNative.OBJECT_TYPE).getGreatestSubtype(that);
  if (!thatRestrictedToObj.isEmptyType()) {
    for (    Map.Entry<String,JSType> entry : properties.entrySet()) {
      String propName=entry.getKey();
      JSType propType=entry.getValue();
      UnionTypeBuilder builder=new UnionTypeBuilder(registry);
      for (      ObjectType alt : registry.getEachReferenceTypeWithProperty(propName)) {
        JSType altPropType=alt.getPropertyType(propName);
        if (altPropType != null && !alt.isEquivalentTo(this) && alt.isSubtype(that) && (propType.isUnknownType() || altPropType.isUnknownType() || altPropType.isEquivalentTo(propType))) {
          builder.addAlternate(alt);
        }
      }
      greatestSubtype=greatestSubtype.getLeastSupertype(builder.build());
    }
  }
  return greatestSubtype;
}",0.9942462600690448
28066,"public void testRecordSubtypeChain() throws Exception {
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType aType=builder.build();
  builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType abType=builder.build();
  builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",NUMBER_TYPE,null);
  JSType abcType=builder.build();
  List<JSType> typeChain=Lists.newArrayList(registry.getNativeType(JSTypeNative.ALL_TYPE),registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),registry.getNativeType(JSTypeNative.OBJECT_TYPE),aType,abType,abcType,registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),registry.getNativeType(JSTypeNative.NO_TYPE));
  verifySubtypeChain(typeChain);
}","public void testRecordSubtypeChain() throws Exception {
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType aType=builder.build();
  builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType abType=builder.build();
  builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType acType=builder.build();
  JSType abOrAcType=registry.createUnionType(abType,acType);
  builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",NUMBER_TYPE,null);
  JSType abcType=builder.build();
  List<JSType> typeChain=Lists.newArrayList(registry.getNativeType(JSTypeNative.ALL_TYPE),registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),registry.getNativeType(JSTypeNative.OBJECT_TYPE),aType,abOrAcType,abType,abcType,registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),registry.getNativeType(JSTypeNative.NO_TYPE));
  verifySubtypeChain(typeChain);
}",0.8829225352112676
28067,"public void testRecordTypeLeastSuperType3(){
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",NUMBER_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType subRecordType=builder.build();
  JSType leastSupertype=recordType.getLeastSupertype(subRecordType);
  assertTypeEquals(leastSupertype,OBJECT_TYPE);
}","public void testRecordTypeLeastSuperType3(){
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",NUMBER_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType otherRecordType=builder.build();
  assertTypeEquals(registry.createUnionType(recordType,otherRecordType),recordType.getLeastSupertype(otherRecordType));
}",0.7733934611048479
28068,"public void testRecordTypeLeastSuperType2(){
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",NUMBER_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType subRecordType=builder.build();
  JSType leastSupertype=recordType.getLeastSupertype(subRecordType);
  builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  assertTypeEquals(leastSupertype,builder.build());
}","public void testRecordTypeLeastSuperType2(){
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  builder.addProperty(""String_Node_Str"",NUMBER_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  builder.addProperty(""String_Node_Str"",STRING_TYPE,null);
  JSType otherRecordType=builder.build();
  assertTypeEquals(registry.createUnionType(recordType,otherRecordType),recordType.getLeastSupertype(otherRecordType));
}",0.6928499496475328
28069,"/** 
 * Check if the given node is a property of a name in the global scope.
 */
private boolean isQnameRootedInGlobalScope(Node n){
  Node root=NodeUtil.getRootOfQualifiedName(n);
  if (root.isName()) {
    Var var=scope.getVar(root.getString());
    if (var != null) {
      return var.isGlobal();
    }
  }
  return false;
}","/** 
 * Check if the given node is a property of a name in the global scope.
 */
private boolean isQnameRootedInGlobalScope(Node n){
  Scope scope=getQnameRootScope(n);
  return scope != null && scope.isGlobal();
}",0.6395563770794824
28070,"/** 
 * For functions with function(this: T, ...) and T as parameters, type inference will set the type of this on a function literal argument to the the actual type of T.
 */
private void updateTypeOfThisOnClosure(Node n,FunctionType fnType){
  if (fnType.getTemplateTypeName() == null) {
    return;
  }
  int i=0;
  int childCount=n.getChildCount();
  for (  Node iParameter : fnType.getParameters()) {
    JSType iParameterType=getJSType(iParameter).restrictByNotNullOrUndefined();
    if (iParameterType.isTemplateType()) {
      JSType iArgumentType=null;
      if (i + 1 < childCount) {
        Node iArgument=n.getChildAtIndex(i + 1);
        iArgumentType=getJSType(iArgument).restrictByNotNullOrUndefined();
        if (!(iArgumentType instanceof ObjectType)) {
          compiler.report(JSError.make(NodeUtil.getSourceName(iArgument),iArgument,TEMPLATE_TYPE_NOT_OBJECT_TYPE));
          return;
        }
      }
      boolean foundTemplateTypeOfThisParameter=false;
      int j=0;
      for (      Node jParameter : fnType.getParameters()) {
        JSType jParameterType=getJSType(jParameter).restrictByNotNullOrUndefined();
        if (jParameterType.isFunctionType()) {
          FunctionType jParameterFnType=jParameterType.toMaybeFunctionType();
          if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {
            foundTemplateTypeOfThisParameter=true;
            if (j + 1 >= childCount) {
              return;
            }
            Node jArgument=n.getChildAtIndex(j + 1);
            JSType jArgumentType=getJSType(jArgument);
            if (jArgument.getType() == Token.FUNCTION && jArgumentType.isFunctionType()) {
              if (iArgumentType != null && !iArgumentType.isNoType()) {
                FunctionType jArgumentFnType=jArgumentType.toMaybeFunctionType();
                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {
                  jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType,(ObjectType)iArgumentType));
                }
              }
 else {
                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {
                  compiler.report(JSError.make(NodeUtil.getSourceName(n),n,FUNCTION_LITERAL_UNDEFINED_THIS));
                }
              }
            }
          }
        }
        j++;
      }
      if (!foundTemplateTypeOfThisParameter) {
        compiler.report(JSError.make(NodeUtil.getSourceName(n),n,TEMPLATE_TYPE_OF_THIS_EXPECTED));
        return;
      }
    }
    i++;
  }
}","/** 
 * For functions with function(this: T, ...) and T as parameters, type inference will set the type of this on a function literal argument to the the actual type of T.
 */
private void updateTypeOfThisOnClosure(Node n,FunctionType fnType){
  if (fnType.getTemplateTypeName() == null) {
    return;
  }
  int i=0;
  int childCount=n.getChildCount();
  for (  Node iParameter : fnType.getParameters()) {
    JSType iParameterType=getJSType(iParameter).restrictByNotNullOrUndefined();
    if (iParameterType.isTemplateType()) {
      ObjectType iArgumentType=null;
      if (i + 1 < childCount) {
        Node iArgument=n.getChildAtIndex(i + 1);
        iArgumentType=getJSType(iArgument).restrictByNotNullOrUndefined().collapseUnion().toObjectType();
        if (iArgumentType == null) {
          compiler.report(JSError.make(NodeUtil.getSourceName(iArgument),iArgument,TEMPLATE_TYPE_NOT_OBJECT_TYPE,getJSType(iArgument).toString()));
          return;
        }
      }
      boolean foundTemplateTypeOfThisParameter=false;
      int j=0;
      for (      Node jParameter : fnType.getParameters()) {
        JSType jParameterType=getJSType(jParameter).restrictByNotNullOrUndefined();
        if (jParameterType.isFunctionType()) {
          FunctionType jParameterFnType=jParameterType.toMaybeFunctionType();
          if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {
            foundTemplateTypeOfThisParameter=true;
            if (j + 1 >= childCount) {
              return;
            }
            Node jArgument=n.getChildAtIndex(j + 1);
            JSType jArgumentType=getJSType(jArgument);
            if (jArgument.getType() == Token.FUNCTION && jArgumentType.isFunctionType()) {
              if (iArgumentType != null && !iArgumentType.isNoType()) {
                FunctionType jArgumentFnType=jArgumentType.toMaybeFunctionType();
                if (jArgumentFnType.getTypeOfThis().isUnknownType()) {
                  jArgument.setJSType(registry.createFunctionTypeWithNewThisType(jArgumentFnType,iArgumentType));
                }
              }
 else {
                if (NodeUtil.referencesThis(NodeUtil.getFunctionBody(jArgument))) {
                  compiler.report(JSError.make(NodeUtil.getSourceName(n),n,FUNCTION_LITERAL_UNDEFINED_THIS));
                }
              }
            }
          }
        }
        j++;
      }
      if (!foundTemplateTypeOfThisParameter) {
        compiler.report(JSError.make(NodeUtil.getSourceName(n),n,TEMPLATE_TYPE_OF_THIS_EXPECTED));
        return;
      }
    }
    i++;
  }
}",0.9003139717425431
28071,"public void testBadTemplateType2() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(),true);
}","public void testBadTemplateType2() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(""String_Node_Str""));
}",0.9588014981273408
28072,"public void testBadTemplateType1() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(),true);
}","public void testBadTemplateType1() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format());
}",0.9910233393177738
28073,"public void testBadTemplateType5() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(),true);
}","public void testBadTemplateType5() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());
}",0.989517819706499
28074,"public void testBadTemplateType4() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(),true);
}","public void testBadTemplateType4() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());
}",0.9886104783599088
28075,"public void testBadTemplateType3() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(),true);
}","public void testBadTemplateType3() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format());
}",0.9896049896049895
28076,"public void testBadTemplateType2() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(),true);
}","public void testBadTemplateType2() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(""String_Node_Str""));
}",0.9588014981273408
28077,"public void testBadTemplateType1() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(),true);
}","public void testBadTemplateType1() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format());
}",0.9910233393177738
28078,"public void testBadTemplateType5() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(),true);
}","public void testBadTemplateType5() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());
}",0.989517819706499
28079,"public void testBadTemplateType4() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(),true);
}","public void testBadTemplateType4() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());
}",0.9886104783599088
28080,"public void testBadTemplateType3() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(),true);
}","public void testBadTemplateType3() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format());
}",0.9896049896049895
28081,"@Override public void inferQualifiedSlot(Node node,String symbol,JSType bottomType,JSType inferredType){
  Scope functionScope=getFunctionScope();
  if (functionScope.isLocal()) {
    if (functionScope.getVar(symbol) == null && !functionScope.isBottom()) {
      int firstDot=symbol.indexOf(""String_Node_Str"");
      Preconditions.checkState(firstDot != -1);
      Var owner=functionScope.getVar(symbol.substring(0,firstDot));
      Scope ownerScope=owner == null ? functionScope : owner.getScope();
      ownerScope.declare(symbol,node,bottomType,null);
    }
    inferSlotType(symbol,inferredType);
  }
}","@Override public void inferQualifiedSlot(Node node,String symbol,JSType bottomType,JSType inferredType){
  Scope functionScope=getFunctionScope();
  if (functionScope.isLocal()) {
    if (functionScope.getVar(symbol) == null && !functionScope.isBottom()) {
      functionScope.declare(symbol,node,bottomType,null);
    }
    inferSlotType(symbol,inferredType);
  }
}",0.5740740740740741
28082,"/** 
 * Visits a GETPROP node.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of <code>n</code>
 */
private void visitGetProp(NodeTraversal t,Node n,Node parent){
  if (n.getJSType() != null && parent.getType() == Token.ASSIGN) {
    return;
  }
  Node property=n.getLastChild();
  Node objNode=n.getFirstChild();
  JSType childType=getJSType(objNode);
  if (!validator.expectNotNullOrUndefined(t,n,childType,childType + ""String_Node_Str"",getNativeType(OBJECT_TYPE))) {
    ensureTyped(t,n);
    return;
  }
  checkPropertyAccess(childType,property.getString(),t,n);
  ensureTyped(t,n);
}","/** 
 * Visits a GETPROP node.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of <code>n</code>
 */
private void visitGetProp(NodeTraversal t,Node n,Node parent){
  if (n.getJSType() != null && parent.getType() == Token.ASSIGN) {
    return;
  }
  Node property=n.getLastChild();
  Node objNode=n.getFirstChild();
  JSType childType=getJSType(objNode);
  if (!validator.expectNotNullOrUndefined(t,n,childType,""String_Node_Str"",getNativeType(OBJECT_TYPE))) {
    ensureTyped(t,n);
    return;
  }
  checkPropertyAccess(childType,property.getString(),t,n);
  ensureTyped(t,n);
}",0.9918256130790192
28083,"/** 
 * Creates an instance for a function that is an interface. 
 */
private FunctionType(JSTypeRegistry registry,String name,Node source){
  super(registry,name,registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));
  Preconditions.checkArgument(source == null || Token.FUNCTION == source.getType());
  Preconditions.checkArgument(name != null);
  this.source=source;
  this.call=new ArrowType(registry,new Node(Token.LP),null);
  this.kind=Kind.INTERFACE;
  this.typeOfThis=new InstanceObjectType(registry,this);
}","/** 
 * Creates an instance for a function that is an interface. 
 */
private FunctionType(JSTypeRegistry registry,String name,Node source){
  super(registry,name,registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));
  setPrettyPrint(true);
  Preconditions.checkArgument(source == null || Token.FUNCTION == source.getType());
  Preconditions.checkArgument(name != null);
  this.source=source;
  this.call=new ArrowType(registry,new Node(Token.LP),null);
  this.kind=Kind.INTERFACE;
  this.typeOfThis=new InstanceObjectType(registry,this);
}",0.977859778597786
28084,"/** 
 * Informally, a function is represented by  {@code function (params): returnType} where the {@code params} is a commaseparated list of types, the first one being a special {@code this:T} if the function expects a known type for {@code this}.
 */
@Override public String toString(){
  if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
    return ""String_Node_Str"";
  }
  StringBuilder b=new StringBuilder(32);
  b.append(""String_Node_Str"");
  int paramNum=call.parameters.getChildCount();
  boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
  if (hasKnownTypeOfThis) {
    if (isConstructor()) {
      b.append(""String_Node_Str"");
    }
 else {
      b.append(""String_Node_Str"");
    }
    b.append(typeOfThis.toString());
  }
  if (paramNum > 0) {
    if (hasKnownTypeOfThis) {
      b.append(""String_Node_Str"");
    }
    Node p=call.parameters.getFirstChild();
    if (p.isVarArgs()) {
      appendVarArgsString(b,p.getJSType());
    }
 else {
      b.append(p.getJSType().toString());
    }
    p=p.getNext();
    while (p != null) {
      b.append(""String_Node_Str"");
      if (p.isVarArgs()) {
        appendVarArgsString(b,p.getJSType());
      }
 else {
        b.append(p.getJSType().toString());
      }
      p=p.getNext();
    }
  }
  b.append(""String_Node_Str"");
  b.append(call.returnType);
  return b.toString();
}","/** 
 * Informally, a function is represented by  {@code function (params): returnType} where the {@code params} is a commaseparated list of types, the first one being a special {@code this:T} if the function expects a known type for {@code this}.
 */
@Override public String toString(){
  if (!isPrettyPrint() || this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
    return ""String_Node_Str"";
  }
  setPrettyPrint(false);
  StringBuilder b=new StringBuilder(32);
  b.append(""String_Node_Str"");
  int paramNum=call.parameters.getChildCount();
  boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
  if (hasKnownTypeOfThis) {
    if (isConstructor()) {
      b.append(""String_Node_Str"");
    }
 else {
      b.append(""String_Node_Str"");
    }
    b.append(typeOfThis.toString());
  }
  if (paramNum > 0) {
    if (hasKnownTypeOfThis) {
      b.append(""String_Node_Str"");
    }
    Node p=call.parameters.getFirstChild();
    if (p.isVarArgs()) {
      appendVarArgsString(b,p.getJSType());
    }
 else {
      b.append(p.getJSType().toString());
    }
    p=p.getNext();
    while (p != null) {
      b.append(""String_Node_Str"");
      if (p.isVarArgs()) {
        appendVarArgsString(b,p.getJSType());
      }
 else {
        b.append(p.getJSType().toString());
      }
      p=p.getNext();
    }
  }
  b.append(""String_Node_Str"");
  b.append(call.returnType);
  setPrettyPrint(true);
  return b.toString();
}",0.9596284387281172
28085,"/** 
 * A generic implementation meant to be used as a helper for common getGreatestSubtype implementations.
 */
static JSType getGreatestSubtype(JSType thisType,JSType thatType){
  if (thisType.isEquivalentTo(thatType)) {
    return thisType;
  }
 else   if (thisType.isUnknownType() || thatType.isUnknownType()) {
    return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
  }
 else   if (thisType.isSubtype(thatType)) {
    return filterNoResolvedType(thisType);
  }
 else   if (thatType.isSubtype(thisType)) {
    return filterNoResolvedType(thatType);
  }
 else   if (thisType.isUnionType()) {
    return thisType.toMaybeUnionType().meet(thatType);
  }
 else   if (thatType.isUnionType()) {
    return thatType.toMaybeUnionType().meet(thisType);
  }
  if (thisType.isEnumElementType()) {
    JSType inf=thisType.toMaybeEnumElementType().meet(thatType);
    if (inf != null) {
      return inf;
    }
  }
 else   if (thatType.isEnumElementType()) {
    JSType inf=thatType.toMaybeEnumElementType().meet(thisType);
    if (inf != null) {
      return inf;
    }
  }
  if (thisType.isObject() && thatType.isObject()) {
    return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  }
  return thisType.getNativeType(JSTypeNative.NO_TYPE);
}","/** 
 * A generic implementation meant to be used as a helper for common getGreatestSubtype implementations.
 */
static JSType getGreatestSubtype(JSType thisType,JSType thatType){
  if (thisType.isEquivalentTo(thatType)) {
    return thisType;
  }
 else   if (thisType.isUnknownType() || thatType.isUnknownType()) {
    return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
  }
 else   if (thisType.isSubtype(thatType)) {
    return filterNoResolvedType(thisType);
  }
 else   if (thatType.isSubtype(thisType)) {
    return filterNoResolvedType(thatType);
  }
 else   if (thisType.isUnionType()) {
    return thisType.toMaybeUnionType().meet(thatType);
  }
 else   if (thatType.isUnionType()) {
    return thatType.toMaybeUnionType().meet(thisType);
  }
 else   if (thisType.isRecordType()) {
    return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);
  }
 else   if (thatType.isRecordType()) {
    return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType);
  }
  if (thisType.isEnumElementType()) {
    JSType inf=thisType.toMaybeEnumElementType().meet(thatType);
    if (inf != null) {
      return inf;
    }
  }
 else   if (thatType.isEnumElementType()) {
    JSType inf=thatType.toMaybeEnumElementType().meet(thisType);
    if (inf != null) {
      return inf;
    }
  }
  if (thisType.isObject() && thatType.isObject()) {
    return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  }
  return thisType.getNativeType(JSTypeNative.NO_TYPE);
}",0.915841584158416
28086,"public boolean isRecordType(){
  return false;
}","public boolean isRecordType(){
  return toMaybeRecordType() != null;
}",0.7627118644067796
28087,"@Override public boolean isSubtype(JSType that){
  if (JSType.isSubtypeHelper(this,that)) {
    return true;
  }
  if (that.isUnionType()) {
    return false;
  }
  if (that instanceof RecordType) {
    return RecordType.isSubtype(this,(RecordType)that);
  }
  ObjectType thatObj=that.toObjectType();
  ObjectType thatCtor=thatObj == null ? null : thatObj.getConstructor();
  if (thatCtor != null && thatCtor.isInterface()) {
    Iterable<ObjectType> thisInterfaces=getCtorImplementedInterfaces();
    for (    ObjectType thisInterface : thisInterfaces) {
      if (thisInterface.isSubtype(that)) {
        return true;
      }
    }
  }
  if (getConstructor() != null && getConstructor().isInterface()) {
    for (    ObjectType thisInterface : getCtorExtendedInterfaces()) {
      if (thisInterface.isSubtype(that)) {
        return true;
      }
    }
  }
  if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
    return true;
  }
  return this.isImplicitPrototype(thatObj);
}","@Override public boolean isSubtype(JSType that){
  if (JSType.isSubtypeHelper(this,that)) {
    return true;
  }
  if (that.isUnionType()) {
    return false;
  }
  if (that.isRecordType()) {
    return RecordType.isSubtype(this,that.toMaybeRecordType());
  }
  ObjectType thatObj=that.toObjectType();
  ObjectType thatCtor=thatObj == null ? null : thatObj.getConstructor();
  if (thatCtor != null && thatCtor.isInterface()) {
    Iterable<ObjectType> thisInterfaces=getCtorImplementedInterfaces();
    for (    ObjectType thisInterface : thisInterfaces) {
      if (thisInterface.isSubtype(that)) {
        return true;
      }
    }
  }
  if (getConstructor() != null && getConstructor().isInterface()) {
    for (    ObjectType thisInterface : getCtorExtendedInterfaces()) {
      if (thisInterface.isSubtype(that)) {
        return true;
      }
    }
  }
  if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
    return true;
  }
  return this.isImplicitPrototype(thatObj);
}",0.98126582278481
28088,"@Override public boolean isEquivalentTo(JSType other){
  if (!(other instanceof RecordType)) {
    return false;
  }
  RecordType otherRecord=(RecordType)other;
  Set<String> keySet=properties.keySet();
  Map<String,JSType> otherProps=otherRecord.properties;
  if (!otherProps.keySet().equals(keySet)) {
    return false;
  }
  for (  String key : keySet) {
    if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
      return false;
    }
  }
  return true;
}","@Override public boolean isEquivalentTo(JSType other){
  if (!other.isRecordType()) {
    return false;
  }
  RecordType otherRecord=other.toMaybeRecordType();
  if (otherRecord == this) {
    return true;
  }
  Set<String> keySet=properties.keySet();
  Map<String,JSType> otherProps=otherRecord.properties;
  if (!otherProps.keySet().equals(keySet)) {
    return false;
  }
  for (  String key : keySet) {
    if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
      return false;
    }
  }
  return true;
}",0.8982880161127895
28089,"/** 
 * Creates a record type.
 * @param registry The type registry under which this type lives.
 * @param properties A map of all the properties of this record type.
 * @throws IllegalStateException if the {@code RecordProperty} associatedwith a property is null.
 */
RecordType(JSTypeRegistry registry,Map<String,RecordProperty> properties){
  super(registry,null,null);
  for (  String property : properties.keySet()) {
    RecordProperty prop=properties.get(property);
    if (prop == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
  }
  isFrozen=true;
}","/** 
 * Creates a record type.
 * @param registry The type registry under which this type lives.
 * @param properties A map of all the properties of this record type.
 * @throws IllegalStateException if the {@code RecordProperty} associatedwith a property is null.
 */
RecordType(JSTypeRegistry registry,Map<String,RecordProperty> properties){
  super(registry,null,null);
  setPrettyPrint(true);
  for (  String property : properties.keySet()) {
    RecordProperty prop=properties.get(property);
    if (prop == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
  }
  isFrozen=true;
}",0.9821162444113264
28090,"@Override public JSType getLeastSupertype(JSType that){
  if (!that.isRecordType()) {
    return super.getLeastSupertype(that);
  }
  RecordType thatRecord=(RecordType)that;
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  for (  String property : properties.keySet()) {
    if (thatRecord.hasProperty(property) && thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
      builder.addProperty(property,getPropertyType(property),getPropertyNode(property));
    }
  }
  return builder.build();
}","@Override public JSType getLeastSupertype(JSType that){
  if (!that.isRecordType()) {
    return super.getLeastSupertype(that);
  }
  RecordType thatRecord=that.toMaybeRecordType();
  RecordTypeBuilder builder=new RecordTypeBuilder(registry);
  for (  String property : properties.keySet()) {
    if (thatRecord.hasProperty(property) && thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
      builder.addProperty(property,getPropertyType(property),getPropertyNode(property));
    }
  }
  return builder.build();
}",0.9630314232902032
28091,"/** 
 * Set the implicit prototype if it's possible to do so.
 * @return True if we were able to set the implicit prototype successfully,false if it was not possible to do so for some reason. There are a few different reasons why this could fail: for example, numbers can't be implicit prototypes, and we don't want to change the implicit prototype if other classes have already subclassed this one.
 */
public boolean resetImplicitPrototype(JSType type,ObjectType newImplicitProto){
  if (type instanceof PrototypeObjectType) {
    PrototypeObjectType poType=(PrototypeObjectType)type;
    if (!poType.hasCachedValues()) {
      poType.setImplicitPrototype(newImplicitProto);
      return true;
    }
  }
  return false;
}","/** 
 * Set the implicit prototype if it's possible to do so.
 * @return True if we were able to set the implicit prototype successfully,false if it was not possible to do so for some reason. There are a few different reasons why this could fail: for example, numbers can't be implicit prototypes, and we don't want to change the implicit prototype if other classes have already subclassed this one.
 */
public boolean resetImplicitPrototype(JSType type,ObjectType newImplicitProto){
  if (type instanceof PrototypeObjectType) {
    PrototypeObjectType poType=(PrototypeObjectType)type;
    poType.clearCachedValues();
    poType.setImplicitPrototype(newImplicitProto);
    return true;
  }
  return false;
}",0.960167714884696
28092,"/** 
 * Returns true if any cached valeus have been set for this type.  If true, then the prototype chain should not be changed, as it might invalidate the cached values.
 */
public boolean hasCachedValues(){
  return !unknown;
}","/** 
 * Returns true if any cached values have been set for this type.  If true, then the prototype chain should not be changed, as it might invalidate the cached values.
 */
public boolean hasCachedValues(){
  return !unknown;
}",0.9912663755458516
28093,"/** 
 * Sets the source node.
 */
public void setSource(Node source){
  if (null == source) {
    prototypeSlot=null;
  }
  this.source=source;
}","/** 
 * Sets the source node.
 */
public void setSource(Node source){
  if (prototypeSlot != null) {
    if (source == null || prototypeSlot.getNode() == null) {
      prototypeSlot=new Property(prototypeSlot.getName(),prototypeSlot.getType(),prototypeSlot.isTypeInferred(),source);
    }
  }
  this.source=source;
}",0.4902386117136659
28094,"/** 
 * Looks for a type expression at the current token and if found, returns it. Note that this method consumes input. Parameter type expressions are special for two reasons: <ol> <li>They must begin with '{', to distinguish type names from param names. <li>They may end in '=', to denote optionality. </ol>
 * @param token The current token.
 * @return The type expression found or null if none.
 */
private Node parseAndRecordParamTypeNode(JsDocToken token){
  Preconditions.checkArgument(token == JsDocToken.LC);
  int lineno=stream.getLineno();
  int startCharno=stream.getCharno();
  Node typeNode=parseParamTypeExpressionAnnotation(token);
  int endCharno=stream.getCharno();
  jsdocBuilder.markTypeNode(typeNode,lineno,startCharno,endCharno,true);
  return typeNode;
}","/** 
 * Looks for a type expression at the current token and if found, returns it. Note that this method consumes input. Parameter type expressions are special for two reasons: <ol> <li>They must begin with '{', to distinguish type names from param names. <li>They may end in '=', to denote optionality. </ol>
 * @param token The current token.
 * @return The type expression found or null if none.
 */
private Node parseAndRecordParamTypeNode(JsDocToken token){
  Preconditions.checkArgument(token == JsDocToken.LC);
  int lineno=stream.getLineno();
  int startCharno=stream.getCharno();
  Node typeNode=parseParamTypeExpressionAnnotation(token);
  if (typeNode != null) {
    int endLineno=stream.getLineno();
    int endCharno=stream.getCharno();
    jsdocBuilder.markTypeNode(typeNode,lineno,startCharno,endLineno,endCharno,true);
  }
  return typeNode;
}",0.8386308068459658
28095,"/** 
 * Looks for a parameter type expression at the current token and if found, returns it. Note that this method consumes input.
 * @param token The current token.
 * @param lineno The line of the type expression.
 * @param startCharno The starting character position of the type expression.
 * @param matchingLC Whether the type expression starts with a ""{"".
 * @param onlyParseSimpleNames If true, only simple type names are parsed(via a call to parseTypeNameAnnotation instead of parseTypeExpressionAnnotation).
 * @return The type expression found or null if none.
 */
private Node parseAndRecordTypeNode(JsDocToken token,int lineno,int startCharno,boolean matchingLC,boolean onlyParseSimpleNames){
  Node typeNode=null;
  if (onlyParseSimpleNames) {
    typeNode=parseTypeNameAnnotation(token);
  }
 else {
    typeNode=parseTypeExpressionAnnotation(token);
  }
  if (typeNode != null && !matchingLC) {
    typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
  }
  int endCharno=stream.getCharno();
  jsdocBuilder.markTypeNode(typeNode,lineno,startCharno,endCharno,matchingLC);
  return typeNode;
}","/** 
 * Looks for a parameter type expression at the current token and if found, returns it. Note that this method consumes input.
 * @param token The current token.
 * @param lineno The line of the type expression.
 * @param startCharno The starting character position of the type expression.
 * @param matchingLC Whether the type expression starts with a ""{"".
 * @param onlyParseSimpleNames If true, only simple type names are parsed(via a call to parseTypeNameAnnotation instead of parseTypeExpressionAnnotation).
 * @return The type expression found or null if none.
 */
private Node parseAndRecordTypeNode(JsDocToken token,int lineno,int startCharno,boolean matchingLC,boolean onlyParseSimpleNames){
  Node typeNode=null;
  if (onlyParseSimpleNames) {
    typeNode=parseTypeNameAnnotation(token);
  }
 else {
    typeNode=parseTypeExpressionAnnotation(token);
  }
  if (typeNode != null && !matchingLC) {
    typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
  }
  if (typeNode != null) {
    int endLineno=stream.getLineno();
    int endCharno=stream.getCharno();
    jsdocBuilder.markTypeNode(typeNode,lineno,startCharno,endLineno,endCharno,matchingLC);
  }
  return typeNode;
}",0.9502183406113536
28096,"/** 
 * Gets the list of all markers for the documentation in this JSDoc. 
 */
public Collection<Marker> getMarkers(){
  return documentation == null ? null : documentation.markers;
}","/** 
 * Gets the list of all markers for the documentation in this JSDoc. 
 */
public Collection<Marker> getMarkers(){
  return documentation == null ? ImmutableList.<Marker>of() : documentation.markers;
}",0.922680412371134
28097,"/** 
 * Adds a textual block to the current marker.
 */
public void markText(String text,int startLineno,int startCharno,int endLineno,int endCharno){
  if (currentMarker != null) {
    currentMarker.description=new JSDocInfo.StringPosition();
    currentMarker.description.setItem(text);
    currentMarker.description.setPositionInformation(startLineno,startCharno,endLineno,endCharno);
  }
}","/** 
 * Adds a textual block to the current marker.
 */
public void markText(String text,int startLineno,int startCharno,int endLineno,int endCharno){
  if (currentMarker != null) {
    JSDocInfo.StringPosition position=new JSDocInfo.StringPosition();
    position.setItem(text);
    position.setPositionInformation(startLineno,startCharno,endLineno,endCharno);
    currentMarker.setDescription(position);
  }
}",0.7985074626865671
28098,"/** 
 * Adds a marker to the current JSDocInfo and populates the marker with the annotation information.
 */
public void markAnnotation(String annotation,int lineno,int charno){
  JSDocInfo.Marker marker=currentInfo.addMarker();
  if (marker != null) {
    marker.annotation=new JSDocInfo.StringPosition();
    marker.annotation.setItem(annotation);
    marker.annotation.setPositionInformation(lineno,charno,lineno,charno + annotation.length());
  }
  currentMarker=marker;
}","/** 
 * Adds a marker to the current JSDocInfo and populates the marker with the annotation information.
 */
public void markAnnotation(String annotation,int lineno,int charno){
  JSDocInfo.Marker marker=currentInfo.addMarker();
  if (marker != null) {
    JSDocInfo.TrimmedStringPosition position=new JSDocInfo.TrimmedStringPosition();
    position.setItem(annotation);
    position.setPositionInformation(lineno,charno,lineno,charno + annotation.length());
    marker.setAnnotation(position);
    populated=true;
  }
  currentMarker=marker;
}",0.7490196078431373
28099,"/** 
 * Adds a name declaration to the current marker.
 */
public void markName(String name,int lineno,int charno){
  if (currentMarker != null) {
    currentMarker.name=new JSDocInfo.StringPosition();
    currentMarker.name.setItem(name);
    currentMarker.name.setPositionInformation(lineno,charno,lineno,charno + name.length());
  }
}","/** 
 * Adds a name declaration to the current marker.
 */
public void markName(String name,int lineno,int charno){
  if (currentMarker != null) {
    JSDocInfo.TrimmedStringPosition position=new JSDocInfo.TrimmedStringPosition();
    position.setItem(name);
    position.setPositionInformation(lineno,charno,lineno,charno + name.length());
    currentMarker.setName(position);
  }
}",0.5694444444444444
28100,"/** 
 * Adds a type declaration to the current marker.
 */
public void markTypeNode(Node typeNode,int lineno,int startCharno,int endCharno,boolean hasLC){
  if (currentMarker != null) {
    currentMarker.type=new JSDocInfo.TypePosition();
    currentMarker.type.setItem(typeNode);
    currentMarker.type.hasBrackets=hasLC;
    currentMarker.type.setPositionInformation(lineno,startCharno,lineno,endCharno);
  }
}","/** 
 * Adds a type declaration to the current marker.
 */
public void markTypeNode(Node typeNode,int lineno,int startCharno,int endLineno,int endCharno,boolean hasLC){
  if (currentMarker != null) {
    JSDocInfo.TypePosition position=new JSDocInfo.TypePosition();
    position.setItem(typeNode);
    position.setHasBrackets(hasLC);
    position.setPositionInformation(lineno,startCharno,endLineno,endCharno);
    currentMarker.setType(position);
  }
}",0.5595375722543353
28101,"/** 
 * Sets the position information contained in this source position.
 */
public void setPositionInformation(int startLineno,int startCharno,int endLineno,int endCharno){
  this.startLineno=startLineno;
  this.startCharno=startCharno;
  this.endLineno=endLineno;
  this.endCharno=endCharno;
}","/** 
 * Sets the position information contained in this source position.
 */
public void setPositionInformation(int startLineno,int startCharno,int endLineno,int endCharno){
  if (startLineno == endLineno) {
    if (startCharno >= endCharno) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + startCharno + ""String_Node_Str""+ ""String_Node_Str""+ endCharno);
    }
  }
 else {
    if (startLineno > endLineno) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + startLineno + ""String_Node_Str""+ ""String_Node_Str""+ endLineno);
    }
  }
  this.startLineno=startLineno;
  this.startCharno=startCharno;
  this.endLineno=endLineno;
  this.endCharno=endCharno;
}",0.5858987090367428
28102,"private void assertMarkerPosition(Node n,int lineno,int charno){
  int count=0;
  for (  JSDocInfo.Marker marker : n.getJSDocInfo().getMarkers()) {
    assertEquals(lineno,marker.annotation.getStartLine());
    assertEquals(charno,marker.annotation.getPositionOnStartLine());
    count++;
  }
  assertEquals(1,count);
}","private void assertMarkerPosition(Node n,int lineno,int charno){
  int count=0;
  for (  JSDocInfo.Marker marker : n.getJSDocInfo().getMarkers()) {
    assertEquals(lineno,marker.getAnnotation().getStartLine());
    assertEquals(charno,marker.getAnnotation().getPositionOnStartLine());
    count++;
  }
  assertEquals(1,count);
}",0.9228395061728396
28103,"private FlowScope narrowScope(FlowScope scope,Node node,JSType narrowed){
  scope=scope.createChildFlowScope();
  if (node.getType() == Token.GETPROP) {
    scope.inferQualifiedSlot(node.getQualifiedName(),getNativeType(UNKNOWN_TYPE),narrowed);
  }
 else {
    redeclareSimpleVar(scope,node,narrowed);
  }
  return scope;
}","private FlowScope narrowScope(FlowScope scope,Node node,JSType narrowed){
  scope=scope.createChildFlowScope();
  if (node.getType() == Token.GETPROP) {
    scope.inferQualifiedSlot(node.getQualifiedName(),getJSType(node),narrowed);
  }
 else {
    redeclareSimpleVar(scope,node,narrowed);
  }
  return scope;
}",0.9621451104100948
28104,"public void testClosure7() throws Exception {
  testClosureTypes(CLOSURE_DEFS + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}","public void testClosure7() throws Exception {
  testClosureTypes(CLOSURE_DEFS + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}",0.912442396313364
28105,"private void reportRefToUndefinedName(Name name,Ref ref){
  while (name.parent != null && name.parent.globalSets + name.parent.localSets == 0) {
    name=name.parent;
  }
  compiler.report(JSError.make(ref.getSourceName(),ref.node,level,UNDEFINED_NAME_WARNING,name.fullName()));
}","private void reportRefToUndefinedName(Name name,Ref ref){
  while (name.parent != null && name.parent.globalSets + name.parent.localSets == 0) {
    name=name.parent;
  }
  compiler.report(JSError.make(ref.getSourceName(),ref.node,level,UNDEFINED_NAME_WARNING,name.getFullName()));
}",0.9911190053285968
28106,"private void reportBadModuleReference(Name name,Ref ref){
  compiler.report(JSError.make(ref.source.getName(),ref.node,STRICT_MODULE_DEP_QNAME,ref.getModule().getName(),name.getDeclaration().getModule().getName(),name.fullName()));
}","private void reportBadModuleReference(Name name,Ref ref){
  compiler.report(JSError.make(ref.source.getName(),ref.node,STRICT_MODULE_DEP_QNAME,ref.getModule().getName(),name.getDeclaration().getModule().getName(),name.getFullName()));
}",0.9893390191897654
28107,"private void validateName(Name name,boolean isDefined){
  Ref declaration=name.getDeclaration();
  Name parent=name.parent;
  boolean singleGlobalParentDecl=parent != null && parent.getDeclaration() != null && parent.localSets == 0;
  JSModuleGraph moduleGraph=compiler.getModuleGraph();
  for (  Ref ref : name.getRefs()) {
    if (!isDefined && !isTypedef(ref)) {
      reportRefToUndefinedName(name,ref);
    }
 else     if (declaration != null && ref.getModule() != declaration.getModule() && !moduleGraph.dependsOn(ref.getModule(),declaration.getModule())) {
      reportBadModuleReference(name,ref);
    }
 else     if (ref.scope.isGlobal() && singleGlobalParentDecl && parent.getDeclaration().preOrderIndex > ref.preOrderIndex) {
      compiler.report(JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,name.fullName(),parent.fullName(),parent.getDeclaration().source.getName(),String.valueOf(parent.getDeclaration().node.getLineno())));
    }
  }
}","private void validateName(Name name,boolean isDefined){
  Ref declaration=name.getDeclaration();
  Name parent=name.parent;
  boolean singleGlobalParentDecl=parent != null && parent.getDeclaration() != null && parent.localSets == 0;
  JSModuleGraph moduleGraph=compiler.getModuleGraph();
  for (  Ref ref : name.getRefs()) {
    if (!isDefined && !isTypedef(ref)) {
      reportRefToUndefinedName(name,ref);
    }
 else     if (declaration != null && ref.getModule() != declaration.getModule() && !moduleGraph.dependsOn(ref.getModule(),declaration.getModule())) {
      reportBadModuleReference(name,ref);
    }
 else     if (ref.scope.isGlobal() && singleGlobalParentDecl && parent.getDeclaration().preOrderIndex > ref.preOrderIndex) {
      compiler.report(JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,name.getFullName(),parent.getFullName(),parent.getDeclaration().source.getName(),String.valueOf(parent.getDeclaration().node.getLineno())));
    }
  }
}",0.9948822927328556
28108,"/** 
 * Reports a warning because a namespace was redefined.
 * @param nameObj A namespace that is being redefined
 * @param ref The reference that set the namespace
 */
private void warnAboutNamespaceRedefinition(Name nameObj,Ref ref){
  compiler.report(JSError.make(ref.getSourceName(),ref.node,NAMESPACE_REDEFINED_WARNING,nameObj.fullName()));
}","/** 
 * Reports a warning because a namespace was redefined.
 * @param nameObj A namespace that is being redefined
 * @param ref The reference that set the namespace
 */
private void warnAboutNamespaceRedefinition(Name nameObj,Ref ref){
  compiler.report(JSError.make(ref.getSourceName(),ref.node,NAMESPACE_REDEFINED_WARNING,nameObj.getFullName()));
}",0.9928469241773964
28109,"/** 
 * Warns about any references to ""this"" in the given FUNCTION. The function is getting collapsed, so the references will change.
 */
private void checkForHosedThisReferences(Node function,JSDocInfo docInfo,final Name name){
  if (docInfo == null || (!docInfo.isConstructor() && !docInfo.hasThisType())) {
    NodeTraversal.traverse(compiler,function.getLastChild(),new NodeTraversal.AbstractShallowCallback(){
      @Override public void visit(      NodeTraversal t,      Node n,      Node parent){
        if (n.getType() == Token.THIS) {
          compiler.report(JSError.make(name.getDeclaration().getSourceName(),n,UNSAFE_THIS,name.fullName()));
        }
      }
    }
);
  }
}","/** 
 * Warns about any references to ""this"" in the given FUNCTION. The function is getting collapsed, so the references will change.
 */
private void checkForHosedThisReferences(Node function,JSDocInfo docInfo,final Name name){
  if (docInfo == null || (!docInfo.isConstructor() && !docInfo.hasThisType())) {
    NodeTraversal.traverse(compiler,function.getLastChild(),new NodeTraversal.AbstractShallowCallback(){
      @Override public void visit(      NodeTraversal t,      Node n,      Node parent){
        if (n.getType() == Token.THIS) {
          compiler.report(JSError.make(name.getDeclaration().getSourceName(),n,UNSAFE_THIS,name.getFullName()));
        }
      }
    }
);
  }
}",0.9963689179375452
28110,"@Override public void process(Node externs,Node root){
  GlobalNamespace namespace;
  if (collapsePropertiesOnExternTypes) {
    namespace=new GlobalNamespace(compiler,externs,root);
  }
 else {
    namespace=new GlobalNamespace(compiler,root);
  }
  if (inlineAliases) {
    inlineAliases(namespace);
  }
  nameMap=namespace.getNameIndex();
  globalNames=namespace.getNameForest();
  checkNamespaces();
  for (  Name n : globalNames) {
    flattenReferencesToCollapsibleDescendantNames(n,n.getName());
  }
  for (  Name n : globalNames) {
    collapseDeclarationOfNameAndDescendants(n,n.getName());
  }
}","@Override public void process(Node externs,Node root){
  GlobalNamespace namespace;
  if (collapsePropertiesOnExternTypes) {
    namespace=new GlobalNamespace(compiler,externs,root);
  }
 else {
    namespace=new GlobalNamespace(compiler,root);
  }
  if (inlineAliases) {
    inlineAliases(namespace);
  }
  nameMap=namespace.getNameIndex();
  globalNames=namespace.getNameForest();
  checkNamespaces();
  for (  Name n : globalNames) {
    flattenReferencesToCollapsibleDescendantNames(n,n.getBaseName());
  }
  for (  Name n : globalNames) {
    collapseDeclarationOfNameAndDescendants(n,n.getBaseName());
  }
}",0.993431855500821
28111,"/** 
 * Flattens all references to collapsible properties of a global name except their initial definitions. Recurses on subnames.
 * @param n An object representing a global name
 * @param alias The flattened name for {@code n}
 */
private void flattenReferencesToCollapsibleDescendantNames(Name n,String alias){
  if (n.props == null)   return;
  for (  Name p : n.props) {
    String propAlias=appendPropForAlias(alias,p.getName());
    if (p.canCollapse()) {
      flattenReferencesTo(p,propAlias);
    }
 else     if (p.isSimpleStubDeclaration()) {
      flattenSimpleStubDeclaration(p,propAlias);
    }
    flattenReferencesToCollapsibleDescendantNames(p,propAlias);
  }
}","/** 
 * Flattens all references to collapsible properties of a global name except their initial definitions. Recurses on subnames.
 * @param n An object representing a global name
 * @param alias The flattened name for {@code n}
 */
private void flattenReferencesToCollapsibleDescendantNames(Name n,String alias){
  if (n.props == null)   return;
  for (  Name p : n.props) {
    String propAlias=appendPropForAlias(alias,p.getBaseName());
    if (p.canCollapse()) {
      flattenReferencesTo(p,propAlias);
    }
 else     if (p.isSimpleStubDeclaration()) {
      flattenSimpleStubDeclaration(p,propAlias);
    }
    flattenReferencesToCollapsibleDescendantNames(p,propAlias);
  }
}",0.9970588235294118
28112,"/** 
 * Updates the initial assignment to a collapsible property at global scope by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1). The property's value may either be a primitive or an object literal or function whose properties aren't collapsible.
 * @param alias The flattened property name (e.g. ""a$b"")
 * @param refName The name for the reference being updated.
 * @param ref An object containing information about the assignment gettingupdated
 */
private void updateSimpleDeclaration(String alias,Name refName,Ref ref){
  Node rvalue=ref.node.getNext();
  Node parent=ref.node.getParent();
  Node gramps=parent.getParent();
  Node greatGramps=gramps.getParent();
  Node greatGreatGramps=greatGramps.getParent();
  if (rvalue != null && rvalue.getType() == Token.FUNCTION) {
    checkForHosedThisReferences(rvalue,refName.docInfo,refName);
  }
  Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,gramps.getFirstChild(),refName.fullName());
  NodeUtil.copyNameAnnotations(ref.node.getLastChild(),nameNode);
  if (gramps.getType() == Token.EXPR_RESULT) {
    parent.removeChild(rvalue);
    nameNode.addChildToFront(rvalue);
    Node varNode=new Node(Token.VAR,nameNode);
    greatGramps.replaceChild(gramps,varNode);
  }
 else {
    Preconditions.checkNotNull(ref.getTwin());
    Node current=gramps;
    Node currentParent=gramps.getParent();
    for (; currentParent.getType() != Token.SCRIPT && currentParent.getType() != Token.BLOCK; current=currentParent, currentParent=currentParent.getParent()) {
    }
    Node stubVar=new Node(Token.VAR,nameNode.cloneTree()).copyInformationFrom(nameNode);
    currentParent.addChildBefore(stubVar,current);
    parent.replaceChild(ref.node,nameNode);
  }
  compiler.reportCodeChange();
}","/** 
 * Updates the initial assignment to a collapsible property at global scope by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1). The property's value may either be a primitive or an object literal or function whose properties aren't collapsible.
 * @param alias The flattened property name (e.g. ""a$b"")
 * @param refName The name for the reference being updated.
 * @param ref An object containing information about the assignment gettingupdated
 */
private void updateSimpleDeclaration(String alias,Name refName,Ref ref){
  Node rvalue=ref.node.getNext();
  Node parent=ref.node.getParent();
  Node gramps=parent.getParent();
  Node greatGramps=gramps.getParent();
  Node greatGreatGramps=greatGramps.getParent();
  if (rvalue != null && rvalue.getType() == Token.FUNCTION) {
    checkForHosedThisReferences(rvalue,refName.docInfo,refName);
  }
  Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,gramps.getFirstChild(),refName.getFullName());
  NodeUtil.copyNameAnnotations(ref.node.getLastChild(),nameNode);
  if (gramps.getType() == Token.EXPR_RESULT) {
    parent.removeChild(rvalue);
    nameNode.addChildToFront(rvalue);
    Node varNode=new Node(Token.VAR,nameNode);
    greatGramps.replaceChild(gramps,varNode);
  }
 else {
    Preconditions.checkNotNull(ref.getTwin());
    Node current=gramps;
    Node currentParent=gramps.getParent();
    for (; currentParent.getType() != Token.SCRIPT && currentParent.getType() != Token.BLOCK; current=currentParent, currentParent=currentParent.getParent()) {
    }
    Node stubVar=new Node(Token.VAR,nameNode.cloneTree()).copyInformationFrom(nameNode);
    currentParent.addChildBefore(stubVar,current);
    parent.replaceChild(ref.node,nameNode);
  }
  compiler.reportCodeChange();
}",0.9985911524373062
28113,"/** 
 * Declares global variables to serve as aliases for the values in an object literal, optionally removing all of the object literal's keys and values.
 * @param alias The object literal's flattened name (e.g. ""a$b$c"")
 * @param objlit The OBJLIT node
 * @param varNode The VAR node to which new global variables should be addedas children
 * @param nameToAddAfter The child of {@code varNode} after which newvariables should be added (may be null)
 * @param varParent {@code varNode}'s parent
 * @return The number of variables added
 */
private int declareVarsForObjLitValues(Name objlitName,String alias,Node objlit,Node varNode,Node nameToAddAfter,Node varParent){
  int numVars=0;
  int arbitraryNameCounter=0;
  boolean discardKeys=!objlitName.shouldKeepKeys();
  for (Node key=objlit.getFirstChild(), nextKey; key != null; key=nextKey) {
    Node value=key.getFirstChild();
    nextKey=key.getNext();
    if (key.getType() == Token.GET || key.getType() == Token.SET) {
      continue;
    }
    boolean isJsIdentifier=key.getType() != Token.NUMBER && TokenStream.isJSIdentifier(key.getString());
    String propName=isJsIdentifier ? key.getString() : String.valueOf(++arbitraryNameCounter);
    String qName=objlitName.fullName() + '.' + propName;
    Name p=nameMap.get(qName);
    if (p != null && !p.canCollapse()) {
      continue;
    }
    String propAlias=appendPropForAlias(alias,propName);
    Node refNode=null;
    if (discardKeys) {
      objlit.removeChild(key);
      value.detachFromParent();
    }
 else {
      refNode=Node.newString(Token.NAME,propAlias);
      if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
        refNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
      }
      key.replaceChild(value,refNode);
    }
    Node nameNode=Node.newString(Token.NAME,propAlias);
    nameNode.addChildToFront(value);
    if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
    }
    Node newVar=new Node(Token.VAR,nameNode).copyInformationFromForTree(key);
    if (nameToAddAfter != null) {
      varParent.addChildAfter(newVar,nameToAddAfter);
    }
 else {
      varParent.addChildBefore(newVar,varNode);
    }
    compiler.reportCodeChange();
    nameToAddAfter=newVar;
    if (isJsIdentifier && p != null) {
      if (!discardKeys) {
        Ref newAlias=p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);
        newAlias.node=refNode;
        p.addRef(newAlias);
      }
      p.getDeclaration().node=nameNode;
      if (value.getType() == Token.FUNCTION) {
        checkForHosedThisReferences(value,value.getJSDocInfo(),p);
      }
    }
    numVars++;
  }
  return numVars;
}","/** 
 * Declares global variables to serve as aliases for the values in an object literal, optionally removing all of the object literal's keys and values.
 * @param alias The object literal's flattened name (e.g. ""a$b$c"")
 * @param objlit The OBJLIT node
 * @param varNode The VAR node to which new global variables should be addedas children
 * @param nameToAddAfter The child of {@code varNode} after which newvariables should be added (may be null)
 * @param varParent {@code varNode}'s parent
 * @return The number of variables added
 */
private int declareVarsForObjLitValues(Name objlitName,String alias,Node objlit,Node varNode,Node nameToAddAfter,Node varParent){
  int numVars=0;
  int arbitraryNameCounter=0;
  boolean discardKeys=!objlitName.shouldKeepKeys();
  for (Node key=objlit.getFirstChild(), nextKey; key != null; key=nextKey) {
    Node value=key.getFirstChild();
    nextKey=key.getNext();
    if (key.getType() == Token.GET || key.getType() == Token.SET) {
      continue;
    }
    boolean isJsIdentifier=key.getType() != Token.NUMBER && TokenStream.isJSIdentifier(key.getString());
    String propName=isJsIdentifier ? key.getString() : String.valueOf(++arbitraryNameCounter);
    String qName=objlitName.getFullName() + '.' + propName;
    Name p=nameMap.get(qName);
    if (p != null && !p.canCollapse()) {
      continue;
    }
    String propAlias=appendPropForAlias(alias,propName);
    Node refNode=null;
    if (discardKeys) {
      objlit.removeChild(key);
      value.detachFromParent();
    }
 else {
      refNode=Node.newString(Token.NAME,propAlias);
      if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
        refNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
      }
      key.replaceChild(value,refNode);
    }
    Node nameNode=Node.newString(Token.NAME,propAlias);
    nameNode.addChildToFront(value);
    if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
    }
    Node newVar=new Node(Token.VAR,nameNode).copyInformationFromForTree(key);
    if (nameToAddAfter != null) {
      varParent.addChildAfter(newVar,nameToAddAfter);
    }
 else {
      varParent.addChildBefore(newVar,varNode);
    }
    compiler.reportCodeChange();
    nameToAddAfter=newVar;
    if (isJsIdentifier && p != null) {
      if (!discardKeys) {
        Ref newAlias=p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);
        newAlias.node=refNode;
        p.addRef(newAlias);
      }
      p.getDeclaration().node=nameNode;
      if (value.getType() == Token.FUNCTION) {
        checkForHosedThisReferences(value,value.getJSDocInfo(),p);
      }
    }
    numVars++;
  }
  return numVars;
}",0.9990673381831748
28114,"/** 
 * Adds global variable ""stubs"" for any properties of a global name that are only set in a local scope or read but never set.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name of the object whose properties we areadding stubs for (e.g. ""a$b$c"")
 * @param parent The node to which new global variables should be addedas children
 * @param addAfter The child of after which newvariables should be added (may be null)
 * @return The number of variables added
 */
private int addStubsForUndeclaredProperties(Name n,String alias,Node parent,Node addAfter){
  Preconditions.checkState(n.canCollapseUnannotatedChildNames());
  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
  Preconditions.checkNotNull(addAfter);
  int numStubs=0;
  if (n.props != null) {
    for (    Name p : n.props) {
      if (p.needsToBeStubbed()) {
        String propAlias=appendPropForAlias(alias,p.getName());
        Node nameNode=Node.newString(Token.NAME,propAlias);
        Node newVar=new Node(Token.VAR,nameNode).copyInformationFromForTree(addAfter);
        parent.addChildAfter(newVar,addAfter);
        addAfter=newVar;
        numStubs++;
        compiler.reportCodeChange();
        if (p.getRefs().get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
          nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
        }
      }
    }
  }
  return numStubs;
}","/** 
 * Adds global variable ""stubs"" for any properties of a global name that are only set in a local scope or read but never set.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name of the object whose properties we areadding stubs for (e.g. ""a$b$c"")
 * @param parent The node to which new global variables should be addedas children
 * @param addAfter The child of after which newvariables should be added (may be null)
 * @return The number of variables added
 */
private int addStubsForUndeclaredProperties(Name n,String alias,Node parent,Node addAfter){
  Preconditions.checkState(n.canCollapseUnannotatedChildNames());
  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
  Preconditions.checkNotNull(addAfter);
  int numStubs=0;
  if (n.props != null) {
    for (    Name p : n.props) {
      if (p.needsToBeStubbed()) {
        String propAlias=appendPropForAlias(alias,p.getBaseName());
        Node nameNode=Node.newString(Token.NAME,propAlias);
        Node newVar=new Node(Token.VAR,nameNode).copyInformationFromForTree(addAfter);
        parent.addChildAfter(newVar,addAfter);
        addAfter=newVar;
        numStubs++;
        compiler.reportCodeChange();
        if (p.getRefs().get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
          nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
        }
      }
    }
  }
  return numStubs;
}",0.9986091794158554
28115,"/** 
 * Flattens all references to a collapsible property of a global name except its initial definition.
 * @param n A global property name (e.g. ""a.b"" or ""a.b.c.d"")
 * @param alias The flattened name (e.g. ""a$b"" or ""a$b$c$d"")
 */
private void flattenReferencesTo(Name n,String alias){
  String originalName=n.fullName();
  for (  Ref r : n.getRefs()) {
    if (r == n.getDeclaration()) {
      continue;
    }
    Node rParent=r.node.getParent();
    if (!NodeUtil.isObjectLitKey(r.node,rParent) && (r.getTwin() == null || r.isSet())) {
      flattenNameRef(alias,r.node,rParent,originalName);
    }
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      flattenPrefixes(alias,p,1);
    }
  }
}","/** 
 * Flattens all references to a collapsible property of a global name except its initial definition.
 * @param n A global property name (e.g. ""a.b"" or ""a.b.c.d"")
 * @param alias The flattened name (e.g. ""a$b"" or ""a$b$c$d"")
 */
private void flattenReferencesTo(Name n,String alias){
  String originalName=n.getFullName();
  for (  Ref r : n.getRefs()) {
    if (r == n.getDeclaration()) {
      continue;
    }
    Node rParent=r.node.getParent();
    if (!NodeUtil.isObjectLitKey(r.node,rParent) && (r.getTwin() == null || r.isSet())) {
      flattenNameRef(alias,r.node,rParent,originalName);
    }
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      flattenPrefixes(alias,p,1);
    }
  }
}",0.996481351161154
28116,"/** 
 * Flattens all occurrences of a name as a prefix of subnames beginning with a particular subname.
 * @param n A global property name (e.g. ""a.b.c.d"")
 * @param alias A flattened prefix name (e.g. ""a$b"")
 * @param depth The difference in depth between the property name andthe prefix name (e.g. 2)
 */
private void flattenPrefixes(String alias,Name n,int depth){
  String originalName=n.fullName();
  Ref decl=n.getDeclaration();
  if (decl != null && decl.node != null && decl.node.getType() == Token.GETPROP) {
    flattenNameRefAtDepth(alias,decl.node,depth,originalName);
  }
  for (  Ref r : n.getRefs()) {
    if (r == decl) {
      continue;
    }
    if (r.getTwin() == null || r.isSet()) {
      flattenNameRefAtDepth(alias,r.node,depth,originalName);
    }
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      flattenPrefixes(alias,p,depth + 1);
    }
  }
}","/** 
 * Flattens all occurrences of a name as a prefix of subnames beginning with a particular subname.
 * @param n A global property name (e.g. ""a.b.c.d"")
 * @param alias A flattened prefix name (e.g. ""a$b"")
 * @param depth The difference in depth between the property name andthe prefix name (e.g. 2)
 */
private void flattenPrefixes(String alias,Name n,int depth){
  String originalName=n.getFullName();
  Ref decl=n.getDeclaration();
  if (decl != null && decl.node != null && decl.node.getType() == Token.GETPROP) {
    flattenNameRefAtDepth(alias,decl.node,depth,originalName);
  }
  for (  Ref r : n.getRefs()) {
    if (r == decl) {
      continue;
    }
    if (r.getTwin() == null || r.isSet()) {
      flattenNameRefAtDepth(alias,r.node,depth,originalName);
    }
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      flattenPrefixes(alias,p,depth + 1);
    }
  }
}",0.9971862689926844
28117,"/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at an ASSIGN node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name for {@code n} (e.g. ""a"", ""a$b$c"")
 */
private void updateObjLitOrFunctionDeclarationAtAssignNode(Name n,String alias,boolean canCollapseChildNames){
  Ref ref=n.getDeclaration();
  Node rvalue=ref.node.getNext();
  Node varNode=new Node(Token.VAR);
  Node varParent=ref.node.getAncestor(3);
  Node gramps=ref.node.getAncestor(2);
  boolean isObjLit=rvalue.getType() == Token.OBJECTLIT;
  boolean insertedVarNode=false;
  if (isObjLit && n.canEliminate()) {
    varParent.replaceChild(gramps,varNode);
    ref.node=null;
    insertedVarNode=true;
  }
 else   if (!n.isSimpleName()) {
    if (rvalue.getType() == Token.FUNCTION) {
      checkForHosedThisReferences(rvalue,n.docInfo,n);
    }
    ref.node.getParent().removeChild(rvalue);
    Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,ref.node.getAncestor(2),n.fullName());
    JSDocInfo info=ref.node.getParent().getJSDocInfo();
    if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME) || (info != null && info.isConstant())) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
    }
    varNode.addChildToBack(nameNode);
    nameNode.addChildToFront(rvalue);
    varParent.replaceChild(gramps,varNode);
    ref.node=nameNode;
    insertedVarNode=true;
  }
  if (canCollapseChildNames) {
    if (isObjLit) {
      declareVarsForObjLitValues(n,alias,rvalue,varNode,varParent.getChildBefore(varNode),varParent);
    }
    addStubsForUndeclaredProperties(n,alias,varParent,varNode);
  }
  if (insertedVarNode) {
    if (!varNode.hasChildren()) {
      varParent.removeChild(varNode);
    }
    compiler.reportCodeChange();
  }
}","/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at an ASSIGN node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name for {@code n} (e.g. ""a"", ""a$b$c"")
 */
private void updateObjLitOrFunctionDeclarationAtAssignNode(Name n,String alias,boolean canCollapseChildNames){
  Ref ref=n.getDeclaration();
  Node rvalue=ref.node.getNext();
  Node varNode=new Node(Token.VAR);
  Node varParent=ref.node.getAncestor(3);
  Node gramps=ref.node.getAncestor(2);
  boolean isObjLit=rvalue.getType() == Token.OBJECTLIT;
  boolean insertedVarNode=false;
  if (isObjLit && n.canEliminate()) {
    varParent.replaceChild(gramps,varNode);
    ref.node=null;
    insertedVarNode=true;
  }
 else   if (!n.isSimpleName()) {
    if (rvalue.getType() == Token.FUNCTION) {
      checkForHosedThisReferences(rvalue,n.docInfo,n);
    }
    ref.node.getParent().removeChild(rvalue);
    Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,ref.node.getAncestor(2),n.getFullName());
    JSDocInfo info=ref.node.getParent().getJSDocInfo();
    if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME) || (info != null && info.isConstant())) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
    }
    varNode.addChildToBack(nameNode);
    nameNode.addChildToFront(rvalue);
    varParent.replaceChild(gramps,varNode);
    ref.node=nameNode;
    insertedVarNode=true;
  }
  if (canCollapseChildNames) {
    if (isObjLit) {
      declareVarsForObjLitValues(n,alias,rvalue,varNode,varParent.getChildBefore(varNode),varParent);
    }
    addStubsForUndeclaredProperties(n,alias,varParent,varNode);
  }
  if (insertedVarNode) {
    if (!varNode.hasChildren()) {
      varParent.removeChild(varNode);
    }
    compiler.reportCodeChange();
  }
}",0.998683170924414
28118,"@Override public void visit(NodeTraversal t,Node n,Node parent){
  if (n.getType() == Token.THIS) {
    compiler.report(JSError.make(name.getDeclaration().getSourceName(),n,UNSAFE_THIS,name.fullName()));
  }
}","@Override public void visit(NodeTraversal t,Node n,Node parent){
  if (n.getType() == Token.THIS) {
    compiler.report(JSError.make(name.getDeclaration().getSourceName(),n,UNSAFE_THIS,name.getFullName()));
  }
}",0.98812351543943
28119,"/** 
 * Reports a warning because a namespace was aliased.
 * @param nameObj A namespace that is being aliased
 * @param ref The reference that forced the alias
 */
private void warnAboutNamespaceAliasing(Name nameObj,Ref ref){
  compiler.report(JSError.make(ref.getSourceName(),ref.node,UNSAFE_NAMESPACE_WARNING,nameObj.fullName()));
}","/** 
 * Reports a warning because a namespace was aliased.
 * @param nameObj A namespace that is being aliased
 * @param ref The reference that forced the alias
 */
private void warnAboutNamespaceAliasing(Name nameObj,Ref ref){
  compiler.report(JSError.make(ref.getSourceName(),ref.node,UNSAFE_NAMESPACE_WARNING,nameObj.getFullName()));
}",0.9925925925925926
28120,"/** 
 * Flattens a stub declaration. This is mostly a hack to support legacy users.
 */
private void flattenSimpleStubDeclaration(Name name,String alias){
  Ref ref=Iterables.getOnlyElement(name.getRefs());
  Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,ref.node,name.fullName());
  Node varNode=new Node(Token.VAR,nameNode).copyInformationFrom(nameNode);
  Preconditions.checkState(ref.node.getParent().getType() == Token.EXPR_RESULT);
  Node parent=ref.node.getParent();
  Node gramps=parent.getParent();
  gramps.replaceChild(parent,varNode);
  compiler.reportCodeChange();
}","/** 
 * Flattens a stub declaration. This is mostly a hack to support legacy users.
 */
private void flattenSimpleStubDeclaration(Name name,String alias){
  Ref ref=Iterables.getOnlyElement(name.getRefs());
  Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,ref.node,name.getFullName());
  Node varNode=new Node(Token.VAR,nameNode).copyInformationFrom(nameNode);
  Preconditions.checkState(ref.node.getParent().getType() == Token.EXPR_RESULT);
  Node parent=ref.node.getParent();
  Node gramps=parent.getParent();
  gramps.replaceChild(parent,varNode);
  compiler.reportCodeChange();
}",0.995850622406639
28121,"/** 
 * Collapses definitions of the collapsible properties of a global name. Recurses on subnames that also represent JavaScript objects with collapsible properties.
 * @param n A node representing a global name
 * @param alias The flattened name for {@code n}
 */
private void collapseDeclarationOfNameAndDescendants(Name n,String alias){
  boolean canCollapseChildNames=n.canCollapseUnannotatedChildNames();
  if (n.canCollapse()) {
    updateObjLitOrFunctionDeclaration(n,alias,canCollapseChildNames);
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      collapseDeclarationOfNameAndDescendants(p,appendPropForAlias(alias,p.getName()));
      if (!p.inExterns && canCollapseChildNames && p.getDeclaration() != null && p.canCollapse() && p.getDeclaration().node != null && p.getDeclaration().node.getParent() != null && p.getDeclaration().node.getParent().getType() == Token.ASSIGN) {
        updateSimpleDeclaration(appendPropForAlias(alias,p.getName()),p,p.getDeclaration());
      }
    }
  }
}","/** 
 * Collapses definitions of the collapsible properties of a global name. Recurses on subnames that also represent JavaScript objects with collapsible properties.
 * @param n A node representing a global name
 * @param alias The flattened name for {@code n}
 */
private void collapseDeclarationOfNameAndDescendants(Name n,String alias){
  boolean canCollapseChildNames=n.canCollapseUnannotatedChildNames();
  if (n.canCollapse()) {
    updateObjLitOrFunctionDeclaration(n,alias,canCollapseChildNames);
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      collapseDeclarationOfNameAndDescendants(p,appendPropForAlias(alias,p.getBaseName()));
      if (!p.inExterns && canCollapseChildNames && p.getDeclaration() != null && p.canCollapse() && p.getDeclaration().node != null && p.getDeclaration().node.getParent() != null && p.getDeclaration().node.getParent().getType() == Token.ASSIGN) {
        updateSimpleDeclaration(appendPropForAlias(alias,p.getBaseName()),p,p.getDeclaration());
      }
    }
  }
}",0.9960745829244356
28122,"@Override public String getName(){
  return name;
}","@Override public String getName(){
  return getFullName();
}",0.9009009009009008
28123,"Name(String name,Name parent,boolean inExterns){
  this.name=name;
  this.parent=parent;
  this.type=Type.OTHER;
  this.inExterns=inExterns;
}","Name(String name,Name parent,boolean inExterns){
  this.baseName=name;
  this.parent=parent;
  this.type=Type.OTHER;
  this.inExterns=inExterns;
}",0.9791666666666666
28124,"@Override public String toString(){
  return fullName() + ""String_Node_Str"" + type+ ""String_Node_Str""+ globalSets+ ""String_Node_Str""+ localSets+ ""String_Node_Str""+ totalGets+ ""String_Node_Str""+ aliasingGets+ ""String_Node_Str""+ callGets;
}","@Override public String toString(){
  return getFullName() + ""String_Node_Str"" + type+ ""String_Node_Str""+ globalSets+ ""String_Node_Str""+ localSets+ ""String_Node_Str""+ totalGets+ ""String_Node_Str""+ aliasingGets+ ""String_Node_Str""+ callGets;
}",0.9895615866388308
28125,"@Override public void visit(NodeTraversal t,Node n,Node parent){
  RefInfo refInfo=allRefInfo.get(n);
  if (refInfo != null) {
    Ref ref=refInfo.ref;
    Name name=refInfo.name;
    String fullName=name.fullName();
switch (ref.type) {
case SET_FROM_GLOBAL:
case SET_FROM_LOCAL:
      Node valParent=getValueParent(ref);
    Node val=valParent.getLastChild();
  if (valParent.getType() == Token.ASSIGN && name.isSimpleName() && name.getDeclaration() == ref) {
    compiler.report(t.makeError(val,INVALID_DEFINE_INIT_ERROR,fullName));
  }
 else   if (processDefineAssignment(t,fullName,val,valParent)) {
    refInfo.name.removeRef(ref);
    lvalueToRemoveLater=valParent;
  }
break;
default :
if (t.inGlobalScope()) {
DefineInfo info=assignableDefines.get(fullName);
if (info != null) {
  setDefineInfoNotAssignable(info,t);
  assignableDefines.remove(fullName);
}
}
break;
}
}
if (!t.inGlobalScope() && n.getJSDocInfo() != null && n.getJSDocInfo().isDefine()) {
compiler.report(t.makeError(n,NON_GLOBAL_DEFINE_INIT_ERROR,""String_Node_Str""));
}
if (lvalueToRemoveLater == n) {
lvalueToRemoveLater=null;
if (n.getType() == Token.ASSIGN) {
Node last=n.getLastChild();
n.removeChild(last);
parent.replaceChild(n,last);
}
 else {
Preconditions.checkState(n.getType() == Token.NAME);
n.removeChild(n.getFirstChild());
}
compiler.reportCodeChange();
}
if (n.getType() == Token.CALL) {
if (t.inGlobalScope()) {
for (DefineInfo info : assignableDefines.values()) {
setDefineInfoNotAssignable(info,t);
}
assignableDefines.clear();
}
}
updateAssignAllowedStack(n,false);
}","@Override public void visit(NodeTraversal t,Node n,Node parent){
  RefInfo refInfo=allRefInfo.get(n);
  if (refInfo != null) {
    Ref ref=refInfo.ref;
    Name name=refInfo.name;
    String fullName=name.getFullName();
switch (ref.type) {
case SET_FROM_GLOBAL:
case SET_FROM_LOCAL:
      Node valParent=getValueParent(ref);
    Node val=valParent.getLastChild();
  if (valParent.getType() == Token.ASSIGN && name.isSimpleName() && name.getDeclaration() == ref) {
    compiler.report(t.makeError(val,INVALID_DEFINE_INIT_ERROR,fullName));
  }
 else   if (processDefineAssignment(t,fullName,val,valParent)) {
    refInfo.name.removeRef(ref);
    lvalueToRemoveLater=valParent;
  }
break;
default :
if (t.inGlobalScope()) {
DefineInfo info=assignableDefines.get(fullName);
if (info != null) {
  setDefineInfoNotAssignable(info,t);
  assignableDefines.remove(fullName);
}
}
break;
}
}
if (!t.inGlobalScope() && n.getJSDocInfo() != null && n.getJSDocInfo().isDefine()) {
compiler.report(t.makeError(n,NON_GLOBAL_DEFINE_INIT_ERROR,""String_Node_Str""));
}
if (lvalueToRemoveLater == n) {
lvalueToRemoveLater=null;
if (n.getType() == Token.ASSIGN) {
Node last=n.getLastChild();
n.removeChild(last);
parent.replaceChild(n,last);
}
 else {
Preconditions.checkState(n.getType() == Token.NAME);
n.removeChild(n.getFirstChild());
}
compiler.reportCodeChange();
}
if (n.getType() == Token.CALL) {
if (t.inGlobalScope()) {
for (DefineInfo info : assignableDefines.values()) {
setDefineInfoNotAssignable(info,t);
}
assignableDefines.clear();
}
}
updateAssignAllowedStack(n,false);
}",0.9984010233450592
28126,"/** 
 * A   {@link UnionType} contains a given type (alternate) iff the membervector contains it.
 * @param alternate The alternate which might be in this union.
 * @return {@code true} if the alternate is in the union
 */
public boolean contains(JSType type){
  for (  JSType alt : alternates) {
    if (alt.isEquivalentTo(type)) {
      return true;
    }
  }
  return false;
}","/** 
 * A   {@link UnionType} contains a given type (alternate) iff the membervector contains it.
 * @param type The alternate which might be in this union.
 * @return {@code true} if the alternate is in the union
 */
public boolean contains(JSType type){
  for (  JSType alt : alternates) {
    if (alt.isEquivalentTo(type)) {
      return true;
    }
  }
  return false;
}",0.9853917662682604
28127,"/** 
 * @param item The item to inspect
 * @param propType The property to look for
 * @return The replacement list if the property was removed, or'item' otherwise.
 */
private PropListItem removeProp(PropListItem item,int propType){
  if (item == null) {
    return null;
  }
 else   if (item.getType() == propType) {
    return item.getNext();
  }
 else {
    PropListItem result=removeProp(item.getNext(),propType);
    if (result != item.getNext()) {
      item.setNext(result);
      return item;
    }
 else {
      return item;
    }
  }
}","/** 
 * @param item The item to inspect
 * @param propType The property to look for
 * @return The replacement list if the property was removed, or'item' otherwise.
 */
private PropListItem removeProp(PropListItem item,int propType){
  if (item == null) {
    return null;
  }
 else   if (item.getType() == propType) {
    return item.getNext();
  }
 else {
    PropListItem result=removeProp(item.getNext(),propType);
    if (result != item.getNext()) {
      return item.chain(result);
    }
 else {
      return item;
    }
  }
}",0.9387755102040816
28128,"/** 
 * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName | FunctionType | UnionType | RecordType | ArrayType
 */
private Node parseBasicTypeExpression(JsDocToken token){
  if (token == JsDocToken.STAR) {
    return newNode(Token.STAR);
  }
 else   if (token == JsDocToken.LB) {
    skipEOLs();
    return parseArrayType(next());
  }
 else   if (token == JsDocToken.LC) {
    skipEOLs();
    return parseRecordType(next());
  }
 else   if (token == JsDocToken.LP) {
    skipEOLs();
    return parseUnionType(next());
  }
 else   if (token == JsDocToken.STRING) {
    String string=stream.getString();
    if (""String_Node_Str"".equals(string)) {
      skipEOLs();
      return parseFunctionType(next());
    }
 else     if (""String_Node_Str"".equals(string) || ""String_Node_Str"".equals(string)) {
      return newStringNode(string);
    }
 else {
      return parseTypeName(token);
    }
  }
  return reportGenericTypeSyntaxWarning();
}","/** 
 * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName | FunctionType | UnionType | RecordType | ArrayType
 */
private Node parseBasicTypeExpression(JsDocToken token){
  if (token == JsDocToken.STAR) {
    return newNode(Token.STAR);
  }
 else   if (token == JsDocToken.LB) {
    skipEOLs();
    return parseArrayType(next());
  }
 else   if (token == JsDocToken.LC) {
    skipEOLs();
    return parseRecordType(next());
  }
 else   if (token == JsDocToken.LP) {
    skipEOLs();
    return parseUnionType(next());
  }
 else   if (token == JsDocToken.STRING) {
    String string=stream.getString();
    if (""String_Node_Str"".equals(string)) {
      skipEOLs();
      return parseFunctionType(next());
    }
 else     if (""String_Node_Str"".equals(string) || ""String_Node_Str"".equals(string)) {
      return newStringNode(string);
    }
 else {
      return parseTypeName(token);
    }
  }
  restoreLookAhead(token);
  return reportGenericTypeSyntaxWarning();
}",0.9859154929577464
28129,"/** 
 * FunctionType := 'function' FunctionSignatureType FunctionSignatureType := TypeParameters '(' 'this' ':' TypeName, ParametersType ')' ResultType
 */
private Node parseFunctionType(JsDocToken token){
  if (token != JsDocToken.LP) {
    return reportTypeSyntaxWarning(""String_Node_Str"");
  }
  Node functionType=newNode(Token.FUNCTION);
  Node parameters=null;
  skipEOLs();
  if (!match(JsDocToken.RP)) {
    token=next();
    boolean hasParams=true;
    if (token == JsDocToken.STRING) {
      String tokenStr=stream.getString();
      boolean isThis=""String_Node_Str"".equals(tokenStr);
      boolean isNew=""String_Node_Str"".equals(tokenStr);
      if (isThis || isNew) {
        if (match(JsDocToken.COLON)) {
          next();
          skipEOLs();
          Node contextType=wrapNode(isThis ? Token.THIS : Token.NEW,parseTypeName(next()));
          if (contextType == null) {
            return null;
          }
          functionType.addChildToFront(contextType);
        }
 else {
          return reportTypeSyntaxWarning(""String_Node_Str"");
        }
        if (match(JsDocToken.COMMA)) {
          next();
          skipEOLs();
          token=next();
        }
 else {
          hasParams=false;
        }
      }
    }
    if (hasParams) {
      parameters=parseParametersType(token);
      if (parameters == null) {
        return null;
      }
    }
  }
  if (parameters != null) {
    functionType.addChildToBack(parameters);
  }
  skipEOLs();
  if (!match(JsDocToken.RP)) {
    return reportTypeSyntaxWarning(""String_Node_Str"");
  }
  skipEOLs();
  Node resultType=parseResultType(next());
  if (resultType == null) {
    return null;
  }
 else {
    functionType.addChildToBack(resultType);
  }
  return functionType;
}","/** 
 * FunctionType := 'function' FunctionSignatureType FunctionSignatureType := TypeParameters '(' 'this' ':' TypeName, ParametersType ')' ResultType
 */
private Node parseFunctionType(JsDocToken token){
  if (token != JsDocToken.LP) {
    restoreLookAhead(token);
    return reportTypeSyntaxWarning(""String_Node_Str"");
  }
  Node functionType=newNode(Token.FUNCTION);
  Node parameters=null;
  skipEOLs();
  if (!match(JsDocToken.RP)) {
    token=next();
    boolean hasParams=true;
    if (token == JsDocToken.STRING) {
      String tokenStr=stream.getString();
      boolean isThis=""String_Node_Str"".equals(tokenStr);
      boolean isNew=""String_Node_Str"".equals(tokenStr);
      if (isThis || isNew) {
        if (match(JsDocToken.COLON)) {
          next();
          skipEOLs();
          Node contextType=wrapNode(isThis ? Token.THIS : Token.NEW,parseTypeName(next()));
          if (contextType == null) {
            return null;
          }
          functionType.addChildToFront(contextType);
        }
 else {
          return reportTypeSyntaxWarning(""String_Node_Str"");
        }
        if (match(JsDocToken.COMMA)) {
          next();
          skipEOLs();
          token=next();
        }
 else {
          hasParams=false;
        }
      }
    }
    if (hasParams) {
      parameters=parseParametersType(token);
      if (parameters == null) {
        return null;
      }
    }
  }
  if (parameters != null) {
    functionType.addChildToBack(parameters);
  }
  skipEOLs();
  if (!match(JsDocToken.RP)) {
    return reportTypeSyntaxWarning(""String_Node_Str"");
  }
  skipEOLs();
  Node resultType=parseResultType(next());
  if (resultType == null) {
    return null;
  }
 else {
    functionType.addChildToBack(resultType);
  }
  return functionType;
}",0.9917496443812234
28130,"/** 
 * Parses a   {@link JSDocInfo} object. This parsing method reads all tokensreturned by the  {@link JsDocTokenStream#getJsDocToken()} method until the{@link JsDocToken#EOC} is returned.
 * @return {@code true} if JSDoc information was correctly parsed,{@code false} otherwise
 */
boolean parse(){
  int lineno;
  int charno;
  JSTypeExpression type;
  state=State.SEARCHING_ANNOTATION;
  skipEOLs();
  JsDocToken token=next();
  List<ExtendedTypeInfo> extendedTypes=Lists.newArrayList();
  if (jsdocBuilder.shouldParseDocumentation()) {
    ExtractionInfo blockInfo=extractBlockComment(token);
    token=blockInfo.token;
    if (!blockInfo.string.isEmpty()) {
      jsdocBuilder.recordBlockDescription(blockInfo.string);
    }
  }
 else {
    if (token != JsDocToken.ANNOTATION && token != JsDocToken.EOC) {
      jsdocBuilder.recordBlockDescription(""String_Node_Str"");
    }
  }
  retry:   for (; ; ) {
switch (token) {
case ANNOTATION:
      if (state == State.SEARCHING_ANNOTATION) {
        state=State.SEARCHING_NEWLINE;
        lineno=stream.getLineno();
        charno=stream.getCharno();
        String annotationName=stream.getString();
        Annotation annotation=annotationNames.get(annotationName);
        if (annotation == null) {
          parser.addParserWarning(""String_Node_Str"",annotationName,stream.getLineno(),stream.getCharno());
        }
 else {
          jsdocBuilder.markAnnotation(annotationName,lineno,charno);
switch (annotation) {
case AUTHOR:
            if (jsdocBuilder.shouldParseDocumentation()) {
              ExtractionInfo authorInfo=extractSingleLineBlock();
              String author=authorInfo.string;
              if (author.length() == 0) {
                parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
              }
 else {
                jsdocBuilder.addAuthor(author);
              }
              token=authorInfo.token;
            }
 else {
              token=eatTokensUntilEOL(token);
            }
          continue retry;
case CONSTANT:
        if (!jsdocBuilder.recordConstancy()) {
          parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
        }
      token=eatTokensUntilEOL();
    continue retry;
case CONSTRUCTOR:
  if (!jsdocBuilder.recordConstructor()) {
    if (jsdocBuilder.isInterfaceRecorded()) {
      parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
    }
 else {
      parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
    }
  }
token=eatTokensUntilEOL();
continue retry;
case DEPRECATED:
if (!jsdocBuilder.recordDeprecated()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
ExtractionInfo reasonInfo=extractMultilineTextualBlock(token);
String reason=reasonInfo.string;
if (reason.length() > 0) {
jsdocBuilder.recordDeprecationReason(reason);
}
token=reasonInfo.token;
continue retry;
case INTERFACE:
if (!jsdocBuilder.recordInterface()) {
if (jsdocBuilder.isConstructorRecorded()) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
token=eatTokensUntilEOL();
continue retry;
case DESC:
if (jsdocBuilder.isDescriptionRecorded()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
token=eatTokensUntilEOL();
continue retry;
}
 else {
ExtractionInfo descriptionInfo=extractMultilineTextualBlock(token);
String description=descriptionInfo.string;
jsdocBuilder.recordDescription(description);
token=descriptionInfo.token;
continue retry;
}
case FILE_OVERVIEW:
String fileOverview=""String_Node_Str"";
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo fileOverviewInfo=extractMultilineTextualBlock(token,WhitespaceOption.TRIM);
fileOverview=fileOverviewInfo.string;
token=fileOverviewInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
if (!jsdocBuilder.recordFileOverview(fileOverview) || fileOverviewJSDocInfo != null) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
continue retry;
case LICENSE:
case PRESERVE:
ExtractionInfo preserveInfo=extractMultilineTextualBlock(token,WhitespaceOption.PRESERVE);
String preserve=preserveInfo.string;
if (preserve.length() > 0) {
if (fileLevelJsDocBuilder != null) {
fileLevelJsDocBuilder.append(preserve);
}
}
token=preserveInfo.token;
continue retry;
case ENUM:
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if (token != JsDocToken.EOL && token != JsDocToken.EOC) {
type=createJSTypeExpression(parseAndRecordTypeNode(token));
}
if (type == null) {
type=createJSTypeExpression(newStringNode(""String_Node_Str""));
}
if (!jsdocBuilder.recordEnumParameterType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
token=eatTokensUntilEOL(token);
continue retry;
case EXPORT:
if (!jsdocBuilder.recordExport()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case EXTERNS:
if (!jsdocBuilder.recordExterns()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case JAVA_DISPATCH:
if (!jsdocBuilder.recordJavaDispatch()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case EXTENDS:
case IMPLEMENTS:
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
boolean matchingRc=false;
if (token == JsDocToken.LC) {
token=next();
matchingRc=true;
}
if (token == JsDocToken.STRING) {
Node typeNode=parseAndRecordTypeNameNode(token,lineno,charno,matchingRc);
lineno=stream.getLineno();
charno=stream.getCharno();
typeNode=wrapNode(Token.BANG,typeNode);
if (typeNode != null && !matchingRc) {
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
type=createJSTypeExpression(typeNode);
if (annotation == Annotation.EXTENDS) {
extendedTypes.add(new ExtendedTypeInfo(type,stream.getLineno(),stream.getCharno()));
}
 else {
Preconditions.checkState(annotation == Annotation.IMPLEMENTS);
if (!jsdocBuilder.recordImplementedInterface(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
}
token=next();
if (matchingRc) {
if (token != JsDocToken.RC) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
 else if (token != JsDocToken.EOL && token != JsDocToken.EOF && token != JsDocToken.EOC) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
 else {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
token=eatTokensUntilEOL(token);
continue retry;
case HIDDEN:
if (!jsdocBuilder.recordHiddenness()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case LENDS:
skipEOLs();
matchingRc=false;
if (match(JsDocToken.LC)) {
token=next();
matchingRc=true;
}
if (match(JsDocToken.STRING)) {
token=next();
if (!jsdocBuilder.recordLends(stream.getString())) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
 else {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
if (matchingRc && !match(JsDocToken.RC)) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case MEANING:
ExtractionInfo meaningInfo=extractMultilineTextualBlock(token);
String meaning=meaningInfo.string;
token=meaningInfo.token;
if (!jsdocBuilder.recordMeaning(meaning)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
continue retry;
case NO_ALIAS:
if (!jsdocBuilder.recordNoAlias()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_COMPILE:
if (!jsdocBuilder.recordNoCompile()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_TYPE_CHECK:
if (!jsdocBuilder.recordNoTypeCheck()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NOT_IMPLEMENTED:
token=eatTokensUntilEOL();
continue retry;
case INHERIT_DOC:
case OVERRIDE:
if (!jsdocBuilder.recordOverride()) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case THROWS:
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if (token == JsDocToken.LC) {
type=createJSTypeExpression(parseAndRecordTypeNode(token));
if (type == null) {
token=eatTokensUntilEOL();
continue retry;
}
}
token=current();
jsdocBuilder.recordThrowType(type);
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo descriptionInfo=extractMultilineTextualBlock(token);
String description=descriptionInfo.string;
if (description.length() > 0) {
jsdocBuilder.recordThrowDescription(type,description);
}
token=descriptionInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case PARAM:
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if (token == JsDocToken.LC) {
type=createJSTypeExpression(parseAndRecordParamTypeNode(token));
if (type == null) {
token=eatTokensUntilEOL();
continue retry;
}
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
}
String name=null;
boolean isBracketedParam=JsDocToken.LB == token;
if (isBracketedParam) {
token=next();
}
if (JsDocToken.STRING != token) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
 else {
name=stream.getString();
if (isBracketedParam) {
token=next();
if (JsDocToken.EQUALS == token) {
token=next();
if (JsDocToken.STRING == token) {
token=next();
}
}
if (JsDocToken.RB != token) {
reportTypeSyntaxWarning(""String_Node_Str"");
}
 else if (type != null) {
type=JSTypeExpression.makeOptionalArg(type);
}
}
if (name.indexOf('.') > -1) {
name=null;
}
 else if (!jsdocBuilder.recordParameter(name,type)) {
if (jsdocBuilder.hasParameter(name)) {
parser.addTypeWarning(""String_Node_Str"",name,lineno,charno);
}
 else {
parser.addTypeWarning(""String_Node_Str"",name,lineno,charno);
}
}
}
if (name == null) {
token=eatTokensUntilEOL(token);
continue retry;
}
jsdocBuilder.markName(name,lineno,charno);
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo paramDescriptionInfo=extractMultilineTextualBlock(token);
String paramDescription=paramDescriptionInfo.string;
if (paramDescription.length() > 0) {
jsdocBuilder.recordParameterDescription(name,paramDescription);
}
token=paramDescriptionInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case PRESERVE_TRY:
if (!jsdocBuilder.recordPreserveTry()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case PRIVATE:
if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case PROTECTED:
if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case PUBLIC:
if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_SHADOW:
if (!jsdocBuilder.recordNoShadow()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_SIDE_EFFECTS:
if (!jsdocBuilder.recordNoSideEffects()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case MODIFIES:
token=parseModifiesTag(next());
continue retry;
case IMPLICIT_CAST:
if (!jsdocBuilder.recordImplicitCast()) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case SEE:
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo referenceInfo=extractSingleLineBlock();
String reference=referenceInfo.string;
if (reference.length() == 0) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else {
jsdocBuilder.addReference(reference);
}
token=referenceInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case SUPPRESS:
token=parseSuppressTag(next());
continue retry;
case TEMPLATE:
ExtractionInfo templateInfo=extractSingleLineBlock();
String templateTypeName=templateInfo.string;
if (templateTypeName.length() == 0) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else if (!jsdocBuilder.recordTemplateTypeName(templateTypeName)) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=templateInfo.token;
continue retry;
case VERSION:
ExtractionInfo versionInfo=extractSingleLineBlock();
String version=versionInfo.string;
if (version.length() == 0) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else {
if (!jsdocBuilder.recordVersion(version)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
token=versionInfo.token;
continue retry;
case DEFINE:
case RETURN:
case THIS:
case TYPE:
case TYPEDEF:
lineno=stream.getLineno();
charno=stream.getCharno();
Node typeNode=null;
if (!lookAheadForTypeAnnotation() && annotation == Annotation.RETURN) {
typeNode=newNode(Token.QMARK);
}
 else {
skipEOLs();
token=next();
typeNode=parseAndRecordTypeNode(token,lineno,charno);
}
if (annotation == Annotation.THIS) {
typeNode=wrapNode(Token.BANG,typeNode);
if (typeNode != null && token != JsDocToken.LC) {
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
}
type=createJSTypeExpression(typeNode);
if (type == null) {
}
 else {
switch (annotation) {
case DEFINE:
if (!jsdocBuilder.recordDefineType(type)) {
parser.addParserWarning(""String_Node_Str"",lineno,charno);
}
break;
case RETURN:
if (!jsdocBuilder.recordReturnType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
break;
}
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo returnDescriptionInfo=extractMultilineTextualBlock(token);
String returnDescription=returnDescriptionInfo.string;
if (returnDescription.length() > 0) {
jsdocBuilder.recordReturnDescription(returnDescription);
}
token=returnDescriptionInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case THIS:
if (!jsdocBuilder.recordThisType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
break;
case TYPE:
if (!jsdocBuilder.recordType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
break;
case TYPEDEF:
if (!jsdocBuilder.recordTypedef(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
break;
}
token=eatTokensUntilEOL();
}
continue retry;
}
}
}
break;
case EOC:
if (hasParsedFileOverviewDocInfo()) {
fileOverviewJSDocInfo=retrieveAndResetParsedJSDocInfo();
}
checkExtendedTypes(extendedTypes);
return true;
case EOF:
jsdocBuilder.build(null);
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
checkExtendedTypes(extendedTypes);
return false;
case EOL:
if (state == State.SEARCHING_NEWLINE) {
state=State.SEARCHING_ANNOTATION;
}
token=next();
continue retry;
default :
if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {
token=next();
continue retry;
}
 else {
state=State.SEARCHING_NEWLINE;
token=eatTokensUntilEOL();
continue retry;
}
}
token=next();
}
}","/** 
 * Parses a   {@link JSDocInfo} object. This parsing method reads all tokensreturned by the  {@link JsDocTokenStream#getJsDocToken()} method until the{@link JsDocToken#EOC} is returned.
 * @return {@code true} if JSDoc information was correctly parsed,{@code false} otherwise
 */
boolean parse(){
  int lineno;
  int charno;
  JSTypeExpression type;
  state=State.SEARCHING_ANNOTATION;
  skipEOLs();
  JsDocToken token=next();
  List<ExtendedTypeInfo> extendedTypes=Lists.newArrayList();
  if (jsdocBuilder.shouldParseDocumentation()) {
    ExtractionInfo blockInfo=extractBlockComment(token);
    token=blockInfo.token;
    if (!blockInfo.string.isEmpty()) {
      jsdocBuilder.recordBlockDescription(blockInfo.string);
    }
  }
 else {
    if (token != JsDocToken.ANNOTATION && token != JsDocToken.EOC) {
      jsdocBuilder.recordBlockDescription(""String_Node_Str"");
    }
  }
  retry:   for (; ; ) {
switch (token) {
case ANNOTATION:
      if (state == State.SEARCHING_ANNOTATION) {
        state=State.SEARCHING_NEWLINE;
        lineno=stream.getLineno();
        charno=stream.getCharno();
        String annotationName=stream.getString();
        Annotation annotation=annotationNames.get(annotationName);
        if (annotation == null) {
          parser.addParserWarning(""String_Node_Str"",annotationName,stream.getLineno(),stream.getCharno());
        }
 else {
          jsdocBuilder.markAnnotation(annotationName,lineno,charno);
switch (annotation) {
case AUTHOR:
            if (jsdocBuilder.shouldParseDocumentation()) {
              ExtractionInfo authorInfo=extractSingleLineBlock();
              String author=authorInfo.string;
              if (author.length() == 0) {
                parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
              }
 else {
                jsdocBuilder.addAuthor(author);
              }
              token=authorInfo.token;
            }
 else {
              token=eatTokensUntilEOL(token);
            }
          continue retry;
case CONSTANT:
        if (!jsdocBuilder.recordConstancy()) {
          parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
        }
      token=eatTokensUntilEOL();
    continue retry;
case CONSTRUCTOR:
  if (!jsdocBuilder.recordConstructor()) {
    if (jsdocBuilder.isInterfaceRecorded()) {
      parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
    }
 else {
      parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
    }
  }
token=eatTokensUntilEOL();
continue retry;
case DEPRECATED:
if (!jsdocBuilder.recordDeprecated()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
ExtractionInfo reasonInfo=extractMultilineTextualBlock(token);
String reason=reasonInfo.string;
if (reason.length() > 0) {
jsdocBuilder.recordDeprecationReason(reason);
}
token=reasonInfo.token;
continue retry;
case INTERFACE:
if (!jsdocBuilder.recordInterface()) {
if (jsdocBuilder.isConstructorRecorded()) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
token=eatTokensUntilEOL();
continue retry;
case DESC:
if (jsdocBuilder.isDescriptionRecorded()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
token=eatTokensUntilEOL();
continue retry;
}
 else {
ExtractionInfo descriptionInfo=extractMultilineTextualBlock(token);
String description=descriptionInfo.string;
jsdocBuilder.recordDescription(description);
token=descriptionInfo.token;
continue retry;
}
case FILE_OVERVIEW:
String fileOverview=""String_Node_Str"";
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo fileOverviewInfo=extractMultilineTextualBlock(token,WhitespaceOption.TRIM);
fileOverview=fileOverviewInfo.string;
token=fileOverviewInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
if (!jsdocBuilder.recordFileOverview(fileOverview) || fileOverviewJSDocInfo != null) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
continue retry;
case LICENSE:
case PRESERVE:
ExtractionInfo preserveInfo=extractMultilineTextualBlock(token,WhitespaceOption.PRESERVE);
String preserve=preserveInfo.string;
if (preserve.length() > 0) {
if (fileLevelJsDocBuilder != null) {
fileLevelJsDocBuilder.append(preserve);
}
}
token=preserveInfo.token;
continue retry;
case ENUM:
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if (token != JsDocToken.EOL && token != JsDocToken.EOC) {
type=createJSTypeExpression(parseAndRecordTypeNode(token));
}
if (type == null) {
type=createJSTypeExpression(newStringNode(""String_Node_Str""));
}
if (!jsdocBuilder.recordEnumParameterType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
token=eatTokensUntilEOL(token);
continue retry;
case EXPORT:
if (!jsdocBuilder.recordExport()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case EXTERNS:
if (!jsdocBuilder.recordExterns()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case JAVA_DISPATCH:
if (!jsdocBuilder.recordJavaDispatch()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case EXTENDS:
case IMPLEMENTS:
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
boolean matchingRc=false;
if (token == JsDocToken.LC) {
token=next();
matchingRc=true;
}
if (token == JsDocToken.STRING) {
Node typeNode=parseAndRecordTypeNameNode(token,lineno,charno,matchingRc);
lineno=stream.getLineno();
charno=stream.getCharno();
typeNode=wrapNode(Token.BANG,typeNode);
if (typeNode != null && !matchingRc) {
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
type=createJSTypeExpression(typeNode);
if (annotation == Annotation.EXTENDS) {
extendedTypes.add(new ExtendedTypeInfo(type,stream.getLineno(),stream.getCharno()));
}
 else {
Preconditions.checkState(annotation == Annotation.IMPLEMENTS);
if (!jsdocBuilder.recordImplementedInterface(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
}
token=next();
if (matchingRc) {
if (token != JsDocToken.RC) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
 else if (token != JsDocToken.EOL && token != JsDocToken.EOF && token != JsDocToken.EOC) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
 else {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
token=eatTokensUntilEOL(token);
continue retry;
case HIDDEN:
if (!jsdocBuilder.recordHiddenness()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case LENDS:
skipEOLs();
matchingRc=false;
if (match(JsDocToken.LC)) {
token=next();
matchingRc=true;
}
if (match(JsDocToken.STRING)) {
token=next();
if (!jsdocBuilder.recordLends(stream.getString())) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
 else {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
if (matchingRc && !match(JsDocToken.RC)) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case MEANING:
ExtractionInfo meaningInfo=extractMultilineTextualBlock(token);
String meaning=meaningInfo.string;
token=meaningInfo.token;
if (!jsdocBuilder.recordMeaning(meaning)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
continue retry;
case NO_ALIAS:
if (!jsdocBuilder.recordNoAlias()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_COMPILE:
if (!jsdocBuilder.recordNoCompile()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_TYPE_CHECK:
if (!jsdocBuilder.recordNoTypeCheck()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NOT_IMPLEMENTED:
token=eatTokensUntilEOL();
continue retry;
case INHERIT_DOC:
case OVERRIDE:
if (!jsdocBuilder.recordOverride()) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case THROWS:
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if (token == JsDocToken.LC) {
type=createJSTypeExpression(parseAndRecordTypeNode(token));
if (type == null) {
token=eatTokensUntilEOL();
continue retry;
}
}
token=current();
jsdocBuilder.recordThrowType(type);
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo descriptionInfo=extractMultilineTextualBlock(token);
String description=descriptionInfo.string;
if (description.length() > 0) {
jsdocBuilder.recordThrowDescription(type,description);
}
token=descriptionInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case PARAM:
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if (token == JsDocToken.LC) {
type=createJSTypeExpression(parseAndRecordParamTypeNode(token));
if (type == null) {
token=eatTokensUntilEOL();
continue retry;
}
skipEOLs();
token=next();
lineno=stream.getLineno();
charno=stream.getCharno();
}
String name=null;
boolean isBracketedParam=JsDocToken.LB == token;
if (isBracketedParam) {
token=next();
}
if (JsDocToken.STRING != token) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
 else {
name=stream.getString();
if (isBracketedParam) {
token=next();
if (JsDocToken.EQUALS == token) {
token=next();
if (JsDocToken.STRING == token) {
token=next();
}
}
if (JsDocToken.RB != token) {
reportTypeSyntaxWarning(""String_Node_Str"");
}
 else if (type != null) {
type=JSTypeExpression.makeOptionalArg(type);
}
}
if (name.indexOf('.') > -1) {
name=null;
}
 else if (!jsdocBuilder.recordParameter(name,type)) {
if (jsdocBuilder.hasParameter(name)) {
parser.addTypeWarning(""String_Node_Str"",name,lineno,charno);
}
 else {
parser.addTypeWarning(""String_Node_Str"",name,lineno,charno);
}
}
}
if (name == null) {
token=eatTokensUntilEOL(token);
continue retry;
}
jsdocBuilder.markName(name,lineno,charno);
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo paramDescriptionInfo=extractMultilineTextualBlock(token);
String paramDescription=paramDescriptionInfo.string;
if (paramDescription.length() > 0) {
jsdocBuilder.recordParameterDescription(name,paramDescription);
}
token=paramDescriptionInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case PRESERVE_TRY:
if (!jsdocBuilder.recordPreserveTry()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case PRIVATE:
if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case PROTECTED:
if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case PUBLIC:
if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_SHADOW:
if (!jsdocBuilder.recordNoShadow()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case NO_SIDE_EFFECTS:
if (!jsdocBuilder.recordNoSideEffects()) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case MODIFIES:
token=parseModifiesTag(next());
continue retry;
case IMPLICIT_CAST:
if (!jsdocBuilder.recordImplicitCast()) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;
case SEE:
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo referenceInfo=extractSingleLineBlock();
String reference=referenceInfo.string;
if (reference.length() == 0) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else {
jsdocBuilder.addReference(reference);
}
token=referenceInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case SUPPRESS:
token=parseSuppressTag(next());
continue retry;
case TEMPLATE:
ExtractionInfo templateInfo=extractSingleLineBlock();
String templateTypeName=templateInfo.string;
if (templateTypeName.length() == 0) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else if (!jsdocBuilder.recordTemplateTypeName(templateTypeName)) {
parser.addTypeWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
token=templateInfo.token;
continue retry;
case VERSION:
ExtractionInfo versionInfo=extractSingleLineBlock();
String version=versionInfo.string;
if (version.length() == 0) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
 else {
if (!jsdocBuilder.recordVersion(version)) {
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
}
}
token=versionInfo.token;
continue retry;
case DEFINE:
case RETURN:
case THIS:
case TYPE:
case TYPEDEF:
lineno=stream.getLineno();
charno=stream.getCharno();
Node typeNode=null;
if (!lookAheadForTypeAnnotation() && annotation == Annotation.RETURN) {
typeNode=newNode(Token.QMARK);
}
 else {
skipEOLs();
token=next();
typeNode=parseAndRecordTypeNode(token,lineno,charno);
}
if (annotation == Annotation.THIS) {
typeNode=wrapNode(Token.BANG,typeNode);
if (typeNode != null && token != JsDocToken.LC) {
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
}
type=createJSTypeExpression(typeNode);
if (type == null) {
}
 else {
switch (annotation) {
case DEFINE:
if (!jsdocBuilder.recordDefineType(type)) {
parser.addParserWarning(""String_Node_Str"",lineno,charno);
}
break;
case RETURN:
if (!jsdocBuilder.recordReturnType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
break;
}
if (jsdocBuilder.shouldParseDocumentation()) {
ExtractionInfo returnDescriptionInfo=extractMultilineTextualBlock(token);
String returnDescription=returnDescriptionInfo.string;
if (returnDescription.length() > 0) {
jsdocBuilder.recordReturnDescription(returnDescription);
}
token=returnDescriptionInfo.token;
}
 else {
token=eatTokensUntilEOL(token);
}
continue retry;
case THIS:
if (!jsdocBuilder.recordThisType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
break;
case TYPE:
if (!jsdocBuilder.recordType(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
break;
case TYPEDEF:
if (!jsdocBuilder.recordTypedef(type)) {
parser.addTypeWarning(""String_Node_Str"",lineno,charno);
}
break;
}
}
token=eatTokensUntilEOL();
continue retry;
}
}
}
break;
case EOC:
if (hasParsedFileOverviewDocInfo()) {
fileOverviewJSDocInfo=retrieveAndResetParsedJSDocInfo();
}
checkExtendedTypes(extendedTypes);
return true;
case EOF:
jsdocBuilder.build(null);
parser.addParserWarning(""String_Node_Str"",stream.getLineno(),stream.getCharno());
checkExtendedTypes(extendedTypes);
return false;
case EOL:
if (state == State.SEARCHING_NEWLINE) {
state=State.SEARCHING_ANNOTATION;
}
token=next();
continue retry;
default :
if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {
token=next();
continue retry;
}
 else {
state=State.SEARCHING_NEWLINE;
token=eatTokensUntilEOL();
continue retry;
}
}
token=next();
}
}",0.9998734016964173
28131,"/** 
 * This is the meat of the type checking.  It is basically one big switch, with each case representing one type of parse tree node.  The individual cases are usually pretty straightforward.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */
public void visit(NodeTraversal t,Node n,Node parent){
  JSType childType;
  JSType leftType, rightType;
  Node left, right;
  boolean typeable=true;
switch (n.getType()) {
case Token.NAME:
    typeable=visitName(t,n,parent);
  break;
case Token.LP:
if (parent.getType() != Token.FUNCTION) {
  ensureTyped(t,n,getJSType(n.getFirstChild()));
}
 else {
  typeable=false;
}
break;
case Token.COMMA:
ensureTyped(t,n,getJSType(n.getLastChild()));
break;
case Token.TRUE:
case Token.FALSE:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.THIS:
ensureTyped(t,n,t.getScope().getTypeOfThis());
break;
case Token.REF_SPECIAL:
ensureTyped(t,n);
break;
case Token.GET_REF:
ensureTyped(t,n,getJSType(n.getFirstChild()));
break;
case Token.NULL:
ensureTyped(t,n,NULL_TYPE);
break;
case Token.NUMBER:
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.STRING:
if (!NodeUtil.isObjectLitKey(n,n.getParent())) {
ensureTyped(t,n,STRING_TYPE);
}
break;
case Token.GET:
case Token.SET:
break;
case Token.ARRAYLIT:
ensureTyped(t,n,ARRAY_TYPE);
break;
case Token.REGEXP:
ensureTyped(t,n,REGEXP_TYPE);
break;
case Token.GETPROP:
visitGetProp(t,n,parent);
typeable=!(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
break;
case Token.GETELEM:
visitGetElem(t,n);
typeable=false;
break;
case Token.VAR:
visitVar(t,n);
typeable=false;
break;
case Token.NEW:
visitNew(t,n);
typeable=true;
break;
case Token.CALL:
visitCall(t,n);
typeable=!NodeUtil.isExpressionNode(parent);
break;
case Token.RETURN:
visitReturn(t,n);
typeable=false;
break;
case Token.DEC:
case Token.INC:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.NOT:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.VOID:
ensureTyped(t,n,VOID_TYPE);
break;
case Token.TYPEOF:
ensureTyped(t,n,STRING_TYPE);
break;
case Token.BITNOT:
childType=getJSType(n.getFirstChild());
if (!childType.matchesInt32Context()) {
report(t,n,BIT_OPERATION,NodeUtil.opToStr(n.getType()),childType.toString());
}
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.POS:
case Token.NEG:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.EQ:
case Token.NE:
{
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined();
TernaryValue result=leftTypeRestricted.testForEquality(rightTypeRestricted);
if (result != TernaryValue.UNKNOWN) {
if (n.getType() == Token.NE) {
result=result.not();
}
report(t,n,DETERMINISTIC_TEST,leftType.toString(),rightType.toString(),result.toString());
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
}
case Token.SHEQ:
case Token.SHNE:
{
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined();
if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
report(t,n,DETERMINISTIC_TEST_NO_RESULT,leftType.toString(),rightType.toString());
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
}
case Token.LT:
case Token.LE:
case Token.GT:
case Token.GE:
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
if (rightType.isNumber()) {
validator.expectNumber(t,n,leftType,""String_Node_Str"");
}
 else if (leftType.isNumber()) {
validator.expectNumber(t,n,rightType,""String_Node_Str"");
}
 else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
}
 else {
String message=""String_Node_Str"";
validator.expectString(t,n,leftType,message);
validator.expectNotNullOrUndefined(t,n,leftType,message,getNativeType(STRING_TYPE));
message=""String_Node_Str"";
validator.expectString(t,n,rightType,message);
validator.expectNotNullOrUndefined(t,n,rightType,message,getNativeType(STRING_TYPE));
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.IN:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right);
validator.expectObject(t,n,rightType,""String_Node_Str"");
validator.expectString(t,left,leftType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.INSTANCEOF:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right).restrictByNotNullOrUndefined();
validator.expectAnyObject(t,left,leftType,""String_Node_Str"");
validator.expectActualObject(t,right,rightType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.ASSIGN:
visitAssign(t,n);
typeable=false;
break;
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.ASSIGN_URSH:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
case Token.ASSIGN_BITOR:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_SUB:
case Token.ASSIGN_ADD:
case Token.ASSIGN_MUL:
case Token.LSH:
case Token.RSH:
case Token.URSH:
case Token.DIV:
case Token.MOD:
case Token.BITOR:
case Token.BITXOR:
case Token.BITAND:
case Token.SUB:
case Token.ADD:
case Token.MUL:
visitBinaryOperator(n.getType(),t,n);
break;
case Token.DELPROP:
if (!isReference(n.getFirstChild())) {
report(t,n,BAD_DELETE);
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.CASE:
JSType switchType=getJSType(parent.getFirstChild());
JSType caseType=getJSType(n.getFirstChild());
validator.expectSwitchMatchesCase(t,n,switchType,caseType);
typeable=false;
break;
case Token.WITH:
{
Node child=n.getFirstChild();
childType=getJSType(child);
validator.expectObject(t,child,childType,""String_Node_Str"");
typeable=false;
break;
}
case Token.FUNCTION:
visitFunction(t,n);
break;
case Token.LABEL:
case Token.LABEL_NAME:
case Token.SWITCH:
case Token.BREAK:
case Token.CATCH:
case Token.TRY:
case Token.SCRIPT:
case Token.EXPR_RESULT:
case Token.BLOCK:
case Token.EMPTY:
case Token.DEFAULT:
case Token.CONTINUE:
case Token.DEBUGGER:
case Token.THROW:
typeable=false;
break;
case Token.DO:
case Token.FOR:
case Token.IF:
case Token.WHILE:
typeable=false;
break;
case Token.AND:
case Token.HOOK:
case Token.OBJECTLIT:
case Token.OR:
if (n.getJSType() != null) {
ensureTyped(t,n);
}
 else {
if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
ensureTyped(t,n,parent.getJSType());
}
 else {
ensureTyped(t,n);
}
}
if (n.getType() == Token.OBJECTLIT) {
for (Node key : n.children()) {
visitObjLitKey(t,key,n);
}
}
break;
default :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
ensureTyped(t,n);
break;
}
typeable=typeable && !inExterns;
if (typeable) {
doPercentTypedAccounting(t,n);
}
checkNoTypeCheckSection(n,false);
}","/** 
 * This is the meat of the type checking.  It is basically one big switch, with each case representing one type of parse tree node.  The individual cases are usually pretty straightforward.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */
public void visit(NodeTraversal t,Node n,Node parent){
  JSType childType;
  JSType leftType, rightType;
  Node left, right;
  boolean typeable=true;
switch (n.getType()) {
case Token.NAME:
    typeable=visitName(t,n,parent);
  break;
case Token.LP:
if (parent.getType() != Token.FUNCTION) {
  ensureTyped(t,n,getJSType(n.getFirstChild()));
}
 else {
  typeable=false;
}
break;
case Token.COMMA:
ensureTyped(t,n,getJSType(n.getLastChild()));
break;
case Token.TRUE:
case Token.FALSE:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.THIS:
ensureTyped(t,n,t.getScope().getTypeOfThis());
break;
case Token.REF_SPECIAL:
ensureTyped(t,n);
break;
case Token.GET_REF:
ensureTyped(t,n,getJSType(n.getFirstChild()));
break;
case Token.NULL:
ensureTyped(t,n,NULL_TYPE);
break;
case Token.NUMBER:
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.STRING:
if (!NodeUtil.isObjectLitKey(n,n.getParent())) {
ensureTyped(t,n,STRING_TYPE);
}
 else {
typeable=false;
}
break;
case Token.GET:
case Token.SET:
break;
case Token.ARRAYLIT:
ensureTyped(t,n,ARRAY_TYPE);
break;
case Token.REGEXP:
ensureTyped(t,n,REGEXP_TYPE);
break;
case Token.GETPROP:
visitGetProp(t,n,parent);
typeable=!(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
break;
case Token.GETELEM:
visitGetElem(t,n);
typeable=false;
break;
case Token.VAR:
visitVar(t,n);
typeable=false;
break;
case Token.NEW:
visitNew(t,n);
typeable=true;
break;
case Token.CALL:
visitCall(t,n);
typeable=!NodeUtil.isExpressionNode(parent);
break;
case Token.RETURN:
visitReturn(t,n);
typeable=false;
break;
case Token.DEC:
case Token.INC:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.NOT:
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.VOID:
ensureTyped(t,n,VOID_TYPE);
break;
case Token.TYPEOF:
ensureTyped(t,n,STRING_TYPE);
break;
case Token.BITNOT:
childType=getJSType(n.getFirstChild());
if (!childType.matchesInt32Context()) {
report(t,n,BIT_OPERATION,NodeUtil.opToStr(n.getType()),childType.toString());
}
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.POS:
case Token.NEG:
left=n.getFirstChild();
validator.expectNumber(t,left,getJSType(left),""String_Node_Str"");
ensureTyped(t,n,NUMBER_TYPE);
break;
case Token.EQ:
case Token.NE:
{
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined();
TernaryValue result=leftTypeRestricted.testForEquality(rightTypeRestricted);
if (result != TernaryValue.UNKNOWN) {
if (n.getType() == Token.NE) {
result=result.not();
}
report(t,n,DETERMINISTIC_TEST,leftType.toString(),rightType.toString(),result.toString());
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
}
case Token.SHEQ:
case Token.SHNE:
{
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined();
if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
report(t,n,DETERMINISTIC_TEST_NO_RESULT,leftType.toString(),rightType.toString());
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
}
case Token.LT:
case Token.LE:
case Token.GT:
case Token.GE:
leftType=getJSType(n.getFirstChild());
rightType=getJSType(n.getLastChild());
if (rightType.isNumber()) {
validator.expectNumber(t,n,leftType,""String_Node_Str"");
}
 else if (leftType.isNumber()) {
validator.expectNumber(t,n,rightType,""String_Node_Str"");
}
 else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
}
 else {
String message=""String_Node_Str"";
validator.expectString(t,n,leftType,message);
validator.expectNotNullOrUndefined(t,n,leftType,message,getNativeType(STRING_TYPE));
message=""String_Node_Str"";
validator.expectString(t,n,rightType,message);
validator.expectNotNullOrUndefined(t,n,rightType,message,getNativeType(STRING_TYPE));
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.IN:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right);
validator.expectObject(t,n,rightType,""String_Node_Str"");
validator.expectString(t,left,leftType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.INSTANCEOF:
left=n.getFirstChild();
right=n.getLastChild();
leftType=getJSType(left);
rightType=getJSType(right).restrictByNotNullOrUndefined();
validator.expectAnyObject(t,left,leftType,""String_Node_Str"");
validator.expectActualObject(t,right,rightType,""String_Node_Str"");
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.ASSIGN:
visitAssign(t,n);
typeable=false;
break;
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.ASSIGN_URSH:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
case Token.ASSIGN_BITOR:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_SUB:
case Token.ASSIGN_ADD:
case Token.ASSIGN_MUL:
case Token.LSH:
case Token.RSH:
case Token.URSH:
case Token.DIV:
case Token.MOD:
case Token.BITOR:
case Token.BITXOR:
case Token.BITAND:
case Token.SUB:
case Token.ADD:
case Token.MUL:
visitBinaryOperator(n.getType(),t,n);
break;
case Token.DELPROP:
if (!isReference(n.getFirstChild())) {
report(t,n,BAD_DELETE);
}
ensureTyped(t,n,BOOLEAN_TYPE);
break;
case Token.CASE:
JSType switchType=getJSType(parent.getFirstChild());
JSType caseType=getJSType(n.getFirstChild());
validator.expectSwitchMatchesCase(t,n,switchType,caseType);
typeable=false;
break;
case Token.WITH:
{
Node child=n.getFirstChild();
childType=getJSType(child);
validator.expectObject(t,child,childType,""String_Node_Str"");
typeable=false;
break;
}
case Token.FUNCTION:
visitFunction(t,n);
break;
case Token.LABEL:
case Token.LABEL_NAME:
case Token.SWITCH:
case Token.BREAK:
case Token.CATCH:
case Token.TRY:
case Token.SCRIPT:
case Token.EXPR_RESULT:
case Token.BLOCK:
case Token.EMPTY:
case Token.DEFAULT:
case Token.CONTINUE:
case Token.DEBUGGER:
case Token.THROW:
typeable=false;
break;
case Token.DO:
case Token.FOR:
case Token.IF:
case Token.WHILE:
typeable=false;
break;
case Token.AND:
case Token.HOOK:
case Token.OBJECTLIT:
case Token.OR:
if (n.getJSType() != null) {
ensureTyped(t,n);
}
 else {
if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
ensureTyped(t,n,parent.getJSType());
}
 else {
ensureTyped(t,n);
}
}
if (n.getType() == Token.OBJECTLIT) {
for (Node key : n.children()) {
visitObjLitKey(t,key,n);
}
}
break;
default :
report(t,n,UNEXPECTED_TOKEN,Token.name(n.getType()));
ensureTyped(t,n);
break;
}
typeable=typeable && !inExterns;
if (typeable) {
doPercentTypedAccounting(t,n);
}
checkNoTypeCheckSection(n,false);
}",0.9981628038439796
28132,"/** 
 * Determines whether the given property with @const tag got reassigned
 * @param t The current traversal.
 * @param getprop The getprop node.
 */
private void checkConstantProperty(NodeTraversal t,Node getprop){
  Node parent=getprop.getParent();
  if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) {
    return;
  }
  ObjectType objectType=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
  String propertyName=getprop.getLastChild().getString();
  if (objectType != null) {
    ObjectType oType=objectType;
    while (oType != null) {
      if (oType.hasReferenceName()) {
        if (initializedConstantProperties.containsEntry(oType.getReferenceName(),propertyName)) {
          compiler.report(t.makeError(getprop,CONST_PROPERTY_REASSIGNED_VALUE,propertyName));
          break;
        }
      }
      oType=oType.getImplicitPrototype();
    }
    JSDocInfo info=objectType.getOwnPropertyJSDocInfo(propertyName);
    if (info != null && info.isConstant() && objectType.hasReferenceName()) {
      initializedConstantProperties.put(objectType.getReferenceName(),propertyName);
    }
    if (objectType.isInstanceType()) {
      ObjectType prototype=objectType.getImplicitPrototype();
      if (prototype != null) {
        JSDocInfo prototypeInfo=prototype.getOwnPropertyJSDocInfo(propertyName);
        if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) {
          initializedConstantProperties.put(prototype.getReferenceName(),propertyName);
        }
      }
    }
  }
}","/** 
 * Determines whether the given property with @const tag got reassigned
 * @param t The current traversal.
 * @param getprop The getprop node.
 */
private void checkConstantProperty(NodeTraversal t,Node getprop){
  Node parent=getprop.getParent();
  if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) {
    return;
  }
  ObjectType objectType=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
  String propertyName=getprop.getLastChild().getString();
  boolean isConstant=isPropertyDeclaredConstant(objectType,propertyName);
  if (isConstant) {
    ObjectType oType=objectType;
    while (oType != null) {
      if (oType.hasReferenceName()) {
        if (initializedConstantProperties.containsEntry(oType.getReferenceName(),propertyName)) {
          compiler.report(t.makeError(getprop,CONST_PROPERTY_REASSIGNED_VALUE,propertyName));
          break;
        }
      }
      oType=oType.getImplicitPrototype();
    }
    Preconditions.checkState(objectType.hasReferenceName());
    initializedConstantProperties.put(objectType.getReferenceName(),propertyName);
    if (objectType.isInstanceType()) {
      ObjectType prototype=objectType.getImplicitPrototype();
      if (prototype != null) {
        if (prototype.hasProperty(propertyName) && prototype.hasReferenceName()) {
          initializedConstantProperties.put(prototype.getReferenceName(),propertyName);
        }
      }
    }
  }
}",0.8429070136464615
28133,"@Override public void hotSwapScript(Node scriptRoot,Scope globalScope){
  NodeTraversal.traverse(compiler,scriptRoot,this);
}","@Override public void hotSwapScript(Node scriptRoot){
  NodeTraversal.traverse(compiler,scriptRoot,this);
}",0.9224137931034484
28134,"/** 
 * Returns the root node of the AST, which includes both externs and source.
 */
public Node getRoot(){
  return externAndJsRoot;
}","@Override public Node getRoot(){
  return externAndJsRoot;
}",0.5714285714285714
28135,"@Override public void hotSwapScript(Node scriptRoot,Scope globalScope){
  makeTypeCheck(compiler).check(scriptRoot,false);
}","@Override public void hotSwapScript(Node scriptRoot){
  regenerateGlobalTypedScope(compiler,compiler.getRoot());
}",0.6386554621848739
28136,"/** 
 * Process the JS with root node root. This is supposed to be significantly faster compared to corresponding full-compiler passes.
 * @param scriptRoot Root node corresponding to the file that is modified,should be of type  {@code Token.SCRIPT}.
 * @param globalScope The global scope which is not necessarily types.
 */
void hotSwapScript(Node scriptRoot,Scope globalScope);","/** 
 * Process the JS with root node root. This is supposed to be significantly faster compared to corresponding full-compiler passes.
 * @param scriptRoot Root node corresponding to the file that is modified,should be of type  {@code Token.SCRIPT}.
 */
void hotSwapScript(Node scriptRoot);",0.8673621460506706
28137,"@Override public void hotSwapScript(Node scriptRoot,Scope globalScope){
  this.compiler.process(this);
}","@Override public void hotSwapScript(Node scriptRoot){
  this.compiler.process(this);
}",0.9052631578947368
28138,"@Override public void hotSwapScript(Node scriptRoot,Scope globalScope){
  Preconditions.checkState(scriptRoot.getType() == Token.SCRIPT);
  NodeTraversal t=new NodeTraversal(compiler,this);
  t.traverseWithScope(scriptRoot,globalScope);
}","@Override public void hotSwapScript(Node scriptRoot){
  Preconditions.checkState(scriptRoot.getType() == Token.SCRIPT);
  NodeTraversal t=new NodeTraversal(compiler,this);
  Scope scope=new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(),null);
  t.traverseWithScope(scriptRoot,scope);
}",0.7888888888888889
28139,"@Override public boolean acceptEcmaScript5(){
  return options.getLanguageIn() == LanguageMode.ECMASCRIPT5;
}","@Override public boolean acceptEcmaScript5(){
switch (options.getLanguageIn()) {
case ECMASCRIPT5:
case ECMASCRIPT5_STRICT:
    return true;
}
return false;
}",0.6441947565543071
28140,"/** 
 * Creates a RecordType from the nodes representing said record type.
 * @param n The node with type info.
 * @param sourceName The source file name.
 * @param scope A scope for doing type name lookups.
 */
private JSType createRecordTypeFromNodes(Node n,String sourceName,StaticScope<JSType> scope){
  RecordTypeBuilder builder=new RecordTypeBuilder(this);
  for (Node fieldTypeNode=n.getFirstChild(); fieldTypeNode != null; fieldTypeNode=fieldTypeNode.getNext()) {
    Node fieldNameNode=fieldTypeNode;
    boolean hasType=false;
    if (fieldTypeNode.getType() == Token.COLON) {
      fieldNameNode=fieldTypeNode.getFirstChild();
      hasType=true;
    }
    String fieldName=fieldNameNode.getString();
    if (fieldName.startsWith(""String_Node_Str"") || fieldName.startsWith(""String_Node_Str"")) {
      fieldName=fieldName.substring(1,fieldName.length() - 1);
    }
    JSType fieldType=null;
    if (hasType) {
      fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
    }
 else {
      fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
    }
    if (builder.addProperty(fieldName,fieldType,fieldNameNode) == null) {
      reporter.warning(""String_Node_Str"" + fieldName,sourceName,n.getLineno(),""String_Node_Str"",n.getCharno());
    }
  }
  return builder.build();
}","/** 
 * Creates a RecordType from the nodes representing said record type.
 * @param n The node with type info.
 * @param sourceName The source file name.
 * @param scope A scope for doing type name lookups.
 */
private JSType createRecordTypeFromNodes(Node n,String sourceName,StaticScope<JSType> scope){
  RecordTypeBuilder builder=new RecordTypeBuilder(this);
  for (Node fieldTypeNode=n.getFirstChild(); fieldTypeNode != null; fieldTypeNode=fieldTypeNode.getNext()) {
    Node fieldNameNode=fieldTypeNode;
    boolean hasType=false;
    if (fieldTypeNode.getType() == Token.COLON) {
      fieldNameNode=fieldTypeNode.getFirstChild();
      hasType=true;
    }
    String fieldName=fieldNameNode.getString();
    if (fieldName.startsWith(""String_Node_Str"") || fieldName.startsWith(""String_Node_Str"")) {
      fieldName=fieldName.substring(1,fieldName.length() - 1);
    }
    JSType fieldType=null;
    if (hasType) {
      fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
    }
 else {
      fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
    }
    if (builder.addProperty(fieldName,fieldType,fieldNameNode) == null) {
      reporter.warning(""String_Node_Str"" + fieldName,sourceName,n.getLineno(),""String_Node_Str"",fieldNameNode.getCharno());
    }
  }
  return builder.build();
}",0.9946969696969696
28141,"/** 
 * Creates a RecordType from the nodes representing said record type.
 * @param n The node with type info.
 * @param sourceName The source file name.
 * @param scope A scope for doing type name lookups.
 */
private JSType createRecordTypeFromNodes(Node n,String sourceName,StaticScope<JSType> scope){
  RecordTypeBuilder builder=new RecordTypeBuilder(this);
  for (Node fieldTypeNode=n.getFirstChild(); fieldTypeNode != null; fieldTypeNode=fieldTypeNode.getNext()) {
    Node fieldNameNode=fieldTypeNode;
    boolean hasType=false;
    if (fieldTypeNode.getType() == Token.COLON) {
      fieldNameNode=fieldTypeNode.getFirstChild();
      hasType=true;
    }
    String fieldName=fieldNameNode.getString();
    if (fieldName.startsWith(""String_Node_Str"") || fieldName.startsWith(""String_Node_Str"")) {
      fieldName=fieldName.substring(1,fieldName.length() - 1);
    }
    JSType fieldType=null;
    if (hasType) {
      fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
    }
 else {
      fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
    }
    builder.addProperty(fieldName,fieldType,fieldNameNode);
  }
  return builder.build();
}","/** 
 * Creates a RecordType from the nodes representing said record type.
 * @param n The node with type info.
 * @param sourceName The source file name.
 * @param scope A scope for doing type name lookups.
 */
private JSType createRecordTypeFromNodes(Node n,String sourceName,StaticScope<JSType> scope){
  RecordTypeBuilder builder=new RecordTypeBuilder(this);
  for (Node fieldTypeNode=n.getFirstChild(); fieldTypeNode != null; fieldTypeNode=fieldTypeNode.getNext()) {
    Node fieldNameNode=fieldTypeNode;
    boolean hasType=false;
    if (fieldTypeNode.getType() == Token.COLON) {
      fieldNameNode=fieldTypeNode.getFirstChild();
      hasType=true;
    }
    String fieldName=fieldNameNode.getString();
    if (fieldName.startsWith(""String_Node_Str"") || fieldName.startsWith(""String_Node_Str"")) {
      fieldName=fieldName.substring(1,fieldName.length() - 1);
    }
    JSType fieldType=null;
    if (hasType) {
      fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
    }
 else {
      fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
    }
    if (builder.addProperty(fieldName,fieldType,fieldNameNode) == null) {
      reporter.warning(""String_Node_Str"" + fieldName,sourceName,n.getLineno(),""String_Node_Str"",n.getCharno());
    }
  }
  return builder.build();
}",0.9471153846153846
28142,"/** 
 * Creates a record.
 * @return The record type.
 */
public JSType build(){
  if (isEmpty) {
    return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
  }
  return registry.createRecordType(properties.build());
}","/** 
 * Creates a record.
 * @return The record type.
 */
public JSType build(){
  if (isEmpty) {
    return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
  }
  return registry.createRecordType(Collections.unmodifiableMap(properties));
}",0.8837209302325582
28143,"/** 
 * Adds a property with the given name and type to the record type.
 * @param name the name of the new property
 * @param type the JSType of the new property
 * @param propertyNode the node that holds this property definition
 * @return The builder itself for chaining purposes.
 */
public RecordTypeBuilder addProperty(String name,JSType type,Node propertyNode){
  isEmpty=false;
  properties.put(name,new RecordProperty(type,propertyNode));
  return this;
}","/** 
 * Adds a property with the given name and type to the record type.
 * @param name the name of the new property
 * @param type the JSType of the new property
 * @param propertyNode the node that holds this property definition
 * @return The builder itself for chaining purposes, or null if there'sa duplicate.
 */
public RecordTypeBuilder addProperty(String name,JSType type,Node propertyNode){
  isEmpty=false;
  if (properties.containsKey(name)) {
    return null;
  }
  properties.put(name,new RecordProperty(type,propertyNode));
  return this;
}",0.911591355599214
28144,"/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name. This involves flattening the global name (if it's not just a global variable name already), collapsing object literal keys into global variables, declaring stub global variables for properties added later in a local scope, and eliminating the global name entirely (if possible).
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name for {@code n} (e.g. ""a"", ""a$b$c"")
 */
private void updateObjLitOrFunctionDeclaration(Name n,String alias){
switch (n.declaration.node.getParent().getType()) {
case Token.ASSIGN:
    updateObjLitOrFunctionDeclarationAtAssignNode(n,alias);
  break;
case Token.VAR:
updateObjLitOrFunctionDeclarationAtVarNode(n);
break;
case Token.FUNCTION:
updateFunctionDeclarationAtFunctionNode(n);
break;
}
}","/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name. This involves flattening the global name (if it's not just a global variable name already), collapsing object literal keys into global variables, declaring stub global variables for properties added later in a local scope. It may seem odd that this function also takes care of declaring stubs for direct children. The ultimate goal of this function is to eliminate the global name entirely (when possible), so that ""middlemen"" namespaces disappear, and to do that we need to make sure that all the direct children will be collapsed as well.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name for {@code n} (e.g. ""a"", ""a$b$c"")
 * @param canCollapseChildNames Whether it's possible to collapse children ofthis name. (This is mostly passed for convenience; it's equivalent to n.canCollapseChildNames()).
 */
private void updateObjLitOrFunctionDeclaration(Name n,String alias,boolean canCollapseChildNames){
  if (n.declaration == null) {
    return;
  }
  if (n.declaration.getTwin() != null) {
    return;
  }
switch (n.declaration.node.getParent().getType()) {
case Token.ASSIGN:
    updateObjLitOrFunctionDeclarationAtAssignNode(n,alias,canCollapseChildNames);
  break;
case Token.VAR:
updateObjLitOrFunctionDeclarationAtVarNode(n,canCollapseChildNames);
break;
case Token.FUNCTION:
updateFunctionDeclarationAtFunctionNode(n,canCollapseChildNames);
break;
}
}",0.6828437633035335
28145,"/** 
 * Adds global variable ""stubs"" for any properties of a global name that are only set in a local scope or read but never set.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name of the object whose properties we areadding stubs for (e.g. ""a$b$c"")
 * @param parent The node to which new global variables should be addedas children
 * @param addAfter The child of after which newvariables should be added (may be null)
 * @return The number of variables added
 */
private int addStubsForUndeclaredProperties(Name n,String alias,Node parent,Node addAfter){
  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
  Preconditions.checkNotNull(addAfter);
  int numStubs=0;
  if (n.props != null) {
    for (    Name p : n.props) {
      if (p.needsToBeStubbed()) {
        String propAlias=appendPropForAlias(alias,p.name);
        Node nameNode=Node.newString(Token.NAME,propAlias);
        Node newVar=new Node(Token.VAR,nameNode).copyInformationFromForTree(addAfter);
        parent.addChildAfter(newVar,addAfter);
        addAfter=newVar;
        numStubs++;
        compiler.reportCodeChange();
        if (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
          nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
        }
      }
    }
  }
  return numStubs;
}","/** 
 * Adds global variable ""stubs"" for any properties of a global name that are only set in a local scope or read but never set.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name of the object whose properties we areadding stubs for (e.g. ""a$b$c"")
 * @param parent The node to which new global variables should be addedas children
 * @param addAfter The child of after which newvariables should be added (may be null)
 * @return The number of variables added
 */
private int addStubsForUndeclaredProperties(Name n,String alias,Node parent,Node addAfter){
  Preconditions.checkState(n.canCollapseUnannotatedChildNames());
  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
  Preconditions.checkNotNull(addAfter);
  int numStubs=0;
  if (n.props != null) {
    for (    Name p : n.props) {
      if (p.needsToBeStubbed()) {
        String propAlias=appendPropForAlias(alias,p.name);
        Node nameNode=Node.newString(Token.NAME,propAlias);
        Node newVar=new Node(Token.VAR,nameNode).copyInformationFromForTree(addAfter);
        parent.addChildAfter(newVar,addAfter);
        addAfter=newVar;
        numStubs++;
        compiler.reportCodeChange();
        if (p.refs.get(0).node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
          nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
        }
      }
    }
  }
  return numStubs;
}",0.9763101220387652
28146,"/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at a VAR node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"")
 */
private void updateObjLitOrFunctionDeclarationAtVarNode(Name n){
  Ref ref=n.declaration;
  String name=ref.node.getString();
  Node rvalue=ref.node.getFirstChild();
  Node varNode=ref.node.getParent();
  Node gramps=varNode.getParent();
  boolean isObjLit=rvalue.getType() == Token.OBJECTLIT;
  int numChanges=0;
  if (isObjLit) {
    numChanges+=declareVarsForObjLitValues(n,name,rvalue,varNode,gramps.getChildBefore(varNode),gramps);
  }
  numChanges+=addStubsForUndeclaredProperties(n,name,gramps,varNode);
  if (isObjLit && n.canEliminate()) {
    varNode.removeChild(ref.node);
    if (!varNode.hasChildren()) {
      gramps.removeChild(varNode);
    }
    numChanges++;
    ref.node=null;
  }
  if (numChanges > 0) {
    compiler.reportCodeChange();
  }
}","/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at a VAR node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"")
 */
private void updateObjLitOrFunctionDeclarationAtVarNode(Name n,boolean canCollapseChildNames){
  if (!canCollapseChildNames) {
    return;
  }
  Ref ref=n.declaration;
  String name=ref.node.getString();
  Node rvalue=ref.node.getFirstChild();
  Node varNode=ref.node.getParent();
  Node gramps=varNode.getParent();
  boolean isObjLit=rvalue.getType() == Token.OBJECTLIT;
  int numChanges=0;
  if (isObjLit) {
    numChanges+=declareVarsForObjLitValues(n,name,rvalue,varNode,gramps.getChildBefore(varNode),gramps);
  }
  numChanges+=addStubsForUndeclaredProperties(n,name,gramps,varNode);
  if (isObjLit && n.canEliminate()) {
    varNode.removeChild(ref.node);
    if (!varNode.hasChildren()) {
      gramps.removeChild(varNode);
    }
    numChanges++;
    ref.node=null;
  }
  if (numChanges > 0) {
    compiler.reportCodeChange();
  }
}",0.9622458857696032
28147,"/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at a FUNCTION node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"")
 */
private void updateFunctionDeclarationAtFunctionNode(Name n){
  Ref ref=n.declaration;
  String fnName=ref.node.getString();
  addStubsForUndeclaredProperties(n,fnName,ref.node.getAncestor(2),ref.node.getParent());
}","/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at a FUNCTION node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"")
 */
private void updateFunctionDeclarationAtFunctionNode(Name n,boolean canCollapseChildNames){
  if (!canCollapseChildNames) {
    return;
  }
  Ref ref=n.declaration;
  String fnName=ref.node.getString();
  addStubsForUndeclaredProperties(n,fnName,ref.node.getAncestor(2),ref.node.getParent());
}",0.9207317073170732
28148,"/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at an ASSIGN node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name for {@code n} (e.g. ""a"", ""a$b$c"")
 */
private void updateObjLitOrFunctionDeclarationAtAssignNode(Name n,String alias){
  Ref ref=n.declaration;
  Node rvalue=ref.node.getNext();
  Node varNode=new Node(Token.VAR);
  Node varParent=ref.node.getAncestor(3);
  Node gramps=ref.node.getAncestor(2);
  boolean isObjLit=rvalue.getType() == Token.OBJECTLIT;
  if (isObjLit && n.canEliminate()) {
    varParent.replaceChild(gramps,varNode);
    ref.node=null;
  }
 else {
    if (rvalue.getType() == Token.FUNCTION) {
      checkForHosedThisReferences(rvalue,n.docInfo,n);
    }
    ref.node.getParent().removeChild(rvalue);
    Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,ref.node.getAncestor(2),n.fullName());
    if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
    }
    varNode.addChildToBack(nameNode);
    nameNode.addChildToFront(rvalue);
    varParent.replaceChild(gramps,varNode);
    ref.node=nameNode;
  }
  if (isObjLit) {
    declareVarsForObjLitValues(n,alias,rvalue,varNode,varParent.getChildBefore(varNode),varParent);
  }
  addStubsForUndeclaredProperties(n,alias,varParent,varNode);
  if (!varNode.hasChildren()) {
    varParent.removeChild(varNode);
  }
  compiler.reportCodeChange();
}","/** 
 * Updates the first initialization (a.k.a ""declaration"") of a global name that occurs at an ASSIGN node. See comment for  {@link #updateObjLitOrFunctionDeclaration}.
 * @param n An object representing a global name (e.g. ""a"", ""a.b.c"")
 * @param alias The flattened name for {@code n} (e.g. ""a"", ""a$b$c"")
 */
private void updateObjLitOrFunctionDeclarationAtAssignNode(Name n,String alias,boolean canCollapseChildNames){
  Ref ref=n.declaration;
  Node rvalue=ref.node.getNext();
  Node varNode=new Node(Token.VAR);
  Node varParent=ref.node.getAncestor(3);
  Node gramps=ref.node.getAncestor(2);
  boolean isObjLit=rvalue.getType() == Token.OBJECTLIT;
  boolean insertedVarNode=false;
  if (isObjLit && n.canEliminate()) {
    varParent.replaceChild(gramps,varNode);
    ref.node=null;
    insertedVarNode=true;
  }
 else   if (!n.isSimpleName()) {
    if (rvalue.getType() == Token.FUNCTION) {
      checkForHosedThisReferences(rvalue,n.docInfo,n);
    }
    ref.node.getParent().removeChild(rvalue);
    Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,ref.node.getAncestor(2),n.fullName());
    if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
    }
    varNode.addChildToBack(nameNode);
    nameNode.addChildToFront(rvalue);
    varParent.replaceChild(gramps,varNode);
    ref.node=nameNode;
    insertedVarNode=true;
  }
  if (canCollapseChildNames) {
    if (isObjLit) {
      declareVarsForObjLitValues(n,alias,rvalue,varNode,varParent.getChildBefore(varNode),varParent);
    }
    addStubsForUndeclaredProperties(n,alias,varParent,varNode);
  }
  if (insertedVarNode) {
    if (!varNode.hasChildren()) {
      varParent.removeChild(varNode);
    }
    compiler.reportCodeChange();
  }
}",0.93479549496147
28149,"/** 
 * Collapses definitions of the collapsible properties of a global name. Recurses on subnames that also represent JavaScript objects with collapsible properties.
 * @param n A node representing a global name
 * @param alias The flattened name for {@code n}
 */
private void collapseDeclarationOfNameAndDescendants(Name n,String alias){
  boolean canCollapseChildNames=n.canCollapseUnannotatedChildNames();
  if (n.canCollapse() && canCollapseChildNames) {
    updateObjLitOrFunctionDeclaration(n,alias);
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      collapseDeclarationOfNameAndDescendants(p,appendPropForAlias(alias,p.name));
      if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) {
        updateSimpleDeclaration(appendPropForAlias(alias,p.name),p,p.declaration);
      }
    }
  }
}","/** 
 * Collapses definitions of the collapsible properties of a global name. Recurses on subnames that also represent JavaScript objects with collapsible properties.
 * @param n A node representing a global name
 * @param alias The flattened name for {@code n}
 */
private void collapseDeclarationOfNameAndDescendants(Name n,String alias){
  boolean canCollapseChildNames=n.canCollapseUnannotatedChildNames();
  if (n.canCollapse()) {
    updateObjLitOrFunctionDeclaration(n,alias,canCollapseChildNames);
  }
  if (n.props != null) {
    for (    Name p : n.props) {
      collapseDeclarationOfNameAndDescendants(p,appendPropForAlias(alias,p.name));
      if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) {
        updateSimpleDeclaration(appendPropForAlias(alias,p.name),p,p.declaration);
      }
    }
  }
}",0.9755844155844156
28150,"void addGuard(WarningsGuard guard){
  if (guard instanceof ComposeWarningsGuard) {
    addGuards(Lists.reverse(((ComposeWarningsGuard)guard).guards));
  }
 else {
    int index=Collections.binarySearch(this.guards,guard,guardComparator);
    if (index < 0) {
      index=-index - 1;
    }
    this.guards.add(index,guard);
  }
}","void addGuard(WarningsGuard guard){
  if (guard instanceof ComposeWarningsGuard) {
    addGuards(((ComposeWarningsGuard)guard).guards.descendingSet());
  }
 else {
    numberOfAdds++;
    orderOfAddition.put(guard,numberOfAdds);
    guards.remove(guard);
    guards.add(guard);
  }
}",0.3502454991816694
28151,"@Override public int compare(WarningsGuard a,WarningsGuard b){
  return a.getPriority() - b.getPriority();
}","@Override public int compare(WarningsGuard a,WarningsGuard b){
  int priorityDiff=a.getPriority() - b.getPriority();
  if (priorityDiff != 0) {
    return priorityDiff;
  }
  return orderOfAddition.get(b).intValue() - orderOfAddition.get(a).intValue();
}",0.5580110497237569
28152,"List<WarningsGuard> getGuards(){
  return Collections.unmodifiableList(guards);
}","List<WarningsGuard> getGuards(){
  return Collections.unmodifiableList(Lists.newArrayList(guards));
}",0.8901098901098901
28153,"private CompilerOptions createCompilerOptions(){
  CompilerOptions options=new CompilerOptions();
  this.compilationLevel.setOptionsForCompilationLevel(options);
  if (this.debugOptions) {
    this.compilationLevel.setDebugOptionsForCompilationLevel(options);
  }
  options.prettyPrint=this.prettyPrint;
  options.printInputDelimiter=this.printInputDelimiter;
  this.warningLevel.setOptionsForWarningLevel(options);
  options.setManageClosureDependencies(manageDependencies);
  return options;
}","private CompilerOptions createCompilerOptions(){
  CompilerOptions options=new CompilerOptions();
  this.compilationLevel.setOptionsForCompilationLevel(options);
  if (this.debugOptions) {
    this.compilationLevel.setDebugOptionsForCompilationLevel(options);
  }
  options.prettyPrint=this.prettyPrint;
  options.printInputDelimiter=this.printInputDelimiter;
  options.generateExports=this.generateExports;
  this.warningLevel.setOptionsForWarningLevel(options);
  options.setManageClosureDependencies(manageDependencies);
  return options;
}",0.953757225433526
28154,"public CompileTask(){
  this.warningLevel=WarningLevel.DEFAULT;
  this.debugOptions=false;
  this.compilationLevel=CompilationLevel.SIMPLE_OPTIMIZATIONS;
  this.customExternsOnly=false;
  this.manageDependencies=false;
  this.prettyPrint=false;
  this.printInputDelimiter=false;
  this.externFileLists=Lists.newLinkedList();
  this.sourceFileLists=Lists.newLinkedList();
}","public CompileTask(){
  this.warningLevel=WarningLevel.DEFAULT;
  this.debugOptions=false;
  this.compilationLevel=CompilationLevel.SIMPLE_OPTIMIZATIONS;
  this.customExternsOnly=false;
  this.manageDependencies=false;
  this.prettyPrint=false;
  this.printInputDelimiter=false;
  this.generateExports=false;
  this.externFileLists=Lists.newLinkedList();
  this.sourceFileLists=Lists.newLinkedList();
}",0.9612403100775194
28155,"/** 
 * Visits a   {@link Token#FUNCTION} node.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 */
private void visitFunction(NodeTraversal t,Node n){
  JSDocInfo info=n.getJSDocInfo();
  FunctionType functionType=(FunctionType)n.getJSType();
  String functionPrivateName=n.getFirstChild().getString();
  if (functionType.isInterface() || functionType.isConstructor()) {
    FunctionType baseConstructor=functionType.getPrototype().getImplicitPrototype().getConstructor();
    if (baseConstructor != null && baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) && (baseConstructor.isConstructor() && functionType.isInterface() || baseConstructor.isInterface() && functionType.isConstructor())) {
      compiler.report(t.makeError(n,CONFLICTING_EXTENDED_TYPE,functionPrivateName));
    }
    for (    JSType baseInterface : functionType.getImplementedInterfaces()) {
      boolean badImplementedType=false;
      ObjectType baseInterfaceObj=ObjectType.cast(baseInterface);
      if (baseInterfaceObj != null) {
        FunctionType interfaceConstructor=baseInterfaceObj.getConstructor();
        if (interfaceConstructor != null && !interfaceConstructor.isInterface()) {
          badImplementedType=true;
        }
      }
 else {
        badImplementedType=true;
      }
      if (badImplementedType) {
        report(t,n,BAD_IMPLEMENTED_TYPE,functionPrivateName);
      }
    }
    if (functionType.isConstructor()) {
      validator.expectAllInterfacePropertiesImplemented(functionType);
    }
  }
}","/** 
 * Visits a   {@link Token#FUNCTION} node.
 * @param t The node traversal object that supplies context, such as thescope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 */
private void visitFunction(NodeTraversal t,Node n){
  JSDocInfo info=n.getJSDocInfo();
  FunctionType functionType=(FunctionType)n.getJSType();
  String functionPrivateName=n.getFirstChild().getString();
  if (functionType.isInterface() || functionType.isConstructor()) {
    FunctionType baseConstructor=functionType.getPrototype().getImplicitPrototype().getConstructor();
    if (baseConstructor != null && baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) && (baseConstructor.isConstructor() && functionType.isInterface() || baseConstructor.isInterface() && functionType.isConstructor())) {
      compiler.report(t.makeError(n,CONFLICTING_EXTENDED_TYPE,functionPrivateName));
    }
    for (    JSType baseInterface : functionType.getImplementedInterfaces()) {
      boolean badImplementedType=false;
      ObjectType baseInterfaceObj=ObjectType.cast(baseInterface);
      if (baseInterfaceObj != null) {
        FunctionType interfaceConstructor=baseInterfaceObj.getConstructor();
        if (interfaceConstructor != null && !interfaceConstructor.isInterface()) {
          badImplementedType=true;
        }
      }
 else {
        badImplementedType=true;
      }
      if (badImplementedType) {
        report(t,n,BAD_IMPLEMENTED_TYPE,functionPrivateName);
      }
    }
    if (functionType.isConstructor()) {
      validator.expectAllInterfaceProperties(t,n,functionType);
    }
  }
}",0.994767620806402
28156,"/** 
 * Given a constructor type and a property name, check that the property has the JSDoc annotation @override iff the property is declared on a superclass. Several checks regarding inheritance correctness are also performed.
 */
private void checkDeclaredPropertyInheritance(NodeTraversal t,Node n,FunctionType ctorType,String propertyName,JSDocInfo info,JSType propertyType){
  if (hasUnknownOrEmptySupertype(ctorType)) {
    return;
  }
  FunctionType superClass=ctorType.getSuperClassConstructor();
  boolean superClassHasProperty=superClass != null && superClass.getPrototype().hasProperty(propertyName);
  boolean declaredOverride=info != null && info.isOverride();
  boolean foundInterfaceProperty=false;
  if (ctorType.isConstructor()) {
    for (    JSType implementedInterface : ctorType.getImplementedInterfaces()) {
      if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
        continue;
      }
      FunctionType interfaceType=implementedInterface.toObjectType().getConstructor();
      Preconditions.checkNotNull(interfaceType);
      boolean interfaceHasProperty=interfaceType.getPrototype().hasProperty(propertyName);
      foundInterfaceProperty=foundInterfaceProperty || interfaceHasProperty;
      if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {
        compiler.report(t.makeError(n,reportMissingOverride,HIDDEN_INTERFACE_PROPERTY,propertyName,interfaceType.getTopMostDefiningType(propertyName).toString()));
      }
      if (interfaceHasProperty) {
        JSType interfacePropType=interfaceType.getPrototype().getPropertyType(propertyName);
        if (!propertyType.canAssignTo(interfacePropType)) {
          compiler.report(t.makeError(n,HIDDEN_INTERFACE_PROPERTY_MISMATCH,propertyName,interfaceType.getTopMostDefiningType(propertyName).toString(),interfacePropType.toString(),propertyType.toString()));
        }
      }
    }
  }
  if (!declaredOverride && !superClassHasProperty) {
    return;
  }
  JSType topInstanceType=superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;
  if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride&& superClassHasProperty) {
    compiler.report(t.makeError(n,reportMissingOverride,HIDDEN_SUPERCLASS_PROPERTY,propertyName,topInstanceType.toString()));
  }
  if (!declaredOverride) {
    return;
  }
  if (superClassHasProperty) {
    JSType superClassPropType=superClass.getPrototype().getPropertyType(propertyName);
    if (!propertyType.canAssignTo(superClassPropType)) {
      compiler.report(t.makeError(n,HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,propertyName,topInstanceType.toString(),superClassPropType.toString(),propertyType.toString()));
    }
  }
 else   if (!foundInterfaceProperty) {
    compiler.report(t.makeError(n,UNKNOWN_OVERRIDE,propertyName,ctorType.getInstanceType().toString()));
  }
}","/** 
 * Given a constructor type and a property name, check that the property has the JSDoc annotation @override iff the property is declared on a superclass. Several checks regarding inheritance correctness are also performed.
 */
private void checkDeclaredPropertyInheritance(NodeTraversal t,Node n,FunctionType ctorType,String propertyName,JSDocInfo info,JSType propertyType){
  if (hasUnknownOrEmptySupertype(ctorType)) {
    return;
  }
  FunctionType superClass=ctorType.getSuperClassConstructor();
  boolean superClassHasProperty=superClass != null && superClass.getPrototype().hasProperty(propertyName);
  boolean declaredOverride=info != null && info.isOverride();
  boolean foundInterfaceProperty=false;
  if (ctorType.isConstructor()) {
    for (    JSType implementedInterface : ctorType.getImplementedInterfaces()) {
      if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
        continue;
      }
      FunctionType interfaceType=implementedInterface.toObjectType().getConstructor();
      Preconditions.checkNotNull(interfaceType);
      boolean interfaceHasProperty=interfaceType.getPrototype().hasProperty(propertyName);
      foundInterfaceProperty=foundInterfaceProperty || interfaceHasProperty;
      if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {
        compiler.report(t.makeError(n,reportMissingOverride,HIDDEN_INTERFACE_PROPERTY,propertyName,interfaceType.getTopMostDefiningType(propertyName).toString()));
      }
    }
  }
  if (!declaredOverride && !superClassHasProperty) {
    return;
  }
  JSType topInstanceType=superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;
  if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride&& superClassHasProperty) {
    compiler.report(t.makeError(n,reportMissingOverride,HIDDEN_SUPERCLASS_PROPERTY,propertyName,topInstanceType.toString()));
  }
  if (!declaredOverride) {
    return;
  }
  if (superClassHasProperty) {
    JSType superClassPropType=superClass.getPrototype().getPropertyType(propertyName);
    if (!propertyType.canAssignTo(superClassPropType)) {
      compiler.report(t.makeError(n,HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,propertyName,topInstanceType.toString(),superClassPropType.toString(),propertyType.toString()));
    }
  }
 else   if (!foundInterfaceProperty) {
    compiler.report(t.makeError(n,UNKNOWN_OVERRIDE,propertyName,ctorType.getInstanceType().toString()));
  }
}",0.9234209055338176
28157,"CheckAccessControls(AbstractCompiler compiler){
  this.compiler=compiler;
  this.validator=compiler.getTypeValidator();
}","CheckAccessControls(AbstractCompiler compiler){
  this.compiler=compiler;
  this.validator=compiler.getTypeValidator();
  this.initializedConstantProperties=HashMultimap.create();
}",0.8013245033112583
28158,"public void visit(NodeTraversal t,Node n,Node parent){
switch (n.getType()) {
case Token.NAME:
    checkNameDeprecation(t,n,parent);
  checkNameVisibility(t,n,parent);
break;
case Token.GETPROP:
checkPropertyDeprecation(t,n,parent);
checkPropertyVisibility(t,n,parent);
break;
case Token.NEW:
checkConstructorDeprecation(t,n,parent);
break;
}
}","public void visit(NodeTraversal t,Node n,Node parent){
switch (n.getType()) {
case Token.NAME:
    checkNameDeprecation(t,n,parent);
  checkNameVisibility(t,n,parent);
break;
case Token.GETPROP:
checkPropertyDeprecation(t,n,parent);
checkPropertyVisibility(t,n,parent);
checkConstantProperty(t,n);
break;
case Token.NEW:
checkConstructorDeprecation(t,n,parent);
break;
}
}",0.9608938547486032
28159,"@Override protected CompilerOptions getOptions(){
  CompilerOptions options=super.getOptions();
  options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS,CheckLevel.ERROR);
  return options;
}","@Override protected CompilerOptions getOptions(){
  CompilerOptions options=super.getOptions();
  options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS,CheckLevel.ERROR);
  options.setWarningLevel(DiagnosticGroups.CONSTANT_PROPERTY,CheckLevel.ERROR);
  return options;
}",0.8283261802575107
28160,"public void testWarningForSuperClassWithDeprecatedSubclassMethod(){
  testSame(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","public void testWarningForSuperClassWithDeprecatedSubclassMethod(){
  testSame(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9493333333333334
28161,"/** 
 * Gets the value of a node as a Number, or null if it cannot be converted. When it returns a non-null Double, this method effectively emulates the <code>Number()</code> JavaScript cast function.
 */
static Double getNumberValue(Node n){
switch (n.getType()) {
case Token.TRUE:
    return 1.0;
case Token.FALSE:
case Token.NULL:
  return 0.0;
case Token.NUMBER:
return n.getDouble();
case Token.VOID:
if (mayHaveSideEffects(n.getFirstChild())) {
return null;
}
 else {
return Double.NaN;
}
case Token.NAME:
String name=n.getString();
if (name.equals(""String_Node_Str"")) {
return Double.NaN;
}
if (name.equals(""String_Node_Str"")) {
return Double.NaN;
}
if (name.equals(""String_Node_Str"")) {
return Double.POSITIVE_INFINITY;
}
return null;
case Token.NEG:
if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""String_Node_Str"")) {
return Double.NEGATIVE_INFINITY;
}
return null;
case Token.NOT:
TernaryValue child=getBooleanValue(n.getFirstChild());
if (child != TernaryValue.UNKNOWN) {
return child.toBoolean(true) ? 0.0 : 1.0;
}
break;
case Token.STRING:
String s=trimJsWhiteSpace(n.getString());
if (s.length() == 0) {
return 0.0;
}
if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
try {
return Double.valueOf(Integer.parseInt(s.substring(2),16));
}
 catch (NumberFormatException e) {
return Double.NaN;
}
}
if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
return null;
}
if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"")) {
return null;
}
try {
return Double.parseDouble(s);
}
 catch (NumberFormatException e) {
return Double.NaN;
}
}
return null;
}","/** 
 * Gets the value of a node as a Number, or null if it cannot be converted. When it returns a non-null Double, this method effectively emulates the <code>Number()</code> JavaScript cast function.
 */
static Double getNumberValue(Node n){
switch (n.getType()) {
case Token.TRUE:
    return 1.0;
case Token.FALSE:
case Token.NULL:
  return 0.0;
case Token.NUMBER:
return n.getDouble();
case Token.VOID:
if (mayHaveSideEffects(n.getFirstChild())) {
return null;
}
 else {
return Double.NaN;
}
case Token.NAME:
String name=n.getString();
if (name.equals(""String_Node_Str"")) {
return Double.NaN;
}
if (name.equals(""String_Node_Str"")) {
return Double.NaN;
}
if (name.equals(""String_Node_Str"")) {
return Double.POSITIVE_INFINITY;
}
return null;
case Token.NEG:
if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""String_Node_Str"")) {
return Double.NEGATIVE_INFINITY;
}
return null;
case Token.NOT:
TernaryValue child=getBooleanValue(n.getFirstChild());
if (child != TernaryValue.UNKNOWN) {
return child.toBoolean(true) ? 0.0 : 1.0;
}
break;
case Token.STRING:
return getStringNumberValue(n.getString());
case Token.ARRAYLIT:
case Token.OBJECTLIT:
String value=getStringValue(n);
return value != null ? getStringNumberValue(value) : null;
}
return null;
}",0.727741935483871
28162,"/** 
 * Gets the value of a node as a String, or null if it cannot be converted. When it returns a non-null String, this method effectively emulates the <code>String()</code> JavaScript cast function.
 */
static String getStringValue(Node n){
switch (n.getType()) {
case Token.STRING:
    return n.getString();
case Token.NAME:
  String name=n.getString();
if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name)) {
  return name;
}
break;
case Token.NUMBER:
double value=n.getDouble();
long longValue=(long)value;
if (longValue == value) {
return Long.toString(longValue);
}
 else {
return Double.toString(n.getDouble());
}
case Token.FALSE:
case Token.TRUE:
case Token.NULL:
return Node.tokenToName(n.getType());
case Token.VOID:
return ""String_Node_Str"";
case Token.NOT:
TernaryValue child=getBooleanValue(n.getFirstChild());
if (child != TernaryValue.UNKNOWN) {
return child.toBoolean(true) ? ""String_Node_Str"" : ""String_Node_Str"";
}
break;
}
return null;
}","/** 
 * Gets the value of a node as a String, or null if it cannot be converted. When it returns a non-null String, this method effectively emulates the <code>String()</code> JavaScript cast function.
 */
static String getStringValue(Node n){
switch (n.getType()) {
case Token.STRING:
    return n.getString();
case Token.NAME:
  String name=n.getString();
if (""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name) || ""String_Node_Str"".equals(name)) {
  return name;
}
break;
case Token.NUMBER:
double value=n.getDouble();
long longValue=(long)value;
if (longValue == value) {
return Long.toString(longValue);
}
 else {
return Double.toString(n.getDouble());
}
case Token.FALSE:
case Token.TRUE:
case Token.NULL:
return Node.tokenToName(n.getType());
case Token.VOID:
return ""String_Node_Str"";
case Token.NOT:
TernaryValue child=getBooleanValue(n.getFirstChild());
if (child != TernaryValue.UNKNOWN) {
return child.toBoolean(true) ? ""String_Node_Str"" : ""String_Node_Str"";
}
break;
case Token.ARRAYLIT:
return arrayToString(n);
case Token.OBJECTLIT:
return ""String_Node_Str"";
}
return null;
}",0.9554502369668246
28163,"/** 
 * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
 */
private Node tryFoldArrayJoin(Node n){
  Node callTarget=n.getFirstChild();
  if (callTarget == null) {
    return n;
  }
  Node right=callTarget.getNext();
  if (right == null) {
    return n;
  }
  if (!NodeUtil.isGetProp(callTarget) || !NodeUtil.isImmutableValue(right)) {
    return n;
  }
  Node arrayNode=callTarget.getFirstChild();
  Node functionName=arrayNode.getNext();
  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(""String_Node_Str"")) {
    return n;
  }
  String joinString=NodeUtil.getStringValue(right);
  List<Node> arrayFoldedChildren=Lists.newLinkedList();
  StringBuilder sb=null;
  int foldedSize=0;
  Node prev=null;
  Node elem=arrayNode.getFirstChild();
  while (elem != null) {
    if (NodeUtil.isImmutableValue(elem)) {
      if (sb == null) {
        sb=new StringBuilder();
      }
 else {
        sb.append(joinString);
      }
      sb.append(NodeUtil.getStringValue(elem));
    }
 else {
      if (sb != null) {
        Preconditions.checkNotNull(prev);
        foldedSize+=sb.length() + 2;
        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
        sb=null;
      }
      foldedSize+=InlineCostEstimator.getCost(elem);
      arrayFoldedChildren.add(elem);
    }
    prev=elem;
    elem=elem.getNext();
  }
  if (sb != null) {
    Preconditions.checkNotNull(prev);
    foldedSize+=sb.length() + 2;
    arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
  }
  foldedSize+=arrayFoldedChildren.size() - 1;
  int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()) {
case 0:
    Node emptyStringNode=Node.newString(""String_Node_Str"");
  n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1:
Node foldedStringNode=arrayFoldedChildren.remove(0);
if (foldedSize > originalSize) {
return n;
}
arrayNode.detachChildren();
if (foldedStringNode.getType() != Token.STRING) {
Node replacement=new Node(Token.ADD,Node.newString(""String_Node_Str"").copyInformationFrom(right),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
return n;
}
int kJoinOverhead=""String_Node_Str"".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if (foldedSize > originalSize) {
return n;
}
arrayNode.detachChildren();
for (Node node : arrayFoldedChildren) {
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}","/** 
 * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
 */
private Node tryFoldArrayJoin(Node n){
  Node callTarget=n.getFirstChild();
  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
    return n;
  }
  Node right=callTarget.getNext();
  if (right != null && !NodeUtil.isImmutableValue(right)) {
    return n;
  }
  Node arrayNode=callTarget.getFirstChild();
  Node functionName=arrayNode.getNext();
  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(""String_Node_Str"")) {
    return n;
  }
  String joinString=(right == null) ? ""String_Node_Str"" : NodeUtil.getStringValue(right);
  List<Node> arrayFoldedChildren=Lists.newLinkedList();
  StringBuilder sb=null;
  int foldedSize=0;
  Node prev=null;
  Node elem=arrayNode.getFirstChild();
  while (elem != null) {
    if (NodeUtil.isImmutableValue(elem)) {
      if (sb == null) {
        sb=new StringBuilder();
      }
 else {
        sb.append(joinString);
      }
      sb.append(NodeUtil.getArrayElementStringValue(elem));
    }
 else {
      if (sb != null) {
        Preconditions.checkNotNull(prev);
        foldedSize+=sb.length() + 2;
        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
        sb=null;
      }
      foldedSize+=InlineCostEstimator.getCost(elem);
      arrayFoldedChildren.add(elem);
    }
    prev=elem;
    elem=elem.getNext();
  }
  if (sb != null) {
    Preconditions.checkNotNull(prev);
    foldedSize+=sb.length() + 2;
    arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
  }
  foldedSize+=arrayFoldedChildren.size() - 1;
  int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()) {
case 0:
    Node emptyStringNode=Node.newString(""String_Node_Str"");
  n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1:
Node foldedStringNode=arrayFoldedChildren.remove(0);
if (foldedSize > originalSize) {
return n;
}
arrayNode.detachChildren();
if (foldedStringNode.getType() != Token.STRING) {
Node replacement=new Node(Token.ADD,Node.newString(""String_Node_Str"").copyInformationFrom(right),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
return n;
}
int kJoinOverhead=""String_Node_Str"".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if (foldedSize > originalSize) {
return n;
}
arrayNode.detachChildren();
for (Node node : arrayFoldedChildren) {
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}",0.9450427033048644
28164,"public void testGetStringValue(){
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(null,NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(null,NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(null,NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(null,NodeUtil.getStringValue(getNode(""String_Node_Str"")));
}","public void testGetStringValue(){
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(null,NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(""String_Node_Str"",NodeUtil.getStringValue(getNode(""String_Node_Str"")));
  assertEquals(null,NodeUtil.getStringValue(getNode(""String_Node_Str"")));
}",0.9383050847457628
28165,"public void testStringJoinAdd(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
}","public void testStringJoinAdd(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
}",0.9120762711864406
28166,"private void maybeCollectMember(NodeTraversal t,Node member,Node nodeWithJsDocInfo,@Nullable Node value){
  JSDocInfo info=nodeWithJsDocInfo.getJSDocInfo();
  if (info == null || member.getType() != Token.GETPROP || member.getFirstChild().getType() != Token.THIS) {
    return;
  }
  member.getFirstChild().setJSType(thisType);
  JSType jsType=getDeclaredPropType(t,info,member,value);
  Node name=member.getLastChild();
  if (jsType != null && (name.getType() == Token.NAME || name.getType() == Token.STRING)) {
    thisType.defineDeclaredProperty(name.getString(),jsType,false,member);
  }
}","private void maybeCollectMember(NodeTraversal t,Node member,Node nodeWithJsDocInfo,@Nullable Node value){
  JSDocInfo info=nodeWithJsDocInfo.getJSDocInfo();
  if (info == null || member.getType() != Token.GETPROP || member.getFirstChild().getType() != Token.THIS) {
    return;
  }
  member.getFirstChild().setJSType(thisType);
  JSType jsType=getDeclaredType(t.getSourceName(),info,member,value);
  Node name=member.getLastChild();
  if (jsType != null && (name.getType() == Token.NAME || name.getType() == Token.STRING)) {
    thisType.defineDeclaredProperty(name.getString(),jsType,false,member);
  }
}",0.973288814691152
28167,"private JSType getDeclaredTypeInAnnotation(String sourceName,Node node,JSDocInfo info){
  JSType jsType=null;
  Node objNode=node.getType() == Token.GETPROP ? node.getFirstChild() : NodeUtil.isObjectLitKey(node,node.getParent()) ? node.getParent() : null;
  if (info != null) {
    if (info.hasType()) {
      jsType=info.getType().evaluate(scope,typeRegistry);
    }
 else     if (FunctionTypeBuilder.isFunctionTypeDeclaration(info)) {
      String fnName=node.getQualifiedName();
      jsType=createFunctionTypeFromNodes(null,fnName,info,node);
    }
  }
  return jsType;
}","/** 
 * Returns the type specified in a JSDoc annotation near a GETPROP or NAME. Extracts type information from either the   {@code @type} tag or fromthe  {@code @return} and {@code @param} tags.
 */
private JSType getDeclaredTypeInAnnotation(String sourceName,Node node,JSDocInfo info){
  JSType jsType=null;
  Node objNode=node.getType() == Token.GETPROP ? node.getFirstChild() : NodeUtil.isObjectLitKey(node,node.getParent()) ? node.getParent() : null;
  if (info != null) {
    if (info.hasType()) {
      jsType=info.getType().evaluate(scope,typeRegistry);
    }
 else     if (FunctionTypeBuilder.isFunctionTypeDeclaration(info)) {
      String fnName=node.getQualifiedName();
      jsType=createFunctionTypeFromNodes(null,fnName,info,node);
    }
  }
  return jsType;
}",0.8518518518518519
28168,"/** 
 * Defines a variable based on the   {@link Token#NAME} node passed.
 * @param name The {@link Token#NAME} node.
 * @param var The parent of the {@code name} node, which must be a{@link Token#VAR} node.
 * @param parent {@code var}'s parent.
 * @param info the {@link JSDocInfo} information relating to this{@code name} node.
 */
private void defineName(Node name,Node var,Node parent,JSDocInfo info){
  Node value=name.getFirstChild();
  JSType type=null;
  if (value != null && value.getType() == Token.FUNCTION && shouldUseFunctionLiteralType((FunctionType)value.getJSType(),info,name)) {
    type=value.getJSType();
  }
  if (type == null) {
    if (info == null) {
      CompilerInput input=compiler.getInput(sourceName);
      Preconditions.checkNotNull(input,sourceName);
      type=input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;
    }
 else     if (info.hasEnumParameterType()) {
      if (value != null && value.getType() == Token.OBJECTLIT) {
        type=value.getJSType();
      }
 else {
        type=createEnumTypeFromNodes(value,name.getString(),info,name);
      }
    }
 else     if (info.isConstructor()) {
      type=createFunctionTypeFromNodes(value,name.getString(),info,name);
    }
 else {
      type=getDeclaredTypeInAnnotation(sourceName,name,info);
    }
  }
  defineSlot(name,var,type);
}","/** 
 * Defines a variable based on the   {@link Token#NAME} node passed.
 * @param name The {@link Token#NAME} node.
 * @param var The parent of the {@code name} node, which must be a{@link Token#VAR} node.
 * @param parent {@code var}'s parent.
 * @param info the {@link JSDocInfo} information relating to this{@code name} node.
 */
private void defineName(Node name,Node var,Node parent,JSDocInfo info){
  Node value=name.getFirstChild();
  JSType type=getDeclaredType(sourceName,info,name,value);
  if (type == null) {
    CompilerInput input=compiler.getInput(sourceName);
    Preconditions.checkNotNull(input,sourceName);
    type=input.isExtern() ? getNativeType(UNKNOWN_TYPE) : null;
  }
  defineSlot(name,var,type);
}",0.5326192794547225
28169,"/** 
 * Process an object literal and all the types on it.
 * @param objLit The OBJECTLIT node.
 * @param objLitType The type of the OBJECTLIT node. This might be a namedtype, because of the lends annotation.
 */
void processObjectLitProperties(NodeTraversal t,Node objLit,ObjectType objLitType){
  for (Node keyNode=objLit.getFirstChild(); keyNode != null; keyNode=keyNode.getNext()) {
    Node value=keyNode.getFirstChild();
    String memberName=NodeUtil.getObjectLitKeyName(keyNode);
    JSDocInfo info=keyNode.getJSDocInfo();
    JSType valueType=getDeclaredPropType(t,info,keyNode,value);
    JSType keyType=NodeUtil.getObjectLitKeyTypeFromValueType(keyNode,valueType);
    if (keyType != null) {
      String qualifiedName=getBestLValueName(keyNode);
      if (qualifiedName != null) {
        defineSlot(keyNode,objLit,qualifiedName,keyType,false);
      }
 else {
        setDeferredType(keyNode,keyType);
      }
      if (objLitType != null) {
        boolean isExtern=t.getInput() != null && t.getInput().isExtern();
        objLitType.defineDeclaredProperty(memberName,keyType,isExtern,keyNode);
      }
    }
  }
}","/** 
 * Process an object literal and all the types on it.
 * @param objLit The OBJECTLIT node.
 * @param objLitType The type of the OBJECTLIT node. This might be a namedtype, because of the lends annotation.
 */
void processObjectLitProperties(NodeTraversal t,Node objLit,ObjectType objLitType){
  for (Node keyNode=objLit.getFirstChild(); keyNode != null; keyNode=keyNode.getNext()) {
    Node value=keyNode.getFirstChild();
    String memberName=NodeUtil.getObjectLitKeyName(keyNode);
    JSDocInfo info=keyNode.getJSDocInfo();
    JSType valueType=getDeclaredType(t.getSourceName(),info,keyNode,value);
    JSType keyType=NodeUtil.getObjectLitKeyTypeFromValueType(keyNode,valueType);
    if (keyType != null) {
      String qualifiedName=getBestLValueName(keyNode);
      if (qualifiedName != null) {
        defineSlot(keyNode,objLit,qualifiedName,keyType,false);
      }
 else {
        setDeferredType(keyNode,keyType);
      }
      if (objLitType != null) {
        boolean isExtern=t.getInput() != null && t.getInput().isExtern();
        objLitType.defineDeclaredProperty(memberName,keyType,isExtern,keyNode);
      }
    }
  }
}",0.9858906525573192
28170,"public void testConstructorAlias10() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}","public void testConstructorAlias10() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9559164733178654
28171,"public void testConstructorAlias9() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}","public void testConstructorAlias9() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9593147751605996
28172,"public void testConstructorAlias8() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}","public void testConstructorAlias8() throws Exception {
  testTypes(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9218106995884774
28173,"public void testStubFunctionDeclaration8() throws Exception {
  testFunctionType(""String_Node_Str"",""String_Node_Str"",createNullableType(U2U_CONSTRUCTOR_TYPE).restrictByNotNullOrUndefined().toString());
}","public void testStubFunctionDeclaration8() throws Exception {
  testFunctionType(""String_Node_Str"",""String_Node_Str"",createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE)).toString());
}",0.8759493670886076
28174,"public void testStubFunctionDeclaration8() throws Exception {
  testFunctionType(""String_Node_Str"",""String_Node_Str"",createNullableType(U2U_CONSTRUCTOR_TYPE).restrictByNotNullOrUndefined().toString());
}","public void testStubFunctionDeclaration8() throws Exception {
  testFunctionType(""String_Node_Str"",""String_Node_Str"",createNullableType(U2U_CONSTRUCTOR_TYPE).toString());
}",0.9173333333333332
28175,"/** 
 * Try to minimize conditions expressions, as there are additional assumptions that can be made when it is known that the final result is a boolean. The following transformations are done recursively: !(x||y) --> !x&&!y !(x&&y) --> !x||!y !!x     --> x Thus: !(x&&!y) --> !x||!!y --> !x||y Returns the replacement for n, or the original if no change was made
 */
private Node tryMinimizeCondition(Node n){
  Node parent=n.getParent();
switch (n.getType()) {
case Token.NOT:
    Node first=n.getFirstChild();
switch (first.getType()) {
case Token.NOT:
{
      Node newRoot=first.removeFirstChild();
      parent.replaceChild(n,newRoot);
      reportCodeChange();
      return newRoot;
    }
case Token.AND:
case Token.OR:
{
    Node leftParent=first.getFirstChild();
    Node rightParent=first.getLastChild();
    if (leftParent.getType() == Token.NOT && rightParent.getType() == Token.NOT) {
      Node left=leftParent.removeFirstChild();
      Node right=rightParent.removeFirstChild();
      int newOp=(first.getType() == Token.AND) ? Token.OR : Token.AND;
      Node newRoot=new Node(newOp,left,right);
      parent.replaceChild(n,newRoot);
      reportCodeChange();
      return newRoot;
    }
  }
break;
default :
TernaryValue nVal=NodeUtil.getBooleanValue(first);
if (nVal != TernaryValue.UNKNOWN) {
boolean result=nVal.not().toBoolean(true);
int equivalentResult=result ? 1 : 0;
return maybeReplaceChildWithNumber(n,parent,equivalentResult);
}
}
return n;
case Token.OR:
case Token.AND:
{
Node left=n.getFirstChild();
Node right=n.getLastChild();
left=tryMinimizeCondition(left);
right=tryMinimizeCondition(right);
TernaryValue rightVal=NodeUtil.getBooleanValue(right);
if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {
int type=n.getType();
Node replacement=null;
boolean rval=rightVal.toBoolean(true);
if (type == Token.OR && !rval || type == Token.AND && rval) {
replacement=left;
}
 else if (!mayHaveSideEffects(left)) {
replacement=right;
}
if (replacement != null) {
n.detachChildren();
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
}
return n;
}
case Token.HOOK:
{
Node condition=n.getFirstChild();
Node trueNode=n.getFirstChild().getNext();
Node falseNode=n.getLastChild();
trueNode=tryMinimizeCondition(trueNode);
falseNode=tryMinimizeCondition(falseNode);
Node replacement=null;
if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE && NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {
condition.detachFromParent();
replacement=condition;
}
 else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE && NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE) {
condition.detachFromParent();
replacement=new Node(Token.NOT,condition);
}
 else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE) {
n.detachChildren();
replacement=new Node(Token.OR,condition,falseNode);
}
 else if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {
n.detachChildren();
replacement=new Node(Token.AND,condition,trueNode);
}
if (replacement != null) {
parent.replaceChild(n,replacement);
n=replacement;
reportCodeChange();
}
return n;
}
default :
TernaryValue nVal=NodeUtil.getBooleanValue(n);
if (nVal != TernaryValue.UNKNOWN) {
boolean result=nVal.toBoolean(true);
int equivalentResult=result ? 1 : 0;
return maybeReplaceChildWithNumber(n,parent,equivalentResult);
}
return n;
}
}","/** 
 * Try to minimize conditions expressions, as there are additional assumptions that can be made when it is known that the final result is a boolean. The following transformations are done recursively: !(x||y) --> !x&&!y !(x&&y) --> !x||!y !!x     --> x Thus: !(x&&!y) --> !x||!!y --> !x||y Returns the replacement for n, or the original if no change was made
 */
private Node tryMinimizeCondition(Node n){
  Node parent=n.getParent();
switch (n.getType()) {
case Token.NOT:
    Node first=n.getFirstChild();
switch (first.getType()) {
case Token.NOT:
{
      Node newRoot=first.removeFirstChild();
      parent.replaceChild(n,newRoot);
      reportCodeChange();
      return newRoot;
    }
case Token.AND:
case Token.OR:
{
    Node leftParent=first.getFirstChild();
    Node rightParent=first.getLastChild();
    Node left, right;
    if (leftParent.getType() != Token.NOT && rightParent.getType() != Token.NOT) {
      int op_precedence=NodeUtil.precedence(first.getType());
      if ((isLowerPrecedence(leftParent,NOT_PRECEDENCE) && isHigherPrecedence(leftParent,op_precedence)) || (isLowerPrecedence(rightParent,NOT_PRECEDENCE) && isHigherPrecedence(rightParent,op_precedence))) {
        return n;
      }
    }
    if (leftParent.getType() == Token.NOT) {
      left=leftParent.removeFirstChild();
    }
 else {
      leftParent.detachFromParent();
      left=new Node(Token.NOT,leftParent).copyInformationFrom(leftParent);
    }
    if (rightParent.getType() == Token.NOT) {
      right=rightParent.removeFirstChild();
    }
 else {
      rightParent.detachFromParent();
      right=new Node(Token.NOT,rightParent).copyInformationFrom(rightParent);
    }
    int newOp=(first.getType() == Token.AND) ? Token.OR : Token.AND;
    Node newRoot=new Node(newOp,left,right);
    parent.replaceChild(n,newRoot);
    reportCodeChange();
    return newRoot;
  }
default :
TernaryValue nVal=NodeUtil.getBooleanValue(first);
if (nVal != TernaryValue.UNKNOWN) {
boolean result=nVal.not().toBoolean(true);
int equivalentResult=result ? 1 : 0;
return maybeReplaceChildWithNumber(n,parent,equivalentResult);
}
}
return n;
case Token.OR:
case Token.AND:
{
Node left=n.getFirstChild();
Node right=n.getLastChild();
left=tryMinimizeCondition(left);
right=tryMinimizeCondition(right);
TernaryValue rightVal=NodeUtil.getBooleanValue(right);
if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {
int type=n.getType();
Node replacement=null;
boolean rval=rightVal.toBoolean(true);
if (type == Token.OR && !rval || type == Token.AND && rval) {
replacement=left;
}
 else if (!mayHaveSideEffects(left)) {
replacement=right;
}
if (replacement != null) {
n.detachChildren();
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
}
return n;
}
case Token.HOOK:
{
Node condition=n.getFirstChild();
Node trueNode=n.getFirstChild().getNext();
Node falseNode=n.getLastChild();
trueNode=tryMinimizeCondition(trueNode);
falseNode=tryMinimizeCondition(falseNode);
Node replacement=null;
if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE && NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {
condition.detachFromParent();
replacement=condition;
}
 else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE && NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE) {
condition.detachFromParent();
replacement=new Node(Token.NOT,condition);
}
 else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE) {
n.detachChildren();
replacement=new Node(Token.OR,condition,falseNode);
}
 else if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {
n.detachChildren();
replacement=new Node(Token.AND,condition,trueNode);
}
if (replacement != null) {
parent.replaceChild(n,replacement);
n=replacement;
reportCodeChange();
}
return n;
}
default :
TernaryValue nVal=NodeUtil.getBooleanValue(n);
if (nVal != TernaryValue.UNKNOWN) {
boolean result=nVal.toBoolean(true);
int equivalentResult=result ? 1 : 0;
return maybeReplaceChildWithNumber(n,parent,equivalentResult);
}
return n;
}
}",0.8975675675675676
28176,"public void testMinimizeWhileCondition(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
}","public void testMinimizeWhileCondition(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
}",0.6550777676120768
28177,"@Override public void visit(NodeTraversal t,Node n,Node parent){
  if (n.getType() != Token.NAME) {
    return;
  }
  String name=n.getString();
  if (name.length() == 0) {
    return;
  }
  Scope.Var var=t.getScope().getVar(name);
  boolean local=(var != null) && var.isLocal();
  if (!local && localRenamingOnly) {
    reservedNames.add(name);
    return;
  }
  if (preserveFunctionExpressionNames && var != null && NodeUtil.isFunctionExpression(var.getParentNode())) {
    reservedNames.add(name);
    return;
  }
  if (!okToRenameVar(name,local)) {
    if (local) {
      String newName=MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);
      if (!newName.equals(name)) {
        n.setString(newName);
      }
    }
    return;
  }
  if (isExternsPass_) {
    if (!local) {
      externNames.add(name);
    }
    return;
  }
  if (pseudoNameMap != null) {
    recordPseudoName(n);
  }
  if (local) {
    String tempName=LOCAL_VAR_PREFIX + var.getLocalVarIndex();
    incCount(tempName,null);
    localNameNodes.add(n);
    n.setString(tempName);
  }
 else   if (var != null) {
    incCount(name,var.input);
    globalNameNodes.add(n);
  }
}","@Override public void visit(NodeTraversal t,Node n,Node parent){
  if (n.getType() != Token.NAME) {
    return;
  }
  String name=n.getString();
  if (name.length() == 0) {
    return;
  }
  Scope.Var var=t.getScope().getVar(name);
  boolean local=(var != null) && var.isLocal() && (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());
  if (!local && localRenamingOnly) {
    reservedNames.add(name);
    return;
  }
  if (preserveFunctionExpressionNames && var != null && NodeUtil.isFunctionExpression(var.getParentNode())) {
    reservedNames.add(name);
    return;
  }
  if (!okToRenameVar(name,local)) {
    if (local) {
      String newName=MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);
      if (!newName.equals(name)) {
        n.setString(newName);
      }
    }
    return;
  }
  if (isExternsPass_) {
    if (!local) {
      externNames.add(name);
    }
    return;
  }
  if (pseudoNameMap != null) {
    recordPseudoName(n);
  }
  if (local) {
    String tempName=LOCAL_VAR_PREFIX + var.getLocalVarIndex();
    incCount(tempName,null);
    localNameNodes.add(n);
    n.setString(tempName);
  }
 else   if (var != null) {
    incCount(name,var.input);
    globalNameNodes.add(n);
  }
}",0.9716430358632192
28178,"private void initConfigFromFlags(String[] args,PrintStream err){
  Pattern argPattern=Pattern.compile(""String_Node_Str"");
  Pattern quotesPattern=Pattern.compile(""String_Node_Str"");
  List<String> processedArgs=Lists.newArrayList();
  for (  String arg : args) {
    Matcher matcher=argPattern.matcher(arg);
    if (matcher.matches()) {
      processedArgs.add(matcher.group(1));
      String value=matcher.group(2);
      Matcher quotesMatcher=quotesPattern.matcher(value);
      if (quotesMatcher.matches()) {
        processedArgs.add(quotesMatcher.group(1));
      }
 else {
        processedArgs.add(value);
      }
    }
 else {
      processedArgs.add(arg);
    }
  }
  CmdLineParser parser=new CmdLineParser(flags);
  isConfigValid=true;
  try {
    parser.parseArgument(processedArgs.toArray(new String[]{}));
  }
 catch (  CmdLineException e) {
    err.println(e.getMessage());
    isConfigValid=false;
  }
  if (flags.version) {
    ResourceBundle config=ResourceBundle.getBundle(configResource);
    err.println(""String_Node_Str"" + ""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ config.getString(""String_Node_Str""));
    err.flush();
  }
  if (!isConfigValid || flags.display_help) {
    isConfigValid=false;
    parser.printUsage(err);
  }
 else {
    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
  }
}","private void initConfigFromFlags(String[] args,PrintStream err){
  List<String> processedArgs=processArgs(args);
  CmdLineParser parser=new CmdLineParser(flags);
  isConfigValid=true;
  try {
    parser.parseArgument(processedArgs.toArray(new String[]{}));
    if (!flags.flag_file.equals(""String_Node_Str"")) {
      processFlagFile(err);
    }
  }
 catch (  CmdLineException e) {
    err.println(e.getMessage());
    isConfigValid=false;
  }
catch (  IOException ioErr) {
    err.println(""String_Node_Str"" + flags.flag_file + ""String_Node_Str"");
    isConfigValid=false;
  }
  if (flags.version) {
    ResourceBundle config=ResourceBundle.getBundle(configResource);
    err.println(""String_Node_Str"" + ""String_Node_Str"" + config.getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ config.getString(""String_Node_Str""));
    err.flush();
  }
  if (!isConfigValid || flags.display_help) {
    isConfigValid=false;
    parser.printUsage(err);
  }
 else {
    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest);
  }
}",0.8251663641863279
28179,"TernaryValue testForEqualityHelper(JSType aType,JSType bType){
  if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType()) {
    return UNKNOWN;
  }
  if (aType.isFunctionType() || bType.isFunctionType()) {
    JSType otherType=aType.isFunctionType() ? bType : aType;
    if (otherType.isSubtype(getNativeType(JSTypeNative.OBJECT_TYPE))) {
      return TernaryValue.UNKNOWN;
    }
 else {
      return TernaryValue.FALSE;
    }
  }
  if (bType.isEnumElementType() || bType.isUnionType()) {
    return bType.testForEquality(aType);
  }
  return null;
}","TernaryValue testForEqualityHelper(JSType aType,JSType bType){
  if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType()|| aType.isAllType()|| aType.isEmptyType()|| aType.isUnknownType()) {
    return UNKNOWN;
  }
  if (aType.isFunctionType() || bType.isFunctionType()) {
    JSType otherType=aType.isFunctionType() ? bType : aType;
    if (!otherType.getGreatestSubtype(getNativeType(JSTypeNative.OBJECT_TYPE)).isEmptyType()) {
      return TernaryValue.UNKNOWN;
    }
 else {
      return TernaryValue.FALSE;
    }
  }
  if (bType.isEnumElementType() || bType.isUnionType()) {
    return bType.testForEquality(aType);
  }
  return null;
}",0.922824302134647
28180,"/** 
 * Tests the   {@link JSType#testForEquality(JSType)} method.
 */
public void testTestForEquality(){
  compare(TRUE,NO_OBJECT_TYPE,NO_OBJECT_TYPE);
  compare(UNKNOWN,ALL_TYPE,ALL_TYPE);
  compare(TRUE,NO_TYPE,NO_TYPE);
  compare(UNKNOWN,NO_OBJECT_TYPE,NUMBER_TYPE);
  compare(UNKNOWN,ALL_TYPE,NUMBER_TYPE);
  compare(UNKNOWN,NO_TYPE,NUMBER_TYPE);
  compare(FALSE,NULL_TYPE,BOOLEAN_TYPE);
  compare(TRUE,NULL_TYPE,NULL_TYPE);
  compare(FALSE,NULL_TYPE,NUMBER_TYPE);
  compare(FALSE,NULL_TYPE,OBJECT_TYPE);
  compare(FALSE,NULL_TYPE,STRING_TYPE);
  compare(TRUE,NULL_TYPE,VOID_TYPE);
  compare(UNKNOWN,NULL_TYPE,createUnionType(UNKNOWN_TYPE,VOID_TYPE));
  compare(UNKNOWN,NULL_TYPE,createUnionType(OBJECT_TYPE,VOID_TYPE));
  compare(UNKNOWN,NULL_TYPE,unresolvedNamedType);
  compare(UNKNOWN,NULL_TYPE,createUnionType(unresolvedNamedType,DATE_TYPE));
  compare(FALSE,VOID_TYPE,REGEXP_TYPE);
  compare(TRUE,VOID_TYPE,VOID_TYPE);
  compare(UNKNOWN,VOID_TYPE,createUnionType(REGEXP_TYPE,VOID_TYPE));
  compare(UNKNOWN,NUMBER_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,NUMBER_TYPE,NUMBER_TYPE);
  compare(UNKNOWN,NUMBER_TYPE,OBJECT_TYPE);
  compare(UNKNOWN,ARRAY_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,OBJECT_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,OBJECT_TYPE,STRING_TYPE);
  compare(UNKNOWN,STRING_TYPE,STRING_TYPE);
  compare(UNKNOWN,STRING_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,STRING_TYPE,NUMBER_TYPE);
  compare(FALSE,STRING_TYPE,VOID_TYPE);
  compare(FALSE,STRING_TYPE,NULL_TYPE);
  compare(FALSE,STRING_TYPE,createUnionType(NULL_TYPE,VOID_TYPE));
  compare(UNKNOWN,UNKNOWN_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,UNKNOWN_TYPE,NULL_TYPE);
  compare(UNKNOWN,UNKNOWN_TYPE,VOID_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,BOOLEAN_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,NUMBER_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,STRING_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,VOID_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,NULL_TYPE);
  compare(UNKNOWN,U2U_CONSTRUCTOR_TYPE,OBJECT_TYPE);
  compare(UNKNOWN,U2U_CONSTRUCTOR_TYPE,ALL_TYPE);
}","/** 
 * Tests the   {@link JSType#testForEquality(JSType)} method.
 */
public void testTestForEquality(){
  compare(TRUE,NO_OBJECT_TYPE,NO_OBJECT_TYPE);
  compare(UNKNOWN,ALL_TYPE,ALL_TYPE);
  compare(TRUE,NO_TYPE,NO_TYPE);
  compare(UNKNOWN,NO_OBJECT_TYPE,NUMBER_TYPE);
  compare(UNKNOWN,ALL_TYPE,NUMBER_TYPE);
  compare(UNKNOWN,NO_TYPE,NUMBER_TYPE);
  compare(FALSE,NULL_TYPE,BOOLEAN_TYPE);
  compare(TRUE,NULL_TYPE,NULL_TYPE);
  compare(FALSE,NULL_TYPE,NUMBER_TYPE);
  compare(FALSE,NULL_TYPE,OBJECT_TYPE);
  compare(FALSE,NULL_TYPE,STRING_TYPE);
  compare(TRUE,NULL_TYPE,VOID_TYPE);
  compare(UNKNOWN,NULL_TYPE,createUnionType(UNKNOWN_TYPE,VOID_TYPE));
  compare(UNKNOWN,NULL_TYPE,createUnionType(OBJECT_TYPE,VOID_TYPE));
  compare(UNKNOWN,NULL_TYPE,unresolvedNamedType);
  compare(UNKNOWN,NULL_TYPE,createUnionType(unresolvedNamedType,DATE_TYPE));
  compare(FALSE,VOID_TYPE,REGEXP_TYPE);
  compare(TRUE,VOID_TYPE,VOID_TYPE);
  compare(UNKNOWN,VOID_TYPE,createUnionType(REGEXP_TYPE,VOID_TYPE));
  compare(UNKNOWN,NUMBER_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,NUMBER_TYPE,NUMBER_TYPE);
  compare(UNKNOWN,NUMBER_TYPE,OBJECT_TYPE);
  compare(UNKNOWN,ARRAY_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,OBJECT_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,OBJECT_TYPE,STRING_TYPE);
  compare(UNKNOWN,STRING_TYPE,STRING_TYPE);
  compare(UNKNOWN,STRING_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,STRING_TYPE,NUMBER_TYPE);
  compare(FALSE,STRING_TYPE,VOID_TYPE);
  compare(FALSE,STRING_TYPE,NULL_TYPE);
  compare(FALSE,STRING_TYPE,createUnionType(NULL_TYPE,VOID_TYPE));
  compare(UNKNOWN,UNKNOWN_TYPE,BOOLEAN_TYPE);
  compare(UNKNOWN,UNKNOWN_TYPE,NULL_TYPE);
  compare(UNKNOWN,UNKNOWN_TYPE,VOID_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,BOOLEAN_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,NUMBER_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,STRING_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,VOID_TYPE);
  compare(FALSE,U2U_CONSTRUCTOR_TYPE,NULL_TYPE);
  compare(UNKNOWN,U2U_CONSTRUCTOR_TYPE,OBJECT_TYPE);
  compare(UNKNOWN,U2U_CONSTRUCTOR_TYPE,ALL_TYPE);
  compare(UNKNOWN,NULL_TYPE,subclassOfUnresolvedNamedType);
  JSType functionAndNull=createUnionType(NULL_TYPE,dateMethod);
  compare(UNKNOWN,functionAndNull,dateMethod);
}",0.9596412556053812
28181,"@Override public int parseArguments(Parameters params) throws CmdLineException {
  String param=params.getParameter(0);
  if (param == null) {
    setter.addValue(true);
    return 0;
  }
 else {
    String lowerParam=param.toLowerCase();
    if (TRUES.contains(lowerParam)) {
      setter.addValue(true);
    }
 else     if (FALSES.contains(lowerParam)) {
      setter.addValue(false);
    }
 else {
      setter.addValue(true);
      return 0;
    }
    return 1;
  }
}","@Override public int parseArguments(Parameters params) throws CmdLineException {
  String param=null;
  try {
    param=params.getParameter(0);
  }
 catch (  CmdLineException e) {
  }
  if (param == null) {
    setter.addValue(true);
    return 0;
  }
 else {
    String lowerParam=param.toLowerCase();
    if (TRUES.contains(lowerParam)) {
      setter.addValue(true);
    }
 else     if (FALSES.contains(lowerParam)) {
      setter.addValue(false);
    }
 else {
      setter.addValue(true);
      return 0;
    }
    return 1;
  }
}",0.9363817097415508
28182,"@Override public void setUp() throws Exception {
  super.setUp();
  externs=DEFAULT_EXTERNS;
  lastCompiler=null;
  outReader=new ByteArrayOutputStream();
  errReader=new ByteArrayOutputStream();
  useStringComparison=false;
  useModules=ModulePattern.NONE;
  args.clear();
  exitCodes=Lists.newArrayList();
}","@Override public void setUp() throws Exception {
  super.setUp();
  externs=DEFAULT_EXTERNS;
  lastCompiler=null;
  lastArg=null;
  outReader=new ByteArrayOutputStream();
  errReader=new ByteArrayOutputStream();
  useStringComparison=false;
  useModules=ModulePattern.NONE;
  args.clear();
  exitCodes=Lists.newArrayList();
}",0.9747634069400632
28183,"private CommandLineRunner createCommandLineRunner(String[] original){
  for (int i=0; i < original.length; i++) {
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"" + i + ""String_Node_Str"");
    if (useModules == ModulePattern.CHAIN) {
      args.add(""String_Node_Str"");
      args.add(""String_Node_Str"" + i + ""String_Node_Str""+ (i > 0 ? (""String_Node_Str"" + (i - 1)) : ""String_Node_Str""));
    }
 else     if (useModules == ModulePattern.STAR) {
      args.add(""String_Node_Str"");
      args.add(""String_Node_Str"" + i + ""String_Node_Str""+ (i > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
  String[] argStrings=args.toArray(new String[]{});
  return new CommandLineRunner(argStrings,new PrintStream(outReader),new PrintStream(errReader));
}","private CommandLineRunner createCommandLineRunner(String[] original){
  for (int i=0; i < original.length; i++) {
    args.add(""String_Node_Str"");
    args.add(""String_Node_Str"" + i + ""String_Node_Str"");
    if (useModules == ModulePattern.CHAIN) {
      args.add(""String_Node_Str"");
      args.add(""String_Node_Str"" + i + ""String_Node_Str""+ (i > 0 ? (""String_Node_Str"" + (i - 1)) : ""String_Node_Str""));
    }
 else     if (useModules == ModulePattern.STAR) {
      args.add(""String_Node_Str"");
      args.add(""String_Node_Str"" + i + ""String_Node_Str""+ (i > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
  if (lastArg != null) {
    args.add(lastArg);
  }
  String[] argStrings=args.toArray(new String[]{});
  return new CommandLineRunner(argStrings,new PrintStream(outReader),new PrintStream(errReader));
}",0.9670886075949368
28184,"/** 
 * @return The expression node.
 */
private Node getBlockExpression(Node n){
  Preconditions.checkState(isExpressBlock(n));
  return n.getFirstChild();
}","/** 
 * @return The expression node.
 */
private Node getBlockExpression(Node n){
  Preconditions.checkState(isFoldableExpressBlock(n));
  return n.getFirstChild();
}",0.9753086419753086
28185,"/** 
 * Try turning IF nodes into smaller HOOKs Returns the replacement for n or the original if no replacement was necessary.
 */
private Node tryMinimizeIf(Node n){
  Node parent=n.getParent();
  Node cond=n.getFirstChild();
  if (NodeUtil.isLiteralValue(cond,true)) {
    return n;
  }
  Node thenBranch=cond.getNext();
  Node elseBranch=thenBranch.getNext();
  if (elseBranch == null) {
    if (isExpressBlock(thenBranch)) {
      Node expr=getBlockExpression(thenBranch);
      if (isPropertyAssignmentInExpression(expr)) {
        return n;
      }
      if (cond.getType() == Token.NOT) {
        if (isLowerPrecedenceInExpression(cond,OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(),OR_PRECEDENCE)) {
          return n;
        }
        Node or=new Node(Token.OR,cond.removeFirstChild(),expr.removeFirstChild()).copyInformationFrom(n);
        Node newExpr=NodeUtil.newExpr(or);
        parent.replaceChild(n,newExpr);
        reportCodeChange();
        return newExpr;
      }
      if (isLowerPrecedenceInExpression(cond,AND_PRECEDENCE) || isLowerPrecedenceInExpression(expr.getFirstChild(),AND_PRECEDENCE)) {
        return n;
      }
      n.removeChild(cond);
      Node and=new Node(Token.AND,cond,expr.removeFirstChild()).copyInformationFrom(n);
      Node newExpr=NodeUtil.newExpr(and);
      parent.replaceChild(n,newExpr);
      reportCodeChange();
      return newExpr;
    }
    return n;
  }
  tryRemoveRepeatedStatements(n);
  if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch)) {
    n.replaceChild(cond,cond.removeFirstChild());
    n.removeChild(thenBranch);
    n.addChildToBack(thenBranch);
    reportCodeChange();
    return n;
  }
  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
    Node thenExpr=getBlockReturnExpression(thenBranch);
    Node elseExpr=getBlockReturnExpression(elseBranch);
    n.removeChild(cond);
    thenExpr.detachFromParent();
    elseExpr.detachFromParent();
    Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
    Node returnNode=new Node(Token.RETURN,hookNode);
    parent.replaceChild(n,returnNode);
    reportCodeChange();
    return returnNode;
  }
  boolean thenBranchIsExpressionBlock=isExpressBlock(thenBranch);
  boolean elseBranchIsExpressionBlock=isExpressBlock(elseBranch);
  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
    Node thenOp=getBlockExpression(thenBranch).getFirstChild();
    Node elseOp=getBlockExpression(elseBranch).getFirstChild();
    if (thenOp.getType() == elseOp.getType()) {
      if (NodeUtil.isAssignmentOp(thenOp)) {
        Node lhs=thenOp.getFirstChild();
        if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {
          n.removeChild(cond);
          Node assignName=thenOp.removeFirstChild();
          Node thenExpr=thenOp.removeFirstChild();
          Node elseExpr=elseOp.getLastChild();
          elseOp.removeChild(elseExpr);
          Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
          Node assign=new Node(thenOp.getType(),assignName,hookNode).copyInformationFrom(thenOp);
          Node expr=NodeUtil.newExpr(assign);
          parent.replaceChild(n,expr);
          reportCodeChange();
          return expr;
        }
      }
 else       if (NodeUtil.isCall(thenOp)) {
        n.removeChild(cond);
        thenOp.detachFromParent();
        elseOp.detachFromParent();
        Node hookNode=new Node(Token.HOOK,cond,thenOp,elseOp).copyInformationFrom(n);
        Node expr=NodeUtil.newExpr(hookNode);
        parent.replaceChild(n,expr);
        reportCodeChange();
        return expr;
      }
    }
    return n;
  }
  boolean thenBranchIsVar=isVarBlock(thenBranch);
  boolean elseBranchIsVar=isVarBlock(elseBranch);
  if (thenBranchIsVar && elseBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild())) {
    Node var=getBlockVar(thenBranch);
    Node elseAssign=getBlockExpression(elseBranch).getFirstChild();
    Node name1=var.getFirstChild();
    Node maybeName2=elseAssign.getFirstChild();
    if (name1.hasChildren() && maybeName2.getType() == Token.NAME && name1.getString().equals(maybeName2.getString())) {
      Node thenExpr=name1.removeChildren();
      Node elseExpr=elseAssign.getLastChild().detachFromParent();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name1.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
 else   if (elseBranchIsVar && thenBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild())) {
    Node var=getBlockVar(elseBranch);
    Node thenAssign=getBlockExpression(thenBranch).getFirstChild();
    Node maybeName1=thenAssign.getFirstChild();
    Node name2=var.getFirstChild();
    if (name2.hasChildren() && maybeName1.getType() == Token.NAME && maybeName1.getString().equals(name2.getString())) {
      Node thenExpr=thenAssign.getLastChild().detachFromParent();
      Node elseExpr=name2.removeChildren();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name2.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
  return n;
}","/** 
 * Try turning IF nodes into smaller HOOKs Returns the replacement for n or the original if no replacement was necessary.
 */
private Node tryMinimizeIf(Node n){
  Node parent=n.getParent();
  Node cond=n.getFirstChild();
  if (NodeUtil.isLiteralValue(cond,true)) {
    return n;
  }
  Node thenBranch=cond.getNext();
  Node elseBranch=thenBranch.getNext();
  if (elseBranch == null) {
    if (isFoldableExpressBlock(thenBranch)) {
      Node expr=getBlockExpression(thenBranch);
      if (isPropertyAssignmentInExpression(expr)) {
        return n;
      }
      if (cond.getType() == Token.NOT) {
        if (isLowerPrecedenceInExpression(cond,OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(),OR_PRECEDENCE)) {
          return n;
        }
        Node or=new Node(Token.OR,cond.removeFirstChild(),expr.removeFirstChild()).copyInformationFrom(n);
        Node newExpr=NodeUtil.newExpr(or);
        parent.replaceChild(n,newExpr);
        reportCodeChange();
        return newExpr;
      }
      if (isLowerPrecedenceInExpression(cond,AND_PRECEDENCE) || isLowerPrecedenceInExpression(expr.getFirstChild(),AND_PRECEDENCE)) {
        return n;
      }
      n.removeChild(cond);
      Node and=new Node(Token.AND,cond,expr.removeFirstChild()).copyInformationFrom(n);
      Node newExpr=NodeUtil.newExpr(and);
      parent.replaceChild(n,newExpr);
      reportCodeChange();
      return newExpr;
    }
    return n;
  }
  tryRemoveRepeatedStatements(n);
  if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch)) {
    n.replaceChild(cond,cond.removeFirstChild());
    n.removeChild(thenBranch);
    n.addChildToBack(thenBranch);
    reportCodeChange();
    return n;
  }
  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
    Node thenExpr=getBlockReturnExpression(thenBranch);
    Node elseExpr=getBlockReturnExpression(elseBranch);
    n.removeChild(cond);
    thenExpr.detachFromParent();
    elseExpr.detachFromParent();
    Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
    Node returnNode=new Node(Token.RETURN,hookNode);
    parent.replaceChild(n,returnNode);
    reportCodeChange();
    return returnNode;
  }
  boolean thenBranchIsExpressionBlock=isFoldableExpressBlock(thenBranch);
  boolean elseBranchIsExpressionBlock=isFoldableExpressBlock(elseBranch);
  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
    Node thenOp=getBlockExpression(thenBranch).getFirstChild();
    Node elseOp=getBlockExpression(elseBranch).getFirstChild();
    if (thenOp.getType() == elseOp.getType()) {
      if (NodeUtil.isAssignmentOp(thenOp)) {
        Node lhs=thenOp.getFirstChild();
        if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {
          n.removeChild(cond);
          Node assignName=thenOp.removeFirstChild();
          Node thenExpr=thenOp.removeFirstChild();
          Node elseExpr=elseOp.getLastChild();
          elseOp.removeChild(elseExpr);
          Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
          Node assign=new Node(thenOp.getType(),assignName,hookNode).copyInformationFrom(thenOp);
          Node expr=NodeUtil.newExpr(assign);
          parent.replaceChild(n,expr);
          reportCodeChange();
          return expr;
        }
      }
 else       if (NodeUtil.isCall(thenOp)) {
        n.removeChild(cond);
        thenOp.detachFromParent();
        elseOp.detachFromParent();
        Node hookNode=new Node(Token.HOOK,cond,thenOp,elseOp).copyInformationFrom(n);
        Node expr=NodeUtil.newExpr(hookNode);
        parent.replaceChild(n,expr);
        reportCodeChange();
        return expr;
      }
    }
    return n;
  }
  boolean thenBranchIsVar=isVarBlock(thenBranch);
  boolean elseBranchIsVar=isVarBlock(elseBranch);
  if (thenBranchIsVar && elseBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild())) {
    Node var=getBlockVar(thenBranch);
    Node elseAssign=getBlockExpression(elseBranch).getFirstChild();
    Node name1=var.getFirstChild();
    Node maybeName2=elseAssign.getFirstChild();
    if (name1.hasChildren() && maybeName2.getType() == Token.NAME && name1.getString().equals(maybeName2.getString())) {
      Node thenExpr=name1.removeChildren();
      Node elseExpr=elseAssign.getLastChild().detachFromParent();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name1.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
 else   if (elseBranchIsVar && thenBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild())) {
    Node var=getBlockVar(elseBranch);
    Node thenAssign=getBlockExpression(thenBranch).getFirstChild();
    Node maybeName1=thenAssign.getFirstChild();
    Node name2=var.getFirstChild();
    if (name2.hasChildren() && maybeName1.getType() == Token.NAME && maybeName1.getString().equals(name2.getString())) {
      Node thenExpr=thenAssign.getLastChild().detachFromParent();
      Node elseExpr=name2.removeChildren();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name2.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
  return n;
}",0.997822931785196
28186,"/** 
 * Determines whether two slots are meaningfully different for the purposes of data flow analysis.
 */
private boolean diffSlots(StaticSlot<JSType> slotA,StaticSlot<JSType> slotB){
  boolean aIsNull=slotA == null || slotA.getType() == null;
  boolean bIsNull=slotB == null || slotB.getType() == null;
  if (aIsNull && bIsNull) {
    return false;
  }
 else   if (aIsNull ^ bIsNull) {
    return true;
  }
  JSType aType=slotA.getType();
  JSType bType=slotB.getType();
  if (aType.isNoType() || bType.isNoType()) {
    return false;
  }
  return aType.differsFrom(bType);
}","/** 
 * Determines whether two slots are meaningfully different for the purposes of data flow analysis.
 */
private boolean diffSlots(StaticSlot<JSType> slotA,StaticSlot<JSType> slotB){
  boolean aIsNull=slotA == null || slotA.getType() == null;
  boolean bIsNull=slotB == null || slotB.getType() == null;
  if (aIsNull && bIsNull) {
    return false;
  }
 else   if (aIsNull ^ bIsNull) {
    return true;
  }
  return slotA.getType().differsFrom(slotB.getType());
}",0.8237547892720306
28187,"@Override JSType resolveInternal(ErrorReporter t,StaticScope<JSType> scope){
  setResolvedTypeInternal(this);
  if (implicitPrototype != null && !implicitPrototype.isNativeObjectType()) {
    implicitPrototype=(ObjectType)implicitPrototype.resolve(t,scope);
  }
  for (  Property prop : properties.values()) {
    prop.type=safeResolve(prop.type,t,scope);
  }
  return this;
}","@Override JSType resolveInternal(ErrorReporter t,StaticScope<JSType> scope){
  setResolvedTypeInternal(this);
  ObjectType implicitPrototype=getImplicitPrototype();
  if (implicitPrototype != null) {
    implicitPrototypeFallback=(ObjectType)implicitPrototype.resolve(t,scope);
  }
  for (  Property prop : properties.values()) {
    prop.type=safeResolve(prop.type,t,scope);
  }
  return this;
}",0.8134715025906736
28188,"/** 
 * This should only be reset on the FunctionPrototypeType, only to fix an incorrectly established prototype chain due to the user having a mismatch in super class declaration, and only before properties on that type are processed.
 */
void setImplicitPrototype(ObjectType implicitPrototype){
  checkState(!hasCachedValues());
  this.implicitPrototype=implicitPrototype;
}","/** 
 * This should only be reset on the FunctionPrototypeType, only to fix an incorrectly established prototype chain due to the user having a mismatch in super class declaration, and only before properties on that type are processed.
 */
final void setImplicitPrototype(ObjectType implicitPrototype){
  checkState(!hasCachedValues());
  this.implicitPrototypeFallback=implicitPrototype;
}",0.9817232375979112
28189,"@Override public ObjectType getImplicitPrototype(){
  return implicitPrototype;
}","@Override public ObjectType getImplicitPrototype(){
  return implicitPrototypeFallback;
}",0.9529411764705882
28190,"/** 
 * Creates an object type, allowing specification of the implicit prototype when creating native objects.
 */
PrototypeObjectType(JSTypeRegistry registry,String className,ObjectType implicitPrototype,boolean nativeType){
  super(registry);
  this.properties=Maps.newTreeMap();
  this.className=className;
  this.nativeType=nativeType;
  if (nativeType) {
    this.implicitPrototype=implicitPrototype;
  }
 else   if (implicitPrototype == null) {
    this.implicitPrototype=registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
  }
 else {
    this.implicitPrototype=implicitPrototype;
  }
}","/** 
 * Creates an object type, allowing specification of the implicit prototype when creating native objects.
 */
PrototypeObjectType(JSTypeRegistry registry,String className,ObjectType implicitPrototype,boolean nativeType){
  super(registry);
  this.properties=Maps.newTreeMap();
  this.className=className;
  this.nativeType=nativeType;
  if (nativeType || implicitPrototype != null) {
    setImplicitPrototype(implicitPrototype);
  }
 else {
    setImplicitPrototype(registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));
  }
}",0.784070796460177
28191,"private JSType supAndInfHelper(JSType that,boolean leastSuper){
  if (isFunctionType() && that.isFunctionType()) {
    if (isEquivalentTo(that)) {
      return this;
    }
    FunctionType other=null;
    if (that instanceof FunctionType) {
      other=(FunctionType)that;
    }
    if (other != null && isOrdinaryFunction() && that.isOrdinaryFunction() && !this.call.hasUnknownParamsOrReturn() && !other.call.hasUnknownParamsOrReturn()) {
      if (this.isSubtype(that)) {
        return leastSuper ? that : this;
      }
 else       if (that.isSubtype(this)) {
        return leastSuper ? this : that;
      }
      FunctionType merged=tryMergeFunctionPiecewise(other,leastSuper);
      if (merged != null) {
        return merged;
      }
    }
    JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
    if (functionInstance.isEquivalentTo(that)) {
      return leastSuper ? that : this;
    }
 else     if (functionInstance.isEquivalentTo(this)) {
      return leastSuper ? this : that;
    }
    FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
    FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
    return leastSuper ? greatestFn : leastFn;
  }
  return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);
}","/** 
 * Computes the supremum or infimum of functions with other types. Because sup() and inf() share a lot of logic for functions, we use a single helper.
 * @param leastSuper If true, compute the supremum of {@code this} with{@code that}. Otherwise compute the infimum.
 * @return The least supertype or greatest subtype.
 */
private JSType supAndInfHelper(JSType that,boolean leastSuper){
  if (isFunctionType() && that.isFunctionType()) {
    if (isEquivalentTo(that)) {
      return this;
    }
    FunctionType other=null;
    if (that instanceof FunctionType) {
      other=(FunctionType)that;
    }
    if (other != null && isOrdinaryFunction() && that.isOrdinaryFunction() && !this.call.hasUnknownParamsOrReturn() && !other.call.hasUnknownParamsOrReturn()) {
      boolean isSubtypeOfThat=this.isSubtype(that);
      boolean isSubtypeOfThis=that.isSubtype(this);
      if (isSubtypeOfThat && !isSubtypeOfThis) {
        return leastSuper ? that : this;
      }
 else       if (isSubtypeOfThis && !isSubtypeOfThat) {
        return leastSuper ? this : that;
      }
      FunctionType merged=tryMergeFunctionPiecewise(other,leastSuper);
      if (merged != null) {
        return merged;
      }
    }
    JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
    if (functionInstance.isEquivalentTo(that)) {
      return leastSuper ? that : this;
    }
 else     if (functionInstance.isEquivalentTo(this)) {
      return leastSuper ? this : that;
    }
    FunctionType greatestFn=registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
    FunctionType leastFn=registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);
    return leastSuper ? greatestFn : leastFn;
  }
  return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);
}",0.832807570977918
28192,"/** 
 * Creates a dotted namespace assignment expression (e.g. <code>foo.bar = {};</code>).
 * @param namespace A dotted namespace
 * @param node A node from which to copy source info.
 */
private Node makeAssignmentExprNode(String namespace,Node node){
  Node decl=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,NodeUtil.newQualifiedNameNode(namespace,node,namespace),new Node(Token.OBJECTLIT)));
  decl.putBooleanProp(Node.IS_NAMESPACE,true);
  Preconditions.checkState(isNamespacePlaceholder(decl));
  decl.copyInformationFromForTree(node);
  return decl;
}","/** 
 * Creates a dotted namespace assignment expression (e.g. <code>foo.bar = {};</code>).
 * @param namespace A dotted namespace
 * @param node A node from which to copy source info.
 */
private Node makeAssignmentExprNode(String namespace,Node node){
  Node decl=new Node(Token.EXPR_RESULT,new Node(Token.ASSIGN,NodeUtil.newQualifiedNameNode(namespace,node,namespace),createNamespaceLiteral()));
  decl.putBooleanProp(Node.IS_NAMESPACE,true);
  Preconditions.checkState(isNamespacePlaceholder(decl));
  decl.copyInformationFromForTree(node);
  return decl;
}",0.9599287622439892
28193,"/** 
 * Creates a simple namespace variable declaration (e.g. <code>var foo = {};</code>).
 * @param namespace A simple namespace (must be a valid js identifier)
 * @param sourceNode The node to get source information from.
 */
private Node makeVarDeclNode(String namespace,Node sourceNode){
  Node name=Node.newString(Token.NAME,namespace);
  name.addChildToFront(new Node(Token.OBJECTLIT));
  Node decl=new Node(Token.VAR,name);
  decl.putBooleanProp(Node.IS_NAMESPACE,true);
  if (compiler.getCodingConvention().isConstant(namespace)) {
    name.putBooleanProp(Node.IS_CONSTANT_NAME,true);
  }
  Preconditions.checkState(isNamespacePlaceholder(decl));
  decl.copyInformationFromForTree(sourceNode);
  return decl;
}","/** 
 * Creates a simple namespace variable declaration (e.g. <code>var foo = {};</code>).
 * @param namespace A simple namespace (must be a valid js identifier)
 * @param sourceNode The node to get source information from.
 */
private Node makeVarDeclNode(String namespace,Node sourceNode){
  Node name=Node.newString(Token.NAME,namespace);
  name.addChildToFront(createNamespaceLiteral());
  Node decl=new Node(Token.VAR,name);
  decl.putBooleanProp(Node.IS_NAMESPACE,true);
  if (compiler.getCodingConvention().isConstant(namespace)) {
    name.putBooleanProp(Node.IS_CONSTANT_NAME,true);
  }
  Preconditions.checkState(isNamespacePlaceholder(decl));
  decl.copyInformationFromForTree(sourceNode);
  return decl;
}",0.9686411149825784
28194,"private FlowScope traverseObjectLiteral(Node n,FlowScope scope){
  ObjectType objectType=(ObjectType)n.getJSType();
  if (objectType == null) {
    return scope;
  }
  if (objectType.hasReferenceName()) {
    return scope;
  }
  for (Node name=n.getFirstChild(); name != null; name=name.getNext().getNext()) {
    Node value=name.getNext();
    scope=traverse(name,scope);
    scope=traverse(value,scope);
    String memberName=NodeUtil.getStringValue(name);
    if (memberName != null) {
      objectType.defineInferredProperty(memberName,getJSType(value),false);
    }
 else {
      n.setJSType(getNativeType(UNKNOWN_TYPE));
      return scope;
    }
  }
  return scope;
}","private FlowScope traverseObjectLiteral(Node n,FlowScope scope){
  ObjectType objectType=(ObjectType)n.getJSType();
  Preconditions.checkNotNull(objectType);
  if (objectType.hasReferenceName()) {
    return scope;
  }
  for (Node name=n.getFirstChild(); name != null; name=name.getNext().getNext()) {
    Node value=name.getNext();
    scope=traverse(name,scope);
    scope=traverse(value,scope);
    String memberName=NodeUtil.getStringValue(name);
    if (memberName != null) {
      objectType.defineInferredProperty(memberName,getJSType(value),false);
    }
 else {
      n.setJSType(getNativeType(UNKNOWN_TYPE));
      return scope;
    }
  }
  return scope;
}",0.9522388059701492
28195,"private void attachLiteralTypes(Node n){
switch (n.getType()) {
case Token.NULL:
    n.setJSType(getNativeType(NULL_TYPE));
  break;
case Token.VOID:
n.setJSType(getNativeType(VOID_TYPE));
break;
case Token.STRING:
n.setJSType(getNativeType(STRING_TYPE));
break;
case Token.NUMBER:
n.setJSType(getNativeType(NUMBER_TYPE));
break;
case Token.TRUE:
case Token.FALSE:
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;
case Token.REGEXP:
n.setJSType(getNativeType(REGEXP_TYPE));
break;
case Token.REF_SPECIAL:
n.setJSType(getNativeType(UNKNOWN_TYPE));
break;
case Token.OBJECTLIT:
n.setJSType(typeRegistry.createAnonymousObjectType());
break;
}
}","private void attachLiteralTypes(Node n){
switch (n.getType()) {
case Token.NULL:
    n.setJSType(getNativeType(NULL_TYPE));
  break;
case Token.VOID:
n.setJSType(getNativeType(VOID_TYPE));
break;
case Token.STRING:
n.setJSType(getNativeType(STRING_TYPE));
break;
case Token.NUMBER:
n.setJSType(getNativeType(NUMBER_TYPE));
break;
case Token.TRUE:
case Token.FALSE:
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;
case Token.REGEXP:
n.setJSType(getNativeType(REGEXP_TYPE));
break;
case Token.REF_SPECIAL:
n.setJSType(getNativeType(UNKNOWN_TYPE));
break;
case Token.OBJECTLIT:
if (n.getJSType() == null) {
n.setJSType(typeRegistry.createAnonymousObjectType());
}
break;
}
}",0.9657273419649656
28196,"@Override public boolean apply(Node node){
  return NodeUtil.isCall(node) || NodeUtil.isNew(node) || NodeUtil.isFunction(node)|| NodeUtil.isName(node)|| (NodeUtil.isString(node) && NodeUtil.isGet(node.getParent()));
}","@Override public boolean apply(Node node){
  return NodeUtil.isCall(node) || NodeUtil.isNew(node) || NodeUtil.isFunction(node)|| NodeUtil.isName(node)|| NodeUtil.isGet(node)|| (NodeUtil.isString(node) && NodeUtil.isGet(node.getParent()));
}",0.949671772428884
28197,"void addGuard(WarningsGuard guard){
  if (guard instanceof ComposeWarningsGuard) {
    addGuards(((ComposeWarningsGuard)guard).guards);
  }
 else {
    int index=Collections.binarySearch(this.guards,guard,guardComparator);
    if (index < 0) {
      index=-index - 1;
    }
    this.guards.add(index,guard);
  }
}","void addGuard(WarningsGuard guard){
  if (guard instanceof ComposeWarningsGuard) {
    addGuards(Iterables.reverse(((ComposeWarningsGuard)guard).guards));
  }
 else {
    int index=Collections.binarySearch(this.guards,guard,guardComparator);
    if (index < 0) {
      index=-index - 1;
    }
    this.guards.add(index,guard);
  }
}",0.9705426356589149
28198,"/** 
 * Determines whether this guard will ""elevate"" the status of any disabled diagnostic type in the group to a warning or an error.
 */
@Override public boolean enables(DiagnosticGroup group){
  for (  WarningsGuard guard : guards) {
    if (guard.enables(group)) {
      return true;
    }
  }
  return false;
}","/** 
 * Determines whether this guard will ""elevate"" the status of any disabled diagnostic type in the group to a warning or an error.
 */
@Override public boolean enables(DiagnosticGroup group){
  for (  WarningsGuard guard : guards) {
    if (guard.enables(group)) {
      return true;
    }
 else     if (guard.disables(group)) {
      return false;
    }
  }
  return false;
}",0.9064748201438848
28199,"/** 
 * Determines whether the given value is eligible to be moved across modules.
 */
private boolean canMoveValue(Node n){
  if (n == null || NodeUtil.isLiteralValue(n) || n.getType() == Token.FUNCTION) {
    return true;
  }
 else   if (n.getType() == Token.CALL) {
    Node functionName=n.getFirstChild();
    return functionName.getType() == Token.NAME && (functionName.getString().equals(CrossModuleMethodMotion.STUB_METHOD_NAME) || functionName.getString().equals(CrossModuleMethodMotion.UNSTUB_METHOD_NAME));
  }
 else   if (n.getType() == Token.ARRAYLIT || n.getType() == Token.OBJECTLIT) {
    for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
      if (!canMoveValue(child)) {
        return false;
      }
    }
    return true;
  }
  return false;
}","/** 
 * Determines whether the given value is eligible to be moved across modules.
 */
private boolean canMoveValue(Node n){
  if (n == null || NodeUtil.isLiteralValue(n,true) || n.getType() == Token.FUNCTION) {
    return true;
  }
 else   if (n.getType() == Token.CALL) {
    Node functionName=n.getFirstChild();
    return functionName.getType() == Token.NAME && (functionName.getString().equals(CrossModuleMethodMotion.STUB_METHOD_NAME) || functionName.getString().equals(CrossModuleMethodMotion.UNSTUB_METHOD_NAME));
  }
 else   if (n.getType() == Token.ARRAYLIT || n.getType() == Token.OBJECTLIT) {
    for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
      if (!canMoveValue(child)) {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.9968334388853703
28200,"@Override void visit(NodeTraversal t,Node callNode,Node parent,String callName){
  if (externMethods.contains(callName) || nonMethodProperties.contains(callName)) {
    return;
  }
  Collection<Node> definitions=methodDefinitions.get(callName);
  if (definitions == null || definitions.size() == 0) {
    return;
  }
  Node firstDefinition=definitions.iterator().next();
  if (definitions.size() == 1 || allDefinitionsEquivalent(definitions)) {
    if (!argsMayHaveSideEffects(callNode)) {
      Node returned=returnedExpression(firstDefinition);
      if (returned != null) {
        if (isPropertyTree(returned)) {
          logger.fine(""String_Node_Str"" + callName);
          inlinePropertyReturn(parent,callNode,returned);
        }
 else         if (NodeUtil.isLiteralValue(returned) && !NodeUtil.mayHaveSideEffects(callNode.getFirstChild())) {
          logger.fine(""String_Node_Str"" + callName);
          inlineConstReturn(parent,callNode,returned);
        }
      }
 else       if (isEmptyMethod(firstDefinition) && !NodeUtil.mayHaveSideEffects(callNode.getFirstChild())) {
        logger.fine(""String_Node_Str"" + callName);
        inlineEmptyMethod(t,parent,callNode);
      }
    }
  }
 else {
    logger.fine(""String_Node_Str"" + callName + ""String_Node_Str"");
  }
}","@Override void visit(NodeTraversal t,Node callNode,Node parent,String callName){
  if (externMethods.contains(callName) || nonMethodProperties.contains(callName)) {
    return;
  }
  Collection<Node> definitions=methodDefinitions.get(callName);
  if (definitions == null || definitions.size() == 0) {
    return;
  }
  Node firstDefinition=definitions.iterator().next();
  if (definitions.size() == 1 || allDefinitionsEquivalent(definitions)) {
    if (!argsMayHaveSideEffects(callNode)) {
      Node returned=returnedExpression(firstDefinition);
      if (returned != null) {
        if (isPropertyTree(returned)) {
          logger.fine(""String_Node_Str"" + callName);
          inlinePropertyReturn(parent,callNode,returned);
        }
 else         if (NodeUtil.isLiteralValue(returned,false) && !NodeUtil.mayHaveSideEffects(callNode.getFirstChild())) {
          logger.fine(""String_Node_Str"" + callName);
          inlineConstReturn(parent,callNode,returned);
        }
      }
 else       if (isEmptyMethod(firstDefinition) && !NodeUtil.mayHaveSideEffects(callNode.getFirstChild())) {
        logger.fine(""String_Node_Str"" + callName);
        inlineEmptyMethod(t,parent,callNode);
      }
    }
  }
 else {
    logger.fine(""String_Node_Str"" + callName + ""String_Node_Str"");
  }
}",0.9976617303195636
28201,"/** 
 * If the value is a literal, we can cross more boundaries to inline it.
 */
private boolean canMoveAggressively(Node value){
  return NodeUtil.isLiteralValue(value) || value.getType() == Token.FUNCTION;
}","/** 
 * If the value is a literal, we can cross more boundaries to inline it.
 */
private boolean canMoveAggressively(Node value){
  return NodeUtil.isLiteralValue(value,true) || value.getType() == Token.FUNCTION;
}",0.9882352941176472
28202,"/** 
 * If the value of a variable is not constant, then it may read or modify state. Therefore it cannot be moved past anything else that may modify the value being read or read values that are modified.
 */
private boolean canMoveModerately(Reference initialization,Reference reference){
  Iterator<Node> it;
  if (initialization.getParent().getType() == Token.VAR) {
    it=NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(),initialization.getParent(),initialization.getGrandparent());
  }
 else   if (initialization.getParent().getType() == Token.ASSIGN) {
    Preconditions.checkState(initialization.getGrandparent().getType() == Token.EXPR_RESULT);
    it=NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(),initialization.getParent(),initialization.getGrandparent(),initialization.getGrandparent().getParent());
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Node targetName=reference.getNameNode();
  while (it.hasNext()) {
    Node curNode=it.next();
    if (curNode == targetName) {
      return true;
    }
  }
  return false;
}","/** 
 * If the value of a variable is not constant, then it may read or modify state. Therefore it cannot be moved past anything else that may modify the value being read or read values that are modified.
 */
private boolean canMoveModerately(Reference initialization,Reference reference){
  Iterator<Node> it;
  if (initialization.getParent().getType() == Token.VAR) {
    it=NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(),initialization.getParent(),initialization.getGrandparent());
  }
 else   if (initialization.getParent().getType() == Token.ASSIGN) {
    Preconditions.checkState(initialization.getGrandparent().getType() == Token.EXPR_RESULT);
    it=NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(),initialization.getParent(),initialization.getGrandparent(),initialization.getGrandparent().getParent());
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + initialization.getParent().toStringTree());
  }
  Node targetName=reference.getNameNode();
  while (it.hasNext()) {
    Node curNode=it.next();
    if (curNode == targetName) {
      return true;
    }
  }
  return false;
}",0.9803220035778176
28203,"/** 
 * Returns true if this is a literal value. We define a literal value as any node that evaluates to the same thing regardless of when or where it is evaluated. So /xyz/ and [3, 5] are literals, but function() { return a; } is not.
 */
static boolean isLiteralValue(Node n){
switch (n.getType()) {
case Token.ARRAYLIT:
case Token.OBJECTLIT:
case Token.REGEXP:
    for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
      if (!isLiteralValue(child)) {
        return false;
      }
    }
  return true;
default :
return isImmutableValue(n);
}
}","/** 
 * Returns true if this is a literal value. We define a literal value as any node that evaluates to the same thing regardless of when or where it is evaluated. So /xyz/ and [3, 5] are literals, but the name a is not. Function literals do not meet this definition, because they lexically capture variables. For example, if you have <code> function() { return a; } </code> If it is evaluated in a different scope, then it captures a different variable. Even if the function did not read any captured vairables directly, it would still fail this definition, because it affects the lifecycle of variables in the enclosing scope. However, a function literal with respect to a particular scope is a literal.
 * @param includeFunctions If true, all function expressions will betreated as literals.
 */
static boolean isLiteralValue(Node n,boolean includeFunctions){
switch (n.getType()) {
case Token.ARRAYLIT:
case Token.OBJECTLIT:
case Token.REGEXP:
    for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
      if (!isLiteralValue(child,includeFunctions)) {
        return false;
      }
    }
  return true;
case Token.FUNCTION:
return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
default :
return isImmutableValue(n);
}
}",0.6181619256017505
28204,"/** 
 * Returns true if some node in n's subtree changes application state. If   {@code checkForNewObjects} is true, we assume that newly createdmutable objects (like object literals) change state. Otherwise, we assume that they have no side effects.
 */
private static boolean checkForStateChangeHelper(Node n,boolean checkForNewObjects,AbstractCompiler compiler){
switch (n.getType()) {
case Token.AND:
case Token.BLOCK:
case Token.EXPR_RESULT:
case Token.HOOK:
case Token.IF:
case Token.IN:
case Token.LP:
case Token.NUMBER:
case Token.OR:
case Token.THIS:
case Token.TRUE:
case Token.FALSE:
case Token.NULL:
case Token.STRING:
case Token.SWITCH:
case Token.TRY:
case Token.EMPTY:
    break;
case Token.THROW:
  return true;
case Token.OBJECTLIT:
case Token.ARRAYLIT:
case Token.REGEXP:
if (checkForNewObjects) {
  return true;
}
break;
case Token.VAR:
case Token.NAME:
if (n.getFirstChild() != null) {
return true;
}
break;
case Token.FUNCTION:
return !isFunctionExpression(n);
case Token.NEW:
if (checkForNewObjects) {
return true;
}
if (!constructorCallHasSideEffects(n)) {
break;
}
return true;
case Token.CALL:
if (!functionCallHasSideEffects(n,compiler)) {
break;
}
return true;
default :
if (isSimpleOperatorType(n.getType())) {
break;
}
if (isAssignmentOp(n)) {
if (checkForStateChangeHelper(n.getFirstChild(),checkForNewObjects,compiler) || checkForStateChangeHelper(n.getLastChild(),checkForNewObjects,compiler)) {
return true;
}
Node current=n.getFirstChild();
for (; current.getType() == Token.GETPROP || current.getType() == Token.GETELEM; current=current.getFirstChild()) {
}
return !(isLiteralValue(current) || current.getType() == Token.FUNCTION);
}
return true;
}
for (Node c=n.getFirstChild(); c != null; c=c.getNext()) {
if (checkForStateChangeHelper(c,checkForNewObjects,compiler)) {
return true;
}
}
return false;
}","/** 
 * Returns true if some node in n's subtree changes application state. If   {@code checkForNewObjects} is true, we assume that newly createdmutable objects (like object literals) change state. Otherwise, we assume that they have no side effects.
 */
private static boolean checkForStateChangeHelper(Node n,boolean checkForNewObjects,AbstractCompiler compiler){
switch (n.getType()) {
case Token.AND:
case Token.BLOCK:
case Token.EXPR_RESULT:
case Token.HOOK:
case Token.IF:
case Token.IN:
case Token.LP:
case Token.NUMBER:
case Token.OR:
case Token.THIS:
case Token.TRUE:
case Token.FALSE:
case Token.NULL:
case Token.STRING:
case Token.SWITCH:
case Token.TRY:
case Token.EMPTY:
    break;
case Token.THROW:
  return true;
case Token.OBJECTLIT:
case Token.ARRAYLIT:
case Token.REGEXP:
if (checkForNewObjects) {
  return true;
}
break;
case Token.VAR:
case Token.NAME:
if (n.getFirstChild() != null) {
return true;
}
break;
case Token.FUNCTION:
return checkForNewObjects || !isFunctionExpression(n);
case Token.NEW:
if (checkForNewObjects) {
return true;
}
if (!constructorCallHasSideEffects(n)) {
break;
}
return true;
case Token.CALL:
if (!functionCallHasSideEffects(n,compiler)) {
break;
}
return true;
default :
if (isSimpleOperatorType(n.getType())) {
break;
}
if (isAssignmentOp(n)) {
if (checkForStateChangeHelper(n.getFirstChild(),checkForNewObjects,compiler) || checkForStateChangeHelper(n.getLastChild(),checkForNewObjects,compiler)) {
return true;
}
Node current=n.getFirstChild();
for (; current.getType() == Token.GETPROP || current.getType() == Token.GETELEM; current=current.getFirstChild()) {
}
return !isLiteralValue(current,true);
}
return true;
}
for (Node c=n.getFirstChild(); c != null; c=c.getNext()) {
if (checkForStateChangeHelper(c,checkForNewObjects,compiler)) {
return true;
}
}
return false;
}",0.9814410480349344
28205,"private void buildParameterList(List<Parameter> parameters,Node cur){
  while ((cur=cur.getNext()) != null) {
    parameters.add(new Parameter(cur,NodeUtil.isLiteralValue(cur)));
  }
}","private void buildParameterList(List<Parameter> parameters,Node cur){
  while ((cur=cur.getNext()) != null) {
    parameters.add(new Parameter(cur,NodeUtil.isLiteralValue(cur,false)));
  }
}",0.983957219251337
28206,"private Node tryFoldAdd(Node node,Node left,Node right){
  Preconditions.checkArgument(node.getType() == Token.ADD);
  if (NodeUtil.isLiteralValue(left) && NodeUtil.isLiteralValue(right)) {
    return tryFoldAddConstant(node,left,right);
  }
 else {
    return tryFoldLeftChildAdd(node,left,right);
  }
}","private Node tryFoldAdd(Node node,Node left,Node right){
  Preconditions.checkArgument(node.getType() == Token.ADD);
  if (NodeUtil.isLiteralValue(left,false) && NodeUtil.isLiteralValue(right,false)) {
    return tryFoldAddConstant(node,left,right);
  }
 else {
    return tryFoldLeftChildAdd(node,left,right);
  }
}",0.9806451612903224
28207,"/** 
 * Expressions such as [foo() + 'a' + 'b'] generate parse trees where no node has two const children ((foo() + 'a') + 'b'), so tryFoldAdd() won't fold it -- tryFoldLeftChildAdd() will (for Strings). Specifically it folds Add exprssions where: - The left child is also and add expression - The right child is a constant value - The left child's right child is a STRING constant. WARNING: If javascript ever adds operator overloading, this will probably stop being correct.
 */
private Node tryFoldLeftChildAdd(Node n,Node left,Node right){
  if (NodeUtil.isLiteralValue(right) && left.getType() == Token.ADD && left.getChildCount() == 2) {
    Node ll=left.getFirstChild();
    Node lr=ll.getNext();
    if (lr.getType() != Token.STRING) {
      return n;
    }
    String leftString=NodeUtil.getStringValue(lr);
    String rightString=NodeUtil.getStringValue(right);
    if (leftString != null && rightString != null) {
      left.removeChild(ll);
      String result=leftString + rightString;
      n.replaceChild(left,ll);
      n.replaceChild(right,Node.newString(result));
      reportCodeChange();
    }
  }
  return n;
}","/** 
 * Expressions such as [foo() + 'a' + 'b'] generate parse trees where no node has two const children ((foo() + 'a') + 'b'), so tryFoldAdd() won't fold it -- tryFoldLeftChildAdd() will (for Strings). Specifically it folds Add exprssions where: - The left child is also and add expression - The right child is a constant value - The left child's right child is a STRING constant. WARNING: If javascript ever adds operator overloading, this will probably stop being correct.
 */
private Node tryFoldLeftChildAdd(Node n,Node left,Node right){
  if (NodeUtil.isLiteralValue(right,false) && left.getType() == Token.ADD && left.getChildCount() == 2) {
    Node ll=left.getFirstChild();
    Node lr=ll.getNext();
    if (lr.getType() != Token.STRING) {
      return n;
    }
    String leftString=NodeUtil.getStringValue(lr);
    String rightString=NodeUtil.getStringValue(right);
    if (leftString != null && rightString != null) {
      left.removeChild(ll);
      String result=leftString + rightString;
      n.replaceChild(left,ll);
      n.replaceChild(right,Node.newString(result));
      reportCodeChange();
    }
  }
  return n;
}",0.9973544973544972
28208,"/** 
 * Folds 'typeof(foo)' if foo is a literal, e.g. typeof(""bar"") --> ""string"" typeof(6) --> ""number""
 */
private Node tryFoldTypeof(Node originalTypeofNode){
  Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);
  Node argumentNode=originalTypeofNode.getFirstChild();
  if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode)) {
    return originalTypeofNode;
  }
  String typeNameString=null;
switch (argumentNode.getType()) {
case Token.STRING:
    typeNameString=""String_Node_Str"";
  break;
case Token.NUMBER:
typeNameString=""String_Node_Str"";
break;
case Token.TRUE:
case Token.FALSE:
typeNameString=""String_Node_Str"";
break;
case Token.NULL:
case Token.OBJECTLIT:
case Token.ARRAYLIT:
typeNameString=""String_Node_Str"";
break;
case Token.VOID:
typeNameString=""String_Node_Str"";
break;
case Token.NAME:
if (""String_Node_Str"".equals(argumentNode.getString())) {
typeNameString=""String_Node_Str"";
}
break;
}
if (typeNameString != null) {
Node newNode=Node.newString(typeNameString);
originalTypeofNode.getParent().replaceChild(originalTypeofNode,newNode);
reportCodeChange();
return newNode;
}
return originalTypeofNode;
}","/** 
 * Folds 'typeof(foo)' if foo is a literal, e.g. typeof(""bar"") --> ""string"" typeof(6) --> ""number""
 */
private Node tryFoldTypeof(Node originalTypeofNode){
  Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF);
  Node argumentNode=originalTypeofNode.getFirstChild();
  if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode,true)) {
    return originalTypeofNode;
  }
  String typeNameString=null;
switch (argumentNode.getType()) {
case Token.FUNCTION:
    typeNameString=""String_Node_Str"";
  break;
case Token.STRING:
typeNameString=""String_Node_Str"";
break;
case Token.NUMBER:
typeNameString=""String_Node_Str"";
break;
case Token.TRUE:
case Token.FALSE:
typeNameString=""String_Node_Str"";
break;
case Token.NULL:
case Token.OBJECTLIT:
case Token.ARRAYLIT:
typeNameString=""String_Node_Str"";
break;
case Token.VOID:
typeNameString=""String_Node_Str"";
break;
case Token.NAME:
if (""String_Node_Str"".equals(argumentNode.getString())) {
typeNameString=""String_Node_Str"";
}
break;
}
if (typeNameString != null) {
Node newNode=Node.newString(typeNameString);
originalTypeofNode.getParent().replaceChild(originalTypeofNode,newNode);
reportCodeChange();
return newNode;
}
return originalTypeofNode;
}",0.93841642228739
28209,"/** 
 * Try to fold   {@code left instanceof right} into {@code true}or   {@code false}.
 */
private Node tryFoldInstanceof(Node n,Node left,Node right){
  Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);
  if (NodeUtil.isLiteralValue(left) && !NodeUtil.mayHaveSideEffects(right)) {
    Node replacementNode=null;
    if (NodeUtil.isImmutableValue(left)) {
      replacementNode=new Node(Token.FALSE);
    }
 else     if (right.getType() == Token.NAME && ""String_Node_Str"".equals(right.getString())) {
      replacementNode=new Node(Token.TRUE);
    }
    if (replacementNode != null) {
      n.getParent().replaceChild(n,replacementNode);
      reportCodeChange();
      return replacementNode;
    }
  }
  return n;
}","/** 
 * Try to fold   {@code left instanceof right} into {@code true}or   {@code false}.
 */
private Node tryFoldInstanceof(Node n,Node left,Node right){
  Preconditions.checkArgument(n.getType() == Token.INSTANCEOF);
  if (NodeUtil.isLiteralValue(left,true) && !NodeUtil.mayHaveSideEffects(right)) {
    Node replacementNode=null;
    if (NodeUtil.isImmutableValue(left)) {
      replacementNode=new Node(Token.FALSE);
    }
 else     if (right.getType() == Token.NAME && ""String_Node_Str"".equals(right.getString())) {
      replacementNode=new Node(Token.TRUE);
    }
    if (replacementNode != null) {
      n.getParent().replaceChild(n,replacementNode);
      reportCodeChange();
      return replacementNode;
    }
  }
  return n;
}",0.9965963240299524
28210,"/** 
 * Try to fold comparison nodes, e.g ==
 */
@SuppressWarnings(""String_Node_Str"") private Node tryFoldComparison(Node n,Node left,Node right){
  if (!NodeUtil.isLiteralValue(left) || !NodeUtil.isLiteralValue(right)) {
    if (n.getType() != Token.GT && n.getType() != Token.LT) {
      return n;
    }
  }
  int op=n.getType();
  boolean result;
  boolean rightLiteral=NodeUtil.isLiteralValue(right);
  boolean undefinedRight=((Token.NAME == right.getType() && right.getString().equals(""String_Node_Str"")) || (Token.VOID == right.getType() && NodeUtil.isLiteralValue(right.getFirstChild())));
switch (left.getType()) {
case Token.VOID:
    if (!NodeUtil.isLiteralValue(left.getFirstChild())) {
      return n;
    }
 else     if (!rightLiteral) {
      return n;
    }
 else {
      boolean nullRight=(Token.NULL == right.getType());
      boolean equivalent=undefinedRight || nullRight;
switch (op) {
case Token.EQ:
        result=equivalent;
      break;
case Token.NE:
    result=!equivalent;
  break;
case Token.SHEQ:
result=undefinedRight;
break;
case Token.SHNE:
result=!undefinedRight;
break;
case Token.LT:
case Token.GT:
case Token.LE:
case Token.GE:
result=false;
break;
default :
return n;
}
}
break;
case Token.NULL:
if (undefinedRight) {
result=(op == Token.EQ);
break;
}
case Token.TRUE:
case Token.FALSE:
if (undefinedRight) {
result=false;
break;
}
case Token.THIS:
int tt=right.getType();
if (tt != Token.THIS && tt != Token.TRUE && tt != Token.FALSE && tt != Token.NULL) {
return n;
}
switch (op) {
case Token.SHEQ:
case Token.EQ:
result=left.getType() == right.getType();
break;
case Token.SHNE:
case Token.NE:
result=left.getType() != right.getType();
break;
default :
return n;
}
break;
case Token.STRING:
if (undefinedRight) {
result=false;
break;
}
if (Token.STRING != right.getType()) {
return n;
}
switch (op) {
case Token.SHEQ:
case Token.EQ:
result=left.getString().equals(right.getString());
break;
case Token.SHNE:
case Token.NE:
result=!left.getString().equals(right.getString());
break;
default :
return n;
}
break;
case Token.NUMBER:
if (undefinedRight) {
result=false;
break;
}
if (Token.NUMBER != right.getType()) {
return n;
}
double lv=left.getDouble();
double rv=right.getDouble();
switch (op) {
case Token.SHEQ:
case Token.EQ:
result=lv == rv;
break;
case Token.SHNE:
case Token.NE:
result=lv != rv;
break;
case Token.LE:
result=lv <= rv;
break;
case Token.LT:
result=lv < rv;
break;
case Token.GE:
result=lv >= rv;
break;
case Token.GT:
result=lv > rv;
break;
default :
return n;
}
break;
case Token.NAME:
if (rightLiteral) {
boolean undefinedLeft=(left.getString().equals(""String_Node_Str""));
if (undefinedLeft) {
boolean nullRight=(Token.NULL == right.getType());
boolean equivalent=undefinedRight || nullRight;
switch (op) {
case Token.EQ:
result=equivalent;
break;
case Token.NE:
result=!equivalent;
break;
case Token.SHEQ:
result=undefinedRight;
break;
case Token.SHNE:
result=!undefinedRight;
break;
case Token.LT:
case Token.GT:
case Token.LE:
case Token.GE:
result=false;
break;
default :
return n;
}
break;
}
}
if (Token.NAME != right.getType()) {
return n;
}
String ln=left.getString();
String rn=right.getString();
if (!ln.equals(rn)) {
return n;
}
switch (op) {
case Token.LT:
case Token.GT:
result=false;
break;
default :
return n;
}
break;
default :
return n;
}
Node newNode=new Node(result ? Token.TRUE : Token.FALSE);
n.getParent().replaceChild(n,newNode);
reportCodeChange();
return newNode;
}","/** 
 * Try to fold comparison nodes, e.g ==
 */
@SuppressWarnings(""String_Node_Str"") private Node tryFoldComparison(Node n,Node left,Node right){
  if (!NodeUtil.isLiteralValue(left,false) || !NodeUtil.isLiteralValue(right,false)) {
    if (n.getType() != Token.GT && n.getType() != Token.LT) {
      return n;
    }
  }
  int op=n.getType();
  boolean result;
  boolean rightLiteral=NodeUtil.isLiteralValue(right,false);
  boolean undefinedRight=((Token.NAME == right.getType() && right.getString().equals(""String_Node_Str"")) || (Token.VOID == right.getType() && NodeUtil.isLiteralValue(right.getFirstChild(),false)));
switch (left.getType()) {
case Token.VOID:
    if (!NodeUtil.isLiteralValue(left.getFirstChild(),false)) {
      return n;
    }
 else     if (!rightLiteral) {
      return n;
    }
 else {
      boolean nullRight=(Token.NULL == right.getType());
      boolean equivalent=undefinedRight || nullRight;
switch (op) {
case Token.EQ:
        result=equivalent;
      break;
case Token.NE:
    result=!equivalent;
  break;
case Token.SHEQ:
result=undefinedRight;
break;
case Token.SHNE:
result=!undefinedRight;
break;
case Token.LT:
case Token.GT:
case Token.LE:
case Token.GE:
result=false;
break;
default :
return n;
}
}
break;
case Token.NULL:
if (undefinedRight) {
result=(op == Token.EQ);
break;
}
case Token.TRUE:
case Token.FALSE:
if (undefinedRight) {
result=false;
break;
}
case Token.THIS:
int tt=right.getType();
if (tt != Token.THIS && tt != Token.TRUE && tt != Token.FALSE && tt != Token.NULL) {
return n;
}
switch (op) {
case Token.SHEQ:
case Token.EQ:
result=left.getType() == right.getType();
break;
case Token.SHNE:
case Token.NE:
result=left.getType() != right.getType();
break;
default :
return n;
}
break;
case Token.STRING:
if (undefinedRight) {
result=false;
break;
}
if (Token.STRING != right.getType()) {
return n;
}
switch (op) {
case Token.SHEQ:
case Token.EQ:
result=left.getString().equals(right.getString());
break;
case Token.SHNE:
case Token.NE:
result=!left.getString().equals(right.getString());
break;
default :
return n;
}
break;
case Token.NUMBER:
if (undefinedRight) {
result=false;
break;
}
if (Token.NUMBER != right.getType()) {
return n;
}
double lv=left.getDouble();
double rv=right.getDouble();
switch (op) {
case Token.SHEQ:
case Token.EQ:
result=lv == rv;
break;
case Token.SHNE:
case Token.NE:
result=lv != rv;
break;
case Token.LE:
result=lv <= rv;
break;
case Token.LT:
result=lv < rv;
break;
case Token.GE:
result=lv >= rv;
break;
case Token.GT:
result=lv > rv;
break;
default :
return n;
}
break;
case Token.NAME:
if (rightLiteral) {
boolean undefinedLeft=(left.getString().equals(""String_Node_Str""));
if (undefinedLeft) {
boolean nullRight=(Token.NULL == right.getType());
boolean equivalent=undefinedRight || nullRight;
switch (op) {
case Token.EQ:
result=equivalent;
break;
case Token.NE:
result=!equivalent;
break;
case Token.SHEQ:
result=undefinedRight;
break;
case Token.SHNE:
result=!undefinedRight;
break;
case Token.LT:
case Token.GT:
case Token.LE:
case Token.GE:
result=false;
break;
default :
return n;
}
break;
}
}
if (Token.NAME != right.getType()) {
return n;
}
String ln=left.getString();
String rn=right.getString();
if (!ln.equals(rn)) {
return n;
}
switch (op) {
case Token.LT:
case Token.GT:
result=false;
break;
default :
return n;
}
break;
default :
return n;
}
Node newNode=new Node(result ? Token.TRUE : Token.FALSE);
n.getParent().replaceChild(n,newNode);
reportCodeChange();
return newNode;
}",0.995674740484429
28211,"/** 
 * Folds ""typeof expression"" based on the JSType of ""expression"" if the expression  has no side effects. <p>E.g., <pre> var x = 6; if (typeof(x) == ""number"") { } </pre> folds to <pre> var x = 6; if (""number"" == ""number"") { } </pre> <p>This method doesn't fold literal values -- we leave that to PeepholeFoldConstants.
 */
private Node tryFoldTypeof(Node typeofNode){
  Preconditions.checkArgument(typeofNode.getType() == Token.TYPEOF);
  Preconditions.checkArgument(typeofNode.getFirstChild() != null);
  Node argumentNode=typeofNode.getFirstChild();
  if (!NodeUtil.isLiteralValue(argumentNode) && !NodeUtil.mayHaveSideEffects(argumentNode)) {
    JSType argumentType=argumentNode.getJSType();
    String typeName=null;
    if (argumentType != null) {
      if (argumentType.isObject() || argumentType.isNullType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isStringValueType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isNumberValueType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isBooleanValueType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isVoidType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isUnionType()) {
        typeName=null;
      }
      if (typeName != null) {
        Node newNode=Node.newString(typeName);
        typeofNode.getParent().replaceChild(typeofNode,newNode);
        reportCodeChange();
        return newNode;
      }
    }
  }
  return typeofNode;
}","/** 
 * Folds ""typeof expression"" based on the JSType of ""expression"" if the expression  has no side effects. <p>E.g., <pre> var x = 6; if (typeof(x) == ""number"") { } </pre> folds to <pre> var x = 6; if (""number"" == ""number"") { } </pre> <p>This method doesn't fold literal values -- we leave that to PeepholeFoldConstants.
 */
private Node tryFoldTypeof(Node typeofNode){
  Preconditions.checkArgument(typeofNode.getType() == Token.TYPEOF);
  Preconditions.checkArgument(typeofNode.getFirstChild() != null);
  Node argumentNode=typeofNode.getFirstChild();
  if (!NodeUtil.isLiteralValue(argumentNode,true) && !NodeUtil.mayHaveSideEffects(argumentNode)) {
    JSType argumentType=argumentNode.getJSType();
    String typeName=null;
    if (argumentType != null) {
      if (argumentType.isObject() || argumentType.isNullType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isStringValueType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isNumberValueType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isBooleanValueType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isVoidType()) {
        typeName=""String_Node_Str"";
      }
 else       if (argumentType.isUnionType()) {
        typeName=null;
      }
      if (typeName != null) {
        Node newNode=Node.newString(typeName);
        typeofNode.getParent().replaceChild(typeofNode,newNode);
        reportCodeChange();
        return newNode;
      }
    }
  }
  return typeofNode;
}",0.9983969220904136
28212,"/** 
 * Try folding :? (hook) and IF nodes by removing dead branches.
 * @return the replacement node, if changed, or the original if not
 */
private Node tryFoldHookIf(Node n){
  Node parent=n.getParent();
  int type=n.getType();
  Node cond=n.getFirstChild();
  Node thenBody=cond.getNext();
  Node elseBody=thenBody.getNext();
  boolean changes=false;
  if (type == Token.IF) {
    if (elseBody != null && !NodeUtil.mayHaveSideEffects(elseBody)) {
      n.removeChild(elseBody);
      elseBody=null;
      reportCodeChange();
      changes=true;
    }
    if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody != null) {
      n.removeChild(elseBody);
      n.replaceChild(thenBody,elseBody);
      Node notCond=new Node(Token.NOT);
      n.replaceChild(cond,notCond);
      notCond.addChildToFront(cond);
      cond=notCond;
      thenBody=cond.getNext();
      elseBody=null;
      reportCodeChange();
      changes=true;
    }
    if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody == null) {
      if (NodeUtil.mayHaveSideEffects(cond)) {
        n.removeChild(cond);
        Node replacement=NodeUtil.newExpr(cond);
        parent.replaceChild(n,replacement);
        reportCodeChange();
        return replacement;
      }
 else {
        NodeUtil.removeChild(parent,n);
        reportCodeChange();
        return null;
      }
    }
  }
 else {
    Preconditions.checkState(type == Token.HOOK);
    if (NodeUtil.isExpressionNode(parent)) {
      if (!NodeUtil.mayHaveSideEffects(thenBody)) {
        Node ifNode=new Node(Token.IF);
        if (cond.getType() == Token.NOT) {
          Node expr=cond.getFirstChild();
          cond.removeChild(expr);
          ifNode.addChildToBack(expr);
        }
 else {
          Node not=new Node(Token.NOT).copyInformationFrom(cond);
          n.removeChild(cond);
          not.addChildToBack(cond);
          ifNode.addChildToBack(not);
        }
        n.removeChild(elseBody);
        ifNode.addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(elseBody)).copyInformationFrom(elseBody));
        parent.getParent().replaceChild(parent,ifNode);
        reportCodeChange();
        return ifNode;
      }
 else       if (!NodeUtil.mayHaveSideEffects(elseBody)) {
        Node ifNode=new Node(Token.IF);
        n.removeChild(cond);
        ifNode.addChildToBack(cond);
        n.removeChild(thenBody);
        ifNode.addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(thenBody)).copyInformationFrom(thenBody));
        parent.getParent().replaceChild(parent,ifNode);
        reportCodeChange();
        return ifNode;
      }
    }
  }
  if (!NodeUtil.isLiteralValue(cond)) {
    return n;
  }
  TernaryValue condValue=NodeUtil.getBooleanValue(cond);
  if (condValue == TernaryValue.UNKNOWN) {
    return n;
  }
  boolean condTrue=condValue.toBoolean(true);
  if (n.getChildCount() == 2) {
    Preconditions.checkState(type == Token.IF);
    if (condTrue) {
      Node thenStmt=n.getFirstChild().getNext();
      n.removeChild(thenStmt);
      parent.replaceChild(n,thenStmt);
      reportCodeChange();
      return thenStmt;
    }
 else {
      NodeUtil.redeclareVarsInsideBranch(n);
      NodeUtil.removeChild(parent,n);
      reportCodeChange();
      return null;
    }
  }
 else {
    Node firstBranch=n.getFirstChild().getNext();
    Node secondBranch=firstBranch.getNext();
    Node branch=condTrue ? firstBranch : secondBranch;
    Node notBranch=condTrue ? secondBranch : firstBranch;
    NodeUtil.redeclareVarsInsideBranch(notBranch);
    n.removeChild(branch);
    parent.replaceChild(n,branch);
    reportCodeChange();
    return branch;
  }
}","/** 
 * Try folding :? (hook) and IF nodes by removing dead branches.
 * @return the replacement node, if changed, or the original if not
 */
private Node tryFoldHookIf(Node n){
  Node parent=n.getParent();
  int type=n.getType();
  Node cond=n.getFirstChild();
  Node thenBody=cond.getNext();
  Node elseBody=thenBody.getNext();
  boolean changes=false;
  if (type == Token.IF) {
    if (elseBody != null && !NodeUtil.mayHaveSideEffects(elseBody)) {
      n.removeChild(elseBody);
      elseBody=null;
      reportCodeChange();
      changes=true;
    }
    if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody != null) {
      n.removeChild(elseBody);
      n.replaceChild(thenBody,elseBody);
      Node notCond=new Node(Token.NOT);
      n.replaceChild(cond,notCond);
      notCond.addChildToFront(cond);
      cond=notCond;
      thenBody=cond.getNext();
      elseBody=null;
      reportCodeChange();
      changes=true;
    }
    if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody == null) {
      if (NodeUtil.mayHaveSideEffects(cond)) {
        n.removeChild(cond);
        Node replacement=NodeUtil.newExpr(cond);
        parent.replaceChild(n,replacement);
        reportCodeChange();
        return replacement;
      }
 else {
        NodeUtil.removeChild(parent,n);
        reportCodeChange();
        return null;
      }
    }
  }
 else {
    Preconditions.checkState(type == Token.HOOK);
    if (NodeUtil.isExpressionNode(parent)) {
      if (!NodeUtil.mayHaveSideEffects(thenBody)) {
        Node ifNode=new Node(Token.IF);
        if (cond.getType() == Token.NOT) {
          Node expr=cond.getFirstChild();
          cond.removeChild(expr);
          ifNode.addChildToBack(expr);
        }
 else {
          Node not=new Node(Token.NOT).copyInformationFrom(cond);
          n.removeChild(cond);
          not.addChildToBack(cond);
          ifNode.addChildToBack(not);
        }
        n.removeChild(elseBody);
        ifNode.addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(elseBody)).copyInformationFrom(elseBody));
        parent.getParent().replaceChild(parent,ifNode);
        reportCodeChange();
        return ifNode;
      }
 else       if (!NodeUtil.mayHaveSideEffects(elseBody)) {
        Node ifNode=new Node(Token.IF);
        n.removeChild(cond);
        ifNode.addChildToBack(cond);
        n.removeChild(thenBody);
        ifNode.addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(thenBody)).copyInformationFrom(thenBody));
        parent.getParent().replaceChild(parent,ifNode);
        reportCodeChange();
        return ifNode;
      }
    }
  }
  if (!NodeUtil.isLiteralValue(cond,true)) {
    return n;
  }
  TernaryValue condValue=NodeUtil.getBooleanValue(cond);
  if (condValue == TernaryValue.UNKNOWN) {
    return n;
  }
  boolean condTrue=condValue.toBoolean(true);
  if (n.getChildCount() == 2) {
    Preconditions.checkState(type == Token.IF);
    if (condTrue) {
      Node thenStmt=n.getFirstChild().getNext();
      n.removeChild(thenStmt);
      parent.replaceChild(n,thenStmt);
      reportCodeChange();
      return thenStmt;
    }
 else {
      NodeUtil.redeclareVarsInsideBranch(n);
      NodeUtil.removeChild(parent,n);
      reportCodeChange();
      return null;
    }
  }
 else {
    Node firstBranch=n.getFirstChild().getNext();
    Node secondBranch=firstBranch.getNext();
    Node branch=condTrue ? firstBranch : secondBranch;
    Node notBranch=condTrue ? secondBranch : firstBranch;
    NodeUtil.redeclareVarsInsideBranch(notBranch);
    n.removeChild(branch);
    parent.replaceChild(n,branch);
    reportCodeChange();
    return branch;
  }
}",0.9993089149965446
28213,"/** 
 * Try turning IF nodes into smaller HOOKs Returns the replacement for n or the original if no replacement was necessary.
 */
private Node tryMinimizeIf(Node n){
  Node parent=n.getParent();
  Node cond=n.getFirstChild();
  if (NodeUtil.isLiteralValue(cond)) {
    return n;
  }
  Node thenBranch=cond.getNext();
  Node elseBranch=thenBranch.getNext();
  if (elseBranch == null) {
    if (isExpressBlock(thenBranch)) {
      Node expr=getBlockExpression(thenBranch);
      if (isPropertyAssignmentInExpression(expr)) {
        return n;
      }
      if (cond.getType() == Token.NOT) {
        if (isLowerPrecedenceInExpression(cond,OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(),OR_PRECEDENCE)) {
          return n;
        }
        Node or=new Node(Token.OR,cond.removeFirstChild(),expr.removeFirstChild()).copyInformationFrom(n);
        Node newExpr=NodeUtil.newExpr(or);
        parent.replaceChild(n,newExpr);
        reportCodeChange();
        return newExpr;
      }
      if (isLowerPrecedenceInExpression(cond,AND_PRECEDENCE) || isLowerPrecedenceInExpression(expr.getFirstChild(),AND_PRECEDENCE)) {
        return n;
      }
      n.removeChild(cond);
      Node and=new Node(Token.AND,cond,expr.removeFirstChild()).copyInformationFrom(n);
      Node newExpr=NodeUtil.newExpr(and);
      parent.replaceChild(n,newExpr);
      reportCodeChange();
      return newExpr;
    }
    return n;
  }
  tryRemoveRepeatedStatements(n);
  if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch)) {
    n.replaceChild(cond,cond.removeFirstChild());
    n.removeChild(thenBranch);
    n.addChildToBack(thenBranch);
    reportCodeChange();
    return n;
  }
  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
    Node thenExpr=getBlockReturnExpression(thenBranch);
    Node elseExpr=getBlockReturnExpression(elseBranch);
    n.removeChild(cond);
    thenExpr.detachFromParent();
    elseExpr.detachFromParent();
    Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
    Node returnNode=new Node(Token.RETURN,hookNode);
    parent.replaceChild(n,returnNode);
    reportCodeChange();
    return returnNode;
  }
  boolean thenBranchIsExpressionBlock=isExpressBlock(thenBranch);
  boolean elseBranchIsExpressionBlock=isExpressBlock(elseBranch);
  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
    Node thenOp=getBlockExpression(thenBranch).getFirstChild();
    Node elseOp=getBlockExpression(elseBranch).getFirstChild();
    if (thenOp.getType() == elseOp.getType()) {
      if (NodeUtil.isAssignmentOp(thenOp)) {
        Node lhs=thenOp.getFirstChild();
        if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !NodeUtil.mayEffectMutableState(lhs)) {
          n.removeChild(cond);
          Node assignName=thenOp.removeFirstChild();
          Node thenExpr=thenOp.removeFirstChild();
          Node elseExpr=elseOp.getLastChild();
          elseOp.removeChild(elseExpr);
          Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
          Node assign=new Node(thenOp.getType(),assignName,hookNode).copyInformationFrom(thenOp);
          Node expr=NodeUtil.newExpr(assign);
          parent.replaceChild(n,expr);
          reportCodeChange();
          return expr;
        }
      }
 else       if (NodeUtil.isCall(thenOp)) {
        n.removeChild(cond);
        thenOp.detachFromParent();
        elseOp.detachFromParent();
        Node hookNode=new Node(Token.HOOK,cond,thenOp,elseOp).copyInformationFrom(n);
        Node expr=NodeUtil.newExpr(hookNode);
        parent.replaceChild(n,expr);
        reportCodeChange();
        return expr;
      }
    }
    return n;
  }
  boolean thenBranchIsVar=isVarBlock(thenBranch);
  boolean elseBranchIsVar=isVarBlock(elseBranch);
  if (thenBranchIsVar && elseBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild())) {
    Node var=getBlockVar(thenBranch);
    Node elseAssign=getBlockExpression(elseBranch).getFirstChild();
    Node name1=var.getFirstChild();
    Node maybeName2=elseAssign.getFirstChild();
    if (name1.hasChildren() && maybeName2.getType() == Token.NAME && name1.getString().equals(maybeName2.getString())) {
      Node thenExpr=name1.removeChildren();
      Node elseExpr=elseAssign.getLastChild().detachFromParent();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name1.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
 else   if (elseBranchIsVar && thenBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild())) {
    Node var=getBlockVar(elseBranch);
    Node thenAssign=getBlockExpression(thenBranch).getFirstChild();
    Node maybeName1=thenAssign.getFirstChild();
    Node name2=var.getFirstChild();
    if (name2.hasChildren() && maybeName1.getType() == Token.NAME && maybeName1.getString().equals(name2.getString())) {
      Node thenExpr=thenAssign.getLastChild().detachFromParent();
      Node elseExpr=name2.removeChildren();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name2.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
  return n;
}","/** 
 * Try turning IF nodes into smaller HOOKs Returns the replacement for n or the original if no replacement was necessary.
 */
private Node tryMinimizeIf(Node n){
  Node parent=n.getParent();
  Node cond=n.getFirstChild();
  if (NodeUtil.isLiteralValue(cond,true)) {
    return n;
  }
  Node thenBranch=cond.getNext();
  Node elseBranch=thenBranch.getNext();
  if (elseBranch == null) {
    if (isExpressBlock(thenBranch)) {
      Node expr=getBlockExpression(thenBranch);
      if (isPropertyAssignmentInExpression(expr)) {
        return n;
      }
      if (cond.getType() == Token.NOT) {
        if (isLowerPrecedenceInExpression(cond,OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(),OR_PRECEDENCE)) {
          return n;
        }
        Node or=new Node(Token.OR,cond.removeFirstChild(),expr.removeFirstChild()).copyInformationFrom(n);
        Node newExpr=NodeUtil.newExpr(or);
        parent.replaceChild(n,newExpr);
        reportCodeChange();
        return newExpr;
      }
      if (isLowerPrecedenceInExpression(cond,AND_PRECEDENCE) || isLowerPrecedenceInExpression(expr.getFirstChild(),AND_PRECEDENCE)) {
        return n;
      }
      n.removeChild(cond);
      Node and=new Node(Token.AND,cond,expr.removeFirstChild()).copyInformationFrom(n);
      Node newExpr=NodeUtil.newExpr(and);
      parent.replaceChild(n,newExpr);
      reportCodeChange();
      return newExpr;
    }
    return n;
  }
  tryRemoveRepeatedStatements(n);
  if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch)) {
    n.replaceChild(cond,cond.removeFirstChild());
    n.removeChild(thenBranch);
    n.addChildToBack(thenBranch);
    reportCodeChange();
    return n;
  }
  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
    Node thenExpr=getBlockReturnExpression(thenBranch);
    Node elseExpr=getBlockReturnExpression(elseBranch);
    n.removeChild(cond);
    thenExpr.detachFromParent();
    elseExpr.detachFromParent();
    Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
    Node returnNode=new Node(Token.RETURN,hookNode);
    parent.replaceChild(n,returnNode);
    reportCodeChange();
    return returnNode;
  }
  boolean thenBranchIsExpressionBlock=isExpressBlock(thenBranch);
  boolean elseBranchIsExpressionBlock=isExpressBlock(elseBranch);
  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
    Node thenOp=getBlockExpression(thenBranch).getFirstChild();
    Node elseOp=getBlockExpression(elseBranch).getFirstChild();
    if (thenOp.getType() == elseOp.getType()) {
      if (NodeUtil.isAssignmentOp(thenOp)) {
        Node lhs=thenOp.getFirstChild();
        if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !NodeUtil.mayEffectMutableState(lhs)) {
          n.removeChild(cond);
          Node assignName=thenOp.removeFirstChild();
          Node thenExpr=thenOp.removeFirstChild();
          Node elseExpr=elseOp.getLastChild();
          elseOp.removeChild(elseExpr);
          Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
          Node assign=new Node(thenOp.getType(),assignName,hookNode).copyInformationFrom(thenOp);
          Node expr=NodeUtil.newExpr(assign);
          parent.replaceChild(n,expr);
          reportCodeChange();
          return expr;
        }
      }
 else       if (NodeUtil.isCall(thenOp)) {
        n.removeChild(cond);
        thenOp.detachFromParent();
        elseOp.detachFromParent();
        Node hookNode=new Node(Token.HOOK,cond,thenOp,elseOp).copyInformationFrom(n);
        Node expr=NodeUtil.newExpr(hookNode);
        parent.replaceChild(n,expr);
        reportCodeChange();
        return expr;
      }
    }
    return n;
  }
  boolean thenBranchIsVar=isVarBlock(thenBranch);
  boolean elseBranchIsVar=isVarBlock(elseBranch);
  if (thenBranchIsVar && elseBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild())) {
    Node var=getBlockVar(thenBranch);
    Node elseAssign=getBlockExpression(elseBranch).getFirstChild();
    Node name1=var.getFirstChild();
    Node maybeName2=elseAssign.getFirstChild();
    if (name1.hasChildren() && maybeName2.getType() == Token.NAME && name1.getString().equals(maybeName2.getString())) {
      Node thenExpr=name1.removeChildren();
      Node elseExpr=elseAssign.getLastChild().detachFromParent();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name1.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
 else   if (elseBranchIsVar && thenBranchIsExpressionBlock && NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild())) {
    Node var=getBlockVar(elseBranch);
    Node thenAssign=getBlockExpression(thenBranch).getFirstChild();
    Node maybeName1=thenAssign.getFirstChild();
    Node name2=var.getFirstChild();
    if (name2.hasChildren() && maybeName1.getType() == Token.NAME && maybeName1.getString().equals(name2.getString())) {
      Node thenExpr=thenAssign.getLastChild().detachFromParent();
      Node elseExpr=name2.removeChildren();
      cond.detachFromParent();
      Node hookNode=new Node(Token.HOOK,cond,thenExpr,elseExpr).copyInformationFrom(n);
      var.detachFromParent();
      name2.addChildrenToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
  return n;
}",0.9995459911014256
28214,"/** 
 * Look at all the property assigns to all variables in the given scope. These may or may not count as references. For example, <code> var x = {}; x.foo = 3; // not a reference. var y = foo(); y.foo = 3; // is a reference. </code>
 */
private void interpretAssigns(Scope scope){
  for (Iterator<Var> it=scope.getVars(); it.hasNext(); ) {
    Var var=it.next();
    if (!referenced.contains(var)) {
      boolean assignedToUnknownValue=false;
      boolean hasPropertyAssign=false;
      if (var.getParentNode().getType() == Token.VAR) {
        Node value=var.getInitialValue();
        assignedToUnknownValue=value != null && !NodeUtil.isLiteralValue(value);
      }
 else {
        assignedToUnknownValue=true;
      }
      for (      Assign assign : assigns.get(var)) {
        if (assign.isPropertyAssign) {
          hasPropertyAssign=true;
        }
 else         if (!NodeUtil.isLiteralValue(assign.assignNode.getLastChild())) {
          assignedToUnknownValue=true;
        }
      }
      if (assignedToUnknownValue && hasPropertyAssign) {
        markReferencedVar(var);
      }
    }
  }
}","/** 
 * Look at all the property assigns to all variables in the given scope. These may or may not count as references. For example, <code> var x = {}; x.foo = 3; // not a reference. var y = foo(); y.foo = 3; // is a reference. </code>
 */
private void interpretAssigns(Scope scope){
  for (Iterator<Var> it=scope.getVars(); it.hasNext(); ) {
    Var var=it.next();
    if (!referenced.contains(var)) {
      boolean assignedToUnknownValue=false;
      boolean hasPropertyAssign=false;
      if (var.getParentNode().getType() == Token.VAR) {
        Node value=var.getInitialValue();
        assignedToUnknownValue=value != null && !NodeUtil.isLiteralValue(value,true);
      }
 else {
        assignedToUnknownValue=true;
      }
      for (      Assign assign : assigns.get(var)) {
        if (assign.isPropertyAssign) {
          hasPropertyAssign=true;
        }
 else         if (!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),true)) {
          assignedToUnknownValue=true;
        }
      }
      if (assignedToUnknownValue && hasPropertyAssign) {
        markReferencedVar(var);
      }
    }
  }
}",0.9955035971223022
28215,"public void assertNotLiteral(Node n){
  assertFalse(NodeUtil.isLiteralValue(n));
  assertFalse(NodeUtil.isImmutableValue(n));
}","public void assertNotLiteral(Node n){
  assertFalse(NodeUtil.isLiteralValue(n,true));
  assertFalse(NodeUtil.isLiteralValue(n,false));
  assertFalse(NodeUtil.isImmutableValue(n));
}",0.8246753246753247
28216,"public void assertLiteralButNotImmutable(Node n){
  assertTrue(NodeUtil.isLiteralValue(n));
  assertFalse(NodeUtil.isImmutableValue(n));
}","public void assertLiteralButNotImmutable(Node n){
  assertTrue(NodeUtil.isLiteralValue(n,true));
  assertTrue(NodeUtil.isLiteralValue(n,false));
  assertFalse(NodeUtil.isImmutableValue(n));
}",0.8389057750759878
28217,"public void testMayEffectMutableState(){
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
}","public void testMayEffectMutableState(){
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(false,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
  assertMutableState(true,""String_Node_Str"");
}",0.8541807527608745
28218,"public void assertLiteralAndImmutable(Node n){
  assertTrue(NodeUtil.isLiteralValue(n));
  assertTrue(NodeUtil.isImmutableValue(n));
}","public void assertLiteralAndImmutable(Node n){
  assertTrue(NodeUtil.isLiteralValue(n,true));
  assertTrue(NodeUtil.isLiteralValue(n,false));
  assertTrue(NodeUtil.isImmutableValue(n));
}",0.8348909657320872
28219,"public void testFoldTypeof(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
}","public void testFoldTypeof(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
}",0.9631449631449632
28220,"public void testFoldInstanceOf(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
}","public void testFoldInstanceOf(){
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
  foldSame(""String_Node_Str"");
  fold(""String_Node_Str"",""String_Node_Str"");
}",0.9694085656016316
28221,"/** 
 * Returns a version of   {@code type} that is restricted by some knowledgeabout the result of the  {@code typeof} operation..<p> The behavior of the  {@code typeof} operator can be summarized by thefollowing table: <table> <tr><th>type</th><th>result</th></tr> <tr><td> {@code undefined}</td><td>""undefined""</td></tr> <tr><td>  {@code null}</td><td>""object""</td></tr> <tr><td>  {@code boolean}</td><td>""boolean""</td></tr> <tr><td>  {@code number}</td><td>""number""</td></tr> <tr><td>  {@code string}</td><td>""string""</td></tr> <tr><td>  {@code Object} (which doesn't implement [[Call]])</td><td>""object""</td></tr> <tr><td> {@code Object} (which implements [[Call]])</td><td>""function""</td></tr> </table>
 * @param type the type to restrict
 * @param value A value known to be equal or not equal to the result of the{@code typeof} operation
 * @param resultEqualsValue {@code true} if the {@code typeOf} result is knownto equal  {@code value};   {@code false} if it is known <em>not</em> toequal  {@code value}
 * @return the restricted type or null if no version of the type matches therestriction
 */
JSType getRestrictedByTypeOfResult(JSType type,String value,boolean resultEqualsValue){
  return type == null ? null : type.visit(new RestrictByOneTypeOfResultVisitor(value,resultEqualsValue));
}","/** 
 * Returns a version of   {@code type} that is restricted by some knowledgeabout the result of the  {@code typeof} operation.<p> The behavior of the  {@code typeof} operator can be summarized by thefollowing table: <table> <tr><th>type</th><th>result</th></tr> <tr><td> {@code undefined}</td><td>""undefined""</td></tr> <tr><td>  {@code null}</td><td>""object""</td></tr> <tr><td>  {@code boolean}</td><td>""boolean""</td></tr> <tr><td>  {@code number}</td><td>""number""</td></tr> <tr><td>  {@code string}</td><td>""string""</td></tr> <tr><td>  {@code Object} (which doesn't implement [[Call]])</td><td>""object""</td></tr> <tr><td> {@code Object} (which implements [[Call]])</td><td>""function""</td></tr> </table>
 * @param type the type to restrict
 * @param value A value known to be equal or not equal to the result of the{@code typeof} operation
 * @param resultEqualsValue {@code true} if the {@code typeOf} result is knownto equal  {@code value};   {@code false} if it is known <em>not</em> toequal  {@code value}
 * @return the restricted type or null if no version of the type matches therestriction
 */
JSType getRestrictedByTypeOfResult(JSType type,String value,boolean resultEqualsValue){
  if (type == null) {
    if (resultEqualsValue) {
      JSType result=getNativeTypeForTypeOf(value);
      return result == null ? getNativeType(UNKNOWN_TYPE) : result;
    }
 else {
      return null;
    }
  }
  return type.visit(new RestrictByOneTypeOfResultVisitor(value,resultEqualsValue));
}",0.9234073013600572
28222,"/** 
 * Declares a refined type in   {@code scope} for the name represented by{@code node}. It must be possible to refine the type of the given node in the given scope, as determined by   {@link #getTypeIfRefinable}.
 */
protected void declareNameInScope(FlowScope scope,Node node,JSType type){
switch (node.getType()) {
case Token.NAME:
    scope.inferSlotType(node.getString(),type);
  break;
case Token.GETPROP:
String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(qualifiedName,origType,type);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","/** 
 * Declares a refined type in   {@code scope} for the name represented by{@code node}. It must be possible to refine the type of the given node in the given scope, as determined by   {@link #getTypeIfRefinable}.
 */
protected void declareNameInScope(FlowScope scope,Node node,JSType type){
switch (node.getType()) {
case Token.NAME:
    scope.inferSlotType(node.getString(),type);
  break;
case Token.GETPROP:
String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(qualifiedName,origType,type);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + node.toStringTree());
}
}",0.9852744310575636
28223,"@Override protected JSType caseTopType(JSType topType){
  if (resultEqualsValue) {
    if (value.equals(""String_Node_Str"")) {
      return getNativeType(NUMBER_TYPE);
    }
 else     if (value.equals(""String_Node_Str"")) {
      return getNativeType(BOOLEAN_TYPE);
    }
 else     if (value.equals(""String_Node_Str"")) {
      return getNativeType(STRING_TYPE);
    }
 else     if (value.equals(""String_Node_Str"")) {
      return getNativeType(VOID_TYPE);
    }
 else     if (value.equals(""String_Node_Str"")) {
      return getNativeType(U2U_CONSTRUCTOR_TYPE);
    }
  }
  return topType;
}","@Override protected JSType caseTopType(JSType topType){
  JSType result=topType;
  if (resultEqualsValue) {
    JSType typeByName=getNativeTypeForTypeOf(value);
    if (typeByName != null) {
      result=typeByName;
    }
  }
  return result;
}",0.2716346153846153
28224,"public JSType apply(TypeRestriction p){
  Visitor<JSType> visitor=p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor;
  return p.type == null ? null : p.type.visit(visitor);
}","public JSType apply(TypeRestriction p){
  if (p.type == null) {
    return p.outcome ? getNativeType(OBJECT_TYPE) : null;
  }
  Visitor<JSType> visitor=p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor;
  return p.type.visit(visitor);
}",0.75
28225,"public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,FlowScope blindScope,boolean outcome){
  if (condition.getType() == CALL && condition.getChildCount() == 2) {
    Node callee=condition.getFirstChild();
    Node param=condition.getLastChild();
    if (callee.getType() == GETPROP) {
      JSType paramType=getTypeIfRefinable(param,blindScope);
      if (paramType != null) {
        Node left=callee.getFirstChild();
        Node right=callee.getLastChild();
        if (left.getType() == NAME && ""String_Node_Str"".equals(left.getString()) && right.getType() == STRING) {
          Function<TypeRestriction,JSType> restricter=restricters.get(right.getString());
          if (restricter != null) {
            return restrictParameter(param,paramType,blindScope,restricter,outcome);
          }
        }
      }
    }
  }
  return nextPreciserScopeKnowingConditionOutcome(condition,blindScope,outcome);
}","@Override public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,FlowScope blindScope,boolean outcome){
  if (condition.getType() == CALL && condition.getChildCount() == 2) {
    Node callee=condition.getFirstChild();
    Node param=condition.getLastChild();
    if (callee.getType() == GETPROP && param.isQualifiedName()) {
      JSType paramType=getTypeIfRefinable(param,blindScope);
      Node left=callee.getFirstChild();
      Node right=callee.getLastChild();
      if (left.getType() == NAME && ""String_Node_Str"".equals(left.getString()) && right.getType() == STRING) {
        Function<TypeRestriction,JSType> restricter=restricters.get(right.getString());
        if (restricter != null) {
          return restrictParameter(param,paramType,blindScope,restricter,outcome);
        }
      }
    }
  }
  return nextPreciserScopeKnowingConditionOutcome(condition,blindScope,outcome);
}",0.9498910675381264
28226,"/** 
 * Creates a   {@link ClosureReverseAbstractInterpreter}.
 */
ClosureReverseAbstractInterpreter(CodingConvention convention,final JSTypeRegistry typeRegistry){
  super(convention,typeRegistry);
  this.restricters=new ImmutableMap.Builder<String,Function<TypeRestriction,JSType>>().put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getRestrictedWithoutUndefined(p.type);
      }
 else {
        return null;
      }
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getNativeType(NULL_TYPE);
      }
 else {
        return getRestrictedWithoutNull(p.type);
      }
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.type));
      }
 else {
        return null;
      }
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      Visitor<JSType> visitor=p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor;
      return p.type == null ? null : p.type.visit(visitor);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      Visitor<JSType> visitor=p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor;
      return p.type == null ? null : p.type.visit(visitor);
    }
  }
).build();
}","/** 
 * Creates a   {@link ClosureReverseAbstractInterpreter}.
 */
ClosureReverseAbstractInterpreter(CodingConvention convention,final JSTypeRegistry typeRegistry){
  super(convention,typeRegistry);
  this.restricters=new ImmutableMap.Builder<String,Function<TypeRestriction,JSType>>().put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getRestrictedWithoutUndefined(p.type);
      }
 else {
        return null;
      }
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getNativeType(NULL_TYPE);
      }
 else {
        return getRestrictedWithoutNull(p.type);
      }
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.type));
      }
 else {
        return null;
      }
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,""String_Node_Str"",p.outcome);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.type == null) {
        return p.outcome ? getNativeType(ARRAY_TYPE) : null;
      }
      Visitor<JSType> visitor=p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor;
      return p.type.visit(visitor);
    }
  }
).put(""String_Node_Str"",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.type == null) {
        return p.outcome ? getNativeType(OBJECT_TYPE) : null;
      }
      Visitor<JSType> visitor=p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor;
      return p.type.visit(visitor);
    }
  }
).build();
}",0.9040656919687564
28227,"private FlowScope traverseName(Node n,FlowScope scope){
  String varName=n.getString();
  Node value=n.getFirstChild();
  JSType type=n.getJSType();
  if (value != null) {
    scope=traverse(value,scope);
    updateScopeForTypeChange(scope,n,n.getJSType(),getJSType(value));
    return scope;
  }
 else {
    StaticSlot<JSType> var=scope.getSlot(varName);
    if (var != null && !(var.isTypeInferred() && unflowableVarNames.contains(varName))) {
      type=var.getType();
      if (type == null) {
        type=getNativeType(UNKNOWN_TYPE);
      }
    }
  }
  n.setJSType(type);
  return scope;
}","private FlowScope traverseName(Node n,FlowScope scope){
  String varName=n.getString();
  Node value=n.getFirstChild();
  JSType type=n.getJSType();
  if (value != null) {
    scope=traverse(value,scope);
    updateScopeForTypeChange(scope,n,n.getJSType(),getJSType(value));
    return scope;
  }
 else {
    StaticSlot<JSType> var=scope.getSlot(varName);
    if (var != null) {
      boolean isInferred=var.isTypeInferred();
      boolean unflowable=isInferred && unflowableVarNames.contains(varName);
      boolean nonLocalInferredSlot=isInferred && syntacticScope.getParent() != null && var == syntacticScope.getParent().getSlot(varName);
      if (!unflowable && !nonLocalInferredSlot) {
        type=var.getType();
        if (type == null) {
          type=getNativeType(UNKNOWN_TYPE);
        }
      }
    }
  }
  n.setJSType(type);
  return scope;
}",0.7359009628610729
28228,"/** 
 * Uses the Y scale factor to calculate the min possible height.
 */
@Override public int getMinHeightPlusMargin(){
  return (int)((getOriginalHeight() / getYScaleFactor()) + getMarginBottom());
}","/** 
 * Uses the Y scale factor to calculate the min possible height.
 */
@Override public int getMinHeightPlusMargin(){
  return (int)(getOriginalHeight() * (1 - 1 / getYScaleFactor()) + getMarginBottom());
}",0.975609756097561
28229,"/** 
 * Override method used to apply different scale and alpha effects while the view is being dragged.
 * @param left position.
 * @param top position.
 * @param dx change in X position from the last call.
 * @param dy change in Y position from the last call.
 */
@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  if (draggableView.isDragViewAtBottom()) {
    draggableView.changeDragViewViewAlpha();
  }
 else {
    draggableView.restoreAlpha();
    draggableView.changeDragViewScale();
    draggableView.changeDragViewPosition();
    draggableView.changeSecondViewAlpha();
    draggableView.changeSecondViewPosition();
    draggableView.changeBackgroundAlpha();
  }
}","/** 
 * Override method used to apply different scale and alpha effects while the view is being dragged.
 * @param left position.
 * @param top position.
 * @param dx change in X position from the last call.
 * @param dy change in Y position from the last call.
 */
@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  if (0 == top) {
    draggableView.requestLayout();
  }
  if (draggableView.isDragViewAtBottom()) {
    draggableView.changeDragViewViewAlpha();
  }
 else {
    draggableView.restoreAlpha();
    draggableView.changeDragViewScale();
    draggableView.changeDragViewPosition();
    draggableView.changeSecondViewAlpha();
    draggableView.changeSecondViewPosition();
    draggableView.changeBackgroundAlpha();
  }
}",0.9617706237424548
28230,"/** 
 * Close the view to the right, to the left or minimize it using the draggableView position and the x axis velocity.
 */
private void triggerOnReleaseActionsWhileHorizontalDrag(float xVel){
  if (xVel < 0 && xVel <= X_MIN_VELOCITY) {
    draggableView.closeToLeft();
  }
 else   if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
    draggableView.closeToRight();
  }
 else {
    if (draggableView.isNextToLeftBound()) {
      draggableView.closeToLeft();
    }
 else     if (draggableView.isNextToRightBound()) {
      draggableView.closeToRight();
    }
 else {
      draggableView.minimize();
    }
  }
}","/** 
 * Close the view to the right, to the left or minimize it using the draggableView position and the x axis velocity.
 */
private void triggerOnReleaseActionsWhileHorizontalDrag(float xVel){
  if (xVel < 0 && xVel <= -X_MIN_VELOCITY) {
    draggableView.closeToLeft();
  }
 else   if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
    draggableView.closeToRight();
  }
 else {
    if (draggableView.isNextToLeftBound()) {
      draggableView.closeToLeft();
    }
 else     if (draggableView.isNextToRightBound()) {
      draggableView.closeToRight();
    }
 else {
      draggableView.minimize();
    }
  }
}",0.9991714995857498
28231,"/** 
 * @return true if the left position of the view is to the left of the twenty five percent ofthe parent width.
 */
@Override public boolean isNextToLeftBound(){
  return (getView().getLeft() - getMarginRight()) < getParentView().getWidth() * 0.25;
}","/** 
 * @return true if the right position of the view is to the left of sixty percent of the parentwidth.
 */
@Override public boolean isNextToLeftBound(){
  return (getView().getRight() - getMarginRight()) < getParentView().getWidth() * 0.6;
}",0.7454909819639278
28232,"/** 
 * @return true if the left position of the view is to the right of the twenty five percent ofthe parent width.
 */
@Override public boolean isNextToRightBound(){
  return (getView().getLeft() - getMarginRight()) > getParentView().getWidth() * 0.25;
}","/** 
 * @return true if the right position of the view is to the right of the one hundred twenty fivefive percent of the parent view width.
 */
@Override public boolean isNextToRightBound(){
  return (getView().getRight() - getMarginRight()) > getParentView().getWidth() * 1.25;
}",0.8917910447761194
28233,"/** 
 * Close the view to the right, to the left or minimize it using the draggableView position and the x axis velocity.
 * @param xVel
 */
private void triggerOnReleaseActionsWhileHorizontalDrag(float xVel){
  if (xVel < 0 && xVel <= X_MIN_VELOCITY) {
    draggableView.closeToLeft();
  }
 else   if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
    draggableView.closeToRight();
  }
 else {
    if (draggableView.isNextToLeftBound()) {
      draggableView.closeToLeft();
    }
 else     if (draggableView.isNextToRightBound()) {
      draggableView.closeToRight();
    }
 else {
      draggableView.minimize();
    }
  }
}","/** 
 * Close the view to the right, to the left or minimize it using the draggableView position and the x axis velocity.
 * @param xVel
 */
private void triggerOnReleaseActionsWhileHorizontalDrag(float xVel){
  if (xVel < 0 && xVel <= -X_MIN_VELOCITY) {
    draggableView.closeToLeft();
  }
 else   if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
    draggableView.closeToRight();
  }
 else {
    if (draggableView.isNextToLeftBound()) {
      draggableView.closeToLeft();
    }
 else     if (draggableView.isNextToRightBound()) {
      draggableView.closeToRight();
    }
 else {
      draggableView.minimize();
    }
  }
}",0.9991915925626516
28234,"/** 
 * Override method to configure the dragged view and secondView layout properly.
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int newTop=(int)transformer.getViewHeight();
  int lastTopPosition=transformer.getLastTopPosition();
  int lastLeftPosition=transformer.getLastLeftPosition();
  int newRight=transformer.getLastRightPosition();
  int newBottom=lastTopPosition + newTop;
  dragView.layout(lastLeftPosition,lastTopPosition,newRight,newBottom);
  secondView.layout(0,(int)transformer.getOriginalHeight(),right,getHeight());
}","/** 
 * Override method to configure the dragged view and secondView layout properly.
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  if (isInEditMode())   super.onLayout(changed,left,top,right,bottom);
 else   if (isDragViewAtTop()) {
    dragView.layout(left,top,right,(int)transformer.getOriginalHeight());
    secondView.layout(left,(int)transformer.getOriginalHeight(),right,bottom);
    ViewHelper.setY(dragView,top);
    ViewHelper.setY(secondView,transformer.getOriginalHeight());
  }
}",0.3794326241134751
28235,"/** 
 * Override method used to configure the horizontal drag. Restrict the motion of the dragged child view along the horizontal axis.
 * @param child child view being dragged.
 * @param left attempted motion along the X axis.
 * @param dx proposed change in position for left.
 * @return the new clamped position for left.
 */
@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  int newLeft=draggedView.getLeft();
  if ((draggableView.isMinimized() && Math.abs(dx) > MINIMUN_DX_FOR_HORIZONTAL_DRAG) || (draggableView.isDragViewAtBottom() && !draggableView.isDragViewAtRight())) {
    newLeft=left;
  }
  return newLeft;
}","/** 
 * Override method used to configure the horizontal drag. Restrict the motion of the dragged child view along the horizontal axis.
 * @param child child view being dragged.
 * @param left attempted motion along the X axis.
 * @param dx proposed change in position for left.
 * @return the new clamped position for left.
 */
@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  int newLeft=draggedView.getLeft();
  if ((draggableView.isMinimized() && Math.abs(dx) > MINIMUM_DX_FOR_HORIZONTAL_DRAG) || (draggableView.isDragViewAtBottom() && !draggableView.isDragViewAtRight())) {
    newLeft=left;
  }
  return newLeft;
}",0.998463901689708
28236,"/** 
 * Close the view to the right, to the left or minimize it using the draggableView position and the x axis velocity.
 */
private void triggerOnReleaseActionsWhileHorizontalDrag(float xVel){
  if (xVel < 0 && xVel <= X_MIN_VELOCITY) {
    draggableView.closeToLeft();
  }
 else   if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
    draggableView.closeToRight();
  }
 else {
    if (draggableView.isNextToLeftBound()) {
      draggableView.closeToLeft();
    }
 else     if (draggableView.isNextToRightBound()) {
      draggableView.closeToRight();
    }
 else {
      draggableView.minimize();
    }
  }
}","/** 
 * Close the view to the right, to the left or minimize it using the draggableView position and the x axis velocity.
 */
private void triggerOnReleaseActionsWhileHorizontalDrag(float xVel){
  if (xVel < 0 && xVel <= -X_MIN_VELOCITY) {
    draggableView.closeToLeft();
  }
 else   if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
    draggableView.closeToRight();
  }
 else {
    if (draggableView.isNextToLeftBound()) {
      draggableView.closeToLeft();
    }
 else     if (draggableView.isNextToRightBound()) {
      draggableView.closeToRight();
    }
 else {
      draggableView.minimize();
    }
  }
}",0.9991714995857498
28237,"/** 
 * Realize an smooth slide to an slide offset passed as argument. This method is the base of maximize, minimize and close methods.
 * @param slideOffset to apply
 * @return true if the view is slided.
 */
private boolean smoothSlideTo(float slideOffset){
  final int topBound=getPaddingTop();
  int y=(int)(topBound + slideOffset * getVerticalDragRange());
  int x=(int)(slideOffset * (getWidth() - transformer.getMinWidth()));
  if (viewDragHelper.smoothSlideViewTo(dragView,x,y)) {
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Realize an smooth slide to an slide offset passed as argument. This method is the base of maximize, minimize and close methods.
 * @param slideOffset to apply
 * @return true if the view is slided.
 */
private boolean smoothSlideTo(float slideOffset){
  final int topBound=getPaddingTop();
  int x=(int)(slideOffset * (getWidth() - transformer.getMinWidth()));
  int y=(int)(topBound + slideOffset * getVerticalDragRange());
  if (viewDragHelper.smoothSlideViewTo(dragView,x,y)) {
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}",0.8765217391304347
28238,"/** 
 * Modify secondView position to be always below dragged view.
 */
void changeSecondViewPosition(){
  ViewHelper.setY(secondView,dragView.getBottom());
  ViewHelper.setX(secondView,dragView.getLeft());
}","/** 
 * Modify secondView position to be always below dragged view.
 */
void changeSecondViewPosition(){
  ViewHelper.setY(secondView,dragView.getBottom());
}",0.8633879781420765
28239,"@Override public void updateWidth(float verticalDragOffset){
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)getView().getLayoutParams();
  int newWidth=(int)(getOriginalWidth() * (1 - verticalDragOffset / getxScaleFactor()));
  params.width=newWidth;
  getView().setLayoutParams(params);
}","@Override public void updateWidth(float verticalDragOffset){
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)getView().getLayoutParams();
  int newWidth=(int)(getOriginalWidth() * (1 - verticalDragOffset / getxScaleFactor()));
  params.width=newWidth;
  setLastLeftPosition((int)(getOriginalWidth() - newWidth));
  getView().setLayoutParams(params);
}",0.9098966026587888
28240,"/** 
 * Override method to configure the dragged view and secondView layout properly.
 * @param changed
 * @param left
 * @param top
 * @param right
 * @param bottom
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int newTop=(int)transformer.getViewHeight();
  int lastTopPosition=transformer.getLastTopPosition();
  int lastLeftPosition=transformer.getLastLeftPosition();
  int newRight=transformer.getLastRightPosition();
  dragView.layout(lastLeftPosition,lastTopPosition,newRight,lastTopPosition + newTop);
  secondView.layout(0,lastTopPosition + newTop,right,lastTopPosition + bottom);
}","/** 
 * Override method to configure the dragged view and secondView layout properly.
 * @param changed
 * @param left
 * @param top
 * @param right
 * @param bottom
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int newTop=(int)transformer.getViewHeight();
  int lastTopPosition=transformer.getLastTopPosition();
  int lastLeftPosition=transformer.getLastLeftPosition();
  int newRight=transformer.getLastRightPosition();
  int newBottom=lastTopPosition + newTop;
  dragView.layout(lastLeftPosition,lastTopPosition,newRight,newBottom);
  secondView.layout(0,newBottom,right,lastTopPosition + bottom);
}",0.8575851393188855
28241,"/** 
 * Override method used to apply different scale and alpha effects while the view is being dragged.
 * @param changedView
 * @param left        position.
 * @param top         position.
 * @param dx          change in X position from the last call.
 * @param dy          change in Y position from the last call.
 */
@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  draggableView.updateLastDragViewPosition(top,left);
  if (draggableView.isDragViewAtBottom()) {
    draggableView.changeDragViewViewAlpha();
  }
 else {
    draggableView.changeDragViewScale();
    draggableView.changeDragViewPosition();
    draggableView.changeSecondViewAlpha();
    draggableView.changeSecondViewPosition();
    draggableView.changeBackgroundAlpha();
  }
  draggableView.invalidate();
}","/** 
 * Override method used to apply different scale and alpha effects while the view is being dragged.
 * @param changedView
 * @param left        position.
 * @param top         position.
 * @param dx          change in X position from the last call.
 * @param dy          change in Y position from the last call.
 */
@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  draggableView.updateLastDragViewPosition(top,left);
  if (draggableView.isDragViewAtBottom()) {
    draggableView.changeDragViewViewAlpha();
  }
 else {
    draggableView.restoreAlpha();
    draggableView.changeDragViewScale();
    draggableView.changeDragViewPosition();
    draggableView.changeSecondViewAlpha();
    draggableView.changeSecondViewPosition();
    draggableView.changeBackgroundAlpha();
  }
}",0.9611650485436892
28242,"boolean isNextToRightBound(){
  return (dragView.getLeft() - getDragViewMarginRight()) > getWidth() * 0.25;
}","boolean isNextToRightBound(){
  return (dragView.getLeft() - getDragViewMarginRight()) > getWidth() * QUARTER;
}",0.9502262443438914
28243,"boolean isHeaderAboveTheMiddle(){
  int viewHeight=getHeight();
  float viewHeaderY=ViewHelper.getY(dragView) + (dragView.getHeight() / 2);
  return viewHeaderY < (viewHeight * 0.5f);
}","boolean isHeaderAboveTheMiddle(){
  int viewHeight=getHeight();
  float viewHeaderY=ViewHelper.getY(dragView) + (dragView.getHeight() * HALF);
  return viewHeaderY < (viewHeight * HALF);
}",0.9597855227882036
28244,"void changeBackgroundAlpha(){
  Drawable background=getBackground();
  if (background != null) {
    int newAlpha=(int)(100 * (1 - getVerticalDragOffset()));
    background.setAlpha(newAlpha);
  }
}","void changeBackgroundAlpha(){
  Drawable background=getBackground();
  if (background != null) {
    int newAlpha=(int)(ONE_HUNDRED * (1 - getVerticalDragOffset()));
    background.setAlpha(newAlpha);
  }
}",0.9653465346534652
28245,"boolean isDragViewAtTop(){
  return dragView.getTop() == 0;
}","boolean isDragViewAtTop(){
  return dragView.getTop() == ZERO;
}",0.96
28246,"boolean isNextToLeftBound(){
  return (dragView.getRight() - getDragViewMarginRight()) < getWidth() / 2;
}","boolean isNextToLeftBound(){
  return (dragView.getRight() - getDragViewMarginRight()) < getWidth() * HALF;
}",0.9674418604651164
28247,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int topViewHeight=this.topViewHeight == DEFAULT_TOP_VIEW_HEIGHT ? dragView.getMeasuredHeight() : (int)this.topViewHeight;
  dragView.layout(lastLeftPosition,lastTopPosition,lastLeftPosition + dragView.getMeasuredWidth(),lastTopPosition + topViewHeight);
  secondView.layout(0,lastTopPosition + topViewHeight,right,lastTopPosition + bottom);
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int newTop=this.topViewHeight == DEFAULT_TOP_VIEW_HEIGHT ? dragView.getMeasuredHeight() : (int)this.topViewHeight;
  dragView.layout(lastLeftPosition,lastTopPosition,lastLeftPosition + dragView.getMeasuredWidth(),lastTopPosition + newTop);
  secondView.layout(0,lastTopPosition + newTop,right,lastTopPosition + bottom);
}",0.9327036599763872
28248,"@Override public boolean tryCaptureView(View view,int pointerId){
  return view == capturedView;
}","@Override public boolean tryCaptureView(View view,int pointerId){
  return view.equals(capturedView);
}",0.9353233830845772
28249,"@Override public int clampViewPositionVertical(View child,int top,int dy){
  int newTop=draggableView.getHeight() - capturedView.getHeight();
  if (draggableView.isMinimized() && (dy >= MINIMUM_DY_FOR_VERTICAL_DRAG || dy >= -MINIMUM_DY_FOR_VERTICAL_DRAG) || (!draggableView.isMinimized() && !draggableView.isDragViewAtBottom())) {
    final int topBound=draggableView.getPaddingTop();
    final int bottomBound=draggableView.getHeight() - child.getHeight() - child.getPaddingBottom();
    newTop=Math.min(Math.max(top,topBound),bottomBound);
  }
  return newTop;
}","@Override public int clampViewPositionVertical(View child,int top,int dy){
  int newTop=draggableView.getHeight() - capturedView.getHeight();
  if (draggableView.isMinimized() && Math.abs(dy) >= MINIMUM_DY_FOR_VERTICAL_DRAG || (!draggableView.isMinimized() && !draggableView.isDragViewAtBottom())) {
    final int topBound=draggableView.getPaddingTop();
    final int bottomBound=draggableView.getHeight() - child.getHeight() - child.getPaddingBottom();
    newTop=Math.min(Math.max(top,topBound),bottomBound);
  }
  return newTop;
}",0.9553327256153143
28250,"@Override public void onViewReleased(View releasedChild,float xVel,float yVel){
  super.onViewReleased(releasedChild,xVel,yVel);
  if (draggableView.isDragViewAtBottom() && !draggableView.isDragViewAtRight()) {
    if (xVel < 0 && xVel <= X_MIN_VELOCITY) {
      draggableView.closeToLeft();
    }
 else     if (xVel > 0 && xVel >= X_MIN_VELOCITY) {
      draggableView.closeToRight();
    }
 else {
      if (draggableView.isNextToLeftBound()) {
        draggableView.closeToLeft();
      }
 else       if (draggableView.isNextToRightBound()) {
        draggableView.closeToRight();
      }
 else {
        draggableView.minimize();
      }
    }
  }
 else {
    if (yVel < 0 && yVel <= -Y_MIN_VELOCITY) {
      draggableView.maximize();
    }
 else     if (yVel > 0 && yVel >= Y_MIN_VELOCITY) {
      draggableView.minimize();
    }
 else {
      if (draggableView.isHeaderAboveTheMiddle()) {
        draggableView.maximize();
      }
 else {
        draggableView.minimize();
      }
    }
  }
}","@Override public void onViewReleased(View releasedChild,float xVel,float yVel){
  super.onViewReleased(releasedChild,xVel,yVel);
  if (draggableView.isDragViewAtBottom() && !draggableView.isDragViewAtRight()) {
    triggerOnReleaseActionsWhileHorizontalDrag(xVel);
  }
 else {
    triggerOnReleaseActionsWhileVerticalDrag(yVel);
  }
}",0.3453453453453453
28251,"@Override public boolean onTouchEvent(MotionEvent ev){
  viewDragHelper.processTouchEvent(ev);
  final int x=(int)ev.getX();
  final int y=(int)ev.getY();
  boolean isDragViewHit=isViewHit(dragView,x,y);
  boolean isSecondViewHit=isViewHit(secondView,x,y);
  dragView.dispatchTouchEvent(ev);
  return isDragViewHit || isSecondViewHit;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  viewDragHelper.processTouchEvent(ev);
  boolean isDragViewHit=isViewHit(dragView,(int)ev.getX(),(int)ev.getY());
  boolean isSecondViewHit=isViewHit(secondView,(int)ev.getX(),(int)ev.getY());
  if (isMaximized()) {
    dragView.dispatchTouchEvent(ev);
  }
  return isDragViewHit || isSecondViewHit;
}",0.5137085137085137
28252,"private void recoverDraggablePanelState(Bundle savedInstanceState){
  final DraggablePanelState draggablePanelState=(DraggablePanelState)savedInstanceState.getSerializable(DRAGGABLE_PANEL_STATE);
  if (draggablePanelState == null) {
    draggablePanel.setVisibility(View.GONE);
    return;
  }
  Handler handler=new Handler();
switch (draggablePanelState) {
case MAXIMIZED:
    handler.postDelayed(new Runnable(){
      @Override public void run(){
        draggablePanel.maximize();
      }
    }
,50);
  break;
case MINIMIZED:
handler.postDelayed(new Runnable(){
  @Override public void run(){
    draggablePanel.minimize();
  }
}
,50);
break;
case CLOSED_AT_LEFT:
handler.postDelayed(new Runnable(){
@Override public void run(){
draggablePanel.setVisibility(View.GONE);
draggablePanel.closeToLeft();
}
}
,50);
break;
case CLOSED_AT_RIGHT:
handler.postDelayed(new Runnable(){
@Override public void run(){
draggablePanel.setVisibility(View.GONE);
draggablePanel.closeToRight();
}
}
,50);
break;
default :
draggablePanel.setVisibility(View.GONE);
break;
}
}","private void recoverDraggablePanelState(Bundle savedInstanceState){
  final DraggablePanelState draggablePanelState=(DraggablePanelState)savedInstanceState.getSerializable(DRAGGABLE_PANEL_STATE);
  if (draggablePanelState == null) {
    draggablePanel.setVisibility(View.GONE);
    return;
  }
  Handler handler=new Handler();
switch (draggablePanelState) {
case MAXIMIZED:
    handler.postDelayed(new Runnable(){
      @Override public void run(){
        draggablePanel.maximize();
      }
    }
,DELAY_MILLIS);
  break;
case MINIMIZED:
handler.postDelayed(new Runnable(){
  @Override public void run(){
    draggablePanel.minimize();
  }
}
,DELAY_MILLIS);
break;
case CLOSED_AT_LEFT:
handler.postDelayed(new Runnable(){
@Override public void run(){
draggablePanel.setVisibility(View.GONE);
draggablePanel.closeToLeft();
}
}
,DELAY_MILLIS);
break;
case CLOSED_AT_RIGHT:
handler.postDelayed(new Runnable(){
@Override public void run(){
draggablePanel.setVisibility(View.GONE);
draggablePanel.closeToRight();
}
}
,DELAY_MILLIS);
break;
default :
draggablePanel.setVisibility(View.GONE);
break;
}
}",0.9740018570102136
28253,"private void initializeListView(){
  lv_places.setAdapter(placesAdapter);
  lv_places.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      lastVideoLoadedPosition=position;
      showPlace(position);
    }
  }
);
}","private void initializeListView(){
  placesListView.setAdapter(placesAdapter);
  placesListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      lastVideoLoadedPosition=position;
      showPlace(position);
    }
  }
);
}",0.9339080459770116
28254,"private void initializeDraggablePanel(){
  draggablePanel.setFragmentManager(getSupportFragmentManager());
  draggablePanel.setTopFragment(placeFragment);
  draggablePanel.setBottomFragment(mapFragment);
  TypedValue typedValue=new TypedValue();
  getResources().getValue(R.dimen.x_scale_factor,typedValue,true);
  float xScaleFactor=typedValue.getFloat();
  typedValue=new TypedValue();
  getResources().getValue(R.dimen.y_scale_factor,typedValue,true);
  float yScaleFactor=typedValue.getFloat();
  draggablePanel.setXScaleFactor(xScaleFactor);
  draggablePanel.setyScaleFactor(yScaleFactor);
  draggablePanel.setTopViewHeight(getResources().getDimension(R.dimen.top_fragment_height));
  draggablePanel.setTopFragmentMarginRight(getResources().getDimension(R.dimen.top_fragment_margin));
  draggablePanel.setTopFragmentMarginBottom(getResources().getDimension(R.dimen.top_fragment_margin));
  draggablePanel.initializeView();
  draggablePanel.setVisibility(View.GONE);
}","private void initializeDraggablePanel() throws Resources.NotFoundException {
  draggablePanel.setFragmentManager(getSupportFragmentManager());
  draggablePanel.setTopFragment(placeFragment);
  draggablePanel.setBottomFragment(mapFragment);
  TypedValue typedValue=new TypedValue();
  getResources().getValue(R.dimen.x_scale_factor,typedValue,true);
  float xScaleFactor=typedValue.getFloat();
  typedValue=new TypedValue();
  getResources().getValue(R.dimen.y_scale_factor,typedValue,true);
  float yScaleFactor=typedValue.getFloat();
  draggablePanel.setXScaleFactor(xScaleFactor);
  draggablePanel.setyScaleFactor(yScaleFactor);
  draggablePanel.setTopViewHeight(getResources().getDimension(R.dimen.top_fragment_height));
  draggablePanel.setTopFragmentMarginRight(getResources().getDimension(R.dimen.top_fragment_margin));
  draggablePanel.setTopFragmentMarginBottom(getResources().getDimension(R.dimen.top_fragment_margin));
  draggablePanel.initializeView();
  draggablePanel.setVisibility(View.GONE);
}",0.9818181818181818
28255,"private void showPlace(int position){
  draggablePanel.setVisibility(View.VISIBLE);
  draggablePanel.maximize();
  PlaceViewModel placeViewModel=placesAdapter.getItem(position);
  placeFragment.showPlace(placeViewModel);
  mapFragment.getMap().clear();
  LatLng latitudeLongitude=new LatLng(placeViewModel.getLatitude(),placeViewModel.getLongitude());
  MarkerOptions marker=new MarkerOptions().position(latitudeLongitude);
  marker.title(placeViewModel.getName());
  marker.snippet(placeViewModel.getLatitude() + ""String_Node_Str"" + placeViewModel.getLongitude());
  mapFragment.getMap().addMarker(marker);
  mapFragment.getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(latitudeLongitude,10f));
}","private void showPlace(int position){
  draggablePanel.setVisibility(View.VISIBLE);
  draggablePanel.maximize();
  PlaceViewModel placeViewModel=placesAdapter.getItem(position);
  placeFragment.showPlace(placeViewModel);
  mapFragment.getMap().clear();
  LatLng latitudeLongitude=new LatLng(placeViewModel.getLatitude(),placeViewModel.getLongitude());
  MarkerOptions marker=new MarkerOptions().position(latitudeLongitude);
  marker.title(placeViewModel.getName());
  marker.snippet(placeViewModel.getLatitude() + ""String_Node_Str"" + placeViewModel.getLongitude());
  mapFragment.getMap().addMarker(marker);
  mapFragment.getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(latitudeLongitude,ZOOM));
}",0.995017793594306
28256,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  dragView.layout(lastLeftPosition,lastTopPosition,lastLeftPosition + dragView.getMeasuredWidth(),(int)(lastTopPosition + topViewHeight));
  secondView.layout(0,(int)(lastTopPosition + topViewHeight),right,lastTopPosition + bottom);
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int topViewHeight=this.topViewHeight == DEFAULT_TOP_VIEW_HEIGHT ? dragView.getMeasuredHeight() : (int)this.topViewHeight;
  dragView.layout(lastLeftPosition,lastTopPosition,lastLeftPosition + dragView.getMeasuredWidth(),lastTopPosition + topViewHeight);
  secondView.layout(0,lastTopPosition + topViewHeight,right,lastTopPosition + bottom);
}",0.4828496042216358
28257,"private void initializeDraggableView(){
  Handler handler=new Handler();
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      draggableView.setVisibility(View.GONE);
      draggableView.closeToRight();
    }
  }
,10);
}","private void initializeDraggableView(){
  Handler handler=new Handler();
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      draggableView.setVisibility(View.GONE);
      draggableView.closeToRight();
    }
  }
,DELAY_MILLIS);
}",0.9717741935483872
28258,"private void renderEpisodes(final TvShowViewModel tvShow){
  List<Renderer<EpisodeViewModel>> episodeRenderers=new LinkedList<Renderer<EpisodeViewModel>>();
  episodeRenderers.add(new EpisodeRenderer(this));
  EpisodeRendererBuilder episodeRendererBuilder=new EpisodeRendererBuilder(episodeRenderers);
  EpisodeRendererAdapter episodesAdapter=new EpisodeRendererAdapter(getLayoutInflater(),episodeRendererBuilder,tvShow.getEpisodes());
  lv_episodes.setAdapter(episodesAdapter);
}","private void renderEpisodes(final TvShowViewModel tvShow){
  List<Renderer<EpisodeViewModel>> episodeRenderers=new LinkedList<Renderer<EpisodeViewModel>>();
  episodeRenderers.add(new EpisodeRenderer());
  EpisodeRendererBuilder episodeRendererBuilder=new EpisodeRendererBuilder(episodeRenderers);
  EpisodeRendererAdapter episodesAdapter=new EpisodeRendererAdapter(getLayoutInflater(),episodeRendererBuilder,tvShow.getEpisodes());
  lv_episodes.setAdapter(episodesAdapter);
}",0.99581589958159
28259,"@Override protected void render(){
  EpisodeViewModel episode=getContent();
  tv_episode_number.setText(String.format(""String_Node_Str"",position + 1));
  tv_episode_title.setText(episode.getTitle());
  tv_episode_publish_date.setText(episode.getPublishDate());
}","@Override protected void render(){
  EpisodeViewModel episode=getContent();
  episodeNumberTextView.setText(String.format(""String_Node_Str"",position + 1));
  episodeTitleTextView.setText(episode.getTitle());
  episodeDateTextView.setText(episode.getPublishDate());
}",0.6893939393939394
28260,"@Override protected void render(){
  TvShowViewModel tvShow=getContent();
  Picasso.with(context).load(tvShow.getPoster()).placeholder(R.drawable.tv_show_placeholder).into(iv_thumbnail);
  tv_title.setText(tvShow.getTitle().toUpperCase());
  tv_seasons_counter.setText(tvShow.getNumberOfSeasons() + ""String_Node_Str"");
}","@Override protected void render(){
  TvShowViewModel tvShow=getContent();
  Picasso.with(context).load(tvShow.getPoster()).placeholder(R.drawable.tv_show_placeholder).into(thumbnailImageView);
  titleTextView.setText(tvShow.getTitle().toUpperCase());
  seasonsCounterTextView.setText(tvShow.getNumberOfSeasons() + ""String_Node_Str"");
}",0.9099236641221374
28261,"private void recoverDraggablePanelState(Bundle savedInstanceState){
  final DraggablePanelState draggablePanelState=(DraggablePanelState)savedInstanceState.getSerializable(DRAGGABLE_PANEL_STATE);
  if (draggablePanelState == null) {
    draggablePanel.setVisibility(View.GONE);
    return;
  }
  Handler handler=new Handler();
switch (draggablePanelState) {
case MAXIMIZED:
    handler.postDelayed(new Runnable(){
      @Override public void run(){
        draggablePanel.maximize();
      }
    }
,DELAY_MILLIS);
  break;
case MINIMIZED:
handler.postDelayed(new Runnable(){
  @Override public void run(){
    draggablePanel.minimize();
  }
}
,DELAY_MILLIS);
break;
case CLOSED_AT_LEFT:
handler.postDelayed(new Runnable(){
@Override public void run(){
draggablePanel.setVisibility(View.GONE);
draggablePanel.closeToLeft();
}
}
,DELAY_MILLIS);
break;
case CLOSED_AT_RIGHT:
handler.postDelayed(new Runnable(){
@Override public void run(){
draggablePanel.setVisibility(View.GONE);
draggablePanel.closeToRight();
}
}
,DELAY_MILLIS);
break;
default :
draggablePanel.setVisibility(View.GONE);
break;
}
}","private void recoverDraggablePanelState(Bundle savedInstanceState){
  final DraggablePanelState draggablePanelState=(DraggablePanelState)savedInstanceState.getSerializable(DRAGGABLE_PANEL_STATE);
  if (draggablePanelState == null) {
    draggablePanel.setVisibility(View.GONE);
    return;
  }
  updateDraggablePanelStateDelayed(draggablePanelState);
}",0.4140786749482402
28262,"private void renderEpisodesHeader(TvShowViewModel tvShow){
  lv_episodes.removeHeaderView(header);
  header=(TextView)getLayoutInflater().inflate(R.layout.episode_header,null);
  header.setText(tvShow.getTitle().toUpperCase() + ""String_Node_Str"");
  lv_episodes.setAdapter(null);
  lv_episodes.addHeaderView(header);
  lv_episodes.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      if (tvShowSelected != null) {
        EpisodeViewModel episodeViewModel=tvShowSelected.getEpisodes().get(position - 1);
        Toast.makeText(getBaseContext(),tvShowSelected.getTitle() + ""String_Node_Str"" + episodeViewModel.getTitle(),Toast.LENGTH_LONG).show();
      }
    }
  }
);
}","private void renderEpisodesHeader(TvShowViewModel tvShow){
  episodesListView.removeHeaderView(header);
  header=(TextView)getLayoutInflater().inflate(R.layout.episode_header,null);
  header.setText(tvShow.getTitle().toUpperCase() + ""String_Node_Str"");
  episodesListView.setAdapter(null);
  episodesListView.addHeaderView(header);
  episodesListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      if (tvShowSelected != null) {
        EpisodeViewModel episodeViewModel=tvShowSelected.getEpisodes().get(position - 1);
        Toast.makeText(getBaseContext(),tvShowSelected.getTitle() + ""String_Node_Str"" + episodeViewModel.getTitle(),Toast.LENGTH_LONG).show();
      }
    }
  }
);
}",0.9331683168316832
28263,"private void initializeGridView(){
  gv_tv_shows.setAdapter(adapter);
  gv_tv_shows.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      TvShowViewModel tvShow=adapter.getItem(position);
      tvShowSelected=tvShow;
      Picasso.with(getBaseContext()).load(tvShow.getFanArt()).placeholder(R.drawable.tv_show_placeholder).into(iv_fan_art);
      renderEpisodesHeader(tvShow);
      renderEpisodes(tvShow);
      draggableView.setVisibility(View.VISIBLE);
      draggableView.maximize();
    }
  }
);
}","private void initializeGridView(){
  tvShowsGridView.setAdapter(adapter);
  tvShowsGridView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      TvShowViewModel tvShow=adapter.getItem(position);
      tvShowSelected=tvShow;
      Picasso.with(getBaseContext()).load(tvShow.getFanArt()).placeholder(R.drawable.tv_show_placeholder).into(fanArtImageView);
      renderEpisodesHeader(tvShow);
      renderEpisodes(tvShow);
      draggableView.setVisibility(View.VISIBLE);
      draggableView.maximize();
    }
  }
);
}",0.9442262372348782
28264,"@Override public void onClosedToRight(){
  tvShowSelected=null;
  getSupportActionBar().setTitle(R.string.tv_shows_sample_activity_title);
}","@Override public void onClosedToRight(){
  resetActionBarTitle();
}",0.6280193236714976
28265,"@Override public void onClosedToLeft(){
  tvShowSelected=null;
  getSupportActionBar().setTitle(R.string.tv_shows_sample_activity_title);
}","@Override public void onClosedToLeft(){
  resetActionBarTitle();
}",0.624390243902439
28266,"@Override public void onMaximized(){
  if (tvShowSelected != null) {
    getSupportActionBar().setTitle(tvShowSelected.getTitle());
  }
}","@Override public void onMaximized(){
  updateActionBarTitle();
}",0.5970149253731343
28267,"@Override public void onMinimized(){
  if (tvShowSelected != null) {
    getSupportActionBar().setTitle(tvShowSelected.getTitle());
  }
}","@Override public void onMinimized(){
  updateActionBarTitle();
}",0.5970149253731343
28268,"private void hookListeners(){
  draggableView.setDraggableListener(new DraggableListener(){
    @Override public void onMaximized(){
      if (tvShowSelected != null) {
        getSupportActionBar().setTitle(tvShowSelected.getTitle());
      }
    }
    @Override public void onMinimized(){
      if (tvShowSelected != null) {
        getSupportActionBar().setTitle(tvShowSelected.getTitle());
      }
    }
    @Override public void onClosedToLeft(){
      tvShowSelected=null;
      getSupportActionBar().setTitle(R.string.tv_shows_sample_activity_title);
    }
    @Override public void onClosedToRight(){
      tvShowSelected=null;
      getSupportActionBar().setTitle(R.string.tv_shows_sample_activity_title);
    }
  }
);
}","private void hookListeners(){
  draggableView.setDraggableListener(new DraggableListener(){
    @Override public void onMaximized(){
      updateActionBarTitle();
    }
    @Override public void onMinimized(){
      updateActionBarTitle();
    }
    @Override public void onClosedToLeft(){
      resetActionBarTitle();
    }
    @Override public void onClosedToRight(){
      resetActionBarTitle();
    }
  }
);
}",0.6147110332749562
28269,"private void renderEpisodes(final TvShowViewModel tvShow){
  List<Renderer<EpisodeViewModel>> episodeRenderers=new LinkedList<Renderer<EpisodeViewModel>>();
  episodeRenderers.add(new EpisodeRenderer());
  EpisodeRendererBuilder episodeRendererBuilder=new EpisodeRendererBuilder(episodeRenderers);
  EpisodeRendererAdapter episodesAdapter=new EpisodeRendererAdapter(getLayoutInflater(),episodeRendererBuilder,tvShow.getEpisodes());
  lv_episodes.setAdapter(episodesAdapter);
}","private void renderEpisodes(final TvShowViewModel tvShow){
  List<Renderer<EpisodeViewModel>> episodeRenderers=new LinkedList<Renderer<EpisodeViewModel>>();
  episodeRenderers.add(new EpisodeRenderer());
  EpisodeRendererBuilder episodeRendererBuilder=new EpisodeRendererBuilder(episodeRenderers);
  EpisodeRendererAdapter episodesAdapter=new EpisodeRendererAdapter(getLayoutInflater(),episodeRendererBuilder,tvShow.getEpisodes());
  episodesListView.setAdapter(episodesAdapter);
}",0.9717868338557992
28270,"@Override public void onMaximized(){
  if (!videoView.isPlaying()) {
    videoView.start();
  }
}","@Override public void onMaximized(){
  startVideo();
}",0.6490066225165563
28271,"private void hookDraggableViewListener(){
  draggableView.setDraggableListener(new DraggableListener(){
    @Override public void onMaximized(){
      if (!videoView.isPlaying()) {
        videoView.start();
      }
    }
    @Override public void onMinimized(){
    }
    @Override public void onClosedToLeft(){
      if (videoView.isPlaying()) {
        videoView.pause();
      }
    }
    @Override public void onClosedToRight(){
      if (videoView.isPlaying()) {
        videoView.pause();
      }
    }
  }
);
}","private void hookDraggableViewListener(){
  draggableView.setDraggableListener(new DraggableListener(){
    @Override public void onMaximized(){
      startVideo();
    }
    @Override public void onMinimized(){
    }
    @Override public void onClosedToLeft(){
      pauseVideo();
    }
    @Override public void onClosedToRight(){
      pauseVideo();
    }
  }
);
}",0.7615819209039548
28272,"private void initializePoster(){
  Picasso.with(this).load(VIDEO_POSTER).placeholder(R.drawable.spiderman_placeholder).into(iv_poster);
  Picasso.with(this).load(VIDEO_THUMBNAIL).placeholder(R.drawable.spiderman_placeholder).into(iv_thumbnail);
}","private void initializePoster(){
  Picasso.with(this).load(VIDEO_POSTER).placeholder(R.drawable.spiderman_placeholder).into(posterImageView);
  Picasso.with(this).load(VIDEO_THUMBNAIL).placeholder(R.drawable.spiderman_placeholder).into(thumbnailImageView);
}",0.9285714285714286
28273,"@Override public void onClosedToRight(){
  if (videoView.isPlaying()) {
    videoView.pause();
  }
}","@Override public void onClosedToRight(){
  pauseVideo();
}",0.6708860759493671
28274,"@Override public void onClosedToLeft(){
  if (videoView.isPlaying()) {
    videoView.pause();
  }
}","@Override public void onClosedToLeft(){
  pauseVideo();
}",0.6666666666666666
28275,"@Override public void onMaximized(){
  if (!youtubePlayer.isPlaying()) {
    youtubePlayer.play();
  }
}","@Override public void onMaximized(){
  playVideo();
}",0.6114649681528662
28276,"private void hookDraggablePanelListeners(){
  draggablePanel.setDraggableListener(new DraggableListener(){
    @Override public void onMaximized(){
      if (!youtubePlayer.isPlaying()) {
        youtubePlayer.play();
      }
    }
    @Override public void onMinimized(){
    }
    @Override public void onClosedToLeft(){
      if (youtubePlayer.isPlaying()) {
        youtubePlayer.pause();
      }
    }
    @Override public void onClosedToRight(){
      if (youtubePlayer.isPlaying()) {
        youtubePlayer.pause();
      }
    }
  }
);
}","private void hookDraggablePanelListeners(){
  draggablePanel.setDraggableListener(new DraggableListener(){
    @Override public void onMaximized(){
      playVideo();
    }
    @Override public void onMinimized(){
    }
    @Override public void onClosedToLeft(){
      pauseVideo();
    }
    @Override public void onClosedToRight(){
      pauseVideo();
    }
  }
);
}",0.7469879518072289
28277,"@Override public void onClosedToRight(){
  if (youtubePlayer.isPlaying()) {
    youtubePlayer.pause();
  }
}","@Override public void onClosedToRight(){
  pauseVideo();
}",0.6385542168674698
28278,"@Override public void onClosedToLeft(){
  if (youtubePlayer.isPlaying()) {
    youtubePlayer.pause();
  }
}","@Override public void onClosedToLeft(){
  pauseVideo();
}",0.6341463414634146
28279,"private void initializeDraggablePanel(){
  draggablePanel.setFragmentManager(getSupportFragmentManager());
  draggablePanel.setTopFragment(youtubeFragment);
  MoviePosterFragment moviePosterFragment=new MoviePosterFragment();
  moviePosterFragment.setPoster(VIDEO_POSTER_THUMBNAIL);
  moviePosterFragment.setPosterTitle(VIDEO_POSTER_TITLE);
  draggablePanel.setBottomFragment(moviePosterFragment);
  draggablePanel.initializeView();
  Picasso.with(this).load(SECOND_VIDEO_POSTER_THUMBNAIL).placeholder(R.drawable.xmen_placeholder).into(iv_thumbnail);
}","private void initializeDraggablePanel(){
  draggablePanel.setFragmentManager(getSupportFragmentManager());
  draggablePanel.setTopFragment(youtubeFragment);
  MoviePosterFragment moviePosterFragment=new MoviePosterFragment();
  moviePosterFragment.setPoster(VIDEO_POSTER_THUMBNAIL);
  moviePosterFragment.setPosterTitle(VIDEO_POSTER_TITLE);
  draggablePanel.setBottomFragment(moviePosterFragment);
  draggablePanel.initializeView();
  Picasso.with(this).load(SECOND_VIDEO_POSTER_THUMBNAIL).placeholder(R.drawable.xmen_placeholder).into(thumbnailImageView);
}",0.9891891891891892
28280,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_movie_poster,container,false);
  ButterKnife.inject(this,view);
  Picasso.with(getActivity()).load(videoPosterThumbnail).placeholder(R.drawable.xmen_placeholder).into(iv_thumbnail);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_movie_poster,container,false);
  ButterKnife.inject(this,view);
  Picasso.with(getActivity()).load(videoPosterThumbnail).placeholder(R.drawable.xmen_placeholder).into(thumbnailImageView);
  return view;
}",0.9830985915492958
28281,"public void showPlace(PlaceViewModel placeViewModel){
  this.placeViewModel=placeViewModel;
  tv_name.setText(placeViewModel.getName());
  Picasso.with(getActivity()).load(placeViewModel.getPhoto()).placeholder(R.drawable.maps_placeholder).into(iv_photo);
}","public void showPlace(PlaceViewModel placeViewModel){
  this.placeViewModel=placeViewModel;
  nameTextView.setText(placeViewModel.getName());
  Picasso.with(getActivity()).load(placeViewModel.getPhoto()).placeholder(R.drawable.maps_placeholder).into(photoImageView);
}",0.3847619047619047
28282,"@Override protected void render(){
  PlaceViewModel place=getContent();
  tv_name.setText(place.getName());
  Picasso.with(context).load(place.getPhoto()).placeholder(R.drawable.maps_placeholder).into(iv_photo);
}","@Override protected void render(){
  PlaceViewModel place=getContent();
  nameTextView.setText(place.getName());
  Picasso.with(context).load(place.getPhoto()).placeholder(R.drawable.maps_placeholder).into(photoImageView);
}",0.3615560640732265
28283,"@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  if (draggableView.isDragViewAtBottom()) {
    draggableView.changeDragViewViewAlpha();
  }
 else {
    draggableView.changeDragViewScale();
    draggableView.changeDragViewPosition();
    draggableView.changeSecondViewAlpha();
    draggableView.changeSeondViewPosition();
    draggableView.changeBackgroundAlpha();
  }
  draggableView.invalidate();
}","@Override public void onViewPositionChanged(View changedView,int left,int top,int dx,int dy){
  draggableView.updateLastDragViewPosition(top,left);
  if (draggableView.isDragViewAtBottom()) {
    draggableView.changeDragViewViewAlpha();
  }
 else {
    draggableView.changeDragViewScale();
    draggableView.changeDragViewPosition();
    draggableView.changeSecondViewAlpha();
    draggableView.changeSeondViewPosition();
    draggableView.changeBackgroundAlpha();
  }
  draggableView.invalidate();
}",0.9408033826638478
28284,"@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  int newLeft=0;
  if (((isMinimized() && (dx > MINIMUN_DX_FOR_HORIZONTAL_DRAG || dx < -MINIMUN_DX_FOR_HORIZONTAL_DRAG))) || (isDragViewAtBottom())) {
    newLeft=left;
  }
  return newLeft;
}","@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  int newLeft=0;
  if (((isMinimized() && (dx > MINIMUN_DX_FOR_HORIZONTAL_DRAG || dx < -MINIMUN_DX_FOR_HORIZONTAL_DRAG))) || (isDragViewAtBottom() && !isDragViewAtRight())) {
    newLeft=left;
  }
  return newLeft;
}",0.9574468085106383
28285,"@Override public int clampViewPositionVertical(View child,int top,int dy){
  int newTop;
  if (isMinimized() && (dy >= MINIMUM_DY_FOR_VERTICAL_DRAG || dy >= -MINIMUM_DY_FOR_VERTICAL_DRAG) || (!isMinimized() && !isDragViewAtBottom())) {
    final int topBound=getPaddingTop();
    final int bottomBound=getHeight() - child.getHeight() - child.getPaddingBottom();
    newTop=Math.min(Math.max(top,topBound),bottomBound);
  }
 else {
    newTop=getHeight() - dragView.getHeight();
  }
  return newTop;
}","@Override public int clampViewPositionVertical(View child,int top,int dy){
  int newTop=getHeight() - dragView.getHeight();
  if (isMinimized() && (dy >= MINIMUM_DY_FOR_VERTICAL_DRAG || dy >= -MINIMUM_DY_FOR_VERTICAL_DRAG) || (!isMinimized() && !isDragViewAtBottom())) {
    final int topBound=getPaddingTop();
    final int bottomBound=getHeight() - child.getHeight() - child.getPaddingBottom();
    newTop=Math.min(Math.max(top,topBound),bottomBound);
  }
  return newTop;
}",0.875
28286,"private boolean isDragViewAtRight(){
  return dragView.getRight() >= (getWidth() - MINIMUN_DX_FOR_HORIZONTAL_DRAG);
}","private boolean isDragViewAtRight(){
  return dragView.getRight() == getWidth();
}",0.8140703517587939
28287,"public static void main(String[] args) throws Exception, org.bytedeco.javacv.FrameGrabber.Exception {
  int captureWidth=1280;
  int captureHeight=720;
  OpenCVFrameGrabber grabber=new OpenCVFrameGrabber(WEBCAM_DEVICE_INDEX);
  grabber.setImageWidth(captureWidth);
  grabber.setImageHeight(captureHeight);
  grabber.start();
  FFmpegFrameRecorder recorder=new FFmpegFrameRecorder(""String_Node_Str"",captureWidth,captureHeight,2);
  recorder.setInterleaved(true);
  recorder.setVideoOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setVideoOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setVideoOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setVideoBitrate(2000000);
  recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);
  recorder.setFormat(""String_Node_Str"");
  recorder.setFrameRate(FRAME_RATE);
  recorder.setGopSize(GOP_LENGTH_IN_FRAMES);
  recorder.setAudioOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setAudioQuality(0);
  recorder.setAudioBitrate(192000);
  recorder.setSampleRate(44100);
  recorder.setAudioChannels(2);
  recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);
  recorder.start();
  new Thread(new Runnable(){
    @Override public void run(){
      AudioFormat audioFormat=new AudioFormat(44100.0F,16,2,true,false);
      Mixer.Info[] minfoSet=AudioSystem.getMixerInfo();
      Mixer mixer=AudioSystem.getMixer(minfoSet[AUDIO_DEVICE_INDEX]);
      DataLine.Info dataLineInfo=new DataLine.Info(TargetDataLine.class,audioFormat);
      try {
        TargetDataLine line=(TargetDataLine)AudioSystem.getLine(dataLineInfo);
        line.open(audioFormat);
        line.start();
        int sampleRate=(int)audioFormat.getSampleRate();
        int numChannels=audioFormat.getChannels();
        int audioBufferSize=sampleRate * numChannels;
        byte[] audioBytes=new byte[audioBufferSize];
        ScheduledThreadPoolExecutor exec=new ScheduledThreadPoolExecutor(1);
        exec.scheduleAtFixedRate(new Runnable(){
          @Override public void run(){
            try {
              int nBytesRead=line.read(audioBytes,0,line.available());
              int nSamplesRead=nBytesRead / 2;
              short[] samples=new short[nSamplesRead];
              ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);
              ShortBuffer sBuff=ShortBuffer.wrap(samples,0,nSamplesRead);
              recorder.recordSamples(sampleRate,numChannels,sBuff);
            }
 catch (            org.bytedeco.javacv.FrameRecorder.Exception e) {
              e.printStackTrace();
            }
          }
        }
,0,(long)1000 / FRAME_RATE,TimeUnit.MILLISECONDS);
      }
 catch (      LineUnavailableException e1) {
        e1.printStackTrace();
      }
    }
  }
).start();
  CanvasFrame cFrame=new CanvasFrame(""String_Node_Str"",CanvasFrame.getDefaultGamma() / grabber.getGamma());
  Frame capturedFrame=null;
  while ((capturedFrame=grabber.grab()) != null) {
    if (cFrame.isVisible()) {
      cFrame.showImage(capturedFrame);
    }
    if (startTime == 0)     startTime=System.currentTimeMillis();
    videoTS=1000 * (System.currentTimeMillis() - startTime);
    if (videoTS > recorder.getTimestamp()) {
      System.out.println(""String_Node_Str"" + videoTS + ""String_Node_Str""+ recorder.getTimestamp()+ ""String_Node_Str""+ (videoTS - recorder.getTimestamp()));
      recorder.setTimestamp(videoTS);
    }
    recorder.record(capturedFrame);
  }
  cFrame.dispose();
  recorder.stop();
  grabber.stop();
}","public static void main(String[] args) throws Exception, org.bytedeco.javacv.FrameGrabber.Exception {
  int captureWidth=1280;
  int captureHeight=720;
  OpenCVFrameGrabber grabber=new OpenCVFrameGrabber(WEBCAM_DEVICE_INDEX);
  grabber.setImageWidth(captureWidth);
  grabber.setImageHeight(captureHeight);
  grabber.start();
  FFmpegFrameRecorder recorder=new FFmpegFrameRecorder(""String_Node_Str"",captureWidth,captureHeight,2);
  recorder.setInterleaved(true);
  recorder.setVideoOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setVideoOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setVideoOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setVideoBitrate(2000000);
  recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);
  recorder.setFormat(""String_Node_Str"");
  recorder.setFrameRate(FRAME_RATE);
  recorder.setGopSize(GOP_LENGTH_IN_FRAMES);
  recorder.setAudioOption(""String_Node_Str"",""String_Node_Str"");
  recorder.setAudioQuality(0);
  recorder.setAudioBitrate(192000);
  recorder.setSampleRate(44100);
  recorder.setAudioChannels(2);
  recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);
  recorder.start();
  new Thread(new Runnable(){
    @Override public void run(){
      AudioFormat audioFormat=new AudioFormat(44100.0F,16,2,true,false);
      Mixer.Info[] minfoSet=AudioSystem.getMixerInfo();
      Mixer mixer=AudioSystem.getMixer(minfoSet[AUDIO_DEVICE_INDEX]);
      DataLine.Info dataLineInfo=new DataLine.Info(TargetDataLine.class,audioFormat);
      try {
        TargetDataLine line=(TargetDataLine)AudioSystem.getLine(dataLineInfo);
        line.open(audioFormat);
        line.start();
        int sampleRate=(int)audioFormat.getSampleRate();
        int numChannels=audioFormat.getChannels();
        int audioBufferSize=sampleRate * numChannels;
        byte[] audioBytes=new byte[audioBufferSize];
        ScheduledThreadPoolExecutor exec=new ScheduledThreadPoolExecutor(1);
        exec.scheduleAtFixedRate(new Runnable(){
          @Override public void run(){
            try {
              int nBytesRead=0;
              while (nBytesRead == 0) {
                nBytesRead=line.read(audioBytes,0,line.available());
              }
              int nSamplesRead=nBytesRead / 2;
              short[] samples=new short[nSamplesRead];
              ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);
              ShortBuffer sBuff=ShortBuffer.wrap(samples,0,nSamplesRead);
              recorder.recordSamples(sampleRate,numChannels,sBuff);
            }
 catch (            org.bytedeco.javacv.FrameRecorder.Exception e) {
              e.printStackTrace();
            }
          }
        }
,0,(long)1000 / FRAME_RATE,TimeUnit.MILLISECONDS);
      }
 catch (      LineUnavailableException e1) {
        e1.printStackTrace();
      }
    }
  }
).start();
  CanvasFrame cFrame=new CanvasFrame(""String_Node_Str"",CanvasFrame.getDefaultGamma() / grabber.getGamma());
  Frame capturedFrame=null;
  while ((capturedFrame=grabber.grab()) != null) {
    if (cFrame.isVisible()) {
      cFrame.showImage(capturedFrame);
    }
    if (startTime == 0)     startTime=System.currentTimeMillis();
    videoTS=1000 * (System.currentTimeMillis() - startTime);
    if (videoTS > recorder.getTimestamp()) {
      System.out.println(""String_Node_Str"" + videoTS + ""String_Node_Str""+ recorder.getTimestamp()+ ""String_Node_Str""+ (videoTS - recorder.getTimestamp()));
      recorder.setTimestamp(videoTS);
    }
    recorder.record(capturedFrame);
  }
  cFrame.dispose();
  recorder.stop();
  grabber.stop();
}",0.9878290404755166
28288,"@Override public void run(){
  try {
    int nBytesRead=line.read(audioBytes,0,line.available());
    int nSamplesRead=nBytesRead / 2;
    short[] samples=new short[nSamplesRead];
    ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);
    ShortBuffer sBuff=ShortBuffer.wrap(samples,0,nSamplesRead);
    recorder.recordSamples(sampleRate,numChannels,sBuff);
  }
 catch (  org.bytedeco.javacv.FrameRecorder.Exception e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    int nBytesRead=0;
    while (nBytesRead == 0) {
      nBytesRead=line.read(audioBytes,0,line.available());
    }
    int nSamplesRead=nBytesRead / 2;
    short[] samples=new short[nSamplesRead];
    ByteBuffer.wrap(audioBytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(samples);
    ShortBuffer sBuff=ShortBuffer.wrap(samples,0,nSamplesRead);
    recorder.recordSamples(sampleRate,numChannels,sBuff);
  }
 catch (  org.bytedeco.javacv.FrameRecorder.Exception e) {
    e.printStackTrace();
  }
}",0.9457364341085271
28289,"public static void main(String[] args) throws Exception {
  String modelTxt=""String_Node_Str"";
  String modelBin=""String_Node_Str"";
  String imageFile=(args.length > 0) ? args[0] : ""String_Node_Str"";
  Importer importer=null;
  try {
    importer=createCaffeImporter(modelTxt,modelBin);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (importer == null) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + modelTxt);
    System.err.println(""String_Node_Str"" + modelBin);
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  Net net=new Net();
  importer.populateNet(net);
  importer.close();
  Mat img=imread(imageFile);
  if (img.empty()) {
    System.err.println(""String_Node_Str"" + imageFile);
    System.exit(-1);
  }
  resize(img,img,new Size(224,224));
  Blob inputBlob=new Blob(img);
  net.setBlob(""String_Node_Str"",inputBlob);
  net.forward();
  Blob prob=net.getBlob(""String_Node_Str"");
  Point classId=new Point();
  double[] classProb=new double[1];
  getMaxClass(prob,classId,classProb);
  List<String> classNames=readClassNames();
  System.out.println(""String_Node_Str"" + classId.x() + ""String_Node_Str""+ classNames.get(classId.x())+ ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + classId.x());
  System.out.println(""String_Node_Str"" + classProb[0] * 100 + ""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  String modelTxt=""String_Node_Str"";
  String modelBin=""String_Node_Str"";
  String imageFile=(args.length > 0) ? args[0] : ""String_Node_Str"";
  Importer importer=null;
  try {
    importer=createCaffeImporter(modelTxt,modelBin);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (importer == null) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + modelTxt);
    System.err.println(""String_Node_Str"" + modelBin);
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  Net net=new Net();
  importer.populateNet(net);
  importer.close();
  Mat img=imread(imageFile);
  if (img.empty()) {
    System.err.println(""String_Node_Str"" + imageFile);
    System.exit(-1);
  }
  resize(img,img,new Size(224,224));
  Blob inputBlob=Blob.fromImages(img);
  net.setBlob(""String_Node_Str"",inputBlob);
  net.forward();
  Blob prob=net.getBlob(""String_Node_Str"");
  Point classId=new Point();
  double[] classProb=new double[1];
  getMaxClass(prob,classId,classProb);
  List<String> classNames=readClassNames();
  System.out.println(""String_Node_Str"" + classId.x() + ""String_Node_Str""+ classNames.get(classId.x())+ ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + classId.x());
  System.out.println(""String_Node_Str"" + classProb[0] * 100 + ""String_Node_Str"");
}",0.9947164494540331
28290,"@Override public long call(Pointer opaque,long offset,int whence){
  try {
    InputStream is=inputStreams.get(opaque);
switch (whence) {
case 0:
      is.reset();
    break;
case 1:
  break;
default :
return -1;
}
is.skip(offset);
return 0;
}
 catch (Throwable t) {
System.err.println(""String_Node_Str"" + t);
return -1;
}
}","@Override public long call(Pointer opaque,long offset,int whence){
  try {
    InputStream is=inputStreams.get(opaque);
switch (whence) {
case 0:
      is.reset();
    break;
case 1:
  break;
default :
return -1;
}
long remaining=offset;
while (remaining > 0) {
long skipped=is.skip(remaining);
if (skipped == 0) break;
remaining-=skipped;
}
return 0;
}
 catch (Throwable t) {
System.err.println(""String_Node_Str"" + t);
return -1;
}
}",0.8337730870712401
28291,"public Frame pull() throws Exception {
  av_frame_unref(filt_frame);
  int ret=av_buffersink_get_frame(buffersink_ctx,filt_frame);
  if (ret == -11 || ret == AVERROR_EOF) {
    return null;
  }
 else   if (ret < 0) {
    throw new Exception(""String_Node_Str"" + av_make_error_string(new BytePointer(256),256,ret).getString());
  }
  frame.imageWidth=filt_frame.width();
  frame.imageHeight=filt_frame.height();
  frame.imageDepth=Frame.DEPTH_UBYTE;
  if (filt_frame.data(1) == null) {
    frame.imageStride=filt_frame.linesize(0);
    BytePointer ptr=filt_frame.data(0);
    if (ptr != null && !ptr.equals(image_ptr[0])) {
      image_ptr[0]=ptr.capacity(frame.imageHeight * frame.imageStride);
      image_buf[0]=ptr.asBuffer();
    }
    frame.image=image_buf;
    frame.image[0].position(0).limit(frame.imageHeight * frame.imageStride);
    frame.imageChannels=frame.imageStride / frame.imageWidth;
  }
 else {
    frame.imageStride=frame.imageWidth;
    int size=avpicture_get_size(filt_frame.format(),frame.imageWidth,frame.imageHeight);
    if (image_ptr[0] == null || image_ptr[0].capacity() < size) {
      image_ptr[0]=new BytePointer(size);
      image_buf[0]=image_ptr[0].asBuffer();
    }
    frame.image=image_buf;
    frame.image[0].position(0).limit(size);
    frame.imageChannels=2;
    ret=avpicture_layout(new AVPicture(filt_frame),filt_frame.format(),frame.imageWidth,frame.imageHeight,image_ptr[0].position(0),image_ptr[0].capacity());
  }
  return frame;
}","public Frame pull() throws Exception {
  av_frame_unref(filt_frame);
  int ret=av_buffersink_get_frame(buffersink_ctx,filt_frame);
  if (ret == -11 || ret == AVERROR_EOF) {
    return null;
  }
 else   if (ret < 0) {
    throw new Exception(""String_Node_Str"" + av_make_error_string(new BytePointer(256),256,ret).getString());
  }
  frame.imageWidth=filt_frame.width();
  frame.imageHeight=filt_frame.height();
  frame.imageDepth=Frame.DEPTH_UBYTE;
  if (filt_frame.data(1) == null) {
    frame.imageStride=filt_frame.linesize(0);
    BytePointer ptr=filt_frame.data(0);
    if (ptr != null && !ptr.equals(image_ptr[0])) {
      image_ptr[0]=ptr.capacity(frame.imageHeight * frame.imageStride);
      image_buf[0]=ptr.asBuffer();
    }
    frame.image=image_buf;
    frame.image[0].position(0).limit(frame.imageHeight * frame.imageStride);
    frame.imageChannels=frame.imageStride / frame.imageWidth;
  }
 else {
    frame.imageStride=frame.imageWidth;
    int size=avpicture_get_size(filt_frame.format(),frame.imageWidth,frame.imageHeight);
    if (image_buf[0] == null || image_buf[0].capacity() < size) {
      image_buf[0]=ByteBuffer.allocateDirect(size).order(ByteOrder.nativeOrder());
    }
    frame.image=image_buf;
    frame.image[0].position(0).limit(size);
    frame.imageChannels=2;
    ret=avpicture_layout(new AVPicture(filt_frame),filt_frame.format(),frame.imageWidth,frame.imageHeight,(ByteBuffer)frame.image[0].position(0),frame.image[0].capacity());
  }
  return frame;
}",0.9416526138279931
28292,"public static void main(final String[] args){
  final Mat pFrame=imread(""String_Node_Str"",CV_LOAD_IMAGE_GRAYSCALE), cFrame=imread(""String_Node_Str"",CV_LOAD_IMAGE_GRAYSCALE), pGray=new Mat(), cGray=new Mat(), Optical_Flow=new Mat();
  pFrame.convertTo(pGray,CV_32FC1);
  cFrame.convertTo(cGray,CV_32FC1);
  final DenseOpticalFlow tvl1=createOptFlow_DualTVL1();
  tvl1.calc(pGray,cGray,Optical_Flow);
  final Mat OF=new Mat(pGray.rows(),pGray.cols(),CV_32FC1);
  final FloatBuffer in=Optical_Flow.<FloatBuffer>createBuffer(), out=OF.<FloatBuffer>createBuffer();
  final int height=pGray.rows(), width=pGray.cols();
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      final float xVelocity=in.get();
      final float yVelocity=in.get();
      final float pixelVelocity=(float)Math.sqrt(xVelocity * xVelocity + yVelocity * yVelocity);
      out.put(pixelVelocity);
    }
  }
  imwrite(""String_Node_Str"",OF);
}","public static void main(final String[] args){
  final Mat pFrame=imread(""String_Node_Str"",CV_LOAD_IMAGE_GRAYSCALE), cFrame=imread(""String_Node_Str"",CV_LOAD_IMAGE_GRAYSCALE), pGray=new Mat(), cGray=new Mat(), Optical_Flow=new Mat();
  pFrame.convertTo(pGray,CV_32FC1);
  cFrame.convertTo(cGray,CV_32FC1);
  final DenseOpticalFlow tvl1=createOptFlow_DualTVL1();
  tvl1.calc(pGray,cGray,Optical_Flow);
  final Mat OF=new Mat(pGray.rows(),pGray.cols(),CV_32FC1);
  final FloatBuffer in=Optical_Flow.createBuffer(), out=OF.createBuffer();
  final int height=pGray.rows(), width=pGray.cols();
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      final float xVelocity=in.get();
      final float yVelocity=in.get();
      final float pixelVelocity=(float)Math.sqrt(xVelocity * xVelocity + yVelocity * yVelocity);
      out.put(pixelVelocity);
    }
  }
  imwrite(""String_Node_Str"",OF);
}",0.9738562091503268
28293,"boolean function(Context context,DeclarationList declList) throws ParserException {
  int backIndex=tokens.index;
  String spacing=tokens.get().spacing;
  String modifiers=""String_Node_Str"";
  int startIndex=tokens.index;
  Type type=type(context);
  Parameters params=parameters(context,0,false);
  Declarator dcl=new Declarator();
  Declaration decl=new Declaration();
  if (type.javaName.length() == 0) {
    tokens.index=backIndex;
    return false;
  }
 else   if (context.javaName == null && !type.operator && params != null) {
    if (tokens.get().match(':')) {
      for (Token token=tokens.next(); !token.match(Token.EOF); token=tokens.next()) {
        if (token.match('{',';')) {
          break;
        }
      }
    }
    if (tokens.get().match('{')) {
      body();
    }
 else {
      tokens.next();
    }
    decl.text=spacing;
    declList.add(decl);
    return true;
  }
 else   if ((type.constructor || type.destructor || type.operator) && params != null) {
    dcl.type=type;
    dcl.parameters=params;
    dcl.cppName=type.cppName;
    dcl.javaName=type.javaName.substring(type.javaName.lastIndexOf(' ') + 1);
    if (type.operator) {
      dcl.cppName=""String_Node_Str"" + dcl.cppName;
      dcl.javaName=""String_Node_Str"" + Character.toUpperCase(dcl.javaName.charAt(0)) + dcl.javaName.substring(1);
    }
    dcl.signature=dcl.javaName + params.signature;
  }
 else {
    tokens.index=startIndex;
    dcl=declarator(context,null,0,false,0,false,false);
    type=dcl.type;
  }
  if (dcl.cppName == null || type.javaName.length() == 0 || dcl.parameters == null) {
    tokens.index=backIndex;
    return false;
  }
  int namespace=dcl.cppName.lastIndexOf(""String_Node_Str"");
  if (context.namespace != null && namespace < 0) {
    dcl.cppName=context.namespace + ""String_Node_Str"" + dcl.cppName;
  }
  Info info=null;
  if (dcl.parameters != null) {
    String name=dcl.cppName + ""String_Node_Str"", separator=""String_Node_Str"";
    for (    Declarator d : dcl.parameters.declarators) {
      if (d != null) {
        name+=separator + d.type.cppName;
        for (int i=0; i < d.indirections; i++) {
          name+=""String_Node_Str"";
        }
        if (d.reference) {
          name+=""String_Node_Str"";
        }
        separator=""String_Node_Str"";
      }
    }
    info=infoMap.getFirst(name+=""String_Node_Str"");
    if (info == null && !type.constructor && !type.destructor && !type.operator) {
      infoMap.put(new Info(name));
    }
  }
  if (info == null) {
    info=infoMap.getFirst(dcl.cppName);
  }
  String localName=dcl.cppName;
  if (localName.startsWith(context.namespace + ""String_Node_Str"")) {
    localName=dcl.cppName.substring(context.namespace.length() + 2);
  }
  if (type.friend || (context.javaName == null && localName.contains(""String_Node_Str"")) || (info != null && info.skip)) {
    for (Token token=tokens.get(); !token.match(Token.EOF); token=tokens.get()) {
      if (attribute() == null) {
        break;
      }
    }
    if (tokens.get().match(':')) {
      for (Token token=tokens.next(); !token.match(Token.EOF); token=tokens.next()) {
        if (token.match('{',';')) {
          break;
        }
      }
    }
    if (tokens.get().match('{')) {
      body();
    }
 else {
      tokens.next();
    }
    decl.text=spacing;
    declList.add(decl);
    return true;
  }
 else   if (type.staticMember || context.javaName == null) {
    modifiers=""String_Node_Str"";
  }
  LinkedList<Declarator> prevDcl=new LinkedList<Declarator>();
  boolean first=true;
  for (int n=-2; n < Integer.MAX_VALUE; n++) {
    decl=new Declaration();
    tokens.index=startIndex;
    if (type.constructor || type.destructor || type.operator) {
      type=type(context);
      params=parameters(context,n / 2,n % 2 != 0);
      dcl=new Declarator();
      dcl.type=type;
      dcl.parameters=params;
      dcl.cppName=type.cppName;
      dcl.javaName=type.javaName.substring(type.javaName.lastIndexOf(' ') + 1);
      if (type.operator) {
        dcl.cppName=""String_Node_Str"" + dcl.cppName;
        dcl.javaName=""String_Node_Str"" + Character.toUpperCase(dcl.javaName.charAt(0)) + dcl.javaName.substring(1);
      }
      dcl.signature=dcl.javaName + params.signature;
      if (tokens.get().match(':')) {
        for (Token token=tokens.next(); !token.match(Token.EOF); token=tokens.next()) {
          if (token.match('{',';')) {
            break;
          }
        }
      }
    }
 else {
      dcl=declarator(context,null,n / 2,n % 2 != 0,0,false,false);
      type=dcl.type;
      namespace=dcl.cppName.lastIndexOf(""String_Node_Str"");
      if (context.namespace != null && namespace < 0) {
        dcl.cppName=context.namespace + ""String_Node_Str"" + dcl.cppName;
      }
    }
    for (Token token=tokens.get(); !token.match(Token.EOF); token=tokens.get()) {
      decl.constMember|=token.match(Token.CONST);
      if (attribute() == null) {
        break;
      }
    }
    if (tokens.get().match('{')) {
      body();
    }
 else {
      if (tokens.get().match('=')) {
        tokens.next().expect(""String_Node_Str"");
        tokens.next().expect(';');
        decl.abstractMember=true;
      }
      tokens.next();
    }
    if (type.virtual && context.virtualize) {
      modifiers=context.inaccessible ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    decl.declarator=dcl;
    if (context.namespace != null && context.javaName == null) {
      decl.text+=""String_Node_Str"" + context.namespace + ""String_Node_Str"";
    }
    if (type.constructor && params != null) {
      decl.text+=""String_Node_Str"" + context.shorten(context.javaName) + dcl.parameters.list+ ""String_Node_Str""+ params.names+ ""String_Node_Str""+ ""String_Node_Str""+ dcl.parameters.list+ ""String_Node_Str"";
    }
 else {
      decl.text+=modifiers + type.annotations + type.javaName+ ""String_Node_Str""+ dcl.javaName+ dcl.parameters.list+ ""String_Node_Str"";
    }
    decl.signature=dcl.signature;
    if (info != null && info.javaText != null) {
      if (first) {
        decl.text=info.javaText;
      }
 else {
        break;
      }
    }
    String comment=commentAfter();
    if (first) {
      first=false;
      declList.spacing=spacing;
      decl.text=comment + decl.text;
    }
    boolean found=false;
    for (    Declarator d : prevDcl) {
      found|=dcl.signature.equals(d.signature);
    }
    if (dcl.javaName.length() > 0 && !found && !type.destructor) {
      declList.add(decl);
      if (type.virtual && context.virtualize) {
        break;
      }
    }
 else     if (found && n / 2 > 0 && n % 2 == 0) {
      break;
    }
    prevDcl.add(dcl);
  }
  declList.spacing=null;
  return true;
}","boolean function(Context context,DeclarationList declList) throws ParserException {
  int backIndex=tokens.index;
  String spacing=tokens.get().spacing;
  String modifiers=""String_Node_Str"";
  int startIndex=tokens.index;
  Type type=type(context);
  Parameters params=parameters(context,0,false);
  Declarator dcl=new Declarator();
  Declaration decl=new Declaration();
  if (type.javaName.length() == 0) {
    tokens.index=backIndex;
    return false;
  }
 else   if (context.javaName == null && !type.operator && params != null) {
    if (tokens.get().match(':')) {
      for (Token token=tokens.next(); !token.match(Token.EOF); token=tokens.next()) {
        if (token.match('{',';')) {
          break;
        }
      }
    }
    if (tokens.get().match('{')) {
      body();
    }
 else {
      tokens.next();
    }
    decl.text=spacing;
    declList.add(decl);
    return true;
  }
 else   if ((type.constructor || type.destructor || type.operator) && params != null) {
    dcl.type=type;
    dcl.parameters=params;
    dcl.cppName=type.cppName;
    dcl.javaName=type.javaName.substring(type.javaName.lastIndexOf(' ') + 1);
    if (type.operator) {
      dcl.cppName=""String_Node_Str"" + dcl.cppName;
      dcl.javaName=""String_Node_Str"" + Character.toUpperCase(dcl.javaName.charAt(0)) + dcl.javaName.substring(1);
    }
    dcl.signature=dcl.javaName + params.signature;
  }
 else {
    tokens.index=startIndex;
    dcl=declarator(context,null,0,false,0,false,false);
    type=dcl.type;
  }
  if (dcl.cppName == null || type.javaName.length() == 0 || dcl.parameters == null) {
    tokens.index=backIndex;
    return false;
  }
  int namespace=dcl.cppName.lastIndexOf(""String_Node_Str"");
  if (context.namespace != null && namespace < 0) {
    dcl.cppName=context.namespace + ""String_Node_Str"" + dcl.cppName;
  }
  Info info=null;
  if (dcl.parameters != null) {
    String name=dcl.cppName + ""String_Node_Str"", separator=""String_Node_Str"";
    for (    Declarator d : dcl.parameters.declarators) {
      if (d != null) {
        name+=separator + d.type.cppName;
        for (int i=0; i < d.indirections; i++) {
          name+=""String_Node_Str"";
        }
        if (d.reference) {
          name+=""String_Node_Str"";
        }
        separator=""String_Node_Str"";
      }
    }
    info=infoMap.getFirst(name+=""String_Node_Str"");
    if (info == null && !type.constructor && !type.destructor && !type.operator) {
      infoMap.put(new Info(name));
    }
  }
  if (info == null) {
    info=infoMap.getFirst(dcl.cppName);
  }
  String localName=dcl.cppName;
  if (localName.startsWith(context.namespace + ""String_Node_Str"")) {
    localName=dcl.cppName.substring(context.namespace.length() + 2);
  }
  if (type.friend || (context.javaName == null && localName.contains(""String_Node_Str"")) || (info != null && info.skip)) {
    for (Token token=tokens.get(); !token.match(Token.EOF); token=tokens.get()) {
      if (attribute() == null) {
        break;
      }
    }
    if (tokens.get().match(':')) {
      for (Token token=tokens.next(); !token.match(Token.EOF); token=tokens.next()) {
        if (token.match('{',';')) {
          break;
        }
      }
    }
    if (tokens.get().match('{')) {
      body();
    }
 else {
      tokens.next();
    }
    decl.text=spacing;
    declList.add(decl);
    return true;
  }
 else   if (type.staticMember || context.javaName == null) {
    modifiers=""String_Node_Str"";
  }
  LinkedList<Declarator> prevDcl=new LinkedList<Declarator>();
  boolean first=true;
  for (int n=-2; n < Integer.MAX_VALUE; n++) {
    decl=new Declaration();
    tokens.index=startIndex;
    if ((type.constructor || type.destructor || type.operator) && params != null) {
      type=type(context);
      params=parameters(context,n / 2,n % 2 != 0);
      dcl=new Declarator();
      dcl.type=type;
      dcl.parameters=params;
      dcl.cppName=type.cppName;
      dcl.javaName=type.javaName.substring(type.javaName.lastIndexOf(' ') + 1);
      if (type.operator) {
        dcl.cppName=""String_Node_Str"" + dcl.cppName;
        dcl.javaName=""String_Node_Str"" + Character.toUpperCase(dcl.javaName.charAt(0)) + dcl.javaName.substring(1);
      }
      dcl.signature=dcl.javaName + params.signature;
      if (tokens.get().match(':')) {
        for (Token token=tokens.next(); !token.match(Token.EOF); token=tokens.next()) {
          if (token.match('{',';')) {
            break;
          }
        }
      }
    }
 else {
      dcl=declarator(context,null,n / 2,n % 2 != 0,0,false,false);
      type=dcl.type;
      namespace=dcl.cppName.lastIndexOf(""String_Node_Str"");
      if (context.namespace != null && namespace < 0) {
        dcl.cppName=context.namespace + ""String_Node_Str"" + dcl.cppName;
      }
    }
    for (Token token=tokens.get(); !token.match(Token.EOF); token=tokens.get()) {
      decl.constMember|=token.match(Token.CONST);
      if (attribute() == null) {
        break;
      }
    }
    if (tokens.get().match('{')) {
      body();
    }
 else {
      if (tokens.get().match('=')) {
        tokens.next().expect(""String_Node_Str"");
        tokens.next().expect(';');
        decl.abstractMember=true;
      }
      tokens.next();
    }
    if (type.virtual && context.virtualize) {
      modifiers=context.inaccessible ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    decl.declarator=dcl;
    if (context.namespace != null && context.javaName == null) {
      decl.text+=""String_Node_Str"" + context.namespace + ""String_Node_Str"";
    }
    if (type.constructor && params != null) {
      decl.text+=""String_Node_Str"" + context.shorten(context.javaName) + dcl.parameters.list+ ""String_Node_Str""+ params.names+ ""String_Node_Str""+ ""String_Node_Str""+ dcl.parameters.list+ ""String_Node_Str"";
    }
 else {
      decl.text+=modifiers + type.annotations + type.javaName+ ""String_Node_Str""+ dcl.javaName+ dcl.parameters.list+ ""String_Node_Str"";
    }
    decl.signature=dcl.signature;
    if (info != null && info.javaText != null) {
      if (first) {
        decl.text=info.javaText;
      }
 else {
        break;
      }
    }
    String comment=commentAfter();
    if (first) {
      first=false;
      declList.spacing=spacing;
      decl.text=comment + decl.text;
    }
    boolean found=false;
    for (    Declarator d : prevDcl) {
      found|=dcl.signature.equals(d.signature);
    }
    if (dcl.javaName.length() > 0 && !found && !type.destructor) {
      declList.add(decl);
      if (type.virtual && context.virtualize) {
        break;
      }
    }
 else     if (found && n / 2 > 0 && n % 2 == 0) {
      break;
    }
    prevDcl.add(dcl);
  }
  declList.spacing=null;
  return true;
}",0.9984937490585932
28294,"@Override public boolean add(Declaration decl){
  boolean add=true;
  if (templateMap != null && !templateMap.full() && (decl.type != null || decl.declarator != null)) {
    if (infoIterator == null) {
      Type type=templateMap.type=decl.type;
      Declarator dcl=templateMap.declarator=decl.declarator;
      LinkedList<Info> infoList=infoMap.get(dcl != null ? dcl.cppName : type.cppName);
      infoIterator=infoList.size() > 0 ? infoList.listIterator() : null;
    }
    add=false;
  }
 else   if (decl.declarator != null && decl.declarator.type != null) {
    Info info=infoMap.getFirst(decl.declarator.type.cppName);
    if (info != null && info.skip && info.valueTypes == null && info.pointerTypes == null) {
      add=false;
    }
 else     if (decl.declarator.parameters != null) {
      for (      Declarator d : decl.declarator.parameters.declarators) {
        if (d != null && d.type != null) {
          info=infoMap.getFirst(d.type.cppName);
          if (info != null && info.skip && info.valueTypes == null && info.pointerTypes == null) {
            add=false;
            break;
          }
        }
      }
    }
  }
  if (!add) {
    return false;
  }
  LinkedList<Declaration> stack=new LinkedList<Declaration>();
  ListIterator<Declaration> it=stack.listIterator();
  it.add(decl);
  it.previous();
  while (it.hasNext()) {
    decl=it.next();
    Declarator dcl=decl.declarator;
    if (dcl != null && dcl.definition != null) {
      it.add(dcl.definition);
      it.previous();
    }
    if (dcl != null && dcl.parameters != null && dcl.parameters.declarators != null) {
      for (      Declarator d : dcl.parameters.declarators) {
        if (d != null && d.definition != null) {
          it.add(d.definition);
          it.previous();
        }
      }
    }
  }
  while (!stack.isEmpty()) {
    decl=stack.removeLast();
    if (context != null) {
      decl.inaccessible=context.inaccessible;
    }
    if (decl.text.length() == 0) {
      decl.inaccessible=true;
    }
    it=listIterator();
    boolean found=false;
    while (it.hasNext()) {
      Declaration d=it.next();
      if (d.signature.length() > 0 && d.signature.equals(decl.signature)) {
        if ((d.constMember && !decl.constMember) || (d.inaccessible && !decl.inaccessible) || (d.incomplete && !decl.incomplete)) {
          it.remove();
        }
 else {
          found=true;
        }
      }
    }
    if (!found) {
      decl.text=rescan(decl.text);
      super.add(decl);
    }
  }
  return true;
}","@Override public boolean add(Declaration decl){
  boolean add=true;
  if (templateMap != null && !templateMap.full() && (decl.type != null || decl.declarator != null)) {
    if (infoIterator == null) {
      Type type=templateMap.type=decl.type;
      Declarator dcl=templateMap.declarator=decl.declarator;
      LinkedList<Info> infoList=infoMap.get(dcl != null ? dcl.cppName : type.cppName);
      infoIterator=infoList.size() > 0 ? infoList.listIterator() : null;
    }
    add=false;
  }
 else   if (decl.declarator != null && decl.declarator.type != null) {
    Info info=infoMap.getFirst(decl.declarator.type.cppName);
    if (info != null && info.skip && info.valueTypes == null && info.pointerTypes == null) {
      add=false;
    }
 else     if (decl.declarator.parameters != null) {
      for (      Declarator d : decl.declarator.parameters.declarators) {
        if (d != null && d.type != null) {
          info=infoMap.getFirst(d.type.cppName);
          if (info != null && info.skip && info.valueTypes == null && info.pointerTypes == null) {
            add=false;
            break;
          }
        }
      }
    }
  }
  if (!add) {
    return false;
  }
  LinkedList<Declaration> stack=new LinkedList<Declaration>();
  ListIterator<Declaration> it=stack.listIterator();
  it.add(decl);
  it.previous();
  while (it.hasNext()) {
    decl=it.next();
    Declarator dcl=decl.declarator;
    if (dcl != null && dcl.definition != null) {
      it.add(dcl.definition);
      it.previous();
    }
    if (dcl != null && dcl.parameters != null && dcl.parameters.declarators != null) {
      for (      Declarator d : dcl.parameters.declarators) {
        if (d != null && d.definition != null) {
          it.add(d.definition);
          it.previous();
        }
      }
    }
  }
  while (!stack.isEmpty()) {
    decl=stack.removeLast();
    if (context != null) {
      decl.inaccessible=context.inaccessible;
    }
    if (decl.text.length() == 0) {
      decl.inaccessible=true;
    }
    it=listIterator();
    boolean found=false;
    while (it.hasNext()) {
      Declaration d=it.next();
      if (d.signature.length() > 0 && d.signature.equals(decl.signature)) {
        if ((d.constMember && !decl.constMember) || (d.inaccessible && !decl.inaccessible) || (d.incomplete && !decl.incomplete)) {
          it.remove();
        }
 else {
          found=true;
        }
      }
    }
    if (inherited != null) {
      it=inherited.listIterator();
      while (it.hasNext()) {
        Declaration d=it.next();
        if (d.signature.length() > 0 && d.signature.equals(decl.signature) && !d.incomplete && decl.incomplete) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      decl.text=rescan(decl.text);
      super.add(decl);
    }
  }
  return true;
}",0.9189087488240828
28295,"public File parse(File outputDirectory,String[] classPath,Class cls) throws IOException, ParserException {
  ClassProperties allProperties=Loader.loadProperties(cls,properties,true);
  ClassProperties clsProperties=Loader.loadProperties(cls,properties,false);
  LinkedList<String> clsIncludes=new LinkedList<String>();
  clsIncludes.addAll(clsProperties.get(""String_Node_Str""));
  clsIncludes.addAll(clsProperties.get(""String_Node_Str""));
  LinkedList<String> allIncludes=new LinkedList<String>();
  allIncludes.addAll(allProperties.get(""String_Node_Str""));
  allIncludes.addAll(allProperties.get(""String_Node_Str""));
  LinkedList<String> allTargets=allProperties.get(""String_Node_Str"");
  LinkedList<String> clsTargets=clsProperties.get(""String_Node_Str"");
  LinkedList<String> clsHelpers=clsProperties.get(""String_Node_Str"");
  String target=clsTargets.getFirst();
  LinkedList<Class> allInherited=allProperties.getInheritedClasses();
  infoMap=new InfoMap();
  for (  Class c : allInherited) {
    try {
      ((InfoMapper)c.newInstance()).map(infoMap);
    }
 catch (    ClassCastException e) {
    }
catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
  }
  leafInfoMap=new InfoMap();
  try {
    ((InfoMapper)cls.newInstance()).map(leafInfoMap);
  }
 catch (  ClassCastException e) {
  }
catch (  InstantiationException e) {
  }
catch (  IllegalAccessException e) {
  }
  infoMap.putAll(leafInfoMap);
  String version=Generator.class.getPackage().getImplementationVersion();
  if (version == null) {
    version=""String_Node_Str"";
  }
  String text=""String_Node_Str"" + version + ""String_Node_Str"";
  int n=target.lastIndexOf('.');
  if (n >= 0) {
    text+=""String_Node_Str"" + target.substring(0,n) + ""String_Node_Str"";
  }
  LinkedList<Info> infoList=leafInfoMap.get(null);
  for (  Info info : infoList) {
    if (info.javaText != null && info.javaText.startsWith(""String_Node_Str"")) {
      text+=info.javaText + ""String_Node_Str"";
    }
  }
  text+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  for (  String s : allTargets) {
    if (!target.equals(s)) {
      text+=""String_Node_Str"" + s + ""String_Node_Str"";
    }
  }
  if (allTargets.size() > 1) {
    text+=""String_Node_Str"";
  }
  text+=""String_Node_Str"" + target.substring(n + 1) + ""String_Node_Str""+ (clsHelpers.size() > 0 ? clsHelpers.getFirst() : cls.getCanonicalName())+ ""String_Node_Str"";
  leafInfoMap.putFirst(new Info().javaText(text));
  String targetPath=target.replace('.',File.separatorChar);
  File targetFile=new File(outputDirectory,targetPath + ""String_Node_Str"");
  logger.info(""String_Node_Str"" + targetFile);
  Context context=new Context();
  String[] includePath=classPath;
  n=targetPath.lastIndexOf(File.separatorChar);
  if (n >= 0) {
    includePath=classPath.clone();
    for (int i=0; i < includePath.length; i++) {
      includePath[i]+=File.separator + targetPath.substring(0,n);
    }
  }
  LinkedList<String> paths=allProperties.get(""String_Node_Str"");
  String[] includePaths=paths.toArray(new String[paths.size() + includePath.length]);
  System.arraycopy(includePath,0,includePaths,paths.size(),includePath.length);
  for (  String include : allIncludes) {
    if (!clsIncludes.contains(include)) {
      parse((File)null,context,includePaths,include);
    }
  }
  parse(targetFile,context,includePaths,clsIncludes.toArray(new String[clsIncludes.size()]));
  return targetFile;
}","public File parse(File outputDirectory,String[] classPath,Class cls) throws IOException, ParserException {
  ClassProperties allProperties=Loader.loadProperties(cls,properties,true);
  ClassProperties clsProperties=Loader.loadProperties(cls,properties,false);
  LinkedList<String> clsIncludes=new LinkedList<String>();
  clsIncludes.addAll(clsProperties.get(""String_Node_Str""));
  clsIncludes.addAll(clsProperties.get(""String_Node_Str""));
  LinkedList<String> allIncludes=new LinkedList<String>();
  allIncludes.addAll(allProperties.get(""String_Node_Str""));
  allIncludes.addAll(allProperties.get(""String_Node_Str""));
  LinkedList<String> allTargets=allProperties.get(""String_Node_Str"");
  LinkedList<String> clsTargets=clsProperties.get(""String_Node_Str"");
  LinkedList<String> clsHelpers=clsProperties.get(""String_Node_Str"");
  String target=clsTargets.getFirst();
  LinkedList<Class> allInherited=allProperties.getInheritedClasses();
  infoMap=new InfoMap();
  for (  Class c : allInherited) {
    try {
      ((InfoMapper)c.newInstance()).map(infoMap);
    }
 catch (    ClassCastException e) {
    }
catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
  }
  leafInfoMap=new InfoMap();
  try {
    ((InfoMapper)cls.newInstance()).map(leafInfoMap);
  }
 catch (  ClassCastException e) {
  }
catch (  InstantiationException e) {
  }
catch (  IllegalAccessException e) {
  }
  infoMap.putAll(leafInfoMap);
  String version=Generator.class.getPackage().getImplementationVersion();
  if (version == null) {
    version=""String_Node_Str"";
  }
  String text=""String_Node_Str"" + version + ""String_Node_Str"";
  int n=target.lastIndexOf('.');
  if (n >= 0) {
    text+=""String_Node_Str"" + target.substring(0,n) + ""String_Node_Str"";
  }
  LinkedList<Info> infoList=leafInfoMap.get(null);
  for (  Info info : infoList) {
    if (info.javaText != null && info.javaText.startsWith(""String_Node_Str"")) {
      text+=info.javaText + ""String_Node_Str"";
    }
  }
  text+=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  for (  String s : allTargets) {
    if (!target.equals(s)) {
      text+=""String_Node_Str"" + s + ""String_Node_Str"";
    }
  }
  if (allTargets.size() > 1) {
    text+=""String_Node_Str"";
  }
  text+=""String_Node_Str"" + target.substring(n + 1) + ""String_Node_Str""+ (clsHelpers.size() > 0 ? clsHelpers.getFirst() : cls.getCanonicalName())+ ""String_Node_Str""+ ""String_Node_Str"";
  String targetPath=target.replace('.',File.separatorChar);
  File targetFile=new File(outputDirectory,targetPath + ""String_Node_Str"");
  logger.info(""String_Node_Str"" + targetFile);
  Context context=new Context();
  String[] includePath=classPath;
  n=targetPath.lastIndexOf(File.separatorChar);
  if (n >= 0) {
    includePath=classPath.clone();
    for (int i=0; i < includePath.length; i++) {
      includePath[i]+=File.separator + targetPath.substring(0,n);
    }
  }
  LinkedList<String> paths=allProperties.get(""String_Node_Str"");
  String[] includePaths=paths.toArray(new String[paths.size() + includePath.length]);
  System.arraycopy(includePath,0,includePaths,paths.size(),includePath.length);
  DeclarationList declList=new DeclarationList();
  for (  String include : allIncludes) {
    if (!clsIncludes.contains(include)) {
      parse(context,declList,includePaths,include);
    }
  }
  declList=new DeclarationList(declList);
  containers(context,declList);
  for (  String include : clsIncludes) {
    parse(context,declList,includePaths,include);
  }
  final String newline=lineSeparator != null ? lineSeparator : ""String_Node_Str"";
  Writer out=new FileWriter(targetFile){
    @Override public Writer append(    CharSequence text) throws IOException {
      return super.append(((String)text).replace(""String_Node_Str"",newline).replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
;
  out.append(text);
  for (  Info info : infoList) {
    if (info.javaText != null && !info.javaText.startsWith(""String_Node_Str"")) {
      out.append(info.javaText + ""String_Node_Str"");
    }
  }
  for (  Declaration d : declList) {
    out.append(d.text);
  }
  out.append(""String_Node_Str"").close();
  return targetFile;
}",0.8563906805317889
28296,"void containers(Context context,DeclarationList declList) throws ParserException {
  for (  String containerName : InfoMap.containers) {
    LinkedList<Info> infoList=leafInfoMap.get(containerName);
    for (    Info info : infoList) {
      Declaration decl=new Declaration();
      if (info == null || info.skip || !info.define) {
        continue;
      }
      int dim=1;
      boolean resizable=true;
      Type containerType=new Parser(this,info.cppNames[0]).type(context), indexType, valueType, firstType=null, secondType=null;
      if (containerType.arguments == null || containerType.arguments.length == 0) {
        continue;
      }
 else       if (containerType.arguments.length > 1) {
        resizable=false;
        indexType=containerType.arguments[0];
        valueType=containerType.arguments[1];
      }
 else {
        indexType=new Type();
        indexType.annotations=""String_Node_Str"";
        indexType.cppName=""String_Node_Str"";
        indexType.javaName=""String_Node_Str"";
        valueType=containerType.arguments[0];
      }
      while (valueType.cppName.startsWith(containerName)) {
        dim++;
        valueType=valueType.arguments[0];
      }
      if (valueType.cppName.startsWith(""String_Node_Str"")) {
        firstType=valueType.arguments[0];
        secondType=valueType.arguments[1];
        if (!firstType.pointer && (firstType.annotations == null || firstType.annotations.length() == 0)) {
          firstType.annotations=""String_Node_Str"";
        }
        if (!secondType.pointer && (secondType.annotations == null || secondType.annotations.length() == 0)) {
          secondType.annotations=""String_Node_Str"";
        }
      }
      if (!valueType.pointer && (valueType.annotations == null || valueType.annotations.length() == 0)) {
        valueType.annotations=""String_Node_Str"";
      }
      String arrayBrackets=""String_Node_Str"";
      for (int i=0; i < dim - 1; i++) {
        arrayBrackets+=""String_Node_Str"";
      }
      decl.text+=""String_Node_Str"" + ""String_Node_Str"" + containerType.cppName + ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ (!resizable || firstType != null || secondType != null ? ""String_Node_Str"" : ""String_Node_Str"" + containerType.javaName + ""String_Node_Str""+ valueType.javaName+ arrayBrackets+ ""String_Node_Str"")+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ (!resizable ? ""String_Node_Str"" : ""String_Node_Str"" + containerType.javaName + ""String_Node_Str"")+ ""String_Node_Str""+ (!resizable ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str"";
      for (int i=0; i < dim; i++) {
        String indexAnnotation=i > 0 ? (""String_Node_Str"" + (i > 1 ? ""String_Node_Str"" + i + ""String_Node_Str"" : ""String_Node_Str"")) : ""String_Node_Str"";
        String indices=""String_Node_Str"", separator=""String_Node_Str"";
        for (int j=0; j < i; j++) {
          indices+=separator + indexType.annotations + indexType.javaName+ ""String_Node_Str""+ (char)('i' + j);
          separator=""String_Node_Str"";
        }
        decl.text+=""String_Node_Str"" + indexAnnotation + ""String_Node_Str""+ indices+ ""String_Node_Str""+ (!resizable ? ""String_Node_Str"" : ""String_Node_Str"" + indexAnnotation + ""String_Node_Str""+ indices+ separator+ ""String_Node_Str"");
      }
      String params=""String_Node_Str"", separator=""String_Node_Str"";
      for (int i=0; i < dim; i++) {
        params+=separator + indexType.annotations + indexType.javaName+ ""String_Node_Str""+ (char)('i' + i);
        separator=""String_Node_Str"";
      }
      if (firstType != null && secondType != null) {
        String indexAnnotation=""String_Node_Str"" + (dim > 1 ? ""String_Node_Str"" + dim + ""String_Node_Str"" : ""String_Node_Str"");
        decl.text+=""String_Node_Str"" + ""String_Node_Str"" + indexAnnotation + ""String_Node_Str""+ firstType.annotations+ firstType.javaName+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ params+ separator+ firstType.javaName+ ""String_Node_Str""+ ""String_Node_Str""+ indexAnnotation+ ""String_Node_Str""+ secondType.annotations+ secondType.javaName+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ params+ separator+ secondType.javaName+ ""String_Node_Str"";
      }
 else {
        decl.text+=""String_Node_Str"" + ""String_Node_Str"" + valueType.annotations + valueType.javaName+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ params+ separator+ valueType.javaName+ ""String_Node_Str"";
      }
      if (resizable && firstType == null && secondType == null) {
        decl.text+=""String_Node_Str"" + ""String_Node_Str"" + containerType.javaName + ""String_Node_Str""+ valueType.javaName+ arrayBrackets+ ""String_Node_Str"";
        String indent=""String_Node_Str"", indices=""String_Node_Str"", args=""String_Node_Str"";
        separator=""String_Node_Str"";
        for (int i=0; i < dim; i++) {
          char c=(char)('i' + i);
          decl.text+=indent + ""String_Node_Str"" + args+ ""String_Node_Str""+ indices+ ""String_Node_Str""+ args+ separator+ ""String_Node_Str""+ indices+ ""String_Node_Str""+ indent+ ""String_Node_Str""+ c+ ""String_Node_Str""+ c+ ""String_Node_Str""+ indices+ ""String_Node_Str""+ c+ ""String_Node_Str"";
          indent+=""String_Node_Str"";
          indices+=""String_Node_Str"" + c + ""String_Node_Str"";
          args+=separator + c;
          separator=""String_Node_Str"";
        }
        decl.text+=indent + ""String_Node_Str"" + args+ separator+ ""String_Node_Str""+ indices+ ""String_Node_Str"";
        for (int i=0; i < dim; i++) {
          indent=indent.substring(4);
          decl.text+=indent + ""String_Node_Str"";
        }
        decl.text+=""String_Node_Str"" + ""String_Node_Str"";
      }
      decl.text+=""String_Node_Str"";
      declList.add(decl);
    }
  }
}","void containers(Context context,DeclarationList declList) throws ParserException {
  for (  String containerName : InfoMap.containers) {
    LinkedList<Info> infoList=leafInfoMap.get(containerName);
    for (    Info info : infoList) {
      Declaration decl=new Declaration();
      if (info == null || info.skip || !info.define) {
        continue;
      }
      int dim=1;
      boolean resizable=true;
      Type containerType=new Parser(this,info.cppNames[0]).type(context), indexType, valueType, firstType=null, secondType=null;
      if (containerType.arguments == null || containerType.arguments.length == 0) {
        continue;
      }
 else       if (containerType.arguments.length > 1) {
        resizable=false;
        indexType=containerType.arguments[0];
        valueType=containerType.arguments[1];
      }
 else {
        indexType=new Type();
        indexType.annotations=""String_Node_Str"";
        indexType.cppName=""String_Node_Str"";
        indexType.javaName=""String_Node_Str"";
        valueType=containerType.arguments[0];
      }
      while (valueType.cppName.startsWith(containerName) && leafInfoMap.get(valueType.cppName,false).size() == 0) {
        dim++;
        valueType=valueType.arguments[0];
      }
      if (valueType.cppName.startsWith(""String_Node_Str"")) {
        firstType=valueType.arguments[0];
        secondType=valueType.arguments[1];
        if (!firstType.pointer && (firstType.annotations == null || firstType.annotations.length() == 0)) {
          firstType.annotations=""String_Node_Str"";
        }
        if (!secondType.pointer && (secondType.annotations == null || secondType.annotations.length() == 0)) {
          secondType.annotations=""String_Node_Str"";
        }
      }
      if (!valueType.pointer && (valueType.annotations == null || valueType.annotations.length() == 0)) {
        valueType.annotations=""String_Node_Str"";
      }
      String arrayBrackets=""String_Node_Str"";
      for (int i=0; i < dim - 1; i++) {
        arrayBrackets+=""String_Node_Str"";
      }
      decl.text+=""String_Node_Str"" + ""String_Node_Str"" + containerType.cppName + ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ (!resizable || firstType != null || secondType != null ? ""String_Node_Str"" : ""String_Node_Str"" + containerType.javaName + ""String_Node_Str""+ valueType.javaName+ arrayBrackets+ ""String_Node_Str"")+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ (!resizable ? ""String_Node_Str"" : ""String_Node_Str"" + containerType.javaName + ""String_Node_Str"")+ ""String_Node_Str""+ (!resizable ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str"";
      for (int i=0; i < dim; i++) {
        String indexAnnotation=i > 0 ? (""String_Node_Str"" + (i > 1 ? ""String_Node_Str"" + i + ""String_Node_Str"" : ""String_Node_Str"")) : ""String_Node_Str"";
        String indices=""String_Node_Str"", separator=""String_Node_Str"";
        for (int j=0; j < i; j++) {
          indices+=separator + indexType.annotations + indexType.javaName+ ""String_Node_Str""+ (char)('i' + j);
          separator=""String_Node_Str"";
        }
        decl.text+=""String_Node_Str"" + indexAnnotation + ""String_Node_Str""+ indices+ ""String_Node_Str""+ (!resizable ? ""String_Node_Str"" : ""String_Node_Str"" + indexAnnotation + ""String_Node_Str""+ indices+ separator+ ""String_Node_Str"");
      }
      String params=""String_Node_Str"", separator=""String_Node_Str"";
      for (int i=0; i < dim; i++) {
        params+=separator + indexType.annotations + indexType.javaName+ ""String_Node_Str""+ (char)('i' + i);
        separator=""String_Node_Str"";
      }
      if (firstType != null && secondType != null) {
        String indexAnnotation=""String_Node_Str"" + (dim > 1 ? ""String_Node_Str"" + dim + ""String_Node_Str"" : ""String_Node_Str"");
        decl.text+=""String_Node_Str"" + ""String_Node_Str"" + indexAnnotation + ""String_Node_Str""+ firstType.annotations+ firstType.javaName+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ params+ separator+ firstType.javaName+ ""String_Node_Str""+ ""String_Node_Str""+ indexAnnotation+ ""String_Node_Str""+ secondType.annotations+ secondType.javaName+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ params+ separator+ secondType.javaName+ ""String_Node_Str"";
      }
 else {
        decl.text+=""String_Node_Str"" + ""String_Node_Str"" + valueType.annotations + valueType.javaName+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ containerType.javaName+ ""String_Node_Str""+ params+ separator+ valueType.javaName+ ""String_Node_Str"";
      }
      if (resizable && firstType == null && secondType == null) {
        decl.text+=""String_Node_Str"" + ""String_Node_Str"" + containerType.javaName + ""String_Node_Str""+ valueType.javaName+ arrayBrackets+ ""String_Node_Str"";
        String indent=""String_Node_Str"", indices=""String_Node_Str"", args=""String_Node_Str"";
        separator=""String_Node_Str"";
        for (int i=0; i < dim; i++) {
          char c=(char)('i' + i);
          decl.text+=indent + ""String_Node_Str"" + args+ ""String_Node_Str""+ indices+ ""String_Node_Str""+ args+ separator+ ""String_Node_Str""+ indices+ ""String_Node_Str""+ indent+ ""String_Node_Str""+ c+ ""String_Node_Str""+ c+ ""String_Node_Str""+ indices+ ""String_Node_Str""+ c+ ""String_Node_Str"";
          indent+=""String_Node_Str"";
          indices+=""String_Node_Str"" + c + ""String_Node_Str"";
          args+=separator + c;
          separator=""String_Node_Str"";
        }
        decl.text+=indent + ""String_Node_Str"" + args+ separator+ ""String_Node_Str""+ indices+ ""String_Node_Str"";
        for (int i=0; i < dim; i++) {
          indent=indent.substring(4);
          decl.text+=indent + ""String_Node_Str"";
        }
        decl.text+=""String_Node_Str"" + ""String_Node_Str"";
      }
      decl.text+=""String_Node_Str"";
      declList.add(decl);
    }
  }
}",0.9953665397981136
28297,"private void doCallbackAllocator(Class cls,String callbackName){
  String instanceTypeName=getFunctionClassName(cls);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + cls.getCanonicalName() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + instanceTypeName + ""String_Node_Str""+ instanceTypeName+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + callbackName + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + instanceTypeName + ""String_Node_Str"");
  deallocators.register(cls);
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + callbackName + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","private void doCallbackAllocator(Class cls,String callbackName){
  String instanceTypeName=getFunctionClassName(cls);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + cls.getCanonicalName() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + instanceTypeName + ""String_Node_Str""+ instanceTypeName+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + callbackName + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + mangle(cls.getName()) + ""String_Node_Str"");
  deallocators.register(cls);
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + callbackName + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9827501232134056
28298,"private boolean doClasses(boolean handleExceptions,boolean defineAdapters,String classPath,Class<?>... classes){
  out.println(""String_Node_Str"");
  out.println();
  if (out2 != null) {
    out2.println(""String_Node_Str"");
    out2.println();
  }
  String define=properties.getProperty(""String_Node_Str"");
  if (define != null && define.length() > 0) {
    for (    String s : define.split(""String_Node_Str"")) {
      out.println(""String_Node_Str"" + s);
    }
    out.println();
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  if (out2 != null) {
    out2.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  String[] include={properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str"")};
  for (int i=0; i < include.length; i++) {
    if (include[i] != null && include[i].length() > 0) {
      if (i == 1) {
        out.println(""String_Node_Str"");
        if (out2 != null) {
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
        }
      }
      for (      String s : include[i].split(""String_Node_Str"")) {
        String line=""String_Node_Str"";
        if (!s.startsWith(""String_Node_Str"") && !s.startsWith(""String_Node_Str"")) {
          line+='""';
        }
        line+=s;
        if (!s.endsWith(""String_Node_Str"") && !s.endsWith(""String_Node_Str"")) {
          line+='""';
        }
        out.println(line);
        if (out2 != null) {
          out2.println(line);
        }
      }
      if (i == 1) {
        out.println(""String_Node_Str"");
        if (out2 != null) {
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
        }
      }
      out.println();
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  Iterator<Class> classIterator=jclasses.iterator();
  int maxMemberSize=0;
  while (classIterator.hasNext()) {
    Class c=classIterator.next();
    out.print(""String_Node_Str"" + c.getName().replace('.','/') + ""String_Node_Str"");
    if (classIterator.hasNext()) {
      out.println(""String_Node_Str"");
    }
    LinkedList<String> m=members.get(c);
    if (m != null && m.size() > maxMemberSize) {
      maxMemberSize=m.size();
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(NullPointerException.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  if (handleExceptions) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + jclasses.register(RuntimeException.class) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + jclasses.register(RuntimeException.class) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
  }
  if (defineAdapters) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
  }
  if (!functionDefinitions.isEmpty()) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    if (out2 != null) {
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    if (out2 != null) {
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
  }
  for (  String s : functionDefinitions) {
    out.println(s);
  }
  out.println();
  for (  String s : functionPointers) {
    out.println(s);
  }
  out.println();
  for (  Class c : deallocators) {
    String name=""String_Node_Str"" + mangle(c.getName());
    out.print(""String_Node_Str"" + name + ""String_Node_Str"");
    if (FunctionPointer.class.isAssignableFrom(c)) {
      out.println(name + ""String_Node_Str"");
    }
 else {
      String[] typeName=getCPPTypeName(c);
      out.println(typeName[0] + ""String_Node_Str"" + typeName[1]+ ""String_Node_Str"");
    }
  }
  for (  Class c : arrayDeallocators) {
    String name=""String_Node_Str"" + mangle(c.getName());
    String[] typeName=getCPPTypeName(c);
    out.println(""String_Node_Str"" + name + ""String_Node_Str""+ typeName[0]+ ""String_Node_Str""+ typeName[1]+ ""String_Node_Str"");
  }
  out.println();
  out.println(""String_Node_Str"");
  if (out2 != null) {
    out2.println();
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + classPath + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str""+ maxMemberSize+ ""String_Node_Str"");
  classIterator=jclasses.iterator();
  while (classIterator.hasNext()) {
    out.print(""String_Node_Str"");
    LinkedList<String> m=members.get(classIterator.next());
    Iterator<String> memberIterator=m == null ? null : m.iterator();
    while (memberIterator != null && memberIterator.hasNext()) {
      out.print(""String_Node_Str"" + memberIterator.next() + ""String_Node_Str"");
      if (memberIterator.hasNext()) {
        out.print(""String_Node_Str"");
      }
    }
    out.print(""String_Node_Str"");
    if (classIterator.hasNext()) {
      out.println(""String_Node_Str"");
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str""+ maxMemberSize+ ""String_Node_Str"");
  classIterator=jclasses.iterator();
  while (classIterator.hasNext()) {
    out.print(""String_Node_Str"");
    Class c=classIterator.next();
    LinkedList<String> m=members.get(c);
    Iterator<String> memberIterator=m == null ? null : m.iterator();
    while (memberIterator != null && memberIterator.hasNext()) {
      String[] typeName=getCPPTypeName(c);
      String valueTypeName=getValueTypeName(typeName);
      String memberName=memberIterator.next();
      if (""String_Node_Str"".equals(memberName)) {
        if (""String_Node_Str"".equals(valueTypeName)) {
          valueTypeName=""String_Node_Str"";
        }
        out.print(""String_Node_Str"" + valueTypeName + ""String_Node_Str"");
      }
 else {
        out.print(""String_Node_Str"" + valueTypeName + ""String_Node_Str""+ memberName+ ""String_Node_Str"");
      }
      if (memberIterator.hasNext()) {
        out.print(""String_Node_Str"");
      }
    }
    out.print(""String_Node_Str"");
    if (classIterator.hasNext()) {
      out.println(""String_Node_Str"");
    }
  }
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  classIterator=jclasses.iterator();
  while (classIterator.hasNext()) {
    LinkedList<String> m=members.get(classIterator.next());
    out.print(m == null ? 0 : m.size());
    if (classIterator.hasNext()) {
      out.print(""String_Node_Str"");
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Loader.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Loader.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  classIterator=jclassesInit.iterator();
  while (classIterator.hasNext()) {
    Class c=classIterator.next();
    if (c == Pointer.class) {
      continue;
    }
    out.println(""String_Node_Str"" + jclasses.indexOf(c) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  if (out2 != null) {
    out2.println(""String_Node_Str"");
    out2.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  for (  Class<?> cls : baseClasses) {
    doMethods(cls);
  }
  boolean didSomethingUseful=false;
  for (  Class<?> cls : classes) {
    try {
      didSomethingUseful|=doMethods(cls);
    }
 catch (    NoClassDefFoundError e) {
      logger.log(Level.WARNING,""String_Node_Str"" + cls.getCanonicalName() + ""String_Node_Str""+ e);
    }
  }
  out.println(""String_Node_Str"");
  out.println();
  if (out2 != null) {
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
  }
  return didSomethingUseful;
}","private boolean doClasses(boolean handleExceptions,boolean defineAdapters,String classPath,Class<?>... classes){
  out.println(""String_Node_Str"");
  out.println();
  if (out2 != null) {
    out2.println(""String_Node_Str"");
    out2.println();
  }
  String define=properties.getProperty(""String_Node_Str"");
  if (define != null && define.length() > 0) {
    for (    String s : define.split(""String_Node_Str"")) {
      out.println(""String_Node_Str"" + s);
    }
    out.println();
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  if (out2 != null) {
    out2.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  String[] include={properties.getProperty(""String_Node_Str""),properties.getProperty(""String_Node_Str"")};
  for (int i=0; i < include.length; i++) {
    if (include[i] != null && include[i].length() > 0) {
      if (i == 1) {
        out.println(""String_Node_Str"");
        if (out2 != null) {
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
        }
      }
      for (      String s : include[i].split(""String_Node_Str"")) {
        String line=""String_Node_Str"";
        if (!s.startsWith(""String_Node_Str"") && !s.startsWith(""String_Node_Str"")) {
          line+='""';
        }
        line+=s;
        if (!s.endsWith(""String_Node_Str"") && !s.endsWith(""String_Node_Str"")) {
          line+='""';
        }
        out.println(line);
        if (out2 != null) {
          out2.println(line);
        }
      }
      if (i == 1) {
        out.println(""String_Node_Str"");
        if (out2 != null) {
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
          out2.println(""String_Node_Str"");
        }
      }
      out.println();
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  Iterator<Class> classIterator=jclasses.iterator();
  int maxMemberSize=0;
  while (classIterator.hasNext()) {
    Class c=classIterator.next();
    out.print(""String_Node_Str"" + c.getName().replace('.','/') + ""String_Node_Str"");
    if (classIterator.hasNext()) {
      out.println(""String_Node_Str"");
    }
    LinkedList<String> m=members.get(c);
    if (m != null && m.size() > maxMemberSize) {
      maxMemberSize=m.size();
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(NullPointerException.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  if (handleExceptions) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + jclasses.register(RuntimeException.class) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + jclasses.register(RuntimeException.class) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
  }
  if (defineAdapters) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
  }
  if (!functionDefinitions.isEmpty()) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    if (out2 != null) {
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    if (out2 != null) {
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println();
  }
  for (  String s : functionDefinitions) {
    out.println(s);
  }
  out.println();
  for (  String s : functionPointers) {
    out.println(s);
  }
  out.println();
  for (  Class c : deallocators) {
    String name=""String_Node_Str"" + mangle(c.getName());
    out.print(""String_Node_Str"" + name + ""String_Node_Str"");
    if (FunctionPointer.class.isAssignableFrom(c)) {
      String typeName=getFunctionClassName(c);
      out.println(typeName + ""String_Node_Str"");
    }
 else {
      String[] typeName=getCPPTypeName(c);
      out.println(typeName[0] + ""String_Node_Str"" + typeName[1]+ ""String_Node_Str"");
    }
  }
  for (  Class c : arrayDeallocators) {
    String name=""String_Node_Str"" + mangle(c.getName());
    String[] typeName=getCPPTypeName(c);
    out.println(""String_Node_Str"" + name + ""String_Node_Str""+ typeName[0]+ ""String_Node_Str""+ typeName[1]+ ""String_Node_Str"");
  }
  out.println();
  out.println(""String_Node_Str"");
  if (out2 != null) {
    out2.println();
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + classPath + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str""+ maxMemberSize+ ""String_Node_Str"");
  classIterator=jclasses.iterator();
  while (classIterator.hasNext()) {
    out.print(""String_Node_Str"");
    LinkedList<String> m=members.get(classIterator.next());
    Iterator<String> memberIterator=m == null ? null : m.iterator();
    while (memberIterator != null && memberIterator.hasNext()) {
      out.print(""String_Node_Str"" + memberIterator.next() + ""String_Node_Str"");
      if (memberIterator.hasNext()) {
        out.print(""String_Node_Str"");
      }
    }
    out.print(""String_Node_Str"");
    if (classIterator.hasNext()) {
      out.println(""String_Node_Str"");
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str""+ maxMemberSize+ ""String_Node_Str"");
  classIterator=jclasses.iterator();
  while (classIterator.hasNext()) {
    out.print(""String_Node_Str"");
    Class c=classIterator.next();
    LinkedList<String> m=members.get(c);
    Iterator<String> memberIterator=m == null ? null : m.iterator();
    while (memberIterator != null && memberIterator.hasNext()) {
      String[] typeName=getCPPTypeName(c);
      String valueTypeName=getValueTypeName(typeName);
      String memberName=memberIterator.next();
      if (""String_Node_Str"".equals(memberName)) {
        if (""String_Node_Str"".equals(valueTypeName)) {
          valueTypeName=""String_Node_Str"";
        }
        out.print(""String_Node_Str"" + valueTypeName + ""String_Node_Str"");
      }
 else {
        out.print(""String_Node_Str"" + valueTypeName + ""String_Node_Str""+ memberName+ ""String_Node_Str"");
      }
      if (memberIterator.hasNext()) {
        out.print(""String_Node_Str"");
      }
    }
    out.print(""String_Node_Str"");
    if (classIterator.hasNext()) {
      out.println(""String_Node_Str"");
    }
  }
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  classIterator=jclasses.iterator();
  while (classIterator.hasNext()) {
    LinkedList<String> m=members.get(classIterator.next());
    out.print(m == null ? 0 : m.size());
    if (classIterator.hasNext()) {
      out.print(""String_Node_Str"");
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Loader.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Loader.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.register(Pointer.class) + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  classIterator=jclassesInit.iterator();
  while (classIterator.hasNext()) {
    Class c=classIterator.next();
    if (c == Pointer.class) {
      continue;
    }
    out.println(""String_Node_Str"" + jclasses.indexOf(c) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  if (out2 != null) {
    out2.println(""String_Node_Str"");
    out2.println();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"" + JNI_VERSION + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + jclasses.size() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println();
  for (  Class<?> cls : baseClasses) {
    doMethods(cls);
  }
  boolean didSomethingUseful=false;
  for (  Class<?> cls : classes) {
    try {
      didSomethingUseful|=doMethods(cls);
    }
 catch (    NoClassDefFoundError e) {
      logger.log(Level.WARNING,""String_Node_Str"" + cls.getCanonicalName() + ""String_Node_Str""+ e);
    }
  }
  out.println(""String_Node_Str"");
  out.println();
  if (out2 != null) {
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
    out2.println(""String_Node_Str"");
  }
  return didSomethingUseful;
}",0.997936265444507
28299,"public void onViewCreated(View view,Bundle savedInstanceState){
  if (view.getContext() != null && builder != null) {
    mLibTask=new LibraryTask(view.getContext());
    executeLibTask(mLibTask);
  }
}","public void onViewCreated(View view,Bundle savedInstanceState){
  if (view.getContext() != null && builder != null) {
    mLibTask=new LibraryTask(view.getContext().getApplicationContext());
    executeLibTask(mLibTask);
  }
}",0.9439252336448598
28300,"@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_NO_TITLE);
  boolean customTheme=false;
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    int themeId=bundle.getInt(Libs.BUNDLE_THEME,-1);
    if (themeId != -1) {
      customTheme=true;
      setTheme(themeId);
    }
  }
  if (!customTheme) {
    setTheme(R.style.Theme_AppCompat_NoActionBar);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_opensource);
  String title=""String_Node_Str"";
  if (bundle != null) {
    title=bundle.getString(Libs.BUNDLE_TITLE);
  }
  LibsFragment fragment=new LibsFragment();
  fragment.setArguments(bundle);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar ab=getSupportActionBar();
  if (ab != null) {
    if (bundle != null && bundle.containsKey(Libs.BUNDLE_COLORS)) {
      Colors colors=bundle.getParcelable(Libs.BUNDLE_COLORS);
      if (colors != null) {
        ab.setBackgroundDrawable(new ColorDrawable(colors.appBarColor));
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          getWindow().setStatusBarColor(colors.statusBarColor);
        }
      }
 else {
        ab.setBackgroundDrawable(null);
      }
    }
    ab.setDisplayHomeAsUpEnabled(true);
    if (TextUtils.isEmpty(title)) {
      ab.setDisplayShowTitleEnabled(false);
    }
 else {
      ab.setDisplayShowTitleEnabled(true);
      ab.setTitle(title);
    }
    ab.setDisplayUseLogoEnabled(true);
  }
  FragmentManager fragmentManager=getSupportFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.frame_container,fragment).commit();
}","@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_NO_TITLE);
  boolean customTheme=false;
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    int themeId=bundle.getInt(Libs.BUNDLE_THEME,-1);
    if (themeId != -1) {
      customTheme=true;
      setTheme(themeId);
    }
  }
  if (!customTheme) {
    setTheme(R.style.Theme_AppCompat_NoActionBar);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_opensource);
  String title=""String_Node_Str"";
  if (bundle != null) {
    title=bundle.getString(Libs.BUNDLE_TITLE);
  }
  LibsFragment fragment=new LibsFragment();
  fragment.setArguments(bundle);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ActionBar ab=getSupportActionBar();
  if (ab != null) {
    if (bundle != null && bundle.containsKey(Libs.BUNDLE_COLORS)) {
      Colors colors=(Colors)bundle.getSerializable(Libs.BUNDLE_COLORS);
      if (colors != null) {
        ab.setBackgroundDrawable(new ColorDrawable(colors.appBarColor));
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          getWindow().setStatusBarColor(colors.statusBarColor);
        }
      }
 else {
        ab.setBackgroundDrawable(null);
      }
    }
    ab.setDisplayHomeAsUpEnabled(true);
    if (TextUtils.isEmpty(title)) {
      ab.setDisplayShowTitleEnabled(false);
    }
 else {
      ab.setDisplayShowTitleEnabled(true);
      ab.setTitle(title);
    }
    ab.setDisplayUseLogoEnabled(true);
  }
  FragmentManager fragmentManager=getSupportFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.frame_container,fragment).commit();
}",0.9875813128326434
28301,"@Override public void onCreate(Bundle savedInstanceState){
  boolean customTheme=false;
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    int themeId=bundle.getInt(Libs.BUNDLE_THEME,-1);
    if (themeId != -1) {
      customTheme=true;
      setTheme(themeId);
    }
  }
  if (!customTheme) {
    setTheme(R.style.Theme_AppCompat);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_opensource);
  String title=""String_Node_Str"";
  if (bundle != null) {
    title=bundle.getString(Libs.BUNDLE_TITLE);
  }
  LibsFragment fragment=new LibsFragment();
  fragment.setArguments(bundle);
  ActionBar ab=getSupportActionBar();
  if (ab != null) {
    Colors colors=bundle == null ? null : (Colors)bundle.getParcelable(Libs.BUNDLE_COLORS);
    if (colors != null) {
      ab.setBackgroundDrawable(new ColorDrawable(colors.appBarColor));
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        getWindow().setStatusBarColor(colors.statusBarColor);
      }
    }
 else     ab.setBackgroundDrawable(null);
    ab.setDisplayHomeAsUpEnabled(true);
    if (TextUtils.isEmpty(title)) {
      ab.setDisplayShowTitleEnabled(false);
    }
 else {
      ab.setDisplayShowTitleEnabled(true);
      ab.setTitle(title);
    }
    ab.setDisplayUseLogoEnabled(true);
  }
  FragmentManager fragmentManager=getSupportFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.frame_container,fragment).commit();
}","@Override public void onCreate(Bundle savedInstanceState){
  boolean customTheme=false;
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    int themeId=bundle.getInt(Libs.BUNDLE_THEME,-1);
    if (themeId != -1) {
      customTheme=true;
      setTheme(themeId);
    }
  }
  if (!customTheme) {
    setTheme(R.style.Theme_AppCompat);
  }
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_opensource);
  String title=""String_Node_Str"";
  if (bundle != null) {
    title=bundle.getString(Libs.BUNDLE_TITLE);
  }
  LibsFragment fragment=new LibsFragment();
  fragment.setArguments(bundle);
  ActionBar ab=getSupportActionBar();
  if (ab != null) {
    if (bundle != null && bundle.containsKey(Libs.BUNDLE_COLORS)) {
      Colors colors=bundle.getParcelable(Libs.BUNDLE_COLORS);
      if (colors != null) {
        ab.setBackgroundDrawable(new ColorDrawable(colors.appBarColor));
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          getWindow().setStatusBarColor(colors.statusBarColor);
        }
      }
 else {
        ab.setBackgroundDrawable(null);
      }
    }
    ab.setDisplayHomeAsUpEnabled(true);
    if (TextUtils.isEmpty(title)) {
      ab.setDisplayShowTitleEnabled(false);
    }
 else {
      ab.setDisplayShowTitleEnabled(true);
      ab.setTitle(title);
    }
    ab.setDisplayUseLogoEnabled(true);
  }
  FragmentManager fragmentManager=getSupportFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.frame_container,fragment).commit();
}",0.9311497326203207
28302,"/** 
 * 旋转图片为指定角度<br> 来自：http://blog.51cto.com/cping1982/130066
 * @param image 目标图像
 * @param degree 旋转角度
 * @return 旋转后的图片
 * @since 3.2.2
 */
public Img rotate(int degree){
  final BufferedImage image=this.srcImage;
  int width=image.getWidth(null);
  int height=image.getHeight(null);
  final BufferedImage destImg=new BufferedImage(width,height,getTypeInt());
  Graphics2D graphics2d=destImg.createGraphics();
  graphics2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  graphics2d.rotate(Math.toRadians(degree),width / 2,height / 2);
  graphics2d.drawImage(image,0,0,null);
  graphics2d.dispose();
  this.destImage=destImg;
  return this;
}","/** 
 * 旋转图片为指定角度<br> 来自：http://blog.51cto.com/cping1982/130066
 * @param degree 旋转角度
 * @return 旋转后的图片
 * @since 3.2.2
 */
public Img rotate(int degree){
  final BufferedImage image=this.srcImage;
  int width=image.getWidth(null);
  int height=image.getHeight(null);
  final BufferedImage destImg=new BufferedImage(width,height,getTypeInt());
  Graphics2D graphics2d=destImg.createGraphics();
  graphics2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  graphics2d.rotate(Math.toRadians(degree),width / 2,height / 2);
  graphics2d.drawImage(image,0,0,null);
  graphics2d.dispose();
  this.destImage=destImg;
  return this;
}",0.9846827133479212
28303,"/** 
 * 生成随机颜色
 * @param random 随机对象 {@link Random}
 * @return 随机颜色
 * @since 4.1.5
 */
public static Color randomColor(){
  final Random random=getRandom();
  return new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255));
}","/** 
 * 生成随机颜色
 * @return 随机颜色
 * @since 4.1.5
 */
public static Color randomColor(){
  final Random random=getRandom();
  return new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255));
}",0.9164785553047404
28304,"/** 
 * 旋转图片为指定角度<br> 来自：http://blog.51cto.com/cping1982/130066
 * @param image 目标图像
 * @param degree 旋转角度
 * @return 旋转后的图片
 * @since 3.2.2
 */
public Img rotate(int degree){
  final BufferedImage image=this.srcImage;
  int width=image.getWidth(null);
  int height=image.getHeight(null);
  int type=ImageUtil.toBufferedImage(image).getTransparency();
  final BufferedImage destImg=new BufferedImage(width,height,type);
  Graphics2D graphics2d=destImg.createGraphics();
  graphics2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  graphics2d.rotate(Math.toRadians(degree),width / 2,height / 2);
  graphics2d.drawImage(image,0,0,null);
  graphics2d.dispose();
  this.destImage=destImg;
  return this;
}","/** 
 * 旋转图片为指定角度<br> 来自：http://blog.51cto.com/cping1982/130066
 * @param image 目标图像
 * @param degree 旋转角度
 * @return 旋转后的图片
 * @since 3.2.2
 */
public Img rotate(int degree){
  final BufferedImage image=this.srcImage;
  int width=image.getWidth(null);
  int height=image.getHeight(null);
  final BufferedImage destImg=new BufferedImage(width,height,getTypeInt());
  Graphics2D graphics2d=destImg.createGraphics();
  graphics2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  graphics2d.rotate(Math.toRadians(degree),width / 2,height / 2);
  graphics2d.drawImage(image,0,0,null);
  graphics2d.dispose();
  this.destImage=destImg;
  return this;
}",0.8680027643400138
28305,"/** 
 * 从Image取图片并开始处理
 * @param imageFile 图片文件
 * @return {@link Img}
 */
public static Img from(Image image){
  return new Img(ImageUtil.toBufferedImage(image));
}","/** 
 * 从Image取图片并开始处理
 * @param image 图片
 * @return {@link Img}
 */
public static Img from(Image image){
  return new Img(ImageUtil.toBufferedImage(image));
}",0.9814814814814816
28306,"/** 
 * 水平翻转图像
 * @return this
 */
public Img flip(){
  final BufferedImage image=this.srcImage;
  int width=image.getWidth();
  int height=image.getHeight();
  int type=ImageUtil.toBufferedImage(image).getTransparency();
  final BufferedImage destImg=new BufferedImage(width,height,type);
  Graphics2D graphics2d=destImg.createGraphics();
  graphics2d.drawImage(image,0,0,width,height,width,0,0,height,null);
  graphics2d.dispose();
  this.destImage=destImg;
  return this;
}","/** 
 * 水平翻转图像
 * @return this
 */
public Img flip(){
  final BufferedImage image=this.srcImage;
  int width=image.getWidth();
  int height=image.getHeight();
  final BufferedImage destImg=new BufferedImage(width,height,getTypeInt());
  Graphics2D graphics2d=destImg.createGraphics();
  graphics2d.drawImage(image,0,0,width,height,width,0,0,height,null);
  graphics2d.dispose();
  this.destImage=destImg;
  return this;
}",0.7870680044593088
28307,"/** 
 * 将元素值设置为数组的某个位置，当给定的index大于数组长度，则追加
 * @param array 已有数组
 * @param newElements 新元素
 * @return 新数组或原有数组
 * @since 4.1.2
 */
public static Object setOrAppend(Object array,int index,Object value){
  if (index < length(array)) {
    Array.set(array,index,value);
    return array;
  }
 else {
    return append(array,value);
  }
}","/** 
 * 将元素值设置为数组的某个位置，当给定的index大于数组长度，则追加
 * @param array 已有数组
 * @param index 位置，大于长度追加，否则替换
 * @param value 新值
 * @return 新数组或原有数组
 * @since 4.1.2
 */
public static Object setOrAppend(Object array,int index,Object value){
  if (index < length(array)) {
    Array.set(array,index,value);
    return array;
  }
 else {
    return append(array,value);
  }
}",0.9304347826086956
28308,"/** 
 * 从URL对象中获取不被编码的路径Path<br> 对于本地路径，URL对象的getPath方法对于包含中文或空格时会被编码，导致本读路径读取错误。<br> 此方法将URL转为URI后获取路径用于解决路径被编码的问题
 * @param url {@link URL}
 * @return 路径
 * @since 3.0.8
 */
public static String getDecodedPath(URL url){
  if (null == url) {
    return null;
  }
  URI uri=null;
  try {
    uri=toURI(url);
  }
 catch (  UtilException e) {
  }
  return (null != uri) ? uri.getPath() : url.getPath();
}","/** 
 * 从URL对象中获取不被编码的路径Path<br> 对于本地路径，URL对象的getPath方法对于包含中文或空格时会被编码，导致本读路径读取错误。<br> 此方法将URL转为URI后获取路径用于解决路径被编码的问题
 * @param url {@link URL}
 * @return 路径
 * @since 3.0.8
 */
public static String getDecodedPath(URL url){
  if (null == url) {
    return null;
  }
  String path=null;
  try {
    path=URLUtil.toURI(url).getPath();
  }
 catch (  UtilException e) {
  }
  return (null != path) ? path : url.getPath();
}",0.8400488400488401
28309,"@Test public void getAbsolutePathTest(){
  String absolutePath=FileUtil.getAbsolutePath(""String_Node_Str"");
  String absolutePath2=FileUtil.getAbsolutePath(absolutePath);
  Assert.assertNotNull(absolutePath2);
  Assert.assertEquals(absolutePath,absolutePath2);
}","@Test public void getAbsolutePathTest(){
  String absolutePath=FileUtil.getAbsolutePath(""String_Node_Str"");
  Assert.assertNotNull(absolutePath);
  String absolutePath2=FileUtil.getAbsolutePath(absolutePath);
  Assert.assertNotNull(absolutePath2);
  Assert.assertEquals(absolutePath,absolutePath2);
}",0.9323843416370108
28310,"/** 
 * 获取数字类型值
 * @param value 值
 * @param numFmtString 格式
 * @return 数字，可以是Double、Long
 * @since 4.1.0
 */
private static Number getNumberValue(String value,String numFmtString){
  double numValue=Double.parseDouble(value);
  if (null != numFmtString && numFmtString.indexOf(StrUtil.C_DOT) < 0) {
    final long longPart=(long)numValue;
    if (longPart == numValue) {
      return longPart;
    }
  }
  return numValue;
}","/** 
 * 获取数字类型值
 * @param value 值
 * @param numFmtString 格式
 * @return 数字，可以是Double、Long
 * @since 4.1.0
 */
private static Number getNumberValue(String value,String numFmtString){
  if (StrUtil.isBlank(value)) {
    return null;
  }
  double numValue=Double.parseDouble(value);
  if (null != numFmtString && numFmtString.indexOf(StrUtil.C_DOT) < 0) {
    final long longPart=(long)numValue;
    if (longPart == numValue) {
      return longPart;
    }
  }
  return numValue;
}",0.9411764705882352
28311,"/** 
 * 将可序列化的对象转换为XML写入文件，已经存在的文件将被覆盖<br> Writes serializable object to a XML file. Existing file will be overwritten
 * @param < T > 对象类型
 * @param dest 目标文件
 * @param t 对象
 * @throws IOException IO异常
 */
public static <T>void writeObjectAsXml(File dest,T t) throws IOException {
  XMLEncoder xmlenc=null;
  try {
    xmlenc=new XMLEncoder(FileUtil.getOutputStream(dest));
    xmlenc.writeObject(t);
  }
  finally {
    IoUtil.close(xmlenc);
  }
}","/** 
 * 将可序列化的对象转换为XML写入文件，已经存在的文件将被覆盖<br> Writes serializable object to a XML file. Existing file will be overwritten
 * @param dest 目标文件
 * @param bean 对象
 * @throws IOException IO异常
 */
public static void writeObjectAsXml(File dest,Object bean) throws IOException {
  XMLEncoder xmlenc=null;
  try {
    xmlenc=new XMLEncoder(FileUtil.getOutputStream(dest));
    xmlenc.writeObject(bean);
  }
  finally {
    IoUtil.close(xmlenc);
  }
}",0.945945945945946
28312,"/** 
 * 格式化日期间隔输出<br>
 * @return 格式化后的字符串
 */
public String format(){
  final StringBuilder sb=new StringBuilder();
  if (betweenMs > 0) {
    long day=betweenMs / DateUnit.DAY.getMillis();
    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;
    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;
    long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;
    long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;
    final int level=this.level.ordinal();
    int levelCount=0;
    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {
      sb.append(day).append(Level.DAY.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {
      sb.append(hour).append(Level.HOUR.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.SECOND.ordinal()) {
      sb.append(minute).append(Level.SECOND.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.MINUTE.ordinal()) {
      sb.append(second).append(Level.MINUTE.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {
      sb.append(millisecond).append(Level.MILLSECOND.name);
      levelCount++;
    }
  }
  if (StrUtil.isEmpty(sb)) {
    sb.append(0).append(this.level.name);
  }
  return sb.toString();
}","/** 
 * 格式化日期间隔输出<br>
 * @return 格式化后的字符串
 */
public String format(){
  final StringBuilder sb=new StringBuilder();
  if (betweenMs > 0) {
    long day=betweenMs / DateUnit.DAY.getMillis();
    long hour=betweenMs / DateUnit.HOUR.getMillis() - day * 24;
    long minute=betweenMs / DateUnit.MINUTE.getMillis() - day * 24 * 60 - hour * 60;
    long second=betweenMs / DateUnit.SECOND.getMillis() - ((day * 24 + hour) * 60 + minute) * 60;
    long millisecond=betweenMs - (((day * 24 + hour) * 60 + minute) * 60 + second) * 1000;
    final int level=this.level.ordinal();
    int levelCount=0;
    if (isLevelCountValid(levelCount) && 0 != day && level >= Level.DAY.ordinal()) {
      sb.append(day).append(Level.DAY.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != hour && level >= Level.HOUR.ordinal()) {
      sb.append(hour).append(Level.HOUR.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != minute && level >= Level.MINUTE.ordinal()) {
      sb.append(minute).append(Level.MINUTE.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != second && level >= Level.SECOND.ordinal()) {
      sb.append(second).append(Level.SECOND.name);
      levelCount++;
    }
    if (isLevelCountValid(levelCount) && 0 != millisecond && level >= Level.MILLSECOND.ordinal()) {
      sb.append(millisecond).append(Level.MILLSECOND.name);
      levelCount++;
    }
  }
  if (StrUtil.isEmpty(sb)) {
    sb.append(0).append(this.level.name);
  }
  return sb.toString();
}",0.8748370273794003
28313,"@Test public void betweenTest(){
  String dateStr1=""String_Node_Str"";
  Date date1=DateUtil.parse(dateStr1);
  String dateStr2=""String_Node_Str"";
  Date date2=DateUtil.parse(dateStr2);
  long betweenMonth=DateUtil.betweenMonth(date1,date2,false);
  Assert.assertEquals(1,betweenMonth);
  betweenMonth=DateUtil.betweenMonth(date2,date1,false);
  Assert.assertEquals(1,betweenMonth);
  long betweenDay=DateUtil.between(date1,date2,DateUnit.DAY);
  Assert.assertEquals(31,betweenDay);
  betweenDay=DateUtil.between(date2,date1,DateUnit.DAY);
  Assert.assertEquals(31,betweenDay);
  long between=DateUtil.between(date1,date2,DateUnit.MS);
  String formatBetween=DateUtil.formatBetween(between,Level.MINUTE);
  Assert.assertEquals(""String_Node_Str"",formatBetween);
}","@Test public void betweenTest(){
  String dateStr1=""String_Node_Str"";
  Date date1=DateUtil.parse(dateStr1);
  String dateStr2=""String_Node_Str"";
  Date date2=DateUtil.parse(dateStr2);
  long betweenMonth=DateUtil.betweenMonth(date1,date2,false);
  Assert.assertEquals(1,betweenMonth);
  betweenMonth=DateUtil.betweenMonth(date2,date1,false);
  Assert.assertEquals(1,betweenMonth);
  long betweenDay=DateUtil.between(date1,date2,DateUnit.DAY);
  Assert.assertEquals(31,betweenDay);
  betweenDay=DateUtil.between(date2,date1,DateUnit.DAY);
  Assert.assertEquals(31,betweenDay);
  long betweenHour=DateUtil.between(date1,date2,DateUnit.HOUR);
  Assert.assertEquals(745,betweenHour);
  betweenHour=DateUtil.between(date2,date1,DateUnit.HOUR);
  Assert.assertEquals(745,betweenHour);
  long betweenMinute=DateUtil.between(date1,date2,DateUnit.MINUTE);
  Assert.assertEquals(44721,betweenMinute);
  betweenMinute=DateUtil.between(date2,date1,DateUnit.MINUTE);
  Assert.assertEquals(44721,betweenMinute);
  long betweenSecond=DateUtil.between(date1,date2,DateUnit.SECOND);
  Assert.assertEquals(2683311,betweenSecond);
  betweenSecond=DateUtil.between(date2,date1,DateUnit.SECOND);
  Assert.assertEquals(2683311,betweenSecond);
  long betweenMS=DateUtil.between(date1,date2,DateUnit.MS);
  Assert.assertEquals(2683311000L,betweenMS);
  betweenMS=DateUtil.between(date2,date1,DateUnit.MS);
  Assert.assertEquals(2683311000L,betweenMS);
}",0.577818347786399
28314,"/** 
 * 从Content-Disposition头中获取文件名
 * @return 文件名，empty表示无
 */
private String getFileNameFromDisposition(){
  String fileName=header(Header.CONTENT_DISPOSITION);
  if (StrUtil.isNotBlank(fileName)) {
    fileName=StrUtil.subAfter(fileName,""String_Node_Str"",true);
  }
  return fileName;
}","/** 
 * 从Content-Disposition头中获取文件名
 * @return 文件名，empty表示无
 */
private String getFileNameFromDisposition(){
  String fileName=null;
  final String desposition=header(Header.CONTENT_DISPOSITION);
  if (StrUtil.isNotBlank(desposition)) {
    fileName=ReUtil.get(""String_Node_Str"",desposition,1);
    if (StrUtil.isBlank(fileName)) {
      fileName=StrUtil.subAfter(desposition,""String_Node_Str"",true);
    }
  }
  return fileName;
}",0.7583333333333333
28315,"/** 
 * 计算组合数，即C(n, m) = n!/((n-m)! * m!)
 * @param n 总数
 * @param m 选择的个数
 * @return 组合数
 */
public static long count(int n,int m){
  if (n == m) {
    return NumberUtil.factorial(n) / NumberUtil.factorial(m);
  }
  return (n > m) ? NumberUtil.factorial(n) / NumberUtil.factorial(n - m) / NumberUtil.factorial(m) : 0;
}","/** 
 * 计算组合数，即C(n, m) = n!/((n-m)! * m!)
 * @param n 总数
 * @param m 选择的个数
 * @return 组合数
 */
public static long count(int n,int m){
  if (0 == m) {
    return 1;
  }
  if (n == m) {
    return NumberUtil.factorial(n) / NumberUtil.factorial(m);
  }
  return (n > m) ? NumberUtil.factorial(n) / NumberUtil.factorial(n - m) / NumberUtil.factorial(m) : 0;
}",0.9495548961424332
28316,"@Test public void selectTest(){
  Arrangement arrangement=new Arrangement(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String[]> list=arrangement.select(2);
  Assert.assertEquals(Arrangement.count(4,2),list.size());
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(0));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(1));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(2));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(3));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(4));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(5));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(6));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(7));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(8));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(9));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(10));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(11));
  List<String[]> selectAll=arrangement.selectAll();
  Assert.assertEquals(Arrangement.countAll(4),selectAll.size());
}","@Test public void selectTest(){
  Arrangement arrangement=new Arrangement(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String[]> list=arrangement.select(2);
  Assert.assertEquals(Arrangement.count(4,2),list.size());
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(0));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(1));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(2));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(3));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(4));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(5));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(6));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(7));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(8));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(9));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(10));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(11));
  List<String[]> selectAll=arrangement.selectAll();
  Assert.assertEquals(Arrangement.countAll(4),selectAll.size());
  List<String[]> list2=arrangement.select(0);
  Assert.assertTrue(1 == list2.size());
}",0.9717291255752796
28317,"@Test public void arrangementTest(){
  long result=Arrangement.count(4,2);
  Assert.assertEquals(12,result);
  long resultAll=Arrangement.countAll(4);
  Assert.assertEquals(64,resultAll);
}","@Test public void arrangementTest(){
  long result=Arrangement.count(4,2);
  Assert.assertEquals(12,result);
  result=Arrangement.count(4,1);
  Assert.assertEquals(4,result);
  result=Arrangement.count(4,0);
  Assert.assertEquals(1,result);
  long resultAll=Arrangement.countAll(4);
  Assert.assertEquals(64,resultAll);
}",0.6666666666666666
28318,"@Test public void countTest(){
  long result=Combination.count(5,2);
  Assert.assertEquals(10,result);
  result=Combination.count(5,5);
  Assert.assertEquals(1,result);
  long resultAll=Combination.countAll(5);
  Assert.assertEquals(31,resultAll);
}","@Test public void countTest(){
  long result=Combination.count(5,2);
  Assert.assertEquals(10,result);
  result=Combination.count(5,5);
  Assert.assertEquals(1,result);
  result=Combination.count(5,0);
  Assert.assertEquals(1,result);
  long resultAll=Combination.countAll(5);
  Assert.assertEquals(31,resultAll);
}",0.8156028368794326
28319,"@Test public void selectTest(){
  Combination combination=new Combination(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String[]> list=combination.select(2);
  Assert.assertEquals(Combination.count(5,2),list.size());
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(0));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(1));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(2));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(3));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(4));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(5));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(6));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(7));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(8));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(9));
  List<String[]> selectAll=combination.selectAll();
  Assert.assertEquals(Combination.countAll(5),selectAll.size());
}","@Test public void selectTest(){
  Combination combination=new Combination(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  List<String[]> list=combination.select(2);
  Assert.assertEquals(Combination.count(5,2),list.size());
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(0));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(1));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(2));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(3));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(4));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(5));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(6));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(7));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(8));
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str""},list.get(9));
  List<String[]> selectAll=combination.selectAll();
  Assert.assertEquals(Combination.countAll(5),selectAll.size());
  List<String[]> list2=combination.select(0);
  Assert.assertTrue(1 == list2.size());
}",0.9682656826568266
28320,"/** 
 * 全排列
 * @return 全排列结果
 */
public List<String[]> selectAll(){
  final List<String[]> result=new ArrayList<>((int)countAll(this.datas.length));
  for (int i=1; i <= this.datas.length; i++) {
    result.addAll(select(i));
  }
  return result;
}","/** 
 * 排列所有组合，即A(n, 1) + A(n, 2) + A(n, 3)...
 * @return 全排列结果
 */
public List<String[]> selectAll(){
  final List<String[]> result=new ArrayList<>((int)countAll(this.datas.length));
  for (int i=1; i <= this.datas.length; i++) {
    result.addAll(select(i));
  }
  return result;
}",0.9303201506591338
28321,"/** 
 * 计算排列数，即A(n, m) = n!/(n-m)!
 * @param n 总数
 * @param m 选择的个数
 * @return 排列数
 */
public static long arrangementCount(int n,int m){
  return Arrangement.count(n,m);
}","/** 
 * 计算排列数，即A(n, n) = n!
 * @param n 总数
 * @return 排列数
 */
public static long arrangementCount(int n){
  return Arrangement.count(n);
}",0.8867313915857605
28322,"/** 
 * 组合选择（从列表中选择n个组合）
 * @param datas 待选列表
 * @param m 选择个数
 */
public static List<String[]> combinationSelect(String[] datas,int m){
  return new Combination(datas).select(m);
}","/** 
 * 组合选择（从列表中选择n个组合）
 * @param datas 待选列表
 * @param m 选择个数
 * @return 所有组合列表
 */
public static List<String[]> combinationSelect(String[] datas,int m){
  return new Combination(datas).select(m);
}",0.9526315789473684
28323,"/** 
 * 排列选择（从列表中选择n个排列）
 * @param datas 待选列表
 * @param m 选择个数
 */
public static List<String[]> arrangementSelect(String[] datas,int m){
  return new Arrangement(datas).select(m);
}","/** 
 * 全排列选择（列表全部参与排列）
 * @param datas 待选列表
 * @return 所有排列列表
 */
public static List<String[]> arrangementSelect(String[] datas){
  return new Arrangement(datas).select();
}",0.8901408450704226
28324,"/** 
 * 金额转为中文形式
 * @param n 数字
 * @return 中文大写数字
 * @since 3.2.3
 */
public static String digitToChinese(Number n){
  return DigitChineseFormater.format(n);
}","/** 
 * 金额转为中文形式
 * @param n 数字
 * @return 中文大写数字
 * @since 3.2.3
 */
public static String digitToChinese(Number n){
  if (null == n) {
    return ""String_Node_Str"";
  }
  return NumberChineseFormater.format(n.doubleValue(),true,true);
}",0.7474747474747475
28325,"/** 
 * 阿拉伯数字转换成中文,小数点后四舍五入保留两位. 使用于整数、小数的转换.
 * @param amount 数字
 * @return 中文
 */
public static String format(double amount,boolean isUserTraditional){
  final String[] numArray=isUserTraditional ? traditionalDigits : simpleDigits;
  if (amount > 99999999999999.99 || amount < -99999999999999.99) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean negative=false;
  if (amount < 0) {
    negative=true;
    amount=amount * (-1);
  }
  long temp=Math.round(amount * 100);
  int numFen=(int)(temp % 10);
  temp=temp / 10;
  int numJiao=(int)(temp % 10);
  temp=temp / 10;
  int[] parts=new int[20];
  int numParts=0;
  for (int i=0; ; i++) {
    if (temp == 0)     break;
    int part=(int)(temp % 10000);
    parts[i]=part;
    numParts++;
    temp=temp / 10000;
  }
  boolean beforeWanIsZero=true;
  String chineseStr=""String_Node_Str"";
  for (int i=0; i < numParts; i++) {
    String partChinese=toChinese(parts[i],numArray);
    if (i % 2 == 0) {
      if (""String_Node_Str"".equals(partChinese))       beforeWanIsZero=true;
 else       beforeWanIsZero=false;
    }
    if (i != 0) {
      if (i % 2 == 0)       chineseStr=""String_Node_Str"" + chineseStr;
 else {
        if (""String_Node_Str"".equals(partChinese) && !beforeWanIsZero)         chineseStr=""String_Node_Str"" + chineseStr;
 else {
          if (parts[i - 1] < 1000 && parts[i - 1] > 0)           chineseStr=""String_Node_Str"" + chineseStr;
          chineseStr=""String_Node_Str"" + chineseStr;
        }
      }
    }
    chineseStr=partChinese + chineseStr;
  }
  if (""String_Node_Str"".equals(chineseStr))   chineseStr=numArray[0];
 else   if (negative)   chineseStr=""String_Node_Str"" + chineseStr;
  chineseStr=chineseStr + ""String_Node_Str"";
  if (numFen == 0 && numJiao == 0) {
    chineseStr=chineseStr + ""String_Node_Str"";
  }
 else   if (numFen == 0) {
    chineseStr=chineseStr + ""String_Node_Str"" + numArray[numJiao]+ ""String_Node_Str"";
  }
 else {
    if (numJiao == 0)     chineseStr=chineseStr + ""String_Node_Str"" + numArray[numFen]+ ""String_Node_Str"";
 else     chineseStr=chineseStr + ""String_Node_Str"" + numArray[numJiao]+ numArray[numFen]+ ""String_Node_Str"";
  }
  return chineseStr;
}","/** 
 * 阿拉伯数字转换成中文,小数点后四舍五入保留两位. 使用于整数、小数的转换.
 * @param amount 数字
 * @param isUseTraditional 是否使用繁体
 * @param isMoneyMode 是否为金额模式
 * @return 中文
 */
public static String format(double amount,boolean isUseTraditional,boolean isMoneyMode){
  final String[] numArray=isUseTraditional ? traditionalDigits : simpleDigits;
  if (amount > 99999999999999.99 || amount < -99999999999999.99) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean negative=false;
  if (amount < 0) {
    negative=true;
    amount=-amount;
  }
  long temp=Math.round(amount * 100);
  int numFen=(int)(temp % 10);
  temp=temp / 10;
  int numJiao=(int)(temp % 10);
  temp=temp / 10;
  int[] parts=new int[20];
  int numParts=0;
  for (int i=0; temp != 0; i++) {
    int part=(int)(temp % 10000);
    parts[i]=part;
    numParts++;
    temp=temp / 10000;
  }
  boolean beforeWanIsZero=true;
  String chineseStr=""String_Node_Str"";
  for (int i=0; i < numParts; i++) {
    String partChinese=toChinese(parts[i],isUseTraditional);
    if (i % 2 == 0) {
      beforeWanIsZero=StrUtil.isEmpty(partChinese);
    }
    if (i != 0) {
      if (i % 2 == 0) {
        chineseStr=""String_Node_Str"" + chineseStr;
      }
 else {
        if (""String_Node_Str"".equals(partChinese) && false == beforeWanIsZero) {
          chineseStr=""String_Node_Str"" + chineseStr;
        }
 else {
          if (parts[i - 1] < 1000 && parts[i - 1] > 0) {
            chineseStr=""String_Node_Str"" + chineseStr;
          }
          chineseStr=""String_Node_Str"" + chineseStr;
        }
      }
    }
    chineseStr=partChinese + chineseStr;
  }
  if (""String_Node_Str"".equals(chineseStr))   chineseStr=numArray[0];
 else   if (negative) {
    chineseStr=""String_Node_Str"" + chineseStr;
  }
  if (numFen != 0 || numJiao != 0) {
    if (numFen == 0) {
      chineseStr+=(isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"") + numArray[numJiao] + (isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"");
    }
 else {
      if (numJiao == 0) {
        chineseStr+=(isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"") + numArray[numFen] + (isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else {
        chineseStr+=(isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"") + numArray[numJiao] + (isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"")+ numArray[numFen]+ (isMoneyMode ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
  }
 else   if (isMoneyMode) {
    chineseStr+=""String_Node_Str"";
  }
  return chineseStr;
}",0.7506942960905789
28326,"/** 
 * 把一个 0~9999 之间的整数转换为汉字的字符串，如果是 0 则返回 """"
 * @param amountPart 数字部分
 * @param numArray 字典
 * @return 转换后的汉字
 */
private static String toChinese(int amountPart,String[] numArray){
  if (amountPart < 0 || amountPart > 10000) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String[] units=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int temp=amountPart;
  String amountStr=new Integer(amountPart).toString();
  int amountStrLength=amountStr.length();
  boolean lastIsZero=true;
  String chineseStr=""String_Node_Str"";
  for (int i=0; i < amountStrLength; i++) {
    if (temp == 0)     break;
    int digit=temp % 10;
    if (digit == 0) {
      if (!lastIsZero)       chineseStr=""String_Node_Str"" + chineseStr;
      lastIsZero=true;
    }
 else {
      chineseStr=numArray[digit] + units[i] + chineseStr;
      lastIsZero=false;
    }
    temp=temp / 10;
  }
  return chineseStr;
}","/** 
 * 把一个 0~9999 之间的整数转换为汉字的字符串，如果是 0 则返回 """"
 * @param amountPart 数字部分
 * @param isUseTraditional 是否使用繁体单位
 * @return 转换后的汉字
 */
private static String toChinese(int amountPart,boolean isUseTraditional){
  String[] numArray=isUseTraditional ? traditionalDigits : simpleDigits;
  String[] units=isUseTraditional ? traditionalUnits : simpleUnits;
  int temp=amountPart;
  String chineseStr=""String_Node_Str"";
  boolean lastIsZero=true;
  for (int i=0; temp > 0; i++) {
    if (temp == 0) {
      break;
    }
    int digit=temp % 10;
    if (digit == 0) {
      if (false == lastIsZero) {
        chineseStr=""String_Node_Str"" + chineseStr;
      }
      lastIsZero=true;
    }
 else {
      chineseStr=numArray[digit] + units[i] + chineseStr;
      lastIsZero=false;
    }
    temp=temp / 10;
  }
  return chineseStr;
}",0.6084985835694051
28327,"/** 
 * 解码Base64
 * @param in 输入
 * @param pos 开始位置
 * @param length 长度
 * @return 解码后的bytes
 */
public static byte[] decode(byte[] in,int pos,int length){
  final IntWrapper offset=new IntWrapper(pos);
  byte sestet0;
  byte sestet1;
  byte sestet2;
  byte sestet3;
  int maxPos=pos + length - 1;
  int octetId=0;
  byte[] octet=new byte[length * 3 / 4];
  while (offset.value <= maxPos) {
    sestet0=getNextValidDecodeByte(in,offset,maxPos);
    sestet1=getNextValidDecodeByte(in,offset,maxPos);
    sestet2=getNextValidDecodeByte(in,offset,maxPos);
    sestet3=getNextValidDecodeByte(in,offset,maxPos);
    if (PADDING != sestet1) {
      octet[octetId++]=(byte)((sestet0 << 2) | (sestet1 >>> 4));
    }
    if (PADDING != sestet2) {
      octet[octetId++]=(byte)(((sestet1 & 0xf) << 4) | (sestet2 >>> 2));
    }
    if (PADDING != sestet3) {
      octet[octetId++]=(byte)(((sestet2 & 3) << 6) | sestet3);
    }
  }
  if (octetId == octet.length) {
    return octet;
  }
 else {
    return (byte[])ArrayUtil.copy(octet,new byte[octetId],octetId);
  }
}","/** 
 * 解码Base64
 * @param in 输入
 * @param pos 开始位置
 * @param length 长度
 * @return 解码后的bytes
 */
public static byte[] decode(byte[] in,int pos,int length){
  if (ArrayUtil.isEmpty(in)) {
    return in;
  }
  final IntWrapper offset=new IntWrapper(pos);
  byte sestet0;
  byte sestet1;
  byte sestet2;
  byte sestet3;
  int maxPos=pos + length - 1;
  int octetId=0;
  byte[] octet=new byte[length * 3 / 4];
  while (offset.value <= maxPos) {
    sestet0=getNextValidDecodeByte(in,offset,maxPos);
    sestet1=getNextValidDecodeByte(in,offset,maxPos);
    sestet2=getNextValidDecodeByte(in,offset,maxPos);
    sestet3=getNextValidDecodeByte(in,offset,maxPos);
    if (PADDING != sestet1) {
      octet[octetId++]=(byte)((sestet0 << 2) | (sestet1 >>> 4));
    }
    if (PADDING != sestet2) {
      octet[octetId++]=(byte)(((sestet1 & 0xf) << 4) | (sestet2 >>> 2));
    }
    if (PADDING != sestet3) {
      octet[octetId++]=(byte)(((sestet2 & 3) << 6) | sestet3);
    }
  }
  if (octetId == octet.length) {
    return octet;
  }
 else {
    return (byte[])ArrayUtil.copy(octet,new byte[octetId],octetId);
  }
}",0.9768732654949122
28328,"/** 
 * Map转Map
 * @param srcMap 源Map
 * @param targetMap 目标Map
 */
private void convertMapToMap(Map<?,?> srcMap,Map<Object,Object> targetMap){
  final ConverterRegistry convert=ConverterRegistry.getInstance();
  for (  Entry<?,?> entry : srcMap.entrySet()) {
    targetMap.put(convert.convert(this.keyType,entry.getKey()),convert.convert(this.valueType,entry.getValue()));
  }
}","/** 
 * Map转Map
 * @param srcMap 源Map
 * @param targetMap 目标Map
 */
private void convertMapToMap(Map<?,?> srcMap,Map<Object,Object> targetMap){
  final ConverterRegistry convert=ConverterRegistry.getInstance();
  Object key;
  Object value;
  for (  Entry<?,?> entry : srcMap.entrySet()) {
    key=(null == this.keyType) ? entry.getKey() : convert.convert(this.keyType,entry.getKey());
    value=(null == this.valueType) ? entry.getValue() : convert.convert(this.keyType,entry.getValue());
    targetMap.put(key,value);
  }
}",0.754424778761062
28329,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Map<?,?> convertInternal(Object value){
  Map map=MapUtil.createMap(TypeUtil.getClass(this.mapType));
  Class<?> valueType=value.getClass();
  if (value instanceof Map) {
    convertMapToMap((Map)value,map);
  }
 else   if (BeanUtil.isBean(valueType)) {
    map=BeanUtil.beanToMap(value);
  }
 else {
    throw new UnsupportedOperationException(StrUtil.format(""String_Node_Str"",valueType.getName()));
  }
  return map;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Map<?,?> convertInternal(Object value){
  Map map=null;
  if (value instanceof Map) {
    map=MapUtil.createMap(TypeUtil.getClass(this.mapType));
    convertMapToMap((Map)value,map);
  }
 else   if (BeanUtil.isBean(value.getClass())) {
    map=BeanUtil.beanToMap(value);
  }
 else {
    throw new UnsupportedOperationException(StrUtil.format(""String_Node_Str"",value.getClass().getName()));
  }
  return map;
}",0.7182095625635809
28330,"@Test public void mapToMapTest(){
  Map<String,Object> mapPre=MapBuilder.create(new HashMap<String,Object>()).put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",45).map();
  LinkedHashMap<?,?> map=Convert.convert(LinkedHashMap.class,mapPre);
  Assert.assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  Assert.assertEquals(45,map.get(""String_Node_Str""));
}","@Test public void mapToMapTest(){
  Map<String,Object> srcMap=MapBuilder.create(new HashMap<String,Object>()).put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",45).map();
  LinkedHashMap<?,?> map=Convert.convert(LinkedHashMap.class,srcMap);
  Assert.assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  Assert.assertEquals(45,map.get(""String_Node_Str""));
}",0.9682539682539684
28331,"/** 
 * 比较两个字符串是否相等。
 * @param str1 要比较的字符串1
 * @param str2 要比较的字符串2
 * @param ignoreCase 是否忽略大小写
 * @return 如果两个字符串相同，或者都是<code>null</code>，则返回<code>true</code>
 * @since 3.2.0
 */
public static boolean equals(CharSequence str1,CharSequence str2,boolean ignoreCase){
  if (str1 == null) {
    return str2 == null;
  }
  if (ignoreCase) {
    return str1.toString().equalsIgnoreCase(str2.toString());
  }
 else {
    return str1.equals(str2);
  }
}","/** 
 * 比较两个字符串是否相等。
 * @param str1 要比较的字符串1
 * @param str2 要比较的字符串2
 * @param ignoreCase 是否忽略大小写
 * @return 如果两个字符串相同，或者都是<code>null</code>，则返回<code>true</code>
 * @since 3.2.0
 */
public static boolean equals(CharSequence str1,CharSequence str2,boolean ignoreCase){
  if (null == str1) {
    return str2 == null;
  }
  if (null == str2) {
    return false;
  }
  if (ignoreCase) {
    return str1.toString().equalsIgnoreCase(str2.toString());
  }
 else {
    return str1.equals(str2);
  }
}",0.9063829787234042
28332,"/** 
 * 转换值为指定类型
 * @param < T > 转换的目标类型（转换器转换到的类型）
 * @param type 类型
 * @param value 值
 * @return 转换后的值，默认为<code>null</code>
 * @throws ConvertException 转换器不存在
 */
public <T>T convert(Class<T> type,Object value) throws ConvertException {
  return convert(type,value,null);
}","/** 
 * 转换值为指定类型
 * @param < T > 转换的目标类型（转换器转换到的类型）
 * @param type 类型
 * @param value 值
 * @return 转换后的值，默认为<code>null</code>
 * @throws ConvertException 转换器不存在
 */
public <T>T convert(Type type,Object value) throws ConvertException {
  return convert(type,value,null);
}",0.978021978021978
28333,"/** 
 * 构造
 * @param collectionType 集合类型
 * @param elementType 集合元素类型
 */
public CollectionConverter(Class<?> collectionType,Class<?> elementType){
  this.collectionType=collectionType;
  this.elementType=elementType;
}","/** 
 * 构造
 * @param collectionType 集合类型
 * @param elementType 集合元素类型
 */
public CollectionConverter(Type collectionType,Type elementType){
  this.collectionType=collectionType;
  this.elementType=elementType;
}",0.944186046511628
28334,"/** 
 * 内部转换
 * @param value 值
 * @return 转换后的集合对象
 */
protected Collection<?> convertInternal(Object value){
  final Collection<Object> collection=CollectionUtil.create(this.collectionType);
  return CollUtil.addAll(collection,value,elementType);
}","/** 
 * 内部转换
 * @param value 值
 * @return 转换后的集合对象
 */
protected Collection<?> convertInternal(Object value){
  final Collection<Object> collection=CollectionUtil.create(TypeUtil.getClass(collectionType));
  return CollUtil.addAll(collection,value,elementType);
}",0.9140625
28335,"/** 
 * JSON递归转换<br> 首先尝试JDK类型转换，如果失败尝试JSON转Bean
 * @param type 目标类型
 * @param value 值
 * @param ignoreError 是否忽略转换错误
 * @return 目标类型的值
 * @throws ConvertException 转换失败
 */
protected static Object jsonConvert(Type type,Object value,boolean ignoreError) throws ConvertException {
  if (null == value) {
    return null;
  }
  if (value instanceof JSONNull) {
    return null;
  }
  final Class<?> rowType=TypeUtil.getClass(type);
  if (null == rowType) {
    throw new IllegalArgumentException(StrUtil.format(""String_Node_Str"",type));
  }
  Object targetValue=null;
  if (value instanceof JSONObject) {
    targetValue=((JSONObject)value).toBean(rowType,ignoreError);
  }
 else   if (value instanceof JSONArray) {
    final JSONArray jsonArrayValue=(JSONArray)value;
    if (rowType.isArray()) {
      targetValue=jsonArrayValue.toArray(rowType,ignoreError);
    }
 else {
      targetValue=(new CollectionConverter(type)).convert(value,null);
    }
  }
  if (null == targetValue) {
    try {
      targetValue=ConverterRegistry.getInstance().convert(rowType,value);
    }
 catch (    ConvertException e) {
      if (ignoreError) {
        return null;
      }
 else {
        throw e;
      }
    }
  }
  if (null == targetValue && false == ignoreError) {
    if (value instanceof CharSequence && StrUtil.isBlank((CharSequence)value)) {
      return null;
    }
    throw new ConvertException(""String_Node_Str"",value,rowType.getName());
  }
  return targetValue;
}","/** 
 * JSON递归转换<br> 首先尝试JDK类型转换，如果失败尝试JSON转Bean
 * @param type 目标类型
 * @param value 值
 * @param ignoreError 是否忽略转换错误
 * @return 目标类型的值
 * @throws ConvertException 转换失败
 */
protected static Object jsonConvert(Type type,Object value,boolean ignoreError) throws ConvertException {
  if (null == value) {
    return null;
  }
  if (value instanceof JSONNull) {
    return null;
  }
  final Class<?> rowType=TypeUtil.getClass(type);
  if (null == rowType) {
    throw new IllegalArgumentException(StrUtil.format(""String_Node_Str"",type));
  }
  if (JSON.class.isAssignableFrom(rowType)) {
    return JSONUtil.parse(value);
  }
  Object targetValue=null;
  if (value instanceof JSONObject) {
    targetValue=((JSONObject)value).toBean(rowType,ignoreError);
  }
 else   if (value instanceof JSONArray) {
    if (rowType.isArray()) {
      targetValue=((JSONArray)value).toArray(rowType,ignoreError);
    }
 else {
      targetValue=(new CollectionConverter(rowType,TypeUtil.getTypeArgument(type))).convert(value,null);
    }
  }
  if (null == targetValue) {
    try {
      targetValue=ConverterRegistry.getInstance().convert(rowType,value);
    }
 catch (    ConvertException e) {
      if (ignoreError) {
        return null;
      }
      throw e;
    }
  }
  if (null == targetValue && false == ignoreError) {
    if (value instanceof CharSequence && StrUtil.isBlank((CharSequence)value)) {
      return null;
    }
    throw new ConvertException(""String_Node_Str"",value,rowType.getName());
  }
  return targetValue;
}",0.8506210137630077
28336,"@Test public void toBeanTest(){
  String json=""String_Node_Str"";
  Price price=JSONUtil.toBean(json,Price.class);
  Console.log(""String_Node_Str"" + price.getADT().get(0).get(0));
}","@Test public void toBeanTest(){
  String json=""String_Node_Str"";
  Price price=JSONUtil.toBean(json,Price.class);
  Assert.assertEquals(""String_Node_Str"",price.getADT().get(0).get(0).getBookingCode().get(0));
}",0.8512820512820513
28337,"/** 
 * 分组解密
 * @param data 数据
 * @param keyType 密钥类型
 * @param charset 加密前编码
 * @return 解密后的密文
 * @since 3.1.1
 */
public String decryptStr(String data,KeyType keyType,Charset charset){
  Key key=getKeyByType(keyType);
  int keyLength=((RSAKey)key).getModulus().bitLength() / 8;
  StringBuilder sb=StrUtil.builder();
  lock.lock();
  try {
    clipher.init(Cipher.DECRYPT_MODE,key);
    byte[] bcd=BCD.ascToBcd(StrUtil.bytes(data,charset));
    byte[][] arrays=ArrayUtil.split(bcd,keyLength);
    for (    byte[] arr : arrays) {
      sb.append(StrUtil.str(clipher.doFinal(arr),charset));
    }
  }
 catch (  Exception e) {
    throw new CryptoException(e);
  }
 finally {
    lock.unlock();
  }
  return sb.toString();
}","/** 
 * 分组解密
 * @param data 数据
 * @param keyType 密钥类型
 * @param charset 加密前编码
 * @return 解密后的密文
 * @since 3.1.1
 */
public String decryptStr(String data,KeyType keyType,Charset charset){
  Key key=getKeyByType(keyType);
  int MAX_DECRYPT_BLOCK=((RSAKey)key).getModulus().bitLength() / 8;
  byte[] dataBytes=BCD.ascToBcd(StrUtil.bytes(data,charset));
  lock.lock();
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    clipher.init(Cipher.DECRYPT_MODE,key);
    int inputLen=dataBytes.length;
    int offSet=0;
    byte[] cache;
    int i=0;
    while (inputLen - offSet > 0) {
      if (inputLen - offSet > MAX_DECRYPT_BLOCK) {
        cache=clipher.doFinal(dataBytes,offSet,MAX_DECRYPT_BLOCK);
      }
 else {
        cache=clipher.doFinal(dataBytes,offSet,inputLen - offSet);
      }
      out.write(cache,0,cache.length);
      i++;
      offSet=i * MAX_DECRYPT_BLOCK;
    }
    byte[] decryptedData=out.toByteArray();
    return StrUtil.str(decryptedData,charset);
  }
 catch (  Exception e) {
    throw new CryptoException(e);
  }
 finally {
    lock.unlock();
  }
}",0.5489762036524627
28338,"/** 
 * 分组加密
 * @param data 数据
 * @param keyType 密钥类型
 * @param charset 加密前编码
 * @return 加密后的密文
 * @throws CryptoException 加密异常
 * @since 3.1.1
 */
public String encryptStr(String data,KeyType keyType,Charset charset){
  Key key=getKeyByType(keyType);
  int keyLength=((RSAKey)key).getModulus().bitLength() / 8;
  StringBuilder sb=StrUtil.builder();
  lock.lock();
  try {
    clipher.init(Cipher.ENCRYPT_MODE,key);
    String[] datas=StrUtil.split(data,keyLength - 11);
    for (    String s : datas) {
      sb.append(BCD.bcdToStr(clipher.doFinal(StrUtil.bytes(s,charset))));
    }
  }
 catch (  Exception e) {
    throw new CryptoException(e);
  }
 finally {
    lock.unlock();
  }
  return sb.toString();
}","/** 
 * 分组加密
 * @param data 数据
 * @param keyType 密钥类型
 * @param charset 加密前编码
 * @return 加密后的密文
 * @throws CryptoException 加密异常
 * @since 3.1.1
 */
public String encryptStr(String data,KeyType keyType,Charset charset){
  Key key=getKeyByType(keyType);
  int MAX_ENCRYPT_BLOCK=((RSAKey)key).getModulus().bitLength() / 8 - 11;
  byte[] dataBytes=StrUtil.bytes(data,charset);
  lock.lock();
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    clipher.init(Cipher.ENCRYPT_MODE,key);
    int inputLen=dataBytes.length;
    int offSet=0;
    byte[] cache;
    int i=0;
    while (dataBytes.length - offSet > 0) {
      if (inputLen - offSet > MAX_ENCRYPT_BLOCK) {
        cache=clipher.doFinal(dataBytes,offSet,MAX_ENCRYPT_BLOCK);
      }
 else {
        cache=clipher.doFinal(dataBytes,offSet,inputLen - offSet);
      }
      out.write(cache,0,cache.length);
      i++;
      offSet=i * MAX_ENCRYPT_BLOCK;
    }
    byte[] encryptedData=out.toByteArray();
    return BCD.bcdToStr(encryptedData);
  }
 catch (  Exception e) {
    throw new CryptoException(e);
  }
 finally {
    lock.unlock();
  }
}",0.5651456844420011
28339,"/** 
 * @param value
 * @return
 */
protected Collection<?> convertInternal(Object value){
  final Collection<Object> collection=CollectionUtil.create(this.collectionType);
  return CollectionUtil.addAll(collection,value,elementType);
}","/** 
 * 内部转换
 * @param value 值
 * @return 转换后的集合对象
 */
protected Collection<?> convertInternal(Object value){
  final Collection<Object> collection=CollectionUtil.create(this.collectionType);
  return CollectionUtil.addAll(collection,value,elementType);
}",0.9613034623217924
28340,"@Override public String toString(){
  return (null == this.url) ? ""String_Node_Str"" : this.url.toString();
}","/** 
 * 返回路径
 * @return 返回URL路径
 */
@Override public String toString(){
  return (null == this.url) ? ""String_Node_Str"" : this.url.toString();
}",0.8571428571428571
28341,"@Test public void readFromJarTest() throws IOException {
  final ClassPathResource resource=new ClassPathResource(""String_Node_Str"");
  File file=resource.getFile();
  Console.log(file);
  String result=IoUtil.read(resource.getStream(),CharsetUtil.CHARSET_UTF_8);
  Assert.assertNotNull(result);
}","@Test public void readFromJarTest() throws IOException {
  final ClassPathResource resource=new ClassPathResource(""String_Node_Str"");
  String result=resource.readUtf8Str();
  Assert.assertNotNull(result);
  result=resource.readUtf8Str();
  Assert.assertNotNull(result);
}",0.6291739894551845
28342,"/** 
 * 对增删改查做单元测试
 * @throws SQLException
 */
@Test public void crudTest() throws SQLException {
  SqlRunner runner=SqlRunner.create(DSFactory.get());
  Long id=runner.insertForGeneratedKey(Entity.create(""String_Node_Str"").set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",66));
  Assert.assertTrue(id > 0);
  Entity result=runner.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertSame(66,(int)result.getInt(""String_Node_Str""));
  int update=runner.update(Entity.create().set(""String_Node_Str"",88),Entity.create(""String_Node_Str"").set(""String_Node_Str"",""String_Node_Str""));
  Assert.assertTrue(update > 0);
  Entity result2=runner.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertSame(88,(int)result2.getInt(""String_Node_Str""));
  int del=runner.del(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertTrue(del > 0);
  Entity result3=runner.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertNull(result3);
}","/** 
 * 对增删改查做单元测试
 * @throws SQLException
 */
@Test @Ignore public void crudTest() throws SQLException {
  SqlRunner runner=SqlRunner.create(DSFactory.get());
  Long id=runner.insertForGeneratedKey(Entity.create(""String_Node_Str"").set(""String_Node_Str"",""String_Node_Str"").set(""String_Node_Str"",66));
  Assert.assertTrue(id > 0);
  Entity result=runner.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertSame(66,(int)result.getInt(""String_Node_Str""));
  int update=runner.update(Entity.create().set(""String_Node_Str"",88),Entity.create(""String_Node_Str"").set(""String_Node_Str"",""String_Node_Str""));
  Assert.assertTrue(update > 0);
  Entity result2=runner.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertSame(88,(int)result2.getInt(""String_Node_Str""));
  int del=runner.del(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertTrue(del > 0);
  Entity result3=runner.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Assert.assertNull(result3);
}",0.996078431372549
28343,"/** 
 * 获取指定日期偏移指定时间后的时间
 * @param date 基准日期
 * @param dateField 偏移的粒度大小（小时、天、月等）{@link DateField}
 * @param offset 偏移量，正数为向后偏移，负数为向前偏移
 * @return 偏移后的日期
 * @deprecated please use {@link DateUtil#offset(Date,DateField,int)}
 */
public static DateTime offsetDate(Date date,DateField dateField,int offset){
  return offset(date,dateField,offset);
}","/** 
 * 获取指定日期偏移指定时间后的时间
 * @param date 基准日期
 * @param dateField 偏移的粒度大小（小时、天、月等）{@link DateField}
 * @param offset 偏移量，正数为向后偏移，负数为向前偏移
 * @return 偏移后的日期
 * @deprecated please use {@link DateUtil#offset(Date,DateField,int)}
 */
@Deprecated public static DateTime offsetDate(Date date,DateField dateField,int offset){
  return offset(date,dateField,offset);
}",0.9829545454545454
28344,"public int read() throws IOException {
  isInited=true;
  return in.read();
}","@Override public int read() throws IOException {
  isInited=true;
  return in.read();
}",0.9390243902439024
28345,"public void close() throws IOException {
  isInited=true;
  in.close();
}","@Override public void close() throws IOException {
  isInited=true;
  in.close();
}",0.935897435897436
28346,"/** 
 * 写入数据到文件
 * @param data 数据
 * @param dest 目标文件
 * @param off 数据开始位置
 * @param len 数据长度
 * @param append 是否追加模式
 * @return File
 * @throws IORuntimeException IO异常
 */
public static File writeBytes(byte[] data,File dest,int off,int len,boolean append) throws IORuntimeException {
  return FileWriter.create(dest).write(data,off,len);
}","/** 
 * 写入数据到文件
 * @param data 数据
 * @param dest 目标文件
 * @param off 数据开始位置
 * @param len 数据长度
 * @param isAppend 是否追加模式
 * @return File
 * @throws IORuntimeException IO异常
 */
public static File writeBytes(byte[] data,File dest,int off,int len,boolean isAppend) throws IORuntimeException {
  return FileWriter.create(dest).write(data,off,len,isAppend);
}",0.9754689754689756
28347,"/** 
 * 将列表写入文件
 * @param < T > 集合元素类型
 * @param list 列表
 * @param file 文件
 * @param charset 字符集
 * @param isAppend 是否追加
 * @return 文件
 * @throws IORuntimeException IO异常
 */
public static <T>File writeLines(Collection<T> list,File file,String charset,boolean isAppend) throws IORuntimeException {
  return FileWriter.create(file,CharsetUtil.charset(charset)).writeLines(list);
}","/** 
 * 将列表写入文件
 * @param < T > 集合元素类型
 * @param list 列表
 * @param file 文件
 * @param charset 字符集
 * @param isAppend 是否追加
 * @return 文件
 * @throws IORuntimeException IO异常
 */
public static <T>File writeLines(Collection<T> list,File file,String charset,boolean isAppend) throws IORuntimeException {
  return FileWriter.create(file,CharsetUtil.charset(charset)).writeLines(list,isAppend);
}",0.9882352941176472
28348,"/** 
 * 将Set排序（根据Entry的值）
 * @param set 被排序的Set
 * @return 排序后的Set
 */
public static List<Entry<Long,Long>> sortEntrySetToList(Set<Entry<Long,Long>> set){
  List<Entry<Long,Long>> list=new LinkedList<Map.Entry<Long,Long>>(set);
  Collections.sort(list,new Comparator<Entry<Long,Long>>(){
    @Override public int compare(    Entry<Long,Long> o1,    Entry<Long,Long> o2){
      if (o1.getValue() > o2.getValue()) {
        return 1;
      }
      if (o1.getValue() < o2.getValue()) {
        return -1;
      }
      return 0;
    }
  }
);
  return list;
}","/** 
 * 将Set排序（根据Entry的值）
 * @param set 被排序的Set
 * @return 排序后的Set
 */
public static List<Entry<Long,Long>> sortEntrySetToList(Set<Entry<Long,Long>> set){
  List<Entry<Long,Long>> list=new LinkedList<>(set);
  Collections.sort(list,new Comparator<Entry<Long,Long>>(){
    @Override public int compare(    Entry<Long,Long> o1,    Entry<Long,Long> o2){
      if (o1.getValue() > o2.getValue()) {
        return 1;
      }
      if (o1.getValue() < o2.getValue()) {
        return -1;
      }
      return 0;
    }
  }
);
  return list;
}",0.981651376146789
28349,"/** 
 * 切取部分数据
 * @param < T > 集合元素类型
 * @param surplusAlaDatas 原数据
 * @param partSize 每部分数据的长度
 * @return 切取出的数据或null
 */
public static <T>List<T> popPart(Deque<T> surplusAlaDatas,int partSize){
  if (surplusAlaDatas == null || surplusAlaDatas.size() <= 0) {
    return null;
  }
  final List<T> currentAlaDatas=new ArrayList<T>();
  int size=surplusAlaDatas.size();
  if (size > partSize) {
    for (int i=0; i < partSize; i++) {
      currentAlaDatas.add(surplusAlaDatas.pop());
    }
  }
 else {
    for (int i=0; i < size; i++) {
      currentAlaDatas.add(surplusAlaDatas.pop());
    }
  }
  return currentAlaDatas;
}","/** 
 * 切取部分数据
 * @param < T > 集合元素类型
 * @param surplusAlaDatas 原数据
 * @param partSize 每部分数据的长度
 * @return 切取出的数据或null
 */
public static <T>List<T> popPart(Deque<T> surplusAlaDatas,int partSize){
  if (isEmpty(surplusAlaDatas)) {
    return null;
  }
  final List<T> currentAlaDatas=new ArrayList<>();
  int size=surplusAlaDatas.size();
  if (size > partSize) {
    for (int i=0; i < partSize; i++) {
      currentAlaDatas.add(surplusAlaDatas.pop());
    }
  }
 else {
    for (int i=0; i < size; i++) {
      currentAlaDatas.add(surplusAlaDatas.pop());
    }
  }
  return currentAlaDatas;
}",0.9348722176422094
28350,"/** 
 * 将多个集合排序并显示不同的段落（分页）
 * @param < T > 集合元素类型
 * @param pageNo 页码
 * @param numPerPage 每页的条目数
 * @param comparator 比较器
 * @param colls 集合数组
 * @return 分业后的段落内容
 */
@SafeVarargs public static <T>List<T> sortPageAll2(int pageNo,int numPerPage,Comparator<T> comparator,Collection<T>... colls){
  BoundedPriorityQueue<T> queue=new BoundedPriorityQueue<T>(pageNo * numPerPage);
  for (  Collection<T> coll : colls) {
    queue.addAll(coll);
  }
  int resultSize=queue.size();
  if (resultSize <= numPerPage) {
    return queue.toList();
  }
  final int[] startEnd=PageUtil.transToStartEnd(pageNo,numPerPage);
  if (startEnd[1] > resultSize) {
    return new ArrayList<>();
  }
  return queue.toList().subList(startEnd[0],startEnd[1]);
}","/** 
 * 将多个集合排序并显示不同的段落（分页）
 * @param < T > 集合元素类型
 * @param pageNo 页码
 * @param numPerPage 每页的条目数
 * @param comparator 比较器
 * @param colls 集合数组
 * @return 分业后的段落内容
 */
@SafeVarargs public static <T>List<T> sortPageAll2(int pageNo,int numPerPage,Comparator<T> comparator,Collection<T>... colls){
  BoundedPriorityQueue<T> queue=new BoundedPriorityQueue<>(pageNo * numPerPage,comparator);
  for (  Collection<T> coll : colls) {
    queue.addAll(coll);
  }
  int resultSize=queue.size();
  if (resultSize <= numPerPage) {
    return queue.toList();
  }
  final int[] startEnd=PageUtil.transToStartEnd(pageNo,numPerPage);
  if (startEnd[1] > resultSize) {
    return new ArrayList<>();
  }
  return queue.toList().subList(startEnd[0],startEnd[1]);
}",0.9919028340080972
28351,"/** 
 * 将多个集合排序并显示不同的段落（分页）
 * @param < T > 集合元素类型
 * @param pageNo 页码，从1开始
 * @param numPerPage 每页的条目数
 * @param comparator 比较器
 * @param colls 集合数组
 * @return 分页后的段落内容
 */
@SafeVarargs public static <T>List<T> sortPageAll(int pageNo,int numPerPage,Comparator<T> comparator,Collection<T>... colls){
  final List<T> result=new ArrayList<T>();
  for (  Collection<T> coll : colls) {
    result.addAll(coll);
  }
  Collections.sort(result,comparator);
  int resultSize=result.size();
  if (resultSize <= numPerPage) {
    return result;
  }
  final int[] startEnd=PageUtil.transToStartEnd(pageNo,numPerPage);
  if (startEnd[1] > resultSize) {
    return new ArrayList<>();
  }
  return result.subList(startEnd[0],startEnd[1]);
}","/** 
 * 将多个集合排序并显示不同的段落（分页）
 * @param < T > 集合元素类型
 * @param pageNo 页码，从1开始
 * @param numPerPage 每页的条目数
 * @param comparator 比较器
 * @param colls 集合数组
 * @return 分页后的段落内容
 */
@SafeVarargs public static <T>List<T> sortPageAll(int pageNo,int numPerPage,Comparator<T> comparator,Collection<T>... colls){
  final List<T> result=new ArrayList<>();
  for (  Collection<T> coll : colls) {
    result.addAll(coll);
  }
  Collections.sort(result,comparator);
  int resultSize=result.size();
  if (resultSize <= numPerPage) {
    return result;
  }
  final int[] startEnd=PageUtil.transToStartEnd(pageNo,numPerPage);
  if (startEnd[1] > resultSize) {
    return new ArrayList<>();
  }
  return result.subList(startEnd[0],startEnd[1]);
}",0.9993108201240524
28352,"/** 
 * 将power和值与11取模获得余数进行校验码判断
 * @param iSum
 * @return 校验位
 */
private static char getCheckCode18(int iSum){
  char sCode=StrUtil.C_SPACE;
switch (iSum % 11) {
case 10:
    sCode='2';
  break;
case 9:
sCode='3';
break;
case 8:
sCode='4';
break;
case 7:
sCode='5';
break;
case 6:
sCode='6';
break;
case 5:
sCode='7';
break;
case 4:
sCode='8';
break;
case 3:
sCode='9';
break;
case 2:
sCode='x';
break;
case 1:
sCode='0';
break;
case 0:
sCode='1';
break;
}
return sCode;
}","/** 
 * 将power和值与11取模获得余数进行校验码判断
 * @param iSum
 * @return 校验位
 */
private static char getCheckCode18(int iSum){
switch (iSum % 11) {
case 10:
    return '2';
case 9:
  return '3';
case 8:
return '4';
case 7:
return '5';
case 6:
return '6';
case 5:
return '7';
case 4:
return '8';
case 3:
return '9';
case 2:
return 'x';
case 1:
return '0';
case 0:
return '1';
default :
return StrUtil.C_SPACE;
}
}",0.3142201834862385
28353,"/** 
 * 验证10位身份编码是否合法
 * @param idCard 身份编码
 * @return 身份证信息数组<p> [0] - 台湾、澳门、香港 [1] - 性别(男M,女F,未知N) [2] - 是否合法(合法true,不合法false) 若不是身份证件号码则返回null </p>
 */
public static String[] isValidCard10(String idCard){
  String[] info=new String[3];
  String card=idCard.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (card.length() != 8 && card.length() != 9 && idCard.length() != 10) {
    return null;
  }
  if (idCard.matches(""String_Node_Str"")) {
    info[0]=""String_Node_Str"";
    System.out.println(""String_Node_Str"");
    String char2=idCard.substring(1,2);
    if (char2.equals(""String_Node_Str"")) {
      info[1]=""String_Node_Str"";
      System.out.println(""String_Node_Str"");
    }
 else     if (char2.equals(""String_Node_Str"")) {
      info[1]=""String_Node_Str"";
      System.out.println(""String_Node_Str"");
    }
 else {
      info[1]=""String_Node_Str"";
      info[2]=""String_Node_Str"";
      System.out.println(""String_Node_Str"");
      return info;
    }
    info[2]=isValidTWCard(idCard) ? ""String_Node_Str"" : ""String_Node_Str"";
  }
 else   if (idCard.matches(""String_Node_Str"")) {
    info[0]=""String_Node_Str"";
    info[1]=""String_Node_Str"";
  }
 else   if (idCard.matches(""String_Node_Str"")) {
    info[0]=""String_Node_Str"";
    info[1]=""String_Node_Str"";
    info[2]=isValidHKCard(idCard) ? ""String_Node_Str"" : ""String_Node_Str"";
  }
 else {
    return null;
  }
  return info;
}","/** 
 * 验证10位身份编码是否合法
 * @param idCard 身份编码
 * @return 身份证信息数组<p> [0] - 台湾、澳门、香港 [1] - 性别(男M,女F,未知N) [2] - 是否合法(合法true,不合法false) 若不是身份证件号码则返回null </p>
 */
public static String[] isValidCard10(String idCard){
  String[] info=new String[3];
  String card=idCard.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (card.length() != 8 && card.length() != 9 && idCard.length() != 10) {
    return null;
  }
  if (idCard.matches(""String_Node_Str"")) {
    info[0]=""String_Node_Str"";
    String char2=idCard.substring(1,2);
    if (char2.equals(""String_Node_Str"")) {
      info[1]=""String_Node_Str"";
    }
 else     if (char2.equals(""String_Node_Str"")) {
      info[1]=""String_Node_Str"";
    }
 else {
      info[1]=""String_Node_Str"";
      info[2]=""String_Node_Str"";
      return info;
    }
    info[2]=isValidTWCard(idCard) ? ""String_Node_Str"" : ""String_Node_Str"";
  }
 else   if (idCard.matches(""String_Node_Str"")) {
    info[0]=""String_Node_Str"";
    info[1]=""String_Node_Str"";
  }
 else   if (idCard.matches(""String_Node_Str"")) {
    info[0]=""String_Node_Str"";
    info[1]=""String_Node_Str"";
    info[2]=isValidHKCard(idCard) ? ""String_Node_Str"" : ""String_Node_Str"";
  }
 else {
    return null;
  }
  return info;
}",0.931852986217458
28354,"/** 
 * 验证香港身份证号码(存在Bug，部份特殊身份证无法检查) <p> 身份证前2位为英文字符，如果只出现一个英文字符则表示第一位是空格，对应数字58 前2位英文字符A-Z分别对应数字10-35 最后一位校验码为0-9的数字加上字符""A""，""A""代表10 </p> <p> 将身份证号码全部转换为数字，分别对应乘9-1相加的总和，整除11则证件号码有效 </p>
 * @param idCard 身份证号码
 * @return 验证码是否符合
 */
public static boolean isValidHKCard(String idCard){
  String card=idCard.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Integer sum=0;
  if (card.length() == 9) {
    sum=(Integer.valueOf(card.substring(0,1).toUpperCase().toCharArray()[0]) - 55) * 9 + (Integer.valueOf(card.substring(1,2).toUpperCase().toCharArray()[0]) - 55) * 8;
    card=card.substring(1,9);
  }
 else {
    sum=522 + (Integer.valueOf(card.substring(0,1).toUpperCase().toCharArray()[0]) - 55) * 8;
  }
  String mid=card.substring(1,7);
  String end=card.substring(7,8);
  char[] chars=mid.toCharArray();
  Integer iflag=7;
  for (  char c : chars) {
    sum=sum + Integer.valueOf(String.valueOf(c)) * iflag;
    iflag--;
  }
  if (end.toUpperCase().equals(""String_Node_Str"")) {
    sum+=10;
  }
 else {
    sum+=Integer.valueOf(end);
  }
  return (sum % 11 == 0) ? true : false;
}","/** 
 * 验证香港身份证号码(存在Bug，部份特殊身份证无法检查) <p> 身份证前2位为英文字符，如果只出现一个英文字符则表示第一位是空格，对应数字58 前2位英文字符A-Z分别对应数字10-35 最后一位校验码为0-9的数字加上字符""A""，""A""代表10 </p> <p> 将身份证号码全部转换为数字，分别对应乘9-1相加的总和，整除11则证件号码有效 </p>
 * @param idCard 身份证号码
 * @return 验证码是否符合
 */
public static boolean isValidHKCard(String idCard){
  String card=idCard.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Integer sum=0;
  if (card.length() == 9) {
    sum=(Integer.valueOf(card.substring(0,1).toUpperCase().toCharArray()[0]) - 55) * 9 + (Integer.valueOf(card.substring(1,2).toUpperCase().toCharArray()[0]) - 55) * 8;
    card=card.substring(1,9);
  }
 else {
    sum=522 + (Integer.valueOf(card.substring(0,1).toUpperCase().toCharArray()[0]) - 55) * 8;
  }
  String mid=card.substring(1,7);
  String end=card.substring(7,8);
  char[] chars=mid.toCharArray();
  Integer iflag=7;
  for (  char c : chars) {
    sum=sum + Integer.valueOf(String.valueOf(c)) * iflag;
    iflag--;
  }
  if (""String_Node_Str"".equals(end.toUpperCase())) {
    sum+=10;
  }
 else {
    sum+=Integer.valueOf(end);
  }
  return (sum % 11 == 0) ? true : false;
}",0.9770009199632016
28355,"/** 
 * 根据long值获取ip v4地址
 * @param longIP IP的long表示形式
 * @return IP V4 地址
 */
public static String longToIpv4(long longIP){
  StringBuffer sb=new StringBuffer();
  sb.append(String.valueOf(longIP >>> 24));
  sb.append(""String_Node_Str"");
  sb.append(String.valueOf((longIP & 0x00FFFFFF) >>> 16));
  sb.append(""String_Node_Str"");
  sb.append(String.valueOf((longIP & 0x0000FFFF) >>> 8));
  sb.append(""String_Node_Str"");
  sb.append(String.valueOf(longIP & 0x000000FF));
  return sb.toString();
}","/** 
 * 根据long值获取ip v4地址
 * @param longIP IP的long表示形式
 * @return IP V4 地址
 */
public static String longToIpv4(long longIP){
  final StringBuilder sb=new StringBuilder();
  sb.append(String.valueOf(longIP >>> 24));
  sb.append(""String_Node_Str"");
  sb.append(String.valueOf((longIP & 0x00FFFFFF) >>> 16));
  sb.append(""String_Node_Str"");
  sb.append(String.valueOf((longIP & 0x0000FFFF) >>> 8));
  sb.append(""String_Node_Str"");
  sb.append(String.valueOf(longIP & 0x000000FF));
  return sb.toString();
}",0.9839357429718876
28356,"/** 
 * 获得一个随机的字符串
 * @param baseString 随机字符选取的样本
 * @param length 字符串的长度
 * @return 随机字符串
 */
public static String randomString(String baseString,int length){
  Random random=new Random();
  StringBuffer sb=new StringBuffer();
  if (length < 1) {
    length=1;
  }
  int baseLength=baseString.length();
  for (int i=0; i < length; i++) {
    int number=random.nextInt(baseLength);
    sb.append(baseString.charAt(number));
  }
  return sb.toString();
}","/** 
 * 获得一个随机的字符串
 * @param baseString 随机字符选取的样本
 * @param length 字符串的长度
 * @return 随机字符串
 */
public static String randomString(String baseString,int length){
  final Random random=new Random();
  final StringBuilder sb=new StringBuilder();
  if (length < 1) {
    length=1;
  }
  int baseLength=baseString.length();
  for (int i=0; i < length; i++) {
    int number=random.nextInt(baseLength);
    sb.append(baseString.charAt(number));
  }
  return sb.toString();
}",0.9760869565217392
28357,"public X509Certificate[] getAcceptedIssuers(){
  return null;
}","@Override public X509Certificate[] getAcceptedIssuers(){
  return null;
}",0.9264705882352942
28358,"public boolean verify(String hostname,SSLSession session){
  return true;
}","@Override public boolean verify(String hostname,SSLSession session){
  return true;
}",0.9375
28359,"/** 
 * Get the ""null"" string value. 获得“null”字符串
 * @return The string ""null"".
 */
public String toString(){
  return ""String_Node_Str"";
}","/** 
 * Get the ""null"" string value. 获得“null”字符串
 * @return The string ""null"".
 */
@Override public String toString(){
  return ""String_Node_Str"";
}",0.965034965034965
28360,"/** 
 * Make a printable string of this JSONTokener.
 * @return "" at {index} [character {character} line {line}]""
 */
public String toString(){
  return ""String_Node_Str"" + this.index + ""String_Node_Str""+ this.character+ ""String_Node_Str""+ this.line+ ""String_Node_Str"";
}","/** 
 * Make a printable string of this JSONTokener.
 * @return "" at {index} [character {character} line {line}]""
 */
@Override public String toString(){
  return ""String_Node_Str"" + this.index + ""String_Node_Str""+ this.character+ ""String_Node_Str""+ this.line+ ""String_Node_Str"";
}",0.9818840579710144
28361,"/** 
 * Returns a message containing the String passed to a constructor as well as line and column numbers and filename if any of these are known.
 * @return The error message.
 */
public String getMessage(){
  String ret=super.getMessage();
  if (fileName != null) {
    ret+=(""String_Node_Str"" + fileName);
    if (lineNumber != -1) {
      ret+=""String_Node_Str"" + lineNumber;
    }
    if (columnNumber != -1) {
      ret+=""String_Node_Str"" + columnNumber;
    }
  }
  return ret;
}","/** 
 * Returns a message containing the String passed to a constructor as well as line and column numbers and filename if any of these are known.
 * @return The error message.
 */
@Override public String getMessage(){
  String ret=super.getMessage();
  if (fileName != null) {
    ret+=(""String_Node_Str"" + fileName);
    if (lineNumber != -1) {
      ret+=""String_Node_Str"" + lineNumber;
    }
    if (columnNumber != -1) {
      ret+=""String_Node_Str"" + columnNumber;
    }
  }
  return ret;
}",0.989816700610998
28362,"/** 
 * 将当前主机的信息转换成字符串。
 * @return 主机信息的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getAddress());
  return builder.toString();
}","/** 
 * 将当前主机的信息转换成字符串。
 * @return 主机信息的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getAddress());
  return builder.toString();
}",0.98220640569395
28363,"/** 
 * 将Java Implementation的信息转换成字符串。
 * @return JVM impl.的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  SystemUtil.append(builder,""String_Node_Str"",getVendorURL());
  return builder.toString();
}","/** 
 * 将Java Implementation的信息转换成字符串。
 * @return JVM impl.的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  SystemUtil.append(builder,""String_Node_Str"",getVendorURL());
  return builder.toString();
}",0.9863387978142076
28364,"/** 
 * 将当前运行的JRE信息转换成字符串。
 * @return JRE信息的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getHomeDir());
  SystemUtil.append(builder,""String_Node_Str"",getExtDirs());
  SystemUtil.append(builder,""String_Node_Str"",getEndorsedDirs());
  SystemUtil.append(builder,""String_Node_Str"",getClassPath());
  SystemUtil.append(builder,""String_Node_Str"",getClassVersion());
  SystemUtil.append(builder,""String_Node_Str"",getLibraryPath());
  SystemUtil.append(builder,""String_Node_Str"",getProtocolPackages());
  return builder.toString();
}","/** 
 * 将当前运行的JRE信息转换成字符串。
 * @return JRE信息的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getHomeDir());
  SystemUtil.append(builder,""String_Node_Str"",getExtDirs());
  SystemUtil.append(builder,""String_Node_Str"",getEndorsedDirs());
  SystemUtil.append(builder,""String_Node_Str"",getClassPath());
  SystemUtil.append(builder,""String_Node_Str"",getClassVersion());
  SystemUtil.append(builder,""String_Node_Str"",getLibraryPath());
  SystemUtil.append(builder,""String_Node_Str"",getProtocolPackages());
  return builder.toString();
}",0.9932157394843962
28365,"/** 
 * 将Java Specification的信息转换成字符串。
 * @return JVM spec.的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  return builder.toString();
}","/** 
 * 将Java Specification的信息转换成字符串。
 * @return JVM spec.的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  return builder.toString();
}",0.9861111111111112
28366,"/** 
 * 将Java Virutal Machine Implementation的信息转换成字符串。
 * @return JVM impl.的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  SystemUtil.append(builder,""String_Node_Str"",getInfo());
  return builder.toString();
}","/** 
 * 将Java Virutal Machine Implementation的信息转换成字符串。
 * @return JVM impl.的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  SystemUtil.append(builder,""String_Node_Str"",getInfo());
  return builder.toString();
}",0.9885057471264368
28367,"/** 
 * 将Java Virutal Machine Specification的信息转换成字符串。
 * @return JVM spec.的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  return builder.toString();
}","/** 
 * 将Java Virutal Machine Specification的信息转换成字符串。
 * @return JVM spec.的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getVendor());
  return builder.toString();
}",0.9867021276595744
28368,"/** 
 * 将OS的信息转换成字符串。
 * @return OS的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getArch());
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getFileSeparator());
  SystemUtil.append(builder,""String_Node_Str"",getLineSeparator());
  SystemUtil.append(builder,""String_Node_Str"",getPathSeparator());
  return builder.toString();
}","/** 
 * 将OS的信息转换成字符串。
 * @return OS的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getArch());
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getVersion());
  SystemUtil.append(builder,""String_Node_Str"",getFileSeparator());
  SystemUtil.append(builder,""String_Node_Str"",getLineSeparator());
  SystemUtil.append(builder,""String_Node_Str"",getPathSeparator());
  return builder.toString();
}",0.9906716417910448
28369,"/** 
 * 将当前用户的信息转换成字符串。
 * @return 用户信息的字符串表示
 */
public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getHomeDir());
  SystemUtil.append(builder,""String_Node_Str"",getCurrentDir());
  SystemUtil.append(builder,""String_Node_Str"",getTempDir());
  SystemUtil.append(builder,""String_Node_Str"",getLanguage());
  SystemUtil.append(builder,""String_Node_Str"",getCountry());
  return builder.toString();
}","/** 
 * 将当前用户的信息转换成字符串。
 * @return 用户信息的字符串表示
 */
@Override public final String toString(){
  StringBuilder builder=new StringBuilder();
  SystemUtil.append(builder,""String_Node_Str"",getName());
  SystemUtil.append(builder,""String_Node_Str"",getHomeDir());
  SystemUtil.append(builder,""String_Node_Str"",getCurrentDir());
  SystemUtil.append(builder,""String_Node_Str"",getTempDir());
  SystemUtil.append(builder,""String_Node_Str"",getLanguage());
  SystemUtil.append(builder,""String_Node_Str"",getCountry());
  return builder.toString();
}",0.9905482041587902
28370,"/** 
 * base64编码
 * @param source 被编码的base64字符串
 * @param charset 字符集
 * @return 被加密后的字符串
 */
public static String encode(byte[] source,Charset charset){
  return StrUtil.str(encode(source,false),charset);
}","/** 
 * 编码为Base64<br> 如果isMultiLine为<code>true</code>，则每76个字符一个换行符，否则在一行显示
 * @param arr 被编码的数组
 * @param isMultiLine 在76个char之后是CRLF还是EOF
 * @param isUrlSafe 是否使用URL安全字符，一般为<code>false</code>
 * @return 编码后的bytes
 */
public static byte[] encode(byte[] arr,boolean isMultiLine,boolean isUrlSafe){
  if (null == arr) {
    return null;
  }
  int len=arr.length;
  if (len == 0) {
    return new byte[0];
  }
  int evenlen=(len / 3) * 3;
  int cnt=((len - 1) / 3 + 1) << 2;
  int destlen=cnt + (isMultiLine ? (cnt - 1) / 76 << 1 : 0);
  byte[] dest=new byte[destlen];
  byte[] encodeTable=isUrlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
  for (int s=0, d=0, cc=0; s < evenlen; ) {
    int i=(arr[s++] & 0xff) << 16 | (arr[s++] & 0xff) << 8 | (arr[s++] & 0xff);
    dest[d++]=encodeTable[(i >>> 18) & 0x3f];
    dest[d++]=encodeTable[(i >>> 12) & 0x3f];
    dest[d++]=encodeTable[(i >>> 6) & 0x3f];
    dest[d++]=encodeTable[i & 0x3f];
    if (isMultiLine && ++cc == 19 && d < destlen - 2) {
      dest[d++]='\r';
      dest[d++]='\n';
      cc=0;
    }
  }
  int left=len - evenlen;
  if (left > 0) {
    int i=((arr[evenlen] & 0xff) << 10) | (left == 2 ? ((arr[len - 1] & 0xff) << 2) : 0);
    dest[destlen - 4]=encodeTable[i >> 12];
    dest[destlen - 3]=encodeTable[(i >>> 6) & 0x3f];
    if (isUrlSafe) {
      int urlSafeLen=destlen - 2;
      if (2 == left) {
        dest[destlen - 2]=encodeTable[i & 0x3f];
        urlSafeLen+=1;
      }
      byte[] urlSafeDest=new byte[urlSafeLen];
      System.arraycopy(dest,0,urlSafeDest,0,urlSafeLen);
      return urlSafeDest;
    }
 else {
      dest[destlen - 2]=left == 2 ? encodeTable[i & 0x3f] : (byte)'=';
      dest[destlen - 1]='=';
    }
  }
  return dest;
}",0.0786749482401656
28371,"/** 
 * 等级数量是否有效<br> 有效的定义是：levelMaxCount大于0（被设置），当前等级数量没有超过这个最大值
 * @param levelCount 登记数量
 * @return 是否有效
 */
private boolean isLevelCountValid(int levelCount){
  return this.levelMaxCount > 0 && levelCount < this.levelMaxCount;
}","/** 
 * 等级数量是否有效<br> 有效的定义是：levelMaxCount大于0（被设置），当前等级数量没有超过这个最大值
 * @param levelCount 登记数量
 * @return 是否有效
 */
private boolean isLevelCountValid(int levelCount){
  return this.levelMaxCount <= 0 || levelCount < this.levelMaxCount;
}",0.9849462365591398
28372,"/** 
 * 注册默认转换器
 * @return 转换器
 */
private ConverterRegistry defaultConverter(){
  defaultConverter=new ConcurrentHashMap<>();
  defaultConverter.put(byte.class,new PrimitiveConverter(byte.class));
  defaultConverter.put(short.class,new PrimitiveConverter(short.class));
  defaultConverter.put(int.class,new PrimitiveConverter(int.class));
  defaultConverter.put(long.class,new PrimitiveConverter(long.class));
  defaultConverter.put(float.class,new PrimitiveConverter(float.class));
  defaultConverter.put(double.class,new PrimitiveConverter(double.class));
  defaultConverter.put(char.class,new PrimitiveConverter(char.class));
  defaultConverter.put(boolean.class,new PrimitiveConverter(boolean.class));
  defaultConverter.put(String.class,new StringConverter());
  defaultConverter.put(Boolean.class,new BooleanConverter());
  defaultConverter.put(Character.class,new CharacterConverter());
  defaultConverter.put(Number.class,new NumberConverter());
  defaultConverter.put(Byte.class,new NumberConverter(Byte.class));
  defaultConverter.put(Short.class,new NumberConverter(Short.class));
  defaultConverter.put(Integer.class,new NumberConverter(Integer.class));
  defaultConverter.put(Long.class,new NumberConverter(Long.class));
  defaultConverter.put(Float.class,new NumberConverter(Float.class));
  defaultConverter.put(Double.class,new NumberConverter(Double.class));
  defaultConverter.put(BigDecimal.class,new NumberConverter(BigDecimal.class));
  defaultConverter.put(BigInteger.class,new NumberConverter(BigInteger.class));
  defaultConverter.put(Integer[].class,new ArrayConverter<Integer>(Integer.class));
  defaultConverter.put(Long[].class,new ArrayConverter<Long>(Long.class));
  defaultConverter.put(Byte[].class,new ArrayConverter<Byte>(Byte.class));
  defaultConverter.put(Short[].class,new ArrayConverter<Short>(Short.class));
  defaultConverter.put(Float[].class,new ArrayConverter<Float>(Float.class));
  defaultConverter.put(Double[].class,new ArrayConverter<Double>(Double.class));
  defaultConverter.put(Boolean[].class,new ArrayConverter<Boolean>(Boolean.class));
  defaultConverter.put(Character[].class,new ArrayConverter<Character>(Character.class));
  defaultConverter.put(String[].class,new ArrayConverter<String>(String.class));
  defaultConverter.put(byte[].class,new ByteArrayConverter());
  defaultConverter.put(short[].class,new ShortArrayConverter());
  defaultConverter.put(int[].class,new IntArrayConverter());
  defaultConverter.put(long[].class,new LongArrayConverter());
  defaultConverter.put(float[].class,new FloatArrayConverter());
  defaultConverter.put(double[].class,new DoubleArrayConverter());
  defaultConverter.put(boolean[].class,new BooleanArrayConverter());
  defaultConverter.put(char[].class,new CharArrayConverter());
  defaultConverter.put(URI.class,new URIConverter());
  defaultConverter.put(URL.class,new URLConverter());
  defaultConverter.put(Calendar.class,new CalendarConverter());
  defaultConverter.put(Date.class,new DateConverter());
  defaultConverter.put(DateTime.class,new DateTimeConverter());
  defaultConverter.put(java.sql.Date.class,new SqlDateConverter());
  defaultConverter.put(java.sql.Time.class,new SqlTimeConverter());
  defaultConverter.put(java.sql.Timestamp.class,new SqlTimestampConverter());
  defaultConverter.put(Class.class,new ClassConverter());
  defaultConverter.put(TimeZone.class,new TimeZoneConverter());
  defaultConverter.put(Charset.class,new CharsetConverter());
  defaultConverter.put(Path.class,new PathConverter());
  return this;
}","/** 
 * 注册默认转换器
 * @return 转换器
 */
private ConverterRegistry defaultConverter(){
  defaultConverterMap=new ConcurrentHashMap<>();
  defaultConverterMap.put(byte.class,new PrimitiveConverter(byte.class));
  defaultConverterMap.put(short.class,new PrimitiveConverter(short.class));
  defaultConverterMap.put(int.class,new PrimitiveConverter(int.class));
  defaultConverterMap.put(long.class,new PrimitiveConverter(long.class));
  defaultConverterMap.put(float.class,new PrimitiveConverter(float.class));
  defaultConverterMap.put(double.class,new PrimitiveConverter(double.class));
  defaultConverterMap.put(char.class,new PrimitiveConverter(char.class));
  defaultConverterMap.put(boolean.class,new PrimitiveConverter(boolean.class));
  defaultConverterMap.put(String.class,new StringConverter());
  defaultConverterMap.put(Boolean.class,new BooleanConverter());
  defaultConverterMap.put(Character.class,new CharacterConverter());
  defaultConverterMap.put(Number.class,new NumberConverter());
  defaultConverterMap.put(Byte.class,new NumberConverter(Byte.class));
  defaultConverterMap.put(Short.class,new NumberConverter(Short.class));
  defaultConverterMap.put(Integer.class,new NumberConverter(Integer.class));
  defaultConverterMap.put(Long.class,new NumberConverter(Long.class));
  defaultConverterMap.put(Float.class,new NumberConverter(Float.class));
  defaultConverterMap.put(Double.class,new NumberConverter(Double.class));
  defaultConverterMap.put(BigDecimal.class,new NumberConverter(BigDecimal.class));
  defaultConverterMap.put(BigInteger.class,new NumberConverter(BigInteger.class));
  defaultConverterMap.put(Integer[].class,new ArrayConverter<Integer>(Integer.class));
  defaultConverterMap.put(Long[].class,new ArrayConverter<Long>(Long.class));
  defaultConverterMap.put(Byte[].class,new ArrayConverter<Byte>(Byte.class));
  defaultConverterMap.put(Short[].class,new ArrayConverter<Short>(Short.class));
  defaultConverterMap.put(Float[].class,new ArrayConverter<Float>(Float.class));
  defaultConverterMap.put(Double[].class,new ArrayConverter<Double>(Double.class));
  defaultConverterMap.put(Boolean[].class,new ArrayConverter<Boolean>(Boolean.class));
  defaultConverterMap.put(Character[].class,new ArrayConverter<Character>(Character.class));
  defaultConverterMap.put(String[].class,new ArrayConverter<String>(String.class));
  defaultConverterMap.put(byte[].class,new ByteArrayConverter());
  defaultConverterMap.put(short[].class,new ShortArrayConverter());
  defaultConverterMap.put(int[].class,new IntArrayConverter());
  defaultConverterMap.put(long[].class,new LongArrayConverter());
  defaultConverterMap.put(float[].class,new FloatArrayConverter());
  defaultConverterMap.put(double[].class,new DoubleArrayConverter());
  defaultConverterMap.put(boolean[].class,new BooleanArrayConverter());
  defaultConverterMap.put(char[].class,new CharArrayConverter());
  defaultConverterMap.put(URI.class,new URIConverter());
  defaultConverterMap.put(URL.class,new URLConverter());
  defaultConverterMap.put(Calendar.class,new CalendarConverter());
  defaultConverterMap.put(Date.class,new DateConverter());
  defaultConverterMap.put(DateTime.class,new DateTimeConverter());
  defaultConverterMap.put(java.sql.Date.class,new SqlDateConverter());
  defaultConverterMap.put(java.sql.Time.class,new SqlTimeConverter());
  defaultConverterMap.put(java.sql.Timestamp.class,new SqlTimestampConverter());
  defaultConverterMap.put(Class.class,new ClassConverter());
  defaultConverterMap.put(TimeZone.class,new TimeZoneConverter());
  defaultConverterMap.put(Charset.class,new CharsetConverter());
  defaultConverterMap.put(Path.class,new PathConverter());
  return this;
}",0.9455199115044248
28373,"/** 
 * 获得自定义转换器
 * @param < T >
 * @param type 类型
 * @return 转换器
 */
@SuppressWarnings(""String_Node_Str"") public <T>Converter<T> getCustomConverter(Class<T> type){
  return (null == customConverter) ? null : (Converter<T>)customConverter.get(type);
}","/** 
 * 获得自定义转换器
 * @param < T >
 * @param type 类型
 * @return 转换器
 */
@SuppressWarnings(""String_Node_Str"") public <T>Converter<T> getCustomConverter(Class<T> type){
  return (null == customConverterMap) ? null : (Converter<T>)customConverterMap.get(type);
}",0.9881889763779528
28374,"/** 
 * 登记自定义转换器
 * @param converter 转换器
 * @return {@link ConverterRegistry}
 */
public ConverterRegistry putCustom(Class<?> clazz,Converter<?> converter){
  if (null == customConverter) {
synchronized (this) {
      if (null == customConverter) {
        customConverter=new ConcurrentHashMap<>();
      }
    }
  }
  customConverter.put(clazz,converter);
  return this;
}","/** 
 * 登记自定义转换器
 * @param converter 转换器
 * @return {@link ConverterRegistry}
 */
public ConverterRegistry putCustom(Class<?> clazz,Converter<?> converter){
  if (null == customConverterMap) {
synchronized (this) {
      if (null == customConverterMap) {
        customConverterMap=new ConcurrentHashMap<>();
      }
    }
  }
  customConverterMap.put(clazz,converter);
  return this;
}",0.913157894736842
28375,"/** 
 * 获得转换器<br> 自定义转换器优先级高于默认转换器
 * @param < T >
 * @param type 类型
 * @return 转换器
 */
@SuppressWarnings(""String_Node_Str"") public <T>Converter<T> getConverter(Class<T> type){
  Converter<T> converter=this.getCustomConverter(type);
  if (null == converter) {
    converter=(Converter<T>)defaultConverter.get(type);
  }
  return converter;
}","/** 
 * 获得转换器<br>
 * @param < T > 转换的目标类型
 * @param type 类型
 * @param isCustomFirst 是否自定义转换器优先
 * @return 转换器
 */
public <T>Converter<T> getConverter(Class<T> type,boolean isCustomFirst){
  Converter<T> converter=null;
  if (isCustomFirst) {
    converter=this.getCustomConverter(type);
    if (null == converter) {
      converter=this.getDefaultConverter(type);
    }
  }
 else {
    converter=this.getDefaultConverter(type);
    if (null == converter) {
      converter=this.getCustomConverter(type);
    }
  }
  return converter;
}",0.4406392694063927
28376,"@Override protected T[] convertInternal(Object value){
  return value.getClass().isArray() ? convertObjectToArray(value) : convertArrayToArray(value);
}","@Override protected T[] convertInternal(Object value){
  return value.getClass().isArray() ? convertArrayToArray(value) : convertObjectToArray(value);
}",0.9276315789473684
28377,"/** 
 * @param dsFactory 数据源工厂
 * @return 自定义的数据源工厂
 */
public static DSFactory setCurrentDSFactory(DSFactory dsFactory){
  log.debug(""String_Node_Str"",dsFactory.dataSourceName);
  currentDSFactory=dsFactory;
  return currentDSFactory;
}","/** 
 * @param dsFactory 数据源工厂
 * @return 自定义的数据源工厂
 */
public static DSFactory setCurrentDSFactory(DSFactory dsFactory){
  if (null != currentDSFactory) {
    currentDSFactory.destroy();
  }
  log.debug(""String_Node_Str"",dsFactory.dataSourceName);
  currentDSFactory=dsFactory;
  return currentDSFactory;
}",0.8713235294117647
28378,"/** 
 * 填充class 到 classes
 * @param className 类名
 * @param packageName 包名
 * @param classes 类集合
 * @param classFilter 类过滤器
 */
private static void fillClass(String className,String packageName,Set<Class<?>> classes,ClassFilter classFilter){
  if (className.startsWith(packageName)) {
    try {
      final Class<?> clazz=Class.forName(className,false,getClassLoader());
      if (classFilter == null || classFilter.accept(clazz)) {
        classes.add(clazz);
      }
    }
 catch (    Throwable ex) {
    }
  }
}","/** 
 * 填充class 到 classes
 * @param className 类名
 * @param packageName 包名
 * @param classes 类集合
 * @param classFilter 类过滤器
 */
private static void fillClass(String className,String packageName,Set<Class<?>> classes,ClassFilter classFilter){
  if (className.startsWith(packageName)) {
    try {
      final Class<?> clazz=Class.forName(className,false,getClassLoader());
      if (classFilter == null || classFilter.accept(clazz)) {
        classes.add(clazz);
      }
    }
 catch (    Exception ex) {
    }
  }
}",0.9844054580896686
28379,"/** 
 * 处理为jar文件的情况，填充满足条件的class 到 classes
 * @param file jar文件
 * @param packageName 包名
 * @param classFilter 类过滤器
 * @param classes 类集合
 */
private static void processJarFile(File file,String packageName,ClassFilter classFilter,Set<Class<?>> classes){
  try {
    for (    JarEntry entry : Collections.list(new JarFile(file).entries())) {
      if (isClass(entry.getName())) {
        final String className=entry.getName().replace(StrUtil.SLASH,StrUtil.DOT).replace(FileUtil.CLASS_EXT,StrUtil.EMPTY);
        fillClass(className,packageName,classes,classFilter);
      }
    }
  }
 catch (  Throwable ex) {
    log.error(ex.getMessage(),ex);
  }
}","/** 
 * 处理为jar文件的情况，填充满足条件的class 到 classes
 * @param file jar文件
 * @param packageName 包名
 * @param classFilter 类过滤器
 * @param classes 类集合
 */
private static void processJarFile(File file,String packageName,ClassFilter classFilter,Set<Class<?>> classes){
  try {
    for (    JarEntry entry : Collections.list(new JarFile(file).entries())) {
      if (isClass(entry.getName())) {
        final String className=entry.getName().replace(StrUtil.SLASH,StrUtil.DOT).replace(FileUtil.CLASS_EXT,StrUtil.EMPTY);
        fillClass(className,packageName,classes,classFilter);
      }
    }
  }
 catch (  Exception ex) {
    log.error(ex.getMessage(),ex);
  }
}",0.9830769230769232
28380,"/** 
 * @return 获得日志，自动判定日志发出者
 */
public static Log get(){
  return getLog(new Exception().getStackTrace()[2].getClassName());
}","/** 
 * @return 获得调用者的日志
 */
public static Log get(){
  return getLog(new Exception().getStackTrace()[1].getClassName());
}",0.9365079365079364
28381,"/** 
 * @return 获得日志，自动判定日志发出者
 */
public static Log get(){
  return LogFactory.get();
}","/** 
 * @return 获得日志，自动判定日志发出者
 */
public static Log get(){
  return LogFactory.indirectGet();
}",0.9456521739130436
28382,"/** 
 * 偏移月
 * @param date 日期
 * @param offsite 偏移月数，正数向未来偏移，负数向历史偏移
 * @return 偏移后的日期
 */
public static DateTime offsiteMonth(Date date,int offsite){
  return offsiteDate(new DateTime(),Calendar.MONTH,offsite);
}","/** 
 * 偏移月
 * @param date 日期
 * @param offsite 偏移月数，正数向未来偏移，负数向历史偏移
 * @return 偏移后的日期
 */
public static DateTime offsiteMonth(Date date,int offsite){
  return offsiteDate(date,Calendar.MONTH,offsite);
}",0.9567307692307692
28383,"/** 
 * 偏移天
 * @param date 日期
 * @param offsite 偏移天数，正数向未来偏移，负数向历史偏移
 * @return 偏移后的日期
 */
public static DateTime offsiteDay(Date date,int offsite){
  return offsiteDate(new DateTime(),Calendar.DAY_OF_YEAR,offsite);
}","/** 
 * 偏移天
 * @param date 日期
 * @param offsite 偏移天数，正数向未来偏移，负数向历史偏移
 * @return 偏移后的日期
 */
public static DateTime offsiteDay(Date date,int offsite){
  return offsiteDate(date,Calendar.DAY_OF_YEAR,offsite);
}",0.9575471698113208
28384,"/** 
 * 偏移周
 * @param date 日期
 * @param offsite 偏移周数，正数向未来偏移，负数向历史偏移
 * @return 偏移后的日期
 */
public static DateTime offsiteWeek(Date date,int offsite){
  return offsiteDate(new DateTime(),Calendar.WEEK_OF_YEAR,offsite);
}","/** 
 * 偏移周
 * @param date 日期
 * @param offsite 偏移周数，正数向未来偏移，负数向历史偏移
 * @return 偏移后的日期
 */
public static DateTime offsiteWeek(Date date,int offsite){
  return offsiteDate(date,Calendar.WEEK_OF_YEAR,offsite);
}",0.9579439252336448
28385,"/** 
 * 格式化文本
 * @param template 文本模板，被替换的部分用 {key} 表示
 * @param map 参数值对
 * @return 格式化后的文本
 */
public static String format(String template,Map<String,Object> map){
  if (null == map || map.isEmpty()) {
    return template;
  }
  for (  Entry<String,Object> entry : map.entrySet()) {
    template.replace(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",entry.getValue().toString());
  }
  return template;
}","/** 
 * 格式化文本
 * @param template 文本模板，被替换的部分用 {key} 表示
 * @param map 参数值对
 * @return 格式化后的文本
 */
public static String format(String template,Map<?,?> map){
  if (null == map || map.isEmpty()) {
    return template;
  }
  for (  Entry<?,?> entry : map.entrySet()) {
    template=template.replace(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",entry.getValue().toString());
  }
  return template;
}",0.9548229548229548
28386,"/** 
 * 转换为Map
 * @param model 模型
 * @param isOnlyBasicType 是否只允许基本类型，包括String
 */
public static void toMap(Object model,boolean isOnlyBasicType){
  Map<String,Object> map=new HashMap<String,Object>();
  final Method[] methods=model.getClass().getMethods();
  for (  Method method : methods) {
    final String methodName=method.getName();
    if (!methodName.startsWith(""String_Node_Str"")) {
      continue;
    }
    final String fieldName=StrUtil.lowerFirst(methodName.substring(3));
    Object value=null;
    try {
      value=method.invoke(model);
    }
 catch (    Exception e) {
      throw new UtilException(StrUtil.format(""String_Node_Str"",fieldName),e);
    }
    if (value != null) {
      if (value instanceof String) {
        map.put(fieldName,value);
      }
 else       if (isOnlyBasicType) {
        if (value.getClass().isPrimitive() == false) {
          map.put(fieldName,value);
        }
      }
    }
  }
}","/** 
 * 转换为Map
 * @param model 模型
 * @param isOnlyBasicType 是否只允许基本类型，包括String
 */
public static Map<String,Object> toMap(Object model,boolean isOnlyBasicType){
  Map<String,Object> map=new HashMap<String,Object>();
  final Method[] methods=model.getClass().getMethods();
  for (  Method method : methods) {
    final String methodName=method.getName();
    if (false == methodName.startsWith(""String_Node_Str"")) {
      continue;
    }
    final String fieldName=StrUtil.getGeneralField(methodName);
    Object value=null;
    try {
      value=method.invoke(model);
    }
 catch (    Exception e) {
      throw new UtilException(StrUtil.format(""String_Node_Str"",fieldName),e);
    }
    if (value != null) {
      if (value instanceof String || value.getClass().isPrimitive() || false == isOnlyBasicType) {
        map.put(fieldName,value);
      }
    }
  }
  return map;
}",0.4784053156146179
28387,"/** 
 * 从Map注入
 * @param model 模型
 * @param map map对象
 */
public static void injectFromMap(Object model,Map<?,?> map){
  Method[] methods=model.getClass().getMethods();
  for (  Method method : methods) {
    String methodName=method.getName();
    if (!methodName.startsWith(""String_Node_Str"")) {
      continue;
    }
    Class<?>[] types=method.getParameterTypes();
    if (types.length != 1) {
      continue;
    }
    String fieldName=StrUtil.lowerFirst(methodName.substring(3));
    Object value=map.get(fieldName);
    if (value == null) {
      continue;
    }
    try {
      method.invoke(model,ClassUtil.parse(types[0],value));
    }
 catch (    Exception e) {
      throw new UtilException(StrUtil.format(""String_Node_Str"",fieldName),e);
    }
  }
}","/** 
 * 从Map注入
 * @param model 模型
 * @param map map对象
 */
public static void injectFromMap(Object model,Map<?,?> map){
  Method[] methods=model.getClass().getMethods();
  for (  Method method : methods) {
    String methodName=method.getName();
    if (!methodName.startsWith(""String_Node_Str"")) {
      continue;
    }
    Class<?>[] types=method.getParameterTypes();
    if (types.length != 1) {
      continue;
    }
    String fieldName=StrUtil.getGeneralField(methodName);
    Object value=map.get(fieldName);
    if (value == null) {
      continue;
    }
    try {
      method.invoke(model,ClassUtil.parse(types[0],value));
    }
 catch (    Exception e) {
      throw new UtilException(StrUtil.format(""String_Node_Str"",fieldName),e);
    }
  }
}",0.9630606860158312
28388,"/** 
 * 注入Request参数
 * @param model 模型
 * @param modelName 模型名称
 * @param request 请求对象
 * @param isWithModelName 参数是否包含模型名称
 */
public static void injectFromRequest(Object model,String modelName,HttpServletRequest request,boolean isWithModelName){
  Method[] methods=model.getClass().getMethods();
  for (  Method method : methods) {
    String methodName=method.getName();
    if (!methodName.startsWith(""String_Node_Str"")) {
      continue;
    }
    Class<?>[] types=method.getParameterTypes();
    if (types.length != 1) {
      continue;
    }
    String fieldName=StrUtil.lowerFirst(methodName.substring(3));
    String paramName=isWithModelName ? (modelName + StrUtil.DOT + fieldName) : fieldName;
    String value=request.getParameter(paramName);
    if (StrUtil.isEmpty(value)) {
      continue;
    }
    try {
      method.invoke(model,ClassUtil.parse(types[0],value));
    }
 catch (    Exception e) {
      throw new UtilException(StrUtil.format(""String_Node_Str"",paramName),e);
    }
  }
}","/** 
 * 注入Request参数
 * @param model 模型
 * @param modelName 模型名称
 * @param request 请求对象
 * @param isWithModelName 参数是否包含模型名称
 */
public static void injectFromRequest(Object model,String modelName,javax.servlet.ServletRequest request,boolean isWithModelName){
  Method[] methods=model.getClass().getMethods();
  for (  Method method : methods) {
    String methodName=method.getName();
    if (!methodName.startsWith(""String_Node_Str"")) {
      continue;
    }
    Class<?>[] types=method.getParameterTypes();
    if (types.length != 1) {
      continue;
    }
    final String fieldName=StrUtil.getGeneralField(methodName);
    final String paramName=isWithModelName ? (modelName + StrUtil.DOT + fieldName) : fieldName;
    final String value=request.getParameter(paramName);
    if (StrUtil.isEmpty(value)) {
      continue;
    }
    try {
      method.invoke(model,ClassUtil.parse(types[0],value));
    }
 catch (    Exception e) {
      throw new UtilException(StrUtil.format(""String_Node_Str"",paramName),e);
    }
  }
}",0.947680157946693
28389,"/** 
 * 获得自增键的值
 * @param ps PreparedStatement
 * @return 自增键的值
 * @throws SQLException
 */
public static Long getGeneratedKey(PreparedStatement ps) throws SQLException {
  ResultSet rs=null;
  try {
    ps.executeUpdate();
    rs=ps.getGeneratedKeys();
    Long generatedKey=null;
    if (rs != null && rs.next()) {
      generatedKey=rs.getLong(1);
    }
    return generatedKey;
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    close(rs);
  }
}","/** 
 * 获得自增键的值
 * @param ps PreparedStatement
 * @return 自增键的值
 * @throws SQLException
 */
public static Long getGeneratedKey(PreparedStatement ps) throws SQLException {
  ResultSet rs=null;
  try {
    rs=ps.getGeneratedKeys();
    Long generatedKey=null;
    if (rs != null && rs.next()) {
      generatedKey=rs.getLong(1);
    }
    return generatedKey;
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    close(rs);
  }
}",0.9733333333333334
28390,"/** 
 * 实例化一个新的SQL运行对象
 * @param ds 数据源
 * @return SQL执行类
 */
public static SqlRunner newSqlRunner(DataSource ds){
  return new SqlRunner(ds);
}","/** 
 * 实例化一个新的SQL运行对象
 * @param ds 数据源
 * @param dialect SQL方言
 * @return SQL执行类
 */
public static SqlRunner newSqlRunner(DataSource ds,Dialect dialect){
  return new SqlRunner(ds,dialect);
}",0.8571428571428571
28391,"/** 
 * 构件相等条件的where语句<br> 如果没有条件语句，泽返回空串，表示没有条件
 * @param entity 条件实体
 * @param paramValues 条件值得存放List
 * @return 带where关键字的SQL部分
 */
public static String buildEqualsWhere(Entity entity,List<Object> paramValues){
  if (null == entity || entity.isEmpty()) {
    return StrUtil.EMPTY;
  }
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  for (  Entry<String,Object> entry : entity.entrySet()) {
    if (paramValues.size() > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(""String_Node_Str"");
    paramValues.add(entry.getValue());
  }
  return sb.toString();
}","/** 
 * 构件相等条件的where语句<br> 如果没有条件语句，泽返回空串，表示没有条件
 * @param entity 条件实体
 * @param paramValues 条件值得存放List
 * @return 带where关键字的SQL部分
 */
public static String buildEqualsWhere(Entity entity,List<Object> paramValues){
  if (null == entity || entity.isEmpty()) {
    return StrUtil.EMPTY;
  }
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean isNotFirst=false;
  for (  Entry<String,Object> entry : entity.entrySet()) {
    if (isNotFirst) {
      sb.append(""String_Node_Str"");
    }
 else {
      isNotFirst=true;
    }
    sb.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(""String_Node_Str"");
    paramValues.add(entry.getValue());
  }
  return sb.toString();
}",0.6424945612762871
28392,"/** 
 * 设置表名
 * @param tableName 表名
 */
public void setTableName(String tableName){
  this.tableName=tableName;
}","/** 
 * 设置表名
 * @param tableName 表名
 * @return 本身
 */
public Entity setTableName(String tableName){
  this.tableName=tableName;
  return this;
}",0.8560311284046692
28393,"/** 
 * 结果的条目数
 * @param conn 数据库连接对象
 * @param where 查询条件
 * @return 复合条件的结果数
 * @throws SQLException
 */
public int count(Connection conn,Entity where) throws SQLException {
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    ps=dialect.psForCount(conn,where);
    rs=ps.executeQuery();
    return new NumberHandler().handle(rs).intValue();
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    DbUtil.close(rs,ps);
  }
}","/** 
 * 结果的条目数
 * @param where 查询条件
 * @return 复合条件的结果数
 * @throws SQLException
 */
public int count(Entity where) throws SQLException {
  Connection conn=null;
  try {
    conn=ds.getConnection();
    return count(conn,where);
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    DbUtil.close(conn);
  }
}",0.6578947368421053
28394,"/** 
 * 分页查询<br/>
 * @param fields 返回的字段列表，null则返回所有字段
 * @param where 条件实体类（包含表名）
 * @param page 页码
 * @param numPerPage 每页条目数
 * @param rsh 结果集处理对象
 * @return 结果对象
 * @throws SQLException
 */
public <T>T page(Collection<String> fields,Entity where,int page,int numPerPage,RsHandler<T> rsh) throws SQLException {
  Connection conn=null;
  try {
    conn=ds.getConnection();
    return page(fields,where,page,numPerPage,rsh);
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    DbUtil.close(conn);
  }
}","/** 
 * 分页查询<br/>
 * @param fields 返回的字段列表，null则返回所有字段
 * @param where 条件实体类（包含表名）
 * @param page 页码
 * @param numPerPage 每页条目数
 * @param rsh 结果集处理对象
 * @return 结果对象
 * @throws SQLException
 */
public <T>T page(Collection<String> fields,Entity where,int page,int numPerPage,RsHandler<T> rsh) throws SQLException {
  Connection conn=null;
  try {
    conn=ds.getConnection();
    return page(conn,fields,where,page,numPerPage,rsh);
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    DbUtil.close(conn);
  }
}",0.9951690821256038
28395,"/** 
 * 构件查询语句
 * @param fields 返回的字段，空则返回所有字段
 * @param where 条件
 * @param paramValues 存放值的列表
 * @return 查询语句
 */
protected StringBuilder buildSelectQuery(Collection<String> fields,Entity where,List<Object> paramValues){
  final StringBuilder sql=new StringBuilder(""String_Node_Str"");
  if (CollectionUtil.isEmpty(fields)) {
    sql.append(""String_Node_Str"");
  }
 else {
    sql.append(CollectionUtil.join(fields,""String_Node_Str""));
  }
  sql.append(""String_Node_Str"").append(where.getTableName()).append(DbUtil.buildEqualsWhere(where,paramValues));
  return sql;
}","/** 
 * 构件查询语句
 * @param fields 返回的字段，空则返回所有字段
 * @param where 条件
 * @param paramValues 存放值的列表
 * @return 查询语句
 */
protected StringBuilder buildSelectQuery(Collection<String> fields,Entity where,List<Object> paramValues){
  final StringBuilder sql=new StringBuilder(""String_Node_Str"");
  if (CollectionUtil.isEmpty(fields)) {
    sql.append(""String_Node_Str"");
  }
 else {
    sql.append(CollectionUtil.join(fields,""String_Node_Str""));
  }
  sql.append(""String_Node_Str"").append(where.getTableName()).append(""String_Node_Str"").append(DbUtil.buildEqualsWhere(where,paramValues));
  return sql;
}",0.9776247848537004
28396,"@Override public PreparedStatement psForDelete(Connection conn,Entity entity) throws SQLException {
  if (null == entity || entity.isEmpty()) {
    throw new SQLException(""String_Node_Str"");
  }
  final List<Object> paramValues=new ArrayList<Object>(entity.size());
  final StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"").append(entity.getTableName()).append(DbUtil.buildEqualsWhere(entity,paramValues));
  final PreparedStatement ps=conn.prepareStatement(sql.toString());
  DbUtil.fillParams(ps,paramValues.toArray(new Object[paramValues.size()]));
  return ps;
}","@Override public PreparedStatement psForDelete(Connection conn,Entity entity) throws SQLException {
  if (null == entity || entity.isEmpty()) {
    throw new SQLException(""String_Node_Str"");
  }
  final List<Object> paramValues=new ArrayList<Object>(entity.size());
  final StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"").append(entity.getTableName()).append(""String_Node_Str"").append(DbUtil.buildEqualsWhere(entity,paramValues));
  final PreparedStatement ps=conn.prepareStatement(sql.toString());
  DbUtil.fillParams(ps,paramValues.toArray(new Object[paramValues.size()]));
  return ps;
}",0.9783333333333334
28397,"@Override public PreparedStatement psForUpdate(Connection conn,Entity entity,Entity where) throws SQLException {
  if (null == entity || entity.isEmpty()) {
    throw new SQLException(""String_Node_Str"");
  }
  final List<Object> paramValues=new ArrayList<Object>(entity.size());
  final StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"").append(entity.getTableName()).append(""String_Node_Str"");
  for (  Entry<String,Object> entry : entity.entrySet()) {
    if (paramValues.size() > 0) {
      sql.append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    paramValues.add(entry.getValue());
  }
  sql.append(DbUtil.buildEqualsWhere(entity,paramValues));
  final PreparedStatement ps=conn.prepareStatement(sql.toString());
  DbUtil.fillParams(ps,paramValues.toArray(new Object[paramValues.size()]));
  return ps;
}","@Override public PreparedStatement psForUpdate(Connection conn,Entity entity,Entity where) throws SQLException {
  if (null == entity || entity.isEmpty()) {
    throw new SQLException(""String_Node_Str"");
  }
  final List<Object> paramValues=new ArrayList<Object>(entity.size());
  final StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"").append(entity.getTableName()).append(""String_Node_Str"");
  for (  Entry<String,Object> entry : entity.entrySet()) {
    if (paramValues.size() > 0) {
      sql.append(""String_Node_Str"");
    }
    sql.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    paramValues.add(entry.getValue());
  }
  sql.append(DbUtil.buildEqualsWhere(where,paramValues));
  System.out.println(sql);
  final PreparedStatement ps=conn.prepareStatement(sql.toString());
  DbUtil.fillParams(ps,paramValues.toArray(new Object[paramValues.size()]));
  return ps;
}",0.9790979097909792
28398,"public static void main(String[] args){
}","public static void main(String[] args) throws SQLException {
  SqlRunner runner=DbUtil.newSqlRunner(DruidDS.getDataSource(""String_Node_Str""),DialectFactory.newDialect(DialectFactory.DRIVER_MYSQL));
  Entity e=Entity.create(""String_Node_Str"").add(""String_Node_Str"",1);
  List<Entity> list=runner.page(null,e,0,5,new EntityHandler());
  for (  Entity entity : list) {
    System.out.println(entity);
  }
}",0.1846846846846846
28399,"/** 
 * 生成一个数字列表<br> 自动判定正序反序
 * @param includedStart 开始的数字（包含）
 * @param excludedEnd 结束的数字（不包含）
 * @param step 步进
 * @return 数字列表
 */
public static int[] range(int includedStart,int excludedEnd,int step){
  if (includedStart > excludedEnd) {
    int tmp=includedStart;
    includedStart=excludedEnd;
    excludedEnd=tmp;
  }
  if (step <= 0) {
    step=1;
  }
  int length=(excludedEnd - includedStart) / step;
  int[] range=new int[length];
  for (int i=0; i < length; i++) {
    range[i]=includedStart;
    includedStart+=step;
  }
  return range;
}","/** 
 * 生成一个数字列表<br> 自动判定正序反序
 * @param includedStart 开始的数字（包含）
 * @param excludedEnd 结束的数字（不包含）
 * @param step 步进
 * @return 数字列表
 */
public static int[] range(int includedStart,int excludedEnd,int step){
  if (includedStart > excludedEnd) {
    int tmp=includedStart;
    includedStart=excludedEnd;
    excludedEnd=tmp;
  }
  if (step <= 0) {
    step=1;
  }
  int deviation=excludedEnd - includedStart;
  int length=deviation / step;
  if (deviation % step != 0) {
    length+=1;
  }
  int[] range=new int[length];
  for (int i=0; i < length; i++) {
    range[i]=includedStart;
    includedStart+=step;
  }
  return range;
}",0.8787107718405428
28400,"/** 
 * Compute and return a measure of distance. Must be >= 0.
 * @param s1
 * @param s2
 * @return
 */
double distance(String s1,String s2);","/** 
 * Compute and return a measure of distance. Must be &gt;= 0.
 * @param s1
 * @param s2
 * @return
 */
double distance(String s1,String s2);",0.9825783972125436
28401,"/** 
 * Compute Jaccard index: |A inter B| / |A union B|.
 * @param s1 The first string to compare.
 * @param s2 The second string to compare.
 * @return The Jaccard index in the range [0, 1]
 * @throws NullPointerException if s1 or s2 is null.
 */
public final double similarity(final String s1,final String s2){
  if (s1 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (s2 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (s1.equals(s2)) {
    return 1;
  }
  Map<String,Integer> profile1=getProfile(s1);
  Map<String,Integer> profile2=getProfile(s2);
  Set<String> union=new HashSet<String>();
  union.addAll(profile1.keySet());
  union.addAll(profile2.keySet());
  int inter=0;
  for (  String key : union) {
    if (profile1.containsKey(key) && profile2.containsKey(key)) {
      inter++;
    }
  }
  return 1.0 * inter / union.size();
}","/** 
 * Compute Jaccard index: |A inter B| / |A union B|.
 * @param s1 The first string to compare.
 * @param s2 The second string to compare.
 * @return The Jaccard index in the range [0, 1]
 * @throws NullPointerException if s1 or s2 is null.
 */
public final double similarity(final String s1,final String s2){
  if (s1 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (s2 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (s1.equals(s2)) {
    return 1;
  }
  Map<String,Integer> profile1=getProfile(s1);
  Map<String,Integer> profile2=getProfile(s2);
  Set<String> union=new HashSet<String>();
  union.addAll(profile1.keySet());
  union.addAll(profile2.keySet());
  int inter=profile1.keySet().size() + profile2.keySet().size() - union.size();
  return 1.0 * inter / union.size();
}",0.8470859780727062
28402,"/** 
 * Return k, the length of k-shingles (aka n-grams).
 * @return The length of k-shingles.
 */
public int getK(){
  return k;
}","/** 
 * Return k, the length of k-shingles (aka n-grams).
 * @return The length of k-shingles.
 */
public final int getK(){
  return k;
}",0.9776119402985076
28403,"/** 
 * The distance between two strings is defined as the L1 norm of the difference of their profiles (the number of occurence of each k-shingle).
 * @param s1 The first string to compare.
 * @param s2 The second string to compare.
 * @return The computed Q-gram distance.
 * @throws NullPointerException if s1 or s2 is null.
 */
public final double distance(final String s1,final String s2){
  if (s1 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (s2 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (s1.equals(s2)) {
    return 0;
  }
  Map<String,Integer> profile1=getProfile(s1);
  Map<String,Integer> profile2=getProfile(s2);
  Set<String> union=new HashSet<String>();
  union.addAll(profile1.keySet());
  union.addAll(profile2.keySet());
  int agg=0;
  for (  String key : union) {
    int v1=0;
    int v2=0;
    Integer iv1=profile1.get(key);
    if (iv1 != null) {
      v1=iv1;
    }
    Integer iv2=profile2.get(key);
    if (iv2 != null) {
      v2=iv2;
    }
    agg+=Math.abs(v1 - v2);
  }
  return agg;
}","/** 
 * Compute QGram distance using precomputed profiles.
 * @param profile1
 * @param profile2
 * @return
 */
public final double distance(final Map<String,Integer> profile1,final Map<String,Integer> profile2){
  Set<String> union=new HashSet<String>();
  union.addAll(profile1.keySet());
  union.addAll(profile2.keySet());
  int agg=0;
  for (  String key : union) {
    int v1=0;
    int v2=0;
    Integer iv1=profile1.get(key);
    if (iv1 != null) {
      v1=iv1;
    }
    Integer iv2=profile2.get(key);
    if (iv2 != null) {
      v2=iv2;
    }
    agg+=Math.abs(v1 - v2);
  }
  return agg;
}",0.4558472553699284
28404,"/** 
 * Compute n-gram distance.
 * @param s0
 * @param s1
 * @return
 */
public final double distance(final String s0,final String s1){
  final char special='\n';
  final int sl=s0.length();
  final int tl=s1.length();
  if (sl == 0 || tl == 0) {
    if (sl == tl) {
      return 0;
    }
 else {
      return 1;
    }
  }
  int cost=0;
  if (sl < n || tl < n) {
    for (int i=0, ni=Math.min(sl,tl); i < ni; i++) {
      if (s0.charAt(i) == s1.charAt(i)) {
        cost++;
      }
    }
    return (float)cost / Math.max(sl,tl);
  }
  char[] sa=new char[sl + n - 1];
  float[] p;
  float[] d;
  float[] d2;
  for (int i=0; i < sa.length; i++) {
    if (i < n - 1) {
      sa[i]=special;
    }
 else {
      sa[i]=s0.charAt(i - n + 1);
    }
  }
  p=new float[sl + 1];
  d=new float[sl + 1];
  int i;
  int j;
  char[] t_j=new char[n];
  for (i=0; i <= sl; i++) {
    p[i]=i;
  }
  for (j=1; j <= tl; j++) {
    if (j < n) {
      for (int ti=0; ti < n - j; ti++) {
        t_j[ti]=special;
      }
      for (int ti=n - j; ti < n; ti++) {
        t_j[ti]=s1.charAt(ti - (n - j));
      }
    }
 else {
      t_j=s1.substring(j - n,j).toCharArray();
    }
    d[0]=j;
    for (i=1; i <= sl; i++) {
      cost=0;
      int tn=n;
      for (int ni=0; ni < n; ni++) {
        if (sa[i - 1 + ni] != t_j[ni]) {
          cost++;
        }
 else         if (sa[i - 1 + ni] == special) {
          tn--;
        }
      }
      float ec=(float)cost / tn;
      d[i]=Math.min(Math.min(d[i - 1] + 1,p[i] + 1),p[i - 1] + ec);
    }
    d2=p;
    p=d;
    d=d2;
  }
  return p[sl] / Math.max(tl,sl);
}","/** 
 * Compute n-gram distance.
 * @param s0
 * @param s1
 * @return
 */
public final double distance(final String s0,final String s1){
  final char special='\n';
  final int sl=s0.length();
  final int tl=s1.length();
  if (s0.equals(s1)) {
    return 0;
  }
  if (sl == 0 || tl == 0) {
    if (sl == tl) {
      return 0;
    }
 else {
      return 1;
    }
  }
  int cost=0;
  if (sl < n || tl < n) {
    for (int i=0, ni=Math.min(sl,tl); i < ni; i++) {
      if (s0.charAt(i) == s1.charAt(i)) {
        cost++;
      }
    }
    return (float)cost / Math.max(sl,tl);
  }
  char[] sa=new char[sl + n - 1];
  float[] p;
  float[] d;
  float[] d2;
  for (int i=0; i < sa.length; i++) {
    if (i < n - 1) {
      sa[i]=special;
    }
 else {
      sa[i]=s0.charAt(i - n + 1);
    }
  }
  p=new float[sl + 1];
  d=new float[sl + 1];
  int i;
  int j;
  char[] t_j=new char[n];
  for (i=0; i <= sl; i++) {
    p[i]=i;
  }
  for (j=1; j <= tl; j++) {
    if (j < n) {
      for (int ti=0; ti < n - j; ti++) {
        t_j[ti]=special;
      }
      for (int ti=n - j; ti < n; ti++) {
        t_j[ti]=s1.charAt(ti - (n - j));
      }
    }
 else {
      t_j=s1.substring(j - n,j).toCharArray();
    }
    d[0]=j;
    for (i=1; i <= sl; i++) {
      cost=0;
      int tn=n;
      for (int ni=0; ni < n; ni++) {
        if (sa[i - 1 + ni] != t_j[ni]) {
          cost++;
        }
 else         if (sa[i - 1 + ni] == special) {
          tn--;
        }
      }
      float ec=(float)cost / tn;
      d[i]=Math.min(Math.min(d[i - 1] + 1,p[i] + 1),p[i - 1] + ec);
    }
    d2=p;
    p=d;
    d=d2;
  }
  return p[sl] / Math.max(tl,sl);
}",0.9872789326714242
28405,"/** 
 * Test of distance method, of class NGram.
 */
@Test public void testDistance(){
  System.out.println(""String_Node_Str"");
  String s0=""String_Node_Str"";
  String s1=""String_Node_Str"";
  String s2=""String_Node_Str"";
  NGram ngram=new NGram();
  System.out.println(ngram.distance(s0,s1));
  System.out.println(ngram.distance(s0,s2));
  Assert.assertTrue(ngram.distance(s0,s1) < ngram.distance(s0,s2));
}","/** 
 * Test of distance method, of class NGram.
 */
@Test public void testDistance(){
  System.out.println(""String_Node_Str"");
  String s0=""String_Node_Str"";
  String s1=""String_Node_Str"";
  String s2=""String_Node_Str"";
  NGram ngram=new NGram();
  System.out.println(ngram.distance(s0,s1));
  System.out.println(ngram.distance(s0,s2));
  Assert.assertTrue(ngram.distance(s0,s1) < ngram.distance(s0,s2));
  assertEquals(0.0,ngram.distance(""String_Node_Str"",""String_Node_Str""),0.0);
  assertEquals(0.0,ngram.distance(""String_Node_Str"",""String_Node_Str""),0.0);
  assertEquals(1.0,ngram.distance(""String_Node_Str"",""String_Node_Str""),0.0);
  assertEquals(1.0,ngram.distance(""String_Node_Str"",""String_Node_Str""),0.0);
}",0.7254901960784313
28406,"/** 
 * Test of distance method, of class QGram.
 */
@Test public final void testDistance(){
  System.out.println(""String_Node_Str"");
  QGram instance=new QGram(2);
  double result=instance.distance(""String_Node_Str"",""String_Node_Str"");
  assertEquals(2.0,result,0.0);
}","/** 
 * Test of distance method, of class QGram.
 */
@Test public final void testDistance(){
  System.out.println(""String_Node_Str"");
  QGram instance=new QGram(2);
  double result=instance.distance(""String_Node_Str"",""String_Node_Str"");
  assertEquals(2.0,result,0.0);
  assertEquals(0.0,instance.distance(""String_Node_Str"",""String_Node_Str""),0.0);
  assertEquals(0.0,instance.distance(""String_Node_Str"",""String_Node_Str""),0.0);
}",0.7714285714285715
28407,"public double distance(String s1,String s2){
  return 1.0 - similarity(s1,s2);
}","/** 
 * Return 1.0 - similarity.
 * @param s1
 * @param s2
 * @return
 */
public double distance(final String s1,final String s2){
  return 1.0 - similarity(s1,s2);
}",0.6504065040650406
28408,"public double similarity(String s1,String s2){
  if (s1.length() < k || s2.length() < k) {
    return 0;
  }
  KShingling ks=new KShingling(k);
  int[] profile1=ks.getArrayProfile(s1);
  int[] profile2=ks.getArrayProfile(s2);
  return dotProduct(profile1,profile2) / (norm(profile1) * norm(profile2));
}","/** 
 * Compute the cosine similarity between strings.
 * @param s1
 * @param s2
 * @return
 */
public final double similarity(final String s1,final String s2){
  if (s1.length() < k || s2.length() < k) {
    return 0;
  }
  KShingling ks=new KShingling(k);
  int[] profile1=ks.getArrayProfile(s1);
  int[] profile2=ks.getArrayProfile(s2);
  return dotProduct(profile1,profile2) / (norm(profile1) * norm(profile2));
}",0.8361111111111111
28409,"protected static double dotProduct(int[] profile1,int[] profile2){
  int length=Math.max(profile1.length,profile2.length);
  profile1=java.util.Arrays.copyOf(profile1,length);
  profile2=java.util.Arrays.copyOf(profile2,length);
  double agg=0;
  for (int i=0; i < length; i++) {
    agg+=profile1[i] * profile2[i];
  }
  return agg;
}","protected static double dotProduct(final int[] profile1,final int[] profile2){
  int length=Math.max(profile1.length,profile2.length);
  int[] copy1=java.util.Arrays.copyOf(profile1,length);
  int[] copy2=java.util.Arrays.copyOf(profile2,length);
  double agg=0;
  for (int i=0; i < length; i++) {
    agg+=1.0 * copy1[i] * copy2[i];
  }
  return agg;
}",0.8808139534883721
28410,"/** 
 * Compute the norm L2 : sqrt(Sum_i( v_i²)).
 * @param profile
 * @return L2 norm
 */
protected static double norm(int[] profile){
  double agg=0;
  for (  int v : profile) {
    agg+=v * v;
  }
  return Math.sqrt(agg);
}","/** 
 * Compute the norm L2 : sqrt(Sum_i( v_i²)).
 * @param profile
 * @return L2 norm
 */
protected static double norm(final int[] profile){
  double agg=0;
  for (  int v : profile) {
    agg+=1.0 * v * v;
  }
  return Math.sqrt(agg);
}",0.9741379310344828
28411,"private void startInternal(){
  handler.removeCallbacks(this);
  handler.postDelayed(this,10L);
  isAnimating=true;
}","private void startInternal(){
  Utils.postOnAnimation(FoldableListLayout.this,this);
  isAnimating=true;
}",0.6367713004484304
28412,"void stop(){
  handler.removeCallbacks(this);
  isAnimating=false;
}","void stop(){
  FoldableListLayout.this.removeCallbacks(this);
  isAnimating=false;
}",0.8421052631578947
28413,"@Override protected void animateFold(float to){
  super.animateFold(to);
  if (to > getFoldRotation()) {
    setState(STATE_UNFOLDING);
  }
 else {
    setState(STATE_FOLDING);
  }
}","@Override protected void animateFold(float to){
  super.animateFold(to);
  if (to <= getFoldRotation() && state != STATE_FOLDED) {
    setState(STATE_FOLDING);
  }
}",0.8933717579250721
28414,"/** 
 * Starting unfold animation for given views.
 */
public void unfold(View coverView,View detailsView){
  if (this.coverView == coverView && this.detailsView == detailsView) {
    scrollToPosition(1);
    return;
  }
  if ((this.coverView != null && this.coverView != coverView) || (this.detailsView != null && this.detailsView != detailsView)) {
    scheduledCoverView=coverView;
    scheduledDetailsView=detailsView;
    foldBack();
    return;
  }
  setCoverViewInternal(coverView);
  setDetailsViewInternal(detailsView);
  setAdapter(adapter);
  scrollToPosition(1);
}","/** 
 * Starting unfold animation for given views.
 */
public void unfold(View coverView,View detailsView){
  if (this.coverView == coverView && this.detailsView == detailsView) {
    scrollToPosition(1);
    return;
  }
  if ((this.coverView != null && this.coverView != coverView) || (this.detailsView != null && this.detailsView != detailsView)) {
    scheduledCoverView=coverView;
    scheduledDetailsView=detailsView;
    foldBack();
    return;
  }
  setCoverViewInternal(coverView);
  setDetailsViewInternal(detailsView);
  setAdapter(adapter);
  setState(STATE_UNFOLDING);
  scrollToPosition(1);
}",0.9669771380186284
28415,"/** 
 * Sets shading to use during fold rotation. Should be called before   {@link #setAdapter(android.widget.BaseAdapter)}
 */
public void setFoldShading(FoldShading shading){
  foldShading=shading;
}","/** 
 * Sets shading to use during fold rotation. Should be called before  {@link #setAdapter(android.widget.BaseAdapter)}
 */
public void setFoldShading(FoldShading shading){
  foldShading=shading;
}",0.9975062344139652
28416,"public void scrollToPosition(int index){
  index=Math.max(0,Math.min(index,getCount() - 1));
  final float from=getFoldRotation();
  final float to=index * 180f;
  final long duration=(long)Math.abs(ANIMATION_DURATION_PER_ITEM * (to - from) / 180f);
  flingAnimation.stop();
  animator.cancel();
  animator.setFloatValues(from,to);
  animator.setDuration(duration).start();
}","public void scrollToPosition(int index){
  index=Math.max(0,Math.min(index,getCount() - 1));
  animateFold(index * 180f);
}",0.4819277108433735
28417,"private boolean processTouch(MotionEvent event){
  long eventTime=event.getEventTime();
  int action=event.getActionMasked();
  if (lastTouchEventTime == eventTime && lastTouchEventAction == action) {
    return lastTouchEventResult;
  }
  lastTouchEventTime=eventTime;
  lastTouchEventAction=action;
  if (getCount() > 0) {
    MotionEvent eventCopy=MotionEvent.obtain(event);
    eventCopy.offsetLocation(0,getTranslationY());
    lastTouchEventResult=gestureDetector.onTouchEvent(eventCopy);
    eventCopy.recycle();
  }
 else {
    lastTouchEventResult=false;
  }
  if (action == MotionEvent.ACTION_UP) {
    onUp();
  }
  return lastTouchEventResult;
}","private boolean processTouch(MotionEvent event){
  long eventTime=event.getEventTime();
  int action=event.getActionMasked();
  if (lastTouchEventTime == eventTime && lastTouchEventAction == action) {
    return lastTouchEventResult;
  }
  lastTouchEventTime=eventTime;
  lastTouchEventAction=action;
  if (getCount() > 0) {
    MotionEvent eventCopy=MotionEvent.obtain(event);
    eventCopy.offsetLocation(0,getTranslationY());
    lastTouchEventResult=gestureDetector.onTouchEvent(eventCopy);
    eventCopy.recycle();
  }
 else {
    lastTouchEventResult=false;
  }
  if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
    onUpOrCancel();
  }
  return lastTouchEventResult;
}",0.9654665686994856
28418,"protected void scrollToNearestPosition(){
  float current=getFoldRotation();
  scrollToPosition((int)((current + 90f) / 180f));
}","protected void scrollToNearestPosition(){
  scrollToPosition((int)((getFoldRotation() + 90f) / 180f));
}",0.7639484978540773
28419,"private void updateAdapterData(){
  int size=getCount();
  minRotation=0f;
  maxRotation=size == 0 ? 0f : 180f * (size - 1);
  freeAllLayouts();
  recycledViews.clear();
  viewsTypesMap.clear();
  setFoldRotation(foldRotation);
}","private void updateAdapterData(){
  int count=getCount();
  minRotation=0f;
  maxRotation=count == 0 ? 0f : 180f * (count - 1);
  freeAllLayouts();
  recycledViews.clear();
  viewsTypesMap.clear();
  setFoldRotation(foldRotation);
}",0.9414316702819956
28420,"@SuppressWarnings(""String_Node_Str"") public boolean isFoldingBack(){
  return isFoldingBack;
}","@SuppressWarnings(""String_Node_Str"") public boolean isFoldingBack(){
  return state == STATE_FOLDING;
}",0.8426395939086294
28421,"public boolean isUnfolded(){
  return isUnfolded;
}","public boolean isUnfolded(){
  return state == STATE_UNFOLDED;
}",0.7478260869565218
28422,"public boolean isUnfolding(){
  return isUnfolding;
}","public boolean isUnfolding(){
  return state == STATE_UNFOLDING;
}",0.7394957983193278
28423,"@Override protected void setFoldRotation(float rotation,boolean isFromUser){
  super.setFoldRotation(rotation,isFromUser);
  if (coverView == null || detailsView == null) {
    return;
  }
  rotation=getFoldRotation();
  float stage=rotation / 180f;
  float fromX=coverViewPosition.centerX();
  float toX=detailsViewPosition.centerX();
  float fromY=coverViewPosition.top;
  float toY=detailsViewPosition.centerY();
  setTranslationX((fromX - toX) * (1f - stage));
  setTranslationY((fromY - toY) * (1f - stage));
  float lastRotation=lastFoldRotation;
  lastFoldRotation=rotation;
  if (foldingListener != null) {
    foldingListener.onFoldProgress(this,stage);
  }
  if (rotation > lastRotation && !isUnfolding) {
    isUnfolding=true;
    isFoldingBack=false;
    isUnfolded=false;
    if (foldingListener != null) {
      foldingListener.onUnfolding(this);
    }
  }
  if (rotation < lastRotation && !isFoldingBack) {
    isUnfolding=false;
    isFoldingBack=true;
    isUnfolded=false;
    if (foldingListener != null) {
      foldingListener.onFoldingBack(this);
    }
  }
  if (rotation == 180f && !isUnfolded) {
    isUnfolding=false;
    isFoldingBack=false;
    isUnfolded=true;
    if (foldingListener != null) {
      foldingListener.onUnfolded(this);
    }
  }
  if (rotation == 0f && isFoldingBack) {
    isUnfolding=false;
    isFoldingBack=false;
    isUnfolded=false;
    onFoldedBack();
    if (foldingListener != null) {
      foldingListener.onFoldedBack(this);
    }
  }
}","@Override protected void setFoldRotation(float rotation,boolean isFromUser){
  super.setFoldRotation(rotation,isFromUser);
  if (coverView == null || detailsView == null) {
    return;
  }
  rotation=getFoldRotation();
  float stage=rotation / 180f;
  float fromX=coverViewPosition.centerX();
  float toX=detailsViewPosition.centerX();
  float fromY=coverViewPosition.top;
  float toY=detailsViewPosition.centerY();
  setTranslationX((fromX - toX) * (1f - stage));
  setTranslationY((fromY - toY) * (1f - stage));
  final float lastRotation=lastFoldRotation;
  lastFoldRotation=rotation;
  if (foldingListener != null) {
    foldingListener.onFoldProgress(this,stage);
  }
  if (rotation > lastRotation) {
    setState(STATE_UNFOLDING);
  }
  if (rotation < lastRotation) {
    setState(STATE_FOLDING);
  }
  if (rotation == 180f) {
    setState(STATE_UNFOLDED);
  }
  if (rotation == 0f && state == STATE_FOLDING) {
    setState(STATE_FOLDED);
  }
}",0.6148178469095374
28424,"/** 
 * Starting unfold animation for given views.
 */
public void unfold(View coverView,View detailsView){
  if (this.coverView == coverView && this.detailsView == detailsView) {
    return;
  }
  if ((this.coverView != null && this.coverView != coverView) || (this.detailsView != null && this.detailsView != detailsView)) {
    scheduledDetailsView=detailsView;
    scheduledCoverView=coverView;
    foldBack();
    return;
  }
  setCoverViewInternal(coverView);
  setDetailsViewInternal(detailsView);
  setAdapter(adapter);
  scrollToPosition(1);
}","/** 
 * Starting unfold animation for given views.
 */
public void unfold(View coverView,View detailsView){
  if (this.coverView == coverView && this.detailsView == detailsView) {
    scrollToPosition(1);
    return;
  }
  if ((this.coverView != null && this.coverView != coverView) || (this.detailsView != null && this.detailsView != detailsView)) {
    scheduledCoverView=coverView;
    scheduledDetailsView=detailsView;
    foldBack();
    return;
  }
  setCoverViewInternal(coverView);
  setDetailsViewInternal(detailsView);
  setAdapter(adapter);
  scrollToPosition(1);
}",0.6708074534161491
28425,"private void setDrawToCache(boolean drawToCache){
  if (isDrawToCache != drawToCache) {
    isDrawToCache=drawToCache;
    invalidate();
  }
}","void setDrawToCache(boolean drawToCache){
  if (isDrawToCache != drawToCache) {
    isDrawToCache=drawToCache;
    invalidate();
  }
}",0.9710144927536232
28426,"/** 
 * Translation preserving middle line splitting.
 */
public void setRollingDistance(float distance){
  topPart.applyRollingDistance(distance,scale * scaleFactor);
  bottomPart.applyRollingDistance(distance,scale * scaleFactor);
}","/** 
 * Translation preserving middle line splitting.
 */
public void setRollingDistance(float distance){
  final float scaleY=scale * scaleFactor * scaleFactorY;
  topPart.applyRollingDistance(distance,scaleY);
  bottomPart.applyRollingDistance(distance,scaleY);
}",0.8256513026052105
28427,"private void setCacheCanvas(Canvas cacheCanvas){
  this.cacheCanvas=cacheCanvas;
}","void setCacheCanvas(Canvas cacheCanvas){
  this.cacheCanvas=cacheCanvas;
}",0.9487179487179488
28428,"private BaseLayout(FoldableItemLayout layout){
  super(layout.getContext());
  final int matchParent=ViewGroup.LayoutParams.MATCH_PARENT;
  LayoutParams params=new LayoutParams(matchParent,matchParent);
  layout.addView(this,params);
  setWillNotDraw(false);
}","BaseLayout(FoldableItemLayout layout){
  super(layout.getContext());
  final int matchParent=ViewGroup.LayoutParams.MATCH_PARENT;
  LayoutParams params=new LayoutParams(matchParent,matchParent);
  layout.addView(this,params);
  setWillNotDraw(false);
}",0.984375
28429,"public void setScale(float scale){
  this.scale=scale;
  topPart.applyScale(scale * scaleFactor);
  bottomPart.applyScale(scale * scaleFactor);
}","public void setScale(float scale){
  this.scale=scale;
  final float scaleX=scale * scaleFactor;
  final float scaleY=scale * scaleFactor * scaleFactorY;
  baseLayout.setScaleY(scaleFactorY);
  topPart.setScaleX(scaleX);
  topPart.setScaleY(scaleY);
  bottomPart.setScaleX(scaleX);
  bottomPart.setScaleY(scaleY);
}",0.3739130434782609
28430,"void applyRollingDistance(float distance,float scale){
  setTranslationY((int)(distance * scale + 0.5f));
  final int h=getHeight() / 2;
  final float topClipping=h == 0 ? 0.5f : 0.5f * (h - distance) / h;
  clippingFactor=gravity == Gravity.TOP ? topClipping : 1f - topClipping;
  calculateBitmapBounds();
}","void applyRollingDistance(float distance,float scaleY){
  setTranslationY((int)(distance * scaleY + 0.5f));
  final int h=getHeight() / 2;
  final float topClipping=h == 0 ? 0.5f : 0.5f * (h - distance) / h;
  clippingFactor=gravity == Gravity.TOP ? topClipping : 1f - topClipping;
  calculateBitmapBounds();
}",0.9967637540453076
28431,"/** 
 * Fold rotation value in degrees.
 */
public void setFoldRotation(float rotation){
  foldRotation=rotation;
  topPart.applyFoldRotation(rotation);
  bottomPart.applyFoldRotation(rotation);
  setInTransformation(rotation != 0f);
  if (isAutoScaleEnabled) {
    scaleFactor=1f;
    if (width > 0) {
      double sin=Math.abs(Math.sin(Math.toRadians(rotation)));
      float dw=(float)(height * sin) * CAMERA_DISTANCE_MAGIC_FACTOR;
      scaleFactor=width / (width + dw);
    }
    setScale(scale);
  }
}","/** 
 * Fold rotation value in degrees.
 */
public void setFoldRotation(float rotation){
  foldRotation=rotation;
  topPart.applyFoldRotation(rotation);
  bottomPart.applyFoldRotation(rotation);
  setInTransformation(rotation != 0f);
  scaleFactor=1f;
  if (isAutoScaleEnabled && width > 0) {
    double sin=Math.abs(Math.sin(Math.toRadians(rotation)));
    float dw=(float)(height * sin) * CAMERA_DISTANCE_MAGIC_FACTOR;
    scaleFactor=width / (width + dw);
    setScale(scale);
  }
}",0.8770161290322581
28432,"public synchronized void update(Markup markup){
  if (markup == null)   return;
  if (markup instanceof MarkerItemMarkup) {
    mapView.items().removeItem(mapView.items().getByUid(markup.getId()));
    mapView.items().addItem(((MarkerItemMarkup)markup).getMarkerItem(context));
  }
 else   if (markup instanceof DrawableMarkup) {
    updateDrawableLayer();
    mapView.drawables().update();
  }
  redraw();
}","public synchronized void update(Markup markup){
  if (markup == null)   return;
  if (markup instanceof MarkerItemMarkup) {
    MarkerItem item=mapView.items().getByUid(markup.getId());
    if (item != null) {
      mapView.items().removeItem(item);
    }
    item=((MarkerItemMarkup)markup).getMarkerItem(context);
    if (item != null) {
      mapView.items().addItem(item);
    }
  }
 else   if (markup instanceof DrawableMarkup) {
    updateDrawableLayer();
    mapView.drawables().update();
  }
  redraw();
}",0.7969598262757872
28433,"public synchronized <T extends MarkerItemMarkup>T add(T markup){
  if (markup == null)   return null;
  markupMap.put(markup.getId(),markup);
  mapView.items().addItem(markup.getMarkerItem(context));
  redraw();
  return markup;
}","public synchronized <T extends MarkerItemMarkup>T add(T markup){
  if (markup == null)   return null;
  markupMap.put(markup.getId(),markup);
  MarkerItem item=markup.getMarkerItem(context);
  mapView.items().addItem(item);
  redraw();
  return markup;
}",0.8099173553719008
28434,"public void startActivitiesAsUser(Intent[] intents,Bundle options,UserHandle userHandle){
  safeInvoke(""String_Node_Str"",new Class[]{Intent[].class,Bundle.class,UserHandle.class},intents,options,userHandle);
}","@TargetApi(17) public void startActivitiesAsUser(Intent[] intents,Bundle options,UserHandle userHandle){
  safeInvoke(""String_Node_Str"",new Class[]{Intent[].class,Bundle.class,UserHandle.class},intents,options,userHandle);
}",0.9653579676674364
28435,"public void startActivityAsUser(Intent intent,Bundle options,UserHandle userId){
  safeInvoke(""String_Node_Str"",Intent.class,Bundle.class,UserHandle.class,intent,options,userId);
}","@TargetApi(17) public void startActivityAsUser(Intent intent,Bundle options,UserHandle userId){
  safeInvoke(""String_Node_Str"",Intent.class,Bundle.class,UserHandle.class,intent,options,userId);
}",0.96
28436,"public void startActivitiesAsUser(Intent[] intents,Bundle options,UserHandle userHandle){
  safeInvoke(""String_Node_Str"",new Class[]{Intent[].class,Bundle.class,UserHandle.class},intents,options,userHandle);
}","@TargetApi(17) public void startActivitiesAsUser(Intent[] intents,Bundle options,UserHandle userHandle){
  safeInvoke(""String_Node_Str"",new Class[]{Intent[].class,Bundle.class,UserHandle.class},intents,options,userHandle);
}",0.9653579676674364
28437,"public void startActivityAsUser(Intent intent,Bundle options,UserHandle userId){
  safeInvoke(""String_Node_Str"",Intent.class,Bundle.class,UserHandle.class,intent,options,userId);
}","@TargetApi(17) public void startActivityAsUser(Intent intent,Bundle options,UserHandle userId){
  safeInvoke(""String_Node_Str"",Intent.class,Bundle.class,UserHandle.class,intent,options,userId);
}",0.96
28438,"@Override public void requestLocationSettingsDialog(LocationSettingsRequest settingsRequest,ISettingsCallbacks callback,String packageName) throws RemoteException {
  Log.d(TAG,""String_Node_Str"" + settingsRequest);
  callback.onLocationSettingsResult(new LocationSettingsResult(Status.CANCELED));
}","@Override public void requestLocationSettingsDialog(LocationSettingsRequest settingsRequest,ISettingsCallbacks callback,String packageName) throws RemoteException {
  Log.d(TAG,""String_Node_Str"" + settingsRequest);
  callback.onLocationSettingsResult(new LocationSettingsResult(new LocationSettingsStates(true,true,false,true,true,false),Status.CANCELED));
}",0.9085365853658536
28439,"@Override public ReportingState getReportingState(Account account) throws RemoteException {
  return new ReportingState();
}","@Override public ReportingState getReportingState(Account account) throws RemoteException {
  Log.d(TAG,""String_Node_Str"");
  return new ReportingState();
}",0.8857142857142857
28440,"@Override public UploadRequestResult requestUpload(UploadRequest request) throws RemoteException {
  return new UploadRequestResult();
}","@Override public UploadRequestResult requestUpload(UploadRequest request) throws RemoteException {
  Log.d(TAG,""String_Node_Str"");
  return new UploadRequestResult();
}",0.8947368421052632
28441,"@Override public int reportDeviceAtPlace(Account account,PlaceReport report) throws RemoteException {
  return 0;
}","@Override public int reportDeviceAtPlace(Account account,PlaceReport report) throws RemoteException {
  Log.d(TAG,""String_Node_Str"");
  return 0;
}",0.8778625954198473
28442,"@Override public int tryOptIn(Account account) throws RemoteException {
  return 0;
}","@Override public int tryOptIn(Account account) throws RemoteException {
  Log.d(TAG,""String_Node_Str"");
  return 0;
}",0.8415841584158416
28443,"@Override public int cancelUploadRequest(long l) throws RemoteException {
  return 0;
}","@Override public int cancelUploadRequest(long l) throws RemoteException {
  Log.d(TAG,""String_Node_Str"");
  return 0;
}",0.8446601941747572
28444,"/** 
 * 生成sign HMAC-SHA256 或 MD5 签名
 * @param map map
 * @param sign_type HMAC-SHA256 或 MD5
 * @param paternerKey paternerKey
 * @return sign
 */
public static String generateSign(Map<String,String> map,String sign_type,String paternerKey){
  Map<String,String> tmap=MapUtil.order(map);
  if (tmap.containsKey(""String_Node_Str"")) {
    tmap.remove(""String_Node_Str"");
  }
  String str=MapUtil.mapJoin(tmap,false,false);
  if (sign_type == null) {
    sign_type=tmap.get(""String_Node_Str"");
  }
  if (""String_Node_Str"".equalsIgnoreCase(sign_type)) {
    try {
      Mac sha256_HMAC=Mac.getInstance(""String_Node_Str"");
      SecretKeySpec secret_key=new SecretKeySpec(paternerKey.getBytes(""String_Node_Str""),""String_Node_Str"");
      sha256_HMAC.init(secret_key);
      return Hex.encodeHexString(sha256_HMAC.doFinal((str + ""String_Node_Str"" + paternerKey).getBytes(""String_Node_Str""))).toUpperCase();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else {
    return DigestUtils.md5Hex(str + ""String_Node_Str"" + paternerKey).toUpperCase();
  }
}","/** 
 * 生成sign HMAC-SHA256 或 MD5 签名
 * @param map map
 * @param sign_type HMAC-SHA256 或 MD5
 * @param paternerKey paternerKey
 * @return sign
 */
public static String generateSign(Map<String,String> map,String sign_type,String paternerKey){
  Map<String,String> tmap=MapUtil.order(map);
  if (tmap.containsKey(""String_Node_Str"")) {
    tmap.remove(""String_Node_Str"");
  }
  String str=MapUtil.mapJoin(tmap,false,false);
  if (sign_type == null) {
    sign_type=tmap.get(""String_Node_Str"");
  }
  if (tmap.containsKey(""String_Node_Str"")) {
    tmap.remove(""String_Node_Str"");
  }
  if (""String_Node_Str"".equalsIgnoreCase(sign_type)) {
    try {
      Mac sha256_HMAC=Mac.getInstance(""String_Node_Str"");
      SecretKeySpec secret_key=new SecretKeySpec(paternerKey.getBytes(""String_Node_Str""),""String_Node_Str"");
      sha256_HMAC.init(secret_key);
      return Hex.encodeHexString(sha256_HMAC.doFinal((str + ""String_Node_Str"" + paternerKey).getBytes(""String_Node_Str""))).toUpperCase();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
 else {
    return DigestUtils.md5Hex(str + ""String_Node_Str"" + paternerKey).toUpperCase();
  }
}",0.9622725255215268
28445,"private static Bitmap buildBitmap(Bitmap bitmap,boolean canReuseInBitmap){
  Bitmap rBitmap;
  if (canReuseInBitmap) {
    rBitmap=bitmap;
  }
 else {
    rBitmap=bitmap.copy(bitmap.getConfig(),true);
  }
  return (rBitmap);
}","private static Bitmap buildBitmap(Bitmap original,boolean canReuseInBitmap){
  if (original == null)   throw new NullPointerException(""String_Node_Str"");
  Bitmap.Config config=original.getConfig();
  if (config != Bitmap.Config.ARGB_8888 && config != Bitmap.Config.RGB_565) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Bitmap rBitmap;
  if (canReuseInBitmap) {
    rBitmap=original;
  }
 else {
    rBitmap=original.copy(config,true);
  }
  return (rBitmap);
}",0.470756062767475
28446,"/** 
 * StackBlur By Java Bitmap
 * @param original         Original Image
 * @param radius           Blur radius
 * @param canReuseInBitmap Can reuse In original Bitmap
 * @return Image Bitmap
 */
public static Bitmap blur(Bitmap original,int radius,boolean canReuseInBitmap){
  if (radius < 1) {
    return (null);
  }
  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);
  if (radius == 1) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  int[] pix=new int[w * h];
  bitmap.getPixels(pix,0,w,0,0,w,h);
  int wm=w - 1;
  int hm=h - 1;
  int wh=w * h;
  int div=radius + radius + 1;
  int r[]=new int[wh];
  int g[]=new int[wh];
  int b[]=new int[wh];
  int rSum, gSum, bSum, x, y, i, p, yp, yi, yw;
  int vMin[]=new int[Math.max(w,h)];
  int divSum=(div + 1) >> 1;
  divSum*=divSum;
  int dv[]=new int[256 * divSum];
  for (i=0; i < 256 * divSum; i++) {
    dv[i]=(i / divSum);
  }
  yw=yi=0;
  int[][] stack=new int[div][3];
  int stackPointer;
  int stackStart;
  int[] sir;
  int rbs;
  int r1=radius + 1;
  int routSum, goutSum, boutSum;
  int rinSum, ginSum, binSum;
  for (y=0; y < h; y++) {
    rinSum=ginSum=binSum=routSum=goutSum=boutSum=rSum=gSum=bSum=0;
    for (i=-radius; i <= radius; i++) {
      p=pix[yi + Math.min(wm,Math.max(i,0))];
      sir=stack[i + radius];
      sir[0]=(p & 0xff0000) >> 16;
      sir[1]=(p & 0x00ff00) >> 8;
      sir[2]=(p & 0x0000ff);
      rbs=r1 - Math.abs(i);
      rSum+=sir[0] * rbs;
      gSum+=sir[1] * rbs;
      bSum+=sir[2] * rbs;
      if (i > 0) {
        rinSum+=sir[0];
        ginSum+=sir[1];
        binSum+=sir[2];
      }
 else {
        routSum+=sir[0];
        goutSum+=sir[1];
        boutSum+=sir[2];
      }
    }
    stackPointer=radius;
    for (x=0; x < w; x++) {
      r[yi]=dv[rSum];
      g[yi]=dv[gSum];
      b[yi]=dv[bSum];
      rSum-=routSum;
      gSum-=goutSum;
      bSum-=boutSum;
      stackStart=stackPointer - radius + div;
      sir=stack[stackStart % div];
      routSum-=sir[0];
      goutSum-=sir[1];
      boutSum-=sir[2];
      if (y == 0) {
        vMin[x]=Math.min(x + radius + 1,wm);
      }
      p=pix[yw + vMin[x]];
      sir[0]=(p & 0xff0000) >> 16;
      sir[1]=(p & 0x00ff00) >> 8;
      sir[2]=(p & 0x0000ff);
      rinSum+=sir[0];
      ginSum+=sir[1];
      binSum+=sir[2];
      rSum+=rinSum;
      gSum+=ginSum;
      bSum+=binSum;
      stackPointer=(stackPointer + 1) % div;
      sir=stack[(stackPointer) % div];
      routSum+=sir[0];
      goutSum+=sir[1];
      boutSum+=sir[2];
      rinSum-=sir[0];
      ginSum-=sir[1];
      binSum-=sir[2];
      yi++;
    }
    yw+=w;
  }
  for (x=0; x < w; x++) {
    rinSum=ginSum=binSum=routSum=goutSum=boutSum=rSum=gSum=bSum=0;
    yp=-radius * w;
    for (i=-radius; i <= radius; i++) {
      yi=Math.max(0,yp) + x;
      sir=stack[i + radius];
      sir[0]=r[yi];
      sir[1]=g[yi];
      sir[2]=b[yi];
      rbs=r1 - Math.abs(i);
      rSum+=r[yi] * rbs;
      gSum+=g[yi] * rbs;
      bSum+=b[yi] * rbs;
      if (i > 0) {
        rinSum+=sir[0];
        ginSum+=sir[1];
        binSum+=sir[2];
      }
 else {
        routSum+=sir[0];
        goutSum+=sir[1];
        boutSum+=sir[2];
      }
      if (i < hm) {
        yp+=w;
      }
    }
    yi=x;
    stackPointer=radius;
    for (y=0; y < h; y++) {
      pix[yi]=(0xff000000 & pix[yi]) | (dv[rSum] << 16) | (dv[gSum] << 8)| dv[bSum];
      rSum-=routSum;
      gSum-=goutSum;
      bSum-=boutSum;
      stackStart=stackPointer - radius + div;
      sir=stack[stackStart % div];
      routSum-=sir[0];
      goutSum-=sir[1];
      boutSum-=sir[2];
      if (x == 0) {
        vMin[y]=Math.min(y + r1,hm) * w;
      }
      p=x + vMin[y];
      sir[0]=r[p];
      sir[1]=g[p];
      sir[2]=b[p];
      rinSum+=sir[0];
      ginSum+=sir[1];
      binSum+=sir[2];
      rSum+=rinSum;
      gSum+=ginSum;
      bSum+=binSum;
      stackPointer=(stackPointer + 1) % div;
      sir=stack[stackPointer];
      routSum+=sir[0];
      goutSum+=sir[1];
      boutSum+=sir[2];
      rinSum-=sir[0];
      ginSum-=sir[1];
      binSum-=sir[2];
      yi+=w;
    }
  }
  bitmap.setPixels(pix,0,w,0,0,w,h);
  return (bitmap);
}","/** 
 * StackBlur By Java Bitmap
 * @param original         Original Image
 * @param radius           Blur radius
 * @param canReuseInBitmap Can reuse In original Bitmap
 * @return Image Bitmap
 */
public static Bitmap blur(Bitmap original,int radius,boolean canReuseInBitmap){
  if (radius < 1) {
    return (null);
  }
  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);
  if (radius == 1) {
    return bitmap;
  }
  int w=bitmap.getWidth();
  int h=bitmap.getHeight();
  int[] pix=new int[w * h];
  bitmap.getPixels(pix,0,w,0,0,w,h);
  int wm=w - 1;
  int hm=h - 1;
  int wh=w * h;
  int div=radius + radius + 1;
  short r[]=new short[wh];
  short g[]=new short[wh];
  short b[]=new short[wh];
  int rSum, gSum, bSum, x, y, i, p, yp, yi, yw;
  int vMin[]=new int[Math.max(w,h)];
  int divSum=(div + 1) >> 1;
  divSum*=divSum;
  short dv[]=new short[256 * divSum];
  for (i=0; i < 256 * divSum; i++) {
    dv[i]=(short)(i / divSum);
  }
  yw=yi=0;
  int[][] stack=new int[div][3];
  int stackPointer;
  int stackStart;
  int[] sir;
  int rbs;
  int r1=radius + 1;
  int routSum, goutSum, boutSum;
  int rinSum, ginSum, binSum;
  for (y=0; y < h; y++) {
    rinSum=ginSum=binSum=routSum=goutSum=boutSum=rSum=gSum=bSum=0;
    for (i=-radius; i <= radius; i++) {
      p=pix[yi + Math.min(wm,Math.max(i,0))];
      sir=stack[i + radius];
      sir[0]=(p & 0xff0000) >> 16;
      sir[1]=(p & 0x00ff00) >> 8;
      sir[2]=(p & 0x0000ff);
      rbs=r1 - Math.abs(i);
      rSum+=sir[0] * rbs;
      gSum+=sir[1] * rbs;
      bSum+=sir[2] * rbs;
      if (i > 0) {
        rinSum+=sir[0];
        ginSum+=sir[1];
        binSum+=sir[2];
      }
 else {
        routSum+=sir[0];
        goutSum+=sir[1];
        boutSum+=sir[2];
      }
    }
    stackPointer=radius;
    for (x=0; x < w; x++) {
      r[yi]=dv[rSum];
      g[yi]=dv[gSum];
      b[yi]=dv[bSum];
      rSum-=routSum;
      gSum-=goutSum;
      bSum-=boutSum;
      stackStart=stackPointer - radius + div;
      sir=stack[stackStart % div];
      routSum-=sir[0];
      goutSum-=sir[1];
      boutSum-=sir[2];
      if (y == 0) {
        vMin[x]=Math.min(x + radius + 1,wm);
      }
      p=pix[yw + vMin[x]];
      sir[0]=(p & 0xff0000) >> 16;
      sir[1]=(p & 0x00ff00) >> 8;
      sir[2]=(p & 0x0000ff);
      rinSum+=sir[0];
      ginSum+=sir[1];
      binSum+=sir[2];
      rSum+=rinSum;
      gSum+=ginSum;
      bSum+=binSum;
      stackPointer=(stackPointer + 1) % div;
      sir=stack[(stackPointer) % div];
      routSum+=sir[0];
      goutSum+=sir[1];
      boutSum+=sir[2];
      rinSum-=sir[0];
      ginSum-=sir[1];
      binSum-=sir[2];
      yi++;
    }
    yw+=w;
  }
  for (x=0; x < w; x++) {
    rinSum=ginSum=binSum=routSum=goutSum=boutSum=rSum=gSum=bSum=0;
    yp=-radius * w;
    for (i=-radius; i <= radius; i++) {
      yi=Math.max(0,yp) + x;
      sir=stack[i + radius];
      sir[0]=r[yi];
      sir[1]=g[yi];
      sir[2]=b[yi];
      rbs=r1 - Math.abs(i);
      rSum+=r[yi] * rbs;
      gSum+=g[yi] * rbs;
      bSum+=b[yi] * rbs;
      if (i > 0) {
        rinSum+=sir[0];
        ginSum+=sir[1];
        binSum+=sir[2];
      }
 else {
        routSum+=sir[0];
        goutSum+=sir[1];
        boutSum+=sir[2];
      }
      if (i < hm) {
        yp+=w;
      }
    }
    yi=x;
    stackPointer=radius;
    for (y=0; y < h; y++) {
      pix[yi]=(0xff000000 & pix[yi]) | (dv[rSum] << 16) | (dv[gSum] << 8)| dv[bSum];
      rSum-=routSum;
      gSum-=goutSum;
      bSum-=boutSum;
      stackStart=stackPointer - radius + div;
      sir=stack[stackStart % div];
      routSum-=sir[0];
      goutSum-=sir[1];
      boutSum-=sir[2];
      if (x == 0) {
        vMin[y]=Math.min(y + r1,hm) * w;
      }
      p=x + vMin[y];
      sir[0]=r[p];
      sir[1]=g[p];
      sir[2]=b[p];
      rinSum+=sir[0];
      ginSum+=sir[1];
      binSum+=sir[2];
      rSum+=rinSum;
      gSum+=ginSum;
      bSum+=binSum;
      stackPointer=(stackPointer + 1) % div;
      sir=stack[stackPointer];
      routSum+=sir[0];
      goutSum+=sir[1];
      boutSum+=sir[2];
      rinSum-=sir[0];
      ginSum-=sir[1];
      binSum-=sir[2];
      yi+=w;
    }
  }
  bitmap.setPixels(pix,0,w,0,0,w,h);
  return (bitmap);
}",0.9934139623997126
28447,"public AvroFileWriter(LogFilePath logFilePath,CompressionCodec codec) throws IOException {
  file=new File(logFilePath.getLogFilePath());
  LOG.debug(""String_Node_Str"",logFilePath.getLogFilePath());
  CompressionCodecName codecName=CompressionCodecName.fromCompressionCodec(codec != null ? codec.getClass() : null);
  topic=logFilePath.getTopic();
  Schema schema=schemaRegistryClient.getSchema(topic);
  SpecificDatumWriter specificDatumWriter=new SpecificDatumWriter(schema);
  writer=new DataFileWriter(specificDatumWriter);
  writer.setCodec(CodecFactory.fromString(codecName.name()));
  writer.create(schema,file);
}","public AvroFileWriter(LogFilePath logFilePath,CompressionCodec codec) throws IOException {
  file=new File(logFilePath.getLogFilePath());
  file.getParentFile().mkdirs();
  LOG.debug(""String_Node_Str"",logFilePath.getLogFilePath());
  topic=logFilePath.getTopic();
  Schema schema=schemaRegistryClient.getSchema(topic);
  SpecificDatumWriter specificDatumWriter=new SpecificDatumWriter(schema);
  writer=new DataFileWriter(specificDatumWriter);
  writer.setCodec(getCodecFactory(codec));
  writer.create(schema,file);
}",0.835820895522388
28448,"public AvroFileReader(LogFilePath logFilePath,CompressionCodec codec) throws IOException {
  String topic=logFilePath.getTopic();
  Schema schema=schemaRegistryClient.getSchema(topic);
  DatumReader datumReader=new SpecificDatumReader(schema);
  try {
    reader=new DataFileReader(new File(logFilePath.getLogFilePath()),datumReader);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  writer=new SpecificDatumWriter(schema);
  offset=logFilePath.getOffset();
}","public AvroFileReader(LogFilePath logFilePath,CompressionCodec codec) throws IOException {
  file=new File(logFilePath.getLogFilePath() + ""String_Node_Str"");
  file.getParentFile().mkdirs();
  String topic=logFilePath.getTopic();
  Schema schema=schemaRegistryClient.getSchema(topic);
  DatumReader datumReader=new SpecificDatumReader(schema);
  try {
    reader=new DataFileReader(file,datumReader);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  writer=new SpecificDatumWriter(schema);
  offset=logFilePath.getOffset();
}",0.8621359223300971
28449,"public SecorSchemaRegistryClient(SecorConfig config){
  try {
    Properties props=new Properties();
    props.put(""String_Node_Str"",config.getSchemaRegistryUrl());
    CachedSchemaRegistryClient schemaRegistryClient=new CachedSchemaRegistryClient(config.getSchemaRegistryUrl(),30);
    decoder=new KafkaAvroDecoder(schemaRegistryClient);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","public SecorSchemaRegistryClient(SecorConfig config){
  try {
    Properties props=new Properties();
    props.put(""String_Node_Str"",config.getSchemaRegistryUrl());
    schemaRegistryClient=new CachedSchemaRegistryClient(config.getSchemaRegistryUrl(),30);
    init(config);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.8942891859052248
28450,"public GenericRecord decodeMessage(String topic,byte[] message){
  GenericRecord record=(GenericRecord)decoder.fromBytes(message);
  Schema schema=record.getSchema();
  schemas.putIfAbsent(topic,schema);
  return record;
}","public GenericRecord decodeMessage(String topic,byte[] message){
  GenericRecord record=(GenericRecord)decoder.fromBytes(message);
  Schema schema=record.getSchema();
  schemas.put(topic,schema);
  return record;
}",0.981651376146789
28451,"public SecorSchemaRegistryClient(SecorConfig config){
  try {
    LOG.info(""String_Node_Str"",config.getSchemaRegistryUrl());
    Properties props=new Properties();
    props.put(""String_Node_Str"",config.getSchemaRegistryUrl());
    CachedSchemaRegistryClient schemaRegistryClient=new CachedSchemaRegistryClient(config.getSchemaRegistryUrl(),30);
    decoder=new KafkaAvroDecoder(schemaRegistryClient);
    schemas=new ConcurrentHashMap<>();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","public SecorSchemaRegistryClient(SecorConfig config){
  try {
    Properties props=new Properties();
    props.put(""String_Node_Str"",config.getSchemaRegistryUrl());
    CachedSchemaRegistryClient schemaRegistryClient=new CachedSchemaRegistryClient(config.getSchemaRegistryUrl(),30);
    decoder=new KafkaAvroDecoder(schemaRegistryClient);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.2242424242424242
28452,"/** 
 * Creates new instance of   {@link ProtobufUtil}
 * @param config Secor configuration instance
 * @throws RuntimeException when configuration option <code>secor.protobuf.message.class</code> is invalid.
 */
@SuppressWarnings(""String_Node_Str"") public ProtobufUtil(SecorConfig config){
  Map<String,String> messageClassPerTopic=config.getProtobufMessageClassPerTopic();
  messageFormatByTopic=config.getMessageFormatPerTopic();
  for (  Entry<String,String> entry : messageClassPerTopic.entrySet()) {
    String topic=entry.getKey();
    String format=entry.getValue();
    allTopics=""String_Node_Str"".equals(topic);
    if (allTopics) {
      messageFormatForAll=format;
      LOG.info(""String_Node_Str"",format);
      break;
    }
 else {
      messageFormatByTopic.putIfAbsent(topic,format);
      LOG.info(""String_Node_Str"",format,topic);
    }
  }
  for (  Entry<String,String> entry : messageClassPerTopic.entrySet()) {
    try {
      String topic=entry.getKey();
      Class<? extends Message> messageClass=(Class<? extends Message>)Class.forName(entry.getValue());
      Method messageParseMethod=messageClass.getDeclaredMethod(""String_Node_Str"",new Class<?>[]{byte[].class});
      allTopics=""String_Node_Str"".equals(topic);
      if (allTopics) {
        messageClassForAll=messageClass;
        messageParseMethodForAll=messageParseMethod;
        LOG.info(""String_Node_Str"",messageClass.getName());
      }
 else {
        messageClassByTopic.put(topic,messageClass);
        messageParseMethodByTopic.put(topic,messageParseMethod);
        LOG.info(""String_Node_Str"",messageClass.getName(),topic);
      }
    }
 catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * Creates new instance of   {@link ProtobufUtil}
 * @param config Secor configuration instance
 * @throws RuntimeException when configuration option <code>secor.protobuf.message.class</code> is invalid.
 */
@SuppressWarnings(""String_Node_Str"") public ProtobufUtil(SecorConfig config){
  Map<String,String> messageClassPerTopic=config.getProtobufMessageClassPerTopic();
  messageFormatByTopic=config.getMessageFormatPerTopic();
  for (  Entry<String,String> entry : messageFormatByTopic.entrySet()) {
    String topic=entry.getKey();
    String format=entry.getValue();
    allTopics=""String_Node_Str"".equals(topic);
    if (allTopics) {
      messageFormatForAll=format;
      LOG.info(""String_Node_Str"",format);
      break;
    }
 else {
      messageFormatByTopic.putIfAbsent(topic,format);
      LOG.info(""String_Node_Str"",format,topic);
    }
  }
  for (  Entry<String,String> entry : messageClassPerTopic.entrySet()) {
    try {
      String topic=entry.getKey();
      Class<? extends Message> messageClass=(Class<? extends Message>)Class.forName(entry.getValue());
      Method messageParseMethod=messageClass.getDeclaredMethod(""String_Node_Str"",new Class<?>[]{byte[].class});
      allTopics=""String_Node_Str"".equals(topic);
      if (allTopics) {
        messageClassForAll=messageClass;
        messageParseMethodForAll=messageParseMethod;
        LOG.info(""String_Node_Str"",messageClass.getName());
      }
 else {
        messageClassByTopic.put(topic,messageClass);
        messageParseMethodByTopic.put(topic,messageParseMethod);
        LOG.info(""String_Node_Str"",messageClass.getName(),topic);
      }
    }
 catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9957446808510638
28453,"public Message decodeJsonMessage(String topic,byte[] payload){
  try {
    Method builderGetter=allTopics ? messageClassForAll.getDeclaredMethod(""String_Node_Str"") : messageClassByTopic.get(topic).getDeclaredMethod(""String_Node_Str"");
    com.google.protobuf.GeneratedMessageV3.Builder builder=(com.google.protobuf.GeneratedMessageV3.Builder)builderGetter.invoke(null);
    jsonParser.merge(new InputStreamReader(new ByteArrayInputStream(payload)),builder);
    return builder.build();
  }
 catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  InvalidProtocolBufferException e) {
    LOG.info(""String_Node_Str"",new String(payload,Charsets.UTF_8));
    return null;
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public Message decodeJsonMessage(String topic,byte[] payload) throws InvalidProtocolBufferException {
  try {
    Method builderGetter=allTopics ? messageClassForAll.getDeclaredMethod(""String_Node_Str"") : messageClassByTopic.get(topic).getDeclaredMethod(""String_Node_Str"");
    com.google.protobuf.GeneratedMessageV3.Builder builder=(com.google.protobuf.GeneratedMessageV3.Builder)builderGetter.invoke(null);
    jsonParser.merge(new InputStreamReader(new ByteArrayInputStream(payload)),builder);
    return builder.build();
  }
 catch (  NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  InvalidProtocolBufferException e) {
    LOG.info(""String_Node_Str"",new String(payload,Charsets.UTF_8));
    throw e;
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9671848013816926
28454,"/** 
 * Decodes protobuf message
 * @param topic Kafka topic name
 * @param payload Byte array containing encoded protobuf message
 * @return protobuf message instance
 * @throws RuntimeException when there's problem decoding protobuf message
 */
public Message decodeMessage(String topic,byte[] payload){
  try {
    if (shouldDecodeFromJsonMessage(topic)) {
      return decodeJsonMessage(topic,payload);
    }
    Method parseMethod=allTopics ? messageParseMethodForAll : messageParseMethodByTopic.get(topic);
    return (Message)parseMethod.invoke(null,payload);
  }
 catch (  IllegalArgumentException e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Decodes protobuf message
 * @param topic Kafka topic name
 * @param payload Byte array containing encoded protobuf message
 * @return protobuf message instance
 * @throws RuntimeException when there's problem decoding protobuf message
 */
public Message decodeMessage(String topic,byte[] payload){
  try {
    if (shouldDecodeFromJsonMessage(topic)) {
      try {
        return decodeJsonMessage(topic,payload);
      }
 catch (      InvalidProtocolBufferException e) {
        LOG.info(""String_Node_Str"");
      }
    }
    Method parseMethod=allTopics ? messageParseMethodForAll : messageParseMethodByTopic.get(topic);
    return (Message)parseMethod.invoke(null,payload);
  }
 catch (  IllegalArgumentException e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9389671361502347
28455,"private boolean shouldDecodeFromJsonMessage(String topic){
}","private boolean shouldDecodeFromJsonMessage(String topic){
  if (StringUtils.isNotEmpty(messageFormatForAll) && StringUtils.equalsIgnoreCase(messageFormatForAll,JSON)) {
    return true;
  }
 else   if (StringUtils.equalsIgnoreCase(messageFormatByTopic.getOrDefault(topic,""String_Node_Str""),JSON)) {
    return true;
  }
  return false;
}",0.3015075376884422
28456,"@Override public TypeDescription getSchema(String topic,LogFilePath logFilePath){
  return topicToSchemaMap.getOrDefault(topic,schemaForAlltopic);
}","@Override public TypeDescription getSchema(String topic,LogFilePath logFilePath){
  TypeDescription topicSpecificTD=topicToSchemaMap.get(topic);
  if (null != topicSpecificTD) {
    return topicSpecificTD;
  }
  return schemaForAlltopic;
}",0.5891472868217055
28457,"public Message(String topic,int kafkaPartition,long offset,byte[] payload){
  mTopic=topic;
  mKafkaPartition=kafkaPartition;
  mOffset=offset;
  mPayload=payload;
}","public Message(String topic,int kafkaPartition,long offset,byte[] payload){
  mTopic=topic;
  mKafkaPartition=kafkaPartition;
  mOffset=offset;
  mPayload=payload;
  if (mPayload == null) {
    mPayload=new byte[0];
  }
}",0.8549222797927462
28458,"/** 
 * Helper to publish stats to statsD client
 */
private void exportToStatsD(List<Stat> stats){
  HostAndPort hostPort=HostAndPort.fromString(mConfig.getStatsDHostPort());
  NonBlockingStatsDClient client=new NonBlockingStatsDClient(mConfig.getKafkaGroup(),hostPort.getHostText(),hostPort.getPort());
  for (  Stat stat : stats) {
    @SuppressWarnings(""String_Node_Str"") Map<String,String> tags=(Map<String,String>)stat.get(Stat.STAT_KEYS.TAGS.getName());
    String aspect=new StringBuilder((String)stat.get(Stat.STAT_KEYS.METRIC.getName())).append(PERIOD).append(tags.get(Stat.STAT_KEYS.TOPIC.getName())).append(PERIOD).append(tags.get(Stat.STAT_KEYS.PARTITION.getName())).toString();
    client.recordGaugeValue(aspect,(Long)stat.get(Stat.STAT_KEYS.VALUE.getName()));
  }
}","/** 
 * Helper to publish stats to statsD client
 */
private void exportToStatsD(List<Stat> stats){
  HostAndPort hostPort=HostAndPort.fromString(mConfig.getStatsDHostPort());
  NonBlockingStatsDClient client=new NonBlockingStatsDClient(mConfig.getKafkaGroup(),hostPort.getHostText(),hostPort.getPort());
  for (  Stat stat : stats) {
    @SuppressWarnings(""String_Node_Str"") Map<String,String> tags=(Map<String,String>)stat.get(Stat.STAT_KEYS.TAGS.getName());
    String aspect=new StringBuilder((String)stat.get(Stat.STAT_KEYS.METRIC.getName())).append(PERIOD).append(tags.get(Stat.STAT_KEYS.TOPIC.getName())).append(PERIOD).append(tags.get(Stat.STAT_KEYS.PARTITION.getName())).toString();
    client.recordGaugeValue(aspect,Long.parseLong((String)stat.get(Stat.STAT_KEYS.VALUE.getName())));
  }
}",0.9873417721518988
28459,"public void write(ParsedMessage message) throws Exception {
  TopicPartition topicPartition=new TopicPartition(message.getTopic(),message.getKafkaPartition());
  long offset=mOffsetTracker.getAdjustedCommittedOffsetCount(topicPartition);
  LogFilePath path=new LogFilePath(mLocalPrefix,mConfig.getGeneration(),offset,message,mFileExtension);
  FileWriter writer=mFileRegistry.getOrCreateWriter(path,mCodec);
  writer.write(new KeyValue(message.getOffset(),message.getPayload()));
  LOG.debug(""String_Node_Str"" + message + ""String_Node_Str""+ path.getLogFilePath()+ ""String_Node_Str""+ writer.getLength());
}","public void write(ParsedMessage message) throws Exception {
  TopicPartition topicPartition=new TopicPartition(message.getTopic(),message.getKafkaPartition());
  long offset=mOffsetTracker.getAdjustedCommittedOffsetCount(topicPartition);
  LogFilePath path=new LogFilePath(mLocalPrefix,mConfig.getGeneration(),offset,message,mFileExtension);
  FileWriter writer=mFileRegistry.getOrCreateWriter(path,mCodec);
  writer.write(new KeyValue(message.getOffset(),message.getPayload()));
  LOG.debug(""String_Node_Str"",message,path.getLogFilePath(),writer.getLength());
}",0.9460154241645244
28460,"public static void main(String[] args){
  RemoteControl remoteControl=new RemoteControl();
  Light livingRoomLight=new Light(""String_Node_Str"");
  Light kitchenLight=new Light(""String_Node_Str"");
  CeilingFan ceilingFan=new CeilingFan(""String_Node_Str"");
  GarageDoor garageDoor=new GarageDoor(""String_Node_Str"");
  Stereo stereo=new Stereo(""String_Node_Str"");
  remoteControl.setCommand(0,livingRoomLight::on,livingRoomLight::off);
  remoteControl.setCommand(1,kitchenLight::on,kitchenLight::off);
  remoteControl.setCommand(2,ceilingFan::high,ceilingFan::off);
  Command stereoOnWithCD=() -> {
    stereo.on();
    stereo.setCD();
    stereo.setVolume(11);
  }
;
  remoteControl.setCommand(3,stereoOnWithCD,stereo::off);
  remoteControl.setCommand(3,garageDoor::up,garageDoor::down);
  System.out.println(remoteControl);
  remoteControl.onButtonWasPushed(0);
  remoteControl.offButtonWasPushed(0);
  remoteControl.onButtonWasPushed(1);
  remoteControl.offButtonWasPushed(1);
  remoteControl.onButtonWasPushed(2);
  remoteControl.offButtonWasPushed(2);
  remoteControl.onButtonWasPushed(3);
  remoteControl.offButtonWasPushed(3);
  remoteControl.onButtonWasPushed(4);
}","public static void main(String[] args){
  RemoteControl remoteControl=new RemoteControl();
  Light livingRoomLight=new Light(""String_Node_Str"");
  Light kitchenLight=new Light(""String_Node_Str"");
  CeilingFan ceilingFan=new CeilingFan(""String_Node_Str"");
  GarageDoor garageDoor=new GarageDoor(""String_Node_Str"");
  Stereo stereo=new Stereo(""String_Node_Str"");
  remoteControl.setCommand(0,livingRoomLight::on,livingRoomLight::off);
  remoteControl.setCommand(1,kitchenLight::on,kitchenLight::off);
  remoteControl.setCommand(2,ceilingFan::high,ceilingFan::off);
  Command stereoOnWithCD=() -> {
    stereo.on();
    stereo.setCD();
    stereo.setVolume(11);
  }
;
  remoteControl.setCommand(3,stereoOnWithCD,stereo::off);
  remoteControl.setCommand(4,garageDoor::up,garageDoor::down);
  System.out.println(remoteControl);
  remoteControl.onButtonWasPushed(0);
  remoteControl.offButtonWasPushed(0);
  remoteControl.onButtonWasPushed(1);
  remoteControl.offButtonWasPushed(1);
  remoteControl.onButtonWasPushed(2);
  remoteControl.offButtonWasPushed(2);
  remoteControl.onButtonWasPushed(3);
  remoteControl.offButtonWasPushed(3);
  remoteControl.onButtonWasPushed(4);
  remoteControl.offButtonWasPushed(4);
  remoteControl.onButtonWasPushed(5);
}",0.9673148531237072
28461,"/** 
 * For internal use; subject to change/removal.
 * @deprecated exclude from javadocs
 */
protected List<Path> resolve0(Object x){
  _ct=unsafe(getCallTarget(Capsule.class));
  final String target=(_ct != null ? _ct.getClass().getName() : Capsule.class.getName());
  log(LOG_DEBUG,""String_Node_Str"" + target + ""String_Node_Str""+ x);
  final List<Path> res=_ct != null ? _ct.resolve0(x) : resolve00(x);
  log(LOG_DEBUG,""String_Node_Str"" + target + ""String_Node_Str""+ x+ ""String_Node_Str""+ res);
  return res;
}","/** 
 * For internal use; subject to change/removal.
 * @deprecated exclude from javadocs
 */
protected List<Path> resolve0(Object x){
  _ct=unsafe(getCallTarget(Capsule.class));
  final String target=(_ct != null ? _ct.getClass().getName() : Capsule.class.getName()) + '@' + Integer.toHexString(System.identityHashCode(_ct));
  log(LOG_DEBUG,""String_Node_Str"" + target + ""String_Node_Str""+ x);
  final List<Path> res=_ct != null ? _ct.resolve0(x) : resolve00(x);
  log(LOG_DEBUG,""String_Node_Str"" + target + ""String_Node_Str""+ x+ ""String_Node_Str""+ res);
  return res;
}",0.9464944649446494
28462,"/** 
 * For internal use; subject to change/removal.
 * @deprecated exclude from javadocs
 */
protected Object lookup0(Object x,String type,Entry<String,?> attrContext,Object context){
  return (_ct=unsafe(getCallTarget(Capsule.class))) != null ? _ct.lookup0(x,type,attrContext,context) : lookup00(x,type,attrContext,context);
}","/** 
 * For internal use; subject to change/removal.
 * @deprecated exclude from javadocs
 */
protected Object lookup0(Object x,String type,Entry<String,?> attrContext,Object context){
  _ct=unsafe(getCallTarget(Capsule.class));
  final String target=(_ct != null ? _ct.getClass().getName() : Capsule.class.getName()) + '@' + Integer.toHexString(System.identityHashCode(_ct));
  log(LOG_DEBUG,""String_Node_Str"" + target + ""String_Node_Str""+ x);
  final Object res=_ct != null ? _ct.lookup0(x,type,attrContext,context) : lookup00(x,type,attrContext,context);
  log(LOG_DEBUG,""String_Node_Str"" + target + ""String_Node_Str""+ x+ ""String_Node_Str""+ res);
  return res;
}",0.6424974823766365
28463,"private static Capsule newCapsule(String capsuleClass,Capsule pred){
  try {
    final Class<? extends Capsule> clazz=loadCapsule(Thread.currentThread().getContextClassLoader(),capsuleClass,capsuleClass);
    return accessible(clazz.getDeclaredConstructor(Capsule.class)).newInstance(pred);
  }
 catch (  IncompatibleClassChangeError e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
  }
catch (  InvocationTargetException e) {
    throw rethrow(e.getTargetException());
  }
catch (  ReflectiveOperationException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass,e);
  }
}","private static Capsule newCapsule(String capsuleClass,Capsule pred){
}",0.1917808219178082
28464,"@SuppressWarnings(""String_Node_Str"") private static Class<? extends Capsule> loadCapsule(ClassLoader cl,String capsuleClass,String name){
  try {
    log(LOG_DEBUG,""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ toString(cl));
    final Class<?> clazz=cl.loadClass(capsuleClass);
    if (!isCapsuleClass(clazz))     throw new RuntimeException(name + ""String_Node_Str"");
    Class<?> c=clazz;
    while (!Capsule.class.getName().equals(c.getName()))     c=c.getSuperclass();
    if (c != Capsule.class)     accessible(c.getDeclaredField(""String_Node_Str"")).set(null,new Properties(PROPERTIES));
    return (Class<? extends Capsule>)clazz;
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str"",e);
  }
catch (  NoSuchFieldException e) {
    throw new RuntimeException(name + ""String_Node_Str"");
  }
catch (  IncompatibleClassChangeError|ClassCastException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") private static Class<? extends Capsule> loadCapsule(ClassLoader cl,String capsuleClass,String name){
  try {
    log(LOG_DEBUG,""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ toString(cl));
    final Class<?> clazz=cl.loadClass(capsuleClass);
    final Class<Capsule> c=getActualCapsuleClass(clazz);
    if (c == null)     throw new RuntimeException(name + ""String_Node_Str"");
    if (c != Capsule.class)     accessible(c.getDeclaredField(""String_Node_Str"")).set(null,new Properties(PROPERTIES));
    return (Class<? extends Capsule>)clazz;
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str"",e);
  }
catch (  NoSuchFieldException e) {
    throw new RuntimeException(name + ""String_Node_Str"");
  }
catch (  IncompatibleClassChangeError|ClassCastException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.9274047186932848
28465,"final static Capsule myCapsule(List<String> args){
  if (CAPSULE == null) {
    final Capsule capsule=newCapsule(MY_CLASSLOADER,findOwnJarFile());
    clearContext();
    if (capsule.isEmptyCapsule() && !args.isEmpty()) {
      processCmdLineOptions(args,ManagementFactory.getRuntimeMXBean().getInputArguments());
      if (!args.isEmpty())       capsule.setTarget(args.remove(0));
    }
    CAPSULE=capsule.oc;
  }
  return CAPSULE;
}","final static Capsule myCapsule(List<String> args){
  if (CAPSULE == null) {
    final ClassLoader ccl=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(MY_CLASSLOADER);
      final Capsule capsule=newCapsule(MY_CLASSLOADER,findOwnJarFile());
      clearContext();
      if (capsule.isEmptyCapsule() && !args.isEmpty()) {
        processCmdLineOptions(args,ManagementFactory.getRuntimeMXBean().getInputArguments());
        if (!args.isEmpty())         capsule.setTarget(args.remove(0));
      }
      CAPSULE=capsule.oc;
    }
  finally {
      Thread.currentThread().setContextClassLoader(ccl);
    }
  }
  return CAPSULE;
}",0.7345844504021448
28466,"final <T extends Capsule>T getCallTarget(Class<T> clazz){
  Capsule target=null;
  if ((sup == null || sup.sup(clazz) == null) && cc != this) {
    final StackTraceElement[] st=new Throwable().getStackTrace();
    if (st == null || st.length < 3)     throw new AssertionError(""String_Node_Str"");
    final int c1=1;
    if (!st[c1].getClassName().equals(clazz.getName()))     throw new RuntimeException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
    int c2=2;
    while (isStream(st[c2].getClassName()))     c2++;
    if (st[c1].getLineNumber() <= 0 || st[c2].getLineNumber() <= 0)     throw new AssertionError(""String_Node_Str"");
    if (!st[c2].getMethodName().equals(st[c1].getMethodName()) || (st[c2].getClassName().equals(clazz.getName()) && Math.abs(st[c2].getLineNumber() - st[c1].getLineNumber()) > 3))     target=cc;
  }
  if (target == null)   target=sup;
  return target != null ? target.sup(clazz) : null;
}","final <T extends Capsule>T getCallTarget(Class<T> clazz){
  Capsule target=null;
  if ((sup == null || sup.sup(clazz) == null || this.jarFile != ((Capsule)sup.sup(clazz)).jarFile) && cc != this) {
    final StackTraceElement[] st=new Throwable().getStackTrace();
    if (st == null || st.length < 3)     throw new AssertionError(""String_Node_Str"");
    final int c1=1;
    if (!st[c1].getClassName().equals(clazz.getName()))     throw new RuntimeException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
    int c2=2;
    while (isStream(st[c2].getClassName()))     c2++;
    if (st[c1].getLineNumber() <= 0 || st[c2].getLineNumber() <= 0)     throw new AssertionError(""String_Node_Str"");
    if (!st[c2].getMethodName().equals(st[c1].getMethodName()) || (st[c2].getClassName().equals(clazz.getName()) && Math.abs(st[c2].getLineNumber() - st[c1].getLineNumber()) > 3))     target=cc;
  }
  if (target == null)   target=sup;
  return target != null ? target.sup(clazz) : null;
}",0.9724102030192608
28467,"final Capsule setTarget(Path jar){
  verifyCanCallSetTarget();
  jar=toAbsolutePath(jar);
  if (jar.equals(getJarFile()))   throw new RuntimeException(""String_Node_Str"" + getJarFile());
  if (isFactoryCapsule()) {
    this.jarFile=jar;
    return this;
  }
  final Manifest man;
  boolean isCapsule=false;
  final long start=clock();
  try (JarInputStream jis=openJarInputStream(jar)){
    man=jis.getManifest();
    if (man == null || man.getMainAttributes().getValue(ATTR_MAIN_CLASS) == null)     throw new IllegalArgumentException(jar + ""String_Node_Str"");
    for (JarEntry entry; (entry=jis.getNextJarEntry()) != null; ) {
      if (entry.getName().equals(Capsule.class.getName() + ""String_Node_Str"")) {
        isCapsule=true;
        break;
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + jar,e);
  }
  time(""String_Node_Str"",start);
  if (!isCapsule)   manifest.getMainAttributes().putValue(ATTR_APP_ARTIFACT.getKey(),jar.toString());
 else {
    log(LOG_VERBOSE,""String_Node_Str"" + jar);
    insertAfter(loadTargetCapsule(cc.getClass().getClassLoader(),jar));
  }
  finalizeCapsule();
  return this;
}","final Capsule setTarget(Path jar){
  verifyCanCallSetTarget();
  jar=toAbsolutePath(jar);
  if (jar.equals(getJarFile()))   throw new RuntimeException(""String_Node_Str"" + getJarFile());
  if (isFactoryCapsule()) {
    this.jarFile=jar;
    return this;
  }
  final Manifest man;
  boolean isCapsule=false;
  final long start=clock();
  try (JarInputStream jis=openJarInputStream(jar)){
    man=jis.getManifest();
    if (man == null || man.getMainAttributes().getValue(ATTR_MAIN_CLASS) == null)     throw new IllegalArgumentException(jar + ""String_Node_Str"");
    for (JarEntry entry; (entry=jis.getNextJarEntry()) != null; ) {
      if (entry.getName().equals(Capsule.class.getName() + ""String_Node_Str"")) {
        isCapsule=true;
        break;
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + jar,e);
  }
  time(""String_Node_Str"",start);
  if (!isCapsule)   manifest.getMainAttributes().putValue(ATTR_APP_ARTIFACT.getKey(),jar.toString());
 else {
    log(LOG_VERBOSE,""String_Node_Str"" + jar);
    insertAfter(loadTargetCapsule(cc.getClass().getClassLoader(),jar).cc);
  }
  finalizeCapsule();
  return this;
}",0.998706338939198
28468,"private static Capsule newCapsule(String capsuleClass,Capsule pred){
  try {
    final Class<? extends Capsule> clazz=loadCapsule(MY_CLASSLOADER,capsuleClass,capsuleClass);
    return accessible(clazz.getDeclaredConstructor(Capsule.class)).newInstance(pred);
  }
 catch (  IncompatibleClassChangeError e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
  }
catch (  InvocationTargetException e) {
    throw rethrow(e.getTargetException());
  }
catch (  ReflectiveOperationException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass,e);
  }
}","private static Capsule newCapsule(String capsuleClass,Capsule pred){
  try {
    final Class<? extends Capsule> clazz=loadCapsule(Thread.currentThread().getContextClassLoader(),capsuleClass,capsuleClass);
    return accessible(clazz.getDeclaredConstructor(Capsule.class)).newInstance(pred);
  }
 catch (  IncompatibleClassChangeError e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
  }
catch (  InvocationTargetException e) {
    throw rethrow(e.getTargetException());
  }
catch (  ReflectiveOperationException e) {
    throw new RuntimeException(""String_Node_Str"" + capsuleClass,e);
  }
}",0.9549689440993788
28469,"final static String join(Map<?,?> map,char kvSeparator,String separator){
  if (map == null)   return null;
  if (map.isEmpty())   return ""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<?,?> entry : map.entrySet())   sb.append(entry.getKey()).append(kvSeparator).append(entry.getValue()).append(separator);
  sb.delete(sb.length() - separator.length(),sb.length());
  return sb.toString();
}","/** 
 * @deprecated marked deprecated to exclude from javadoc
 */
protected static String join(Map<?,?> map,char kvSeparator,String separator){
  if (map == null)   return null;
  if (map.isEmpty())   return ""String_Node_Str"";
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<?,?> entry : map.entrySet())   sb.append(entry.getKey()).append(kvSeparator).append(entry.getValue()).append(separator);
  sb.delete(sb.length() - separator.length(),sb.length());
  return sb.toString();
}",0.9144736842105264
28470,"static Map<String,String> split(String map,char kvSeparator,String separator,String defaultValue){
  if (map == null)   return null;
  Map<String,String> m=new LinkedHashMap<>();
  for (  String entry : Capsule.split(map,separator)) {
    final String key=getBefore(entry,kvSeparator);
    String value=getAfter(entry,kvSeparator);
    if (value == null) {
      if (defaultValue != null)       value=defaultValue;
 else       throw new IllegalArgumentException(""String_Node_Str"" + entry + ""String_Node_Str""+ map+ ""String_Node_Str""+ kvSeparator+ ""String_Node_Str"");
    }
    m.put(key.trim(),value.trim());
  }
  return m;
}","/** 
 * @deprecated marked deprecated to exclude from javadoc
 */
protected static Map<String,String> split(String map,char kvSeparator,String separator,String defaultValue){
  if (map == null)   return null;
  Map<String,String> m=new LinkedHashMap<>();
  for (  String entry : Capsule.split(map,separator)) {
    final String key=getBefore(entry,kvSeparator);
    String value=getAfter(entry,kvSeparator);
    if (value == null) {
      if (defaultValue != null)       value=defaultValue;
 else       throw new IllegalArgumentException(""String_Node_Str"" + entry + ""String_Node_Str""+ map+ ""String_Node_Str""+ kvSeparator+ ""String_Node_Str"");
    }
    m.put(key.trim(),value.trim());
  }
  return m;
}",0.942684766214178
28471,"/** 
 * @deprecated marked deprecated to exclude from javadoc. Visible for testing
 */
static Path createPathingJar(Path dir,List<Path> cp){
  try {
    dir=dir.toAbsolutePath();
    final List<Path> paths=new ArrayList<>(cp.size());
    for (    Path p : cp)     paths.add(dir.relativize(p));
    final Path pathingJar=Files.createTempFile(dir,""String_Node_Str"",""String_Node_Str"");
    final Manifest man=new Manifest();
    man.getMainAttributes().putValue(ATTR_MANIFEST_VERSION,""String_Node_Str"");
    man.getMainAttributes().putValue(ATTR_CLASS_PATH,join(paths,""String_Node_Str""));
    new JarOutputStream(Files.newOutputStream(pathingJar),man).close();
    return pathingJar;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * @deprecated marked deprecated to exclude from javadoc. Visible for testing
 */
static Path createPathingJar(Path dir,List<Path> cp){
  try {
    dir=dir.toAbsolutePath();
    final List<String> paths=createClassPath(dir,cp);
    final Path pathingJar=Files.createTempFile(dir,""String_Node_Str"",""String_Node_Str"");
    final Manifest man=new Manifest();
    man.getMainAttributes().putValue(ATTR_MANIFEST_VERSION,""String_Node_Str"");
    man.getMainAttributes().putValue(ATTR_CLASS_PATH,join(paths,""String_Node_Str""));
    new JarOutputStream(Files.newOutputStream(pathingJar),man).close();
    return pathingJar;
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9154834347532116
28472,"private void launch(List<String> args) throws IOException, InterruptedException {
  final ProcessBuilder pb;
  try {
    final List<String> jvmArgs=ManagementFactory.getRuntimeMXBean().getInputArguments();
    pb=prepareForLaunch(jvmArgs,args);
  }
 catch (  Throwable t) {
    cleanup();
    throw t;
  }
  clearContext();
  log(LOG_VERBOSE,join(pb.command(),""String_Node_Str""));
  if (isTrampoline()) {
    if (hasAttribute(ATTR_ENV))     throw new RuntimeException(""String_Node_Str"" + ATTR_ENV + ""String_Node_Str"");
    pb.command().remove(""String_Node_Str"" + PROP_TRAMPOLINE);
    System.out.println(join(pb.command(),""String_Node_Str""));
  }
 else {
    Runtime.getRuntime().addShutdownHook(new Thread(this));
    if (!isInheritIoBug())     pb.inheritIO();
    this.child=pb.start();
    if (isInheritIoBug())     pipeIoStreams();
    final int pid=getPid(child);
    if (pid > 0)     System.setProperty(PROP_CAPSULE_APP_PID,Integer.toString(pid));
    child.waitFor();
  }
  System.exit(child != null ? child.exitValue() : 0);
}","private int launch(List<String> args) throws IOException, InterruptedException {
  final ProcessBuilder pb;
  try {
    final List<String> jvmArgs=ManagementFactory.getRuntimeMXBean().getInputArguments();
    pb=prepareForLaunch(jvmArgs,args);
  }
 catch (  Throwable t) {
    cleanup();
    throw t;
  }
  clearContext();
  log(LOG_VERBOSE,join(pb.command(),""String_Node_Str""));
  if (isTrampoline()) {
    if (hasAttribute(ATTR_ENV))     throw new RuntimeException(""String_Node_Str"" + ATTR_ENV + ""String_Node_Str"");
    pb.command().remove(""String_Node_Str"" + PROP_TRAMPOLINE);
    System.out.println(join(pb.command(),""String_Node_Str""));
  }
 else {
    Runtime.getRuntime().addShutdownHook(new Thread(this));
    if (!isInheritIoBug())     pb.inheritIO();
    this.child=pb.start();
    if (isInheritIoBug())     pipeIoStreams();
    final int pid=getPid(child);
    if (pid > 0)     System.setProperty(PROP_CAPSULE_APP_PID,Integer.toString(pid));
    child.waitFor();
  }
  return child != null ? child.exitValue() : 0;
}",0.9868995633187772
28473,"private static String getJvmArgKey(String a){
  if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"")|| a.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str"") || a.startsWith(""String_Node_Str""))   return ""String_Node_Str"" + a.substring(""String_Node_Str"".length());
  if (a.contains(""String_Node_Str""))   return a.substring(0,a.indexOf(""String_Node_Str""));
  return a;
}","private static String getJvmArgKey(String a){
  if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"") || a.equals(""String_Node_Str"")|| a.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.equals(""String_Node_Str"") || a.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str""))   return ""String_Node_Str"";
  if (a.startsWith(""String_Node_Str"") || a.startsWith(""String_Node_Str""))   return ""String_Node_Str"" + a.substring(""String_Node_Str"".length());
  if (a.contains(""String_Node_Str""))   return a.substring(0,a.indexOf('='));
  return a;
}",0.9888641425389756
28474,"private void splitDepsAndRename(List<String> depsAndRename,List<String> deps,List<String> renames){
  for (  String depAndRename : depsAndRename) {
    String[] dna=depAndRename.split(""String_Node_Str"");
    deps.add(dna[0]);
    renames.add(dna.length > 1 ? dna[1] : null);
  }
}","private void splitDepsAndRename(List<String> depsAndRename,List<String> deps,List<String> renames){
  for (  String depAndRename : depsAndRename) {
    String[] dna=depAndRename.split(""String_Node_Str"");
    deps.add(dna[0]);
    if (renames != null)     renames.add(dna.length > 1 ? dna[1] : null);
  }
}",0.9572649572649572
28475,"/** 
 * Launches the capsule. A custom capsule may provide its own main method to add capsule actions, and then call this method if no custom action is performed.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public static final void main(String[] args0){
  final List<String> args=new ArrayList<>(Arrays.asList(args0));
  try {
    final Capsule capsule=myCapsule(args);
    if (capsule.getClass().equals(Capsule.class) && capsule.wrapper && !capsule.isEmptyCapsule()) {
      runMain(capsule.jarFile,args);
      System.exit(0);
    }
    if (propertyDefined(PROP_VERSION,PROP_PRINT_JRES,PROP_TREE,PROP_RESOLVE)) {
      if (propertyDefined(PROP_VERSION))       capsule.printVersion(args);
      if (propertyDefined(PROP_MODES))       capsule.printModes(args);
      if (propertyDefined(PROP_TREE))       capsule.printDependencyTree(args);
      if (propertyDefined(PROP_RESOLVE))       capsule.resolve(args);
      if (propertyDefined(PROP_PRINT_JRES))       capsule.printJVMs(args);
      return;
    }
    if (capsule.isEmptyCapsule())     throw new RuntimeException(""String_Node_Str"" + capsule.jarFile + ""String_Node_Str""+ capsule.jarFile+ ""String_Node_Str"");
    capsule.launch(args);
  }
 catch (  Throwable t) {
    System.err.print(""String_Node_Str"" + t.getMessage());
    if (hasContext() && (t.getMessage() == null || t.getMessage().length() < 50))     System.err.print(""String_Node_Str"" + reportContext());
    if (getLogLevel(System.getProperty(PROP_LOG_LEVEL)) >= LOG_VERBOSE) {
      System.err.println();
      t.printStackTrace(System.err);
    }
 else     System.err.println(""String_Node_Str"" + PROP_LOG_LEVEL + ""String_Node_Str"");
    System.exit(1);
  }
}","/** 
 * Launches the capsule. A custom capsule may provide its own main method to add capsule actions, and then call this method if no custom action is performed.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public static final void main(String[] args0){
  final List<String> args=new ArrayList<>(Arrays.asList(args0));
  try {
    final Capsule capsule=myCapsule(args);
    if (capsule.getClass().equals(Capsule.class) && capsule.wrapper && !capsule.isEmptyCapsule()) {
      runMain(capsule.jarFile,args);
      System.exit(0);
    }
    if (propertyDefined(PROP_VERSION,PROP_PRINT_JRES,PROP_TREE,PROP_RESOLVE)) {
      if (propertyDefined(PROP_VERSION))       capsule.printVersion(args);
      if (propertyDefined(PROP_MODES))       capsule.printModes(args);
      if (propertyDefined(PROP_TREE))       capsule.printDependencyTree(args);
      if (propertyDefined(PROP_RESOLVE))       capsule.resolve(args);
      if (propertyDefined(PROP_PRINT_JRES))       capsule.printJVMs(args);
      return;
    }
    if (capsule.isEmptyCapsule())     throw new RuntimeException(""String_Node_Str"" + capsule.jarFile + ""String_Node_Str""+ capsule.jarFile+ ""String_Node_Str"");
    System.exit(capsule.launch(args));
  }
 catch (  Throwable t) {
    System.err.print(""String_Node_Str"" + t.getMessage());
    if (hasContext() && (t.getMessage() == null || t.getMessage().length() < 50))     System.err.print(""String_Node_Str"" + reportContext());
    if (getLogLevel(System.getProperty(PROP_LOG_LEVEL)) >= LOG_VERBOSE) {
      System.err.println();
      t.printStackTrace(System.err);
    }
 else     System.err.println(""String_Node_Str"" + PROP_LOG_LEVEL + ""String_Node_Str"");
    System.exit(1);
  }
}",0.9962503605422556
28476,"/** 
 * Executes a command and returns its output as a list of lines. If the number of lines read is less than   {@code numLines}, or if   {@code numLines < 0}, then the method will wait for the child process to terminate, and throw an exception if the command returns an exit value   {@code != 0}.
 * @param numLines the maximum number of lines to read, or {@code -1} for an unbounded number
 * @param pb       the {@link ProcessBuilder} that will be used to launch the command
 * @return the lines output by the command
 */
protected static List<String> exec(int numLines,ProcessBuilder pb) throws IOException {
  final List<String> lines=new ArrayList<>();
  final Process p=pb.start();
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(p.getErrorStream()))){
    for (int i=0; numLines < 0 || i < numLines; i++) {
      final String line=reader.readLine();
      if (line == null)       break;
      lines.add(line);
    }
  }
   try {
    if (numLines < 0 || lines.size() < numLines) {
      final int exitValue=p.waitFor();
      if (exitValue != 0)       throw new RuntimeException(""String_Node_Str"" + join(pb.command(),""String_Node_Str"") + ""String_Node_Str""+ exitValue);
    }
    return lines;
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Executes a command and returns its output as a list of lines. If the number of lines read is less than   {@code numLines}, or if   {@code numLines < 0}, then the method will wait for the child process to terminate, and throw an exception if the command returns an exit value   {@code != 0}.
 * @param numLines the maximum number of lines to read, or {@code -1} for an unbounded number
 * @param pb       the {@link ProcessBuilder} that will be used to launch the command
 * @return the lines output by the command
 */
protected static List<String> exec(int numLines,ProcessBuilder pb) throws IOException {
  final List<String> lines=new ArrayList<>();
  final Process p=pb.start();
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(p.getErrorStream(),Charset.defaultCharset()))){
    for (int i=0; numLines < 0 || i < numLines; i++) {
      final String line=reader.readLine();
      if (line == null)       break;
      lines.add(line);
    }
  }
   try {
    if (numLines < 0 || lines.size() < numLines) {
      final int exitValue=p.waitFor();
      if (exitValue != 0)       throw new RuntimeException(""String_Node_Str"" + join(pb.command(),""String_Node_Str"") + ""String_Node_Str""+ exitValue);
    }
    return lines;
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.9904979095400988
28477,"private static long getStringsLength(Collection<?> coll){
  if (coll == null)   return 0;
  long len=0;
  for (  Object o : coll)   len+=coll.toString().length();
  return len;
}","private static long getStringsLength(Collection<?> coll){
  if (coll == null)   return 0;
  long len=0;
  for (  Object o : coll)   len+=o.toString().length();
  return len;
}",0.9915014164305948
28478,"public DependencyManagerImpl(Path localRepoPath,boolean forceRefresh,int logLevel){
  this.logLevel=logLevel;
  this.forceRefresh=forceRefresh;
  this.offline=isPropertySet(PROP_OFFLINE,false);
  if (localRepoPath == null)   localRepoPath=DEFAULT_LOCAL_MAVEN.resolve(""String_Node_Str"");
  log(LOG_DEBUG,""String_Node_Str"" + offline);
  log(LOG_DEBUG,""String_Node_Str"" + localRepoPath);
  log(LOG_DEBUG,""String_Node_Str"" + allowSnapshots);
  final LocalRepository localRepo=new LocalRepository(localRepoPath.toFile());
  this.settings=UserSettings.getInstance();
  this.system=newRepositorySystem();
  this.session=newRepositorySession(system,localRepo);
  setRepos(null,false);
}","public DependencyManagerImpl(Path localRepoPath,boolean forceRefresh,int logLevel){
  this.logLevel=logLevel;
  this.forceRefresh=forceRefresh;
  this.offline=isPropertySet(PROP_OFFLINE,false);
  if (localRepoPath == null)   localRepoPath=DEFAULT_LOCAL_MAVEN.resolve(""String_Node_Str"");
  log(LOG_DEBUG,""String_Node_Str"" + offline);
  log(LOG_DEBUG,""String_Node_Str"" + localRepoPath);
  final LocalRepository localRepo=new LocalRepository(localRepoPath.toFile());
  this.settings=UserSettings.getInstance();
  this.system=newRepositorySystem();
  this.session=newRepositorySession(system,localRepo);
  setRepos(null,false);
}",0.9593246354566384
28479,"private static Dependency toDependency(Artifact artifact){
  return new Dependency(artifact,JavaScopes.RUNTIME,false,null);
}","static Dependency toDependency(String coords,String type){
  return new Dependency(coordsToArtifact(coords,type),JavaScopes.RUNTIME,false,getExclusions(coords));
}",0.6944444444444444
28480,"private String getAppId(String[] args){
  String appName=System.getProperty(PROP_APP_ID);
  if (appName == null)   appName=getAttribute(ATTR_APP_NAME);
  if (appName == null) {
    appName=getApplicationArtifactId(getAppArtifact(args));
    if (appName != null)     return getAppArtifactLatestVersion(appName);
  }
  if (appName == null) {
    if (pom != null)     return getPomAppName();
    appName=getAttribute(ATTR_APP_CLASS);
  }
  if (appName == null) {
    if (isEmptyCapsule())     return null;
    throw new RuntimeException(""String_Node_Str"" + jarFile + ""String_Node_Str""+ ATTR_APP_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ATTR_APP_CLASS+ ""String_Node_Str""+ POM_FILE+ ""String_Node_Str"");
  }
  final String version=hasAttribute(ATTR_APP_VERSION) ? getAttribute(ATTR_APP_VERSION) : getAttribute(ATTR_IMPLEMENTATION_VERSION);
  return appName + (version != null ? ""String_Node_Str"" + version : ""String_Node_Str"");
}","private String getAppId(String[] args){
  String appName=System.getProperty(PROP_APP_ID);
  if (appName == null)   appName=getAttribute(ATTR_APP_NAME);
  if (appName == null) {
    appName=getAppArtifact(args);
    if (appName != null)     return getAppArtifactLatestVersion(appName);
  }
  if (appName == null) {
    if (pom != null)     return getPomAppName();
    appName=getAttribute(ATTR_APP_CLASS);
  }
  if (appName == null) {
    if (isEmptyCapsule())     return null;
    throw new RuntimeException(""String_Node_Str"" + jarFile + ""String_Node_Str""+ ATTR_APP_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ATTR_APP_CLASS+ ""String_Node_Str""+ POM_FILE+ ""String_Node_Str"");
  }
  final String version=hasAttribute(ATTR_APP_VERSION) ? getAttribute(ATTR_APP_VERSION) : getAttribute(ATTR_IMPLEMENTATION_VERSION);
  return appName + (version != null ? ""String_Node_Str"" + version : ""String_Node_Str"");
}",0.9726177437020812
28481,"/** 
 * Returns a list of JVM arguments.
 * @param cmdLine the list of JVM arguments passed to the capsule at launch
 */
protected List<String> buildJVMArgs(List<String> cmdLine){
  final Map<String,String> jvmArgs=new LinkedHashMap<String,String>();
  for (  String a : nullToEmpty(getListAttribute(ATTR_JVM_ARGS))) {
    if (!a.startsWith(""String_Node_Str"") && !a.startsWith(""String_Node_Str""))     addJvmArg(expand(a),jvmArgs);
  }
  for (  String option : cmdLine) {
    if (!option.startsWith(""String_Node_Str"") && !option.startsWith(""String_Node_Str""))     addJvmArg(option,jvmArgs);
  }
  return new ArrayList<String>(jvmArgs.values());
}","/** 
 * Returns a list of JVM arguments.
 * @param cmdLine the list of JVM arguments passed to the capsule at launch
 */
protected List<String> buildJVMArgs(List<String> cmdLine){
  final Map<String,String> jvmArgs=new LinkedHashMap<String,String>();
  for (  String a : nullToEmpty(getListAttribute(ATTR_JVM_ARGS))) {
    a=a.trim();
    if (!a.isEmpty() && !a.startsWith(""String_Node_Str"") && !a.startsWith(""String_Node_Str""))     addJvmArg(expand(a),jvmArgs);
  }
  for (  String option : cmdLine) {
    if (!option.startsWith(""String_Node_Str"") && !option.startsWith(""String_Node_Str""))     addJvmArg(option,jvmArgs);
  }
  return new ArrayList<String>(jvmArgs.values());
}",0.9757942511346444
28482,"@Override public void logout(){
}","@Override public void logout(){
  final Session openSession=mSessionTracker.getOpenSession();
  if (openSession != null) {
    openSession.closeAndClearTokenInformation();
  }
}",0.3142857142857143
28483,"@Override public boolean isConnected(){
  return false;
}","@Override public boolean isConnected(){
  Session session=Session.getActiveSession();
  return (session != null && session.isOpened());
}",0.5567010309278351
28484,"@Override public int getID(){
  return 0;
}","@Override public int getID(){
  return ID;
}",0.9655172413793104
28485,"@Override public void logout(){
}","@Override public void logout(){
  mConnectRequested=false;
  if (mPlusClient.isConnected()) {
    mPlusClient.clearDefaultAccount();
    mPlusClient.disconnect();
    mPlusClient.connect();
  }
}",0.2894736842105263
28486,"@Override public boolean isConnected(){
  return false;
}","@Override public boolean isConnected(){
  return mPlusClient.isConnected();
}",0.8208955223880597
28487,"@Override public int getID(){
  return 0;
}","@Override public int getID(){
  return ID;
}",0.9655172413793104
28488,@MemberGetter public static native @Const AuxillaryParseTableField aux();,@MemberGetter public native @Const AuxillaryParseTableField aux();,0.9496402877697842
28489,"public void map(InfoMap infoMap){
  infoMap.put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cppTypes().annotations()).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").define()).put(new Info(""String_Node_Str"",""String_Node_Str"").define(false)).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").valueTypes(""String_Node_Str"",""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cast().pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").skip()).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").skip());
  String[] functionTemplates={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String t : functionTemplates) {
    infoMap.put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").javaNames(t + ""String_Node_Str"")).put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").javaNames(t + ""String_Node_Str""));
  }
  String classTemplates[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String t : classTemplates) {
    boolean purify=t.equals(""String_Node_Str"") || t.equals(""String_Node_Str"") || t.equals(""String_Node_Str"");
    boolean virtualize=t.endsWith(""String_Node_Str"") || t.endsWith(""String_Node_Str"");
    String[] annotations=t.startsWith(""String_Node_Str"") ? new String[]{""String_Node_Str""} : null;
    infoMap.put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").annotations(annotations).pointerTypes(""String_Node_Str"" + t).purify(purify).virtualize(virtualize)).put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").annotations(annotations).pointerTypes(""String_Node_Str"" + t).purify(purify).virtualize(virtualize));
  }
  infoMap.put(new Info(""String_Node_Str"",""String_Node_Str"").skip()).put(new Info(""String_Node_Str"",""String_Node_Str"").javaText(""String_Node_Str"" + ""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str""));
}","public void map(InfoMap infoMap){
  infoMap.put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cppTypes().annotations()).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").define()).put(new Info(""String_Node_Str"",""String_Node_Str"").define(false)).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").valueTypes(""String_Node_Str"",""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"").cast().valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cast().pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").skip()).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").skip());
  String[] functionTemplates={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String t : functionTemplates) {
    infoMap.put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").javaNames(t + ""String_Node_Str"")).put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").javaNames(t + ""String_Node_Str""));
  }
  String classTemplates[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String t : classTemplates) {
    boolean purify=t.equals(""String_Node_Str"") || t.equals(""String_Node_Str"") || t.equals(""String_Node_Str"");
    boolean virtualize=t.endsWith(""String_Node_Str"") || t.endsWith(""String_Node_Str"");
    String[] annotations=t.startsWith(""String_Node_Str"") ? new String[]{""String_Node_Str""} : null;
    infoMap.put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").annotations(annotations).pointerTypes(""String_Node_Str"" + t).purify(purify).virtualize(virtualize)).put(new Info(""String_Node_Str"" + t + ""String_Node_Str"").annotations(annotations).pointerTypes(""String_Node_Str"" + t).purify(purify).virtualize(virtualize));
  }
  infoMap.put(new Info(""String_Node_Str"",""String_Node_Str"").skip()).put(new Info(""String_Node_Str"",""String_Node_Str"").javaText(""String_Node_Str"" + ""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").javaNames(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").annotations(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str"").define()).put(new Info(""String_Node_Str"").pointerTypes(""String_Node_Str""));
}",0.9991311063911952
28490,"public void map(InfoMap infoMap){
  infoMap.put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cppTypes().annotations()).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").define().cast().pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"").define().cast().pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").define(false)).put(new Info(""String_Node_Str"").cppTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").define().javaText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").skip());
}","public void map(InfoMap infoMap){
  infoMap.put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").cppTypes().annotations()).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").define().cast().pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"").define().cast().pointerTypes(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).put(new Info(""String_Node_Str"").javaText(""String_Node_Str"")).put(new Info(""String_Node_Str"").define(false)).put(new Info(""String_Node_Str"").cppTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").define().javaText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"").valueTypes(""String_Node_Str"").pointerTypes(""String_Node_Str"")).put(new Info(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").skip());
}",0.9962161025856632
28491,"@Override public void getBitmap(ProteusView view,String url,final DrawableValue.AsyncCallback callback){
  GlideApp.with(ProteusActivity.this).load(url).into(new ImageLoaderTarget(callback));
}","@Override public void getBitmap(ProteusView view,String url,final DrawableValue.AsyncCallback callback){
  GlideApp.with(ProteusActivity.this).load(url).placeholder(R.drawable.placeholder).error(R.drawable.image_broken).into(new ImageLoaderTarget(callback));
}",0.8520971302428256
28492,"public static <V extends View>void register(ProteusBuilder builder){
  Map<String,AttributeProcessor> processors=new LinkedHashMap<>(4);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      AppBarLayoutParamsHelper.setLayoutScrollFlags(view,value);
    }
  }
);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      CollapsingToolbarLayoutParamsHelper.setCollapseMode(view,value);
    }
  }
);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      CollapsingToolbarLayoutParamsHelper.setParallaxMultiplier(view,value);
    }
  }
);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      CoordinatorLayoutParamsHelper.setLayoutBehavior(view,value);
    }
  }
);
  builder.register(""String_Node_Str"",processors);
}","public static <V extends View>void register(ProteusBuilder builder){
  Map<String,AttributeProcessor> processors=new LinkedHashMap<>(4);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      AppBarLayoutParamsHelper.setLayoutScrollFlags(view,value);
    }
  }
);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      CollapsingToolbarLayoutParamsHelper.setCollapseMode(view,value);
    }
  }
);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      CollapsingToolbarLayoutParamsHelper.setParallaxMultiplier(view,value);
    }
  }
);
  processors.put(""String_Node_Str"",new StringAttributeProcessor<V>(){
    @Override public void setString(    V view,    String value){
      CoordinatorLayoutParamsHelper.setLayoutBehavior(view,value);
    }
  }
);
  processors.put(Attributes.View.LayoutGravity,new GravityAttributeProcessor<V>(){
    @Override public void setGravity(    V view,    @Gravity int gravity){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)layoutParams;
        params.gravity=gravity;
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams params=(FrameLayout.LayoutParams)layoutParams;
        params.gravity=gravity;
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof CoordinatorLayout.LayoutParams) {
        CoordinatorLayout.LayoutParams params=(CoordinatorLayout.LayoutParams)layoutParams;
        params.gravity=gravity;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  builder.register(""String_Node_Str"",processors);
}",0.6918075422626788
28493,"@Override public void register(ProteusTypeAdapterFactory factory){
  factory.register(AttributeResource.class,ATTRIBUTE_RESOURCE);
  factory.register(Binding.class,BINDING);
  factory.register(Color.Int.class,COLOR_INT);
  factory.register(Color.StateList.class,COLOR_STATE_LIST);
  factory.register(Dimension.class,DIMENSION);
  factory.register(DrawableValue.ColorValue.class,DRAWABLE_COLOR);
  factory.register(DrawableValue.LayerListValue.class,DRAWABLE_LAYER_LIST);
  factory.register(DrawableValue.LevelListValue.class,DRAWABLE_LEVEL_LIST);
  factory.register(DrawableValue.RippleValue.class,DRAWABLE_RIPPLE);
  factory.register(DrawableValue.ShapeValue.class,DRAWABLE_VALUE);
  factory.register(DrawableValue.StateListValue.class,DRAWABLE_STATE_LIST);
  factory.register(DrawableValue.UrlValue.class,DRAWABLE_URL);
  factory.register(Layout.class,LAYOUT);
  factory.register(NestedBinding.class,NESTED_BINDING);
  factory.register(Resource.class,RESOURCE);
  factory.register(StyleResource.class,STYLE_RESOURCE);
}","@Override public void register(ProteusTypeAdapterFactory factory){
  factory.register(AttributeResource.class,ATTRIBUTE_RESOURCE);
  factory.register(Binding.class,BINDING);
  factory.register(Color.Int.class,COLOR_INT);
  factory.register(Color.StateList.class,COLOR_STATE_LIST);
  factory.register(Dimension.class,DIMENSION);
  factory.register(DrawableValue.ColorValue.class,DRAWABLE_COLOR);
  factory.register(DrawableValue.LayerListValue.class,DRAWABLE_LAYER_LIST);
  factory.register(DrawableValue.LevelListValue.class,DRAWABLE_LEVEL_LIST);
  factory.register(DrawableValue.RippleValue.class,DRAWABLE_RIPPLE);
  factory.register(DrawableValue.ShapeValue.class,DRAWABLE_SHAPE);
  factory.register(DrawableValue.StateListValue.class,DRAWABLE_STATE_LIST);
  factory.register(DrawableValue.UrlValue.class,DRAWABLE_URL);
  factory.register(Layout.class,LAYOUT);
  factory.register(NestedBinding.class,NESTED_BINDING);
  factory.register(Resource.class,RESOURCE);
  factory.register(StyleResource.class,STYLE_RESOURCE);
}",0.9960822722820764
28494,"private ShapeValue(ObjectValue value,Context context){
  this.shape=getShape(value.getAsString(SHAPE));
  Gradient gradient=null;
  Array children=value.getAsArray(CHILDREN);
  Iterator<Value> iterator=children.iterator();
  if (children.size() > 0) {
    this.elements=new DrawableElement[children.size()];
    int index=0;
    while (iterator.hasNext()) {
      ObjectValue child=iterator.next().getAsObject();
      String typeKey=child.getAsString(TYPE);
      DrawableElement element=null;
switch (typeKey) {
case TYPE_CORNERS:
        element=Corners.valueOf(child,context);
      break;
case TYPE_PADDING:
    break;
case TYPE_SIZE:
  element=Size.valueOf(child,context);
break;
case TYPE_SOLID:
element=Solid.valueOf(child,context);
break;
case TYPE_STROKE:
element=Stroke.valueOf(child,context);
break;
case TYPE_GRADIENT:
gradient=Gradient.valueOf(child,context);
element=gradient;
break;
}
if (null != element) {
this.elements[index]=element;
index++;
}
}
this.gradient=gradient;
}
 else {
this.elements=null;
this.gradient=null;
}
}","private ShapeValue(int shape,@Nullable Gradient gradient,@Nullable DrawableElement[] elements){
  this.shape=shape;
  this.gradient=gradient;
  this.elements=elements;
}",0.2308326463314097
28495,"@Override public String toString(){
  final String value;
  if (this.value % 1 == 0) {
    value=String.valueOf((int)this.value);
  }
 else {
    value=String.valueOf(this.value);
  }
  final String unit;
  if (this.unit == DIMENSION_UNIT_ENUM) {
    return sDimensionsMap.getKey(this.unit);
  }
 else {
    unit=sDimensionsUnitsMap.getKey(this.unit);
    return value + unit;
  }
}","@Override public String toString(){
  final String value;
  if (this.value % 1 == 0) {
    value=String.valueOf((int)this.value);
  }
 else {
    value=String.valueOf(this.value);
  }
  final String unit;
  if (this.unit == DIMENSION_UNIT_ENUM) {
    return sDimensionsMap.getKey((int)this.value);
  }
 else {
    unit=sDimensionsUnitsMap.getKey(this.unit);
    return value + unit;
  }
}",0.9688311688311688
28496,"public static GradientDrawable.Orientation getOrientation(Integer angle){
  GradientDrawable.Orientation orientation=GradientDrawable.Orientation.LEFT_RIGHT;
  if (null != angle) {
    angle%=360;
    if (angle % 45 == 0) {
switch (angle) {
case 0:
        orientation=GradientDrawable.Orientation.LEFT_RIGHT;
      break;
case 45:
    orientation=GradientDrawable.Orientation.BL_TR;
  break;
case 90:
orientation=GradientDrawable.Orientation.BOTTOM_TOP;
break;
case 135:
orientation=GradientDrawable.Orientation.BR_TL;
break;
case 180:
orientation=GradientDrawable.Orientation.RIGHT_LEFT;
break;
case 225:
orientation=GradientDrawable.Orientation.TR_BL;
break;
case 270:
orientation=GradientDrawable.Orientation.TOP_BOTTOM;
break;
case 315:
orientation=GradientDrawable.Orientation.TL_BR;
break;
}
}
}
return orientation;
}","public static GradientDrawable.Orientation getOrientation(@Nullable Integer angle){
  GradientDrawable.Orientation orientation=GradientDrawable.Orientation.LEFT_RIGHT;
  if (null != angle) {
    angle%=360;
    if (angle % 45 == 0) {
switch (angle) {
case 0:
        orientation=GradientDrawable.Orientation.LEFT_RIGHT;
      break;
case 45:
    orientation=GradientDrawable.Orientation.BL_TR;
  break;
case 90:
orientation=GradientDrawable.Orientation.BOTTOM_TOP;
break;
case 135:
orientation=GradientDrawable.Orientation.BR_TL;
break;
case 180:
orientation=GradientDrawable.Orientation.RIGHT_LEFT;
break;
case 225:
orientation=GradientDrawable.Orientation.TR_BL;
break;
case 270:
orientation=GradientDrawable.Orientation.TOP_BOTTOM;
break;
case 315:
orientation=GradientDrawable.Orientation.TL_BR;
break;
}
}
}
return orientation;
}",0.993968636911942
28497,"private Gradient(ObjectValue gradient,Context context){
  angle=gradient.getAsInteger(ANGLE);
  centerX=gradient.getAsFloat(CENTER_X);
  centerY=gradient.getAsFloat(CENTER_Y);
  centerColor=ColorResourceProcessor.staticCompile(gradient.get(CENTER_COLOR),context);
  endColor=ColorResourceProcessor.staticCompile(gradient.get(END_COLOR),context);
  gradientRadius=DimensionAttributeProcessor.staticCompile(gradient.get(GRADIENT_RADIUS),context);
  startColor=ColorResourceProcessor.staticCompile(gradient.get(START_COLOR),context);
  gradientType=getGradientType(gradient.getAsString(GRADIENT_TYPE));
  useLevel=gradient.getAsBoolean(USE_LEVEL);
}","private Gradient(ObjectValue gradient,Context context){
  angle=gradient.getAsInteger(ANGLE);
  centerX=gradient.getAsFloat(CENTER_X);
  centerY=gradient.getAsFloat(CENTER_Y);
  Value value;
  value=gradient.get(START_COLOR);
  if (value != null) {
    startColor=ColorResourceProcessor.staticCompile(value,context);
  }
 else {
    startColor=null;
  }
  value=gradient.get(CENTER_COLOR);
  if (value != null) {
    centerColor=ColorResourceProcessor.staticCompile(value,context);
  }
 else {
    centerColor=null;
  }
  value=gradient.get(END_COLOR);
  if (value != null) {
    endColor=ColorResourceProcessor.staticCompile(value,context);
  }
 else {
    endColor=null;
  }
  value=gradient.get(GRADIENT_RADIUS);
  if (value != null) {
    gradientRadius=DimensionAttributeProcessor.staticCompile(value,context);
  }
 else {
    gradientRadius=null;
  }
  gradientType=getGradientType(gradient.getAsString(GRADIENT_TYPE));
  useLevel=gradient.getAsBoolean(USE_LEVEL);
}",0.5648949320148331
28498,"/** 
 * @param context
 */
public ProteusTypeAdapterFactory(Context context){
  this.context=context;
  register(AttributeResource.class,ATTRIBUTE_RESOURCE);
  register(Binding.class,BINDING);
  register(Color.Int.class,COLOR_INT);
  register(Color.StateList.class,COLOR_STATE_LIST);
  register(Dimension.class,DIMENSION);
  register(DrawableValue.class,DRAWABLE_VALUE);
  register(Layout.class,LAYOUT);
  register(NestedBinding.class,NESTED_BINDING);
  register(Resource.class,RESOURCE);
  register(StyleResource.class,STYLE_RESOURCE);
}","/** 
 * @param context
 */
public ProteusTypeAdapterFactory(Context context){
  this.context=context;
  register(AttributeResource.class,ATTRIBUTE_RESOURCE);
  register(Binding.class,BINDING);
  register(Color.Int.class,COLOR_INT);
  register(Color.StateList.class,COLOR_STATE_LIST);
  register(Dimension.class,DIMENSION);
  register(DrawableValue.ColorValue.class,DRAWABLE_VALUE);
  register(DrawableValue.LayerListValue.class,DRAWABLE_VALUE);
  register(DrawableValue.LevelListValue.class,DRAWABLE_VALUE);
  register(DrawableValue.RippleValue.class,DRAWABLE_VALUE);
  register(DrawableValue.ShapeValue.class,DRAWABLE_VALUE);
  register(DrawableValue.StateListValue.class,DRAWABLE_VALUE);
  register(DrawableValue.UrlValue.class,DRAWABLE_VALUE);
  register(Layout.class,LAYOUT);
  register(NestedBinding.class,NESTED_BINDING);
  register(Resource.class,RESOURCE);
  register(StyleResource.class,STYLE_RESOURCE);
}",0.7410468319559229
28499,"@Override public String toString(){
  String context=""String_Node_Str"" + Utils.getStringFromArray(tokens,""String_Node_Str"") + ""String_Node_Str"";
  String functions=""String_Node_Str"";
  if (null != formatter) {
    functions=""String_Node_Str"" + formatter.getName() + ""String_Node_Str""+ Utils.getStringFromArray(arguments,""String_Node_Str"")+ ""String_Node_Str"";
  }
  return context + functions;
}","@Override public String toString(){
  String context=""String_Node_Str"" + Utils.getStringFromArray(tokens,""String_Node_Str"") + ""String_Node_Str"";
  String functions=""String_Node_Str"";
  if (null != formatter) {
    functions=""String_Node_Str"" + formatter.getName() + ""String_Node_Str""+ Utils.getStringFromArray(arguments,""String_Node_Str"",Utils.STYLE_SINGLE)+ ""String_Node_Str"";
  }
  return context + functions;
}",0.976456009913259
28500,"@Override public void update(@Nullable ObjectValue data){
  super.update(data);
  if (view instanceof ViewGroup) {
    ViewGroup parent=(ViewGroup)view;
    int count=parent.getChildCount();
    View child;
    for (int index=0; index < count; index++) {
      child=parent.getChildAt(index);
      if (child instanceof ProteusView) {
        ((ProteusView)child).getViewManager().update(dataContext.getData());
      }
    }
  }
}","@Override public void update(@Nullable ObjectValue data){
  super.update(data);
  if (!hasDataBoundChildren && view instanceof ViewGroup) {
    ViewGroup parent=(ViewGroup)view;
    int count=parent.getChildCount();
    View child;
    for (int index=0; index < count; index++) {
      child=parent.getChildAt(index);
      if (child instanceof ProteusView) {
        ((ProteusView)child).getViewManager().update(dataContext.getData());
      }
    }
  }
}",0.971815107102593
28501,"public ViewGroupManager(@NonNull ProteusContext context,@NonNull ViewTypeParser parser,@NonNull View view,@NonNull Layout layout,@NonNull DataContext dataContext){
  super(context,parser,view,layout,dataContext);
}","public ViewGroupManager(@NonNull ProteusContext context,@NonNull ViewTypeParser parser,@NonNull View view,@NonNull Layout layout,@NonNull DataContext dataContext){
  super(context,parser,view,layout,dataContext);
  hasDataBoundChildren=false;
}",0.9344978165938864
28502,"public ProteusView.Manager createViewManager(@NonNull ProteusContext context,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewGroup parent,int dataIndex){
  DataContext dataContext=createScope(layout,data,parent,dataIndex);
  return new ViewManager(context,this,view.getAsView(),layout,dataContext);
}","public ProteusView.Manager createViewManager(@NonNull ProteusContext context,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewGroup parent,int dataIndex){
  if (null == this.parent) {
    DataContext dataContext=createScope(layout,data,parent,dataIndex);
    return new ViewManager(context,this,view.getAsView(),layout,dataContext);
  }
 else {
    return this.parent.createViewManager(context,view,layout,data,parent,dataIndex);
  }
}",0.8357843137254902
28503,"@Override public void handleBinding(T view,Binding value){
  handleDataDrivenChildren(view,value);
}","@Override public void handleBinding(T view,Binding value){
  handleDataBoundChildren(view,value);
}",0.9547738693467336
28504,"@Override protected void addAttributeProcessors(){
  addAttributeProcessor(Attributes.ViewGroup.ClipChildren,new BooleanAttributeProcessor<T>(){
    @Override public void setBoolean(    T view,    boolean value){
      view.setClipChildren(value);
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.ClipToPadding,new BooleanAttributeProcessor<T>(){
    @Override public void setBoolean(    T view,    boolean value){
      view.setClipToPadding(value);
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.LayoutMode,new StringAttributeProcessor<T>(){
    @Override public void setString(    T view,    String value){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        if (LAYOUT_MODE_CLIP_BOUNDS.equals(value)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_CLIP_BOUNDS);
        }
 else         if (LAYOUT_MODE_OPTICAL_BOUNDS.equals(value)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS);
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.SplitMotionEvents,new BooleanAttributeProcessor<T>(){
    @Override public void setBoolean(    T view,    boolean value){
      view.setMotionEventSplittingEnabled(value);
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.Children,new AttributeProcessor<T>(){
    @Override public void handleBinding(    T view,    Binding value){
      handleDataDrivenChildren(view,value);
    }
    @Override public void handleValue(    T view,    Value value){
      handleChildren(view,value);
    }
    @Override public void handleResource(    T view,    Resource resource){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    @Override public void handleAttributeResource(    T view,    AttributeResource attribute){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    @Override public void handleStyleResource(    T view,    StyleResource style){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
);
}","@Override protected void addAttributeProcessors(){
  addAttributeProcessor(Attributes.ViewGroup.ClipChildren,new BooleanAttributeProcessor<T>(){
    @Override public void setBoolean(    T view,    boolean value){
      view.setClipChildren(value);
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.ClipToPadding,new BooleanAttributeProcessor<T>(){
    @Override public void setBoolean(    T view,    boolean value){
      view.setClipToPadding(value);
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.LayoutMode,new StringAttributeProcessor<T>(){
    @Override public void setString(    T view,    String value){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        if (LAYOUT_MODE_CLIP_BOUNDS.equals(value)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_CLIP_BOUNDS);
        }
 else         if (LAYOUT_MODE_OPTICAL_BOUNDS.equals(value)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS);
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.SplitMotionEvents,new BooleanAttributeProcessor<T>(){
    @Override public void setBoolean(    T view,    boolean value){
      view.setMotionEventSplittingEnabled(value);
    }
  }
);
  addAttributeProcessor(Attributes.ViewGroup.Children,new AttributeProcessor<T>(){
    @Override public void handleBinding(    T view,    Binding value){
      handleDataBoundChildren(view,value);
    }
    @Override public void handleValue(    T view,    Value value){
      handleChildren(view,value);
    }
    @Override public void handleResource(    T view,    Resource resource){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    @Override public void handleAttributeResource(    T view,    AttributeResource attribute){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    @Override public void handleStyleResource(    T view,    StyleResource style){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
);
}",0.9972437985467302
28505,"protected ProteusView.Manager createViewManager(@NonNull ViewTypeParser parser,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewGroup parent,int dataIndex){
  return parser.createViewManager(context,view,layout,data,parser.parent,parent,dataIndex);
}","protected ProteusView.Manager createViewManager(@NonNull ViewTypeParser parser,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewGroup parent,int dataIndex){
  return parser.createViewManager(context,view,layout,data,parser,parent,dataIndex);
}",0.987783595113438
28506,"/** 
 * @param context
 * @param view
 * @param layout
 * @param data
 * @param fallback
 * @param parent
 * @param dataIndex @return
 */
@NonNull public ProteusView.Manager createViewManager(@NonNull ProteusContext context,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewTypeParser fallback,@Nullable ViewGroup parent,int dataIndex){
  if (null != this.parent && fallback == this.parent) {
    return this.parent.createViewManager(context,view,layout,data,this,parent,dataIndex);
  }
 else {
    DataContext dataContext=createScope(layout,data,parent,dataIndex);
    return new ViewManager(context,fallback != null ? fallback : this,view.getAsView(),layout,dataContext);
  }
}","/** 
 * @param context
 * @param view
 * @param layout
 * @param data
 * @param caller
 * @param parent
 * @param dataIndex @return
 */
@NonNull public ProteusView.Manager createViewManager(@NonNull ProteusContext context,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewTypeParser caller,@Nullable ViewGroup parent,int dataIndex){
  if (null != this.parent && caller != this.parent) {
    return this.parent.createViewManager(context,view,layout,data,caller,parent,dataIndex);
  }
 else {
    DataContext dataContext=createScope(layout,data,parent,dataIndex);
    return new ViewManager(context,caller != null ? caller : this,view.getAsView(),layout,dataContext);
  }
}",0.9411764705882352
28507,"@NonNull @Override public ProteusView.Manager createViewManager(@NonNull ProteusContext context,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@NonNull ViewTypeParser fallback,@Nullable ViewGroup parent,int dataIndex){
  DataContext dataContext=createScope(layout,data,parent,dataIndex);
  return new ViewGroupManager(context,this,view.getAsView(),layout,dataContext);
}","@NonNull @Override public ProteusView.Manager createViewManager(@NonNull ProteusContext context,@NonNull ProteusView view,@NonNull Layout layout,@NonNull ObjectValue data,@Nullable ViewTypeParser caller,@Nullable ViewGroup parent,int dataIndex){
  DataContext dataContext=createScope(layout,data,parent,dataIndex);
  return new ViewGroupManager(context,null != caller ? caller : this,view.getAsView(),layout,dataContext);
}",0.9354445797807552
28508,"private int[][] readStates(String string){
  int[][] states=new int[0][];
  StringTokenizer tokenizer=new StringTokenizer(string,STATE_DELIMITER);
  int index=0;
  while (tokenizer.hasMoreTokens()) {
    Arrays.copyOf(states,states.length + 1);
    states[index]=readColors(tokenizer.nextToken());
    index++;
  }
  return states;
}","private int[][] readStates(String string){
  int[][] states=new int[0][];
  StringTokenizer tokenizer=new StringTokenizer(string,STATE_DELIMITER);
  int index=0;
  while (tokenizer.hasMoreTokens()) {
    states=Arrays.copyOf(states,states.length + 1);
    states[index]=readColors(tokenizer.nextToken());
    index++;
  }
  return states;
}",0.9895988112927192
28509,"private int[] readColors(String string){
  int[] colors=new int[0];
  StringTokenizer tokenizer=new StringTokenizer(string,COLOR_DELIMITER);
  int index=0;
  while (tokenizer.hasMoreTokens()) {
    Arrays.copyOf(colors,colors.length + 1);
    colors[index]=Integer.parseInt(tokenizer.nextToken());
    index++;
  }
  return colors;
}","private int[] readColors(String string){
  int[] colors=new int[0];
  StringTokenizer tokenizer=new StringTokenizer(string,COLOR_DELIMITER);
  int index=0;
  while (tokenizer.hasMoreTokens()) {
    colors=Arrays.copyOf(colors,colors.length + 1);
    colors[index]=Integer.parseInt(tokenizer.nextToken());
    index++;
  }
  return colors;
}",0.9895988112927192
28510,"private Value[] resolveArguments(Value data,int index){
  Value[] arguments=new Value[this.arguments.length];
  Value argument, resolved;
  for (int i=0; i < this.arguments.length; i++) {
    argument=this.arguments[i];
    if (argument.isBinding()) {
      resolved=argument.getAsBinding().evaluate(data,index);
    }
 else {
      resolved=argument;
    }
    arguments[i]=resolved;
  }
  return arguments;
}","private static Value[] resolveArguments(Value[] in,Value data,int index){
  Value[] out=new Value[in.length];
  Value argument, resolved;
  for (int i=0; i < in.length; i++) {
    argument=in[i];
    if (argument.isBinding()) {
      resolved=argument.getAsBinding().evaluate(data,index);
    }
 else {
      resolved=argument;
    }
    out[i]=resolved;
  }
  return out;
}",0.8443877551020408
28511,"private Result resolveData(Value data,int index){
  if (tokens.length == 1 && INDEX.equals(tokens[0])) {
    return Result.success(new Primitive(String.valueOf(index)));
  }
 else {
    Value elementToReturn=data;
    Value tempElement;
    Array tempArray;
    for (int i=0; i < tokens.length; i++) {
      String segment=tokens[i];
      if (elementToReturn == null) {
        return Result.NO_SUCH_DATA_PATH_EXCEPTION;
      }
      if (elementToReturn.isNull()) {
        return Result.NULL_EXCEPTION;
      }
      if (""String_Node_Str"".equals(segment)) {
        continue;
      }
      if (elementToReturn.isArray()) {
        tempArray=elementToReturn.getAsArray();
        if (INDEX.equals(segment)) {
          if (index < tempArray.size()) {
            elementToReturn=tempArray.get(index);
          }
 else {
            return Result.NO_SUCH_DATA_PATH_EXCEPTION;
          }
        }
 else         if (ARRAY_DATA_LENGTH_REFERENCE.equals(segment)) {
          elementToReturn=new Primitive(tempArray.size());
        }
 else         if (ARRAY_DATA_LAST_INDEX_REFERENCE.equals(segment)) {
          if (tempArray.size() == 0) {
            return Result.NO_SUCH_DATA_PATH_EXCEPTION;
          }
          elementToReturn=tempArray.get(tempArray.size() - 1);
        }
 else {
          try {
            index=Integer.parseInt(segment);
          }
 catch (          NumberFormatException e) {
            return Result.INVALID_DATA_PATH_EXCEPTION;
          }
          if (index < tempArray.size()) {
            elementToReturn=tempArray.get(index);
          }
 else {
            return Result.NO_SUCH_DATA_PATH_EXCEPTION;
          }
        }
      }
 else       if (elementToReturn.isObject()) {
        tempElement=elementToReturn.getAsObject().get(segment);
        if (tempElement != null) {
          elementToReturn=tempElement;
        }
 else {
          return Result.NO_SUCH_DATA_PATH_EXCEPTION;
        }
      }
 else       if (elementToReturn.isPrimitive()) {
        return Result.INVALID_DATA_PATH_EXCEPTION;
      }
 else {
        return Result.NO_SUCH_DATA_PATH_EXCEPTION;
      }
    }
    if (elementToReturn.isNull()) {
      return Result.NULL_EXCEPTION;
    }
    return Result.success(elementToReturn);
  }
}","private static Result resolveData(String[] tokens,Value data,int index){
  if (tokens.length == 1 && INDEX.equals(tokens[0])) {
    return Result.success(new Primitive(String.valueOf(index)));
  }
 else {
    Value elementToReturn=data;
    Value tempElement;
    Array tempArray;
    for (int i=0; i < tokens.length; i++) {
      String segment=tokens[i];
      if (elementToReturn == null) {
        return Result.NO_SUCH_DATA_PATH_EXCEPTION;
      }
      if (elementToReturn.isNull()) {
        return Result.NULL_EXCEPTION;
      }
      if (""String_Node_Str"".equals(segment)) {
        continue;
      }
      if (elementToReturn.isArray()) {
        tempArray=elementToReturn.getAsArray();
        if (INDEX.equals(segment)) {
          if (index < tempArray.size()) {
            elementToReturn=tempArray.get(index);
          }
 else {
            return Result.NO_SUCH_DATA_PATH_EXCEPTION;
          }
        }
 else         if (ARRAY_DATA_LENGTH_REFERENCE.equals(segment)) {
          elementToReturn=new Primitive(tempArray.size());
        }
 else         if (ARRAY_DATA_LAST_INDEX_REFERENCE.equals(segment)) {
          if (tempArray.size() == 0) {
            return Result.NO_SUCH_DATA_PATH_EXCEPTION;
          }
          elementToReturn=tempArray.get(tempArray.size() - 1);
        }
 else {
          try {
            index=Integer.parseInt(segment);
          }
 catch (          NumberFormatException e) {
            return Result.INVALID_DATA_PATH_EXCEPTION;
          }
          if (index < tempArray.size()) {
            elementToReturn=tempArray.get(index);
          }
 else {
            return Result.NO_SUCH_DATA_PATH_EXCEPTION;
          }
        }
      }
 else       if (elementToReturn.isObject()) {
        tempElement=elementToReturn.getAsObject().get(segment);
        if (tempElement != null) {
          elementToReturn=tempElement;
        }
 else {
          return Result.NO_SUCH_DATA_PATH_EXCEPTION;
        }
      }
 else       if (elementToReturn.isPrimitive()) {
        return Result.INVALID_DATA_PATH_EXCEPTION;
      }
 else {
        return Result.NO_SUCH_DATA_PATH_EXCEPTION;
      }
    }
    if (elementToReturn.isNull()) {
      return Result.NULL_EXCEPTION;
    }
    return Result.success(elementToReturn);
  }
}",0.994921616250828
28512,"/** 
 * @param data
 * @param index @return
 */
public Result evaluate(Value data,int index){
  Result result=resolveData(data,index);
  if (null == this.formatter) {
    return result;
  }
 else {
    Value resolved=this.formatter.format(result.value,index,resolveArguments(data,index));
    return Result.success(resolved);
  }
}","/** 
 * @param data
 * @param index @return
 */
public Result evaluate(Value data,int index){
  Result result=resolveData(tokens,data,index);
  if (null == this.formatter) {
    return result;
  }
 else {
    Value resolved=this.formatter.format(result.value,index,resolveArguments(arguments,data,index));
    return Result.success(resolved);
  }
}",0.974963181148748
28513,"private void handleDataDrivenChildren(ProteusLayoutInflater layoutInflater,ProteusView parent,ProteusViewManager viewManager,ObjectValue children,JsonObject data,Styles styles,int dataIndex){
  String dataPath=children.getAsString(ProteusConstants.DATA).substring(1);
  viewManager.setDataPathForChildren(dataPath);
  Result result=Utils.readJson(dataPath,data,dataIndex);
  JsonElement element=result.isSuccess() ? result.element : null;
  Layout childLayout=children.getAsLayout(ProteusConstants.LAYOUT);
  viewManager.setChildLayout(childLayout);
  if (null == element || element.isJsonNull()) {
    return;
  }
  int length=element.getAsJsonArray().size();
  ProteusView child;
  for (int index=0; index < length; index++) {
    child=layoutInflater.inflate(childLayout,data,(ViewGroup)parent,styles,index);
    if (child != null) {
      this.addView(parent,child);
    }
  }
}","private void handleDataDrivenChildren(ProteusLayoutInflater layoutInflater,ProteusView parent,ProteusViewManager viewManager,ObjectValue children,JsonObject data,Styles styles,int dataIndex){
  String binding=children.getAsString(ProteusConstants.DATA).substring(1);
  viewManager.setDataPathForChildren(binding);
  Result result=Binding.valueOf(binding).getExpression(0).evaluate(data,dataIndex);
  JsonElement element=result.isSuccess() ? result.element : null;
  Layout childLayout=children.getAsLayout(ProteusConstants.LAYOUT);
  viewManager.setChildLayout(childLayout);
  if (null == element || element.isJsonNull()) {
    return;
  }
  int length=element.getAsJsonArray().size();
  ProteusView child;
  for (int index=0; index < length; index++) {
    child=layoutInflater.inflate(childLayout,data,(ViewGroup)parent,styles,index);
    if (child != null) {
      this.addView(parent,child);
    }
  }
}",0.941307993292342
28514,"public static int parseGravity(String value){
  String[] gravities=value.split(""String_Node_Str"");
  int returnGravity=Gravity.NO_GRAVITY;
  for (  String gravity : gravities) {
    Primitive gravityValue=sGravityMap.get(gravity);
    if (null != gravityValue) {
      returnGravity|=gravityValue.getAsCharacter();
    }
  }
  return returnGravity;
}","public static int parseGravity(String value){
  String[] gravities=value.split(""String_Node_Str"");
  int returnGravity=Gravity.NO_GRAVITY;
  for (  String gravity : gravities) {
    Primitive gravityValue=sGravityMap.get(gravity);
    if (null != gravityValue) {
      returnGravity|=gravityValue.getAsInt();
    }
  }
  return returnGravity;
}",0.9827089337175792
28515,"public static Primitive getGravity(String value){
  return sGravityMap.get(value);
}","public static Primitive getGravity(String value){
  return new Primitive(parseGravity(value));
}",0.8555555555555555
28516,"protected void registerAttributeProcessors(){
  addAttributeProcessor(Attributes.View.OnClick,new EventProcessor<V>(){
    @Override public void setOnEventListener(    final V view,    final Value value){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent((ProteusView)view,EventType.OnClick,value);
        }
      }
);
    }
  }
);
  addAttributeProcessor(Attributes.View.Background,new DrawableResourceProcessor<V>(){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.height=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.width=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(value);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(value);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(value);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding((int)dimension,(int)dimension,(int)dimension,(int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding((int)dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding(view.getPaddingLeft(),(int)dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),(int)dimension,view.getPaddingBottom());
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),(int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,(int)dimension,(int)dimension,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,(int)dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,(int)dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setMinimumHeight((int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setMinimumWidth((int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      view.setAlpha(ParseHelper.parseFloat(value));
    }
  }
);
  addAttributeProcessor(Attributes.View.Visibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    Value value){
      view.setVisibility(ParseHelper.parseVisibility(value));
    }
  }
);
  addAttributeProcessor(Attributes.View.Invisibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    Value value){
      view.setVisibility(ParseHelper.parseInvisibility(value));
    }
  }
);
  addAttributeProcessor(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    final V view,    String value){
      if (view instanceof ProteusView) {
        view.setId(((ProteusView)view).getViewManager().getUniqueViewId(value));
      }
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        final String resourceName=value;
        view.setAccessibilityDelegate(new View.AccessibilityDelegate(){
          @Override public void onInitializeAccessibilityNodeInfo(          View host,          AccessibilityNodeInfo info){
            super.onInitializeAccessibilityNodeInfo(host,info);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
              String normalizedResourceName;
              if (!TextUtils.isEmpty(resourceName)) {
                String id;
                if (resourceName.startsWith(ID_STRING_START_PATTERN)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN.length());
                }
 else                 if (resourceName.startsWith(ID_STRING_START_PATTERN1)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN1.length());
                }
 else {
                  id=resourceName;
                }
                normalizedResourceName=view.getContext().getPackageName() + ID_STRING_NORMALIZED_PATTERN + id;
              }
 else {
                normalizedResourceName=""String_Node_Str"";
              }
              info.setViewIdResourceName(normalizedResourceName);
            }
          }
        }
);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      view.setContentDescription(value);
    }
  }
);
  addAttributeProcessor(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      boolean clickable=ParseHelper.parseBoolean(value);
      view.setClickable(clickable);
    }
  }
);
  addAttributeProcessor(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      view.setTag(value);
    }
  }
);
  addAttributeProcessor(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      boolean enabled=ParseHelper.parseBoolean(value);
      view.setEnabled(enabled);
    }
  }
);
  addAttributeProcessor(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      ProteusViewManager viewManager=((ProteusView)view).getViewManager();
      Layout layout=viewManager.getLayout();
      Styles styles=viewManager.getStyles();
      TypeParser handler=viewManager.getProteusLayoutInflater().getParser(layout.type);
      if (styles == null) {
        return;
      }
      String[] styleSet=value.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(styles.getStyle(styleName),layout,(ProteusView)view,(handler != null ? handler : ViewParser.this),viewManager.getProteusLayoutInflater());
        }
      }
    }
    private void process(    Map<Integer,Value> style,    Layout layout,    ProteusView proteusView,    TypeParser handler,    ProteusLayoutInflater builder){
      for (      Map.Entry<Integer,Value> entry : style.entrySet()) {
        builder.handleAttribute(handler,proteusView,entry.getKey(),entry.getValue());
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(value);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    V view,    String value){
switch (value) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addAttributeProcessor(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(V view,String value){
view.setFadingEdgeLength(ParseHelper.parseInt(value));
}
}
);
addAttributeProcessor(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
addAttributeProcessor(Attributes.View.TextAlignment,new StringAttributeProcessor<V>(){
@SuppressLint(""String_Node_Str"") @Override public void handle(V view,String value){
Integer textAlignment=ParseHelper.parseTextAlignment(value);
if (null != textAlignment) {
view.setTextAlignment(textAlignment);
}
}
}
);
}
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
}
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
}
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
}
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
}
addAttributeProcessor(Attributes.View.Above,createRelativeLayoutRuleProcessor(RelativeLayout.ABOVE));
addAttributeProcessor(Attributes.View.AlignBaseline,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_BASELINE));
addAttributeProcessor(Attributes.View.AlignBottom,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_BOTTOM));
addAttributeProcessor(Attributes.View.AlignLeft,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_LEFT));
addAttributeProcessor(Attributes.View.AlignRight,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_RIGHT));
addAttributeProcessor(Attributes.View.AlignTop,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_TOP));
addAttributeProcessor(Attributes.View.Below,createRelativeLayoutRuleProcessor(RelativeLayout.BELOW));
addAttributeProcessor(Attributes.View.ToLeftOf,createRelativeLayoutRuleProcessor(RelativeLayout.LEFT_OF));
addAttributeProcessor(Attributes.View.ToRightOf,createRelativeLayoutRuleProcessor(RelativeLayout.RIGHT_OF));
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
addAttributeProcessor(Attributes.View.AlignEnd,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_END));
addAttributeProcessor(Attributes.View.AlignStart,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_START));
addAttributeProcessor(Attributes.View.ToEndOf,createRelativeLayoutRuleProcessor(RelativeLayout.END_OF));
addAttributeProcessor(Attributes.View.ToStartOf,createRelativeLayoutRuleProcessor(RelativeLayout.START_OF));
}
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
}
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
}
addAttributeProcessor(Attributes.View.AlignParentBottom,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.CENTER_HORIZONTAL));
addAttributeProcessor(Attributes.View.AlignParentEnd,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.CENTER_IN_PARENT));
addAttributeProcessor(Attributes.View.AlignParentLeft,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.CENTER_VERTICAL));
addAttributeProcessor(Attributes.View.AlignParentRight,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_TOP));
addAttributeProcessor(Attributes.View.AlignParentStart,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_BOTTOM));
addAttributeProcessor(Attributes.View.CenterHorizontal,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_LEFT));
addAttributeProcessor(Attributes.View.CenterInParent,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_RIGHT));
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
addAttributeProcessor(Attributes.View.AlignParentTop,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_END));
addAttributeProcessor(Attributes.View.CenterVertical,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_START));
}
}","protected void registerAttributeProcessors(){
  addAttributeProcessor(Attributes.View.OnClick,new EventProcessor<V>(){
    @Override public void setOnEventListener(    final V view,    final Value value){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent((ProteusView)view,EventType.OnClick,value);
        }
      }
);
    }
  }
);
  addAttributeProcessor(Attributes.View.Background,new DrawableResourceProcessor<V>(){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.height=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.width=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(value);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(value);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(value);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding((int)dimension,(int)dimension,(int)dimension,(int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding((int)dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding(view.getPaddingLeft(),(int)dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),(int)dimension,view.getPaddingBottom());
    }
  }
);
  addAttributeProcessor(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),(int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,(int)dimension,(int)dimension,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,(int)dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,(int)dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setMinimumHeight((int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      view.setMinimumWidth((int)dimension);
    }
  }
);
  addAttributeProcessor(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    float dimension){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      view.setAlpha(ParseHelper.parseFloat(value));
    }
  }
);
  addAttributeProcessor(Attributes.View.Visibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    Value value){
      view.setVisibility(ParseHelper.parseVisibility(value));
    }
  }
);
  addAttributeProcessor(Attributes.View.Invisibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    Value value){
      view.setVisibility(ParseHelper.parseInvisibility(value));
    }
  }
);
  addAttributeProcessor(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    final V view,    String value){
      if (view instanceof ProteusView) {
        view.setId(((ProteusView)view).getViewManager().getUniqueViewId(value));
      }
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        final String resourceName=value;
        view.setAccessibilityDelegate(new View.AccessibilityDelegate(){
          @Override public void onInitializeAccessibilityNodeInfo(          View host,          AccessibilityNodeInfo info){
            super.onInitializeAccessibilityNodeInfo(host,info);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
              String normalizedResourceName;
              if (!TextUtils.isEmpty(resourceName)) {
                String id;
                if (resourceName.startsWith(ID_STRING_START_PATTERN)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN.length());
                }
 else                 if (resourceName.startsWith(ID_STRING_START_PATTERN1)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN1.length());
                }
 else {
                  id=resourceName;
                }
                normalizedResourceName=view.getContext().getPackageName() + ID_STRING_NORMALIZED_PATTERN + id;
              }
 else {
                normalizedResourceName=""String_Node_Str"";
              }
              info.setViewIdResourceName(normalizedResourceName);
            }
          }
        }
);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      view.setContentDescription(value);
    }
  }
);
  addAttributeProcessor(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      boolean clickable=ParseHelper.parseBoolean(value);
      view.setClickable(clickable);
    }
  }
);
  addAttributeProcessor(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      view.setTag(value);
    }
  }
);
  addAttributeProcessor(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      boolean enabled=ParseHelper.parseBoolean(value);
      view.setEnabled(enabled);
    }
  }
);
  addAttributeProcessor(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      ProteusViewManager viewManager=((ProteusView)view).getViewManager();
      Layout layout=viewManager.getLayout();
      Styles styles=viewManager.getStyles();
      TypeParser handler=viewManager.getProteusLayoutInflater().getParser(layout.type);
      if (styles == null) {
        return;
      }
      String[] styleSet=value.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(styles.getStyle(styleName),layout,(ProteusView)view,(handler != null ? handler : ViewParser.this),viewManager.getProteusLayoutInflater());
        }
      }
    }
    private void process(    Map<Integer,Value> style,    Layout layout,    ProteusView proteusView,    TypeParser handler,    ProteusLayoutInflater builder){
      for (      Map.Entry<Integer,Value> entry : style.entrySet()) {
        builder.handleAttribute(handler,proteusView,entry.getKey(),entry.getValue());
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    V view,    String value){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(value);
      }
    }
  }
);
  addAttributeProcessor(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    V view,    String value){
switch (value) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addAttributeProcessor(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(V view,String value){
view.setFadingEdgeLength(ParseHelper.parseInt(value));
}
}
);
addAttributeProcessor(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
addAttributeProcessor(Attributes.View.TextAlignment,new StringAttributeProcessor<V>(){
@SuppressLint(""String_Node_Str"") @Override public void handle(V view,String value){
Integer textAlignment=ParseHelper.parseTextAlignment(value);
if (null != textAlignment) {
view.setTextAlignment(textAlignment);
}
}
}
);
}
addAttributeProcessor(Attributes.View.Above,createRelativeLayoutRuleProcessor(RelativeLayout.ABOVE));
addAttributeProcessor(Attributes.View.AlignBaseline,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_BASELINE));
addAttributeProcessor(Attributes.View.AlignBottom,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_BOTTOM));
addAttributeProcessor(Attributes.View.AlignLeft,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_LEFT));
addAttributeProcessor(Attributes.View.AlignRight,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_RIGHT));
addAttributeProcessor(Attributes.View.AlignTop,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_TOP));
addAttributeProcessor(Attributes.View.Below,createRelativeLayoutRuleProcessor(RelativeLayout.BELOW));
addAttributeProcessor(Attributes.View.ToLeftOf,createRelativeLayoutRuleProcessor(RelativeLayout.LEFT_OF));
addAttributeProcessor(Attributes.View.ToRightOf,createRelativeLayoutRuleProcessor(RelativeLayout.RIGHT_OF));
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
addAttributeProcessor(Attributes.View.AlignEnd,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_END));
addAttributeProcessor(Attributes.View.AlignStart,createRelativeLayoutRuleProcessor(RelativeLayout.ALIGN_START));
addAttributeProcessor(Attributes.View.ToEndOf,createRelativeLayoutRuleProcessor(RelativeLayout.END_OF));
addAttributeProcessor(Attributes.View.ToStartOf,createRelativeLayoutRuleProcessor(RelativeLayout.START_OF));
}
addAttributeProcessor(Attributes.View.AlignParentTop,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_TOP));
addAttributeProcessor(Attributes.View.AlignParentRight,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_RIGHT));
addAttributeProcessor(Attributes.View.AlignParentBottom,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_BOTTOM));
addAttributeProcessor(Attributes.View.AlignParentLeft,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_LEFT));
addAttributeProcessor(Attributes.View.CenterHorizontal,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.CENTER_HORIZONTAL));
addAttributeProcessor(Attributes.View.CenterVertical,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.CENTER_VERTICAL));
addAttributeProcessor(Attributes.View.CenterInParent,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.CENTER_IN_PARENT));
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
addAttributeProcessor(Attributes.View.AlignParentStart,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_START));
addAttributeProcessor(Attributes.View.AlignParentEnd,createRelativeLayoutBooleanRuleProcessor(RelativeLayout.ALIGN_PARENT_END));
}
}",0.8242280923333244
28517,"/** 
 * @param value
 * @param context
 * @return
 */
@Override public Value parse(Value value,Context context){
  String string=value.getAsString();
  if (ParseHelper.isLocalResourceAttribute(string)) {
    return Style.valueOf(string);
  }
 else {
    return Dimension.valueOf(value.getAsString(),context);
  }
}","/** 
 * @param value
 * @param context
 * @return
 */
@Override public Value parse(Value value,Context context){
  String string=value.getAsString();
  if (ParseHelper.isLocalResourceAttribute(string)) {
    Style style=Style.valueOf(string);
    return null != style ? style : Dimension.ZERO;
  }
 else {
    return Dimension.valueOf(value.getAsString(),context);
  }
}",0.8976608187134503
28518,"@Nullable @Override public ProteusView onUnknownViewType(String type,View parent,JsonObject layout,JsonObject data,int index,Styles styles){
  return null;
}","@Nullable @Override public ProteusView onUnknownViewType(String type,View parent,LayoutParser layout,JsonObject data,Styles styles,int index){
  return null;
}",0.879746835443038
28519,"@Override protected void onCreate(Bundle savedInstanceState){
  gson=new Gson();
  styles=gson.fromJson(getJsonFromFile(R.raw.styles).getAsJsonObject(),Styles.class);
  Map<String,JsonObject> layoutProvider=getProviderFromFile(R.raw.layout_provider);
  pageLayout=getJsonFromFile(R.raw.page_layout).getAsJsonObject();
  data=getJsonFromFile(R.raw.data_init).getAsJsonObject();
  builder=new LayoutBuilderFactory().getDataAndViewParsingLayoutBuilder(layoutProvider);
  builder.setListener(callback);
  builder.setBitmapLoader(bitmapLoader);
  container=new FrameLayout(ProteusActivity.this);
  layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  super.onCreate(savedInstanceState);
}","@Override protected void onCreate(Bundle savedInstanceState){
  gson=new Gson();
  styles=gson.fromJson(getJsonFromFile(R.raw.styles).getAsJsonObject(),Styles.class);
  Map<String,Object> layoutProvider=getProviderFromFile(R.raw.layout_provider);
  pageLayout=getJsonFromFile(R.raw.page_layout).getAsJsonObject();
  data=getJsonFromFile(R.raw.data_init).getAsJsonObject();
  builder=new LayoutBuilderFactory().getDataAndViewParsingLayoutBuilder(layoutProvider);
  builder.setListener(callback);
  builder.setBitmapLoader(bitmapLoader);
  container=new FrameLayout(ProteusActivity.this);
  layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  super.onCreate(savedInstanceState);
}",0.9973118279569892
28520,"@Override public void onUnknownAttribute(String attribute,JsonElement value,ProteusView view){
  Log.i(""String_Node_Str"",attribute + ""String_Node_Str"" + view.getViewManager().getLayout().toString());
}","@Override public void onUnknownAttribute(ProteusView view,String attribute,LayoutParser parser){
}",0.4481605351170568
28521,"@Override public Adapter onAdapterRequired(ProteusView parent,List<ProteusView> children,JsonObject layout){
  return null;
}","@Override public Adapter onAdapterRequired(ProteusView parent,List<ProteusView> children,LayoutParser layout){
  return null;
}",0.9285714285714286
28522,"@Override public JsonObject onLayoutRequired(String type,ProteusView parent){
  return null;
}","@Override public JsonObject onLayoutRequired(String type,LayoutParser parent){
  return null;
}",0.91005291005291
28523,"@Override public PagerAdapter onPagerAdapterRequired(ProteusView parent,List<ProteusView> children,JsonObject layout){
  return null;
}","@Override public PagerAdapter onPagerAdapterRequired(ProteusView parent,List<ProteusView> children,LayoutParser layout){
  return null;
}",0.9338235294117648
28524,"@Override public void getBitmap(String imageUrl,final ImageLoaderCallback callback,View view,JsonObject layout){
  URL url;
  try {
    url=new URL(imageUrl);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return;
  }
  new AsyncTask<URL,Integer,Bitmap>(){
    @Override protected Bitmap doInBackground(    URL... params){
      try {
        return BitmapFactory.decodeStream(params[0].openConnection().getInputStream());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      return null;
    }
    protected void onPostExecute(    Bitmap result){
      callback.onResponse(result);
    }
  }
.execute(url);
}","@Override public void getBitmap(ProteusView view,String imageUrl,final ImageLoaderCallback imageLoaderCallback,LayoutParser parser){
  URL url;
  try {
    url=new URL(imageUrl);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
    return;
  }
  new AsyncTask<URL,Integer,Bitmap>(){
    @Override protected Bitmap doInBackground(    URL... params){
      try {
        return BitmapFactory.decodeStream(params[0].openConnection().getInputStream());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      return null;
    }
    protected void onPostExecute(    Bitmap result){
      imageLoaderCallback.onResponse(result);
    }
  }
.execute(url);
}",0.9416112342941612
28525,"@Override View createAndBindView(){
  proteusView=builder.build(container,pageLayout,data,0,styles);
  return (View)proteusView;
}","@Override View createAndBindView(){
  proteusView=builder.build(container,new JsonLayoutParser(pageLayout),data,styles,-1);
  return (View)proteusView;
}",0.9045936395759716
28526,"@Override public View onEvent(ProteusView view,JsonElement value,EventType eventType){
  Log.d(""String_Node_Str"",value.toString());
  return (View)view;
}","@Override public View onEvent(ProteusView view,EventType eventType,LayoutParser value){
  return null;
}",0.6666666666666666
28527,"protected void onPostExecute(Bitmap result){
  callback.onResponse(result);
}","protected void onPostExecute(Bitmap result){
  imageLoaderCallback.onResponse(result);
}",0.9212121212121211
28528,"private Map<String,JsonObject> getProviderFromFile(int resId){
  InputStream inputStream=getResources().openRawResource(resId);
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  return gson.fromJson(reader,(new TypeToken<Map<String,JsonObject>>(){
  }
).getType());
}","private Map<String,Object> getProviderFromFile(int resId){
  InputStream inputStream=getResources().openRawResource(resId);
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  return gson.fromJson(reader,(new TypeToken<Map<String,JsonObject>>(){
  }
).getType());
}",0.9932659932659932
28529,"public Layout read(String type,ProteusLayoutInflater inflater,JsonReader in) throws IOException {
  List<Attribute> attributes=new ArrayList<>();
  Map<String,String> scope=null;
  String name;
  while (in.hasNext()) {
    name=in.nextName();
    if (ProteusConstants.SCOPE.equals(name)) {
      scope=readScope(in);
    }
 else {
      int id=inflater.getAttributeId(name,type);
      if (-1 != id) {
        attributes.add(new Attribute(id,VALUE_TYPE_ADAPTER.read(in)));
      }
 else {
      }
    }
  }
  in.endObject();
  return new Layout(type,attributes.size() > 0 ? attributes : null,scope);
}","public Layout read(String type,ProteusLayoutInflater inflater,JsonReader in) throws IOException {
  List<Attribute> attributes=new ArrayList<>();
  Map<String,String> scope=null;
  String name;
  while (in.hasNext()) {
    name=in.nextName();
    if (ProteusConstants.SCOPE.equals(name)) {
      scope=readScope(in);
    }
 else {
      int id=inflater.getAttributeId(name,type);
      if (-1 != id) {
        attributes.add(new Attribute(id,VALUE_TYPE_ADAPTER.read(in)));
      }
 else {
        in.skipValue();
      }
    }
  }
  in.endObject();
  return new Layout(type,attributes.size() > 0 ? attributes : null,scope);
}",0.9804241435562806
28530,"protected void prepareHandlers(){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(){
    @Override public void setOnEventListener(    final V view,    final LayoutParser parser){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent((ProteusView)view,EventType.OnClick,parser);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new DrawableResourceProcessor<V>(){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.height=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addHandler(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.width=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding((int)dimension,(int)dimension,(int)dimension,(int)dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding((int)dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding(view.getPaddingLeft(),(int)dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),(int)dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),(int)dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,(int)dimension,(int)dimension,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,(int)dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,(int)dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setMinimumHeight((int)dimension);
    }
  }
);
  addHandler(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setMinimumWidth((int)dimension);
    }
  }
);
  addHandler(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    String key,    LayoutParser parser){
      view.setVisibility(ParseHelper.parseVisibility(parser));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    String key,    LayoutParser parser){
      view.setVisibility(ParseHelper.parseInvisibility(parser));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    final V view){
      if (view instanceof ProteusView) {
        view.setId(((ProteusView)view).getViewManager().getUniqueViewId(attributeValue));
      }
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        final String resourceName=attributeValue;
        view.setAccessibilityDelegate(new View.AccessibilityDelegate(){
          @Override public void onInitializeAccessibilityNodeInfo(          View host,          AccessibilityNodeInfo info){
            super.onInitializeAccessibilityNodeInfo(host,info);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
              String normalizedResourceName;
              if (!TextUtils.isEmpty(resourceName)) {
                String id;
                if (resourceName.startsWith(ID_STRING_START_PATTERN)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN.length());
                }
 else                 if (resourceName.startsWith(ID_STRING_START_PATTERN1)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN1.length());
                }
 else {
                  id=resourceName;
                }
                normalizedResourceName=view.getContext().getPackageName() + ID_STRING_NORMALIZED_PATTERN + id;
              }
 else {
                normalizedResourceName=""String_Node_Str"";
              }
              info.setViewIdResourceName(normalizedResourceName);
            }
          }
        }
);
      }
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    String key,    LayoutParser parser){
      Drawable border=Utils.getBorderDrawable(parser,view.getContext());
      if (border == null) {
        return;
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      ProteusViewManager viewManager=((ProteusView)view).getViewManager();
      LayoutParser parser=viewManager.getLayoutParser();
      Styles styles=viewManager.getStyles();
      TypeHandler handler=viewManager.getProteusLayoutInflater().getHandler(parser.getType());
      if (styles == null) {
        return;
      }
      String[] styleSet=attributeValue.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(parser.getValueParser(styles.getStyle(styleName)),parser,(ProteusView)view,(handler != null ? handler : ViewParser.this),viewManager.getProteusLayoutInflater());
        }
      }
    }
    private void process(    LayoutParser style,    LayoutParser layout,    ProteusView proteusView,    TypeHandler handler,    ProteusLayoutInflater builder){
      while (style.hasNext()) {
        style.next();
        style.peek();
        String key=layout.getName();
        if (!layout.isNull(key)) {
          continue;
        }
        builder.handleAttribute(handler,proteusView,key,style);
      }
    }
  }
);
  addHandler(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(attributeValue);
      }
    }
  }
);
  addHandler(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
switch (attributeValue) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addHandler(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
view.setFadingEdgeLength(ParseHelper.parseInt(attributeValue));
}
}
);
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
}
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
}
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
}
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
}
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
}
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
}
StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
if (view instanceof ProteusView) {
int id=((ProteusView)view).getViewManager().getUniqueViewId(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
if (rule != null) {
ParseHelper.addRelativeLayoutRule(view,rule,id);
}
}
}
}
;
StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
if (rule != null) {
ParseHelper.addRelativeLayoutRule(view,rule,trueOrFalse);
}
}
}
;
addHandler(Attributes.View.Above,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
addHandler(Attributes.View.Below,relativeLayoutProcessor);
addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
addHandler(Attributes.View.TextAlignment,new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
Integer textAlignment=ParseHelper.parseTextAlignment(attributeValue);
if (null != textAlignment) {
view.setTextAlignment(textAlignment);
}
}
}
}
);
}","protected void prepareHandlers(){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(){
    @Override public void setOnEventListener(    final V view,    final LayoutParser parser){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent((ProteusView)view,EventType.OnClick,parser);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new DrawableResourceProcessor<V>(){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.height=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addHandler(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.width=(int)dimension;
        view.setLayoutParams(layoutParams);
      }
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding((int)dimension,(int)dimension,(int)dimension,(int)dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding((int)dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding(view.getPaddingLeft(),(int)dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),(int)dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),(int)dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,(int)dimension,(int)dimension,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,(int)dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,(int)dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (ProteusConstants.isLoggingEnabled()) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setMinimumHeight((int)dimension);
    }
  }
);
  addHandler(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      view.setMinimumWidth((int)dimension);
    }
  }
);
  addHandler(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String key,    float dimension,    LayoutParser parser){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    String key,    LayoutParser parser){
      view.setVisibility(ParseHelper.parseVisibility(parser));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    String key,    LayoutParser parser){
      view.setVisibility(ParseHelper.parseInvisibility(parser));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    final V view){
      if (view instanceof ProteusView) {
        view.setId(((ProteusView)view).getViewManager().getUniqueViewId(attributeValue));
      }
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        final String resourceName=attributeValue;
        view.setAccessibilityDelegate(new View.AccessibilityDelegate(){
          @Override public void onInitializeAccessibilityNodeInfo(          View host,          AccessibilityNodeInfo info){
            super.onInitializeAccessibilityNodeInfo(host,info);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
              String normalizedResourceName;
              if (!TextUtils.isEmpty(resourceName)) {
                String id;
                if (resourceName.startsWith(ID_STRING_START_PATTERN)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN.length());
                }
 else                 if (resourceName.startsWith(ID_STRING_START_PATTERN1)) {
                  id=resourceName.substring(ID_STRING_START_PATTERN1.length());
                }
 else {
                  id=resourceName;
                }
                normalizedResourceName=view.getContext().getPackageName() + ID_STRING_NORMALIZED_PATTERN + id;
              }
 else {
                normalizedResourceName=""String_Node_Str"";
              }
              info.setViewIdResourceName(normalizedResourceName);
            }
          }
        }
);
      }
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new AttributeProcessor<V>(){
    @Override public void handle(    V view,    String key,    LayoutParser parser){
      Drawable border=Utils.getBorderDrawable(parser,view.getContext());
      if (border == null) {
        return;
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      ProteusViewManager viewManager=((ProteusView)view).getViewManager();
      LayoutParser parser=viewManager.getLayoutParser();
      Styles styles=viewManager.getStyles();
      TypeHandler handler=viewManager.getProteusLayoutInflater().getHandler(parser.getType());
      if (styles == null) {
        return;
      }
      String[] styleSet=attributeValue.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(parser.getValueParser(styles.getStyle(styleName)),parser,(ProteusView)view,(handler != null ? handler : ViewParser.this),viewManager.getProteusLayoutInflater());
        }
      }
    }
    private void process(    LayoutParser style,    LayoutParser layout,    ProteusView proteusView,    TypeHandler handler,    ProteusLayoutInflater builder){
      while (style.hasNext()) {
        style.next();
        String key=style.getName();
        if (!layout.isNull(key)) {
          continue;
        }
        builder.handleAttribute(handler,proteusView,key,style.peek());
      }
    }
  }
);
  addHandler(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(attributeValue);
      }
    }
  }
);
  addHandler(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    String attributeKey,    String attributeValue,    V view){
switch (attributeValue) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addHandler(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
view.setFadingEdgeLength(ParseHelper.parseInt(attributeValue));
}
}
);
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
}
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
}
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
}
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
}
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
}
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
}
StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
if (view instanceof ProteusView) {
int id=((ProteusView)view).getViewManager().getUniqueViewId(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
if (rule != null) {
ParseHelper.addRelativeLayoutRule(view,rule,id);
}
}
}
}
;
StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
if (rule != null) {
ParseHelper.addRelativeLayoutRule(view,rule,trueOrFalse);
}
}
}
;
addHandler(Attributes.View.Above,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
addHandler(Attributes.View.Below,relativeLayoutProcessor);
addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
addHandler(Attributes.View.TextAlignment,new StringAttributeProcessor<V>(){
@Override public void handle(String attributeKey,String attributeValue,V view){
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
Integer textAlignment=ParseHelper.parseTextAlignment(attributeValue);
if (null != textAlignment) {
view.setTextAlignment(textAlignment);
}
}
}
}
);
}",0.9920463801446984
28531,"private void process(LayoutParser style,LayoutParser layout,ProteusView proteusView,TypeHandler handler,ProteusLayoutInflater builder){
  while (style.hasNext()) {
    style.next();
    style.peek();
    String key=layout.getName();
    if (!layout.isNull(key)) {
      continue;
    }
    builder.handleAttribute(handler,proteusView,key,style);
  }
}","private void process(LayoutParser style,LayoutParser layout,ProteusView proteusView,TypeHandler handler,ProteusLayoutInflater builder){
  while (style.hasNext()) {
    style.next();
    String key=style.getName();
    if (!layout.isNull(key)) {
      continue;
    }
    builder.handleAttribute(handler,proteusView,key,style.peek());
  }
}",0.6202898550724638
28532,"@Override protected void prepareHandlers(){
  super.prepareHandlers();
  addHandler(Attributes.ProgressBar.ProgressTint,new AttributeProcessor<T>(){
    @Override public void handle(    T view,    String key,    LayoutParser parser){
      if (!parser.isObject()) {
        return;
      }
      parser.peek();
      int background=Color.TRANSPARENT;
      int progress=Color.TRANSPARENT;
      String value=parser.getString(""String_Node_Str"");
      if (value != null) {
        background=ParseHelper.parseColor(value);
      }
      value=parser.getString(""String_Node_Str"");
      if (value != null) {
        progress=ParseHelper.parseColor(value);
      }
      view.setProgressDrawable(getLayerDrawable(progress,background));
    }
  }
);
}","@Override protected void prepareHandlers(){
  super.prepareHandlers();
  addHandler(Attributes.ProgressBar.ProgressTint,new AttributeProcessor<T>(){
    @Override public void handle(    T view,    String key,    LayoutParser parser){
      if (!parser.isObject()) {
        return;
      }
      parser=parser.peek();
      int background=Color.TRANSPARENT;
      int progress=Color.TRANSPARENT;
      String value=parser.getString(""String_Node_Str"");
      if (value != null) {
        background=ParseHelper.parseColor(value);
      }
      value=parser.getString(""String_Node_Str"");
      if (value != null) {
        progress=ParseHelper.parseColor(value);
      }
      view.setProgressDrawable(getLayerDrawable(progress,background));
    }
  }
);
}",0.995336442371752
28533,"@Override public void handle(T view,String key,LayoutParser parser){
  if (!parser.isObject()) {
    return;
  }
  parser.peek();
  int background=Color.TRANSPARENT;
  int progress=Color.TRANSPARENT;
  String value=parser.getString(""String_Node_Str"");
  if (value != null) {
    background=ParseHelper.parseColor(value);
  }
  value=parser.getString(""String_Node_Str"");
  if (value != null) {
    progress=ParseHelper.parseColor(value);
  }
  view.setProgressDrawable(getLayerDrawable(progress,background));
}","@Override public void handle(T view,String key,LayoutParser parser){
  if (!parser.isObject()) {
    return;
  }
  parser=parser.peek();
  int background=Color.TRANSPARENT;
  int progress=Color.TRANSPARENT;
  String value=parser.getString(""String_Node_Str"");
  if (value != null) {
    background=ParseHelper.parseColor(value);
  }
  value=parser.getString(""String_Node_Str"");
  if (value != null) {
    progress=ParseHelper.parseColor(value);
  }
  view.setProgressDrawable(getLayerDrawable(progress,background));
}",0.9931707317073172
28534,"@Override protected void prepareHandlers(){
  super.prepareHandlers();
  addHandler(Attributes.ProgressBar.Max,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      view.setMax((int)ParseHelper.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.Progress,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      view.setProgress((int)ParseHelper.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.ProgressTint,new AttributeProcessor<T>(){
    @Override public void handle(    T view,    String key,    LayoutParser parser){
      if (!parser.isObject()) {
        return;
      }
      parser.peek();
      int background=Color.TRANSPARENT;
      int progress=Color.TRANSPARENT;
      String value=parser.getString(""String_Node_Str"");
      if (value != null) {
        background=ParseHelper.parseColor(value);
      }
      value=parser.getString(""String_Node_Str"");
      if (value != null) {
        progress=ParseHelper.parseColor(value);
      }
      view.setProgressDrawable(getLayerDrawable(progress,background));
    }
  }
);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    addHandler(Attributes.ProgressBar.SecondaryProgressTint,new ColorResourceProcessor<T>(){
      @Override public void setColor(      T view,      int color){
      }
      @Override public void setColor(      T view,      ColorStateList colors){
        view.setSecondaryProgressTintList(colors);
      }
    }
);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    addHandler(Attributes.ProgressBar.IndeterminateTint,new ColorResourceProcessor<T>(){
      @Override public void setColor(      T view,      int color){
      }
      @Override public void setColor(      T view,      ColorStateList colors){
        view.setIndeterminateTintList(colors);
      }
    }
);
  }
}","@Override protected void prepareHandlers(){
  super.prepareHandlers();
  addHandler(Attributes.ProgressBar.Max,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      view.setMax((int)ParseHelper.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.Progress,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      view.setProgress((int)ParseHelper.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.ProgressTint,new AttributeProcessor<T>(){
    @Override public void handle(    T view,    String key,    LayoutParser parser){
      if (!parser.isObject()) {
        return;
      }
      parser=parser.peek();
      int background=Color.TRANSPARENT;
      int progress=Color.TRANSPARENT;
      String value=parser.getString(""String_Node_Str"");
      if (value != null) {
        background=ParseHelper.parseColor(value);
      }
      value=parser.getString(""String_Node_Str"");
      if (value != null) {
        progress=ParseHelper.parseColor(value);
      }
      view.setProgressDrawable(getLayerDrawable(progress,background));
    }
  }
);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    addHandler(Attributes.ProgressBar.SecondaryProgressTint,new ColorResourceProcessor<T>(){
      @Override public void setColor(      T view,      int color){
      }
      @Override public void setColor(      T view,      ColorStateList colors){
        view.setSecondaryProgressTintList(colors);
      }
    }
);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    addHandler(Attributes.ProgressBar.IndeterminateTint,new ColorResourceProcessor<T>(){
      @Override public void setColor(      T view,      int color){
      }
      @Override public void setColor(      T view,      ColorStateList colors){
        view.setIndeterminateTintList(colors);
      }
    }
);
  }
}",0.9982660391379736
28535,"@Override public void handle(T view,String key,LayoutParser parser){
  if (!parser.isObject()) {
    return;
  }
  parser.peek();
  int background=Color.TRANSPARENT;
  int progress=Color.TRANSPARENT;
  String value=parser.getString(""String_Node_Str"");
  if (value != null) {
    background=ParseHelper.parseColor(value);
  }
  value=parser.getString(""String_Node_Str"");
  if (value != null) {
    progress=ParseHelper.parseColor(value);
  }
  view.setProgressDrawable(getLayerDrawable(progress,background));
}","@Override public void handle(T view,String key,LayoutParser parser){
  if (!parser.isObject()) {
    return;
  }
  parser=parser.peek();
  int background=Color.TRANSPARENT;
  int progress=Color.TRANSPARENT;
  String value=parser.getString(""String_Node_Str"");
  if (value != null) {
    background=ParseHelper.parseColor(value);
  }
  value=parser.getString(""String_Node_Str"");
  if (value != null) {
    progress=ParseHelper.parseColor(value);
  }
  view.setProgressDrawable(getLayerDrawable(progress,background));
}",0.9931707317073172
28536,"/** 
 * This block handles different drawables. Selector and LayerListDrawable are handled here. Override this to handle more types of drawables
 * @param view
 * @param attributeKey
 */
protected void handleElement(V view,String attributeKey,LayoutParser parser){
  String type=parser.getString(TYPE);
switch (type) {
case DRAWABLE_SELECTOR:
    final StateListDrawable stateListDrawable=new StateListDrawable();
  if (parser.isArray(CHILDREN)) {
    parser.peek(CHILDREN);
    while (parser.hasNext()) {
      parser.next();
      final Pair<int[],LayoutParser> state=ParseHelper.parseState(parser);
      if (state != null) {
        DrawableResourceProcessor<V> processor=new DrawableResourceProcessor<V>(){
          @Override public void setDrawable(          V view,          Drawable drawable){
            stateListDrawable.addState(state.first,drawable);
          }
        }
;
        processor.handle(view,attributeKey,state.second);
      }
    }
  }
setDrawable(view,stateListDrawable);
break;
case DRAWABLE_SHAPE:
GradientDrawable gradientDrawable=loadGradientDrawable(view.getContext(),parser);
if (null != gradientDrawable) {
setDrawable(view,gradientDrawable);
}
break;
case DRAWABLE_LAYER_LIST:
final List<Pair<Integer,Drawable>> drawables=new ArrayList<>();
if (parser.isArray(CHILDREN)) {
parser.peek(CHILDREN);
while (parser.hasNext()) {
parser.next();
final Pair<Integer,LayoutParser> layerPair=ParseHelper.parseLayer(parser);
if (null != layerPair) {
DrawableResourceProcessor<V> processor=new DrawableResourceProcessor<V>(){
@Override public void setDrawable(V view,Drawable drawable){
drawables.add(new Pair<>(layerPair.first,drawable));
onLayerDrawableFinish(view,drawables);
}
}
;
processor.handle(view,attributeKey,layerPair.second);
}
}
}
break;
case DRAWABLE_LEVEL_LIST:
final LevelListDrawable levelListDrawable=new LevelListDrawable();
if (parser.isArray(CHILDREN)) {
parser.peek(CHILDREN);
while (parser.hasNext()) {
parser.next();
}
}
break;
}
}","/** 
 * This block handles different drawables. Selector and LayerListDrawable are handled here. Override this to handle more types of drawables
 * @param view
 * @param attributeKey
 */
protected void handleElement(V view,String attributeKey,LayoutParser parser){
  String type=parser.getString(TYPE);
  LayoutParser children;
switch (type) {
case DRAWABLE_SELECTOR:
    final StateListDrawable stateListDrawable=new StateListDrawable();
  if (parser.isArray(CHILDREN)) {
    children=parser.peek(CHILDREN);
    while (children.hasNext()) {
      children.next();
      final Pair<int[],LayoutParser> state=ParseHelper.parseState(children);
      if (state != null) {
        DrawableResourceProcessor<V> processor=new DrawableResourceProcessor<V>(){
          @Override public void setDrawable(          V view,          Drawable drawable){
            stateListDrawable.addState(state.first,drawable);
          }
        }
;
        processor.handle(view,attributeKey,state.second);
      }
    }
  }
setDrawable(view,stateListDrawable);
break;
case DRAWABLE_SHAPE:
GradientDrawable gradientDrawable=loadGradientDrawable(view.getContext(),parser);
if (null != gradientDrawable) {
setDrawable(view,gradientDrawable);
}
break;
case DRAWABLE_LAYER_LIST:
final List<Pair<Integer,Drawable>> drawables=new ArrayList<>();
if (parser.isArray(CHILDREN)) {
children=parser.peek(CHILDREN);
while (children.hasNext()) {
children.next();
final Pair<Integer,LayoutParser> layerPair=ParseHelper.parseLayer(children);
if (null != layerPair) {
DrawableResourceProcessor<V> processor=new DrawableResourceProcessor<V>(){
@Override public void setDrawable(V view,Drawable drawable){
drawables.add(new Pair<>(layerPair.first,drawable));
onLayerDrawableFinish(view,drawables);
}
}
;
processor.handle(view,attributeKey,layerPair.second);
}
}
}
break;
case DRAWABLE_LEVEL_LIST:
final LevelListDrawable levelListDrawable=new LevelListDrawable();
if (parser.isArray(CHILDREN)) {
children=parser.peek(CHILDREN);
while (children.hasNext()) {
children.next();
}
}
break;
}
}",0.9593052109181142
28537,"public static GradientDrawable loadGradientDrawable(Context context,LayoutParser parser){
  return null;
}","@Nullable public static GradientDrawable loadGradientDrawable(Context context,LayoutParser parser){
  return null;
}",0.954954954954955
28538,"@Nullable private static ColorStateList inflateFromParser(Context context,LayoutParser parser){
  ColorStateList result=null;
  if (parser.isString(""String_Node_Str"")) {
    String colorType=parser.getString(""String_Node_Str"");
    if (TextUtils.equals(colorType,""String_Node_Str"")) {
      if (parser.isArray(""String_Node_Str"")) {
        parser.peek();
        int listAllocated=20;
        int listSize=0;
        int[] colorList=new int[listAllocated];
        int[][] stateSpecList=new int[listAllocated][];
        while (parser.hasNext()) {
          if (!parser.isObject()) {
            continue;
          }
          parser.peek();
          if (parser.size() == 0) {
            continue;
          }
          int j=0;
          Integer baseColor=null;
          float alphaMod=1.0f;
          int[] stateSpec=new int[parser.size() - 1];
          boolean ignoreItem=false;
          while (parser.hasNext()) {
            parser.next();
            if (ignoreItem) {
              break;
            }
            if (!parser.isString()) {
              continue;
            }
            Integer attributeId=getAttribute(parser.getName());
            if (null != attributeId) {
switch (attributeId) {
case android.R.attr.type:
                if (!TextUtils.equals(""String_Node_Str"",parser.getString())) {
                  ignoreItem=true;
                }
              break;
case android.R.attr.color:
            String colorRes=parser.getString();
          if (!TextUtils.isEmpty(colorRes)) {
            baseColor=getColorFromAttributeValue(context,colorRes);
          }
        break;
case android.R.attr.alpha:
      String alphaStr=parser.getString();
    if (!TextUtils.isEmpty(alphaStr)) {
      alphaMod=Float.parseFloat(alphaStr);
    }
  break;
default :
stateSpec[j++]=parser.getBoolean() ? attributeId : -attributeId;
break;
}
}
}
if (!ignoreItem) {
stateSpec=StateSet.trimStateSet(stateSpec,j);
if (null == baseColor) {
throw new IllegalStateException(""String_Node_Str"");
}
if (listSize + 1 >= listAllocated) {
listAllocated=idealIntArraySize(listSize + 1);
int[] ncolor=new int[listAllocated];
System.arraycopy(colorList,0,ncolor,0,listSize);
int[][] nstate=new int[listAllocated][];
System.arraycopy(stateSpecList,0,nstate,0,listSize);
colorList=ncolor;
stateSpecList=nstate;
}
final int color=modulateColorAlpha(baseColor,alphaMod);
colorList[listSize]=color;
stateSpecList[listSize]=stateSpec;
listSize++;
}
}
if (listSize > 0) {
int[] colors=new int[listSize];
int[][] stateSpecs=new int[listSize][];
System.arraycopy(colorList,0,colors,0,listSize);
System.arraycopy(stateSpecList,0,stateSpecs,0,listSize);
result=new ColorStateList(stateSpecs,colors);
}
}
}
}
return result;
}","@Nullable private static ColorStateList inflateFromParser(Context context,LayoutParser parser){
  ColorStateList result=null;
  if (parser.isString(""String_Node_Str"")) {
    String colorType=parser.getString(""String_Node_Str"");
    if (TextUtils.equals(colorType,""String_Node_Str"")) {
      if (parser.isArray(""String_Node_Str"")) {
        LayoutParser children=parser.peek(""String_Node_Str"");
        LayoutParser child;
        int listAllocated=20;
        int listSize=0;
        int[] colorList=new int[listAllocated];
        int[][] stateSpecList=new int[listAllocated][];
        while (children.hasNext()) {
          children.next();
          if (!children.isObject()) {
            continue;
          }
          child=children.peek();
          if (child.size() == 0) {
            continue;
          }
          int j=0;
          Integer baseColor=null;
          float alphaMod=1.0f;
          int[] stateSpec=new int[child.size() - 1];
          boolean ignoreItem=false;
          while (child.hasNext()) {
            child.next();
            if (ignoreItem) {
              break;
            }
            if (!child.isString()) {
              continue;
            }
            Integer attributeId=getAttribute(child.getName());
            if (null != attributeId) {
switch (attributeId) {
case android.R.attr.type:
                if (!TextUtils.equals(""String_Node_Str"",child.getString())) {
                  ignoreItem=true;
                }
              break;
case android.R.attr.color:
            String colorRes=child.getString();
          if (!TextUtils.isEmpty(colorRes)) {
            baseColor=getColorFromAttributeValue(context,colorRes);
          }
        break;
case android.R.attr.alpha:
      String alphaStr=child.getString();
    if (!TextUtils.isEmpty(alphaStr)) {
      alphaMod=Float.parseFloat(alphaStr);
    }
  break;
default :
stateSpec[j++]=child.getBoolean() ? attributeId : -attributeId;
break;
}
}
}
if (!ignoreItem) {
stateSpec=StateSet.trimStateSet(stateSpec,j);
if (null == baseColor) {
throw new IllegalStateException(""String_Node_Str"");
}
if (listSize + 1 >= listAllocated) {
listAllocated=idealIntArraySize(listSize + 1);
int[] ncolor=new int[listAllocated];
System.arraycopy(colorList,0,ncolor,0,listSize);
int[][] nstate=new int[listAllocated][];
System.arraycopy(stateSpecList,0,nstate,0,listSize);
colorList=ncolor;
stateSpecList=nstate;
}
final int color=modulateColorAlpha(baseColor,alphaMod);
colorList[listSize]=color;
stateSpecList[listSize]=stateSpec;
listSize++;
}
}
if (listSize > 0) {
int[] colors=new int[listSize];
int[][] stateSpecs=new int[listSize][];
System.arraycopy(colorList,0,colors,0,listSize);
System.arraycopy(stateSpecList,0,stateSpecs,0,listSize);
result=new ColorStateList(stateSpecs,colors);
}
}
}
}
return result;
}",0.9541184971098264
28539,"public static Drawable getBorderDrawable(LayoutParser parser,Context context){
  if (!parser.isObject() || parser.isNull()) {
    return null;
  }
  float cornerRadius=0;
  int borderWidth=0, borderColor=Color.TRANSPARENT, bgColor=Color.TRANSPARENT;
  parser.peek();
  String value=parser.getString(ATTRIBUTE_BG_COLOR);
  if (value != null && !value.equals(""String_Node_Str"")) {
    bgColor=ParseHelper.parseColor(value);
  }
  value=parser.getString(ATTRIBUTE_BORDER_COLOR);
  if (value != null) {
    borderColor=ParseHelper.parseColor(value);
  }
  value=parser.getString(ATTRIBUTE_BORDER_RADIUS);
  if (value != null) {
    cornerRadius=ParseHelper.parseDimension(value,context);
  }
  value=parser.getString(ATTRIBUTE_BORDER_WIDTH);
  if (value != null) {
    borderWidth=(int)ParseHelper.parseDimension(value,context);
  }
  GradientDrawable border=new GradientDrawable();
  border.setCornerRadius(cornerRadius);
  border.setShape(GradientDrawable.RECTANGLE);
  border.setStroke(borderWidth,borderColor);
  border.setColor(bgColor);
  return border;
}","public static Drawable getBorderDrawable(LayoutParser parser,Context context){
  if (!parser.isObject() || parser.isNull()) {
    return null;
  }
  float cornerRadius=0;
  int borderWidth=0, borderColor=Color.TRANSPARENT, bgColor=Color.TRANSPARENT;
  parser=parser.peek();
  String value=parser.getString(ATTRIBUTE_BG_COLOR);
  if (value != null && !value.equals(""String_Node_Str"")) {
    bgColor=ParseHelper.parseColor(value);
  }
  value=parser.getString(ATTRIBUTE_BORDER_COLOR);
  if (value != null) {
    borderColor=ParseHelper.parseColor(value);
  }
  value=parser.getString(ATTRIBUTE_BORDER_RADIUS);
  if (value != null) {
    cornerRadius=ParseHelper.parseDimension(value,context);
  }
  value=parser.getString(ATTRIBUTE_BORDER_WIDTH);
  if (value != null) {
    borderWidth=(int)ParseHelper.parseDimension(value,context);
  }
  GradientDrawable border=new GradientDrawable();
  border.setCornerRadius(cornerRadius);
  border.setShape(GradientDrawable.RECTANGLE);
  border.setStroke(borderWidth,borderColor);
  border.setColor(bgColor);
  return border;
}",0.9966996699669968
28540,"@Override public double getDouble(String property){
  return ((JsonObject)current).get(property).getAsDouble();
}","@Override public double getDouble(String property){
  return ((JsonObject)current).has(property) ? ((JsonObject)current).get(property).getAsDouble() : 0;
}",0.8432835820895522
28541,"@Override public float getFloat(String property){
  return ((JsonObject)current).get(property).getAsFloat();
}","@Override public float getFloat(String property){
  return ((JsonObject)current).has(property) ? ((JsonObject)current).get(property).getAsFloat() : 0;
}",0.8396946564885496
28542,"@Override public String getString(String property){
  return ((JsonObject)current).get(property).getAsString();
}","@Override public String getString(String property){
  return ((JsonObject)current).has(property) ? ((JsonObject)current).get(property).getAsString() : null;
}",0.8339483394833949
28543,"@Override public long getLong(String property){
  return ((JsonObject)current).get(property).getAsLong();
}","@Override public long getLong(String property){
  return ((JsonObject)current).has(property) ? ((JsonObject)current).get(property).getAsLong() : 0;
}",0.8359375
28544,"@Override public int getInt(String property){
  return ((JsonObject)current).get(property).getAsInt();
}","@Override public int getInt(String property){
  return ((JsonObject)current).has(property) ? ((JsonObject)current).get(property).getAsInt() : 0;
}",0.832
28545,"@Override protected ProteusViewManager createViewManager(TypeHandler handler,View parent,LayoutParser parser,JsonObject data,Styles styles,int index){
  ProteusViewManagerImpl viewManager=new ProteusViewManagerImpl();
  DataContext dataContext, parentDataContext=null;
  Map<String,String> scope=parser.getScope();
  if (parent instanceof ProteusView) {
    parentDataContext=((ProteusView)parent).getViewManager().getDataContext();
  }
  if (scope == null) {
    if (parentDataContext != null) {
      dataContext=new DataContext(parentDataContext);
    }
 else {
      dataContext=new DataContext();
      dataContext.setData(data);
      dataContext.setIndex(index);
    }
  }
 else {
    if (parentDataContext != null) {
      dataContext=parentDataContext.createChildDataContext(scope,index);
    }
 else {
      dataContext=new DataContext();
      dataContext.setData(data);
      dataContext=dataContext.createChildDataContext(scope,index);
    }
  }
  viewManager.setLayoutParser(parser);
  viewManager.setDataContext(dataContext);
  viewManager.setStyles(styles);
  viewManager.setProteusLayoutInflater(this);
  viewManager.setTypeHandler(handler);
  return viewManager;
}","@Override protected ProteusViewManager createViewManager(TypeHandler handler,View parent,LayoutParser parser,JsonObject data,Styles styles,int index){
  ProteusViewManagerImpl viewManager=new ProteusViewManagerImpl();
  DataContext dataContext, parentDataContext=null;
  Map<String,String> scope=parser.getScope();
  if (parent instanceof ProteusView) {
    parentDataContext=((ProteusView)parent).getViewManager().getDataContext();
  }
  if (scope == null) {
    if (parentDataContext != null) {
      dataContext=new DataContext(parentDataContext);
    }
 else {
      dataContext=new DataContext();
      dataContext.setData(data);
      dataContext.setIndex(index);
    }
  }
 else {
    if (parentDataContext != null) {
      dataContext=parentDataContext.createChildDataContext(scope,index);
    }
 else {
      dataContext=new DataContext();
      dataContext.setData(data);
      dataContext=dataContext.createChildDataContext(scope,index);
    }
  }
  viewManager.setLayoutParser(parser.clone());
  viewManager.setDataContext(dataContext);
  viewManager.setStyles(styles);
  viewManager.setProteusLayoutInflater(this);
  viewManager.setTypeHandler(handler);
  return viewManager;
}",0.9966273187183812
28546,"@Override @Nullable public ProteusView build(ViewGroup parent,LayoutParser parser,JsonObject data,Styles styles,int index){
  if (!parser.isLayout()) {
    throw new IllegalArgumentException(""String_Node_Str"" + parser.toString());
  }
  String type=parser.getType();
  TypeHandler handler=layoutHandlers.get(type);
  if (handler == null) {
    return onUnknownViewEncountered(type,parent,parser,data,index,styles);
  }
  final ProteusView view;
  onBeforeCreateView(handler,parent,parser,data,index,styles);
  view=createView(handler,parent,parser,data,index,styles);
  onAfterCreateView(handler,view,parent,parser,data,styles,index);
  ProteusViewManager viewManager=createViewManager(handler,parent,parser,data,styles,index);
  viewManager.setView((View)view);
  view.setViewManager(viewManager);
  while (parser.hasNext()) {
    boolean handled=handleAttribute(handler,view,parser.getName(),parser);
    if (!handled) {
      onUnknownAttributeEncountered(view,parser.getName(),parser);
    }
  }
  handleChildren(handler,parser,view);
  return view;
}","@Override @Nullable public ProteusView build(ViewGroup parent,LayoutParser parser,JsonObject data,Styles styles,int index){
  if (!parser.isLayout()) {
    throw new IllegalArgumentException(""String_Node_Str"" + parser.toString());
  }
  String type=parser.getType();
  TypeHandler handler=layoutHandlers.get(type);
  if (handler == null) {
    return onUnknownViewEncountered(type,parent,parser,data,index,styles);
  }
  final ProteusView view;
  onBeforeCreateView(handler,parent,parser,data,index,styles);
  view=createView(handler,parent,parser,data,index,styles);
  onAfterCreateView(handler,view,parent,parser,data,styles,index);
  ProteusViewManager viewManager=createViewManager(handler,parent,parser,data,styles,index);
  viewManager.setView((View)view);
  view.setViewManager(viewManager);
  while (parser.hasNext()) {
    parser.next();
    boolean handled=handleAttribute(handler,view,parser.getName(),parser);
    if (!handled) {
      onUnknownAttributeEncountered(view,parser.getName(),parser);
    }
  }
  return view;
}",0.9722488038277513
28547,"@Override protected void prepareHandlers(){
  super.prepareHandlers();
  addHandler(Attributes.ViewGroup.ClipChildren,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      boolean clipChildren=ParseHelper.parseBoolean(attributeValue);
      view.setClipChildren(clipChildren);
    }
  }
);
  addHandler(Attributes.ViewGroup.ClipToPadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      boolean clipToPadding=ParseHelper.parseBoolean(attributeValue);
      view.setClipToPadding(clipToPadding);
    }
  }
);
  addHandler(Attributes.ViewGroup.LayoutMode,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        if (LAYOUT_MODE_CLIP_BOUNDS.equals(attributeValue)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_CLIP_BOUNDS);
        }
 else         if (LAYOUT_MODE_OPTICAL_BOUNDS.equals(attributeValue)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS);
        }
      }
    }
  }
);
  addHandler(Attributes.ViewGroup.SplitMotionEvents,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      boolean splitMotionEvents=ParseHelper.parseBoolean(attributeValue);
      view.setMotionEventSplittingEnabled(splitMotionEvents);
    }
  }
);
}","@Override protected void prepareHandlers(){
  super.prepareHandlers();
  addHandler(Attributes.ViewGroup.ClipChildren,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      boolean clipChildren=ParseHelper.parseBoolean(attributeValue);
      view.setClipChildren(clipChildren);
    }
  }
);
  addHandler(Attributes.ViewGroup.ClipToPadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      boolean clipToPadding=ParseHelper.parseBoolean(attributeValue);
      view.setClipToPadding(clipToPadding);
    }
  }
);
  addHandler(Attributes.ViewGroup.LayoutMode,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        if (LAYOUT_MODE_CLIP_BOUNDS.equals(attributeValue)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_CLIP_BOUNDS);
        }
 else         if (LAYOUT_MODE_OPTICAL_BOUNDS.equals(attributeValue)) {
          view.setLayoutMode(ViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS);
        }
      }
    }
  }
);
  addHandler(Attributes.ViewGroup.SplitMotionEvents,new StringAttributeProcessor<T>(){
    @Override public void handle(    String attributeKey,    String attributeValue,    T view){
      boolean splitMotionEvents=ParseHelper.parseBoolean(attributeValue);
      view.setMotionEventSplittingEnabled(splitMotionEvents);
    }
  }
);
  addHandler(Attributes.ViewGroup.Children,new AttributeProcessor<T>(){
    @Override public void handle(    T view,    String key,    LayoutParser parser){
      handleChildren((ProteusView)view);
    }
  }
);
}",0.9369584702718852
28548,"@Override public void handle(String attributeKey,String attributeValue,T view){
  boolean splitMotionEvents=ParseHelper.parseBoolean(attributeValue);
  view.setMotionEventSplittingEnabled(splitMotionEvents);
}","@Override public void handle(T view,String key,LayoutParser parser){
  handleChildren((ProteusView)view);
}",0.3354430379746835
28549,"@Override public boolean handleChildren(ProteusView view){
  ProteusViewManager viewManager=view.getViewManager();
  ProteusLayoutInflater proteusLayoutInflater=viewManager.getProteusLayoutInflater();
  LayoutParser parser=viewManager.getLayoutParser();
  JsonObject data=viewManager.getDataContext().getData();
  ProteusView child;
  if (!parser.isLayout()) {
    throw new IllegalStateException(""String_Node_Str"" + parser.toString());
  }
  if (parser.isArray(ProteusConstants.CHILDREN)) {
    parser.peek(ProteusConstants.CHILDREN);
    while (parser.hasNext()) {
      parser.next();
      child=proteusLayoutInflater.build((ViewGroup)view,parser,data,view.getViewManager().getStyles(),viewManager.getDataContext().getIndex());
      addView(view,child);
    }
  }
 else   if (parser.isNumber(ProteusConstants.CHILDREN)) {
    int length=parser.getInt(ProteusConstants.CHILDREN);
    LayoutParser childLayoutParser=viewManager.getChildLayoutParser();
    for (int index=0; index < length; index++) {
      child=proteusLayoutInflater.build((ViewGroup)view,childLayoutParser.clone(),viewManager.getDataContext().getData(),viewManager.getStyles(),index);
      if (child != null) {
        this.addView(view,child);
      }
    }
  }
  return true;
}","@Override public boolean handleChildren(ProteusView view){
  ProteusViewManager viewManager=view.getViewManager();
  ProteusLayoutInflater proteusLayoutInflater=viewManager.getProteusLayoutInflater();
  LayoutParser parser=viewManager.getLayoutParser();
  JsonObject data=viewManager.getDataContext().getData();
  ProteusView child;
  if (!parser.isLayout()) {
    throw new IllegalStateException(""String_Node_Str"" + parser.toString());
  }
  if (parser.isArray(ProteusConstants.CHILDREN)) {
    LayoutParser children=parser.peek(ProteusConstants.CHILDREN);
    while (children.hasNext()) {
      children.next();
      child=proteusLayoutInflater.build((ViewGroup)view,children.clone(),data,view.getViewManager().getStyles(),viewManager.getDataContext().getIndex());
      addView(view,child);
    }
  }
 else   if (parser.isNumber(ProteusConstants.CHILDREN)) {
    int length=parser.getInt(ProteusConstants.CHILDREN);
    LayoutParser childLayoutParser=viewManager.getChildLayoutParser();
    for (int index=0; index < length; index++) {
      child=proteusLayoutInflater.build((ViewGroup)view,childLayoutParser.clone(),viewManager.getDataContext().getData(),viewManager.getStyles(),index);
      if (child != null) {
        this.addView(view,child);
      }
    }
  }
  return true;
}",0.9716535433070866
28550,"public static Drawable getBorderDrawable(LayoutParser parser,Context context){
  if (!parser.isObject() || parser.isNull()) {
    return null;
  }
  float cornerRadius=0;
  int borderWidth=0, borderColor=Color.TRANSPARENT, bgColor=Color.TRANSPARENT;
  parser=parser.peek();
  String value=parser.getString(ATTRIBUTE_BG_COLOR);
  if (value != null && !value.equals(""String_Node_Str"")) {
    bgColor=ParseHelper.parseColor(value);
  }
  value=parser.getString(ATTRIBUTE_BORDER_COLOR);
  if (value != null) {
    borderColor=ParseHelper.parseColor(value);
  }
  value=parser.getString(ATTRIBUTE_BORDER_RADIUS);
  if (value != null) {
    cornerRadius=ParseHelper.parseDimension(value,context);
  }
  value=parser.getString(ATTRIBUTE_BORDER_WIDTH);
  if (value != null) {
    borderWidth=(int)ParseHelper.parseDimension(value,context);
  }
  GradientDrawable border=new GradientDrawable();
  border.setCornerRadius(cornerRadius);
  border.setShape(GradientDrawable.RECTANGLE);
  border.setStroke(borderWidth,borderColor);
  border.setColor(bgColor);
  return border;
}","public static Drawable getBorderDrawable(LayoutParser parser,Context context){
  if (!parser.isObject() || parser.isNull()) {
    return null;
  }
  float cornerRadius=0;
  int borderWidth=0, borderColor=Color.TRANSPARENT, bgColor=Color.TRANSPARENT;
  parser=parser.peek();
  String value;
  if (parser.isString(ATTRIBUTE_BG_COLOR)) {
    value=parser.getString(ATTRIBUTE_BG_COLOR);
    if (value != null && !value.equals(""String_Node_Str"")) {
      bgColor=ParseHelper.parseColor(value);
    }
  }
  if (parser.isString(ATTRIBUTE_BORDER_COLOR)) {
    value=parser.getString(ATTRIBUTE_BORDER_COLOR);
    if (value != null) {
      borderColor=ParseHelper.parseColor(value);
    }
  }
  if (parser.isString(ATTRIBUTE_BORDER_RADIUS)) {
    value=parser.getString(ATTRIBUTE_BORDER_RADIUS);
    if (value != null) {
      cornerRadius=ParseHelper.parseDimension(value,context);
    }
  }
  if (parser.isString(ATTRIBUTE_BORDER_WIDTH)) {
    value=parser.getString(ATTRIBUTE_BORDER_WIDTH);
    if (value != null) {
      borderWidth=(int)ParseHelper.parseDimension(value,context);
    }
  }
  GradientDrawable border=new GradientDrawable();
  border.setCornerRadius(cornerRadius);
  border.setShape(GradientDrawable.RECTANGLE);
  border.setStroke(borderWidth,borderColor);
  border.setColor(bgColor);
  return border;
}",0.8536585365853658
28551,"public DataContext createChildDataContext(JsonObject scope,int childIndex){
  return updateDataContext(new DataContext(),dataProvider,scope,childIndex);
}","public DataContext createChildDataContext(JsonObject scope,int childIndex){
  DataContext dataContext=updateDataContext(new DataContext(),dataProvider,scope,childIndex);
  this.addChild(dataContext);
  return dataContext;
}",0.4403183023872679
28552,"public DataContext(){
  this.scope=new JsonObject();
  this.reverseScope=new JsonObject();
}","public DataContext(){
  this.scope=new JsonObject();
  this.reverseScope=new JsonObject();
  this.children=new ArrayList<>();
}",0.8401826484018264
28553,JsonObject onBeforeUpdateData(@Nullable JsonObject data);,JsonObject onBeforeUpdateData(JsonObject data);,0.903846153846154
28554,"@Override protected View updateDataImpl(JsonObject data){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  this.isViewUpdating=true;
  data=onBeforeUpdateData(data);
  if (data != null) {
    updateDataContext(data);
  }
  if (parserContext != null) {
    data=onAfterDataContext(parserContext.getDataContext().getDataProvider().getData().getAsJsonObject());
  }
 else {
    data=onAfterDataContext(null);
  }
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (dataPathForChildren != null) {
    if (children == null) {
      children=new ArrayList<>();
    }
    updateChildrenFromData();
  }
 else   if (children != null) {
    for (    ProteusView proteusView : children) {
      proteusView.updateData(data);
    }
  }
  this.isViewUpdating=false;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  onUpdateDataComplete();
  return this.getView();
}","@Override protected View updateDataImpl(JsonObject data){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  this.isViewUpdating=true;
  data=onBeforeUpdateData(data);
  if (data != null) {
    updateDataContext(data);
  }
  if (parserContext != null) {
    data=onAfterDataContext(parserContext.getDataContext().getDataProvider().getData().getAsJsonObject());
  }
 else {
    data=onAfterDataContext(null);
  }
  if (data == null) {
    return this.getView();
  }
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (dataPathForChildren != null) {
    if (children == null) {
      children=new ArrayList<>();
    }
    updateChildrenFromData();
  }
 else   if (children != null) {
    for (    ProteusView proteusView : children) {
      proteusView.updateData(null);
    }
  }
  this.isViewUpdating=false;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  onUpdateDataComplete();
  return this.getView();
}",0.9752936411502632
28555,JsonObject onAfterDataContext(@Nullable JsonObject data);,JsonObject onAfterDataContext(JsonObject data);,0.903846153846154
28556,"protected void prepareHandlers(final Context context){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(context){
    @Override public void setOnEventListener(    final V view,    final ParserContext parserContext,    final JsonElement attributeValue){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent(view,parserContext,EventType.OnClick,attributeValue);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new DrawableResourceProcessor<V>(context){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.height=(int)dimension;
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.width=(int)dimension;
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding((int)dimension,(int)dimension,(int)dimension,(int)dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding((int)dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),(int)dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),(int)dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),(int)dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,(int)dimension,(int)dimension,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,(int)dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,(int)dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumHeight((int)dimension);
    }
  }
);
  addHandler(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumWidth((int)dimension);
    }
  }
);
  addHandler(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseVisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseInvisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setId(IdGenerator.getInstance().getUnique(attributeValue));
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        final String resourceName=attributeValue;
        view.setAccessibilityDelegate(new View.AccessibilityDelegate(){
          @Override public void onInitializeAccessibilityNodeInfo(          View host,          AccessibilityNodeInfo info){
            super.onInitializeAccessibilityNodeInfo(host,info);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
              info.setViewIdResourceName(resourceName);
            }
          }
        }
);
      }
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Drawable border=Utils.getBorderDrawable(attributeValue,context);
      if (border == null) {
        return;
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Styles styles=parserContext.getStyles();
      LayoutHandler handler=parserContext.getLayoutBuilder().getHandler(Utils.getPropertyAsString(layout,ProteusConstants.TYPE));
      if (styles == null) {
        return;
      }
      String[] styleSet=attributeValue.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(styles.getStyle(styleName),layout,proteusView,(handler != null ? handler : ViewParser.this),parserContext.getLayoutBuilder(),parserContext,parent,index);
        }
      }
    }
    private void process(    Map<String,JsonElement> style,    JsonObject layout,    ProteusView proteusView,    LayoutHandler handler,    LayoutBuilder builder,    ParserContext parserContext,    ProteusView parent,    int index){
      for (      Map.Entry<String,JsonElement> attribute : style.entrySet()) {
        if (layout.has(attribute.getKey())) {
          continue;
        }
        builder.handleAttribute(handler,parserContext,attribute.getKey(),attribute.getValue(),layout,proteusView,parent,index);
      }
    }
  }
);
  addHandler(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(attributeValue);
      }
    }
  }
);
  addHandler(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
switch (attributeValue) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addHandler(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
view.setFadingEdgeLength(ParseHelper.parseInt(attributeValue));
}
}
);
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int id=IdGenerator.getInstance().getUnique(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
ParseHelper.addRelativeLayoutRule(view,rule,id);
}
}
;
StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
ParseHelper.addRelativeLayoutRule(view,relativeLayoutParams.get(attributeKey),trueOrFalse);
}
}
;
addHandler(Attributes.View.Above,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
addHandler(Attributes.View.Below,relativeLayoutProcessor);
addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(context){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
}","protected void prepareHandlers(final Context context){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(context){
    @Override public void setOnEventListener(    final V view,    final ParserContext parserContext,    final JsonElement attributeValue){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent(view,parserContext,EventType.OnClick,attributeValue);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new DrawableResourceProcessor<V>(context){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.height=(int)dimension;
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.width=(int)dimension;
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding((int)dimension,(int)dimension,(int)dimension,(int)dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding((int)dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),(int)dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),(int)dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),(int)dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,(int)dimension,(int)dimension,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins((int)dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,(int)dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,(int)dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,(int)dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumHeight((int)dimension);
    }
  }
);
  addHandler(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumWidth((int)dimension);
    }
  }
);
  addHandler(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    V view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseVisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseInvisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setId(IdGenerator.getInstance().getUnique(attributeValue));
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        final String resourceName=attributeValue;
        view.setAccessibilityDelegate(new View.AccessibilityDelegate(){
          @Override public void onInitializeAccessibilityNodeInfo(          View host,          AccessibilityNodeInfo info){
            super.onInitializeAccessibilityNodeInfo(host,info);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
              info.setViewIdResourceName(resourceName);
            }
          }
        }
);
      }
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Drawable border=Utils.getBorderDrawable(attributeValue,context);
      if (border == null) {
        return;
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Styles styles=parserContext.getStyles();
      LayoutHandler handler=parserContext.getLayoutBuilder().getHandler(Utils.getPropertyAsString(layout,ProteusConstants.TYPE));
      if (styles == null) {
        return;
      }
      String[] styleSet=attributeValue.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(styles.getStyle(styleName),layout,proteusView,(handler != null ? handler : ViewParser.this),parserContext.getLayoutBuilder(),parserContext,parent,index);
        }
      }
    }
    private void process(    Map<String,JsonElement> style,    JsonObject layout,    ProteusView proteusView,    LayoutHandler handler,    LayoutBuilder builder,    ParserContext parserContext,    ProteusView parent,    int index){
      for (      Map.Entry<String,JsonElement> attribute : style.entrySet()) {
        if (layout.has(attribute.getKey())) {
          continue;
        }
        builder.handleAttribute(handler,parserContext,attribute.getKey(),attribute.getValue(),layout,proteusView,parent,index);
      }
    }
  }
);
  addHandler(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(attributeValue);
      }
    }
  }
);
  addHandler(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
switch (attributeValue) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addHandler(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
view.setFadingEdgeLength(ParseHelper.parseInt(attributeValue));
}
}
);
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
}
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
}
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
}
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
}
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
}
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
}
StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int id=IdGenerator.getInstance().getUnique(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
if (rule != null) {
ParseHelper.addRelativeLayoutRule(view,rule,id);
}
}
}
;
StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
if (rule != null) {
ParseHelper.addRelativeLayoutRule(view,rule,trueOrFalse);
}
}
}
;
addHandler(Attributes.View.Above,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
addHandler(Attributes.View.Below,relativeLayoutProcessor);
addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(context){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
}",0.9879020748710068
28557,"@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
  int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
  ParseHelper.addRelativeLayoutRule(view,relativeLayoutParams.get(attributeKey),trueOrFalse);
}","@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
  int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
  Integer rule=relativeLayoutParams.get(attributeKey);
  if (rule != null) {
    ParseHelper.addRelativeLayoutRule(view,rule,trueOrFalse);
  }
}",0.8295302013422818
28558,"public DataContext createChildDataContext(JsonObject scope,int childIndex){
  DataContext dataContext=updateDataContext(new DataContext(),dataProvider,scope,childIndex);
  this.addChild(dataContext);
  return dataContext;
}","public DataContext createChildDataContext(JsonObject scope,int childIndex){
  return updateDataContext(new DataContext(),dataProvider,scope,childIndex);
}",0.7957559681697612
28559,"public DataContext(){
  this.scope=new JsonObject();
  this.reverseScope=new JsonObject();
  this.children=new ArrayList<>();
}","public DataContext(){
  this.scope=new JsonObject();
  this.reverseScope=new JsonObject();
}",0.8401826484018264
28560,JsonObject onBeforeUpdateData(JsonObject data);,JsonObject onBeforeUpdateData(@Nullable JsonObject data);,0.903846153846154
28561,"@Override protected View updateDataImpl(JsonObject data){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  this.isViewUpdating=true;
  data=onBeforeUpdateData(data);
  if (data != null) {
    updateDataContext(data);
  }
  if (parserContext != null) {
    data=onAfterDataContext(parserContext.getDataContext().getDataProvider().getData().getAsJsonObject());
  }
 else {
    data=onAfterDataContext(null);
  }
  if (data == null) {
    return this.getView();
  }
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (dataPathForChildren != null) {
    if (children == null) {
      children=new ArrayList<>();
    }
    updateChildrenFromData();
  }
 else   if (children != null) {
    for (    ProteusView proteusView : children) {
      proteusView.updateData(null);
    }
  }
  this.isViewUpdating=false;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  onUpdateDataComplete();
  return this.getView();
}","@Override protected View updateDataImpl(JsonObject data){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  this.isViewUpdating=true;
  data=onBeforeUpdateData(data);
  if (data != null) {
    updateDataContext(data);
  }
  if (parserContext != null) {
    data=onAfterDataContext(parserContext.getDataContext().getDataProvider().getData().getAsJsonObject());
  }
 else {
    data=onAfterDataContext(null);
  }
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (dataPathForChildren != null) {
    if (children == null) {
      children=new ArrayList<>();
    }
    updateChildrenFromData();
  }
 else   if (children != null) {
    for (    ProteusView proteusView : children) {
      proteusView.updateData(data);
    }
  }
  this.isViewUpdating=false;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  onUpdateDataComplete();
  return this.getView();
}",0.9752936411502632
28562,JsonObject onAfterDataContext(JsonObject data);,JsonObject onAfterDataContext(@Nullable JsonObject data);,0.903846153846154
28563,"@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    T view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setCompoundDrawablePadding((int)dimension);
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    T view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setTextSize(dimension);
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHint,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHintTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setHintTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorLink,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setLinkTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setLinkTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHighLight,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHighlightColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
  addHandler(Attributes.TextView.Hint,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setHint(attributeValue);
    }
  }
);
}","@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    T view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setCompoundDrawablePadding((int)dimension);
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    float dimension,    T view,    String key,    JsonElement value,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setTextSize(TypedValue.COMPLEX_UNIT_PX,dimension);
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHint,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHintTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setHintTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorLink,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setLinkTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setLinkTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHighLight,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHighlightColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
  addHandler(Attributes.TextView.Hint,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setHint(attributeValue);
    }
  }
);
}",0.9983222519107686
28564,"@Override public void setDimension(ParserContext parserContext,float dimension,T view,String key,JsonElement value,ProteusView proteusView,JsonObject layout,int index){
  view.setTextSize(dimension);
}","@Override public void setDimension(ParserContext parserContext,float dimension,T view,String key,JsonElement value,ProteusView proteusView,JsonObject layout,int index){
  view.setTextSize(TypedValue.COMPLEX_UNIT_PX,dimension);
}",0.9370629370629372
28565,"public DataContext createChildDataContext(JsonObject scope,int childIndex){
  DataContext dataContext=updateDataContext(new DataContext(),dataProvider,scope,childIndex);
  this.addChild(dataContext);
  return dataContext;
}","public DataContext createChildDataContext(JsonObject scope,int childIndex){
  return updateDataContext(new DataContext(),dataProvider,scope,childIndex);
}",0.7957559681697612
28566,"public DataContext(){
  this.scope=new JsonObject();
  this.reverseScope=new JsonObject();
  this.children=new ArrayList<>();
}","public DataContext(){
  this.scope=new JsonObject();
  this.reverseScope=new JsonObject();
}",0.8401826484018264
28567,JsonObject onBeforeUpdateData(JsonObject data);,JsonObject onBeforeUpdateData(@Nullable JsonObject data);,0.903846153846154
28568,"@Override protected View updateDataImpl(JsonObject data){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  this.isViewUpdating=true;
  data=onBeforeUpdateData(data);
  if (data != null) {
    updateDataContext(data);
  }
  if (parserContext != null) {
    data=onAfterDataContext(parserContext.getDataContext().getDataProvider().getData().getAsJsonObject());
  }
 else {
    data=onAfterDataContext(null);
  }
  if (data == null) {
    return this.getView();
  }
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (dataPathForChildren != null) {
    if (children == null) {
      children=new ArrayList<>();
    }
    updateChildrenFromData();
  }
 else   if (children != null) {
    for (    ProteusView proteusView : children) {
      proteusView.updateData(null);
    }
  }
  this.isViewUpdating=false;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  onUpdateDataComplete();
  return this.getView();
}","@Override protected View updateDataImpl(JsonObject data){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  this.isViewUpdating=true;
  data=onBeforeUpdateData(data);
  if (data != null) {
    updateDataContext(data);
  }
  if (parserContext != null) {
    data=onAfterDataContext(parserContext.getDataContext().getDataProvider().getData().getAsJsonObject());
  }
 else {
    data=onAfterDataContext(null);
  }
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (dataPathForChildren != null) {
    if (children == null) {
      children=new ArrayList<>();
    }
    updateChildrenFromData();
  }
 else   if (children != null) {
    for (    ProteusView proteusView : children) {
      proteusView.updateData(data);
    }
  }
  this.isViewUpdating=false;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (data != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ Utils.getLayoutIdentifier(layout));
  }
  onUpdateDataComplete();
  return this.getView();
}",0.9752936411502632
28569,JsonObject onAfterDataContext(JsonObject data);,JsonObject onAfterDataContext(@Nullable JsonObject data);,0.903846153846154
28570,"protected void prepareHandlers(final Context context){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(context){
    @Override public void setOnEventListener(    final V view,    final ParserContext parserContext,    final JsonElement attributeValue){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent(view,parserContext,EventType.OnClick,attributeValue);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new DrawableResourceProcessor<V>(context){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.height=ParseHelper.parseDimension(attributeValue,context);
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Width,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.width=ParseHelper.parseDimension(attributeValue,context);
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(dimension,dimension,dimension,dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,dimension,dimension,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      view.setMinimumHeight(dimension);
    }
  }
);
  addHandler(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      view.setMinimumWidth(dimension);
    }
  }
);
  addHandler(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    V view,    String attributeKey,    int dimension){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseVisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseInvisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setId(IdGenerator.getInstance().getUnique(attributeValue));
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Drawable border=Utils.getBorderDrawble(attributeValue,context);
      if (border == null) {
        return;
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Styles styles=parserContext.getStyles();
      LayoutHandler handler=parserContext.getLayoutBuilder().getHandler(Utils.getPropertyAsString(layout,ProteusConstants.TYPE));
      if (styles == null) {
        return;
      }
      String[] styleSet=attributeValue.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(styles.getStyle(styleName),layout,proteusView,(handler != null ? handler : ViewParser.this),parserContext.getLayoutBuilder(),parserContext,parent,index);
        }
      }
    }
    private void process(    Map<String,JsonElement> style,    JsonObject layout,    ProteusView proteusView,    LayoutHandler handler,    LayoutBuilder builder,    ParserContext parserContext,    ProteusView parent,    int index){
      for (      Map.Entry<String,JsonElement> attribute : style.entrySet()) {
        if (layout.has(attribute.getKey())) {
          continue;
        }
        builder.handleAttribute(handler,parserContext,attribute.getKey(),attribute.getValue(),layout,proteusView,parent,index);
      }
    }
  }
);
  addHandler(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(attributeValue);
      }
    }
  }
);
  addHandler(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
switch (attributeValue) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addHandler(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
view.setFadingEdgeLength(ParseHelper.parseInt(attributeValue));
}
}
);
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int id=IdGenerator.getInstance().getUnique(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
ParseHelper.addRelativeLayoutRule(view,rule,id);
}
}
;
StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
ParseHelper.addRelativeLayoutRule(view,relativeLayoutParams.get(attributeKey),trueOrFalse);
}
}
;
addHandler(Attributes.View.Above,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
addHandler(Attributes.View.Below,relativeLayoutProcessor);
addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(context){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
}","protected void prepareHandlers(final Context context){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(context){
    @Override public void setOnEventListener(    final V view,    final ParserContext parserContext,    final JsonElement attributeValue){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent(view,parserContext,EventType.OnClick,attributeValue);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new DrawableResourceProcessor<V>(context){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.height=dimension;
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Width,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.width=dimension;
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(attributeKey + ""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(dimension,dimension,dimension,dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,dimension,dimension,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        if (logger.isErrorEnabled()) {
          logger.error(""String_Node_Str"");
        }
      }
    }
  }
);
  addHandler(Attributes.View.MinHeight,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumHeight(dimension);
    }
  }
);
  addHandler(Attributes.View.MinWidth,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumWidth(dimension);
    }
  }
);
  addHandler(Attributes.View.Elevation,new DimensionAttributeProcessor<V>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    V view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setElevation(dimension);
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseVisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setVisibility(ParseHelper.parseInvisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setId(IdGenerator.getInstance().getUnique(attributeValue));
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Drawable border=Utils.getBorderDrawble(attributeValue,context);
      if (border == null) {
        return;
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enabled,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Styles styles=parserContext.getStyles();
      LayoutHandler handler=parserContext.getLayoutBuilder().getHandler(Utils.getPropertyAsString(layout,ProteusConstants.TYPE));
      if (styles == null) {
        return;
      }
      String[] styleSet=attributeValue.split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          process(styles.getStyle(styleName),layout,proteusView,(handler != null ? handler : ViewParser.this),parserContext.getLayoutBuilder(),parserContext,parent,index);
        }
      }
    }
    private void process(    Map<String,JsonElement> style,    JsonObject layout,    ProteusView proteusView,    LayoutHandler handler,    LayoutBuilder builder,    ParserContext parserContext,    ProteusView parent,    int index){
      for (      Map.Entry<String,JsonElement> attribute : style.entrySet()) {
        if (layout.has(attribute.getKey())) {
          continue;
        }
        builder.handleAttribute(handler,parserContext,attribute.getKey(),attribute.getValue(),layout,proteusView,parent,index);
      }
    }
  }
);
  addHandler(Attributes.View.TransitionName,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        view.setTransitionName(attributeValue);
      }
    }
  }
);
  addHandler(Attributes.View.RequiresFadingEdge,new StringAttributeProcessor<V>(){
    private final String NONE=""String_Node_Str"";
    private final String BOTH=""String_Node_Str"";
    private final String VERTICAL=""String_Node_Str"";
    private final String HORIZONTAL=""String_Node_Str"";
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
switch (attributeValue) {
case NONE:
        view.setVerticalFadingEdgeEnabled(false);
      view.setHorizontalFadingEdgeEnabled(false);
    break;
case BOTH:
  view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(true);
break;
case VERTICAL:
view.setVerticalFadingEdgeEnabled(true);
view.setHorizontalFadingEdgeEnabled(false);
break;
case HORIZONTAL:
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(true);
break;
default :
view.setVerticalFadingEdgeEnabled(false);
view.setHorizontalFadingEdgeEnabled(false);
break;
}
}
}
);
addHandler(Attributes.View.FadingEdgeLength,new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
view.setFadingEdgeLength(ParseHelper.parseInt(attributeValue));
}
}
);
final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int id=IdGenerator.getInstance().getUnique(attributeValue);
Integer rule=relativeLayoutParams.get(attributeKey);
ParseHelper.addRelativeLayoutRule(view,rule,id);
}
}
;
StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,V view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
ParseHelper.addRelativeLayoutRule(view,relativeLayoutParams.get(attributeKey),trueOrFalse);
}
}
;
addHandler(Attributes.View.Above,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
addHandler(Attributes.View.Below,relativeLayoutProcessor);
addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
addHandler(Attributes.View.Animation,new TweenAnimationResourceProcessor<V>(context){
@Override public void setAnimation(V view,Animation animation){
view.setAnimation(animation);
}
}
);
}",0.8687824159755066
28571,"@Override public void setDimension(V view,String attributeKey,int dimension){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    view.setElevation(dimension);
  }
}","@Override public void setDimension(ParserContext parserContext,int dimension,V view,String attributeKey,JsonElement attributeValue,ProteusView proteusView,JsonObject layout,int index){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    view.setElevation(dimension);
  }
}",0.715203426124197
28572,"@Override protected void prepareHandlers(Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.LinearLayout.Orientation,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (""String_Node_Str"".equals(attributeValue)) {
        view.setOrientation(LinearLayout.HORIZONTAL);
      }
 else {
        view.setOrientation(LinearLayout.VERTICAL);
      }
    }
  }
);
  addHandler(Attributes.View.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.LinearLayout.Divider,new DrawableResourceProcessor<T>(context){
    @SuppressLint(""String_Node_Str"") @Override public void setDrawable(    T view,    Drawable drawable){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
        view.setDividerDrawable(drawable);
      }
    }
  }
);
  addHandler(Attributes.LinearLayout.DividerPadding,new StringAttributeProcessor<T>(){
    @SuppressLint(""String_Node_Str"") @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
        view.setDividerPadding(ParseHelper.parseInt(attributeValue));
      }
    }
  }
);
  addHandler(Attributes.LinearLayout.ShowDividers,new StringAttributeProcessor<T>(){
    @SuppressLint(""String_Node_Str"") @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
        int dividerMode=ParseHelper.parseDividerMode(attributeValue);
        view.setShowDividers(dividerMode);
      }
    }
  }
);
  addHandler(Attributes.LinearLayout.WeightSum,new StringAttributeProcessor<T>(){
    @SuppressLint(""String_Node_Str"") @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setWeightSum(ParseHelper.parseFloat(attributeValue));
    }
  }
);
}","@Override protected void prepareHandlers(Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.LinearLayout.Orientation,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (""String_Node_Str"".equals(attributeValue)) {
        view.setOrientation(LinearLayout.HORIZONTAL);
      }
 else {
        view.setOrientation(LinearLayout.VERTICAL);
      }
    }
  }
);
  addHandler(Attributes.View.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.LinearLayout.Divider,new DrawableResourceProcessor<T>(context){
    @SuppressLint(""String_Node_Str"") @Override public void setDrawable(    T view,    Drawable drawable){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
        view.setDividerDrawable(drawable);
      }
    }
  }
);
  addHandler(Attributes.LinearLayout.DividerPadding,new DimensionAttributeProcessor<T>(){
    @SuppressLint(""String_Node_Str"") @Override public void setDimension(    ParserContext parserContext,    int dimension,    T view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
        view.setDividerPadding(dimension);
      }
    }
  }
);
  addHandler(Attributes.LinearLayout.ShowDividers,new StringAttributeProcessor<T>(){
    @SuppressLint(""String_Node_Str"") @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
        int dividerMode=ParseHelper.parseDividerMode(attributeValue);
        view.setShowDividers(dividerMode);
      }
    }
  }
);
  addHandler(Attributes.LinearLayout.WeightSum,new StringAttributeProcessor<T>(){
    @SuppressLint(""String_Node_Str"") @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setWeightSum(ParseHelper.parseFloat(attributeValue));
    }
  }
);
}",0.9654919236417032
28573,"@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.RatingBar.NumStars,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setNumStars(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.Rating,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setRating(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.IsIndicator,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setIsIndicator(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.StepSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setStepSize(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.MinHeight,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setMinimumHeight(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.RatingBar.ProgressDrawable,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      drawable=view.tileify(drawable,false);
      view.setProgressDrawable(drawable);
    }
  }
);
}","@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.RatingBar.NumStars,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setNumStars(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.Rating,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setRating(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.IsIndicator,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setIsIndicator(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.StepSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setStepSize(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.RatingBar.MinHeight,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    T view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setMinimumHeight(dimension);
    }
  }
);
  addHandler(Attributes.RatingBar.ProgressDrawable,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      drawable=view.tileify(drawable,false);
      view.setProgressDrawable(drawable);
    }
  }
);
}",0.9648806843764072
28574,"@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,T view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
  view.setMinimumHeight(ParseHelper.parseDimension(attributeValue,context));
}","@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,T view,ProteusView proteusView,ProteusView parent,JsonObject layout,int index){
  view.setStepSize(ParseHelper.parseFloat(attributeValue));
}",0.7967806841046278
28575,"@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setCompoundDrawablePadding(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setTextSize(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHint,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHintTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setHintTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorLink,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setLinkTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setLinkTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHighLight,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHighlightColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
  addHandler(Attributes.TextView.Hint,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setHint(attributeValue);
    }
  }
);
}","@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    T view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setCompoundDrawablePadding(dimension);
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new DimensionAttributeProcessor<T>(){
    @Override public void setDimension(    ParserContext parserContext,    int dimension,    T view,    String attributeKey,    JsonElement attributeValue,    ProteusView proteusView,    JsonObject layout,    int index){
      view.setTextSize(dimension);
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHint,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHintTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setHintTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorLink,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setLinkTextColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
      view.setLinkTextColor(colors);
    }
  }
);
  addHandler(Attributes.TextView.TextColorHighLight,new ColorResourceProcessor<T>(){
    @Override public void setColor(    T view,    int color){
      view.setHighlightColor(color);
    }
    @Override public void setColor(    T view,    ColorStateList colors){
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new DrawableResourceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
  addHandler(Attributes.TextView.Hint,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view,    ProteusView proteusView,    ProteusView parent,    JsonObject layout,    int index){
      view.setHint(attributeValue);
    }
  }
);
}",0.9451309935739002
28576,"/** 
 * Updates the Binding with new data. It uses a   {@link com.flipkart.layoutengine.binding.Binding}to get the associated   {@link android.view.View},   {@link com.flipkart.layoutengine.builder.LayoutBuilder}, and   {@link com.flipkart.layoutengine.parser.LayoutHandler} to update the value of the boundattribute with the new value fetched from the new data object passed.
 * @param binding The property name to update mapped to its{@link com.flipkart.layoutengine.binding.Binding}
 */
private void handleBinding(Binding binding){
  if (binding.hasRegEx()) {
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),new JsonPrimitive(binding.getAttributeValue()),layout,this,parent,index);
  }
 else {
    JsonElement dataValue;
    try {
      dataValue=Utils.getElementFromData(binding.getBindingName(),parserContext.getDataContext().getDataProvider(),index);
    }
 catch (    JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
      Log.e(Utils.TAG_ERROR + ""String_Node_Str"",e.getMessage());
      if (getView() != null) {
        getView().setVisibility(View.GONE);
      }
      dataValue=new JsonPrimitive(ProteusConstants.DATA_NULL);
    }
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),dataValue,layout,this,parent,index);
  }
}","/** 
 * Updates the Binding with new data. It uses a   {@link com.flipkart.layoutengine.binding.Binding}to get the associated   {@link android.view.View},   {@link com.flipkart.layoutengine.builder.LayoutBuilder}, and   {@link com.flipkart.layoutengine.parser.LayoutHandler} to update the value of the boundattribute with the new value fetched from the new data object passed.
 * @param binding The property name to update mapped to its{@link com.flipkart.layoutengine.binding.Binding}
 */
private void handleBinding(Binding binding){
  if (binding.hasRegEx()) {
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),new JsonPrimitive(binding.getAttributeValue()),layout,this,parent,index);
  }
 else {
    JsonElement dataValue;
    try {
      dataValue=Utils.getElementFromData(binding.getBindingName(),parserContext.getDataContext().getDataProvider(),index);
      if (!Attributes.View.Visibility.getName().equals(binding.getAttributeKey()) && !Attributes.View.Invisibility.getName().equals(binding.getAttributeKey()) && this.getView() != null) {
        this.getView().setVisibility(0);
      }
    }
 catch (    JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
      Log.e(Utils.TAG_ERROR + ""String_Node_Str"",e.getMessage());
      if (getView() != null) {
        getView().setVisibility(View.GONE);
      }
      dataValue=new JsonPrimitive(ProteusConstants.DATA_NULL);
    }
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),dataValue,layout,this,parent,index);
  }
}",0.9218595450049456
28577,"/** 
 * This method will register all the internal layout handlers to the builder specified.
 * @param layoutBuilder The layout builder which will have handlers registered to it.
 */
protected void registerBuiltInHandlers(LayoutBuilder layoutBuilder){
  ViewParser viewParser=new ViewParser(View.class);
  ImageViewParser imageViewParser=new ImageViewParser(viewParser);
  ImageButtonParser imageButtonParser=new ImageButtonParser(imageViewParser);
  NetworkImageViewParser networkImageViewParser=new NetworkImageViewParser(imageViewParser);
  RelativeLayoutParser relativeLayoutParser=new RelativeLayoutParser(viewParser);
  LinearLayoutParser linearLayoutParser=new LinearLayoutParser(viewParser);
  FrameLayoutParser frameLayoutParser=new FrameLayoutParser(viewParser);
  ScrollViewParser scrollViewParser=new ScrollViewParser(viewParser);
  HorizontalScrollViewParser horizontalScrollViewParser=new HorizontalScrollViewParser(viewParser);
  TextViewParser textViewParser=new TextViewParser(viewParser);
  EditTextParser editTextParser=new EditTextParser(textViewParser);
  ButtonParser buttonParser=new ButtonParser(textViewParser);
  ViewPagerParser viewPagerParser=new ViewPagerParser(viewParser);
  WebViewParser webViewParser=new WebViewParser(viewParser);
  RatingBarParser ratingBarParser=new RatingBarParser(viewParser);
  CheckBoxParser checkBoxParser=new CheckBoxParser(buttonParser);
  ProgressBarParser progressBarParser=new ProgressBarParser(viewParser);
  HorizontalProgressBarParser horizontalProgressBarParser=new HorizontalProgressBarParser(viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",relativeLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",linearLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",frameLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",scrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalScrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",textViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",editTextParser);
  layoutBuilder.registerHandler(""String_Node_Str"",buttonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageButtonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewPagerParser);
  layoutBuilder.registerHandler(""String_Node_Str"",networkImageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",webViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",ratingBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",checkBoxParser);
  layoutBuilder.registerHandler(""String_Node_Str"",progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalProgressBarParser);
}","/** 
 * This method will register all the internal layout handlers to the builder specified.
 * @param layoutBuilder The layout builder which will have handlers registered to it.
 */
protected void registerBuiltInHandlers(LayoutBuilder layoutBuilder){
  ViewParser viewParser=new ViewParser(View.class);
  ImageViewParser imageViewParser=new ImageViewParser(viewParser);
  ImageButtonParser imageButtonParser=new ImageButtonParser(imageViewParser);
  NetworkImageViewParser networkImageViewParser=new NetworkImageViewParser(imageViewParser);
  RelativeLayoutParser relativeLayoutParser=new RelativeLayoutParser(viewParser);
  LinearLayoutParser linearLayoutParser=new LinearLayoutParser(viewParser);
  FrameLayoutParser frameLayoutParser=new FrameLayoutParser(viewParser);
  ScrollViewParser scrollViewParser=new ScrollViewParser(viewParser);
  HorizontalScrollViewParser horizontalScrollViewParser=new HorizontalScrollViewParser(viewParser);
  TextViewParser textViewParser=new TextViewParser(viewParser);
  EditTextParser editTextParser=new EditTextParser(textViewParser);
  ButtonParser buttonParser=new ButtonParser(textViewParser);
  ViewPagerParser viewPagerParser=new ViewPagerParser(viewParser);
  WebViewParser webViewParser=new WebViewParser(viewParser);
  RatingBarParser ratingBarParser=new RatingBarParser(viewParser);
  CheckBoxParser checkBoxParser=new CheckBoxParser(buttonParser);
  ProgressBarParser progressBarParser=new ProgressBarParser(viewParser);
  HorizontalProgressBarParser horizontalProgressBarParser=new HorizontalProgressBarParser(progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",relativeLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",linearLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",frameLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",scrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalScrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",textViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",editTextParser);
  layoutBuilder.registerHandler(""String_Node_Str"",buttonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageButtonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewPagerParser);
  layoutBuilder.registerHandler(""String_Node_Str"",networkImageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",webViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",ratingBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",checkBoxParser);
  layoutBuilder.registerHandler(""String_Node_Str"",progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalProgressBarParser);
}",0.997354030693244
28578,"public HorizontalProgressBarParser(Parser wrappedParser){
  super(wrappedParser);
}","public HorizontalProgressBarParser(Parser<T> wrappedParser){
  super(HorizontalProgressBar.class,wrappedParser);
}",0.8426395939086294
28579,"@NonNull public static String getLayoutIdentifier(JsonObject layout){
  String value=Utils.getPropertyAsString(layout,ProteusConstants.ID);
  if (value != null) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  value=Utils.getPropertyAsString(layout,ProteusConstants.TAG);
  if (value != null) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","@NonNull public static String getLayoutIdentifier(JsonObject layout){
  String noLayoutId=""String_Node_Str"";
  if (layout == null) {
    return noLayoutId;
  }
  String value=Utils.getPropertyAsString(layout,ProteusConstants.ID);
  if (value != null) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  value=Utils.getPropertyAsString(layout,ProteusConstants.TAG);
  if (value != null) {
    return ""String_Node_Str"" + value + ""String_Node_Str"";
  }
  return noLayoutId;
}",0.8683914510686164
28580,"protected void prepareHandlers(final Context context){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(context){
    @Override public void setOnEventListener(    final V view,    final ParserContext parserContext,    final JsonElement attributeValue){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent(view,parserContext,EventType.OnClick,attributeValue);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new ResourceReferenceProcessor<V>(context){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.height=ParseHelper.parseDimension(attributeValue,context);
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Width,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.width=ParseHelper.parseDimension(attributeValue,context);
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,attributeKey + ""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,attributeKey + ""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(dimension,dimension,dimension,dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,dimension,dimension,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    JsonObject layout){
      view.setVisibility(ParseHelper.parseVisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    JsonObject layout){
      view.setVisibility(ParseHelper.parseInvisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setId(IdGenerator.getInstance().getUnique(attributeValue));
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    JsonObject layout){
      if (!attributeValue.isJsonObject() || attributeValue.isJsonNull()) {
        return;
      }
      int cornerRadius=0, borderWidth=0, borderColor=Color.TRANSPARENT, bgColor=Color.TRANSPARENT;
      JsonObject data=attributeValue.getAsJsonObject();
      String value=Utils.getPropertyAsString(data,ATTRIBUTE_BG_COLOR);
      if (value != null && !value.equals(""String_Node_Str"")) {
        bgColor=ParseHelper.parseColor(value);
      }
      value=Utils.getPropertyAsString(data,ATTRIBUTE_BORDER_COLOR);
      if (value != null) {
        borderColor=ParseHelper.parseColor(value);
      }
      value=Utils.getPropertyAsString(data,ATTRIBUTE_BORDER_RADIUS);
      if (value != null) {
        cornerRadius=ParseHelper.parseDimension(value,context);
      }
      value=Utils.getPropertyAsString(data,ATTRIBUTE_BORDER_WIDTH);
      if (value != null) {
        borderWidth=ParseHelper.parseDimension(value,context);
      }
      GradientDrawable border=new GradientDrawable();
      border.setCornerRadius(cornerRadius);
      border.setShape(GradientDrawable.RECTANGLE);
      border.setStroke(borderWidth,borderColor);
      border.setColor(bgColor);
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
  relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
  relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
  relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
  relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
  relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
  relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
  relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
  relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
  relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
  relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
  relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
  relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
  relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
  relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
  relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
  relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
  relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
  relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
  relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
  relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
  relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
  relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
  StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int id=IdGenerator.getInstance().getUnique(attributeValue);
      Integer rule=relativeLayoutParams.get(attributeKey);
      ParseHelper.addRelativeLayoutRule(view,rule,id);
    }
  }
;
  StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
      ParseHelper.addRelativeLayoutRule(view,relativeLayoutParams.get(attributeKey),trueOrFalse);
    }
  }
;
  addHandler(Attributes.View.Above,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
  addHandler(Attributes.View.Below,relativeLayoutProcessor);
  addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
  addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
  addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
  addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
}","protected void prepareHandlers(final Context context){
  addHandler(Attributes.View.OnClick,new EventProcessor<V>(context){
    @Override public void setOnEventListener(    final V view,    final ParserContext parserContext,    final JsonElement attributeValue){
      view.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          fireEvent(view,parserContext,EventType.OnClick,attributeValue);
        }
      }
);
    }
  }
);
  addHandler(Attributes.View.Background,new ResourceReferenceProcessor<V>(context){
    @Override public void setDrawable(    V view,    Drawable drawable){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(drawable);
      }
 else {
        view.setBackground(drawable);
      }
    }
  }
);
  addHandler(Attributes.View.Height,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.height=ParseHelper.parseDimension(attributeValue,context);
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Width,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      layoutParams.width=ParseHelper.parseDimension(attributeValue,context);
      view.setLayoutParams(layoutParams);
    }
  }
);
  addHandler(Attributes.View.Weight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      LinearLayout.LayoutParams layoutParams;
      if (view.getLayoutParams() instanceof LinearLayout.LayoutParams) {
        layoutParams=(LinearLayout.LayoutParams)view.getLayoutParams();
        layoutParams.weight=ParseHelper.parseFloat(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,attributeKey + ""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.LayoutGravity,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
      if (layoutParams instanceof LinearLayout.LayoutParams) {
        LinearLayout.LayoutParams linearLayoutParams=(LinearLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else       if (layoutParams instanceof FrameLayout.LayoutParams) {
        FrameLayout.LayoutParams linearLayoutParams=(FrameLayout.LayoutParams)layoutParams;
        linearLayoutParams.gravity=ParseHelper.parseGravity(attributeValue);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,attributeKey + ""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.Padding,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(dimension,dimension,dimension,dimension);
    }
  }
);
  addHandler(Attributes.View.PaddingLeft,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(dimension,view.getPaddingTop(),view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingTop,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),dimension,view.getPaddingRight(),view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingRight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),dimension,view.getPaddingBottom());
    }
  }
);
  addHandler(Attributes.View.PaddingBottom,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      view.setPadding(view.getPaddingLeft(),view.getPaddingTop(),view.getPaddingRight(),dimension);
    }
  }
);
  addHandler(Attributes.View.Margin,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,dimension,dimension,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginLeft,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(dimension,layoutParams.topMargin,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginTop,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,dimension,layoutParams.rightMargin,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginRight,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,dimension,layoutParams.bottomMargin);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.MarginBottom,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int dimension=ParseHelper.parseDimension(attributeValue,context);
      if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams layoutParams;
        layoutParams=(ViewGroup.MarginLayoutParams)view.getLayoutParams();
        layoutParams.setMargins(layoutParams.leftMargin,layoutParams.topMargin,layoutParams.rightMargin,dimension);
        view.setLayoutParams(layoutParams);
      }
 else {
        Log.e(Utils.TAG_ERROR,""String_Node_Str"");
      }
    }
  }
);
  addHandler(Attributes.View.Alpha,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setAlpha(ParseHelper.parseFloat(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Visibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    JsonObject layout){
      view.setVisibility(ParseHelper.parseVisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Invisibility,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    JsonObject layout){
      view.setVisibility(ParseHelper.parseInvisibility(attributeValue));
    }
  }
);
  addHandler(Attributes.View.Id,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setId(IdGenerator.getInstance().getUnique(attributeValue));
    }
  }
);
  addHandler(Attributes.View.ContentDescription,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setContentDescription(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Clickable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      boolean clickable=ParseHelper.parseBoolean(attributeValue);
      view.setClickable(clickable);
    }
  }
);
  addHandler(Attributes.View.Tag,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      view.setTag(attributeValue);
    }
  }
);
  addHandler(Attributes.View.Border,new JsonDataProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    V view,    JsonObject layout){
      if (!attributeValue.isJsonObject() || attributeValue.isJsonNull()) {
        return;
      }
      int cornerRadius=0, borderWidth=0, borderColor=Color.TRANSPARENT, bgColor=Color.TRANSPARENT;
      JsonObject data=attributeValue.getAsJsonObject();
      String value=Utils.getPropertyAsString(data,ATTRIBUTE_BG_COLOR);
      if (value != null && !value.equals(""String_Node_Str"")) {
        bgColor=ParseHelper.parseColor(value);
      }
      value=Utils.getPropertyAsString(data,ATTRIBUTE_BORDER_COLOR);
      if (value != null) {
        borderColor=ParseHelper.parseColor(value);
      }
      value=Utils.getPropertyAsString(data,ATTRIBUTE_BORDER_RADIUS);
      if (value != null) {
        cornerRadius=ParseHelper.parseDimension(value,context);
      }
      value=Utils.getPropertyAsString(data,ATTRIBUTE_BORDER_WIDTH);
      if (value != null) {
        borderWidth=ParseHelper.parseDimension(value,context);
      }
      GradientDrawable border=new GradientDrawable();
      border.setCornerRadius(cornerRadius);
      border.setShape(GradientDrawable.RECTANGLE);
      border.setStroke(borderWidth,borderColor);
      border.setColor(bgColor);
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        view.setBackgroundDrawable(border);
      }
 else {
        view.setBackground(border);
      }
    }
  }
);
  addHandler(Attributes.View.Enable,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      boolean enabled=ParseHelper.parseBoolean(attributeValue);
      view.setEnabled(enabled);
    }
  }
);
  addHandler(Attributes.View.Style,new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      Styles styles=parserContext.getStyles();
      if (styles == null) {
        return;
      }
      String[] styleSet=layout.get(ProteusConstants.STYLE).getAsString().split(ProteusConstants.STYLE_DELIMITER);
      for (      String styleName : styleSet) {
        if (styles.contains(styleName)) {
          processStyle(styles.getStyle(styleName),layout,proteusView,handler,parserContext,parent,childIndex);
        }
      }
    }
  }
);
  final HashMap<String,Integer> relativeLayoutParams=new HashMap<>();
  relativeLayoutParams.put(Attributes.View.Above.getName(),RelativeLayout.ABOVE);
  relativeLayoutParams.put(Attributes.View.AlignBaseline.getName(),RelativeLayout.ALIGN_BASELINE);
  relativeLayoutParams.put(Attributes.View.AlignBottom.getName(),RelativeLayout.ALIGN_BOTTOM);
  relativeLayoutParams.put(Attributes.View.AlignEnd.getName(),RelativeLayout.ALIGN_END);
  relativeLayoutParams.put(Attributes.View.AlignLeft.getName(),RelativeLayout.ALIGN_LEFT);
  relativeLayoutParams.put(Attributes.View.AlignParentBottom.getName(),RelativeLayout.ALIGN_PARENT_BOTTOM);
  relativeLayoutParams.put(Attributes.View.AlignParentEnd.getName(),RelativeLayout.ALIGN_PARENT_END);
  relativeLayoutParams.put(Attributes.View.AlignParentLeft.getName(),RelativeLayout.ALIGN_PARENT_LEFT);
  relativeLayoutParams.put(Attributes.View.AlignParentRight.getName(),RelativeLayout.ALIGN_PARENT_RIGHT);
  relativeLayoutParams.put(Attributes.View.AlignParentStart.getName(),RelativeLayout.ALIGN_PARENT_START);
  relativeLayoutParams.put(Attributes.View.AlignParentTop.getName(),RelativeLayout.ALIGN_PARENT_TOP);
  relativeLayoutParams.put(Attributes.View.AlignRight.getName(),RelativeLayout.ALIGN_RIGHT);
  relativeLayoutParams.put(Attributes.View.AlignStart.getName(),RelativeLayout.ALIGN_START);
  relativeLayoutParams.put(Attributes.View.AlignTop.getName(),RelativeLayout.ALIGN_TOP);
  relativeLayoutParams.put(Attributes.View.Below.getName(),RelativeLayout.BELOW);
  relativeLayoutParams.put(Attributes.View.CenterHorizontal.getName(),RelativeLayout.CENTER_HORIZONTAL);
  relativeLayoutParams.put(Attributes.View.CenterInParent.getName(),RelativeLayout.CENTER_IN_PARENT);
  relativeLayoutParams.put(Attributes.View.CenterVertical.getName(),RelativeLayout.CENTER_VERTICAL);
  relativeLayoutParams.put(Attributes.View.ToEndOf.getName(),RelativeLayout.END_OF);
  relativeLayoutParams.put(Attributes.View.ToLeftOf.getName(),RelativeLayout.LEFT_OF);
  relativeLayoutParams.put(Attributes.View.ToRightOf.getName(),RelativeLayout.RIGHT_OF);
  relativeLayoutParams.put(Attributes.View.ToStartOf.getName(),RelativeLayout.START_OF);
  StringAttributeProcessor<V> relativeLayoutProcessor=new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int id=IdGenerator.getInstance().getUnique(attributeValue);
      Integer rule=relativeLayoutParams.get(attributeKey);
      ParseHelper.addRelativeLayoutRule(view,rule,id);
    }
  }
;
  StringAttributeProcessor<V> relativeLayoutBooleanProcessor=new StringAttributeProcessor<V>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    V view,    JsonObject layout){
      int trueOrFalse=ParseHelper.parseRelativeLayoutBoolean(attributeValue);
      ParseHelper.addRelativeLayoutRule(view,relativeLayoutParams.get(attributeKey),trueOrFalse);
    }
  }
;
  addHandler(Attributes.View.Above,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignBaseline,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignBottom,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignEnd,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignLeft,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignRight,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignStart,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignTop,relativeLayoutProcessor);
  addHandler(Attributes.View.Below,relativeLayoutProcessor);
  addHandler(Attributes.View.ToEndOf,relativeLayoutProcessor);
  addHandler(Attributes.View.ToLeftOf,relativeLayoutProcessor);
  addHandler(Attributes.View.ToRightOf,relativeLayoutProcessor);
  addHandler(Attributes.View.ToStartOf,relativeLayoutProcessor);
  addHandler(Attributes.View.AlignParentBottom,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentEnd,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentLeft,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentRight,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentStart,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.AlignParentTop,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.CenterHorizontal,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.CenterInParent,relativeLayoutBooleanProcessor);
  addHandler(Attributes.View.CenterVertical,relativeLayoutBooleanProcessor);
}",0.981415756085292
28581,"private JsonElement findAndReplaceValues(JsonElement jsonDataValue,ParserContext parserContext,LayoutHandler handler,String attributeName,ProteusView proteusView,JsonObject viewJsonObject,int childIndex){
  boolean failed=false;
  String attributeValue=jsonDataValue.getAsString();
  DataProteusView dataProteusView=(DataProteusView)proteusView;
  if (attributeValue != null && !""String_Node_Str"".equals(attributeValue) && (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX || attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX)) {
    if (attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX) {
      Matcher regexMatcher=ProteusConstants.REGEX_PATTERN.matcher(attributeValue);
      String finalValue=attributeValue;
      while (regexMatcher.find()) {
        String matchedString=regexMatcher.group(0);
        String bindingName;
        if (regexMatcher.group(3) != null) {
          String dataPath=regexMatcher.group(3);
          try {
            finalValue=finalValue.replace(matchedString,Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()).getAsString());
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            finalValue=dataPath;
            failed=true;
          }
          bindingName=dataPath;
        }
 else {
          String dataPath=regexMatcher.group(1);
          String formatterName=regexMatcher.group(2);
          String formattedValue;
          try {
            formattedValue=format(Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()),formatterName);
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            formattedValue=dataPath;
            failed=true;
          }
          finalValue=finalValue.replace(matchedString,formattedValue);
          bindingName=dataPath;
        }
        addBinding(dataProteusView,bindingName,attributeName,attributeValue,handler,true);
      }
      finalValue=finalValue.substring(1);
      jsonDataValue=new JsonPrimitive(finalValue);
    }
 else     if (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX) {
      JsonElement elementFromData;
      try {
        elementFromData=Utils.getElementFromData(attributeValue.substring(1),parserContext.getDataContext().getDataProvider(),childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",e.getMessage());
        failed=true;
        elementFromData=new JsonPrimitive(ProteusConstants.DATA_NULL);
      }
      if (elementFromData != null) {
        jsonDataValue=elementFromData;
      }
      addBinding(dataProteusView,attributeValue.substring(1),attributeName,attributeValue,handler,false);
    }
  }
  if (dataProteusView.getView() != null) {
    if (failed) {
      if (viewJsonObject != null && !viewJsonObject.isJsonNull() && viewJsonObject.get(Attributes.View.Visibility.getName()) != null) {
        String visibility=viewJsonObject.get(Attributes.View.Visibility.getName()).getAsString();
        if (ProteusConstants.DATA_VISIBILITY.equals(visibility)) {
          dataProteusView.getView().setVisibility(View.INVISIBLE);
        }
      }
 else {
        dataProteusView.getView().setVisibility(View.GONE);
      }
    }
 else     if (dataProteusView.isViewUpdating()) {
      dataProteusView.getView().setVisibility(View.VISIBLE);
    }
  }
  return jsonDataValue;
}","private JsonElement findAndReplaceValues(JsonElement jsonDataValue,ParserContext parserContext,LayoutHandler handler,String attributeName,ProteusView proteusView,JsonObject viewJsonObject,int childIndex){
  boolean failed=false;
  String attributeValue=jsonDataValue.getAsString();
  DataProteusView dataProteusView=(DataProteusView)proteusView;
  if (attributeValue != null && !""String_Node_Str"".equals(attributeValue) && (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX || attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX)) {
    if (attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX) {
      Matcher regexMatcher=ProteusConstants.REGEX_PATTERN.matcher(attributeValue);
      String finalValue=attributeValue;
      while (regexMatcher.find()) {
        String matchedString=regexMatcher.group(0);
        String bindingName;
        if (regexMatcher.group(3) != null) {
          String dataPath=regexMatcher.group(3);
          try {
            finalValue=finalValue.replace(matchedString,Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()).getAsString());
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            finalValue=dataPath;
            failed=true;
          }
          bindingName=dataPath;
        }
 else {
          String dataPath=regexMatcher.group(1);
          String formatterName=regexMatcher.group(2);
          String formattedValue;
          try {
            formattedValue=format(Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()),formatterName);
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            formattedValue=dataPath;
            failed=true;
          }
          finalValue=finalValue.replace(matchedString,formattedValue);
          bindingName=dataPath;
        }
        addBinding(dataProteusView,bindingName,attributeName,attributeValue,handler,true);
      }
      finalValue=finalValue.substring(1);
      jsonDataValue=new JsonPrimitive(finalValue);
    }
 else     if (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX) {
      JsonElement elementFromData;
      try {
        elementFromData=Utils.getElementFromData(attributeValue.substring(1),parserContext.getDataContext().getDataProvider(),childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",e.getMessage());
        failed=true;
        elementFromData=new JsonPrimitive(ProteusConstants.DATA_NULL);
      }
      if (elementFromData != null) {
        jsonDataValue=elementFromData;
      }
      addBinding(dataProteusView,attributeValue.substring(1),attributeName,attributeValue,handler,false);
    }
    if (dataProteusView.getView() != null) {
      if (failed) {
        if (viewJsonObject != null && !viewJsonObject.isJsonNull() && viewJsonObject.get(Attributes.View.Visibility.getName()) != null) {
          String visibility=viewJsonObject.get(Attributes.View.Visibility.getName()).getAsString();
          if (ProteusConstants.DATA_VISIBILITY.equals(visibility)) {
            dataProteusView.getView().setVisibility(View.INVISIBLE);
          }
        }
 else {
          dataProteusView.getView().setVisibility(View.GONE);
        }
      }
 else       if (dataProteusView.isViewUpdating()) {
        dataProteusView.getView().setVisibility(View.VISIBLE);
      }
    }
  }
  return jsonDataValue;
}",0.9954251883745964
28582,"@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setCompoundDrawablePadding(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextSize(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextColor(ParseHelper.parseColor(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setMaxLines(Integer.valueOf(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
}","@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setCompoundDrawablePadding(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextSize(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextColor(ParseHelper.parseColor(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
}",0.9974793568013908
28583,"@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setCompoundDrawablePadding(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextSize(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextColor(ParseHelper.parseColor(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
}","@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.TextView.HTML,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(Html.fromHtml(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Text,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.DrawablePadding,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setCompoundDrawablePadding(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.TextSize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextSize(ParseHelper.parseDimension(attributeValue,context));
    }
  }
);
  addHandler(Attributes.TextView.Gravity,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setGravity(ParseHelper.parseGravity(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextColor,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setTextColor(ParseHelper.parseColor(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.DrawableLeft,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableTop,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(compoundDrawables[0],drawable,compoundDrawables[2],compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableRight,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],drawable,compoundDrawables[3]);
    }
  }
);
  addHandler(Attributes.TextView.DrawableBottom,new ResourceReferenceProcessor<T>(context){
    @Override public void setDrawable(    T view,    Drawable drawable){
      Drawable[] compoundDrawables=view.getCompoundDrawables();
      view.setCompoundDrawablesWithIntrinsicBounds(drawable,compoundDrawables[1],compoundDrawables[2],drawable);
    }
  }
);
  addHandler(Attributes.TextView.MaxLines,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setMaxLines(ParseHelper.parseInt(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.Ellipsize,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      Enum ellipsize=ParseHelper.parseEllipsize(attributeValue);
      view.setEllipsize((android.text.TextUtils.TruncateAt)ellipsize);
    }
  }
);
  addHandler(Attributes.TextView.PaintFlags,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (attributeValue.equals(""String_Node_Str""))       view.setPaintFlags(view.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }
  }
);
  addHandler(Attributes.TextView.Prefix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(attributeValue + view.getText());
    }
  }
);
  addHandler(Attributes.TextView.Suffix,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setText(view.getText() + attributeValue);
    }
  }
);
  addHandler(Attributes.TextView.TextStyle,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      int typeface=ParseHelper.parseTypeFace(attributeValue);
      view.setTypeface(Typeface.defaultFromStyle(typeface));
    }
  }
);
  addHandler(Attributes.TextView.SingleLine,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setSingleLine(ParseHelper.parseBoolean(attributeValue));
    }
  }
);
  addHandler(Attributes.TextView.TextAllCaps,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
      }
    }
  }
);
  addHandler(Attributes.TextView.Hint,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setHint(attributeValue);
    }
  }
);
}",0.9787414965986394
28584,"@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,T view){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    view.setAllCaps(ParseHelper.parseBoolean(attributeValue));
  }
}","@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,T view){
  view.setHint(attributeValue);
}",0.7128205128205128
28585,"public abstract void handle(ParserContext parserContext,String attributeKey,JsonElement attributeValue,E view,JsonObject layout);","/** 
 * @param parserContext
 * @param attributeKey
 * @param attributeValue
 * @param view
 * @param layout
 */
public abstract void handle(ParserContext parserContext,String attributeKey,JsonElement attributeValue,E view,JsonObject layout);",0.6954177897574124
28586,"public abstract void handle(ParserContext parserContext,String attributeKey,String attributeValue,E view);","/** 
 * @param parserContext
 * @param attributeKey
 * @param attributeValue
 * @param view
 */
public abstract void handle(ParserContext parserContext,String attributeKey,String attributeValue,E view);",0.6883116883116883
28587,"/** 
 * Updates the Binding with new data. It uses a   {@link com.flipkart.layoutengine.binding.Binding}to get the associated   {@link android.view.View},   {@link com.flipkart.layoutengine.builder.LayoutBuilder}, and   {@link com.flipkart.layoutengine.parser.LayoutHandler} to update the value of the boundattribute with the new value fetched from the new data object passed.
 * @param binding The property name to update mapped to its{@link com.flipkart.layoutengine.binding.Binding}
 */
private void handleBinding(Binding binding){
  if (binding.hasRegEx()) {
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),new JsonPrimitive(binding.getAttributeValue()),layout,this,parent,index);
  }
 else {
    JsonElement dataValue;
    try {
      dataValue=Utils.getElementFromData(binding.getBindingName(),parserContext.getDataContext().getDataProvider(),index);
    }
 catch (    JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
      Log.e(TAG + ""String_Node_Str"",e.getMessage());
      if (getView() != null) {
        getView().setVisibility(View.GONE);
      }
      return;
    }
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),dataValue,layout,this,parent,index);
  }
}","/** 
 * Updates the Binding with new data. It uses a   {@link com.flipkart.layoutengine.binding.Binding}to get the associated   {@link android.view.View},   {@link com.flipkart.layoutengine.builder.LayoutBuilder}, and   {@link com.flipkart.layoutengine.parser.LayoutHandler} to update the value of the boundattribute with the new value fetched from the new data object passed.
 * @param binding The property name to update mapped to its{@link com.flipkart.layoutengine.binding.Binding}
 */
private void handleBinding(Binding binding){
  if (binding.hasRegEx()) {
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),new JsonPrimitive(binding.getAttributeValue()),layout,this,parent,index);
  }
 else {
    JsonElement dataValue;
    try {
      dataValue=Utils.getElementFromData(binding.getBindingName(),parserContext.getDataContext().getDataProvider(),index);
    }
 catch (    JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
      Log.e(TAG + ""String_Node_Str"",e.getMessage());
      if (getView() != null) {
        getView().setVisibility(View.GONE);
      }
      dataValue=new JsonPrimitive(ProteusConstants.DATA_NULL);
    }
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),dataValue,layout,this,parent,index);
  }
}",0.97759823723834
28588,"public static DataContext updateDataContext(DataContext dataContext,JsonProvider dataProvider,JsonObject scope,int childIndex){
  JsonObject reverseScope=new JsonObject();
  JsonObject newData=new JsonObject();
  JsonObject data=dataProvider.getData().getAsJsonObject();
  if (data == null) {
    data=new JsonObject();
  }
  for (  Map.Entry<String,JsonElement> entry : scope.entrySet()) {
    String key=entry.getKey();
    if (entry.getValue().isJsonPrimitive()) {
      JsonElement element;
      String value=entry.getValue().getAsString();
      try {
        element=Utils.getElementFromData(value,dataProvider,childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",""String_Node_Str"" + value + ""String_Node_Str""+ key+ ""String_Node_Str""+ e.getMessage());
        element=new JsonObject();
      }
      newData.add(key,element);
      String unAliasedValue=value.replace(ProteusConstants.CHILD_INDEX_REFERENCE,String.valueOf(childIndex));
      reverseScope.add(unAliasedValue,new JsonPrimitive(key));
    }
 else {
      newData.add(key,entry.getValue());
    }
  }
  Utils.addElements(newData,data,false);
  if (dataContext.getDataProvider() == null) {
    dataContext.setDataProvider(new JsonProvider(newData));
  }
 else {
    dataContext.getDataProvider().setData(newData);
  }
  dataContext.setScope(scope);
  dataContext.setReverseScope(reverseScope);
  dataContext.setIndex(childIndex);
  return dataContext;
}","public static DataContext updateDataContext(DataContext dataContext,JsonProvider dataProvider,JsonObject scope,int childIndex){
  JsonObject reverseScope=new JsonObject();
  JsonObject newData=new JsonObject();
  JsonObject data=dataProvider.getData().getAsJsonObject();
  if (data == null) {
    data=new JsonObject();
  }
  for (  Map.Entry<String,JsonElement> entry : scope.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue().getAsString();
    JsonElement element;
    try {
      element=Utils.getElementFromData(value,dataProvider,childIndex);
    }
 catch (    JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
      Log.e(TAG + ""String_Node_Str"",""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ e.getMessage());
      element=entry.getValue();
    }
    newData.add(key,element);
    String unAliasedValue=value.replace(ProteusConstants.CHILD_INDEX_REFERENCE,String.valueOf(childIndex));
    reverseScope.add(unAliasedValue,new JsonPrimitive(key));
  }
  Utils.addElements(newData,data,false);
  if (dataContext.getDataProvider() == null) {
    dataContext.setDataProvider(new JsonProvider(newData));
  }
 else {
    dataContext.getDataProvider().setData(newData);
  }
  dataContext.setScope(scope);
  dataContext.setReverseScope(reverseScope);
  dataContext.setIndex(childIndex);
  return dataContext;
}",0.8988608905764585
28589,"@Override public void replaceView(ProteusView proteusView){
  if (proteusView instanceof DataProteusView) {
    DataProteusView dataProteusView=(DataProteusView)proteusView;
    this.bindings=dataProteusView.getBindings();
    this.childLayout=dataProteusView.getChildLayout();
    this.dataPathForChildren=dataProteusView.getDataPathForChildren();
    this.parserContext=dataProteusView.getParserContext();
  }
  super.replaceView(proteusView);
}","@Override public void replaceView(ProteusView view){
  if (view instanceof DataProteusView) {
    DataProteusView dataProteusView=(DataProteusView)view;
    this.bindings=dataProteusView.getBindings();
  }
  super.replaceView(view);
}",0.6079295154185022
28590,"@Override public void replaceView(ProteusView proteusView){
  this.children=proteusView.getChildren();
  this.layout=proteusView.getLayout();
  this.styles=proteusView.getStyles();
  ViewGroup parent=(ViewGroup)this.view.getParent();
  if (parent != null && proteusView.getView() != null) {
    int index=parent.indexOfChild(this.view);
    if (proteusView.getView().getParent() != null) {
      ((ViewGroup)proteusView.getView().getParent()).removeView(proteusView.getView());
    }
    parent.removeView(this.view);
    parent.addView(proteusView.getView(),index);
  }
}","@Override public void replaceView(ProteusView view){
  this.children=view.getChildren();
  ViewGroup parent=(ViewGroup)this.view.getParent();
  if (parent != null) {
    int index=parent.indexOfChild(this.view);
    parent.removeView(this.view);
    parent.addView(view.getView(),index);
  }
}",0.4578034682080925
28591,"/** 
 * Starts recursively parsing the given jsonObject.
 * @param context      Represents the context of the parsing.
 * @param parent       The parent view group under which the view being created has to beadded as a child.
 * @param layout       The jsonObject which represents the current layout which is getting parsed.
 * @param existingView A view which needs to be used instead of creating a new one. Pass nullfor first pass.
 * @param childIndex   index of child inside its parent view.
 * @param styles
 * @return The {@link com.flipkart.layoutengine.view.ProteusView} that was built.
 */
protected ProteusView buildImpl(ParserContext context,final ProteusView parent,final JsonObject layout,View existingView,final int childIndex,Styles styles){
  JsonElement viewTypeElement=layout.get(ProteusConstants.TYPE);
  String viewType;
  if (viewTypeElement != null) {
    viewType=viewTypeElement.getAsString();
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  LayoutHandler<View> handler=layoutHandlers.get(viewType);
  if (handler == null) {
    return onUnknownViewEncountered(context,viewType,parent,layout,childIndex);
  }
  final View createdView;
  if (existingView == null) {
    ViewGroup parentViewGroup=(ViewGroup)parent.getView();
    createdView=createView(context,parentViewGroup,handler,layout);
    handler.setupView(context,parentViewGroup,createdView,layout);
  }
 else {
    createdView=existingView;
  }
  ProteusView createdProteusView=createProteusViewToReturn(createdView,layout,childIndex,parent);
  prepareView(createdProteusView,context);
  for (  Map.Entry<String,JsonElement> entry : layout.entrySet()) {
    if (ProteusConstants.TYPE.equals(entry.getKey()) || ProteusConstants.CHILDREN.equals(entry.getKey()) || ProteusConstants.CHILD_TYPE.equals(entry.getKey())|| ProteusConstants.STYLE.equals(entry.getKey())) {
      continue;
    }
    JsonElement jsonDataValue=entry.getValue();
    String attributeName=entry.getKey();
    boolean handled;
    handled=handleAttribute(handler,context,attributeName,jsonDataValue,layout,createdProteusView,parent,childIndex);
    if (!handled) {
      onUnknownAttributeEncountered(context,attributeName,jsonDataValue,layout,createdView,childIndex);
    }
  }
  if (styles != null && layout.has(ProteusConstants.STYLE) && !layout.get(ProteusConstants.STYLE).isJsonNull() && layout.get(ProteusConstants.STYLE).isJsonPrimitive()) {
    String[] styleSet=layout.get(ProteusConstants.STYLE).getAsString().split(ProteusConstants.STYLE_DELIMITER);
    for (    String styleName : styleSet) {
      processStyle(styles.getStyle(styleName),layout,createdProteusView,handler,context,parent,childIndex);
    }
  }
  List<ProteusView> childrenToAdd=parseChildren(handler,context,createdProteusView,layout,childIndex,styles);
  if (childrenToAdd == null) {
    return createdProteusView;
  }
  if (childrenToAdd.size() > 0) {
    handler.addChildren(context,createdProteusView,childrenToAdd,layout);
  }
  return createdProteusView;
}","/** 
 * Starts recursively parsing the given jsonObject.
 * @param context      Represents the context of the parsing.
 * @param parent       The parent view group under which the view being created has to beadded as a child.
 * @param layout       The jsonObject which represents the current layout which is getting parsed.
 * @param existingView A view which needs to be used instead of creating a new one. Pass nullfor first pass.
 * @param childIndex   index of child inside its parent view.
 * @param styles
 * @return The {@link com.flipkart.layoutengine.view.ProteusView} that was built.
 */
protected ProteusView buildImpl(ParserContext context,final ProteusView parent,final JsonObject layout,View existingView,final int childIndex,Styles styles){
  JsonElement viewTypeElement=layout.get(ProteusConstants.TYPE);
  String viewType;
  if (viewTypeElement != null) {
    viewType=viewTypeElement.getAsString();
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  LayoutHandler<View> handler=layoutHandlers.get(viewType);
  if (handler == null) {
    return onUnknownViewEncountered(context,viewType,parent,layout,childIndex);
  }
  final View createdView;
  if (existingView == null) {
    ViewGroup parentViewGroup=(ViewGroup)parent.getView();
    createdView=createView(context,parentViewGroup,handler,layout);
    handler.setupView(context,parentViewGroup,createdView,layout);
  }
 else {
    createdView=existingView;
  }
  ProteusView createdProteusView=createProteusViewToReturn(createdView,layout,childIndex,parent);
  prepareView(createdProteusView,context);
  for (  Map.Entry<String,JsonElement> entry : layout.entrySet()) {
    if (ProteusConstants.TYPE.equals(entry.getKey()) || ProteusConstants.CHILDREN.equals(entry.getKey()) || ProteusConstants.CHILD_TYPE.equals(entry.getKey())|| ProteusConstants.STYLE.equals(entry.getKey())) {
      continue;
    }
    JsonElement jsonDataValue=entry.getValue();
    String attributeName=entry.getKey();
    boolean handled;
    handled=handleAttribute(handler,context,attributeName,jsonDataValue,layout,createdProteusView,parent,childIndex);
    if (!handled) {
      onUnknownAttributeEncountered(context,attributeName,jsonDataValue,layout,createdView,childIndex);
    }
  }
  if (styles != null && layout.has(ProteusConstants.STYLE) && !layout.get(ProteusConstants.STYLE).isJsonNull() && layout.get(ProteusConstants.STYLE).isJsonPrimitive()) {
    String[] styleSet=layout.get(ProteusConstants.STYLE).getAsString().split(ProteusConstants.STYLE_DELIMITER);
    for (    String styleName : styleSet) {
      if (styles.hasStyle(styleName)) {
        processStyle(styles.getStyle(styleName),layout,createdProteusView,handler,context,parent,childIndex);
      }
    }
  }
  List<ProteusView> childrenToAdd=parseChildren(handler,context,createdProteusView,layout,childIndex,styles);
  if (childrenToAdd == null) {
    return createdProteusView;
  }
  if (childrenToAdd.size() > 0) {
    handler.addChildren(context,createdProteusView,childrenToAdd,layout);
  }
  return createdProteusView;
}",0.988157894736842
28592,"/** 
 * This is a base implementation which calls addChild() on the parent.
 * @param parent   The view group into which the child will be added.
 * @param children The List of child views which have to be added.
 */
@Override public void addChildren(ParserContext parserContext,ProteusView parent,List<ProteusView> children,JsonObject viewLayout){
  for (  ProteusView child : children) {
    parent.addChild(child);
  }
}","/** 
 * This is a base implementation which calls addView() on the parent.
 * @param parent   The view group into which the child will be added.
 * @param children The List of child views which have to be added.
 */
@Override public void addChildren(ParserContext parserContext,ProteusView parent,List<ProteusView> children,JsonObject viewLayout){
  for (  ProteusView child : children) {
    parent.addView(child);
  }
}",0.9786729857819904
28593,"private void updateChildrenFromData(){
  JsonArray childrenDataArray=new JsonArray();
  try {
    childrenDataArray=Utils.getElementFromData(dataPathForChildren,parserContext.getDataContext().getDataProvider(),index).getAsJsonArray();
  }
 catch (  JsonNullException|NoSuchDataPathException|InvalidDataPathException|IllegalStateException e) {
    Log.e(TAG + ""String_Node_Str"",e.getMessage());
  }
  if (children.size() > childrenDataArray.size()) {
    while (children.size() > childrenDataArray.size()) {
      ProteusView proteusView=children.remove(children.size() - 1);
      proteusView.removeView();
    }
  }
  JsonObject data=parserContext.getDataContext().getDataProvider().getData().getAsJsonObject();
  for (int index=0; index < childrenDataArray.size(); index++) {
    if (index < children.size()) {
      children.get(index).updateData(data);
    }
 else {
      if (childLayout != null) {
        DataProteusView proteusView=(DataProteusView)parserContext.getLayoutBuilder().build(view,childLayout,data,index,styles);
        addChild(proteusView);
      }
    }
  }
}","private void updateChildrenFromData(){
  JsonArray childrenDataArray=new JsonArray();
  try {
    childrenDataArray=Utils.getElementFromData(dataPathForChildren,parserContext.getDataContext().getDataProvider(),index).getAsJsonArray();
  }
 catch (  JsonNullException|NoSuchDataPathException|InvalidDataPathException|IllegalStateException e) {
    Log.e(TAG + ""String_Node_Str"",e.getMessage());
  }
  if (children.size() > childrenDataArray.size()) {
    while (children.size() > childrenDataArray.size()) {
      ProteusView proteusView=children.remove(children.size() - 1);
      unsetParent(proteusView.getView());
      proteusView.destroy();
    }
  }
  JsonObject data=parserContext.getDataContext().getDataProvider().getData().getAsJsonObject();
  for (int index=0; index < childrenDataArray.size(); index++) {
    if (index < children.size()) {
      children.get(index).updateData(data);
    }
 else {
      if (childLayout != null) {
        DataProteusView child=(DataProteusView)parserContext.getLayoutBuilder().build(view,childLayout,data,index,styles);
        addView(child);
      }
    }
  }
}",0.9607664233576644
28594,"@Override public void replaceView(ProteusView view){
  if (view instanceof DataProteusView) {
    DataProteusView dataProteusView=(DataProteusView)view;
    this.bindings=dataProteusView.getBindings();
  }
  super.replaceView(view);
}","@Override public void replaceView(ProteusView view){
  super.replaceView(view);
  if (view instanceof DataProteusView) {
    DataProteusView dataProteusView=(DataProteusView)view;
    this.bindings=dataProteusView.getBindings();
    this.parserContext=dataProteusView.getParserContext();
    this.childLayout=dataProteusView.getChildLayout();
    this.dataPathForChildren=dataProteusView.getDataPathForChildren();
  }
}",0.6339969372128637
28595,void setStyles(Styles styles);,"/** 
 * Returns the   {@link Styles} used in this {@link ProteusView}
 * @param styles Returns the {@link Styles} used in this {@link ProteusView}
 */
void setStyles(Styles styles);",0.2843601895734597
28596,"/** 
 * @return the list of children.
 */
ArrayList<ProteusView> getChildren();","/** 
 * @return the list of children.
 */
List<ProteusView> getChildren();",0.9673202614379084
28597,void removeView();,"/** 
 * Removes the child view at the specified location from this   {@code ProteusView}.
 * @param childIndex the index of the object to remove.
 * @return the removed object.
 */
@Nullable ProteusView removeView(int childIndex);",0.0564516129032258
28598,JsonObject getLayout();,"/** 
 * Returns the layout used to build this   {@link ProteusView}
 * @return Returns the layout used to build this {@link ProteusView}
 */
@Nullable JsonObject getLayout();",0.233502538071066
28599,"/** 
 * Updates the data associated with view wrapped by the   {@link ProteusView}with new   {@link org.json.JSONObject} object.
 * @param data new {@link org.json.JSONObject} object which will used to update the view.
 * @return reference to the updated view {@link android.view.View} wrapped by the{@link ProteusView}
 */
View updateData(JsonObject data);","/** 
 * Updates the data associated with view wrapped by the   {@link ProteusView}with new   {@link JsonObject} object.
 * @param data new {@link JsonObject} object which will used to update the view.
 * @return reference to the updated view {@link android.view.View} wrapped by the{@link ProteusView}
 */
View updateData(JsonObject data);",0.8362068965517241
28600,Styles getStyles();,"/** 
 * Returns the current   {@link Styles} used in this {@link ProteusView}
 * @return Returns the current {@link Styles} used in this {@link ProteusView}
 */
Styles getStyles();",0.1909547738693467
28601,"/** 
 * @return reference to the view {@link android.view.View} wrapped by the {@link ProteusView}
 */
View getView();","/** 
 * @return the view {@link android.view.View} wrapped by the {@link ProteusView}
 */
View getView();",0.9417040358744396
28602,"/** 
 * Replace the   {@link View},   {@link com.flipkart.layoutengine.binding.Binding} and childrenassociated to this  {@link ProteusView}.
 * @param view The {@link ProteusView} to use for the replacement
 */
void replaceView(ProteusView view);","/** 
 * Replaces the   {@link ProteusView} in the hierarchy.
 * @param view The {@link ProteusView} to use for the replacement
 */
void replaceView(ProteusView view);",0.7184466019417476
28603,"@Override public ArrayList<ProteusView> getChildren(){
  return this.children;
}","@Override public List<ProteusView> getChildren(){
  return this.children;
}",0.967741935483871
28604,"@Override public void removeView(){
  if (getParent() != null && getParent().getView() != null && view != null) {
    ((ViewGroup)getParent().getView()).removeView(view);
  }
}","@Override public ProteusView removeView(int childIndex){
  if (childIndex < children.size()) {
    ProteusView proteusView=getChildren().remove(childIndex);
    unsetParent(proteusView.getView());
    return proteusView;
  }
  return null;
}",0.2398081534772182
28605,"@Override public void replaceView(ProteusView view){
  this.children=view.getChildren();
  ViewGroup parent=(ViewGroup)this.view.getParent();
  if (parent != null) {
    int index=parent.indexOfChild(this.view);
    parent.removeView(this.view);
    parent.addView(view.getView(),index);
  }
}","@Override public void replaceView(ProteusView view){
  this.children=view.getChildren();
  this.layout=view.getLayout();
  this.styles=view.getStyles();
  ViewGroup parent=(ViewGroup)this.view.getParent();
  if (parent != null) {
    int index=parent.indexOfChild(this.view);
    parent.removeView(this.view);
    unsetParent(view.getView());
    parent.addView(view.getView(),index);
  }
}",0.8579795021961932
28606,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    if (parentViewGroup == null) {
      return;
    }
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
    parent.getChildren().add(child);
  }
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}",0.902621722846442
28607,"public static DataContext updateDataContext(DataContext dataContext,JsonProvider dataProvider,JsonObject scope,int childIndex){
  JsonObject reverseScope=new JsonObject();
  JsonObject newData=new JsonObject();
  JsonObject data=dataProvider.getData().getAsJsonObject();
  if (data == null) {
    data=new JsonObject();
  }
  for (  Map.Entry<String,JsonElement> entry : scope.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue().getAsString();
    JsonElement element;
    try {
      element=Utils.getElementFromData(value,dataProvider,childIndex);
    }
 catch (    JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
      Log.e(TAG + ""String_Node_Str"",""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ e.getMessage());
      element=entry.getValue();
    }
    newData.add(key,element);
    String unAliasedValue=value.replace(ProteusConstants.CHILD_INDEX_REFERENCE,String.valueOf(childIndex));
    reverseScope.add(unAliasedValue,new JsonPrimitive(key));
  }
  Utils.addElements(newData,data,false);
  if (dataContext.getDataProvider() == null) {
    dataContext.setDataProvider(new JsonProvider(newData));
  }
 else {
    dataContext.getDataProvider().setData(newData);
  }
  dataContext.setScope(scope);
  dataContext.setReverseScope(reverseScope);
  dataContext.setIndex(childIndex);
  return dataContext;
}","public static DataContext updateDataContext(DataContext dataContext,JsonProvider dataProvider,JsonObject scope,int childIndex){
  JsonObject reverseScope=new JsonObject();
  JsonObject newData=new JsonObject();
  JsonObject data=dataProvider.getData().getAsJsonObject();
  if (data == null) {
    data=new JsonObject();
  }
  for (  Map.Entry<String,JsonElement> entry : scope.entrySet()) {
    String key=entry.getKey();
    if (entry.getValue().isJsonPrimitive()) {
      JsonElement element;
      String value=entry.getValue().getAsString();
      try {
        element=Utils.getElementFromData(value,dataProvider,childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",""String_Node_Str"" + value + ""String_Node_Str""+ key+ ""String_Node_Str""+ e.getMessage());
        element=new JsonObject();
      }
      newData.add(key,element);
      String unAliasedValue=value.replace(ProteusConstants.CHILD_INDEX_REFERENCE,String.valueOf(childIndex));
      reverseScope.add(unAliasedValue,new JsonPrimitive(key));
    }
 else {
      newData.add(key,entry.getValue());
    }
  }
  Utils.addElements(newData,data,false);
  if (dataContext.getDataProvider() == null) {
    dataContext.setDataProvider(new JsonProvider(newData));
  }
 else {
    dataContext.getDataProvider().setData(newData);
  }
  dataContext.setScope(scope);
  dataContext.setReverseScope(reverseScope);
  dataContext.setIndex(childIndex);
  return dataContext;
}",0.9209527096996892
28608,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}",0.981081081081081
28609,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (parent != null) {
    if (child.getView().getParent() != null) {
      ((ViewGroup)child.getView().getParent()).removeView(child.getView());
    }
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
}",0.518850987432675
28610,"@Override public void replaceView(ProteusView child){
  if (child.getView() == null) {
    return;
  }
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent != null && parent.getView() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
 else {
    ViewGroup parentView=(ViewGroup)this.view.getParent();
    if (parentView == null) {
      return;
    }
    int index=parentView.indexOfChild(this.view);
    parentView.removeView(this.view);
    parentView.addView(child.getView(),index);
    parent.getChildren().add(child);
  }
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    if (parentViewGroup == null) {
      return;
    }
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
    parent.getChildren().add(child);
  }
}",0.6699206833435022
28611,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    if (parentViewGroup == null) {
      return;
    }
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
    parent.getChildren().add(child);
  }
}",0.902621722846442
28612,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}",0.981081081081081
28613,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (parent != null) {
    if (child.getView().getParent() != null) {
      ((ViewGroup)child.getView().getParent()).removeView(child.getView());
    }
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
}","@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
  }
  parent.addView(child,index);
}",0.4111310592459605
28614,"/** 
 * This method will register all the internal layout handlers to the builder specified.
 * @param layoutBuilder The layout builder which will have handlers registered to it.
 */
protected void registerBuiltInHandlers(LayoutBuilder layoutBuilder){
  ViewParser viewParser=new ViewParser(View.class);
  ImageViewParser imageViewParser=new ImageViewParser(viewParser);
  ImageButtonParser imageButtonParser=new ImageButtonParser(imageViewParser);
  NetworkImageViewParser networkImageViewParser=new NetworkImageViewParser(imageViewParser);
  RelativeLayoutParser relativeLayoutParser=new RelativeLayoutParser(viewParser);
  LinearLayoutParser linearLayoutParser=new LinearLayoutParser(viewParser);
  FrameLayoutParser frameLayoutParser=new FrameLayoutParser(viewParser);
  ScrollViewParser scrollViewParser=new ScrollViewParser(viewParser);
  HorizontalScrollViewParser horizontalScrollViewParser=new HorizontalScrollViewParser(viewParser);
  TextViewParser textViewParser=new TextViewParser(viewParser);
  EditTextParser editTextParser=new EditTextParser(textViewParser);
  ButtonParser buttonParser=new ButtonParser(textViewParser);
  ViewPagerParser viewPagerParser=new ViewPagerParser(viewParser);
  WebViewParser webViewParser=new WebViewParser(viewParser);
  RatingBarParser ratingBarParser=new RatingBarParser(viewParser);
  CheckBoxParser checkBoxParser=new CheckBoxParser(buttonParser);
  ProgressBarParser progressBarParser=new ProgressBarParser(viewParser);
  HorizontalProgressBarParser horizontalProgressBarParser=new HorizontalProgressBarParser(viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",relativeLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",linearLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",frameLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",scrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalScrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",textViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",editTextParser);
  layoutBuilder.registerHandler(""String_Node_Str"",buttonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageButtonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewPagerParser);
  layoutBuilder.registerHandler(""String_Node_Str"",networkImageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",webViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",ratingBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",checkBoxParser);
  layoutBuilder.registerHandler(""String_Node_Str"",progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalProgressBarParser);
}","/** 
 * This method will register all the internal layout handlers to the builder specified.
 * @param layoutBuilder The layout builder which will have handlers registered to it.
 */
protected void registerBuiltInHandlers(LayoutBuilder layoutBuilder){
  ViewParser viewParser=new ViewParser(View.class);
  ImageViewParser imageViewParser=new ImageViewParser(viewParser);
  ImageButtonParser imageButtonParser=new ImageButtonParser(imageViewParser);
  NetworkImageViewParser networkImageViewParser=new NetworkImageViewParser(imageViewParser);
  RelativeLayoutParser relativeLayoutParser=new RelativeLayoutParser(viewParser);
  LinearLayoutParser linearLayoutParser=new LinearLayoutParser(viewParser);
  FrameLayoutParser frameLayoutParser=new FrameLayoutParser(viewParser);
  ScrollViewParser scrollViewParser=new ScrollViewParser(viewParser);
  HorizontalScrollViewParser horizontalScrollViewParser=new HorizontalScrollViewParser(scrollViewParser);
  TextViewParser textViewParser=new TextViewParser(viewParser);
  EditTextParser editTextParser=new EditTextParser(textViewParser);
  ButtonParser buttonParser=new ButtonParser(textViewParser);
  ViewPagerParser viewPagerParser=new ViewPagerParser(viewParser);
  WebViewParser webViewParser=new WebViewParser(viewParser);
  RatingBarParser ratingBarParser=new RatingBarParser(viewParser);
  CheckBoxParser checkBoxParser=new CheckBoxParser(buttonParser);
  ProgressBarParser progressBarParser=new ProgressBarParser(viewParser);
  HorizontalProgressBarParser horizontalProgressBarParser=new HorizontalProgressBarParser(viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",relativeLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",linearLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",frameLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",scrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalScrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",textViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",editTextParser);
  layoutBuilder.registerHandler(""String_Node_Str"",buttonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageButtonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewPagerParser);
  layoutBuilder.registerHandler(""String_Node_Str"",networkImageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",webViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",ratingBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",checkBoxParser);
  layoutBuilder.registerHandler(""String_Node_Str"",progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalProgressBarParser);
}",0.9985885673959068
28615,"@Override public void replaceView(ProteusView child){
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent == null || parent.getView() == null || child.getView() == null) {
    return;
  }
  if (parent.getChildren() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
 else {
    ViewGroup parentViewGroup=(ViewGroup)this.view.getParent();
    if (parentViewGroup == null) {
      return;
    }
    int index=parentViewGroup.indexOfChild(this.view);
    parentViewGroup.removeView(this.view);
    parentViewGroup.addView(child.getView(),index);
    parent.getChildren().add(child);
  }
}","@Override public void replaceView(ProteusView child){
  if (child.getView() == null) {
    return;
  }
  if (child.getView().getParent() != null) {
    ((ViewGroup)child.getView().getParent()).removeView(child.getView());
  }
  if (parent != null && parent.getView() != null && index < parent.getChildren().size()) {
    parent.removeView(index).destroy();
    parent.addView(child,index);
  }
 else {
    ViewGroup parentView=(ViewGroup)this.view.getParent();
    if (parentView == null) {
      return;
    }
    int index=parentView.indexOfChild(this.view);
    parentView.removeView(this.view);
    parentView.addView(child.getView(),index);
    parent.getChildren().add(child);
  }
  this.children=child.getChildren();
  this.layout=child.getLayout();
  this.styles=child.getStyles();
}",0.738255033557047
28616,"/** 
 * This method will register all the internal layout handlers to the builder specified.
 * @param layoutBuilder The layout builder which will have handlers registered to it.
 */
protected void registerBuiltInHandlers(LayoutBuilder layoutBuilder){
  ViewParser viewParser=new ViewParser(View.class);
  ImageViewParser imageViewParser=new ImageViewParser(viewParser);
  ImageButtonParser imageButtonParser=new ImageButtonParser(imageViewParser);
  NetworkImageViewParser networkImageViewParser=new NetworkImageViewParser(imageViewParser);
  RelativeLayoutParser relativeLayoutParser=new RelativeLayoutParser(viewParser);
  LinearLayoutParser linearLayoutParser=new LinearLayoutParser(viewParser);
  FrameLayoutParser frameLayoutParser=new FrameLayoutParser(viewParser);
  ScrollViewParser scrollViewParser=new ScrollViewParser(viewParser);
  HorizontalScrollViewParser horizontalScrollViewParser=new HorizontalScrollViewParser(scrollViewParser);
  TextViewParser textViewParser=new TextViewParser(viewParser);
  EditTextParser editTextParser=new EditTextParser(textViewParser);
  ButtonParser buttonParser=new ButtonParser(textViewParser);
  ViewPagerParser viewPagerParser=new ViewPagerParser(viewParser);
  WebViewParser webViewParser=new WebViewParser(viewParser);
  RatingBarParser ratingBarParser=new RatingBarParser(viewParser);
  CheckBoxParser checkBoxParser=new CheckBoxParser(buttonParser);
  ProgressBarParser progressBarParser=new ProgressBarParser(viewParser);
  HorizontalProgressBarParser horizontalProgressBarParser=new HorizontalProgressBarParser(viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",relativeLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",linearLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",frameLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",scrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalScrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",textViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",editTextParser);
  layoutBuilder.registerHandler(""String_Node_Str"",buttonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageButtonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewPagerParser);
  layoutBuilder.registerHandler(""String_Node_Str"",networkImageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",webViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",ratingBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",checkBoxParser);
  layoutBuilder.registerHandler(""String_Node_Str"",progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalProgressBarParser);
}","/** 
 * This method will register all the internal layout handlers to the builder specified.
 * @param layoutBuilder The layout builder which will have handlers registered to it.
 */
protected void registerBuiltInHandlers(LayoutBuilder layoutBuilder){
  ViewParser viewParser=new ViewParser(View.class);
  ImageViewParser imageViewParser=new ImageViewParser(viewParser);
  ImageButtonParser imageButtonParser=new ImageButtonParser(imageViewParser);
  NetworkImageViewParser networkImageViewParser=new NetworkImageViewParser(imageViewParser);
  RelativeLayoutParser relativeLayoutParser=new RelativeLayoutParser(viewParser);
  LinearLayoutParser linearLayoutParser=new LinearLayoutParser(viewParser);
  FrameLayoutParser frameLayoutParser=new FrameLayoutParser(viewParser);
  ScrollViewParser scrollViewParser=new ScrollViewParser(viewParser);
  HorizontalScrollViewParser horizontalScrollViewParser=new HorizontalScrollViewParser(viewParser);
  TextViewParser textViewParser=new TextViewParser(viewParser);
  EditTextParser editTextParser=new EditTextParser(textViewParser);
  ButtonParser buttonParser=new ButtonParser(textViewParser);
  ViewPagerParser viewPagerParser=new ViewPagerParser(viewParser);
  WebViewParser webViewParser=new WebViewParser(viewParser);
  RatingBarParser ratingBarParser=new RatingBarParser(viewParser);
  CheckBoxParser checkBoxParser=new CheckBoxParser(buttonParser);
  ProgressBarParser progressBarParser=new ProgressBarParser(viewParser);
  HorizontalProgressBarParser horizontalProgressBarParser=new HorizontalProgressBarParser(viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",relativeLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",linearLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",frameLayoutParser);
  layoutBuilder.registerHandler(""String_Node_Str"",scrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalScrollViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",textViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",editTextParser);
  layoutBuilder.registerHandler(""String_Node_Str"",buttonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",imageButtonParser);
  layoutBuilder.registerHandler(""String_Node_Str"",viewPagerParser);
  layoutBuilder.registerHandler(""String_Node_Str"",networkImageViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",webViewParser);
  layoutBuilder.registerHandler(""String_Node_Str"",ratingBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",checkBoxParser);
  layoutBuilder.registerHandler(""String_Node_Str"",progressBarParser);
  layoutBuilder.registerHandler(""String_Node_Str"",horizontalProgressBarParser);
}",0.9985885673959068
28617,"@Override protected void prepareHandlers(Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.HorizontalScrollView.FillViewPort,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      boolean fillViewPort=ParseHelper.parseBoolean(attributeValue);
      view.setFillViewport(fillViewPort);
    }
  }
);
}","@Override protected void prepareHandlers(Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.HorizontalScrollView.FillViewPort,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      boolean fillViewPort=ParseHelper.parseBoolean(attributeValue);
      view.setFillViewport(fillViewPort);
    }
  }
);
  addHandler(Attributes.ScrollView.Scrollbars,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      if (""String_Node_Str"".equals(attributeValue)) {
        view.setHorizontalScrollBarEnabled(false);
        view.setVerticalScrollBarEnabled(false);
      }
 else       if (""String_Node_Str"".equals(attributeValue)) {
        view.setHorizontalScrollBarEnabled(true);
        view.setVerticalScrollBarEnabled(false);
      }
 else       if (""String_Node_Str"".equals(attributeValue)) {
        view.setHorizontalScrollBarEnabled(false);
        view.setVerticalScrollBarEnabled(true);
      }
 else {
        view.setHorizontalScrollBarEnabled(false);
        view.setVerticalScrollBarEnabled(false);
      }
    }
  }
);
}",0.5128504672897196
28618,"@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,T view){
  boolean fillViewPort=ParseHelper.parseBoolean(attributeValue);
  view.setFillViewport(fillViewPort);
}","@Override public void handle(ParserContext parserContext,String attributeKey,String attributeValue,T view){
  if (""String_Node_Str"".equals(attributeValue)) {
    view.setHorizontalScrollBarEnabled(false);
    view.setVerticalScrollBarEnabled(false);
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    view.setHorizontalScrollBarEnabled(true);
    view.setVerticalScrollBarEnabled(false);
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    view.setHorizontalScrollBarEnabled(false);
    view.setVerticalScrollBarEnabled(true);
  }
 else {
    view.setHorizontalScrollBarEnabled(false);
    view.setVerticalScrollBarEnabled(false);
  }
}",0.2565864833906071
28619,"@Override public void replaceView(ProteusView view){
  if (view instanceof DataProteusView) {
    DataProteusView dataProteusView=(DataProteusView)view;
    this.bindings=dataProteusView.getBindings();
  }
  super.replaceView(view);
}","@Override public void replaceView(ProteusView proteusView){
  if (proteusView instanceof DataProteusView) {
    DataProteusView dataProteusView=(DataProteusView)proteusView;
    this.bindings=dataProteusView.getBindings();
    this.childLayout=dataProteusView.getChildLayout();
    this.dataPathForChildren=dataProteusView.getDataPathForChildren();
    this.parserContext=dataProteusView.getParserContext();
  }
  super.replaceView(proteusView);
}",0.6754772393538914
28620,"@Override public void replaceView(ProteusView view){
  this.children=view.getChildren();
  ViewGroup parent=(ViewGroup)this.view.getParent();
  if (parent != null) {
    int index=parent.indexOfChild(this.view);
    parent.removeView(this.view);
    parent.addView(view.getView(),index);
  }
}","@Override public void replaceView(ProteusView proteusView){
  this.children=proteusView.getChildren();
  this.layout=proteusView.getLayout();
  this.styles=proteusView.getStyles();
  ViewGroup parent=(ViewGroup)this.view.getParent();
  if (parent != null && proteusView.getView() != null) {
    int index=parent.indexOfChild(this.view);
    if (proteusView.getView().getParent() != null) {
      ((ViewGroup)proteusView.getView().getParent()).removeView(proteusView.getView());
    }
    parent.removeView(this.view);
    parent.addView(proteusView.getView(),index);
  }
}",0.584971098265896
28621,"private JsonElement findAndReplaceValues(JsonElement jsonDataValue,ParserContext parserContext,LayoutHandler handler,String attributeName,ProteusView proteusView,JsonObject viewJsonObject,int childIndex){
  boolean failed=false;
  String attributeValue=jsonDataValue.getAsString();
  DataProteusView dataProteusView=(DataProteusView)proteusView;
  if (attributeValue != null && !""String_Node_Str"".equals(attributeValue) && (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX || attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX)) {
    if (attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX) {
      Matcher regexMatcher=ProteusConstants.REGEX_PATTERN.matcher(attributeValue);
      String finalValue=attributeValue;
      while (regexMatcher.find()) {
        String matchedString=regexMatcher.group(0);
        String bindingName;
        if (regexMatcher.group(3) != null) {
          String dataPath=regexMatcher.group(3);
          try {
            finalValue=finalValue.replace(matchedString,Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()).getAsString());
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            finalValue=dataPath;
            failed=true;
          }
          bindingName=dataPath;
        }
 else {
          String dataPath=regexMatcher.group(1);
          String formatterName=regexMatcher.group(2);
          String formattedValue;
          try {
            formattedValue=format(Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()),formatterName);
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            formattedValue=dataPath;
            failed=true;
          }
          finalValue=finalValue.replace(matchedString,formattedValue);
          bindingName=dataPath;
        }
        addBinding(dataProteusView,bindingName,attributeName,attributeValue,handler,true);
      }
      finalValue=finalValue.substring(1);
      jsonDataValue=new JsonPrimitive(finalValue);
    }
 else     if (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX) {
      JsonElement elementFromData;
      try {
        elementFromData=Utils.getElementFromData(attributeValue.substring(1),parserContext.getDataContext().getDataProvider(),childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",e.getMessage());
        failed=true;
        elementFromData=JsonNull.INSTANCE;
      }
      if (elementFromData != null) {
        jsonDataValue=elementFromData;
      }
      addBinding(dataProteusView,attributeValue.substring(1),attributeName,attributeValue,handler,false);
    }
  }
  if (dataProteusView.getView() != null) {
    if (failed) {
      if (viewJsonObject != null && !viewJsonObject.isJsonNull() && viewJsonObject.get(Attributes.View.Visibility.getName()) != null) {
        String visibility=viewJsonObject.get(Attributes.View.Visibility.getName()).getAsString();
        if (ProteusConstants.DATA_VISIBILITY.equals(visibility)) {
          dataProteusView.getView().setVisibility(View.INVISIBLE);
        }
      }
 else {
        dataProteusView.getView().setVisibility(View.GONE);
      }
    }
 else     if (dataProteusView.isViewUpdating()) {
      dataProteusView.getView().setVisibility(View.VISIBLE);
    }
  }
  return jsonDataValue;
}","private JsonElement findAndReplaceValues(JsonElement jsonDataValue,ParserContext parserContext,LayoutHandler handler,String attributeName,ProteusView proteusView,JsonObject viewJsonObject,int childIndex){
  boolean failed=false;
  String attributeValue=jsonDataValue.getAsString();
  DataProteusView dataProteusView=(DataProteusView)proteusView;
  if (attributeValue != null && !""String_Node_Str"".equals(attributeValue) && (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX || attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX)) {
    if (attributeValue.charAt(0) == ProteusConstants.REGEX_PREFIX) {
      Matcher regexMatcher=ProteusConstants.REGEX_PATTERN.matcher(attributeValue);
      String finalValue=attributeValue;
      while (regexMatcher.find()) {
        String matchedString=regexMatcher.group(0);
        String bindingName;
        if (regexMatcher.group(3) != null) {
          String dataPath=regexMatcher.group(3);
          try {
            finalValue=finalValue.replace(matchedString,Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()).getAsString());
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            finalValue=dataPath;
            failed=true;
          }
          bindingName=dataPath;
        }
 else {
          String dataPath=regexMatcher.group(1);
          String formatterName=regexMatcher.group(2);
          String formattedValue;
          try {
            formattedValue=format(Utils.getElementFromData(dataPath,parserContext.getDataContext().getDataProvider(),parserContext.getDataContext().getIndex()),formatterName);
          }
 catch (          JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
            Log.e(TAG + ""String_Node_Str"",e.getMessage());
            formattedValue=dataPath;
            failed=true;
          }
          finalValue=finalValue.replace(matchedString,formattedValue);
          bindingName=dataPath;
        }
        addBinding(dataProteusView,bindingName,attributeName,attributeValue,handler,true);
      }
      finalValue=finalValue.substring(1);
      jsonDataValue=new JsonPrimitive(finalValue);
    }
 else     if (attributeValue.charAt(0) == ProteusConstants.DATA_PREFIX) {
      JsonElement elementFromData;
      try {
        elementFromData=Utils.getElementFromData(attributeValue.substring(1),parserContext.getDataContext().getDataProvider(),childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",e.getMessage());
        failed=true;
        elementFromData=new JsonPrimitive(ProteusConstants.DATA_NULL);
      }
      if (elementFromData != null) {
        jsonDataValue=elementFromData;
      }
      addBinding(dataProteusView,attributeValue.substring(1),attributeName,attributeValue,handler,false);
    }
  }
  if (dataProteusView.getView() != null) {
    if (failed) {
      if (viewJsonObject != null && !viewJsonObject.isJsonNull() && viewJsonObject.get(Attributes.View.Visibility.getName()) != null) {
        String visibility=viewJsonObject.get(Attributes.View.Visibility.getName()).getAsString();
        if (ProteusConstants.DATA_VISIBILITY.equals(visibility)) {
          dataProteusView.getView().setVisibility(View.INVISIBLE);
        }
      }
 else {
        dataProteusView.getView().setVisibility(View.GONE);
      }
    }
 else     if (dataProteusView.isViewUpdating()) {
      dataProteusView.getView().setVisibility(View.VISIBLE);
    }
  }
  return jsonDataValue;
}",0.9934906427990235
28622,"public static int parseVisibility(JsonElement element){
  String attributeValue;
  int returnValue;
  if (element.isJsonPrimitive()) {
    if (!element.getAsString().equals(""String_Node_Str"") && !element.getAsString().equals(""String_Node_Str"")) {
      attributeValue=""String_Node_Str"";
    }
 else {
      attributeValue=""String_Node_Str"";
    }
  }
 else   if (element.isJsonNull()) {
    attributeValue=""String_Node_Str"";
  }
 else {
    attributeValue=""String_Node_Str"";
  }
  if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.VISIBLE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.INVISIBLE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.GONE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.VISIBLE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.GONE;
  }
 else {
    returnValue=View.VISIBLE;
  }
  return returnValue;
}","public static int parseVisibility(JsonElement element){
  String attributeValue;
  int returnValue;
  if (element.isJsonPrimitive()) {
    if (!element.getAsString().equals(""String_Node_Str"") && !element.getAsString().equals(""String_Node_Str"") && !element.getAsString().equals(ProteusConstants.DATA_NULL)) {
      attributeValue=element.getAsString();
    }
 else {
      attributeValue=""String_Node_Str"";
    }
  }
 else   if (element.isJsonNull()) {
    attributeValue=""String_Node_Str"";
  }
 else {
    attributeValue=""String_Node_Str"";
  }
  if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.VISIBLE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.INVISIBLE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.GONE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.VISIBLE;
  }
 else   if (""String_Node_Str"".equals(attributeValue)) {
    returnValue=View.GONE;
  }
 else {
    returnValue=View.VISIBLE;
  }
  return returnValue;
}",0.9513034923757994
28623,"@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1) private void init(final String url,boolean loadImmediately){
  final CountDownLatch lock;
  if (view == null) {
    loadImmediately=true;
  }
  if (loadImmediately) {
    startSyncLoad(url,view);
  }
 else {
    lock=null;
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB_MR1) {
      startAsyncLoad(url,view);
    }
 else {
      view.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener(){
        @Override public void onViewAttachedToWindow(        final View view){
          startAsyncLoad(url,view);
        }
        @Override public void onViewDetachedFromWindow(        View view){
          cancelLoad();
        }
      }
);
    }
  }
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1) private void init(final String url,boolean loadImmediately){
  final CountDownLatch lock;
  if (view == null) {
    loadImmediately=true;
  }
  if (loadImmediately) {
    startSyncLoad(url,view);
  }
 else {
    lock=null;
    startAsyncLoad(url,view);
  }
}",0.5925925925925926
28624,"@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.ProgressBar.Max,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setMax((int)Double.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.Progress,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setProgress((int)Double.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.ProgressTint,new JsonDataProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    T view,    JsonObject layout){
      if (!attributeValue.isJsonObject() || attributeValue.isJsonNull()) {
        return;
      }
      JsonObject data=attributeValue.getAsJsonObject();
      int background=Color.TRANSPARENT;
      int progress=Color.TRANSPARENT;
      String value=Utils.getPropertyAsString(data,""String_Node_Str"");
      if (value != null) {
        background=ParseHelper.parseColor(value);
      }
      value=Utils.getPropertyAsString(data,""String_Node_Str"");
      if (value != null) {
        progress=ParseHelper.parseColor(value);
      }
      view.setProgressDrawable(getLayerDrawable(progress,background));
    }
  }
);
}","@Override protected void prepareHandlers(final Context context){
  super.prepareHandlers(context);
  addHandler(Attributes.ProgressBar.Max,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setMax((int)ParseHelper.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.Progress,new StringAttributeProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    String attributeValue,    T view){
      view.setProgress((int)ParseHelper.parseDouble(attributeValue));
    }
  }
);
  addHandler(Attributes.ProgressBar.ProgressTint,new JsonDataProcessor<T>(){
    @Override public void handle(    ParserContext parserContext,    String attributeKey,    JsonElement attributeValue,    T view,    JsonObject layout){
      if (!attributeValue.isJsonObject() || attributeValue.isJsonNull()) {
        return;
      }
      JsonObject data=attributeValue.getAsJsonObject();
      int background=Color.TRANSPARENT;
      int progress=Color.TRANSPARENT;
      String value=Utils.getPropertyAsString(data,""String_Node_Str"");
      if (value != null) {
        background=ParseHelper.parseColor(value);
      }
      value=Utils.getPropertyAsString(data,""String_Node_Str"");
      if (value != null) {
        progress=ParseHelper.parseColor(value);
      }
      view.setProgressDrawable(getLayerDrawable(progress,background));
    }
  }
);
}",0.988793671720501
28625,"@Override public Adapter onAdapterRequired(ParserContext parserContext,ProteusView<View> parent,List<ProteusView> children,JsonObject viewLayout){
  return null;
}","@Override public Adapter onAdapterRequired(ParserContext parserContext,ProteusView parent,List<ProteusView> children,JsonObject viewLayout){
  return null;
}",0.98125
28626,"@Override public PagerAdapter onPagerAdapterRequired(ParserContext parserContext,ProteusView<View> parent,List<ProteusView> children,JsonObject viewLayout){
  return null;
}","@Override public PagerAdapter onPagerAdapterRequired(ParserContext parserContext,ProteusView parent,List<ProteusView> children,JsonObject viewLayout){
  return null;
}",0.9823529411764704
28627,"private LayoutBuilderCallback createCallback(){
  return new LayoutBuilderCallback(){
    @Override public void onUnknownAttribute(    ParserContext context,    String attribute,    JsonElement element,    JsonObject object,    View view,    int childIndex){
    }
    @Override public ProteusView onUnknownViewType(    ParserContext context,    String viewType,    JsonObject object,    ProteusView parent,    int childIndex){
      return null;
    }
    @Override public JsonObject onChildTypeLayoutRequired(    ParserContext context,    String viewType,    JsonObject parentViewJsonObject,    ProteusView parent){
      return null;
    }
    @Override public void onViewBuiltFromViewProvider(    ProteusView createdView,    String viewType,    ParserContext context,    JsonObject viewJsonObject,    ProteusView parent,    int childIndex){
    }
    @Override public View onEvent(    ParserContext context,    View view,    JsonElement attributeValue,    EventType eventType){
      Log.d(""String_Node_Str"",attributeValue.toString());
      return view;
    }
    @Override public PagerAdapter onPagerAdapterRequired(    ParserContext parserContext,    ProteusView<View> parent,    List<ProteusView> children,    JsonObject viewLayout){
      return null;
    }
    @Override public Adapter onAdapterRequired(    ParserContext parserContext,    ProteusView<View> parent,    List<ProteusView> children,    JsonObject viewLayout){
      return null;
    }
  }
;
}","private LayoutBuilderCallback createCallback(){
  return new LayoutBuilderCallback(){
    @Override public void onUnknownAttribute(    ParserContext context,    String attribute,    JsonElement element,    JsonObject object,    View view,    int childIndex){
    }
    @Override public ProteusView onUnknownViewType(    ParserContext context,    String viewType,    JsonObject object,    ProteusView parent,    int childIndex){
      return null;
    }
    @Override public JsonObject onChildTypeLayoutRequired(    ParserContext context,    String viewType,    JsonObject parentViewJsonObject,    ProteusView parent){
      return null;
    }
    @Override public void onViewBuiltFromViewProvider(    ProteusView createdView,    String viewType,    ParserContext context,    JsonObject viewJsonObject,    ProteusView parent,    int childIndex){
    }
    @Override public View onEvent(    ParserContext context,    View view,    JsonElement attributeValue,    EventType eventType){
      Log.d(""String_Node_Str"",attributeValue.toString());
      return view;
    }
    @Override public PagerAdapter onPagerAdapterRequired(    ParserContext parserContext,    ProteusView parent,    List<ProteusView> children,    JsonObject viewLayout){
      return null;
    }
    @Override public Adapter onAdapterRequired(    ParserContext parserContext,    ProteusView parent,    List<ProteusView> children,    JsonObject viewLayout){
      return null;
    }
  }
;
}",0.995890410958904
28628,"@Override protected JsonArray parseChildren(LayoutHandler handler,ParserContext parserContext,JsonElement childrenElement,int childIndex){
  if (childrenElement.isJsonPrimitive()) {
    String attributeValue=childrenElement.getAsString();
    if (attributeValue != null && !""String_Node_Str"".equals(attributeValue)) {
      try {
        childrenElement=Utils.getElementFromData(attributeValue,parserContext.getDataContext().getDataProvider(),childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",e.getMessage());
      }
    }
  }
  return super.parseChildren(handler,parserContext,childrenElement,childIndex);
}","@Override protected JsonArray parseChildren(LayoutHandler handler,ParserContext parserContext,JsonElement childrenElement,int childIndex){
  if (childrenElement.isJsonPrimitive()) {
    String attributeValue=childrenElement.getAsString();
    if (attributeValue != null && !""String_Node_Str"".equals(attributeValue)) {
      try {
        childrenElement=Utils.getElementFromData(attributeValue,parserContext.getDataContext().getDataProvider(),childIndex);
      }
 catch (      JsonNullException|NoSuchDataPathException|InvalidDataPathException e) {
        Log.e(TAG + ""String_Node_Str"",e.getMessage());
        childrenElement=new JsonArray();
      }
    }
  }
  return super.parseChildren(handler,parserContext,childrenElement,childIndex);
}",0.971704623878537
28629,"PagerAdapter onPagerAdapterRequired(ParserContext parserContext,ProteusView<View> parent,final List<ProteusView> children,JsonObject viewLayout);","PagerAdapter onPagerAdapterRequired(ParserContext parserContext,ProteusView parent,final List<ProteusView> children,JsonObject viewLayout);",0.9788732394366196
28630,"Adapter onAdapterRequired(ParserContext parserContext,ProteusView<View> parent,final List<ProteusView> children,JsonObject viewLayout);","Adapter onAdapterRequired(ParserContext parserContext,ProteusView parent,final List<ProteusView> children,JsonObject viewLayout);",0.9772727272727272
28631,"boolean handleAttribute(ParserContext context,String attribute,JsonObject jsonObject,JsonElement element,ProteusView<E> view,int childIndex);","boolean handleAttribute(ParserContext context,String attribute,JsonObject jsonObject,JsonElement element,ProteusView view,int childIndex);",0.989247311827957
28632,"void addChildren(ParserContext parserContext,ProteusView<View> parent,List<ProteusView> children,JsonObject viewLayout);","void addChildren(ParserContext parserContext,ProteusView parent,List<ProteusView> children,JsonObject viewLayout);",0.9743589743589745
28633,"@Override public boolean handleAttribute(ParserContext context,String attribute,JsonObject jsonObject,JsonElement element,ProteusView<T> view,int childIndex){
  AttributeProcessor attributeProcessor=handlers.get(attribute);
  if (attributeProcessor != null) {
    attributeProcessor.handle(context,attribute,element,view.getView());
    return true;
  }
  return false;
}","@Override public boolean handleAttribute(ParserContext context,String attribute,JsonObject jsonObject,JsonElement element,ProteusView view,int childIndex){
  AttributeProcessor attributeProcessor=handlers.get(attribute);
  if (attributeProcessor != null) {
    attributeProcessor.handle(context,attribute,element,view.getView());
    return true;
  }
  return false;
}",0.9959404600811907
28634,"/** 
 * This is a base implementation which calls addChild() on the parent.
 * @param parent   The view group into which the child will be added.
 * @param children The List of child views which have to be added.
 */
@Override public void addChildren(ParserContext parserContext,ProteusView<View> parent,List<ProteusView> children,JsonObject viewLayout){
  for (  ProteusView child : children) {
    parent.addChild(child);
  }
}","/** 
 * This is a base implementation which calls addChild() on the parent.
 * @param parent   The view group into which the child will be added.
 * @param children The List of child views which have to be added.
 */
@Override public void addChildren(ParserContext parserContext,ProteusView parent,List<ProteusView> children,JsonObject viewLayout){
  for (  ProteusView child : children) {
    parent.addChild(child);
  }
}",0.9929577464788732
28635,"@Override public boolean handleAttribute(ParserContext context,String attribute,JsonObject jsonObject,JsonElement element,ProteusView<T> view,int childIndex){
  boolean handled=super.handleAttribute(context,attribute,jsonObject,element,view,childIndex);
  if (wrappedParser != null && !handled) {
    handled=wrappedParser.handleAttribute(context,attribute,jsonObject,element,view,childIndex);
  }
  return handled;
}","@Override public boolean handleAttribute(ParserContext context,String attribute,JsonObject jsonObject,JsonElement element,ProteusView view,int childIndex){
  boolean handled=super.handleAttribute(context,attribute,jsonObject,element,view,childIndex);
  if (wrappedParser != null && !handled) {
    handled=wrappedParser.handleAttribute(context,attribute,jsonObject,element,view,childIndex);
  }
  return handled;
}",0.9963898916967509
28636,"@Override public void addChildren(ParserContext parserContext,ProteusView<View> parent,final List<ProteusView> children,JsonObject viewLayout){
  PagerAdapter adapter=parserContext.getLayoutBuilder().getListener().onPagerAdapterRequired(parserContext,parent,children,viewLayout);
  ((T)parent.getView()).setAdapter(adapter);
}","@Override public void addChildren(ParserContext parserContext,ProteusView parent,final List<ProteusView> children,JsonObject viewLayout){
  PagerAdapter adapter=parserContext.getLayoutBuilder().getListener().onPagerAdapterRequired(parserContext,parent,children,viewLayout);
  ((T)parent.getView()).setAdapter(adapter);
}",0.9907120743034056
28637,"/** 
 * @return the list of children.
 */
ArrayList<ProteusView<View>> getChildren();","/** 
 * @return the list of children.
 */
ArrayList<ProteusView> getChildren();",0.9634146341463414
28638,"/** 
 * @return reference to the view {@link android.view.View} wrapped by the {@link ProteusView}
 */
T getView();","/** 
 * @return reference to the view {@link android.view.View} wrapped by the {@link ProteusView}
 */
View getView();",0.9785407725321889
28639,"@Override public ArrayList<ProteusView<View>> getChildren(){
  return this.children;
}","@Override public ArrayList<ProteusView> getChildren(){
  return this.children;
}",0.963855421686747
28640,"@Override public void addChild(ProteusView view){
  if (view == null) {
    return;
  }
  if (this.children == null) {
    this.children=new ArrayList<>();
  }
  this.children.add(view);
  ((ViewGroup)getView()).addView(view.getView());
}","@Override public void addChild(ProteusView proteusView){
  if (proteusView == null) {
    return;
  }
  if (this.children == null) {
    this.children=new ArrayList<>();
  }
  this.children.add(proteusView);
  if (view != null && proteusView.getView() != null) {
    ((ViewGroup)view).addView(proteusView.getView());
  }
}",0.6714285714285714
28641,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  handler=new Handler();
  builder=LayoutBuilderFactory.getSimpleLayoutBuilder(getBaseContext());
  builder.setSynchronousRendering(true);
  startPollingServer(intent);
  return Service.START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  handler=new Handler();
  builder=new LayoutBuilderFactory().getSimpleLayoutBuilder(getBaseContext());
  builder.setSynchronousRendering(true);
  startPollingServer(intent);
  return Service.START_STICKY;
}",0.9892086330935252
28642,"@Override public void addChild(ProteusView view){
  if (this.children == null) {
    this.children=new ArrayList<>();
  }
  this.children.add(view);
  ((ViewGroup)getView()).addView(view.getView());
}","@Override public void addChild(ProteusView view){
  if (view == null) {
    return;
  }
  if (this.children == null) {
    this.children=new ArrayList<>();
  }
  this.children.add(view);
  ((ViewGroup)getView()).addView(view.getView());
}",0.91324200913242
28643,"private JsonElement getFromObject(String path,int childIndex){
  JsonElement root=this.rootElement;
  String[] segments=path.split(DATA_PATH_DELIMITER);
  JsonElement elementToReturn=root;
  JsonElement tempElement=null;
  JsonArray tempArray=null;
  for (  String segment : segments) {
    if (elementToReturn == null) {
      return null;
    }
    if (""String_Node_Str"".equals(segment)) {
      continue;
    }
    if (elementToReturn.isJsonArray()) {
      tempArray=elementToReturn.getAsJsonArray();
      if (tempArray != null) {
        if (CHILD_INDEX_REFERENCE.equals(segment)) {
          elementToReturn=tempArray.get(childIndex);
        }
 else {
          int index=Integer.parseInt(segment);
          elementToReturn=tempArray.get(index);
        }
      }
 else {
        elementToReturn=null;
        break;
      }
    }
 else {
      tempElement=elementToReturn.getAsJsonObject().get(segment);
      if (tempElement != null) {
        elementToReturn=tempElement;
      }
 else {
        elementToReturn=null;
        break;
      }
    }
  }
  return elementToReturn;
}","private JsonElement getFromObject(String path,int childIndex){
  JsonElement root=this.rootElement;
  String[] segments=path.split(DATA_PATH_DELIMITER);
  JsonElement elementToReturn=root;
  JsonElement tempElement=null;
  JsonArray tempArray=null;
  for (  String segment : segments) {
    if (elementToReturn == null || elementToReturn.isJsonNull()) {
      return null;
    }
    if (""String_Node_Str"".equals(segment)) {
      continue;
    }
    if (elementToReturn.isJsonArray()) {
      tempArray=elementToReturn.getAsJsonArray();
      if (tempArray != null) {
        if (CHILD_INDEX_REFERENCE.equals(segment)) {
          elementToReturn=tempArray.get(childIndex);
        }
 else {
          int index=Integer.parseInt(segment);
          elementToReturn=tempArray.get(index);
        }
      }
 else {
        elementToReturn=null;
        break;
      }
    }
 else {
      tempElement=elementToReturn.getAsJsonObject().get(segment);
      if (tempElement != null) {
        elementToReturn=tempElement;
      }
 else {
        elementToReturn=null;
        break;
      }
    }
  }
  return elementToReturn;
}",0.9855334538878844
28644,"public static JsonObject merge(JsonObject x,JsonObject y){
  for (  Map.Entry<String,JsonElement> entry : x.entrySet()) {
    String key=entry.getKey();
    JsonElement newDataElement=y.get(key);
    if (entry.getValue().isJsonObject() && newDataElement != null) {
      newDataElement=merge(entry.getValue().getAsJsonObject(),newDataElement.getAsJsonObject());
    }
    if (newDataElement != null) {
      x.add(key,newDataElement);
    }
  }
  return x;
}","public static JsonObject merge(JsonObject x,JsonObject y){
  for (  Map.Entry<String,JsonElement> entry : y.entrySet()) {
    String key=entry.getKey();
    JsonElement oldDataElement=x.get(key);
    JsonElement newDataElement=y.get(key);
    if (oldDataElement != null && oldDataElement.isJsonObject() && newDataElement != null) {
      newDataElement=merge(entry.getValue().getAsJsonObject(),newDataElement.getAsJsonObject());
    }
    x.add(key,newDataElement);
  }
  return x;
}",0.7162592986184909
28645,"@Override protected void prepareView(ProteusView proteusView,Provider dataProvider){
  ((DataProteusView)proteusView).setDataProvider(dataProvider);
}","@Override protected void prepareView(ProteusView proteusView,ParserContext parserContext){
  ((DataProteusView)proteusView).setParserContext(parserContext);
}",0.7922077922077922
28646,"protected ParserContext createParserContext(JsonObject data){
  ParserContext parserContext=new ParserContext();
  parserContext.setLayoutBuilder(this);
  if (data != null) {
    parserContext.setDataProvider(new GsonProvider(data));
  }
  return parserContext;
}","protected ParserContext createParserContext(JsonObject data){
  ParserContext parserContext=new ParserContext();
  parserContext.setLayoutBuilder(this);
  return parserContext;
}",0.8072562358276644
28647,"protected void prepareView(ProteusView proteusView,Provider dataProvider){
}","protected void prepareView(ProteusView proteusView,ParserContext parserContext){
}",0.810126582278481
28648,"/** 
 * Starts recursively parsing the given jsonObject.
 * @param context               Represents the context of the parsing.
 * @param parent                The parent view group under which the view being created has to beadded as a child.
 * @param currentViewJsonObject The jsonObject which represents the current node which is getting parsed.
 * @param existingView          A view which needs to be used instead of creating a new one. Pass nullfor first pass.
 * @param childIndex            index of child inside its parent view
 * @return The {@link com.flipkart.layoutengine.view.ProteusView} that was built.
 */
protected ProteusView buildImpl(final ParserContext context,final ViewGroup parent,final JsonObject currentViewJsonObject,View existingView,final int childIndex){
  JsonElement viewTypeElement=currentViewJsonObject.get(TYPE);
  String viewType;
  if (viewTypeElement != null) {
    viewType=viewTypeElement.getAsString();
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  LayoutHandler<View> handler=layoutHandlers.get(viewType);
  if (handler == null) {
    return onUnknownViewEncountered(context,viewType,parent,currentViewJsonObject,childIndex);
  }
  final View createdView;
  if (existingView == null) {
    createdView=createView(context,parent,handler,currentViewJsonObject);
    handler.setupView(parent,createdView);
  }
 else {
    createdView=existingView;
  }
  ProteusView proteusViewToReturn=createProteusViewToReturn(createdView);
  prepareView(proteusViewToReturn,context.getDataProvider());
  for (  Map.Entry<String,JsonElement> entry : currentViewJsonObject.entrySet()) {
    if (TYPE.equals(entry.getKey()) || CHILDREN.equals(entry.getKey()) || CHILD_TYPE.equals(entry.getKey())) {
      continue;
    }
    JsonElement jsonDataValue=entry.getValue();
    String attributeName=entry.getKey();
    boolean handled=handleAttribute(handler,context,attributeName,currentViewJsonObject,jsonDataValue,proteusViewToReturn,parent,childIndex);
    if (!handled) {
      onUnknownAttributeEncountered(context,attributeName,jsonDataValue,currentViewJsonObject,createdView,childIndex);
    }
  }
  JsonElement childViewElement=currentViewJsonObject.get(CHILD_TYPE);
  JsonElement childrenElement=currentViewJsonObject.get(CHILDREN);
  JsonArray children=null;
  if (childrenElement != null) {
    children=parseChildren(handler,context,childrenElement,childIndex);
  }
  if (children != null && children.size() > 0) {
    ViewGroup selfViewGroup=(ViewGroup)createdView;
    List<ProteusView> childrenToAdd=new ArrayList<>();
    for (int i=0; i < children.size(); i++) {
      JsonObject childObject=children.get(i).getAsJsonObject();
      if (childViewElement != null) {
        childObject.add(TYPE,childViewElement);
      }
      ProteusView childView=buildImpl(context,selfViewGroup,childObject,null,i);
      childrenToAdd.add(childView);
    }
    if (childrenToAdd.size() > 0) {
      handler.addChildren(context,proteusViewToReturn,childrenToAdd,currentViewJsonObject);
    }
  }
  return proteusViewToReturn;
}","/** 
 * Starts recursively parsing the given jsonObject.
 * @param context               Represents the context of the parsing.
 * @param parent                The parent view group under which the view being created has to beadded as a child.
 * @param currentViewJsonObject The jsonObject which represents the current node which is getting parsed.
 * @param existingView          A view which needs to be used instead of creating a new one. Pass nullfor first pass.
 * @param childIndex            index of child inside its parent view
 * @return The {@link com.flipkart.layoutengine.view.ProteusView} that was built.
 */
protected ProteusView buildImpl(final ParserContext context,final ViewGroup parent,final JsonObject currentViewJsonObject,View existingView,final int childIndex){
  JsonElement viewTypeElement=currentViewJsonObject.get(TYPE);
  String viewType;
  if (viewTypeElement != null) {
    viewType=viewTypeElement.getAsString();
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return null;
  }
  LayoutHandler<View> handler=layoutHandlers.get(viewType);
  if (handler == null) {
    return onUnknownViewEncountered(context,viewType,parent,currentViewJsonObject,childIndex);
  }
  final View createdView;
  if (existingView == null) {
    createdView=createView(context,parent,handler,currentViewJsonObject);
    handler.setupView(parent,createdView);
  }
 else {
    createdView=existingView;
  }
  ProteusView proteusViewToReturn=createProteusViewToReturn(createdView);
  prepareView(proteusViewToReturn,context);
  for (  Map.Entry<String,JsonElement> entry : currentViewJsonObject.entrySet()) {
    if (TYPE.equals(entry.getKey()) || CHILDREN.equals(entry.getKey()) || CHILD_TYPE.equals(entry.getKey())) {
      continue;
    }
    JsonElement jsonDataValue=entry.getValue();
    String attributeName=entry.getKey();
    boolean handled=handleAttribute(handler,context,attributeName,currentViewJsonObject,jsonDataValue,proteusViewToReturn,parent,childIndex);
    if (!handled) {
      onUnknownAttributeEncountered(context,attributeName,jsonDataValue,currentViewJsonObject,createdView,childIndex);
    }
  }
  JsonElement childViewElement=currentViewJsonObject.get(CHILD_TYPE);
  JsonElement childrenElement=currentViewJsonObject.get(CHILDREN);
  JsonArray children=null;
  if (childrenElement != null) {
    children=parseChildren(handler,context,childrenElement,childIndex);
  }
  if (children != null && children.size() > 0) {
    ViewGroup selfViewGroup=(ViewGroup)createdView;
    List<ProteusView> childrenToAdd=new ArrayList<>();
    for (int i=0; i < children.size(); i++) {
      JsonObject childObject=children.get(i).getAsJsonObject();
      if (childViewElement != null) {
        childObject.add(TYPE,childViewElement);
      }
      ProteusView childView=buildImpl(context,selfViewGroup,childObject,null,i);
      childrenToAdd.add(childView);
    }
    if (childrenToAdd.size() > 0) {
      handler.addChildren(context,proteusViewToReturn,childrenToAdd,currentViewJsonObject);
    }
  }
  return proteusViewToReturn;
}",0.9970626631853786
28649,"/** 
 * Updates the Binding with new data. It uses a   {@link com.flipkart.layoutengine.binding.Binding}to get the associated   {@link android.view.View},   {@link com.flipkart.layoutengine.builder.LayoutBuilder}, and   {@link com.flipkart.layoutengine.parser.LayoutHandler} to update the value of the boundattribute with the new value fetched from the new data object passed.
 * @param binding The property name to update mapped to its{@link com.flipkart.layoutengine.binding.Binding}
 */
private void handleBinding(Binding binding,JsonObject data){
  ParserContext context=binding.getParserContext();
  int index=binding.getIndex();
  context=setCorrectDataProvider(context,data);
  if (binding.hasRegEx()) {
    binding.getParserContext().getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),context,binding.getAttributeKey(),null,Utils.getStringAsJsonElement(binding.getAttributeValue()),binding.getProteusView(),binding.getParentView(),index);
  }
 else {
    JsonElement dataValue=getElementFromData(binding.getBindingName(),context.getDataProvider(),index);
    binding.getParserContext().getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),context,binding.getAttributeKey(),null,dataValue,binding.getProteusView(),binding.getParentView(),index);
  }
}","/** 
 * Updates the Binding with new data. It uses a   {@link com.flipkart.layoutengine.binding.Binding}to get the associated   {@link android.view.View},   {@link com.flipkart.layoutengine.builder.LayoutBuilder}, and   {@link com.flipkart.layoutengine.parser.LayoutHandler} to update the value of the boundattribute with the new value fetched from the new data object passed.
 * @param binding The property name to update mapped to its{@link com.flipkart.layoutengine.binding.Binding}
 */
private void handleBinding(Binding binding){
  int index=binding.getIndex();
  if (binding.hasRegEx()) {
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),null,Utils.getStringAsJsonElement(binding.getAttributeValue()),binding.getProteusView(),binding.getParentView(),index);
  }
 else {
    JsonElement dataValue=getElementFromData(binding.getBindingName(),parserContext.getDataProvider(),index);
    parserContext.getLayoutBuilder().handleAttribute(binding.getLayoutHandler(),parserContext,binding.getAttributeKey(),null,dataValue,binding.getProteusView(),binding.getParentView(),index);
  }
}",0.6513157894736842
28650,"@Override protected View updateDataImpl(JsonObject data){
  this.isViewUpdating=true;
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding,data);
    }
  }
  if (getChildren() != null) {
    for (    ProteusView proteusView : getChildren()) {
      proteusView.updateData(data);
    }
  }
  this.isViewUpdating=false;
  return this.getView();
}","@Override protected View updateDataImpl(JsonObject data){
  this.isViewUpdating=true;
  updateParserContext(data);
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      this.handleBinding(binding);
    }
  }
  if (getChildren() != null) {
    for (    ProteusView proteusView : getChildren()) {
      proteusView.updateData(data);
    }
  }
  this.isViewUpdating=false;
  return this.getView();
}",0.9590361445783132
28651,"public DataProteusView(ProteusView proteusView){
  super(proteusView.getView());
  this.children=proteusView.getChildren();
  if (proteusView instanceof DataProteusView) {
    dataProvider=((DataProteusView)proteusView).getDataProvider();
  }
}","public DataProteusView(ProteusView proteusView){
  super(proteusView.getView());
  this.children=proteusView.getChildren();
  if (proteusView instanceof DataProteusView) {
    parserContext=((DataProteusView)proteusView).getParserContext();
  }
}",0.8979591836734694
28652,"private void updateView(String dataPath){
  this.isViewUpdating=true;
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      if (binding.getBindingName().equals(dataPath)) {
        this.handleBinding(binding,dataProvider.getRoot().getAsJsonObject());
      }
    }
  }
  if (getChildren() != null) {
    for (    ProteusView proteusView : getChildren()) {
      ((DataProteusView)proteusView).updateView(dataPath);
    }
  }
  this.isViewUpdating=false;
}","private void updateView(String dataPath){
  this.isViewUpdating=true;
  if (this.bindings != null) {
    for (    Binding binding : this.bindings) {
      if (binding.getBindingName().equals(dataPath)) {
        this.handleBinding(binding);
      }
    }
  }
  if (getChildren() != null) {
    for (    ProteusView proteusView : getChildren()) {
      ((DataProteusView)proteusView).updateView(dataPath);
    }
  }
  this.isViewUpdating=false;
}",0.9559613319011816
28653,"public JsonElement get(String dataPath,int childIndex){
  return getElementFromData(dataPath,dataProvider,childIndex);
}","public JsonElement get(String dataPath,int childIndex){
  return getElementFromData(dataPath,parserContext.getDataProvider(),childIndex);
}",0.918918918918919
28654,"public void setDataProvider(Provider dataProvider){
  if (dataProvider.getRoot() != null) {
    this.dataProvider.setRoot(dataProvider.getRoot());
  }
}","public void setDataProvider(Provider dataProvider){
  if (dataProvider != null && dataProvider.getRoot() != null) {
    if (this.dataProvider != null) {
      this.dataProvider.setRoot(dataProvider.getRoot());
    }
 else {
      this.dataProvider=dataProvider;
    }
  }
}",0.7011764705882353
28655,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh) {
    ((DataProteusView)this.proteusView).set(""String_Node_Str"",""String_Node_Str"",0);
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh) {
    ((DataProteusView)this.proteusView).set(""String_Node_Str"",""String_Node_Str"",0);
    ((DataProteusView)this.proteusView).set(""String_Node_Str"",""String_Node_Str"",0);
    ((DataProteusView)this.proteusView).set(""String_Node_Str"",""String_Node_Str"",0);
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.766016713091922
28656,"private void addBinding(ProteusView associatedProteusView,String bindingName,String attributeName,String attributeValue,ParserContext context,LayoutHandler handler,ViewGroup parent,int childIndex,boolean hasRegEx){
  DataProteusView dataProteusView=(DataProteusView)associatedProteusView;
  if (!dataProteusView.isViewUpdating()) {
    String dataContext=context.getDataContext();
    if (dataContext != null) {
      bindingName=dataContext + ""String_Node_Str"" + bindingName.substring(1);
    }
    Binding binding=new Binding(context,handler,bindingName,attributeName,attributeValue,dataProteusView,parent,childIndex,hasRegEx);
    dataProteusView.addBinding(binding);
  }
}","private void addBinding(ProteusView associatedProteusView,String bindingName,String attributeName,String attributeValue,ParserContext context,LayoutHandler handler,ViewGroup parent,int childIndex,boolean hasRegEx){
  DataProteusView dataProteusView=(DataProteusView)associatedProteusView;
  if (!dataProteusView.isViewUpdating()) {
    String dataContext=context.getDataContext();
    if (dataContext != null) {
      bindingName=dataContext + ""String_Node_Str"" + bindingName;
    }
    Binding binding=new Binding(context,handler,bindingName,attributeName,attributeValue,dataProteusView,parent,childIndex,hasRegEx);
    dataProteusView.addBinding(binding);
  }
}",0.9902912621359224
28657,"@Override public View onUnknownViewType(ParserContext context,String viewType,JsonObject object,ViewGroup parent,int childIndex){
  return null;
}","@Override public ProteusView onUnknownViewType(ParserContext context,String viewType,JsonObject object,ViewGroup parent,int childIndex){
  return null;
}",0.9765886287625418
28658,"private Bitmap generateBitmap(BaseRequest<RemoteRenderingResponse> request){
  RemoteRenderingResponse response=request.getResponse();
  JsonObject layout=response.getResponse().getLayout();
  FrameLayout frameLayout=new FrameLayout(getBaseContext());
  frameLayout.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  frameLayout.setBackgroundColor(Color.WHITE);
  builder.setListener(new LayoutBuilderCallback(){
    @Override public void onUnknownAttribute(    ParserContext context,    String attribute,    JsonElement element,    JsonObject object,    View view,    int childIndex){
    }
    @Override public View onUnknownViewType(    ParserContext context,    String viewType,    JsonObject object,    ViewGroup parent,    int childIndex){
      return null;
    }
    @Override public View onEvent(    ParserContext context,    View view,    JsonElement attributeValue,    EventType eventType){
      return null;
    }
  }
);
  View view=null;
  try {
    view=builder.build(frameLayout,layout);
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    e.printStackTrace(pw);
    String stackTrace=sw.toString();
    TextView tv=new TextView(getBaseContext());
    tv.setText(e.getMessage() + ""String_Node_Str"" + stackTrace);
    tv.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
    tv.setTextSize(8);
    tv.setTextColor(Color.BLACK);
    view=tv;
  }
  if (view != null) {
    frameLayout.addView(view);
  }
  Bitmap b=null;
  if (view != null) {
    b=loadBitmapFromView(frameLayout);
    Log.d(""String_Node_Str"",String.valueOf(b.getRowBytes()));
  }
  return b;
}","private Bitmap generateBitmap(BaseRequest<RemoteRenderingResponse> request){
  RemoteRenderingResponse response=request.getResponse();
  JsonObject layout=response.getResponse().getLayout();
  FrameLayout frameLayout=new FrameLayout(getBaseContext());
  frameLayout.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  frameLayout.setBackgroundColor(Color.WHITE);
  builder.setListener(new LayoutBuilderCallback(){
    @Override public void onUnknownAttribute(    ParserContext context,    String attribute,    JsonElement element,    JsonObject object,    View view,    int childIndex){
    }
    @Override public ProteusView onUnknownViewType(    ParserContext context,    String viewType,    JsonObject object,    ViewGroup parent,    int childIndex){
      return null;
    }
    @Override public View onEvent(    ParserContext context,    View view,    JsonElement attributeValue,    EventType eventType){
      return null;
    }
  }
);
  View view=null;
  try {
    view=builder.build(frameLayout,layout).getView();
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    e.printStackTrace(pw);
    String stackTrace=sw.toString();
    TextView tv=new TextView(getBaseContext());
    tv.setText(e.getMessage() + ""String_Node_Str"" + stackTrace);
    tv.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
    tv.setTextSize(8);
    tv.setTextColor(Color.BLACK);
    view=tv;
  }
  if (view != null) {
    frameLayout.addView(view);
  }
  Bitmap b=null;
  if (view != null) {
    b=loadBitmapFromView(frameLayout);
    Log.d(""String_Node_Str"",String.valueOf(b.getRowBytes()));
  }
  return b;
}",0.9952367609974784
28659,"@Override public void addChildren(Context context,E parent,List<View> children){
  handler.addChildren(context,parent,children);
}","@Override public void addChildren(Context context,E parent,List<ProteusView> children){
  handler.addChildren(context,parent,children);
}",0.9737827715355806
28660,"@Override public void onRequestFinish(final BaseRequest<HomeResponse> request){
  MainActivity.this.getWindow().getDecorView().postDelayed(new Runnable(){
    @Override public void run(){
      HomeResponse response=request.getResponse();
      JsonObject layout=response.getResponse().getLayout();
      long startTimeMillis=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + startTimeMillis);
      LayoutBuilder builder=new DefaultLayoutBuilderFactory().createDataAndViewParsingLayoutBuilder(MainActivity.this,new GsonProvider(response.getResponse().getData()),new GsonProvider(response.getResponse().getViews()));
      builder.setListener(createCallback());
      FrameLayout container=new FrameLayout(MainActivity.this);
      View view=builder.build((ViewGroup)MainActivity.this.getWindow().getDecorView(),layout);
      long endTimeMillis=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + endTimeMillis);
      long timeTaken=endTimeMillis - startTimeMillis;
      Log.d(TAG,""String_Node_Str"" + timeTaken + ""String_Node_Str"");
      Toast.makeText(MainActivity.this,""String_Node_Str"" + timeTaken + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
      if (view != null) {
        container.addView(view,layoutParams);
      }
      MainActivity.this.setContentView(container);
    }
  }
,0);
}","@Override public void onRequestFinish(final BaseRequest<HomeResponse> request){
  MainActivity.this.getWindow().getDecorView().postDelayed(new Runnable(){
    @Override public void run(){
      HomeResponse response=request.getResponse();
      JsonObject layout=response.getResponse().getLayout();
      long startTimeMillis=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + startTimeMillis);
      LayoutBuilder builder=new DefaultLayoutBuilderFactory().createDataParsingLayoutBuilder(MainActivity.this,new GsonProvider(response.getResponse().getData()));
      builder.setListener(createCallback());
      FrameLayout container=new FrameLayout(MainActivity.this);
      View view=builder.build((ViewGroup)MainActivity.this.getWindow().getDecorView(),layout);
      long endTimeMillis=System.currentTimeMillis();
      Log.d(TAG,""String_Node_Str"" + endTimeMillis);
      long timeTaken=endTimeMillis - startTimeMillis;
      Log.d(TAG,""String_Node_Str"" + timeTaken + ""String_Node_Str"");
      Toast.makeText(MainActivity.this,""String_Node_Str"" + timeTaken + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
      if (view != null) {
        container.addView(view,layoutParams);
      }
      MainActivity.this.setContentView(container);
    }
  }
,0);
}",0.9461618617575548
28661,"@Override public void run(){
  HomeResponse response=request.getResponse();
  JsonObject layout=response.getResponse().getLayout();
  long startTimeMillis=System.currentTimeMillis();
  Log.d(TAG,""String_Node_Str"" + startTimeMillis);
  LayoutBuilder builder=new DefaultLayoutBuilderFactory().createDataAndViewParsingLayoutBuilder(MainActivity.this,new GsonProvider(response.getResponse().getData()),new GsonProvider(response.getResponse().getViews()));
  builder.setListener(createCallback());
  FrameLayout container=new FrameLayout(MainActivity.this);
  View view=builder.build((ViewGroup)MainActivity.this.getWindow().getDecorView(),layout);
  long endTimeMillis=System.currentTimeMillis();
  Log.d(TAG,""String_Node_Str"" + endTimeMillis);
  long timeTaken=endTimeMillis - startTimeMillis;
  Log.d(TAG,""String_Node_Str"" + timeTaken + ""String_Node_Str"");
  Toast.makeText(MainActivity.this,""String_Node_Str"" + timeTaken + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  if (view != null) {
    container.addView(view,layoutParams);
  }
  MainActivity.this.setContentView(container);
}","@Override public void run(){
  HomeResponse response=request.getResponse();
  JsonObject layout=response.getResponse().getLayout();
  long startTimeMillis=System.currentTimeMillis();
  Log.d(TAG,""String_Node_Str"" + startTimeMillis);
  LayoutBuilder builder=new DefaultLayoutBuilderFactory().createDataParsingLayoutBuilder(MainActivity.this,new GsonProvider(response.getResponse().getData()));
  builder.setListener(createCallback());
  FrameLayout container=new FrameLayout(MainActivity.this);
  View view=builder.build((ViewGroup)MainActivity.this.getWindow().getDecorView(),layout);
  long endTimeMillis=System.currentTimeMillis();
  Log.d(TAG,""String_Node_Str"" + endTimeMillis);
  long timeTaken=endTimeMillis - startTimeMillis;
  Log.d(TAG,""String_Node_Str"" + timeTaken + ""String_Node_Str"");
  Toast.makeText(MainActivity.this,""String_Node_Str"" + timeTaken + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  if (view != null) {
    container.addView(view,layoutParams);
  }
  MainActivity.this.setContentView(container);
}",0.935064935064935
28662,"private OnRequestFinishListener<HomeResponse> createOnResponse(){
  return new OnRequestFinishListener<HomeResponse>(){
    @Override public void onRequestFinish(    final BaseRequest<HomeResponse> request){
      MainActivity.this.getWindow().getDecorView().postDelayed(new Runnable(){
        @Override public void run(){
          HomeResponse response=request.getResponse();
          JsonObject layout=response.getResponse().getLayout();
          long startTimeMillis=System.currentTimeMillis();
          Log.d(TAG,""String_Node_Str"" + startTimeMillis);
          LayoutBuilder builder=new DefaultLayoutBuilderFactory().createDataAndViewParsingLayoutBuilder(MainActivity.this,new GsonProvider(response.getResponse().getData()),new GsonProvider(response.getResponse().getViews()));
          builder.setListener(createCallback());
          FrameLayout container=new FrameLayout(MainActivity.this);
          View view=builder.build((ViewGroup)MainActivity.this.getWindow().getDecorView(),layout);
          long endTimeMillis=System.currentTimeMillis();
          Log.d(TAG,""String_Node_Str"" + endTimeMillis);
          long timeTaken=endTimeMillis - startTimeMillis;
          Log.d(TAG,""String_Node_Str"" + timeTaken + ""String_Node_Str"");
          Toast.makeText(MainActivity.this,""String_Node_Str"" + timeTaken + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
          ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
          if (view != null) {
            container.addView(view,layoutParams);
          }
          MainActivity.this.setContentView(container);
        }
      }
,0);
    }
  }
;
}","private OnRequestFinishListener<HomeResponse> createOnResponse(){
  return new OnRequestFinishListener<HomeResponse>(){
    @Override public void onRequestFinish(    final BaseRequest<HomeResponse> request){
      MainActivity.this.getWindow().getDecorView().postDelayed(new Runnable(){
        @Override public void run(){
          HomeResponse response=request.getResponse();
          JsonObject layout=response.getResponse().getLayout();
          long startTimeMillis=System.currentTimeMillis();
          Log.d(TAG,""String_Node_Str"" + startTimeMillis);
          LayoutBuilder builder=new DefaultLayoutBuilderFactory().createDataParsingLayoutBuilder(MainActivity.this,new GsonProvider(response.getResponse().getData()));
          builder.setListener(createCallback());
          FrameLayout container=new FrameLayout(MainActivity.this);
          View view=builder.build((ViewGroup)MainActivity.this.getWindow().getDecorView(),layout);
          long endTimeMillis=System.currentTimeMillis();
          Log.d(TAG,""String_Node_Str"" + endTimeMillis);
          long timeTaken=endTimeMillis - startTimeMillis;
          Log.d(TAG,""String_Node_Str"" + timeTaken + ""String_Node_Str"");
          Toast.makeText(MainActivity.this,""String_Node_Str"" + timeTaken + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
          ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
          if (view != null) {
            container.addView(view,layoutParams);
          }
          MainActivity.this.setContentView(container);
        }
      }
,0);
    }
  }
;
}",0.9535232383808095
28663,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  handler=new Handler();
  builder=DefaultLayoutBuilderFactory.createSimpleLayoutBuilder(getBaseContext());
  builder.setSynchronousRendering(true);
  startPollingServer(intent);
  return Service.START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  handler=new Handler();
  builder=new DefaultLayoutBuilderFactory().createSimpleLayoutBuilder(getBaseContext());
  builder.setSynchronousRendering(true);
  startPollingServer(intent);
  return Service.START_STICKY;
}",0.9895833333333334
28664,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_parallax);
  if (savedInstanceState == null) {
    getFragmentManager().beginTransaction().add(R.id.content,new ParallaxFragment()).commit();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_parallax);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().add(R.id.content,new ParallaxFragment()).commit();
  }
}",0.9877408056042032
28665,"@Override public void onClick(View v){
  getFragmentManager().beginTransaction().replace(android.R.id.content,new Fragment()).addToBackStack(""String_Node_Str"").commit();
}","@Override public void onClick(View v){
  getFragmentManager().beginTransaction().replace(R.id.content,new Fragment()).addToBackStack(""String_Node_Str"").commit();
}",0.9760479041916168
28666,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_parallax,container,false);
  ParallaxContainer parallaxContainer=(ParallaxContainer)view.findViewById(R.id.parallax_container);
  parallaxContainer.setLooping(true);
  parallaxContainer.setupChildren(inflater,R.layout.parallax_view_1,R.layout.parallax_view_2,R.layout.parallax_view_3,R.layout.parallax_view_4);
  view.findViewById(R.id.btn_new_frag).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getFragmentManager().beginTransaction().replace(android.R.id.content,new Fragment()).addToBackStack(""String_Node_Str"").commit();
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_parallax,container,false);
  ParallaxContainer parallaxContainer=(ParallaxContainer)view.findViewById(R.id.parallax_container);
  parallaxContainer.setLooping(true);
  parallaxContainer.setupChildren(inflater,R.layout.parallax_view_1,R.layout.parallax_view_2,R.layout.parallax_view_3,R.layout.parallax_view_4);
  view.findViewById(R.id.btn_new_frag).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getFragmentManager().beginTransaction().replace(R.id.content,new Fragment()).addToBackStack(""String_Node_Str"").commit();
    }
  }
);
  return view;
}",0.9947229551451188
28667,"protected View createViewOrFailQuietly(String name,String prefix,Context context,AttributeSet attrs){
  try {
    if (name.contains(""String_Node_Str"")) {
      name=FrameLayout.class.getCanonicalName();
    }
 else     if (name.contains(""String_Node_Str"")) {
      name=LinearLayout.class.getCanonicalName();
    }
 else     if (name.contains(""String_Node_Str"")) {
      name=ImageView.class.getCanonicalName();
    }
 else     if (name.contains(""String_Node_Str"")) {
      name=TextView.class.getCanonicalName();
    }
 else     if (name.contains(""String_Node_Str"")) {
      name=Space.class.getCanonicalName();
    }
    return LayoutInflater.from(context).createView(name,prefix,attrs);
  }
 catch (  Exception ignore) {
    return null;
  }
}","protected View createViewOrFailQuietly(String name,String prefix,Context context,AttributeSet attrs){
  try {
    return LayoutInflater.from(context).createView(name,prefix,attrs);
  }
 catch (  Exception ignore) {
    return null;
  }
}",0.2726347914547304
28668,"/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mSolo=new Solo(getInstrumentation(),getActivity());
  mContext=getInstrumentation().getContext();
  playButton_=(Button)mSolo.getView(edu.vuum.mocca.R.id.play_button);
  outputTextView_=(TextView)mSolo.getView(edu.vuum.mocca.R.id.pingpong_output);
  getInstrumentation().callActivityOnStart(getActivity());
  getInstrumentation().callActivityOnResume(getActivity());
}","/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mSolo=new Solo(getInstrumentation(),getActivity());
  mContext=getInstrumentation().getContext();
  playButton_=(Button)mSolo.getView(edu.vuum.mocca.R.id.play_button);
  outputTextView_=(TextView)mSolo.getView(edu.vuum.mocca.R.id.pingpong_output);
  getInstrumentation().runOnMainSync(new Runnable(){
    @Override public void run(){
      getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
    }
  }
);
  getInstrumentation().callActivityOnStart(getActivity());
  getInstrumentation().callActivityOnResume(getActivity());
}",0.7741393786733837
28669,"/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mSolo=new Solo(getInstrumentation(),getActivity());
  mContext=getInstrumentation().getContext();
  playButton_=(Button)mSolo.getView(edu.vuum.mocca.R.id.play_button);
  outputTextView_=(TextView)mSolo.getView(edu.vuum.mocca.R.id.pingpong_output);
  getInstrumentation().callActivityOnStart(getActivity());
  getInstrumentation().callActivityOnResume(getActivity());
}","/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mSolo=new Solo(getInstrumentation(),getActivity());
  mContext=getInstrumentation().getContext();
  playButton_=(Button)mSolo.getView(edu.vuum.mocca.R.id.play_button);
  outputTextView_=(TextView)mSolo.getView(edu.vuum.mocca.R.id.pingpong_output);
  getInstrumentation().runOnMainSync(new Runnable(){
    @Override public void run(){
      getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
    }
  }
);
  getInstrumentation().callActivityOnStart(getActivity());
  getInstrumentation().callActivityOnResume(getActivity());
}",0.7741393786733837
28670,"/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mActivity=getActivity();
  mSolo=new Solo(getInstrumentation(),mActivity);
  mContext=getInstrumentation().getContext();
  EditText edit_=(EditText)mSolo.getView(edu.vuum.mocca.R.id.url);
  mSolo.clearEditText(edit_);
  mSolo.enterText(edit_,Options.TEST_URI);
  mExpected=BitmapFactory.decodeResource(mContext.getResources(),R.drawable.dougs);
  getInstrumentation().callActivityOnStart(mActivity);
  getInstrumentation().callActivityOnResume(mActivity);
  Thread.sleep(Options.SHORT_WAIT_TIME);
}","/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mActivity=getActivity();
  mSolo=new Solo(getInstrumentation(),mActivity);
  mContext=getInstrumentation().getContext();
  EditText edit_=(EditText)mSolo.getView(edu.vuum.mocca.R.id.url);
  mSolo.clearEditText(edit_);
  mSolo.enterText(edit_,Options.TEST_URI);
  mExpected=BitmapFactory.decodeResource(mContext.getResources(),R.drawable.dougs);
  getInstrumentation().callActivityOnStart(mActivity);
  getInstrumentation().callActivityOnResume(mActivity);
  getInstrumentation().runOnMainSync(new Runnable(){
    @Override public void run(){
      getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
    }
  }
);
  Thread.sleep(Options.SHORT_WAIT_TIME);
}",0.8683666436940042
28671,"/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mActivity=getActivity();
  mSolo=new Solo(getInstrumentation(),mActivity);
  mContext=getInstrumentation().getContext();
  EditText edit_=(EditText)mSolo.getView(edu.vuum.mocca.R.id.url);
  mSolo.clearEditText(edit_);
  mSolo.enterText(edit_,Options.TEST_URI);
  mExpected=BitmapFactory.decodeResource(mContext.getResources(),R.drawable.dougs);
  getInstrumentation().callActivityOnStart(mActivity);
  getInstrumentation().callActivityOnResume(mActivity);
  Thread.sleep(Options.SHORT_WAIT_TIME);
}","/** 
 * Called before each test is run to perform the initialization.
 */
public void setUp() throws Exception {
  super.setUp();
  mActivity=getActivity();
  mSolo=new Solo(getInstrumentation(),mActivity);
  mContext=getInstrumentation().getContext();
  EditText edit_=(EditText)mSolo.getView(edu.vuum.mocca.R.id.url);
  mSolo.clearEditText(edit_);
  mSolo.enterText(edit_,Options.TEST_URI);
  mExpected=BitmapFactory.decodeResource(mContext.getResources(),R.drawable.dougs);
  getInstrumentation().callActivityOnStart(mActivity);
  getInstrumentation().callActivityOnResume(mActivity);
  getInstrumentation().runOnMainSync(new Runnable(){
    @Override public void run(){
      getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
    }
  }
);
  Thread.sleep(Options.SHORT_WAIT_TIME);
}",0.8683666436940042
28672,"/** 
 * Return one permit to the semaphore.
 */
void release(){
}","/** 
 * Return one permit to the semaphore.
 */
public void release(){
}",0.948905109489051
28673,"/** 
 * Download the designated image and reply to the DownloadActivity via the Messenger sent with the Intent.
 */
private void downloadImageAndReply(Intent intent){
  String pathname=downloadImage(DownloadService.this,intent.getData().toString());
  Messenger messenger=(Messenger)intent.getExtras().get(""String_Node_Str"");
  sendPath(messenger,pathname);
}","/** 
 * Retrieves the designated image and reply to the DownloadActivity via the Messenger sent with the Intent.
 */
private void downloadImageAndReply(Intent intent){
  String pathname=downloadImage(DownloadService.this,intent.getData().toString());
  Messenger messenger=(Messenger)intent.getExtras().get(""String_Node_Str"");
  sendPath(messenger,pathname);
}",0.9763560500695412
28674,"/** 
 * / This hook method is dispatched in response to receiving the pathname back from the DownloadService.
 */
public void handleMessage(Message msg){
  Bundle data=msg.getData();
  String pathname=data.getString(""String_Node_Str"");
  if (msg.arg1 != RESULT_OK || pathname == null)   showDialog(""String_Node_Str"");
  dismissDialog();
  displayImage(BitmapFactory.decodeFile(pathname));
}","/** 
 * / This hook method is dispatched in response to receiving the pathname back from the DownloadService.
 */
public void handleMessage(Message msg){
  DownloadActivity activity=mActivity.get();
  Bundle data=msg.getData();
  String pathname=data.getString(""String_Node_Str"");
  if (msg.arg1 != RESULT_OK || pathname == null)   activity.showDialog(""String_Node_Str"");
  activity.dismissDialog();
  activity.displayImage(BitmapFactory.decodeFile(pathname));
}",0.9154929577464788
28675,"/** 
 * Hook method called when DownloadService is first launched by the Android ActivityManager.
 */
public void onCreate(){
  super.onCreate();
  HandlerThread thread=new HandlerThread(""String_Node_Str"");
  thread.start();
  mServiceLooper=thread.getLooper();
  mServiceHandler=new ServiceHandler(mServiceLooper,this);
}","/** 
 * Hook method called when DownloadService is first launched by the Android ActivityManager.
 */
public void onCreate(){
  super.onCreate();
  HandlerThread thread=new HandlerThread(""String_Node_Str"");
  thread.start();
  mServiceLooper=thread.getLooper();
  mServiceHandler=new ServiceHandler(mServiceLooper);
}",0.9921752738654148
28676,"/** 
 * Class constructor constructs mActivity as weak reference to the activity
 * @param Looper The Looper that we borrow from HandlerThread.
 * @param service The corresponding service
 */
public ServiceHandler(Looper looper,DownloadService service){
  super(looper);
  mService=new WeakReference<DownloadService>(service);
}","/** 
 * Class constructor initializes the Looper.
 * @param Looper The Looper that we borrow from HandlerThread.
 */
public ServiceHandler(Looper looper){
  super(looper);
}",0.6387225548902196
28677,"/** 
 * Process the specified Messages passed to MessageHandler in the UI Thread. These Messages instruct the Handler to start showing the progress dialog, dismiss it, or display the designated bitmap image via the ImageView.
 */
public void handleMessage(Message msg){
  if (mActivity.get() == null)   return;
switch (msg.what) {
case SHOW_DIALOG:
    mActivity.get().showDialog(""String_Node_Str"");
  break;
case DISMISS_DIALOG:
mActivity.get().dismissDialog();
break;
case DISPLAY_IMAGE:
mActivity.get().displayImage((Bitmap)msg.obj);
break;
}
}","/** 
 * Process the specified Messages passed to MessageHandler in the UI Thread. These Messages instruct the Handler to start showing the progress dialog, dismiss it, or display the designated bitmap image via the ImageView.
 */
public void handleMessage(Message msg){
  ThreadedDownloads activity=mActivity.get();
  if (activity == null)   return;
switch (msg.what) {
case SHOW_DIALOG:
    activity.showDialog(""String_Node_Str"");
  break;
case DISMISS_DIALOG:
activity.dismissDialog();
break;
case DISPLAY_IMAGE:
activity.displayImage((Bitmap)msg.obj);
break;
}
}",0.8758992805755396
28678,"/** 
 * Main entry point method into the test program.
 */
public static void main(String argv[]){
  System.out.println(""String_Node_Str"");
  int queueSize=SynchronizedQueue.mMaxIterations / 10;
  SynchronizedQueue.mQueue=new QueueAdapter<Integer>(new ArrayBlockingQueue<Integer>(queueSize));
  testQueue(""String_Node_Str"",SynchronizedQueue.mQueue);
  SynchronizedQueue.mQueue=new QueueAdapter<Integer>(new BuggyBlockingQueue<Integer>(queueSize));
  testQueue(""String_Node_Str"",SynchronizedQueue.mQueue);
  System.out.println(""String_Node_Str"");
}","/** 
 * Main entry point method into the test program.
 */
public static void main(String argv[]){
  System.out.println(""String_Node_Str"");
  int queueSize=SynchronizedQueue.mMaxIterations / 10;
  QueueAdapter<Integer> queue=new QueueAdapter<Integer>(new ArrayBlockingQueue<Integer>(queueSize));
  testQueue(""String_Node_Str"",queue);
  queue=new QueueAdapter<Integer>(new BuggyBlockingQueue<Integer>(queueSize));
  testQueue(""String_Node_Str"",queue);
  System.out.println(""String_Node_Str"");
}",0.8807692307692307
28679,"/** 
 * Run the test for the queue parameter.
 */
@SuppressWarnings(""String_Node_Str"") public static SynchronizedQueueResult testQueue(QueueAdapter<Integer> queue){
  try {
    Thread consumer=null;
    Thread producer=null;
    Thread.sleep(100);
    if (consumer == null || producer == null)     return SynchronizedQueueResult.THREADS_NEVER_CREATED;
 else     if (consumer.isAlive() || producer.isAlive())     return SynchronizedQueueResult.JOIN_NEVER_CALLED;
 else     if (mConsumerCounter == 0 || mProducerCounter == 0)     return SynchronizedQueueResult.THREADS_NEVER_RAN;
 else     if (mConsumerCounter == mMaxIterations || mProducerCounter == mMaxIterations)     return SynchronizedQueueResult.THREADS_NEVER_INTERUPTED;
 else     if (mConsumerCounter == FAILURE_OCCURRED || mProducerCounter == FAILURE_OCCURRED)     return SynchronizedQueueResult.THREADS_THREW_EXCEPTION;
 else     if (mConsumerCounter == TIMEOUT_OCCURRED || mProducerCounter == TIMEOUT_OCCURRED)     return SynchronizedQueueResult.THREADS_TIMEDOUT;
 else     return SynchronizedQueueResult.RAN_PROPERLY;
  }
 catch (  Exception e) {
    return SynchronizedQueueResult.TESTING_LOGIC_THREW_EXCEPTION;
  }
}","/** 
 * Run the test for the queue parameter.
 */
public static SynchronizedQueueResult testQueue(QueueAdapter<Integer> queue){
  try {
    mQueue=queue;
    Thread consumer=null;
    Thread producer=null;
    Thread.sleep(100);
    if (consumer == null || producer == null)     return SynchronizedQueueResult.THREADS_NEVER_CREATED;
 else     if (consumer.isAlive() || producer.isAlive())     return SynchronizedQueueResult.JOIN_NEVER_CALLED;
 else     if (mConsumerCounter == 0 || mProducerCounter == 0)     return SynchronizedQueueResult.THREADS_NEVER_RAN;
 else     if (mConsumerCounter == mMaxIterations || mProducerCounter == mMaxIterations)     return SynchronizedQueueResult.THREADS_NEVER_INTERUPTED;
 else     if (mConsumerCounter == FAILURE_OCCURRED || mProducerCounter == FAILURE_OCCURRED)     return SynchronizedQueueResult.THREADS_THREW_EXCEPTION;
 else     if (mConsumerCounter == TIMEOUT_OCCURRED || mProducerCounter == TIMEOUT_OCCURRED)     return SynchronizedQueueResult.THREADS_TIMEDOUT;
 else     return SynchronizedQueueResult.RAN_PROPERLY;
  }
 catch (  Exception e) {
    return SynchronizedQueueResult.TESTING_LOGIC_THREW_EXCEPTION;
  }
}",0.9764856776400171
28680,"/** 
 * This is the main loop run by each Being of Middle-Earth who wants to gaze into a Palantir.
 */
public void run(){
  for (int i=0; i < mMaxPalantirSessions; ++i) {
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    mFairnessChecker.addNewThread(Thread.currentThread().getName());
    Palantir palantir=mPalantirManager.acquirePalantir();
    if (!mFairnessChecker.checkOrder(Thread.currentThread().getName()))     System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    long activeThreads=mActiveThreads.getAndIncrement();
    if (mMaxActiveThreads < activeThreads) {
      System.out.println(""String_Node_Str"" + activeThreads);
      throw new RuntimeException();
    }
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    palantir.gaze();
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    mPalantirManager.releasePalantir(palantir);
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    mActiveThreads.decrementAndGet();
  }
}","/** 
 * This is the main loop run by each Being of Middle-Earth who wants to gaze into a Palantir.
 */
public void run(){
  for (int i=0; i < mMaxPalantirSessions; ++i) {
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    mFairnessChecker.addNewThread(Thread.currentThread().getName());
    Palantir palantir=mPalantirManager.acquirePalantir();
    if (!mFairnessChecker.checkOrder(Thread.currentThread().getName()))     System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    long activeThreads=mActiveThreads.getAndIncrement();
    if (mMaxActiveThreads < activeThreads) {
      System.out.println(""String_Node_Str"" + activeThreads);
      throw new RuntimeException();
    }
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    palantir.gaze();
    mActiveThreads.decrementAndGet();
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
    mPalantirManager.releasePalantir(palantir);
    System.out.println(Thread.currentThread().getName() + ""String_Node_Str"");
  }
}",0.9647168059424328
28681,"/** 
 * @brief Atomically increments by one the current value
 * @returns the previous value
 */
public long getAndIncrement(){
  long value=0;
  return value;
}","/** 
 * @brief Atomically increments by one the current value
 * @returns the previous value
 */
public long getAndIncrement(){
  long value;
  return value;
}",0.99375
28682,"/** 
 * @brief Atomically increments by one the current value
 * @returns the updated value
 */
public long incrementAndGet(){
  long value=0;
  return value;
}","/** 
 * @brief Atomically increments by one the current value
 * @returns the updated value
 */
public long incrementAndGet(){
  long value;
  return value;
}",0.9937106918238994
28683,"/** 
 * Creates a new SimpleAtomicLong with the given initial value.
 */
public SimpleAtomicLong(long initialValue){
  long value=0;
}","/** 
 * Creates a new SimpleAtomicLong with the given initial value.
 */
public SimpleAtomicLong(long initialValue){
}",0.9365079365079364
28684,"/** 
 * @brief Gets the current value.
 * @returns The current value
 */
public long get(){
  long value=0;
  return value;
}","/** 
 * @brief Gets the current value.
 * @returns The current value
 */
public long get(){
  long value;
  return value;
}",0.9919354838709676
28685,"/** 
 * @brief Atomically decrements by one the current value
 * @returns the updated value
 */
public long decrementAndGet(){
  long value=0;
  return value;
}","/** 
 * @brief Atomically decrements by one the current value
 * @returns the updated value
 */
public long decrementAndGet(){
  long value;
  return value;
}",0.9937106918238994
28686,"/** 
 * @brief Atomically decrements by one the current value
 * @returns the previous value
 */
public long getAndDecrement(){
  long value=0;
  return value;
}","/** 
 * @brief Atomically decrements by one the current value
 * @returns the previous value
 */
public long getAndDecrement(){
  long value;
  return value;
}",0.99375
28687,"static void escapeKey(StringBuilder sb,String key){
  for (int i=0; i < key.length(); i++) {
switch (key.charAt(i)) {
case ' ':
case ',':
case '=':
      sb.append('\\');
default :
    sb.append(key.charAt(i));
}
}
}","static void escapeKey(final StringBuilder sb,final String key){
  for (int i=0; i < key.length(); i++) {
switch (key.charAt(i)) {
case ' ':
case ',':
case '=':
      sb.append('\\');
default :
    sb.append(key.charAt(i));
}
}
}",0.972972972972973
28688,"static void escapeField(StringBuilder sb,String field){
  for (int i=0; i < field.length(); i++) {
switch (field.charAt(i)) {
case '\\':
case '\""':
      sb.append('\\');
default :
    sb.append(field.charAt(i));
}
}
}","static void escapeField(final StringBuilder sb,final String field){
  for (int i=0; i < field.length(); i++) {
switch (field.charAt(i)) {
case '\\':
case '\""':
      sb.append('\\');
default :
    sb.append(field.charAt(i));
}
}
}",0.9732142857142856
28689,"@Override public InfluxDB setDatabase(String database){
  this.database=database;
  return this;
}","@Override public InfluxDB setDatabase(final String database){
  this.database=database;
  return this;
}",0.9702970297029704
28690,"@Override public InfluxDB setConsistency(ConsistencyLevel consistency){
  this.consistency=consistency;
  return this;
}","@Override public InfluxDB setConsistency(final ConsistencyLevel consistency){
  this.consistency=consistency;
  return this;
}",0.975609756097561
28691,"@Override public InfluxDB setRetentionPolicy(String retentionPolicy){
  this.retentionPolicy=retentionPolicy;
  return this;
}","@Override public InfluxDB setRetentionPolicy(final String retentionPolicy){
  this.retentionPolicy=retentionPolicy;
  return this;
}",0.9767441860465116
28692,"/** 
 * {@inheritDoc}
 */
@Override public QueryResult query(final Query query,final TimeUnit timeUnit){
  return execute(this.influxDBService.query(this.username,this.password,query.getDatabase(),TimeUtil.toTimePrecision(timeUnit),query.getCommand()));
}","/** 
 * {@inheritDoc}
 */
@Override public QueryResult query(final Query query,final TimeUnit timeUnit){
  return execute(this.influxDBService.query(this.username,this.password,query.getDatabase(),TimeUtil.toTimePrecision(timeUnit),query.getCommandWithUrlEncoded()));
}",0.9732824427480916
28693,"/** 
 * {@inheritDoc}
 */
@Override public void deleteDatabase(final String name){
  execute(this.influxDBService.postQuery(this.username,this.password,""String_Node_Str"" + name + ""String_Node_Str""));
}","/** 
 * {@inheritDoc}
 */
@Override public void deleteDatabase(final String name){
  execute(this.influxDBService.postQuery(this.username,this.password,Query.encode(""String_Node_Str"" + name + ""String_Node_Str"")));
}",0.966346153846154
28694,"/** 
 * {@inheritDoc}
 */
@Override public List<String> describeDatabases(){
  QueryResult result=execute(this.influxDBService.query(this.username,this.password,""String_Node_Str""));
  List<List<Object>> databaseNames=result.getResults().get(0).getSeries().get(0).getValues();
  List<String> databases=Lists.newArrayList();
  if (databaseNames != null) {
    for (    List<Object> database : databaseNames) {
      databases.add(database.get(0).toString());
    }
  }
  return databases;
}","/** 
 * {@inheritDoc}
 */
@Override public List<String> describeDatabases(){
  QueryResult result=execute(this.influxDBService.query(this.username,this.password,SHOW_DATABASE_COMMAND_ENCODED));
  List<List<Object>> databaseNames=result.getResults().get(0).getSeries().get(0).getValues();
  List<String> databases=Lists.newArrayList();
  if (databaseNames != null) {
    for (    List<Object> database : databaseNames) {
      databases.add(database.get(0).toString());
    }
  }
  return databases;
}",0.9595141700404858
28695,"/** 
 * {@inheritDoc}
 */
@Override public void createDatabase(final String name){
  Preconditions.checkArgument(!name.contains(""String_Node_Str""),""String_Node_Str"");
  String createDatabaseQueryString=String.format(""String_Node_Str"",name);
  if (this.version().startsWith(""String_Node_Str"")) {
    createDatabaseQueryString=String.format(""String_Node_Str"",name);
  }
  execute(this.influxDBService.postQuery(this.username,this.password,createDatabaseQueryString));
}","/** 
 * {@inheritDoc}
 */
@Override public void createDatabase(final String name){
  Preconditions.checkArgument(!name.contains(""String_Node_Str""),""String_Node_Str"");
  String createDatabaseQueryString=String.format(""String_Node_Str"",name);
  if (this.version().startsWith(""String_Node_Str"")) {
    createDatabaseQueryString=String.format(""String_Node_Str"",name);
  }
  execute(this.influxDBService.postQuery(this.username,this.password,Query.encode(createDatabaseQueryString)));
}",0.9852320675105484
28696,"@POST(""String_Node_Str"") public Call<QueryResult> postQuery(@Query(U) String username,@Query(P) String password,@Query(Q) String query);","@POST(""String_Node_Str"") public Call<QueryResult> postQuery(@Query(U) String username,@Query(P) String password,@Query(value=Q,encoded=true) String query);",0.9347079037800688
28697,"@GET(""String_Node_Str"") public Call<QueryResult> query(@Query(U) String username,@Query(P) String password,@Query(Q) String query);","@GET(""String_Node_Str"") public Call<QueryResult> query(@Query(U) String username,@Query(P) String password,@Query(value=Q,encoded=true) String query);",0.9323843416370108
28698,"private StringBuilder concatenateFields(){
  final StringBuilder sb=new StringBuilder();
  final int fieldCount=this.fields.size();
  int loops=0;
  NumberFormat numberFormat=NumberFormat.getInstance(Locale.ENGLISH);
  numberFormat.setMaximumFractionDigits(340);
  numberFormat.setGroupingUsed(false);
  numberFormat.setMinimumFractionDigits(1);
  for (  Entry<String,Object> field : this.fields.entrySet()) {
    sb.append(KEY_ESCAPER.escape(field.getKey())).append(""String_Node_Str"");
    loops++;
    Object value=field.getValue();
    if (value instanceof String) {
      String stringValue=(String)value;
      sb.append(""String_Node_Str"").append(FIELD_ESCAPER.escape(stringValue)).append(""String_Node_Str"");
    }
 else     if (useInteger && (value instanceof Integer || value instanceof BigInteger || value instanceof Long)) {
      sb.append(value).append(""String_Node_Str"");
    }
 else     if (value instanceof Number) {
      sb.append(numberFormat.format(value));
    }
 else {
      sb.append(value);
    }
    if (loops < fieldCount) {
      sb.append(""String_Node_Str"");
    }
  }
  return sb;
}","private StringBuilder concatenateFields(){
  final StringBuilder sb=new StringBuilder();
  final int fieldCount=this.fields.size();
  int loops=0;
  NumberFormat numberFormat=NumberFormat.getInstance(Locale.ENGLISH);
  numberFormat.setMaximumFractionDigits(340);
  numberFormat.setGroupingUsed(false);
  numberFormat.setMinimumFractionDigits(1);
  for (  Entry<String,Object> field : this.fields.entrySet()) {
    loops++;
    Object value=field.getValue();
    if (value == null) {
      continue;
    }
    sb.append(KEY_ESCAPER.escape(field.getKey())).append(""String_Node_Str"");
    if (value instanceof String) {
      String stringValue=(String)value;
      sb.append(""String_Node_Str"").append(FIELD_ESCAPER.escape(stringValue)).append(""String_Node_Str"");
    }
 else     if (useInteger && (value instanceof Integer || value instanceof BigInteger || value instanceof Long)) {
      sb.append(value).append(""String_Node_Str"");
    }
 else     if (value instanceof Number) {
      sb.append(numberFormat.format(value));
    }
 else {
      sb.append(value);
    }
    if (loops < fieldCount) {
      sb.append(""String_Node_Str"");
    }
  }
  return sb;
}",0.9369210410233788
28699,"/** 
 * Create a new Point.
 * @return the newly created Point.
 */
public Point build(){
  Preconditions.checkArgument(!Strings.isNullOrEmpty(this.measurement),""String_Node_Str"");
  Preconditions.checkArgument(this.fields.size() > 0,""String_Node_Str"");
  Point point=new Point();
  point.setFields(this.fields);
  point.setMeasurement(this.measurement);
  if (this.time != 0) {
    point.setTime(this.time);
    point.setPrecision(this.precision);
  }
 else {
    point.setTime(System.currentTimeMillis());
    point.setPrecision(TimeUnit.MILLISECONDS);
  }
  point.setTags(this.tags);
  return point;
}","/** 
 * Create a new Point.
 * @return the newly created Point.
 */
public Point build(){
  Preconditions.checkArgument(!Strings.isNullOrEmpty(this.measurement),""String_Node_Str"");
  Preconditions.checkArgument(this.fields.size() > 0,""String_Node_Str"");
  Point point=new Point();
  point.setFields(this.fields);
  point.setMeasurement(this.measurement);
  if (this.time != null) {
    point.setTime(this.time);
    point.setPrecision(this.precision);
  }
 else {
    point.setTime(System.currentTimeMillis());
    point.setPrecision(TimeUnit.MILLISECONDS);
  }
  point.setTags(this.tags);
  return point;
}",0.9958711808422792
28700,"@Override public Map<String,Object> currentState(){
  Map<String,Object> state=new HashMap<>();
synchronized (this) {
    state.put(""String_Node_Str"",expiredEventQueue.getSnapshot());
    state.put(""String_Node_Str"",resetEvent);
  }
  return state;
}","@Override public Map<String,Object> currentState(){
  Map<String,Object> state=new HashMap<>();
synchronized (this) {
    state.put(""String_Node_Str"",expiredEventQueue != null ? expiredEventQueue.getSnapshot() : null);
    state.put(""String_Node_Str"",resetEvent);
  }
  return state;
}",0.9345794392523364
28701,"public synchronized void start(){
  try {
    if (siddhiAppContext.isStatsEnabled() && siddhiAppContext.getStatisticsManager() != null) {
      siddhiAppContext.getStatisticsManager().startReporting();
    }
    for (    Scheduler scheduler : siddhiAppContext.getSchedulers()) {
      scheduler.start();
    }
    for (    EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
      eternalReferencedHolder.start();
    }
    for (    List<Sink> sinks : sinkMap.values()) {
      for (      Sink sink : sinks) {
        sink.connectWithRetry();
      }
    }
    for (    Table table : tableMap.values()) {
      table.connectWithRetry();
    }
    for (    StreamJunction streamJunction : streamJunctionMap.values()) {
      streamJunction.startProcessing();
    }
    for (    List<Source> sources : sourceMap.values()) {
      for (      Source source : sources) {
        source.connectWithRetry();
      }
    }
    for (    AggregationRuntime aggregationRuntime : aggregationMap.values()) {
      aggregationRuntime.getRecreateInMemoryData().recreateInMemoryData();
    }
    running=true;
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t.getMessage(),t);
    try {
      shutdown();
    }
 catch (    Throwable t1) {
      log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t1.getMessage(),t);
    }
  }
}","public synchronized void start(){
  try {
    if (siddhiAppContext.isStatsEnabled() && siddhiAppContext.getStatisticsManager() != null) {
      siddhiAppContext.getStatisticsManager().startReporting();
    }
    for (    EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
      eternalReferencedHolder.start();
    }
    for (    Scheduler scheduler : siddhiAppContext.getSchedulers()) {
      scheduler.start();
    }
    for (    List<Sink> sinks : sinkMap.values()) {
      for (      Sink sink : sinks) {
        sink.connectWithRetry();
      }
    }
    for (    Table table : tableMap.values()) {
      table.connectWithRetry();
    }
    for (    StreamJunction streamJunction : streamJunctionMap.values()) {
      streamJunction.startProcessing();
    }
    for (    List<Source> sources : sourceMap.values()) {
      for (      Source source : sources) {
        source.connectWithRetry();
      }
    }
    for (    AggregationRuntime aggregationRuntime : aggregationMap.values()) {
      aggregationRuntime.getRecreateInMemoryData().recreateInMemoryData();
    }
    running=true;
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t.getMessage());
    try {
      shutdown();
    }
 catch (    Throwable t1) {
      log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t1.getMessage());
    }
  }
}",0.917069799585349
28702,"public synchronized void shutdown(){
  SourceHandlerManager sourceHandlerManager=siddhiAppContext.getSiddhiContext().getSourceHandlerManager();
  for (  List<Source> sources : sourceMap.values()) {
    for (    Source source : sources) {
      try {
        if (sourceHandlerManager != null) {
          sourceHandlerManager.unregisterSourceHandler(source.getMapper().getHandler().getElementId());
        }
        source.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(source.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(source.getStreamDefinition().getId())+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    try {
      table.shutdown();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(table.getTableDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  SinkHandlerManager sinkHandlerManager=siddhiAppContext.getSiddhiContext().getSinkHandlerManager();
  for (  List<Sink> sinks : sinkMap.values()) {
    for (    Sink sink : sinks) {
      try {
        if (sinkHandlerManager != null) {
          sinkHandlerManager.unregisterSinkHandler(sink.getHandler().getElementId());
        }
        sink.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(sink.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(sink.getStreamDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    RecordTableHandlerManager recordTableHandlerManager=siddhiAppContext.getSiddhiContext().getRecordTableHandlerManager();
    if (recordTableHandlerManager != null) {
      String elementId=null;
      RecordTableHandler recordTableHandler=table.getHandler();
      if (recordTableHandler != null) {
        elementId=recordTableHandler.getElementId();
      }
      if (elementId != null) {
        recordTableHandlerManager.unregisterRecordTableHandler(elementId);
      }
    }
    table.shutdown();
  }
  for (  EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
    try {
      eternalReferencedHolder.stop();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(eternalReferencedHolder.toString())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  inputManager.disconnect();
  for (  Scheduler scheduler : siddhiAppContext.getSchedulers()) {
    scheduler.stop();
  }
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      for (      StreamJunction streamJunction : streamJunctionMap.values()) {
        streamJunction.stopProcessing();
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      siddhiAppContext.getScheduledExecutorService().shutdownNow();
      siddhiAppContext.getExecutorService().shutdownNow();
    }
  }
,""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  thread.start();
  if (siddhiAppRuntimeMap != null) {
    siddhiAppRuntimeMap.remove(siddhiAppContext.getName());
  }
  if (siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().stopReporting();
    }
    siddhiAppContext.getStatisticsManager().cleanup();
  }
  running=false;
}","public synchronized void shutdown(){
  SourceHandlerManager sourceHandlerManager=siddhiAppContext.getSiddhiContext().getSourceHandlerManager();
  for (  List<Source> sources : sourceMap.values()) {
    for (    Source source : sources) {
      try {
        if (sourceHandlerManager != null) {
          sourceHandlerManager.unregisterSourceHandler(source.getMapper().getHandler().getElementId());
        }
        source.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(source.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(source.getStreamDefinition().getId())+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    try {
      table.shutdown();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(table.getTableDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  SinkHandlerManager sinkHandlerManager=siddhiAppContext.getSiddhiContext().getSinkHandlerManager();
  for (  List<Sink> sinks : sinkMap.values()) {
    for (    Sink sink : sinks) {
      try {
        if (sinkHandlerManager != null) {
          sinkHandlerManager.unregisterSinkHandler(sink.getHandler().getElementId());
        }
        sink.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(sink.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(sink.getStreamDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    RecordTableHandlerManager recordTableHandlerManager=siddhiAppContext.getSiddhiContext().getRecordTableHandlerManager();
    if (recordTableHandlerManager != null) {
      String elementId=null;
      RecordTableHandler recordTableHandler=table.getHandler();
      if (recordTableHandler != null) {
        elementId=recordTableHandler.getElementId();
      }
      if (elementId != null) {
        recordTableHandlerManager.unregisterRecordTableHandler(elementId);
      }
    }
    table.shutdown();
  }
  for (  Scheduler scheduler : siddhiAppContext.getSchedulers()) {
    scheduler.stop();
  }
  for (  EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
    try {
      eternalReferencedHolder.stop();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(eternalReferencedHolder.toString())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  inputManager.disconnect();
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      for (      StreamJunction streamJunction : streamJunctionMap.values()) {
        streamJunction.stopProcessing();
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      siddhiAppContext.getScheduledExecutorService().shutdownNow();
      siddhiAppContext.getExecutorService().shutdownNow();
    }
  }
,""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  thread.start();
  if (siddhiAppRuntimeMap != null) {
    siddhiAppRuntimeMap.remove(siddhiAppContext.getName());
  }
  if (siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().stopReporting();
    }
    siddhiAppContext.getStatisticsManager().cleanup();
  }
  running=false;
}",0.9777085330776606
28703,"public Expression[] getParameters(){
  return Arrays.copyOfRange(parameters,0,parameters.length);
}","public Expression[] getParameters(){
  return (parameters == null) ? null : Arrays.copyOfRange(parameters,0,parameters.length);
}",0.868421052631579
28704,"public synchronized void start(){
  try {
    if (siddhiAppContext.isStatsEnabled() && siddhiAppContext.getStatisticsManager() != null) {
      siddhiAppContext.getStatisticsManager().startReporting();
    }
    for (    EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
      eternalReferencedHolder.start();
    }
    for (    Scheduler scheduler : siddhiAppContext.getSchedulers()) {
      scheduler.start();
    }
    for (    List<Sink> sinks : sinkMap.values()) {
      for (      Sink sink : sinks) {
        sink.connectWithRetry();
      }
    }
    for (    Table table : tableMap.values()) {
      table.connectWithRetry();
    }
    for (    StreamJunction streamJunction : streamJunctionMap.values()) {
      streamJunction.startProcessing();
    }
    for (    List<Source> sources : sourceMap.values()) {
      for (      Source source : sources) {
        source.connectWithRetry();
      }
    }
    for (    AggregationRuntime aggregationRuntime : aggregationMap.values()) {
      aggregationRuntime.getRecreateInMemoryData().recreateInMemoryData();
    }
    running=true;
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t.getMessage());
    try {
      shutdown();
    }
 catch (    Throwable t1) {
      log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t1.getMessage());
    }
  }
}","public synchronized void start(){
  try {
    if (siddhiAppContext.isStatsEnabled() && siddhiAppContext.getStatisticsManager() != null) {
      siddhiAppContext.getStatisticsManager().startReporting();
    }
    for (    Scheduler scheduler : siddhiAppContext.getSchedulers()) {
      scheduler.start();
    }
    for (    EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
      eternalReferencedHolder.start();
    }
    for (    List<Sink> sinks : sinkMap.values()) {
      for (      Sink sink : sinks) {
        sink.connectWithRetry();
      }
    }
    for (    Table table : tableMap.values()) {
      table.connectWithRetry();
    }
    for (    StreamJunction streamJunction : streamJunctionMap.values()) {
      streamJunction.startProcessing();
    }
    for (    List<Source> sources : sourceMap.values()) {
      for (      Source source : sources) {
        source.connectWithRetry();
      }
    }
    for (    AggregationRuntime aggregationRuntime : aggregationMap.values()) {
      aggregationRuntime.getRecreateInMemoryData().recreateInMemoryData();
    }
    running=true;
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t.getMessage(),t);
    try {
      shutdown();
    }
 catch (    Throwable t1) {
      log.error(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str""+ t1.getMessage(),t);
    }
  }
}",0.9281271596406356
28705,"public synchronized void shutdown(){
  SourceHandlerManager sourceHandlerManager=siddhiAppContext.getSiddhiContext().getSourceHandlerManager();
  for (  List<Source> sources : sourceMap.values()) {
    for (    Source source : sources) {
      try {
        if (sourceHandlerManager != null) {
          sourceHandlerManager.unregisterSourceHandler(source.getMapper().getHandler().getElementId());
        }
        source.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(source.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(source.getStreamDefinition().getId())+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    try {
      table.shutdown();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(table.getTableDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  SinkHandlerManager sinkHandlerManager=siddhiAppContext.getSiddhiContext().getSinkHandlerManager();
  for (  List<Sink> sinks : sinkMap.values()) {
    for (    Sink sink : sinks) {
      try {
        if (sinkHandlerManager != null) {
          sinkHandlerManager.unregisterSinkHandler(sink.getHandler().getElementId());
        }
        sink.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(sink.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(sink.getStreamDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    RecordTableHandlerManager recordTableHandlerManager=siddhiAppContext.getSiddhiContext().getRecordTableHandlerManager();
    if (recordTableHandlerManager != null) {
      String elementId=null;
      RecordTableHandler recordTableHandler=table.getHandler();
      if (recordTableHandler != null) {
        elementId=recordTableHandler.getElementId();
      }
      if (elementId != null) {
        recordTableHandlerManager.unregisterRecordTableHandler(elementId);
      }
    }
    table.shutdown();
  }
  for (  Scheduler scheduler : siddhiAppContext.getSchedulers()) {
    scheduler.stop();
  }
  for (  EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
    try {
      eternalReferencedHolder.stop();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(eternalReferencedHolder.toString())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  inputManager.disconnect();
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      for (      StreamJunction streamJunction : streamJunctionMap.values()) {
        streamJunction.stopProcessing();
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      siddhiAppContext.getScheduledExecutorService().shutdownNow();
      siddhiAppContext.getExecutorService().shutdownNow();
    }
  }
,""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  thread.start();
  if (siddhiAppRuntimeMap != null) {
    siddhiAppRuntimeMap.remove(siddhiAppContext.getName());
  }
  if (siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().stopReporting();
    }
    siddhiAppContext.getStatisticsManager().cleanup();
  }
  running=false;
}","public synchronized void shutdown(){
  SourceHandlerManager sourceHandlerManager=siddhiAppContext.getSiddhiContext().getSourceHandlerManager();
  for (  List<Source> sources : sourceMap.values()) {
    for (    Source source : sources) {
      try {
        if (sourceHandlerManager != null) {
          sourceHandlerManager.unregisterSourceHandler(source.getMapper().getHandler().getElementId());
        }
        source.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(source.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(source.getStreamDefinition().getId())+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    try {
      table.shutdown();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(table.getTableDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  SinkHandlerManager sinkHandlerManager=siddhiAppContext.getSiddhiContext().getSinkHandlerManager();
  for (  List<Sink> sinks : sinkMap.values()) {
    for (    Sink sink : sinks) {
      try {
        if (sinkHandlerManager != null) {
          sinkHandlerManager.unregisterSinkHandler(sink.getHandler().getElementId());
        }
        sink.shutdown();
      }
 catch (      Throwable t) {
        log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(sink.getType())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(sink.getStreamDefinition().getId())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    RecordTableHandlerManager recordTableHandlerManager=siddhiAppContext.getSiddhiContext().getRecordTableHandlerManager();
    if (recordTableHandlerManager != null) {
      String elementId=null;
      RecordTableHandler recordTableHandler=table.getHandler();
      if (recordTableHandler != null) {
        elementId=recordTableHandler.getElementId();
      }
      if (elementId != null) {
        recordTableHandlerManager.unregisterRecordTableHandler(elementId);
      }
    }
    table.shutdown();
  }
  for (  EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
    try {
      eternalReferencedHolder.stop();
    }
 catch (    Throwable t) {
      log.error(StringUtil.removeCRLFCharacters(ExceptionUtil.getMessageWithContext(t,siddhiAppContext)) + ""String_Node_Str"" + StringUtil.removeCRLFCharacters(eternalReferencedHolder.toString())+ ""String_Node_Str""+ StringUtil.removeCRLFCharacters(siddhiAppContext.getName())+ ""String_Node_Str"",t);
    }
  }
  inputManager.disconnect();
  for (  Scheduler scheduler : siddhiAppContext.getSchedulers()) {
    scheduler.stop();
  }
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      for (      StreamJunction streamJunction : streamJunctionMap.values()) {
        streamJunction.stopProcessing();
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      siddhiAppContext.getScheduledExecutorService().shutdownNow();
      siddhiAppContext.getExecutorService().shutdownNow();
    }
  }
,""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  thread.start();
  if (siddhiAppRuntimeMap != null) {
    siddhiAppRuntimeMap.remove(siddhiAppContext.getName());
  }
  if (siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().stopReporting();
    }
    siddhiAppContext.getStatisticsManager().cleanup();
  }
  running=false;
}",0.9777085330776606
28706,"public void restoreRevision(String revision) throws CannotRestoreSiddhiAppStateException {
  PersistenceStore persistenceStore=siddhiAppContext.getSiddhiContext().getPersistenceStore();
  IncrementalPersistenceStore incrementalPersistenceStore=siddhiAppContext.getSiddhiContext().getIncrementalPersistenceStore();
  String siddhiAppName=siddhiAppContext.getName();
  if (persistenceStore != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + revision + ""String_Node_Str"");
    }
    byte[] snapshot=persistenceStore.load(siddhiAppContext.getName(),revision);
    if (snapshot != null) {
      restore(snapshot);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
    }
  }
 else   if (incrementalPersistenceStore != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + revision + ""String_Node_Str"");
    }
    IncrementalSnapshotInfo restoreSnapshotInfo=PersistenceHelper.convertRevision(revision);
    List<IncrementalSnapshotInfo> incrementalSnapshotInfos=incrementalPersistenceStore.getListOfRevisionsToLoad(restoreSnapshotInfo.getTime(),restoreSnapshotInfo.getSiddhiAppId());
    if (incrementalSnapshotInfos != null) {
      incrementalSnapshotInfos.sort(new Comparator<IncrementalSnapshotInfo>(){
        @Override public int compare(        IncrementalSnapshotInfo o1,        IncrementalSnapshotInfo o2){
          int results=o1.getElementId().compareTo(o2.getElementId());
          if (results == 0) {
            results=Long.compare(o2.getTime(),o1.getTime());
            if (results == 0) {
              return o2.getType().compareTo(o1.getType());
            }
          }
          return results;
        }
      }
);
      String lastElementId=null;
      boolean baseFound=false;
      for (Iterator<IncrementalSnapshotInfo> iterator=incrementalSnapshotInfos.iterator(); iterator.hasNext(); ) {
        IncrementalSnapshotInfo snapshotInfo=iterator.next();
        if (snapshotInfo.getElementId().equals(lastElementId)) {
          if (baseFound) {
            iterator.remove();
          }
 else           if (snapshotInfo.getType() == IncrementalSnapshotInfo.SnapshotType.BASE) {
            baseFound=true;
          }
        }
 else {
          baseFound=snapshotInfo.getType() == IncrementalSnapshotInfo.SnapshotType.BASE;
        }
        lastElementId=snapshotInfo.getElementId();
      }
      Map<String,Map<String,Map<Long,Map<IncrementalSnapshotInfo,byte[]>>>> incrementalState=new HashMap<>();
      for (      IncrementalSnapshotInfo snapshotInfo : incrementalSnapshotInfos) {
        Map<String,Map<Long,Map<IncrementalSnapshotInfo,byte[]>>> incrementalStateByElementId=incrementalState.computeIfAbsent(snapshotInfo.getQueryName(),k -> new TreeMap<>());
        Map<Long,Map<IncrementalSnapshotInfo,byte[]>> incrementalStateByTime=incrementalStateByElementId.computeIfAbsent(snapshotInfo.getElementId(),k -> new TreeMap<>());
        Map<IncrementalSnapshotInfo,byte[]> incrementalStateByInfo=incrementalStateByTime.computeIfAbsent(snapshotInfo.getTime(),k -> new HashMap<>());
        incrementalStateByInfo.put(snapshotInfo,incrementalPersistenceStore.load(snapshotInfo));
      }
      restore(incrementalState);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
    }
  }
 else {
    throw new NoPersistenceStoreException(""String_Node_Str"" + siddhiAppName);
  }
}","public void restoreRevision(String revision) throws CannotRestoreSiddhiAppStateException {
  PersistenceStore persistenceStore=siddhiAppContext.getSiddhiContext().getPersistenceStore();
  IncrementalPersistenceStore incrementalPersistenceStore=siddhiAppContext.getSiddhiContext().getIncrementalPersistenceStore();
  String siddhiAppName=siddhiAppContext.getName();
  if (persistenceStore != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + revision + ""String_Node_Str"");
    }
    byte[] snapshot=persistenceStore.load(siddhiAppContext.getName(),revision);
    if (snapshot != null) {
      restore(snapshot);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
      throw new PersistenceStoreException(""String_Node_Str"" + revision);
    }
  }
 else   if (incrementalPersistenceStore != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + revision + ""String_Node_Str"");
    }
    IncrementalSnapshotInfo restoreSnapshotInfo=PersistenceHelper.convertRevision(revision);
    List<IncrementalSnapshotInfo> incrementalSnapshotInfos=incrementalPersistenceStore.getListOfRevisionsToLoad(restoreSnapshotInfo.getTime(),restoreSnapshotInfo.getSiddhiAppId());
    if (incrementalSnapshotInfos != null) {
      incrementalSnapshotInfos.sort(new Comparator<IncrementalSnapshotInfo>(){
        @Override public int compare(        IncrementalSnapshotInfo o1,        IncrementalSnapshotInfo o2){
          int results=o1.getElementId().compareTo(o2.getElementId());
          if (results == 0) {
            results=Long.compare(o2.getTime(),o1.getTime());
            if (results == 0) {
              return o2.getType().compareTo(o1.getType());
            }
          }
          return results;
        }
      }
);
      String lastElementId=null;
      boolean baseFound=false;
      for (Iterator<IncrementalSnapshotInfo> iterator=incrementalSnapshotInfos.iterator(); iterator.hasNext(); ) {
        IncrementalSnapshotInfo snapshotInfo=iterator.next();
        if (snapshotInfo.getElementId().equals(lastElementId)) {
          if (baseFound) {
            iterator.remove();
          }
 else           if (snapshotInfo.getType() == IncrementalSnapshotInfo.SnapshotType.BASE) {
            baseFound=true;
          }
        }
 else {
          baseFound=snapshotInfo.getType() == IncrementalSnapshotInfo.SnapshotType.BASE;
        }
        lastElementId=snapshotInfo.getElementId();
      }
      Map<String,Map<String,Map<Long,Map<IncrementalSnapshotInfo,byte[]>>>> incrementalState=new HashMap<>();
      for (      IncrementalSnapshotInfo snapshotInfo : incrementalSnapshotInfos) {
        Map<String,Map<Long,Map<IncrementalSnapshotInfo,byte[]>>> incrementalStateByElementId=incrementalState.computeIfAbsent(snapshotInfo.getQueryName(),k -> new TreeMap<>());
        Map<Long,Map<IncrementalSnapshotInfo,byte[]>> incrementalStateByTime=incrementalStateByElementId.computeIfAbsent(snapshotInfo.getElementId(),k -> new TreeMap<>());
        Map<IncrementalSnapshotInfo,byte[]> incrementalStateByInfo=incrementalStateByTime.computeIfAbsent(snapshotInfo.getTime(),k -> new HashMap<>());
        incrementalStateByInfo.put(snapshotInfo,incrementalPersistenceStore.load(snapshotInfo));
      }
      restore(incrementalState);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + revision);
      }
      throw new PersistenceStoreException(""String_Node_Str"" + revision);
    }
  }
 else {
    throw new NoPersistenceStoreException(""String_Node_Str"" + siddhiAppName);
  }
}",0.975517890772128
28707,"public void setIncrementalPersistenceStore(IncrementalFileSystemPersistenceStore incrementalPersistenceStore){
  this.siddhiContext.setIncrementalPersistenceStore(incrementalPersistenceStore);
}","public void setIncrementalPersistenceStore(IncrementalPersistenceStore incrementalPersistenceStore){
  this.siddhiContext.setIncrementalPersistenceStore(incrementalPersistenceStore);
}",0.9735449735449736
28708,"@Override public synchronized void restoreState(Map<String,Object> state){
  count=(int)state.get(""String_Node_Str"");
  expiredEventQueue.clear();
  SnapshotStateList list=(SnapshotStateList)state.get(""String_Node_Str"");
  expiredEventQueue.restore((SnapshotStateList)state.get(""String_Node_Str""));
}","@Override public synchronized void restoreState(Map<String,Object> state){
  count=(int)state.get(""String_Node_Str"");
  expiredEventQueue.clear();
  expiredEventQueue.restore((SnapshotStateList)state.get(""String_Node_Str""));
}",0.752851711026616
28709,"private boolean isFullSnapshot(){
  return (operationChangeLog.size() > (eventsCount * FULL_SNAPSHOT_THRESHOLD)) && (eventsCount != 0) || forceFullSnapshot;
}","private boolean isFullSnapshot(){
  return operationChangeLog.size() > (eventsCount * FULL_SNAPSHOT_THRESHOLD) || forceFullSnapshot || SnapshotRequest.isRequestForFullSnapshot();
}",0.7928994082840237
28710,"private static boolean isCollectionVariable(MatchingMetaInfoHolder matchingMetaInfoHolder,Variable variable){
  if (variable.getStreamId() != null) {
    MetaStreamEvent collectionStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getStoreEventIndex());
    if (collectionStreamEvent != null) {
      if ((collectionStreamEvent.getInputReferenceId() != null && variable.getStreamId().equals(collectionStreamEvent.getInputReferenceId())) || (collectionStreamEvent.getLastInputDefinition().getId().equals(variable.getStreamId()))) {
        return true;
      }
    }
  }
 else   if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 1 && matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents()[0].getEventType() != MetaStreamEvent.EventType.DEFAULT) {
    return true;
  }
 else   if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 2 && matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents()[1].getEventType() != MetaStreamEvent.EventType.DEFAULT) {
    return true;
  }
  return false;
}","private static boolean isCollectionVariable(MatchingMetaInfoHolder matchingMetaInfoHolder,Variable variable){
  if (variable.getStreamId() != null) {
    MetaStreamEvent collectionStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getStoreEventIndex());
    if (collectionStreamEvent != null) {
      if ((collectionStreamEvent.getInputReferenceId() != null && variable.getStreamId().equals(collectionStreamEvent.getInputReferenceId())) || (collectionStreamEvent.getLastInputDefinition().getId().equals(variable.getStreamId()))) {
        return true;
      }
    }
  }
 else   if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 1 && matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents()[0].getEventType() != MetaStreamEvent.EventType.DEFAULT) {
    return true;
  }
 else   if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 2 && matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents()[matchingMetaInfoHolder.getStoreEventIndex()].getEventType() != MetaStreamEvent.EventType.DEFAULT) {
    return true;
  }
  return false;
}",0.9804618117229128
28711,"/** 
 * Parse a query and return corresponding QueryRuntime.
 * @param query                    query to be parsed.
 * @param siddhiAppContext         associated Siddhi app context.
 * @param streamDefinitionMap      keyvalue containing user given stream definitions.
 * @param tableDefinitionMap       keyvalue containing table definitions.
 * @param windowDefinitionMap      keyvalue containing window definition map.
 * @param aggregationDefinitionMap keyvalue containing aggregation definition map.
 * @param tableMap                 keyvalue containing event tables.
 * @param aggregationMap           keyvalue containing aggrigation runtimes.
 * @param windowMap                keyvalue containing event window map.
 * @param lockSynchronizer         Lock synchronizer for sync the lock across queries.
 * @param queryIndex               query index to identify unknown query by number
 * @return queryRuntime
 */
public static QueryRuntime parse(Query query,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,AggregationRuntime> aggregationMap,Map<String,Window> windowMap,LockSynchronizer lockSynchronizer,String queryIndex){
  List<VariableExpressionExecutor> executors=new ArrayList<VariableExpressionExecutor>();
  QueryRuntime queryRuntime;
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",query.getAnnotations());
    String queryName=null;
    if (nameElement != null) {
      queryName=nameElement.getValue();
    }
 else {
      queryName=""String_Node_Str"" + queryIndex + ""String_Node_Str""+ UUID.randomUUID().toString();
    }
    latencyTracker=QueryParserHelper.createLatencyTracker(siddhiAppContext,queryName,SiddhiConstants.METRIC_INFIX_QUERIES,null);
    OutputStream.OutputEventType outputEventType=query.getOutputStream().getOutputEventType();
    boolean outputExpectsExpiredEvents=false;
    if (outputEventType != OutputStream.OutputEventType.CURRENT_EVENTS) {
      outputExpectsExpiredEvents=true;
    }
    StreamRuntime streamRuntime=InputStreamParser.parse(query.getInputStream(),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,executors,latencyTracker,outputExpectsExpiredEvents,queryName);
    QuerySelector selector=SelectorParser.parse(query.getSelector(),query.getOutputStream(),siddhiAppContext,streamRuntime.getMetaComplexEvent(),tableMap,executors,queryName,SiddhiConstants.UNKNOWN_STATE);
    boolean isWindow=query.getInputStream() instanceof JoinInputStream;
    if (!isWindow && query.getInputStream() instanceof SingleInputStream) {
      for (      StreamHandler streamHandler : ((SingleInputStream)query.getInputStream()).getStreamHandlers()) {
        if (streamHandler instanceof org.wso2.siddhi.query.api.execution.query.input.handler.Window) {
          isWindow=true;
          break;
        }
      }
    }
    Element synchronizedElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",null,query.getAnnotations());
    if (synchronizedElement != null) {
      if (!(""String_Node_Str"".equalsIgnoreCase(synchronizedElement.getValue()))) {
        lockWrapper=new LockWrapper(""String_Node_Str"");
        lockWrapper.setLock(new ReentrantLock());
      }
    }
 else {
      if (isWindow || !(streamRuntime instanceof SingleStreamRuntime)) {
        if (streamRuntime instanceof JoinStreamRuntime) {
          MetaStateEvent metaStateEvent=(MetaStateEvent)streamRuntime.getMetaComplexEvent();
          MetaStreamEvent[] metaStreamEvents=metaStateEvent.getMetaStreamEvents();
          if (metaStreamEvents[0].getEventType() == EventType.WINDOW && metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            LockWrapper leftLockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
            LockWrapper rightLockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
            if (!leftLockWrapper.equals(rightLockWrapper)) {
              lockSynchronizer.sync(leftLockWrapper,rightLockWrapper);
            }
            lockWrapper=leftLockWrapper;
          }
 else           if (metaStreamEvents[0].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
          }
 else           if (metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
          }
 else {
            lockWrapper=new LockWrapper(""String_Node_Str"");
            lockWrapper.setLock(new ReentrantLock());
          }
        }
 else {
          lockWrapper=new LockWrapper(""String_Node_Str"");
          lockWrapper.setLock(new ReentrantLock());
        }
      }
    }
    OutputRateLimiter outputRateLimiter=OutputParser.constructOutputRateLimiter(query.getOutputStream().getId(),query.getOutputRate(),query.getSelector().getGroupByList().size() != 0,isWindow,siddhiAppContext.getScheduledExecutorService(),siddhiAppContext,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
    }
    siddhiAppContext.addEternalReferencedHolder(outputRateLimiter);
    OutputCallback outputCallback=OutputParser.constructOutputCallback(query.getOutputStream(),streamRuntime.getMetaComplexEvent().getOutputStreamDefinition(),tableMap,windowMap,siddhiAppContext,!(streamRuntime instanceof SingleStreamRuntime),queryName);
    QueryParserHelper.reduceMetaComplexEvent(streamRuntime.getMetaComplexEvent());
    QueryParserHelper.updateVariablePosition(streamRuntime.getMetaComplexEvent(),executors);
    QueryParserHelper.initStreamRuntime(streamRuntime,streamRuntime.getMetaComplexEvent(),lockWrapper,queryName);
    selector.setEventPopulator(StateEventPopulatorFactory.constructEventPopulator(streamRuntime.getMetaComplexEvent()));
    queryRuntime=new QueryRuntime(query,siddhiAppContext,streamRuntime,selector,outputRateLimiter,outputCallback,streamRuntime.getMetaComplexEvent(),lockWrapper != null,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
      ((WrappedSnapshotOutputRateLimiter)outputRateLimiter).init(streamRuntime.getMetaComplexEvent().getOutputStreamDefinition().getAttributeList().size(),selector.getAttributeProcessorList(),streamRuntime.getMetaComplexEvent());
    }
    outputRateLimiter.init(siddhiAppContext,lockWrapper,queryName);
  }
 catch (  DuplicateDefinitionException e) {
    if (nameElement != null) {
      throw new DuplicateDefinitionException(e.getMessageWithOutContext() + ""String_Node_Str"" + nameElement.getValue(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
 else {
      throw new DuplicateDefinitionException(e.getMessage(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
  }
catch (  Throwable t) {
    ExceptionUtil.populateQueryContext(t,query,siddhiAppContext);
    throw t;
  }
  return queryRuntime;
}","/** 
 * Parse a query and return corresponding QueryRuntime.
 * @param query                    query to be parsed.
 * @param siddhiAppContext         associated Siddhi app context.
 * @param streamDefinitionMap      keyvalue containing user given stream definitions.
 * @param tableDefinitionMap       keyvalue containing table definitions.
 * @param windowDefinitionMap      keyvalue containing window definition map.
 * @param aggregationDefinitionMap keyvalue containing aggregation definition map.
 * @param tableMap                 keyvalue containing event tables.
 * @param aggregationMap           keyvalue containing aggrigation runtimes.
 * @param windowMap                keyvalue containing event window map.
 * @param lockSynchronizer         Lock synchronizer for sync the lock across queries.
 * @param queryIndex               query index to identify unknown query by number
 * @return queryRuntime
 */
public static QueryRuntime parse(Query query,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,AggregationRuntime> aggregationMap,Map<String,Window> windowMap,LockSynchronizer lockSynchronizer,String queryIndex){
  List<VariableExpressionExecutor> executors=new ArrayList<VariableExpressionExecutor>();
  QueryRuntime queryRuntime;
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",query.getAnnotations());
    String queryName=null;
    if (nameElement != null) {
      queryName=nameElement.getValue();
    }
 else {
      queryName=""String_Node_Str"" + queryIndex + ""String_Node_Str""+ UUID.randomUUID().toString();
    }
    latencyTracker=QueryParserHelper.createLatencyTracker(siddhiAppContext,queryName,SiddhiConstants.METRIC_INFIX_QUERIES,null);
    OutputStream.OutputEventType outputEventType=query.getOutputStream().getOutputEventType();
    boolean outputExpectsExpiredEvents=false;
    if (outputEventType != OutputStream.OutputEventType.CURRENT_EVENTS) {
      outputExpectsExpiredEvents=true;
    }
    StreamRuntime streamRuntime=InputStreamParser.parse(query.getInputStream(),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,executors,latencyTracker,outputExpectsExpiredEvents,queryName);
    QuerySelector selector=SelectorParser.parse(query.getSelector(),query.getOutputStream(),siddhiAppContext,streamRuntime.getMetaComplexEvent(),tableMap,executors,queryName,SiddhiConstants.UNKNOWN_STATE);
    boolean isWindow=query.getInputStream() instanceof JoinInputStream;
    if (!isWindow && query.getInputStream() instanceof SingleInputStream) {
      for (      StreamHandler streamHandler : ((SingleInputStream)query.getInputStream()).getStreamHandlers()) {
        if (streamHandler instanceof org.wso2.siddhi.query.api.execution.query.input.handler.Window) {
          isWindow=true;
          break;
        }
      }
    }
    Element synchronizedElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",null,query.getAnnotations());
    if (synchronizedElement != null) {
      if (!(""String_Node_Str"".equalsIgnoreCase(synchronizedElement.getValue()))) {
        lockWrapper=new LockWrapper(""String_Node_Str"");
        lockWrapper.setLock(new ReentrantLock());
      }
    }
 else {
      if (isWindow || !(streamRuntime instanceof SingleStreamRuntime)) {
        if (streamRuntime instanceof JoinStreamRuntime) {
          MetaStateEvent metaStateEvent=(MetaStateEvent)streamRuntime.getMetaComplexEvent();
          MetaStreamEvent[] metaStreamEvents=metaStateEvent.getMetaStreamEvents();
          if (metaStreamEvents[0].getEventType() == EventType.WINDOW && metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            LockWrapper leftLockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
            LockWrapper rightLockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
            if (!leftLockWrapper.equals(rightLockWrapper)) {
              lockSynchronizer.sync(leftLockWrapper,rightLockWrapper);
            }
            lockWrapper=leftLockWrapper;
          }
 else           if (metaStreamEvents[0].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
          }
 else           if (metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
          }
 else {
            lockWrapper=new LockWrapper(""String_Node_Str"");
            lockWrapper.setLock(new ReentrantLock());
          }
        }
 else {
          lockWrapper=new LockWrapper(""String_Node_Str"");
          lockWrapper.setLock(new ReentrantLock());
        }
      }
    }
    OutputRateLimiter outputRateLimiter=OutputParser.constructOutputRateLimiter(query.getOutputStream().getId(),query.getOutputRate(),query.getSelector().getGroupByList().size() != 0,isWindow,siddhiAppContext.getScheduledExecutorService(),siddhiAppContext,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
    }
    siddhiAppContext.addEternalReferencedHolder(outputRateLimiter);
    OutputCallback outputCallback=OutputParser.constructOutputCallback(query.getOutputStream(),streamRuntime.getMetaComplexEvent().getOutputStreamDefinition(),tableMap,windowMap,siddhiAppContext,!(streamRuntime instanceof SingleStreamRuntime) || !query.getSelector().getGroupByList().isEmpty(),queryName);
    QueryParserHelper.reduceMetaComplexEvent(streamRuntime.getMetaComplexEvent());
    QueryParserHelper.updateVariablePosition(streamRuntime.getMetaComplexEvent(),executors);
    QueryParserHelper.initStreamRuntime(streamRuntime,streamRuntime.getMetaComplexEvent(),lockWrapper,queryName);
    selector.setEventPopulator(StateEventPopulatorFactory.constructEventPopulator(streamRuntime.getMetaComplexEvent()));
    queryRuntime=new QueryRuntime(query,siddhiAppContext,streamRuntime,selector,outputRateLimiter,outputCallback,streamRuntime.getMetaComplexEvent(),lockWrapper != null,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
      ((WrappedSnapshotOutputRateLimiter)outputRateLimiter).init(streamRuntime.getMetaComplexEvent().getOutputStreamDefinition().getAttributeList().size(),selector.getAttributeProcessorList(),streamRuntime.getMetaComplexEvent());
    }
    outputRateLimiter.init(siddhiAppContext,lockWrapper,queryName);
  }
 catch (  DuplicateDefinitionException e) {
    if (nameElement != null) {
      throw new DuplicateDefinitionException(e.getMessageWithOutContext() + ""String_Node_Str"" + nameElement.getValue(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
 else {
      throw new DuplicateDefinitionException(e.getMessage(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
  }
catch (  Throwable t) {
    ExceptionUtil.populateQueryContext(t,query,siddhiAppContext);
    throw t;
  }
  return queryRuntime;
}",0.9966240815515988
28712,"private boolean isFullSnapshot(){
  if ((this.changeLog.size() > (eventsCount * FULL_SNAPSHOT_THRESHOLD)) && (eventsCount != 0)) {
    return true;
  }
 else   if (this.changeLog.size() > threshold) {
    return true;
  }
 else {
    return false;
  }
}","private boolean isFullSnapshot(){
  if (sizeOfBacklogChangelogs > 100) {
    return true;
  }
 else   if (sizeOfBacklogChangelogs > threshold) {
    return true;
  }
 else {
    return false;
  }
}",0.7511111111111111
28713,"public Snapshot getSnapshot(){
  if (isFirstSnapshot) {
    Snapshot snapshot=new Snapshot(this,false);
    isFirstSnapshot=false;
    this.changeLog.clear();
    return snapshot;
  }
  if (isFullSnapshot()) {
    Snapshot snapshot=new Snapshot(this,false);
    this.changeLog=new ArrayList<Operation>();
    return snapshot;
  }
 else {
    Snapshot snapshot=new Snapshot(changeLog,true);
    return snapshot;
  }
}","public Snapshot getSnapshot(){
  if (isFirstSnapshot) {
    Snapshot snapshot=new Snapshot(this,false);
    isFirstSnapshot=false;
    this.changeLog.clear();
    return snapshot;
  }
  if (isFullSnapshot()) {
    Snapshot snapshot=new Snapshot(this,false);
    this.changeLog=new ArrayList<Operation>();
    sizeOfBacklogChangelogs=0;
    return snapshot;
  }
 else {
    Snapshot snapshot=new Snapshot(changeLog,true);
    sizeOfBacklogChangelogs+=this.changeLog.size();
    this.changeLog.clear();
    return snapshot;
  }
}",0.8822905620360552
28714,"@Test(dependsOnMethods={""String_Node_Str""}) public void incrementalStreamProcessorTest41() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String stockStream=""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(stockStream + query);
  try {
    siddhiAppRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timestamp,      Event[] inEvents,      Event[] removeEvents){
        if (inEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : removeEvents) {
            removeEventsList.add(event.getData());
            removeEventCount.incrementAndGet();
          }
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    InputHandler inputStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    siddhiAppRuntime.start();
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",50f,60f,90L,6,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",60f,44f,200L,56,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,16,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,26,1496289948000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,96,1496289948000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",900f,null,200L,60,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",500f,null,200L,7,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",400f,null,200L,9,1496289946000L});
    Thread.sleep(100);
    inputStreamInputHandler.send(new Object[]{""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Thread.sleep(100);
    List<Object[]> expected=Arrays.asList(new Object[]{1496289947000L,600.0,1800.0,3600f,3L},new Object[]{1496289948000L,100.0,200.0,9600f,2L},new Object[]{1496289949000L,80.0,160.0,1600f,2L},new Object[]{1496289950000L,60.0,120.0,700f,2L});
    SiddhiTestHelper.waitForEvents(100,4,inEventCount,60000);
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(removeEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",4,inEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",4,removeEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    siddhiAppRuntime.shutdown();
  }
}","@Test(dependsOnMethods={""String_Node_Str""}) public void incrementalStreamProcessorTest41() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String stockStream=""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(stockStream + query);
  try {
    siddhiAppRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timestamp,      Event[] inEvents,      Event[] removeEvents){
        if (inEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : removeEvents) {
            removeEventsList.add(event.getData());
            removeEventCount.incrementAndGet();
          }
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    InputHandler inputStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    siddhiAppRuntime.start();
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",50f,60f,90L,6,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",60f,44f,200L,56,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,16,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,26,1496289948000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,96,1496289948000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",900f,null,200L,60,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",500f,null,200L,7,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",400f,null,200L,9,1496289946000L});
    Thread.sleep(100);
    inputStreamInputHandler.send(new Object[]{""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Thread.sleep(100);
    List<Object[]> expected=Arrays.asList(new Object[]{1496289947000L,600.0,1800.0,3600f,3L},new Object[]{1496289948000L,100.0,200.0,9600f,2L},new Object[]{1496289949000L,80.0,160.0,1600f,2L},new Object[]{1496289950000L,60.0,120.0,700f,2L});
    SiddhiTestHelper.waitForEvents(100,4,inEventCount,60000);
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(removeEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",4,inEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",4,removeEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    siddhiAppRuntime.shutdown();
  }
}",0.9973099249610649
28715,"@Test(dependsOnMethods={""String_Node_Str""}) public void incrementalStreamProcessorTest42() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String stockStream=""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(stockStream + query);
  try {
    siddhiAppRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timestamp,      Event[] inEvents,      Event[] removeEvents){
        if (inEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : removeEvents) {
            removeEventsList.add(event.getData());
            removeEventCount.incrementAndGet();
          }
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    InputHandler inputStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    siddhiAppRuntime.start();
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",50f,60f,90L,6,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",60f,44f,200L,56,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,16,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",400f,null,200L,9,1496289946000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",900f,null,200L,60,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",500f,null,200L,7,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,26,1496289948000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,96,1496289948000L});
    Thread.sleep(100);
    inputStreamInputHandler.send(new Object[]{""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Thread.sleep(100);
    List<Object[]> expected=Arrays.asList(new Object[]{1496289947000L,600.0,1800.0,3500f,3L},new Object[]{1496289948000L,100.0,200.0,9600f,2L},new Object[]{1496289949000L,80.0,160.0,1600f,2L},new Object[]{1496289950000L,60.0,120.0,700f,2L});
    SiddhiTestHelper.waitForEvents(100,4,inEventCount,60000);
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(removeEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",4,inEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",4,removeEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    siddhiAppRuntime.shutdown();
  }
}","@Test(dependsOnMethods={""String_Node_Str""}) public void incrementalStreamProcessorTest42() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String stockStream=""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(stockStream + query);
  try {
    siddhiAppRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timestamp,      Event[] inEvents,      Event[] removeEvents){
        if (inEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : removeEvents) {
            removeEventsList.add(event.getData());
            removeEventCount.incrementAndGet();
          }
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    InputHandler inputStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    siddhiAppRuntime.start();
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",50f,60f,90L,6,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",60f,44f,200L,56,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,16,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",400f,null,200L,9,1496289946000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",900f,null,200L,60,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",500f,null,200L,7,1496289947000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,26,1496289948000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,96,1496289948000L});
    Thread.sleep(100);
    inputStreamInputHandler.send(new Object[]{""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Thread.sleep(100);
    List<Object[]> expected=Arrays.asList(new Object[]{1496289947000L,600.0,1800.0,3500f,3L},new Object[]{1496289948000L,100.0,200.0,9600f,2L},new Object[]{1496289949000L,80.0,160.0,1600f,2L},new Object[]{1496289950000L,60.0,120.0,700f,2L});
    SiddhiTestHelper.waitForEvents(100,4,inEventCount,60000);
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(removeEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",4,inEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",4,removeEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    siddhiAppRuntime.shutdown();
  }
}",0.9973099249610649
28716,"@Test(dependsOnMethods={""String_Node_Str""}) public void incrementalStreamProcessorTest43() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String stockStream=""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(stockStream + query);
  try {
    siddhiAppRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timestamp,      Event[] inEvents,      Event[] removeEvents){
        if (inEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : removeEvents) {
            removeEventsList.add(event.getData());
            removeEventCount.incrementAndGet();
          }
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    InputHandler inputStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    siddhiAppRuntime.start();
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",50f,60f,90L,6,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",60f,44f,200L,56,1496289951000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,16,1496289951011L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",400f,null,200L,9,1496289952000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",900f,null,200L,60,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",500f,null,200L,7,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,26,1496289953000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,96,1496289953000L});
    Thread.sleep(100);
    inputStreamInputHandler.send(new Object[]{""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Thread.sleep(100);
    List<Object[]> expected=Arrays.asList(new Object[]{1496289949000L,700.0,1400.0,3500f,2L},new Object[]{1496289950000L,60.0,120.0,700f,2L},new Object[]{1496289951000L,80.0,160.0,1600f,2L},new Object[]{1496289952000L,400.0,400.0,3600f,1L},new Object[]{1496289953000L,100.0,200.0,9600f,2L});
    SiddhiTestHelper.waitForEvents(100,5,inEventCount,60000);
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(removeEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",5,inEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",5,removeEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    siddhiAppRuntime.shutdown();
  }
}","@Test(dependsOnMethods={""String_Node_Str""}) public void incrementalStreamProcessorTest43() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String stockStream=""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(stockStream + query);
  try {
    siddhiAppRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timestamp,      Event[] inEvents,      Event[] removeEvents){
        if (inEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          EventPrinter.print(timestamp,inEvents,removeEvents);
          for (          Event event : removeEvents) {
            removeEventsList.add(event.getData());
            removeEventCount.incrementAndGet();
          }
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    InputHandler inputStreamInputHandler=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
    siddhiAppRuntime.start();
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",50f,60f,90L,6,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10,1496289950000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",60f,44f,200L,56,1496289951000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,16,1496289951011L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",400f,null,200L,9,1496289952000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",900f,null,200L,60,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",500f,null,200L,7,1496289949000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,26,1496289953000L});
    stockStreamInputHandler.send(new Object[]{""String_Node_Str"",100f,null,200L,96,1496289953000L});
    Thread.sleep(100);
    inputStreamInputHandler.send(new Object[]{""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Thread.sleep(100);
    List<Object[]> expected=Arrays.asList(new Object[]{1496289949000L,700.0,1400.0,3500f,2L},new Object[]{1496289950000L,60.0,120.0,700f,2L},new Object[]{1496289951000L,80.0,160.0,1600f,2L},new Object[]{1496289952000L,400.0,400.0,3600f,1L},new Object[]{1496289953000L,100.0,200.0,9600f,2L});
    SiddhiTestHelper.waitForEvents(100,5,inEventCount,60000);
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(removeEventsList,expected));
    AssertJUnit.assertEquals(""String_Node_Str"",5,inEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",5,removeEventCount.get());
    AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    siddhiAppRuntime.shutdown();
  }
}",0.9973614775725592
28717,"@Test public void testPartitionQuery38() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String siddhiApp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(siddhiApp);
  StreamCallback streamCallback=new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      count.addAndGet(events.length);
      eventArrived=true;
    }
  }
;
  siddhiAppRuntime.addCallback(""String_Node_Str"",streamCallback);
  SiddhiAppRuntime siddhiAppRuntime2=siddhiManager.createSiddhiAppRuntime(siddhiApp);
  StreamCallback streamCallback2=new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      AssertJUnit.assertTrue(""String_Node_Str"".equals(events[0].getData(0)) || ""String_Node_Str"".equals(events[0].getData(0)));
      count.addAndGet(events.length);
      eventArrived=true;
    }
  }
;
  siddhiAppRuntime2.addCallback(""String_Node_Str"",streamCallback2);
  InputHandler inputHandlerA=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
  InputHandler inputHandlerB=siddhiAppRuntime2.getInputHandler(""String_Node_Str"");
  siddhiAppRuntime.start();
  inputHandlerA.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",700}));
  inputHandlerA.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  inputHandlerA.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  byte[] snapshot=siddhiAppRuntime.snapshot();
  siddhiAppRuntime.shutdown();
  Thread.sleep(1000);
  try {
    siddhiAppRuntime2.restore(snapshot);
  }
 catch (  CannotRestoreSiddhiAppStateException e) {
    Assert.fail(""String_Node_Str"" + siddhiAppRuntime.getName() + ""String_Node_Str"");
  }
  siddhiAppRuntime2.start();
  inputHandlerB.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",700}));
  inputHandlerB.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  inputHandlerB.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  AssertJUnit.assertEquals(6,count.get());
  siddhiAppRuntime.shutdown();
}","@Test public void testPartitionQuery38() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String siddhiApp=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(siddhiApp);
  StreamCallback streamCallback=new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      count.addAndGet(events.length);
      eventArrived=true;
    }
  }
;
  siddhiAppRuntime.addCallback(""String_Node_Str"",streamCallback);
  SiddhiAppRuntime siddhiAppRuntime2=siddhiManager.createSiddhiAppRuntime(siddhiApp);
  StreamCallback streamCallback2=new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      AssertJUnit.assertTrue(""String_Node_Str"".equals(events[0].getData(0)) || ""String_Node_Str"".equals(events[0].getData(0)));
      count.addAndGet(events.length);
      eventArrived=true;
    }
  }
;
  siddhiAppRuntime2.addCallback(""String_Node_Str"",streamCallback2);
  InputHandler inputHandlerA=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
  InputHandler inputHandlerB=siddhiAppRuntime2.getInputHandler(""String_Node_Str"");
  siddhiAppRuntime.start();
  inputHandlerA.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",700}));
  inputHandlerA.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  inputHandlerA.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  byte[] snapshot=siddhiAppRuntime.snapshot();
  siddhiAppRuntime.shutdown();
  Thread.sleep(1000);
  try {
    siddhiAppRuntime2.restore(snapshot);
  }
 catch (  CannotRestoreSiddhiAppStateException e) {
    Assert.fail(""String_Node_Str"" + siddhiAppRuntime.getName() + ""String_Node_Str"");
  }
  siddhiAppRuntime2.start();
  inputHandlerB.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",700}));
  inputHandlerB.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  inputHandlerB.send(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",60}));
  AssertJUnit.assertEquals(6,count.get());
  siddhiAppRuntime.shutdown();
}",0.9960621761658032
28718,"@Test public void testPatternPartitionQuery8() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"";
  String partitionStart=""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String partitionEnd=""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(streams + partitionStart + query+ partitionEnd);
  siddhiAppRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
        if (event.isExpired()) {
          removeEventCount.incrementAndGet();
        }
 else {
          inEventCount.incrementAndGet();
switch (inEventCount.get()) {
case 1:
            AssertJUnit.assertArrayEquals(new Object[]{55.6f},event.getData());
          break;
case 2:
        AssertJUnit.assertArrayEquals(new Object[]{57.6f},event.getData());
      break;
default :
    AssertJUnit.assertSame(2,inEventCount.get());
}
}
eventArrived=true;
}
}
}
);
InputHandler stream1=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
siddhiAppRuntime.start();
stream1.send(new Object[]{""String_Node_Str"",55.6f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",57.6f,100});
SiddhiTestHelper.waitForEvents(100,2,inEventCount,60000);
AssertJUnit.assertEquals(""String_Node_Str"",2,inEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",0,removeEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
siddhiAppRuntime.shutdown();
}","@Test public void testPatternPartitionQuery8() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String partitionStart=""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String partitionEnd=""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(streams + partitionStart + query+ partitionEnd);
  siddhiAppRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
        if (event.isExpired()) {
          removeEventCount.incrementAndGet();
        }
 else {
          inEventCount.incrementAndGet();
switch (inEventCount.get()) {
case 1:
            AssertJUnit.assertArrayEquals(new Object[]{55.6f},event.getData());
          break;
case 2:
        AssertJUnit.assertArrayEquals(new Object[]{57.6f},event.getData());
      break;
default :
    AssertJUnit.assertSame(2,inEventCount.get());
}
}
eventArrived=true;
}
}
}
);
InputHandler stream1=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
siddhiAppRuntime.start();
stream1.send(new Object[]{""String_Node_Str"",55.6f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",57.6f,100});
SiddhiTestHelper.waitForEvents(100,2,inEventCount,60000);
AssertJUnit.assertEquals(""String_Node_Str"",2,inEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",0,removeEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
siddhiAppRuntime.shutdown();
}",0.9942096120440068
28719,"@Test public void testPatternPartitionQuery7() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"";
  String partitionStart=""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String partitionEnd=""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(streams + partitionStart + query+ partitionEnd);
  siddhiAppRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
        if (event.isExpired()) {
          removeEventCount.incrementAndGet();
        }
 else {
          inEventCount.incrementAndGet();
switch (inEventCount.get()) {
case 1:
            AssertJUnit.assertArrayEquals(new Object[]{55.6f,57.6f},event.getData());
          break;
case 2:
        AssertJUnit.assertArrayEquals(new Object[]{54f,53.6f},event.getData());
      break;
default :
    AssertJUnit.assertSame(2,inEventCount.get());
}
}
eventArrived=true;
}
}
}
);
InputHandler stream1=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
siddhiAppRuntime.start();
stream1.send(new Object[]{""String_Node_Str"",55.6f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",57.6f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",54f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",53.6f,100});
SiddhiTestHelper.waitForEvents(100,2,inEventCount,60000);
AssertJUnit.assertEquals(""String_Node_Str"",2,inEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",0,removeEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
siddhiAppRuntime.shutdown();
}","@Test public void testPatternPartitionQuery7() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String partitionStart=""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String partitionEnd=""String_Node_Str"";
  SiddhiAppRuntime siddhiAppRuntime=siddhiManager.createSiddhiAppRuntime(streams + partitionStart + query+ partitionEnd);
  siddhiAppRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
        if (event.isExpired()) {
          removeEventCount.incrementAndGet();
        }
 else {
          inEventCount.incrementAndGet();
switch (inEventCount.get()) {
case 1:
            AssertJUnit.assertArrayEquals(new Object[]{55.6f,57.6f},event.getData());
          break;
case 2:
        AssertJUnit.assertArrayEquals(new Object[]{54f,53.6f},event.getData());
      break;
default :
    AssertJUnit.assertSame(2,inEventCount.get());
}
}
eventArrived=true;
}
}
}
);
InputHandler stream1=siddhiAppRuntime.getInputHandler(""String_Node_Str"");
siddhiAppRuntime.start();
stream1.send(new Object[]{""String_Node_Str"",55.6f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",57.6f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",54f,100});
Thread.sleep(100);
stream1.send(new Object[]{""String_Node_Str"",53.6f,100});
SiddhiTestHelper.waitForEvents(100,2,inEventCount,60000);
AssertJUnit.assertEquals(""String_Node_Str"",2,inEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",0,removeEventCount.get());
AssertJUnit.assertEquals(""String_Node_Str"",true,eventArrived);
siddhiAppRuntime.shutdown();
}",0.994700582935877
28720,"/** 
 * To enable and disable Siddhi App statistics on runtime.
 */
public void enableStats(boolean statsEnabled){
  siddhiAppContext.setStatsEnabled(statsEnabled);
  if (running && siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().startReporting();
      log.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
    }
 else {
      siddhiAppContext.getStatisticsManager().stopReporting();
      log.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
    }
  }
 else {
    log.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
  }
}","/** 
 * To enable and disable Siddhi App statistics on runtime.
 * @param statsEnabled whether statistics is enabled or not
 */
public void enableStats(boolean statsEnabled){
  siddhiAppContext.setStatsEnabled(statsEnabled);
  if (running && siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().startReporting();
      log.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
    }
 else {
      siddhiAppContext.getStatisticsManager().stopReporting();
      log.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
    }
  }
 else {
    log.debug(""String_Node_Str"" + getName() + ""String_Node_Str"");
  }
}",0.9554896142433236
28721,"/** 
 * Add the event into the   {@link Window}
 * @param complexEventChunk the event to add
 * @param noOfEvents
 */
@Override public void send(ComplexEventChunk complexEventChunk,int noOfEvents){
  if (getSiddhiDebugger() != null) {
    getSiddhiDebugger().checkBreakPoint(getQueryName(),SiddhiDebugger.QueryTerminal.OUT,complexEventChunk.getFirst());
  }
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    if (complexEvent.getType() == ComplexEvent.Type.EXPIRED) {
      complexEvent.setType(ComplexEvent.Type.CURRENT);
    }
  }
  window.add(complexEventChunk);
}","/** 
 * Add the event into the   {@link Window}
 * @param complexEventChunk the event to add
 * @param noOfEvents number of events
 */
@Override public void send(ComplexEventChunk complexEventChunk,int noOfEvents){
  if (getSiddhiDebugger() != null) {
    getSiddhiDebugger().checkBreakPoint(getQueryName(),SiddhiDebugger.QueryTerminal.OUT,complexEventChunk.getFirst());
  }
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    if (complexEvent.getType() == ComplexEvent.Type.EXPIRED) {
      complexEvent.setType(ComplexEvent.Type.CURRENT);
    }
  }
  window.add(complexEventChunk);
}",0.9869931140015302
28722,"/** 
 * To find events from the processor event pool, that the matches the matchingEvent based on finder logic and return them based on the defined selection.
 * @param matchingEvent     the event to be matched with the events at the processor
 * @param compiledCondition the execution element responsible for matching the corresponding events that matchesthe matchingEvent based on pool of events at Processor
 * @param compiledSelection the execution element responsible for transforming the corresponding events to thegiven selection
 * @return the matched events
 */
StreamEvent query(StateEvent matchingEvent,CompiledCondition compiledCondition,CompiledSelection compiledSelection) throws ConnectionUnavailableException ;","/** 
 * To find events from the processor event pool, that the matches the matchingEvent based on finder logic and return them based on the defined selection.
 * @param matchingEvent     the event to be matched with the events at the processor
 * @param compiledCondition the execution element responsible for matching the corresponding events that matchesthe matchingEvent based on pool of events at Processor
 * @param compiledSelection the execution element responsible for transforming the corresponding events to thegiven selection
 * @throws ConnectionUnavailableException
 * @return the matched events
 */
StreamEvent query(StateEvent matchingEvent,CompiledCondition compiledCondition,CompiledSelection compiledSelection) throws ConnectionUnavailableException ;",0.9718875502008032
28723,"/** 
 * Set next executor element in execution chain
 */
void setNextExecutor(Executor executor);","/** 
 * Set next executor element in execution chain
 * @param executor Event executor for incremental execution
 */
void setNextExecutor(Executor executor);",0.7637795275590551
28724,"/** 
 * Method to map the incoming event and as pass that via inputEventHandler to process further.
 * @param eventObject       Incoming event Object
 * @param inputEventHandler Handler to pass the converted Siddhi Event for processing
 * @throws InterruptedException
 */
protected abstract void mapAndProcess(Object eventObject,InputEventHandler inputEventHandler) throws InterruptedException ;","/** 
 * Method to map the incoming event and as pass that via inputEventHandler to process further.
 * @param eventObject       Incoming event Object
 * @param inputEventHandler Handler to pass the converted Siddhi Event for processing
 * @throws InterruptedException Throws InterruptedException
 */
protected abstract void mapAndProcess(Object eventObject,InputEventHandler inputEventHandler) throws InterruptedException ;",0.9657701711491442
28725,"/** 
 * This is method contains the additional parameters which require to initialize distributed transport
 * @param streamDefinition         Definition of the stream this sink instance is publishing to
 * @param type                     Type of the transport that (e.g., TCP, JMS)
 * @param transportOptionHolder    Option holder for carrying options for the transport
 * @param sinkConfigReader         This hold the {@link Sink} extensions configuration reader for the sink
 * @param sinkMapper               Hold the mapper that's used in this sink
 * @param mapType                  Type of the mapper
 * @param mapOptionHolder          Options of the mapper
 * @param payloadElementList       The template list of the payload messages
 * @param mapperConfigReader       This hold the {@link Sink} extensions configuration reader for the mapper
 * @param siddhiAppContext         The siddhi app context
 * @param destinationOptionHolders List of option holders containing the options mentioned in @destination
 * @param sinkAnnotation           The annotation of the Sink
 * @param strategy                 Publishing strategy to be used by the distributed transport
 * @param supportedDynamicOptions  List of supported dynamic options
 */
public void init(StreamDefinition streamDefinition,String type,OptionHolder transportOptionHolder,ConfigReader sinkConfigReader,SinkMapper sinkMapper,String mapType,OptionHolder mapOptionHolder,SinkHandler sinkHandler,List<Element> payloadElementList,ConfigReader mapperConfigReader,SiddhiAppContext siddhiAppContext,List<OptionHolder> destinationOptionHolders,Annotation sinkAnnotation,DistributionStrategy strategy,String[] supportedDynamicOptions){
  this.strategy=strategy;
  this.supportedDynamicOptions=supportedDynamicOptions;
  init(streamDefinition,type,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,sinkHandler,payloadElementList,mapperConfigReader,siddhiAppContext);
  initTransport(sinkOptionHolder,destinationOptionHolders,sinkAnnotation,sinkConfigReader,siddhiAppContext);
}","/** 
 * This is method contains the additional parameters which require to initialize distributed transport
 * @param streamDefinition         Definition of the stream this sink instance is publishing to
 * @param type                     Type of the transport that (e.g., TCP, JMS)
 * @param transportOptionHolder    Option holder for carrying options for the transport
 * @param sinkConfigReader         This hold the {@link Sink} extensions configuration reader for the sink
 * @param sinkMapper               Hold the mapper that's used in this sink
 * @param mapType                  Type of the mapper
 * @param mapOptionHolder          Options of the mapper
 * @param sinkHandler              Sink handler to do optional processing
 * @param payloadElementList       The template list of the payload messages
 * @param mapperConfigReader       This hold the {@link Sink} extensions configuration reader for the mapper
 * @param siddhiAppContext         The siddhi app context
 * @param destinationOptionHolders List of option holders containing the options mentioned in @destination
 * @param sinkAnnotation           The annotation of the Sink
 * @param strategy                 Publishing strategy to be used by the distributed transport
 * @param supportedDynamicOptions  List of supported dynamic options
 */
public void init(StreamDefinition streamDefinition,String type,OptionHolder transportOptionHolder,ConfigReader sinkConfigReader,SinkMapper sinkMapper,String mapType,OptionHolder mapOptionHolder,SinkHandler sinkHandler,List<Element> payloadElementList,ConfigReader mapperConfigReader,SiddhiAppContext siddhiAppContext,List<OptionHolder> destinationOptionHolders,Annotation sinkAnnotation,DistributionStrategy strategy,String[] supportedDynamicOptions){
  this.strategy=strategy;
  this.supportedDynamicOptions=supportedDynamicOptions;
  init(streamDefinition,type,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,sinkHandler,payloadElementList,mapperConfigReader,siddhiAppContext);
  initTransport(sinkOptionHolder,destinationOptionHolders,sinkAnnotation,sinkConfigReader,siddhiAppContext);
}",0.9823725583611244
28726,"/** 
 * Builds the ""compiled"" set clause of an update query. Here, all the pre-processing that can be done prior to receiving the update event is done, so that such pre-processing work will not be done at each update-event-arrival.
 * @param updateSet                   the set of assignment expressions, each containing the table column to beupdated and the expression to be assigned.
 * @param matchingMetaInfoHolder      the meta structure of the incoming matchingEvent
 * @param siddhiAppContext            current siddhi app context
 * @param variableExpressionExecutors the list of variable ExpressionExecutors already created
 * @param tableMap                    map of event tables
 * @param queryName                   query name to which the update statement belongs.
 * @return
 */
public abstract CompiledUpdateSet compileUpdateSet(UpdateSet updateSet,MatchingMetaInfoHolder matchingMetaInfoHolder,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName);","/** 
 * Builds the ""compiled"" set clause of an update query. Here, all the pre-processing that can be done prior to receiving the update event is done, so that such pre-processing work will not be done at each update-event-arrival.
 * @param updateSet                   the set of assignment expressions, each containing the table column to beupdated and the expression to be assigned.
 * @param matchingMetaInfoHolder      the meta structure of the incoming matchingEvent
 * @param siddhiAppContext            current siddhi app context
 * @param variableExpressionExecutors the list of variable ExpressionExecutors already created
 * @param tableMap                    map of event tables
 * @param queryName                   query name to which the update statement belongs.
 * @return CompiledUpdateSet
 */
public abstract CompiledUpdateSet compileUpdateSet(UpdateSet updateSet,MatchingMetaInfoHolder matchingMetaInfoHolder,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName);",0.991509433962264
28727,"/** 
 * Query records matching the compiled condition and selection
 * @param parameterMap      map of matching StreamVariable Ids and their valuescorresponding to the compiled condition & selection
 * @param compiledCondition the compiledCondition against which records should be matched
 * @param compiledSelection the compiledSelection that maps records based to requested format
 * @return RecordIterator of matching records
 */
protected abstract RecordIterator<Object[]> query(Map<String,Object> parameterMap,CompiledCondition compiledCondition,CompiledSelection compiledSelection) throws ConnectionUnavailableException ;","/** 
 * Query records matching the compiled condition and selection
 * @param parameterMap      map of matching StreamVariable Ids and their valuescorresponding to the compiled condition and selection
 * @param compiledCondition the compiledCondition against which records should be matched
 * @param compiledSelection the compiledSelection that maps records based to requested format
 * @throws ConnectionUnavailableException
 * @return RecordIterator of matching records
 */
protected abstract RecordIterator<Object[]> query(Map<String,Object> parameterMap,CompiledCondition compiledCondition,CompiledSelection compiledSelection) throws ConnectionUnavailableException ;",0.9645608628659476
28728,"/** 
 * Add records to the Table
 * @param records records that need to be added to the table, each Object[] represent a record and it will matchthe attributes of the Table Definition.
 */
protected abstract void add(List<Object[]> records) throws ConnectionUnavailableException ;","/** 
 * Add records to the Table
 * @param records records that need to be added to the table, each Object[] represent a record and it will matchthe attributes of the Table Definition.
 * @throws ConnectionUnavailableException
 */
protected abstract void add(List<Object[]> records) throws ConnectionUnavailableException ;",0.9302325581395348
28729,"/** 
 * Update all matching records
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to the
 */
protected abstract void update(CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,Map<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps) throws ConnectionUnavailableException ;","/** 
 * Update all matching records
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to the
 * @throws ConnectionUnavailableException
 */
protected abstract void update(CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,Map<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps) throws ConnectionUnavailableException ;",0.9742962056303548
28730,"/** 
 * Delete all matching records
 * @param deleteConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition            the compiledCondition against which records should be matched for deletion
 */
protected abstract void delete(List<Map<String,Object>> deleteConditionParameterMaps,CompiledCondition compiledCondition) throws ConnectionUnavailableException ;","/** 
 * Delete all matching records
 * @param deleteConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition            the compiledCondition against which records should be matched for deletion
 * @throws ConnectionUnavailableException
 */
protected abstract void delete(List<Map<String,Object>> deleteConditionParameterMaps,CompiledCondition compiledCondition) throws ConnectionUnavailableException ;",0.9549356223175964
28731,"/** 
 * Check if matching record exist
 * @param containsConditionParameterMap map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition             the compiledCondition against which records should be matched
 * @return if matching record found or not
 */
protected abstract boolean contains(Map<String,Object> containsConditionParameterMap,CompiledCondition compiledCondition) throws ConnectionUnavailableException ;","/** 
 * Check if matching record exist
 * @param containsConditionParameterMap map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition             the compiledCondition against which records should be matched
 * @throws ConnectionUnavailableException
 * @return if matching record found or not
 */
protected abstract boolean contains(Map<String,Object> containsConditionParameterMap,CompiledCondition compiledCondition) throws ConnectionUnavailableException ;",0.9580838323353292
28732,"/** 
 * Find records matching the compiled condition
 * @param findConditionParameterMap map of matching StreamVariable Ids and their valuescorresponding to the compiled condition
 * @param compiledCondition         the compiledCondition against which records should be matched
 * @return RecordIterator of matching records
 */
protected abstract RecordIterator<Object[]> find(Map<String,Object> findConditionParameterMap,CompiledCondition compiledCondition) throws ConnectionUnavailableException ;","/** 
 * Find records matching the compiled condition
 * @param findConditionParameterMap map of matching StreamVariable Ids and their valuescorresponding to the compiled condition
 * @param compiledCondition         the compiledCondition against which records should be matched
 * @throws ConnectionUnavailableException
 * @return RecordIterator of matching records
 */
protected abstract RecordIterator<Object[]> find(Map<String,Object> findConditionParameterMap,CompiledCondition compiledCondition) throws ConnectionUnavailableException ;",0.9595375722543352
28733,"/** 
 * Try updating the records if they exist else add the records
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to theupdate set
 * @param addingRecords                the values for adding new records if the update condition did not match
 */
protected abstract void updateOrAdd(CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,Map<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps,List<Object[]> addingRecords) throws ConnectionUnavailableException ;","/** 
 * Try updating the records if they exist else add the records
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to theupdate set
 * @param addingRecords                the values for adding new records if the update condition did not match
 * @throws ConnectionUnavailableException
 */
protected abstract void updateOrAdd(CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,Map<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps,List<Object[]> addingRecords) throws ConnectionUnavailableException ;",0.9790836653386454
28734,"/** 
 * @param timestamp                  the timestamp of the last event in the event chunk
 * @param records                    records that need to be added to the table, each Object[] represent arecord and it will match the attributes of the Table Definition.
 * @param recordTableHandlerCallback call back to do operations on the record table
 */
public abstract void add(long timestamp,List<Object[]> records,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                  the timestamp of the last event in the event chunk
 * @param records                    records that need to be added to the table, each Object[] represent arecord and it will match the attributes of the Table Definition.
 * @param recordTableHandlerCallback call back to do operations on the record table
 * @throws ConnectionUnavailableException
 */
public abstract void add(long timestamp,List<Object[]> records,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.960377358490566
28735,"/** 
 * @param timestamp                     the timestamp of the event used to match from record table
 * @param containsConditionParameterMap map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition             the compiledCondition against which records should be matched
 * @param recordTableHandlerCallback    call back to do operations on the record table
 * @return if matching record found or not
 */
public abstract boolean contains(long timestamp,Map<String,Object> containsConditionParameterMap,CompiledCondition compiledCondition,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                     the timestamp of the event used to match from record table
 * @param containsConditionParameterMap map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition             the compiledCondition against which records should be matched
 * @param recordTableHandlerCallback    call back to do operations on the record table
 * @throws ConnectionUnavailableException
 * @return if matching record found or not
 */
public abstract boolean contains(long timestamp,Map<String,Object> containsConditionParameterMap,CompiledCondition compiledCondition,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.9707927677329624
28736,"/** 
 * @param timestamp                  the timestamp of the event used to match from record table
 * @param findConditionParameterMap  map of matching StreamVariable Ids and their valuescorresponding to the compiled condition
 * @param compiledCondition          the compiledCondition against which records should be matched
 * @param recordTableHandlerCallback call back to do operations on the record table
 * @return RecordIterator of matching records
 */
public abstract Iterator<Object[]> find(long timestamp,Map<String,Object> findConditionParameterMap,CompiledCondition compiledCondition,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                  the timestamp of the event used to match from record table
 * @param findConditionParameterMap  map of matching StreamVariable Ids and their valuescorresponding to the compiled condition
 * @param compiledCondition          the compiledCondition against which records should be matched
 * @param recordTableHandlerCallback call back to do operations on the record table
 * @throws ConnectionUnavailableException
 * @return RecordIterator of matching records
 */
public abstract Iterator<Object[]> find(long timestamp,Map<String,Object> findConditionParameterMap,CompiledCondition compiledCondition,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.97054698457223
28737,"/** 
 * @param timestamp                  the timestamp of the event used to match from record table
 * @param parameterMap               map of matching StreamVariable Ids and their valuescorresponding to the compiled condition and selection
 * @param compiledCondition          the compiledCondition against which records should be matched
 * @param compiledSelection          the compiledSelection which maps the events based on selection
 * @param recordTableHandlerCallback call back to do operations on the record table
 * @return RecordIterator of matching records
 */
public abstract Iterator<Object[]> query(long timestamp,Map<String,Object> parameterMap,CompiledCondition compiledCondition,CompiledSelection compiledSelection,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                  the timestamp of the event used to match from record table
 * @param parameterMap               map of matching StreamVariable Ids and their valuescorresponding to the compiled condition and selection
 * @param compiledCondition          the compiledCondition against which records should be matched
 * @param compiledSelection          the compiledSelection which maps the events based on selection
 * @param recordTableHandlerCallback call back to do operations on the record table
 * @throws ConnectionUnavailableException
 * @return RecordIterator of matching records
 */
public abstract Iterator<Object[]> query(long timestamp,Map<String,Object> parameterMap,CompiledCondition compiledCondition,CompiledSelection compiledSelection,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.9753231492361928
28738,"/** 
 * @param timestamp                    the timestamp of the last event in the event chunk
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to the
 * @param recordTableHandlerCallback   call back to do operations on the record table
 */
public abstract void update(long timestamp,CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,LinkedHashMap<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                    the timestamp of the last event in the event chunk
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to the
 * @param recordTableHandlerCallback   call back to do operations on the record table
 * @throws ConnectionUnavailableException
 */
public abstract void update(long timestamp,CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,LinkedHashMap<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.9797687861271676
28739,"/** 
 * @param timestamp                    the timestamp of the last event in the event chunk
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to theupdate set
 * @param addingRecords                the values for adding new records if the update condition did not match
 * @param recordTableHandlerCallback   call back to do operations on the record table
 */
public abstract void updateOrAdd(long timestamp,CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,LinkedHashMap<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps,List<Object[]> addingRecords,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                    the timestamp of the last event in the event chunk
 * @param updateCondition              the compiledCondition against which records should be matched for update
 * @param updateConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition based on which the records will be updated
 * @param updateSetExpressions         the set of updates mappings and related complied expressions
 * @param updateSetParameterMaps       map of matching StreamVariable Ids and their values corresponding to theupdate set
 * @param addingRecords                the values for adding new records if the update condition did not match
 * @param recordTableHandlerCallback   call back to do operations on the record table
 * @throws ConnectionUnavailableException
 */
public abstract void updateOrAdd(long timestamp,CompiledCondition updateCondition,List<Map<String,Object>> updateConditionParameterMaps,LinkedHashMap<String,CompiledExpression> updateSetExpressions,List<Map<String,Object>> updateSetParameterMaps,List<Object[]> addingRecords,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.9823973176865046
28740,"/** 
 * @param timestamp                    the timestamp of the last event in the event chunk
 * @param deleteConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition            the compiledCondition against which records should be matched for deletion
 * @param recordTableHandlerCallback   call back to do operations on the record table
 */
public abstract void delete(long timestamp,List<Map<String,Object>> deleteConditionParameterMaps,CompiledCondition compiledCondition,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;","/** 
 * @param timestamp                    the timestamp of the last event in the event chunk
 * @param deleteConditionParameterMaps map of matching StreamVariable Ids and their values corresponding to thecompiled condition
 * @param compiledCondition            the compiledCondition against which records should be matched for deletion
 * @param recordTableHandlerCallback   call back to do operations on the record table
 * @throws ConnectionUnavailableException
 */
public abstract void delete(long timestamp,List<Map<String,Object>> deleteConditionParameterMaps,CompiledCondition compiledCondition,RecordTableHandlerCallback recordTableHandlerCallback) throws ConnectionUnavailableException ;",0.9689807976366324
28741,"/** 
 * Parse an InputStream returning corresponding StreamRuntime
 * @param inputStream                input stream to be parsed
 * @param siddhiAppContext           associated siddhi siddhiAppContext
 * @param streamDefinitionMap        map containing user given stream definitions
 * @param tableDefinitionMap         table definition map
 * @param windowDefinitionMap        window definition map
 * @param tableMap                   Table Map
 * @param windowMap                  event window map
 * @param aggregationMap             aggregator map
 * @param executors                  List to hold VariableExpressionExecutors to update after query parsing
 * @param latencyTracker             latency tracker
 * @param outputExpectsExpiredEvents is output expects ExpiredEvents
 * @param queryName                  query name of input stream belongs to.
 * @return StreamRuntime
 */
public static StreamRuntime parse(InputStream inputStream,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,AggregationRuntime> aggregationMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents,String queryName){
  if (inputStream instanceof BasicSingleInputStream || inputStream instanceof SingleInputStream) {
    SingleInputStream singleInputStream=(SingleInputStream)inputStream;
    Window window=windowMap.get(singleInputStream.getStreamId());
    boolean batchProcessingAllowed=window != null;
    ProcessStreamReceiver processStreamReceiver=new ProcessStreamReceiver(singleInputStream.getStreamId(),latencyTracker,queryName,siddhiAppContext);
    processStreamReceiver.setBatchProcessingAllowed(batchProcessingAllowed);
    return SingleInputStreamParser.parseInputStream((SingleInputStream)inputStream,siddhiAppContext,executors,streamDefinitionMap,null,windowDefinitionMap,aggregationDefinitionMap,tableMap,new MetaStreamEvent(),processStreamReceiver,true,outputExpectsExpiredEvents,queryName);
  }
 else   if (inputStream instanceof JoinInputStream) {
    return JoinInputStreamParser.parseInputStream(((JoinInputStream)inputStream),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,executors,latencyTracker,outputExpectsExpiredEvents,queryName);
  }
 else   if (inputStream instanceof StateInputStream) {
    MetaStateEvent metaStateEvent=new MetaStateEvent(inputStream.getAllStreamIds().size());
    return StateInputStreamParser.parseInputStream(((StateInputStream)inputStream),siddhiAppContext,metaStateEvent,streamDefinitionMap,null,null,aggregationDefinitionMap,tableMap,executors,latencyTracker,queryName);
  }
 else {
    throw new OperationNotSupportedException();
  }
}","/** 
 * Parse an InputStream returning corresponding StreamRuntime
 * @param inputStream                input stream to be parsed
 * @param siddhiAppContext           associated siddhi siddhiAppContext
 * @param streamDefinitionMap        map containing user given stream definitions
 * @param tableDefinitionMap         table definition map
 * @param windowDefinitionMap        window definition map
 * @param aggregationDefinitionMap   aggregation definition map
 * @param tableMap                   Table Map
 * @param windowMap                  event window map
 * @param aggregationMap             aggregator map
 * @param executors                  List to hold VariableExpressionExecutors to update after query parsing
 * @param latencyTracker             latency tracker
 * @param outputExpectsExpiredEvents is output expects ExpiredEvents
 * @param queryName                  query name of input stream belongs to.
 * @return StreamRuntime
 */
public static StreamRuntime parse(InputStream inputStream,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,AggregationRuntime> aggregationMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents,String queryName){
  if (inputStream instanceof BasicSingleInputStream || inputStream instanceof SingleInputStream) {
    SingleInputStream singleInputStream=(SingleInputStream)inputStream;
    Window window=windowMap.get(singleInputStream.getStreamId());
    boolean batchProcessingAllowed=window != null;
    ProcessStreamReceiver processStreamReceiver=new ProcessStreamReceiver(singleInputStream.getStreamId(),latencyTracker,queryName,siddhiAppContext);
    processStreamReceiver.setBatchProcessingAllowed(batchProcessingAllowed);
    return SingleInputStreamParser.parseInputStream((SingleInputStream)inputStream,siddhiAppContext,executors,streamDefinitionMap,null,windowDefinitionMap,aggregationDefinitionMap,tableMap,new MetaStreamEvent(),processStreamReceiver,true,outputExpectsExpiredEvents,queryName);
  }
 else   if (inputStream instanceof JoinInputStream) {
    return JoinInputStreamParser.parseInputStream(((JoinInputStream)inputStream),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,executors,latencyTracker,outputExpectsExpiredEvents,queryName);
  }
 else   if (inputStream instanceof StateInputStream) {
    MetaStateEvent metaStateEvent=new MetaStateEvent(inputStream.getAllStreamIds().size());
    return StateInputStreamParser.parseInputStream(((StateInputStream)inputStream),siddhiAppContext,metaStateEvent,streamDefinitionMap,null,null,aggregationDefinitionMap,tableMap,executors,latencyTracker,queryName);
  }
 else {
    throw new OperationNotSupportedException();
  }
}",0.9893758300132802
28742,"/** 
 * Parse Selector portion of a query and return corresponding QuerySelector.
 * @param selector                    selector to be parsed
 * @param outputStream                output stream
 * @param siddhiAppContext            query to be parsed
 * @param metaComplexEvent            Meta event used to collect execution info of stream associated with query
 * @param tableMap                    Table Map
 * @param variableExpressionExecutors variable expression executors
 * @param queryName                   query name of selector belongs to.
 * @return QuerySelector
 */
public static QuerySelector parse(Selector selector,OutputStream outputStream,SiddhiAppContext siddhiAppContext,MetaComplexEvent metaComplexEvent,Map<String,Table> tableMap,List<VariableExpressionExecutor> variableExpressionExecutors,String queryName,int metaPosition){
  boolean currentOn=false;
  boolean expiredOn=false;
  String id=null;
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.CURRENT_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    currentOn=true;
  }
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.EXPIRED_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    expiredOn=true;
  }
  id=outputStream.getId();
  containsAggregatorThreadLocal.remove();
  QuerySelector querySelector=new QuerySelector(id,selector,currentOn,expiredOn,siddhiAppContext);
  List<AttributeProcessor> attributeProcessors=getAttributeProcessors(selector,id,siddhiAppContext,metaComplexEvent,tableMap,variableExpressionExecutors,outputStream,queryName,metaPosition);
  querySelector.setAttributeProcessorList(attributeProcessors,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  ConditionExpressionExecutor havingCondition=generateHavingExecutor(selector.getHavingExpression(),metaComplexEvent,siddhiAppContext,tableMap,variableExpressionExecutors,queryName);
  querySelector.setHavingConditionExecutor(havingCondition,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  if (!selector.getGroupByList().isEmpty()) {
    querySelector.setGroupByKeyGenerator(new GroupByKeyGenerator(selector.getGroupByList(),metaComplexEvent,SiddhiConstants.UNKNOWN_STATE,null,variableExpressionExecutors,siddhiAppContext,queryName));
  }
  if (!selector.getOrderByList().isEmpty()) {
    querySelector.setOrderByEventComparator(new OrderByEventComparator(selector.getOrderByList(),metaComplexEvent,SiddhiConstants.HAVING_STATE,null,variableExpressionExecutors,siddhiAppContext,queryName));
  }
  if (selector.getLimit() != null) {
    ExpressionExecutor expressionExecutor=ExpressionParser.parseExpression((Expression)selector.getLimit(),metaComplexEvent,SiddhiConstants.HAVING_STATE,tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
    containsAggregatorThreadLocal.remove();
    querySelector.setLimit(((Number)(((ConstantExpressionExecutor)expressionExecutor).getValue())).longValue());
  }
  return querySelector;
}","/** 
 * Parse Selector portion of a query and return corresponding QuerySelector.
 * @param selector                    selector to be parsed
 * @param outputStream                output stream
 * @param siddhiAppContext            query to be parsed
 * @param metaComplexEvent            Meta event used to collect execution info of stream associated with query
 * @param tableMap                    Table Map
 * @param variableExpressionExecutors variable expression executors
 * @param queryName                   query name of selector belongs to.
 * @param metaPosition                helps to identify the meta position of aggregates
 * @return QuerySelector
 */
public static QuerySelector parse(Selector selector,OutputStream outputStream,SiddhiAppContext siddhiAppContext,MetaComplexEvent metaComplexEvent,Map<String,Table> tableMap,List<VariableExpressionExecutor> variableExpressionExecutors,String queryName,int metaPosition){
  boolean currentOn=false;
  boolean expiredOn=false;
  String id=null;
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.CURRENT_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    currentOn=true;
  }
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.EXPIRED_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    expiredOn=true;
  }
  id=outputStream.getId();
  containsAggregatorThreadLocal.remove();
  QuerySelector querySelector=new QuerySelector(id,selector,currentOn,expiredOn,siddhiAppContext);
  List<AttributeProcessor> attributeProcessors=getAttributeProcessors(selector,id,siddhiAppContext,metaComplexEvent,tableMap,variableExpressionExecutors,outputStream,queryName,metaPosition);
  querySelector.setAttributeProcessorList(attributeProcessors,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  ConditionExpressionExecutor havingCondition=generateHavingExecutor(selector.getHavingExpression(),metaComplexEvent,siddhiAppContext,tableMap,variableExpressionExecutors,queryName);
  querySelector.setHavingConditionExecutor(havingCondition,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  if (!selector.getGroupByList().isEmpty()) {
    querySelector.setGroupByKeyGenerator(new GroupByKeyGenerator(selector.getGroupByList(),metaComplexEvent,SiddhiConstants.UNKNOWN_STATE,null,variableExpressionExecutors,siddhiAppContext,queryName));
  }
  if (!selector.getOrderByList().isEmpty()) {
    querySelector.setOrderByEventComparator(new OrderByEventComparator(selector.getOrderByList(),metaComplexEvent,SiddhiConstants.HAVING_STATE,null,variableExpressionExecutors,siddhiAppContext,queryName));
  }
  if (selector.getLimit() != null) {
    ExpressionExecutor expressionExecutor=ExpressionParser.parseExpression((Expression)selector.getLimit(),metaComplexEvent,SiddhiConstants.HAVING_STATE,tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
    containsAggregatorThreadLocal.remove();
    querySelector.setLimit(((Number)(((ConstantExpressionExecutor)expressionExecutor).getValue())).longValue());
  }
  return querySelector;
}",0.9861939127706308
28743,"/** 
 * Parse an SiddhiApp returning SiddhiAppRuntime
 * @param siddhiApp       plan to be parsed
 * @param siddhiAppString
 * @param siddhiContext   SiddhiContext  @return SiddhiAppRuntime
 */
public static SiddhiAppRuntimeBuilder parse(SiddhiApp siddhiApp,String siddhiAppString,SiddhiContext siddhiContext){
  SiddhiAppContext siddhiAppContext=new SiddhiAppContext();
  siddhiAppContext.setSiddhiContext(siddhiContext);
  siddhiAppContext.setSiddhiAppString(siddhiAppString);
  try {
    Element element=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_NAME,null,siddhiApp.getAnnotations());
    if (element != null) {
      siddhiAppContext.setName(element.getValue());
    }
 else {
      siddhiAppContext.setName(UUID.randomUUID().toString());
    }
    Annotation annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_ENFORCE_ORDER,siddhiApp.getAnnotations());
    if (annotation != null) {
      siddhiAppContext.setEnforceOrder(true);
    }
    annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_ASYNC,siddhiApp.getAnnotations());
    if (annotation != null) {
      throw new SiddhiAppCreationException(""String_Node_Str"" + ""String_Node_Str"",annotation.getQueryContextStartIndex(),annotation.getQueryContextEndIndex());
    }
    annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_STATISTICS,siddhiApp.getAnnotations());
    List<Element> statisticsElements=new ArrayList<>();
    if (annotation != null) {
      statisticsElements=annotation.getElements();
    }
    if (siddhiContext.getStatisticsConfiguration() != null) {
      siddhiAppContext.setStatisticsManager(siddhiContext.getStatisticsConfiguration().getFactory().createStatisticsManager(siddhiContext.getStatisticsConfiguration().getMetricPrefix(),siddhiAppContext.getName(),statisticsElements));
    }
    Element statStateEnableElement=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_STATISTICS,SiddhiConstants.ANNOTATION_ELEMENT_ENABLE,siddhiApp.getAnnotations());
    if (statStateEnableElement != null && Boolean.valueOf(statStateEnableElement.getValue())) {
      siddhiAppContext.setStatsEnabled(true);
    }
 else {
      Element statStateElement=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_STATISTICS,null,siddhiApp.getAnnotations());
      if (annotation != null && (statStateElement == null || Boolean.valueOf(statStateElement.getValue()))) {
        siddhiAppContext.setStatsEnabled(true);
      }
    }
    Element statStateIncludElement=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_STATISTICS,SiddhiConstants.ANNOTATION_ELEMENT_INCLUDE,siddhiApp.getAnnotations());
    siddhiAppContext.setIncludedMetrics(generateIncludedMetrics(statStateIncludElement));
    siddhiAppContext.setThreadBarrier(new ThreadBarrier());
    siddhiAppContext.setExecutorService(Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"").build()));
    siddhiAppContext.setScheduledExecutorService(Executors.newScheduledThreadPool(5,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"").build()));
    annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_PLAYBACK,siddhiApp.getAnnotations());
    if (annotation != null) {
      String idleTime=null;
      String increment=null;
      EventTimeBasedMillisTimestampGenerator timestampGenerator=new EventTimeBasedMillisTimestampGenerator(siddhiAppContext.getScheduledExecutorService());
      for (      Element e : annotation.getElements()) {
        if (SiddhiConstants.ANNOTATION_ELEMENT_IDLE_TIME.equalsIgnoreCase(e.getKey())) {
          idleTime=e.getValue();
        }
 else         if (SiddhiConstants.ANNOTATION_ELEMENT_INCREMENT.equalsIgnoreCase(e.getKey())) {
          increment=e.getValue();
        }
 else {
          throw new SiddhiAppValidationException(""String_Node_Str"" + ""String_Node_Str"" + e.getKey());
        }
      }
      if (idleTime != null && increment == null) {
        throw new SiddhiAppValidationException(""String_Node_Str"" + ""String_Node_Str"");
      }
 else       if (idleTime == null && increment != null) {
        throw new SiddhiAppValidationException(""String_Node_Str"" + ""String_Node_Str"");
      }
 else       if (idleTime != null) {
        try {
          timestampGenerator.setIdleTime(SiddhiCompiler.parseTimeConstantDefinition(idleTime).value());
        }
 catch (        SiddhiParserException ex) {
          throw new SiddhiParserException(""String_Node_Str"" + idleTime + ""String_Node_Str""+ ""String_Node_Str"",ex);
        }
        try {
          timestampGenerator.setIncrementInMilliseconds(SiddhiCompiler.parseTimeConstantDefinition(increment).value());
        }
 catch (        SiddhiParserException ex) {
          throw new SiddhiParserException(""String_Node_Str"" + increment + ""String_Node_Str""+ ""String_Node_Str"",ex);
        }
      }
      siddhiAppContext.setTimestampGenerator(timestampGenerator);
      siddhiAppContext.setPlayback(true);
    }
 else {
      siddhiAppContext.setTimestampGenerator(new SystemCurrentTimeMillisTimestampGenerator());
    }
    siddhiAppContext.setSnapshotService(new SnapshotService(siddhiAppContext));
    siddhiAppContext.setPersistenceService(new PersistenceService(siddhiAppContext));
    siddhiAppContext.setElementIdGenerator(new ElementIdGenerator(siddhiAppContext.getName()));
  }
 catch (  DuplicateAnnotationException e) {
    throw new DuplicateAnnotationException(e.getMessageWithOutContext() + ""String_Node_Str"" + siddhiApp.toString(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
  }
  SiddhiAppRuntimeBuilder siddhiAppRuntimeBuilder=new SiddhiAppRuntimeBuilder(siddhiAppContext);
  defineStreamDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getStreamDefinitionMap(),siddhiAppContext);
  defineTableDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getTableDefinitionMap(),siddhiAppContext);
  defineWindowDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getWindowDefinitionMap(),siddhiAppContext);
  defineFunctionDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getFunctionDefinitionMap(),siddhiAppContext);
  defineAggregationDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getAggregationDefinitionMap(),siddhiAppContext);
  for (  Window window : siddhiAppRuntimeBuilder.getWindowMap().values()) {
    try {
      window.init(siddhiAppRuntimeBuilder.getTableMap(),siddhiAppRuntimeBuilder.getWindowMap(),window.getWindowDefinition().getId());
    }
 catch (    Throwable t) {
      ExceptionUtil.populateQueryContext(t,window.getWindowDefinition(),siddhiAppContext);
      throw t;
    }
  }
  int queryIndex=1;
  for (  ExecutionElement executionElement : siddhiApp.getExecutionElementList()) {
    if (executionElement instanceof Query) {
      try {
        QueryRuntime queryRuntime=QueryParser.parse((Query)executionElement,siddhiAppContext,siddhiAppRuntimeBuilder.getStreamDefinitionMap(),siddhiAppRuntimeBuilder.getTableDefinitionMap(),siddhiAppRuntimeBuilder.getWindowDefinitionMap(),siddhiAppRuntimeBuilder.getAggregationDefinitionMap(),siddhiAppRuntimeBuilder.getTableMap(),siddhiAppRuntimeBuilder.getAggregationMap(),siddhiAppRuntimeBuilder.getWindowMap(),siddhiAppRuntimeBuilder.getLockSynchronizer(),String.valueOf(queryIndex));
        siddhiAppRuntimeBuilder.addQuery(queryRuntime);
        queryIndex++;
      }
 catch (      Throwable t) {
        ExceptionUtil.populateQueryContext(t,(Query)executionElement,siddhiAppContext);
        throw t;
      }
    }
 else {
      try {
        PartitionRuntime partitionRuntime=PartitionParser.parse(siddhiAppRuntimeBuilder,(Partition)executionElement,siddhiAppContext,siddhiAppRuntimeBuilder.getStreamDefinitionMap(),queryIndex);
        siddhiAppRuntimeBuilder.addPartition(partitionRuntime);
        queryIndex+=((Partition)executionElement).getQueryList().size();
      }
 catch (      Throwable t) {
        ExceptionUtil.populateQueryContext(t,(Partition)executionElement,siddhiAppContext);
        throw t;
      }
    }
  }
  defineTriggerDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getTriggerDefinitionMap(),siddhiAppContext);
  return siddhiAppRuntimeBuilder;
}","/** 
 * Parse an SiddhiApp returning SiddhiAppRuntime
 * @param siddhiApp       plan to be parsed
 * @param siddhiAppString content of Siddhi application as string
 * @param siddhiContext   SiddhiContext  @return SiddhiAppRuntime
 * @return SiddhiAppRuntimeBuilder
 */
public static SiddhiAppRuntimeBuilder parse(SiddhiApp siddhiApp,String siddhiAppString,SiddhiContext siddhiContext){
  SiddhiAppContext siddhiAppContext=new SiddhiAppContext();
  siddhiAppContext.setSiddhiContext(siddhiContext);
  siddhiAppContext.setSiddhiAppString(siddhiAppString);
  try {
    Element element=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_NAME,null,siddhiApp.getAnnotations());
    if (element != null) {
      siddhiAppContext.setName(element.getValue());
    }
 else {
      siddhiAppContext.setName(UUID.randomUUID().toString());
    }
    Annotation annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_ENFORCE_ORDER,siddhiApp.getAnnotations());
    if (annotation != null) {
      siddhiAppContext.setEnforceOrder(true);
    }
    annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_ASYNC,siddhiApp.getAnnotations());
    if (annotation != null) {
      throw new SiddhiAppCreationException(""String_Node_Str"" + ""String_Node_Str"",annotation.getQueryContextStartIndex(),annotation.getQueryContextEndIndex());
    }
    annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_STATISTICS,siddhiApp.getAnnotations());
    List<Element> statisticsElements=new ArrayList<>();
    if (annotation != null) {
      statisticsElements=annotation.getElements();
    }
    if (siddhiContext.getStatisticsConfiguration() != null) {
      siddhiAppContext.setStatisticsManager(siddhiContext.getStatisticsConfiguration().getFactory().createStatisticsManager(siddhiContext.getStatisticsConfiguration().getMetricPrefix(),siddhiAppContext.getName(),statisticsElements));
    }
    Element statStateEnableElement=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_STATISTICS,SiddhiConstants.ANNOTATION_ELEMENT_ENABLE,siddhiApp.getAnnotations());
    if (statStateEnableElement != null && Boolean.valueOf(statStateEnableElement.getValue())) {
      siddhiAppContext.setStatsEnabled(true);
    }
 else {
      Element statStateElement=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_STATISTICS,null,siddhiApp.getAnnotations());
      if (annotation != null && (statStateElement == null || Boolean.valueOf(statStateElement.getValue()))) {
        siddhiAppContext.setStatsEnabled(true);
      }
    }
    Element statStateIncludElement=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_STATISTICS,SiddhiConstants.ANNOTATION_ELEMENT_INCLUDE,siddhiApp.getAnnotations());
    siddhiAppContext.setIncludedMetrics(generateIncludedMetrics(statStateIncludElement));
    siddhiAppContext.setThreadBarrier(new ThreadBarrier());
    siddhiAppContext.setExecutorService(Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"").build()));
    siddhiAppContext.setScheduledExecutorService(Executors.newScheduledThreadPool(5,new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"").build()));
    annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_PLAYBACK,siddhiApp.getAnnotations());
    if (annotation != null) {
      String idleTime=null;
      String increment=null;
      EventTimeBasedMillisTimestampGenerator timestampGenerator=new EventTimeBasedMillisTimestampGenerator(siddhiAppContext.getScheduledExecutorService());
      for (      Element e : annotation.getElements()) {
        if (SiddhiConstants.ANNOTATION_ELEMENT_IDLE_TIME.equalsIgnoreCase(e.getKey())) {
          idleTime=e.getValue();
        }
 else         if (SiddhiConstants.ANNOTATION_ELEMENT_INCREMENT.equalsIgnoreCase(e.getKey())) {
          increment=e.getValue();
        }
 else {
          throw new SiddhiAppValidationException(""String_Node_Str"" + ""String_Node_Str"" + e.getKey());
        }
      }
      if (idleTime != null && increment == null) {
        throw new SiddhiAppValidationException(""String_Node_Str"" + ""String_Node_Str"");
      }
 else       if (idleTime == null && increment != null) {
        throw new SiddhiAppValidationException(""String_Node_Str"" + ""String_Node_Str"");
      }
 else       if (idleTime != null) {
        try {
          timestampGenerator.setIdleTime(SiddhiCompiler.parseTimeConstantDefinition(idleTime).value());
        }
 catch (        SiddhiParserException ex) {
          throw new SiddhiParserException(""String_Node_Str"" + idleTime + ""String_Node_Str""+ ""String_Node_Str"",ex);
        }
        try {
          timestampGenerator.setIncrementInMilliseconds(SiddhiCompiler.parseTimeConstantDefinition(increment).value());
        }
 catch (        SiddhiParserException ex) {
          throw new SiddhiParserException(""String_Node_Str"" + increment + ""String_Node_Str""+ ""String_Node_Str"",ex);
        }
      }
      siddhiAppContext.setTimestampGenerator(timestampGenerator);
      siddhiAppContext.setPlayback(true);
    }
 else {
      siddhiAppContext.setTimestampGenerator(new SystemCurrentTimeMillisTimestampGenerator());
    }
    siddhiAppContext.setSnapshotService(new SnapshotService(siddhiAppContext));
    siddhiAppContext.setPersistenceService(new PersistenceService(siddhiAppContext));
    siddhiAppContext.setElementIdGenerator(new ElementIdGenerator(siddhiAppContext.getName()));
  }
 catch (  DuplicateAnnotationException e) {
    throw new DuplicateAnnotationException(e.getMessageWithOutContext() + ""String_Node_Str"" + siddhiApp.toString(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
  }
  SiddhiAppRuntimeBuilder siddhiAppRuntimeBuilder=new SiddhiAppRuntimeBuilder(siddhiAppContext);
  defineStreamDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getStreamDefinitionMap(),siddhiAppContext);
  defineTableDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getTableDefinitionMap(),siddhiAppContext);
  defineWindowDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getWindowDefinitionMap(),siddhiAppContext);
  defineFunctionDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getFunctionDefinitionMap(),siddhiAppContext);
  defineAggregationDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getAggregationDefinitionMap(),siddhiAppContext);
  for (  Window window : siddhiAppRuntimeBuilder.getWindowMap().values()) {
    try {
      window.init(siddhiAppRuntimeBuilder.getTableMap(),siddhiAppRuntimeBuilder.getWindowMap(),window.getWindowDefinition().getId());
    }
 catch (    Throwable t) {
      ExceptionUtil.populateQueryContext(t,window.getWindowDefinition(),siddhiAppContext);
      throw t;
    }
  }
  int queryIndex=1;
  for (  ExecutionElement executionElement : siddhiApp.getExecutionElementList()) {
    if (executionElement instanceof Query) {
      try {
        QueryRuntime queryRuntime=QueryParser.parse((Query)executionElement,siddhiAppContext,siddhiAppRuntimeBuilder.getStreamDefinitionMap(),siddhiAppRuntimeBuilder.getTableDefinitionMap(),siddhiAppRuntimeBuilder.getWindowDefinitionMap(),siddhiAppRuntimeBuilder.getAggregationDefinitionMap(),siddhiAppRuntimeBuilder.getTableMap(),siddhiAppRuntimeBuilder.getAggregationMap(),siddhiAppRuntimeBuilder.getWindowMap(),siddhiAppRuntimeBuilder.getLockSynchronizer(),String.valueOf(queryIndex));
        siddhiAppRuntimeBuilder.addQuery(queryRuntime);
        queryIndex++;
      }
 catch (      Throwable t) {
        ExceptionUtil.populateQueryContext(t,(Query)executionElement,siddhiAppContext);
        throw t;
      }
    }
 else {
      try {
        PartitionRuntime partitionRuntime=PartitionParser.parse(siddhiAppRuntimeBuilder,(Partition)executionElement,siddhiAppContext,siddhiAppRuntimeBuilder.getStreamDefinitionMap(),queryIndex);
        siddhiAppRuntimeBuilder.addPartition(partitionRuntime);
        queryIndex+=((Partition)executionElement).getQueryList().size();
      }
 catch (      Throwable t) {
        ExceptionUtil.populateQueryContext(t,(Partition)executionElement,siddhiAppContext);
        throw t;
      }
    }
  }
  defineTriggerDefinitions(siddhiAppRuntimeBuilder,siddhiApp.getTriggerDefinitionMap(),siddhiAppContext);
  return siddhiAppRuntimeBuilder;
}",0.9955027882712718
28744,"/** 
 * Parse single InputStream and return SingleStreamRuntime
 * @param inputStream                 single input stream to be parsed
 * @param siddhiAppContext            query to be parsed
 * @param variableExpressionExecutors List to hold VariableExpressionExecutors to update after query parsing
 * @param streamDefinitionMap         Stream Definition Map
 * @param tableDefinitionMap          Table Definition Map
 * @param windowDefinitionMap         window definition map
 * @param aggregationDefinitionMap    aggregation definition map
 * @param tableMap                    Table Map
 * @param metaComplexEvent            MetaComplexEvent
 * @param processStreamReceiver       ProcessStreamReceiver
 * @param supportsBatchProcessing     supports batch processing
 * @param outputExpectsExpiredEvents  is output expects ExpiredEvents
 * @param queryName                   query name of single input stream belongs to.       @return SingleStreamRuntime
 */
public static SingleStreamRuntime parseInputStream(SingleInputStream inputStream,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,MetaComplexEvent metaComplexEvent,ProcessStreamReceiver processStreamReceiver,boolean supportsBatchProcessing,boolean outputExpectsExpiredEvents,String queryName){
  Processor processor=null;
  EntryValveProcessor entryValveProcessor=null;
  boolean first=true;
  MetaStreamEvent metaStreamEvent;
  if (metaComplexEvent instanceof MetaStateEvent) {
    metaStreamEvent=new MetaStreamEvent();
    ((MetaStateEvent)metaComplexEvent).addEvent(metaStreamEvent);
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,metaStreamEvent);
  }
 else {
    metaStreamEvent=(MetaStreamEvent)metaComplexEvent;
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,metaStreamEvent);
  }
  if (!inputStream.getStreamHandlers().isEmpty() && windowDefinitionMap != null && windowDefinitionMap.containsKey(inputStream.getStreamId())) {
    for (    StreamHandler handler : inputStream.getStreamHandlers()) {
      if (handler instanceof Window) {
        throw new OperationNotSupportedException(""String_Node_Str"" + ((Window)handler).getName() + ""String_Node_Str""+ ""String_Node_Str""+ inputStream.getStreamId());
      }
    }
  }
  if (!inputStream.getStreamHandlers().isEmpty()) {
    for (    StreamHandler handler : inputStream.getStreamHandlers()) {
      Processor currentProcessor=generateProcessor(handler,metaComplexEvent,variableExpressionExecutors,siddhiAppContext,tableMap,supportsBatchProcessing,outputExpectsExpiredEvents,queryName);
      if (currentProcessor instanceof SchedulingProcessor) {
        if (entryValveProcessor == null) {
          entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
          if (first) {
            processor=entryValveProcessor;
            first=false;
          }
 else {
            processor.setToLast(entryValveProcessor);
          }
        }
        Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
        ((SchedulingProcessor)currentProcessor).setScheduler(scheduler);
      }
      if (first) {
        processor=currentProcessor;
        first=false;
      }
 else {
        processor.setToLast(currentProcessor);
      }
    }
  }
  metaStreamEvent.initializeAfterWindowData();
  return new SingleStreamRuntime(processStreamReceiver,processor,metaComplexEvent);
}","/** 
 * Parse single InputStream and return SingleStreamRuntime
 * @param inputStream                 single input stream to be parsed
 * @param siddhiAppContext            query to be parsed
 * @param variableExpressionExecutors List to hold VariableExpressionExecutors to update after query parsing
 * @param streamDefinitionMap         Stream Definition Map
 * @param tableDefinitionMap          Table Definition Map
 * @param windowDefinitionMap         window definition map
 * @param aggregationDefinitionMap    aggregation definition map
 * @param tableMap                    Table Map
 * @param metaComplexEvent            MetaComplexEvent
 * @param processStreamReceiver       ProcessStreamReceiver
 * @param supportsBatchProcessing     supports batch processing
 * @param outputExpectsExpiredEvents  is output expects ExpiredEvents
 * @param queryName                   query name of single input stream belongs to.
 * @return SingleStreamRuntime
 */
public static SingleStreamRuntime parseInputStream(SingleInputStream inputStream,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,MetaComplexEvent metaComplexEvent,ProcessStreamReceiver processStreamReceiver,boolean supportsBatchProcessing,boolean outputExpectsExpiredEvents,String queryName){
  Processor processor=null;
  EntryValveProcessor entryValveProcessor=null;
  boolean first=true;
  MetaStreamEvent metaStreamEvent;
  if (metaComplexEvent instanceof MetaStateEvent) {
    metaStreamEvent=new MetaStreamEvent();
    ((MetaStateEvent)metaComplexEvent).addEvent(metaStreamEvent);
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,metaStreamEvent);
  }
 else {
    metaStreamEvent=(MetaStreamEvent)metaComplexEvent;
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,metaStreamEvent);
  }
  if (!inputStream.getStreamHandlers().isEmpty() && windowDefinitionMap != null && windowDefinitionMap.containsKey(inputStream.getStreamId())) {
    for (    StreamHandler handler : inputStream.getStreamHandlers()) {
      if (handler instanceof Window) {
        throw new OperationNotSupportedException(""String_Node_Str"" + ((Window)handler).getName() + ""String_Node_Str""+ ""String_Node_Str""+ inputStream.getStreamId());
      }
    }
  }
  if (!inputStream.getStreamHandlers().isEmpty()) {
    for (    StreamHandler handler : inputStream.getStreamHandlers()) {
      Processor currentProcessor=generateProcessor(handler,metaComplexEvent,variableExpressionExecutors,siddhiAppContext,tableMap,supportsBatchProcessing,outputExpectsExpiredEvents,queryName);
      if (currentProcessor instanceof SchedulingProcessor) {
        if (entryValveProcessor == null) {
          entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
          if (first) {
            processor=entryValveProcessor;
            first=false;
          }
 else {
            processor.setToLast(entryValveProcessor);
          }
        }
        Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
        ((SchedulingProcessor)currentProcessor).setScheduler(scheduler);
      }
      if (first) {
        processor=currentProcessor;
        first=false;
      }
 else {
        processor.setToLast(currentProcessor);
      }
    }
  }
  metaStreamEvent.initializeAfterWindowData();
  return new SingleStreamRuntime(processStreamReceiver,processor,metaComplexEvent);
}",0.998817190169536
28745,"/** 
 * @param eventBufferHolder
 * @return Name of the buffered event tracker.
 */
String getName(EventBufferHolder eventBufferHolder);","/** 
 * @param eventBufferHolder Event Buffer holder
 * @return Name of the buffered event tracker.
 */
String getName(EventBufferHolder eventBufferHolder);",0.9315068493150684
28746,"private Event[] executeSelector(StreamEvent streamEvents,MetaStreamEvent.EventType eventType){
  ComplexEventChunk<StateEvent> complexEventChunk=new ComplexEventChunk<>(true);
  while (streamEvents != null) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    if (eventType == MetaStreamEvent.EventType.AGGREGATE) {
      stateEvent.addEvent(1,streamEvents);
    }
 else {
      stateEvent.addEvent(0,streamEvents);
    }
    complexEventChunk.add(stateEvent);
    streamEvents=streamEvents.getNext();
  }
  ComplexEventChunk outputComplexEventChunk=selector.execute(complexEventChunk);
  if (outputComplexEventChunk != null) {
    List<Event> events=new ArrayList<>();
    outputComplexEventChunk.reset();
    while (outputComplexEventChunk.hasNext()) {
      ComplexEvent complexEvent=outputComplexEventChunk.next();
      events.add(new Event(complexEvent.getTimestamp(),complexEvent.getOutputData()));
    }
    return events.toArray(new Event[0]);
  }
 else {
    return null;
  }
}","private Event[] executeSelector(StreamEvent streamEvents,MetaStreamEvent.EventType eventType){
  ComplexEventChunk<StateEvent> complexEventChunk=new ComplexEventChunk<>(true);
  while (streamEvents != null) {
    StreamEvent streamEvent=streamEvents;
    streamEvents=streamEvents.getNext();
    streamEvent.setNext(null);
    StateEvent stateEvent=stateEventPool.borrowEvent();
    if (eventType == MetaStreamEvent.EventType.AGGREGATE) {
      stateEvent.addEvent(1,streamEvent);
    }
 else {
      stateEvent.addEvent(0,streamEvent);
    }
    complexEventChunk.add(stateEvent);
  }
  ComplexEventChunk outputComplexEventChunk=selector.execute(complexEventChunk);
  if (outputComplexEventChunk != null) {
    List<Event> events=new ArrayList<>();
    outputComplexEventChunk.reset();
    while (outputComplexEventChunk.hasNext()) {
      ComplexEvent complexEvent=outputComplexEventChunk.next();
      events.add(new Event(complexEvent.getTimestamp(),complexEvent.getOutputData()));
    }
    return events.toArray(new Event[0]);
  }
 else {
    return null;
  }
}",0.9238972370334464
28747,"private ComplexEventChunk processInBatchGroupBy(ComplexEventChunk complexEventChunk){
  Map<String,ComplexEvent> groupedEvents=new LinkedHashMap<String,ComplexEvent>();
  complexEventChunk.reset();
synchronized (this) {
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
switch (event.getType()) {
case CURRENT:
case EXPIRED:
        eventPopulator.populateStateEvent(event);
      String groupByKey=groupByKeyGenerator.constructEventKey(event);
    GroupByAggregationAttributeExecutor.getKeyThreadLocal().set(groupByKey);
  for (  AttributeProcessor attributeProcessor : attributeProcessorList) {
    attributeProcessor.process(event);
  }
if (!(havingConditionExecutor != null && !havingConditionExecutor.execute(event))) {
  if ((event.getType() == StreamEvent.Type.CURRENT && currentOn) || (event.getType() == StreamEvent.Type.EXPIRED && expiredOn)) {
    complexEventChunk.remove();
    groupedEvents.put(groupByKey,event);
  }
}
GroupByAggregationAttributeExecutor.getKeyThreadLocal().remove();
break;
case TIMER:
break;
case RESET:
for (AttributeProcessor attributeProcessor : attributeProcessorList) {
attributeProcessor.process(event);
}
break;
}
}
}
if (groupedEvents.size() != 0) {
complexEventChunk.clear();
if (isOrderBy) {
populateOrderedEventsInBatchGroupBy(complexEventChunk,groupedEvents);
}
 else {
populateEventsInBatchGroupBy(complexEventChunk,groupedEvents);
}
complexEventChunk.reset();
return complexEventChunk;
}
return null;
}","private ComplexEventChunk processInBatchGroupBy(ComplexEventChunk complexEventChunk){
  Map<String,ComplexEvent> groupedEvents=new LinkedHashMap<String,ComplexEvent>();
  complexEventChunk.reset();
synchronized (this) {
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
switch (event.getType()) {
case CURRENT:
case EXPIRED:
        eventPopulator.populateStateEvent(event);
      String groupByKey=groupByKeyGenerator.constructEventKey(event);
    GroupByAggregationAttributeExecutor.getKeyThreadLocal().set(groupByKey);
  for (  AttributeProcessor attributeProcessor : attributeProcessorList) {
    attributeProcessor.process(event);
  }
if (!(havingConditionExecutor != null && !havingConditionExecutor.execute(event))) {
  if ((event.getType() == StreamEvent.Type.CURRENT && currentOn) || (event.getType() == StreamEvent.Type.EXPIRED && expiredOn)) {
    complexEventChunk.remove();
    groupedEvents.put(groupByKey,event);
  }
}
GroupByAggregationAttributeExecutor.getKeyThreadLocal().remove();
break;
case TIMER:
break;
case RESET:
for (AttributeProcessor attributeProcessor : attributeProcessorList) {
attributeProcessor.process(event);
}
break;
}
}
}
if (groupedEvents.size() != 0) {
complexEventChunk.clear();
for (Map.Entry<String,ComplexEvent> groupedEventEntry : groupedEvents.entrySet()) {
complexEventChunk.add(new GroupedComplexEvent(groupedEventEntry.getKey(),groupedEventEntry.getValue()));
}
if (isOrderBy) {
orderEventChunk(complexEventChunk);
}
if (limit != SiddhiConstants.UNKNOWN_STATE) {
limitEventChunk(complexEventChunk);
}
complexEventChunk.reset();
return complexEventChunk;
}
return null;
}",0.8186429930247305
28748,"private ComplexEventChunk<ComplexEvent> processGroupBy(ComplexEventChunk complexEventChunk){
  if (isOrderBy) {
    orderEventChunk(complexEventChunk);
  }
  complexEventChunk.reset();
  ComplexEventChunk<ComplexEvent> currentComplexEventChunk=new ComplexEventChunk<ComplexEvent>(complexEventChunk.isBatch());
synchronized (this) {
    int limitCount=0;
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
switch (event.getType()) {
case CURRENT:
case EXPIRED:
        eventPopulator.populateStateEvent(event);
      String groupedByKey=groupByKeyGenerator.constructEventKey(event);
    GroupByAggregationAttributeExecutor.getKeyThreadLocal().set(groupedByKey);
  for (  AttributeProcessor attributeProcessor : attributeProcessorList) {
    attributeProcessor.process(event);
  }
if ((event.getType() == StreamEvent.Type.CURRENT && currentOn) || (event.getType() == StreamEvent.Type.EXPIRED && expiredOn)) {
  if (!(havingConditionExecutor != null && !havingConditionExecutor.execute(event))) {
    complexEventChunk.remove();
    if (limit == SiddhiConstants.UNKNOWN_STATE) {
      currentComplexEventChunk.add(new GroupedComplexEvent(groupedByKey,event));
    }
 else {
      if (limitCount < limit) {
        currentComplexEventChunk.add(new GroupedComplexEvent(groupedByKey,event));
        limitCount++;
      }
    }
  }
}
GroupByAggregationAttributeExecutor.getKeyThreadLocal().remove();
break;
case TIMER:
break;
case RESET:
for (AttributeProcessor attributeProcessor : attributeProcessorList) {
attributeProcessor.process(event);
}
break;
}
}
}
currentComplexEventChunk.reset();
if (currentComplexEventChunk.hasNext()) {
return currentComplexEventChunk;
}
return null;
}","private ComplexEventChunk<ComplexEvent> processGroupBy(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  ComplexEventChunk<ComplexEvent> currentComplexEventChunk=new ComplexEventChunk<ComplexEvent>(complexEventChunk.isBatch());
synchronized (this) {
    int limitCount=0;
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
switch (event.getType()) {
case CURRENT:
case EXPIRED:
        eventPopulator.populateStateEvent(event);
      String groupedByKey=groupByKeyGenerator.constructEventKey(event);
    GroupByAggregationAttributeExecutor.getKeyThreadLocal().set(groupedByKey);
  for (  AttributeProcessor attributeProcessor : attributeProcessorList) {
    attributeProcessor.process(event);
  }
if ((event.getType() == StreamEvent.Type.CURRENT && currentOn) || (event.getType() == StreamEvent.Type.EXPIRED && expiredOn)) {
  if (!(havingConditionExecutor != null && !havingConditionExecutor.execute(event))) {
    complexEventChunk.remove();
    if (limit == SiddhiConstants.UNKNOWN_STATE) {
      currentComplexEventChunk.add(new GroupedComplexEvent(groupedByKey,event));
    }
 else {
      if (limitCount < limit) {
        currentComplexEventChunk.add(new GroupedComplexEvent(groupedByKey,event));
        limitCount++;
      }
    }
  }
}
GroupByAggregationAttributeExecutor.getKeyThreadLocal().remove();
break;
case TIMER:
break;
case RESET:
for (AttributeProcessor attributeProcessor : attributeProcessorList) {
attributeProcessor.process(event);
}
break;
}
}
}
if (isOrderBy) {
orderEventChunk(complexEventChunk);
}
if (limit != SiddhiConstants.UNKNOWN_STATE) {
limitEventChunk(complexEventChunk);
}
currentComplexEventChunk.reset();
if (currentComplexEventChunk.hasNext()) {
return currentComplexEventChunk;
}
return null;
}",0.8805460750853242
28749,"private void orderEventChunk(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  List<ComplexEvent> eventList=new ArrayList<>();
  while (complexEventChunk.hasNext()) {
    ComplexEvent event=complexEventChunk.next();
    complexEventChunk.remove();
    eventList.add(event);
  }
  complexEventChunk.clear();
  eventList.sort(orderByEventComparator);
  for (  ComplexEvent complexEvent : eventList) {
    complexEventChunk.add(complexEvent);
  }
}","private void orderEventChunk(ComplexEventChunk complexEventChunk){
  ComplexEventChunk orderingComplexEventChunk=new ComplexEventChunk(complexEventChunk.isBatch());
  List<ComplexEvent> eventList=new ArrayList<>();
  ComplexEvent.Type currentEventType=null;
  complexEventChunk.reset();
  if (complexEventChunk.getFirst() != null) {
    currentEventType=complexEventChunk.getFirst().getType();
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
      complexEventChunk.remove();
      if (currentEventType == event.getType()) {
        eventList.add(event);
      }
 else {
        currentEventType=event.getType();
        eventList.sort(orderByEventComparator);
        for (        ComplexEvent complexEvent : eventList) {
          orderingComplexEventChunk.add(complexEvent);
        }
        eventList.clear();
        eventList.add(event);
      }
    }
    eventList.sort(orderByEventComparator);
    for (    ComplexEvent complexEvent : eventList) {
      orderingComplexEventChunk.add(complexEvent);
    }
    complexEventChunk.clear();
    complexEventChunk.add(orderingComplexEventChunk.getFirst());
  }
}",0.4273399014778325
28750,"private ComplexEventChunk processNoGroupBy(ComplexEventChunk complexEventChunk){
  if (isOrderBy) {
    orderEventChunk(complexEventChunk);
  }
  complexEventChunk.reset();
synchronized (this) {
    long limitCount=0;
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
switch (event.getType()) {
case CURRENT:
case EXPIRED:
        eventPopulator.populateStateEvent(event);
      for (      AttributeProcessor attributeProcessor : attributeProcessorList) {
        attributeProcessor.process(event);
      }
    if (((event.getType() != StreamEvent.Type.CURRENT || !currentOn) && (event.getType() != StreamEvent.Type.EXPIRED || !expiredOn)) || ((havingConditionExecutor != null && !havingConditionExecutor.execute(event)))) {
      complexEventChunk.remove();
    }
 else {
      if (limit != SiddhiConstants.UNKNOWN_STATE) {
        if (limitCount >= limit) {
          complexEventChunk.remove();
        }
 else {
          limitCount++;
        }
      }
    }
  break;
case RESET:
for (AttributeProcessor attributeProcessor : attributeProcessorList) {
  attributeProcessor.process(event);
}
break;
case TIMER:
complexEventChunk.remove();
break;
}
}
}
complexEventChunk.reset();
if (complexEventChunk.hasNext()) {
return complexEventChunk;
}
return null;
}","private ComplexEventChunk processNoGroupBy(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
synchronized (this) {
    while (complexEventChunk.hasNext()) {
      ComplexEvent event=complexEventChunk.next();
switch (event.getType()) {
case CURRENT:
case EXPIRED:
        eventPopulator.populateStateEvent(event);
      for (      AttributeProcessor attributeProcessor : attributeProcessorList) {
        attributeProcessor.process(event);
      }
    if (((event.getType() != StreamEvent.Type.CURRENT || !currentOn) && (event.getType() != StreamEvent.Type.EXPIRED || !expiredOn)) || ((havingConditionExecutor != null && !havingConditionExecutor.execute(event)))) {
      complexEventChunk.remove();
    }
  break;
case RESET:
for (AttributeProcessor attributeProcessor : attributeProcessorList) {
  attributeProcessor.process(event);
}
break;
case TIMER:
complexEventChunk.remove();
break;
}
}
}
if (isOrderBy) {
orderEventChunk(complexEventChunk);
}
if (limit != SiddhiConstants.UNKNOWN_STATE) {
limitEventChunk(complexEventChunk);
}
complexEventChunk.reset();
if (complexEventChunk.hasNext()) {
return complexEventChunk;
}
return null;
}",0.6029292107404394
28751,"@Override public void init(TableDefinition tableDefinition,StreamEventPool storeEventPool,StreamEventCloner storeEventCloner,ConfigReader configReader,SiddhiAppContext siddhiAppContext,RecordTableHandler recordTableHandler){
  this.tableDefinition=tableDefinition;
  this.tableStreamEventCloner=storeEventCloner;
  eventHolder=EventHolderPasser.parse(tableDefinition,storeEventPool);
  if (elementId == null) {
    elementId=""String_Node_Str"" + siddhiAppContext.getElementIdGenerator().createNewId();
  }
  siddhiAppContext.getSnapshotService().addSnapshotable(tableDefinition.getId(),this);
}","@Override public void init(TableDefinition tableDefinition,StreamEventPool storeEventPool,StreamEventCloner storeEventCloner,ConfigReader configReader,SiddhiAppContext siddhiAppContext,RecordTableHandler recordTableHandler){
  this.tableDefinition=tableDefinition;
  this.tableStreamEventCloner=storeEventCloner;
  eventHolder=EventHolderPasser.parse(tableDefinition,storeEventPool,siddhiAppContext);
  if (elementId == null) {
    elementId=""String_Node_Str"" + siddhiAppContext.getElementIdGenerator().createNewId();
  }
  siddhiAppContext.getSnapshotService().addSnapshotable(tableDefinition.getId(),this);
}",0.9858686616791354
28752,"private void add(StreamEvent streamEvent){
  StreamEvent existingValue=null;
  if (primaryKeyData != null) {
    Object primaryKey=constructPrimaryKey(streamEvent,primaryKeyReferenceHolders);
    existingValue=primaryKeyData.putIfAbsent(primaryKey,streamEvent);
    if (existingValue != null) {
      log.error(""String_Node_Str"" + streamEvent + ""String_Node_Str""+ ""String_Node_Str""+ primaryKey+ ""String_Node_Str"");
    }
  }
  if (indexData != null) {
    for (    Map.Entry<String,Integer> indexEntry : indexMetaData.entrySet()) {
      TreeMap<Object,Set<StreamEvent>> indexMap=indexData.get(indexEntry.getKey());
      Object key=streamEvent.getOutputData()[indexEntry.getValue()];
      Set<StreamEvent> values=indexMap.get(key);
      if (values == null) {
        values=new HashSet<StreamEvent>();
        values.add(streamEvent);
        indexMap.put(streamEvent.getOutputData()[indexEntry.getValue()],values);
      }
 else {
        values.add(streamEvent);
      }
    }
  }
}","private void add(StreamEvent streamEvent){
  StreamEvent existingValue=null;
  if (primaryKeyData != null) {
    Object primaryKey=constructPrimaryKey(streamEvent,primaryKeyReferenceHolders);
    existingValue=primaryKeyData.putIfAbsent(primaryKey,streamEvent);
    if (existingValue != null) {
      log.error(""String_Node_Str"" + siddhiAppName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ streamEvent+ ""String_Node_Str""+ primaryKey+ ""String_Node_Str"");
    }
  }
  if (indexData != null) {
    for (    Map.Entry<String,Integer> indexEntry : indexMetaData.entrySet()) {
      TreeMap<Object,Set<StreamEvent>> indexMap=indexData.get(indexEntry.getKey());
      Object key=streamEvent.getOutputData()[indexEntry.getValue()];
      Set<StreamEvent> values=indexMap.get(key);
      if (values == null) {
        values=new HashSet<StreamEvent>();
        values.add(streamEvent);
        indexMap.put(streamEvent.getOutputData()[indexEntry.getValue()],values);
      }
 else {
        values.add(streamEvent);
      }
    }
  }
}",0.967805844477464
28753,"public IndexEventHolder(StreamEventPool tableStreamEventPool,StreamEventConverter eventConverter,PrimaryKeyReferenceHolder[] primaryKeyReferenceHolders,boolean isPrimaryNumeric,Map<String,Integer> indexMetaData){
  this.tableStreamEventPool=tableStreamEventPool;
  this.eventConverter=eventConverter;
  this.primaryKeyReferenceHolders=primaryKeyReferenceHolders;
  this.indexMetaData=indexMetaData;
  if (primaryKeyReferenceHolders != null) {
    if (isPrimaryNumeric) {
      primaryKeyData=new TreeMap<Object,StreamEvent>();
    }
 else {
      primaryKeyData=new HashMap<Object,StreamEvent>();
    }
    if (primaryKeyReferenceHolders.length == 1) {
      allIndexMetaData.put(primaryKeyReferenceHolders[0].getPrimaryKeyAttribute(),primaryKeyReferenceHolders[0].getPrimaryKeyPosition());
      primaryKeyAttributes=primaryKeyReferenceHolders[0].getPrimaryKeyAttribute();
    }
 else {
      StringBuilder primaryKeyAttributesBuilder=new StringBuilder();
      for (      PrimaryKeyReferenceHolder primaryKeyReferenceHolder : primaryKeyReferenceHolders) {
        multiPrimaryKeyMetaData.put(primaryKeyReferenceHolder.getPrimaryKeyAttribute(),primaryKeyReferenceHolder.getPrimaryKeyPosition());
        primaryKeyAttributesBuilder.append(primaryKeyReferenceHolder.getPrimaryKeyAttribute()).append(SiddhiConstants.KEY_DELIMITER);
      }
      primaryKeyAttributes=primaryKeyAttributesBuilder.toString();
    }
  }
 else {
    primaryKeyData=null;
  }
  if (indexMetaData.size() > 0) {
    indexData=new HashMap<String,TreeMap<Object,Set<StreamEvent>>>();
    for (    String indexAttributeName : indexMetaData.keySet()) {
      indexData.put(indexAttributeName,new TreeMap<Object,Set<StreamEvent>>());
    }
    allIndexMetaData.putAll(indexMetaData);
  }
 else {
    indexData=null;
  }
}","public IndexEventHolder(StreamEventPool tableStreamEventPool,StreamEventConverter eventConverter,PrimaryKeyReferenceHolder[] primaryKeyReferenceHolders,boolean isPrimaryNumeric,Map<String,Integer> indexMetaData,AbstractDefinition tableDefinition,SiddhiAppContext siddhiAppContext){
  this.tableStreamEventPool=tableStreamEventPool;
  this.eventConverter=eventConverter;
  this.primaryKeyReferenceHolders=primaryKeyReferenceHolders;
  this.indexMetaData=indexMetaData;
  this.tableName=tableDefinition.getId();
  this.siddhiAppName=siddhiAppContext.getName();
  if (primaryKeyReferenceHolders != null) {
    if (isPrimaryNumeric) {
      primaryKeyData=new TreeMap<Object,StreamEvent>();
    }
 else {
      primaryKeyData=new HashMap<Object,StreamEvent>();
    }
    if (primaryKeyReferenceHolders.length == 1) {
      allIndexMetaData.put(primaryKeyReferenceHolders[0].getPrimaryKeyAttribute(),primaryKeyReferenceHolders[0].getPrimaryKeyPosition());
      primaryKeyAttributes=primaryKeyReferenceHolders[0].getPrimaryKeyAttribute();
    }
 else {
      StringBuilder primaryKeyAttributesBuilder=new StringBuilder();
      for (      PrimaryKeyReferenceHolder primaryKeyReferenceHolder : primaryKeyReferenceHolders) {
        multiPrimaryKeyMetaData.put(primaryKeyReferenceHolder.getPrimaryKeyAttribute(),primaryKeyReferenceHolder.getPrimaryKeyPosition());
        primaryKeyAttributesBuilder.append(primaryKeyReferenceHolder.getPrimaryKeyAttribute()).append(SiddhiConstants.KEY_DELIMITER);
      }
      primaryKeyAttributes=primaryKeyAttributesBuilder.toString();
    }
  }
 else {
    primaryKeyData=null;
  }
  if (indexMetaData.size() > 0) {
    indexData=new HashMap<String,TreeMap<Object,Set<StreamEvent>>>();
    for (    String indexAttributeName : indexMetaData.keySet()) {
      indexData.put(indexAttributeName,new TreeMap<Object,Set<StreamEvent>>());
    }
    allIndexMetaData.putAll(indexMetaData);
  }
 else {
    indexData=null;
  }
}",0.9572421165152324
28754,"public synchronized void shutdown(){
  SourceHandlerManager sourceHandlerManager=siddhiAppContext.getSiddhiContext().getSourceHandlerManager();
  for (  List<Source> sources : sourceMap.values()) {
    for (    Source source : sources) {
      try {
        if (sourceHandlerManager != null) {
          sourceHandlerManager.unregisterSourceHandler(source.getMapper().getHandler().getElementId());
        }
        source.shutdown();
      }
 catch (      Throwable t) {
        log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + source.getType()+ ""String_Node_Str""+ source.getStreamDefinition().getId()+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    try {
      table.shutdown();
    }
 catch (    Throwable t) {
      log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + table.getTableDefinition().getId()+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
    }
  }
  SinkHandlerManager sinkHandlerManager=siddhiAppContext.getSiddhiContext().getSinkHandlerManager();
  for (  List<Sink> sinks : sinkMap.values()) {
    for (    Sink sink : sinks) {
      try {
        if (sinkHandlerManager != null) {
          sinkHandlerManager.unregisterSinkHandler(sink.getHandler().getElementId());
        }
        sink.shutdown();
      }
 catch (      Throwable t) {
        log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + sink.getType()+ ""String_Node_Str""+ sink.getStreamDefinition().getId()+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    RecordTableHandlerManager recordTableHandlerManager=siddhiAppContext.getSiddhiContext().getRecordTableHandlerManager();
    if (recordTableHandlerManager != null) {
      String elementId=table.getHandler().getElementId();
      if (elementId != null) {
        recordTableHandlerManager.unregisterRecordTableHandler(elementId);
      }
    }
    table.shutdown();
  }
  for (  EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
    try {
      eternalReferencedHolder.stop();
    }
 catch (    Throwable t) {
      log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + eternalReferencedHolder+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
    }
  }
  inputManager.disconnect();
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      for (      StreamJunction streamJunction : streamJunctionMap.values()) {
        streamJunction.stopProcessing();
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      siddhiAppContext.getScheduledExecutorService().shutdownNow();
      siddhiAppContext.getExecutorService().shutdownNow();
    }
  }
,""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  thread.start();
  if (siddhiAppRuntimeMap != null) {
    siddhiAppRuntimeMap.remove(siddhiAppContext.getName());
  }
  if (siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().stopReporting();
    }
    siddhiAppContext.getStatisticsManager().cleanup();
  }
  running=false;
}","public synchronized void shutdown(){
  SourceHandlerManager sourceHandlerManager=siddhiAppContext.getSiddhiContext().getSourceHandlerManager();
  for (  List<Source> sources : sourceMap.values()) {
    for (    Source source : sources) {
      try {
        if (sourceHandlerManager != null) {
          sourceHandlerManager.unregisterSourceHandler(source.getMapper().getHandler().getElementId());
        }
        source.shutdown();
      }
 catch (      Throwable t) {
        log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + source.getType()+ ""String_Node_Str""+ source.getStreamDefinition().getId()+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    try {
      table.shutdown();
    }
 catch (    Throwable t) {
      log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + table.getTableDefinition().getId()+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
    }
  }
  SinkHandlerManager sinkHandlerManager=siddhiAppContext.getSiddhiContext().getSinkHandlerManager();
  for (  List<Sink> sinks : sinkMap.values()) {
    for (    Sink sink : sinks) {
      try {
        if (sinkHandlerManager != null) {
          sinkHandlerManager.unregisterSinkHandler(sink.getHandler().getElementId());
        }
        sink.shutdown();
      }
 catch (      Throwable t) {
        log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + sink.getType()+ ""String_Node_Str""+ sink.getStreamDefinition().getId()+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
      }
    }
  }
  for (  Table table : tableMap.values()) {
    RecordTableHandlerManager recordTableHandlerManager=siddhiAppContext.getSiddhiContext().getRecordTableHandlerManager();
    if (recordTableHandlerManager != null) {
      String elementId=null;
      RecordTableHandler recordTableHandler=table.getHandler();
      if (recordTableHandler != null) {
        elementId=recordTableHandler.getElementId();
      }
      if (elementId != null) {
        recordTableHandlerManager.unregisterRecordTableHandler(elementId);
      }
    }
    table.shutdown();
  }
  for (  EternalReferencedHolder eternalReferencedHolder : siddhiAppContext.getEternalReferencedHolders()) {
    try {
      eternalReferencedHolder.stop();
    }
 catch (    Throwable t) {
      log.error(ExceptionUtil.getMessageWithContext(t,siddhiAppContext) + ""String_Node_Str"" + eternalReferencedHolder+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",t);
    }
  }
  inputManager.disconnect();
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      for (      StreamJunction streamJunction : streamJunctionMap.values()) {
        streamJunction.stopProcessing();
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      siddhiAppContext.getScheduledExecutorService().shutdownNow();
      siddhiAppContext.getExecutorService().shutdownNow();
    }
  }
,""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  thread.start();
  if (siddhiAppRuntimeMap != null) {
    siddhiAppRuntimeMap.remove(siddhiAppContext.getName());
  }
  if (siddhiAppContext.getStatisticsManager() != null) {
    if (siddhiAppContext.isStatsEnabled()) {
      siddhiAppContext.getStatisticsManager().stopReporting();
    }
    siddhiAppContext.getStatisticsManager().cleanup();
  }
  running=false;
}",0.9789974796975636
28755,"private Event[] executeSelector(StreamEvent streamEvents,MetaStreamEvent.EventType eventType){
  ComplexEventChunk<StateEvent> complexEventChunk=new ComplexEventChunk<StateEvent>(true);
  while (streamEvents != null) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    stateEvent.addEvent(0,streamEvents);
    complexEventChunk.add(stateEvent);
    streamEvents=streamEvents.getNext();
  }
  ComplexEventChunk outputComplexEventChunk=selector.execute(complexEventChunk);
  if (outputComplexEventChunk != null) {
    List<Event> events=new ArrayList<>();
    outputComplexEventChunk.reset();
    while (outputComplexEventChunk.hasNext()) {
      ComplexEvent complexEvent=outputComplexEventChunk.next();
      if (eventType != MetaStreamEvent.EventType.AGGREGATE) {
        events.add(new Event(complexEvent.getTimestamp(),complexEvent.getOutputData()));
      }
 else {
        events.add(new Event(complexEvent.getTimestamp(),((StateEvent)complexEvent).getStreamEvent(0).getOutputData()));
      }
    }
    return events.toArray(new Event[0]);
  }
 else {
    return null;
  }
}","private Event[] executeSelector(StreamEvent streamEvents,MetaStreamEvent.EventType eventType){
  ComplexEventChunk<StateEvent> complexEventChunk=new ComplexEventChunk<>(true);
  while (streamEvents != null) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    if (eventType == MetaStreamEvent.EventType.AGGREGATE) {
      stateEvent.addEvent(1,streamEvents);
    }
 else {
      stateEvent.addEvent(0,streamEvents);
    }
    complexEventChunk.add(stateEvent);
    streamEvents=streamEvents.getNext();
  }
  ComplexEventChunk outputComplexEventChunk=selector.execute(complexEventChunk);
  if (outputComplexEventChunk != null) {
    List<Event> events=new ArrayList<>();
    outputComplexEventChunk.reset();
    while (outputComplexEventChunk.hasNext()) {
      ComplexEvent complexEvent=outputComplexEventChunk.next();
      events.add(new Event(complexEvent.getTimestamp(),complexEvent.getOutputData()));
    }
    return events.toArray(new Event[0]);
  }
 else {
    return null;
  }
}",0.4659635666347075
28756,"/** 
 * Parse a query and return corresponding QueryRuntime.
 * @param query                    query to be parsed.
 * @param siddhiAppContext         associated Siddhi app context.
 * @param streamDefinitionMap      keyvalue containing user given stream definitions.
 * @param tableDefinitionMap       keyvalue containing table definitions.
 * @param windowDefinitionMap      keyvalue containing window definition map.
 * @param aggregationDefinitionMap keyvalue containing aggregation definition map.
 * @param tableMap                 keyvalue containing event tables.
 * @param aggregationMap           keyvalue containing aggrigation runtimes.
 * @param windowMap                keyvalue containing event window map.
 * @param lockSynchronizer         Lock synchronizer for sync the lock across queries.
 * @param queryIndex               query index to identify unknown query by number
 * @return queryRuntime
 */
public static QueryRuntime parse(Query query,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,AggregationRuntime> aggregationMap,Map<String,Window> windowMap,LockSynchronizer lockSynchronizer,String queryIndex){
  List<VariableExpressionExecutor> executors=new ArrayList<VariableExpressionExecutor>();
  QueryRuntime queryRuntime;
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",query.getAnnotations());
    String queryName=null;
    if (nameElement != null) {
      queryName=nameElement.getValue();
    }
 else {
      queryName=""String_Node_Str"" + queryIndex + ""String_Node_Str""+ UUID.randomUUID().toString();
    }
    latencyTracker=QueryParserHelper.createLatencyTracker(siddhiAppContext,queryName,SiddhiConstants.METRIC_INFIX_QUERIES,null);
    OutputStream.OutputEventType outputEventType=query.getOutputStream().getOutputEventType();
    boolean outputExpectsExpiredEvents=false;
    if (outputEventType != OutputStream.OutputEventType.CURRENT_EVENTS) {
      outputExpectsExpiredEvents=true;
    }
    StreamRuntime streamRuntime=InputStreamParser.parse(query.getInputStream(),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,executors,latencyTracker,outputExpectsExpiredEvents,queryName);
    QuerySelector selector=SelectorParser.parse(query.getSelector(),query.getOutputStream(),siddhiAppContext,streamRuntime.getMetaComplexEvent(),tableMap,executors,queryName);
    boolean isWindow=query.getInputStream() instanceof JoinInputStream;
    if (!isWindow && query.getInputStream() instanceof SingleInputStream) {
      for (      StreamHandler streamHandler : ((SingleInputStream)query.getInputStream()).getStreamHandlers()) {
        if (streamHandler instanceof org.wso2.siddhi.query.api.execution.query.input.handler.Window) {
          isWindow=true;
          break;
        }
      }
    }
    Element synchronizedElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",null,query.getAnnotations());
    if (synchronizedElement != null) {
      if (!(""String_Node_Str"".equalsIgnoreCase(synchronizedElement.getValue()))) {
        lockWrapper=new LockWrapper(""String_Node_Str"");
        lockWrapper.setLock(new ReentrantLock());
      }
    }
 else {
      if (isWindow || !(streamRuntime instanceof SingleStreamRuntime)) {
        if (streamRuntime instanceof JoinStreamRuntime) {
          MetaStateEvent metaStateEvent=(MetaStateEvent)streamRuntime.getMetaComplexEvent();
          MetaStreamEvent[] metaStreamEvents=metaStateEvent.getMetaStreamEvents();
          if (metaStreamEvents[0].getEventType() == EventType.WINDOW && metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            LockWrapper leftLockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
            LockWrapper rightLockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
            if (!leftLockWrapper.equals(rightLockWrapper)) {
              lockSynchronizer.sync(leftLockWrapper,rightLockWrapper);
            }
            lockWrapper=leftLockWrapper;
          }
 else           if (metaStreamEvents[0].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
          }
 else           if (metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
          }
 else {
            lockWrapper=new LockWrapper(""String_Node_Str"");
            lockWrapper.setLock(new ReentrantLock());
          }
        }
 else {
          lockWrapper=new LockWrapper(""String_Node_Str"");
          lockWrapper.setLock(new ReentrantLock());
        }
      }
    }
    OutputRateLimiter outputRateLimiter=OutputParser.constructOutputRateLimiter(query.getOutputStream().getId(),query.getOutputRate(),query.getSelector().getGroupByList().size() != 0,isWindow,siddhiAppContext.getScheduledExecutorService(),siddhiAppContext,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
    }
    siddhiAppContext.addEternalReferencedHolder(outputRateLimiter);
    OutputCallback outputCallback=OutputParser.constructOutputCallback(query.getOutputStream(),streamRuntime.getMetaComplexEvent().getOutputStreamDefinition(),tableMap,windowMap,siddhiAppContext,!(streamRuntime instanceof SingleStreamRuntime),queryName);
    QueryParserHelper.reduceMetaComplexEvent(streamRuntime.getMetaComplexEvent());
    QueryParserHelper.updateVariablePosition(streamRuntime.getMetaComplexEvent(),executors);
    QueryParserHelper.initStreamRuntime(streamRuntime,streamRuntime.getMetaComplexEvent(),lockWrapper,queryName);
    selector.setEventPopulator(StateEventPopulatorFactory.constructEventPopulator(streamRuntime.getMetaComplexEvent()));
    queryRuntime=new QueryRuntime(query,siddhiAppContext,streamRuntime,selector,outputRateLimiter,outputCallback,streamRuntime.getMetaComplexEvent(),lockWrapper != null,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
      ((WrappedSnapshotOutputRateLimiter)outputRateLimiter).init(streamRuntime.getMetaComplexEvent().getOutputStreamDefinition().getAttributeList().size(),selector.getAttributeProcessorList(),streamRuntime.getMetaComplexEvent());
    }
    outputRateLimiter.init(siddhiAppContext,lockWrapper,queryName);
  }
 catch (  DuplicateDefinitionException e) {
    if (nameElement != null) {
      throw new DuplicateDefinitionException(e.getMessageWithOutContext() + ""String_Node_Str"" + nameElement.getValue(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
 else {
      throw new DuplicateDefinitionException(e.getMessage(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
  }
catch (  Throwable t) {
    ExceptionUtil.populateQueryContext(t,query,siddhiAppContext);
    throw t;
  }
  return queryRuntime;
}","/** 
 * Parse a query and return corresponding QueryRuntime.
 * @param query                    query to be parsed.
 * @param siddhiAppContext         associated Siddhi app context.
 * @param streamDefinitionMap      keyvalue containing user given stream definitions.
 * @param tableDefinitionMap       keyvalue containing table definitions.
 * @param windowDefinitionMap      keyvalue containing window definition map.
 * @param aggregationDefinitionMap keyvalue containing aggregation definition map.
 * @param tableMap                 keyvalue containing event tables.
 * @param aggregationMap           keyvalue containing aggrigation runtimes.
 * @param windowMap                keyvalue containing event window map.
 * @param lockSynchronizer         Lock synchronizer for sync the lock across queries.
 * @param queryIndex               query index to identify unknown query by number
 * @return queryRuntime
 */
public static QueryRuntime parse(Query query,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,AggregationRuntime> aggregationMap,Map<String,Window> windowMap,LockSynchronizer lockSynchronizer,String queryIndex){
  List<VariableExpressionExecutor> executors=new ArrayList<VariableExpressionExecutor>();
  QueryRuntime queryRuntime;
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",query.getAnnotations());
    String queryName=null;
    if (nameElement != null) {
      queryName=nameElement.getValue();
    }
 else {
      queryName=""String_Node_Str"" + queryIndex + ""String_Node_Str""+ UUID.randomUUID().toString();
    }
    latencyTracker=QueryParserHelper.createLatencyTracker(siddhiAppContext,queryName,SiddhiConstants.METRIC_INFIX_QUERIES,null);
    OutputStream.OutputEventType outputEventType=query.getOutputStream().getOutputEventType();
    boolean outputExpectsExpiredEvents=false;
    if (outputEventType != OutputStream.OutputEventType.CURRENT_EVENTS) {
      outputExpectsExpiredEvents=true;
    }
    StreamRuntime streamRuntime=InputStreamParser.parse(query.getInputStream(),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,executors,latencyTracker,outputExpectsExpiredEvents,queryName);
    QuerySelector selector=SelectorParser.parse(query.getSelector(),query.getOutputStream(),siddhiAppContext,streamRuntime.getMetaComplexEvent(),tableMap,executors,queryName,SiddhiConstants.UNKNOWN_STATE);
    boolean isWindow=query.getInputStream() instanceof JoinInputStream;
    if (!isWindow && query.getInputStream() instanceof SingleInputStream) {
      for (      StreamHandler streamHandler : ((SingleInputStream)query.getInputStream()).getStreamHandlers()) {
        if (streamHandler instanceof org.wso2.siddhi.query.api.execution.query.input.handler.Window) {
          isWindow=true;
          break;
        }
      }
    }
    Element synchronizedElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",null,query.getAnnotations());
    if (synchronizedElement != null) {
      if (!(""String_Node_Str"".equalsIgnoreCase(synchronizedElement.getValue()))) {
        lockWrapper=new LockWrapper(""String_Node_Str"");
        lockWrapper.setLock(new ReentrantLock());
      }
    }
 else {
      if (isWindow || !(streamRuntime instanceof SingleStreamRuntime)) {
        if (streamRuntime instanceof JoinStreamRuntime) {
          MetaStateEvent metaStateEvent=(MetaStateEvent)streamRuntime.getMetaComplexEvent();
          MetaStreamEvent[] metaStreamEvents=metaStateEvent.getMetaStreamEvents();
          if (metaStreamEvents[0].getEventType() == EventType.WINDOW && metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            LockWrapper leftLockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
            LockWrapper rightLockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
            if (!leftLockWrapper.equals(rightLockWrapper)) {
              lockSynchronizer.sync(leftLockWrapper,rightLockWrapper);
            }
            lockWrapper=leftLockWrapper;
          }
 else           if (metaStreamEvents[0].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[0].getLastInputDefinition().getId()).getLock();
          }
 else           if (metaStreamEvents[1].getEventType() == EventType.WINDOW) {
            lockWrapper=windowMap.get(metaStreamEvents[1].getLastInputDefinition().getId()).getLock();
          }
 else {
            lockWrapper=new LockWrapper(""String_Node_Str"");
            lockWrapper.setLock(new ReentrantLock());
          }
        }
 else {
          lockWrapper=new LockWrapper(""String_Node_Str"");
          lockWrapper.setLock(new ReentrantLock());
        }
      }
    }
    OutputRateLimiter outputRateLimiter=OutputParser.constructOutputRateLimiter(query.getOutputStream().getId(),query.getOutputRate(),query.getSelector().getGroupByList().size() != 0,isWindow,siddhiAppContext.getScheduledExecutorService(),siddhiAppContext,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
    }
    siddhiAppContext.addEternalReferencedHolder(outputRateLimiter);
    OutputCallback outputCallback=OutputParser.constructOutputCallback(query.getOutputStream(),streamRuntime.getMetaComplexEvent().getOutputStreamDefinition(),tableMap,windowMap,siddhiAppContext,!(streamRuntime instanceof SingleStreamRuntime),queryName);
    QueryParserHelper.reduceMetaComplexEvent(streamRuntime.getMetaComplexEvent());
    QueryParserHelper.updateVariablePosition(streamRuntime.getMetaComplexEvent(),executors);
    QueryParserHelper.initStreamRuntime(streamRuntime,streamRuntime.getMetaComplexEvent(),lockWrapper,queryName);
    selector.setEventPopulator(StateEventPopulatorFactory.constructEventPopulator(streamRuntime.getMetaComplexEvent()));
    queryRuntime=new QueryRuntime(query,siddhiAppContext,streamRuntime,selector,outputRateLimiter,outputCallback,streamRuntime.getMetaComplexEvent(),lockWrapper != null,queryName);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      selector.setBatchingEnabled(false);
      ((WrappedSnapshotOutputRateLimiter)outputRateLimiter).init(streamRuntime.getMetaComplexEvent().getOutputStreamDefinition().getAttributeList().size(),selector.getAttributeProcessorList(),streamRuntime.getMetaComplexEvent());
    }
    outputRateLimiter.init(siddhiAppContext,lockWrapper,queryName);
  }
 catch (  DuplicateDefinitionException e) {
    if (nameElement != null) {
      throw new DuplicateDefinitionException(e.getMessageWithOutContext() + ""String_Node_Str"" + nameElement.getValue(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
 else {
      throw new DuplicateDefinitionException(e.getMessage(),e,e.getQueryContextStartIndex(),e.getQueryContextEndIndex(),siddhiAppContext.getName(),siddhiAppContext.getSiddhiAppString());
    }
  }
catch (  Throwable t) {
    ExceptionUtil.populateQueryContext(t,query,siddhiAppContext);
    throw t;
  }
  return queryRuntime;
}",0.9980034606681752
28757,"/** 
 * Method to construct AttributeProcessor list for the selector
 * @param selector                    Selector
 * @param id                          stream id
 * @param siddhiAppContext            siddhi app context
 * @param metaComplexEvent            meta ComplexEvent
 * @param tableMap                    Table Map
 * @param variableExpressionExecutors list of VariableExpressionExecutors
 * @param outputStream
 * @return list of AttributeProcessors
 */
private static List<AttributeProcessor> getAttributeProcessors(Selector selector,String id,SiddhiAppContext siddhiAppContext,MetaComplexEvent metaComplexEvent,Map<String,Table> tableMap,List<VariableExpressionExecutor> variableExpressionExecutors,OutputStream outputStream,String queryName){
  List<AttributeProcessor> attributeProcessorList=new ArrayList<AttributeProcessor>();
  StreamDefinition outputDefinition=StreamDefinition.id(id);
  outputDefinition.setQueryContextStartIndex(outputStream.getQueryContextStartIndex());
  outputDefinition.setQueryContextEndIndex(outputStream.getQueryContextEndIndex());
  List<OutputAttribute> outputAttributes=selector.getSelectionList();
  if (selector.getSelectionList().size() == 0) {
    if (metaComplexEvent instanceof MetaStreamEvent) {
      List<Attribute> attributeList=((MetaStreamEvent)metaComplexEvent).getLastInputDefinition().getAttributeList();
      for (      Attribute attribute : attributeList) {
        outputAttributes.add(new OutputAttribute(new Variable(attribute.getName())));
      }
    }
 else {
      for (      MetaStreamEvent metaStreamEvent : ((MetaStateEvent)metaComplexEvent).getMetaStreamEvents()) {
        List<Attribute> attributeList=metaStreamEvent.getLastInputDefinition().getAttributeList();
        for (        Attribute attribute : attributeList) {
          OutputAttribute outputAttribute=new OutputAttribute(new Variable(attribute.getName()));
          if (!outputAttributes.contains(outputAttribute)) {
            outputAttributes.add(outputAttribute);
          }
 else {
            List<AbstractDefinition> definitions=new ArrayList<AbstractDefinition>();
            for (            MetaStreamEvent aMetaStreamEvent : ((MetaStateEvent)metaComplexEvent).getMetaStreamEvents()) {
              definitions.add(aMetaStreamEvent.getLastInputDefinition());
            }
            throw new DuplicateAttributeException(""String_Node_Str"" + definitions,outputStream.getQueryContextStartIndex(),outputStream.getQueryContextEndIndex());
          }
        }
      }
    }
  }
  int i=0;
  for (  OutputAttribute outputAttribute : outputAttributes) {
    ExpressionExecutor expressionExecutor=ExpressionParser.parseExpression(outputAttribute.getExpression(),metaComplexEvent,SiddhiConstants.UNKNOWN_STATE,tableMap,variableExpressionExecutors,siddhiAppContext,!(selector.getGroupByList().isEmpty()),0,queryName);
    if (expressionExecutor instanceof VariableExpressionExecutor) {
      VariableExpressionExecutor executor=((VariableExpressionExecutor)expressionExecutor);
      if (metaComplexEvent instanceof MetaStateEvent) {
        ((MetaStateEvent)metaComplexEvent).addOutputData(new MetaStateEventAttribute(executor.getAttribute(),executor.getPosition()));
      }
 else {
        ((MetaStreamEvent)metaComplexEvent).addOutputData(executor.getAttribute());
      }
      outputDefinition.attribute(outputAttribute.getRename(),((VariableExpressionExecutor)expressionExecutor).getAttribute().getType());
    }
 else {
      if (metaComplexEvent instanceof MetaStateEvent) {
        ((MetaStateEvent)metaComplexEvent).addOutputData(null);
      }
 else {
        ((MetaStreamEvent)metaComplexEvent).addOutputData(null);
      }
      AttributeProcessor attributeProcessor=new AttributeProcessor(expressionExecutor);
      attributeProcessor.setOutputPosition(i);
      attributeProcessorList.add(attributeProcessor);
      outputDefinition.attribute(outputAttribute.getRename(),attributeProcessor.getOutputType());
    }
    i++;
  }
  metaComplexEvent.setOutputDefinition(outputDefinition);
  return attributeProcessorList;
}","/** 
 * Method to construct AttributeProcessor list for the selector.
 * @param selector                    Selector
 * @param id                          stream id
 * @param siddhiAppContext            siddhi app context
 * @param metaComplexEvent            meta ComplexEvent
 * @param tableMap                    Table Map
 * @param variableExpressionExecutors list of VariableExpressionExecutors
 * @param outputStream
 * @return list of AttributeProcessors
 */
private static List<AttributeProcessor> getAttributeProcessors(Selector selector,String id,SiddhiAppContext siddhiAppContext,MetaComplexEvent metaComplexEvent,Map<String,Table> tableMap,List<VariableExpressionExecutor> variableExpressionExecutors,OutputStream outputStream,String queryName,int metaPosition){
  List<AttributeProcessor> attributeProcessorList=new ArrayList<>();
  StreamDefinition outputDefinition=StreamDefinition.id(id);
  outputDefinition.setQueryContextStartIndex(outputStream.getQueryContextStartIndex());
  outputDefinition.setQueryContextEndIndex(outputStream.getQueryContextEndIndex());
  List<OutputAttribute> outputAttributes=selector.getSelectionList();
  if (selector.getSelectionList().size() == 0) {
    if (metaComplexEvent instanceof MetaStreamEvent) {
      List<Attribute> attributeList=((MetaStreamEvent)metaComplexEvent).getLastInputDefinition().getAttributeList();
      for (      Attribute attribute : attributeList) {
        outputAttributes.add(new OutputAttribute(new Variable(attribute.getName())));
      }
    }
 else {
      int position=0;
      for (      MetaStreamEvent metaStreamEvent : ((MetaStateEvent)metaComplexEvent).getMetaStreamEvents()) {
        if (metaPosition == SiddhiConstants.UNKNOWN_STATE || metaPosition == position) {
          List<Attribute> attributeList=metaStreamEvent.getLastInputDefinition().getAttributeList();
          for (          Attribute attribute : attributeList) {
            OutputAttribute outputAttribute=new OutputAttribute(new Variable(attribute.getName()));
            if (!outputAttributes.contains(outputAttribute)) {
              outputAttributes.add(outputAttribute);
            }
 else {
              List<AbstractDefinition> definitions=new ArrayList<>();
              for (              MetaStreamEvent aMetaStreamEvent : ((MetaStateEvent)metaComplexEvent).getMetaStreamEvents()) {
                definitions.add(aMetaStreamEvent.getLastInputDefinition());
              }
              throw new DuplicateAttributeException(""String_Node_Str"" + definitions,outputStream.getQueryContextStartIndex(),outputStream.getQueryContextEndIndex());
            }
          }
        }
        ++position;
      }
    }
  }
  int i=0;
  for (  OutputAttribute outputAttribute : outputAttributes) {
    ExpressionExecutor expressionExecutor=ExpressionParser.parseExpression(outputAttribute.getExpression(),metaComplexEvent,SiddhiConstants.UNKNOWN_STATE,tableMap,variableExpressionExecutors,siddhiAppContext,!(selector.getGroupByList().isEmpty()),0,queryName);
    if (expressionExecutor instanceof VariableExpressionExecutor) {
      VariableExpressionExecutor executor=((VariableExpressionExecutor)expressionExecutor);
      if (metaComplexEvent instanceof MetaStateEvent) {
        ((MetaStateEvent)metaComplexEvent).addOutputData(new MetaStateEventAttribute(executor.getAttribute(),executor.getPosition()));
      }
 else {
        ((MetaStreamEvent)metaComplexEvent).addOutputData(executor.getAttribute());
      }
      outputDefinition.attribute(outputAttribute.getRename(),((VariableExpressionExecutor)expressionExecutor).getAttribute().getType());
    }
 else {
      if (metaComplexEvent instanceof MetaStateEvent) {
        ((MetaStateEvent)metaComplexEvent).addOutputData(null);
      }
 else {
        ((MetaStreamEvent)metaComplexEvent).addOutputData(null);
      }
      AttributeProcessor attributeProcessor=new AttributeProcessor(expressionExecutor);
      attributeProcessor.setOutputPosition(i);
      attributeProcessorList.add(attributeProcessor);
      outputDefinition.attribute(outputAttribute.getRename(),attributeProcessor.getOutputType());
    }
    i++;
  }
  metaComplexEvent.setOutputDefinition(outputDefinition);
  return attributeProcessorList;
}",0.6964564564564565
28758,"/** 
 * Parse Selector portion of a query and return corresponding QuerySelector
 * @param selector                    selector to be parsed
 * @param outputStream                output stream
 * @param siddhiAppContext            query to be parsed
 * @param metaComplexEvent            Meta event used to collect execution info of stream associated with query
 * @param tableMap                    Table Map
 * @param variableExpressionExecutors variable expression executors
 * @param queryName                   query name of selector belongs to.
 * @return QuerySelector
 */
public static QuerySelector parse(Selector selector,OutputStream outputStream,SiddhiAppContext siddhiAppContext,MetaComplexEvent metaComplexEvent,Map<String,Table> tableMap,List<VariableExpressionExecutor> variableExpressionExecutors,String queryName){
  boolean currentOn=false;
  boolean expiredOn=false;
  String id=null;
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.CURRENT_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    currentOn=true;
  }
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.EXPIRED_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    expiredOn=true;
  }
  id=outputStream.getId();
  containsAggregatorThreadLocal.remove();
  QuerySelector querySelector=new QuerySelector(id,selector,currentOn,expiredOn,siddhiAppContext);
  List<AttributeProcessor> attributeProcessors=getAttributeProcessors(selector,id,siddhiAppContext,metaComplexEvent,tableMap,variableExpressionExecutors,outputStream,queryName);
  querySelector.setAttributeProcessorList(attributeProcessors,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  ConditionExpressionExecutor havingCondition=generateHavingExecutor(selector.getHavingExpression(),metaComplexEvent,siddhiAppContext,tableMap,variableExpressionExecutors,queryName);
  querySelector.setHavingConditionExecutor(havingCondition,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  if (!selector.getGroupByList().isEmpty()) {
    querySelector.setGroupByKeyGenerator(new GroupByKeyGenerator(selector.getGroupByList(),metaComplexEvent,null,variableExpressionExecutors,siddhiAppContext,queryName));
  }
  return querySelector;
}","/** 
 * Parse Selector portion of a query and return corresponding QuerySelector.
 * @param selector                    selector to be parsed
 * @param outputStream                output stream
 * @param siddhiAppContext            query to be parsed
 * @param metaComplexEvent            Meta event used to collect execution info of stream associated with query
 * @param tableMap                    Table Map
 * @param variableExpressionExecutors variable expression executors
 * @param queryName                   query name of selector belongs to.
 * @return QuerySelector
 */
public static QuerySelector parse(Selector selector,OutputStream outputStream,SiddhiAppContext siddhiAppContext,MetaComplexEvent metaComplexEvent,Map<String,Table> tableMap,List<VariableExpressionExecutor> variableExpressionExecutors,String queryName,int metaPosition){
  boolean currentOn=false;
  boolean expiredOn=false;
  String id=null;
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.CURRENT_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    currentOn=true;
  }
  if (outputStream.getOutputEventType() == OutputStream.OutputEventType.EXPIRED_EVENTS || outputStream.getOutputEventType() == OutputStream.OutputEventType.ALL_EVENTS) {
    expiredOn=true;
  }
  id=outputStream.getId();
  containsAggregatorThreadLocal.remove();
  QuerySelector querySelector=new QuerySelector(id,selector,currentOn,expiredOn,siddhiAppContext);
  List<AttributeProcessor> attributeProcessors=getAttributeProcessors(selector,id,siddhiAppContext,metaComplexEvent,tableMap,variableExpressionExecutors,outputStream,queryName,metaPosition);
  querySelector.setAttributeProcessorList(attributeProcessors,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  ConditionExpressionExecutor havingCondition=generateHavingExecutor(selector.getHavingExpression(),metaComplexEvent,siddhiAppContext,tableMap,variableExpressionExecutors,queryName);
  querySelector.setHavingConditionExecutor(havingCondition,""String_Node_Str"".equals(containsAggregatorThreadLocal.get()));
  containsAggregatorThreadLocal.remove();
  if (!selector.getGroupByList().isEmpty()) {
    querySelector.setGroupByKeyGenerator(new GroupByKeyGenerator(selector.getGroupByList(),metaComplexEvent,null,variableExpressionExecutors,siddhiAppContext,queryName));
  }
  return querySelector;
}",0.9935857645354852
28759,"private static void populateStoreQueryRuntime(StoreQueryRuntime storeQueryRuntime,MatchingMetaInfoHolder metaStreamInfoHolder,Selector selector,List<VariableExpressionExecutor> variableExpressionExecutors,SiddhiAppContext siddhiAppContext,Map<String,Table> tableMap,String queryName){
  QuerySelector querySelector=SelectorParser.parse(selector,new ReturnStream(OutputStream.OutputEventType.CURRENT_EVENTS),siddhiAppContext,metaStreamInfoHolder.getMetaStateEvent(),tableMap,variableExpressionExecutors,queryName);
  QueryParserHelper.reduceMetaComplexEvent(metaStreamInfoHolder.getMetaStateEvent());
  QueryParserHelper.updateVariablePosition(metaStreamInfoHolder.getMetaStateEvent(),variableExpressionExecutors);
  querySelector.setEventPopulator(StateEventPopulatorFactory.constructEventPopulator(metaStreamInfoHolder.getMetaStateEvent()));
  storeQueryRuntime.setStateEventPool(new StateEventPool(metaStreamInfoHolder.getMetaStateEvent(),5));
  storeQueryRuntime.setSelector(querySelector);
}","private static void populateStoreQueryRuntime(StoreQueryRuntime storeQueryRuntime,MatchingMetaInfoHolder metaStreamInfoHolder,Selector selector,List<VariableExpressionExecutor> variableExpressionExecutors,SiddhiAppContext siddhiAppContext,Map<String,Table> tableMap,String queryName,int metaPosition){
  QuerySelector querySelector=SelectorParser.parse(selector,new ReturnStream(OutputStream.OutputEventType.CURRENT_EVENTS),siddhiAppContext,metaStreamInfoHolder.getMetaStateEvent(),tableMap,variableExpressionExecutors,queryName,metaPosition);
  QueryParserHelper.reduceMetaComplexEvent(metaStreamInfoHolder.getMetaStateEvent());
  QueryParserHelper.updateVariablePosition(metaStreamInfoHolder.getMetaStateEvent(),variableExpressionExecutors);
  querySelector.setEventPopulator(StateEventPopulatorFactory.constructEventPopulator(metaStreamInfoHolder.getMetaStateEvent()));
  storeQueryRuntime.setStateEventPool(new StateEventPool(metaStreamInfoHolder.getMetaStateEvent(),5));
  storeQueryRuntime.setSelector(querySelector);
}",0.9851485148514852
28760,"/** 
 * Parse a storeQuery and return corresponding StoreQueryRuntime.
 * @param storeQuery       storeQuery to be parsed.
 * @param siddhiAppContext associated Siddhi app context.
 * @param tableMap         keyvalue containing tables.
 * @param windowMap        keyvalue containing windows.
 * @param aggregationMap   keyvalue containing aggregation runtimes.
 * @return StoreQueryRuntime
 */
public static StoreQueryRuntime parse(StoreQuery storeQuery,SiddhiAppContext siddhiAppContext,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,AggregationRuntime> aggregationMap){
  String queryName=""String_Node_Str"" + storeQuery.getInputStore().getStoreId();
  InputStore inputStore=storeQuery.getInputStore();
  Within within=null;
  Expression per=null;
  Expression onCondition=Expression.value(true);
  MetaStreamEvent metaStreamEvent=new MetaStreamEvent();
  metaStreamEvent.setInputReferenceId(inputStore.getStoreReferenceId());
  if (inputStore instanceof AggregationInputStore) {
    AggregationInputStore aggregationInputStore=(AggregationInputStore)inputStore;
    if (aggregationMap.get(inputStore.getStoreId()) == null) {
      throw new StoreQueryCreationException(""String_Node_Str"" + inputStore.getStoreId() + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (aggregationInputStore.getPer() != null && aggregationInputStore.getWithin() != null) {
      within=aggregationInputStore.getWithin();
      per=aggregationInputStore.getPer();
    }
 else     if (aggregationInputStore.getPer() != null || aggregationInputStore.getWithin() != null) {
      throw new StoreQueryCreationException(inputStore.getStoreId() + ""String_Node_Str"");
    }
    if (((AggregationInputStore)inputStore).getOnCondition() != null) {
      onCondition=((AggregationInputStore)inputStore).getOnCondition();
    }
  }
 else   if (inputStore instanceof ConditionInputStore) {
    if (((ConditionInputStore)inputStore).getOnCondition() != null) {
      onCondition=((ConditionInputStore)inputStore).getOnCondition();
    }
  }
  List<VariableExpressionExecutor> variableExpressionExecutors=new ArrayList<>();
  Table table=tableMap.get(inputStore.getStoreId());
  if (table != null) {
    metaStreamEvent.setEventType(EventType.TABLE);
    initMetaStreamEvent(metaStreamEvent,table.getTableDefinition());
    MatchingMetaInfoHolder metaStreamInfoHolder=generateMatchingMetaInfoHolder(metaStreamEvent,table.getTableDefinition());
    CompiledCondition compiledCondition=table.compileCondition(onCondition,metaStreamInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
    StoreQueryRuntime storeQueryRuntime=new StoreQueryRuntime(table,compiledCondition,queryName,metaStreamEvent.getEventType());
    populateStoreQueryRuntime(storeQueryRuntime,metaStreamInfoHolder,storeQuery.getSelector(),variableExpressionExecutors,siddhiAppContext,tableMap,queryName);
    return storeQueryRuntime;
  }
 else {
    AggregationRuntime aggregation=aggregationMap.get(inputStore.getStoreId());
    if (aggregation != null) {
      metaStreamEvent.setEventType(EventType.AGGREGATE);
      initMetaStreamEvent(metaStreamEvent,aggregation.getAggregationDefinition());
      MatchingMetaInfoHolder metaStreamInfoHolder=generateMatchingMetaInfoHolder(metaStreamEvent,aggregation.getAggregationDefinition());
      CompiledCondition compiledCondition=aggregation.compileExpression(onCondition,within,per,metaStreamInfoHolder,variableExpressionExecutors,tableMap,queryName,siddhiAppContext);
      metaStreamInfoHolder=aggregation.getAlteredMatchingMetaInfoHolder();
      StoreQueryRuntime storeQueryRuntime=new StoreQueryRuntime(aggregation,compiledCondition,queryName,metaStreamEvent.getEventType());
      populateStoreQueryRuntimeForAggregator(storeQueryRuntime,metaStreamInfoHolder,storeQuery.getSelector(),variableExpressionExecutors,siddhiAppContext,tableMap,queryName);
      ComplexEventPopulater complexEventPopulater=StreamEventPopulaterFactory.constructEventPopulator(metaStreamInfoHolder.getMetaStateEvent().getMetaStreamEvent(0),0,((IncrementalAggregateCompileCondition)compiledCondition).getAdditionalAttributes());
      ((IncrementalAggregateCompileCondition)compiledCondition).setComplexEventPopulater(complexEventPopulater);
      return storeQueryRuntime;
    }
 else {
      Window window=windowMap.get(inputStore.getStoreId());
      if (window != null) {
        metaStreamEvent.setEventType(EventType.WINDOW);
        initMetaStreamEvent(metaStreamEvent,window.getWindowDefinition());
        MatchingMetaInfoHolder metaStreamInfoHolder=generateMatchingMetaInfoHolder(metaStreamEvent,window.getWindowDefinition());
        CompiledCondition compiledCondition=window.compileCondition(onCondition,generateMatchingMetaInfoHolder(metaStreamEvent,window.getWindowDefinition()),siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
        StoreQueryRuntime storeQueryRuntime=new StoreQueryRuntime(window,compiledCondition,queryName,metaStreamEvent.getEventType());
        populateStoreQueryRuntime(storeQueryRuntime,metaStreamInfoHolder,storeQuery.getSelector(),variableExpressionExecutors,siddhiAppContext,tableMap,queryName);
        return storeQueryRuntime;
      }
 else {
        throw new StoreQueryCreationException(inputStore.getStoreId() + ""String_Node_Str"");
      }
    }
  }
}","/** 
 * Parse a storeQuery and return corresponding StoreQueryRuntime.
 * @param storeQuery       storeQuery to be parsed.
 * @param siddhiAppContext associated Siddhi app context.
 * @param tableMap         keyvalue containing tables.
 * @param windowMap        keyvalue containing windows.
 * @param aggregationMap   keyvalue containing aggregation runtimes.
 * @return StoreQueryRuntime
 */
public static StoreQueryRuntime parse(StoreQuery storeQuery,SiddhiAppContext siddhiAppContext,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,AggregationRuntime> aggregationMap){
  String queryName=""String_Node_Str"" + storeQuery.getInputStore().getStoreId();
  InputStore inputStore=storeQuery.getInputStore();
  int metaPosition=SiddhiConstants.UNKNOWN_STATE;
  Within within=null;
  Expression per=null;
  Expression onCondition=Expression.value(true);
  MetaStreamEvent metaStreamEvent=new MetaStreamEvent();
  metaStreamEvent.setInputReferenceId(inputStore.getStoreReferenceId());
  if (inputStore instanceof AggregationInputStore) {
    AggregationInputStore aggregationInputStore=(AggregationInputStore)inputStore;
    if (aggregationMap.get(inputStore.getStoreId()) == null) {
      throw new StoreQueryCreationException(""String_Node_Str"" + inputStore.getStoreId() + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (aggregationInputStore.getPer() != null && aggregationInputStore.getWithin() != null) {
      within=aggregationInputStore.getWithin();
      per=aggregationInputStore.getPer();
    }
 else     if (aggregationInputStore.getPer() != null || aggregationInputStore.getWithin() != null) {
      throw new StoreQueryCreationException(inputStore.getStoreId() + ""String_Node_Str"");
    }
    if (((AggregationInputStore)inputStore).getOnCondition() != null) {
      onCondition=((AggregationInputStore)inputStore).getOnCondition();
    }
  }
 else   if (inputStore instanceof ConditionInputStore) {
    if (((ConditionInputStore)inputStore).getOnCondition() != null) {
      onCondition=((ConditionInputStore)inputStore).getOnCondition();
    }
  }
  List<VariableExpressionExecutor> variableExpressionExecutors=new ArrayList<>();
  Table table=tableMap.get(inputStore.getStoreId());
  if (table != null) {
    metaStreamEvent.setEventType(EventType.TABLE);
    initMetaStreamEvent(metaStreamEvent,table.getTableDefinition());
    MatchingMetaInfoHolder metaStreamInfoHolder=generateMatchingMetaInfoHolder(metaStreamEvent,table.getTableDefinition());
    CompiledCondition compiledCondition=table.compileCondition(onCondition,metaStreamInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
    StoreQueryRuntime storeQueryRuntime=new StoreQueryRuntime(table,compiledCondition,queryName,metaStreamEvent.getEventType());
    populateStoreQueryRuntime(storeQueryRuntime,metaStreamInfoHolder,storeQuery.getSelector(),variableExpressionExecutors,siddhiAppContext,tableMap,queryName,metaPosition);
    return storeQueryRuntime;
  }
 else {
    AggregationRuntime aggregation=aggregationMap.get(inputStore.getStoreId());
    if (aggregation != null) {
      metaStreamEvent.setEventType(EventType.AGGREGATE);
      initMetaStreamEvent(metaStreamEvent,aggregation.getAggregationDefinition());
      MatchingMetaInfoHolder metaStreamInfoHolder=generateMatchingMetaInfoHolder(metaStreamEvent,aggregation.getAggregationDefinition());
      CompiledCondition compiledCondition=aggregation.compileExpression(onCondition,within,per,metaStreamInfoHolder,variableExpressionExecutors,tableMap,queryName,siddhiAppContext);
      metaStreamInfoHolder=aggregation.getAlteredMatchingMetaInfoHolder();
      StoreQueryRuntime storeQueryRuntime=new StoreQueryRuntime(aggregation,compiledCondition,queryName,metaStreamEvent.getEventType());
      metaPosition=1;
      populateStoreQueryRuntime(storeQueryRuntime,metaStreamInfoHolder,storeQuery.getSelector(),variableExpressionExecutors,siddhiAppContext,tableMap,queryName,metaPosition);
      ComplexEventPopulater complexEventPopulater=StreamEventPopulaterFactory.constructEventPopulator(metaStreamInfoHolder.getMetaStateEvent().getMetaStreamEvent(0),0,((IncrementalAggregateCompileCondition)compiledCondition).getAdditionalAttributes());
      ((IncrementalAggregateCompileCondition)compiledCondition).setComplexEventPopulater(complexEventPopulater);
      return storeQueryRuntime;
    }
 else {
      Window window=windowMap.get(inputStore.getStoreId());
      if (window != null) {
        metaStreamEvent.setEventType(EventType.WINDOW);
        initMetaStreamEvent(metaStreamEvent,window.getWindowDefinition());
        MatchingMetaInfoHolder metaStreamInfoHolder=generateMatchingMetaInfoHolder(metaStreamEvent,window.getWindowDefinition());
        CompiledCondition compiledCondition=window.compileCondition(onCondition,generateMatchingMetaInfoHolder(metaStreamEvent,window.getWindowDefinition()),siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
        StoreQueryRuntime storeQueryRuntime=new StoreQueryRuntime(window,compiledCondition,queryName,metaStreamEvent.getEventType());
        populateStoreQueryRuntime(storeQueryRuntime,metaStreamInfoHolder,storeQuery.getSelector(),variableExpressionExecutors,siddhiAppContext,tableMap,queryName,metaPosition);
        return storeQueryRuntime;
      }
 else {
        throw new StoreQueryCreationException(inputStore.getStoreId() + ""String_Node_Str"");
      }
    }
  }
}",0.9680059523809524
28761,"@Override public void publish(Object payload,DynamicOptions dynamicOptions) throws ConnectionUnavailableException {
  System.out.println(payload + ""String_Node_Str"" + failOnce);
  if (fail || failOnce) {
    failOnce=false;
    numberOfErrorOccurred++;
    throw new ConnectionUnavailableException(""String_Node_Str"");
  }
  super.publish(payload,dynamicOptions);
}","@Override public void publish(Object payload,DynamicOptions dynamicOptions) throws ConnectionUnavailableException {
  if (fail || failOnce) {
    failOnce=false;
    numberOfErrorOccurred++;
    throw new ConnectionUnavailableException(""String_Node_Str"");
  }
  super.publish(payload,dynamicOptions);
}",0.4474474474474474
28762,"@Override public void publish(Object payload,DynamicOptions dynamicOptions) throws ConnectionUnavailableException {
  System.out.println(payload + ""String_Node_Str"" + failOnce);
  if (fail || failOnce) {
    failOnce=false;
    numberOfErrorOccurred++;
    throw new ConnectionUnavailableException(""String_Node_Str"");
  }
  super.publish(payload,dynamicOptions);
}","@Override public void publish(Object payload,DynamicOptions dynamicOptions) throws ConnectionUnavailableException {
  if (fail || failOnce) {
    failOnce=false;
    numberOfErrorOccurred++;
    throw new ConnectionUnavailableException(""String_Node_Str"");
  }
  super.publish(payload,dynamicOptions);
}",0.4474474474474474
28763,"private void monitorQueryMemoryUsage(){
  memoryUsageTracker=siddhiAppContext.getSiddhiContext().getStatisticsConfiguration().getFactory().createMemoryUsageTracker(siddhiAppContext.getStatisticsManager());
  for (  Map.Entry entry : queryProcessorMap.entrySet()) {
    registerForMemoryUsage(entry);
  }
  for (  Map.Entry entry : partitionMap.entrySet()) {
    ConcurrentMap<String,QueryRuntime> queryRuntime=((PartitionRuntime)entry.getValue()).getMetaQueryRuntimeMap();
    for (    Map.Entry queryEntry : queryRuntime.entrySet()) {
      registerForMemoryUsage(queryEntry);
    }
  }
}","private void monitorQueryMemoryUsage(){
  memoryUsageTracker=siddhiAppContext.getSiddhiContext().getStatisticsConfiguration().getFactory().createMemoryUsageTracker(siddhiAppContext.getStatisticsManager());
  for (  Map.Entry<String,QueryRuntime> entry : queryProcessorMap.entrySet()) {
    QueryParserHelper.registerMemoryUsageTracking(entry.getKey(),entry.getValue(),SiddhiConstants.METRIC_INFIX_QUERIES,siddhiAppContext,memoryUsageTracker);
  }
  for (  PartitionRuntime partitionRuntime : partitionMap.values()) {
    partitionRuntime.setMemoryUsageTracker(memoryUsageTracker);
  }
  for (  Map.Entry<String,Table> entry : tableMap.entrySet()) {
    QueryParserHelper.registerMemoryUsageTracking(entry.getKey(),entry.getValue(),SiddhiConstants.METRIC_INFIX_TABLES,siddhiAppContext,memoryUsageTracker);
  }
  for (  Map.Entry<String,Window> entry : windowMap.entrySet()) {
    QueryParserHelper.registerMemoryUsageTracking(entry.getKey(),entry.getValue(),SiddhiConstants.METRIC_INFIX_WINDOWS,siddhiAppContext,memoryUsageTracker);
  }
  for (  Map.Entry<String,AggregationRuntime> entry : aggregationMap.entrySet()) {
    QueryParserHelper.registerMemoryUsageTracking(entry.getKey(),entry.getValue(),SiddhiConstants.METRIC_INFIX_AGGREGATIONS,siddhiAppContext,memoryUsageTracker);
  }
}",0.3818666666666667
28764,"private synchronized void clonePartition(String key){
  PartitionInstanceRuntime partitionInstance=this.partitionInstanceRuntimeMap.get(key);
  if (partitionInstance == null) {
    List<QueryRuntime> queryRuntimeList=new ArrayList<QueryRuntime>();
    List<QueryRuntime> partitionedQueryRuntimeList=new ArrayList<QueryRuntime>();
    for (    QueryRuntime queryRuntime : metaQueryRuntimeMap.values()) {
      QueryRuntime clonedQueryRuntime=queryRuntime.clone(key,localStreamJunctionMap);
      queryRuntimeList.add(clonedQueryRuntime);
      if (queryRuntime.isFromLocalStream()) {
        for (int i=0; i < clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().size(); i++) {
          String streamId=queryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver().getStreamId();
          StreamDefinition streamDefinition;
          if (streamId.startsWith(""String_Node_Str"")) {
            streamDefinition=(StreamDefinition)localStreamDefinitionMap.get(streamId);
          }
 else {
            streamDefinition=(StreamDefinition)streamDefinitionMap.get(streamId);
          }
          StreamJunction streamJunction=localStreamJunctionMap.get(streamId + key);
          if (streamJunction == null) {
            streamJunction=new StreamJunction(streamDefinition,siddhiAppContext.getExecutorService(),siddhiAppContext.getBufferSize(),siddhiAppContext);
            localStreamJunctionMap.put(streamId + key,streamJunction);
          }
          streamJunction.subscribe(clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver());
        }
      }
 else {
        partitionedQueryRuntimeList.add(clonedQueryRuntime);
      }
    }
    partitionInstanceRuntimeMap.putIfAbsent(key,new PartitionInstanceRuntime(key,queryRuntimeList));
    updatePartitionStreamReceivers(key,partitionedQueryRuntimeList);
  }
}","private synchronized void clonePartition(String key){
  PartitionInstanceRuntime partitionInstance=this.partitionInstanceRuntimeMap.get(key);
  if (partitionInstance == null) {
    List<QueryRuntime> queryRuntimeList=new ArrayList<QueryRuntime>();
    List<QueryRuntime> partitionedQueryRuntimeList=new ArrayList<QueryRuntime>();
    for (    QueryRuntime queryRuntime : metaQueryRuntimeMap.values()) {
      QueryRuntime clonedQueryRuntime=queryRuntime.clone(key,localStreamJunctionMap);
      queryRuntimeList.add(clonedQueryRuntime);
      QueryParserHelper.registerMemoryUsageTracking(clonedQueryRuntime.getQueryId(),queryRuntime,SiddhiConstants.METRIC_INFIX_QUERIES,siddhiAppContext,memoryUsageTracker);
      if (queryRuntime.isFromLocalStream()) {
        for (int i=0; i < clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().size(); i++) {
          String streamId=queryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver().getStreamId();
          StreamDefinition streamDefinition;
          if (streamId.startsWith(""String_Node_Str"")) {
            streamDefinition=(StreamDefinition)localStreamDefinitionMap.get(streamId);
          }
 else {
            streamDefinition=(StreamDefinition)streamDefinitionMap.get(streamId);
          }
          StreamJunction streamJunction=localStreamJunctionMap.get(streamId + key);
          if (streamJunction == null) {
            streamJunction=new StreamJunction(streamDefinition,siddhiAppContext.getExecutorService(),siddhiAppContext.getBufferSize(),siddhiAppContext);
            localStreamJunctionMap.put(streamId + key,streamJunction);
          }
          streamJunction.subscribe(clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver());
        }
      }
 else {
        partitionedQueryRuntimeList.add(clonedQueryRuntime);
      }
    }
    partitionInstanceRuntimeMap.putIfAbsent(key,new PartitionInstanceRuntime(key,queryRuntimeList));
    updatePartitionStreamReceivers(key,partitionedQueryRuntimeList);
  }
}",0.9565656565656566
28765,"public abstract void publish(Object payload,DynamicOptions transportOptions,int destinationId) throws ConnectionUnavailableException ;","public abstract void publish(Object payload,DynamicOptions transportOptions,Integer destinationId) throws ConnectionUnavailableException ;",0.9779411764705882
28766,"/** 
 * Remove a given destination from available set of destination IDs. Once this method is called for a given destination ID, that particular destination ID will not included in the return value of subsequent getDestinationsToPublish() is calls
 * @param destinationId the ID of the destination to be removed
 */
public void destinationFailed(int destinationId){
  destinationIds.remove(destinationId);
}","/** 
 * Remove a given destination from available set of destination IDs. Once this method is called for a given destination ID, that particular destination ID will not included in the return value of subsequent getDestinationsToPublish() is calls
 * @param destinationId the ID of the destination to be removed
 */
public void destinationFailed(Integer destinationId){
  destinationIds.remove(destinationId);
}",0.9877750611246944
28767,"@Override public void publish(Object payload,DynamicOptions transportOptions,int destinationId) throws ConnectionUnavailableException {
  try {
    Sink transport=transports.get(destinationId);
    transport.publish(payload,transportOptions);
  }
 catch (  ConnectionUnavailableException e) {
    strategy.destinationFailed(destinationId);
    log.warn(""String_Node_Str"" + destinationId);
    throw e;
  }
}","@Override public void publish(Object payload,DynamicOptions transportOptions,Integer destinationId) throws ConnectionUnavailableException {
  try {
    Sink transport=transports.get(destinationId);
    transport.publish(payload,transportOptions);
  }
 catch (  ConnectionUnavailableException e) {
    strategy.destinationFailed(destinationId);
    log.warn(""String_Node_Str"" + destinationId);
    throw e;
  }
}",0.9877750611246944
28768,"@Override public void publish(Object payload,DynamicOptions transportOptions,int destinationId) throws ConnectionUnavailableException {
  try {
    transportOptions.setVariableOptionIndex(destinationId);
    sink.publish(payload,transportOptions);
  }
 catch (  ConnectionUnavailableException e) {
    strategy.destinationFailed(destinationId);
    throw e;
  }
}","@Override public void publish(Object payload,DynamicOptions transportOptions,Integer destinationId) throws ConnectionUnavailableException {
  try {
    transportOptions.setVariableOptionIndex(destinationId);
    sink.publish(payload,transportOptions);
  }
 catch (  ConnectionUnavailableException e) {
    strategy.destinationFailed(destinationId);
    throw e;
  }
}",0.9863013698630136
28769,"public CompiledCondition compileExpression(Expression expression,Within within,Expression per,MatchingMetaInfoHolder matchingMetaInfoHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName,SiddhiAppContext siddhiAppContext){
  Map<TimePeriod.Duration,CompiledCondition> withinTableCompiledConditions=new HashMap<>();
  CompiledCondition withinInMemoryCompileCondition;
  CompiledCondition onCompiledCondition;
  perExpressionExecutor=ExpressionParser.parseExpression(per,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  if (perExpressionExecutor.getReturnType() != Attribute.Type.STRING) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + queryName + ""String_Node_Str""+ perExpressionExecutor.getReturnType(),per.getQueryContextStartIndex(),per.getQueryContextEndIndex());
  }
  onCompiledCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),expression,matchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  AbstractDefinition tableDefinition=((Table)aggregationTables.values().toArray()[0]).getTableDefinition();
  MatchingMetaInfoHolder newMatchingMetaInfoHolder=aggregationTableMetaInfoHolder(matchingMetaInfoHolder,tableDefinition);
  Expression withinExpression;
  Expression start=Expression.variable(""String_Node_Str"");
  Expression end=Expression.variable(""String_Node_Str"");
  Expression compareWithStartTime=Compare.compare(start,Compare.Operator.LESS_THAN_EQUAL,Expression.variable(""String_Node_Str""));
  Expression compareWithEndTime=Compare.compare(Expression.variable(""String_Node_Str""),Compare.Operator.LESS_THAN,end);
  withinExpression=Expression.and(compareWithStartTime,compareWithEndTime);
  Expression startEndTimeExpression;
  if (within.getTimeRange().size() == 1) {
    startEndTimeExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0));
  }
 else {
    startEndTimeExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0),within.getTimeRange().get(1));
  }
  startTimeEndTimeExpressionExecutor=ExpressionParser.parseExpression(startEndTimeExpression,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  for (  Map.Entry<TimePeriod.Duration,Table> entry : aggregationTables.entrySet()) {
    CompiledCondition withinTableCompileCondition=entry.getValue().compileCondition(withinExpression,newMatchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
    withinTableCompiledConditions.put(entry.getKey(),withinTableCompileCondition);
  }
  withinInMemoryCompileCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),withinExpression,newMatchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  return new IncrementalAggregateCompileCondition(withinTableCompiledConditions,withinInMemoryCompileCondition,onCompiledCondition,tableMetaStreamEvent,aggregateMetaSteamEvent,metaStreamArraySizes);
}","public CompiledCondition compileExpression(Expression expression,Within within,Expression per,MatchingMetaInfoHolder matchingMetaInfoHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName,SiddhiAppContext siddhiAppContext){
  Map<TimePeriod.Duration,CompiledCondition> withinTableCompiledConditions=new HashMap<>();
  CompiledCondition withinInMemoryCompileCondition;
  CompiledCondition onCompiledCondition;
  perExpressionExecutor=ExpressionParser.parseExpression(per,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  if (perExpressionExecutor.getReturnType() != Attribute.Type.STRING) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + queryName + ""String_Node_Str""+ perExpressionExecutor.getReturnType(),per.getQueryContextStartIndex(),per.getQueryContextEndIndex());
  }
  onCompiledCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),expression,matchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  AbstractDefinition tableDefinition=((Table)aggregationTables.values().toArray()[0]).getTableDefinition();
  MatchingMetaInfoHolder newMatchingMetaInfoHolder=aggregationTableMetaInfoHolder(matchingMetaInfoHolder,tableDefinition);
  Expression withinExpression;
  Expression start=Expression.variable(""String_Node_Str"");
  Expression end=Expression.variable(""String_Node_Str"");
  Expression compareWithStartTime=Compare.compare(start,Compare.Operator.LESS_THAN_EQUAL,Expression.variable(""String_Node_Str""));
  Expression compareWithEndTime=Compare.compare(Expression.variable(""String_Node_Str""),Compare.Operator.LESS_THAN,end);
  withinExpression=Expression.and(compareWithStartTime,compareWithEndTime);
  Expression startEndTimeExpression;
  if (within.getTimeRange().size() == 1) {
    startEndTimeExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0));
  }
 else {
    startEndTimeExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0),within.getTimeRange().get(1));
  }
  startTimeEndTimeExpressionExecutor=ExpressionParser.parseExpression(startEndTimeExpression,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  for (  Map.Entry<TimePeriod.Duration,Table> entry : aggregationTables.entrySet()) {
    CompiledCondition withinTableCompileCondition=entry.getValue().compileCondition(withinExpression,newMatchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
    withinTableCompiledConditions.put(entry.getKey(),withinTableCompileCondition);
  }
  withinInMemoryCompileCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),withinExpression,newMatchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  return new IncrementalAggregateCompileCondition(withinTableCompiledConditions,withinInMemoryCompileCondition,onCompiledCondition,tableMetaStreamEvent,aggregateMetaSteamEvent);
}",0.9967315175097275
28770,"private static MatchingMetaInfoHolder aggregationTableMetaInfoHolder(MatchingMetaInfoHolder matchingMetaInfoHolder,AbstractDefinition tableDefinition){
  MetaStreamEvent metaStreamEventForTable=new MetaStreamEvent();
  metaStreamEventForTable.setEventType(MetaStreamEvent.EventType.TABLE);
  metaStreamEventForTable.addInputDefinition(tableDefinition);
  MetaStateEvent metaStateEvent;
  if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 1) {
    metaStateEvent=new MetaStateEvent(1);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return new MatchingMetaInfoHolder(metaStateEvent,0,0,tableDefinition,tableDefinition,0);
  }
 else {
    metaStateEvent=new MetaStateEvent(2);
    MetaStreamEvent matchingStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getMatchingStreamEventIndex());
    MetaStreamEvent newMatchingStreamEvent=new MetaStreamEvent();
    newMatchingStreamEvent.setEventType(MetaStreamEvent.EventType.TABLE);
    StreamDefinition newMatchingStreamDefinition=new StreamDefinition();
    for (    Attribute attribute : matchingStreamEvent.getBeforeWindowData()) {
      newMatchingStreamEvent.addData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
      metaStreamArraySizes[0]=++metaStreamArraySizes[0];
    }
    newMatchingStreamEvent.initializeAfterWindowData();
    for (    Attribute attribute : matchingStreamEvent.getOnAfterWindowData()) {
      newMatchingStreamEvent.addData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
      metaStreamArraySizes[1]=++metaStreamArraySizes[1];
    }
    for (    Attribute attribute : matchingStreamEvent.getOutputData()) {
      newMatchingStreamEvent.addOutputData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
      metaStreamArraySizes[2]=++metaStreamArraySizes[2];
    }
    newMatchingStreamEvent.addOutputData(new Attribute(""String_Node_Str"",Attribute.Type.LONG));
    newMatchingStreamEvent.addOutputData(new Attribute(""String_Node_Str"",Attribute.Type.LONG));
    newMatchingStreamDefinition.attribute(""String_Node_Str"",Attribute.Type.LONG);
    newMatchingStreamDefinition.attribute(""String_Node_Str"",Attribute.Type.LONG);
    newMatchingStreamEvent.addInputDefinition(newMatchingStreamDefinition);
    metaStateEvent.addEvent(newMatchingStreamEvent);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,tableDefinition,UNKNOWN_STATE);
  }
}","private static MatchingMetaInfoHolder aggregationTableMetaInfoHolder(MatchingMetaInfoHolder matchingMetaInfoHolder,AbstractDefinition tableDefinition){
  MetaStreamEvent metaStreamEventForTable=new MetaStreamEvent();
  metaStreamEventForTable.setEventType(MetaStreamEvent.EventType.TABLE);
  metaStreamEventForTable.addInputDefinition(tableDefinition);
  MetaStateEvent metaStateEvent;
  if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 1) {
    metaStateEvent=new MetaStateEvent(1);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return new MatchingMetaInfoHolder(metaStateEvent,0,0,tableDefinition,tableDefinition,0);
  }
 else {
    metaStateEvent=new MetaStateEvent(2);
    MetaStreamEvent matchingStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getMatchingStreamEventIndex());
    MetaStreamEvent newMatchingStreamEvent=new MetaStreamEvent();
    newMatchingStreamEvent.setEventType(MetaStreamEvent.EventType.TABLE);
    StreamDefinition newMatchingStreamDefinition=new StreamDefinition();
    for (    Attribute attribute : matchingStreamEvent.getBeforeWindowData()) {
      newMatchingStreamEvent.addData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
    }
    newMatchingStreamEvent.initializeAfterWindowData();
    for (    Attribute attribute : matchingStreamEvent.getOnAfterWindowData()) {
      newMatchingStreamEvent.addData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
    }
    for (    Attribute attribute : matchingStreamEvent.getOutputData()) {
      newMatchingStreamEvent.addOutputData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
    }
    newMatchingStreamEvent.addOutputData(new Attribute(""String_Node_Str"",Attribute.Type.LONG));
    newMatchingStreamEvent.addOutputData(new Attribute(""String_Node_Str"",Attribute.Type.LONG));
    newMatchingStreamDefinition.attribute(""String_Node_Str"",Attribute.Type.LONG);
    newMatchingStreamDefinition.attribute(""String_Node_Str"",Attribute.Type.LONG);
    newMatchingStreamEvent.addInputDefinition(newMatchingStreamDefinition);
    metaStateEvent.addEvent(newMatchingStreamEvent);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,tableDefinition,UNKNOWN_STATE);
  }
}",0.9663584497344088
28771,"@Override public CompiledCondition cloneCompiledCondition(String key){
  Map<TimePeriod.Duration,CompiledCondition> copyOfWithinTableCompiledConditions=new HashMap<>();
  for (  Map.Entry<TimePeriod.Duration,CompiledCondition> entry : withinTableCompiledConditions.entrySet()) {
    copyOfWithinTableCompiledConditions.put(entry.getKey(),entry.getValue().cloneCompiledCondition(key));
  }
  return new IncrementalAggregateCompileCondition(copyOfWithinTableCompiledConditions,inMemoryStoreCompileCondition.cloneCompiledCondition(key),onCompiledCondition.cloneCompiledCondition(key),tableMetaStreamEvent,aggregateMetaStreamEvent,metaStreamArraySizes);
}","@Override public CompiledCondition cloneCompiledCondition(String key){
  Map<TimePeriod.Duration,CompiledCondition> copyOfWithinTableCompiledConditions=new HashMap<>();
  for (  Map.Entry<TimePeriod.Duration,CompiledCondition> entry : withinTableCompiledConditions.entrySet()) {
    copyOfWithinTableCompiledConditions.put(entry.getKey(),entry.getValue().cloneCompiledCondition(key));
  }
  return new IncrementalAggregateCompileCondition(copyOfWithinTableCompiledConditions,inMemoryStoreCompileCondition.cloneCompiledCondition(key),onCompiledCondition.cloneCompiledCondition(key),tableMetaStreamEvent,aggregateMetaStreamEvent);
}",0.9836065573770492
28772,"public StreamEvent find(StateEvent matchingEvent,TimePeriod.Duration perValue,Map<TimePeriod.Duration,IncrementalExecutor> incrementalExecutorMap,List<TimePeriod.Duration> incrementalDurations,Table tableForPerDuration,List<ExpressionExecutor> baseExecutors,ExpressionExecutor timestampExecutor,List<ExpressionExecutor> outputExpressionExecutors,Long[] startTimeEndTime){
  ComplexEventChunk<StreamEvent> complexEventChunkToHoldWithinMatches=new ComplexEventChunk<>(true);
  StreamEvent incomingMatchingStreamEvent=matchingEvent.getStreamEvent(0);
  StateEvent newMatchingStateEvent=new StateEvent(matchingEvent.getStreamEvents().length,0);
  StreamEvent newMatchingStreamEvent=new StreamEvent(metaStreamArraySizes[0],metaStreamArraySizes[1],metaStreamArraySizes[2]);
  if (metaStreamArraySizes[0] > 0) {
    newMatchingStreamEvent.setBeforeWindowData(incomingMatchingStreamEvent.getBeforeWindowData());
  }
  if (metaStreamArraySizes[1] > 0) {
    newMatchingStreamEvent.setOnAfterWindowData(incomingMatchingStreamEvent.getOnAfterWindowData());
  }
  if (metaStreamArraySizes[2] > 2) {
    newMatchingStreamEvent.setOutputData(incomingMatchingStreamEvent.getOutputData());
  }
  newMatchingStreamEvent.setOutputData(startTimeEndTime[0],metaStreamArraySizes[2] - 2);
  newMatchingStreamEvent.setOutputData(startTimeEndTime[1],metaStreamArraySizes[2] - 1);
  newMatchingStateEvent.setEvent(0,newMatchingStreamEvent);
  StreamEvent withinMatchFromPersistedEvents=tableForPerDuration.find(newMatchingStateEvent,withinTableCompiledConditions.get(perValue));
  complexEventChunkToHoldWithinMatches.add(withinMatchFromPersistedEvents);
  BaseIncrementalValueStore newestInMemoryEvent=getNewestInMemoryEvent(incrementalExecutorMap,incrementalDurations,perValue);
  BaseIncrementalValueStore oldestInMemoryEvent=getOldestInMemoryEvent(incrementalExecutorMap,incrementalDurations,perValue);
  if (requiresAggregatingInMemoryData(newestInMemoryEvent,oldestInMemoryEvent,newMatchingStateEvent)) {
    IncrementalDataAggregator incrementalDataAggregator=new IncrementalDataAggregator(incrementalDurations,perValue,baseExecutors,timestampExecutor,tableMetaStreamEvent);
    ComplexEventChunk<StreamEvent> aggregatedInMemoryEventChunk=incrementalDataAggregator.aggregateInMemoryData(incrementalExecutorMap);
    StreamEvent withinMatchFromInMemory=((Operator)inMemoryStoreCompileCondition).find(newMatchingStateEvent,aggregatedInMemoryEventChunk,tableEventCloner);
    complexEventChunkToHoldWithinMatches.add(withinMatchFromInMemory);
  }
  ComplexEventChunk<StreamEvent> aggregateSelectionComplexEventChunk=createAggregateSelectionEventChunk(complexEventChunkToHoldWithinMatches,outputExpressionExecutors);
  return ((Operator)onCompiledCondition).find(matchingEvent,aggregateSelectionComplexEventChunk,aggregateEventCloner);
}","public StreamEvent find(StateEvent matchingEvent,TimePeriod.Duration perValue,Map<TimePeriod.Duration,IncrementalExecutor> incrementalExecutorMap,List<TimePeriod.Duration> incrementalDurations,Table tableForPerDuration,List<ExpressionExecutor> baseExecutors,ExpressionExecutor timestampExecutor,List<ExpressionExecutor> outputExpressionExecutors,Long[] startTimeEndTime){
  ComplexEventChunk<StreamEvent> complexEventChunkToHoldWithinMatches=new ComplexEventChunk<>(true);
  StreamEvent incomingMatchingStreamEvent=matchingEvent.getStreamEvent(0);
  StateEvent newMatchingStateEvent=new StateEvent(matchingEvent.getStreamEvents().length,0);
  int beforeWindowSize=0;
  int onAfterWindowSize=0;
  int outputWindowSize=2;
  if (incomingMatchingStreamEvent.getBeforeWindowData() != null) {
    beforeWindowSize=incomingMatchingStreamEvent.getBeforeWindowData().length;
  }
  if (incomingMatchingStreamEvent.getOnAfterWindowData() != null) {
    onAfterWindowSize=incomingMatchingStreamEvent.getOnAfterWindowData().length;
  }
  if (incomingMatchingStreamEvent.getOutputData() != null) {
    outputWindowSize=incomingMatchingStreamEvent.getOutputData().length + outputWindowSize;
  }
  StreamEvent newMatchingStreamEvent=new StreamEvent(beforeWindowSize,onAfterWindowSize,outputWindowSize);
  if (beforeWindowSize > 0) {
    newMatchingStreamEvent.setBeforeWindowData(incomingMatchingStreamEvent.getBeforeWindowData());
  }
  if (onAfterWindowSize > 0) {
    newMatchingStreamEvent.setOnAfterWindowData(incomingMatchingStreamEvent.getOnAfterWindowData());
  }
  if (outputWindowSize > 2) {
    for (int i=0; i < incomingMatchingStreamEvent.getOutputData().length; i++) {
      newMatchingStreamEvent.setOutputData(incomingMatchingStreamEvent.getOutputData()[i],i);
    }
  }
  newMatchingStreamEvent.setOutputData(startTimeEndTime[0],outputWindowSize - 2);
  newMatchingStreamEvent.setOutputData(startTimeEndTime[1],outputWindowSize - 1);
  newMatchingStateEvent.setEvent(0,newMatchingStreamEvent);
  StreamEvent withinMatchFromPersistedEvents=tableForPerDuration.find(newMatchingStateEvent,withinTableCompiledConditions.get(perValue));
  complexEventChunkToHoldWithinMatches.add(withinMatchFromPersistedEvents);
  BaseIncrementalValueStore newestInMemoryEvent=getNewestInMemoryEvent(incrementalExecutorMap,incrementalDurations,perValue);
  BaseIncrementalValueStore oldestInMemoryEvent=getOldestInMemoryEvent(incrementalExecutorMap,incrementalDurations,perValue);
  if (requiresAggregatingInMemoryData(newestInMemoryEvent,oldestInMemoryEvent,newMatchingStateEvent)) {
    IncrementalDataAggregator incrementalDataAggregator=new IncrementalDataAggregator(incrementalDurations,perValue,baseExecutors,timestampExecutor,tableMetaStreamEvent);
    ComplexEventChunk<StreamEvent> aggregatedInMemoryEventChunk=incrementalDataAggregator.aggregateInMemoryData(incrementalExecutorMap);
    StreamEvent withinMatchFromInMemory=((Operator)inMemoryStoreCompileCondition).find(newMatchingStateEvent,aggregatedInMemoryEventChunk,tableEventCloner);
    complexEventChunkToHoldWithinMatches.add(withinMatchFromInMemory);
  }
  ComplexEventChunk<StreamEvent> aggregateSelectionComplexEventChunk=createAggregateSelectionEventChunk(complexEventChunkToHoldWithinMatches,outputExpressionExecutors);
  return ((Operator)onCompiledCondition).find(matchingEvent,aggregateSelectionComplexEventChunk,aggregateEventCloner);
}",0.6864229344499919
28773,"public IncrementalAggregateCompileCondition(Map<TimePeriod.Duration,CompiledCondition> withinTableCompiledConditions,CompiledCondition inMemoryStoreCompileCondition,CompiledCondition onCompiledCondition,MetaStreamEvent tableMetaStreamEvent,MetaStreamEvent aggregateMetaSteamEvent,int[] metaStreamArraySizes){
  this.withinTableCompiledConditions=withinTableCompiledConditions;
  this.inMemoryStoreCompileCondition=inMemoryStoreCompileCondition;
  this.onCompiledCondition=onCompiledCondition;
  this.tableMetaStreamEvent=tableMetaStreamEvent;
  this.aggregateMetaStreamEvent=aggregateMetaSteamEvent;
  this.streamEventPoolForTableMeta=new StreamEventPool(tableMetaStreamEvent,10);
  this.tableEventCloner=new StreamEventCloner(tableMetaStreamEvent,streamEventPoolForTableMeta);
  this.streamEventPoolForAggregateMeta=new StreamEventPool(aggregateMetaSteamEvent,10);
  this.aggregateEventCloner=new StreamEventCloner(aggregateMetaSteamEvent,streamEventPoolForAggregateMeta);
  this.metaStreamArraySizes=metaStreamArraySizes;
}","public IncrementalAggregateCompileCondition(Map<TimePeriod.Duration,CompiledCondition> withinTableCompiledConditions,CompiledCondition inMemoryStoreCompileCondition,CompiledCondition onCompiledCondition,MetaStreamEvent tableMetaStreamEvent,MetaStreamEvent aggregateMetaSteamEvent){
  this.withinTableCompiledConditions=withinTableCompiledConditions;
  this.inMemoryStoreCompileCondition=inMemoryStoreCompileCondition;
  this.onCompiledCondition=onCompiledCondition;
  this.tableMetaStreamEvent=tableMetaStreamEvent;
  this.aggregateMetaStreamEvent=aggregateMetaSteamEvent;
  this.streamEventPoolForTableMeta=new StreamEventPool(tableMetaStreamEvent,10);
  this.tableEventCloner=new StreamEventCloner(tableMetaStreamEvent,streamEventPoolForTableMeta);
  this.streamEventPoolForAggregateMeta=new StreamEventPool(aggregateMetaSteamEvent,10);
  this.aggregateEventCloner=new StreamEventCloner(aggregateMetaSteamEvent,streamEventPoolForAggregateMeta);
}",0.9609731373542828
28774,"public CompiledCondition compileExpression(Expression expression,Within within,Expression per,MatchingMetaInfoHolder matchingMetaInfoHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName,SiddhiAppContext siddhiAppContext){
  Map<TimePeriod.Duration,CompiledCondition> withinTableCompiledConditions=new HashMap<>();
  CompiledCondition withinInMemoryCompileCondition;
  CompiledCondition onCompiledCondition;
  perExpressionExecutor=ExpressionParser.parseExpression(per,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  if (perExpressionExecutor.getReturnType() != Attribute.Type.STRING) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + queryName + ""String_Node_Str""+ perExpressionExecutor.getReturnType(),per.getQueryContextStartIndex(),per.getQueryContextEndIndex());
  }
  Expression withinExpression;
  if (within.getTimeRange().size() == 1) {
    withinExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0),Expression.variable(""String_Node_Str""));
  }
 else {
    withinExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0),within.getTimeRange().get(1),Expression.variable(""String_Node_Str""));
  }
  AbstractDefinition tableDefinition=((Table)aggregationTables.values().toArray()[0]).getTableDefinition();
  for (  Map.Entry<TimePeriod.Duration,Table> entry : aggregationTables.entrySet()) {
    CompiledCondition withinTableCompileCondition=entry.getValue().compileCondition(withinExpression,aggregationTableMetaInfoHolder(matchingMetaInfoHolder,tableDefinition),siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
    withinTableCompiledConditions.put(entry.getKey(),withinTableCompileCondition);
  }
  withinInMemoryCompileCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),withinExpression,aggregationTableMetaInfoHolder(matchingMetaInfoHolder,tableDefinition),siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  onCompiledCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),expression,matchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  return new IncrementalAggregateCompileCondition(withinTableCompiledConditions,withinInMemoryCompileCondition,onCompiledCondition,tableMetaStreamEvent,aggregateMetaSteamEvent);
}","public CompiledCondition compileExpression(Expression expression,Within within,Expression per,MatchingMetaInfoHolder matchingMetaInfoHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName,SiddhiAppContext siddhiAppContext){
  Map<TimePeriod.Duration,CompiledCondition> withinTableCompiledConditions=new HashMap<>();
  CompiledCondition withinInMemoryCompileCondition;
  CompiledCondition onCompiledCondition;
  perExpressionExecutor=ExpressionParser.parseExpression(per,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  if (perExpressionExecutor.getReturnType() != Attribute.Type.STRING) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + queryName + ""String_Node_Str""+ perExpressionExecutor.getReturnType(),per.getQueryContextStartIndex(),per.getQueryContextEndIndex());
  }
  onCompiledCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),expression,matchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  AbstractDefinition tableDefinition=((Table)aggregationTables.values().toArray()[0]).getTableDefinition();
  MatchingMetaInfoHolder newMatchingMetaInfoHolder=aggregationTableMetaInfoHolder(matchingMetaInfoHolder,tableDefinition);
  Expression withinExpression;
  Expression start=Expression.variable(""String_Node_Str"");
  Expression end=Expression.variable(""String_Node_Str"");
  Expression compareWithStartTime=Compare.compare(start,Compare.Operator.LESS_THAN_EQUAL,Expression.variable(""String_Node_Str""));
  Expression compareWithEndTime=Compare.compare(Expression.variable(""String_Node_Str""),Compare.Operator.LESS_THAN,end);
  withinExpression=Expression.and(compareWithStartTime,compareWithEndTime);
  Expression startEndTimeExpression;
  if (within.getTimeRange().size() == 1) {
    startEndTimeExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0));
  }
 else {
    startEndTimeExpression=new AttributeFunction(""String_Node_Str"",""String_Node_Str"",within.getTimeRange().get(0),within.getTimeRange().get(1));
  }
  startTimeEndTimeExpressionExecutor=ExpressionParser.parseExpression(startEndTimeExpression,matchingMetaInfoHolder.getMetaStateEvent(),matchingMetaInfoHolder.getCurrentState(),tableMap,variableExpressionExecutors,siddhiAppContext,false,0,queryName);
  for (  Map.Entry<TimePeriod.Duration,Table> entry : aggregationTables.entrySet()) {
    CompiledCondition withinTableCompileCondition=entry.getValue().compileCondition(withinExpression,newMatchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
    withinTableCompiledConditions.put(entry.getKey(),withinTableCompileCondition);
  }
  withinInMemoryCompileCondition=OperatorParser.constructOperator(new ComplexEventChunk<>(true),withinExpression,newMatchingMetaInfoHolder,siddhiAppContext,variableExpressionExecutors,tableMap,queryName);
  return new IncrementalAggregateCompileCondition(withinTableCompiledConditions,withinInMemoryCompileCondition,onCompiledCondition,tableMetaStreamEvent,aggregateMetaSteamEvent,metaStreamArraySizes);
}",0.5705307262569832
28775,"public StreamEvent find(StateEvent matchingEvent,CompiledCondition compiledCondition){
  String perValueAsString=perExpressionExecutor.execute(matchingEvent).toString();
  TimePeriod.Duration perValue=TimePeriod.Duration.valueOf(perValueAsString.toUpperCase());
  if (!incrementalExecutorMap.keySet().contains(perValue)) {
    throw new SiddhiAppRuntimeException(""String_Node_Str"" + perValue.toString() + ""String_Node_Str""+ aggregationDefinition.getId()+ ""String_Node_Str""+ perValue.toString()+ ""String_Node_Str"");
  }
  Table tableForPerDuration=aggregationTables.get(perValue);
  return ((IncrementalAggregateCompileCondition)compiledCondition).find(matchingEvent,perValue,incrementalExecutorMap,incrementalDurations,tableForPerDuration,baseExecutors,timestampExecutor,outputExpressionExecutors);
}","public StreamEvent find(StateEvent matchingEvent,CompiledCondition compiledCondition){
  String perValueAsString=perExpressionExecutor.execute(matchingEvent).toString();
  TimePeriod.Duration perValue=TimePeriod.Duration.valueOf(perValueAsString.toUpperCase());
  if (!incrementalExecutorMap.keySet().contains(perValue)) {
    throw new SiddhiAppRuntimeException(""String_Node_Str"" + perValue.toString() + ""String_Node_Str""+ aggregationDefinition.getId()+ ""String_Node_Str""+ perValue.toString()+ ""String_Node_Str"");
  }
  Table tableForPerDuration=aggregationTables.get(perValue);
  Long[] startTimeEndTime=(Long[])startTimeEndTimeExpressionExecutor.execute(matchingEvent);
  return ((IncrementalAggregateCompileCondition)compiledCondition).find(matchingEvent,perValue,incrementalExecutorMap,incrementalDurations,tableForPerDuration,baseExecutors,timestampExecutor,outputExpressionExecutors,startTimeEndTime);
}",0.935672514619883
28776,"private static MatchingMetaInfoHolder aggregationTableMetaInfoHolder(MatchingMetaInfoHolder matchingMetaInfoHolder,AbstractDefinition tableDefinition){
  MetaStreamEvent metaStreamEventForTable=new MetaStreamEvent();
  metaStreamEventForTable.setEventType(MetaStreamEvent.EventType.TABLE);
  metaStreamEventForTable.addInputDefinition(tableDefinition);
  MetaStateEvent metaStateEvent;
  if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 1) {
    metaStateEvent=new MetaStateEvent(1);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return new MatchingMetaInfoHolder(metaStateEvent,0,0,tableDefinition,tableDefinition,0);
  }
 else {
    metaStateEvent=new MetaStateEvent(2);
    metaStateEvent.addEvent(matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getMatchingStreamEventIndex()));
    metaStateEvent.addEvent(metaStreamEventForTable);
    return MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,tableDefinition,UNKNOWN_STATE);
  }
}","private static MatchingMetaInfoHolder aggregationTableMetaInfoHolder(MatchingMetaInfoHolder matchingMetaInfoHolder,AbstractDefinition tableDefinition){
  MetaStreamEvent metaStreamEventForTable=new MetaStreamEvent();
  metaStreamEventForTable.setEventType(MetaStreamEvent.EventType.TABLE);
  metaStreamEventForTable.addInputDefinition(tableDefinition);
  MetaStateEvent metaStateEvent;
  if (matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents().length == 1) {
    metaStateEvent=new MetaStateEvent(1);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return new MatchingMetaInfoHolder(metaStateEvent,0,0,tableDefinition,tableDefinition,0);
  }
 else {
    metaStateEvent=new MetaStateEvent(2);
    MetaStreamEvent matchingStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getMatchingStreamEventIndex());
    MetaStreamEvent newMatchingStreamEvent=new MetaStreamEvent();
    newMatchingStreamEvent.setEventType(MetaStreamEvent.EventType.TABLE);
    StreamDefinition newMatchingStreamDefinition=new StreamDefinition();
    for (    Attribute attribute : matchingStreamEvent.getBeforeWindowData()) {
      newMatchingStreamEvent.addData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
      metaStreamArraySizes[0]=++metaStreamArraySizes[0];
    }
    newMatchingStreamEvent.initializeAfterWindowData();
    for (    Attribute attribute : matchingStreamEvent.getOnAfterWindowData()) {
      newMatchingStreamEvent.addData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
      metaStreamArraySizes[1]=++metaStreamArraySizes[1];
    }
    for (    Attribute attribute : matchingStreamEvent.getOutputData()) {
      newMatchingStreamEvent.addOutputData(attribute);
      newMatchingStreamDefinition.attribute(attribute.getName(),attribute.getType());
      metaStreamArraySizes[2]=++metaStreamArraySizes[2];
    }
    newMatchingStreamEvent.addOutputData(new Attribute(""String_Node_Str"",Attribute.Type.LONG));
    newMatchingStreamEvent.addOutputData(new Attribute(""String_Node_Str"",Attribute.Type.LONG));
    newMatchingStreamDefinition.attribute(""String_Node_Str"",Attribute.Type.LONG);
    newMatchingStreamDefinition.attribute(""String_Node_Str"",Attribute.Type.LONG);
    newMatchingStreamEvent.addInputDefinition(newMatchingStreamDefinition);
    metaStateEvent.addEvent(newMatchingStreamEvent);
    metaStateEvent.addEvent(metaStreamEventForTable);
    return MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,tableDefinition,UNKNOWN_STATE);
  }
}",0.5489874110563766
28777,"@Override public void process(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    if (!(Boolean)conditionExecutor.execute(complexEvent)) {
      complexEventChunk.remove();
    }
  }
  if (complexEventChunk.getFirst() != null) {
    this.next.process(complexEventChunk);
  }
}","@Override public void process(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    Object result=conditionExecutor.execute(complexEvent);
    if (result == null || !(Boolean)result) {
      complexEventChunk.remove();
    }
  }
  if (complexEventChunk.getFirst() != null) {
    this.next.process(complexEventChunk);
  }
}",0.8523002421307506
28778,"@Override public void process(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    if (!(Boolean)conditionExecutor.execute(complexEvent)) {
      complexEventChunk.remove();
    }
  }
  if (complexEventChunk.getFirst() != null) {
    this.next.process(complexEventChunk);
  }
}","@Override public void process(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    Object result=conditionExecutor.execute(complexEvent);
    if (result == null || !(Boolean)result) {
      complexEventChunk.remove();
    }
  }
  if (complexEventChunk.getFirst() != null) {
    this.next.process(complexEventChunk);
  }
}",0.8523002421307506
28779,"/** 
 * Adding extensions to Siddhi siddhiExtensionsMap
 * @param extensionClass      extension class
 * @param siddhiExtensionsMap reference map for the Siddhi extension
 */
private static void addExtensionToMap(Class extensionClass,Map<String,Class> siddhiExtensionsMap){
  Extension siddhiExtensionAnnotation=(Extension)extensionClass.getAnnotation(Extension.class);
  if (siddhiExtensionAnnotation != null) {
    if (!siddhiExtensionAnnotation.name().isEmpty()) {
      Class previousClass=null;
      if (!siddhiExtensionAnnotation.namespace().isEmpty()) {
        String key=siddhiExtensionAnnotation.namespace() + SiddhiConstants.EXTENSION_SEPARATOR + siddhiExtensionAnnotation.name();
        Class existingValue=siddhiExtensionsMap.get(key);
        if (existingValue == null) {
          previousClass=siddhiExtensionsMap.put(key,extensionClass);
        }
        if (previousClass != null) {
          log.warn(""String_Node_Str"" + extensionClass + ""String_Node_Str""+ previousClass+ ""String_Node_Str""+ ""String_Node_Str""+ siddhiExtensionAnnotation.namespace()+ SiddhiConstants.EXTENSION_SEPARATOR+ siddhiExtensionAnnotation.name()+ ""String_Node_Str"");
        }
      }
 else {
        previousClass=siddhiExtensionsMap.put(siddhiExtensionAnnotation.name(),extensionClass);
        if (previousClass != null) {
          log.warn(""String_Node_Str"" + extensionClass + ""String_Node_Str""+ previousClass+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ siddhiExtensionAnnotation.name()+ ""String_Node_Str"");
        }
      }
    }
 else {
      log.error(""String_Node_Str"" + extensionClass.getName() + ""String_Node_Str"");
    }
  }
 else {
    log.error(""String_Node_Str"" + extensionClass.getName() + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","/** 
 * Adding extensions to Siddhi siddhiExtensionsMap
 * @param fqExtensionName     fully qualified extension name (namespace:extensionName or extensionName)
 * @param extensionClass      extension class
 * @param siddhiExtensionsMap reference map for the Siddhi extension
 */
private static void addExtensionToMap(String fqExtensionName,Class extensionClass,Map<String,Class> siddhiExtensionsMap){
  Class previousClass=null;
  Class existingValue=siddhiExtensionsMap.get(fqExtensionName);
  if (existingValue == null) {
    previousClass=siddhiExtensionsMap.put(fqExtensionName,extensionClass);
  }
  if (previousClass != null) {
    log.warn(""String_Node_Str"" + extensionClass + ""String_Node_Str""+ previousClass+ ""String_Node_Str""+ ""String_Node_Str""+ fqExtensionName+ ""String_Node_Str"");
  }
}",0.2806880375293197
28780,"/** 
 * Load Siddhi extensions in java non OSGi environment
 * @param siddhiExtensionsMap reference map for the Siddhi extension
 */
private static void loadLocalExtensions(Map<String,Class> siddhiExtensionsMap){
  Iterable<Class<?>> extensions=ClassIndex.getAnnotated(Extension.class);
  for (  Class extension : extensions) {
    addExtensionToMap(extension,siddhiExtensionsMap);
  }
}","/** 
 * Load Siddhi extensions in java non OSGi environment
 * @param siddhiExtensionsMap reference map for the Siddhi extension
 */
private static void loadLocalExtensions(Map<String,Class> siddhiExtensionsMap){
  Iterable<Class<?>> extensions=ClassIndex.getAnnotated(Extension.class);
  for (  Class extension : extensions) {
    addExtensionToMap(extension,siddhiExtensionsMap);
  }
  addExtensionToMap(""String_Node_Str"",IncrementalWithinTimeFunctionExecutor.class,siddhiExtensionsMap);
  addExtensionToMap(""String_Node_Str"",IncrementalUnixTimeFunctionExecutor.class,siddhiExtensionsMap);
  addExtensionToMap(""String_Node_Str"",IncrementalTimeGetTimeZone.class,siddhiExtensionsMap);
}",0.7213420316868593
28781,"/** 
 * This is the activation method of SiddhiManagerService. This will be initilize the Siddhi Manager and register the ManagerService.
 * @param bundleContext the bundle context instance of this bundle.
 * @throws Exception this will be thrown if an issue occurs while executing the activate method
 */
@Activate protected void start(BundleContext bundleContext) throws Exception {
  ReferenceHolder.getInstance().setBundleContext(bundleContext);
  serviceRegistration=bundleContext.registerService(SiddhiComponentActivator.class.getName(),new SiddhiComponentActivator(),null);
}","/** 
 * This is the activation method of SiddhiManagerService. This will be initilize the Siddhi Manager and register the ManagerService.
 * @param bundleContext the bundle context instance of this bundle.
 * @throws Exception this will be thrown if an issue occurs while executing the activate method
 */
@Activate protected void start(BundleContext bundleContext) throws Exception {
  ReferenceHolder.getInstance().setBundleContext(bundleContext);
  SiddhiExtensionLoader.loadSiddhiExtensions(new HashMap<>());
  serviceRegistration=bundleContext.registerService(SiddhiComponentActivator.class.getName(),new SiddhiComponentActivator(),null);
}",0.9486552567237164
28782,"public static AggregationRuntime parse(AggregationDefinition aggregationDefinition,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,AggregationRuntime> aggregationMap,SiddhiAppRuntimeBuilder siddhiAppRuntimeBuilder){
  if (aggregationDefinition == null) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + ""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  }
  if (aggregationDefinition.getTimePeriod() == null) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + aggregationDefinition.getId() + ""String_Node_Str""+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",aggregationDefinition.getQueryContextStartIndex(),aggregationDefinition.getQueryContextEndIndex());
  }
  if (aggregationDefinition.getSelector() == null) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + aggregationDefinition.getId() + ""String_Node_Str""+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",aggregationDefinition.getQueryContextStartIndex(),aggregationDefinition.getQueryContextEndIndex());
  }
  try {
    List<VariableExpressionExecutor> incomingVariableExpressionExecutors=new ArrayList<>();
    siddhiAppContext.getSiddhiContext().getSiddhiExtensions().put(""String_Node_Str"",IncrementalWithinTimeFunctionExecutor.class);
    siddhiAppContext.getSiddhiContext().getSiddhiExtensions().put(""String_Node_Str"",IncrementalUnixTimeFunctionExecutor.class);
    siddhiAppContext.getSiddhiContext().getSiddhiExtensions().put(""String_Node_Str"",IncrementalTimeGetTimeZone.class);
    String aggregatorName=aggregationDefinition.getId();
    LatencyTracker latencyTracker=QueryParserHelper.getLatencyTracker(siddhiAppContext,aggregatorName,SiddhiConstants.METRIC_INFIX_AGGRIGATIONS);
    StreamRuntime streamRuntime=InputStreamParser.parse(aggregationDefinition.getBasicSingleInputStream(),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,incomingVariableExpressionExecutors,latencyTracker,false,aggregatorName);
    MetaStreamEvent incomingMetaStreamEvent=(MetaStreamEvent)streamRuntime.getMetaComplexEvent();
    incomingMetaStreamEvent.initializeAfterWindowData();
    List<ExpressionExecutor> incomingExpressionExecutors=new ArrayList<>();
    List<IncrementalAttributeAggregator> incrementalAttributeAggregators=new ArrayList<>();
    List<Variable> groupByVariableList=aggregationDefinition.getSelector().getGroupByList();
    boolean isProcessingOnExternalTime=aggregationDefinition.getAggregateAttribute() != null;
    List<Expression> outputExpressions=new ArrayList<>();
    List<ExpressionExecutor> outputExpressionExecutors=new ArrayList<>();
    populateIncomingAggregatorsAndExecutors(aggregationDefinition,siddhiAppContext,tableMap,incomingVariableExpressionExecutors,aggregatorName,incomingMetaStreamEvent,incomingExpressionExecutors,incrementalAttributeAggregators,groupByVariableList,outputExpressions);
    int baseAggregatorBeginIndex=incomingMetaStreamEvent.getOutputData().size();
    List<Expression> finalBaseAggregators=getFinalBaseAggregators(siddhiAppContext,tableMap,incomingVariableExpressionExecutors,aggregatorName,incomingMetaStreamEvent,incomingExpressionExecutors,incrementalAttributeAggregators);
    StreamDefinition incomingOutputStreamDefinition=StreamDefinition.id(""String_Node_Str"");
    incomingOutputStreamDefinition.setQueryContextStartIndex(aggregationDefinition.getQueryContextStartIndex());
    incomingOutputStreamDefinition.setQueryContextEndIndex(aggregationDefinition.getQueryContextEndIndex());
    MetaStreamEvent processedMetaStreamEvent=new MetaStreamEvent();
    for (    Attribute attribute : incomingMetaStreamEvent.getOutputData()) {
      incomingOutputStreamDefinition.attribute(attribute.getName(),attribute.getType());
      processedMetaStreamEvent.addOutputData(attribute);
    }
    incomingMetaStreamEvent.setOutputDefinition(incomingOutputStreamDefinition);
    processedMetaStreamEvent.addInputDefinition(incomingOutputStreamDefinition);
    processedMetaStreamEvent.setOutputDefinition(incomingOutputStreamDefinition);
    List<VariableExpressionExecutor> processVariableExpressionExecutors=new ArrayList<>();
    boolean groupBy=aggregationDefinition.getSelector().getGroupByList().size() != 0;
    List<ExpressionExecutor> processExpressionExecutors=constructProcessExpressionExecutors(siddhiAppContext,tableMap,aggregatorName,baseAggregatorBeginIndex,finalBaseAggregators,incomingOutputStreamDefinition,processedMetaStreamEvent,processVariableExpressionExecutors,groupBy);
    outputExpressionExecutors.addAll(outputExpressions.stream().map(expression -> ExpressionParser.parseExpression(expression,processedMetaStreamEvent,0,tableMap,processVariableExpressionExecutors,siddhiAppContext,groupBy,0,aggregatorName)).collect(Collectors.toList()));
    GroupByKeyGenerator groupByKeyGenerator=null;
    if (groupBy) {
      groupByKeyGenerator=new GroupByKeyGenerator(groupByVariableList,processedMetaStreamEvent,tableMap,processVariableExpressionExecutors,siddhiAppContext,aggregatorName);
    }
    int bufferSize=0;
    Element element=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_BUFFER_SIZE,null,aggregationDefinition.getAnnotations());
    if (element != null) {
      bufferSize=Integer.parseInt(element.getValue());
    }
    EntryValveExecutor entryValveExecutor=new EntryValveExecutor(siddhiAppContext);
    LockWrapper lockWrapper=new LockWrapper(aggregatorName);
    lockWrapper.setLock(new ReentrantLock());
    Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveExecutor,siddhiAppContext);
    scheduler.init(lockWrapper,aggregatorName);
    scheduler.setStreamEventPool(new StreamEventPool(processedMetaStreamEvent,10));
    QueryParserHelper.reduceMetaComplexEvent(incomingMetaStreamEvent);
    QueryParserHelper.reduceMetaComplexEvent(processedMetaStreamEvent);
    QueryParserHelper.updateVariablePosition(incomingMetaStreamEvent,incomingVariableExpressionExecutors);
    QueryParserHelper.updateVariablePosition(processedMetaStreamEvent,processVariableExpressionExecutors);
    List<TimePeriod.Duration> incrementalDurations=getSortedPeriods(aggregationDefinition.getTimePeriod());
    Map<TimePeriod.Duration,Table> aggregationTables=initDefaultTables(aggregatorName,incrementalDurations,processedMetaStreamEvent.getOutputStreamDefinition(),siddhiAppRuntimeBuilder,aggregationDefinition.getAnnotations(),groupByVariableList);
    Map<TimePeriod.Duration,IncrementalExecutor> incrementalExecutorMap=buildIncrementalExecutors(isProcessingOnExternalTime,processedMetaStreamEvent,processExpressionExecutors,groupByKeyGenerator,bufferSize,incrementalDurations,aggregationTables);
    IncrementalExecutor rootIncrementalExecutor=incrementalExecutorMap.get(incrementalDurations.get(0));
    rootIncrementalExecutor.setScheduler(scheduler);
    entryValveExecutor.setNextExecutor(rootIncrementalExecutor);
    QueryParserHelper.initStreamRuntime(streamRuntime,incomingMetaStreamEvent,lockWrapper,aggregatorName);
    streamRuntime.setCommonProcessor(new IncrementalAggregationProcessor(rootIncrementalExecutor,incomingExpressionExecutors,processedMetaStreamEvent));
    List<ExpressionExecutor> baseExecutors=cloneExpressionExecutors(processExpressionExecutors);
    ExpressionExecutor timestampExecutor=baseExecutors.remove(0);
    return new AggregationRuntime(aggregationDefinition,incrementalExecutorMap,aggregationTables,((SingleStreamRuntime)streamRuntime),entryValveExecutor,incrementalDurations,siddhiAppContext,baseExecutors,timestampExecutor,processedMetaStreamEvent,outputExpressionExecutors);
  }
 catch (  Throwable t) {
    ExceptionUtil.populateQueryContext(t,aggregationDefinition,siddhiAppContext);
    throw t;
  }
}","public static AggregationRuntime parse(AggregationDefinition aggregationDefinition,SiddhiAppContext siddhiAppContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,AggregationRuntime> aggregationMap,SiddhiAppRuntimeBuilder siddhiAppRuntimeBuilder){
  if (aggregationDefinition == null) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + ""String_Node_Str"" + siddhiAppContext.getName() + ""String_Node_Str"");
  }
  if (aggregationDefinition.getTimePeriod() == null) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + aggregationDefinition.getId() + ""String_Node_Str""+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",aggregationDefinition.getQueryContextStartIndex(),aggregationDefinition.getQueryContextEndIndex());
  }
  if (aggregationDefinition.getSelector() == null) {
    throw new SiddhiAppCreationException(""String_Node_Str"" + aggregationDefinition.getId() + ""String_Node_Str""+ ""String_Node_Str""+ siddhiAppContext.getName()+ ""String_Node_Str"",aggregationDefinition.getQueryContextStartIndex(),aggregationDefinition.getQueryContextEndIndex());
  }
  try {
    List<VariableExpressionExecutor> incomingVariableExpressionExecutors=new ArrayList<>();
    String aggregatorName=aggregationDefinition.getId();
    LatencyTracker latencyTracker=QueryParserHelper.getLatencyTracker(siddhiAppContext,aggregatorName,SiddhiConstants.METRIC_INFIX_AGGRIGATIONS);
    StreamRuntime streamRuntime=InputStreamParser.parse(aggregationDefinition.getBasicSingleInputStream(),siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,windowMap,aggregationMap,incomingVariableExpressionExecutors,latencyTracker,false,aggregatorName);
    MetaStreamEvent incomingMetaStreamEvent=(MetaStreamEvent)streamRuntime.getMetaComplexEvent();
    incomingMetaStreamEvent.initializeAfterWindowData();
    List<ExpressionExecutor> incomingExpressionExecutors=new ArrayList<>();
    List<IncrementalAttributeAggregator> incrementalAttributeAggregators=new ArrayList<>();
    List<Variable> groupByVariableList=aggregationDefinition.getSelector().getGroupByList();
    boolean isProcessingOnExternalTime=aggregationDefinition.getAggregateAttribute() != null;
    List<Expression> outputExpressions=new ArrayList<>();
    List<ExpressionExecutor> outputExpressionExecutors=new ArrayList<>();
    populateIncomingAggregatorsAndExecutors(aggregationDefinition,siddhiAppContext,tableMap,incomingVariableExpressionExecutors,aggregatorName,incomingMetaStreamEvent,incomingExpressionExecutors,incrementalAttributeAggregators,groupByVariableList,outputExpressions);
    int baseAggregatorBeginIndex=incomingMetaStreamEvent.getOutputData().size();
    List<Expression> finalBaseAggregators=getFinalBaseAggregators(siddhiAppContext,tableMap,incomingVariableExpressionExecutors,aggregatorName,incomingMetaStreamEvent,incomingExpressionExecutors,incrementalAttributeAggregators);
    StreamDefinition incomingOutputStreamDefinition=StreamDefinition.id(""String_Node_Str"");
    incomingOutputStreamDefinition.setQueryContextStartIndex(aggregationDefinition.getQueryContextStartIndex());
    incomingOutputStreamDefinition.setQueryContextEndIndex(aggregationDefinition.getQueryContextEndIndex());
    MetaStreamEvent processedMetaStreamEvent=new MetaStreamEvent();
    for (    Attribute attribute : incomingMetaStreamEvent.getOutputData()) {
      incomingOutputStreamDefinition.attribute(attribute.getName(),attribute.getType());
      processedMetaStreamEvent.addOutputData(attribute);
    }
    incomingMetaStreamEvent.setOutputDefinition(incomingOutputStreamDefinition);
    processedMetaStreamEvent.addInputDefinition(incomingOutputStreamDefinition);
    processedMetaStreamEvent.setOutputDefinition(incomingOutputStreamDefinition);
    List<VariableExpressionExecutor> processVariableExpressionExecutors=new ArrayList<>();
    boolean groupBy=aggregationDefinition.getSelector().getGroupByList().size() != 0;
    List<ExpressionExecutor> processExpressionExecutors=constructProcessExpressionExecutors(siddhiAppContext,tableMap,aggregatorName,baseAggregatorBeginIndex,finalBaseAggregators,incomingOutputStreamDefinition,processedMetaStreamEvent,processVariableExpressionExecutors,groupBy);
    outputExpressionExecutors.addAll(outputExpressions.stream().map(expression -> ExpressionParser.parseExpression(expression,processedMetaStreamEvent,0,tableMap,processVariableExpressionExecutors,siddhiAppContext,groupBy,0,aggregatorName)).collect(Collectors.toList()));
    GroupByKeyGenerator groupByKeyGenerator=null;
    if (groupBy) {
      groupByKeyGenerator=new GroupByKeyGenerator(groupByVariableList,processedMetaStreamEvent,tableMap,processVariableExpressionExecutors,siddhiAppContext,aggregatorName);
    }
    int bufferSize=0;
    Element element=AnnotationHelper.getAnnotationElement(SiddhiConstants.ANNOTATION_BUFFER_SIZE,null,aggregationDefinition.getAnnotations());
    if (element != null) {
      bufferSize=Integer.parseInt(element.getValue());
    }
    EntryValveExecutor entryValveExecutor=new EntryValveExecutor(siddhiAppContext);
    LockWrapper lockWrapper=new LockWrapper(aggregatorName);
    lockWrapper.setLock(new ReentrantLock());
    Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveExecutor,siddhiAppContext);
    scheduler.init(lockWrapper,aggregatorName);
    scheduler.setStreamEventPool(new StreamEventPool(processedMetaStreamEvent,10));
    QueryParserHelper.reduceMetaComplexEvent(incomingMetaStreamEvent);
    QueryParserHelper.reduceMetaComplexEvent(processedMetaStreamEvent);
    QueryParserHelper.updateVariablePosition(incomingMetaStreamEvent,incomingVariableExpressionExecutors);
    QueryParserHelper.updateVariablePosition(processedMetaStreamEvent,processVariableExpressionExecutors);
    List<TimePeriod.Duration> incrementalDurations=getSortedPeriods(aggregationDefinition.getTimePeriod());
    Map<TimePeriod.Duration,Table> aggregationTables=initDefaultTables(aggregatorName,incrementalDurations,processedMetaStreamEvent.getOutputStreamDefinition(),siddhiAppRuntimeBuilder,aggregationDefinition.getAnnotations(),groupByVariableList);
    Map<TimePeriod.Duration,IncrementalExecutor> incrementalExecutorMap=buildIncrementalExecutors(isProcessingOnExternalTime,processedMetaStreamEvent,processExpressionExecutors,groupByKeyGenerator,bufferSize,incrementalDurations,aggregationTables);
    IncrementalExecutor rootIncrementalExecutor=incrementalExecutorMap.get(incrementalDurations.get(0));
    rootIncrementalExecutor.setScheduler(scheduler);
    entryValveExecutor.setNextExecutor(rootIncrementalExecutor);
    QueryParserHelper.initStreamRuntime(streamRuntime,incomingMetaStreamEvent,lockWrapper,aggregatorName);
    streamRuntime.setCommonProcessor(new IncrementalAggregationProcessor(rootIncrementalExecutor,incomingExpressionExecutors,processedMetaStreamEvent));
    List<ExpressionExecutor> baseExecutors=cloneExpressionExecutors(processExpressionExecutors);
    ExpressionExecutor timestampExecutor=baseExecutors.remove(0);
    return new AggregationRuntime(aggregationDefinition,incrementalExecutorMap,aggregationTables,((SingleStreamRuntime)streamRuntime),entryValveExecutor,incrementalDurations,siddhiAppContext,baseExecutors,timestampExecutor,processedMetaStreamEvent,outputExpressionExecutors);
  }
 catch (  Throwable t) {
    ExceptionUtil.populateQueryContext(t,aggregationDefinition,siddhiAppContext);
    throw t;
  }
}",0.9761256411880184
28783,"/** 
 * This method tells the ID(s) of the destination(s) to which a given messages should be sent. There can be cases where a given message is only sent to a specific destination(e.g., partition based) and message is sent to multiple endpoints(e.g., broadcast)
 * @param payload          payload of the message
 * @param transportOptions Dynamic transport options of the sink
 * @return Set of IDs of the destination to which the event should be sent
 */
@Override public List<Integer> getDestinationsToPublish(Object payload,DynamicOptions transportOptions){
  String partitionKeyValue=partitionOption.getValue(transportOptions);
  int destinationId=partitionKeyValue.hashCode() % totalDestinationCount;
  if (destinationIds.contains(destinationId)) {
    returnValue.clear();
    returnValue.add(destinationId);
    return returnValue;
  }
 else {
    return EMPTY_RETURN_VALUE;
  }
}","/** 
 * This method tells the ID(s) of the destination(s) to which a given messages should be sent. There can be cases where a given message is only sent to a specific destination(e.g., partition based) and message is sent to multiple endpoints(e.g., broadcast)
 * @param payload          payload of the message
 * @param transportOptions Dynamic transport options of the sink
 * @return Set of IDs of the destination to which the event should be sent
 */
@Override public List<Integer> getDestinationsToPublish(Object payload,DynamicOptions transportOptions){
  String partitionKeyValue=partitionOption.getValue(transportOptions);
  int destinationId=Math.abs(partitionKeyValue.hashCode() % totalDestinationCount);
  if (destinationIds.contains(destinationId)) {
    returnValue.clear();
    returnValue.add(destinationId);
    return returnValue;
  }
 else {
    return EMPTY_RETURN_VALUE;
  }
}",0.9943946188340808
28784,void sendEvent(Event event) throws InterruptedException ;,"public void sendEvent(Event event) throws InterruptedException {
  try {
    String[] transportProperties=trpProperties.get();
    trpProperties.remove();
    for (int i=0; i < transportMapping.size(); i++) {
      AttributeMapping attributeMapping=transportMapping.get(i);
      event.getData()[attributeMapping.getPosition()]=transportProperties[i];
    }
    inputEventHandlerCallback.sendEvent(event);
  }
 catch (  RuntimeException e) {
    LOG.error(ExceptionUtil.getMessageWithContext(e,siddhiAppContext) + ""String_Node_Str"" + sourceType+ ""String_Node_Str""+ inputHandler.getStreamId()+ ""String_Node_Str"",e);
  }
 finally {
    trpProperties.remove();
  }
}",0.1555555555555555
28785,void sendEvents(Event[] events) throws InterruptedException ;,"public void sendEvents(Event[] events) throws InterruptedException {
  try {
    String[] transportProperties=trpProperties.get();
    for (int i=0; i < transportMapping.size(); i++) {
      AttributeMapping attributeMapping=transportMapping.get(i);
      for (      Event event : events) {
        event.getData()[attributeMapping.getPosition()]=transportProperties[i];
      }
    }
    inputEventHandlerCallback.sendEvents(events);
  }
 catch (  RuntimeException e) {
    LOG.error(ExceptionUtil.getMessageWithContext(e,siddhiAppContext) + ""String_Node_Str"" + sourceType+ ""String_Node_Str""+ inputHandler.getStreamId()+ ""String_Node_Str"",e);
  }
 finally {
    trpProperties.remove();
  }
}",0.1593625498007968
28786,"@Override public void sendEvent(Event event) throws InterruptedException {
  handle(event,inputEventHandlerImpl);
}","public abstract void sendEvent(Event[] events,InputHandler inputHandler) throws InterruptedException ;",0.5898617511520737
28787,"@Override public void sendEvents(Event[] events) throws InterruptedException {
  handle(events,inputEventHandlerImpl);
}","@Override public void sendEvents(Event[] events) throws InterruptedException {
  sendEvent(events,inputHandler);
}",0.9230769230769232
28788,"public final void setInputHandler(InputHandler inputHandler){
  InputEventHandlerImpl inputEventHandlerImpl=new InputEventHandlerImpl(inputHandler,transportMappings,trpProperties,sourceType,siddhiAppContext);
  if (sourceHandler != null) {
    sourceHandler.setInputEventHandlerImpl(inputEventHandlerImpl);
    this.inputEventHandler=sourceHandler;
  }
 else {
    this.inputEventHandler=inputEventHandlerImpl;
  }
}","public final void setInputHandler(InputHandler inputHandler){
  InputEventHandlerCallback inputEventHandlerCallback;
  if (sourceHandler != null) {
    sourceHandler.setInputHandler(inputHandler);
    inputEventHandlerCallback=sourceHandler;
  }
 else {
    inputEventHandlerCallback=new PassThroughSourceHandler(inputHandler);
  }
  this.inputEventHandler=new InputEventHandler(inputHandler,transportMappings,trpProperties,sourceType,siddhiAppContext,inputEventHandlerCallback);
}",0.3567447045707915
28789,"@Override public int compare(String s1,String s2){
  String[] s1s=s1.split(""String_Node_Str"");
  String[] s2s=s2.split(""String_Node_Str"");
  int i=0;
  while (s1s.length > i || s2s.length > i) {
    String s1a=""String_Node_Str"";
    String s2a=""String_Node_Str"";
    if (s1s.length > i) {
      s1a=s1s[i];
    }
    if (s2s.length > i) {
      s2a=s2s[i];
    }
    System.out.println(s1a + ""String_Node_Str"" + s2a);
    int s1aInt=Integer.parseInt(s1a);
    int s2aInt=Integer.parseInt(s2a);
    if (s2aInt > s1aInt) {
      return 1;
    }
 else     if (s2aInt < s1aInt) {
      return -1;
    }
    i++;
  }
  return 0;
}","@Override public int compare(String s1,String s2){
  String[] s1s=s1.split(""String_Node_Str"");
  String[] s2s=s2.split(""String_Node_Str"");
  int i=0;
  while (s1s.length > i || s2s.length > i) {
    String s1a=""String_Node_Str"";
    String s2a=""String_Node_Str"";
    if (s1s.length > i) {
      s1a=s1s[i];
    }
    if (s2s.length > i) {
      s2a=s2s[i];
    }
    int s1aInt=Integer.parseInt(s1a);
    int s2aInt=Integer.parseInt(s2a);
    if (s2aInt > s1aInt) {
      return 1;
    }
 else     if (s2aInt < s1aInt) {
      return -1;
    }
    i++;
  }
  return 0;
}",0.9539748953974896
28790,"/** 
 * This add a new page to the list of pages in the mkdocs configuration
 * @param mkdocsConfigFile           The mkdocs configuration file
 * @param documentationBaseDirectory The base directory of the documentation
 * @throws FileNotFoundException If mkdocs configuration file is not found
 */
public static void updateAPIPagesInMkdocsConfig(File mkdocsConfigFile,String documentationBaseDirectory) throws FileNotFoundException {
  File documentationDirectory=new File(documentationBaseDirectory + File.separator + Constants.API_SUB_DIRECTORY);
  String[] documentationFiles=documentationDirectory.list((directory,fileName) -> fileName.endsWith(Constants.MARKDOWN_FILE_EXTENSION));
  List<String> apiDirectoryContent;
  if (documentationFiles == null) {
    apiDirectoryContent=new ArrayList<>();
  }
 else {
    apiDirectoryContent=Arrays.asList(documentationFiles);
    apiDirectoryContent.sort(new Comparator<String>(){
      @Override public int compare(      String s1,      String s2){
        String[] s1s=s1.split(""String_Node_Str"");
        String[] s2s=s2.split(""String_Node_Str"");
        int i=0;
        while (s1s.length > i || s2s.length > i) {
          String s1a=""String_Node_Str"";
          String s2a=""String_Node_Str"";
          if (s1s.length > i) {
            s1a=s1s[i];
          }
          if (s2s.length > i) {
            s2a=s2s[i];
          }
          System.out.println(s1a + ""String_Node_Str"" + s2a);
          int s1aInt=Integer.parseInt(s1a);
          int s2aInt=Integer.parseInt(s2a);
          if (s2aInt > s1aInt) {
            return 1;
          }
 else           if (s2aInt < s1aInt) {
            return -1;
          }
          i++;
        }
        return 0;
      }
    }
);
  }
  String latestVersionFile=null;
  if (apiDirectoryContent.size() > 1) {
    String first=apiDirectoryContent.get(0);
    String second=apiDirectoryContent.get(1);
    if (first.equals(Constants.LATEST_FILE_NAME + Constants.MARKDOWN_FILE_EXTENSION)) {
      latestVersionFile=second;
    }
  }
  DumperOptions dumperOptions=new DumperOptions();
  dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  Yaml yaml=new Yaml(dumperOptions);
  Map<String,Object> yamlConfig=(Map<String,Object>)yaml.load(new InputStreamReader(new FileInputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
  List<Map<String,Object>> yamlConfigPagesList=(List<Map<String,Object>>)yamlConfig.get(Constants.MKDOCS_CONFIG_PAGES_KEY);
  List<Map<String,Object>> apiPagesList=new ArrayList<>();
  for (  String apiFile : apiDirectoryContent) {
    String pageName=apiFile.substring(0,apiFile.length() - Constants.MARKDOWN_FILE_EXTENSION.length());
    Map<String,Object> newPage=new HashMap<>();
    if (latestVersionFile != null && pageName.equals(Constants.LATEST_FILE_NAME)) {
      pageName=""String_Node_Str"" + latestVersionFile.substring(0,latestVersionFile.length() - Constants.MARKDOWN_FILE_EXTENSION.length()) + ""String_Node_Str"";
    }
    newPage.put(pageName,Constants.API_SUB_DIRECTORY + Constants.MKDOCS_FILE_SEPARATOR + apiFile);
    apiPagesList.add(newPage);
  }
  Map<String,Object> yamlConfigAPIPage=null;
  for (  Map<String,Object> yamlConfigPage : yamlConfigPagesList) {
    if (yamlConfigPage.get(Constants.MKDOCS_CONFIG_PAGES_API_KEY) != null) {
      yamlConfigAPIPage=yamlConfigPage;
      break;
    }
  }
  if (yamlConfigAPIPage == null) {
    yamlConfigAPIPage=new HashMap<>();
    yamlConfigPagesList.add(yamlConfigAPIPage);
  }
  yamlConfigAPIPage.put(Constants.MKDOCS_CONFIG_PAGES_API_KEY,apiPagesList);
  yaml.dump(yamlConfig,new OutputStreamWriter(new FileOutputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
}","/** 
 * This add a new page to the list of pages in the mkdocs configuration
 * @param mkdocsConfigFile           The mkdocs configuration file
 * @param documentationBaseDirectory The base directory of the documentation
 * @throws FileNotFoundException If mkdocs configuration file is not found
 */
public static void updateAPIPagesInMkdocsConfig(File mkdocsConfigFile,String documentationBaseDirectory) throws FileNotFoundException {
  File documentationDirectory=new File(documentationBaseDirectory + File.separator + Constants.API_SUB_DIRECTORY);
  String[] documentationFiles=documentationDirectory.list((directory,fileName) -> fileName.endsWith(Constants.MARKDOWN_FILE_EXTENSION));
  List<String> apiDirectoryContent;
  if (documentationFiles == null) {
    apiDirectoryContent=new ArrayList<>();
  }
 else {
    apiDirectoryContent=Arrays.asList(documentationFiles);
    apiDirectoryContent.sort(new Comparator<String>(){
      @Override public int compare(      String s1,      String s2){
        String[] s1s=s1.split(""String_Node_Str"");
        String[] s2s=s2.split(""String_Node_Str"");
        int i=0;
        while (s1s.length > i || s2s.length > i) {
          String s1a=""String_Node_Str"";
          String s2a=""String_Node_Str"";
          if (s1s.length > i) {
            s1a=s1s[i];
          }
          if (s2s.length > i) {
            s2a=s2s[i];
          }
          int s1aInt=Integer.parseInt(s1a);
          int s2aInt=Integer.parseInt(s2a);
          if (s2aInt > s1aInt) {
            return 1;
          }
 else           if (s2aInt < s1aInt) {
            return -1;
          }
          i++;
        }
        return 0;
      }
    }
);
  }
  String latestVersionFile=null;
  if (apiDirectoryContent.size() > 1) {
    String first=apiDirectoryContent.get(0);
    String second=apiDirectoryContent.get(1);
    if (first.equals(Constants.LATEST_FILE_NAME + Constants.MARKDOWN_FILE_EXTENSION)) {
      latestVersionFile=second;
    }
  }
  DumperOptions dumperOptions=new DumperOptions();
  dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  Yaml yaml=new Yaml(dumperOptions);
  Map<String,Object> yamlConfig=(Map<String,Object>)yaml.load(new InputStreamReader(new FileInputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
  List<Map<String,Object>> yamlConfigPagesList=(List<Map<String,Object>>)yamlConfig.get(Constants.MKDOCS_CONFIG_PAGES_KEY);
  List<Map<String,Object>> apiPagesList=new ArrayList<>();
  for (  String apiFile : apiDirectoryContent) {
    String pageName=apiFile.substring(0,apiFile.length() - Constants.MARKDOWN_FILE_EXTENSION.length());
    Map<String,Object> newPage=new HashMap<>();
    if (latestVersionFile != null && pageName.equals(Constants.LATEST_FILE_NAME)) {
      pageName=""String_Node_Str"" + latestVersionFile.substring(0,latestVersionFile.length() - Constants.MARKDOWN_FILE_EXTENSION.length()) + ""String_Node_Str"";
    }
    newPage.put(pageName,Constants.API_SUB_DIRECTORY + Constants.MKDOCS_FILE_SEPARATOR + apiFile);
    apiPagesList.add(newPage);
  }
  Map<String,Object> yamlConfigAPIPage=null;
  for (  Map<String,Object> yamlConfigPage : yamlConfigPagesList) {
    if (yamlConfigPage.get(Constants.MKDOCS_CONFIG_PAGES_API_KEY) != null) {
      yamlConfigAPIPage=yamlConfigPage;
      break;
    }
  }
  if (yamlConfigAPIPage == null) {
    yamlConfigAPIPage=new HashMap<>();
    yamlConfigPagesList.add(yamlConfigAPIPage);
  }
  yamlConfigAPIPage.put(Constants.MKDOCS_CONFIG_PAGES_API_KEY,apiPagesList);
  yaml.dump(yamlConfig,new OutputStreamWriter(new FileOutputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
}",0.9916312251337632
28791,"public SiddhiAppContext(){
  this.eternalReferencedHolders=new LinkedList<>();
  this.scriptFunctionMap=new HashMap<String,Script>();
}","public SiddhiAppContext(){
  this.eternalReferencedHolders=Collections.synchronizedList(new LinkedList<>());
  this.scriptFunctionMap=new HashMap<String,Script>();
}",0.9
28792,"public void initExecutor(ExpressionExecutor[] attributeExpressionExecutors,SiddhiAppContext siddhiAppContext,String queryName,ConfigReader configReader){
  this.configReader=configReader;
  try {
    this.siddhiAppContext=siddhiAppContext;
    this.attributeExpressionExecutors=attributeExpressionExecutors;
    attributeSize=attributeExpressionExecutors.length;
    this.queryName=queryName;
    siddhiAppContext.addEternalReferencedHolder(this);
    if (elementId == null) {
      elementId=""String_Node_Str"" + siddhiAppContext.getElementIdGenerator().createNewId();
    }
    siddhiAppContext.getSnapshotService().addSnapshotable(queryName,this);
    init(attributeExpressionExecutors,configReader,siddhiAppContext);
  }
 catch (  Throwable t) {
    throw new SiddhiAppCreationException(t);
  }
}","public void initExecutor(ExpressionExecutor[] attributeExpressionExecutors,SiddhiAppContext siddhiAppContext,String queryName,ConfigReader configReader){
  this.configReader=configReader;
  try {
    this.siddhiAppContext=siddhiAppContext;
    this.attributeExpressionExecutors=attributeExpressionExecutors;
    attributeSize=attributeExpressionExecutors.length;
    this.queryName=queryName;
    if (elementId == null) {
      elementId=""String_Node_Str"" + siddhiAppContext.getElementIdGenerator().createNewId();
    }
    siddhiAppContext.getSnapshotService().addSnapshotable(queryName,this);
    init(attributeExpressionExecutors,configReader,siddhiAppContext);
  }
 catch (  Throwable t) {
    throw new SiddhiAppCreationException(t);
  }
}",0.9643551523007128
28793,"@Override public ExpressionExecutor cloneExecutor(String key){
  try {
    FunctionExecutor functionExecutor=this.getClass().newInstance();
    ExpressionExecutor[] innerExpressionExecutors=new ExpressionExecutor[attributeSize];
    for (int i=0; i < attributeSize; i++) {
      innerExpressionExecutors[i]=attributeExpressionExecutors[i].cloneExecutor(key);
    }
    functionExecutor.elementId=elementId + ""String_Node_Str"" + key;
    functionExecutor.functionId=functionId;
    functionExecutor.initExecutor(innerExpressionExecutors,siddhiAppContext,queryName,configReader);
    functionExecutor.start();
    return functionExecutor;
  }
 catch (  Exception e) {
    throw new SiddhiAppRuntimeException(""String_Node_Str"" + this.getClass().getCanonicalName(),e);
  }
}","@Override public ExpressionExecutor cloneExecutor(String key){
  try {
    FunctionExecutor functionExecutor=this.getClass().newInstance();
    ExpressionExecutor[] innerExpressionExecutors=new ExpressionExecutor[attributeSize];
    for (int i=0; i < attributeSize; i++) {
      innerExpressionExecutors[i]=attributeExpressionExecutors[i].cloneExecutor(key);
    }
    functionExecutor.elementId=elementId + ""String_Node_Str"" + key;
    functionExecutor.functionId=functionId;
    functionExecutor.initExecutor(innerExpressionExecutors,siddhiAppContext,queryName,configReader);
    return functionExecutor;
  }
 catch (  Exception e) {
    throw new SiddhiAppRuntimeException(""String_Node_Str"" + this.getClass().getCanonicalName(),e);
  }
}",0.9801324503311258
28794,"public void addEternalReferencedHolder(EternalReferencedHolder eternalReferencedHolder){
  eternalReferencedHolders.add(eternalReferencedHolder);
}","public synchronized void addEternalReferencedHolder(EternalReferencedHolder eternalReferencedHolder){
  eternalReferencedHolders.add(eternalReferencedHolder);
}",0.9576547231270358
28795,"public List<EternalReferencedHolder> getEternalReferencedHolders(){
  return eternalReferencedHolders;
}","public List<EternalReferencedHolder> getEternalReferencedHolders(){
  return Collections.unmodifiableList(new ArrayList<>(eternalReferencedHolders));
}",0.8156862745098039
28796,"public SiddhiAppContext(){
  this.eternalReferencedHolders=new CopyOnWriteArrayList<EternalReferencedHolder>();
  this.scriptFunctionMap=new HashMap<String,Script>();
}","public SiddhiAppContext(){
  this.eternalReferencedHolders=new LinkedList<>();
  this.scriptFunctionMap=new HashMap<String,Script>();
}",0.8646864686468647
28797,"private synchronized void clonePartition(String key){
  PartitionInstanceRuntime partitionInstance=this.partitionInstanceRuntimeMap.get(key);
  if (partitionInstance == null) {
    List<QueryRuntime> queryRuntimeList=new ArrayList<QueryRuntime>();
    List<QueryRuntime> partitionedQueryRuntimeList=new CopyOnWriteArrayList<QueryRuntime>();
    for (    QueryRuntime queryRuntime : metaQueryRuntimeMap.values()) {
      QueryRuntime clonedQueryRuntime=queryRuntime.clone(key,localStreamJunctionMap);
      queryRuntimeList.add(clonedQueryRuntime);
      if (queryRuntime.isFromLocalStream()) {
        for (int i=0; i < clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().size(); i++) {
          String streamId=queryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver().getStreamId();
          StreamDefinition streamDefinition;
          if (streamId.startsWith(""String_Node_Str"")) {
            streamDefinition=(StreamDefinition)localStreamDefinitionMap.get(streamId);
          }
 else {
            streamDefinition=(StreamDefinition)streamDefinitionMap.get(streamId);
          }
          StreamJunction streamJunction=localStreamJunctionMap.get(streamId + key);
          if (streamJunction == null) {
            streamJunction=new StreamJunction(streamDefinition,siddhiAppContext.getExecutorService(),siddhiAppContext.getBufferSize(),siddhiAppContext);
            localStreamJunctionMap.put(streamId + key,streamJunction);
          }
          streamJunction.subscribe(clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver());
        }
      }
 else {
        partitionedQueryRuntimeList.add(clonedQueryRuntime);
      }
    }
    partitionInstanceRuntimeMap.putIfAbsent(key,new PartitionInstanceRuntime(key,queryRuntimeList));
    updatePartitionStreamReceivers(key,partitionedQueryRuntimeList);
  }
}","private synchronized void clonePartition(String key){
  PartitionInstanceRuntime partitionInstance=this.partitionInstanceRuntimeMap.get(key);
  if (partitionInstance == null) {
    List<QueryRuntime> queryRuntimeList=new ArrayList<QueryRuntime>();
    List<QueryRuntime> partitionedQueryRuntimeList=new ArrayList<QueryRuntime>();
    for (    QueryRuntime queryRuntime : metaQueryRuntimeMap.values()) {
      QueryRuntime clonedQueryRuntime=queryRuntime.clone(key,localStreamJunctionMap);
      queryRuntimeList.add(clonedQueryRuntime);
      if (queryRuntime.isFromLocalStream()) {
        for (int i=0; i < clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().size(); i++) {
          String streamId=queryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver().getStreamId();
          StreamDefinition streamDefinition;
          if (streamId.startsWith(""String_Node_Str"")) {
            streamDefinition=(StreamDefinition)localStreamDefinitionMap.get(streamId);
          }
 else {
            streamDefinition=(StreamDefinition)streamDefinitionMap.get(streamId);
          }
          StreamJunction streamJunction=localStreamJunctionMap.get(streamId + key);
          if (streamJunction == null) {
            streamJunction=new StreamJunction(streamDefinition,siddhiAppContext.getExecutorService(),siddhiAppContext.getBufferSize(),siddhiAppContext);
            localStreamJunctionMap.put(streamId + key,streamJunction);
          }
          streamJunction.subscribe(clonedQueryRuntime.getStreamRuntime().getSingleStreamRuntimes().get(i).getProcessStreamReceiver());
        }
      }
 else {
        partitionedQueryRuntimeList.add(clonedQueryRuntime);
      }
    }
    partitionInstanceRuntimeMap.putIfAbsent(key,new PartitionInstanceRuntime(key,queryRuntimeList));
    updatePartitionStreamReceivers(key,partitionedQueryRuntimeList);
  }
}",0.9971045011845222
28798,"@Override public void restoreState(Map<String,Object> state){
  HashMap<String,Map<String,Object>> data=(HashMap<String,Map<String,Object>>)state.get(""String_Node_Str"");
  for (  Map.Entry<String,Map<String,Object>> entry : data.entrySet()) {
    String key=entry.getKey();
    AttributeAggregator aAttributeAggregator=attributeAggregator.cloneAggregator(key);
    aAttributeAggregator.initAggregator(attributeExpressionExecutors,siddhiAppContext,configReader);
    aAttributeAggregator.start();
    aAttributeAggregator.restoreState(entry.getValue());
    aggregatorMap.put(key,aAttributeAggregator);
  }
}","@Override public void restoreState(Map<String,Object> state){
  HashMap<String,Map<String,Object>> data=(HashMap<String,Map<String,Object>>)state.get(""String_Node_Str"");
  for (  Map.Entry<String,Map<String,Object>> entry : data.entrySet()) {
    String key=entry.getKey();
    AttributeAggregator aAttributeAggregator=attributeAggregator.cloneAggregator(key);
    aAttributeAggregator.start();
    aAttributeAggregator.restoreState(entry.getValue());
    aggregatorMap.put(key,aAttributeAggregator);
  }
}",0.7726864330637916
28799,"@Override public Object execute(ComplexEvent event){
  if (event.getType() == ComplexEvent.Type.RESET) {
    Object aOutput=null;
    for (    AttributeAggregator attributeAggregator : aggregatorMap.values()) {
      aOutput=attributeAggregator.process(event);
    }
    return aOutput;
  }
  String key=keyThreadLocal.get();
  AttributeAggregator currentAttributeAggregator=aggregatorMap.get(key);
  if (currentAttributeAggregator == null) {
    currentAttributeAggregator=attributeAggregator.cloneAggregator(key);
    currentAttributeAggregator.initAggregator(attributeExpressionExecutors,siddhiAppContext,configReader);
    currentAttributeAggregator.start();
    aggregatorMap.put(key,currentAttributeAggregator);
  }
  return currentAttributeAggregator.process(event);
}","@Override public Object execute(ComplexEvent event){
  if (event.getType() == ComplexEvent.Type.RESET) {
    Object aOutput=null;
    for (    AttributeAggregator attributeAggregator : aggregatorMap.values()) {
      aOutput=attributeAggregator.process(event);
    }
    return aOutput;
  }
  String key=keyThreadLocal.get();
  AttributeAggregator currentAttributeAggregator=aggregatorMap.get(key);
  if (currentAttributeAggregator == null) {
    currentAttributeAggregator=attributeAggregator.cloneAggregator(key);
    currentAttributeAggregator.start();
    aggregatorMap.put(key,currentAttributeAggregator);
  }
  return currentAttributeAggregator.process(event);
}",0.7636867636867637
28800,"public AbsentLogicalPreStateProcessor(LogicalStateElement.Type type,StateInputStream.Type stateType,List<Map.Entry<Long,Set<Integer>>> withinStates,TimeConstant waitingTime,ReentrantLock lock){
  super(type,stateType,withinStates);
  this.lock=lock;
  if (waitingTime != null) {
    this.waitingTime=waitingTime.value();
  }
}","public AbsentLogicalPreStateProcessor(LogicalStateElement.Type type,StateInputStream.Type stateType,List<Map.Entry<Long,Set<Integer>>> withinStates,TimeConstant waitingTime){
  super(type,stateType,withinStates);
  if (waitingTime != null) {
    this.waitingTime=waitingTime.value();
    this.waitingTimeConstant=waitingTime;
  }
}",0.8797564687975646
28801,"/** 
 * Construct an AbsentStreamPreStateProcessor object.
 * @param stateType    PATTERN or SEQUENCE
 * @param withinStates the time defined by 'within' keyword
 * @param waitingTime  the waiting time defined by 'for' keyword
 */
public AbsentStreamPreStateProcessor(StateInputStream.Type stateType,List<Map.Entry<Long,Set<Integer>>> withinStates,TimeConstant waitingTime){
  super(stateType,withinStates);
  this.waitingTime=waitingTime.value();
}","/** 
 * Construct an AbsentStreamPreStateProcessor object.
 * @param stateType    PATTERN or SEQUENCE
 * @param withinStates the time defined by 'within' keyword
 * @param waitingTime  the waiting time defined by 'for' keyword
 */
public AbsentStreamPreStateProcessor(StateInputStream.Type stateType,List<Map.Entry<Long,Set<Integer>>> withinStates,TimeConstant waitingTime){
  super(stateType,withinStates);
  this.waitingTime=waitingTime.value();
  this.waitingTimeConstant=waitingTime;
}",0.957356076759062
28802,"private static InnerStateRuntime parse(StateElement stateElement,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,MetaStateEvent metaStateEvent,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,ProcessStreamReceiver> processStreamReceiverMap,StreamPreStateProcessor streamPreStateProcessor,StreamPostStateProcessor streamPostStateProcessor,StateInputStream.Type stateType,ArrayList<Map.Entry<Long,Set<Integer>>> withinStates,LatencyTracker latencyTracker,String queryName){
  if (stateElement instanceof StreamStateElement) {
    BasicSingleInputStream basicSingleInputStream=((StreamStateElement)stateElement).getBasicSingleInputStream();
    SingleStreamRuntime singleStreamRuntime=SingleInputStreamParser.parseInputStream(basicSingleInputStream,siddhiAppContext,variableExpressionExecutors,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,processStreamReceiverMap.get(basicSingleInputStream.getUniqueStreamIds().get(0)),false,false,queryName);
    int stateIndex=metaStateEvent.getStreamEventCount() - 1;
    if (streamPreStateProcessor == null) {
      if (stateElement.getWithin() != null) {
        Set<Integer> withinStateset=new HashSet<Integer>();
        withinStateset.add(SiddhiConstants.ANY);
        withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
      }
      if (stateElement instanceof AbsentStreamStateElement) {
        AbsentStreamPreStateProcessor absentProcessor=new AbsentStreamPreStateProcessor(stateType,clonewithinStates(withinStates),((AbsentStreamStateElement)stateElement).getWaitingTime());
        siddhiAppContext.addEternalReferencedHolder(absentProcessor);
        EntryValveProcessor entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
        entryValveProcessor.setToLast(absentProcessor);
        Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
        absentProcessor.setScheduler(scheduler);
        streamPreStateProcessor=absentProcessor;
      }
 else {
        streamPreStateProcessor=new StreamPreStateProcessor(stateType,clonewithinStates(withinStates));
      }
      streamPreStateProcessor.init(siddhiAppContext,queryName);
      if (stateElement.getWithin() != null) {
        withinStates.remove(0);
      }
    }
    streamPreStateProcessor.setStateId(stateIndex);
    streamPreStateProcessor.setNextProcessor(singleStreamRuntime.getProcessorChain());
    singleStreamRuntime.setProcessorChain(streamPreStateProcessor);
    if (streamPostStateProcessor == null) {
      if (stateElement instanceof AbsentStreamStateElement) {
        streamPostStateProcessor=new AbsentStreamPostStateProcessor();
      }
 else {
        streamPostStateProcessor=new StreamPostStateProcessor();
      }
    }
    streamPostStateProcessor.setStateId(stateIndex);
    singleStreamRuntime.getProcessorChain().setToLast(streamPostStateProcessor);
    streamPostStateProcessor.setThisStatePreProcessor(streamPreStateProcessor);
    streamPreStateProcessor.setThisStatePostProcessor(streamPostStateProcessor);
    streamPreStateProcessor.setThisLastProcessor(streamPostStateProcessor);
    StreamInnerStateRuntime innerStateRuntime=new StreamInnerStateRuntime(stateType);
    innerStateRuntime.setFirstProcessor(streamPreStateProcessor);
    innerStateRuntime.setLastProcessor(streamPostStateProcessor);
    innerStateRuntime.addStreamRuntime(singleStreamRuntime);
    return innerStateRuntime;
  }
 else   if (stateElement instanceof NextStateElement) {
    StateElement currentElement=((NextStateElement)stateElement).getStateElement();
    InnerStateRuntime currentInnerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateSet=new HashSet<Integer>();
      withinStateSet.add(currentInnerStateRuntime.getFirstProcessor().getStateId());
      withinStateSet.add(currentInnerStateRuntime.getLastProcessor().getStateId());
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateSet));
    }
    StateElement nextElement=((NextStateElement)stateElement).getNextStateElement();
    InnerStateRuntime nextInnerStateRuntime=parse(nextElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    currentInnerStateRuntime.getLastProcessor().setNextStatePreProcessor(nextInnerStateRuntime.getFirstProcessor());
    NextInnerStateRuntime nextStateRuntime=new NextInnerStateRuntime(currentInnerStateRuntime,nextInnerStateRuntime,stateType);
    nextStateRuntime.setFirstProcessor(currentInnerStateRuntime.getFirstProcessor());
    nextStateRuntime.setLastProcessor(nextInnerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : currentInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : nextInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return nextStateRuntime;
  }
 else   if (stateElement instanceof EveryStateElement) {
    StateElement currentElement=((EveryStateElement)stateElement).getStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    EveryInnerStateRuntime everyInnerStateRuntime=new EveryInnerStateRuntime(innerStateRuntime,stateType);
    everyInnerStateRuntime.setFirstProcessor(innerStateRuntime.getFirstProcessor());
    everyInnerStateRuntime.setLastProcessor(innerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime.getSingleStreamRuntimeList()) {
      everyInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    everyInnerStateRuntime.getLastProcessor().setNextEveryStatePerProcessor(everyInnerStateRuntime.getFirstProcessor());
    return everyInnerStateRuntime;
  }
 else   if (stateElement instanceof LogicalStateElement) {
    LogicalStateElement.Type type=((LogicalStateElement)stateElement).getType();
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    ReentrantLock lock=new ReentrantLock();
    LogicalPreStateProcessor logicalPreStateProcessor1;
    if (((LogicalStateElement)stateElement).getStreamStateElement1() instanceof AbsentStreamStateElement) {
      logicalPreStateProcessor1=new AbsentLogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates),((AbsentStreamStateElement)((LogicalStateElement)stateElement).getStreamStateElement1()).getWaitingTime(),lock);
      siddhiAppContext.addEternalReferencedHolder((AbsentLogicalPreStateProcessor)logicalPreStateProcessor1);
      EntryValveProcessor entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
      entryValveProcessor.setToLast(logicalPreStateProcessor1);
      Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
      ((SchedulingProcessor)logicalPreStateProcessor1).setScheduler(scheduler);
    }
 else {
      logicalPreStateProcessor1=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    }
    logicalPreStateProcessor1.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor1;
    if (((LogicalStateElement)stateElement).getStreamStateElement1() instanceof AbsentStreamStateElement) {
      logicalPostStateProcessor1=new AbsentLogicalPostStateProcessor(type);
    }
 else {
      logicalPostStateProcessor1=new LogicalPostStateProcessor(type);
    }
    LogicalPreStateProcessor logicalPreStateProcessor2;
    if (((LogicalStateElement)stateElement).getStreamStateElement2() instanceof AbsentStreamStateElement) {
      logicalPreStateProcessor2=new AbsentLogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates),((AbsentStreamStateElement)((LogicalStateElement)stateElement).getStreamStateElement2()).getWaitingTime(),lock);
      siddhiAppContext.addEternalReferencedHolder((AbsentLogicalPreStateProcessor)logicalPreStateProcessor2);
      EntryValveProcessor entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
      entryValveProcessor.setToLast(logicalPreStateProcessor2);
      Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
      ((SchedulingProcessor)logicalPreStateProcessor2).setScheduler(scheduler);
    }
 else {
      logicalPreStateProcessor2=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    }
    logicalPreStateProcessor2.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor2;
    if (((LogicalStateElement)stateElement).getStreamStateElement2() instanceof AbsentStreamStateElement) {
      logicalPostStateProcessor2=new AbsentLogicalPostStateProcessor(type);
    }
 else {
      logicalPostStateProcessor2=new LogicalPostStateProcessor(type);
    }
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    logicalPostStateProcessor1.setPartnerPreStateProcessor(logicalPreStateProcessor2);
    logicalPostStateProcessor2.setPartnerPreStateProcessor(logicalPreStateProcessor1);
    logicalPostStateProcessor1.setPartnerPostStateProcessor(logicalPostStateProcessor2);
    logicalPostStateProcessor2.setPartnerPostStateProcessor(logicalPostStateProcessor1);
    logicalPreStateProcessor1.setPartnerStatePreProcessor(logicalPreStateProcessor2);
    logicalPreStateProcessor2.setPartnerStatePreProcessor(logicalPreStateProcessor1);
    StateElement stateElement2=((LogicalStateElement)stateElement).getStreamStateElement2();
    InnerStateRuntime innerStateRuntime2=parse(stateElement2,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor2,logicalPostStateProcessor2,stateType,withinStates,latencyTracker,queryName);
    StateElement stateElement1=((LogicalStateElement)stateElement).getStreamStateElement1();
    InnerStateRuntime innerStateRuntime1=parse(stateElement1,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor1,logicalPostStateProcessor1,stateType,withinStates,latencyTracker,queryName);
    LogicalInnerStateRuntime logicalInnerStateRuntime=new LogicalInnerStateRuntime(innerStateRuntime1,innerStateRuntime2,stateType);
    logicalInnerStateRuntime.setFirstProcessor(innerStateRuntime1.getFirstProcessor());
    logicalInnerStateRuntime.setLastProcessor(innerStateRuntime2.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime2.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime1.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return logicalInnerStateRuntime;
  }
 else   if (stateElement instanceof CountStateElement) {
    int minCount=((CountStateElement)stateElement).getMinCount();
    int maxCount=((CountStateElement)stateElement).getMaxCount();
    if (minCount == SiddhiConstants.ANY) {
      minCount=0;
    }
    if (maxCount == SiddhiConstants.ANY) {
      maxCount=Integer.MAX_VALUE;
    }
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    CountPreStateProcessor countPreStateProcessor=new CountPreStateProcessor(minCount,maxCount,stateType,withinStates);
    countPreStateProcessor.init(siddhiAppContext,queryName);
    CountPostStateProcessor countPostStateProcessor=new CountPostStateProcessor(minCount,maxCount);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    countPreStateProcessor.setCountPostStateProcessor(countPostStateProcessor);
    StateElement currentElement=((CountStateElement)stateElement).getStreamStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,countPreStateProcessor,countPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    return new CountInnerStateRuntime((StreamInnerStateRuntime)innerStateRuntime);
  }
 else {
    throw new OperationNotSupportedException();
  }
}","private static InnerStateRuntime parse(StateElement stateElement,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,AbstractDefinition> aggregationDefinitionMap,Map<String,Table> tableMap,MetaStateEvent metaStateEvent,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,ProcessStreamReceiver> processStreamReceiverMap,StreamPreStateProcessor streamPreStateProcessor,StreamPostStateProcessor streamPostStateProcessor,StateInputStream.Type stateType,ArrayList<Map.Entry<Long,Set<Integer>>> withinStates,LatencyTracker latencyTracker,String queryName){
  if (stateElement instanceof StreamStateElement) {
    BasicSingleInputStream basicSingleInputStream=((StreamStateElement)stateElement).getBasicSingleInputStream();
    SingleStreamRuntime singleStreamRuntime=SingleInputStreamParser.parseInputStream(basicSingleInputStream,siddhiAppContext,variableExpressionExecutors,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,processStreamReceiverMap.get(basicSingleInputStream.getUniqueStreamIds().get(0)),false,false,queryName);
    int stateIndex=metaStateEvent.getStreamEventCount() - 1;
    if (streamPreStateProcessor == null) {
      if (stateElement.getWithin() != null) {
        Set<Integer> withinStateset=new HashSet<Integer>();
        withinStateset.add(SiddhiConstants.ANY);
        withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
      }
      if (stateElement instanceof AbsentStreamStateElement) {
        AbsentStreamPreStateProcessor absentProcessor=new AbsentStreamPreStateProcessor(stateType,clonewithinStates(withinStates),((AbsentStreamStateElement)stateElement).getWaitingTime());
        siddhiAppContext.addEternalReferencedHolder(absentProcessor);
        EntryValveProcessor entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
        entryValveProcessor.setToLast(absentProcessor);
        Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
        absentProcessor.setScheduler(scheduler);
        streamPreStateProcessor=absentProcessor;
      }
 else {
        streamPreStateProcessor=new StreamPreStateProcessor(stateType,clonewithinStates(withinStates));
      }
      streamPreStateProcessor.init(siddhiAppContext,queryName);
      if (stateElement.getWithin() != null) {
        withinStates.remove(0);
      }
    }
    streamPreStateProcessor.setStateId(stateIndex);
    streamPreStateProcessor.setNextProcessor(singleStreamRuntime.getProcessorChain());
    singleStreamRuntime.setProcessorChain(streamPreStateProcessor);
    if (streamPostStateProcessor == null) {
      if (stateElement instanceof AbsentStreamStateElement) {
        streamPostStateProcessor=new AbsentStreamPostStateProcessor();
      }
 else {
        streamPostStateProcessor=new StreamPostStateProcessor();
      }
    }
    streamPostStateProcessor.setStateId(stateIndex);
    singleStreamRuntime.getProcessorChain().setToLast(streamPostStateProcessor);
    streamPostStateProcessor.setThisStatePreProcessor(streamPreStateProcessor);
    streamPreStateProcessor.setThisStatePostProcessor(streamPostStateProcessor);
    streamPreStateProcessor.setThisLastProcessor(streamPostStateProcessor);
    StreamInnerStateRuntime innerStateRuntime=new StreamInnerStateRuntime(stateType);
    innerStateRuntime.setFirstProcessor(streamPreStateProcessor);
    innerStateRuntime.setLastProcessor(streamPostStateProcessor);
    innerStateRuntime.addStreamRuntime(singleStreamRuntime);
    return innerStateRuntime;
  }
 else   if (stateElement instanceof NextStateElement) {
    StateElement currentElement=((NextStateElement)stateElement).getStateElement();
    InnerStateRuntime currentInnerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateSet=new HashSet<Integer>();
      withinStateSet.add(currentInnerStateRuntime.getFirstProcessor().getStateId());
      withinStateSet.add(currentInnerStateRuntime.getLastProcessor().getStateId());
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateSet));
    }
    StateElement nextElement=((NextStateElement)stateElement).getNextStateElement();
    InnerStateRuntime nextInnerStateRuntime=parse(nextElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    currentInnerStateRuntime.getLastProcessor().setNextStatePreProcessor(nextInnerStateRuntime.getFirstProcessor());
    NextInnerStateRuntime nextStateRuntime=new NextInnerStateRuntime(currentInnerStateRuntime,nextInnerStateRuntime,stateType);
    nextStateRuntime.setFirstProcessor(currentInnerStateRuntime.getFirstProcessor());
    nextStateRuntime.setLastProcessor(nextInnerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : currentInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : nextInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return nextStateRuntime;
  }
 else   if (stateElement instanceof EveryStateElement) {
    StateElement currentElement=((EveryStateElement)stateElement).getStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    EveryInnerStateRuntime everyInnerStateRuntime=new EveryInnerStateRuntime(innerStateRuntime,stateType);
    everyInnerStateRuntime.setFirstProcessor(innerStateRuntime.getFirstProcessor());
    everyInnerStateRuntime.setLastProcessor(innerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime.getSingleStreamRuntimeList()) {
      everyInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    everyInnerStateRuntime.getLastProcessor().setNextEveryStatePerProcessor(everyInnerStateRuntime.getFirstProcessor());
    return everyInnerStateRuntime;
  }
 else   if (stateElement instanceof LogicalStateElement) {
    LogicalStateElement.Type type=((LogicalStateElement)stateElement).getType();
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    LogicalPreStateProcessor logicalPreStateProcessor1;
    if (((LogicalStateElement)stateElement).getStreamStateElement1() instanceof AbsentStreamStateElement) {
      logicalPreStateProcessor1=new AbsentLogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates),((AbsentStreamStateElement)((LogicalStateElement)stateElement).getStreamStateElement1()).getWaitingTime());
      siddhiAppContext.addEternalReferencedHolder((AbsentLogicalPreStateProcessor)logicalPreStateProcessor1);
      EntryValveProcessor entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
      entryValveProcessor.setToLast(logicalPreStateProcessor1);
      Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
      ((SchedulingProcessor)logicalPreStateProcessor1).setScheduler(scheduler);
    }
 else {
      logicalPreStateProcessor1=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    }
    logicalPreStateProcessor1.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor1;
    if (((LogicalStateElement)stateElement).getStreamStateElement1() instanceof AbsentStreamStateElement) {
      logicalPostStateProcessor1=new AbsentLogicalPostStateProcessor(type);
    }
 else {
      logicalPostStateProcessor1=new LogicalPostStateProcessor(type);
    }
    LogicalPreStateProcessor logicalPreStateProcessor2;
    if (((LogicalStateElement)stateElement).getStreamStateElement2() instanceof AbsentStreamStateElement) {
      logicalPreStateProcessor2=new AbsentLogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates),((AbsentStreamStateElement)((LogicalStateElement)stateElement).getStreamStateElement2()).getWaitingTime());
      siddhiAppContext.addEternalReferencedHolder((AbsentLogicalPreStateProcessor)logicalPreStateProcessor2);
      EntryValveProcessor entryValveProcessor=new EntryValveProcessor(siddhiAppContext);
      entryValveProcessor.setToLast(logicalPreStateProcessor2);
      Scheduler scheduler=SchedulerParser.parse(siddhiAppContext.getScheduledExecutorService(),entryValveProcessor,siddhiAppContext);
      ((SchedulingProcessor)logicalPreStateProcessor2).setScheduler(scheduler);
    }
 else {
      logicalPreStateProcessor2=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    }
    logicalPreStateProcessor2.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor2;
    if (((LogicalStateElement)stateElement).getStreamStateElement2() instanceof AbsentStreamStateElement) {
      logicalPostStateProcessor2=new AbsentLogicalPostStateProcessor(type);
    }
 else {
      logicalPostStateProcessor2=new LogicalPostStateProcessor(type);
    }
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    logicalPostStateProcessor1.setPartnerPreStateProcessor(logicalPreStateProcessor2);
    logicalPostStateProcessor2.setPartnerPreStateProcessor(logicalPreStateProcessor1);
    logicalPostStateProcessor1.setPartnerPostStateProcessor(logicalPostStateProcessor2);
    logicalPostStateProcessor2.setPartnerPostStateProcessor(logicalPostStateProcessor1);
    logicalPreStateProcessor1.setPartnerStatePreProcessor(logicalPreStateProcessor2);
    logicalPreStateProcessor2.setPartnerStatePreProcessor(logicalPreStateProcessor1);
    StateElement stateElement2=((LogicalStateElement)stateElement).getStreamStateElement2();
    InnerStateRuntime innerStateRuntime2=parse(stateElement2,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor2,logicalPostStateProcessor2,stateType,withinStates,latencyTracker,queryName);
    StateElement stateElement1=((LogicalStateElement)stateElement).getStreamStateElement1();
    InnerStateRuntime innerStateRuntime1=parse(stateElement1,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor1,logicalPostStateProcessor1,stateType,withinStates,latencyTracker,queryName);
    LogicalInnerStateRuntime logicalInnerStateRuntime=new LogicalInnerStateRuntime(innerStateRuntime1,innerStateRuntime2,stateType);
    logicalInnerStateRuntime.setFirstProcessor(innerStateRuntime1.getFirstProcessor());
    logicalInnerStateRuntime.setLastProcessor(innerStateRuntime2.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime2.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime1.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return logicalInnerStateRuntime;
  }
 else   if (stateElement instanceof CountStateElement) {
    int minCount=((CountStateElement)stateElement).getMinCount();
    int maxCount=((CountStateElement)stateElement).getMaxCount();
    if (minCount == SiddhiConstants.ANY) {
      minCount=0;
    }
    if (maxCount == SiddhiConstants.ANY) {
      maxCount=Integer.MAX_VALUE;
    }
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    CountPreStateProcessor countPreStateProcessor=new CountPreStateProcessor(minCount,maxCount,stateType,withinStates);
    countPreStateProcessor.init(siddhiAppContext,queryName);
    CountPostStateProcessor countPostStateProcessor=new CountPostStateProcessor(minCount,maxCount);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    countPreStateProcessor.setCountPostStateProcessor(countPostStateProcessor);
    StateElement currentElement=((CountStateElement)stateElement).getStreamStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,countPreStateProcessor,countPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    return new CountInnerStateRuntime((StreamInnerStateRuntime)innerStateRuntime);
  }
 else {
    throw new OperationNotSupportedException();
  }
}",0.9980890367329606
28803,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  MavenProject rootMavenProject=mavenProject;
  while (rootMavenProject.getParent().getBasedir() != null) {
    rootMavenProject=rootMavenProject.getParent();
  }
  String moduleTargetPath;
  if (moduleTargetDirectory != null) {
    moduleTargetPath=moduleTargetDirectory.getAbsolutePath();
  }
 else {
    moduleTargetPath=mavenProject.getBuild().getDirectory();
  }
  String docGenBasePath;
  if (docGenBaseDirectory != null) {
    docGenBasePath=docGenBaseDirectory.getAbsolutePath();
  }
 else {
    docGenBasePath=rootMavenProject.getBasedir() + File.separator + Constants.DOCS_DIRECTORY;
  }
  if (homePageTemplateFile == null) {
    homePageTemplateFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.README_FILE_NAME+ Constants.MARKDOWN_FILE_EXTENSION);
  }
  if (mkdocsConfigFile == null) {
    mkdocsConfigFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.MKDOCS_CONFIG_FILE_NAME+ Constants.YAML_FILE_EXTENSION);
  }
  if (homePageFileName == null) {
    homePageFileName=Constants.MARKDOWN_HOME_PAGE_TEMPLATE;
  }
  List<NamespaceMetaData> namespaceMetaDataList;
  try {
    namespaceMetaDataList=DocumentationUtils.getExtensionMetaData(moduleTargetPath,mavenProject.getRuntimeClasspathElements(),getLog());
  }
 catch (  DependencyResolutionRequiredException e) {
    throw new MojoFailureException(""String_Node_Str"",e);
  }
  if (namespaceMetaDataList.size() > 0) {
    DocumentationUtils.generateDocumentation(namespaceMetaDataList,docGenBasePath,mavenProject.getVersion());
    DocumentationUtils.updateHomePage(homePageTemplateFile,docGenBasePath,homePageFileName,mkdocsConfigFile,mavenProject.getVersion(),namespaceMetaDataList,getLog());
  }
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  MavenProject rootMavenProject=mavenProject;
  while (rootMavenProject.getParent().getBasedir() != null) {
    rootMavenProject=rootMavenProject.getParent();
  }
  String moduleTargetPath;
  if (moduleTargetDirectory != null) {
    moduleTargetPath=moduleTargetDirectory.getAbsolutePath();
  }
 else {
    moduleTargetPath=mavenProject.getBuild().getDirectory();
  }
  String docGenBasePath;
  if (docGenBaseDirectory != null) {
    docGenBasePath=docGenBaseDirectory.getAbsolutePath();
  }
 else {
    docGenBasePath=rootMavenProject.getBasedir() + File.separator + Constants.DOCS_DIRECTORY;
  }
  if (homePageTemplateFile == null) {
    homePageTemplateFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.README_FILE_NAME+ Constants.MARKDOWN_FILE_EXTENSION);
  }
  if (mkdocsConfigFile == null) {
    mkdocsConfigFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.MKDOCS_CONFIG_FILE_NAME+ Constants.YAML_FILE_EXTENSION);
  }
  File homePageFile;
  if (homePageFileName == null) {
    homePageFile=new File(docGenBasePath + File.separator + Constants.HOMEPAGE_FILE_NAME+ Constants.MARKDOWN_FILE_EXTENSION);
  }
 else {
    homePageFile=new File(docGenBasePath + File.separator + homePageFileName);
  }
  if (readmeFile == null) {
    readmeFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.README_FILE_NAME+ Constants.MARKDOWN_FILE_EXTENSION);
  }
  List<NamespaceMetaData> namespaceMetaDataList;
  try {
    namespaceMetaDataList=DocumentationUtils.getExtensionMetaData(moduleTargetPath,mavenProject.getRuntimeClasspathElements(),getLog());
  }
 catch (  DependencyResolutionRequiredException e) {
    throw new MojoFailureException(""String_Node_Str"",e);
  }
  if (namespaceMetaDataList.size() > 0) {
    DocumentationUtils.generateDocumentation(namespaceMetaDataList,docGenBasePath,mavenProject.getVersion());
    DocumentationUtils.updateHeadingsInMarkdownFile(homePageTemplateFile,homePageFile,rootMavenProject.getArtifactId(),mavenProject.getVersion(),namespaceMetaDataList);
    DocumentationUtils.updateHeadingsInMarkdownFile(readmeFile,readmeFile,rootMavenProject.getArtifactId(),mavenProject.getVersion(),namespaceMetaDataList);
    try {
      DocumentationUtils.updateAPIPagesInMkdocsConfig(mkdocsConfigFile,docGenBasePath);
    }
 catch (    FileNotFoundException e) {
      getLog().warn(""String_Node_Str"" + mkdocsConfigFile.getAbsolutePath() + ""String_Node_Str"");
    }
  }
}",0.7849561605906784
28804,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  MavenProject rootMavenProject=mavenProject;
  while (rootMavenProject.getParent().getBasedir() != null) {
    rootMavenProject=rootMavenProject.getParent();
  }
  if (mkdocsConfigFile == null) {
    mkdocsConfigFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.MKDOCS_CONFIG_FILE_NAME+ Constants.YAML_FILE_EXTENSION);
  }
  String docGenBasePath;
  if (docGenBaseDirectory != null) {
    docGenBasePath=docGenBaseDirectory.getAbsolutePath();
  }
 else {
    docGenBasePath=rootMavenProject.getBasedir() + File.separator + Constants.DOCS_DIRECTORY;
  }
  if (homePageTemplateFile == null) {
    homePageTemplateFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.README_FILE_NAME+ Constants.MARKDOWN_FILE_EXTENSION);
  }
  if (homePageFileName == null) {
    homePageFileName=Constants.MARKDOWN_HOME_PAGE_TEMPLATE;
  }
  String moduleTargetPath;
  if (moduleTargetDirectory != null) {
    moduleTargetPath=moduleTargetDirectory.getAbsolutePath();
  }
 else {
    moduleTargetPath=mavenProject.getBuild().getDirectory();
  }
  List<NamespaceMetaData> namespaceMetaDataList;
  try {
    namespaceMetaDataList=DocumentationUtils.getExtensionMetaData(moduleTargetPath,mavenProject.getRuntimeClasspathElements(),getLog());
  }
 catch (  DependencyResolutionRequiredException e) {
    throw new MojoFailureException(""String_Node_Str"",e);
  }
  DocumentationUtils.removeSnapshotAPIDocs(mkdocsConfigFile,docGenBasePath,getLog());
  if (namespaceMetaDataList.size() > 0) {
    DocumentationUtils.updateHomePage(homePageTemplateFile,docGenBasePath,homePageFileName,mkdocsConfigFile,mavenProject.getVersion(),namespaceMetaDataList,getLog());
  }
  DocumentationUtils.deployMkdocsOnGitHubPages(mkdocsConfigFile,mavenProject.getVersion(),getLog());
  DocumentationUtils.updateDocumentationOnGitHub(docGenBasePath,mkdocsConfigFile,mavenProject.getVersion(),getLog());
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  MavenProject rootMavenProject=mavenProject;
  while (rootMavenProject.getParent().getBasedir() != null) {
    rootMavenProject=rootMavenProject.getParent();
  }
  if (mkdocsConfigFile == null) {
    mkdocsConfigFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.MKDOCS_CONFIG_FILE_NAME+ Constants.YAML_FILE_EXTENSION);
  }
  String docGenBasePath;
  if (docGenBaseDirectory != null) {
    docGenBasePath=docGenBaseDirectory.getAbsolutePath();
  }
 else {
    docGenBasePath=rootMavenProject.getBasedir() + File.separator + Constants.DOCS_DIRECTORY;
  }
  if (readmeFile == null) {
    readmeFile=new File(rootMavenProject.getBasedir() + File.separator + Constants.README_FILE_NAME+ Constants.MARKDOWN_FILE_EXTENSION);
  }
  DocumentationUtils.removeSnapshotAPIDocs(mkdocsConfigFile,docGenBasePath,getLog());
  DocumentationUtils.deployMkdocsOnGitHubPages(mkdocsConfigFile,mavenProject.getVersion(),getLog());
  DocumentationUtils.updateDocumentationOnGitHub(docGenBasePath,mkdocsConfigFile,readmeFile,mavenProject.getVersion(),getLog());
}",0.5671451355661882
28805,"/** 
 * Remove the snapshot version documentation files from docs/api directory
 * @param mkdocsConfigFile           The mkdocs configuration file
 * @param documentationBaseDirectory The path of the base directory in which the documentation will be generated
 * @param logger                     The maven plugin logger
 */
public static void removeSnapshotAPIDocs(File mkdocsConfigFile,String documentationBaseDirectory,Log logger){
  File apiDocsDirectory=new File(documentationBaseDirectory + File.separator + Constants.API_SUB_DIRECTORY);
  String[] documentationFileNames=apiDocsDirectory.list((directory,fileName) -> fileName.endsWith(Constants.MARKDOWN_FILE_EXTENSION));
  if (documentationFileNames != null) {
    List<String> documentationFilesList=new ArrayList<>();
    for (    String documentationFileName : documentationFileNames) {
      if (documentationFileName.endsWith(Constants.SNAPSHOT_VERSION_POSTFIX + Constants.MARKDOWN_FILE_EXTENSION)) {
        File documentationFile=new File(apiDocsDirectory.getAbsolutePath() + File.separator + documentationFileName);
        if (!documentationFile.delete()) {
          logger.warn(""String_Node_Str"" + documentationFile.getAbsolutePath());
        }
      }
 else {
        documentationFilesList.add(documentationFileName);
      }
    }
    try {
      updateAPIPagesInMkdocsConfig(mkdocsConfigFile,documentationFilesList);
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + mkdocsConfigFile.getAbsolutePath() + ""String_Node_Str"");
    }
  }
}","/** 
 * Remove the snapshot version documentation files from docs/api directory
 * @param mkdocsConfigFile           The mkdocs configuration file
 * @param documentationBaseDirectory The path of the base directory in which the documentation will be generated
 * @param logger                     The maven plugin logger
 */
public static void removeSnapshotAPIDocs(File mkdocsConfigFile,String documentationBaseDirectory,Log logger){
  File apiDocsDirectory=new File(documentationBaseDirectory + File.separator + Constants.API_SUB_DIRECTORY);
  String[] documentationFileNames=apiDocsDirectory.list((directory,fileName) -> fileName.endsWith(Constants.MARKDOWN_FILE_EXTENSION));
  if (documentationFileNames != null) {
    for (    String documentationFileName : documentationFileNames) {
      if (documentationFileName.endsWith(Constants.SNAPSHOT_VERSION_POSTFIX + Constants.MARKDOWN_FILE_EXTENSION)) {
        File documentationFile=new File(apiDocsDirectory.getAbsolutePath() + File.separator + documentationFileName);
        if (!documentationFile.delete()) {
          logger.warn(""String_Node_Str"" + documentationFile.getAbsolutePath());
        }
      }
    }
    try {
      updateAPIPagesInMkdocsConfig(mkdocsConfigFile,documentationBaseDirectory);
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + mkdocsConfigFile.getAbsolutePath() + ""String_Node_Str"");
    }
  }
}",0.947190250507786
28806,"/** 
 * Commit the documentation directory and the mkdocs config file
 * @param docsDirectory    The docs drectory
 * @param mkdocsConfigFile The mkdocs configuration file
 * @param version          The version of the documentation
 * @param logger           The maven logger
 */
public static void updateDocumentationOnGitHub(String docsDirectory,File mkdocsConfigFile,String version,Log logger){
  try {
    executeCommand(new String[]{Constants.GIT_COMMAND,Constants.GIT_ADD_COMMAND,docsDirectory},logger);
    executeCommand(new String[]{Constants.GIT_COMMAND,Constants.GIT_COMMIT_COMMAND,Constants.GIT_COMMIT_COMMAND_MESSAGE_ARGUMENT,String.format(Constants.GIT_COMMIT_COMMAND_MESSAGE_FORMAT,version,version),Constants.GIT_COMMIT_COMMAND_FILES_ARGUMENT,docsDirectory,mkdocsConfigFile.getAbsolutePath()},logger);
    executeCommand(new String[]{Constants.GIT_COMMAND,Constants.GIT_PUSH_COMMAND,Constants.GIT_PUSH_COMMAND_REMOTE,Constants.GIT_PUSH_COMMAND_REMOTE_BRANCH},logger);
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t);
  }
}","/** 
 * Commit the documentation directory and the mkdocs config file
 * @param docsDirectory    The docs drectory
 * @param mkdocsConfigFile The mkdocs configuration file
 * @param readmeFile       The read me file
 * @param version          The version of the documentation
 * @param logger           The maven logger
 */
public static void updateDocumentationOnGitHub(String docsDirectory,File mkdocsConfigFile,File readmeFile,String version,Log logger){
  try {
    executeCommand(new String[]{Constants.GIT_COMMAND,Constants.GIT_ADD_COMMAND,docsDirectory},logger);
    executeCommand(new String[]{Constants.GIT_COMMAND,Constants.GIT_COMMIT_COMMAND,Constants.GIT_COMMIT_COMMAND_MESSAGE_ARGUMENT,String.format(Constants.GIT_COMMIT_COMMAND_MESSAGE_FORMAT,version,version),Constants.GIT_COMMIT_COMMAND_FILES_ARGUMENT,docsDirectory,mkdocsConfigFile.getAbsolutePath(),readmeFile.getAbsolutePath()},logger);
    executeCommand(new String[]{Constants.GIT_COMMAND,Constants.GIT_PUSH_COMMAND,Constants.GIT_PUSH_COMMAND_REMOTE,Constants.GIT_PUSH_COMMAND_REMOTE_BRANCH},logger);
  }
 catch (  Throwable t) {
    logger.warn(""String_Node_Str"",t);
  }
}",0.9595270577535244
28807,"/** 
 * This add a new page to the list of pages in the mkdocs configuration
 * @param mkdocsConfigFile    The mkdocs configuration file
 * @param apiDirectoryContent The contents of the api directory
 * @throws FileNotFoundException If mkdocs configuration file is not found
 */
private static void updateAPIPagesInMkdocsConfig(File mkdocsConfigFile,List<String> apiDirectoryContent) throws FileNotFoundException {
  DumperOptions dumperOptions=new DumperOptions();
  dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  Yaml yaml=new Yaml(dumperOptions);
  Map<String,Object> yamlConfig=(Map<String,Object>)yaml.load(new InputStreamReader(new FileInputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
  List<Map<String,Object>> yamlConfigPagesList=(List<Map<String,Object>>)yamlConfig.get(Constants.MKDOCS_CONFIG_PAGES_KEY);
  List<Map<String,Object>> apiPagesList=new ArrayList<>();
  for (  String apiFile : apiDirectoryContent) {
    String pageName=apiFile.substring(0,apiFile.length() - Constants.MARKDOWN_FILE_EXTENSION.length());
    Map<String,Object> newPage=new HashMap<>();
    newPage.put(pageName,Constants.API_SUB_DIRECTORY + Constants.MKDOCS_FILE_SEPARATOR + apiFile);
    apiPagesList.add(newPage);
  }
  Map<String,Object> yamlConfigAPIPage=null;
  for (  Map<String,Object> yamlConfigPage : yamlConfigPagesList) {
    if (yamlConfigPage.get(Constants.MKDOCS_CONFIG_PAGES_API_KEY) != null) {
      yamlConfigAPIPage=yamlConfigPage;
      break;
    }
  }
  if (yamlConfigAPIPage == null) {
    yamlConfigAPIPage=new HashMap<>();
    yamlConfigPagesList.add(yamlConfigAPIPage);
  }
  yamlConfigAPIPage.put(Constants.MKDOCS_CONFIG_PAGES_API_KEY,apiPagesList);
  yaml.dump(yamlConfig,new OutputStreamWriter(new FileOutputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
}","/** 
 * This add a new page to the list of pages in the mkdocs configuration
 * @param mkdocsConfigFile           The mkdocs configuration file
 * @param documentationBaseDirectory The base directory of the documentation
 * @throws FileNotFoundException If mkdocs configuration file is not found
 */
public static void updateAPIPagesInMkdocsConfig(File mkdocsConfigFile,String documentationBaseDirectory) throws FileNotFoundException {
  File documentationDirectory=new File(documentationBaseDirectory + File.separator + Constants.API_SUB_DIRECTORY);
  String[] documentationFiles=documentationDirectory.list((directory,fileName) -> fileName.endsWith(Constants.MARKDOWN_FILE_EXTENSION));
  List<String> apiDirectoryContent;
  if (documentationFiles == null) {
    apiDirectoryContent=new ArrayList<>();
  }
 else {
    apiDirectoryContent=Arrays.asList(documentationFiles);
    apiDirectoryContent.sort(String::compareTo);
  }
  DumperOptions dumperOptions=new DumperOptions();
  dumperOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  Yaml yaml=new Yaml(dumperOptions);
  Map<String,Object> yamlConfig=(Map<String,Object>)yaml.load(new InputStreamReader(new FileInputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
  List<Map<String,Object>> yamlConfigPagesList=(List<Map<String,Object>>)yamlConfig.get(Constants.MKDOCS_CONFIG_PAGES_KEY);
  List<Map<String,Object>> apiPagesList=new ArrayList<>();
  for (  String apiFile : apiDirectoryContent) {
    String pageName=apiFile.substring(0,apiFile.length() - Constants.MARKDOWN_FILE_EXTENSION.length());
    Map<String,Object> newPage=new HashMap<>();
    newPage.put(pageName,Constants.API_SUB_DIRECTORY + Constants.MKDOCS_FILE_SEPARATOR + apiFile);
    apiPagesList.add(newPage);
  }
  Map<String,Object> yamlConfigAPIPage=null;
  for (  Map<String,Object> yamlConfigPage : yamlConfigPagesList) {
    if (yamlConfigPage.get(Constants.MKDOCS_CONFIG_PAGES_API_KEY) != null) {
      yamlConfigAPIPage=yamlConfigPage;
      break;
    }
  }
  if (yamlConfigAPIPage == null) {
    yamlConfigAPIPage=new HashMap<>();
    yamlConfigPagesList.add(yamlConfigAPIPage);
  }
  yamlConfigAPIPage.put(Constants.MKDOCS_CONFIG_PAGES_API_KEY,apiPagesList);
  yaml.dump(yamlConfig,new OutputStreamWriter(new FileOutputStream(mkdocsConfigFile),Constants.DEFAULT_CHARSET));
}",0.5688029020556228
28808,"public IncrementalExecutor(TimePeriod.Duration duration,List<ExpressionExecutor> processExpressionExecutors,GroupByKeyGenerator groupByKeyGenerator,MetaStreamEvent metaStreamEvent,int bufferSize,String aggregatorName,IncrementalExecutor child,boolean isRoot,Table table,SiddhiAppContext siddhiAppContext,boolean isProcessingOnExternalTime){
  this.duration=duration;
  this.next=child;
  this.isRoot=isRoot;
  this.table=table;
  this.siddhiAppContext=siddhiAppContext;
  this.aggregatorName=aggregatorName;
  this.bufferSize=bufferSize;
  this.streamEventPool=new StreamEventPool(metaStreamEvent,10);
  this.isProcessingOnExternalTime=isProcessingOnExternalTime;
  this.timestampExpressionExecutor=processExpressionExecutors.remove(0);
  this.baseIncrementalValueStore=new BaseIncrementalValueStore(-1,processExpressionExecutors);
  if (groupByKeyGenerator != null) {
    this.groupByKeyGenerator=groupByKeyGenerator;
    isGroupBy=true;
    if (bufferSize > 0) {
      baseIncrementalValueGroupByStoreList=new ArrayList<>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueGroupByStoreList.add(new HashMap<>());
      }
    }
 else {
      baseIncrementalValueStoreMap=new HashMap<>();
    }
  }
 else {
    isGroupBy=false;
    if (bufferSize > 0) {
      baseIncrementalValueStoreList=new ArrayList<BaseIncrementalValueStore>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueStoreList.add(baseIncrementalValueStore.cloneStore(null,-1));
      }
    }
  }
  this.resetEvent=streamEventPool.borrowEvent();
  this.resetEvent.setType(ComplexEvent.Type.RESET);
  setNextExecutor(child);
}","public IncrementalExecutor(TimePeriod.Duration duration,List<ExpressionExecutor> processExpressionExecutors,GroupByKeyGenerator groupByKeyGenerator,MetaStreamEvent metaStreamEvent,int bufferSize,String aggregatorName,IncrementalExecutor child,boolean isRoot,Table table,SiddhiAppContext siddhiAppContext,boolean isProcessingOnExternalTime){
  this.duration=duration;
  this.next=child;
  this.isRoot=isRoot;
  this.table=table;
  this.bufferSize=bufferSize;
  this.streamEventPool=new StreamEventPool(metaStreamEvent,10);
  this.isProcessingOnExternalTime=isProcessingOnExternalTime;
  this.timestampExpressionExecutor=processExpressionExecutors.remove(0);
  this.baseIncrementalValueStore=new BaseIncrementalValueStore(-1,processExpressionExecutors);
  if (groupByKeyGenerator != null) {
    this.groupByKeyGenerator=groupByKeyGenerator;
    isGroupBy=true;
    if (bufferSize > 0) {
      baseIncrementalValueGroupByStoreList=new ArrayList<>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueGroupByStoreList.add(new HashMap<>());
      }
    }
 else {
      baseIncrementalValueStoreMap=new HashMap<>();
    }
  }
 else {
    isGroupBy=false;
    if (bufferSize > 0) {
      baseIncrementalValueStoreList=new ArrayList<>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueStoreList.add(baseIncrementalValueStore.cloneStore(null,-1));
      }
    }
  }
  this.resetEvent=streamEventPool.borrowEvent();
  this.resetEvent.setType(ComplexEvent.Type.RESET);
  setNextExecutor(child);
}",0.9675625579240036
28809,"@Override public void process(ComplexEventChunk complexEventChunk){
  ComplexEventChunk<StreamEvent> streamEventChunk=new ComplexEventChunk<>(complexEventChunk.isBatch());
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    streamEventChunk.add(streamEventCloner.copyStreamEvent((StreamEvent)complexEvent));
  }
  incrementalExecutor.execute(complexEventChunk);
}","@Override public void process(ComplexEventChunk complexEventChunk){
  ComplexEventChunk<StreamEvent> streamEventChunk=new ComplexEventChunk<>(complexEventChunk.isBatch());
  while (complexEventChunk.hasNext()) {
    ComplexEvent complexEvent=complexEventChunk.next();
    StreamEvent borrowedEvent=streamEventPool.borrowEvent();
    for (int i=0; i < incomingExpressionExecutors.size(); i++) {
      ExpressionExecutor expressionExecutor=incomingExpressionExecutors.get(i);
      borrowedEvent.setOutputData(expressionExecutor.execute(complexEvent),i);
    }
    streamEventChunk.add(borrowedEvent);
  }
  incrementalExecutor.execute(streamEventChunk);
}",0.6460093896713615
28810,"public IncrementalAggregationProcessor(IncrementalExecutor incrementalExecutor,List<ExpressionExecutor> incomingExpressionExecutors,MetaStreamEvent processedMetaStreamEvent){
  this.incrementalExecutor=incrementalExecutor;
  this.incomingExpressionExecutors=incomingExpressionExecutors;
  this.processedMetaStreamEvent=processedMetaStreamEvent;
  this.streamEventCloner=new StreamEventCloner(processedMetaStreamEvent,new StreamEventPool(processedMetaStreamEvent,5));
}","public IncrementalAggregationProcessor(IncrementalExecutor incrementalExecutor,List<ExpressionExecutor> incomingExpressionExecutors,MetaStreamEvent processedMetaStreamEvent){
  this.incrementalExecutor=incrementalExecutor;
  this.incomingExpressionExecutors=incomingExpressionExecutors;
  this.processedMetaStreamEvent=processedMetaStreamEvent;
  this.streamEventPool=new StreamEventPool(processedMetaStreamEvent,5);
}",0.9255079006772008
28811,"public void clearValues(){
  this.values=new Object[expressionExecutors.size()];
}","public void clearValues(){
  this.values=new Object[expressionExecutors.size() + 1];
}",0.9761904761904762
28812,"private void dispatchEvent(long startTimeOfNewAggregates,BaseIncrementalValueStore aBaseIncrementalValueStore){
  if (aBaseIncrementalValueStore.isProcessed) {
    StreamEvent streamEvent=createStreamEvent(aBaseIncrementalValueStore);
    ComplexEventChunk<StreamEvent> eventChunk=new ComplexEventChunk<>(true);
    eventChunk.add(streamEvent);
    next.execute(eventChunk);
  }
  cleanBaseIncrementalValueStore(startTimeOfNewAggregates,aBaseIncrementalValueStore);
}","private void dispatchEvent(long startTimeOfNewAggregates,BaseIncrementalValueStore aBaseIncrementalValueStore){
  if (aBaseIncrementalValueStore.isProcessed) {
    StreamEvent streamEvent=createStreamEvent(aBaseIncrementalValueStore);
    ComplexEventChunk<StreamEvent> eventChunk=new ComplexEventChunk<>(true);
    eventChunk.add(streamEvent);
    table.addEvents(eventChunk);
    next.execute(eventChunk);
  }
  cleanBaseIncrementalValueStore(startTimeOfNewAggregates,aBaseIncrementalValueStore);
}",0.965873836608066
28813,"public IncrementalExecutor(TimePeriod.Duration duration,List<ExpressionExecutor> processExpressionExecutors,GroupByKeyGenerator groupByKeyGenerator,MetaStreamEvent metaStreamEvent,int bufferSize,String aggregatorName,IncrementalExecutor child,boolean isRoot,SiddhiAppContext siddhiAppContext,boolean isProcessingOnExternalTime){
  this.duration=duration;
  this.next=child;
  this.isRoot=isRoot;
  this.siddhiAppContext=siddhiAppContext;
  this.aggregatorName=aggregatorName;
  this.bufferSize=bufferSize;
  this.streamEventPool=new StreamEventPool(metaStreamEvent,10);
  this.isProcessingOnExternalTime=isProcessingOnExternalTime;
  this.timestampExpressionExecutor=processExpressionExecutors.remove(0);
  this.baseIncrementalValueStore=new BaseIncrementalValueStore(processExpressionExecutors);
  if (groupByKeyGenerator != null) {
    this.groupByKeyGenerator=groupByKeyGenerator;
    isGroupBy=true;
    if (bufferSize > 0) {
      baseIncrementalValueGroupByStoreList=new ArrayList<>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueGroupByStoreList.add(new HashMap<>());
      }
    }
 else {
      baseIncrementalValueStoreMap=new HashMap<>();
    }
  }
 else {
    isGroupBy=false;
    if (bufferSize > 0) {
      baseIncrementalValueStoreList=new ArrayList<BaseIncrementalValueStore>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueStoreList.add(baseIncrementalValueStore.cloneStore(null));
      }
    }
  }
  this.resetEvent=streamEventPool.borrowEvent();
  this.resetEvent.setType(ComplexEvent.Type.RESET);
  setNextExecutor(child);
}","public IncrementalExecutor(TimePeriod.Duration duration,List<ExpressionExecutor> processExpressionExecutors,GroupByKeyGenerator groupByKeyGenerator,MetaStreamEvent metaStreamEvent,int bufferSize,String aggregatorName,IncrementalExecutor child,boolean isRoot,Table table,SiddhiAppContext siddhiAppContext,boolean isProcessingOnExternalTime){
  this.duration=duration;
  this.next=child;
  this.isRoot=isRoot;
  this.table=table;
  this.siddhiAppContext=siddhiAppContext;
  this.aggregatorName=aggregatorName;
  this.bufferSize=bufferSize;
  this.streamEventPool=new StreamEventPool(metaStreamEvent,10);
  this.isProcessingOnExternalTime=isProcessingOnExternalTime;
  this.timestampExpressionExecutor=processExpressionExecutors.remove(0);
  this.baseIncrementalValueStore=new BaseIncrementalValueStore(-1,processExpressionExecutors);
  if (groupByKeyGenerator != null) {
    this.groupByKeyGenerator=groupByKeyGenerator;
    isGroupBy=true;
    if (bufferSize > 0) {
      baseIncrementalValueGroupByStoreList=new ArrayList<>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueGroupByStoreList.add(new HashMap<>());
      }
    }
 else {
      baseIncrementalValueStoreMap=new HashMap<>();
    }
  }
 else {
    isGroupBy=false;
    if (bufferSize > 0) {
      baseIncrementalValueStoreList=new ArrayList<BaseIncrementalValueStore>(bufferSize + 1);
      for (int i=0; i < bufferSize + 1; i++) {
        baseIncrementalValueStoreList.add(baseIncrementalValueStore.cloneStore(null,-1));
      }
    }
  }
  this.resetEvent=streamEventPool.borrowEvent();
  this.resetEvent.setType(ComplexEvent.Type.RESET);
  setNextExecutor(child);
}",0.988498789346247
28814,"private void dispatchEvents(Map<String,BaseIncrementalValueStore> baseIncrementalValueGroupByStore){
  if (baseIncrementalValueGroupByStore.size() > 0) {
    ComplexEventChunk<StreamEvent> eventChunk=new ComplexEventChunk<>(true);
    for (    BaseIncrementalValueStore aBaseIncrementalValueStore : baseIncrementalValueGroupByStore.values()) {
      StreamEvent streamEvent=createStreamEvent(aBaseIncrementalValueStore);
      eventChunk.add(streamEvent);
    }
    next.execute(eventChunk);
  }
  baseIncrementalValueGroupByStore.clear();
}","private void dispatchEvents(Map<String,BaseIncrementalValueStore> baseIncrementalValueGroupByStore){
  if (baseIncrementalValueGroupByStore.size() > 0) {
    ComplexEventChunk<StreamEvent> eventChunk=new ComplexEventChunk<>(true);
    for (    BaseIncrementalValueStore aBaseIncrementalValueStore : baseIncrementalValueGroupByStore.values()) {
      StreamEvent streamEvent=createStreamEvent(aBaseIncrementalValueStore);
      eventChunk.add(streamEvent);
    }
    table.addEvents(eventChunk);
    next.execute(eventChunk);
  }
  baseIncrementalValueGroupByStore.clear();
}",0.9704035874439462
28815,"private void processAggregates(StreamEvent streamEvent){
synchronized (this) {
    if (isGroupBy) {
      try {
        String groupedByKey=groupByKeyGenerator.constructEventKey(streamEvent);
        keyThreadLocal.set(groupedByKey);
        if (baseIncrementalValueGroupByStoreList != null) {
          Map<String,BaseIncrementalValueStore> baseIncrementalValueGroupByStore=baseIncrementalValueGroupByStoreList.get(currentBufferIndex);
          BaseIncrementalValueStore aBaseIncrementalValueStore=baseIncrementalValueGroupByStore.computeIfAbsent(groupedByKey,k -> baseIncrementalValueStore.cloneStore(k));
          process(streamEvent,aBaseIncrementalValueStore);
        }
 else {
          BaseIncrementalValueStore aBaseIncrementalValueStore=baseIncrementalValueStoreMap.computeIfAbsent(groupedByKey,k -> baseIncrementalValueStore.cloneStore(k));
          process(streamEvent,aBaseIncrementalValueStore);
        }
      }
  finally {
        keyThreadLocal.remove();
      }
    }
 else {
      if (baseIncrementalValueStoreList != null) {
        BaseIncrementalValueStore aBaseIncrementalValueStore=baseIncrementalValueStoreList.get(currentBufferIndex);
        process(streamEvent,aBaseIncrementalValueStore);
      }
 else {
        process(streamEvent,baseIncrementalValueStore);
      }
    }
  }
}","private void processAggregates(StreamEvent streamEvent){
synchronized (this) {
    if (isGroupBy) {
      try {
        String groupedByKey=groupByKeyGenerator.constructEventKey(streamEvent);
        keyThreadLocal.set(groupedByKey);
        if (baseIncrementalValueGroupByStoreList != null) {
          Map<String,BaseIncrementalValueStore> baseIncrementalValueGroupByStore=baseIncrementalValueGroupByStoreList.get(currentBufferIndex);
          BaseIncrementalValueStore aBaseIncrementalValueStore=baseIncrementalValueGroupByStore.computeIfAbsent(groupedByKey,k -> baseIncrementalValueStore.cloneStore(k,startTimeOfAggregates));
          process(streamEvent,aBaseIncrementalValueStore);
        }
 else {
          BaseIncrementalValueStore aBaseIncrementalValueStore=baseIncrementalValueStoreMap.computeIfAbsent(groupedByKey,k -> baseIncrementalValueStore.cloneStore(k,startTimeOfAggregates));
          process(streamEvent,aBaseIncrementalValueStore);
        }
      }
  finally {
        keyThreadLocal.remove();
      }
    }
 else {
      if (baseIncrementalValueStoreList != null) {
        BaseIncrementalValueStore aBaseIncrementalValueStore=baseIncrementalValueStoreList.get(currentBufferIndex);
        process(streamEvent,aBaseIncrementalValueStore);
      }
 else {
        process(streamEvent,baseIncrementalValueStore);
      }
    }
  }
}",0.9835205992509364
28816,"private BaseIncrementalValueStore(long timeStamp,List<ExpressionExecutor> expressionExecutors){
  this.timestamp=timeStamp;
  this.values=new Object[expressionExecutors.size()];
  this.expressionExecutors=expressionExecutors;
}","public BaseIncrementalValueStore(long timeStamp,List<ExpressionExecutor> expressionExecutors){
  this.timestamp=timeStamp;
  this.values=new Object[expressionExecutors.size() + 1];
  this.expressionExecutors=expressionExecutors;
}",0.9671772428884028
28817,"@Override public void execute(ComplexEventChunk streamEventChunk){
  while (streamEventChunk.hasNext()) {
    StreamEvent streamEvent=(StreamEvent)streamEventChunk.next();
    streamEventChunk.remove();
    LOG.info(duration + ""String_Node_Str"" + streamEvent.getType());
    long timestamp=getTimestamp(streamEvent);
    if (timestamp >= nextEmitTime) {
      nextEmitTime=IncrementalTimeConverterUtil.getNextEmitTime(timestamp,duration);
      long startTimeOfAggregates=IncrementalTimeConverterUtil.getStartTimeOfAggregates(timestamp,duration);
      dispatchAggregateEvents(startTimeOfAggregates,timestamp);
      sendTimerEvent(streamEvent,timestamp);
    }
    if (streamEvent.getType() == ComplexEvent.Type.CURRENT) {
      processAggregates(streamEvent);
    }
  }
}","@Override public void execute(ComplexEventChunk streamEventChunk){
  streamEventChunk.reset();
  while (streamEventChunk.hasNext()) {
    StreamEvent streamEvent=(StreamEvent)streamEventChunk.next();
    streamEventChunk.remove();
    long timestamp=getTimestamp(streamEvent);
    if (timestamp >= nextEmitTime) {
      nextEmitTime=IncrementalTimeConverterUtil.getNextEmitTime(timestamp,duration);
      startTimeOfAggregates=IncrementalTimeConverterUtil.getStartTimeOfAggregates(timestamp,duration);
      dispatchAggregateEvents(startTimeOfAggregates,timestamp);
      sendTimerEvent(streamEvent,timestamp);
    }
    if (streamEvent.getType() == ComplexEvent.Type.CURRENT) {
      processAggregates(streamEvent);
    }
  }
}",0.9327115256495668
28818,"public BaseIncrementalValueStore cloneStore(String key){
  List<ExpressionExecutor> newExpressionExecutors=new ArrayList<>(expressionExecutors.size());
  expressionExecutors.forEach(expressionExecutor -> newExpressionExecutors.add(expressionExecutor.cloneExecutor(key)));
  return new BaseIncrementalValueStore(newExpressionExecutors);
}","public BaseIncrementalValueStore cloneStore(String key,long timestamp){
  List<ExpressionExecutor> newExpressionExecutors=new ArrayList<>(expressionExecutors.size());
  expressionExecutors.forEach(expressionExecutor -> newExpressionExecutors.add(expressionExecutor.cloneExecutor(key)));
  return new BaseIncrementalValueStore(timestamp,newExpressionExecutors);
}",0.9642346208869814
28819,"public void defineAggregation(AggregationDefinition aggregationDefinition){
  DefinitionParserHelper.validateDefinition(aggregationDefinition,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap);
  aggregationDefinitionMap.putIfAbsent(aggregationDefinition.getId(),aggregationDefinition);
  AggregationRuntime aggregationRuntime=AggregationParser.parse(aggregationDefinition,siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,windowMap);
  ProcessStreamReceiver processStreamReceiver=aggregationRuntime.getSingleStreamRuntime().getProcessStreamReceiver();
  streamJunctionMap.get(processStreamReceiver.getStreamId()).subscribe(processStreamReceiver);
}","public void defineAggregation(AggregationDefinition aggregationDefinition){
  DefinitionParserHelper.validateDefinition(aggregationDefinition,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,aggregationDefinitionMap);
  aggregationDefinitionMap.putIfAbsent(aggregationDefinition.getId(),aggregationDefinition);
  AggregationRuntime aggregationRuntime=AggregationParser.parse(aggregationDefinition,siddhiAppContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,windowMap,this);
  ProcessStreamReceiver processStreamReceiver=aggregationRuntime.getSingleStreamRuntime().getProcessStreamReceiver();
  streamJunctionMap.get(processStreamReceiver.getStreamId()).subscribe(processStreamReceiver);
}",0.996530187369882
28820,"protected void process(StateEvent stateEvent,ComplexEventChunk complexEventChunk){
switch (type) {
case AND:
    if (stateEvent.getStreamEvent(partnerPreStateProcessor.getStateId()) != null) {
      super.process(stateEvent,complexEventChunk);
    }
 else {
      thisStatePreProcessor.stateChanged();
    }
  break;
case OR:
super.process(stateEvent,complexEventChunk);
break;
case NOT:
break;
}
}","protected void process(StateEvent stateEvent,ComplexEventChunk complexEventChunk){
switch (type) {
case AND:
    if (stateEvent.getStreamEvent(partnerPreStateProcessor.getStateId()) != null) {
      super.process(stateEvent,complexEventChunk);
    }
 else {
      thisStatePreProcessor.stateChanged();
    }
  break;
case OR:
super.process(stateEvent,complexEventChunk);
if (partnerPostStateProcessor.nextProcessor != null && thisStatePreProcessor.thisLastProcessor == partnerPostStateProcessor) {
partnerPostStateProcessor.isEventReturned=true;
}
break;
case NOT:
break;
}
}",0.8180883864337102
28821,"@Override public void addEveryState(StateEvent stateEvent){
  newAndEveryStateEventList.add(stateEventCloner.copyStateEvent(stateEvent));
}","@Override public void addEveryState(StateEvent stateEvent){
  StateEvent clonedEvent=stateEventCloner.copyStateEvent(stateEvent);
  clonedEvent.setEvent(stateId,null);
  newAndEveryStateEventList.add(clonedEvent);
  if (partnerStatePreProcessor != null) {
    partnerStatePreProcessor.newAndEveryStateEventList.add(clonedEvent);
  }
}",0.4566596194503171
28822,"@Override public void resetState(){
  pendingStateEventList.clear();
  partnerStatePreProcessor.pendingStateEventList.clear();
  if (isStartState && newAndEveryStateEventList.isEmpty()) {
    init();
  }
}","@Override public void resetState(){
  if (logicalType == LogicalStateElement.Type.OR || pendingStateEventList.size() == partnerStatePreProcessor.pendingStateEventList.size()) {
    pendingStateEventList.clear();
    partnerStatePreProcessor.pendingStateEventList.clear();
    if (isStartState && newAndEveryStateEventList.isEmpty()) {
      if (stateType == StateInputStream.Type.SEQUENCE && thisStatePostProcessor.nextEveryStatePerProcessor == null && !((StreamPreStateProcessor)thisStatePostProcessor.nextStatePerProcessor).pendingStateEventList.isEmpty()) {
        return;
      }
      init();
    }
  }
}",0.449079754601227
28823,"@Override public ComplexEventChunk<StateEvent> processAndReturn(ComplexEventChunk complexEventChunk){
  ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(false);
  complexEventChunk.reset();
  StreamEvent streamEvent=(StreamEvent)complexEventChunk.next();
  for (Iterator<StateEvent> iterator=pendingStateEventList.iterator(); iterator.hasNext(); ) {
    StateEvent stateEvent=iterator.next();
    if (logicalType == LogicalStateElement.Type.OR && stateEvent.getStreamEvent(partnerStatePreProcessor.getStateId()) != null) {
      iterator.remove();
      continue;
    }
    stateEvent.setEvent(stateId,streamEventCloner.copyStreamEvent(streamEvent));
    process(stateEvent);
    if (this.thisLastProcessor.isEventReturned()) {
      this.thisLastProcessor.clearProcessedEvent();
      returnEventChunk.add(stateEvent);
    }
    if (stateChanged) {
      iterator.remove();
    }
 else {
switch (stateType) {
case PATTERN:
        stateEvent.setEvent(stateId,null);
      break;
case SEQUENCE:
    stateEvent.setEvent(stateId,null);
  iterator.remove();
break;
}
}
}
return returnEventChunk;
}","@Override public ComplexEventChunk<StateEvent> processAndReturn(ComplexEventChunk complexEventChunk){
  ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(false);
  complexEventChunk.reset();
  StreamEvent streamEvent=(StreamEvent)complexEventChunk.next();
  for (Iterator<StateEvent> iterator=pendingStateEventList.iterator(); iterator.hasNext(); ) {
    StateEvent stateEvent=iterator.next();
    if (withinStates.size() > 0) {
      if (isExpired(stateEvent,streamEvent)) {
        iterator.remove();
        continue;
      }
    }
    if (logicalType == LogicalStateElement.Type.OR && stateEvent.getStreamEvent(partnerStatePreProcessor.getStateId()) != null) {
      iterator.remove();
      continue;
    }
    stateEvent.setEvent(stateId,streamEventCloner.copyStreamEvent(streamEvent));
    process(stateEvent);
    if (this.thisLastProcessor.isEventReturned()) {
      this.thisLastProcessor.clearProcessedEvent();
      returnEventChunk.add(stateEvent);
    }
    if (stateChanged) {
      iterator.remove();
    }
 else {
switch (stateType) {
case PATTERN:
        stateEvent.setEvent(stateId,null);
      break;
case SEQUENCE:
    stateEvent.setEvent(stateId,null);
  iterator.remove();
break;
}
}
}
return returnEventChunk;
}",0.9410781445883828
28824,"@Override public void addState(StateEvent stateEvent){
  if (newAndEveryStateEventList.isEmpty()) {
    newAndEveryStateEventList.add(stateEvent);
  }
  if (partnerStatePreProcessor != null && partnerStatePreProcessor.newAndEveryStateEventList.isEmpty()) {
    partnerStatePreProcessor.newAndEveryStateEventList.add(stateEvent);
  }
}","@Override public void addState(StateEvent stateEvent){
  if (isStartState || stateType == StateInputStream.Type.SEQUENCE) {
    if (newAndEveryStateEventList.isEmpty()) {
      newAndEveryStateEventList.add(stateEvent);
    }
    if (partnerStatePreProcessor != null && partnerStatePreProcessor.newAndEveryStateEventList.isEmpty()) {
      partnerStatePreProcessor.newAndEveryStateEventList.add(stateEvent);
    }
  }
 else {
    newAndEveryStateEventList.add(stateEvent);
    if (partnerStatePreProcessor != null) {
      partnerStatePreProcessor.newAndEveryStateEventList.add(stateEvent);
    }
  }
}",0.7136752136752137
28825,"public void init(){
  if (isStartState) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    addState(stateEvent);
  }
}","public void init(){
  if (isStartState && (!initialized || this.thisStatePostProcessor.nextEveryStatePerProcessor != null)) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    addState(stateEvent);
    initialized=true;
  }
}",0.7087912087912088
28826,"@Override public void resetState(){
  pendingStateEventList.clear();
  if (isStartState && newAndEveryStateEventList.isEmpty()) {
    init();
  }
}","@Override public void resetState(){
  pendingStateEventList.clear();
  if (isStartState && newAndEveryStateEventList.isEmpty()) {
    if (stateType == StateInputStream.Type.SEQUENCE && thisStatePostProcessor.nextEveryStatePerProcessor == null && !((StreamPreStateProcessor)thisStatePostProcessor.nextStatePerProcessor).pendingStateEventList.isEmpty()) {
      return;
    }
    init();
  }
}",0.5278810408921933
28827,"private boolean isExpired(StateEvent pendingStateEvent,StreamEvent incomingStreamEvent){
  for (  Map.Entry<Long,Set<Integer>> withinEntry : withinStates) {
    for (    Integer withinStateId : withinEntry.getValue()) {
      if (withinStateId == SiddhiConstants.ANY) {
        if (Math.abs(pendingStateEvent.getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
 else {
        if (Math.abs(pendingStateEvent.getStreamEvent(withinStateId).getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
    }
  }
  return false;
}","protected boolean isExpired(StateEvent pendingStateEvent,StreamEvent incomingStreamEvent){
  for (  Map.Entry<Long,Set<Integer>> withinEntry : withinStates) {
    for (    Integer withinStateId : withinEntry.getValue()) {
      if (withinStateId == SiddhiConstants.ANY) {
        if (Math.abs(pendingStateEvent.getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
 else {
        if (Math.abs(pendingStateEvent.getStreamEvent(withinStateId).getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9908256880733946
28828,"private static InnerStateRuntime parse(StateElement stateElement,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,Table> tableMap,MetaStateEvent metaStateEvent,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,ProcessStreamReceiver> processStreamReceiverMap,StreamPreStateProcessor streamPreStateProcessor,StreamPostStateProcessor streamPostStateProcessor,StateInputStream.Type stateType,ArrayList<Map.Entry<Long,Set<Integer>>> withinStates,LatencyTracker latencyTracker,String queryName){
  if (stateElement instanceof StreamStateElement) {
    BasicSingleInputStream basicSingleInputStream=((StreamStateElement)stateElement).getBasicSingleInputStream();
    SingleStreamRuntime singleStreamRuntime=SingleInputStreamParser.parseInputStream(basicSingleInputStream,siddhiAppContext,variableExpressionExecutors,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,processStreamReceiverMap.get(basicSingleInputStream.getUniqueStreamIds().get(0)),false,false,queryName);
    int stateIndex=metaStateEvent.getStreamEventCount() - 1;
    if (streamPreStateProcessor == null) {
      if (stateElement.getWithin() != null) {
        Set<Integer> withinStateset=new HashSet<Integer>();
        withinStateset.add(SiddhiConstants.ANY);
        withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
      }
      streamPreStateProcessor=new StreamPreStateProcessor(stateType,clonewithinStates(withinStates));
      streamPreStateProcessor.init(siddhiAppContext,queryName);
      if (stateElement.getWithin() != null) {
        withinStates.remove(0);
      }
    }
    streamPreStateProcessor.setStateId(stateIndex);
    streamPreStateProcessor.setNextProcessor(singleStreamRuntime.getProcessorChain());
    singleStreamRuntime.setProcessorChain(streamPreStateProcessor);
    if (streamPostStateProcessor == null) {
      streamPostStateProcessor=new StreamPostStateProcessor();
    }
    streamPostStateProcessor.setStateId(stateIndex);
    singleStreamRuntime.getProcessorChain().setToLast(streamPostStateProcessor);
    streamPostStateProcessor.setThisStatePreProcessor(streamPreStateProcessor);
    streamPreStateProcessor.setThisStatePostProcessor(streamPostStateProcessor);
    streamPreStateProcessor.setThisLastProcessor(streamPostStateProcessor);
    StreamInnerStateRuntime innerStateRuntime=new StreamInnerStateRuntime(stateType);
    innerStateRuntime.setFirstProcessor(streamPreStateProcessor);
    innerStateRuntime.setLastProcessor(streamPostStateProcessor);
    innerStateRuntime.addStreamRuntime(singleStreamRuntime);
    return innerStateRuntime;
  }
 else   if (stateElement instanceof NextStateElement) {
    StateElement currentElement=((NextStateElement)stateElement).getStateElement();
    InnerStateRuntime currentInnerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateSet=new HashSet<Integer>();
      withinStateSet.add(currentInnerStateRuntime.getFirstProcessor().getStateId());
      withinStateSet.add(currentInnerStateRuntime.getLastProcessor().getStateId());
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateSet));
    }
    StateElement nextElement=((NextStateElement)stateElement).getNextStateElement();
    InnerStateRuntime nextInnerStateRuntime=parse(nextElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    currentInnerStateRuntime.getLastProcessor().setNextStatePreProcessor(nextInnerStateRuntime.getFirstProcessor());
    NextInnerStateRuntime nextStateRuntime=new NextInnerStateRuntime(currentInnerStateRuntime,nextInnerStateRuntime,stateType);
    nextStateRuntime.setFirstProcessor(currentInnerStateRuntime.getFirstProcessor());
    nextStateRuntime.setLastProcessor(nextInnerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : currentInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : nextInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return nextStateRuntime;
  }
 else   if (stateElement instanceof EveryStateElement) {
    StateElement currentElement=((EveryStateElement)stateElement).getStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    EveryInnerStateRuntime everyInnerStateRuntime=new EveryInnerStateRuntime(innerStateRuntime,stateType);
    everyInnerStateRuntime.setFirstProcessor(innerStateRuntime.getFirstProcessor());
    everyInnerStateRuntime.setLastProcessor(innerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime.getSingleStreamRuntimeList()) {
      everyInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    if (stateType == StateInputStream.Type.PATTERN) {
      everyInnerStateRuntime.getLastProcessor().setNextEveryStatePerProcessor(everyInnerStateRuntime.getFirstProcessor());
    }
    return everyInnerStateRuntime;
  }
 else   if (stateElement instanceof LogicalStateElement) {
    LogicalStateElement.Type type=((LogicalStateElement)stateElement).getType();
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    LogicalPreStateProcessor logicalPreStateProcessor1=new LogicalPreStateProcessor(type,stateType,withinStates);
    logicalPreStateProcessor1.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor1=new LogicalPostStateProcessor(type);
    LogicalPreStateProcessor logicalPreStateProcessor2=new LogicalPreStateProcessor(type,stateType,withinStates);
    logicalPreStateProcessor2.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor2=new LogicalPostStateProcessor(type);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    logicalPostStateProcessor1.setPartnerPreStateProcessor(logicalPreStateProcessor2);
    logicalPostStateProcessor2.setPartnerPreStateProcessor(logicalPreStateProcessor1);
    logicalPostStateProcessor1.setPartnerPostStateProcessor(logicalPostStateProcessor2);
    logicalPostStateProcessor2.setPartnerPostStateProcessor(logicalPostStateProcessor1);
    logicalPreStateProcessor1.setPartnerStatePreProcessor(logicalPreStateProcessor2);
    logicalPreStateProcessor2.setPartnerStatePreProcessor(logicalPreStateProcessor1);
    StateElement stateElement2=((LogicalStateElement)stateElement).getStreamStateElement2();
    InnerStateRuntime innerStateRuntime2=parse(stateElement2,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor2,logicalPostStateProcessor2,stateType,withinStates,latencyTracker,queryName);
    StateElement stateElement1=((LogicalStateElement)stateElement).getStreamStateElement1();
    InnerStateRuntime innerStateRuntime1=parse(stateElement1,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor1,logicalPostStateProcessor1,stateType,withinStates,latencyTracker,queryName);
    LogicalInnerStateRuntime logicalInnerStateRuntime=new LogicalInnerStateRuntime(innerStateRuntime1,innerStateRuntime2,stateType);
    logicalInnerStateRuntime.setFirstProcessor(innerStateRuntime1.getFirstProcessor());
    logicalInnerStateRuntime.setLastProcessor(innerStateRuntime2.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime2.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime1.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return logicalInnerStateRuntime;
  }
 else   if (stateElement instanceof CountStateElement) {
    int minCount=((CountStateElement)stateElement).getMinCount();
    int maxCount=((CountStateElement)stateElement).getMaxCount();
    if (minCount == SiddhiConstants.ANY) {
      minCount=0;
    }
    if (maxCount == SiddhiConstants.ANY) {
      maxCount=Integer.MAX_VALUE;
    }
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    CountPreStateProcessor countPreStateProcessor=new CountPreStateProcessor(minCount,maxCount,stateType,withinStates);
    countPreStateProcessor.init(siddhiAppContext,queryName);
    CountPostStateProcessor countPostStateProcessor=new CountPostStateProcessor(minCount,maxCount);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    countPreStateProcessor.setCountPostStateProcessor(countPostStateProcessor);
    StateElement currentElement=((CountStateElement)stateElement).getStreamStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,countPreStateProcessor,countPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    return new CountInnerStateRuntime((StreamInnerStateRuntime)innerStateRuntime);
  }
 else {
    throw new OperationNotSupportedException();
  }
}","private static InnerStateRuntime parse(StateElement stateElement,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,Table> tableMap,MetaStateEvent metaStateEvent,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,ProcessStreamReceiver> processStreamReceiverMap,StreamPreStateProcessor streamPreStateProcessor,StreamPostStateProcessor streamPostStateProcessor,StateInputStream.Type stateType,ArrayList<Map.Entry<Long,Set<Integer>>> withinStates,LatencyTracker latencyTracker,String queryName){
  if (stateElement instanceof StreamStateElement) {
    BasicSingleInputStream basicSingleInputStream=((StreamStateElement)stateElement).getBasicSingleInputStream();
    SingleStreamRuntime singleStreamRuntime=SingleInputStreamParser.parseInputStream(basicSingleInputStream,siddhiAppContext,variableExpressionExecutors,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,processStreamReceiverMap.get(basicSingleInputStream.getUniqueStreamIds().get(0)),false,false,queryName);
    int stateIndex=metaStateEvent.getStreamEventCount() - 1;
    if (streamPreStateProcessor == null) {
      if (stateElement.getWithin() != null) {
        Set<Integer> withinStateset=new HashSet<Integer>();
        withinStateset.add(SiddhiConstants.ANY);
        withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
      }
      streamPreStateProcessor=new StreamPreStateProcessor(stateType,clonewithinStates(withinStates));
      streamPreStateProcessor.init(siddhiAppContext,queryName);
      if (stateElement.getWithin() != null) {
        withinStates.remove(0);
      }
    }
    streamPreStateProcessor.setStateId(stateIndex);
    streamPreStateProcessor.setNextProcessor(singleStreamRuntime.getProcessorChain());
    singleStreamRuntime.setProcessorChain(streamPreStateProcessor);
    if (streamPostStateProcessor == null) {
      streamPostStateProcessor=new StreamPostStateProcessor();
    }
    streamPostStateProcessor.setStateId(stateIndex);
    singleStreamRuntime.getProcessorChain().setToLast(streamPostStateProcessor);
    streamPostStateProcessor.setThisStatePreProcessor(streamPreStateProcessor);
    streamPreStateProcessor.setThisStatePostProcessor(streamPostStateProcessor);
    streamPreStateProcessor.setThisLastProcessor(streamPostStateProcessor);
    StreamInnerStateRuntime innerStateRuntime=new StreamInnerStateRuntime(stateType);
    innerStateRuntime.setFirstProcessor(streamPreStateProcessor);
    innerStateRuntime.setLastProcessor(streamPostStateProcessor);
    innerStateRuntime.addStreamRuntime(singleStreamRuntime);
    return innerStateRuntime;
  }
 else   if (stateElement instanceof NextStateElement) {
    StateElement currentElement=((NextStateElement)stateElement).getStateElement();
    InnerStateRuntime currentInnerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateSet=new HashSet<Integer>();
      withinStateSet.add(currentInnerStateRuntime.getFirstProcessor().getStateId());
      withinStateSet.add(currentInnerStateRuntime.getLastProcessor().getStateId());
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateSet));
    }
    StateElement nextElement=((NextStateElement)stateElement).getNextStateElement();
    InnerStateRuntime nextInnerStateRuntime=parse(nextElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    currentInnerStateRuntime.getLastProcessor().setNextStatePreProcessor(nextInnerStateRuntime.getFirstProcessor());
    NextInnerStateRuntime nextStateRuntime=new NextInnerStateRuntime(currentInnerStateRuntime,nextInnerStateRuntime,stateType);
    nextStateRuntime.setFirstProcessor(currentInnerStateRuntime.getFirstProcessor());
    nextStateRuntime.setLastProcessor(nextInnerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : currentInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : nextInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return nextStateRuntime;
  }
 else   if (stateElement instanceof EveryStateElement) {
    StateElement currentElement=((EveryStateElement)stateElement).getStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    EveryInnerStateRuntime everyInnerStateRuntime=new EveryInnerStateRuntime(innerStateRuntime,stateType);
    everyInnerStateRuntime.setFirstProcessor(innerStateRuntime.getFirstProcessor());
    everyInnerStateRuntime.setLastProcessor(innerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime.getSingleStreamRuntimeList()) {
      everyInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    everyInnerStateRuntime.getLastProcessor().setNextEveryStatePerProcessor(everyInnerStateRuntime.getFirstProcessor());
    return everyInnerStateRuntime;
  }
 else   if (stateElement instanceof LogicalStateElement) {
    LogicalStateElement.Type type=((LogicalStateElement)stateElement).getType();
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    LogicalPreStateProcessor logicalPreStateProcessor1=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    logicalPreStateProcessor1.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor1=new LogicalPostStateProcessor(type);
    LogicalPreStateProcessor logicalPreStateProcessor2=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    logicalPreStateProcessor2.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor2=new LogicalPostStateProcessor(type);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    logicalPostStateProcessor1.setPartnerPreStateProcessor(logicalPreStateProcessor2);
    logicalPostStateProcessor2.setPartnerPreStateProcessor(logicalPreStateProcessor1);
    logicalPostStateProcessor1.setPartnerPostStateProcessor(logicalPostStateProcessor2);
    logicalPostStateProcessor2.setPartnerPostStateProcessor(logicalPostStateProcessor1);
    logicalPreStateProcessor1.setPartnerStatePreProcessor(logicalPreStateProcessor2);
    logicalPreStateProcessor2.setPartnerStatePreProcessor(logicalPreStateProcessor1);
    StateElement stateElement2=((LogicalStateElement)stateElement).getStreamStateElement2();
    InnerStateRuntime innerStateRuntime2=parse(stateElement2,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor2,logicalPostStateProcessor2,stateType,withinStates,latencyTracker,queryName);
    StateElement stateElement1=((LogicalStateElement)stateElement).getStreamStateElement1();
    InnerStateRuntime innerStateRuntime1=parse(stateElement1,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor1,logicalPostStateProcessor1,stateType,withinStates,latencyTracker,queryName);
    LogicalInnerStateRuntime logicalInnerStateRuntime=new LogicalInnerStateRuntime(innerStateRuntime1,innerStateRuntime2,stateType);
    logicalInnerStateRuntime.setFirstProcessor(innerStateRuntime1.getFirstProcessor());
    logicalInnerStateRuntime.setLastProcessor(innerStateRuntime2.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime2.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime1.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return logicalInnerStateRuntime;
  }
 else   if (stateElement instanceof CountStateElement) {
    int minCount=((CountStateElement)stateElement).getMinCount();
    int maxCount=((CountStateElement)stateElement).getMaxCount();
    if (minCount == SiddhiConstants.ANY) {
      minCount=0;
    }
    if (maxCount == SiddhiConstants.ANY) {
      maxCount=Integer.MAX_VALUE;
    }
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    CountPreStateProcessor countPreStateProcessor=new CountPreStateProcessor(minCount,maxCount,stateType,withinStates);
    countPreStateProcessor.init(siddhiAppContext,queryName);
    CountPostStateProcessor countPostStateProcessor=new CountPostStateProcessor(minCount,maxCount);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    countPreStateProcessor.setCountPostStateProcessor(countPostStateProcessor);
    StateElement currentElement=((CountStateElement)stateElement).getStreamStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,countPreStateProcessor,countPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    return new CountInnerStateRuntime((StreamInnerStateRuntime)innerStateRuntime);
  }
 else {
    throw new OperationNotSupportedException();
  }
}",0.9953699416612648
28829,"protected void process(StateEvent stateEvent,ComplexEventChunk complexEventChunk){
switch (type) {
case AND:
    if (stateEvent.getStreamEvent(partnerPreStateProcessor.getStateId()) != null) {
      super.process(stateEvent,complexEventChunk);
    }
 else {
      thisStatePreProcessor.stateChanged();
    }
  break;
case OR:
super.process(stateEvent,complexEventChunk);
break;
case NOT:
break;
}
}","protected void process(StateEvent stateEvent,ComplexEventChunk complexEventChunk){
switch (type) {
case AND:
    if (stateEvent.getStreamEvent(partnerPreStateProcessor.getStateId()) != null) {
      super.process(stateEvent,complexEventChunk);
    }
 else {
      thisStatePreProcessor.stateChanged();
    }
  break;
case OR:
super.process(stateEvent,complexEventChunk);
if (partnerPostStateProcessor.nextProcessor != null && thisStatePreProcessor.thisLastProcessor == partnerPostStateProcessor) {
partnerPostStateProcessor.isEventReturned=true;
}
break;
case NOT:
break;
}
}",0.8180883864337102
28830,"@Override public void addEveryState(StateEvent stateEvent){
  newAndEveryStateEventList.add(stateEventCloner.copyStateEvent(stateEvent));
}","@Override public void addEveryState(StateEvent stateEvent){
  StateEvent clonedEvent=stateEventCloner.copyStateEvent(stateEvent);
  clonedEvent.setEvent(stateId,null);
  newAndEveryStateEventList.add(clonedEvent);
  if (partnerStatePreProcessor != null) {
    partnerStatePreProcessor.newAndEveryStateEventList.add(clonedEvent);
  }
}",0.4566596194503171
28831,"@Override public void resetState(){
  pendingStateEventList.clear();
  partnerStatePreProcessor.pendingStateEventList.clear();
  if (isStartState && newAndEveryStateEventList.isEmpty()) {
    init();
  }
}","@Override public void resetState(){
  if (logicalType == LogicalStateElement.Type.OR || pendingStateEventList.size() == partnerStatePreProcessor.pendingStateEventList.size()) {
    pendingStateEventList.clear();
    partnerStatePreProcessor.pendingStateEventList.clear();
    if (isStartState && newAndEveryStateEventList.isEmpty()) {
      if (stateType == StateInputStream.Type.SEQUENCE && thisStatePostProcessor.nextEveryStatePerProcessor == null && !((StreamPreStateProcessor)thisStatePostProcessor.nextStatePerProcessor).pendingStateEventList.isEmpty()) {
        return;
      }
      init();
    }
  }
}",0.449079754601227
28832,"@Override public ComplexEventChunk<StateEvent> processAndReturn(ComplexEventChunk complexEventChunk){
  ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(false);
  complexEventChunk.reset();
  StreamEvent streamEvent=(StreamEvent)complexEventChunk.next();
  for (Iterator<StateEvent> iterator=pendingStateEventList.iterator(); iterator.hasNext(); ) {
    StateEvent stateEvent=iterator.next();
    if (logicalType == LogicalStateElement.Type.OR && stateEvent.getStreamEvent(partnerStatePreProcessor.getStateId()) != null) {
      iterator.remove();
      continue;
    }
    stateEvent.setEvent(stateId,streamEventCloner.copyStreamEvent(streamEvent));
    process(stateEvent);
    if (this.thisLastProcessor.isEventReturned()) {
      this.thisLastProcessor.clearProcessedEvent();
      returnEventChunk.add(stateEvent);
    }
    if (stateChanged) {
      iterator.remove();
    }
 else {
switch (stateType) {
case PATTERN:
        stateEvent.setEvent(stateId,null);
      break;
case SEQUENCE:
    stateEvent.setEvent(stateId,null);
  iterator.remove();
break;
}
}
}
return returnEventChunk;
}","@Override public ComplexEventChunk<StateEvent> processAndReturn(ComplexEventChunk complexEventChunk){
  ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(false);
  complexEventChunk.reset();
  StreamEvent streamEvent=(StreamEvent)complexEventChunk.next();
  for (Iterator<StateEvent> iterator=pendingStateEventList.iterator(); iterator.hasNext(); ) {
    StateEvent stateEvent=iterator.next();
    if (withinStates.size() > 0) {
      if (isExpired(stateEvent,streamEvent)) {
        iterator.remove();
        continue;
      }
    }
    if (logicalType == LogicalStateElement.Type.OR && stateEvent.getStreamEvent(partnerStatePreProcessor.getStateId()) != null) {
      iterator.remove();
      continue;
    }
    stateEvent.setEvent(stateId,streamEventCloner.copyStreamEvent(streamEvent));
    process(stateEvent);
    if (this.thisLastProcessor.isEventReturned()) {
      this.thisLastProcessor.clearProcessedEvent();
      returnEventChunk.add(stateEvent);
    }
    if (stateChanged) {
      iterator.remove();
    }
 else {
switch (stateType) {
case PATTERN:
        stateEvent.setEvent(stateId,null);
      break;
case SEQUENCE:
    stateEvent.setEvent(stateId,null);
  iterator.remove();
break;
}
}
}
return returnEventChunk;
}",0.9410781445883828
28833,"@Override public void addState(StateEvent stateEvent){
  if (newAndEveryStateEventList.isEmpty()) {
    newAndEveryStateEventList.add(stateEvent);
  }
  if (partnerStatePreProcessor != null && partnerStatePreProcessor.newAndEveryStateEventList.isEmpty()) {
    partnerStatePreProcessor.newAndEveryStateEventList.add(stateEvent);
  }
}","@Override public void addState(StateEvent stateEvent){
  if (isStartState || stateType == StateInputStream.Type.SEQUENCE) {
    if (newAndEveryStateEventList.isEmpty()) {
      newAndEveryStateEventList.add(stateEvent);
    }
    if (partnerStatePreProcessor != null && partnerStatePreProcessor.newAndEveryStateEventList.isEmpty()) {
      partnerStatePreProcessor.newAndEveryStateEventList.add(stateEvent);
    }
  }
 else {
    newAndEveryStateEventList.add(stateEvent);
    if (partnerStatePreProcessor != null) {
      partnerStatePreProcessor.newAndEveryStateEventList.add(stateEvent);
    }
  }
}",0.7136752136752137
28834,"public void init(){
  if (isStartState) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    addState(stateEvent);
  }
}","public void init(){
  if (isStartState && (!initialized || this.thisStatePostProcessor.nextEveryStatePerProcessor != null)) {
    StateEvent stateEvent=stateEventPool.borrowEvent();
    addState(stateEvent);
    initialized=true;
  }
}",0.7087912087912088
28835,"@Override public void resetState(){
  pendingStateEventList.clear();
  if (isStartState && newAndEveryStateEventList.isEmpty()) {
    init();
  }
}","@Override public void resetState(){
  pendingStateEventList.clear();
  if (isStartState && newAndEveryStateEventList.isEmpty()) {
    if (stateType == StateInputStream.Type.SEQUENCE && thisStatePostProcessor.nextEveryStatePerProcessor == null && !((StreamPreStateProcessor)thisStatePostProcessor.nextStatePerProcessor).pendingStateEventList.isEmpty()) {
      return;
    }
    init();
  }
}",0.5278810408921933
28836,"private boolean isExpired(StateEvent pendingStateEvent,StreamEvent incomingStreamEvent){
  for (  Map.Entry<Long,Set<Integer>> withinEntry : withinStates) {
    for (    Integer withinStateId : withinEntry.getValue()) {
      if (withinStateId == SiddhiConstants.ANY) {
        if (Math.abs(pendingStateEvent.getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
 else {
        if (Math.abs(pendingStateEvent.getStreamEvent(withinStateId).getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
    }
  }
  return false;
}","protected boolean isExpired(StateEvent pendingStateEvent,StreamEvent incomingStreamEvent){
  for (  Map.Entry<Long,Set<Integer>> withinEntry : withinStates) {
    for (    Integer withinStateId : withinEntry.getValue()) {
      if (withinStateId == SiddhiConstants.ANY) {
        if (Math.abs(pendingStateEvent.getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
 else {
        if (Math.abs(pendingStateEvent.getStreamEvent(withinStateId).getTimestamp() - incomingStreamEvent.getTimestamp()) > withinEntry.getKey()) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9908256880733946
28837,"private static InnerStateRuntime parse(StateElement stateElement,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,Table> tableMap,MetaStateEvent metaStateEvent,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,ProcessStreamReceiver> processStreamReceiverMap,StreamPreStateProcessor streamPreStateProcessor,StreamPostStateProcessor streamPostStateProcessor,StateInputStream.Type stateType,ArrayList<Map.Entry<Long,Set<Integer>>> withinStates,LatencyTracker latencyTracker,String queryName){
  if (stateElement instanceof StreamStateElement) {
    BasicSingleInputStream basicSingleInputStream=((StreamStateElement)stateElement).getBasicSingleInputStream();
    SingleStreamRuntime singleStreamRuntime=SingleInputStreamParser.parseInputStream(basicSingleInputStream,siddhiAppContext,variableExpressionExecutors,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,processStreamReceiverMap.get(basicSingleInputStream.getUniqueStreamIds().get(0)),false,false,queryName);
    int stateIndex=metaStateEvent.getStreamEventCount() - 1;
    if (streamPreStateProcessor == null) {
      if (stateElement.getWithin() != null) {
        Set<Integer> withinStateset=new HashSet<Integer>();
        withinStateset.add(SiddhiConstants.ANY);
        withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
      }
      streamPreStateProcessor=new StreamPreStateProcessor(stateType,clonewithinStates(withinStates));
      streamPreStateProcessor.init(siddhiAppContext,queryName);
      if (stateElement.getWithin() != null) {
        withinStates.remove(0);
      }
    }
    streamPreStateProcessor.setStateId(stateIndex);
    streamPreStateProcessor.setNextProcessor(singleStreamRuntime.getProcessorChain());
    singleStreamRuntime.setProcessorChain(streamPreStateProcessor);
    if (streamPostStateProcessor == null) {
      streamPostStateProcessor=new StreamPostStateProcessor();
    }
    streamPostStateProcessor.setStateId(stateIndex);
    singleStreamRuntime.getProcessorChain().setToLast(streamPostStateProcessor);
    streamPostStateProcessor.setThisStatePreProcessor(streamPreStateProcessor);
    streamPreStateProcessor.setThisStatePostProcessor(streamPostStateProcessor);
    streamPreStateProcessor.setThisLastProcessor(streamPostStateProcessor);
    StreamInnerStateRuntime innerStateRuntime=new StreamInnerStateRuntime(stateType);
    innerStateRuntime.setFirstProcessor(streamPreStateProcessor);
    innerStateRuntime.setLastProcessor(streamPostStateProcessor);
    innerStateRuntime.addStreamRuntime(singleStreamRuntime);
    return innerStateRuntime;
  }
 else   if (stateElement instanceof NextStateElement) {
    StateElement currentElement=((NextStateElement)stateElement).getStateElement();
    InnerStateRuntime currentInnerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateSet=new HashSet<Integer>();
      withinStateSet.add(currentInnerStateRuntime.getFirstProcessor().getStateId());
      withinStateSet.add(currentInnerStateRuntime.getLastProcessor().getStateId());
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateSet));
    }
    StateElement nextElement=((NextStateElement)stateElement).getNextStateElement();
    InnerStateRuntime nextInnerStateRuntime=parse(nextElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    currentInnerStateRuntime.getLastProcessor().setNextStatePreProcessor(nextInnerStateRuntime.getFirstProcessor());
    NextInnerStateRuntime nextStateRuntime=new NextInnerStateRuntime(currentInnerStateRuntime,nextInnerStateRuntime,stateType);
    nextStateRuntime.setFirstProcessor(currentInnerStateRuntime.getFirstProcessor());
    nextStateRuntime.setLastProcessor(nextInnerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : currentInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : nextInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return nextStateRuntime;
  }
 else   if (stateElement instanceof EveryStateElement) {
    StateElement currentElement=((EveryStateElement)stateElement).getStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    EveryInnerStateRuntime everyInnerStateRuntime=new EveryInnerStateRuntime(innerStateRuntime,stateType);
    everyInnerStateRuntime.setFirstProcessor(innerStateRuntime.getFirstProcessor());
    everyInnerStateRuntime.setLastProcessor(innerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime.getSingleStreamRuntimeList()) {
      everyInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    if (stateType == StateInputStream.Type.PATTERN) {
      everyInnerStateRuntime.getLastProcessor().setNextEveryStatePerProcessor(everyInnerStateRuntime.getFirstProcessor());
    }
    return everyInnerStateRuntime;
  }
 else   if (stateElement instanceof LogicalStateElement) {
    LogicalStateElement.Type type=((LogicalStateElement)stateElement).getType();
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    LogicalPreStateProcessor logicalPreStateProcessor1=new LogicalPreStateProcessor(type,stateType,withinStates);
    logicalPreStateProcessor1.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor1=new LogicalPostStateProcessor(type);
    LogicalPreStateProcessor logicalPreStateProcessor2=new LogicalPreStateProcessor(type,stateType,withinStates);
    logicalPreStateProcessor2.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor2=new LogicalPostStateProcessor(type);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    logicalPostStateProcessor1.setPartnerPreStateProcessor(logicalPreStateProcessor2);
    logicalPostStateProcessor2.setPartnerPreStateProcessor(logicalPreStateProcessor1);
    logicalPostStateProcessor1.setPartnerPostStateProcessor(logicalPostStateProcessor2);
    logicalPostStateProcessor2.setPartnerPostStateProcessor(logicalPostStateProcessor1);
    logicalPreStateProcessor1.setPartnerStatePreProcessor(logicalPreStateProcessor2);
    logicalPreStateProcessor2.setPartnerStatePreProcessor(logicalPreStateProcessor1);
    StateElement stateElement2=((LogicalStateElement)stateElement).getStreamStateElement2();
    InnerStateRuntime innerStateRuntime2=parse(stateElement2,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor2,logicalPostStateProcessor2,stateType,withinStates,latencyTracker,queryName);
    StateElement stateElement1=((LogicalStateElement)stateElement).getStreamStateElement1();
    InnerStateRuntime innerStateRuntime1=parse(stateElement1,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor1,logicalPostStateProcessor1,stateType,withinStates,latencyTracker,queryName);
    LogicalInnerStateRuntime logicalInnerStateRuntime=new LogicalInnerStateRuntime(innerStateRuntime1,innerStateRuntime2,stateType);
    logicalInnerStateRuntime.setFirstProcessor(innerStateRuntime1.getFirstProcessor());
    logicalInnerStateRuntime.setLastProcessor(innerStateRuntime2.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime2.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime1.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return logicalInnerStateRuntime;
  }
 else   if (stateElement instanceof CountStateElement) {
    int minCount=((CountStateElement)stateElement).getMinCount();
    int maxCount=((CountStateElement)stateElement).getMaxCount();
    if (minCount == SiddhiConstants.ANY) {
      minCount=0;
    }
    if (maxCount == SiddhiConstants.ANY) {
      maxCount=Integer.MAX_VALUE;
    }
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    CountPreStateProcessor countPreStateProcessor=new CountPreStateProcessor(minCount,maxCount,stateType,withinStates);
    countPreStateProcessor.init(siddhiAppContext,queryName);
    CountPostStateProcessor countPostStateProcessor=new CountPostStateProcessor(minCount,maxCount);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    countPreStateProcessor.setCountPostStateProcessor(countPostStateProcessor);
    StateElement currentElement=((CountStateElement)stateElement).getStreamStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,countPreStateProcessor,countPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    return new CountInnerStateRuntime((StreamInnerStateRuntime)innerStateRuntime);
  }
 else {
    throw new OperationNotSupportedException();
  }
}","private static InnerStateRuntime parse(StateElement stateElement,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,Table> tableMap,MetaStateEvent metaStateEvent,SiddhiAppContext siddhiAppContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,ProcessStreamReceiver> processStreamReceiverMap,StreamPreStateProcessor streamPreStateProcessor,StreamPostStateProcessor streamPostStateProcessor,StateInputStream.Type stateType,ArrayList<Map.Entry<Long,Set<Integer>>> withinStates,LatencyTracker latencyTracker,String queryName){
  if (stateElement instanceof StreamStateElement) {
    BasicSingleInputStream basicSingleInputStream=((StreamStateElement)stateElement).getBasicSingleInputStream();
    SingleStreamRuntime singleStreamRuntime=SingleInputStreamParser.parseInputStream(basicSingleInputStream,siddhiAppContext,variableExpressionExecutors,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,processStreamReceiverMap.get(basicSingleInputStream.getUniqueStreamIds().get(0)),false,false,queryName);
    int stateIndex=metaStateEvent.getStreamEventCount() - 1;
    if (streamPreStateProcessor == null) {
      if (stateElement.getWithin() != null) {
        Set<Integer> withinStateset=new HashSet<Integer>();
        withinStateset.add(SiddhiConstants.ANY);
        withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
      }
      streamPreStateProcessor=new StreamPreStateProcessor(stateType,clonewithinStates(withinStates));
      streamPreStateProcessor.init(siddhiAppContext,queryName);
      if (stateElement.getWithin() != null) {
        withinStates.remove(0);
      }
    }
    streamPreStateProcessor.setStateId(stateIndex);
    streamPreStateProcessor.setNextProcessor(singleStreamRuntime.getProcessorChain());
    singleStreamRuntime.setProcessorChain(streamPreStateProcessor);
    if (streamPostStateProcessor == null) {
      streamPostStateProcessor=new StreamPostStateProcessor();
    }
    streamPostStateProcessor.setStateId(stateIndex);
    singleStreamRuntime.getProcessorChain().setToLast(streamPostStateProcessor);
    streamPostStateProcessor.setThisStatePreProcessor(streamPreStateProcessor);
    streamPreStateProcessor.setThisStatePostProcessor(streamPostStateProcessor);
    streamPreStateProcessor.setThisLastProcessor(streamPostStateProcessor);
    StreamInnerStateRuntime innerStateRuntime=new StreamInnerStateRuntime(stateType);
    innerStateRuntime.setFirstProcessor(streamPreStateProcessor);
    innerStateRuntime.setLastProcessor(streamPostStateProcessor);
    innerStateRuntime.addStreamRuntime(singleStreamRuntime);
    return innerStateRuntime;
  }
 else   if (stateElement instanceof NextStateElement) {
    StateElement currentElement=((NextStateElement)stateElement).getStateElement();
    InnerStateRuntime currentInnerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateSet=new HashSet<Integer>();
      withinStateSet.add(currentInnerStateRuntime.getFirstProcessor().getStateId());
      withinStateSet.add(currentInnerStateRuntime.getLastProcessor().getStateId());
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateSet));
    }
    StateElement nextElement=((NextStateElement)stateElement).getNextStateElement();
    InnerStateRuntime nextInnerStateRuntime=parse(nextElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    currentInnerStateRuntime.getLastProcessor().setNextStatePreProcessor(nextInnerStateRuntime.getFirstProcessor());
    NextInnerStateRuntime nextStateRuntime=new NextInnerStateRuntime(currentInnerStateRuntime,nextInnerStateRuntime,stateType);
    nextStateRuntime.setFirstProcessor(currentInnerStateRuntime.getFirstProcessor());
    nextStateRuntime.setLastProcessor(nextInnerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : currentInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : nextInnerStateRuntime.getSingleStreamRuntimeList()) {
      nextStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return nextStateRuntime;
  }
 else   if (stateElement instanceof EveryStateElement) {
    StateElement currentElement=((EveryStateElement)stateElement).getStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,streamPreStateProcessor,streamPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    EveryInnerStateRuntime everyInnerStateRuntime=new EveryInnerStateRuntime(innerStateRuntime,stateType);
    everyInnerStateRuntime.setFirstProcessor(innerStateRuntime.getFirstProcessor());
    everyInnerStateRuntime.setLastProcessor(innerStateRuntime.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime.getSingleStreamRuntimeList()) {
      everyInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    everyInnerStateRuntime.getLastProcessor().setNextEveryStatePerProcessor(everyInnerStateRuntime.getFirstProcessor());
    return everyInnerStateRuntime;
  }
 else   if (stateElement instanceof LogicalStateElement) {
    LogicalStateElement.Type type=((LogicalStateElement)stateElement).getType();
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    LogicalPreStateProcessor logicalPreStateProcessor1=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    logicalPreStateProcessor1.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor1=new LogicalPostStateProcessor(type);
    LogicalPreStateProcessor logicalPreStateProcessor2=new LogicalPreStateProcessor(type,stateType,clonewithinStates(withinStates));
    logicalPreStateProcessor2.init(siddhiAppContext,queryName);
    LogicalPostStateProcessor logicalPostStateProcessor2=new LogicalPostStateProcessor(type);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    logicalPostStateProcessor1.setPartnerPreStateProcessor(logicalPreStateProcessor2);
    logicalPostStateProcessor2.setPartnerPreStateProcessor(logicalPreStateProcessor1);
    logicalPostStateProcessor1.setPartnerPostStateProcessor(logicalPostStateProcessor2);
    logicalPostStateProcessor2.setPartnerPostStateProcessor(logicalPostStateProcessor1);
    logicalPreStateProcessor1.setPartnerStatePreProcessor(logicalPreStateProcessor2);
    logicalPreStateProcessor2.setPartnerStatePreProcessor(logicalPreStateProcessor1);
    StateElement stateElement2=((LogicalStateElement)stateElement).getStreamStateElement2();
    InnerStateRuntime innerStateRuntime2=parse(stateElement2,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor2,logicalPostStateProcessor2,stateType,withinStates,latencyTracker,queryName);
    StateElement stateElement1=((LogicalStateElement)stateElement).getStreamStateElement1();
    InnerStateRuntime innerStateRuntime1=parse(stateElement1,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,logicalPreStateProcessor1,logicalPostStateProcessor1,stateType,withinStates,latencyTracker,queryName);
    LogicalInnerStateRuntime logicalInnerStateRuntime=new LogicalInnerStateRuntime(innerStateRuntime1,innerStateRuntime2,stateType);
    logicalInnerStateRuntime.setFirstProcessor(innerStateRuntime1.getFirstProcessor());
    logicalInnerStateRuntime.setLastProcessor(innerStateRuntime2.getLastProcessor());
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime2.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    for (    SingleStreamRuntime singleStreamRuntime : innerStateRuntime1.getSingleStreamRuntimeList()) {
      logicalInnerStateRuntime.addStreamRuntime(singleStreamRuntime);
    }
    return logicalInnerStateRuntime;
  }
 else   if (stateElement instanceof CountStateElement) {
    int minCount=((CountStateElement)stateElement).getMinCount();
    int maxCount=((CountStateElement)stateElement).getMaxCount();
    if (minCount == SiddhiConstants.ANY) {
      minCount=0;
    }
    if (maxCount == SiddhiConstants.ANY) {
      maxCount=Integer.MAX_VALUE;
    }
    if (stateElement.getWithin() != null) {
      Set<Integer> withinStateset=new HashSet<Integer>();
      withinStateset.add(SiddhiConstants.ANY);
      withinStates.add(0,new AbstractMap.SimpleEntry<Long,Set<Integer>>(stateElement.getWithin().getValue(),withinStateset));
    }
    CountPreStateProcessor countPreStateProcessor=new CountPreStateProcessor(minCount,maxCount,stateType,withinStates);
    countPreStateProcessor.init(siddhiAppContext,queryName);
    CountPostStateProcessor countPostStateProcessor=new CountPostStateProcessor(minCount,maxCount);
    if (stateElement.getWithin() != null) {
      withinStates.remove(0);
    }
    countPreStateProcessor.setCountPostStateProcessor(countPostStateProcessor);
    StateElement currentElement=((CountStateElement)stateElement).getStreamStateElement();
    InnerStateRuntime innerStateRuntime=parse(currentElement,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,metaStateEvent,siddhiAppContext,variableExpressionExecutors,processStreamReceiverMap,countPreStateProcessor,countPostStateProcessor,stateType,withinStates,latencyTracker,queryName);
    return new CountInnerStateRuntime((StreamInnerStateRuntime)innerStateRuntime);
  }
 else {
    throw new OperationNotSupportedException();
  }
}",0.9953699416612648
28838,"/** 
 * This method uses for validate @Extension -> @ReturnAttribute elements.
 * @param returnAttributes returnA attributes array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!CAMEL_CASE_PATTERN.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}","/** 
 * This method uses for validate @Extension / @ReturnAttribute elements.
 * @param returnAttributes returnA attributes array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!CAMEL_CASE_PATTERN.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}",0.9988966531813168
28839,"/** 
 * This method uses for validate @Extension -> @Example elements.
 * @param examples examples array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void examplesValidation(Example[] examples) throws AnnotationValidationException {
  if (examples.length == 0) {
    throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
  }
 else {
    for (    Example example : examples) {
      if (example.syntax().isEmpty()) {
        throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
      }
      if (example.description().isEmpty()) {
        throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
      }
    }
  }
}","/** 
 * This method uses for validate @Extension / @Example elements.
 * @param examples examples array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void examplesValidation(Example[] examples) throws AnnotationValidationException {
  if (examples.length == 0) {
    throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
  }
 else {
    for (    Example example : examples) {
      if (example.syntax().isEmpty()) {
        throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
      }
      if (example.description().isEmpty()) {
        throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
      }
    }
  }
}",0.9984366857738406
28840,"/** 
 * This method uses for validate @Extension -> @SystemParameter elements.
 * @param systemParameters system property array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void systemParametersValidation(SystemParameter[] systemParameters) throws AnnotationValidationException {
  for (  SystemParameter systemParameter : systemParameters) {
    String systemParameterName=systemParameter.name();
    if (systemParameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
    if (systemParameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",systemParameterName,extensionClassFullName));
    }
    if (systemParameter.defaultValue().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",systemParameterName,extensionClassFullName));
    }
    if (systemParameter.possibleParameters().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",systemParameterName,extensionClassFullName));
    }
  }
}","/** 
 * This method uses for validate @Extension / @SystemParameter elements.
 * @param systemParameters system property array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void systemParametersValidation(SystemParameter[] systemParameters) throws AnnotationValidationException {
  for (  SystemParameter systemParameter : systemParameters) {
    String systemParameterName=systemParameter.name();
    if (systemParameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
    if (systemParameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",systemParameterName,extensionClassFullName));
    }
    if (systemParameter.defaultValue().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",systemParameterName,extensionClassFullName));
    }
    if (systemParameter.possibleParameters().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",systemParameterName,extensionClassFullName));
    }
  }
}",0.9989047097480832
28841,"/** 
 * This method uses for validate @Extension -> @Parameter element.
 * @param parameters parameter array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","/** 
 * This method uses for validate @Extension / @Parameter element.
 * @param parameters parameter array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9988004798080768
28842,"/** 
 * Get the names of the available queries.
 * @return {@link Set<String>} of query names.
 */
public Set<String> getQueryNames(){
  return queryProcessorMap.keySet();
}","/** 
 * Get the names of the available queries.
 * @return string set of query names.
 */
public Set<String> getQueryNames(){
  return queryProcessorMap.keySet();
}",0.9436201780415432
28843,"/** 
 * The initialization method for FunctionExecutor, this method will be called before the other methods
 * @param attributeExpressionExecutors are the executors of each function parameters
 * @param configReader
 * @param executionPlanContext         the context of the execution plan
 */
protected abstract void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext);","/** 
 * The initialization method for FunctionExecutor, this method will be called before the other methods
 * @param attributeExpressionExecutors are the executors of each function parameters
 * @param configReader This hold the {@link FunctionExecutor} extensions configuration reader.
 * @param executionPlanContext         the context of the execution plan
 */
protected abstract void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext);",0.9245283018867924
28844,"/** 
 * Join the given two event streams
 * @param leftStream  event left stream
 * @param rightStream event right stream
 * @return StateEvent state event
 */
public StateEvent joinEventBuilder(StreamEvent leftStream,StreamEvent rightStream,ComplexEvent.Type type){
  StateEvent returnEvent=stateEventPool.borrowEvent();
  returnEvent.setEvent(0,leftStream);
  returnEvent.setEvent(1,rightStream);
  returnEvent.setType(type);
  if (!leftJoinProcessor) {
    returnEvent.setTimestamp(rightStream.getTimestamp());
  }
 else {
    returnEvent.setTimestamp(leftStream.getTimestamp());
  }
  return returnEvent;
}","/** 
 * Join the given two event streams
 * @param leftStream  event left stream
 * @param rightStream event right stream
 * @param type complex event type
 * @return StateEvent state event
 */
public StateEvent joinEventBuilder(StreamEvent leftStream,StreamEvent rightStream,ComplexEvent.Type type){
  StateEvent returnEvent=stateEventPool.borrowEvent();
  returnEvent.setEvent(0,leftStream);
  returnEvent.setEvent(1,rightStream);
  returnEvent.setType(type);
  if (!leftJoinProcessor) {
    returnEvent.setTimestamp(rightStream.getTimestamp());
  }
 else {
    returnEvent.setTimestamp(leftStream.getTimestamp());
  }
  return returnEvent;
}",0.9728867623604466
28845,"/** 
 * The init method of the StreamProcessor, this method will be called before other methods
 * @param inputDefinition              the incoming stream definition
 * @param attributeExpressionExecutors the executors of each function parameters
 * @param configReader
 * @param executionPlanContext         the context of the execution plan
 * @param outputExpectsExpiredEvents   is output expects ExpiredEvents   @return the additional output attributesintroduced by the function
 */
protected abstract List<Attribute> init(AbstractDefinition inputDefinition,ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents);","/** 
 * The init method of the StreamProcessor, this method will be called before other methods
 * @param inputDefinition              the incoming stream definition
 * @param attributeExpressionExecutors the executors of each function parameters
 * @param configReader this hold the {@link AbstractStreamProcessor} extensions configuration reader.
 * @param executionPlanContext         the context of the execution plan
 * @param outputExpectsExpiredEvents   is output expects ExpiredEvents   @return the additional output attributesintroduced by the function
 * @return list of attributes.
 */
protected abstract List<Attribute> init(AbstractDefinition inputDefinition,ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents);",0.9286640726329444
28846,"/** 
 * To construct a finder having the capability of finding events at the processor that corresponds to the incoming matchingEvent and the given matching expression logic.
 * @param expression                  the matching expression
 * @param matchingMetaInfoHolder      the meta structure of the incoming matchingEvent
 * @param executionPlanContext        current execution plan context
 * @param variableExpressionExecutors the list of variable ExpressionExecutors already created
 * @param tableMap               map of event tables
 * @param queryName
 * @return compiled Condition having the capability of matching events against the incoming matchingEvent
 */
CompiledCondition compileCondition(Expression expression,MatchingMetaInfoHolder matchingMetaInfoHolder,ExecutionPlanContext executionPlanContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName);","/** 
 * To construct a finder having the capability of finding events at the processor that corresponds to the incoming matchingEvent and the given matching expression logic.
 * @param expression                  the matching expression
 * @param matchingMetaInfoHolder      the meta structure of the incoming matchingEvent
 * @param executionPlanContext        current execution plan context
 * @param variableExpressionExecutors the list of variable ExpressionExecutors already created
 * @param tableMap               map of event tables
 * @param queryName                   query name of findable processor belongs to.
 * @return compiled Condition having the capability of matching events against the incoming matchingEvent
 */
CompiledCondition compileCondition(Expression expression,MatchingMetaInfoHolder matchingMetaInfoHolder,ExecutionPlanContext executionPlanContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,Table> tableMap,String queryName);",0.9669638175144204
28847,"/** 
 * The init method of the WindowProcessor, this method will be called before other methods
 * @param attributeExpressionExecutors the executors of each function parameters
 * @param configReader                 the config reader of window
 * @param outputExpectsExpiredEvents
 * @param executionPlanContext         the context of the execution plan
 */
protected abstract void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,boolean outputExpectsExpiredEvents,ExecutionPlanContext executionPlanContext);","/** 
 * The init method of the WindowProcessor, this method will be called before other methods
 * @param attributeExpressionExecutors the executors of each function parameters
 * @param configReader                 the config reader of window
 * @param outputExpectsExpiredEvents   is expired event out put or not
 * @param executionPlanContext         the context of the execution plan
 */
protected abstract void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,boolean outputExpectsExpiredEvents,ExecutionPlanContext executionPlanContext);",0.9695340501792116
28848,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
protected abstract void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext);","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link AttributeAggregator} extensions configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
protected abstract void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext);",0.9126891734575088
28849,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    avgOutputAttributeAggregator=new AvgAttributeAggregatorFloat();
  break;
case INT:
avgOutputAttributeAggregator=new AvgAttributeAggregatorInt();
break;
case LONG:
avgOutputAttributeAggregator=new AvgAttributeAggregatorLong();
break;
case DOUBLE:
avgOutputAttributeAggregator=new AvgAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link AvgAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    avgOutputAttributeAggregator=new AvgAttributeAggregatorFloat();
  break;
case INT:
avgOutputAttributeAggregator=new AvgAttributeAggregatorInt();
break;
case LONG:
avgOutputAttributeAggregator=new AvgAttributeAggregatorLong();
break;
case DOUBLE:
avgOutputAttributeAggregator=new AvgAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.9697243560777226
28850,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link CountAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
}",0.919674039580908
28851,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    maxOutputAttributeAggregator=new MaxAttributeAggregatorFloat();
  break;
case INT:
maxOutputAttributeAggregator=new MaxAttributeAggregatorInt();
break;
case LONG:
maxOutputAttributeAggregator=new MaxAttributeAggregatorLong();
break;
case DOUBLE:
maxOutputAttributeAggregator=new MaxAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link MaxAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    maxOutputAttributeAggregator=new MaxAttributeAggregatorFloat();
  break;
case INT:
maxOutputAttributeAggregator=new MaxAttributeAggregatorInt();
break;
case LONG:
maxOutputAttributeAggregator=new MaxAttributeAggregatorLong();
break;
case DOUBLE:
maxOutputAttributeAggregator=new MaxAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.9697243560777226
28852,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorFloat();
  break;
case INT:
maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorInt();
break;
case LONG:
maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorLong();
break;
case DOUBLE:
maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link MaxForeverAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorFloat();
  break;
case INT:
maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorInt();
break;
case LONG:
maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorLong();
break;
case DOUBLE:
maxForeverAttributeAggregator=new MaxForeverAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.96815834767642
28853,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    minOutputAttributeAggregator=new MinAttributeAggregatorFloat();
  break;
case INT:
minOutputAttributeAggregator=new MinAttributeAggregatorInt();
break;
case LONG:
minOutputAttributeAggregator=new MinAttributeAggregatorLong();
break;
case DOUBLE:
minOutputAttributeAggregator=new MinAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link MinAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    minOutputAttributeAggregator=new MinAttributeAggregatorFloat();
  break;
case INT:
minOutputAttributeAggregator=new MinAttributeAggregatorInt();
break;
case LONG:
minOutputAttributeAggregator=new MinAttributeAggregatorLong();
break;
case DOUBLE:
minOutputAttributeAggregator=new MinAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.9697243560777226
28854,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    minForeverAttributeAggregator=new MinForeverAttributeAggregatorFloat();
  break;
case INT:
minForeverAttributeAggregator=new MinForeverAttributeAggregatorInt();
break;
case LONG:
minForeverAttributeAggregator=new MinForeverAttributeAggregatorLong();
break;
case DOUBLE:
minForeverAttributeAggregator=new MinForeverAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link MinForeverAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    minForeverAttributeAggregator=new MinForeverAttributeAggregatorFloat();
  break;
case INT:
minForeverAttributeAggregator=new MinForeverAttributeAggregatorInt();
break;
case LONG:
minForeverAttributeAggregator=new MinForeverAttributeAggregatorLong();
break;
case DOUBLE:
minForeverAttributeAggregator=new MinForeverAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.96815834767642
28855,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case INT:
    stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorInt();
  break;
case LONG:
stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorLong();
break;
case FLOAT:
stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorFloat();
break;
case DOUBLE:
stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link StdDevAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case INT:
    stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorInt();
  break;
case LONG:
stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorLong();
break;
case FLOAT:
stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorFloat();
break;
case DOUBLE:
stdDevOutputAttributeAggregator=new StdDevAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.9690812720848055
28856,"/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    sumOutputAttributeAggregator=new SumAttributeAggregatorFloat();
  break;
case INT:
sumOutputAttributeAggregator=new SumAttributeAggregatorInt();
break;
case LONG:
sumOutputAttributeAggregator=new SumAttributeAggregatorLong();
break;
case DOUBLE:
sumOutputAttributeAggregator=new SumAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}","/** 
 * The initialization method for FunctionExecutor
 * @param attributeExpressionExecutors are the executors of each attributes in the function
 * @param configReader this hold the {@link SumAttributeAggregator} configuration reader.
 * @param executionPlanContext         Execution plan runtime context
 */
@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 1) {
    throw new OperationNotSupportedException(""String_Node_Str"" + attributeExpressionExecutors.length + ""String_Node_Str"");
  }
  Attribute.Type type=attributeExpressionExecutors[0].getReturnType();
switch (type) {
case FLOAT:
    sumOutputAttributeAggregator=new SumAttributeAggregatorFloat();
  break;
case INT:
sumOutputAttributeAggregator=new SumAttributeAggregatorInt();
break;
case LONG:
sumOutputAttributeAggregator=new SumAttributeAggregatorLong();
break;
case DOUBLE:
sumOutputAttributeAggregator=new SumAttributeAggregatorDouble();
break;
default :
throw new OperationNotSupportedException(""String_Node_Str"" + type);
}
}",0.9697243560777226
28857,"/** 
 * Will be called for initialing the   {@link Sink}
 * @param outputStreamDefinition
 * @param optionHolder           Option holder containing static and dynamic options related to the {@link Sink}
 * @param sinkConfigReader
 * @param executionPlanContext
 */
protected abstract void init(StreamDefinition outputStreamDefinition,OptionHolder optionHolder,ConfigReader sinkConfigReader,ExecutionPlanContext executionPlanContext);","/** 
 * Will be called for initialing the   {@link Sink}
 * @param outputStreamDefinition containing stream definition bind to the {@link Sink}
 * @param optionHolder           Option holder containing static and dynamic options related to the {@link Sink}
 * @param sinkConfigReader  this hold the {@link Sink} extensions configuration reader.
 * @param executionPlanContext {@link ExecutionPlanContext} of the parent execution plan.
 */
protected abstract void init(StreamDefinition outputStreamDefinition,OptionHolder optionHolder,ConfigReader sinkConfigReader,ExecutionPlanContext executionPlanContext);",0.6826923076923077
28858,"/** 
 * Sending events via output transport
 * @param payload          payload of the event
 * @param transportOptions one of the event constructing the payload
 * @throws ConnectionUnavailableException
 */
void publish(Object payload,DynamicOptions transportOptions) throws ConnectionUnavailableException ;","/** 
 * Sending events via output transport
 * @param payload          payload of the event
 * @param transportOptions one of the event constructing the payload
 * @throws ConnectionUnavailableException throw when connections are unavailable.
 */
void publish(Object payload,DynamicOptions transportOptions) throws ConnectionUnavailableException ;",0.9388379204892966
28859,"/** 
 * Initialize the mapper and the mapping configurations.
 * @param streamDefinition       The stream definition
 * @param optionHolder           Option holder containing static and dynamic options related to the mapper
 * @param payloadTemplateBuilder un mapped payload for reference
 * @param mapperConfigReader
 */
public abstract void init(StreamDefinition streamDefinition,OptionHolder optionHolder,TemplateBuilder payloadTemplateBuilder,ConfigReader mapperConfigReader);","/** 
 * Initialize the mapper and the mapping configurations.
 * @param streamDefinition       The stream definition
 * @param optionHolder           Option holder containing static and dynamic options related to the mapper
 * @param payloadTemplateBuilder un mapped payload for reference
 * @param mapperConfigReader this hold the {@link SinkMapper} extensions configuration reader.
 */
public abstract void init(StreamDefinition streamDefinition,OptionHolder optionHolder,TemplateBuilder payloadTemplateBuilder,ConfigReader mapperConfigReader);",0.935672514619883
28860,"/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param distributionOptionHolder
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader
 */
@Override public void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader){
}","/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param distributionOptionHolder Option holder containing static and dynamic options related to thedistribution strategy.
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader This hold the {@link BroadcastDistributionStrategy} extensions configuration reader.
 */
@Override public void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader){
}",0.8846153846153846
28861,"/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader
 */
public abstract void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader);","/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param distributionOptionHolder The option under @destination of the relevant sink.
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader This hold the {@link DistributionStrategy} extensions configuration reader.
 */
public abstract void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader);",0.8318085855031668
28862,"/** 
 * Remove a destination to available set of destination IDs. Once this method is called for a given destination ID, that particular destination ID will be considered when getDestinationsToPublish() is called
 * @param destinationId
 */
public void destinationAvailable(int destinationId){
  if (destinationIds.contains(destinationId)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + destinationId + ""String_Node_Str"");
  }
  destinationIds.add(destinationId);
  Collections.sort(destinationIds);
}","/** 
 * Remove a destination to available set of destination IDs. Once this method is called for a given destination ID, that particular destination ID will be considered when getDestinationsToPublish() is called
 * @param destinationId the ID of the destination to be check for availability.
 */
public void destinationAvailable(int destinationId){
  if (destinationIds.contains(destinationId)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + destinationId + ""String_Node_Str"");
  }
  destinationIds.add(destinationId);
  Collections.sort(destinationIds);
}",0.9491833030852994
28863,"/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader
 */
@Override public void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader){
  totalDestinationCount=destinationOptionHolders.size();
  String partitionKey=distributionOptionHolder.validateAndGetStaticValue(SiddhiConstants.PARTITION_KEY_FIELD_KEY);
  if (partitionKey == null || partitionKey.isEmpty()) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    int partitionKeyFieldPosition=streamDefinition.getAttributePosition(partitionKey);
    partitionOption=new Option(partitionKeyFieldPosition);
  }
 catch (  AttributeNotExistException e) {
    throw new ExecutionPlanValidationException(""String_Node_Str"",e);
  }
}","/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader This hold the {@link PartitionedDistributionStrategy} configuration reader.
 */
@Override public void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader){
  totalDestinationCount=destinationOptionHolders.size();
  String partitionKey=distributionOptionHolder.validateAndGetStaticValue(SiddhiConstants.PARTITION_KEY_FIELD_KEY);
  if (partitionKey == null || partitionKey.isEmpty()) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    int partitionKeyFieldPosition=streamDefinition.getAttributePosition(partitionKey);
    partitionOption=new Option(partitionKeyFieldPosition);
  }
 catch (  AttributeNotExistException e) {
    throw new ExecutionPlanValidationException(""String_Node_Str"",e);
  }
}",0.9698890649762282
28864,"/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader
 */
@Override public void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader){
}","/** 
 * Initialize the Distribution strategy with the information it will require to make decisions.
 * @param streamDefinition         The stream attached to the sink this DistributionStrategy is used in
 * @param transportOptionHolder    Sink options of the sink which uses this DistributionStrategy
 * @param destinationOptionHolders The list of options under @destination of the relevant sink.
 * @param configReader This hold the {@link RoundRobinDistributionStrategy} configuration reader.
 */
@Override public void init(StreamDefinition streamDefinition,OptionHolder transportOptionHolder,OptionHolder distributionOptionHolder,List<OptionHolder> destinationOptionHolders,ConfigReader configReader){
}",0.9439880507841673
28865,"/** 
 * Initializing the Record Table
 * @param tableDefinition definintion of the table with annotations if any
 * @param configReader
 */
protected abstract void init(TableDefinition tableDefinition,ConfigReader configReader);","/** 
 * Initializing the Record Table
 * @param tableDefinition definintion of the table with annotations if any
 * @param configReader this hold the {@link AbstractRecordTable} configuration reader.
 */
protected abstract void init(TableDefinition tableDefinition,ConfigReader configReader);",0.8769230769230769
28866,"/** 
 * @param streamDefinition Definition of the stream this sink instance is publishing to
 * @param type Type of the transport that (e.g., TCP, JMS)
 * @param transportOptionHolder Option holder for carrying options for the transport
 * @param sinkConfigReader  This hold the {@link Sink} extensions configuration reader for the sink
 * @param sinkMapper Hold the mapper that's used in this sink
 * @param mapType Type of the mapper
 * @param mapOptionHolder Options of the mapper
 * @param payload The template of the payload message
 * @param mapperConfigReader This hold the {@link Sink} extensions configuration reader for the mapper
 * @param executionPlanContext The execution plan context
 * @param destinationOptionHolders List of option holders containing the options mentioned in @destination
 * @param sinkAnnotation The annotation of the Sink
 * @param strategy Publishing strategy to be used by the distributed transport
 * @param supportedDynamicOptions List of supported dynamic options
 */
public void init(StreamDefinition streamDefinition,String type,OptionHolder transportOptionHolder,ConfigReader sinkConfigReader,SinkMapper sinkMapper,String mapType,OptionHolder mapOptionHolder,String payloadTemplate,ConfigReader mapperConfigReader,ExecutionPlanContext executionPlanContext,List<OptionHolder> destinationOptionHolders,Annotation sinkAnnotation,DistributionStrategy strategy,String[] supportedDynamicOptions){
  this.strategy=strategy;
  this.supportedDynamicOptions=supportedDynamicOptions;
  init(streamDefinition,type,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,payloadTemplate,mapperConfigReader,executionPlanContext);
  initTransport(sinkOptionHolder,destinationOptionHolders,sinkAnnotation,sinkConfigReader,executionPlanContext);
}","/** 
 * This is method contains the additional parameters which require to initialize distributed transport
 * @param streamDefinition Definition of the stream this sink instance is publishing to
 * @param type Type of the transport that (e.g., TCP, JMS)
 * @param transportOptionHolder Option holder for carrying options for the transport
 * @param sinkConfigReader  This hold the {@link Sink} extensions configuration reader for the sink
 * @param sinkMapper Hold the mapper that's used in this sink
 * @param mapType Type of the mapper
 * @param mapOptionHolder Options of the mapper
 * @param payloadTemplate The template of the payload message
 * @param mapperConfigReader This hold the {@link Sink} extensions configuration reader for the mapper
 * @param executionPlanContext The execution plan context
 * @param destinationOptionHolders List of option holders containing the options mentioned in @destination
 * @param sinkAnnotation The annotation of the Sink
 * @param strategy Publishing strategy to be used by the distributed transport
 * @param supportedDynamicOptions List of supported dynamic options
 */
public void init(StreamDefinition streamDefinition,String type,OptionHolder transportOptionHolder,ConfigReader sinkConfigReader,SinkMapper sinkMapper,String mapType,OptionHolder mapOptionHolder,String payloadTemplate,ConfigReader mapperConfigReader,ExecutionPlanContext executionPlanContext,List<OptionHolder> destinationOptionHolders,Annotation sinkAnnotation,DistributionStrategy strategy,String[] supportedDynamicOptions){
  this.strategy=strategy;
  this.supportedDynamicOptions=supportedDynamicOptions;
  init(streamDefinition,type,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,payloadTemplate,mapperConfigReader,executionPlanContext);
  initTransport(sinkOptionHolder,destinationOptionHolders,sinkAnnotation,sinkConfigReader,executionPlanContext);
}",0.969959404600812
28867,"@Test public void testTcpSource7() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      eventArrived=true;
      for (      Event event : events) {
        count++;
switch (count) {
case 1:
          Assert.assertEquals(""String_Node_Str"",event.getData(0));
        break;
case 2:
      Assert.assertEquals(""String_Node_Str"",event.getData(0));
    break;
case 3:
  Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 4:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 5:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 6:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
org.junit.Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
TCPNettyClient TCPNettyClient=new TCPNettyClient();
TCPNettyClient.connect(""String_Node_Str"",9892);
ArrayList<Event> arrayList=new ArrayList<Event>(3);
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.disconnect();
TCPNettyClient.shutdown();
Thread.sleep(300);
Assert.assertEquals(6,count);
Assert.assertTrue(eventArrived);
executionPlanRuntime.shutdown();
}","@Test public void testTcpSource7() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      eventArrived=true;
      for (      Event event : events) {
        count++;
switch (count) {
case 1:
          Assert.assertEquals(""String_Node_Str"",event.getData(0));
        break;
case 2:
      Assert.assertEquals(""String_Node_Str"",event.getData(0));
    break;
case 3:
  Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 4:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 5:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 6:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
org.junit.Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
TCPNettyClient TCPNettyClient=new TCPNettyClient();
TCPNettyClient.connect(""String_Node_Str"",9892);
ArrayList<Event> arrayList=new ArrayList<Event>(3);
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380L,23.0,true}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801L,231.0,false}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802L,232.0,true}));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.disconnect();
TCPNettyClient.shutdown();
Thread.sleep(300);
Assert.assertEquals(6,count);
Assert.assertTrue(eventArrived);
executionPlanRuntime.shutdown();
}",0.9771062271062272
28868,"private String constructJsonForDefaultMapping(Object eventObj){
  StringBuilder sb=new StringBuilder();
  int numberOfOuterObjects=0;
  if (enclosingElement != null) {
    String[] nodeNames=enclosingElement.split(""String_Node_Str"");
    if (DEFAULT_ENCLOSING_ELEMENT.equals(nodeNames[0])) {
      numberOfOuterObjects=nodeNames.length - 1;
    }
 else {
      numberOfOuterObjects=nodeNames.length;
    }
    for (    String nodeName : nodeNames) {
      if (!DEFAULT_ENCLOSING_ELEMENT.equals(nodeName)) {
        sb.append(JSON_EVENT_START_SYMBOL).append(""String_Node_Str"").append(nodeName).append(""String_Node_Str"").append(JSON_KEYVALUE_SEPERATOR);
      }
    }
    if (eventObj.getClass() == Event.class) {
      Event event=(Event)eventObj;
      JsonObject jsonEvent=constructSingleEventForDefaultMapping(doPartialProcessing(event));
      sb.append(jsonEvent);
    }
 else     if (eventObj.getClass() == Event[].class) {
      JsonArray eventArray=new JsonArray();
      for (      Event event : (Event[])eventObj) {
        eventArray.add(constructSingleEventForDefaultMapping(doPartialProcessing(event)));
      }
      sb.append(eventArray.toString());
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
    for (int i=0; i < numberOfOuterObjects; i++) {
      sb.append(JSON_EVENT_END_SYMBOL);
    }
    return sb.toString();
  }
 else {
    if (eventObj.getClass() == Event.class) {
      Event event=(Event)eventObj;
      JsonObject jsonEvent=constructSingleEventForDefaultMapping(doPartialProcessing(event));
      return jsonEvent.toString();
    }
 else     if (eventObj.getClass() == Event[].class) {
      JsonArray eventArray=new JsonArray();
      for (      Event event : (Event[])eventObj) {
        eventArray.add(constructSingleEventForDefaultMapping(doPartialProcessing(event)));
      }
      return (eventArray.toString());
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
  }
}","private String constructJsonForDefaultMapping(Object eventObj){
  StringBuilder sb=new StringBuilder();
  int numberOfOuterObjects;
  if (enclosingElement != null) {
    String[] nodeNames=enclosingElement.split(""String_Node_Str"");
    if (DEFAULT_ENCLOSING_ELEMENT.equals(nodeNames[0])) {
      numberOfOuterObjects=nodeNames.length - 1;
    }
 else {
      numberOfOuterObjects=nodeNames.length;
    }
    for (    String nodeName : nodeNames) {
      if (!DEFAULT_ENCLOSING_ELEMENT.equals(nodeName)) {
        sb.append(JSON_EVENT_START_SYMBOL).append(""String_Node_Str"").append(nodeName).append(""String_Node_Str"").append(JSON_KEYVALUE_SEPERATOR);
      }
    }
    if (eventObj instanceof Event) {
      Event event=(Event)eventObj;
      JsonObject jsonEvent=constructSingleEventForDefaultMapping(doPartialProcessing(event));
      sb.append(jsonEvent);
    }
 else     if (eventObj instanceof Event[]) {
      JsonArray eventArray=new JsonArray();
      for (      Event event : (Event[])eventObj) {
        eventArray.add(constructSingleEventForDefaultMapping(doPartialProcessing(event)));
      }
      sb.append(eventArray.toString());
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
    for (int i=0; i < numberOfOuterObjects; i++) {
      sb.append(JSON_EVENT_END_SYMBOL);
    }
    return sb.toString();
  }
 else {
    if (eventObj instanceof Event) {
      Event event=(Event)eventObj;
      JsonObject jsonEvent=constructSingleEventForDefaultMapping(doPartialProcessing(event));
      return jsonEvent.toString();
    }
 else     if (eventObj instanceof Event[]) {
      JsonArray eventArray=new JsonArray();
      for (      Event event : (Event[])eventObj) {
        eventArray.add(constructSingleEventForDefaultMapping(doPartialProcessing(event)));
      }
      return (eventArray.toString());
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
  }
}",0.8996043521266073
28869,"private String constructJsonForCustomMapping(Object eventObj,TemplateBuilder payloadTemplateBuilder){
  StringBuilder sb=new StringBuilder();
  int numberOfOuterObjects=0;
  if (enclosingElement != null) {
    String[] nodeNames=enclosingElement.split(""String_Node_Str"");
    if (DEFAULT_ENCLOSING_ELEMENT.equals(nodeNames[0])) {
      numberOfOuterObjects=nodeNames.length - 1;
    }
 else {
      numberOfOuterObjects=nodeNames.length;
    }
    for (    String nodeName : nodeNames) {
      if (!DEFAULT_ENCLOSING_ELEMENT.equals(nodeName)) {
        sb.append(JSON_EVENT_START_SYMBOL).append(""String_Node_Str"").append(nodeName).append(""String_Node_Str"").append(JSON_KEYVALUE_SEPERATOR);
      }
    }
    if (eventObj.getClass() == Event.class) {
      Event event=doPartialProcessing((Event)eventObj);
      sb.append(payloadTemplateBuilder.build(event));
    }
 else     if (eventObj.getClass() == Event[].class) {
      String jsonEvent;
      sb.append(JSON_ARRAY_START_SYMBOL);
      for (      Event e : (Event[])eventObj) {
        jsonEvent=payloadTemplateBuilder.build(doPartialProcessing(e));
        if (jsonEvent != null) {
          sb.append(jsonEvent).append(JSON_EVENT_SEPERATOR).append(""String_Node_Str"");
        }
      }
      sb.delete(sb.length() - 2,sb.length());
      sb.append(JSON_ARRAY_END_SYMBOL);
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
    for (int i=0; i < numberOfOuterObjects; i++) {
      sb.append(JSON_EVENT_END_SYMBOL);
    }
    return sb.toString();
  }
 else {
    if (eventObj.getClass() == Event.class) {
      return payloadTemplateBuilder.build(doPartialProcessing((Event)eventObj));
    }
 else     if (eventObj.getClass() == Event[].class) {
      String jsonEvent;
      sb.append(JSON_ARRAY_START_SYMBOL);
      for (      Event event : (Event[])eventObj) {
        jsonEvent=payloadTemplateBuilder.build(doPartialProcessing(event));
        if (jsonEvent != null) {
          sb.append(jsonEvent).append(JSON_EVENT_SEPERATOR).append(""String_Node_Str"");
        }
      }
      sb.delete(sb.length() - 2,sb.length());
      sb.append(JSON_ARRAY_END_SYMBOL);
      return sb.toString();
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
  }
}","private String constructJsonForCustomMapping(Object eventObj,TemplateBuilder payloadTemplateBuilder){
  StringBuilder sb=new StringBuilder();
  int numberOfOuterObjects=0;
  if (enclosingElement != null) {
    String[] nodeNames=enclosingElement.split(""String_Node_Str"");
    if (DEFAULT_ENCLOSING_ELEMENT.equals(nodeNames[0])) {
      numberOfOuterObjects=nodeNames.length - 1;
    }
 else {
      numberOfOuterObjects=nodeNames.length;
    }
    for (    String nodeName : nodeNames) {
      if (!DEFAULT_ENCLOSING_ELEMENT.equals(nodeName)) {
        sb.append(JSON_EVENT_START_SYMBOL).append(""String_Node_Str"").append(nodeName).append(""String_Node_Str"").append(JSON_KEYVALUE_SEPERATOR);
      }
    }
    if (eventObj instanceof Event) {
      Event event=doPartialProcessing((Event)eventObj);
      sb.append(payloadTemplateBuilder.build(event));
    }
 else     if (eventObj instanceof Event[]) {
      String jsonEvent;
      sb.append(JSON_ARRAY_START_SYMBOL);
      for (      Event e : (Event[])eventObj) {
        jsonEvent=payloadTemplateBuilder.build(doPartialProcessing(e));
        if (jsonEvent != null) {
          sb.append(jsonEvent).append(JSON_EVENT_SEPERATOR).append(""String_Node_Str"");
        }
      }
      sb.delete(sb.length() - 2,sb.length());
      sb.append(JSON_ARRAY_END_SYMBOL);
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
    for (int i=0; i < numberOfOuterObjects; i++) {
      sb.append(JSON_EVENT_END_SYMBOL);
    }
    return sb.toString();
  }
 else {
    if (eventObj.getClass() == Event.class) {
      return payloadTemplateBuilder.build(doPartialProcessing((Event)eventObj));
    }
 else     if (eventObj.getClass() == Event[].class) {
      String jsonEvent;
      sb.append(JSON_ARRAY_START_SYMBOL);
      for (      Event event : (Event[])eventObj) {
        jsonEvent=payloadTemplateBuilder.build(doPartialProcessing(event));
        if (jsonEvent != null) {
          sb.append(jsonEvent).append(JSON_EVENT_SEPERATOR).append(""String_Node_Str"");
        }
      }
      sb.delete(sb.length() - 2,sb.length());
      sb.append(JSON_ARRAY_END_SYMBOL);
      return sb.toString();
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      return null;
    }
  }
}",0.9252577319587628
28870,"private Event[] convertToEventArrayForDefaultMapping(Object eventObject){
  Gson gson=new Gson();
  JsonObject[] eventObjects=gson.fromJson(eventObject.toString(),JsonObject[].class);
  Event[] events=new Event[eventObjects.length];
  int index=0;
  JsonObject eventObj=null;
  for (  JsonObject jsonEvent : eventObjects) {
    if (jsonEvent.has(DEFAULT_JSON_EVENT_IDENTIFIER)) {
      eventObj=jsonEvent.get(DEFAULT_JSON_EVENT_IDENTIFIER).getAsJsonObject();
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str""+ ""String_Node_Str"");
      continue;
    }
    Event event=new Event(streamAttributes.size());
    Object[] data=event.getData();
    if (failOnMissingAttribute && eventObj.size() < streamAttributes.size()) {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str""+ ""String_Node_Str"");
      continue;
    }
    int position=0;
    for (    Attribute attribute : streamAttributes) {
      String attributeName=attribute.getName();
      Attribute.Type type=attribute.getType();
      Object attributeValue=eventObj.get(attributeName);
      if (attributeValue == null) {
        data[position++]=null;
      }
 else {
        data[position++]=attributeConverter.getPropertyValue(eventObj.get(attributeName).toString(),type);
      }
    }
    events[index++]=event;
  }
  return Arrays.copyOfRange(events,0,index);
}","private Event[] convertToEventArrayForDefaultMapping(Object eventObject){
  Gson gson=new Gson();
  JsonObject[] eventObjects=gson.fromJson(eventObject.toString(),JsonObject[].class);
  Event[] events=new Event[eventObjects.length];
  int index=0;
  JsonObject eventObj=null;
  for (  JsonObject jsonEvent : eventObjects) {
    if (jsonEvent.has(DEFAULT_JSON_EVENT_IDENTIFIER)) {
      eventObj=jsonEvent.get(DEFAULT_JSON_EVENT_IDENTIFIER).getAsJsonObject();
      if (failOnMissingAttribute && eventObj.size() < streamAttributes.size()) {
        log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str""+ ""String_Node_Str"");
        continue;
      }
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str""+ ""String_Node_Str"");
      continue;
    }
    Event event=new Event(streamAttributes.size());
    Object[] data=event.getData();
    int position=0;
    for (    Attribute attribute : streamAttributes) {
      String attributeName=attribute.getName();
      Attribute.Type type=attribute.getType();
      Object attributeValue=eventObj.get(attributeName);
      if (attributeValue == null) {
        data[position++]=null;
      }
 else {
        data[position++]=attributeConverter.getPropertyValue(eventObj.get(attributeName).toString(),type);
      }
    }
    events[index++]=event;
  }
  return Arrays.copyOfRange(events,0,index);
}",0.849532037437005
28871,"@Override public void receive(Event[] events){
  EventPrinter.print(events);
  for (  Event event : events) {
switch (count.incrementAndGet()) {
case 1:
      junit.framework.Assert.assertEquals(55.6f,event.getData(1));
    break;
case 2:
  junit.framework.Assert.assertEquals(56.6f,event.getData(1));
break;
case 3:
junit.framework.Assert.assertEquals(100L,event.getData(2));
break;
case 4:
junit.framework.Assert.assertEquals(200L,event.getData(2));
break;
case 5:
junit.framework.Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 6:
junit.framework.Assert.assertEquals(null,event.getData(0));
break;
default :
Assert.fail();
}
}
}","@Override public void receive(Event[] events){
  EventPrinter.print(events);
  for (  Event event : events) {
switch (count.incrementAndGet()) {
case 1:
      Assert.assertEquals(55.6f,event.getData(1));
    break;
case 2:
  Assert.assertEquals(56.6f,event.getData(1));
break;
case 3:
Assert.assertEquals(100L,event.getData(2));
break;
case 4:
Assert.assertEquals(200L,event.getData(2));
break;
case 5:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 6:
Assert.assertEquals(null,event.getData(0));
break;
default :
Assert.fail();
}
}
}",0.8096026490066225
28872,"@Test public void jsonSourceMapperTest8() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
default :
      Assert.fail();
  }
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest8() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
default :
      Assert.fail();
  }
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}",0.9940476190476192
28873,"@Test public void jsonSourceMapperTest12() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(56.6f,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(100L,event.getData(2));
break;
case 4:
junit.framework.Assert.assertEquals(200L,event.getData(2));
break;
case 5:
junit.framework.Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 6:
junit.framework.Assert.assertEquals(null,event.getData(0));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",6,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest12() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(56.6f,event.getData(1));
    break;
case 3:
  Assert.assertEquals(100L,event.getData(2));
break;
case 4:
Assert.assertEquals(200L,event.getData(2));
break;
case 5:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
case 6:
Assert.assertEquals(null,event.getData(0));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",6,count.get());
executionPlanRuntime.shutdown();
}",0.9700910273081924
28874,"@Test public void jsonSourceMapperTest9() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(52.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(53.6f,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(54.6f,event.getData(1));
break;
case 4:
junit.framework.Assert.assertEquals(55.6f,event.getData(1));
break;
case 5:
junit.framework.Assert.assertEquals(57.6f,event.getData(1));
break;
case 6:
junit.framework.Assert.assertEquals(58.6f,event.getData(1));
break;
case 7:
junit.framework.Assert.assertEquals(60.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",7,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest9() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(52.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(53.6f,event.getData(1));
    break;
case 3:
  Assert.assertEquals(54.6f,event.getData(1));
break;
case 4:
Assert.assertEquals(55.6f,event.getData(1));
break;
case 5:
Assert.assertEquals(57.6f,event.getData(1));
break;
case 6:
Assert.assertEquals(58.6f,event.getData(1));
break;
case 7:
Assert.assertEquals(60.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",7,count.get());
executionPlanRuntime.shutdown();
}",0.9701492537313432
28875,"@Test public void jsonSourceMapperTest11() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(56.6f,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(null,event.getData(1));
break;
case 4:
junit.framework.Assert.assertEquals(76.6f,event.getData(1));
break;
case 5:
junit.framework.Assert.assertEquals(77.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",5,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest11() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(56.6f,event.getData(1));
    break;
case 3:
  Assert.assertEquals(null,event.getData(1));
break;
case 4:
Assert.assertEquals(76.6f,event.getData(1));
break;
case 5:
Assert.assertEquals(77.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",5,count.get());
executionPlanRuntime.shutdown();
}",0.97316345893196
28876,"@Test public void jsonSourceMapperTest6() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
default :
      Assert.fail();
  }
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest6() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
default :
      Assert.fail();
  }
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}",0.9954415954415956
28877,"@Test public void jsonSourceMapperTest10() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(56.6f,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(57.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",3,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest10() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(56.6f,event.getData(1));
    break;
case 3:
  Assert.assertEquals(57.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",3,count.get());
executionPlanRuntime.shutdown();
}",0.9769996567112942
28878,"@Test public void jsonSourceMapperTest4() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(1.0f,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(56.0f,event.getData(1));
break;
case 4:
junit.framework.Assert.assertEquals(57.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest4() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(1.0f,event.getData(1));
    break;
case 3:
  Assert.assertEquals(56.0f,event.getData(1));
break;
case 4:
Assert.assertEquals(57.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}",0.986863711001642
28879,"@Test public void jsonSourceMapperTest5() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
default :
      Assert.fail();
  }
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest5() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
default :
      Assert.fail();
  }
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",1,count.get());
executionPlanRuntime.shutdown();
}",0.9948051948051948
28880,"@Test public void jsonSourceMapperTest2() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(null,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(55.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",3,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest2() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(null,event.getData(1));
    break;
case 3:
  Assert.assertEquals(55.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",3,count.get());
executionPlanRuntime.shutdown();
}",0.9867986798679867
28881,"@Test public void jsonSourceMapperTest3() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(null,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(56.0f,event.getData(1));
break;
case 4:
junit.framework.Assert.assertEquals(57.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",4,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest3() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(null,event.getData(1));
    break;
case 3:
  Assert.assertEquals(56.0f,event.getData(1));
break;
case 4:
Assert.assertEquals(57.6f,event.getData(1));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",4,count.get());
executionPlanRuntime.shutdown();
}",0.9832020997375328
28882,"@Test public void jsonSourceMapperTest1() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          junit.framework.Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      junit.framework.Assert.assertEquals(55.678f,event.getData(1));
    break;
case 3:
  junit.framework.Assert.assertEquals(55f,event.getData(1));
break;
case 4:
junit.framework.Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",4,count.get());
executionPlanRuntime.shutdown();
}","@Test public void jsonSourceMapperTest1() throws InterruptedException {
  log.info(""String_Node_Str"");
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  SiddhiManager siddhiManager=new SiddhiManager();
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      EventPrinter.print(events);
      for (      Event event : events) {
switch (count.incrementAndGet()) {
case 1:
          Assert.assertEquals(55.6f,event.getData(1));
        break;
case 2:
      Assert.assertEquals(55.678f,event.getData(1));
    break;
case 3:
  Assert.assertEquals(55f,event.getData(1));
break;
case 4:
Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
InMemoryBroker.publish(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
Thread.sleep(100);
Assert.assertEquals(""String_Node_Str"",4,count.get());
executionPlanRuntime.shutdown();
}",0.9831490258030542
28883,"@Override protected void mapAndProcess(Object eventObject,InputEventHandler inputEventHandler) throws InterruptedException {
synchronized (this) {
    Object convertedEvent;
    convertedEvent=convertToEvent(eventObject);
    if (convertedEvent != null) {
      if (convertedEvent instanceof Event[]) {
        inputEventHandler.sendEvents((Event[])convertedEvent);
      }
 else {
        inputEventHandler.sendEvent((Event)convertedEvent);
      }
    }
  }
}","@Override protected void mapAndProcess(Object eventObject,InputEventHandler inputEventHandler) throws InterruptedException {
  Object convertedEvent;
  convertedEvent=convertToEvent(eventObject);
  if (convertedEvent != null) {
    if (convertedEvent instanceof Event[]) {
      inputEventHandler.sendEvents((Event[])convertedEvent);
    }
 else {
      inputEventHandler.sendEvent((Event)convertedEvent);
    }
  }
}",0.9498861047835992
28884,"/** 
 * Convert the given JSON string to   {@link Event}.
 * @param eventObject JSON string
 * @return the constructed Event object
 */
private Object convertToEvent(Object eventObject){
  if (eventObject == null) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"");
  }
  if (!(eventObject instanceof String)) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.getClass().getCanonicalName());
  }
  if (!isJsonValid(eventObject.toString())) {
    log.error(""String_Node_Str"" + eventObject.toString());
    return null;
  }
  Object jsonObj;
  ReadContext readContext=JsonPath.parse(eventObject.toString());
  if (isCustomMappingEnabled) {
    jsonObj=readContext.read(enclosingElement);
    if (jsonObj == null) {
      log.error(""String_Node_Str"" + enclosingElement + ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      return null;
    }
    if (jsonObj instanceof JSONArray) {
      JSONArray jsonArray=(JSONArray)jsonObj;
      List<Event> eventList=new ArrayList<Event>();
      for (      Object eventObj : jsonArray) {
        try {
          Event event=processCustomEvent(JsonPath.parse(eventObj));
          eventList.add(event);
        }
 catch (        ExecutionPlanRuntimeException e) {
          log.error(e.getMessage());
        }
      }
      Event[] eventArray=new Event[eventList.size()];
      eventArray=eventList.toArray(eventArray);
      return eventArray;
    }
 else {
      try {
        Event event=processCustomEvent(JsonPath.parse(jsonObj));
        return event;
      }
 catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
 else {
    jsonObj=readContext.read(DEFAULT_ENCLOSING_ELEMENT);
    if (jsonObj instanceof JSONArray) {
      return convertToEventArrayForDefaultMapping(eventObject);
    }
 else {
      try {
        Event event=convertToSingleEventForDefaultMapping(eventObject);
        if (event == null) {
          log.error(""String_Node_Str"" + eventObject + ""String_Node_Str"");
          return null;
        }
        return event;
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str"");
        return null;
      }
catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
}","/** 
 * Convert the given JSON string to   {@link Event}.
 * @param eventObject JSON string
 * @return the constructed Event object
 */
private Object convertToEvent(Object eventObject){
  if (!(eventObject instanceof String)) {
    log.error(""String_Node_Str"" + eventObject.getClass().getCanonicalName());
    return null;
  }
  if (!isJsonValid(eventObject.toString())) {
    log.error(""String_Node_Str"" + eventObject.toString());
    return null;
  }
  Object jsonObj;
  ReadContext readContext=JsonPath.parse(eventObject.toString());
  if (isCustomMappingEnabled) {
    jsonObj=readContext.read(enclosingElement);
    if (jsonObj == null) {
      log.error(""String_Node_Str"" + enclosingElement + ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      return null;
    }
    if (jsonObj instanceof JSONArray) {
      JSONArray jsonArray=(JSONArray)jsonObj;
      List<Event> eventList=new ArrayList<Event>();
      for (      Object eventObj : jsonArray) {
        Event event=processCustomEvent(JsonPath.parse(eventObj));
        if (event != null) {
          eventList.add(event);
        }
      }
      Event[] eventArray=eventList.toArray(new Event[0]);
      return eventArray;
    }
 else {
      try {
        Event event=processCustomEvent(JsonPath.parse(jsonObj));
        return event;
      }
 catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
 else {
    jsonObj=readContext.read(DEFAULT_ENCLOSING_ELEMENT);
    if (jsonObj instanceof JSONArray) {
      return convertToEventArrayForDefaultMapping(eventObject);
    }
 else {
      try {
        return convertToSingleEventForDefaultMapping(eventObject);
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + eventObject + ""String_Node_Str"");
        return null;
      }
    }
  }
}",0.6028753240631629
28885,"private Event processCustomEvent(ReadContext readContext){
  Configuration conf=Configuration.defaultConfiguration();
  Event event=new Event(attributesSize);
  Object[] data=event.getData();
  Object childObject=readContext.read(DEFAULT_ENCLOSING_ELEMENT);
  readContext=JsonPath.using(conf).parse(childObject);
  for (  MappingPositionData mappingPositionData : this.mappingPositions) {
    int position=mappingPositionData.getPosition();
    Object mappedValue;
    try {
      mappedValue=readContext.read(mappingPositionData.getMapping());
      if (mappedValue == null) {
        data[position]=null;
      }
 else {
        data[position]=attributeConverter.getPropertyValue(mappedValue.toString(),streamAttributes.get(position).getType());
      }
    }
 catch (    PathNotFoundException e) {
      if (failOnMissingAttribute) {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + childObject.toString() + ""String_Node_Str"");
      }
      data[position]=null;
    }
  }
  return event;
}","private Event processCustomEvent(ReadContext readContext){
  Configuration conf=Configuration.defaultConfiguration();
  Event event=new Event(attributesSize);
  Object[] data=event.getData();
  Object childObject=readContext.read(DEFAULT_ENCLOSING_ELEMENT);
  readContext=JsonPath.using(conf).parse(childObject);
  for (  MappingPositionData mappingPositionData : this.mappingPositions) {
    int position=mappingPositionData.getPosition();
    Object mappedValue;
    try {
      mappedValue=readContext.read(mappingPositionData.getMapping());
      if (mappedValue == null) {
        data[position]=null;
      }
 else {
        data[position]=attributeConverter.getPropertyValue(mappedValue.toString(),streamAttributes.get(position).getType());
      }
    }
 catch (    PathNotFoundException e) {
      if (failOnMissingAttribute) {
        log.error(""String_Node_Str"" + childObject.toString() + ""String_Node_Str"");
        return null;
      }
      data[position]=null;
    }
  }
  return event;
}",0.96575682382134
28886,"private Event convertToSingleEventForDefaultMapping(Object eventObject) throws IOException {
  Event event=new Event(attributesSize);
  Object[] data=event.getData();
  com.fasterxml.jackson.core.JsonParser parser;
  int numberOfProvidedAttributes=0;
  try {
    parser=factory.createParser(eventObject.toString());
  }
 catch (  IOException e) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString());
  }
  int position;
  while (!parser.isClosed()) {
    JsonToken jsonToken=parser.nextToken();
    if (JsonToken.START_OBJECT.equals(jsonToken)) {
      parser.nextToken();
      if (DEFAULT_JSON_EVENT_IDENTIFIER.equalsIgnoreCase(parser.getText())) {
        parser.nextToken();
      }
 else {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject + ""String_Node_Str""+ ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
      }
    }
 else     if (JsonToken.FIELD_NAME.equals(jsonToken)) {
      String key=parser.getCurrentName();
      numberOfProvidedAttributes++;
      position=findDefaultMappingPosition(key);
      if (position == -1) {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + streamDefinition.getId() + ""String_Node_Str""+ key+ ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      }
      jsonToken=parser.nextToken();
      Attribute.Type type=streamAttributes.get(position).getType();
      if (JsonToken.VALUE_NULL.equals(jsonToken)) {
        data[position]=null;
      }
 else {
switch (type) {
case BOOL:
          if (JsonToken.VALUE_TRUE.equals(jsonToken) || JsonToken.VALUE_FALSE.equals(jsonToken)) {
            data[position]=parser.getValueAsBoolean();
            break;
          }
 else {
            throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
          }
case INT:
        if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
          data[position]=parser.getValueAsInt();
          break;
        }
 else {
          throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
        }
case DOUBLE:
      if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
        data[position]=parser.getValueAsDouble();
        break;
      }
 else {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
      }
case STRING:
    if (JsonToken.VALUE_STRING.equals(jsonToken)) {
      data[position]=parser.getValueAsString();
      break;
    }
 else {
      throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
    }
case FLOAT:
  if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken) || JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
    data[position]=convertAttribute(parser.getValueAsString(),Attribute.Type.FLOAT);
    break;
  }
 else {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
  }
case LONG:
if (JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
  data[position]=parser.getValueAsLong();
  break;
}
 else {
  throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
}
default :
return null;
}
}
}
}
if (failOnMissingAttribute && (numberOfProvidedAttributes != attributesSize)) {
throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str"");
}
return event;
}","private Event convertToSingleEventForDefaultMapping(Object eventObject) throws IOException {
  Event event=new Event(attributesSize);
  Object[] data=event.getData();
  JsonParser parser;
  int numberOfProvidedAttributes=0;
  try {
    parser=factory.createParser(eventObject.toString());
  }
 catch (  IOException e) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString());
  }
  int position;
  while (!parser.isClosed()) {
    JsonToken jsonToken=parser.nextToken();
    if (JsonToken.START_OBJECT.equals(jsonToken)) {
      parser.nextToken();
      if (DEFAULT_JSON_EVENT_IDENTIFIER.equalsIgnoreCase(parser.getText())) {
        parser.nextToken();
      }
 else {
        log.error(""String_Node_Str"" + eventObject + ""String_Node_Str""+ ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
        return null;
      }
    }
 else     if (JsonToken.FIELD_NAME.equals(jsonToken)) {
      String key=parser.getCurrentName();
      numberOfProvidedAttributes++;
      position=findDefaultMappingPosition(key);
      if (position == -1) {
        log.error(""String_Node_Str"" + streamDefinition.getId() + ""String_Node_Str""+ key+ ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
        return null;
      }
      jsonToken=parser.nextToken();
      Attribute.Type type=streamAttributes.get(position).getType();
      if (JsonToken.VALUE_NULL.equals(jsonToken)) {
        data[position]=null;
      }
 else {
switch (type) {
case BOOL:
          if (JsonToken.VALUE_TRUE.equals(jsonToken) || JsonToken.VALUE_FALSE.equals(jsonToken)) {
            data[position]=parser.getValueAsBoolean();
          }
 else {
            log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str""+ ""String_Node_Str"");
            return null;
          }
        break;
case INT:
      if (JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
        data[position]=parser.getValueAsInt();
      }
 else {
        log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str""+ ""String_Node_Str"");
        return null;
      }
    break;
case DOUBLE:
  if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
    data[position]=parser.getValueAsDouble();
  }
 else {
    log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str""+ ""String_Node_Str"");
    return null;
  }
break;
case STRING:
if (JsonToken.VALUE_STRING.equals(jsonToken)) {
data[position]=parser.getValueAsString();
}
 else {
log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str""+ ""String_Node_Str"");
return null;
}
break;
case FLOAT:
if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken) || JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
data[position]=attributeConverter.getPropertyValue(parser.getValueAsString(),Attribute.Type.FLOAT);
}
 else {
log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str""+ ""String_Node_Str"");
return null;
}
break;
case LONG:
if (JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
data[position]=parser.getValueAsLong();
}
 else {
log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str""+ ""String_Node_Str"");
return null;
}
break;
default :
return null;
}
}
}
}
if (failOnMissingAttribute && (numberOfProvidedAttributes != attributesSize)) {
log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str"");
return null;
}
return event;
}",0.8609544766882135
28887,"@Override public void mapAndSend(Event event,OptionHolder optionHolder,TemplateBuilder payloadTemplateBuilder,SinkListener sinkListener,DynamicOptions dynamicOptions) throws ConnectionUnavailableException {
  StringBuilder sb=null;
  if (payloadTemplateBuilder == null) {
    String jsonString=constructJsonForDefaultMapping(event);
    if (jsonString != null) {
      sb=new StringBuilder();
      sb.append(jsonString);
    }
  }
 else {
    sb=new StringBuilder();
    sb.append(constructJsonForCustomMapping(event,payloadTemplateBuilder));
  }
  if (sb != null) {
    if (!isJsonValidationEnabled) {
      sinkListener.publish(sb.toString(),dynamicOptions);
    }
 else     if (isJsonValidationEnabled && isValidJson(sb.toString())) {
      sinkListener.publish(sb.toString(),dynamicOptions);
    }
 else {
      log.error(""String_Node_Str"" + sb.toString());
    }
  }
}","@Override public void mapAndSend(Event event,OptionHolder optionHolder,TemplateBuilder payloadTemplateBuilder,SinkListener sinkListener,DynamicOptions dynamicOptions) throws ConnectionUnavailableException {
  StringBuilder sb=null;
  if (payloadTemplateBuilder == null) {
    String jsonString=constructJsonForDefaultMapping(event);
    if (jsonString != null) {
      sb=new StringBuilder();
      sb.append(jsonString);
    }
  }
 else {
    sb=new StringBuilder();
    sb.append(constructJsonForCustomMapping(event,payloadTemplateBuilder));
  }
  if (sb != null) {
    if (!isJsonValidationEnabled) {
      sinkListener.publish(sb.toString(),dynamicOptions);
    }
 else     if (isValidJson(sb.toString())) {
      sinkListener.publish(sb.toString(),dynamicOptions);
    }
 else {
      log.error(""String_Node_Str"" + sb.toString());
    }
  }
}",0.9843114468332363
28888,"@Override public void init(StreamDefinition streamDefinition,OptionHolder optionHolder,List<AttributeMapping> attributeMappingList,ConfigReader configReader){
  this.streamDefinition=streamDefinition;
  this.streamAttributes=this.streamDefinition.getAttributeList();
  attributesSize=this.streamDefinition.getAttributeList().size();
  this.mappingPositions=new MappingPositionData[attributesSize];
  failOnMissingAttribute=Boolean.parseBoolean(optionHolder.validateAndGetStaticValue(FAIL_ON_MISSING_ATTRIBUTE_IDENTIFIER,""String_Node_Str""));
  factory=new JsonFactory();
  if (attributeMappingList != null && attributeMappingList.size() > 0) {
    isCustomMappingEnabled=true;
    String ENCLOSING_ELEMENT_IDENTIFIER=""String_Node_Str"";
    enclosingElement=optionHolder.validateAndGetStaticValue(ENCLOSING_ELEMENT_IDENTIFIER,DEFAULT_ENCLOSING_ELEMENT);
    for (int i=0; i < attributeMappingList.size(); i++) {
      AttributeMapping attributeMapping=attributeMappingList.get(i);
      String attributeName=attributeMapping.getRename();
      int position;
      if (attributeName != null) {
        position=this.streamDefinition.getAttributePosition(attributeName);
      }
 else {
        position=i;
      }
      this.mappingPositions[i]=new MappingPositionData(position,attributeMapping.getMapping());
    }
  }
 else {
    for (int i=0; i < attributesSize; i++) {
      this.mappingPositions[i]=new MappingPositionData(i,DEFAULT_JSON_MAPPING_PREFIX + this.streamDefinition.getAttributeList().get(i).getName());
    }
  }
}","@Override public void init(StreamDefinition streamDefinition,OptionHolder optionHolder,List<AttributeMapping> attributeMappingList,ConfigReader configReader){
  this.streamDefinition=streamDefinition;
  this.streamAttributes=this.streamDefinition.getAttributeList();
  attributesSize=this.streamDefinition.getAttributeList().size();
  this.mappingPositions=new MappingPositionData[attributesSize];
  failOnMissingAttribute=Boolean.parseBoolean(optionHolder.validateAndGetStaticValue(FAIL_ON_MISSING_ATTRIBUTE_IDENTIFIER,""String_Node_Str""));
  factory=new JsonFactory();
  if (attributeMappingList != null && attributeMappingList.size() > 0) {
    isCustomMappingEnabled=true;
    enclosingElement=optionHolder.validateAndGetStaticValue(ENCLOSING_ELEMENT_IDENTIFIER,DEFAULT_ENCLOSING_ELEMENT);
    for (int i=0; i < attributeMappingList.size(); i++) {
      AttributeMapping attributeMapping=attributeMappingList.get(i);
      String attributeName=attributeMapping.getRename();
      int position;
      if (attributeName != null) {
        position=this.streamDefinition.getAttributePosition(attributeName);
      }
 else {
        position=i;
      }
      this.mappingPositions[i]=new MappingPositionData(position,attributeMapping.getMapping());
    }
  }
 else {
    for (int i=0; i < attributesSize; i++) {
      this.mappingPositions[i]=new MappingPositionData(i,DEFAULT_JSON_MAPPING_PREFIX + this.streamDefinition.getAttributeList().get(i).getName());
    }
  }
}",0.9803136469803136
28889,"/** 
 * Convert the given JSON string to   {@link Event}
 * @param eventObject JSON string
 * @return the constructed Event object
 */
private Object convertToEvent(Object eventObject){
  if (eventObject == null) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"");
  }
  if (!(eventObject instanceof String)) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.getClass().getCanonicalName());
  }
  if (!isJsonValid(eventObject.toString())) {
    log.error(""String_Node_Str"" + eventObject.toString());
    return null;
  }
  Object jsonObj;
  ReadContext readContext=JsonPath.parse(eventObject.toString());
  int index;
  if (isCustomMappingEnabled) {
    jsonObj=readContext.read(enclosingElement);
    if (jsonObj == null) {
      log.error(""String_Node_Str"" + enclosingElement + ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      return null;
    }
    if (jsonObj instanceof JSONArray) {
      JSONArray jsonArray=(JSONArray)jsonObj;
      Event[] newEventArray=new Event[jsonArray.size()];
      List<Event> eventList=new ArrayList<Event>();
      index=0;
      for (      Object eventObj : jsonArray) {
        try {
          Event event=processCustomEvent(JsonPath.parse(eventObj));
          if (failOnMissingAttribute && checkForUnknownAttributes(event)) {
            log.error(""String_Node_Str"" + event.toString() + ""String_Node_Str"");
          }
 else {
            eventList.add(event);
          }
        }
 catch (        ExecutionPlanRuntimeException e) {
          log.error(e.getMessage());
        }
      }
      Event[] eventArray=new Event[eventList.size()];
      eventArray=eventList.toArray(eventArray);
      return eventArray;
    }
 else {
      try {
        Event event=processCustomEvent(JsonPath.parse(jsonObj));
        if (failOnMissingAttribute && checkForUnknownAttributes(event)) {
          log.error(""String_Node_Str"" + event.toString() + ""String_Node_Str"");
          return null;
        }
        return event;
      }
 catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
 else {
    jsonObj=readContext.read(DEFAULT_ENCLOSING_ELEMENT);
    if (jsonObj instanceof JSONArray) {
      return convertToEventArrayForDefaultMapping(eventObject);
    }
 else {
      try {
        Event event=convertToSingleEventForDefaultMapping(eventObject);
        if (event == null) {
          log.error(""String_Node_Str"" + eventObject + ""String_Node_Str"");
          return null;
        }
        if (failOnMissingAttribute && checkForUnknownAttributes(event)) {
          log.error(""String_Node_Str"" + event.toString() + ""String_Node_Str"");
          return null;
        }
        return event;
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str"");
        return null;
      }
catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
}","/** 
 * Convert the given JSON string to   {@link Event}.
 * @param eventObject JSON string
 * @return the constructed Event object
 */
private Object convertToEvent(Object eventObject){
  if (eventObject == null) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"");
  }
  if (!(eventObject instanceof String)) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.getClass().getCanonicalName());
  }
  if (!isJsonValid(eventObject.toString())) {
    log.error(""String_Node_Str"" + eventObject.toString());
    return null;
  }
  Object jsonObj;
  ReadContext readContext=JsonPath.parse(eventObject.toString());
  int index;
  if (isCustomMappingEnabled) {
    jsonObj=readContext.read(enclosingElement);
    if (jsonObj == null) {
      log.error(""String_Node_Str"" + enclosingElement + ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      return null;
    }
    if (jsonObj instanceof JSONArray) {
      JSONArray jsonArray=(JSONArray)jsonObj;
      List<Event> eventList=new ArrayList<Event>();
      for (      Object eventObj : jsonArray) {
        try {
          Event event=processCustomEvent(JsonPath.parse(eventObj));
          if (failOnMissingAttribute && checkForUnknownAttributes(event)) {
            log.error(""String_Node_Str"" + event.toString() + ""String_Node_Str"");
          }
 else {
            eventList.add(event);
          }
        }
 catch (        ExecutionPlanRuntimeException e) {
          log.error(e.getMessage());
        }
      }
      Event[] eventArray=new Event[eventList.size()];
      eventArray=eventList.toArray(eventArray);
      return eventArray;
    }
 else {
      try {
        Event event=processCustomEvent(JsonPath.parse(jsonObj));
        if (failOnMissingAttribute && checkForUnknownAttributes(event)) {
          log.error(""String_Node_Str"" + event.toString() + ""String_Node_Str"");
          return null;
        }
        return event;
      }
 catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
 else {
    jsonObj=readContext.read(DEFAULT_ENCLOSING_ELEMENT);
    if (jsonObj instanceof JSONArray) {
      return convertToEventArrayForDefaultMapping(eventObject);
    }
 else {
      try {
        Event event=convertToSingleEventForDefaultMapping(eventObject);
        if (event == null) {
          log.error(""String_Node_Str"" + eventObject + ""String_Node_Str"");
          return null;
        }
        if (failOnMissingAttribute && checkForUnknownAttributes(event)) {
          log.error(""String_Node_Str"" + event.toString() + ""String_Node_Str"");
          return null;
        }
        return event;
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str"");
        return null;
      }
catch (      ExecutionPlanRuntimeException e) {
        log.error(e.getMessage());
        return null;
      }
    }
  }
}",0.9878150559172092
28890,"private Event[] convertToEventArrayForDefaultMapping(Object eventObject){
  Gson gson=new Gson();
  JsonObject[] eventObjects=gson.fromJson(eventObject.toString(),JsonObject[].class);
  Event[] events=new Event[eventObjects.length];
  int index=0;
  JsonObject eventObj=null;
  for (  JsonObject jsonEvent : eventObjects) {
    if (jsonEvent.has(DEFAULT_JSON_EVENT_IDENTIFIER)) {
      eventObj=jsonEvent.get(DEFAULT_JSON_EVENT_IDENTIFIER).getAsJsonObject();
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      continue;
    }
    Event event=new Event(streamAttributes.size());
    Object[] data=event.getData();
    if (failOnMissingAttribute && eventObj.size() < streamAttributes.size()) {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str"");
      continue;
    }
    int position=0;
    for (    Attribute attribute : streamAttributes) {
      String attributeName=attribute.getName();
      Attribute.Type type=attribute.getType();
      Object attributeValue=eventObj.get(attributeName);
      if (attributeValue == null) {
        data[position++]=null;
      }
 else {
        data[position++]=attributeConverter.getPropertyValue(eventObj.get(attributeName).toString(),type);
      }
    }
    events[index++]=event;
  }
  return Arrays.copyOfRange(events,0,index);
}","private Event[] convertToEventArrayForDefaultMapping(Object eventObject){
  Gson gson=new Gson();
  JsonObject[] eventObjects=gson.fromJson(eventObject.toString(),JsonObject[].class);
  Event[] events=new Event[eventObjects.length];
  int index=0;
  JsonObject eventObj=null;
  for (  JsonObject jsonEvent : eventObjects) {
    if (jsonEvent.has(DEFAULT_JSON_EVENT_IDENTIFIER)) {
      eventObj=jsonEvent.get(DEFAULT_JSON_EVENT_IDENTIFIER).getAsJsonObject();
    }
 else {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str""+ ""String_Node_Str"");
      continue;
    }
    Event event=new Event(streamAttributes.size());
    Object[] data=event.getData();
    if (failOnMissingAttribute && eventObj.size() < streamAttributes.size()) {
      log.error(""String_Node_Str"" + eventObj.toString() + ""String_Node_Str""+ ""String_Node_Str"");
      continue;
    }
    int position=0;
    for (    Attribute attribute : streamAttributes) {
      String attributeName=attribute.getName();
      Attribute.Type type=attribute.getType();
      Object attributeValue=eventObj.get(attributeName);
      if (attributeValue == null) {
        data[position++]=null;
      }
 else {
        data[position++]=attributeConverter.getPropertyValue(eventObj.get(attributeName).toString(),type);
      }
    }
    events[index++]=event;
  }
  return Arrays.copyOfRange(events,0,index);
}",0.986090775988287
28891,"private Event convertToSingleEventForDefaultMapping(Object eventObject) throws IOException {
  Event event=new Event(this.streamDefinition.getAttributeList().size());
  Object[] data=event.getData();
  com.fasterxml.jackson.core.JsonParser parser;
  try {
    parser=factory.createParser(eventObject.toString());
  }
 catch (  IOException e) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString());
  }
  int position;
  while (!parser.isClosed()) {
    JsonToken jsonToken=parser.nextToken();
    if (JsonToken.START_OBJECT.equals(jsonToken)) {
      parser.nextToken();
      if (DEFAULT_JSON_EVENT_IDENTIFIER.equalsIgnoreCase(parser.getText())) {
        parser.nextToken();
      }
 else {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
      }
    }
 else     if (JsonToken.FIELD_NAME.equals(jsonToken)) {
      String key=parser.getCurrentName();
      position=findDefaultMappingPosition(key);
      if (position == -1) {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + streamDefinition.getId() + ""String_Node_Str""+ key+ ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      }
      jsonToken=parser.nextToken();
      Attribute.Type type=streamAttributes.get(position).getType();
      if (JsonToken.VALUE_NULL.equals(jsonToken)) {
        data[position]=null;
      }
 else {
switch (type) {
case BOOL:
          if (JsonToken.VALUE_TRUE.equals(jsonToken) || JsonToken.VALUE_FALSE.equals(jsonToken)) {
            data[position]=parser.getValueAsBoolean();
            break;
          }
 else {
            throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
          }
case INT:
        if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
          data[position]=parser.getValueAsInt();
          break;
        }
 else {
          throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
        }
case DOUBLE:
      if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
        data[position]=parser.getValueAsDouble();
        break;
      }
 else {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
      }
case STRING:
    if (JsonToken.VALUE_STRING.equals(jsonToken)) {
      data[position]=parser.getValueAsString();
      break;
    }
 else {
      throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
    }
case FLOAT:
  if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken) || JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
    data[position]=convertAttribute(parser.getValueAsString(),Attribute.Type.FLOAT);
    break;
  }
 else {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
  }
case LONG:
if (JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
  data[position]=parser.getValueAsLong();
  break;
}
 else {
  throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
}
default :
return null;
}
}
}
}
return event;
}","private Event convertToSingleEventForDefaultMapping(Object eventObject) throws IOException {
  Event event=new Event(attributesSize);
  Object[] data=event.getData();
  com.fasterxml.jackson.core.JsonParser parser;
  try {
    parser=factory.createParser(eventObject.toString());
  }
 catch (  IOException e) {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString());
  }
  int position;
  while (!parser.isClosed()) {
    JsonToken jsonToken=parser.nextToken();
    if (JsonToken.START_OBJECT.equals(jsonToken)) {
      parser.nextToken();
      if (DEFAULT_JSON_EVENT_IDENTIFIER.equalsIgnoreCase(parser.getText())) {
        parser.nextToken();
      }
 else {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject + ""String_Node_Str""+ ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
      }
    }
 else     if (JsonToken.FIELD_NAME.equals(jsonToken)) {
      String key=parser.getCurrentName();
      position=findDefaultMappingPosition(key);
      if (position == -1) {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + streamDefinition.getId() + ""String_Node_Str""+ key+ ""String_Node_Str""+ eventObject.toString()+ ""String_Node_Str"");
      }
      jsonToken=parser.nextToken();
      Attribute.Type type=streamAttributes.get(position).getType();
      if (JsonToken.VALUE_NULL.equals(jsonToken)) {
        data[position]=null;
      }
 else {
switch (type) {
case BOOL:
          if (JsonToken.VALUE_TRUE.equals(jsonToken) || JsonToken.VALUE_FALSE.equals(jsonToken)) {
            data[position]=parser.getValueAsBoolean();
            break;
          }
 else {
            throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
          }
case INT:
        if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
          data[position]=parser.getValueAsInt();
          break;
        }
 else {
          throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
        }
case DOUBLE:
      if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken)) {
        data[position]=parser.getValueAsDouble();
        break;
      }
 else {
        throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
      }
case STRING:
    if (JsonToken.VALUE_STRING.equals(jsonToken)) {
      data[position]=parser.getValueAsString();
      break;
    }
 else {
      throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
    }
case FLOAT:
  if (JsonToken.VALUE_NUMBER_FLOAT.equals(jsonToken) || JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
    data[position]=convertAttribute(parser.getValueAsString(),Attribute.Type.FLOAT);
    break;
  }
 else {
    throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
  }
case LONG:
if (JsonToken.VALUE_NUMBER_INT.equals(jsonToken)) {
  data[position]=parser.getValueAsLong();
  break;
}
 else {
  throw new ExecutionPlanRuntimeException(""String_Node_Str"" + eventObject.toString() + ""String_Node_Str""+ parser.getText()+ ""String_Node_Str"");
}
default :
return null;
}
}
}
}
return event;
}",0.9915673160802558
28892,"public Expression[] getParameters(){
  return Arrays.copyOfRange(parameters,0,parameters.length);
}","public Expression[] getParameters(){
  return parameters;
}",0.7468354430379747
28893,"public Expression[] getParameters(){
  return Arrays.copyOfRange(parameters,0,parameters.length);
}","public Expression[] getParameters(){
  return parameters;
}",0.7468354430379747
28894,"/** 
 * Receives an event as an XML string from   {@link Source}, converts it to a   {@link ComplexEventChunk}and send to the   {@link OutputCallback}.
 * @param eventObject  the input event, given as an XML string
 * @param inputHandler input handler
 */
@Override protected void mapAndProcess(Object eventObject,InputHandler inputHandler) throws InterruptedException {
  Event[] result;
  try {
    result=convertToEvents(eventObject);
    if (result.length > 0) {
      inputHandler.send(result);
    }
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
}","/** 
 * Receives an event as an XML string from   {@link Source}, converts it to a   {@link ComplexEventChunk}and send to the   {@link OutputCallback}.
 * @param eventObject  the input event, given as an XML string
 * @param inputEventHandler input handler
 */
@Override protected void mapAndProcess(Object eventObject,InputEventHandler inputEventHandler) throws InterruptedException {
  Event[] result;
  try {
    result=convertToEvents(eventObject);
    if (result.length > 0) {
      inputEventHandler.sendEvents(result);
    }
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
}",0.9779286926994908
28895,"public static void main(String[] args) throws InterruptedException {
  SiddhiManager siddhiManager=new SiddhiManager();
  siddhiManager.setExtension(""String_Node_Str"",CustomFunctionExtension.class);
  String executionPlan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(executionPlan);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  executionPlanRuntime.start();
  inputHandler.send(new Object[]{""String_Node_Str"",700l,100l});
  inputHandler.send(new Object[]{""String_Node_Str"",605l,200l});
  inputHandler.send(new Object[]{""String_Node_Str"",60l,200l});
  Thread.sleep(500);
  executionPlanRuntime.shutdown();
  siddhiManager.shutdown();
}","public static void main(String[] args) throws InterruptedException {
  SiddhiManager siddhiManager=new SiddhiManager();
  siddhiManager.setExtension(""String_Node_Str"",CustomFunctionExtension.class);
  String executionPlan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(executionPlan);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  executionPlanRuntime.start();
  inputHandler.send(new Object[]{""String_Node_Str"",700L,100L});
  inputHandler.send(new Object[]{""String_Node_Str"",600L,200L});
  inputHandler.send(new Object[]{""String_Node_Str"",60L,200L});
  Thread.sleep(500);
  executionPlanRuntime.shutdown();
  siddhiManager.shutdown();
}",0.9936247723132968
28896,"public static void main(String[] args) throws InterruptedException {
  SiddhiManager siddhiManager=new SiddhiManager();
  String executionPlan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(executionPlan);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  executionPlanRuntime.start();
  inputHandler.send(new Object[]{""String_Node_Str"",50f,60f,60l,6});
  inputHandler.send(new Object[]{""String_Node_Str"",70f,null,40l,10});
  inputHandler.send(new Object[]{""String_Node_Str"",null,44f,200l,56});
  Thread.sleep(100);
  executionPlanRuntime.shutdown();
  siddhiManager.shutdown();
}","public static void main(String[] args) throws InterruptedException {
  SiddhiManager siddhiManager=new SiddhiManager();
  String executionPlan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(executionPlan);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  executionPlanRuntime.start();
  inputHandler.send(new Object[]{""String_Node_Str"",50f,60f,60L,6});
  inputHandler.send(new Object[]{""String_Node_Str"",70f,null,40L,10});
  inputHandler.send(new Object[]{""String_Node_Str"",null,44f,200L,56});
  Thread.sleep(100);
  executionPlanRuntime.shutdown();
  siddhiManager.shutdown();
}",0.9971590909090908
28897,"public static void main(String[] args) throws InterruptedException {
  SiddhiManager siddhiManager=new SiddhiManager();
  String executionPlan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(executionPlan);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  executionPlanRuntime.start();
  inputHandler.send(new Object[]{""String_Node_Str"",700f,100l});
  inputHandler.send(new Object[]{""String_Node_Str"",60.5f,200l});
  inputHandler.send(new Object[]{""String_Node_Str"",50f,30l});
  inputHandler.send(new Object[]{""String_Node_Str"",76.6f,400l});
  inputHandler.send(new Object[]{""String_Node_Str"",45.6f,50l});
  Thread.sleep(500);
  executionPlanRuntime.shutdown();
  siddhiManager.shutdown();
}","public static void main(String[] args) throws InterruptedException {
  SiddhiManager siddhiManager=new SiddhiManager();
  String executionPlan=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(executionPlan);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  executionPlanRuntime.start();
  inputHandler.send(new Object[]{""String_Node_Str"",700f,100L});
  inputHandler.send(new Object[]{""String_Node_Str"",60.5f,200L});
  inputHandler.send(new Object[]{""String_Node_Str"",50f,30L});
  inputHandler.send(new Object[]{""String_Node_Str"",76.6f,400L});
  inputHandler.send(new Object[]{""String_Node_Str"",45.6f,50L});
  Thread.sleep(500);
  executionPlanRuntime.shutdown();
  siddhiManager.shutdown();
}",0.995644599303136
28898,"/** 
 * This method uses for validate @Extension -> @ReturnAttribute elements.
 * @param returnAttributes returnA attributes array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!camelCasePattern.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}","/** 
 * This method uses for validate @Extension -> @ReturnAttribute elements.
 * @param returnAttributes returnA attributes array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!CAMEL_CASE_PATTERN.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}",0.9889624724061812
28899,"/** 
 * This method uses for validate @Extension -> @Parameter element.
 * @param parameters parameter array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","/** 
 * This method uses for validate @Extension -> @Parameter element.
 * @param parameters parameter array which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.984
28900,"/** 
 * Basic @Extension annotation elements validation.
 * @param name        name of the @Extension which needs to be validate.
 * @param description description of the @Extension  which needs to be validate.
 * @param namespace   namespace of the @Extension  which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void basicParameterValidation(String name,String description,String namespace) throws AnnotationValidationException {
  if (name.isEmpty()) {
    throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
  }
  if (description.isEmpty()) {
    throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
  }
  if (namespace.isEmpty()) {
    if (!corePackagePattern.matcher(extensionClassFullName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
  }
}","/** 
 * Basic @Extension annotation elements validation.
 * @param name        name of the @Extension which needs to be validate.
 * @param description description of the @Extension  which needs to be validate.
 * @param namespace   namespace of the @Extension  which needs to be validate.
 * @throws AnnotationValidationException whenever if the validate rule violate, throws the annotation validateexception with proper message.
 */
public void basicParameterValidation(String name,String description,String namespace) throws AnnotationValidationException {
  if (name.isEmpty()) {
    throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
  }
  if (description.isEmpty()) {
    throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
  }
  if (namespace.isEmpty()) {
    if (!CORE_PACKAGE_PATTERN.matcher(extensionClassFullName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
  }
}",0.9848619768477292
28901,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28902,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28903,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28904,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28905,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28906,"@Override public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!camelCasePattern.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}","@Override public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!CAMEL_CASE_PATTERN.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}",0.9859154929577464
28907,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28908,"@Override public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!camelCasePattern.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}","@Override public void returnAttributesValidation(ReturnAttribute[] returnAttributes) throws AnnotationValidationException {
  for (  ReturnAttribute returnAttribute : returnAttributes) {
    String returnAttributeName=returnAttribute.name();
    if (returnAttributeName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!CAMEL_CASE_PATTERN.matcher(returnAttributeName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
    if (returnAttribute.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",returnAttributeName,extensionClassFullName));
    }
  }
}",0.9859154929577464
28909,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28910,"@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!parameterNamePattern.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}","@Override public void parameterValidation(Parameter[] parameters) throws AnnotationValidationException {
  for (  Parameter parameter : parameters) {
    String parameterName=parameter.name();
    if (parameterName.isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",extensionClassFullName));
    }
 else     if (!PARAMETER_NAME_PATTERN.matcher(parameterName).find()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.description().isEmpty()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.type().length == 0) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
    if (parameter.dynamic()) {
      throw new AnnotationValidationException(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",parameterName,extensionClassFullName));
    }
  }
}",0.9827586206896552
28911,"@Override public void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 2) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  inputType=attributeExpressionExecutors[0].getReturnType();
  if (inputType == Attribute.Type.OBJECT) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (attributeExpressionExecutors[1].getReturnType() != Attribute.Type.STRING) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors[0].getReturnType());
  }
  if (!(attributeExpressionExecutors[1] instanceof ConstantExpressionExecutor)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String type=(String)attributeExpressionExecutors[1].execute(null);
  if (Attribute.Type.STRING.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.STRING;
  }
 else   if (Attribute.Type.BOOL.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.BOOL;
  }
 else   if (Attribute.Type.DOUBLE.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.DOUBLE;
  }
 else   if (Attribute.Type.FLOAT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.FLOAT;
  }
 else   if (Attribute.Type.INT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.INT;
  }
 else   if (Attribute.Type.LONG.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.LONG;
  }
 else {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + type + ""String_Node_Str"");
  }
}","@Override public void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 2) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  inputType=attributeExpressionExecutors[0].getReturnType();
  if (inputType == Attribute.Type.OBJECT) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (attributeExpressionExecutors[1].getReturnType() != Attribute.Type.STRING) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (!(attributeExpressionExecutors[1] instanceof ConstantExpressionExecutor)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String type=(String)attributeExpressionExecutors[1].execute(null);
  if (Attribute.Type.STRING.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.STRING;
  }
 else   if (Attribute.Type.BOOL.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.BOOL;
  }
 else   if (Attribute.Type.DOUBLE.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.DOUBLE;
  }
 else   if (Attribute.Type.FLOAT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.FLOAT;
  }
 else   if (Attribute.Type.INT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.INT;
  }
 else   if (Attribute.Type.LONG.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.LONG;
  }
 else {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + type + ""String_Node_Str"");
  }
}",0.9947528307097488
28912,"public AndConditionExpressionExecutor(ExpressionExecutor leftConditionExecutor,ExpressionExecutor rightConditionExecutor){
  if (leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL) && rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.leftConditionExecutor=leftConditionExecutor;
    this.rightConditionExecutor=rightConditionExecutor;
  }
 else {
    if (!leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString());
    }
 else     if (!rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + rightConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ rightConditionExecutor.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString()+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
  }
}","public AndConditionExpressionExecutor(ExpressionExecutor leftConditionExecutor,ExpressionExecutor rightConditionExecutor){
  if (leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL) && rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.leftConditionExecutor=leftConditionExecutor;
    this.rightConditionExecutor=rightConditionExecutor;
  }
 else {
    if (!leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString());
    }
 else     if (!rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + rightConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ rightConditionExecutor.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
  }
}",0.9926499032882012
28913,"public static IncrementalExecutor week(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor week=new IncrementalExecutor(TimePeriod.Duration.WEEKS,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return week;
}","public static IncrementalExecutor week(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor week=new IncrementalExecutor(TimePeriod.Duration.WEEKS,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return week;
}",0.9843363561417972
28914,"public static IncrementalExecutor year(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor year=new IncrementalExecutor(TimePeriod.Duration.YEARS,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return year;
}","public static IncrementalExecutor year(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor year=new IncrementalExecutor(TimePeriod.Duration.YEARS,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return year;
}",0.9843363561417972
28915,"private IncrementalExecutor(TimePeriod.Duration duration,IncrementalExecutor child,List<AttributeFunction> functionAttributes,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  this.duration=duration;
  this.child=child;
  this.compositeAggregators=createIncrementalAggregators(functionAttributes);
  this.basicExecutorDetails=basicFunctionExecutors(metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName);
  this.groupByExecutor=generateGroupByExecutor(groupByVariable,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,defaultStreamEventIndex,queryName);
  storeAggregatorFunctions=new ConcurrentHashMap<>();
  this.executionPlanContext=executionPlanContext;
}","private IncrementalExecutor(TimePeriod.Duration duration,IncrementalExecutor child,List<AttributeFunction> functionAttributes,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  this.duration=duration;
  this.child=child;
  this.compositeAggregators=createIncrementalAggregators(functionAttributes);
  this.basicExecutorDetails=basicFunctionExecutors(metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName);
  this.groupByExecutor=generateGroupByExecutor(groupByVariable,metaEvent,currentState,tableMap,executorList,executionPlanContext,defaultStreamEventIndex,queryName);
  storeAggregatorFunctions=new ConcurrentHashMap<>();
  this.executionPlanContext=executionPlanContext;
}",0.9861407249466952
28916,"public static IncrementalExecutor second(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor second=new IncrementalExecutor(TimePeriod.Duration.SECONDS,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return second;
}","public static IncrementalExecutor second(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor second=new IncrementalExecutor(TimePeriod.Duration.SECONDS,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return second;
}",0.9845402766476812
28917,"public static IncrementalExecutor minute(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor minute=new IncrementalExecutor(TimePeriod.Duration.MINUTES,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return minute;
}","public static IncrementalExecutor minute(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor minute=new IncrementalExecutor(TimePeriod.Duration.MINUTES,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return minute;
}",0.9845402766476812
28918,"public static IncrementalExecutor hour(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor hour=new IncrementalExecutor(TimePeriod.Duration.HOURS,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return hour;
}","public static IncrementalExecutor hour(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor hour=new IncrementalExecutor(TimePeriod.Duration.HOURS,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return hour;
}",0.9843363561417972
28919,"public static IncrementalExecutor month(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor month=new IncrementalExecutor(TimePeriod.Duration.MONTHS,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return month;
}","public static IncrementalExecutor month(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor month=new IncrementalExecutor(TimePeriod.Duration.MONTHS,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return month;
}",0.9844389844389844
28920,"/** 
 * @param metaEvent
 * @param currentState
 * @param eventTableMap
 * @param executorList
 * @param executionPlanContext
 * @param groupBy
 * @param defaultStreamEventIndex
 * @param queryName
 * @return
 */
private List<ExpressionExecutorDetails> basicFunctionExecutors(MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName){
  Set<BaseExpressionDetails> baseAggregators=new HashSet<>();
  for (  CompositeAggregator compositeAggregator : this.compositeAggregators) {
    Expression[] bases=compositeAggregator.getBaseAggregators();
    for (    Expression expression : bases) {
      BaseExpressionDetails baseExpressionDetails=new BaseExpressionDetails(expression,compositeAggregator.getAttributeName());
      baseAggregators.add(baseExpressionDetails);
    }
  }
  List<ExpressionExecutorDetails> baseFunctionExecutors=new ArrayList<>();
  for (  BaseExpressionDetails baseAggregator : baseAggregators) {
    ExpressionExecutor expressionExecutor=ExpressionParser.parseExpression(baseAggregator.getBaseExpression(),metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName);
    String executorUniqueKey=((AttributeFunction)baseAggregator.getBaseExpression()).getName() + baseAggregator.getAttribute();
    ExpressionExecutorDetails executorDetails=new ExpressionExecutorDetails(expressionExecutor,executorUniqueKey);
    baseFunctionExecutors.add(executorDetails);
  }
  return baseFunctionExecutors;
}","/** 
 * @param metaEvent
 * @param currentState
 * @param tableMap
 * @param executorList
 * @param executionPlanContext
 * @param groupBy
 * @param defaultStreamEventIndex
 * @param queryName
 * @return
 */
private List<ExpressionExecutorDetails> basicFunctionExecutors(MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName){
  Set<BaseExpressionDetails> baseAggregators=new HashSet<>();
  for (  CompositeAggregator compositeAggregator : this.compositeAggregators) {
    Expression[] bases=compositeAggregator.getBaseAggregators();
    for (    Expression expression : bases) {
      BaseExpressionDetails baseExpressionDetails=new BaseExpressionDetails(expression,compositeAggregator.getAttributeName());
      baseAggregators.add(baseExpressionDetails);
    }
  }
  List<ExpressionExecutorDetails> baseFunctionExecutors=new ArrayList<>();
  for (  BaseExpressionDetails baseAggregator : baseAggregators) {
    ExpressionExecutor expressionExecutor=ExpressionParser.parseExpression(baseAggregator.getBaseExpression(),metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName);
    String executorUniqueKey=((AttributeFunction)baseAggregator.getBaseExpression()).getName() + baseAggregator.getAttribute();
    ExpressionExecutorDetails executorDetails=new ExpressionExecutorDetails(expressionExecutor,executorUniqueKey);
    baseFunctionExecutors.add(executorDetails);
  }
  return baseFunctionExecutors;
}",0.9920440636474908
28921,"public static IncrementalExecutor day(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor day=new IncrementalExecutor(TimePeriod.Duration.DAYS,child,functionAttributes,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return day;
}","public static IncrementalExecutor day(List<AttributeFunction> functionAttributes,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
  IncrementalExecutor day=new IncrementalExecutor(TimePeriod.Duration.DAYS,child,functionAttributes,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
  return day;
}",0.9842323651452282
28922,"/** 
 * @param groupByClause
 * @param metaEvent
 * @param currentState
 * @param eventTableMap
 * @param executorList
 * @param executionPlanContext
 * @param defaultStreamEventIndex
 * @param queryName
 * @return
 */
private ExpressionExecutor generateGroupByExecutor(Variable groupByClause,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,int defaultStreamEventIndex,String queryName){
  ExpressionExecutor variableExpressionExecutor=ExpressionParser.parseExpression(groupByClause,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,true,defaultStreamEventIndex,queryName);
  return variableExpressionExecutor;
}","/** 
 * @param groupByClause
 * @param metaEvent
 * @param currentState
 * @param tableMap
 * @param executorList
 * @param executionPlanContext
 * @param defaultStreamEventIndex
 * @param queryName
 * @return
 */
private ExpressionExecutor generateGroupByExecutor(Variable groupByClause,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,int defaultStreamEventIndex,String queryName){
  ExpressionExecutor variableExpressionExecutor=ExpressionParser.parseExpression(groupByClause,metaEvent,currentState,tableMap,executorList,executionPlanContext,true,defaultStreamEventIndex,queryName);
  return variableExpressionExecutor;
}",0.98252688172043
28923,"private static IncrementalExecutor build(List<AttributeFunction> functionsAttributes,TimePeriod.Duration duration,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
switch (duration) {
case SECONDS:
    return IncrementalExecutor.second(functionsAttributes,child,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
case MINUTES:
  return IncrementalExecutor.minute(functionsAttributes,child,metaEvent,currentState,eventTableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
default :
return null;
}
}","private static IncrementalExecutor build(List<AttributeFunction> functionsAttributes,TimePeriod.Duration duration,IncrementalExecutor child,MetaComplexEvent metaEvent,int currentState,Map<String,Table> tableMap,List<VariableExpressionExecutor> executorList,ExecutionPlanContext executionPlanContext,boolean groupBy,int defaultStreamEventIndex,String queryName,Variable groupByVariable){
switch (duration) {
case SECONDS:
    return IncrementalExecutor.second(functionsAttributes,child,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
case MINUTES:
  return IncrementalExecutor.minute(functionsAttributes,child,metaEvent,currentState,tableMap,executorList,executionPlanContext,groupBy,defaultStreamEventIndex,queryName,groupByVariable);
default :
return null;
}
}",0.9846878680800942
28924,"public static AggregationRuntime parse(AggregationDefinition definition,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,Map<String,List<InputTransport>> eventSourceMap,Map<String,List<OutputTransport>> eventSinkMap,LockSynchronizer lockSynchronizer){
  if (definition == null) {
    throw new ExecutionPlanCreationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (definition.getTimePeriod() == null) {
    throw new ExecutionPlanCreationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  List<VariableExpressionExecutor> executors=new ArrayList<VariableExpressionExecutor>();
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  AggregationRuntime aggregationRuntime=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",definition.getAnnotations());
    String queryName=null;
    if (nameElement != null) {
      queryName=nameElement.getValue();
    }
 else {
      queryName=""String_Node_Str"" + UUID.randomUUID().toString();
    }
    if (executionPlanContext.isStatsEnabled() && executionPlanContext.getStatisticsManager() != null) {
      if (nameElement != null) {
        String metricName=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getMatricPrefix() + SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_EXECUTION_PLANS+ SiddhiConstants.METRIC_DELIMITER+ executionPlanContext.getName()+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_SIDDHI+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_QUERIES+ SiddhiConstants.METRIC_DELIMITER+ queryName;
        latencyTracker=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getFactory().createLatencyTracker(metricName,executionPlanContext.getStatisticsManager());
      }
    }
    InputStream inputStream=definition.getInputStream();
    StreamRuntime streamRuntime=InputStreamParser.parse(inputStream,executionPlanContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,eventTableMap,eventWindowMap,executors,latencyTracker,false,queryName);
    MetaComplexEvent metaComplexEvent=streamRuntime.getMetaComplexEvent();
    List<OutputAttribute> outputAttributes=definition.getSelector().getSelectionList();
    List<AttributeFunction> functionsAttributes=new ArrayList<>();
    for (int i=1; i < outputAttributes.size(); i++) {
      OutputAttribute tmp=outputAttributes.get(i);
      functionsAttributes.add((AttributeFunction)tmp.getExpression());
    }
    List<TimePeriod.Duration> incrementalDurations=getSortedPeriods(definition.getTimePeriod());
    Variable groupByVar=getGroupByAttribute(definition.getSelector());
    IncrementalExecutor child=build(functionsAttributes,incrementalDurations.get(incrementalDurations.size() - 1),null,metaComplexEvent,0,eventTableMap,executors,executionPlanContext,true,0,queryName,groupByVar);
    IncrementalExecutor root=child;
    for (int i=incrementalDurations.size() - 2; i >= 0; i--) {
      root=build(functionsAttributes,incrementalDurations.get(i),child,metaComplexEvent,0,eventTableMap,executors,executionPlanContext,true,0,queryName,groupByVar);
      child=root;
    }
    aggregationRuntime=new AggregationRuntime(definition,executionPlanContext,streamRuntime,metaComplexEvent);
  }
 catch (  RuntimeException ex) {
  }
  return aggregationRuntime;
}","public static AggregationRuntime parse(AggregationDefinition definition,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,Table> tableMap,Map<String,Window> windowMap,Map<String,List<Source>> eventSourceMap,Map<String,List<Sink>> eventSinkMap,LockSynchronizer lockSynchronizer){
  if (definition == null) {
    throw new ExecutionPlanCreationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (definition.getTimePeriod() == null) {
    throw new ExecutionPlanCreationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  List<VariableExpressionExecutor> executors=new ArrayList<VariableExpressionExecutor>();
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  AggregationRuntime aggregationRuntime=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",definition.getAnnotations());
    String queryName=null;
    if (nameElement != null) {
      queryName=nameElement.getValue();
    }
 else {
      queryName=""String_Node_Str"" + UUID.randomUUID().toString();
    }
    if (executionPlanContext.isStatsEnabled() && executionPlanContext.getStatisticsManager() != null) {
      if (nameElement != null) {
        String metricName=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getMatricPrefix() + SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_EXECUTION_PLANS+ SiddhiConstants.METRIC_DELIMITER+ executionPlanContext.getName()+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_SIDDHI+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_QUERIES+ SiddhiConstants.METRIC_DELIMITER+ queryName;
        latencyTracker=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getFactory().createLatencyTracker(metricName,executionPlanContext.getStatisticsManager());
      }
    }
    InputStream inputStream=definition.getInputStream();
    StreamRuntime streamRuntime=InputStreamParser.parse(inputStream,executionPlanContext,streamDefinitionMap,tableDefinitionMap,windowDefinitionMap,tableMap,windowMap,executors,latencyTracker,false,queryName);
    MetaComplexEvent metaComplexEvent=streamRuntime.getMetaComplexEvent();
    List<OutputAttribute> outputAttributes=definition.getSelector().getSelectionList();
    List<AttributeFunction> functionsAttributes=new ArrayList<>();
    for (int i=1; i < outputAttributes.size(); i++) {
      OutputAttribute tmp=outputAttributes.get(i);
      functionsAttributes.add((AttributeFunction)tmp.getExpression());
    }
    List<TimePeriod.Duration> incrementalDurations=getSortedPeriods(definition.getTimePeriod());
    Variable groupByVar=getGroupByAttribute(definition.getSelector());
    IncrementalExecutor child=build(functionsAttributes,incrementalDurations.get(incrementalDurations.size() - 1),null,metaComplexEvent,0,tableMap,executors,executionPlanContext,true,0,queryName,groupByVar);
    IncrementalExecutor root=child;
    for (int i=incrementalDurations.size() - 2; i >= 0; i--) {
      root=build(functionsAttributes,incrementalDurations.get(i),child,metaComplexEvent,0,tableMap,executors,executionPlanContext,true,0,queryName,groupByVar);
      child=root;
    }
    aggregationRuntime=new AggregationRuntime(definition,executionPlanContext,streamRuntime,metaComplexEvent);
  }
 catch (  RuntimeException ex) {
  }
  return aggregationRuntime;
}",0.9861091623403956
28925,"public AndConditionExpressionExecutor(ExpressionExecutor leftConditionExecutor,ExpressionExecutor rightConditionExecutor){
  if (leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL) && rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.leftConditionExecutor=leftConditionExecutor;
    this.rightConditionExecutor=rightConditionExecutor;
  }
 else {
    if (!leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString());
    }
 else     if (!rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + rightConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ rightConditionExecutor.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString()+ ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
  }
}","public AndConditionExpressionExecutor(ExpressionExecutor leftConditionExecutor,ExpressionExecutor rightConditionExecutor){
  if (leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL) && rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.leftConditionExecutor=leftConditionExecutor;
    this.rightConditionExecutor=rightConditionExecutor;
  }
 else {
    if (!leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString());
    }
 else     if (!rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + rightConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ rightConditionExecutor.toString()+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString()+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
  }
}",0.9776207302709068
28926,"public NotConditionExpressionExecutor(ExpressionExecutor conditionExecutor){
  if (conditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.conditionExecutor=conditionExecutor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + conditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ conditionExecutor.getReturnType().toString());
  }
}","public NotConditionExpressionExecutor(ExpressionExecutor conditionExecutor){
  if (conditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.conditionExecutor=conditionExecutor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + conditionExecutor.toString() + ""String_Node_Str""+ conditionExecutor.getReturnType().toString());
  }
}",0.9751633986928104
28927,"public OrConditionExpressionExecutor(ExpressionExecutor leftConditionExecutor,ExpressionExecutor rightConditionExecutor){
  if (leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL) && rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.leftConditionExecutor=leftConditionExecutor;
    this.rightConditionExecutor=rightConditionExecutor;
  }
 else {
    if (!leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString());
    }
 else     if (!rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + rightConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ rightConditionExecutor.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString()+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
  }
}","public OrConditionExpressionExecutor(ExpressionExecutor leftConditionExecutor,ExpressionExecutor rightConditionExecutor){
  if (leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL) && rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
    this.leftConditionExecutor=leftConditionExecutor;
    this.rightConditionExecutor=rightConditionExecutor;
  }
 else {
    if (!leftConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString());
    }
 else     if (!rightConditionExecutor.getReturnType().equals(Attribute.Type.BOOL)) {
      throw new OperationNotSupportedException(""String_Node_Str"" + rightConditionExecutor.toString() + ""String_Node_Str""+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + leftConditionExecutor.toString() + ""String_Node_Str""+ rightConditionExecutor.toString()+ ""String_Node_Str""+ leftConditionExecutor.getReturnType().toString()+ ""String_Node_Str""+ rightConditionExecutor.getReturnType().toString());
    }
  }
}",0.9849564528899446
28928,"@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 2) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors.length);
  }
  if (!(attributeExpressionExecutors[1] instanceof ConstantExpressionExecutor)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    String type=attributeExpressionExecutors[1].execute(null).toString();
    if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.INT;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.LONG;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.FLOAT;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.DOUBLE;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.BOOL;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.STRING;
    }
 else {
      throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","@Override protected void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 2) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + attributeExpressionExecutors.length);
  }
  if (!(attributeExpressionExecutors[1] instanceof ConstantExpressionExecutor)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    String type=attributeExpressionExecutors[1].execute(null).toString();
    if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.INT;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.LONG;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.FLOAT;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.DOUBLE;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.BOOL;
    }
 else     if (type.toLowerCase().equals(""String_Node_Str"")) {
      returnType=Attribute.Type.STRING;
    }
 else {
      throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.9925149700598802
28929,"@Override public void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 2) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  inputType=attributeExpressionExecutors[0].getReturnType();
  if (inputType == Attribute.Type.OBJECT) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (attributeExpressionExecutors[1].getReturnType() != Attribute.Type.STRING) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (!(attributeExpressionExecutors[1] instanceof ConstantExpressionExecutor)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String type=(String)attributeExpressionExecutors[1].execute(null);
  if (Attribute.Type.STRING.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.STRING;
  }
 else   if (Attribute.Type.BOOL.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.BOOL;
  }
 else   if (Attribute.Type.DOUBLE.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.DOUBLE;
  }
 else   if (Attribute.Type.FLOAT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.FLOAT;
  }
 else   if (Attribute.Type.INT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.INT;
  }
 else   if (Attribute.Type.LONG.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.LONG;
  }
 else {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + type + ""String_Node_Str"");
  }
}","@Override public void init(ExpressionExecutor[] attributeExpressionExecutors,ConfigReader configReader,ExecutionPlanContext executionPlanContext){
  if (attributeExpressionExecutors.length != 2) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  inputType=attributeExpressionExecutors[0].getReturnType();
  if (inputType == Attribute.Type.OBJECT) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (attributeExpressionExecutors[1].getReturnType() != Attribute.Type.STRING) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ attributeExpressionExecutors[0].getReturnType());
  }
  if (!(attributeExpressionExecutors[1] instanceof ConstantExpressionExecutor)) {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  String type=(String)attributeExpressionExecutors[1].execute(null);
  if (Attribute.Type.STRING.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.STRING;
  }
 else   if (Attribute.Type.BOOL.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.BOOL;
  }
 else   if (Attribute.Type.DOUBLE.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.DOUBLE;
  }
 else   if (Attribute.Type.FLOAT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.FLOAT;
  }
 else   if (Attribute.Type.INT.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.INT;
  }
 else   if (Attribute.Type.LONG.toString().equalsIgnoreCase(type)) {
    returnType=Attribute.Type.LONG;
  }
 else {
    throw new ExecutionPlanValidationException(""String_Node_Str"" + ""String_Node_Str"" + type + ""String_Node_Str"");
  }
}",0.994535519125683
28930,"public static void addEventSink(StreamDefinition streamDefinition,ConcurrentMap<String,List<Sink>> eventSinkMap,ExecutionPlanContext executionPlanContext){
  for (  Annotation sinkAnnotation : streamDefinition.getAnnotations()) {
    if (SiddhiConstants.ANNOTATION_SINK.equalsIgnoreCase(sinkAnnotation.getName())) {
      Annotation mapAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_MAP,sinkAnnotation.getAnnotations());
      if (mapAnnotation == null) {
        mapAnnotation=Annotation.annotation(SiddhiConstants.ANNOTATION_MAP).element(SiddhiConstants.ANNOTATION_ELEMENT_TYPE,""String_Node_Str"");
      }
      Annotation distributionAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_DISTRIBUTION,sinkAnnotation.getAnnotations());
      if (mapAnnotation != null) {
        String[] supportedDynamicOptions=null;
        List<OptionHolder> destinationOptHolders=new ArrayList<>();
        String sinkType=sinkAnnotation.getElement(SiddhiConstants.ANNOTATION_ELEMENT_TYPE);
        Extension sinkExtension=constructExtension(streamDefinition,SiddhiConstants.ANNOTATION_SINK,sinkType,sinkAnnotation,SiddhiConstants.NAMESPACE_SINK);
        ConfigReader sinkConfigReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(sinkExtension.getNamespace(),sinkExtension.getName());
        final boolean isDistributedTransport=(distributionAnnotation != null);
        boolean isMultiClient=false;
        if (isDistributedTransport) {
          Sink sink=createSink(sinkExtension,executionPlanContext);
          isMultiClient=isMultiClientDistributedTransport(sink,streamDefinition,distributionAnnotation);
          supportedDynamicOptions=sink.getSupportedDynamicOptions();
          destinationOptHolders=createDestinationOptionHolders(distributionAnnotation,streamDefinition,sink);
        }
        final String mapType=mapAnnotation.getElement(SiddhiConstants.ANNOTATION_ELEMENT_TYPE);
        if (sinkType != null && mapType != null) {
          Sink sink;
          if (isDistributedTransport) {
            sink=(isMultiClient) ? new MultiClientDistributedTransport() : new SingleClientDistributedTransport();
          }
 else {
            sink=createSink(sinkExtension,executionPlanContext);
          }
          if (supportedDynamicOptions == null) {
            supportedDynamicOptions=sink.getSupportedDynamicOptions();
          }
          Extension mapperExtension=constructExtension(streamDefinition,SiddhiConstants.ANNOTATION_MAP,mapType,sinkAnnotation,SiddhiConstants.NAMESPACE_SINK_MAPPER);
          ConfigReader mapperConfigReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(sinkExtension.getNamespace(),sinkExtension.getName());
          SinkMapper sinkMapper=(SinkMapper)SiddhiClassLoader.loadExtensionImplementation(mapperExtension,SinkMapperExecutorExtensionHolder.getInstance(executionPlanContext));
          org.wso2.siddhi.annotation.Extension sinkExt=sink.getClass().getAnnotation(org.wso2.siddhi.annotation.Extension.class);
          OptionHolder transportOptionHolder=constructOptionProcessor(streamDefinition,sinkAnnotation,sinkExt,supportedDynamicOptions);
          OptionHolder mapOptionHolder=constructOptionProcessor(streamDefinition,mapAnnotation,sinkMapper.getClass().getAnnotation(org.wso2.siddhi.annotation.Extension.class),sinkMapper.getSupportedDynamicOptions());
          String payload=getPayload(mapAnnotation);
          OptionHolder distributionOptHolder=null;
          if (isDistributedTransport) {
            distributionOptHolder=constructOptionProcessor(streamDefinition,distributionAnnotation,sinkExt,supportedDynamicOptions);
            String strategyType=distributionOptHolder.validateAndGetStaticValue(SiddhiConstants.DISTRIBUTION_STRATEGY_KEY);
            Extension strategyExtension=constructExtension(streamDefinition,SiddhiConstants.ANNOTATION_SINK,strategyType,sinkAnnotation,SiddhiConstants.NAMESPACE_DISTRIBUTION_STRATEGY);
            ConfigReader configReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(strategyExtension.getNamespace(),strategyExtension.getName());
            DistributionStrategy distributionStrategy=(DistributionStrategy)SiddhiClassLoader.loadExtensionImplementation(strategyExtension,DistributionStrategyExtensionHolder.getInstance(executionPlanContext));
            distributionStrategy.init(streamDefinition,transportOptionHolder,distributionOptHolder,destinationOptHolders,configReader);
            ((DistributedTransport)sink).init(streamDefinition,sinkType,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,payload,mapperConfigReader,executionPlanContext,destinationOptHolders,sinkAnnotation,distributionStrategy,supportedDynamicOptions);
          }
 else {
            sink.init(streamDefinition,sinkType,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,payload,mapperConfigReader,executionPlanContext);
          }
          OutputGroupDeterminer groupDeterminer=constructOutputGroupDeterminer(transportOptionHolder,distributionOptHolder,streamDefinition,destinationOptHolders.size());
          if (groupDeterminer != null) {
            sink.getMapper().setGroupDeterminer(groupDeterminer);
          }
          List<Sink> eventSinks=eventSinkMap.get(streamDefinition.getId());
          if (eventSinks == null) {
            eventSinks=new ArrayList<>();
            eventSinks.add(sink);
            eventSinkMap.put(streamDefinition.getId(),eventSinks);
          }
 else {
            eventSinks.add(sink);
          }
        }
      }
 else {
        throw new ExecutionPlanCreationException(""String_Node_Str"");
      }
    }
  }
}","public static void addEventSink(StreamDefinition streamDefinition,ConcurrentMap<String,List<Sink>> eventSinkMap,ExecutionPlanContext executionPlanContext){
  for (  Annotation sinkAnnotation : streamDefinition.getAnnotations()) {
    if (SiddhiConstants.ANNOTATION_SINK.equalsIgnoreCase(sinkAnnotation.getName())) {
      Annotation mapAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_MAP,sinkAnnotation.getAnnotations());
      if (mapAnnotation == null) {
        mapAnnotation=Annotation.annotation(SiddhiConstants.ANNOTATION_MAP).element(SiddhiConstants.ANNOTATION_ELEMENT_TYPE,""String_Node_Str"");
      }
      Annotation distributionAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_DISTRIBUTION,sinkAnnotation.getAnnotations());
      if (mapAnnotation != null) {
        String[] supportedDynamicOptions=null;
        List<OptionHolder> destinationOptHolders=new ArrayList<>();
        String sinkType=sinkAnnotation.getElement(SiddhiConstants.ANNOTATION_ELEMENT_TYPE);
        Extension sinkExtension=constructExtension(streamDefinition,SiddhiConstants.ANNOTATION_SINK,sinkType,sinkAnnotation,SiddhiConstants.NAMESPACE_SINK);
        ConfigReader sinkConfigReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(sinkExtension.getNamespace(),sinkExtension.getName());
        final boolean isDistributedTransport=(distributionAnnotation != null);
        boolean isMultiClient=false;
        if (isDistributedTransport) {
          Sink sink=createSink(sinkExtension,executionPlanContext);
          isMultiClient=isMultiClientDistributedTransport(sink,streamDefinition,distributionAnnotation);
          supportedDynamicOptions=sink.getSupportedDynamicOptions();
          destinationOptHolders=createDestinationOptionHolders(distributionAnnotation,streamDefinition,sink);
        }
        final String mapType=mapAnnotation.getElement(SiddhiConstants.ANNOTATION_ELEMENT_TYPE);
        if (sinkType != null && mapType != null) {
          Sink sink;
          if (isDistributedTransport) {
            sink=(isMultiClient) ? new MultiClientDistributedSink() : new SingleClientDistributedSink();
          }
 else {
            sink=createSink(sinkExtension,executionPlanContext);
          }
          if (supportedDynamicOptions == null) {
            supportedDynamicOptions=sink.getSupportedDynamicOptions();
          }
          Extension mapperExtension=constructExtension(streamDefinition,SiddhiConstants.ANNOTATION_MAP,mapType,sinkAnnotation,SiddhiConstants.NAMESPACE_SINK_MAPPER);
          ConfigReader mapperConfigReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(sinkExtension.getNamespace(),sinkExtension.getName());
          SinkMapper sinkMapper=(SinkMapper)SiddhiClassLoader.loadExtensionImplementation(mapperExtension,SinkMapperExecutorExtensionHolder.getInstance(executionPlanContext));
          org.wso2.siddhi.annotation.Extension sinkExt=sink.getClass().getAnnotation(org.wso2.siddhi.annotation.Extension.class);
          OptionHolder transportOptionHolder=constructOptionProcessor(streamDefinition,sinkAnnotation,sinkExt,supportedDynamicOptions);
          OptionHolder mapOptionHolder=constructOptionProcessor(streamDefinition,mapAnnotation,sinkMapper.getClass().getAnnotation(org.wso2.siddhi.annotation.Extension.class),sinkMapper.getSupportedDynamicOptions());
          String payload=getPayload(mapAnnotation);
          OptionHolder distributionOptHolder=null;
          if (isDistributedTransport) {
            distributionOptHolder=constructOptionProcessor(streamDefinition,distributionAnnotation,sinkExt,supportedDynamicOptions);
            String strategyType=distributionOptHolder.validateAndGetStaticValue(SiddhiConstants.DISTRIBUTION_STRATEGY_KEY);
            Extension strategyExtension=constructExtension(streamDefinition,SiddhiConstants.ANNOTATION_SINK,strategyType,sinkAnnotation,SiddhiConstants.NAMESPACE_DISTRIBUTION_STRATEGY);
            ConfigReader configReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(strategyExtension.getNamespace(),strategyExtension.getName());
            DistributionStrategy distributionStrategy=(DistributionStrategy)SiddhiClassLoader.loadExtensionImplementation(strategyExtension,DistributionStrategyExtensionHolder.getInstance(executionPlanContext));
            distributionStrategy.init(streamDefinition,transportOptionHolder,distributionOptHolder,destinationOptHolders,configReader);
            ((DistributedTransport)sink).init(streamDefinition,sinkType,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,payload,mapperConfigReader,executionPlanContext,destinationOptHolders,sinkAnnotation,distributionStrategy,supportedDynamicOptions);
          }
 else {
            sink.init(streamDefinition,sinkType,transportOptionHolder,sinkConfigReader,sinkMapper,mapType,mapOptionHolder,payload,mapperConfigReader,executionPlanContext);
          }
          OutputGroupDeterminer groupDeterminer=constructOutputGroupDeterminer(transportOptionHolder,distributionOptHolder,streamDefinition,destinationOptHolders.size());
          if (groupDeterminer != null) {
            sink.getMapper().setGroupDeterminer(groupDeterminer);
          }
          List<Sink> eventSinks=eventSinkMap.get(streamDefinition.getId());
          if (eventSinks == null) {
            eventSinks=new ArrayList<>();
            eventSinks.add(sink);
            eventSinkMap.put(streamDefinition.getId(),eventSinks);
          }
 else {
            eventSinks.add(sink);
          }
        }
      }
 else {
        throw new ExecutionPlanCreationException(""String_Node_Str"");
      }
    }
  }
}",0.9977328217649112
28931,"private void buildStreamVariableExecutor(Variable variable,int streamEventChainIndex,ConditionVisitor conditionVisitor,Attribute.Type type){
  String id=variable.getAttributeName();
  if (variable.getStreamId() != null) {
    id=variable.getStreamId() + ""String_Node_Str"" + id;
  }
  conditionVisitor.beginVisitStreamVariable(id,variable.getStreamId(),variable.getAttributeName(),type);
  if (!variableExpressionExecutorMap.containsKey(id)) {
    ExpressionExecutor variableExpressionExecutor=ExpressionParser.parseExpression(expression,matchingMetaInfoHolder.getMetaStateEvent(),streamEventChainIndex,eventTableMap,variableExpressionExecutors,executionPlanContext,false,0,queryName);
    variableExpressionExecutorMap.put(id,variableExpressionExecutor);
  }
  conditionVisitor.endVisitStreamVariable(id,variable.getStreamId(),variable.getAttributeName(),type);
}","private void buildStreamVariableExecutor(Variable variable,int streamEventChainIndex,ConditionVisitor conditionVisitor,Attribute.Type type){
  String id=variable.getAttributeName();
  if (variable.getStreamId() != null) {
    id=variable.getStreamId() + ""String_Node_Str"" + id;
  }
  conditionVisitor.beginVisitStreamVariable(id,variable.getStreamId(),variable.getAttributeName(),type);
  if (!variableExpressionExecutorMap.containsKey(id)) {
    ExpressionExecutor variableExpressionExecutor=ExpressionParser.parseExpression(variable,matchingMetaInfoHolder.getMetaStateEvent(),streamEventChainIndex,eventTableMap,variableExpressionExecutors,executionPlanContext,false,0,queryName);
    variableExpressionExecutorMap.put(id,variableExpressionExecutor);
  }
  conditionVisitor.endVisitStreamVariable(id,variable.getStreamId(),variable.getAttributeName(),type);
}",0.9895591647331786
28932,"private void buildVariableExecutors(Expression expression,ConditionVisitor conditionVisitor){
  if (expression instanceof And) {
    conditionVisitor.beginVisitAnd();
    conditionVisitor.beginVisitAndLeftOperand();
    buildVariableExecutors(((And)expression).getLeftExpression(),conditionVisitor);
    conditionVisitor.endVisitAndLeftOperand();
    conditionVisitor.beginVisitAndRightOperand();
    buildVariableExecutors(((And)expression).getRightExpression(),conditionVisitor);
    conditionVisitor.endVisitAndRightOperand();
    conditionVisitor.endVisitAnd();
  }
 else   if (expression instanceof Or) {
    conditionVisitor.beginVisitOr();
    conditionVisitor.beginVisitOrLeftOperand();
    buildVariableExecutors(((Or)expression).getLeftExpression(),conditionVisitor);
    conditionVisitor.endVisitOrLeftOperand();
    conditionVisitor.beginVisitOrRightOperand();
    buildVariableExecutors(((Or)expression).getRightExpression(),conditionVisitor);
    conditionVisitor.endVisitOrRightOperand();
    conditionVisitor.endVisitOr();
  }
 else   if (expression instanceof Not) {
    conditionVisitor.beginVisitNot();
    buildVariableExecutors(((Not)expression).getExpression(),conditionVisitor);
    conditionVisitor.endVisitNot();
  }
 else   if (expression instanceof Compare) {
    conditionVisitor.beginVisitCompare(((Compare)expression).getOperator());
    conditionVisitor.beginVisitCompareLeftOperand(((Compare)expression).getOperator());
    buildVariableExecutors(((Compare)expression).getLeftExpression(),conditionVisitor);
    conditionVisitor.endVisitCompareLeftOperand(((Compare)expression).getOperator());
    conditionVisitor.beginVisitCompareRightOperand(((Compare)expression).getOperator());
    buildVariableExecutors(((Compare)expression).getRightExpression(),conditionVisitor);
    conditionVisitor.endVisitCompareRightOperand(((Compare)expression).getOperator());
    conditionVisitor.endVisitCompare(((Compare)expression).getOperator());
  }
 else   if (expression instanceof Add) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.ADD);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.ADD);
    buildVariableExecutors(((Add)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.ADD);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.ADD);
    buildVariableExecutors(((Add)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.ADD);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.ADD);
  }
 else   if (expression instanceof Subtract) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.SUBTRACT);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.SUBTRACT);
    buildVariableExecutors(((Subtract)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.SUBTRACT);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.SUBTRACT);
    buildVariableExecutors(((Subtract)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.SUBTRACT);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.SUBTRACT);
  }
 else   if (expression instanceof Divide) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.DIVIDE);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.DIVIDE);
    buildVariableExecutors(((Divide)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.DIVIDE);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.DIVIDE);
    buildVariableExecutors(((Divide)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.DIVIDE);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.DIVIDE);
  }
 else   if (expression instanceof Multiply) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.MULTIPLY);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.MULTIPLY);
    buildVariableExecutors(((Multiply)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.MULTIPLY);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.MULTIPLY);
    buildVariableExecutors(((Multiply)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.MULTIPLY);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.MULTIPLY);
  }
 else   if (expression instanceof Mod) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.MOD);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.MOD);
    buildVariableExecutors(((Mod)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.MOD);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.MOD);
    buildVariableExecutors(((Mod)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.MOD);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.MOD);
  }
 else   if (expression instanceof IsNull) {
    IsNull isNull=(IsNull)expression;
    if (isNull.getExpression() != null) {
      conditionVisitor.beginVisitIsNull(null);
      buildVariableExecutors(((IsNull)expression).getExpression(),conditionVisitor);
      conditionVisitor.endVisitIsNull(null);
    }
 else {
      String streamId=isNull.getStreamId();
      MetaStateEvent metaStateEvent=matchingMetaInfoHolder.getMetaStateEvent();
      if (streamId == null) {
        throw new ExecutionPlanCreationException(""String_Node_Str"");
      }
 else {
        AbstractDefinition definitionOutput=null;
        MetaStreamEvent[] metaStreamEvents=metaStateEvent.getMetaStreamEvents();
        for (int i=0, metaStreamEventsLength=metaStreamEvents.length; i < metaStreamEventsLength; i++) {
          MetaStreamEvent metaStreamEvent=metaStreamEvents[i];
          AbstractDefinition definition=metaStreamEvent.getLastInputDefinition();
          if (metaStreamEvent.getInputReferenceId() == null) {
            if (definition.getId().equals(streamId)) {
              definitionOutput=definition;
              break;
            }
          }
 else {
            if (metaStreamEvent.getInputReferenceId().equals(streamId)) {
              definitionOutput=definition;
              break;
            }
          }
        }
        if (definitionOutput != null) {
          conditionVisitor.beginVisitIsNull(definitionOutput.getId());
          conditionVisitor.endVisitIsNull(definitionOutput.getId());
        }
 else {
          conditionVisitor.beginVisitIsNull(null);
          conditionVisitor.endVisitIsNull(null);
        }
      }
    }
  }
 else   if (expression instanceof In) {
    conditionVisitor.beginVisitIn(((In)expression).getSourceId());
    buildVariableExecutors(((In)expression).getExpression(),conditionVisitor);
    conditionVisitor.endVisitIn(((In)expression).getSourceId());
  }
 else   if (expression instanceof Constant) {
    if (expression instanceof DoubleConstant) {
      conditionVisitor.beginVisitConstant(((DoubleConstant)expression).getValue(),Attribute.Type.BOOL);
      conditionVisitor.endVisitConstant(((DoubleConstant)expression).getValue(),Attribute.Type.BOOL);
    }
 else     if (expression instanceof StringConstant) {
      conditionVisitor.beginVisitConstant(((StringConstant)expression).getValue(),Attribute.Type.STRING);
      conditionVisitor.endVisitConstant(((StringConstant)expression).getValue(),Attribute.Type.STRING);
    }
 else     if (expression instanceof IntConstant) {
      conditionVisitor.beginVisitConstant(((IntConstant)expression).getValue(),Attribute.Type.INT);
      conditionVisitor.endVisitConstant(((IntConstant)expression).getValue(),Attribute.Type.INT);
    }
 else     if (expression instanceof BoolConstant) {
      conditionVisitor.beginVisitConstant(((BoolConstant)expression).getValue(),Attribute.Type.BOOL);
      conditionVisitor.endVisitConstant(((BoolConstant)expression).getValue(),Attribute.Type.BOOL);
    }
 else     if (expression instanceof FloatConstant) {
      conditionVisitor.beginVisitConstant(((FloatConstant)expression).getValue(),Attribute.Type.FLOAT);
      conditionVisitor.endVisitConstant(((FloatConstant)expression).getValue(),Attribute.Type.FLOAT);
    }
 else     if (expression instanceof LongConstant) {
      conditionVisitor.beginVisitConstant(((LongConstant)expression).getValue(),Attribute.Type.LONG);
      conditionVisitor.endVisitConstant(((LongConstant)expression).getValue(),Attribute.Type.LONG);
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + expression.getClass().getName());
    }
  }
 else   if (expression instanceof AttributeFunction) {
    conditionVisitor.beginVisitAttributeFunction(((AttributeFunction)expression).getNamespace(),((AttributeFunction)expression).getName());
    Expression[] expressions=((AttributeFunction)expression).getParameters();
    for (int i=0; i < expressions.length; i++) {
      conditionVisitor.beginVisitParameterAttributeFunction(i);
      buildVariableExecutors(expressions[i],conditionVisitor);
      conditionVisitor.endVisitParameterAttributeFunction(i);
    }
    conditionVisitor.endVisitAttributeFunction(((AttributeFunction)expression).getNamespace(),((AttributeFunction)expression).getName());
  }
 else   if (expression instanceof Variable) {
    Variable variable=((Variable)expression);
    String attributeName=variable.getAttributeName();
    AbstractDefinition definition;
    Attribute.Type type=null;
    int streamEventChainIndex=UNKNOWN_STATE;
    if (variable.getStreamId() == null) {
      MetaStreamEvent[] metaStreamEvents=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents();
      if (matchingMetaInfoHolder.getCurrentState() == UNKNOWN_STATE) {
        String firstInput=null;
        for (int i=0; i < metaStreamEvents.length; i++) {
          MetaStreamEvent metaStreamEvent=metaStreamEvents[i];
          definition=metaStreamEvent.getLastInputDefinition();
          if (type == null) {
            try {
              type=definition.getAttributeType(attributeName);
              firstInput=""String_Node_Str"" + definition.getId() + ""String_Node_Str""+ ""String_Node_Str""+ metaStreamEvent.getInputReferenceId();
              streamEventChainIndex=i;
            }
 catch (            AttributeNotExistException e) {
            }
          }
 else {
            try {
              definition.getAttributeType(attributeName);
              throw new ExecutionPlanValidationException(firstInput + ""String_Node_Str"" + definition.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ metaStreamEvent.getInputReferenceId()+ ""String_Node_Str""+ ""String_Node_Str""+ attributeName+ ""String_Node_Str"");
            }
 catch (            AttributeNotExistException e) {
            }
          }
        }
        if (streamEventChainIndex != UNKNOWN_STATE) {
          if (matchingMetaInfoHolder.getMatchingStreamEventIndex() == streamEventChainIndex) {
            buildStreamVariableExecutor(variable,streamEventChainIndex,conditionVisitor,type);
          }
 else {
            buildStoreVariableExecutor(variable,conditionVisitor,type,matchingMetaInfoHolder.getStoreDefinition());
          }
        }
      }
 else {
        MetaStreamEvent metaStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getCurrentState());
        definition=metaStreamEvent.getLastInputDefinition();
        try {
          type=definition.getAttributeType(attributeName);
        }
 catch (        AttributeNotExistException e) {
          throw new ExecutionPlanValidationException(e.getMessage() + ""String_Node_Str"" + definition.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ metaStreamEvent.getInputReferenceId());
        }
        if (matchingMetaInfoHolder.getCurrentState() == matchingMetaInfoHolder.getMatchingStreamEventIndex()) {
          buildStreamVariableExecutor(variable,streamEventChainIndex,conditionVisitor,type);
        }
 else {
          buildStoreVariableExecutor(variable,conditionVisitor,type,matchingMetaInfoHolder.getStoreDefinition());
        }
      }
    }
 else {
      MetaStreamEvent[] metaStreamEvents=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents();
      for (int i=0, metaStreamEventsLength=metaStreamEvents.length; i < metaStreamEventsLength; i++) {
        MetaStreamEvent metaStreamEvent=metaStreamEvents[i];
        definition=metaStreamEvent.getLastInputDefinition();
        if (metaStreamEvent.getInputReferenceId() == null) {
          if (definition.getId().equals(variable.getStreamId())) {
            type=definition.getAttributeType(attributeName);
            streamEventChainIndex=i;
            break;
          }
        }
 else {
          if (metaStreamEvent.getInputReferenceId().equals(variable.getStreamId())) {
            type=definition.getAttributeType(attributeName);
            streamEventChainIndex=i;
            break;
          }
        }
      }
      if (matchingMetaInfoHolder.getMatchingStreamEventIndex() == streamEventChainIndex) {
        buildStreamVariableExecutor(variable,streamEventChainIndex,conditionVisitor,type);
      }
 else {
        buildStoreVariableExecutor(variable,conditionVisitor,type,matchingMetaInfoHolder.getStoreDefinition());
      }
    }
  }
}","private void buildVariableExecutors(Expression expression,ConditionVisitor conditionVisitor){
  if (expression instanceof And) {
    conditionVisitor.beginVisitAnd();
    conditionVisitor.beginVisitAndLeftOperand();
    buildVariableExecutors(((And)expression).getLeftExpression(),conditionVisitor);
    conditionVisitor.endVisitAndLeftOperand();
    conditionVisitor.beginVisitAndRightOperand();
    buildVariableExecutors(((And)expression).getRightExpression(),conditionVisitor);
    conditionVisitor.endVisitAndRightOperand();
    conditionVisitor.endVisitAnd();
  }
 else   if (expression instanceof Or) {
    conditionVisitor.beginVisitOr();
    conditionVisitor.beginVisitOrLeftOperand();
    buildVariableExecutors(((Or)expression).getLeftExpression(),conditionVisitor);
    conditionVisitor.endVisitOrLeftOperand();
    conditionVisitor.beginVisitOrRightOperand();
    buildVariableExecutors(((Or)expression).getRightExpression(),conditionVisitor);
    conditionVisitor.endVisitOrRightOperand();
    conditionVisitor.endVisitOr();
  }
 else   if (expression instanceof Not) {
    conditionVisitor.beginVisitNot();
    buildVariableExecutors(((Not)expression).getExpression(),conditionVisitor);
    conditionVisitor.endVisitNot();
  }
 else   if (expression instanceof Compare) {
    conditionVisitor.beginVisitCompare(((Compare)expression).getOperator());
    conditionVisitor.beginVisitCompareLeftOperand(((Compare)expression).getOperator());
    buildVariableExecutors(((Compare)expression).getLeftExpression(),conditionVisitor);
    conditionVisitor.endVisitCompareLeftOperand(((Compare)expression).getOperator());
    conditionVisitor.beginVisitCompareRightOperand(((Compare)expression).getOperator());
    buildVariableExecutors(((Compare)expression).getRightExpression(),conditionVisitor);
    conditionVisitor.endVisitCompareRightOperand(((Compare)expression).getOperator());
    conditionVisitor.endVisitCompare(((Compare)expression).getOperator());
  }
 else   if (expression instanceof Add) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.ADD);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.ADD);
    buildVariableExecutors(((Add)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.ADD);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.ADD);
    buildVariableExecutors(((Add)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.ADD);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.ADD);
  }
 else   if (expression instanceof Subtract) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.SUBTRACT);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.SUBTRACT);
    buildVariableExecutors(((Subtract)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.SUBTRACT);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.SUBTRACT);
    buildVariableExecutors(((Subtract)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.SUBTRACT);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.SUBTRACT);
  }
 else   if (expression instanceof Divide) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.DIVIDE);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.DIVIDE);
    buildVariableExecutors(((Divide)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.DIVIDE);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.DIVIDE);
    buildVariableExecutors(((Divide)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.DIVIDE);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.DIVIDE);
  }
 else   if (expression instanceof Multiply) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.MULTIPLY);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.MULTIPLY);
    buildVariableExecutors(((Multiply)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.MULTIPLY);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.MULTIPLY);
    buildVariableExecutors(((Multiply)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.MULTIPLY);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.MULTIPLY);
  }
 else   if (expression instanceof Mod) {
    conditionVisitor.beginVisitMath(ConditionVisitor.MathOperator.MOD);
    conditionVisitor.beginVisitMathLeftOperand(ConditionVisitor.MathOperator.MOD);
    buildVariableExecutors(((Mod)expression).getLeftValue(),conditionVisitor);
    conditionVisitor.endVisitMathLeftOperand(ConditionVisitor.MathOperator.MOD);
    conditionVisitor.beginVisitMathRightOperand(ConditionVisitor.MathOperator.MOD);
    buildVariableExecutors(((Mod)expression).getRightValue(),conditionVisitor);
    conditionVisitor.endVisitMathRightOperand(ConditionVisitor.MathOperator.MOD);
    conditionVisitor.endVisitMath(ConditionVisitor.MathOperator.MOD);
  }
 else   if (expression instanceof IsNull) {
    IsNull isNull=(IsNull)expression;
    if (isNull.getExpression() != null) {
      conditionVisitor.beginVisitIsNull(null);
      buildVariableExecutors(((IsNull)expression).getExpression(),conditionVisitor);
      conditionVisitor.endVisitIsNull(null);
    }
 else {
      String streamId=isNull.getStreamId();
      MetaStateEvent metaStateEvent=matchingMetaInfoHolder.getMetaStateEvent();
      if (streamId == null) {
        throw new ExecutionPlanCreationException(""String_Node_Str"");
      }
 else {
        AbstractDefinition definitionOutput=null;
        MetaStreamEvent[] metaStreamEvents=metaStateEvent.getMetaStreamEvents();
        for (int i=0, metaStreamEventsLength=metaStreamEvents.length; i < metaStreamEventsLength; i++) {
          MetaStreamEvent metaStreamEvent=metaStreamEvents[i];
          AbstractDefinition definition=metaStreamEvent.getLastInputDefinition();
          if (metaStreamEvent.getInputReferenceId() == null) {
            if (definition.getId().equals(streamId)) {
              definitionOutput=definition;
              break;
            }
          }
 else {
            if (metaStreamEvent.getInputReferenceId().equals(streamId)) {
              definitionOutput=definition;
              break;
            }
          }
        }
        if (definitionOutput != null) {
          conditionVisitor.beginVisitIsNull(definitionOutput.getId());
          conditionVisitor.endVisitIsNull(definitionOutput.getId());
        }
 else {
          conditionVisitor.beginVisitIsNull(null);
          conditionVisitor.endVisitIsNull(null);
        }
      }
    }
  }
 else   if (expression instanceof In) {
    conditionVisitor.beginVisitIn(((In)expression).getSourceId());
    buildVariableExecutors(((In)expression).getExpression(),conditionVisitor);
    conditionVisitor.endVisitIn(((In)expression).getSourceId());
  }
 else   if (expression instanceof Constant) {
    if (expression instanceof DoubleConstant) {
      conditionVisitor.beginVisitConstant(((DoubleConstant)expression).getValue(),Attribute.Type.BOOL);
      conditionVisitor.endVisitConstant(((DoubleConstant)expression).getValue(),Attribute.Type.BOOL);
    }
 else     if (expression instanceof StringConstant) {
      conditionVisitor.beginVisitConstant(((StringConstant)expression).getValue(),Attribute.Type.STRING);
      conditionVisitor.endVisitConstant(((StringConstant)expression).getValue(),Attribute.Type.STRING);
    }
 else     if (expression instanceof IntConstant) {
      conditionVisitor.beginVisitConstant(((IntConstant)expression).getValue(),Attribute.Type.INT);
      conditionVisitor.endVisitConstant(((IntConstant)expression).getValue(),Attribute.Type.INT);
    }
 else     if (expression instanceof BoolConstant) {
      conditionVisitor.beginVisitConstant(((BoolConstant)expression).getValue(),Attribute.Type.BOOL);
      conditionVisitor.endVisitConstant(((BoolConstant)expression).getValue(),Attribute.Type.BOOL);
    }
 else     if (expression instanceof FloatConstant) {
      conditionVisitor.beginVisitConstant(((FloatConstant)expression).getValue(),Attribute.Type.FLOAT);
      conditionVisitor.endVisitConstant(((FloatConstant)expression).getValue(),Attribute.Type.FLOAT);
    }
 else     if (expression instanceof LongConstant) {
      conditionVisitor.beginVisitConstant(((LongConstant)expression).getValue(),Attribute.Type.LONG);
      conditionVisitor.endVisitConstant(((LongConstant)expression).getValue(),Attribute.Type.LONG);
    }
 else {
      throw new OperationNotSupportedException(""String_Node_Str"" + expression.getClass().getName());
    }
  }
 else   if (expression instanceof AttributeFunction) {
    conditionVisitor.beginVisitAttributeFunction(((AttributeFunction)expression).getNamespace(),((AttributeFunction)expression).getName());
    Expression[] expressions=((AttributeFunction)expression).getParameters();
    for (int i=0; i < expressions.length; i++) {
      conditionVisitor.beginVisitParameterAttributeFunction(i);
      buildVariableExecutors(expressions[i],conditionVisitor);
      conditionVisitor.endVisitParameterAttributeFunction(i);
    }
    conditionVisitor.endVisitAttributeFunction(((AttributeFunction)expression).getNamespace(),((AttributeFunction)expression).getName());
  }
 else   if (expression instanceof Variable) {
    Variable variable=((Variable)expression);
    String attributeName=variable.getAttributeName();
    AbstractDefinition definition;
    Attribute.Type type=null;
    int streamEventChainIndex=matchingMetaInfoHolder.getCurrentState();
    if (variable.getStreamId() == null) {
      MetaStreamEvent[] metaStreamEvents=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents();
      if (streamEventChainIndex == UNKNOWN_STATE) {
        String firstInput=null;
        for (int i=0; i < metaStreamEvents.length; i++) {
          MetaStreamEvent metaStreamEvent=metaStreamEvents[i];
          definition=metaStreamEvent.getLastInputDefinition();
          if (type == null) {
            try {
              type=definition.getAttributeType(attributeName);
              firstInput=""String_Node_Str"" + definition.getId() + ""String_Node_Str""+ ""String_Node_Str""+ metaStreamEvent.getInputReferenceId();
              streamEventChainIndex=i;
            }
 catch (            AttributeNotExistException e) {
            }
          }
 else {
            try {
              definition.getAttributeType(attributeName);
              throw new ExecutionPlanValidationException(firstInput + ""String_Node_Str"" + definition.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ metaStreamEvent.getInputReferenceId()+ ""String_Node_Str""+ ""String_Node_Str""+ attributeName+ ""String_Node_Str"");
            }
 catch (            AttributeNotExistException e) {
            }
          }
        }
        if (streamEventChainIndex != UNKNOWN_STATE) {
          if (matchingMetaInfoHolder.getMatchingStreamEventIndex() == streamEventChainIndex) {
            buildStreamVariableExecutor(variable,streamEventChainIndex,conditionVisitor,type);
          }
 else {
            buildStoreVariableExecutor(variable,conditionVisitor,type,matchingMetaInfoHolder.getStoreDefinition());
          }
        }
      }
 else {
        MetaStreamEvent metaStreamEvent=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvent(matchingMetaInfoHolder.getCurrentState());
        definition=metaStreamEvent.getLastInputDefinition();
        try {
          type=definition.getAttributeType(attributeName);
        }
 catch (        AttributeNotExistException e) {
          throw new ExecutionPlanValidationException(e.getMessage() + ""String_Node_Str"" + definition.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ metaStreamEvent.getInputReferenceId());
        }
        if (matchingMetaInfoHolder.getCurrentState() == matchingMetaInfoHolder.getMatchingStreamEventIndex()) {
          buildStreamVariableExecutor(variable,streamEventChainIndex,conditionVisitor,type);
        }
 else {
          buildStoreVariableExecutor(variable,conditionVisitor,type,matchingMetaInfoHolder.getStoreDefinition());
        }
      }
    }
 else {
      MetaStreamEvent[] metaStreamEvents=matchingMetaInfoHolder.getMetaStateEvent().getMetaStreamEvents();
      for (int i=0, metaStreamEventsLength=metaStreamEvents.length; i < metaStreamEventsLength; i++) {
        MetaStreamEvent metaStreamEvent=metaStreamEvents[i];
        definition=metaStreamEvent.getLastInputDefinition();
        if (metaStreamEvent.getInputReferenceId() == null) {
          if (definition.getId().equals(variable.getStreamId())) {
            type=definition.getAttributeType(attributeName);
            streamEventChainIndex=i;
            break;
          }
        }
 else {
          if (metaStreamEvent.getInputReferenceId().equals(variable.getStreamId())) {
            type=definition.getAttributeType(attributeName);
            streamEventChainIndex=i;
            break;
          }
        }
      }
      if (matchingMetaInfoHolder.getMatchingStreamEventIndex() == streamEventChainIndex) {
        buildStreamVariableExecutor(variable,streamEventChainIndex,conditionVisitor,type);
      }
 else {
        buildStoreVariableExecutor(variable,conditionVisitor,type,matchingMetaInfoHolder.getStoreDefinition());
      }
    }
  }
}",0.7862894450489663
28933,"private void scheduleCronJob(String cronString,String elementId){
  try {
    SchedulerFactory schedulerFactory=new StdSchedulerFactory();
    scheduler=schedulerFactory.getScheduler();
    jobName=""String_Node_Str"" + elementId;
    JobKey jobKey=new JobKey(jobName,jobGroup);
    if (scheduler.checkExists(jobKey)) {
      scheduler.deleteJob(jobKey);
    }
    scheduler.start();
    JobDataMap dataMap=new JobDataMap();
    dataMap.put(""String_Node_Str"",this);
    JobDetail job=org.quartz.JobBuilder.newJob(CronEventTrigger.class).withIdentity(jobName,jobGroup).usingJobData(dataMap).build();
    Trigger trigger=org.quartz.TriggerBuilder.newTrigger().withIdentity(""String_Node_Str"" + elementId,jobGroup).withSchedule(CronScheduleBuilder.cronSchedule(cronString)).build();
    scheduler.scheduleJob(job,trigger);
  }
 catch (  SchedulerException e) {
    log.error(""String_Node_Str"" + triggerDefinition.getId() + ""String_Node_Str""+ e.getMessage(),e);
  }
}","private void scheduleCronJob(String cronString,String elementId){
  try {
    SchedulerFactory schedulerFactory=new StdSchedulerFactory();
    scheduler=schedulerFactory.getScheduler();
    jobName=""String_Node_Str"" + elementId;
    JobKey jobKey=new JobKey(jobName,jobGroup);
    if (scheduler.checkExists(jobKey)) {
      scheduler.deleteJob(jobKey);
    }
    scheduler.start();
    JobDataMap dataMap=new JobDataMap();
    dataMap.put(""String_Node_Str"",this);
    JobDetail job=org.quartz.JobBuilder.newJob(CronEventTrigger.class).withIdentity(jobName,jobGroup).usingJobData(dataMap).build();
    Trigger trigger=org.quartz.TriggerBuilder.newTrigger().withIdentity(""String_Node_Str"" + elementId,jobGroup).withSchedule(CronScheduleBuilder.cronSchedule(cronString)).build();
    scheduler.scheduleJob(job,trigger);
  }
 catch (  SchedulerException e) {
    LOG.error(""String_Node_Str"" + triggerDefinition.getId() + ""String_Node_Str""+ e.getMessage(),e);
  }
}",0.996875
28934,"/** 
 * This will be called only once and this can be used to release the acquired resources for processing. This will be called before shutting down the system.
 */
@Override public void stop(){
  try {
    if (scheduler != null) {
      scheduler.deleteJob(new JobKey(jobName,jobGroup));
    }
  }
 catch (  SchedulerException e) {
    log.error(""String_Node_Str"" + e.getMessage(),e);
  }
}","/** 
 * This will be called only once and this can be used to release the acquired resources for processing. This will be called before shutting down the system.
 */
@Override public void stop(){
  try {
    if (scheduler != null) {
      scheduler.deleteJob(new JobKey(jobName,jobGroup));
    }
  }
 catch (  SchedulerException e) {
    LOG.error(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.9923469387755102
28935,"@Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
  JobDataMap dataMap=jobExecutionContext.getJobDetail().getJobDataMap();
  CronEventTrigger cronEventTrigger=(CronEventTrigger)dataMap.get(""String_Node_Str"");
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cronEventTrigger.getId() + ""String_Node_Str"");
  }
  cronEventTrigger.sendEvent();
}","@Override public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
  JobDataMap dataMap=jobExecutionContext.getJobDetail().getJobDataMap();
  CronEventTrigger cronEventTrigger=(CronEventTrigger)dataMap.get(""String_Node_Str"");
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + cronEventTrigger.getId() + ""String_Node_Str"");
  }
  cronEventTrigger.sendEvent();
}",0.9853300733496332
28936,"public static void addTable(TableDefinition tableDefinition,ConcurrentMap<String,Table> tableMap,ExecutionPlanContext executionPlanContext){
  if (!tableMap.containsKey(tableDefinition.getId())) {
    MetaStreamEvent tableMetaStreamEvent=new MetaStreamEvent();
    tableMetaStreamEvent.addInputDefinition(tableDefinition);
    for (    Attribute attribute : tableDefinition.getAttributeList()) {
      tableMetaStreamEvent.addOutputData(attribute);
    }
    StreamEventPool tableStreamEventPool=new StreamEventPool(tableMetaStreamEvent,10);
    StreamEventCloner tableStreamEventCloner=new StreamEventCloner(tableMetaStreamEvent,tableStreamEventPool);
    Annotation annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_STORE,tableDefinition.getAnnotations());
    Table table;
    ConfigReader configReader=null;
    if (annotation != null) {
      final String evenTableType=annotation.getElement(SiddhiConstants.NAMESPACE_STORE);
      Extension extension=new Extension(){
        @Override public String getNamespace(){
          return SiddhiConstants.NAMESPACE_STORE;
        }
        @Override public String getName(){
          return evenTableType;
        }
      }
;
      table=(Table)SiddhiClassLoader.loadExtensionImplementation(extension,TableExtensionHolder.getInstance(executionPlanContext));
      configReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(extension.getNamespace(),extension.getName());
    }
 else {
      table=new InMemoryTable();
    }
    table.init(tableDefinition,tableStreamEventPool,tableStreamEventCloner,configReader,executionPlanContext);
    tableMap.putIfAbsent(tableDefinition.getId(),table);
  }
}","public static void addTable(TableDefinition tableDefinition,ConcurrentMap<String,Table> tableMap,ExecutionPlanContext executionPlanContext){
  if (!tableMap.containsKey(tableDefinition.getId())) {
    MetaStreamEvent tableMetaStreamEvent=new MetaStreamEvent();
    tableMetaStreamEvent.addInputDefinition(tableDefinition);
    for (    Attribute attribute : tableDefinition.getAttributeList()) {
      tableMetaStreamEvent.addOutputData(attribute);
    }
    StreamEventPool tableStreamEventPool=new StreamEventPool(tableMetaStreamEvent,10);
    StreamEventCloner tableStreamEventCloner=new StreamEventCloner(tableMetaStreamEvent,tableStreamEventPool);
    Annotation annotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_STORE,tableDefinition.getAnnotations());
    Table table;
    ConfigReader configReader=null;
    if (annotation != null) {
      final String tableType=annotation.getElement(SiddhiConstants.ANNOTATION_ELEMENT_TYPE);
      Extension extension=new Extension(){
        @Override public String getNamespace(){
          return SiddhiConstants.NAMESPACE_STORE;
        }
        @Override public String getName(){
          return tableType;
        }
      }
;
      table=(Table)SiddhiClassLoader.loadExtensionImplementation(extension,TableExtensionHolder.getInstance(executionPlanContext));
      configReader=executionPlanContext.getSiddhiContext().getConfigManager().generateConfigReader(extension.getNamespace(),extension.getName());
    }
 else {
      table=new InMemoryTable();
    }
    table.init(tableDefinition,tableStreamEventPool,tableStreamEventCloner,configReader,executionPlanContext);
    tableMap.putIfAbsent(tableDefinition.getId(),table);
  }
}",0.9088235294117648
28937,"@Test public void testTcpSource2() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
      eventArrived=true;
      for (      Event event : inEvents) {
        count++;
switch (count) {
case 1:
          Assert.assertEquals(""String_Node_Str"",event.getData(0));
        break;
case 2:
      Assert.assertEquals(""String_Node_Str"",event.getData(0));
    break;
case 3:
  Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
org.junit.Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
TCPNettyClient TCPNettyClient=new TCPNettyClient();
TCPNettyClient.connect(""String_Node_Str"",8080);
ArrayList<Event> arrayList=new ArrayList<Event>(3);
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.disconnect();
TCPNettyClient.shutdown();
Thread.sleep(300);
Assert.assertEquals(3,count);
Assert.assertTrue(eventArrived);
executionPlanRuntime.shutdown();
}","@Test public void testTcpSource2() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
      eventArrived=true;
      for (      Event event : inEvents) {
        count++;
switch (count) {
case 1:
          Assert.assertEquals(""String_Node_Str"",event.getData(0));
        break;
case 2:
      Assert.assertEquals(""String_Node_Str"",event.getData(0));
    break;
case 3:
  Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
org.junit.Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
TCPNettyClient TCPNettyClient=new TCPNettyClient();
TCPNettyClient.connect(""String_Node_Str"",9892);
ArrayList<Event> arrayList=new ArrayList<Event>(3);
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.disconnect();
TCPNettyClient.shutdown();
Thread.sleep(300);
Assert.assertEquals(3,count);
Assert.assertTrue(eventArrived);
executionPlanRuntime.shutdown();
}",0.9983801295896328
28938,"@Test public void testTcpSource3() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
      eventArrived=true;
    }
  }
);
  executionPlanRuntime.start();
  TCPNettyClient TCPNettyClient=new TCPNettyClient();
  TCPNettyClient.connect(""String_Node_Str"",8080);
  ArrayList<Event> arrayList=new ArrayList<Event>(3);
  arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
  arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
  arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
  TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
  TCPNettyClient.disconnect();
  TCPNettyClient.shutdown();
  Thread.sleep(300);
  Assert.assertFalse(eventArrived);
  executionPlanRuntime.shutdown();
}","@Test public void testTcpSource3() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
      eventArrived=true;
    }
  }
);
  executionPlanRuntime.start();
  TCPNettyClient TCPNettyClient=new TCPNettyClient();
  TCPNettyClient.connect(""String_Node_Str"",9892);
  ArrayList<Event> arrayList=new ArrayList<Event>(3);
  arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
  arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
  arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
  TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
  TCPNettyClient.disconnect();
  TCPNettyClient.shutdown();
  Thread.sleep(300);
  Assert.assertFalse(eventArrived);
  executionPlanRuntime.shutdown();
}",0.9979906229068988
28939,"@Test public void testTcpSource1() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
      eventArrived=true;
      for (      Event event : inEvents) {
        count++;
switch (count) {
case 1:
          Assert.assertEquals(""String_Node_Str"",event.getData(0));
        break;
case 2:
      Assert.assertEquals(""String_Node_Str"",event.getData(0));
    break;
case 3:
  Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
org.junit.Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
TCPNettyClient TCPNettyClient=new TCPNettyClient();
TCPNettyClient.connect(""String_Node_Str"",8080);
ArrayList<Event> arrayList=new ArrayList<Event>(3);
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.disconnect();
TCPNettyClient.shutdown();
Thread.sleep(300);
Assert.assertEquals(3,count);
Assert.assertTrue(eventArrived);
executionPlanRuntime.shutdown();
}","@Test public void testTcpSource1() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String inStreamDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String query=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(inStreamDefinition + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
    @Override public void receive(    long timeStamp,    Event[] inEvents,    Event[] removeEvents){
      EventPrinter.print(timeStamp,inEvents,removeEvents);
      eventArrived=true;
      for (      Event event : inEvents) {
        count++;
switch (count) {
case 1:
          Assert.assertEquals(""String_Node_Str"",event.getData(0));
        break;
case 2:
      Assert.assertEquals(""String_Node_Str"",event.getData(0));
    break;
case 3:
  Assert.assertEquals(""String_Node_Str"",event.getData(0));
break;
default :
org.junit.Assert.fail();
}
}
}
}
);
executionPlanRuntime.start();
TCPNettyClient TCPNettyClient=new TCPNettyClient();
TCPNettyClient.connect(""String_Node_Str"",9892);
ArrayList<Event> arrayList=new ArrayList<Event>(3);
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",36,3.0f,380l,23.0,true}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",361,31.0f,3801l,231.0,false}));
arrayList.add(new Event(System.currentTimeMillis(),new Object[]{""String_Node_Str"",362,32.0f,3802l,232.0,true}));
TCPNettyClient.send(""String_Node_Str"",arrayList.toArray(new Event[3]));
TCPNettyClient.disconnect();
TCPNettyClient.shutdown();
Thread.sleep(300);
Assert.assertEquals(3,count);
Assert.assertTrue(eventArrived);
executionPlanRuntime.shutdown();
}",0.9983801295896328
28940,"@Override public void restoreState(Map<String,Object> state){
  count=(int)state.get(""String_Node_Str"");
}","@Override public void restoreState(Map<String,Object> state){
  count=(long)state.get(""String_Node_Str"");
}",0.976525821596244
28941,"/** 
 * Release the current lock and wait for the events arrive to the next point. For this to work, the next endpoint is not required to be a checkpoint marked by the user. For example, if user adds breakpoint only for the IN of query 1, next will track the event in OUT of query 1.
 */
public void next(){
synchronized (this) {
    this.enableNext.set(true);
  }
  this.breakPointLock.release();
}","/** 
 * Release the current lock and wait for the events arrive to the next point. For this to work, the next endpoint is not required to be a checkpoint marked by the user. For example, if user adds breakpoint only for the IN of query 1, next will track the event in OUT of query 1.
 */
public void next(){
  this.enableNext.set(true);
  this.breakPointLock.release();
}",0.9636363636363636
28942,"private void buildStreamVariableExecutor(Variable variable,int streamEventChainIndex,ConditionVisitor conditionVisitor,Attribute.Type type){
  String id=variable.getAttributeName();
  if (variable.getStreamId() != null) {
    id=variable.getStreamId() + ""String_Node_Str"" + id;
  }
  conditionVisitor.beginVisitStreamVariable(variable,id,type);
  if (!variableExpressionExecutorMap.containsKey(id)) {
    ExpressionExecutor variableExpressionExecutor=ExpressionParser.parseExpression(expression,matchingMetaInfoHolder.getMetaStateEvent(),streamEventChainIndex,eventTableMap,variableExpressionExecutors,executionPlanContext,false,matchingMetaInfoHolder.getStreamEventIndex(),queryName);
    variableExpressionExecutorMap.put(id,variableExpressionExecutor);
  }
  conditionVisitor.endVisitStreamVariable(variable,id,type);
}","private void buildStreamVariableExecutor(Variable variable,int streamEventChainIndex,ConditionVisitor conditionVisitor,Attribute.Type type){
  String id=variable.getAttributeName();
  if (variable.getStreamId() != null) {
    id=variable.getStreamId() + ""String_Node_Str"" + id;
  }
  conditionVisitor.beginVisitStreamVariable(variable,id,type);
  if (!variableExpressionExecutorMap.containsKey(id)) {
    ExpressionExecutor variableExpressionExecutor=ExpressionParser.parseExpression(expression,matchingMetaInfoHolder.getMetaStateEvent(),streamEventChainIndex,eventTableMap,variableExpressionExecutors,executionPlanContext,false,0,queryName);
    variableExpressionExecutorMap.put(id,variableExpressionExecutor);
  }
  conditionVisitor.endVisitStreamVariable(variable,id,type);
}",0.971892567145534
28943,"@Test public void testDebugger9() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String cseEventStream=""String_Node_Str"" + ""String_Node_Str"";
  final String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(cseEventStream + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      inEventCount.addAndGet(events.length);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  SiddhiDebugger siddhiDebugger=executionPlanRuntime.debug();
  siddhiDebugger.acquireBreakPoint(""String_Node_Str"",SiddhiDebugger.QueryTerminal.IN);
  siddhiDebugger.setDebuggerCallback(new SiddhiDebuggerCallback(){
    @Override public void debugEvent(    ComplexEvent event,    String queryName,    SiddhiDebugger.QueryTerminal queryTerminal,    SiddhiDebugger debugger){
      System.out.println(""String_Node_Str"" + queryName + ""String_Node_Str""+ queryTerminal);
      System.out.println(event);
      int count=debugEventCount.addAndGet(getCount(event));
      if (count == 2) {
        Map<String,Object> queryState=debugger.getQueryState(queryName);
        System.out.println(queryState);
        StreamEvent streamEvent=(StreamEvent)((Map<String,Object>)queryState.values().toArray()[0]).get(""String_Node_Str"");
        Assert.assertArrayEquals(streamEvent.getOutputData(),new Object[]{""String_Node_Str"",50.0f,null});
      }
      debugger.next();
    }
  }
);
  inputHandler.send(new Object[]{""String_Node_Str"",50f,60});
  inputHandler.send(new Object[]{""String_Node_Str"",70f,40});
  Thread.sleep(100);
  Assert.assertEquals(""String_Node_Str"",2,inEventCount.get());
  Assert.assertEquals(""String_Node_Str"",4,debugEventCount.get());
  executionPlanRuntime.shutdown();
}","@Test public void testDebugger9() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String cseEventStream=""String_Node_Str"" + ""String_Node_Str"";
  final String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(cseEventStream + query);
  executionPlanRuntime.addCallback(""String_Node_Str"",new StreamCallback(){
    @Override public void receive(    Event[] events){
      inEventCount.addAndGet(events.length);
    }
  }
);
  InputHandler inputHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
  SiddhiDebugger siddhiDebugger=executionPlanRuntime.debug();
  siddhiDebugger.acquireBreakPoint(""String_Node_Str"",SiddhiDebugger.QueryTerminal.IN);
  siddhiDebugger.setDebuggerCallback(new SiddhiDebuggerCallback(){
    @Override public void debugEvent(    ComplexEvent event,    String queryName,    SiddhiDebugger.QueryTerminal queryTerminal,    SiddhiDebugger debugger){
      System.out.println(""String_Node_Str"" + queryName + ""String_Node_Str""+ queryTerminal);
      System.out.println(event);
      int count=debugEventCount.addAndGet(getCount(event));
      if (count == 2) {
        Map<String,Object> queryState=debugger.getQueryState(queryName);
        System.out.println(queryState);
        System.out.println(queryState.values().toArray()[0]);
        StreamEvent streamEvent=null;
        for (        Map.Entry<String,Object> entry : queryState.entrySet()) {
          if (entry.getKey().startsWith(""String_Node_Str"")) {
            streamEvent=(StreamEvent)((Map<String,Object>)entry.getValue()).get(""String_Node_Str"");
            break;
          }
        }
        Assert.assertArrayEquals(streamEvent.getOutputData(),new Object[]{""String_Node_Str"",50.0f,null});
      }
      debugger.next();
    }
  }
);
  inputHandler.send(new Object[]{""String_Node_Str"",50f,60});
  inputHandler.send(new Object[]{""String_Node_Str"",70f,40});
  Thread.sleep(100);
  Assert.assertEquals(""String_Node_Str"",2,inEventCount.get());
  Assert.assertEquals(""String_Node_Str"",4,debugEventCount.get());
  executionPlanRuntime.shutdown();
}",0.909437559580553
28944,"@Test public void logicalTableTest5() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  try {
    executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timeStamp,      Event[] inEvents,      Event[] removeEvents){
        EventPrinter.print(timeStamp,inEvents,removeEvents);
        if (inEvents != null) {
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          removeEventCount=removeEventCount + removeEvents.length;
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStream=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    InputHandler checkStockStream=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    executionPlanRuntime.start();
    stockStream.send(new Object[]{""String_Node_Str"",55.6f,100l});
    stockStream.send(new Object[]{""String_Node_Str"",55.6f,50l});
    stockStream.send(new Object[]{""String_Node_Str"",55.6f,300l});
    checkStockStream.send(new Object[]{""String_Node_Str"",150l});
    List<Object[]> expected=Arrays.asList(new Object[]{""String_Node_Str"",50l},new Object[]{""String_Node_Str"",100l});
    SiddhiTestHelper.waitForEvents(100,2,inEventCount,60000);
    Assert.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isEventsMatch(inEventsList,expected));
    Assert.assertEquals(""String_Node_Str"",2,inEventCount.get());
    Assert.assertEquals(""String_Node_Str"",0,removeEventCount);
    Assert.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    executionPlanRuntime.shutdown();
  }
}","@Test public void logicalTableTest5() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  try {
    executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timeStamp,      Event[] inEvents,      Event[] removeEvents){
        EventPrinter.print(timeStamp,inEvents,removeEvents);
        if (inEvents != null) {
          for (          Event event : inEvents) {
            inEventsList.add(event.getData());
            inEventCount.incrementAndGet();
          }
          eventArrived=true;
        }
        if (removeEvents != null) {
          removeEventCount=removeEventCount + removeEvents.length;
        }
        eventArrived=true;
      }
    }
);
    InputHandler stockStream=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    InputHandler checkStockStream=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    executionPlanRuntime.start();
    stockStream.send(new Object[]{""String_Node_Str"",55.6f,100l});
    stockStream.send(new Object[]{""String_Node_Str"",55.6f,50l});
    stockStream.send(new Object[]{""String_Node_Str"",55.6f,300l});
    checkStockStream.send(new Object[]{""String_Node_Str"",150l});
    List<Object[]> expected=Arrays.asList(new Object[]{""String_Node_Str"",100l},new Object[]{""String_Node_Str"",50l});
    SiddhiTestHelper.waitForEvents(100,2,inEventCount,60000);
    Assert.assertEquals(""String_Node_Str"",true,SiddhiTestHelper.isUnsortedEventsMatch(inEventsList,expected));
    Assert.assertEquals(""String_Node_Str"",2,inEventCount.get());
    Assert.assertEquals(""String_Node_Str"",0,removeEventCount);
    Assert.assertEquals(""String_Node_Str"",true,eventArrived);
  }
  finally {
    executionPlanRuntime.shutdown();
  }
}",0.9968957871396896
28945,"/** 
 * {@inheritDoc}<p>The default implementation returns the result of calling  {@link #visitChildren} on {@code ctx}.</p>
 * @param ctx
 */
@Override public ExecutionPlan visitExecution_plan(@NotNull SiddhiQLParser.Execution_planContext ctx){
  ExecutionPlan executionPlan=ExecutionPlan.executionPlan();
  for (  SiddhiQLParser.Plan_annotationContext annotationContext : ctx.plan_annotation()) {
    executionPlan.annotation((Annotation)visit(annotationContext));
  }
  for (  SiddhiQLParser.Definition_streamContext streamContext : ctx.definition_stream()) {
    executionPlan.defineStream((StreamDefinition)visit(streamContext));
  }
  for (  SiddhiQLParser.Definition_tableContext tableContext : ctx.definition_table()) {
    executionPlan.defineTable((TableDefinition)visit(tableContext));
  }
  for (  SiddhiQLParser.Definition_functionContext functionContext : ctx.definition_function()) {
    executionPlan.defineFunction((FunctionDefinition)visit(functionContext));
  }
  for (  SiddhiQLParser.Definition_windowContext windowContext : ctx.definition_window()) {
    executionPlan.defineWindow((WindowDefinition)visit(windowContext));
  }
  for (  SiddhiQLParser.Execution_elementContext executionElementContext : ctx.execution_element()) {
    ExecutionElement executionElement=(ExecutionElement)visit(executionElementContext);
    if (executionElement instanceof Partition) {
      executionPlan.addPartition((Partition)executionElement);
    }
 else     if (executionElement instanceof Query) {
      executionPlan.addQuery((Query)executionElement);
    }
 else {
      throw newSiddhiParserException(ctx);
    }
  }
  for (  SiddhiQLParser.Definition_triggerContext triggerContext : ctx.definition_trigger()) {
    executionPlan.defineTrigger((TriggerDefinition)visit(triggerContext));
  }
  return executionPlan;
}","/** 
 * {@inheritDoc}<p>The default implementation returns the result of calling  {@link #visitChildren} on {@code ctx}.</p>
 * @param ctx
 */
@Override public ExecutionPlan visitExecution_plan(@NotNull SiddhiQLParser.Execution_planContext ctx){
  ExecutionPlan executionPlan=ExecutionPlan.executionPlan();
  for (  SiddhiQLParser.Plan_annotationContext annotationContext : ctx.plan_annotation()) {
    executionPlan.annotation((Annotation)visit(annotationContext));
  }
  for (  SiddhiQLParser.Definition_streamContext streamContext : ctx.definition_stream()) {
    executionPlan.defineStream((StreamDefinition)visit(streamContext));
  }
  for (  SiddhiQLParser.Definition_tableContext tableContext : ctx.definition_table()) {
    executionPlan.defineTable((TableDefinition)visit(tableContext));
  }
  for (  SiddhiQLParser.Definition_functionContext functionContext : ctx.definition_function()) {
    executionPlan.defineFunction((FunctionDefinition)visit(functionContext));
  }
  for (  SiddhiQLParser.Definition_windowContext windowContext : ctx.definition_window()) {
    executionPlan.defineWindow((WindowDefinition)visit(windowContext));
  }
  for (  SiddhiQLParser.Execution_elementContext executionElementContext : ctx.execution_element()) {
    ExecutionElement executionElement=(ExecutionElement)visit(executionElementContext);
    if (executionElement instanceof Partition) {
      executionPlan.addPartition((Partition)executionElement);
    }
 else     if (executionElement instanceof Query) {
      executionPlan.addQuery((Query)executionElement);
    }
 else     if (executionElement instanceof Subscription) {
      executionPlan.addSubscription((Subscription)executionElement);
    }
 else {
      throw newSiddhiParserException(ctx);
    }
  }
  for (  SiddhiQLParser.Definition_triggerContext triggerContext : ctx.definition_trigger()) {
    executionPlan.defineTrigger((TriggerDefinition)visit(triggerContext));
  }
  return executionPlan;
}",0.9649169084674228
28946,"public Mapping map(String rename,String mapping){
  attributeMappingList.add(new AttributeMapping(rename,mapping));
  return null;
}","public Mapping map(String rename,String mapping){
  attributeMappingList.add(new AttributeMapping(rename,mapping));
  return this;
}",0.9696969696969696
28947,"/** 
 * Parse a subscription and return corresponding QueryRuntime.
 * @param subscription         subscription to be parsed.
 * @param executionPlanContext associated Execution Plan context.
 * @param streamDefinitionMap  map containing user given stream definitions.
 * @param tableDefinitionMap   map containing table definitions.
 * @param eventTableMap        map containing event tables.
 * @return SubscriptionRuntime.
 */
public static SubscriptionRuntime parse(final Subscription subscription,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,LockSynchronizer lockSynchronizer){
  SubscriptionRuntime subscriptionRuntime;
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",subscription.getAnnotations());
    if (executionPlanContext.isStatsEnabled() && executionPlanContext.getStatisticsManager() != null) {
      if (nameElement != null) {
        String metricName=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getMatricPrefix() + SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_EXECUTION_PLANS+ SiddhiConstants.METRIC_DELIMITER+ executionPlanContext.getName()+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_SIDDHI+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_QUERIES+ SiddhiConstants.METRIC_DELIMITER+ nameElement.getValue();
        latencyTracker=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getFactory().createLatencyTracker(metricName,executionPlanContext.getStatisticsManager());
      }
    }
    Extension transportExtension=new Extension(){
      @Override public String getNamespace(){
        return SiddhiConstants.INPUT_TRANSPORT;
      }
      @Override public String getFunction(){
        return subscription.getTransport().getType();
      }
    }
;
    InputTransport inputTransport=(InputTransport)SiddhiClassLoader.loadExtensionImplementation(transportExtension,InputTransportExecutorExtensionHolder.getInstance(executionPlanContext));
    Extension mapperExtension=new Extension(){
      @Override public String getNamespace(){
        return SiddhiConstants.INPUT_MAPPER;
      }
      @Override public String getFunction(){
        return subscription.getMapping().getFormat();
      }
    }
;
    InputMapper inputMapper=(InputMapper)SiddhiClassLoader.loadExtensionImplementation(mapperExtension,InputMapperExecutorExtensionHolder.getInstance(executionPlanContext));
    StreamDefinition outputStreamDefinition=(StreamDefinition)streamDefinitionMap.get(subscription.getOutputStream().getId());
    if (outputStreamDefinition == null) {
      outputStreamDefinition=(StreamDefinition)windowDefinitionMap.get(subscription.getOutputStream().getId());
    }
    inputMapper.inferOutputStreamDefinition(outputStreamDefinition);
    OutputCallback outputCallback=OutputParser.constructOutputCallback(subscription.getOutputStream(),inputMapper.getOutputStreamDefinition(),eventTableMap,eventWindowMap,executionPlanContext,false);
    MetaStreamEvent metaStreamEvent=new MetaStreamEvent();
    metaStreamEvent.setOutputDefinition(inputMapper.getOutputStreamDefinition());
    for (    Attribute attribute : inputMapper.getOutputStreamDefinition().getAttributeList()) {
      metaStreamEvent.addOutputData(attribute);
    }
    inputMapper.init(outputCallback,metaStreamEvent);
    OutputRateLimiter outputRateLimiter=OutputParser.constructOutputRateLimiter(subscription.getOutputStream().getId(),subscription.getOutputRate(),false,false,executionPlanContext.getScheduledExecutorService(),executionPlanContext);
    subscriptionRuntime=new SubscriptionRuntime(inputTransport,inputMapper,outputRateLimiter,outputCallback);
    executionPlanContext.addEternalReferencedHolder(inputTransport);
    executionPlanContext.addEternalReferencedHolder(outputRateLimiter);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + nameElement + ""String_Node_Str""+ subscription.getTransport().getType());
    }
    outputRateLimiter.init(executionPlanContext,null);
    subscriptionRuntime.init(subscription.getTransport().getOptions(),executionPlanContext);
  }
 catch (  DuplicateDefinitionException e) {
    if (nameElement != null) {
      throw new DuplicateDefinitionException(e.getMessage() + ""String_Node_Str"" + nameElement.getValue(),e);
    }
 else {
      throw new DuplicateDefinitionException(e.getMessage(),e);
    }
  }
catch (  RuntimeException e) {
    if (nameElement != null) {
      throw new ExecutionPlanCreationException(e.getMessage() + ""String_Node_Str"" + nameElement.getValue(),e);
    }
 else {
      throw new ExecutionPlanCreationException(e.getMessage(),e);
    }
  }
  return subscriptionRuntime;
}","/** 
 * Parse a subscription and return corresponding QueryRuntime.
 * @param subscription         subscription to be parsed.
 * @param executionPlanContext associated Execution Plan context.
 * @param streamDefinitionMap  map containing user given stream definitions.
 * @param tableDefinitionMap   map containing table definitions.
 * @param eventTableMap        map containing event tables.
 * @return SubscriptionRuntime.
 */
public static SubscriptionRuntime parse(final Subscription subscription,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,LockSynchronizer lockSynchronizer){
  SubscriptionRuntime subscriptionRuntime;
  String subscriptionName=null;
  Element nameElement=null;
  LatencyTracker latencyTracker=null;
  LockWrapper lockWrapper=null;
  try {
    nameElement=AnnotationHelper.getAnnotationElement(""String_Node_Str"",""String_Node_Str"",subscription.getAnnotations());
    if (nameElement != null) {
      subscriptionName=nameElement.getValue();
    }
 else {
      subscriptionName=""String_Node_Str"" + UUID.randomUUID().toString();
    }
    if (executionPlanContext.isStatsEnabled() && executionPlanContext.getStatisticsManager() != null) {
      if (nameElement != null) {
        String metricName=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getMatricPrefix() + SiddhiConstants.METRIC_DELIMITER + SiddhiConstants.METRIC_INFIX_EXECUTION_PLANS+ SiddhiConstants.METRIC_DELIMITER+ executionPlanContext.getName()+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_SIDDHI+ SiddhiConstants.METRIC_DELIMITER+ SiddhiConstants.METRIC_INFIX_QUERIES+ SiddhiConstants.METRIC_DELIMITER+ subscriptionName;
        latencyTracker=executionPlanContext.getSiddhiContext().getStatisticsConfiguration().getFactory().createLatencyTracker(metricName,executionPlanContext.getStatisticsManager());
      }
    }
    Extension transportExtension=new Extension(){
      @Override public String getNamespace(){
        return SiddhiConstants.INPUT_TRANSPORT;
      }
      @Override public String getFunction(){
        return subscription.getTransport().getType();
      }
    }
;
    InputTransport inputTransport=(InputTransport)SiddhiClassLoader.loadExtensionImplementation(transportExtension,InputTransportExecutorExtensionHolder.getInstance(executionPlanContext));
    Extension mapperExtension=new Extension(){
      @Override public String getNamespace(){
        return SiddhiConstants.INPUT_MAPPER;
      }
      @Override public String getFunction(){
        return subscription.getMapping().getFormat();
      }
    }
;
    InputMapper inputMapper=(InputMapper)SiddhiClassLoader.loadExtensionImplementation(mapperExtension,InputMapperExecutorExtensionHolder.getInstance(executionPlanContext));
    StreamDefinition outputStreamDefinition=(StreamDefinition)streamDefinitionMap.get(subscription.getOutputStream().getId());
    if (outputStreamDefinition == null) {
      outputStreamDefinition=(StreamDefinition)windowDefinitionMap.get(subscription.getOutputStream().getId());
    }
    inputMapper.inferOutputStreamDefinition(outputStreamDefinition);
    OutputCallback outputCallback=OutputParser.constructOutputCallback(subscription.getOutputStream(),inputMapper.getOutputStreamDefinition(),eventTableMap,eventWindowMap,executionPlanContext,false,subscriptionName);
    MetaStreamEvent metaStreamEvent=new MetaStreamEvent();
    metaStreamEvent.setOutputDefinition(inputMapper.getOutputStreamDefinition());
    for (    Attribute attribute : inputMapper.getOutputStreamDefinition().getAttributeList()) {
      metaStreamEvent.addOutputData(attribute);
    }
    inputMapper.init(outputCallback,metaStreamEvent);
    OutputRateLimiter outputRateLimiter=OutputParser.constructOutputRateLimiter(subscription.getOutputStream().getId(),subscription.getOutputRate(),false,false,executionPlanContext.getScheduledExecutorService(),executionPlanContext,subscriptionName);
    subscriptionRuntime=new SubscriptionRuntime(inputTransport,inputMapper,outputRateLimiter,outputCallback);
    executionPlanContext.addEternalReferencedHolder(inputTransport);
    executionPlanContext.addEternalReferencedHolder(outputRateLimiter);
    if (outputRateLimiter instanceof WrappedSnapshotOutputRateLimiter) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + nameElement + ""String_Node_Str""+ subscription.getTransport().getType());
    }
    outputRateLimiter.init(executionPlanContext,null,subscriptionName);
    subscriptionRuntime.init(subscription.getTransport().getOptions(),executionPlanContext);
  }
 catch (  DuplicateDefinitionException e) {
    if (nameElement != null) {
      throw new DuplicateDefinitionException(e.getMessage() + ""String_Node_Str"" + subscriptionName,e);
    }
 else {
      throw new DuplicateDefinitionException(e.getMessage(),e);
    }
  }
catch (  RuntimeException e) {
    if (nameElement != null) {
      throw new ExecutionPlanCreationException(e.getMessage() + ""String_Node_Str"" + subscriptionName,e);
    }
 else {
      throw new ExecutionPlanCreationException(e.getMessage(),e);
    }
  }
  return subscriptionRuntime;
}",0.9646765214052602
28948,"/** 
 * Create and start disruptor based on annotations given in the streamDefinition.
 */
public synchronized void startProcessing(){
  if (!receivers.isEmpty() && async) {
    for (    Constructor constructor : Disruptor.class.getConstructors()) {
      if (constructor.getParameterTypes().length == 5) {
        ProducerType producerType=ProducerType.SINGLE;
        if (publishers.size() > 1) {
          producerType=ProducerType.MULTI;
        }
        disruptor=new Disruptor<Event>(new EventFactory(streamDefinition.getAttributeList().size()),bufferSize,executorService,producerType,new BlockingWaitStrategy());
        disruptor.handleExceptionsWith(executionPlanContext.getDisruptorExceptionHandler());
        break;
      }
    }
    if (disruptor == null) {
      disruptor=new Disruptor<Event>(new EventFactory(streamDefinition.getAttributeList().size()),bufferSize,executorService);
      disruptor.handleExceptionsWith(executionPlanContext.getDisruptorExceptionHandler());
    }
    for (    Receiver receiver : receivers) {
      disruptor.handleEventsWith(new StreamHandler(receiver));
    }
    ringBuffer=disruptor.start();
  }
 else {
    for (    Receiver receiver : receivers) {
      if (receiver instanceof StreamCallback) {
        ((StreamCallback)receiver).startProcessing();
      }
    }
  }
}","/** 
 * Create and start disruptor based on annotations given in the streamDefinition.
 */
public synchronized void startProcessing(){
  if (!receivers.isEmpty() && async) {
    for (    Constructor constructor : Disruptor.class.getConstructors()) {
      if (constructor.getParameterTypes().length == 5) {
        ProducerType producerType=ProducerType.MULTI;
        disruptor=new Disruptor<Event>(new EventFactory(streamDefinition.getAttributeList().size()),bufferSize,executorService,producerType,new BlockingWaitStrategy());
        disruptor.handleExceptionsWith(executionPlanContext.getDisruptorExceptionHandler());
        break;
      }
    }
    if (disruptor == null) {
      disruptor=new Disruptor<Event>(new EventFactory(streamDefinition.getAttributeList().size()),bufferSize,executorService);
      disruptor.handleExceptionsWith(executionPlanContext.getDisruptorExceptionHandler());
    }
    for (    Receiver receiver : receivers) {
      disruptor.handleEventsWith(new StreamHandler(receiver));
    }
    ringBuffer=disruptor.start();
  }
 else {
    for (    Receiver receiver : receivers) {
      if (receiver instanceof StreamCallback) {
        ((StreamCallback)receiver).startProcessing();
      }
    }
  }
}",0.9644114196323818
28949,"/** 
 * Helper method to clean/refactor MetaStreamEvent
 * @param metaStreamEvent MetaStreamEvent
 */
private static synchronized void reduceStreamAttributes(MetaStreamEvent metaStreamEvent){
  Set<Attribute> duplicateFinder=new HashSet<Attribute>();
  for (Iterator<Attribute> iterator=metaStreamEvent.getOutputData().iterator(); iterator.hasNext(); ) {
    Attribute attribute=iterator.next();
    if (attribute != null) {
      if (duplicateFinder.add(attribute)) {
        if (metaStreamEvent.getBeforeWindowData().contains(attribute)) {
          metaStreamEvent.getBeforeWindowData().remove(attribute);
        }
        if (metaStreamEvent.getOnAfterWindowData().contains(attribute)) {
          metaStreamEvent.getOnAfterWindowData().remove(attribute);
        }
      }
 else {
        iterator.remove();
      }
    }
  }
  duplicateFinder=new HashSet<Attribute>();
  for (Iterator<Attribute> iterator=metaStreamEvent.getOnAfterWindowData().iterator(); iterator.hasNext(); ) {
    Attribute attribute=iterator.next();
    if (attribute != null) {
      if (duplicateFinder.add(attribute)) {
        if (metaStreamEvent.getBeforeWindowData().contains(attribute)) {
          metaStreamEvent.getBeforeWindowData().remove(attribute);
        }
      }
 else {
        iterator.remove();
      }
    }
  }
  for (Iterator<Attribute> iterator=metaStreamEvent.getBeforeWindowData().iterator(); iterator.hasNext(); ) {
    Attribute attribute=iterator.next();
    if (attribute != null) {
      if (!duplicateFinder.add(attribute)) {
        iterator.remove();
      }
    }
  }
}","/** 
 * Helper method to clean/refactor MetaStreamEvent
 * @param metaStreamEvent MetaStreamEvent
 */
private static synchronized void reduceStreamAttributes(MetaStreamEvent metaStreamEvent){
  for (  Attribute attribute : metaStreamEvent.getOutputData()) {
    if (metaStreamEvent.getBeforeWindowData().contains(attribute)) {
      metaStreamEvent.getBeforeWindowData().remove(attribute);
    }
    if (metaStreamEvent.getOnAfterWindowData().contains(attribute)) {
      metaStreamEvent.getOnAfterWindowData().remove(attribute);
    }
  }
  Set<Attribute> duplicateFinder=new HashSet<Attribute>();
  for (Iterator<Attribute> iterator=metaStreamEvent.getOnAfterWindowData().iterator(); iterator.hasNext(); ) {
    Attribute attribute=iterator.next();
    if (attribute != null) {
      if (duplicateFinder.add(attribute)) {
        if (metaStreamEvent.getBeforeWindowData().contains(attribute)) {
          metaStreamEvent.getBeforeWindowData().remove(attribute);
        }
      }
 else {
        iterator.remove();
      }
    }
  }
  for (Iterator<Attribute> iterator=metaStreamEvent.getBeforeWindowData().iterator(); iterator.hasNext(); ) {
    Attribute attribute=iterator.next();
    if (attribute != null) {
      if (!duplicateFinder.add(attribute)) {
        iterator.remove();
      }
    }
  }
}",0.4963655244029076
28950,"@Override public void receive(long timeStamp,Event[] inEvents,Event[] removeEvents){
  EventPrinter.print(timeStamp,inEvents,removeEvents);
  count=count + inEvents.length;
  eventArrived=true;
}","@Override public void receive(long timeStamp,Event[] inEvents,Event[] removeEvents){
  EventPrinter.print(timeStamp,inEvents,removeEvents);
  Assert.assertTrue(""String_Node_Str"".equals(inEvents[0].getData(2)));
  count=count + inEvents.length;
  eventArrived=true;
}",0.8459869848156182
28951,"/** 
 * Process the handed StreamEvent
 * @param complexEventChunk event chunk to be processed
 */
@Override public void process(ComplexEventChunk complexEventChunk){
  if (trigger) {
    ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(true);
    StateEvent joinStateEvent=new StateEvent(2,0);
    StreamEvent nextEvent=(StreamEvent)complexEventChunk.getFirst();
    complexEventChunk.clear();
    while (nextEvent != null) {
      StreamEvent streamEvent=nextEvent;
      nextEvent=streamEvent.getNext();
      streamEvent.setNext(null);
      joinLockWrapper.lock();
      try {
        ComplexEvent.Type eventType=streamEvent.getType();
        if (eventType == ComplexEvent.Type.TIMER) {
          continue;
        }
 else         if (eventType == ComplexEvent.Type.RESET) {
          if (outerJoinProcessor && !leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(null,streamEvent,eventType));
          }
 else           if (outerJoinProcessor && leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(streamEvent,null,eventType));
          }
        }
 else {
          joinStateEvent.setEvent(matchingStreamIndex,streamEvent);
          StreamEvent foundStreamEvent=findableProcessor.find(joinStateEvent,finder);
          joinStateEvent.setEvent(matchingStreamIndex,null);
          if (foundStreamEvent == null) {
            if (outerJoinProcessor && !leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
            }
 else             if (outerJoinProcessor && leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
            }
          }
 else {
            while (foundStreamEvent != null) {
              if (!leftJoinProcessor) {
                returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
              }
 else {
                returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
              }
              foundStreamEvent=foundStreamEvent.getNext();
            }
          }
        }
      }
  finally {
        joinLockWrapper.unlock();
      }
      if (returnEventChunk.getFirst() != null) {
        selector.process(returnEventChunk);
        returnEventChunk.clear();
      }
    }
  }
}","/** 
 * Process the handed StreamEvent
 * @param complexEventChunk event chunk to be processed
 */
@Override public void process(ComplexEventChunk complexEventChunk){
  if (trigger) {
    ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(true);
    StateEvent joinStateEvent=new StateEvent(2,0);
    StreamEvent nextEvent=(StreamEvent)complexEventChunk.getFirst();
    complexEventChunk.clear();
    while (nextEvent != null) {
      StreamEvent streamEvent=nextEvent;
      nextEvent=streamEvent.getNext();
      streamEvent.setNext(null);
      joinLockWrapper.lock();
      try {
        ComplexEvent.Type eventType=streamEvent.getType();
        if (eventType == ComplexEvent.Type.TIMER) {
          continue;
        }
 else         if (eventType == ComplexEvent.Type.RESET) {
          if (outerJoinProcessor && !leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(null,streamEvent,eventType));
          }
 else           if (outerJoinProcessor && leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(streamEvent,null,eventType));
          }
        }
 else {
          joinStateEvent.setEvent(matchingStreamIndex,streamEvent);
          StreamEvent foundStreamEvent=findableProcessor.find(joinStateEvent,finder);
          joinStateEvent.setEvent(matchingStreamIndex,null);
          if (foundStreamEvent == null) {
            if (outerJoinProcessor && !leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
            }
 else             if (outerJoinProcessor && leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
            }
          }
 else {
            while (foundStreamEvent != null) {
              if (!leftJoinProcessor) {
                returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
              }
 else {
                returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
              }
              foundStreamEvent=foundStreamEvent.getNext();
            }
          }
        }
      }
  finally {
        joinLockWrapper.unlock();
      }
      if (returnEventChunk.getFirst() != null) {
        selector.process(returnEventChunk);
        returnEventChunk.clear();
      }
    }
  }
 else {
    if (preJoinProcessor) {
      joinLockWrapper.lock();
      try {
        nextProcessor.process(complexEventChunk);
      }
  finally {
        joinLockWrapper.unlock();
      }
    }
  }
}",0.9596122778675282
28952,"/** 
 * Clone a copy of processor
 * @param key partition key
 * @return Cloned Processor
 */
@Override public Processor cloneProcessor(String key){
  JoinProcessor joinProcessor=new JoinProcessor(leftJoinProcessor,outerJoinProcessor,matchingStreamIndex);
  joinProcessor.setTrigger(trigger);
  if (trigger) {
    joinProcessor.setFinder(finder.cloneFinder(key));
  }
  return joinProcessor;
}","/** 
 * Clone a copy of processor
 * @param key partition key
 * @return Cloned Processor
 */
@Override public Processor cloneProcessor(String key){
  JoinProcessor joinProcessor=new JoinProcessor(leftJoinProcessor,preJoinProcessor,outerJoinProcessor,matchingStreamIndex);
  joinProcessor.setTrigger(trigger);
  if (trigger) {
    joinProcessor.setFinder(finder.cloneFinder(key));
  }
  return joinProcessor;
}",0.978829389788294
28953,"public JoinProcessor(boolean leftJoinProcessor,boolean outerJoinProcessor,int matchingStreamIndex){
  this.leftJoinProcessor=leftJoinProcessor;
  this.outerJoinProcessor=outerJoinProcessor;
  this.matchingStreamIndex=matchingStreamIndex;
}","public JoinProcessor(boolean leftJoinProcessor,boolean preJoinProcessor,boolean outerJoinProcessor,int matchingStreamIndex){
  this.leftJoinProcessor=leftJoinProcessor;
  this.preJoinProcessor=preJoinProcessor;
  this.outerJoinProcessor=outerJoinProcessor;
  this.matchingStreamIndex=matchingStreamIndex;
}",0.8770642201834863
28954,"@Override public StreamRuntime clone(String key){
  JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
  for (  SingleStreamRuntime singleStreamRuntime : singleStreamRuntimeList) {
    joinStreamRuntime.addRuntime((SingleStreamRuntime)singleStreamRuntime.clone(key));
  }
  SingleStreamRuntime leftSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(0);
  SingleStreamRuntime rightSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(1);
  Processor leftWindowProcessor=leftSingleStreamRuntime.getProcessorChain();
  Processor leftPostJoinProcessor=leftWindowProcessor.getNextProcessor();
  while (!(leftPostJoinProcessor instanceof JoinProcessor)) {
    leftWindowProcessor=leftWindowProcessor.getNextProcessor();
    leftPostJoinProcessor=leftWindowProcessor.getNextProcessor();
  }
  Processor rightWindowProcessor=rightSingleStreamRuntime.getProcessorChain();
  Processor rightPostJoinProcessor=rightWindowProcessor.getNextProcessor();
  while (!(rightPostJoinProcessor instanceof JoinProcessor)) {
    rightWindowProcessor=rightWindowProcessor.getNextProcessor();
    rightPostJoinProcessor=rightWindowProcessor.getNextProcessor();
  }
  ((JoinProcessor)rightPostJoinProcessor).setFindableProcessor((FindableProcessor)leftWindowProcessor);
  ((JoinProcessor)leftPostJoinProcessor).setFindableProcessor((FindableProcessor)rightWindowProcessor);
  return joinStreamRuntime;
}","@Override public StreamRuntime clone(String key){
  JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
  for (  SingleStreamRuntime singleStreamRuntime : singleStreamRuntimeList) {
    joinStreamRuntime.addRuntime((SingleStreamRuntime)singleStreamRuntime.clone(key));
  }
  SingleStreamRuntime leftSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(0);
  SingleStreamRuntime rightSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(1);
  Processor lastLeftProcessor=leftSingleStreamRuntime.getProcessorChain();
  while (!(lastLeftProcessor instanceof JoinProcessor)) {
    lastLeftProcessor=lastLeftProcessor.getNextProcessor();
  }
  JoinProcessor leftPreJoinProcessor=(JoinProcessor)lastLeftProcessor;
  WindowProcessor leftWindowProcessor=(WindowProcessor)leftPreJoinProcessor.getNextProcessor();
  JoinProcessor leftPostJoinProcessor=(JoinProcessor)leftWindowProcessor.getNextProcessor();
  Processor lastRightProcessor=rightSingleStreamRuntime.getProcessorChain();
  while (!(lastRightProcessor instanceof JoinProcessor)) {
    lastRightProcessor=lastRightProcessor.getNextProcessor();
  }
  JoinProcessor rightPreJoinProcessor=(JoinProcessor)lastRightProcessor;
  WindowProcessor rightWindowProcessor=(WindowProcessor)rightPreJoinProcessor.getNextProcessor();
  JoinProcessor rightPostJoinProcessor=(JoinProcessor)rightWindowProcessor.getNextProcessor();
  rightPostJoinProcessor.setFindableProcessor((FindableProcessor)leftWindowProcessor);
  rightPreJoinProcessor.setFindableProcessor((FindableProcessor)leftWindowProcessor);
  leftPreJoinProcessor.setFindableProcessor((FindableProcessor)rightWindowProcessor);
  leftPostJoinProcessor.setFindableProcessor((FindableProcessor)rightWindowProcessor);
  return joinStreamRuntime;
}",0.401468788249694
28955,"public static StreamRuntime parseInputStream(JoinInputStream joinInputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  ProcessStreamReceiver leftProcessStreamReceiver;
  ProcessStreamReceiver rightProcessStreamReceiver;
  MetaStreamEvent leftMetaStreamEvent=new MetaStreamEvent();
  MetaStreamEvent rightMetaStreamEvent=new MetaStreamEvent();
  String leftInputStreamId=((SingleInputStream)joinInputStream.getLeftInputStream()).getStreamId();
  String rightInputStreamId=((SingleInputStream)joinInputStream.getRightInputStream()).getStreamId();
  boolean leftOuterJoinProcessor=false;
  boolean rightOuterJoinProcessor=false;
  if (joinInputStream.getAllStreamIds().size() == 2) {
    if (windowDefinitionMap.containsKey(leftInputStreamId)) {
      leftMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(leftInputStreamId)) {
      if (tableDefinitionMap.containsKey(leftInputStreamId)) {
        leftMetaStreamEvent.setTableEvent(true);
      }
    }
    if (windowDefinitionMap.containsKey(rightInputStreamId)) {
      rightMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(rightInputStreamId)) {
      if (tableDefinitionMap.containsKey(rightInputStreamId)) {
        rightMetaStreamEvent.setTableEvent(true);
      }
    }
    leftProcessStreamReceiver=new ProcessStreamReceiver(leftInputStreamId,latencyTracker);
    leftProcessStreamReceiver.setBatchProcessingAllowed(leftMetaStreamEvent.isWindowEvent());
    rightProcessStreamReceiver=new ProcessStreamReceiver(rightInputStreamId,latencyTracker);
    rightProcessStreamReceiver.setBatchProcessingAllowed(rightMetaStreamEvent.isWindowEvent());
    if (leftMetaStreamEvent.isTableEvent() && rightMetaStreamEvent.isTableEvent()) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
 else {
    if (windowDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      leftMetaStreamEvent.setWindowEvent(true);
      rightMetaStreamEvent.setWindowEvent(true);
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),1,latencyTracker);
      rightProcessStreamReceiver.setBatchProcessingAllowed(true);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else     if (streamDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),2,latencyTracker);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
  SingleStreamRuntime leftStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getLeftInputStream(),executionPlanContext,executors,streamDefinitionMap,!leftMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!leftMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,leftMetaStreamEvent,leftProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (  VariableExpressionExecutor variableExpressionExecutor : executors) {
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=0;
  }
  int size=executors.size();
  SingleStreamRuntime rightStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getRightInputStream(),executionPlanContext,executors,streamDefinitionMap,!rightMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!rightMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,rightMetaStreamEvent,rightProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (int i=size; i < executors.size(); i++) {
    VariableExpressionExecutor variableExpressionExecutor=executors.get(i);
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=1;
  }
  if (leftMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(leftInputStreamId));
    tableWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (leftMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(leftInputStreamId));
    windowWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  if (rightMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(rightInputStreamId));
    tableWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (rightMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(rightInputStreamId));
    windowWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  MetaStateEvent metaStateEvent=new MetaStateEvent(2);
  metaStateEvent.addEvent(leftMetaStreamEvent);
  metaStateEvent.addEvent(rightMetaStreamEvent);
switch (joinInputStream.getType()) {
case FULL_OUTER_JOIN:
    leftOuterJoinProcessor=true;
case RIGHT_OUTER_JOIN:
  rightOuterJoinProcessor=true;
break;
case LEFT_OUTER_JOIN:
leftOuterJoinProcessor=true;
break;
}
JoinProcessor leftPostJoinProcessor=new JoinProcessor(true,leftOuterJoinProcessor,0);
JoinProcessor rightPostJoinProcessor=new JoinProcessor(false,rightOuterJoinProcessor,1);
FindableProcessor leftFindableProcessor=insertJoinProcessorsAndGetFindable(leftPostJoinProcessor,leftStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
FindableProcessor rightFindableProcessor=insertJoinProcessorsAndGetFindable(rightPostJoinProcessor,rightStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
leftPostJoinProcessor.setFindableProcessor(rightFindableProcessor);
rightPostJoinProcessor.setFindableProcessor(leftFindableProcessor);
Expression compareCondition=joinInputStream.getOnCompare();
if (compareCondition == null) {
compareCondition=Expression.value(true);
}
if (joinInputStream.getWithin() != null) {
throw new OperationNotSupportedException(""String_Node_Str"" + ((TimeConstant)joinInputStream.getWithin()).getValue() + ""String_Node_Str"");
}
MatchingMetaStateHolder rightMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,rightMetaStreamEvent.getLastInputDefinition());
Finder leftFinder=rightFindableProcessor.constructFinder(compareCondition,rightMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
MatchingMetaStateHolder leftMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,1,leftMetaStreamEvent.getLastInputDefinition());
Finder rightFinder=leftFindableProcessor.constructFinder(compareCondition,leftMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.LEFT) {
rightPostJoinProcessor.setTrigger(true);
rightPostJoinProcessor.setFinder(rightFinder);
}
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.RIGHT) {
leftPostJoinProcessor.setTrigger(true);
leftPostJoinProcessor.setFinder(leftFinder);
}
JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
joinStreamRuntime.addRuntime(leftStreamRuntime);
joinStreamRuntime.addRuntime(rightStreamRuntime);
return joinStreamRuntime;
}","public static StreamRuntime parseInputStream(JoinInputStream joinInputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  ProcessStreamReceiver leftProcessStreamReceiver;
  ProcessStreamReceiver rightProcessStreamReceiver;
  MetaStreamEvent leftMetaStreamEvent=new MetaStreamEvent();
  MetaStreamEvent rightMetaStreamEvent=new MetaStreamEvent();
  String leftInputStreamId=((SingleInputStream)joinInputStream.getLeftInputStream()).getStreamId();
  String rightInputStreamId=((SingleInputStream)joinInputStream.getRightInputStream()).getStreamId();
  boolean leftOuterJoinProcessor=false;
  boolean rightOuterJoinProcessor=false;
  if (joinInputStream.getAllStreamIds().size() == 2) {
    if (windowDefinitionMap.containsKey(leftInputStreamId)) {
      leftMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(leftInputStreamId)) {
      if (tableDefinitionMap.containsKey(leftInputStreamId)) {
        leftMetaStreamEvent.setTableEvent(true);
      }
    }
    if (windowDefinitionMap.containsKey(rightInputStreamId)) {
      rightMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(rightInputStreamId)) {
      if (tableDefinitionMap.containsKey(rightInputStreamId)) {
        rightMetaStreamEvent.setTableEvent(true);
      }
    }
    leftProcessStreamReceiver=new ProcessStreamReceiver(leftInputStreamId,latencyTracker);
    leftProcessStreamReceiver.setBatchProcessingAllowed(leftMetaStreamEvent.isWindowEvent());
    rightProcessStreamReceiver=new ProcessStreamReceiver(rightInputStreamId,latencyTracker);
    rightProcessStreamReceiver.setBatchProcessingAllowed(rightMetaStreamEvent.isWindowEvent());
    if (leftMetaStreamEvent.isTableEvent() && rightMetaStreamEvent.isTableEvent()) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
 else {
    if (windowDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      leftMetaStreamEvent.setWindowEvent(true);
      rightMetaStreamEvent.setWindowEvent(true);
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),1,latencyTracker);
      rightProcessStreamReceiver.setBatchProcessingAllowed(true);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else     if (streamDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),2,latencyTracker);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
  SingleStreamRuntime leftStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getLeftInputStream(),executionPlanContext,executors,streamDefinitionMap,!leftMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!leftMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,leftMetaStreamEvent,leftProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (  VariableExpressionExecutor variableExpressionExecutor : executors) {
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=0;
  }
  int size=executors.size();
  SingleStreamRuntime rightStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getRightInputStream(),executionPlanContext,executors,streamDefinitionMap,!rightMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!rightMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,rightMetaStreamEvent,rightProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (int i=size; i < executors.size(); i++) {
    VariableExpressionExecutor variableExpressionExecutor=executors.get(i);
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=1;
  }
  if (leftMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(leftInputStreamId));
    tableWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (leftMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(leftInputStreamId));
    windowWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  if (rightMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(rightInputStreamId));
    tableWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (rightMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(rightInputStreamId));
    windowWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  MetaStateEvent metaStateEvent=new MetaStateEvent(2);
  metaStateEvent.addEvent(leftMetaStreamEvent);
  metaStateEvent.addEvent(rightMetaStreamEvent);
switch (joinInputStream.getType()) {
case FULL_OUTER_JOIN:
    leftOuterJoinProcessor=true;
case RIGHT_OUTER_JOIN:
  rightOuterJoinProcessor=true;
break;
case LEFT_OUTER_JOIN:
leftOuterJoinProcessor=true;
break;
}
JoinProcessor leftPreJoinProcessor=new JoinProcessor(true,true,leftOuterJoinProcessor,0);
JoinProcessor leftPostJoinProcessor=new JoinProcessor(true,false,leftOuterJoinProcessor,0);
FindableProcessor leftFindableProcessor=insertJoinProcessorsAndGetFindable(leftPreJoinProcessor,leftPostJoinProcessor,leftStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
JoinProcessor rightPreJoinProcessor=new JoinProcessor(false,true,rightOuterJoinProcessor,1);
JoinProcessor rightPostJoinProcessor=new JoinProcessor(false,false,rightOuterJoinProcessor,1);
FindableProcessor rightFindableProcessor=insertJoinProcessorsAndGetFindable(rightPreJoinProcessor,rightPostJoinProcessor,rightStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
leftPreJoinProcessor.setFindableProcessor(rightFindableProcessor);
leftPostJoinProcessor.setFindableProcessor(rightFindableProcessor);
rightPreJoinProcessor.setFindableProcessor(leftFindableProcessor);
rightPostJoinProcessor.setFindableProcessor(leftFindableProcessor);
Expression compareCondition=joinInputStream.getOnCompare();
if (compareCondition == null) {
compareCondition=Expression.value(true);
}
if (joinInputStream.getWithin() != null) {
throw new OperationNotSupportedException(""String_Node_Str"" + ((TimeConstant)joinInputStream.getWithin()).getValue() + ""String_Node_Str"");
}
MatchingMetaStateHolder rightMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,rightMetaStreamEvent.getLastInputDefinition());
Finder leftFinder=rightFindableProcessor.constructFinder(compareCondition,rightMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
MatchingMetaStateHolder leftMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,1,leftMetaStreamEvent.getLastInputDefinition());
Finder rightFinder=leftFindableProcessor.constructFinder(compareCondition,leftMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.LEFT) {
rightPreJoinProcessor.setTrigger(false);
rightPreJoinProcessor.setFinder(rightFinder);
rightPostJoinProcessor.setTrigger(true);
rightPostJoinProcessor.setFinder(rightFinder);
}
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.RIGHT) {
leftPreJoinProcessor.setTrigger(false);
leftPreJoinProcessor.setFinder(leftFinder);
leftPostJoinProcessor.setTrigger(true);
leftPostJoinProcessor.setFinder(leftFinder);
}
JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
joinStreamRuntime.addRuntime(leftStreamRuntime);
joinStreamRuntime.addRuntime(rightStreamRuntime);
return joinStreamRuntime;
}",0.9528825785767449
28956,"private static FindableProcessor insertJoinProcessorsAndGetFindable(JoinProcessor postJoinProcessor,SingleStreamRuntime streamRuntime,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents){
  Processor lastProcessor=streamRuntime.getProcessorChain();
  Processor prevLastProcessor=null;
  if (lastProcessor != null) {
    while (lastProcessor.getNextProcessor() != null) {
      prevLastProcessor=lastProcessor;
      lastProcessor=lastProcessor.getNextProcessor();
    }
  }
  if (lastProcessor == null) {
    WindowProcessor windowProcessor=new LengthWindowProcessor();
    ExpressionExecutor[] expressionExecutors=new ExpressionExecutor[1];
    expressionExecutors[0]=new ConstantExpressionExecutor(0,Attribute.Type.INT);
    windowProcessor.initProcessor(((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition(),expressionExecutors,executionPlanContext,outputExpectsExpiredEvents);
    lastProcessor=windowProcessor;
  }
  if (lastProcessor instanceof FindableProcessor) {
    if (prevLastProcessor == null) {
      streamRuntime.setProcessorChain(lastProcessor);
    }
    lastProcessor.setNextProcessor(postJoinProcessor);
    return (FindableProcessor)lastProcessor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + ((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition().getId() + ""String_Node_Str""+ lastProcessor.getClass().getCanonicalName()+ ""String_Node_Str""+ FindableProcessor.class.getCanonicalName()+ ""String_Node_Str"");
  }
}","private static FindableProcessor insertJoinProcessorsAndGetFindable(JoinProcessor preJoinProcessor,JoinProcessor postJoinProcessor,SingleStreamRuntime streamRuntime,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents){
  Processor lastProcessor=streamRuntime.getProcessorChain();
  Processor prevLastProcessor=null;
  if (lastProcessor != null) {
    while (lastProcessor.getNextProcessor() != null) {
      prevLastProcessor=lastProcessor;
      lastProcessor=lastProcessor.getNextProcessor();
    }
  }
  if (lastProcessor == null) {
    WindowProcessor windowProcessor=new LengthWindowProcessor();
    ExpressionExecutor[] expressionExecutors=new ExpressionExecutor[1];
    expressionExecutors[0]=new ConstantExpressionExecutor(0,Attribute.Type.INT);
    windowProcessor.initProcessor(((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition(),expressionExecutors,executionPlanContext,outputExpectsExpiredEvents);
    lastProcessor=windowProcessor;
  }
  if (lastProcessor instanceof FindableProcessor) {
    if (prevLastProcessor != null) {
      prevLastProcessor.setNextProcessor(preJoinProcessor);
    }
 else {
      streamRuntime.setProcessorChain(preJoinProcessor);
    }
    preJoinProcessor.setNextProcessor(lastProcessor);
    lastProcessor.setNextProcessor(postJoinProcessor);
    return (FindableProcessor)lastProcessor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + ((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition().getId() + ""String_Node_Str""+ lastProcessor.getClass().getCanonicalName()+ ""String_Node_Str""+ FindableProcessor.class.getCanonicalName()+ ""String_Node_Str"");
  }
}",0.94320987654321
28957,"/** 
 * Process the handed StreamEvent
 * @param complexEventChunk event chunk to be processed
 */
@Override public void process(ComplexEventChunk complexEventChunk){
  if (trigger) {
    ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(true);
    StateEvent joinStateEvent=new StateEvent(2,0);
    StreamEvent nextEvent=(StreamEvent)complexEventChunk.getFirst();
    complexEventChunk.clear();
    while (nextEvent != null) {
      StreamEvent streamEvent=nextEvent;
      nextEvent=streamEvent.getNext();
      streamEvent.setNext(null);
      joinLock.lock();
      try {
        ComplexEvent.Type eventType=streamEvent.getType();
        if (eventType == ComplexEvent.Type.TIMER) {
          continue;
        }
 else         if (eventType == ComplexEvent.Type.RESET) {
          if (outerJoinProcessor && !leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(null,streamEvent,eventType));
          }
 else           if (outerJoinProcessor && leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(streamEvent,null,eventType));
          }
        }
 else {
          joinStateEvent.setEvent(matchingStreamIndex,streamEvent);
          StreamEvent foundStreamEvent=findableProcessor.find(joinStateEvent,finder);
          joinStateEvent.setEvent(matchingStreamIndex,null);
          if (foundStreamEvent == null) {
            if (outerJoinProcessor && !leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
            }
 else             if (outerJoinProcessor && leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
            }
          }
 else {
            while (foundStreamEvent != null) {
              if (!leftJoinProcessor) {
                returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
              }
 else {
                returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
              }
              foundStreamEvent=foundStreamEvent.getNext();
            }
          }
        }
      }
  finally {
        joinLock.unlock();
      }
      if (returnEventChunk.getFirst() != null) {
        selector.process(returnEventChunk);
        returnEventChunk.clear();
      }
    }
  }
 else {
    if (preJoinProcessor) {
      joinLock.lock();
      try {
        nextProcessor.process(complexEventChunk);
      }
  finally {
        joinLock.unlock();
      }
    }
  }
}","/** 
 * Process the handed StreamEvent
 * @param complexEventChunk event chunk to be processed
 */
@Override public void process(ComplexEventChunk complexEventChunk){
  if (trigger) {
    ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(true);
    StateEvent joinStateEvent=new StateEvent(2,0);
    StreamEvent nextEvent=(StreamEvent)complexEventChunk.getFirst();
    complexEventChunk.clear();
    while (nextEvent != null) {
      StreamEvent streamEvent=nextEvent;
      nextEvent=streamEvent.getNext();
      streamEvent.setNext(null);
      joinLockWrapper.lock();
      try {
        ComplexEvent.Type eventType=streamEvent.getType();
        if (eventType == ComplexEvent.Type.TIMER) {
          continue;
        }
 else         if (eventType == ComplexEvent.Type.RESET) {
          if (outerJoinProcessor && !leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(null,streamEvent,eventType));
          }
 else           if (outerJoinProcessor && leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(streamEvent,null,eventType));
          }
        }
 else {
          joinStateEvent.setEvent(matchingStreamIndex,streamEvent);
          StreamEvent foundStreamEvent=findableProcessor.find(joinStateEvent,finder);
          joinStateEvent.setEvent(matchingStreamIndex,null);
          if (foundStreamEvent == null) {
            if (outerJoinProcessor && !leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
            }
 else             if (outerJoinProcessor && leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
            }
          }
 else {
            while (foundStreamEvent != null) {
              if (!leftJoinProcessor) {
                returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
              }
 else {
                returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
              }
              foundStreamEvent=foundStreamEvent.getNext();
            }
          }
        }
      }
  finally {
        joinLockWrapper.unlock();
      }
      if (returnEventChunk.getFirst() != null) {
        selector.process(returnEventChunk);
        returnEventChunk.clear();
      }
    }
  }
}",0.9593826157595452
28958,"public void setJoinLock(Lock joinLock){
  this.joinLock=joinLock;
}","public void setJoinLock(LockWrapper joinLockWrapper){
  this.joinLockWrapper=joinLockWrapper;
}",0.8271604938271605
28959,"/** 
 * Clone a copy of processor
 * @param key partition key
 * @return Cloned Processor
 */
@Override public Processor cloneProcessor(String key){
  JoinProcessor joinProcessor=new JoinProcessor(leftJoinProcessor,preJoinProcessor,outerJoinProcessor,matchingStreamIndex);
  joinProcessor.setTrigger(trigger);
  if (trigger) {
    joinProcessor.setFinder(finder.cloneFinder(key));
  }
  return joinProcessor;
}","/** 
 * Clone a copy of processor
 * @param key partition key
 * @return Cloned Processor
 */
@Override public Processor cloneProcessor(String key){
  JoinProcessor joinProcessor=new JoinProcessor(leftJoinProcessor,outerJoinProcessor,matchingStreamIndex);
  joinProcessor.setTrigger(trigger);
  if (trigger) {
    joinProcessor.setFinder(finder.cloneFinder(key));
  }
  return joinProcessor;
}",0.978829389788294
28960,"public JoinProcessor(boolean leftJoinProcessor,boolean preJoinProcessor,boolean outerJoinProcessor,int matchingStreamIndex){
  this.leftJoinProcessor=leftJoinProcessor;
  this.preJoinProcessor=preJoinProcessor;
  this.outerJoinProcessor=outerJoinProcessor;
  this.matchingStreamIndex=matchingStreamIndex;
}","public JoinProcessor(boolean leftJoinProcessor,boolean outerJoinProcessor,int matchingStreamIndex){
  this.leftJoinProcessor=leftJoinProcessor;
  this.outerJoinProcessor=outerJoinProcessor;
  this.matchingStreamIndex=matchingStreamIndex;
}",0.8770642201834863
28961,"@Override public StreamRuntime clone(String key){
  Lock joinLock=new ReentrantLock();
  JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
  for (  SingleStreamRuntime singleStreamRuntime : singleStreamRuntimeList) {
    joinStreamRuntime.addRuntime((SingleStreamRuntime)singleStreamRuntime.clone(key));
  }
  SingleStreamRuntime leftSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(0);
  SingleStreamRuntime rightSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(1);
  Processor lastLeftProcessor=leftSingleStreamRuntime.getProcessorChain();
  while (!(lastLeftProcessor instanceof JoinProcessor)) {
    lastLeftProcessor=lastLeftProcessor.getNextProcessor();
  }
  JoinProcessor leftPreJoinProcessor=(JoinProcessor)lastLeftProcessor;
  WindowProcessor leftWindowProcessor=(WindowProcessor)leftPreJoinProcessor.getNextProcessor();
  JoinProcessor leftPostJoinProcessor=(JoinProcessor)leftWindowProcessor.getNextProcessor();
  Processor lastRightProcessor=rightSingleStreamRuntime.getProcessorChain();
  while (!(lastRightProcessor instanceof JoinProcessor)) {
    lastRightProcessor=lastRightProcessor.getNextProcessor();
  }
  JoinProcessor rightPreJoinProcessor=(JoinProcessor)lastRightProcessor;
  WindowProcessor rightWindowProcessor=(WindowProcessor)rightPreJoinProcessor.getNextProcessor();
  JoinProcessor rightPostJoinProcessor=(JoinProcessor)rightWindowProcessor.getNextProcessor();
  rightPostJoinProcessor.setFindableProcessor((FindableProcessor)leftWindowProcessor);
  rightPostJoinProcessor.setJoinLock(joinLock);
  rightPreJoinProcessor.setFindableProcessor((FindableProcessor)leftWindowProcessor);
  rightPreJoinProcessor.setJoinLock(joinLock);
  leftPreJoinProcessor.setFindableProcessor((FindableProcessor)rightWindowProcessor);
  leftPreJoinProcessor.setJoinLock(joinLock);
  leftPostJoinProcessor.setFindableProcessor((FindableProcessor)rightWindowProcessor);
  leftPostJoinProcessor.setJoinLock(joinLock);
  return joinStreamRuntime;
}","@Override public StreamRuntime clone(String key){
  JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
  for (  SingleStreamRuntime singleStreamRuntime : singleStreamRuntimeList) {
    joinStreamRuntime.addRuntime((SingleStreamRuntime)singleStreamRuntime.clone(key));
  }
  SingleStreamRuntime leftSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(0);
  SingleStreamRuntime rightSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(1);
  Processor leftWindowProcessor=leftSingleStreamRuntime.getProcessorChain();
  Processor leftPostJoinProcessor=leftWindowProcessor.getNextProcessor();
  while (!(leftPostJoinProcessor instanceof JoinProcessor)) {
    leftWindowProcessor=leftWindowProcessor.getNextProcessor();
    leftPostJoinProcessor=leftWindowProcessor.getNextProcessor();
  }
  Processor rightWindowProcessor=rightSingleStreamRuntime.getProcessorChain();
  Processor rightPostJoinProcessor=rightWindowProcessor.getNextProcessor();
  while (!(rightPostJoinProcessor instanceof JoinProcessor)) {
    rightWindowProcessor=rightWindowProcessor.getNextProcessor();
    rightPostJoinProcessor=rightWindowProcessor.getNextProcessor();
  }
  ((JoinProcessor)rightPostJoinProcessor).setFindableProcessor((FindableProcessor)leftWindowProcessor);
  ((JoinProcessor)leftPostJoinProcessor).setFindableProcessor((FindableProcessor)rightWindowProcessor);
  return joinStreamRuntime;
}",0.4397366160893215
28962,"public static StreamRuntime parseInputStream(JoinInputStream joinInputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  ProcessStreamReceiver leftProcessStreamReceiver;
  ProcessStreamReceiver rightProcessStreamReceiver;
  MetaStreamEvent leftMetaStreamEvent=new MetaStreamEvent();
  MetaStreamEvent rightMetaStreamEvent=new MetaStreamEvent();
  String leftInputStreamId=((SingleInputStream)joinInputStream.getLeftInputStream()).getStreamId();
  String rightInputStreamId=((SingleInputStream)joinInputStream.getRightInputStream()).getStreamId();
  boolean leftOuterJoinProcessor=false;
  boolean rightOuterJoinProcessor=false;
  if (joinInputStream.getAllStreamIds().size() == 2) {
    if (windowDefinitionMap.containsKey(leftInputStreamId)) {
      leftMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(leftInputStreamId)) {
      if (tableDefinitionMap.containsKey(leftInputStreamId)) {
        leftMetaStreamEvent.setTableEvent(true);
      }
    }
    if (windowDefinitionMap.containsKey(rightInputStreamId)) {
      rightMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(rightInputStreamId)) {
      if (tableDefinitionMap.containsKey(rightInputStreamId)) {
        rightMetaStreamEvent.setTableEvent(true);
      }
    }
    leftProcessStreamReceiver=new ProcessStreamReceiver(leftInputStreamId,latencyTracker);
    leftProcessStreamReceiver.setBatchProcessingAllowed(leftMetaStreamEvent.isWindowEvent());
    rightProcessStreamReceiver=new ProcessStreamReceiver(rightInputStreamId,latencyTracker);
    rightProcessStreamReceiver.setBatchProcessingAllowed(rightMetaStreamEvent.isWindowEvent());
    if (leftMetaStreamEvent.isTableEvent() && rightMetaStreamEvent.isTableEvent()) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
 else {
    if (windowDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      leftMetaStreamEvent.setWindowEvent(true);
      rightMetaStreamEvent.setWindowEvent(true);
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),1,latencyTracker);
      rightProcessStreamReceiver.setBatchProcessingAllowed(true);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else     if (streamDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),2,latencyTracker);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
  SingleStreamRuntime leftStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getLeftInputStream(),executionPlanContext,executors,streamDefinitionMap,!leftMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!leftMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,leftMetaStreamEvent,leftProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (  VariableExpressionExecutor variableExpressionExecutor : executors) {
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=0;
  }
  int size=executors.size();
  SingleStreamRuntime rightStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getRightInputStream(),executionPlanContext,executors,streamDefinitionMap,!rightMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!rightMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,rightMetaStreamEvent,rightProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (int i=size; i < executors.size(); i++) {
    VariableExpressionExecutor variableExpressionExecutor=executors.get(i);
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=1;
  }
  if (leftMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(leftInputStreamId));
    tableWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (leftMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(leftInputStreamId));
    windowWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  if (rightMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(rightInputStreamId));
    tableWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (rightMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(rightInputStreamId));
    windowWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  MetaStateEvent metaStateEvent=new MetaStateEvent(2);
  metaStateEvent.addEvent(leftMetaStreamEvent);
  metaStateEvent.addEvent(rightMetaStreamEvent);
switch (joinInputStream.getType()) {
case FULL_OUTER_JOIN:
    leftOuterJoinProcessor=true;
case RIGHT_OUTER_JOIN:
  rightOuterJoinProcessor=true;
break;
case LEFT_OUTER_JOIN:
leftOuterJoinProcessor=true;
break;
}
Lock joinLock=new ReentrantLock();
JoinProcessor leftPreJoinProcessor=new JoinProcessor(true,true,leftOuterJoinProcessor,0);
JoinProcessor leftPostJoinProcessor=new JoinProcessor(true,false,leftOuterJoinProcessor,0);
FindableProcessor leftFindableProcessor=insertJoinProcessorsAndGetFindable(leftPreJoinProcessor,leftPostJoinProcessor,leftStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
JoinProcessor rightPreJoinProcessor=new JoinProcessor(false,true,rightOuterJoinProcessor,1);
JoinProcessor rightPostJoinProcessor=new JoinProcessor(false,false,rightOuterJoinProcessor,1);
FindableProcessor rightFindableProcessor=insertJoinProcessorsAndGetFindable(rightPreJoinProcessor,rightPostJoinProcessor,rightStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
leftPreJoinProcessor.setFindableProcessor(rightFindableProcessor);
leftPreJoinProcessor.setJoinLock(joinLock);
leftPostJoinProcessor.setFindableProcessor(rightFindableProcessor);
leftPostJoinProcessor.setJoinLock(joinLock);
rightPreJoinProcessor.setFindableProcessor(leftFindableProcessor);
rightPreJoinProcessor.setJoinLock(joinLock);
rightPostJoinProcessor.setFindableProcessor(leftFindableProcessor);
rightPostJoinProcessor.setJoinLock(joinLock);
Expression compareCondition=joinInputStream.getOnCompare();
if (compareCondition == null) {
compareCondition=Expression.value(true);
}
if (joinInputStream.getWithin() != null) {
throw new OperationNotSupportedException(""String_Node_Str"" + ((TimeConstant)joinInputStream.getWithin()).getValue() + ""String_Node_Str"");
}
MatchingMetaStateHolder rightMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,rightMetaStreamEvent.getLastInputDefinition());
Finder leftFinder=rightFindableProcessor.constructFinder(compareCondition,rightMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
MatchingMetaStateHolder leftMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,1,leftMetaStreamEvent.getLastInputDefinition());
Finder rightFinder=leftFindableProcessor.constructFinder(compareCondition,leftMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.LEFT) {
rightPreJoinProcessor.setTrigger(false);
rightPreJoinProcessor.setFinder(rightFinder);
rightPostJoinProcessor.setTrigger(true);
rightPostJoinProcessor.setFinder(rightFinder);
}
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.RIGHT) {
leftPreJoinProcessor.setTrigger(false);
leftPreJoinProcessor.setFinder(leftFinder);
leftPostJoinProcessor.setTrigger(true);
leftPostJoinProcessor.setFinder(leftFinder);
}
JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
joinStreamRuntime.addRuntime(leftStreamRuntime);
joinStreamRuntime.addRuntime(rightStreamRuntime);
return joinStreamRuntime;
}","public static StreamRuntime parseInputStream(JoinInputStream joinInputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  ProcessStreamReceiver leftProcessStreamReceiver;
  ProcessStreamReceiver rightProcessStreamReceiver;
  MetaStreamEvent leftMetaStreamEvent=new MetaStreamEvent();
  MetaStreamEvent rightMetaStreamEvent=new MetaStreamEvent();
  String leftInputStreamId=((SingleInputStream)joinInputStream.getLeftInputStream()).getStreamId();
  String rightInputStreamId=((SingleInputStream)joinInputStream.getRightInputStream()).getStreamId();
  boolean leftOuterJoinProcessor=false;
  boolean rightOuterJoinProcessor=false;
  if (joinInputStream.getAllStreamIds().size() == 2) {
    if (windowDefinitionMap.containsKey(leftInputStreamId)) {
      leftMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(leftInputStreamId)) {
      if (tableDefinitionMap.containsKey(leftInputStreamId)) {
        leftMetaStreamEvent.setTableEvent(true);
      }
    }
    if (windowDefinitionMap.containsKey(rightInputStreamId)) {
      rightMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(rightInputStreamId)) {
      if (tableDefinitionMap.containsKey(rightInputStreamId)) {
        rightMetaStreamEvent.setTableEvent(true);
      }
    }
    leftProcessStreamReceiver=new ProcessStreamReceiver(leftInputStreamId,latencyTracker);
    leftProcessStreamReceiver.setBatchProcessingAllowed(leftMetaStreamEvent.isWindowEvent());
    rightProcessStreamReceiver=new ProcessStreamReceiver(rightInputStreamId,latencyTracker);
    rightProcessStreamReceiver.setBatchProcessingAllowed(rightMetaStreamEvent.isWindowEvent());
    if (leftMetaStreamEvent.isTableEvent() && rightMetaStreamEvent.isTableEvent()) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
 else {
    if (windowDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      leftMetaStreamEvent.setWindowEvent(true);
      rightMetaStreamEvent.setWindowEvent(true);
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),1,latencyTracker);
      rightProcessStreamReceiver.setBatchProcessingAllowed(true);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else     if (streamDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),2,latencyTracker);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
  SingleStreamRuntime leftStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getLeftInputStream(),executionPlanContext,executors,streamDefinitionMap,!leftMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!leftMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,leftMetaStreamEvent,leftProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (  VariableExpressionExecutor variableExpressionExecutor : executors) {
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=0;
  }
  int size=executors.size();
  SingleStreamRuntime rightStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getRightInputStream(),executionPlanContext,executors,streamDefinitionMap,!rightMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!rightMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,rightMetaStreamEvent,rightProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (int i=size; i < executors.size(); i++) {
    VariableExpressionExecutor variableExpressionExecutor=executors.get(i);
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=1;
  }
  if (leftMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(leftInputStreamId));
    tableWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (leftMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(leftInputStreamId));
    windowWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  if (rightMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(rightInputStreamId));
    tableWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (rightMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(rightInputStreamId));
    windowWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  MetaStateEvent metaStateEvent=new MetaStateEvent(2);
  metaStateEvent.addEvent(leftMetaStreamEvent);
  metaStateEvent.addEvent(rightMetaStreamEvent);
switch (joinInputStream.getType()) {
case FULL_OUTER_JOIN:
    leftOuterJoinProcessor=true;
case RIGHT_OUTER_JOIN:
  rightOuterJoinProcessor=true;
break;
case LEFT_OUTER_JOIN:
leftOuterJoinProcessor=true;
break;
}
JoinProcessor leftPostJoinProcessor=new JoinProcessor(true,leftOuterJoinProcessor,0);
JoinProcessor rightPostJoinProcessor=new JoinProcessor(false,rightOuterJoinProcessor,1);
FindableProcessor leftFindableProcessor=insertJoinProcessorsAndGetFindable(leftPostJoinProcessor,leftStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
FindableProcessor rightFindableProcessor=insertJoinProcessorsAndGetFindable(rightPostJoinProcessor,rightStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
leftPostJoinProcessor.setFindableProcessor(rightFindableProcessor);
rightPostJoinProcessor.setFindableProcessor(leftFindableProcessor);
Expression compareCondition=joinInputStream.getOnCompare();
if (compareCondition == null) {
compareCondition=Expression.value(true);
}
if (joinInputStream.getWithin() != null) {
throw new OperationNotSupportedException(""String_Node_Str"" + ((TimeConstant)joinInputStream.getWithin()).getValue() + ""String_Node_Str"");
}
MatchingMetaStateHolder rightMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,rightMetaStreamEvent.getLastInputDefinition());
Finder leftFinder=rightFindableProcessor.constructFinder(compareCondition,rightMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
MatchingMetaStateHolder leftMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,1,leftMetaStreamEvent.getLastInputDefinition());
Finder rightFinder=leftFindableProcessor.constructFinder(compareCondition,leftMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.LEFT) {
rightPostJoinProcessor.setTrigger(true);
rightPostJoinProcessor.setFinder(rightFinder);
}
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.RIGHT) {
leftPostJoinProcessor.setTrigger(true);
leftPostJoinProcessor.setFinder(leftFinder);
}
JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
joinStreamRuntime.addRuntime(leftStreamRuntime);
joinStreamRuntime.addRuntime(rightStreamRuntime);
return joinStreamRuntime;
}",0.8858726388417599
28963,"private static FindableProcessor insertJoinProcessorsAndGetFindable(JoinProcessor preJoinProcessor,JoinProcessor postJoinProcessor,SingleStreamRuntime streamRuntime,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents){
  Processor lastProcessor=streamRuntime.getProcessorChain();
  Processor prevLastProcessor=null;
  if (lastProcessor != null) {
    while (lastProcessor.getNextProcessor() != null) {
      prevLastProcessor=lastProcessor;
      lastProcessor=lastProcessor.getNextProcessor();
    }
  }
  if (lastProcessor == null) {
    WindowProcessor windowProcessor=new LengthWindowProcessor();
    ExpressionExecutor[] expressionExecutors=new ExpressionExecutor[1];
    expressionExecutors[0]=new ConstantExpressionExecutor(0,Attribute.Type.INT);
    windowProcessor.initProcessor(((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition(),expressionExecutors,executionPlanContext,outputExpectsExpiredEvents);
    lastProcessor=windowProcessor;
  }
  if (lastProcessor instanceof FindableProcessor) {
    if (prevLastProcessor != null) {
      prevLastProcessor.setNextProcessor(preJoinProcessor);
    }
 else {
      streamRuntime.setProcessorChain(preJoinProcessor);
    }
    preJoinProcessor.setNextProcessor(lastProcessor);
    lastProcessor.setNextProcessor(postJoinProcessor);
    return (FindableProcessor)lastProcessor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + ((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition().getId() + ""String_Node_Str""+ lastProcessor.getClass().getCanonicalName()+ ""String_Node_Str""+ FindableProcessor.class.getCanonicalName()+ ""String_Node_Str"");
  }
}","private static FindableProcessor insertJoinProcessorsAndGetFindable(JoinProcessor postJoinProcessor,SingleStreamRuntime streamRuntime,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents){
  Processor lastProcessor=streamRuntime.getProcessorChain();
  Processor prevLastProcessor=null;
  if (lastProcessor != null) {
    while (lastProcessor.getNextProcessor() != null) {
      prevLastProcessor=lastProcessor;
      lastProcessor=lastProcessor.getNextProcessor();
    }
  }
  if (lastProcessor == null) {
    WindowProcessor windowProcessor=new LengthWindowProcessor();
    ExpressionExecutor[] expressionExecutors=new ExpressionExecutor[1];
    expressionExecutors[0]=new ConstantExpressionExecutor(0,Attribute.Type.INT);
    windowProcessor.initProcessor(((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition(),expressionExecutors,executionPlanContext,outputExpectsExpiredEvents);
    lastProcessor=windowProcessor;
  }
  if (lastProcessor instanceof FindableProcessor) {
    if (prevLastProcessor == null) {
      streamRuntime.setProcessorChain(lastProcessor);
    }
    lastProcessor.setNextProcessor(postJoinProcessor);
    return (FindableProcessor)lastProcessor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + ((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition().getId() + ""String_Node_Str""+ lastProcessor.getClass().getCanonicalName()+ ""String_Node_Str""+ FindableProcessor.class.getCanonicalName()+ ""String_Node_Str"");
  }
}",0.94320987654321
28964,"private static void initSingleStreamRuntime(SingleStreamRuntime singleStreamRuntime,int streamEventChainIndex,MetaComplexEvent metaComplexEvent,StateEventPool stateEventPool,LockWrapper lockWrapper){
  MetaStreamEvent metaStreamEvent;
  if (metaComplexEvent instanceof MetaStateEvent) {
    metaStreamEvent=((MetaStateEvent)metaComplexEvent).getMetaStreamEvent(streamEventChainIndex);
  }
 else {
    metaStreamEvent=(MetaStreamEvent)metaComplexEvent;
  }
  StreamEventPool streamEventPool=new StreamEventPool(metaStreamEvent,5);
  ProcessStreamReceiver processStreamReceiver=singleStreamRuntime.getProcessStreamReceiver();
  processStreamReceiver.setMetaStreamEvent(metaStreamEvent);
  processStreamReceiver.setStreamEventPool(streamEventPool);
  processStreamReceiver.setLockWrapper(lockWrapper);
  processStreamReceiver.init();
  Processor processor=singleStreamRuntime.getProcessorChain();
  while (processor != null) {
    if (processor instanceof SchedulingProcessor) {
      ((SchedulingProcessor)processor).getScheduler().setStreamEventPool(streamEventPool);
      ((SchedulingProcessor)processor).getScheduler().init(lockWrapper);
    }
    if (processor instanceof AbstractStreamProcessor) {
      ((AbstractStreamProcessor)processor).setStreamEventCloner(new StreamEventCloner(metaStreamEvent,streamEventPool));
      ((AbstractStreamProcessor)processor).constructStreamEventPopulater(metaStreamEvent,streamEventChainIndex);
    }
    if (stateEventPool != null && processor instanceof JoinProcessor) {
      ((JoinProcessor)processor).setStateEventPool(stateEventPool);
    }
    if (stateEventPool != null && processor instanceof StreamPreStateProcessor) {
      ((StreamPreStateProcessor)processor).setStateEventPool(stateEventPool);
      ((StreamPreStateProcessor)processor).setStreamEventPool(streamEventPool);
      ((StreamPreStateProcessor)processor).setStreamEventCloner(new StreamEventCloner(metaStreamEvent,streamEventPool));
      if (metaComplexEvent instanceof MetaStateEvent) {
        ((StreamPreStateProcessor)processor).setStateEventCloner(new StateEventCloner(((MetaStateEvent)metaComplexEvent),stateEventPool));
      }
    }
    processor=processor.getNextProcessor();
  }
}","private static void initSingleStreamRuntime(SingleStreamRuntime singleStreamRuntime,int streamEventChainIndex,MetaComplexEvent metaComplexEvent,StateEventPool stateEventPool,LockWrapper lockWrapper){
  MetaStreamEvent metaStreamEvent;
  if (metaComplexEvent instanceof MetaStateEvent) {
    metaStreamEvent=((MetaStateEvent)metaComplexEvent).getMetaStreamEvent(streamEventChainIndex);
  }
 else {
    metaStreamEvent=(MetaStreamEvent)metaComplexEvent;
  }
  StreamEventPool streamEventPool=new StreamEventPool(metaStreamEvent,5);
  ProcessStreamReceiver processStreamReceiver=singleStreamRuntime.getProcessStreamReceiver();
  processStreamReceiver.setMetaStreamEvent(metaStreamEvent);
  processStreamReceiver.setStreamEventPool(streamEventPool);
  processStreamReceiver.setLockWrapper(lockWrapper);
  processStreamReceiver.init();
  Processor processor=singleStreamRuntime.getProcessorChain();
  while (processor != null) {
    if (processor instanceof SchedulingProcessor) {
      ((SchedulingProcessor)processor).getScheduler().setStreamEventPool(streamEventPool);
      ((SchedulingProcessor)processor).getScheduler().init(lockWrapper);
    }
    if (processor instanceof AbstractStreamProcessor) {
      ((AbstractStreamProcessor)processor).setStreamEventCloner(new StreamEventCloner(metaStreamEvent,streamEventPool));
      ((AbstractStreamProcessor)processor).constructStreamEventPopulater(metaStreamEvent,streamEventChainIndex);
    }
    if (stateEventPool != null && processor instanceof JoinProcessor) {
      ((JoinProcessor)processor).setStateEventPool(stateEventPool);
      ((JoinProcessor)processor).setJoinLock(lockWrapper);
    }
    if (stateEventPool != null && processor instanceof StreamPreStateProcessor) {
      ((StreamPreStateProcessor)processor).setStateEventPool(stateEventPool);
      ((StreamPreStateProcessor)processor).setStreamEventPool(streamEventPool);
      ((StreamPreStateProcessor)processor).setStreamEventCloner(new StreamEventCloner(metaStreamEvent,streamEventPool));
      if (metaComplexEvent instanceof MetaStateEvent) {
        ((StreamPreStateProcessor)processor).setStateEventCloner(new StateEventCloner(((MetaStateEvent)metaComplexEvent),stateEventPool));
      }
    }
    processor=processor.getNextProcessor();
  }
}",0.9868097473731277
28965,"/** 
 * Process the handed StreamEvent
 * @param complexEventChunk event chunk to be processed
 */
@Override public void process(ComplexEventChunk complexEventChunk){
  if (trigger) {
    ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(true);
    StateEvent joinStateEvent=new StateEvent(2,0);
    StreamEvent nextEvent=(StreamEvent)complexEventChunk.getFirst();
    complexEventChunk.clear();
    while (nextEvent != null) {
      StreamEvent streamEvent=nextEvent;
      nextEvent=streamEvent.getNext();
      streamEvent.setNext(null);
      joinLockWrapper.lock();
      try {
        ComplexEvent.Type eventType=streamEvent.getType();
        if (eventType == ComplexEvent.Type.TIMER) {
          continue;
        }
 else         if (eventType == ComplexEvent.Type.RESET) {
          if (outerJoinProcessor && !leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(null,streamEvent,eventType));
          }
 else           if (outerJoinProcessor && leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(streamEvent,null,eventType));
          }
        }
 else {
          joinStateEvent.setEvent(matchingStreamIndex,streamEvent);
          StreamEvent foundStreamEvent=findableProcessor.find(joinStateEvent,finder);
          joinStateEvent.setEvent(matchingStreamIndex,null);
          if (foundStreamEvent == null) {
            if (outerJoinProcessor && !leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
            }
 else             if (outerJoinProcessor && leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
            }
          }
 else {
            while (foundStreamEvent != null) {
              if (!leftJoinProcessor) {
                returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
              }
 else {
                returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
              }
              foundStreamEvent=foundStreamEvent.getNext();
            }
          }
        }
      }
  finally {
        joinLockWrapper.unlock();
      }
      if (returnEventChunk.getFirst() != null) {
        selector.process(returnEventChunk);
        returnEventChunk.clear();
      }
    }
  }
}","/** 
 * Process the handed StreamEvent
 * @param complexEventChunk event chunk to be processed
 */
@Override public void process(ComplexEventChunk complexEventChunk){
  if (trigger) {
    ComplexEventChunk<StateEvent> returnEventChunk=new ComplexEventChunk<StateEvent>(true);
    StateEvent joinStateEvent=new StateEvent(2,0);
    StreamEvent nextEvent=(StreamEvent)complexEventChunk.getFirst();
    complexEventChunk.clear();
    while (nextEvent != null) {
      StreamEvent streamEvent=nextEvent;
      nextEvent=streamEvent.getNext();
      streamEvent.setNext(null);
      joinLockWrapper.lock();
      try {
        ComplexEvent.Type eventType=streamEvent.getType();
        if (eventType == ComplexEvent.Type.TIMER) {
          continue;
        }
 else         if (eventType == ComplexEvent.Type.RESET) {
          if (outerJoinProcessor && !leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(null,streamEvent,eventType));
          }
 else           if (outerJoinProcessor && leftJoinProcessor) {
            returnEventChunk.add(joinEventBuilder(streamEvent,null,eventType));
          }
        }
 else {
          joinStateEvent.setEvent(matchingStreamIndex,streamEvent);
          StreamEvent foundStreamEvent=findableProcessor.find(joinStateEvent,finder);
          joinStateEvent.setEvent(matchingStreamIndex,null);
          if (foundStreamEvent == null) {
            if (outerJoinProcessor && !leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
            }
 else             if (outerJoinProcessor && leftJoinProcessor) {
              returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
            }
          }
 else {
            while (foundStreamEvent != null) {
              if (!leftJoinProcessor) {
                returnEventChunk.add(joinEventBuilder(foundStreamEvent,streamEvent,eventType));
              }
 else {
                returnEventChunk.add(joinEventBuilder(streamEvent,foundStreamEvent,eventType));
              }
              foundStreamEvent=foundStreamEvent.getNext();
            }
          }
        }
      }
  finally {
        joinLockWrapper.unlock();
      }
      if (returnEventChunk.getFirst() != null) {
        selector.process(returnEventChunk);
        returnEventChunk.clear();
      }
    }
  }
 else {
    if (preJoinProcessor) {
      joinLockWrapper.lock();
      try {
        nextProcessor.process(complexEventChunk);
      }
  finally {
        joinLockWrapper.unlock();
      }
    }
  }
}",0.9596122778675282
28966,"/** 
 * Clone a copy of processor
 * @param key partition key
 * @return Cloned Processor
 */
@Override public Processor cloneProcessor(String key){
  JoinProcessor joinProcessor=new JoinProcessor(leftJoinProcessor,outerJoinProcessor,matchingStreamIndex);
  joinProcessor.setTrigger(trigger);
  if (trigger) {
    joinProcessor.setFinder(finder.cloneFinder(key));
  }
  return joinProcessor;
}","/** 
 * Clone a copy of processor
 * @param key partition key
 * @return Cloned Processor
 */
@Override public Processor cloneProcessor(String key){
  JoinProcessor joinProcessor=new JoinProcessor(leftJoinProcessor,preJoinProcessor,outerJoinProcessor,matchingStreamIndex);
  joinProcessor.setTrigger(trigger);
  if (trigger) {
    joinProcessor.setFinder(finder.cloneFinder(key));
  }
  return joinProcessor;
}",0.978829389788294
28967,"public JoinProcessor(boolean leftJoinProcessor,boolean outerJoinProcessor,int matchingStreamIndex){
  this.leftJoinProcessor=leftJoinProcessor;
  this.outerJoinProcessor=outerJoinProcessor;
  this.matchingStreamIndex=matchingStreamIndex;
}","public JoinProcessor(boolean leftJoinProcessor,boolean preJoinProcessor,boolean outerJoinProcessor,int matchingStreamIndex){
  this.leftJoinProcessor=leftJoinProcessor;
  this.preJoinProcessor=preJoinProcessor;
  this.outerJoinProcessor=outerJoinProcessor;
  this.matchingStreamIndex=matchingStreamIndex;
}",0.8770642201834863
28968,"@Override public StreamRuntime clone(String key){
  JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
  for (  SingleStreamRuntime singleStreamRuntime : singleStreamRuntimeList) {
    joinStreamRuntime.addRuntime((SingleStreamRuntime)singleStreamRuntime.clone(key));
  }
  SingleStreamRuntime leftSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(0);
  SingleStreamRuntime rightSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(1);
  Processor leftWindowProcessor=leftSingleStreamRuntime.getProcessorChain();
  Processor leftPostJoinProcessor=leftWindowProcessor.getNextProcessor();
  while (!(leftPostJoinProcessor instanceof JoinProcessor)) {
    leftWindowProcessor=leftWindowProcessor.getNextProcessor();
    leftPostJoinProcessor=leftWindowProcessor.getNextProcessor();
  }
  Processor rightWindowProcessor=rightSingleStreamRuntime.getProcessorChain();
  Processor rightPostJoinProcessor=rightWindowProcessor.getNextProcessor();
  while (!(rightPostJoinProcessor instanceof JoinProcessor)) {
    rightWindowProcessor=rightWindowProcessor.getNextProcessor();
    rightPostJoinProcessor=rightWindowProcessor.getNextProcessor();
  }
  ((JoinProcessor)rightPostJoinProcessor).setFindableProcessor((FindableProcessor)leftWindowProcessor);
  ((JoinProcessor)leftPostJoinProcessor).setFindableProcessor((FindableProcessor)rightWindowProcessor);
  return joinStreamRuntime;
}","@Override public StreamRuntime clone(String key){
  JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
  for (  SingleStreamRuntime singleStreamRuntime : singleStreamRuntimeList) {
    joinStreamRuntime.addRuntime((SingleStreamRuntime)singleStreamRuntime.clone(key));
  }
  SingleStreamRuntime leftSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(0);
  SingleStreamRuntime rightSingleStreamRuntime=joinStreamRuntime.getSingleStreamRuntimes().get(1);
  Processor lastLeftProcessor=leftSingleStreamRuntime.getProcessorChain();
  while (!(lastLeftProcessor instanceof JoinProcessor)) {
    lastLeftProcessor=lastLeftProcessor.getNextProcessor();
  }
  JoinProcessor leftPreJoinProcessor=(JoinProcessor)lastLeftProcessor;
  WindowProcessor leftWindowProcessor=(WindowProcessor)leftPreJoinProcessor.getNextProcessor();
  JoinProcessor leftPostJoinProcessor=(JoinProcessor)leftWindowProcessor.getNextProcessor();
  Processor lastRightProcessor=rightSingleStreamRuntime.getProcessorChain();
  while (!(lastRightProcessor instanceof JoinProcessor)) {
    lastRightProcessor=lastRightProcessor.getNextProcessor();
  }
  JoinProcessor rightPreJoinProcessor=(JoinProcessor)lastRightProcessor;
  WindowProcessor rightWindowProcessor=(WindowProcessor)rightPreJoinProcessor.getNextProcessor();
  JoinProcessor rightPostJoinProcessor=(JoinProcessor)rightWindowProcessor.getNextProcessor();
  rightPostJoinProcessor.setFindableProcessor((FindableProcessor)leftWindowProcessor);
  rightPreJoinProcessor.setFindableProcessor((FindableProcessor)leftWindowProcessor);
  leftPreJoinProcessor.setFindableProcessor((FindableProcessor)rightWindowProcessor);
  leftPostJoinProcessor.setFindableProcessor((FindableProcessor)rightWindowProcessor);
  return joinStreamRuntime;
}",0.401468788249694
28969,"public static StreamRuntime parseInputStream(JoinInputStream joinInputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  ProcessStreamReceiver leftProcessStreamReceiver;
  ProcessStreamReceiver rightProcessStreamReceiver;
  MetaStreamEvent leftMetaStreamEvent=new MetaStreamEvent();
  MetaStreamEvent rightMetaStreamEvent=new MetaStreamEvent();
  String leftInputStreamId=((SingleInputStream)joinInputStream.getLeftInputStream()).getStreamId();
  String rightInputStreamId=((SingleInputStream)joinInputStream.getRightInputStream()).getStreamId();
  boolean leftOuterJoinProcessor=false;
  boolean rightOuterJoinProcessor=false;
  if (joinInputStream.getAllStreamIds().size() == 2) {
    if (windowDefinitionMap.containsKey(leftInputStreamId)) {
      leftMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(leftInputStreamId)) {
      if (tableDefinitionMap.containsKey(leftInputStreamId)) {
        leftMetaStreamEvent.setTableEvent(true);
      }
    }
    if (windowDefinitionMap.containsKey(rightInputStreamId)) {
      rightMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(rightInputStreamId)) {
      if (tableDefinitionMap.containsKey(rightInputStreamId)) {
        rightMetaStreamEvent.setTableEvent(true);
      }
    }
    leftProcessStreamReceiver=new ProcessStreamReceiver(leftInputStreamId,latencyTracker);
    leftProcessStreamReceiver.setBatchProcessingAllowed(leftMetaStreamEvent.isWindowEvent());
    rightProcessStreamReceiver=new ProcessStreamReceiver(rightInputStreamId,latencyTracker);
    rightProcessStreamReceiver.setBatchProcessingAllowed(rightMetaStreamEvent.isWindowEvent());
    if (leftMetaStreamEvent.isTableEvent() && rightMetaStreamEvent.isTableEvent()) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
 else {
    if (windowDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      leftMetaStreamEvent.setWindowEvent(true);
      rightMetaStreamEvent.setWindowEvent(true);
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),1,latencyTracker);
      rightProcessStreamReceiver.setBatchProcessingAllowed(true);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else     if (streamDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),2,latencyTracker);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
  SingleStreamRuntime leftStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getLeftInputStream(),executionPlanContext,executors,streamDefinitionMap,!leftMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!leftMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,leftMetaStreamEvent,leftProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (  VariableExpressionExecutor variableExpressionExecutor : executors) {
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=0;
  }
  int size=executors.size();
  SingleStreamRuntime rightStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getRightInputStream(),executionPlanContext,executors,streamDefinitionMap,!rightMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!rightMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,rightMetaStreamEvent,rightProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (int i=size; i < executors.size(); i++) {
    VariableExpressionExecutor variableExpressionExecutor=executors.get(i);
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=1;
  }
  if (leftMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(leftInputStreamId));
    tableWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (leftMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(leftInputStreamId));
    windowWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  if (rightMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(rightInputStreamId));
    tableWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (rightMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(rightInputStreamId));
    windowWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  MetaStateEvent metaStateEvent=new MetaStateEvent(2);
  metaStateEvent.addEvent(leftMetaStreamEvent);
  metaStateEvent.addEvent(rightMetaStreamEvent);
switch (joinInputStream.getType()) {
case FULL_OUTER_JOIN:
    leftOuterJoinProcessor=true;
case RIGHT_OUTER_JOIN:
  rightOuterJoinProcessor=true;
break;
case LEFT_OUTER_JOIN:
leftOuterJoinProcessor=true;
break;
}
JoinProcessor leftPostJoinProcessor=new JoinProcessor(true,leftOuterJoinProcessor,0);
JoinProcessor rightPostJoinProcessor=new JoinProcessor(false,rightOuterJoinProcessor,1);
FindableProcessor leftFindableProcessor=insertJoinProcessorsAndGetFindable(leftPostJoinProcessor,leftStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
FindableProcessor rightFindableProcessor=insertJoinProcessorsAndGetFindable(rightPostJoinProcessor,rightStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
leftPostJoinProcessor.setFindableProcessor(rightFindableProcessor);
rightPostJoinProcessor.setFindableProcessor(leftFindableProcessor);
Expression compareCondition=joinInputStream.getOnCompare();
if (compareCondition == null) {
compareCondition=Expression.value(true);
}
if (joinInputStream.getWithin() != null) {
throw new OperationNotSupportedException(""String_Node_Str"" + ((TimeConstant)joinInputStream.getWithin()).getValue() + ""String_Node_Str"");
}
MatchingMetaStateHolder rightMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,rightMetaStreamEvent.getLastInputDefinition());
Finder leftFinder=rightFindableProcessor.constructFinder(compareCondition,rightMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
MatchingMetaStateHolder leftMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,1,leftMetaStreamEvent.getLastInputDefinition());
Finder rightFinder=leftFindableProcessor.constructFinder(compareCondition,leftMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.LEFT) {
rightPostJoinProcessor.setTrigger(true);
rightPostJoinProcessor.setFinder(rightFinder);
}
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.RIGHT) {
leftPostJoinProcessor.setTrigger(true);
leftPostJoinProcessor.setFinder(leftFinder);
}
JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
joinStreamRuntime.addRuntime(leftStreamRuntime);
joinStreamRuntime.addRuntime(rightStreamRuntime);
return joinStreamRuntime;
}","public static StreamRuntime parseInputStream(JoinInputStream joinInputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,AbstractDefinition> windowDefinitionMap,Map<String,EventTable> eventTableMap,Map<String,EventWindow> eventWindowMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  ProcessStreamReceiver leftProcessStreamReceiver;
  ProcessStreamReceiver rightProcessStreamReceiver;
  MetaStreamEvent leftMetaStreamEvent=new MetaStreamEvent();
  MetaStreamEvent rightMetaStreamEvent=new MetaStreamEvent();
  String leftInputStreamId=((SingleInputStream)joinInputStream.getLeftInputStream()).getStreamId();
  String rightInputStreamId=((SingleInputStream)joinInputStream.getRightInputStream()).getStreamId();
  boolean leftOuterJoinProcessor=false;
  boolean rightOuterJoinProcessor=false;
  if (joinInputStream.getAllStreamIds().size() == 2) {
    if (windowDefinitionMap.containsKey(leftInputStreamId)) {
      leftMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(leftInputStreamId)) {
      if (tableDefinitionMap.containsKey(leftInputStreamId)) {
        leftMetaStreamEvent.setTableEvent(true);
      }
    }
    if (windowDefinitionMap.containsKey(rightInputStreamId)) {
      rightMetaStreamEvent.setWindowEvent(true);
    }
 else     if (!streamDefinitionMap.containsKey(rightInputStreamId)) {
      if (tableDefinitionMap.containsKey(rightInputStreamId)) {
        rightMetaStreamEvent.setTableEvent(true);
      }
    }
    leftProcessStreamReceiver=new ProcessStreamReceiver(leftInputStreamId,latencyTracker);
    leftProcessStreamReceiver.setBatchProcessingAllowed(leftMetaStreamEvent.isWindowEvent());
    rightProcessStreamReceiver=new ProcessStreamReceiver(rightInputStreamId,latencyTracker);
    rightProcessStreamReceiver.setBatchProcessingAllowed(rightMetaStreamEvent.isWindowEvent());
    if (leftMetaStreamEvent.isTableEvent() && rightMetaStreamEvent.isTableEvent()) {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
 else {
    if (windowDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      leftMetaStreamEvent.setWindowEvent(true);
      rightMetaStreamEvent.setWindowEvent(true);
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),1,latencyTracker);
      rightProcessStreamReceiver.setBatchProcessingAllowed(true);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else     if (streamDefinitionMap.containsKey(joinInputStream.getAllStreamIds().get(0))) {
      rightProcessStreamReceiver=new MultiProcessStreamReceiver(joinInputStream.getAllStreamIds().get(0),2,latencyTracker);
      leftProcessStreamReceiver=rightProcessStreamReceiver;
    }
 else {
      throw new ExecutionPlanCreationException(""String_Node_Str"" + leftInputStreamId + ""String_Node_Str""+ rightInputStreamId);
    }
  }
  SingleStreamRuntime leftStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getLeftInputStream(),executionPlanContext,executors,streamDefinitionMap,!leftMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!leftMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,leftMetaStreamEvent,leftProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (  VariableExpressionExecutor variableExpressionExecutor : executors) {
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=0;
  }
  int size=executors.size();
  SingleStreamRuntime rightStreamRuntime=SingleInputStreamParser.parseInputStream((SingleInputStream)joinInputStream.getRightInputStream(),executionPlanContext,executors,streamDefinitionMap,!rightMetaStreamEvent.isTableEvent() ? null : tableDefinitionMap,!rightMetaStreamEvent.isWindowEvent() ? null : windowDefinitionMap,eventTableMap,rightMetaStreamEvent,rightProcessStreamReceiver,true,outputExpectsExpiredEvents);
  for (int i=size; i < executors.size(); i++) {
    VariableExpressionExecutor variableExpressionExecutor=executors.get(i);
    variableExpressionExecutor.getPosition()[SiddhiConstants.STREAM_EVENT_CHAIN_INDEX]=1;
  }
  if (leftMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(leftInputStreamId));
    tableWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (leftMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(leftInputStreamId));
    windowWindowProcessor.initProcessor(leftMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    leftStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  if (rightMetaStreamEvent.isTableEvent()) {
    TableWindowProcessor tableWindowProcessor=new TableWindowProcessor(eventTableMap.get(rightInputStreamId));
    tableWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),new ExpressionExecutor[0],executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(tableWindowProcessor);
  }
 else   if (rightMetaStreamEvent.isWindowEvent()) {
    WindowWindowProcessor windowWindowProcessor=new WindowWindowProcessor(eventWindowMap.get(rightInputStreamId));
    windowWindowProcessor.initProcessor(rightMetaStreamEvent.getLastInputDefinition(),executors.toArray(new ExpressionExecutor[0]),executionPlanContext,outputExpectsExpiredEvents);
    rightStreamRuntime.setProcessorChain(windowWindowProcessor);
  }
  MetaStateEvent metaStateEvent=new MetaStateEvent(2);
  metaStateEvent.addEvent(leftMetaStreamEvent);
  metaStateEvent.addEvent(rightMetaStreamEvent);
switch (joinInputStream.getType()) {
case FULL_OUTER_JOIN:
    leftOuterJoinProcessor=true;
case RIGHT_OUTER_JOIN:
  rightOuterJoinProcessor=true;
break;
case LEFT_OUTER_JOIN:
leftOuterJoinProcessor=true;
break;
}
JoinProcessor leftPreJoinProcessor=new JoinProcessor(true,true,leftOuterJoinProcessor,0);
JoinProcessor leftPostJoinProcessor=new JoinProcessor(true,false,leftOuterJoinProcessor,0);
FindableProcessor leftFindableProcessor=insertJoinProcessorsAndGetFindable(leftPreJoinProcessor,leftPostJoinProcessor,leftStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
JoinProcessor rightPreJoinProcessor=new JoinProcessor(false,true,rightOuterJoinProcessor,1);
JoinProcessor rightPostJoinProcessor=new JoinProcessor(false,false,rightOuterJoinProcessor,1);
FindableProcessor rightFindableProcessor=insertJoinProcessorsAndGetFindable(rightPreJoinProcessor,rightPostJoinProcessor,rightStreamRuntime,executionPlanContext,outputExpectsExpiredEvents);
leftPreJoinProcessor.setFindableProcessor(rightFindableProcessor);
leftPostJoinProcessor.setFindableProcessor(rightFindableProcessor);
rightPreJoinProcessor.setFindableProcessor(leftFindableProcessor);
rightPostJoinProcessor.setFindableProcessor(leftFindableProcessor);
Expression compareCondition=joinInputStream.getOnCompare();
if (compareCondition == null) {
compareCondition=Expression.value(true);
}
if (joinInputStream.getWithin() != null) {
throw new OperationNotSupportedException(""String_Node_Str"" + ((TimeConstant)joinInputStream.getWithin()).getValue() + ""String_Node_Str"");
}
MatchingMetaStateHolder rightMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,0,rightMetaStreamEvent.getLastInputDefinition());
Finder leftFinder=rightFindableProcessor.constructFinder(compareCondition,rightMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
MatchingMetaStateHolder leftMatchingMetaStateHolder=MatcherParser.constructMatchingMetaStateHolder(metaStateEvent,1,leftMetaStreamEvent.getLastInputDefinition());
Finder rightFinder=leftFindableProcessor.constructFinder(compareCondition,leftMatchingMetaStateHolder,executionPlanContext,executors,eventTableMap);
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.LEFT) {
rightPreJoinProcessor.setTrigger(false);
rightPreJoinProcessor.setFinder(rightFinder);
rightPostJoinProcessor.setTrigger(true);
rightPostJoinProcessor.setFinder(rightFinder);
}
if (joinInputStream.getTrigger() != JoinInputStream.EventTrigger.RIGHT) {
leftPreJoinProcessor.setTrigger(false);
leftPreJoinProcessor.setFinder(leftFinder);
leftPostJoinProcessor.setTrigger(true);
leftPostJoinProcessor.setFinder(leftFinder);
}
JoinStreamRuntime joinStreamRuntime=new JoinStreamRuntime(executionPlanContext,metaStateEvent);
joinStreamRuntime.addRuntime(leftStreamRuntime);
joinStreamRuntime.addRuntime(rightStreamRuntime);
return joinStreamRuntime;
}",0.9528825785767449
28970,"private static FindableProcessor insertJoinProcessorsAndGetFindable(JoinProcessor postJoinProcessor,SingleStreamRuntime streamRuntime,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents){
  Processor lastProcessor=streamRuntime.getProcessorChain();
  Processor prevLastProcessor=null;
  if (lastProcessor != null) {
    while (lastProcessor.getNextProcessor() != null) {
      prevLastProcessor=lastProcessor;
      lastProcessor=lastProcessor.getNextProcessor();
    }
  }
  if (lastProcessor == null) {
    WindowProcessor windowProcessor=new LengthWindowProcessor();
    ExpressionExecutor[] expressionExecutors=new ExpressionExecutor[1];
    expressionExecutors[0]=new ConstantExpressionExecutor(0,Attribute.Type.INT);
    windowProcessor.initProcessor(((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition(),expressionExecutors,executionPlanContext,outputExpectsExpiredEvents);
    lastProcessor=windowProcessor;
  }
  if (lastProcessor instanceof FindableProcessor) {
    if (prevLastProcessor == null) {
      streamRuntime.setProcessorChain(lastProcessor);
    }
    lastProcessor.setNextProcessor(postJoinProcessor);
    return (FindableProcessor)lastProcessor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + ((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition().getId() + ""String_Node_Str""+ lastProcessor.getClass().getCanonicalName()+ ""String_Node_Str""+ FindableProcessor.class.getCanonicalName()+ ""String_Node_Str"");
  }
}","private static FindableProcessor insertJoinProcessorsAndGetFindable(JoinProcessor preJoinProcessor,JoinProcessor postJoinProcessor,SingleStreamRuntime streamRuntime,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents){
  Processor lastProcessor=streamRuntime.getProcessorChain();
  Processor prevLastProcessor=null;
  if (lastProcessor != null) {
    while (lastProcessor.getNextProcessor() != null) {
      prevLastProcessor=lastProcessor;
      lastProcessor=lastProcessor.getNextProcessor();
    }
  }
  if (lastProcessor == null) {
    WindowProcessor windowProcessor=new LengthWindowProcessor();
    ExpressionExecutor[] expressionExecutors=new ExpressionExecutor[1];
    expressionExecutors[0]=new ConstantExpressionExecutor(0,Attribute.Type.INT);
    windowProcessor.initProcessor(((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition(),expressionExecutors,executionPlanContext,outputExpectsExpiredEvents);
    lastProcessor=windowProcessor;
  }
  if (lastProcessor instanceof FindableProcessor) {
    if (prevLastProcessor != null) {
      prevLastProcessor.setNextProcessor(preJoinProcessor);
    }
 else {
      streamRuntime.setProcessorChain(preJoinProcessor);
    }
    preJoinProcessor.setNextProcessor(lastProcessor);
    lastProcessor.setNextProcessor(postJoinProcessor);
    return (FindableProcessor)lastProcessor;
  }
 else {
    throw new OperationNotSupportedException(""String_Node_Str"" + ((MetaStreamEvent)streamRuntime.getMetaComplexEvent()).getLastInputDefinition().getId() + ""String_Node_Str""+ lastProcessor.getClass().getCanonicalName()+ ""String_Node_Str""+ FindableProcessor.class.getCanonicalName()+ ""String_Node_Str"");
  }
}",0.94320987654321
28971,"public void process(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent event=complexEventChunk.next();
    if (((event.getType() != StreamEvent.Type.CURRENT || !allowCurrentEvents) && (event.getType() != StreamEvent.Type.EXPIRED || !allowExpiredEvents))) {
      complexEventChunk.remove();
    }
  }
  complexEventChunk.reset();
  if (complexEventChunk.hasNext()) {
    outputPublisher.send(complexEventChunk.getFirst());
  }
}","public void process(ComplexEventChunk complexEventChunk){
  complexEventChunk.reset();
  while (complexEventChunk.hasNext()) {
    ComplexEvent event=complexEventChunk.next();
    if (((event.getType() != StreamEvent.Type.CURRENT || !allowCurrentEvents) && (event.getType() != StreamEvent.Type.EXPIRED || !allowExpiredEvents))) {
      complexEventChunk.remove();
    }
  }
  complexEventChunk.reset();
  if (complexEventChunk.hasNext()) {
    try {
      reentrantLock.lock();
      outputPublisher.send(complexEventChunk.getFirst());
    }
  finally {
      reentrantLock.unlock();
    }
  }
}",0.9142335766423356
28972,"@Test public void timeWindowBatchTest6() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  try {
    executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timeStamp,      Event[] inEvents,      Event[] removeEvents){
        EventPrinter.print(timeStamp,inEvents,removeEvents);
        if (inEvents != null) {
          inEventCount+=(inEvents.length);
        }
        if (removeEvents != null) {
          removeEventCount+=(removeEvents.length);
        }
        eventArrived=true;
      }
    }
);
    InputHandler cseEventStreamHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    InputHandler twitterStreamHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    executionPlanRuntime.start();
    cseEventStreamHandler.send(new Object[]{""String_Node_Str"",55.6f,100});
    twitterStreamHandler.send(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    cseEventStreamHandler.send(new Object[]{""String_Node_Str"",75.6f,100});
    Thread.sleep(1500);
    cseEventStreamHandler.send(new Object[]{""String_Node_Str"",57.6f,100});
    Thread.sleep(1000);
    Assert.assertEquals(2,inEventCount);
    Assert.assertEquals(0,removeEventCount);
    Assert.assertTrue(eventArrived);
  }
  finally {
    executionPlanRuntime.shutdown();
  }
}","@Test public void timeWindowBatchTest6() throws InterruptedException {
  log.info(""String_Node_Str"");
  SiddhiManager siddhiManager=new SiddhiManager();
  String streams=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  ExecutionPlanRuntime executionPlanRuntime=siddhiManager.createExecutionPlanRuntime(streams + query);
  try {
    executionPlanRuntime.addCallback(""String_Node_Str"",new QueryCallback(){
      @Override public void receive(      long timeStamp,      Event[] inEvents,      Event[] removeEvents){
        EventPrinter.print(timeStamp,inEvents,removeEvents);
        if (inEvents != null) {
          inEventCount+=(inEvents.length);
        }
        if (removeEvents != null) {
          removeEventCount+=(removeEvents.length);
        }
        eventArrived=true;
      }
    }
);
    InputHandler cseEventStreamHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    InputHandler twitterStreamHandler=executionPlanRuntime.getInputHandler(""String_Node_Str"");
    executionPlanRuntime.start();
    cseEventStreamHandler.send(new Object[]{""String_Node_Str"",55.6f,100});
    twitterStreamHandler.send(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    cseEventStreamHandler.send(new Object[]{""String_Node_Str"",75.6f,100});
    Thread.sleep(1500);
    cseEventStreamHandler.send(new Object[]{""String_Node_Str"",57.6f,100});
    Thread.sleep(1000);
    Assert.assertTrue(""String_Node_Str"",inEventCount == 1 || inEventCount == 2);
    Assert.assertEquals(0,removeEventCount);
    Assert.assertTrue(eventArrived);
  }
  finally {
    executionPlanRuntime.shutdown();
  }
}",0.9770378874856488
28973,"private void deleteFromIndexesAndPrimaryKey(String currentAttribute,Set<StreamEvent> deletedEventSet){
  for (  StreamEvent deletedEvent : deletedEventSet) {
    primaryKeyData.remove(deletedEvent.getOutputData()[primaryKeyPosition]);
    for (    Map.Entry<String,Integer> indexEntry : indexMetaData.entrySet()) {
      if (!currentAttribute.equals(indexEntry.getKey())) {
        TreeMap<Object,Set<StreamEvent>> indexMap=indexData.get(indexEntry.getKey());
        Object key=deletedEvent.getOutputData()[indexEntry.getValue()];
        Set<StreamEvent> values=indexMap.get(key);
        values.remove(deletedEvent);
        if (values.size() == 0) {
          indexMap.remove(key);
        }
      }
    }
  }
}","private void deleteFromIndexesAndPrimaryKey(String currentAttribute,Set<StreamEvent> deletedEventSet){
  for (  StreamEvent deletedEvent : deletedEventSet) {
    if (primaryKeyData != null) {
      primaryKeyData.remove(deletedEvent.getOutputData()[primaryKeyPosition]);
    }
    for (    Map.Entry<String,Integer> indexEntry : indexMetaData.entrySet()) {
      if (!currentAttribute.equals(indexEntry.getKey())) {
        TreeMap<Object,Set<StreamEvent>> indexMap=indexData.get(indexEntry.getKey());
        Object key=deletedEvent.getOutputData()[indexEntry.getValue()];
        Set<StreamEvent> values=indexMap.get(key);
        values.remove(deletedEvent);
        if (values.size() == 0) {
          indexMap.remove(key);
        }
      }
    }
  }
}",0.9714673913043478
28974,"public static EventHolder parse(AbstractDefinition tableDefinition,StreamEventPool tableStreamEventPool){
  ZeroStreamEventConverter eventConverter=new ZeroStreamEventConverter();
  String primaryKeyAttribute=null;
  int primaryKeyPosition=-1;
  Map<String,Integer> indexMetaData=new HashMap<String,Integer>();
  Annotation primaryKeyAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_PRIMARY_KEY,tableDefinition.getAnnotations());
  if (primaryKeyAnnotation != null) {
    if (primaryKeyAnnotation.getElements().size() > 1) {
      throw new OperationNotSupportedException(SiddhiConstants.ANNOTATION_PRIMARY_KEY + ""String_Node_Str"" + primaryKeyAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    if (primaryKeyAnnotation.getElements().size() == 0) {
      throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_PRIMARY_KEY + ""String_Node_Str"" + primaryKeyAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    primaryKeyAttribute=primaryKeyAnnotation.getElements().get(0).getValue().trim();
    primaryKeyPosition=tableDefinition.getAttributePosition(primaryKeyAttribute);
  }
  Annotation indexAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_INDEX,tableDefinition.getAnnotations());
  if (indexAnnotation != null) {
    if (indexAnnotation.getElements().size() == 0) {
      throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_INDEX + ""String_Node_Str"" + indexAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    for (    Element element : indexAnnotation.getElements()) {
      indexMetaData.put(element.getValue().trim(),tableDefinition.getAttributePosition(element.getValue().trim()));
    }
  }
  if (primaryKeyAttribute == null) {
    Annotation indexByAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_INDEX_BY,tableDefinition.getAnnotations());
    if (indexByAnnotation != null) {
      if (indexByAnnotation.getElements().size() > 1) {
        throw new OperationNotSupportedException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
      }
      if (indexByAnnotation.getElements().size() == 0) {
        throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
      }
      primaryKeyAttribute=indexByAnnotation.getElements().get(0).getValue().trim();
      primaryKeyPosition=tableDefinition.getAttributePosition(primaryKeyAttribute);
    }
 else {
      log.info(""String_Node_Str"" + SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str""+ SiddhiConstants.ANNOTATION_PRIMARY_KEY+ ""String_Node_Str""+ tableDefinition.getId());
    }
  }
  if (primaryKeyAttribute != null || indexMetaData.size() > 0) {
    return new IndexEventHolder(tableStreamEventPool,eventConverter,primaryKeyPosition,primaryKeyAttribute,indexMetaData);
  }
 else {
    return new ListEventHolder(tableStreamEventPool,eventConverter);
  }
}","public static EventHolder parse(AbstractDefinition tableDefinition,StreamEventPool tableStreamEventPool){
  ZeroStreamEventConverter eventConverter=new ZeroStreamEventConverter();
  String primaryKeyAttribute=null;
  int primaryKeyPosition=-1;
  Map<String,Integer> indexMetaData=new HashMap<String,Integer>();
  Annotation primaryKeyAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_PRIMARY_KEY,tableDefinition.getAnnotations());
  if (primaryKeyAnnotation != null) {
    if (primaryKeyAnnotation.getElements().size() > 1) {
      throw new OperationNotSupportedException(SiddhiConstants.ANNOTATION_PRIMARY_KEY + ""String_Node_Str"" + primaryKeyAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    if (primaryKeyAnnotation.getElements().size() == 0) {
      throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_PRIMARY_KEY + ""String_Node_Str"" + primaryKeyAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    primaryKeyAttribute=primaryKeyAnnotation.getElements().get(0).getValue().trim();
    primaryKeyPosition=tableDefinition.getAttributePosition(primaryKeyAttribute);
  }
  Annotation indexAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_INDEX,tableDefinition.getAnnotations());
  if (indexAnnotation != null) {
    if (indexAnnotation.getElements().size() == 0) {
      throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_INDEX + ""String_Node_Str"" + indexAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    for (    Element element : indexAnnotation.getElements()) {
      indexMetaData.put(element.getValue().trim(),tableDefinition.getAttributePosition(element.getValue().trim()));
    }
  }
  Annotation indexByAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_INDEX_BY,tableDefinition.getAnnotations());
  if (indexByAnnotation != null) {
    if (primaryKeyAttribute != null) {
      log.info(""String_Node_Str"" + SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str""+ SiddhiConstants.ANNOTATION_PRIMARY_KEY+ ""String_Node_Str""+ tableDefinition.getId());
    }
 else {
      if (indexByAnnotation.getElements().size() > 1) {
        throw new OperationNotSupportedException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
      }
      if (indexByAnnotation.getElements().size() == 0) {
        throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
      }
      primaryKeyAttribute=indexByAnnotation.getElements().get(0).getValue().trim();
      primaryKeyPosition=tableDefinition.getAttributePosition(primaryKeyAttribute);
    }
  }
  if (primaryKeyAttribute != null || indexMetaData.size() > 0) {
    return new IndexEventHolder(tableStreamEventPool,eventConverter,primaryKeyPosition,primaryKeyAttribute,indexMetaData);
  }
 else {
    return new ListEventHolder(tableStreamEventPool,eventConverter);
  }
}",0.7829688535453942
28975,"public Set<StreamEvent> findEventSet(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> leftStreamEvents=leftCollectionExecutor.findEventSet(matchingEvent,indexedEventHolder);
  if (leftStreamEvents == null || (leftStreamEvents.size() > 0)) {
    return null;
  }
 else {
    Set<StreamEvent> rightStreamEvents=rightCollectionExecutor.findEventSet(matchingEvent,indexedEventHolder);
    if (rightStreamEvents == null || (rightStreamEvents.size() > 0)) {
      return null;
    }
 else {
      Set<StreamEvent> returnSet=new HashSet<StreamEvent>();
      for (      StreamEvent aStreamEvent : leftStreamEvents) {
        if (rightStreamEvents.contains(aStreamEvent)) {
          returnSet.add(aStreamEvent);
        }
      }
      return returnSet;
    }
  }
}","public Set<StreamEvent> findEventSet(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> leftStreamEvents=leftCollectionExecutor.findEventSet(matchingEvent,indexedEventHolder);
  if (leftStreamEvents == null) {
    return null;
  }
 else   if (leftStreamEvents.size() > 0) {
    Set<StreamEvent> rightStreamEvents=rightCollectionExecutor.findEventSet(matchingEvent,indexedEventHolder);
    if (rightStreamEvents == null) {
      return null;
    }
 else     if (rightStreamEvents.size() > 0) {
      Set<StreamEvent> returnSet=new HashSet<StreamEvent>();
      for (      StreamEvent aStreamEvent : leftStreamEvents) {
        if (rightStreamEvents.contains(aStreamEvent)) {
          returnSet.add(aStreamEvent);
        }
      }
      return returnSet;
    }
 else {
      return rightStreamEvents;
    }
  }
 else {
    return leftStreamEvents;
  }
}",0.8612269207861822
28976,"public CompareExhaustiveAndCollectionExecutor(CollectionExecutor compareCollectionExecutor,CollectionExecutor aCollectionExecutor){
  this.compareCollectionExecutor=compareCollectionExecutor;
  this.aCollectionExecutor=aCollectionExecutor;
}","public CompareExhaustiveAndCollectionExecutor(CollectionExecutor compareCollectionExecutor,ExhaustiveCollectionExecutor exhaustiveCollectionExecutor){
  this.compareCollectionExecutor=compareCollectionExecutor;
  this.exhaustiveCollectionExecutor=exhaustiveCollectionExecutor;
}",0.8439306358381503
28977,"@Override public boolean contains(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> compareStreamEvents=findEventSet(matchingEvent,indexedEventHolder);
  if (compareStreamEvents == null) {
    return aCollectionExecutor.contains(matchingEvent,indexedEventHolder);
  }
 else {
    return compareStreamEvents.size() > 0;
  }
}","@Override public boolean contains(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> compareStreamEvents=findEventSet(matchingEvent,indexedEventHolder);
  if (compareStreamEvents == null) {
    return exhaustiveCollectionExecutor.contains(matchingEvent,indexedEventHolder);
  }
 else {
    return compareStreamEvents.size() > 0;
  }
}",0.9848275862068966
28978,"public StreamEvent find(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder,StreamEventCloner candidateEventCloner){
  Set<StreamEvent> compareStreamEvents=findEventSet(matchingEvent,indexedEventHolder);
  if (compareStreamEvents == null) {
    return aCollectionExecutor.find(matchingEvent,indexedEventHolder,candidateEventCloner);
  }
 else {
    return null;
  }
}","public StreamEvent find(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder,StreamEventCloner candidateEventCloner){
  ComplexEventChunk<StreamEvent> returnEventChunk=new ComplexEventChunk<StreamEvent>(false);
  Set<StreamEvent> resultEventSet=findEventSet(matchingEvent,indexedEventHolder);
  if (resultEventSet != null) {
    for (    StreamEvent resultEvent : resultEventSet) {
      if (candidateEventCloner != null) {
        returnEventChunk.add(candidateEventCloner.copyStreamEvent(resultEvent));
      }
 else {
        returnEventChunk.add(resultEvent);
      }
    }
    return returnEventChunk.getFirst();
  }
 else {
    return exhaustiveCollectionExecutor.find(matchingEvent,indexedEventHolder,candidateEventCloner);
  }
}",0.5249110320284698
28979,"public Set<StreamEvent> findEventSet(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> compareStreamEvents=compareCollectionExecutor.findEventSet(matchingEvent,indexedEventHolder);
  if (compareStreamEvents == null || compareStreamEvents.size() > 0) {
    return null;
  }
 else {
    return new HashSet<StreamEvent>();
  }
}","public Set<StreamEvent> findEventSet(StateEvent matchingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> compareStreamEvents=compareCollectionExecutor.findEventSet(matchingEvent,indexedEventHolder);
  if (compareStreamEvents == null) {
    return null;
  }
 else   if (compareStreamEvents.size() > 0) {
    if (exhaustiveCollectionExecutor != null) {
      return exhaustiveCollectionExecutor.findEventSet(matchingEvent,compareStreamEvents);
    }
 else {
      return null;
    }
  }
 else {
    return compareStreamEvents;
  }
}",0.687292817679558
28980,"@Override public void delete(StateEvent deletingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> compareStreamEvents=findEventSet(deletingEvent,indexedEventHolder);
  if (compareStreamEvents == null) {
    aCollectionExecutor.delete(deletingEvent,indexedEventHolder);
  }
}","@Override public void delete(StateEvent deletingEvent,IndexedEventHolder indexedEventHolder){
  Set<StreamEvent> compareStreamEvents=findEventSet(deletingEvent,indexedEventHolder);
  if (compareStreamEvents == null) {
    exhaustiveCollectionExecutor.delete(deletingEvent,indexedEventHolder);
  }
}",0.9812606473594548
28981,"public static CollectionExecutor buildCollectionExecutor(CollectionExpression collectionExpression,MatchingMetaStateHolder matchingMetaStateHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,EventTable> eventTableMap,ExecutionPlanContext executionPlanContext,boolean isFirst){
  if (collectionExpression instanceof AttributeCollectionExpression) {
    return new CompareCollectionExecutor(((AttributeCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(true,Attribute.Type.BOOL));
  }
 else   if (collectionExpression instanceof CompareCollectionExpression) {
    ExpressionExecutor valueExpressionExecutor=ExpressionParser.parseExpression(((CompareCollectionExpression)collectionExpression).getValueCollectionExpression().getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
    AttributeCollectionExpression attributeCollectionExpression=((AttributeCollectionExpression)((CompareCollectionExpression)collectionExpression).getAttributeCollectionExpression());
    return new CompareCollectionExecutor(attributeCollectionExpression.getAttribute(),((CompareCollectionExpression)collectionExpression).getOperator(),valueExpressionExecutor);
  }
 else   if (collectionExpression instanceof NullCollectionExpression) {
    return new CompareCollectionExecutor(((NullCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(null,Attribute.Type.OBJECT));
  }
 else   if (collectionExpression instanceof AndCollectionExpression) {
    CollectionExpression leftCollectionExpression=((AndCollectionExpression)collectionExpression).getLeftCollectionExpression();
    CollectionExpression rightCollectionExpression=((AndCollectionExpression)collectionExpression).getRightCollectionExpression();
    ExpressionExecutor expressionExecutor=null;
    CollectionExecutor aCollectionExecutor=null;
    CollectionExecutor leftCollectionExecutor;
    CollectionExecutor rightCollectionExecutor;
switch (leftCollectionExpression.getCollectionScope()) {
case NON:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
        expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
      return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
case EXHAUSTIVE:
    expressionExecutor=ExpressionParser.parseExpression(leftCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
  aCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
}
break;
case INDEXED_ATTRIBUTE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
aCollectionExecutor=buildCollectionExecutor(collectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,aCollectionExecutor);
}
break;
case INDEXED_RESULT_SET:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(rightCollectionExecutor,leftCollectionExecutor,aCollectionExecutor);
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
aCollectionExecutor=buildCollectionExecutor(collectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,aCollectionExecutor);
}
break;
case OPTIMISED_RESULT_SET:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(rightCollectionExecutor,leftCollectionExecutor,aCollectionExecutor);
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,aCollectionExecutor);
}
break;
case EXHAUSTIVE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=buildCollectionExecutor(collectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
}
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new CompareExhaustiveAndCollectionExecutor(rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
break;
}
}
 else if (collectionExpression instanceof OrCollectionExpression) {
CollectionExpression leftCollectionExpression=((OrCollectionExpression)collectionExpression).getLeftCollectionExpression();
CollectionExpression rightCollectionExpression=((OrCollectionExpression)collectionExpression).getRightCollectionExpression();
ExpressionExecutor expressionExecutor=null;
CollectionExecutor aCollectionExecutor=null;
CollectionExecutor leftCollectionExecutor;
CollectionExecutor rightCollectionExecutor;
if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON && rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE || rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE) {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
 else {
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new OrCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
}
}
 else if (collectionExpression instanceof NotCollectionExpression) {
ExpressionExecutor expressionExecutor=null;
switch (collectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
CollectionExecutor notCollectionExecutor=buildCollectionExecutor(((NotCollectionExpression)collectionExpression).getCollectionExpression(),matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new NotCollectionExecutor(notCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
 else {
ExpressionExecutor expressionExecutor=null;
if (collectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
throw new UnsupportedOperationException(collectionExpression.getClass().getName() + ""String_Node_Str"");
}","public static CollectionExecutor buildCollectionExecutor(CollectionExpression collectionExpression,MatchingMetaStateHolder matchingMetaStateHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,EventTable> eventTableMap,ExecutionPlanContext executionPlanContext,boolean isFirst){
  if (collectionExpression instanceof AttributeCollectionExpression) {
    return new CompareCollectionExecutor(((AttributeCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(true,Attribute.Type.BOOL));
  }
 else   if (collectionExpression instanceof CompareCollectionExpression) {
    ExpressionExecutor valueExpressionExecutor=ExpressionParser.parseExpression(((CompareCollectionExpression)collectionExpression).getValueCollectionExpression().getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
    AttributeCollectionExpression attributeCollectionExpression=((AttributeCollectionExpression)((CompareCollectionExpression)collectionExpression).getAttributeCollectionExpression());
    return new CompareCollectionExecutor(attributeCollectionExpression.getAttribute(),((CompareCollectionExpression)collectionExpression).getOperator(),valueExpressionExecutor);
  }
 else   if (collectionExpression instanceof NullCollectionExpression) {
    return new CompareCollectionExecutor(((NullCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(null,Attribute.Type.OBJECT));
  }
 else   if (collectionExpression instanceof AndCollectionExpression) {
    CollectionExpression leftCollectionExpression=((AndCollectionExpression)collectionExpression).getLeftCollectionExpression();
    CollectionExpression rightCollectionExpression=((AndCollectionExpression)collectionExpression).getRightCollectionExpression();
    ExpressionExecutor expressionExecutor=null;
    CollectionExecutor aCollectionExecutor=null;
    ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
    CollectionExecutor leftCollectionExecutor;
    CollectionExecutor rightCollectionExecutor;
switch (leftCollectionExpression.getCollectionScope()) {
case NON:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
        expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
      return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
case EXHAUSTIVE:
    expressionExecutor=ExpressionParser.parseExpression(leftCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
  aCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
}
break;
case INDEXED_ATTRIBUTE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,exhaustiveCollectionExecutor);
}
break;
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(rightCollectionExecutor,leftCollectionExecutor,aCollectionExecutor);
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,exhaustiveCollectionExecutor);
}
break;
case EXHAUSTIVE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(rightCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
break;
}
}
 else if (collectionExpression instanceof OrCollectionExpression) {
CollectionExpression leftCollectionExpression=((OrCollectionExpression)collectionExpression).getLeftCollectionExpression();
CollectionExpression rightCollectionExpression=((OrCollectionExpression)collectionExpression).getRightCollectionExpression();
ExpressionExecutor expressionExecutor=null;
CollectionExecutor aCollectionExecutor=null;
CollectionExecutor leftCollectionExecutor;
CollectionExecutor rightCollectionExecutor;
if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON && rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE || rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE) {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
 else {
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new OrCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
}
}
 else if (collectionExpression instanceof NotCollectionExpression) {
ExpressionExecutor expressionExecutor=null;
switch (collectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
CollectionExecutor notCollectionExecutor=buildCollectionExecutor(((NotCollectionExpression)collectionExpression).getCollectionExpression(),matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new NotCollectionExecutor(notCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
 else {
ExpressionExecutor expressionExecutor=null;
if (collectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
throw new UnsupportedOperationException(collectionExpression.getClass().getName() + ""String_Node_Str"");
}",0.6487187999879275
28982,"public static EventHolder parse(AbstractDefinition tableDefinition,StreamEventPool tableStreamEventPool){
  ZeroStreamEventConverter eventConverter=new ZeroStreamEventConverter();
  Annotation indexByAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_INDEX_BY,tableDefinition.getAnnotations());
  if (indexByAnnotation != null) {
    if (indexByAnnotation.getElements().size() > 1) {
      throw new OperationNotSupportedException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    if (indexByAnnotation.getElements().size() == 0) {
      throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    String indexAttributesString=indexByAnnotation.getElements().get(0).getValue();
    String[] indexAttributes=indexAttributesString.split(""String_Node_Str"");
    if (indexAttributes.length > 1) {
      int indexPosition=tableDefinition.getAttributePosition(indexAttributes[0].trim());
      Map<String,Integer> indexMetaData=new HashMap<String,Integer>();
      for (int i=1; i == indexAttributes.length - 1; i++) {
        indexMetaData.put(indexAttributes[i].trim(),tableDefinition.getAttributePosition(indexAttributes[i].trim()));
      }
      return new PrimaryKeyIndexEventHolder(tableStreamEventPool,eventConverter,indexPosition,indexAttributes[0].trim(),indexMetaData);
    }
 else {
      int indexPosition=tableDefinition.getAttributePosition(indexAttributes[0].trim());
      return new PrimaryKeyEventHolder(tableStreamEventPool,eventConverter,indexPosition,indexAttributes[0].trim());
    }
  }
 else {
    return new ListEventHolder(tableStreamEventPool,eventConverter);
  }
}","public static EventHolder parse(AbstractDefinition tableDefinition,StreamEventPool tableStreamEventPool){
  ZeroStreamEventConverter eventConverter=new ZeroStreamEventConverter();
  Annotation indexByAnnotation=AnnotationHelper.getAnnotation(SiddhiConstants.ANNOTATION_INDEX_BY,tableDefinition.getAnnotations());
  if (indexByAnnotation != null) {
    if (indexByAnnotation.getElements().size() > 1) {
      throw new OperationNotSupportedException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    if (indexByAnnotation.getElements().size() == 0) {
      throw new ExecutionPlanValidationException(SiddhiConstants.ANNOTATION_INDEX_BY + ""String_Node_Str"" + indexByAnnotation.getElements().size()+ ""String_Node_Str"");
    }
    String indexAttributesString=indexByAnnotation.getElements().get(0).getValue();
    String[] indexAttributes=indexAttributesString.split(""String_Node_Str"");
    if (indexAttributes.length > 1) {
      int indexPosition=tableDefinition.getAttributePosition(indexAttributes[0].trim());
      Map<String,Integer> indexMetaData=new HashMap<String,Integer>();
      for (int i=1; i < indexAttributes.length; i++) {
        indexMetaData.put(indexAttributes[i].trim(),tableDefinition.getAttributePosition(indexAttributes[i].trim()));
      }
      return new PrimaryKeyIndexEventHolder(tableStreamEventPool,eventConverter,indexPosition,indexAttributes[0].trim(),indexMetaData);
    }
 else {
      int indexPosition=tableDefinition.getAttributePosition(indexAttributes[0].trim());
      return new PrimaryKeyEventHolder(tableStreamEventPool,eventConverter,indexPosition,indexAttributes[0].trim());
    }
  }
 else {
    return new ListEventHolder(tableStreamEventPool,eventConverter);
  }
}",0.9980463298911528
28983,"/** 
 * Method to integrate Carbon Metrics into Siddhi
 * @param statisticsConfiguration
 */
public void setStatisticsConfiguration(StatisticsConfiguration statisticsConfiguration){
  siddhiContext.setStatisticsConfiguration(statisticsConfiguration);
}","/** 
 * Method to integrate Carbon Metrics into Siddhi
 * @param statisticsConfiguration statistics configuration
 */
public void setStatisticsConfiguration(StatisticsConfiguration statisticsConfiguration){
  siddhiContext.setStatisticsConfiguration(statisticsConfiguration);
}",0.9527410207939508
28984,"/** 
 * Method to validate provided String representation of Execution Plan. Method will throw  {@link org.wso2.siddhi.query.api.exception.ExecutionPlanValidationException} if submitted Siddhi queries haveerrors.
 * @param executionPlan
 */
public void validateExecutionPlan(String executionPlan){
  validateExecutionPlan(SiddhiCompiler.parse(executionPlan));
}","/** 
 * Method to validate provided String representation of Execution Plan. Method will throw  {@link org.wso2.siddhi.query.api.exception.ExecutionPlanValidationException} if submitted Siddhi queries haveerrors.
 * @param executionPlan execution plan
 */
public void validateExecutionPlan(String executionPlan){
  validateExecutionPlan(SiddhiCompiler.parse(executionPlan));
}",0.9796472184531886
28985,"/** 
 * Join the given two event streams
 * @param leftStream  event left stream
 * @param rightStream event right stream
 */
public StateEvent joinEventBuilder(StreamEvent leftStream,StreamEvent rightStream){
  StateEvent returnEvent=stateEventPool.borrowEvent();
  returnEvent.setEvent(0,leftStream);
  returnEvent.setEvent(1,rightStream);
  if (preJoinProcessor) {
    returnEvent.setType(ComplexEvent.Type.CURRENT);
  }
 else {
    returnEvent.setType(ComplexEvent.Type.EXPIRED);
  }
  if (!leftJoinProcessor) {
    returnEvent.setTimestamp(rightStream.getTimestamp());
  }
 else {
    returnEvent.setTimestamp(leftStream.getTimestamp());
  }
  return returnEvent;
}","/** 
 * Join the given two event streams
 * @param leftStream  event left stream
 * @param rightStream event right stream
 * @return StateEvent state event
 */
public StateEvent joinEventBuilder(StreamEvent leftStream,StreamEvent rightStream){
  StateEvent returnEvent=stateEventPool.borrowEvent();
  returnEvent.setEvent(0,leftStream);
  returnEvent.setEvent(1,rightStream);
  if (preJoinProcessor) {
    returnEvent.setType(ComplexEvent.Type.CURRENT);
  }
 else {
    returnEvent.setType(ComplexEvent.Type.EXPIRED);
  }
  if (!leftJoinProcessor) {
    returnEvent.setTimestamp(rightStream.getTimestamp());
  }
 else {
    returnEvent.setTimestamp(leftStream.getTimestamp());
  }
  return returnEvent;
}",0.975254730713246
28986,"/** 
 * The init method of the StreamProcessor, this method will be called before other methods
 * @param inputDefinition              the incoming stream definition
 * @param attributeExpressionExecutors the executors of each function parameters
 * @param executionPlanContext         the context of the execution plan
 * @param outputExpectsExpiredEvents
 * @return the additional output attributes introduced by the function
 */
protected abstract List<Attribute> init(AbstractDefinition inputDefinition,ExpressionExecutor[] attributeExpressionExecutors,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents);","/** 
 * The init method of the StreamProcessor, this method will be called before other methods
 * @param inputDefinition              the incoming stream definition
 * @param attributeExpressionExecutors the executors of each function parameters
 * @param executionPlanContext         the context of the execution plan
 * @param outputExpectsExpiredEvents   is output expects ExpiredEvents
 * @return the additional output attributes introduced by the function
 */
protected abstract List<Attribute> init(AbstractDefinition inputDefinition,ExpressionExecutor[] attributeExpressionExecutors,ExecutionPlanContext executionPlanContext,boolean outputExpectsExpiredEvents);",0.9739263803680982
28987,"/** 
 * The main processing method that will be called upon event arrival
 * @param streamEventChunk    the event chunk that need to be processed
 * @param nextProcessor        the next processor to which the success events need to be passed
 * @param streamEventCloner    helps to clone the incoming event for local storage or modification
 * @param complexEventPopulater helps to populate the events with the resultant attributes
 */
protected abstract void processEventChunk(ComplexEventChunk<StreamEvent> streamEventChunk,Processor nextProcessor,StreamEventCloner streamEventCloner,ComplexEventPopulater complexEventPopulater);","/** 
 * The main processing method that will be called upon event arrival
 * @param streamEventChunk      the event chunk that need to be processed
 * @param nextProcessor         the next processor to which the success events need to be passed
 * @param streamEventCloner     helps to clone the incoming event for local storage or modification
 * @param complexEventPopulater helps to populate the events with the resultant attributes
 */
protected abstract void processEventChunk(ComplexEventChunk<StreamEvent> streamEventChunk,Processor nextProcessor,StreamEventCloner streamEventCloner,ComplexEventPopulater complexEventPopulater);",0.9968404423380728
28988,"/** 
 * Parse an InputStream returning corresponding StreamRuntime
 * @param inputStream          input stream to be parsed
 * @param executionPlanContext associated siddhi executionPlanContext
 * @param streamDefinitionMap  map containing user given stream definitions
 * @param tableDefinitionMap   table definition map
 * @param eventTableMap        EventTable Map
 * @param executors            List to hold VariableExpressionExecutors to update after query parsing
 * @param latencyTracker       latency tracker
 * @param outputExpectsExpiredEvents
 * @return StreamRuntime Stream Runtime
 */
public static StreamRuntime parse(InputStream inputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  if (inputStream instanceof BasicSingleInputStream || inputStream instanceof SingleInputStream) {
    SingleInputStream singleInputStream=(SingleInputStream)inputStream;
    ProcessStreamReceiver processStreamReceiver=new ProcessStreamReceiver(singleInputStream.getStreamId(),latencyTracker);
    return SingleInputStreamParser.parseInputStream((SingleInputStream)inputStream,executionPlanContext,executors,streamDefinitionMap,null,eventTableMap,new MetaStreamEvent(),processStreamReceiver,true,outputExpectsExpiredEvents);
  }
 else   if (inputStream instanceof JoinInputStream) {
    return JoinInputStreamParser.parseInputStream(((JoinInputStream)inputStream),executionPlanContext,streamDefinitionMap,tableDefinitionMap,eventTableMap,executors,latencyTracker,outputExpectsExpiredEvents);
  }
 else   if (inputStream instanceof StateInputStream) {
    MetaStateEvent metaStateEvent=new MetaStateEvent(inputStream.getAllStreamIds().size());
    return StateInputStreamParser.parseInputStream(((StateInputStream)inputStream),executionPlanContext,metaStateEvent,streamDefinitionMap,null,eventTableMap,executors,latencyTracker);
  }
 else {
    throw new OperationNotSupportedException();
  }
}","/** 
 * Parse an InputStream returning corresponding StreamRuntime
 * @param inputStream          input stream to be parsed
 * @param executionPlanContext associated siddhi executionPlanContext
 * @param streamDefinitionMap  map containing user given stream definitions
 * @param tableDefinitionMap   table definition map
 * @param eventTableMap        EventTable Map
 * @param executors            List to hold VariableExpressionExecutors to update after query parsing
 * @param latencyTracker       latency tracker
 * @param outputExpectsExpiredEvents  is output expects ExpiredEvents
 * @return StreamRuntime Stream Runtime
 */
public static StreamRuntime parse(InputStream inputStream,ExecutionPlanContext executionPlanContext,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,EventTable> eventTableMap,List<VariableExpressionExecutor> executors,LatencyTracker latencyTracker,boolean outputExpectsExpiredEvents){
  if (inputStream instanceof BasicSingleInputStream || inputStream instanceof SingleInputStream) {
    SingleInputStream singleInputStream=(SingleInputStream)inputStream;
    ProcessStreamReceiver processStreamReceiver=new ProcessStreamReceiver(singleInputStream.getStreamId(),latencyTracker);
    return SingleInputStreamParser.parseInputStream((SingleInputStream)inputStream,executionPlanContext,executors,streamDefinitionMap,null,eventTableMap,new MetaStreamEvent(),processStreamReceiver,true,outputExpectsExpiredEvents);
  }
 else   if (inputStream instanceof JoinInputStream) {
    return JoinInputStreamParser.parseInputStream(((JoinInputStream)inputStream),executionPlanContext,streamDefinitionMap,tableDefinitionMap,eventTableMap,executors,latencyTracker,outputExpectsExpiredEvents);
  }
 else   if (inputStream instanceof StateInputStream) {
    MetaStateEvent metaStateEvent=new MetaStateEvent(inputStream.getAllStreamIds().size());
    return StateInputStreamParser.parseInputStream(((StateInputStream)inputStream),executionPlanContext,metaStateEvent,streamDefinitionMap,null,eventTableMap,executors,latencyTracker);
  }
 else {
    throw new OperationNotSupportedException();
  }
}",0.9923451635351428
28989,"/** 
 * Parse single InputStream and return SingleStreamRuntime
 * @param latencyTracker              latency tracker
 * @param inputStream                 single input stream to be parsed
 * @param executionPlanContext        query to be parsed
 * @param variableExpressionExecutors List to hold VariableExpressionExecutors to update after query parsing
 * @param streamDefinitionMap         Stream Definition Map
 * @param tableDefinitionMap          Table Definition Map
 * @param eventTableMap               EventTable Map
 * @param metaComplexEvent            MetaComplexEvent
 * @param processStreamReceiver       ProcessStreamReceiver
 * @param outputExpectsExpiredEvents
 * @return SingleStreamRuntime
 */
public static SingleStreamRuntime parseInputStream(SingleInputStream inputStream,ExecutionPlanContext executionPlanContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,EventTable> eventTableMap,MetaComplexEvent metaComplexEvent,ProcessStreamReceiver processStreamReceiver,boolean supportsBatchProcessing,boolean outputExpectsExpiredEvents){
  Processor processor=null;
  EntryValveProcessor entryValveProcessor=null;
  boolean first=true;
  MetaStreamEvent metaStreamEvent;
  if (metaComplexEvent instanceof MetaStateEvent) {
    metaStreamEvent=new MetaStreamEvent();
    ((MetaStateEvent)metaComplexEvent).addEvent(metaStreamEvent);
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,metaStreamEvent);
  }
 else {
    metaStreamEvent=(MetaStreamEvent)metaComplexEvent;
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,metaStreamEvent);
  }
  if (!inputStream.getStreamHandlers().isEmpty()) {
    for (    StreamHandler handler : inputStream.getStreamHandlers()) {
      Processor currentProcessor=generateProcessor(handler,metaComplexEvent,variableExpressionExecutors,executionPlanContext,eventTableMap,supportsBatchProcessing,outputExpectsExpiredEvents);
      if (currentProcessor instanceof SchedulingProcessor) {
        if (entryValveProcessor == null) {
          entryValveProcessor=new EntryValveProcessor(executionPlanContext);
          if (first) {
            processor=entryValveProcessor;
            first=false;
          }
 else {
            processor.setToLast(entryValveProcessor);
          }
        }
        Scheduler scheduler=new Scheduler(executionPlanContext.getScheduledExecutorService(),entryValveProcessor,executionPlanContext);
        ((SchedulingProcessor)currentProcessor).setScheduler(scheduler);
      }
      if (first) {
        processor=currentProcessor;
        first=false;
      }
 else {
        processor.setToLast(currentProcessor);
      }
    }
  }
  metaStreamEvent.initializeAfterWindowData();
  return new SingleStreamRuntime(processStreamReceiver,processor,metaComplexEvent);
}","/** 
 * Parse single InputStream and return SingleStreamRuntime
 * @param inputStream                 single input stream to be parsed
 * @param executionPlanContext        query to be parsed
 * @param variableExpressionExecutors List to hold VariableExpressionExecutors to update after query parsing
 * @param streamDefinitionMap         Stream Definition Map
 * @param tableDefinitionMap          Table Definition Map
 * @param eventTableMap               EventTable Map
 * @param metaComplexEvent            MetaComplexEvent
 * @param processStreamReceiver       ProcessStreamReceiver
 * @param supportsBatchProcessing     supports batch processing
 * @param outputExpectsExpiredEvents  is output expects ExpiredEvents
 * @return SingleStreamRuntime
 */
public static SingleStreamRuntime parseInputStream(SingleInputStream inputStream,ExecutionPlanContext executionPlanContext,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,AbstractDefinition> streamDefinitionMap,Map<String,AbstractDefinition> tableDefinitionMap,Map<String,EventTable> eventTableMap,MetaComplexEvent metaComplexEvent,ProcessStreamReceiver processStreamReceiver,boolean supportsBatchProcessing,boolean outputExpectsExpiredEvents){
  Processor processor=null;
  EntryValveProcessor entryValveProcessor=null;
  boolean first=true;
  MetaStreamEvent metaStreamEvent;
  if (metaComplexEvent instanceof MetaStateEvent) {
    metaStreamEvent=new MetaStreamEvent();
    ((MetaStateEvent)metaComplexEvent).addEvent(metaStreamEvent);
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,metaStreamEvent);
  }
 else {
    metaStreamEvent=(MetaStreamEvent)metaComplexEvent;
    initMetaStreamEvent(inputStream,streamDefinitionMap,tableDefinitionMap,metaStreamEvent);
  }
  if (!inputStream.getStreamHandlers().isEmpty()) {
    for (    StreamHandler handler : inputStream.getStreamHandlers()) {
      Processor currentProcessor=generateProcessor(handler,metaComplexEvent,variableExpressionExecutors,executionPlanContext,eventTableMap,supportsBatchProcessing,outputExpectsExpiredEvents);
      if (currentProcessor instanceof SchedulingProcessor) {
        if (entryValveProcessor == null) {
          entryValveProcessor=new EntryValveProcessor(executionPlanContext);
          if (first) {
            processor=entryValveProcessor;
            first=false;
          }
 else {
            processor.setToLast(entryValveProcessor);
          }
        }
        Scheduler scheduler=new Scheduler(executionPlanContext.getScheduledExecutorService(),entryValveProcessor,executionPlanContext);
        ((SchedulingProcessor)currentProcessor).setScheduler(scheduler);
      }
      if (first) {
        processor=currentProcessor;
        first=false;
      }
 else {
        processor.setToLast(currentProcessor);
      }
    }
  }
  metaStreamEvent.initializeAfterWindowData();
  return new SingleStreamRuntime(processStreamReceiver,processor,metaComplexEvent);
}",0.7991851977592939
28990,"@Override public void deleteAll(Set<StreamEvent> candidateEventSet){
  for (  StreamEvent streamEvent : candidateEventSet) {
    if (primaryKeyData != null) {
      StreamEvent deletedEvent=primaryKeyData.remove(streamEvent.getOutputData()[primaryKeyPosition]);
      if (indexData != null) {
        deleteFromIndexes(deletedEvent);
      }
    }
 else     if (indexData != null) {
      deleteFromIndexes(streamEvent);
    }
  }
}","@Override public void deleteAll(Collection<StreamEvent> candidateEventSet){
  for (  StreamEvent streamEvent : candidateEventSet) {
    if (primaryKeyData != null) {
      StreamEvent deletedEvent=primaryKeyData.remove(streamEvent.getOutputData()[primaryKeyPosition]);
      if (indexData != null) {
        deleteFromIndexes(deletedEvent);
      }
    }
 else     if (indexData != null) {
      deleteFromIndexes(streamEvent);
    }
  }
}",0.9850746268656716
28991,"private void deleteFromIndexes(StreamEvent toDeleteEvent){
  for (  Map.Entry<String,Integer> indexEntry : indexMetaData.entrySet()) {
    TreeMap<Object,Set<StreamEvent>> indexMap=indexData.get(indexEntry.getKey());
    Object key=toDeleteEvent.getOutputData()[indexEntry.getValue()];
    Set<StreamEvent> values=indexMap.get(key);
    values.remove(toDeleteEvent);
    if (values.size() == 0) {
      indexMap.remove(key);
    }
  }
}","private void deleteFromIndexes(StreamEvent toDeleteEvent){
  if (indexMetaData != null) {
    for (    Map.Entry<String,Integer> indexEntry : indexMetaData.entrySet()) {
      TreeMap<Object,Set<StreamEvent>> indexMap=indexData.get(indexEntry.getKey());
      Object key=toDeleteEvent.getOutputData()[indexEntry.getValue()];
      Set<StreamEvent> values=indexMap.get(key);
      values.remove(toDeleteEvent);
      if (values.size() == 0) {
        indexMap.remove(key);
      }
    }
  }
}",0.9320388349514565
28992,void deleteAll(Set<StreamEvent> candidateEventSet);,void deleteAll(Collection<StreamEvent> candidateEventSet);,0.9174311926605504
28993,"@Override public void deleteAll(Set<StreamEvent> candidateEventSet){
  for (  StreamEvent streamEvent : candidateEventSet) {
    data.remove(streamEvent.getOutputData()[primaryKeyPosition]);
  }
}","@Override public void deleteAll(Collection<StreamEvent> candidateEventSet){
  for (  StreamEvent streamEvent : candidateEventSet) {
    data.remove(streamEvent.getOutputData()[primaryKeyPosition]);
  }
}",0.9674185463659148
28994,"public static CollectionExecutor buildCollectionExecutor(CollectionExpression collectionExpression,MatchingMetaStateHolder matchingMetaStateHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,EventTable> eventTableMap,ExecutionPlanContext executionPlanContext,boolean isFirst){
  if (collectionExpression instanceof AttributeCollectionExpression) {
    return new CompareCollectionExecutor(((AttributeCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(true,Attribute.Type.BOOL));
  }
 else   if (collectionExpression instanceof CompareCollectionExpression) {
    ExpressionExecutor valueExpressionExecutor=ExpressionParser.parseExpression(((CompareCollectionExpression)collectionExpression).getValueCollectionExpression().getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
    AttributeCollectionExpression attributeCollectionExpression=((AttributeCollectionExpression)((CompareCollectionExpression)collectionExpression).getAttributeCollectionExpression());
    return new CompareCollectionExecutor(attributeCollectionExpression.getAttribute(),((CompareCollectionExpression)collectionExpression).getOperator(),valueExpressionExecutor);
  }
 else   if (collectionExpression instanceof NullCollectionExpression) {
    return new CompareCollectionExecutor(((NullCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(null,Attribute.Type.OBJECT));
  }
 else   if (collectionExpression instanceof AndCollectionExpression) {
    CollectionExpression leftCollectionExpression=((AndCollectionExpression)collectionExpression).getLeftCollectionExpression();
    CollectionExpression rightCollectionExpression=((AndCollectionExpression)collectionExpression).getRightCollectionExpression();
    ExpressionExecutor expressionExecutor=null;
    CollectionExecutor aCollectionExecutor=null;
    ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
    CollectionExecutor leftCollectionExecutor;
    CollectionExecutor rightCollectionExecutor;
switch (leftCollectionExpression.getCollectionScope()) {
case NON:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
        expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
      return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
case EXHAUSTIVE:
    expressionExecutor=ExpressionParser.parseExpression(leftCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
  aCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
}
break;
case INDEXED_ATTRIBUTE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,exhaustiveCollectionExecutor);
}
break;
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(rightCollectionExecutor,leftCollectionExecutor,aCollectionExecutor);
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,exhaustiveCollectionExecutor);
}
break;
case EXHAUSTIVE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(rightCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
break;
}
}
 else if (collectionExpression instanceof OrCollectionExpression) {
CollectionExpression leftCollectionExpression=((OrCollectionExpression)collectionExpression).getLeftCollectionExpression();
CollectionExpression rightCollectionExpression=((OrCollectionExpression)collectionExpression).getRightCollectionExpression();
ExpressionExecutor expressionExecutor=null;
CollectionExecutor aCollectionExecutor=null;
CollectionExecutor leftCollectionExecutor;
CollectionExecutor rightCollectionExecutor;
if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON && rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE || rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE) {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
 else {
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new OrCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
}
}
 else if (collectionExpression instanceof NotCollectionExpression) {
ExpressionExecutor expressionExecutor=null;
switch (collectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
CollectionExecutor notCollectionExecutor=buildCollectionExecutor(((NotCollectionExpression)collectionExpression).getCollectionExpression(),matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new NotCollectionExecutor(notCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
 else {
ExpressionExecutor expressionExecutor=null;
if (collectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
throw new UnsupportedOperationException(collectionExpression.getClass().getName() + ""String_Node_Str"");
}","public static CollectionExecutor buildCollectionExecutor(CollectionExpression collectionExpression,MatchingMetaStateHolder matchingMetaStateHolder,List<VariableExpressionExecutor> variableExpressionExecutors,Map<String,EventTable> eventTableMap,ExecutionPlanContext executionPlanContext,boolean isFirst){
  if (collectionExpression instanceof AttributeCollectionExpression) {
    return new CompareCollectionExecutor(((AttributeCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(true,Attribute.Type.BOOL));
  }
 else   if (collectionExpression instanceof CompareCollectionExpression) {
    ExpressionExecutor valueExpressionExecutor=ExpressionParser.parseExpression(((CompareCollectionExpression)collectionExpression).getValueCollectionExpression().getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
    AttributeCollectionExpression attributeCollectionExpression=((AttributeCollectionExpression)((CompareCollectionExpression)collectionExpression).getAttributeCollectionExpression());
    return new CompareCollectionExecutor(attributeCollectionExpression.getAttribute(),((CompareCollectionExpression)collectionExpression).getOperator(),valueExpressionExecutor);
  }
 else   if (collectionExpression instanceof NullCollectionExpression) {
    return new CompareCollectionExecutor(((NullCollectionExpression)collectionExpression).getAttribute(),Compare.Operator.EQUAL,new ConstantExpressionExecutor(null,Attribute.Type.OBJECT));
  }
 else   if (collectionExpression instanceof AndCollectionExpression) {
    CollectionExpression leftCollectionExpression=((AndCollectionExpression)collectionExpression).getLeftCollectionExpression();
    CollectionExpression rightCollectionExpression=((AndCollectionExpression)collectionExpression).getRightCollectionExpression();
    ExpressionExecutor expressionExecutor=null;
    CollectionExecutor aCollectionExecutor=null;
    ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
    CollectionExecutor leftCollectionExecutor;
    CollectionExecutor rightCollectionExecutor;
switch (leftCollectionExpression.getCollectionScope()) {
case NON:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
        expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
      return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
case EXHAUSTIVE:
    expressionExecutor=ExpressionParser.parseExpression(leftCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
  aCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
}
break;
case INDEXED_ATTRIBUTE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,exhaustiveCollectionExecutor);
}
break;
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(rightCollectionExecutor,leftCollectionExecutor,aCollectionExecutor);
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,false);
return new AnyAndCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(leftCollectionExecutor,exhaustiveCollectionExecutor);
}
break;
case EXHAUSTIVE:
switch (rightCollectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(rightCollectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
aCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NonAndCollectionExecutor(expressionExecutor,aCollectionExecutor,rightCollectionExpression.getCollectionScope());
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new CompareExhaustiveAndCollectionExecutor(rightCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
break;
}
}
 else if (collectionExpression instanceof OrCollectionExpression) {
CollectionExpression leftCollectionExpression=((OrCollectionExpression)collectionExpression).getLeftCollectionExpression();
CollectionExpression rightCollectionExpression=((OrCollectionExpression)collectionExpression).getRightCollectionExpression();
ExpressionExecutor expressionExecutor=null;
CollectionExecutor aCollectionExecutor=null;
CollectionExecutor leftCollectionExecutor;
CollectionExecutor rightCollectionExecutor;
if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON && rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else if (leftCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE || rightCollectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.EXHAUSTIVE) {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
 else {
if (isFirst) {
aCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
leftCollectionExecutor=buildCollectionExecutor(leftCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
rightCollectionExecutor=buildCollectionExecutor(rightCollectionExpression,matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new OrCollectionExecutor(leftCollectionExecutor,rightCollectionExecutor,aCollectionExecutor);
}
}
 else if (collectionExpression instanceof NotCollectionExpression) {
ExpressionExecutor expressionExecutor=null;
switch (collectionExpression.getCollectionScope()) {
case NON:
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
case INDEXED_ATTRIBUTE:
case INDEXED_RESULT_SET:
case OPTIMISED_RESULT_SET:
ExhaustiveCollectionExecutor exhaustiveCollectionExecutor=null;
if (isFirst) {
exhaustiveCollectionExecutor=new ExhaustiveCollectionExecutor(ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0),matchingMetaStateHolder.getCandidateEventIndex());
}
CollectionExecutor notCollectionExecutor=buildCollectionExecutor(((NotCollectionExpression)collectionExpression).getCollectionExpression(),matchingMetaStateHolder,variableExpressionExecutors,eventTableMap,executionPlanContext,isFirst);
return new NotCollectionExecutor(notCollectionExecutor,exhaustiveCollectionExecutor);
case EXHAUSTIVE:
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
 else {
ExpressionExecutor expressionExecutor=null;
if (collectionExpression.getCollectionScope() == CollectionExpression.CollectionScope.NON) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
return new NonCollectionExecutor(expressionExecutor);
}
 else {
if (isFirst) {
expressionExecutor=ExpressionParser.parseExpression(collectionExpression.getExpression(),matchingMetaStateHolder.getMetaStateEvent(),matchingMetaStateHolder.getDefaultStreamEventIndex(),eventTableMap,variableExpressionExecutors,executionPlanContext,false,0);
}
return new ExhaustiveCollectionExecutor(expressionExecutor,matchingMetaStateHolder.getCandidateEventIndex());
}
}
throw new UnsupportedOperationException(collectionExpression.getClass().getName() + ""String_Node_Str"");
}",0.9996111723154688
28995,"@Override public void overwriteOrAdd(ComplexEventChunk overwritingOrAddingEventChunk,Operator operator,int[] mappingPosition){
  if (indexAttribute != null) {
    operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsMap,mappingPosition);
  }
 else {
    operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsList,mappingPosition);
  }
}","@Override public void overwriteOrAdd(ComplexEventChunk overwritingOrAddingEventChunk,Operator operator,int[] mappingPosition){
  try {
    readWriteLock.writeLock().lock();
    if (indexAttribute != null) {
      operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsMap,mappingPosition);
    }
 else {
      operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsList,mappingPosition);
    }
  }
  finally {
    readWriteLock.writeLock().unlock();
  }
}",0.8574938574938575
28996,"/** 
 * Called when insert or overwriting the event table entries.
 * @param overwritingOrAddingEventChunk Event list that needs to be inserted or updated.
 * @param operator                      Operator that perform Hazelcast related operations.
 */
@Override public void overwriteOrAdd(ComplexEventChunk overwritingOrAddingEventChunk,Operator operator,int[] mappingPosition){
  if (indexAttribute != null) {
    operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsMap,mappingPosition);
  }
 else {
    operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsList,mappingPosition);
  }
}","/** 
 * Called when insert or overwriting the event table entries.
 * @param overwritingOrAddingEventChunk Event list that needs to be inserted or updated.
 * @param operator                      Operator that perform Hazelcast related operations.
 */
@Override public synchronized void overwriteOrAdd(ComplexEventChunk overwritingOrAddingEventChunk,Operator operator,int[] mappingPosition){
  if (indexAttribute != null) {
    operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsMap,mappingPosition);
  }
 else {
    operator.overwriteOrAdd(overwritingOrAddingEventChunk,eventsList,mappingPosition);
  }
}",0.9893004115226336
28997,"/** 
 * Called when having ""in"" condition, to check the existence of the event
 * @param matchingEvent Event that need to be check for existence
 * @param finder        Operator that perform RDBMS related search
 */
@Override public boolean contains(ComplexEvent matchingEvent,Finder finder){
  if (isCachingEnabled) {
    return ((RDBMSOperator)finder).getInMemoryEventTableOperator().contains(matchingEvent,cachedTable.getCacheList()) || finder.contains(matchingEvent,null);
  }
  return finder.contains(matchingEvent,null);
}","/** 
 * Called when having ""in"" condition, to check the existence of the event
 * @param matchingEvent Event that need to be check for existence
 * @param finder        Operator that perform RDBMS related search
 */
@Override public synchronized boolean contains(ComplexEvent matchingEvent,Finder finder){
  if (isCachingEnabled) {
    return ((RDBMSOperator)finder).getInMemoryEventTableOperator().contains(matchingEvent,cachedTable.getCacheList()) || finder.contains(matchingEvent,null);
  }
  return finder.contains(matchingEvent,null);
}",0.9878391019644528
28998,"@Override public void overwriteOrAdd(ComplexEventChunk overwritingOrAddingEventChunk,Operator operator,int[] mappingPosition){
  operator.overwriteOrAdd(overwritingOrAddingEventChunk,null,null);
  if (isCachingEnabled) {
    ((RDBMSOperator)operator).getInMemoryEventTableOperator().overwriteOrAdd(overwritingOrAddingEventChunk,cachedTable.getCacheList(),mappingPosition);
  }
}","@Override public synchronized void overwriteOrAdd(ComplexEventChunk overwritingOrAddingEventChunk,Operator operator,int[] mappingPosition){
  operator.overwriteOrAdd(overwritingOrAddingEventChunk,null,null);
  if (isCachingEnabled) {
    ((RDBMSOperator)operator).getInMemoryEventTableOperator().overwriteOrAdd(overwritingOrAddingEventChunk,cachedTable.getCacheList(),mappingPosition);
  }
}",0.9830949284785436
28999,"/** 
 * Called to find a event from event table
 */
@Override public StreamEvent find(ComplexEvent matchingEvent,Finder finder){
  return finder.find(matchingEvent,null,null);
}","/** 
 * Called to find a event from event table
 */
@Override public synchronized StreamEvent find(ComplexEvent matchingEvent,Finder finder){
  return finder.find(matchingEvent,null,null);
}",0.9645776566757494
29000,"/** 
 * Called when updating the event table entries
 * @param updatingEventChunk Event list that needs to be updated
 * @param operator           Operator that perform RDBMS related operations
 */
@Override public void update(ComplexEventChunk updatingEventChunk,Operator operator,int[] mappingPosition){
  operator.update(updatingEventChunk,null,null);
  if (isCachingEnabled) {
    ((RDBMSOperator)operator).getInMemoryEventTableOperator().update(updatingEventChunk,cachedTable.getCacheList(),mappingPosition);
  }
}","/** 
 * Called when updating the event table entries
 * @param updatingEventChunk Event list that needs to be updated
 * @param operator           Operator that perform RDBMS related operations
 */
@Override public synchronized void update(ComplexEventChunk updatingEventChunk,Operator operator,int[] mappingPosition){
  operator.update(updatingEventChunk,null,null);
  if (isCachingEnabled) {
    ((RDBMSOperator)operator).getInMemoryEventTableOperator().update(updatingEventChunk,cachedTable.getCacheList(),mappingPosition);
  }
}",0.9876308277830638
